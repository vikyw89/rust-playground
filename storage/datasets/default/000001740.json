{
	"title": "File in std::fs - Rust",
	"url": "https://doc.rust-lang.org/stable/std/fs/struct.File.html",
	"markdown": "# File in std::fs - Rust\n\n## Struct [std](../index.html)::[fs](index.html)::[File](#)\n\n1.0.0 · [source](about:blank/src/std/fs.rs.html#106-108) ·\n\n```\npub struct File { /* private fields */ }\n```\n\nExpand description\n\nAn object providing access to an open file on the filesystem.\n\nAn instance of a `File` can be read and/or written depending on what options it was opened with. Files also implement [`Seek`](../io/trait.Seek.html \"trait std::io::Seek\") to alter the logical cursor that the file contains internally.\n\nFiles are automatically closed when they go out of scope. Errors detected on closing are ignored by the implementation of `Drop`. Use the method [`sync_all`](about:blank/struct.File.html#method.sync_all \"method std::fs::File::sync_all\") if these errors must be manually handled.\n\n`File` does not buffer reads and writes. For efficiency, consider wrapping the file in a [`BufReader`](../io/struct.BufReader.html \"struct std::io::BufReader\") or [`BufWriter`](../io/struct.BufWriter.html \"struct std::io::BufWriter\") when performing many small [`read`](about:blank/struct.File.html#method.read \"method std::fs::File::read\") or [`write`](about:blank/struct.File.html#method.write \"method std::fs::File::write\") calls, unless unbuffered reads and writes are required.\n\n## [§](#examples)Examples\n\nCreates a new file and write bytes to it (you can also use [`write`](about:blank/struct.File.html#method.write \"method std::fs::File::write\")):\n\n```\nuse std::fs::File;\nuse std::io::prelude::*;\n\nfn main() -> std::io::Result<()> {\n    let mut file = File::create(\"foo.txt\")?;\n    file.write_all(b\"Hello, world!\")?;\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs::File;%0Ause+std::io::prelude::*;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+mut+file+=+File::create(%22foo.txt%22)?;%0A++++file.write_all(b%22Hello,+world!%22)?;%0A++++Ok(())%0A%7D&edition=2021)\n\nRead the contents of a file into a [`String`](../string/struct.String.html \"struct std::string::String\") (you can also use [`read`](about:blank/struct.File.html#method.read \"method std::fs::File::read\")):\n\n```\nuse std::fs::File;\nuse std::io::prelude::*;\n\nfn main() -> std::io::Result<()> {\n    let mut file = File::open(\"foo.txt\")?;\n    let mut contents = String::new();\n    file.read_to_string(&mut contents)?;\n    assert_eq!(contents, \"Hello, world!\");\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs::File;%0Ause+std::io::prelude::*;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+mut+file+=+File::open(%22foo.txt%22)?;%0A++++let+mut+contents+=+String::new();%0A++++file.read_to_string(%26mut+contents)?;%0A++++assert_eq!(contents,+%22Hello,+world!%22);%0A++++Ok(())%0A%7D&edition=2021)\n\nUsing a buffered [`Read`](about:blank/struct.File.html#method.read \"method std::fs::File::read\")er:\n\n```\nuse std::fs::File;\nuse std::io::BufReader;\nuse std::io::prelude::*;\n\nfn main() -> std::io::Result<()> {\n    let file = File::open(\"foo.txt\")?;\n    let mut buf_reader = BufReader::new(file);\n    let mut contents = String::new();\n    buf_reader.read_to_string(&mut contents)?;\n    assert_eq!(contents, \"Hello, world!\");\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs::File;%0Ause+std::io::BufReader;%0Ause+std::io::prelude::*;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+file+=+File::open(%22foo.txt%22)?;%0A++++let+mut+buf_reader+=+BufReader::new(file);%0A++++let+mut+contents+=+String::new();%0A++++buf_reader.read_to_string(%26mut+contents)?;%0A++++assert_eq!(contents,+%22Hello,+world!%22);%0A++++Ok(())%0A%7D&edition=2021)\n\nNote that, although read and write methods require a `&mut File`, because of the interfaces for [`Read`](about:blank/struct.File.html#method.read \"method std::fs::File::read\") and [`Write`](about:blank/struct.File.html#method.write \"method std::fs::File::write\"), the holder of a `&File` can still modify the file, either through methods that take `&File` or by retrieving the underlying OS object and modifying the file that way. Additionally, many operating systems allow concurrent modification of files by different processes. Avoid assuming that holding a `&File` means that the file will not change.\n\n## [§](#platform-specific-behavior)Platform-specific behavior\n\nOn Windows, the implementation of [`Read`](about:blank/struct.File.html#method.read \"method std::fs::File::read\") and [`Write`](about:blank/struct.File.html#method.write \"method std::fs::File::write\") traits for `File` perform synchronous I/O operations. Therefore the underlying file must not have been opened for asynchronous I/O (e.g. by using `FILE_FLAG_OVERLAPPED`).\n\n[source](about:blank/src/std/fs.rs.html#346-727)[§](#impl-File)\n\n1.0.0 · [source](about:blank/src/std/fs.rs.html#374-376)\n\nAttempts to open a file in read-only mode.\n\nSee the [`OpenOptions::open`](about:blank/struct.OpenOptions.html#method.open \"method std::fs::OpenOptions::open\") method for more details.\n\nIf you only need to read the entire file contents, consider [`std::fs::read()`](fn.read.html \"fn std::fs::read\") or [`std::fs::read_to_string()`](fn.read_to_string.html \"fn std::fs::read_to_string\") instead.\n\n##### [§](#errors)Errors\n\nThis function will return an error if `path` does not already exist. Other errors may also be returned according to [`OpenOptions::open`](about:blank/struct.OpenOptions.html#method.open \"method std::fs::OpenOptions::open\").\n\n##### [§](#examples-1)Examples\n\n```\nuse std::fs::File;\nuse std::io::Read;\n\nfn main() -> std::io::Result<()> {\n    let mut f = File::open(\"foo.txt\")?;\n    let mut data = vec![];\n    f.read_to_end(&mut data)?;\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs::File;%0Ause+std::io::Read;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+mut+f+=+File::open(%22foo.txt%22)?;%0A++++let+mut+data+=+vec!%5B%5D;%0A++++f.read_to_end(%26mut+data)?;%0A++++Ok(())%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/fs.rs.html#403-405)\n\nOpens a file in write-only mode.\n\nThis function will create a file if it does not exist, and will truncate it if it does.\n\nDepending on the platform, this function may fail if the full directory path does not exist. See the [`OpenOptions::open`](about:blank/struct.OpenOptions.html#method.open \"method std::fs::OpenOptions::open\") function for more details.\n\nSee also [`std::fs::write()`](fn.write.html \"fn std::fs::write\") for a simple function to create a file with some given data.\n\n##### [§](#examples-2)Examples\n\n```\nuse std::fs::File;\nuse std::io::Write;\n\nfn main() -> std::io::Result<()> {\n    let mut f = File::create(\"foo.txt\")?;\n    f.write_all(&1234_u32.to_be_bytes())?;\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs::File;%0Ause+std::io::Write;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+mut+f+=+File::create(%22foo.txt%22)?;%0A++++f.write_all(%261234_u32.to_be_bytes())?;%0A++++Ok(())%0A%7D&edition=2021)\n\n1.77.0 · [source](about:blank/src/std/fs.rs.html#437-439)\n\nCreates a new file in read-write mode; error if the file exists.\n\nThis function will create a file if it does not exist, or return an error if it does. This way, if the call succeeds, the file returned is guaranteed to be new. If a file exists at the target location, creating a new file will fail with [`AlreadyExists`](about:blank/io/enum.ErrorKind.html#variant.AlreadyExists \"variant std::io::ErrorKind::AlreadyExists\") or another error based on the situation. See [`OpenOptions::open`](about:blank/struct.OpenOptions.html#method.open \"method std::fs::OpenOptions::open\") for a non-exhaustive list of likely errors.\n\nThis option is useful because it is atomic. Otherwise between checking whether a file exists and creating a new one, the file may have been created by another process (a TOCTOU race condition / attack).\n\nThis can also be written using `File::options().read(true).write(true).create_new(true).open(...)`.\n\n##### [§](#examples-3)Examples\n\n```\nuse std::fs::File;\nuse std::io::Write;\n\nfn main() -> std::io::Result<()> {\n    let mut f = File::create_new(\"foo.txt\")?;\n    f.write_all(\"Hello, world!\".as_bytes())?;\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs::File;%0Ause+std::io::Write;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+mut+f+=+File::create_new(%22foo.txt%22)?;%0A++++f.write_all(%22Hello,+world!%22.as_bytes())?;%0A++++Ok(())%0A%7D&edition=2021)\n\n1.58.0 · [source](about:blank/src/std/fs.rs.html#469-471)\n\nReturns a new OpenOptions object.\n\nThis function returns a new OpenOptions object that you can use to open or create a file with specific options if `open()` or `create()` are not appropriate.\n\nIt is equivalent to `OpenOptions::new()`, but allows you to write more readable code. Instead of `OpenOptions::new().append(true).open(\"example.log\")`, you can write `File::options().append(true).open(\"example.log\")`. This also avoids the need to import `OpenOptions`.\n\nSee the [`OpenOptions::new`](about:blank/struct.OpenOptions.html#method.new \"associated function std::fs::OpenOptions::new\") function for more details.\n\n##### [§](#examples-4)Examples\n\n```\nuse std::fs::File;\nuse std::io::Write;\n\nfn main() -> std::io::Result<()> {\n    let mut f = File::options().append(true).open(\"example.log\")?;\n    writeln!(&mut f, \"new line\")?;\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs::File;%0Ause+std::io::Write;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+mut+f+=+File::options().append(true).open(%22example.log%22)?;%0A++++writeln!(%26mut+f,+%22new+line%22)?;%0A++++Ok(())%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/fs.rs.html#504-506)\n\nAttempts to sync all OS-internal file content and metadata to disk.\n\nThis function will attempt to ensure that all in-memory data reaches the filesystem before returning.\n\nThis can be used to handle errors that would otherwise only be caught when the `File` is closed, as dropping a `File` will ignore all errors. Note, however, that `sync_all` is generally more expensive than closing a file by dropping it, because the latter is not required to block until the data has been written to the filesystem.\n\nIf synchronizing the metadata is not required, use [`sync_data`](about:blank/struct.File.html#method.sync_data \"method std::fs::File::sync_data\") instead.\n\n##### [§](#examples-5)Examples\n\n```\nuse std::fs::File;\nuse std::io::prelude::*;\n\nfn main() -> std::io::Result<()> {\n    let mut f = File::create(\"foo.txt\")?;\n    f.write_all(b\"Hello, world!\")?;\n\n    f.sync_all()?;\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs::File;%0Ause+std::io::prelude::*;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+mut+f+=+File::create(%22foo.txt%22)?;%0A++++f.write_all(b%22Hello,+world!%22)?;%0A%0A++++f.sync_all()?;%0A++++Ok(())%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/fs.rs.html#536-538)\n\nThis function is similar to [`sync_all`](about:blank/struct.File.html#method.sync_all \"method std::fs::File::sync_all\"), except that it might not synchronize file metadata to the filesystem.\n\nThis is intended for use cases that must synchronize content, but don’t need the metadata on disk. The goal of this method is to reduce disk operations.\n\nNote that some platforms may simply implement this in terms of [`sync_all`](about:blank/struct.File.html#method.sync_all \"method std::fs::File::sync_all\").\n\n##### [§](#examples-6)Examples\n\n```\nuse std::fs::File;\nuse std::io::prelude::*;\n\nfn main() -> std::io::Result<()> {\n    let mut f = File::create(\"foo.txt\")?;\n    f.write_all(b\"Hello, world!\")?;\n\n    f.sync_data()?;\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs::File;%0Ause+std::io::prelude::*;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+mut+f+=+File::create(%22foo.txt%22)?;%0A++++f.write_all(b%22Hello,+world!%22)?;%0A%0A++++f.sync_data()?;%0A++++Ok(())%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/fs.rs.html#574-576)\n\nTruncates or extends the underlying file, updating the size of this file to become `size`.\n\nIf the `size` is less than the current file’s size, then the file will be shrunk. If it is greater than the current file’s size, then the file will be extended to `size` and have all of the intermediate data filled in with 0s.\n\nThe file’s cursor isn’t changed. In particular, if the cursor was at the end and the file is shrunk using this operation, the cursor will now be past the end.\n\n##### [§](#errors-1)Errors\n\nThis function will return an error if the file is not opened for writing. Also, [`std::io::ErrorKind::InvalidInput`](about:blank/io/enum.ErrorKind.html#variant.InvalidInput \"variant std::io::ErrorKind::InvalidInput\") will be returned if the desired length would cause an overflow due to the implementation specifics.\n\n##### [§](#examples-7)Examples\n\n```\nuse std::fs::File;\n\nfn main() -> std::io::Result<()> {\n    let mut f = File::create(\"foo.txt\")?;\n    f.set_len(10)?;\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs::File;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+mut+f+=+File::create(%22foo.txt%22)?;%0A++++f.set_len(10)?;%0A++++Ok(())%0A%7D&edition=2021)\n\nNote that this method alters the content of the underlying file, even though it takes `&self` rather than `&mut self`.\n\n1.0.0 · [source](about:blank/src/std/fs.rs.html#592-594)\n\nQueries metadata about the underlying file.\n\n##### [§](#examples-8)Examples\n\n```\nuse std::fs::File;\n\nfn main() -> std::io::Result<()> {\n    let mut f = File::open(\"foo.txt\")?;\n    let metadata = f.metadata()?;\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs::File;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+mut+f+=+File::open(%22foo.txt%22)?;%0A++++let+metadata+=+f.metadata()?;%0A++++Ok(())%0A%7D&edition=2021)\n\n1.9.0 · [source](about:blank/src/std/fs.rs.html#636-638)\n\nCreates a new `File` instance that shares the same underlying file handle as the existing `File` instance. Reads, writes, and seeks will affect both `File` instances simultaneously.\n\n##### [§](#examples-9)Examples\n\nCreates two handles for a file named `foo.txt`:\n\n```\nuse std::fs::File;\n\nfn main() -> std::io::Result<()> {\n    let mut file = File::open(\"foo.txt\")?;\n    let file_copy = file.try_clone()?;\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs::File;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+mut+file+=+File::open(%22foo.txt%22)?;%0A++++let+file_copy+=+file.try_clone()?;%0A++++Ok(())%0A%7D&edition=2021)\n\nAssuming there’s a file named `foo.txt` with contents `abcdef\\n`, create two handles, seek one of them, and read the remaining bytes from the other handle:\n\n```\nuse std::fs::File;\nuse std::io::SeekFrom;\nuse std::io::prelude::*;\n\nfn main() -> std::io::Result<()> {\n    let mut file = File::open(\"foo.txt\")?;\n    let mut file_copy = file.try_clone()?;\n\n    file.seek(SeekFrom::Start(3))?;\n\n    let mut contents = vec![];\n    file_copy.read_to_end(&mut contents)?;\n    assert_eq!(contents, b\"def\\n\");\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs::File;%0Ause+std::io::SeekFrom;%0Ause+std::io::prelude::*;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+mut+file+=+File::open(%22foo.txt%22)?;%0A++++let+mut+file_copy+=+file.try_clone()?;%0A%0A++++file.seek(SeekFrom::Start(3))?;%0A%0A++++let+mut+contents+=+vec!%5B%5D;%0A++++file_copy.read_to_end(%26mut+contents)?;%0A++++assert_eq!(contents,+b%22def%5Cn%22);%0A++++Ok(())%0A%7D&edition=2021)\n\n1.16.0 · [source](about:blank/src/std/fs.rs.html#674-676)\n\nChanges the permissions on the underlying file.\n\n##### [§](#platform-specific-behavior-1)Platform-specific behavior\n\nThis function currently corresponds to the `fchmod` function on Unix and the `SetFileInformationByHandle` function on Windows. Note that, this [may change in the future](about:blank/io/index.html#platform-specific-behavior \"mod std::io\").\n\n##### [§](#errors-2)Errors\n\nThis function will return an error if the user lacks permission change attributes on the underlying file. It may also return an error in other os-specific unspecified cases.\n\n##### [§](#examples-10)Examples\n\n```\nfn main() -> std::io::Result<()> {\n    use std::fs::File;\n\n    let file = File::open(\"foo.txt\")?;\n    let mut perms = file.metadata()?.permissions();\n    perms.set_readonly(true);\n    file.set_permissions(perms)?;\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++use+std::fs::File;%0A%0A++++let+file+=+File::open(%22foo.txt%22)?;%0A++++let+mut+perms+=+file.metadata()?.permissions();%0A++++perms.set_readonly(true);%0A++++file.set_permissions(perms)?;%0A++++Ok(())%0A%7D&edition=2021)\n\nNote that this method alters the permissions of the underlying file, even though it takes `&self` rather than `&mut self`.\n\n1.75.0 · [source](about:blank/src/std/fs.rs.html#715-717)\n\nChanges the timestamps of the underlying file.\n\n##### [§](#platform-specific-behavior-2)Platform-specific behavior\n\nThis function currently corresponds to the `futimens` function on Unix (falling back to `futimes` on macOS before 10.13) and the `SetFileTime` function on Windows. Note that this [may change in the future](about:blank/io/index.html#platform-specific-behavior \"mod std::io\").\n\n##### [§](#errors-3)Errors\n\nThis function will return an error if the user lacks permission to change timestamps on the underlying file. It may also return an error in other os-specific unspecified cases.\n\nThis function may return an error if the operating system lacks support to change one or more of the timestamps set in the `FileTimes` structure.\n\n##### [§](#examples-11)Examples\n\n```\nfn main() -> std::io::Result<()> {\n    use std::fs::{self, File, FileTimes};\n\n    let src = fs::metadata(\"src\")?;\n    let dest = File::options().write(true).open(\"dest\")?;\n    let times = FileTimes::new()\n        .set_accessed(src.accessed()?)\n        .set_modified(src.modified()?);\n    dest.set_times(times)?;\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++use+std::fs::%7Bself,+File,+FileTimes%7D;%0A%0A++++let+src+=+fs::metadata(%22src%22)?;%0A++++let+dest+=+File::options().write(true).open(%22dest%22)?;%0A++++let+times+=+FileTimes::new()%0A++++++++.set_accessed(src.accessed()?)%0A++++++++.set_modified(src.modified()?);%0A++++dest.set_times(times)?;%0A++++Ok(())%0A%7D&edition=2021)\n\n1.75.0 · [source](about:blank/src/std/fs.rs.html#724-726)\n\nChanges the modification time of the underlying file.\n\nThis is an alias for `set_times(FileTimes::new().set_modified(time))`.\n\n1.63.0 · [source](about:blank/src/std/os/fd/owned.rs.html#284-289)[§](#impl-AsFd-for-File)\n\n1.63.0 · [source](about:blank/src/std/os/windows/io/handle.rs.html#522-527)[§](#impl-AsHandle-for-File)\n\nAvailable on **Windows** only.\n\n1.0.0 · [source](about:blank/src/std/os/fd/raw.rs.html#168-173)[§](#impl-AsRawFd-for-File)\n\n1.0.0 · [source](about:blank/src/std/os/windows/io/raw.rs.html#97-102)[§](#impl-AsRawHandle-for-File)\n\nAvailable on **Windows** only.\n\n1.0.0 · [source](about:blank/src/std/fs.rs.html#753-757)[§](#impl-Debug-for-File)\n\n1.15.0 · [source](about:blank/src/std/os/windows/fs.rs.html#88-96)[§](#impl-FileExt-for-File)\n\nAvailable on **Windows** only.\n\n1.15.0 · [source](about:blank/src/std/os/unix/fs.rs.html#263-276)[§](#impl-FileExt-for-File-1)\n\nAvailable on **Unix** only.\n\n[source](about:blank/src/std/os/unix/fs.rs.html#264-266)[§](#method.read_at)\n\nReads a number of bytes starting from a given offset. [Read more](about:blank/os/unix/fs/trait.FileExt.html#tymethod.read_at)\n\n[source](about:blank/src/std/os/unix/fs.rs.html#267-269)[§](#method.read_vectored_at)\n\n🔬This is a nightly-only experimental API. (`unix_file_vectored_at` [#89517](https://github.com/rust-lang/rust/issues/89517))\n\nLike `read_at`, except that it reads into a slice of buffers. [Read more](about:blank/os/unix/fs/trait.FileExt.html#method.read_vectored_at)\n\n[source](about:blank/src/std/os/unix/fs.rs.html#270-272)[§](#method.write_at)\n\nWrites a number of bytes starting from a given offset. [Read more](about:blank/os/unix/fs/trait.FileExt.html#tymethod.write_at)\n\n[source](about:blank/src/std/os/unix/fs.rs.html#273-275)[§](#method.write_vectored_at)\n\n🔬This is a nightly-only experimental API. (`unix_file_vectored_at` [#89517](https://github.com/rust-lang/rust/issues/89517))\n\nLike `write_at`, except that it writes from a slice of buffers. [Read more](about:blank/os/unix/fs/trait.FileExt.html#method.write_vectored_at)\n\n1.33.0 · [source](about:blank/src/std/os/unix/fs.rs.html#117-131)[§](#method.read_exact_at)\n\nReads the exact number of bytes required to fill `buf` from the given offset. [Read more](about:blank/os/unix/fs/trait.FileExt.html#method.read_exact_at)\n\n1.33.0 · [source](about:blank/src/std/os/unix/fs.rs.html#244-259)[§](#method.write_all_at)\n\nAttempts to write an entire buffer starting from a given offset. [Read more](about:blank/os/unix/fs/trait.FileExt.html#method.write_all_at)\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#234-298)[§](#impl-FileExt-for-File-2)\n\nAvailable on **WASI** only.\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#235-237)[§](#method.read_vectored_at-1)\n\n🔬This is a nightly-only experimental API. (`wasi_ext` [#71213](https://github.com/rust-lang/rust/issues/71213))\n\nReads a number of bytes starting from a given offset. [Read more](about:blank/os/wasi/fs/trait.FileExt.html#tymethod.read_vectored_at)\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#239-241)[§](#method.write_vectored_at-1)\n\n🔬This is a nightly-only experimental API. (`wasi_ext` [#71213](https://github.com/rust-lang/rust/issues/71213))\n\nWrites a number of bytes starting from a given offset. [Read more](about:blank/os/wasi/fs/trait.FileExt.html#tymethod.write_vectored_at)\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#243-245)[§](#method.tell)\n\n🔬This is a nightly-only experimental API. (`wasi_ext` [#71213](https://github.com/rust-lang/rust/issues/71213))\n\nReturns the current position within the file. [Read more](about:blank/os/wasi/fs/trait.FileExt.html#tymethod.tell)\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#247-249)[§](#method.fdstat_set_flags)\n\n🔬This is a nightly-only experimental API. (`wasi_ext` [#71213](https://github.com/rust-lang/rust/issues/71213))\n\nAdjust the flags associated with this file. [Read more](about:blank/os/wasi/fs/trait.FileExt.html#tymethod.fdstat_set_flags)\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#251-253)[§](#method.fdstat_set_rights)\n\n🔬This is a nightly-only experimental API. (`wasi_ext` [#71213](https://github.com/rust-lang/rust/issues/71213))\n\nAdjust the rights associated with this file. [Read more](about:blank/os/wasi/fs/trait.FileExt.html#tymethod.fdstat_set_rights)\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#255-272)[§](#method.advise)\n\n🔬This is a nightly-only experimental API. (`wasi_ext` [#71213](https://github.com/rust-lang/rust/issues/71213))\n\nProvide file advisory information on a file descriptor. [Read more](about:blank/os/wasi/fs/trait.FileExt.html#tymethod.advise)\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#274-276)[§](#method.allocate)\n\n🔬This is a nightly-only experimental API. (`wasi_ext` [#71213](https://github.com/rust-lang/rust/issues/71213))\n\nForce the allocation of space in a file. [Read more](about:blank/os/wasi/fs/trait.FileExt.html#tymethod.allocate)\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#278-280)[§](#method.create_directory)\n\n🔬This is a nightly-only experimental API. (`wasi_ext` [#71213](https://github.com/rust-lang/rust/issues/71213))\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#282-284)[§](#method.read_link)\n\n🔬This is a nightly-only experimental API. (`wasi_ext` [#71213](https://github.com/rust-lang/rust/issues/71213))\n\nRead the contents of a symbolic link. [Read more](about:blank/os/wasi/fs/trait.FileExt.html#tymethod.read_link)\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#286-289)[§](#method.metadata_at)\n\n🔬This is a nightly-only experimental API. (`wasi_ext` [#71213](https://github.com/rust-lang/rust/issues/71213))\n\nReturn the attributes of a file or directory. [Read more](about:blank/os/wasi/fs/trait.FileExt.html#tymethod.metadata_at)\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#291-293)[§](#method.remove_file)\n\n🔬This is a nightly-only experimental API. (`wasi_ext` [#71213](https://github.com/rust-lang/rust/issues/71213))\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#295-297)[§](#method.remove_directory)\n\n🔬This is a nightly-only experimental API. (`wasi_ext` [#71213](https://github.com/rust-lang/rust/issues/71213))\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#30-33)[§](#method.read_at-1)\n\n🔬This is a nightly-only experimental API. (`wasi_ext` [#71213](https://github.com/rust-lang/rust/issues/71213))\n\nReads a number of bytes starting from a given offset. [Read more](about:blank/os/wasi/fs/trait.FileExt.html#method.read_at)\n\n1.33.0 · [source](about:blank/src/std/os/wasi/fs.rs.html#76-90)[§](#method.read_exact_at-1)\n\nReads the exact number of byte required to fill `buf` from the given offset. [Read more](about:blank/os/wasi/fs/trait.FileExt.html#method.read_exact_at)\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#106-109)[§](#method.write_at-1)\n\n🔬This is a nightly-only experimental API. (`wasi_ext` [#71213](https://github.com/rust-lang/rust/issues/71213))\n\nWrites a number of bytes starting from a given offset. [Read more](about:blank/os/wasi/fs/trait.FileExt.html#method.write_at)\n\n1.33.0 · [source](about:blank/src/std/os/wasi/fs.rs.html#148-163)[§](#method.write_all_at-1)\n\nAttempts to write an entire buffer starting from a given offset. [Read more](about:blank/os/wasi/fs/trait.FileExt.html#method.write_all_at)\n\n1.63.0 · [source](about:blank/src/std/os/fd/owned.rs.html#292-298)[§](#impl-From%3CFile%3E-for-OwnedFd)\n\n[source](about:blank/src/std/os/fd/owned.rs.html#295-297)[§](#method.from-4)\n\nTakes ownership of a [`File`](struct.File.html \"struct std::fs::File\")’s underlying file descriptor.\n\n1.63.0 · [source](about:blank/src/std/os/windows/io/handle.rs.html#530-536)[§](#impl-From%3CFile%3E-for-OwnedHandle)\n\nAvailable on **Windows** only.\n\n[source](about:blank/src/std/os/windows/io/handle.rs.html#533-535)[§](#method.from-1)\n\nTakes ownership of a [`File`](struct.File.html \"struct std::fs::File\")’s underlying file handle.\n\n1.20.0 · [source](about:blank/src/std/process.rs.html#1566-1590)[§](#impl-From%3CFile%3E-for-Stdio)\n\n[source](about:blank/src/std/process.rs.html#1587-1589)[§](#method.from-3)\n\nConverts a [`File`](struct.File.html \"struct std::fs::File\") into a [`Stdio`](../process/struct.Stdio.html \"struct std::process::Stdio\").\n\n##### [§](#examples-12)Examples\n\n`File` will be converted to `Stdio` using `Stdio::from` under the hood.\n\n```\nuse std::fs::File;\nuse std::process::Command;\n\n// With the `foo.txt` file containing \"Hello, world!\"\nlet file = File::open(\"foo.txt\").unwrap();\n\nlet reverse = Command::new(\"rev\")\n    .stdin(file)  // Implicit File conversion into a Stdio\n    .output()\n    .expect(\"failed reverse command\");\n\nassert_eq!(reverse.stdout, b\"!dlrow ,olleH\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fs::File;%0A++++use+std::process::Command;%0A++++%0A++++//+With+the+%60foo.txt%60+file+containing+%22Hello,+world!%22%0A++++let+file+=+File::open(%22foo.txt%22).unwrap();%0A++++%0A++++let+reverse+=+Command::new(%22rev%22)%0A++++++++.stdin(file)++//+Implicit+File+conversion+into+a+Stdio%0A++++++++.output()%0A++++++++.expect(%22failed+reverse+command%22);%0A++++%0A++++assert_eq!(reverse.stdout,+b%22!dlrow+,olleH%22);%0A%7D&edition=2021)\n\n1.63.0 · [source](about:blank/src/std/os/fd/owned.rs.html#301-308)[§](#impl-From%3COwnedFd%3E-for-File)\n\n[source](about:blank/src/std/os/fd/owned.rs.html#305-307)[§](#method.from-2)\n\nReturns a [`File`](struct.File.html \"struct std::fs::File\") that takes ownership of the given file descriptor.\n\n1.63.0 · [source](about:blank/src/std/os/windows/io/handle.rs.html#539-545)[§](#impl-From%3COwnedHandle%3E-for-File)\n\nAvailable on **Windows** only.\n\n[source](about:blank/src/std/os/windows/io/handle.rs.html#542-544)[§](#method.from)\n\nReturns a [`File`](struct.File.html \"struct std::fs::File\") that takes ownership of the given handle.\n\n1.1.0 · [source](about:blank/src/std/os/fd/raw.rs.html#175-180)[§](#impl-FromRawFd-for-File)\n\n[source](about:blank/src/std/os/fd/raw.rs.html#177-179)[§](#method.from_raw_fd)\n\nConstructs a new instance of `Self` from the given raw file descriptor. [Read more](about:blank/os/fd/trait.FromRawFd.html#tymethod.from_raw_fd)\n\n1.1.0 · [source](about:blank/src/std/os/windows/io/raw.rs.html#159-167)[§](#impl-FromRawHandle-for-File)\n\nAvailable on **Windows** only.\n\n1.4.0 · [source](about:blank/src/std/os/fd/raw.rs.html#182-187)[§](#impl-IntoRawFd-for-File)\n\n[source](about:blank/src/std/os/fd/raw.rs.html#184-186)[§](#method.into_raw_fd)\n\nConsumes this object, returning the raw underlying file descriptor. [Read more](about:blank/os/fd/trait.IntoRawFd.html#tymethod.into_raw_fd)\n\n1.4.0 · [source](about:blank/src/std/os/windows/io/raw.rs.html#170-175)[§](#impl-IntoRawHandle-for-File)\n\nAvailable on **Windows** only.\n\n1.70.0 · [source](about:blank/src/std/io/stdio.rs.html#1217)[§](#impl-IsTerminal-for-File)\n\n[source](about:blank/src/std/io/stdio.rs.html#1217)[§](#method.is_terminal)\n\nReturns `true` if the descriptor/handle refers to a terminal/tty. [Read more](about:blank/io/trait.IsTerminal.html#tymethod.is_terminal)\n\n1.0.0 · [source](about:blank/src/std/fs.rs.html#769-835)[§](#impl-Read-for-%26File)\n\n[source](about:blank/src/std/fs.rs.html#782-784)[§](#method.read-1)\n\nRead some bytes from the file.\n\nSee [`Read::read`](about:blank/io/trait.Read.html#tymethod.read \"method std::io::Read::read\") docs for more info.\n\n##### [§](#platform-specific-behavior-3)Platform-specific behavior\n\nThis function currently corresponds to the `read` function on Unix and the `NtReadFile` function on Windows. Note that this [may change in the future](about:blank/io/index.html#platform-specific-behavior \"mod std::io\").\n\n[source](about:blank/src/std/fs.rs.html#798-800)[§](#method.read_vectored-1)\n\nLike `read`, except that it reads into a slice of buffers.\n\nSee [`Read::read_vectored`](about:blank/io/trait.Read.html#method.read_vectored \"method std::io::Read::read_vectored\") docs for more info.\n\n##### [§](#platform-specific-behavior-4)Platform-specific behavior\n\nThis function currently corresponds to the `readv` function on Unix and falls back to the `read` implementation on Windows. Note that this [may change in the future](about:blank/io/index.html#platform-specific-behavior \"mod std::io\").\n\n[source](about:blank/src/std/fs.rs.html#818-820)[§](#method.is_read_vectored-1)\n\n🔬This is a nightly-only experimental API. (`can_vector` [#69941](https://github.com/rust-lang/rust/issues/69941))\n\nDetermines if `File` has an efficient `read_vectored` implementation.\n\nSee [`Read::is_read_vectored`](about:blank/io/trait.Read.html#method.is_read_vectored \"method std::io::Read::is_read_vectored\") docs for more info.\n\n##### [§](#platform-specific-behavior-5)Platform-specific behavior\n\nThis function currently returns `true` on Unix an `false` on Windows. Note that this [may change in the future](about:blank/io/index.html#platform-specific-behavior \"mod std::io\").\n\n[source](about:blank/src/std/fs.rs.html#803-805)[§](#method.read_buf-1)\n\n🔬This is a nightly-only experimental API. (`read_buf` [#78485](https://github.com/rust-lang/rust/issues/78485))\n\nPull some bytes from this source into the specified buffer. [Read more](about:blank/io/trait.Read.html#method.read_buf)\n\n[source](about:blank/src/std/fs.rs.html#823-827)[§](#method.read_to_end-1)\n\nRead all bytes until EOF in this source, placing them into `buf`. [Read more](about:blank/io/trait.Read.html#method.read_to_end)\n\n[source](about:blank/src/std/fs.rs.html#830-834)[§](#method.read_to_string-1)\n\nRead all bytes until EOF in this source, appending them to `buf`. [Read more](about:blank/io/trait.Read.html#method.read_to_string)\n\n1.6.0 · [source](about:blank/src/std/io/mod.rs.html#961-963)[§](#method.read_exact-1)\n\nRead the exact number of bytes required to fill `buf`. [Read more](about:blank/io/trait.Read.html#method.read_exact)\n\n[source](about:blank/src/std/io/mod.rs.html#995-997)[§](#method.read_buf_exact-1)\n\n🔬This is a nightly-only experimental API. (`read_buf` [#78485](https://github.com/rust-lang/rust/issues/78485))\n\nRead the exact number of bytes required to fill `cursor`. [Read more](about:blank/io/trait.Read.html#method.read_buf_exact)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1034-1039)[§](#method.by_ref-1)\n\nCreates a “by reference” adaptor for this instance of `Read`. [Read more](about:blank/io/trait.Read.html#method.by_ref)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1077-1082)[§](#method.bytes-1)\n\nTransforms this `Read` instance to an [`Iterator`](../iter/trait.Iterator.html \"trait std::iter::Iterator\") over its bytes. [Read more](about:blank/io/trait.Read.html#method.bytes)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1115-1120)[§](#method.chain-1)\n\nCreates an adapter which will chain this stream with another. [Read more](about:blank/io/trait.Read.html#method.chain)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1154-1159)[§](#method.take-1)\n\nCreates an adapter which will read at most `limit` bytes from it. [Read more](about:blank/io/trait.Read.html#method.take)\n\n1.0.0 · [source](about:blank/src/std/fs.rs.html#908-928)[§](#impl-Read-for-File)\n\n[source](about:blank/src/std/fs.rs.html#909-911)[§](#method.read)\n\nPull some bytes from this source into the specified buffer, returning how many bytes were read. [Read more](about:blank/io/trait.Read.html#tymethod.read)\n\n[source](about:blank/src/std/fs.rs.html#912-914)[§](#method.read_vectored)\n\nLike `read`, except that it reads into a slice of buffers. [Read more](about:blank/io/trait.Read.html#method.read_vectored)\n\n[source](about:blank/src/std/fs.rs.html#915-917)[§](#method.read_buf)\n\n🔬This is a nightly-only experimental API. (`read_buf` [#78485](https://github.com/rust-lang/rust/issues/78485))\n\nPull some bytes from this source into the specified buffer. [Read more](about:blank/io/trait.Read.html#method.read_buf)\n\n[source](about:blank/src/std/fs.rs.html#919-921)[§](#method.is_read_vectored)\n\n🔬This is a nightly-only experimental API. (`can_vector` [#69941](https://github.com/rust-lang/rust/issues/69941))\n\nDetermines if this `Read`er has an efficient `read_vectored` implementation. [Read more](about:blank/io/trait.Read.html#method.is_read_vectored)\n\n[source](about:blank/src/std/fs.rs.html#922-924)[§](#method.read_to_end)\n\nRead all bytes until EOF in this source, placing them into `buf`. [Read more](about:blank/io/trait.Read.html#method.read_to_end)\n\n[source](about:blank/src/std/fs.rs.html#925-927)[§](#method.read_to_string)\n\nRead all bytes until EOF in this source, appending them to `buf`. [Read more](about:blank/io/trait.Read.html#method.read_to_string)\n\n1.6.0 · [source](about:blank/src/std/io/mod.rs.html#961-963)[§](#method.read_exact)\n\nRead the exact number of bytes required to fill `buf`. [Read more](about:blank/io/trait.Read.html#method.read_exact)\n\n[source](about:blank/src/std/io/mod.rs.html#995-997)[§](#method.read_buf_exact)\n\n🔬This is a nightly-only experimental API. (`read_buf` [#78485](https://github.com/rust-lang/rust/issues/78485))\n\nRead the exact number of bytes required to fill `cursor`. [Read more](about:blank/io/trait.Read.html#method.read_buf_exact)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1034-1039)[§](#method.by_ref)\n\nCreates a “by reference” adaptor for this instance of `Read`. [Read more](about:blank/io/trait.Read.html#method.by_ref)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1077-1082)[§](#method.bytes)\n\nTransforms this `Read` instance to an [`Iterator`](../iter/trait.Iterator.html \"trait std::iter::Iterator\") over its bytes. [Read more](about:blank/io/trait.Read.html#method.bytes)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1115-1120)[§](#method.chain)\n\nCreates an adapter which will chain this stream with another. [Read more](about:blank/io/trait.Read.html#method.chain)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1154-1159)[§](#method.take)\n\nCreates an adapter which will read at most `limit` bytes from it. [Read more](about:blank/io/trait.Read.html#method.take)\n\n1.0.0 · [source](about:blank/src/std/fs.rs.html#901-905)[§](#impl-Seek-for-%26File)\n\n1.0.0 · [source](about:blank/src/std/fs.rs.html#947-951)[§](#impl-Seek-for-File)\n\n1.0.0 · [source](about:blank/src/std/fs.rs.html#837-899)[§](#impl-Write-for-%26File)\n\n[source](about:blank/src/std/fs.rs.html#849-851)[§](#method.write)\n\nWrite some bytes from the file.\n\nSee [`Write::write`](about:blank/io/trait.Write.html#tymethod.write \"method std::io::Write::write\") docs for more info.\n\n##### [§](#platform-specific-behavior-6)Platform-specific behavior\n\nThis function currently corresponds to the `write` function on Unix and the `NtWriteFile` function on Windows. Note that this [may change in the future](about:blank/io/index.html#platform-specific-behavior \"mod std::io\").\n\n[source](about:blank/src/std/fs.rs.html#864-866)[§](#method.write_vectored)\n\nLike `write`, except that it writes into a slice of buffers.\n\nSee [`Write::write_vectored`](about:blank/io/trait.Write.html#method.write_vectored \"method std::io::Write::write_vectored\") docs for more info.\n\n##### [§](#platform-specific-behavior-7)Platform-specific behavior\n\nThis function currently corresponds to the `writev` function on Unix and falls back to the `write` implementation on Windows. Note that this [may change in the future](about:blank/io/index.html#platform-specific-behavior \"mod std::io\").\n\n[source](about:blank/src/std/fs.rs.html#879-881)[§](#method.is_write_vectored)\n\n🔬This is a nightly-only experimental API. (`can_vector` [#69941](https://github.com/rust-lang/rust/issues/69941))\n\nDetermines if `File` has an efficient `write_vectored` implementation.\n\nSee [`Write::is_write_vectored`](about:blank/io/trait.Write.html#method.is_write_vectored \"method std::io::Write::is_write_vectored\") docs for more info.\n\n##### [§](#platform-specific-behavior-8)Platform-specific behavior\n\nThis function currently returns `true` on Unix an `false` on Windows. Note that this [may change in the future](about:blank/io/index.html#platform-specific-behavior \"mod std::io\").\n\n[source](about:blank/src/std/fs.rs.html#896-898)[§](#method.flush)\n\nFlushes the file, ensuring that all intermediately buffered contents reach their destination.\n\nSee [`Write::flush`](about:blank/io/trait.Write.html#tymethod.flush \"method std::io::Write::flush\") docs for more info.\n\n##### [§](#platform-specific-behavior-9)Platform-specific behavior\n\nSince a `File` structure doesn’t contain any buffers, this function is currently a no-op on Unix and Windows. Note that this [may change in the future](about:blank/io/index.html#platform-specific-behavior \"mod std::io\").\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1699-1711)[§](#method.write_all)\n\nAttempts to write an entire buffer into this writer. [Read more](about:blank/io/trait.Write.html#method.write_all)\n\n[source](about:blank/src/std/io/mod.rs.html#1761-1776)[§](#method.write_all_vectored)\n\n🔬This is a nightly-only experimental API. (`write_all_vectored` [#70436](https://github.com/rust-lang/rust/issues/70436))\n\nAttempts to write multiple buffers into this writer. [Read more](about:blank/io/trait.Write.html#method.write_all_vectored)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1814-1850)[§](#method.write_fmt)\n\nWrites a formatted string into this writer, returning any error encountered. [Read more](about:blank/io/trait.Write.html#method.write_fmt)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1874-1879)[§](#method.by_ref-2)\n\nCreates a “by reference” adapter for this instance of `Write`. [Read more](about:blank/io/trait.Write.html#method.by_ref)\n\n1.0.0 · [source](about:blank/src/std/fs.rs.html#930-945)[§](#impl-Write-for-File)\n\n[source](about:blank/src/std/fs.rs.html#931-933)[§](#method.write-1)\n\nWrite a buffer into this writer, returning how many bytes were written. [Read more](about:blank/io/trait.Write.html#tymethod.write)\n\n[source](about:blank/src/std/fs.rs.html#934-936)[§](#method.write_vectored-1)\n\nLike [`write`](about:blank/io/trait.Write.html#tymethod.write \"method std::io::Write::write\"), except that it writes from a slice of buffers. [Read more](about:blank/io/trait.Write.html#method.write_vectored)\n\n[source](about:blank/src/std/fs.rs.html#938-940)[§](#method.is_write_vectored-1)\n\n🔬This is a nightly-only experimental API. (`can_vector` [#69941](https://github.com/rust-lang/rust/issues/69941))\n\n[source](about:blank/src/std/fs.rs.html#942-944)[§](#method.flush-1)\n\nFlush this output stream, ensuring that all intermediately buffered contents reach their destination. [Read more](about:blank/io/trait.Write.html#tymethod.flush)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1699-1711)[§](#method.write_all-1)\n\nAttempts to write an entire buffer into this writer. [Read more](about:blank/io/trait.Write.html#method.write_all)\n\n[source](about:blank/src/std/io/mod.rs.html#1761-1776)[§](#method.write_all_vectored-1)\n\n🔬This is a nightly-only experimental API. (`write_all_vectored` [#70436](https://github.com/rust-lang/rust/issues/70436))\n\nAttempts to write multiple buffers into this writer. [Read more](about:blank/io/trait.Write.html#method.write_all_vectored)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1814-1850)[§](#method.write_fmt-1)\n\nWrites a formatted string into this writer, returning any error encountered. [Read more](about:blank/io/trait.Write.html#method.write_fmt)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1874-1879)[§](#method.by_ref-3)\n\nCreates a “by reference” adapter for this instance of `Write`. [Read more](about:blank/io/trait.Write.html#method.by_ref)\n\n[§](#impl-Freeze-for-File)\n\n[§](#impl-RefUnwindSafe-for-File)\n\n[§](#impl-Send-for-File)\n\n[§](#impl-Sync-for-File)\n\n[§](#impl-Unpin-for-File)\n\n[§](#impl-UnwindSafe-for-File)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[§](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[§](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[§](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[§](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[§](#method.from-5)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[§](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[§](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[§](#impl-TryFrom%3CU%3E-for-T)\n\n[§](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[§](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[§](#impl-TryInto%3CU%3E-for-T)\n\n[§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[§](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"An object providing access to an open file on the filesystem.\"><title>File in std::fs - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">File</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">File</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.create\">create</a></li><li><a href=\"#method.create_new\">create_new</a></li><li><a href=\"#method.metadata\">metadata</a></li><li><a href=\"#method.open\">open</a></li><li><a href=\"#method.options\">options</a></li><li><a href=\"#method.set_len\">set_len</a></li><li><a href=\"#method.set_modified\">set_modified</a></li><li><a href=\"#method.set_permissions\">set_permissions</a></li><li><a href=\"#method.set_times\">set_times</a></li><li><a href=\"#method.sync_all\">sync_all</a></li><li><a href=\"#method.sync_data\">sync_data</a></li><li><a href=\"#method.try_clone\">try_clone</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-AsFd-for-File\">AsFd</a></li><li><a href=\"#impl-AsHandle-for-File\">AsHandle</a></li><li><a href=\"#impl-AsRawFd-for-File\">AsRawFd</a></li><li><a href=\"#impl-AsRawHandle-for-File\">AsRawHandle</a></li><li><a href=\"#impl-Debug-for-File\">Debug</a></li><li><a href=\"#impl-FileExt-for-File\">FileExt</a></li><li><a href=\"#impl-FileExt-for-File-1\">FileExt</a></li><li><a href=\"#impl-FileExt-for-File-2\">FileExt</a></li><li><a href=\"#impl-From%3CFile%3E-for-OwnedFd\">From&lt;File&gt;</a></li><li><a href=\"#impl-From%3CFile%3E-for-OwnedHandle\">From&lt;File&gt;</a></li><li><a href=\"#impl-From%3CFile%3E-for-Stdio\">From&lt;File&gt;</a></li><li><a href=\"#impl-From%3COwnedFd%3E-for-File\">From&lt;OwnedFd&gt;</a></li><li><a href=\"#impl-From%3COwnedHandle%3E-for-File\">From&lt;OwnedHandle&gt;</a></li><li><a href=\"#impl-FromRawFd-for-File\">FromRawFd</a></li><li><a href=\"#impl-FromRawHandle-for-File\">FromRawHandle</a></li><li><a href=\"#impl-IntoRawFd-for-File\">IntoRawFd</a></li><li><a href=\"#impl-IntoRawHandle-for-File\">IntoRawHandle</a></li><li><a href=\"#impl-IsTerminal-for-File\">IsTerminal</a></li><li><a href=\"#impl-Read-for-%26File\">Read</a></li><li><a href=\"#impl-Read-for-File\">Read</a></li><li><a href=\"#impl-Seek-for-%26File\">Seek</a></li><li><a href=\"#impl-Seek-for-File\">Seek</a></li><li><a href=\"#impl-Write-for-%26File\">Write</a></li><li><a href=\"#impl-Write-for-File\">Write</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-File\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-File\">RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-File\">Send</a></li><li><a href=\"#impl-Sync-for-File\">Sync</a></li><li><a href=\"#impl-Unpin-for-File\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-File\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::fs</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.DirBuilder.html\">DirBuilder</a></li><li><a href=\"struct.DirEntry.html\">DirEntry</a></li><li><a href=\"struct.File.html\">File</a></li><li><a href=\"struct.FileTimes.html\">FileTimes</a></li><li><a href=\"struct.FileType.html\">FileType</a></li><li><a href=\"struct.Metadata.html\">Metadata</a></li><li><a href=\"struct.OpenOptions.html\">OpenOptions</a></li><li><a href=\"struct.Permissions.html\">Permissions</a></li><li><a href=\"struct.ReadDir.html\">ReadDir</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.canonicalize.html\">canonicalize</a></li><li><a href=\"fn.copy.html\">copy</a></li><li><a href=\"fn.create_dir.html\">create_dir</a></li><li><a href=\"fn.create_dir_all.html\">create_dir_all</a></li><li><a href=\"fn.hard_link.html\">hard_link</a></li><li><a href=\"fn.metadata.html\">metadata</a></li><li><a href=\"fn.read.html\">read</a></li><li><a href=\"fn.read_dir.html\">read_dir</a></li><li><a href=\"fn.read_link.html\">read_link</a></li><li><a href=\"fn.read_to_string.html\">read_to_string</a></li><li><a href=\"fn.remove_dir.html\">remove_dir</a></li><li><a href=\"fn.remove_dir_all.html\">remove_dir_all</a></li><li><a href=\"fn.remove_file.html\">remove_file</a></li><li><a href=\"fn.rename.html\">rename</a></li><li><a href=\"fn.set_permissions.html\">set_permissions</a></li><li><a href=\"fn.soft_link.html\">soft_link</a></li><li><a href=\"fn.symlink_metadata.html\">symlink_metadata</a></li><li><a href=\"fn.try_exists.html\">try_exists</a></li><li><a href=\"fn.write.html\">write</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">fs</a>::<wbr><a class=\"struct\" href=\"#\">File</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/fs.rs.html#106-108\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct File { <span class=\"comment\">/* private fields */</span> }</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>An object providing access to an open file on the filesystem.</p>\n<p>An instance of a <code>File</code> can be read and/or written depending on what options\nit was opened with. Files also implement <a href=\"../io/trait.Seek.html\" title=\"trait std::io::Seek\"><code>Seek</code></a> to alter the logical cursor\nthat the file contains internally.</p>\n<p>Files are automatically closed when they go out of scope.  Errors detected\non closing are ignored by the implementation of <code>Drop</code>.  Use the method\n<a href=\"struct.File.html#method.sync_all\" title=\"method std::fs::File::sync_all\"><code>sync_all</code></a> if these errors must be manually handled.</p>\n<p><code>File</code> does not buffer reads and writes. For efficiency, consider wrapping the\nfile in a <a href=\"../io/struct.BufReader.html\" title=\"struct std::io::BufReader\"><code>BufReader</code></a> or <a href=\"../io/struct.BufWriter.html\" title=\"struct std::io::BufWriter\"><code>BufWriter</code></a> when performing many small <a href=\"struct.File.html#method.read\" title=\"method std::fs::File::read\"><code>read</code></a>\nor <a href=\"struct.File.html#method.write\" title=\"method std::fs::File::write\"><code>write</code></a> calls, unless unbuffered reads and writes are required.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<p>Creates a new file and write bytes to it (you can also use <a href=\"struct.File.html#method.write\" title=\"method std::fs::File::write\"><code>write</code></a>):</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs::File;\n<span class=\"kw\">use </span>std::io::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>file = File::create(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>;\n    file.write_all(<span class=\"string\">b\"Hello, world!\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs::File;%0Ause+std::io::prelude::*;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+mut+file+=+File::create(%22foo.txt%22)?;%0A++++file.write_all(b%22Hello,+world!%22)?;%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Read the contents of a file into a <a href=\"../string/struct.String.html\" title=\"struct std::string::String\"><code>String</code></a> (you can also use <a href=\"struct.File.html#method.read\" title=\"method std::fs::File::read\"><code>read</code></a>):</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs::File;\n<span class=\"kw\">use </span>std::io::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>file = File::open(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>contents = String::new();\n    file.read_to_string(<span class=\"kw-2\">&amp;mut </span>contents)<span class=\"question-mark\">?</span>;\n    <span class=\"macro\">assert_eq!</span>(contents, <span class=\"string\">\"Hello, world!\"</span>);\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs::File;%0Ause+std::io::prelude::*;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+mut+file+=+File::open(%22foo.txt%22)?;%0A++++let+mut+contents+=+String::new();%0A++++file.read_to_string(%26mut+contents)?;%0A++++assert_eq!(contents,+%22Hello,+world!%22);%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Using a buffered <a href=\"struct.File.html#method.read\" title=\"method std::fs::File::read\"><code>Read</code></a>er:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs::File;\n<span class=\"kw\">use </span>std::io::BufReader;\n<span class=\"kw\">use </span>std::io::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>file = File::open(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buf_reader = BufReader::new(file);\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>contents = String::new();\n    buf_reader.read_to_string(<span class=\"kw-2\">&amp;mut </span>contents)<span class=\"question-mark\">?</span>;\n    <span class=\"macro\">assert_eq!</span>(contents, <span class=\"string\">\"Hello, world!\"</span>);\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs::File;%0Ause+std::io::BufReader;%0Ause+std::io::prelude::*;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+file+=+File::open(%22foo.txt%22)?;%0A++++let+mut+buf_reader+=+BufReader::new(file);%0A++++let+mut+contents+=+String::new();%0A++++buf_reader.read_to_string(%26mut+contents)?;%0A++++assert_eq!(contents,+%22Hello,+world!%22);%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Note that, although read and write methods require a <code>&amp;mut File</code>, because\nof the interfaces for <a href=\"struct.File.html#method.read\" title=\"method std::fs::File::read\"><code>Read</code></a> and <a href=\"struct.File.html#method.write\" title=\"method std::fs::File::write\"><code>Write</code></a>, the holder of a <code>&amp;File</code> can\nstill modify the file, either through methods that take <code>&amp;File</code> or by\nretrieving the underlying OS object and modifying the file that way.\nAdditionally, many operating systems allow concurrent modification of files\nby different processes. Avoid assuming that holding a <code>&amp;File</code> means that the\nfile will not change.</p>\n<h2 id=\"platform-specific-behavior\"><a class=\"doc-anchor\" href=\"#platform-specific-behavior\">§</a>Platform-specific behavior</h2>\n<p>On Windows, the implementation of <a href=\"struct.File.html#method.read\" title=\"method std::fs::File::read\"><code>Read</code></a> and <a href=\"struct.File.html#method.write\" title=\"method std::fs::File::write\"><code>Write</code></a> traits for <code>File</code>\nperform synchronous I/O operations. Therefore the underlying file must not\nhave been opened for asynchronous I/O (e.g. by using <code>FILE_FLAG_OVERLAPPED</code>).</p>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-File\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/fs.rs.html#346-727\">source</a><a href=\"#impl-File\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"struct.File.html\" title=\"struct std::fs::File\">File</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.open\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/fs.rs.html#374-376\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.open\" class=\"fn\">open</a>&lt;P: <a class=\"trait\" href=\"../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;&gt;(path: P) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.File.html\" title=\"struct std::fs::File\">File</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to open a file in read-only mode.</p>\n<p>See the <a href=\"struct.OpenOptions.html#method.open\" title=\"method std::fs::OpenOptions::open\"><code>OpenOptions::open</code></a> method for more details.</p>\n<p>If you only need to read the entire file contents,\nconsider <a href=\"fn.read.html\" title=\"fn std::fs::read\"><code>std::fs::read()</code></a> or\n<a href=\"fn.read_to_string.html\" title=\"fn std::fs::read_to_string\"><code>std::fs::read_to_string()</code></a> instead.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>This function will return an error if <code>path</code> does not already exist.\nOther errors may also be returned according to <a href=\"struct.OpenOptions.html#method.open\" title=\"method std::fs::OpenOptions::open\"><code>OpenOptions::open</code></a>.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs::File;\n<span class=\"kw\">use </span>std::io::Read;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = File::open(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>data = <span class=\"macro\">vec!</span>[];\n    f.read_to_end(<span class=\"kw-2\">&amp;mut </span>data)<span class=\"question-mark\">?</span>;\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs::File;%0Ause+std::io::Read;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+mut+f+=+File::open(%22foo.txt%22)?;%0A++++let+mut+data+=+vec!%5B%5D;%0A++++f.read_to_end(%26mut+data)?;%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.create\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/fs.rs.html#403-405\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.create\" class=\"fn\">create</a>&lt;P: <a class=\"trait\" href=\"../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;&gt;(path: P) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.File.html\" title=\"struct std::fs::File\">File</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Opens a file in write-only mode.</p>\n<p>This function will create a file if it does not exist,\nand will truncate it if it does.</p>\n<p>Depending on the platform, this function may fail if the\nfull directory path does not exist.\nSee the <a href=\"struct.OpenOptions.html#method.open\" title=\"method std::fs::OpenOptions::open\"><code>OpenOptions::open</code></a> function for more details.</p>\n<p>See also <a href=\"fn.write.html\" title=\"fn std::fs::write\"><code>std::fs::write()</code></a> for a simple function to\ncreate a file with some given data.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs::File;\n<span class=\"kw\">use </span>std::io::Write;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = File::create(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>;\n    f.write_all(<span class=\"kw-2\">&amp;</span><span class=\"number\">1234_u32</span>.to_be_bytes())<span class=\"question-mark\">?</span>;\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs::File;%0Ause+std::io::Write;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+mut+f+=+File::create(%22foo.txt%22)?;%0A++++f.write_all(%261234_u32.to_be_bytes())?;%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.create_new\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.77.0\">1.77.0</span> · <a class=\"src\" href=\"../../src/std/fs.rs.html#437-439\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.create_new\" class=\"fn\">create_new</a>&lt;P: <a class=\"trait\" href=\"../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;&gt;(path: P) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.File.html\" title=\"struct std::fs::File\">File</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new file in read-write mode; error if the file exists.</p>\n<p>This function will create a file if it does not exist, or return an error if it does. This\nway, if the call succeeds, the file returned is guaranteed to be new.\nIf a file exists at the target location, creating a new file will fail with <a href=\"../io/enum.ErrorKind.html#variant.AlreadyExists\" title=\"variant std::io::ErrorKind::AlreadyExists\"><code>AlreadyExists</code></a>\nor another error based on the situation. See <a href=\"struct.OpenOptions.html#method.open\" title=\"method std::fs::OpenOptions::open\"><code>OpenOptions::open</code></a> for a\nnon-exhaustive list of likely errors.</p>\n<p>This option is useful because it is atomic. Otherwise between checking whether a file\nexists and creating a new one, the file may have been created by another process (a TOCTOU\nrace condition / attack).</p>\n<p>This can also be written using\n<code>File::options().read(true).write(true).create_new(true).open(...)</code>.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs::File;\n<span class=\"kw\">use </span>std::io::Write;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = File::create_new(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>;\n    f.write_all(<span class=\"string\">\"Hello, world!\"</span>.as_bytes())<span class=\"question-mark\">?</span>;\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs::File;%0Ause+std::io::Write;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+mut+f+=+File::create_new(%22foo.txt%22)?;%0A++++f.write_all(%22Hello,+world!%22.as_bytes())?;%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.options\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.58.0\">1.58.0</span> · <a class=\"src\" href=\"../../src/std/fs.rs.html#469-471\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.options\" class=\"fn\">options</a>() -&gt; <a class=\"struct\" href=\"struct.OpenOptions.html\" title=\"struct std::fs::OpenOptions\">OpenOptions</a></h4></section></summary><div class=\"docblock\"><p>Returns a new OpenOptions object.</p>\n<p>This function returns a new OpenOptions object that you can use to\nopen or create a file with specific options if <code>open()</code> or <code>create()</code>\nare not appropriate.</p>\n<p>It is equivalent to <code>OpenOptions::new()</code>, but allows you to write more\nreadable code. Instead of\n<code>OpenOptions::new().append(true).open(\"example.log\")</code>,\nyou can write <code>File::options().append(true).open(\"example.log\")</code>. This\nalso avoids the need to import <code>OpenOptions</code>.</p>\n<p>See the <a href=\"struct.OpenOptions.html#method.new\" title=\"associated function std::fs::OpenOptions::new\"><code>OpenOptions::new</code></a> function for more details.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs::File;\n<span class=\"kw\">use </span>std::io::Write;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = File::options().append(<span class=\"bool-val\">true</span>).open(<span class=\"string\">\"example.log\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"macro\">writeln!</span>(<span class=\"kw-2\">&amp;mut </span>f, <span class=\"string\">\"new line\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs::File;%0Ause+std::io::Write;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+mut+f+=+File::options().append(true).open(%22example.log%22)?;%0A++++writeln!(%26mut+f,+%22new+line%22)?;%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sync_all\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/fs.rs.html#504-506\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.sync_all\" class=\"fn\">sync_all</a>(&amp;self) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to sync all OS-internal file content and metadata to disk.</p>\n<p>This function will attempt to ensure that all in-memory data reaches the\nfilesystem before returning.</p>\n<p>This can be used to handle errors that would otherwise only be caught\nwhen the <code>File</code> is closed, as dropping a <code>File</code> will ignore all errors.\nNote, however, that <code>sync_all</code> is generally more expensive than closing\na file by dropping it, because the latter is not required to block until\nthe data has been written to the filesystem.</p>\n<p>If synchronizing the metadata is not required, use <a href=\"struct.File.html#method.sync_data\" title=\"method std::fs::File::sync_data\"><code>sync_data</code></a> instead.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs::File;\n<span class=\"kw\">use </span>std::io::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = File::create(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>;\n    f.write_all(<span class=\"string\">b\"Hello, world!\"</span>)<span class=\"question-mark\">?</span>;\n\n    f.sync_all()<span class=\"question-mark\">?</span>;\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs::File;%0Ause+std::io::prelude::*;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+mut+f+=+File::create(%22foo.txt%22)?;%0A++++f.write_all(b%22Hello,+world!%22)?;%0A%0A++++f.sync_all()?;%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sync_data\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/fs.rs.html#536-538\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.sync_data\" class=\"fn\">sync_data</a>(&amp;self) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>This function is similar to <a href=\"struct.File.html#method.sync_all\" title=\"method std::fs::File::sync_all\"><code>sync_all</code></a>, except that it might not\nsynchronize file metadata to the filesystem.</p>\n<p>This is intended for use cases that must synchronize content, but don’t\nneed the metadata on disk. The goal of this method is to reduce disk\noperations.</p>\n<p>Note that some platforms may simply implement this in terms of\n<a href=\"struct.File.html#method.sync_all\" title=\"method std::fs::File::sync_all\"><code>sync_all</code></a>.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs::File;\n<span class=\"kw\">use </span>std::io::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = File::create(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>;\n    f.write_all(<span class=\"string\">b\"Hello, world!\"</span>)<span class=\"question-mark\">?</span>;\n\n    f.sync_data()<span class=\"question-mark\">?</span>;\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs::File;%0Ause+std::io::prelude::*;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+mut+f+=+File::create(%22foo.txt%22)?;%0A++++f.write_all(b%22Hello,+world!%22)?;%0A%0A++++f.sync_data()?;%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.set_len\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/fs.rs.html#574-576\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.set_len\" class=\"fn\">set_len</a>(&amp;self, size: <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Truncates or extends the underlying file, updating the size of\nthis file to become <code>size</code>.</p>\n<p>If the <code>size</code> is less than the current file’s size, then the file will\nbe shrunk. If it is greater than the current file’s size, then the file\nwill be extended to <code>size</code> and have all of the intermediate data filled\nin with 0s.</p>\n<p>The file’s cursor isn’t changed. In particular, if the cursor was at the\nend and the file is shrunk using this operation, the cursor will now be\npast the end.</p>\n<h5 id=\"errors-1\"><a class=\"doc-anchor\" href=\"#errors-1\">§</a>Errors</h5>\n<p>This function will return an error if the file is not opened for writing.\nAlso, <a href=\"../io/enum.ErrorKind.html#variant.InvalidInput\" title=\"variant std::io::ErrorKind::InvalidInput\"><code>std::io::ErrorKind::InvalidInput</code></a>\nwill be returned if the desired length would cause an overflow due to\nthe implementation specifics.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs::File;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = File::create(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>;\n    f.set_len(<span class=\"number\">10</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs::File;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+mut+f+=+File::create(%22foo.txt%22)?;%0A++++f.set_len(10)?;%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Note that this method alters the content of the underlying file, even\nthough it takes <code>&amp;self</code> rather than <code>&amp;mut self</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.metadata\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/fs.rs.html#592-594\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.metadata\" class=\"fn\">metadata</a>(&amp;self) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.Metadata.html\" title=\"struct std::fs::Metadata\">Metadata</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Queries metadata about the underlying file.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs::File;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = File::open(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>metadata = f.metadata()<span class=\"question-mark\">?</span>;\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs::File;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+mut+f+=+File::open(%22foo.txt%22)?;%0A++++let+metadata+=+f.metadata()?;%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_clone\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> · <a class=\"src\" href=\"../../src/std/fs.rs.html#636-638\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.try_clone\" class=\"fn\">try_clone</a>(&amp;self) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.File.html\" title=\"struct std::fs::File\">File</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new <code>File</code> instance that shares the same underlying file handle\nas the existing <code>File</code> instance. Reads, writes, and seeks will affect\nboth <code>File</code> instances simultaneously.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<p>Creates two handles for a file named <code>foo.txt</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs::File;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>file = File::open(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>file_copy = file.try_clone()<span class=\"question-mark\">?</span>;\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs::File;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+mut+file+=+File::open(%22foo.txt%22)?;%0A++++let+file_copy+=+file.try_clone()?;%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Assuming there’s a file named <code>foo.txt</code> with contents <code>abcdef\\n</code>, create\ntwo handles, seek one of them, and read the remaining bytes from the\nother handle:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs::File;\n<span class=\"kw\">use </span>std::io::SeekFrom;\n<span class=\"kw\">use </span>std::io::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>file = File::open(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>file_copy = file.try_clone()<span class=\"question-mark\">?</span>;\n\n    file.seek(SeekFrom::Start(<span class=\"number\">3</span>))<span class=\"question-mark\">?</span>;\n\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>contents = <span class=\"macro\">vec!</span>[];\n    file_copy.read_to_end(<span class=\"kw-2\">&amp;mut </span>contents)<span class=\"question-mark\">?</span>;\n    <span class=\"macro\">assert_eq!</span>(contents, <span class=\"string\">b\"def\\n\"</span>);\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs::File;%0Ause+std::io::SeekFrom;%0Ause+std::io::prelude::*;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+mut+file+=+File::open(%22foo.txt%22)?;%0A++++let+mut+file_copy+=+file.try_clone()?;%0A%0A++++file.seek(SeekFrom::Start(3))?;%0A%0A++++let+mut+contents+=+vec!%5B%5D;%0A++++file_copy.read_to_end(%26mut+contents)?;%0A++++assert_eq!(contents,+b%22def%5Cn%22);%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.set_permissions\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0\">1.16.0</span> · <a class=\"src\" href=\"../../src/std/fs.rs.html#674-676\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.set_permissions\" class=\"fn\">set_permissions</a>(&amp;self, perm: <a class=\"struct\" href=\"struct.Permissions.html\" title=\"struct std::fs::Permissions\">Permissions</a>) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Changes the permissions on the underlying file.</p>\n<h5 id=\"platform-specific-behavior-1\"><a class=\"doc-anchor\" href=\"#platform-specific-behavior-1\">§</a>Platform-specific behavior</h5>\n<p>This function currently corresponds to the <code>fchmod</code> function on Unix and\nthe <code>SetFileInformationByHandle</code> function on Windows. Note that, this\n<a href=\"../io/index.html#platform-specific-behavior\" title=\"mod std::io\">may change in the future</a>.</p>\n<h5 id=\"errors-2\"><a class=\"doc-anchor\" href=\"#errors-2\">§</a>Errors</h5>\n<p>This function will return an error if the user lacks permission change\nattributes on the underlying file. It may also return an error in other\nos-specific unspecified cases.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">use </span>std::fs::File;\n\n    <span class=\"kw\">let </span>file = File::open(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>perms = file.metadata()<span class=\"question-mark\">?</span>.permissions();\n    perms.set_readonly(<span class=\"bool-val\">true</span>);\n    file.set_permissions(perms)<span class=\"question-mark\">?</span>;\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++use+std::fs::File;%0A%0A++++let+file+=+File::open(%22foo.txt%22)?;%0A++++let+mut+perms+=+file.metadata()?.permissions();%0A++++perms.set_readonly(true);%0A++++file.set_permissions(perms)?;%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Note that this method alters the permissions of the underlying file,\neven though it takes <code>&amp;self</code> rather than <code>&amp;mut self</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.set_times\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"../../src/std/fs.rs.html#715-717\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.set_times\" class=\"fn\">set_times</a>(&amp;self, times: <a class=\"struct\" href=\"struct.FileTimes.html\" title=\"struct std::fs::FileTimes\">FileTimes</a>) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Changes the timestamps of the underlying file.</p>\n<h5 id=\"platform-specific-behavior-2\"><a class=\"doc-anchor\" href=\"#platform-specific-behavior-2\">§</a>Platform-specific behavior</h5>\n<p>This function currently corresponds to the <code>futimens</code> function on Unix (falling back to\n<code>futimes</code> on macOS before 10.13) and the <code>SetFileTime</code> function on Windows. Note that this\n<a href=\"../io/index.html#platform-specific-behavior\" title=\"mod std::io\">may change in the future</a>.</p>\n<h5 id=\"errors-3\"><a class=\"doc-anchor\" href=\"#errors-3\">§</a>Errors</h5>\n<p>This function will return an error if the user lacks permission to change timestamps on the\nunderlying file. It may also return an error in other os-specific unspecified cases.</p>\n<p>This function may return an error if the operating system lacks support to change one or\nmore of the timestamps set in the <code>FileTimes</code> structure.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">use </span>std::fs::{<span class=\"self\">self</span>, File, FileTimes};\n\n    <span class=\"kw\">let </span>src = fs::metadata(<span class=\"string\">\"src\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>dest = File::options().write(<span class=\"bool-val\">true</span>).open(<span class=\"string\">\"dest\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>times = FileTimes::new()\n        .set_accessed(src.accessed()<span class=\"question-mark\">?</span>)\n        .set_modified(src.modified()<span class=\"question-mark\">?</span>);\n    dest.set_times(times)<span class=\"question-mark\">?</span>;\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++use+std::fs::%7Bself,+File,+FileTimes%7D;%0A%0A++++let+src+=+fs::metadata(%22src%22)?;%0A++++let+dest+=+File::options().write(true).open(%22dest%22)?;%0A++++let+times+=+FileTimes::new()%0A++++++++.set_accessed(src.accessed()?)%0A++++++++.set_modified(src.modified()?);%0A++++dest.set_times(times)?;%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.set_modified\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"../../src/std/fs.rs.html#724-726\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.set_modified\" class=\"fn\">set_modified</a>(&amp;self, time: <a class=\"struct\" href=\"../time/struct.SystemTime.html\" title=\"struct std::time::SystemTime\">SystemTime</a>) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Changes the modification time of the underlying file.</p>\n<p>This is an alias for <code>set_times(FileTimes::new().set_modified(time))</code>.</p>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsFd-for-File\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.63.0\">1.63.0</span> · <a class=\"src\" href=\"../../src/std/os/fd/owned.rs.html#284-289\">source</a></span><a href=\"#impl-AsFd-for-File\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../os/fd/trait.AsFd.html\" title=\"trait std::os::fd::AsFd\">AsFd</a> for <a class=\"struct\" href=\"struct.File.html\" title=\"struct std::fs::File\">File</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_fd\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/fd/owned.rs.html#286-288\">source</a><a href=\"#method.as_fd\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/fd/trait.AsFd.html#tymethod.as_fd\" class=\"fn\">as_fd</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../os/fd/struct.BorrowedFd.html\" title=\"struct std::os::fd::BorrowedFd\">BorrowedFd</a>&lt;'_&gt;</h4></section></summary><div class=\"docblock\">Borrows the file descriptor. <a href=\"../os/fd/trait.AsFd.html#tymethod.as_fd\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsHandle-for-File\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.63.0\">1.63.0</span> · <a class=\"src\" href=\"../../src/std/os/windows/io/handle.rs.html#522-527\">source</a></span><a href=\"#impl-AsHandle-for-File\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../os/windows/io/trait.AsHandle.html\" title=\"trait std::os::windows::io::AsHandle\">AsHandle</a> for <a class=\"struct\" href=\"struct.File.html\" title=\"struct std::fs::File\">File</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Windows</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_handle\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/windows/io/handle.rs.html#524-526\">source</a><a href=\"#method.as_handle\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/windows/io/trait.AsHandle.html#tymethod.as_handle\" class=\"fn\">as_handle</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../os/windows/io/struct.BorrowedHandle.html\" title=\"struct std::os::windows::io::BorrowedHandle\">BorrowedHandle</a>&lt;'_&gt;</h4></section></summary><div class=\"docblock\">Borrows the handle. <a href=\"../os/windows/io/trait.AsHandle.html#tymethod.as_handle\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsRawFd-for-File\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/os/fd/raw.rs.html#168-173\">source</a></span><a href=\"#impl-AsRawFd-for-File\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../os/fd/trait.AsRawFd.html\" title=\"trait std::os::fd::AsRawFd\">AsRawFd</a> for <a class=\"struct\" href=\"struct.File.html\" title=\"struct std::fs::File\">File</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_raw_fd\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/fd/raw.rs.html#170-172\">source</a><a href=\"#method.as_raw_fd\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/fd/trait.AsRawFd.html#tymethod.as_raw_fd\" class=\"fn\">as_raw_fd</a>(&amp;self) -&gt; <a class=\"type\" href=\"../os/fd/type.RawFd.html\" title=\"type std::os::fd::RawFd\">RawFd</a></h4></section></summary><div class=\"docblock\">Extracts the raw file descriptor. <a href=\"../os/fd/trait.AsRawFd.html#tymethod.as_raw_fd\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsRawHandle-for-File\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/os/windows/io/raw.rs.html#97-102\">source</a></span><a href=\"#impl-AsRawHandle-for-File\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../os/windows/io/trait.AsRawHandle.html\" title=\"trait std::os::windows::io::AsRawHandle\">AsRawHandle</a> for <a class=\"struct\" href=\"struct.File.html\" title=\"struct std::fs::File\">File</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Windows</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_raw_handle\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/windows/io/raw.rs.html#99-101\">source</a><a href=\"#method.as_raw_handle\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/windows/io/trait.AsRawHandle.html#tymethod.as_raw_handle\" class=\"fn\">as_raw_handle</a>(&amp;self) -&gt; <a class=\"type\" href=\"../os/windows/io/type.RawHandle.html\" title=\"type std::os::windows::io::RawHandle\">RawHandle</a></h4></section></summary><div class=\"docblock\">Extracts the raw handle. <a href=\"../os/windows/io/trait.AsRawHandle.html#tymethod.as_raw_handle\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-File\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/fs.rs.html#753-757\">source</a></span><a href=\"#impl-Debug-for-File\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.File.html\" title=\"struct std::fs::File\">File</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/fs.rs.html#754-756\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../fmt/type.Result.html\" title=\"type std::fmt::Result\">Result</a></h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FileExt-for-File\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.15.0\">1.15.0</span> · <a class=\"src\" href=\"../../src/std/os/windows/fs.rs.html#88-96\">source</a></span><a href=\"#impl-FileExt-for-File\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../os/windows/fs/trait.FileExt.html\" title=\"trait std::os::windows::fs::FileExt\">FileExt</a> for <a class=\"struct\" href=\"struct.File.html\" title=\"struct std::fs::File\">File</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Windows</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.seek_read\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/windows/fs.rs.html#89-91\">source</a><a href=\"#method.seek_read\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/windows/fs/trait.FileExt.html#tymethod.seek_read\" class=\"fn\">seek_read</a>(&amp;self, buf: &amp;mut [<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>], offset: <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Seeks to a given position and reads a number of bytes. <a href=\"../os/windows/fs/trait.FileExt.html#tymethod.seek_read\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.seek_write\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/windows/fs.rs.html#93-95\">source</a><a href=\"#method.seek_write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/windows/fs/trait.FileExt.html#tymethod.seek_write\" class=\"fn\">seek_write</a>(&amp;self, buf: &amp;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>], offset: <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Seeks to a given position and writes a number of bytes. <a href=\"../os/windows/fs/trait.FileExt.html#tymethod.seek_write\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FileExt-for-File-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.15.0\">1.15.0</span> · <a class=\"src\" href=\"../../src/std/os/unix/fs.rs.html#263-276\">source</a></span><a href=\"#impl-FileExt-for-File-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../os/unix/fs/trait.FileExt.html\" title=\"trait std::os::unix::fs::FileExt\">FileExt</a> for <a class=\"struct\" href=\"struct.File.html\" title=\"struct std::fs::File\">File</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Unix</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_at\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/unix/fs.rs.html#264-266\">source</a><a href=\"#method.read_at\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/unix/fs/trait.FileExt.html#tymethod.read_at\" class=\"fn\">read_at</a>(&amp;self, buf: &amp;mut [<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>], offset: <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Reads a number of bytes starting from a given offset. <a href=\"../os/unix/fs/trait.FileExt.html#tymethod.read_at\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_vectored_at\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/unix/fs.rs.html#267-269\">source</a><a href=\"#method.read_vectored_at\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/unix/fs/trait.FileExt.html#method.read_vectored_at\" class=\"fn\">read_vectored_at</a>(\n    &amp;self,\n    bufs: &amp;mut [<a class=\"struct\" href=\"../io/struct.IoSliceMut.html\" title=\"struct std::io::IoSliceMut\">IoSliceMut</a>&lt;'_&gt;],\n    offset: <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>,\n) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unix_file_vectored_at</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/89517\">#89517</a>)</span></div></span><div class=\"docblock\">Like <code>read_at</code>, except that it reads into a slice of buffers. <a href=\"../os/unix/fs/trait.FileExt.html#method.read_vectored_at\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_at\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/unix/fs.rs.html#270-272\">source</a><a href=\"#method.write_at\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/unix/fs/trait.FileExt.html#tymethod.write_at\" class=\"fn\">write_at</a>(&amp;self, buf: &amp;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>], offset: <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Writes a number of bytes starting from a given offset. <a href=\"../os/unix/fs/trait.FileExt.html#tymethod.write_at\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_vectored_at\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/unix/fs.rs.html#273-275\">source</a><a href=\"#method.write_vectored_at\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/unix/fs/trait.FileExt.html#method.write_vectored_at\" class=\"fn\">write_vectored_at</a>(&amp;self, bufs: &amp;[<a class=\"struct\" href=\"../io/struct.IoSlice.html\" title=\"struct std::io::IoSlice\">IoSlice</a>&lt;'_&gt;], offset: <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unix_file_vectored_at</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/89517\">#89517</a>)</span></div></span><div class=\"docblock\">Like <code>write_at</code>, except that it writes from a slice of buffers. <a href=\"../os/unix/fs/trait.FileExt.html#method.write_vectored_at\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_exact_at\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0\">1.33.0</span> · <a class=\"src\" href=\"../../src/std/os/unix/fs.rs.html#117-131\">source</a></span><a href=\"#method.read_exact_at\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/unix/fs/trait.FileExt.html#method.read_exact_at\" class=\"fn\">read_exact_at</a>(&amp;self, buf: &amp;mut [<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>], offset: <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\">Reads the exact number of bytes required to fill <code>buf</code> from the given offset. <a href=\"../os/unix/fs/trait.FileExt.html#method.read_exact_at\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_all_at\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0\">1.33.0</span> · <a class=\"src\" href=\"../../src/std/os/unix/fs.rs.html#244-259\">source</a></span><a href=\"#method.write_all_at\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/unix/fs/trait.FileExt.html#method.write_all_at\" class=\"fn\">write_all_at</a>(&amp;self, buf: &amp;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>], offset: <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\">Attempts to write an entire buffer starting from a given offset. <a href=\"../os/unix/fs/trait.FileExt.html#method.write_all_at\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FileExt-for-File-2\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/os/wasi/fs.rs.html#234-298\">source</a><a href=\"#impl-FileExt-for-File-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../os/wasi/fs/trait.FileExt.html\" title=\"trait std::os::wasi::fs::FileExt\">FileExt</a> for <a class=\"struct\" href=\"struct.File.html\" title=\"struct std::fs::File\">File</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>WASI</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_vectored_at-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/wasi/fs.rs.html#235-237\">source</a><a href=\"#method.read_vectored_at-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/wasi/fs/trait.FileExt.html#tymethod.read_vectored_at\" class=\"fn\">read_vectored_at</a>(\n    &amp;self,\n    bufs: &amp;mut [<a class=\"struct\" href=\"../io/struct.IoSliceMut.html\" title=\"struct std::io::IoSliceMut\">IoSliceMut</a>&lt;'_&gt;],\n    offset: <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>,\n) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>wasi_ext</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/71213\">#71213</a>)</span></div></span><div class=\"docblock\">Reads a number of bytes starting from a given offset. <a href=\"../os/wasi/fs/trait.FileExt.html#tymethod.read_vectored_at\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_vectored_at-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/wasi/fs.rs.html#239-241\">source</a><a href=\"#method.write_vectored_at-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/wasi/fs/trait.FileExt.html#tymethod.write_vectored_at\" class=\"fn\">write_vectored_at</a>(&amp;self, bufs: &amp;[<a class=\"struct\" href=\"../io/struct.IoSlice.html\" title=\"struct std::io::IoSlice\">IoSlice</a>&lt;'_&gt;], offset: <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>wasi_ext</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/71213\">#71213</a>)</span></div></span><div class=\"docblock\">Writes a number of bytes starting from a given offset. <a href=\"../os/wasi/fs/trait.FileExt.html#tymethod.write_vectored_at\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.tell\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/wasi/fs.rs.html#243-245\">source</a><a href=\"#method.tell\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/wasi/fs/trait.FileExt.html#tymethod.tell\" class=\"fn\">tell</a>(&amp;self) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>wasi_ext</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/71213\">#71213</a>)</span></div></span><div class=\"docblock\">Returns the current position within the file. <a href=\"../os/wasi/fs/trait.FileExt.html#tymethod.tell\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fdstat_set_flags\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/wasi/fs.rs.html#247-249\">source</a><a href=\"#method.fdstat_set_flags\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/wasi/fs/trait.FileExt.html#tymethod.fdstat_set_flags\" class=\"fn\">fdstat_set_flags</a>(&amp;self, flags: <a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>wasi_ext</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/71213\">#71213</a>)</span></div></span><div class=\"docblock\">Adjust the flags associated with this file. <a href=\"../os/wasi/fs/trait.FileExt.html#tymethod.fdstat_set_flags\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fdstat_set_rights\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/wasi/fs.rs.html#251-253\">source</a><a href=\"#method.fdstat_set_rights\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/wasi/fs/trait.FileExt.html#tymethod.fdstat_set_rights\" class=\"fn\">fdstat_set_rights</a>(&amp;self, rights: <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, inheriting: <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>wasi_ext</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/71213\">#71213</a>)</span></div></span><div class=\"docblock\">Adjust the rights associated with this file. <a href=\"../os/wasi/fs/trait.FileExt.html#tymethod.fdstat_set_rights\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.advise\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/wasi/fs.rs.html#255-272\">source</a><a href=\"#method.advise\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/wasi/fs/trait.FileExt.html#tymethod.advise\" class=\"fn\">advise</a>(&amp;self, offset: <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, len: <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, advice: <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>wasi_ext</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/71213\">#71213</a>)</span></div></span><div class=\"docblock\">Provide file advisory information on a file descriptor. <a href=\"../os/wasi/fs/trait.FileExt.html#tymethod.advise\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.allocate\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/wasi/fs.rs.html#274-276\">source</a><a href=\"#method.allocate\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/wasi/fs/trait.FileExt.html#tymethod.allocate\" class=\"fn\">allocate</a>(&amp;self, offset: <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>, len: <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>wasi_ext</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/71213\">#71213</a>)</span></div></span><div class=\"docblock\">Force the allocation of space in a file. <a href=\"../os/wasi/fs/trait.FileExt.html#tymethod.allocate\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.create_directory\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/wasi/fs.rs.html#278-280\">source</a><a href=\"#method.create_directory\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/wasi/fs/trait.FileExt.html#tymethod.create_directory\" class=\"fn\">create_directory</a>&lt;P: <a class=\"trait\" href=\"../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;&gt;(&amp;self, dir: P) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>wasi_ext</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/71213\">#71213</a>)</span></div></span><div class=\"docblock\">Create a directory. <a href=\"../os/wasi/fs/trait.FileExt.html#tymethod.create_directory\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_link\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/wasi/fs.rs.html#282-284\">source</a><a href=\"#method.read_link\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/wasi/fs/trait.FileExt.html#tymethod.read_link\" class=\"fn\">read_link</a>&lt;P: <a class=\"trait\" href=\"../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;&gt;(&amp;self, path: P) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"struct\" href=\"../path/struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>wasi_ext</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/71213\">#71213</a>)</span></div></span><div class=\"docblock\">Read the contents of a symbolic link. <a href=\"../os/wasi/fs/trait.FileExt.html#tymethod.read_link\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.metadata_at\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/wasi/fs.rs.html#286-289\">source</a><a href=\"#method.metadata_at\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/wasi/fs/trait.FileExt.html#tymethod.metadata_at\" class=\"fn\">metadata_at</a>&lt;P: <a class=\"trait\" href=\"../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;&gt;(\n    &amp;self,\n    lookup_flags: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>,\n    path: P,\n) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.Metadata.html\" title=\"struct std::fs::Metadata\">Metadata</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>wasi_ext</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/71213\">#71213</a>)</span></div></span><div class=\"docblock\">Return the attributes of a file or directory. <a href=\"../os/wasi/fs/trait.FileExt.html#tymethod.metadata_at\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.remove_file\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/wasi/fs.rs.html#291-293\">source</a><a href=\"#method.remove_file\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/wasi/fs/trait.FileExt.html#tymethod.remove_file\" class=\"fn\">remove_file</a>&lt;P: <a class=\"trait\" href=\"../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;&gt;(&amp;self, path: P) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>wasi_ext</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/71213\">#71213</a>)</span></div></span><div class=\"docblock\">Unlink a file. <a href=\"../os/wasi/fs/trait.FileExt.html#tymethod.remove_file\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.remove_directory\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/wasi/fs.rs.html#295-297\">source</a><a href=\"#method.remove_directory\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/wasi/fs/trait.FileExt.html#tymethod.remove_directory\" class=\"fn\">remove_directory</a>&lt;P: <a class=\"trait\" href=\"../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;&gt;(&amp;self, path: P) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>wasi_ext</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/71213\">#71213</a>)</span></div></span><div class=\"docblock\">Remove a directory. <a href=\"../os/wasi/fs/trait.FileExt.html#tymethod.remove_directory\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_at-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/wasi/fs.rs.html#30-33\">source</a><a href=\"#method.read_at-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/wasi/fs/trait.FileExt.html#method.read_at\" class=\"fn\">read_at</a>(&amp;self, buf: &amp;mut [<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>], offset: <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>wasi_ext</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/71213\">#71213</a>)</span></div></span><div class=\"docblock\">Reads a number of bytes starting from a given offset. <a href=\"../os/wasi/fs/trait.FileExt.html#method.read_at\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_exact_at-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0\">1.33.0</span> · <a class=\"src\" href=\"../../src/std/os/wasi/fs.rs.html#76-90\">source</a></span><a href=\"#method.read_exact_at-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/wasi/fs/trait.FileExt.html#method.read_exact_at\" class=\"fn\">read_exact_at</a>(&amp;self, buf: &amp;mut [<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>], offset: <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\">Reads the exact number of byte required to fill <code>buf</code> from the given offset. <a href=\"../os/wasi/fs/trait.FileExt.html#method.read_exact_at\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_at-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/wasi/fs.rs.html#106-109\">source</a><a href=\"#method.write_at-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/wasi/fs/trait.FileExt.html#method.write_at\" class=\"fn\">write_at</a>(&amp;self, buf: &amp;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>], offset: <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>wasi_ext</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/71213\">#71213</a>)</span></div></span><div class=\"docblock\">Writes a number of bytes starting from a given offset. <a href=\"../os/wasi/fs/trait.FileExt.html#method.write_at\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_all_at-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0\">1.33.0</span> · <a class=\"src\" href=\"../../src/std/os/wasi/fs.rs.html#148-163\">source</a></span><a href=\"#method.write_all_at-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/wasi/fs/trait.FileExt.html#method.write_all_at\" class=\"fn\">write_all_at</a>(&amp;self, buf: &amp;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>], offset: <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\">Attempts to write an entire buffer starting from a given offset. <a href=\"../os/wasi/fs/trait.FileExt.html#method.write_all_at\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CFile%3E-for-OwnedFd\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.63.0\">1.63.0</span> · <a class=\"src\" href=\"../../src/std/os/fd/owned.rs.html#292-298\">source</a></span><a href=\"#impl-From%3CFile%3E-for-OwnedFd\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.File.html\" title=\"struct std::fs::File\">File</a>&gt; for <a class=\"struct\" href=\"../os/fd/struct.OwnedFd.html\" title=\"struct std::os::fd::OwnedFd\">OwnedFd</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/fd/owned.rs.html#295-297\">source</a><a href=\"#method.from-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(file: <a class=\"struct\" href=\"struct.File.html\" title=\"struct std::fs::File\">File</a>) -&gt; <a class=\"struct\" href=\"../os/fd/struct.OwnedFd.html\" title=\"struct std::os::fd::OwnedFd\">OwnedFd</a></h4></section></summary><div class=\"docblock\"><p>Takes ownership of a <a href=\"struct.File.html\" title=\"struct std::fs::File\"><code>File</code></a>’s underlying file descriptor.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CFile%3E-for-OwnedHandle\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.63.0\">1.63.0</span> · <a class=\"src\" href=\"../../src/std/os/windows/io/handle.rs.html#530-536\">source</a></span><a href=\"#impl-From%3CFile%3E-for-OwnedHandle\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.File.html\" title=\"struct std::fs::File\">File</a>&gt; for <a class=\"struct\" href=\"../os/windows/io/struct.OwnedHandle.html\" title=\"struct std::os::windows::io::OwnedHandle\">OwnedHandle</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Windows</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/windows/io/handle.rs.html#533-535\">source</a><a href=\"#method.from-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(file: <a class=\"struct\" href=\"struct.File.html\" title=\"struct std::fs::File\">File</a>) -&gt; <a class=\"struct\" href=\"../os/windows/io/struct.OwnedHandle.html\" title=\"struct std::os::windows::io::OwnedHandle\">OwnedHandle</a></h4></section></summary><div class=\"docblock\"><p>Takes ownership of a <a href=\"struct.File.html\" title=\"struct std::fs::File\"><code>File</code></a>’s underlying file handle.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CFile%3E-for-Stdio\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"../../src/std/process.rs.html#1566-1590\">source</a></span><a href=\"#impl-From%3CFile%3E-for-Stdio\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.File.html\" title=\"struct std::fs::File\">File</a>&gt; for <a class=\"struct\" href=\"../process/struct.Stdio.html\" title=\"struct std::process::Stdio\">Stdio</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/process.rs.html#1587-1589\">source</a><a href=\"#method.from-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(file: <a class=\"struct\" href=\"struct.File.html\" title=\"struct std::fs::File\">File</a>) -&gt; <a class=\"struct\" href=\"../process/struct.Stdio.html\" title=\"struct std::process::Stdio\">Stdio</a></h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"struct.File.html\" title=\"struct std::fs::File\"><code>File</code></a> into a <a href=\"../process/struct.Stdio.html\" title=\"struct std::process::Stdio\"><code>Stdio</code></a>.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<p><code>File</code> will be converted to <code>Stdio</code> using <code>Stdio::from</code> under the hood.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs::File;\n<span class=\"kw\">use </span>std::process::Command;\n\n<span class=\"comment\">// With the `foo.txt` file containing \"Hello, world!\"\n</span><span class=\"kw\">let </span>file = File::open(<span class=\"string\">\"foo.txt\"</span>).unwrap();\n\n<span class=\"kw\">let </span>reverse = Command::new(<span class=\"string\">\"rev\"</span>)\n    .stdin(file)  <span class=\"comment\">// Implicit File conversion into a Stdio\n    </span>.output()\n    .expect(<span class=\"string\">\"failed reverse command\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(reverse.stdout, <span class=\"string\">b\"!dlrow ,olleH\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fs::File;%0A++++use+std::process::Command;%0A++++%0A++++//+With+the+%60foo.txt%60+file+containing+%22Hello,+world!%22%0A++++let+file+=+File::open(%22foo.txt%22).unwrap();%0A++++%0A++++let+reverse+=+Command::new(%22rev%22)%0A++++++++.stdin(file)++//+Implicit+File+conversion+into+a+Stdio%0A++++++++.output()%0A++++++++.expect(%22failed+reverse+command%22);%0A++++%0A++++assert_eq!(reverse.stdout,+b%22!dlrow+,olleH%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3COwnedFd%3E-for-File\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.63.0\">1.63.0</span> · <a class=\"src\" href=\"../../src/std/os/fd/owned.rs.html#301-308\">source</a></span><a href=\"#impl-From%3COwnedFd%3E-for-File\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"../os/fd/struct.OwnedFd.html\" title=\"struct std::os::fd::OwnedFd\">OwnedFd</a>&gt; for <a class=\"struct\" href=\"struct.File.html\" title=\"struct std::fs::File\">File</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/fd/owned.rs.html#305-307\">source</a><a href=\"#method.from-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(owned_fd: <a class=\"struct\" href=\"../os/fd/struct.OwnedFd.html\" title=\"struct std::os::fd::OwnedFd\">OwnedFd</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Returns a <a href=\"struct.File.html\" title=\"struct std::fs::File\"><code>File</code></a> that takes ownership of the given\nfile descriptor.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3COwnedHandle%3E-for-File\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.63.0\">1.63.0</span> · <a class=\"src\" href=\"../../src/std/os/windows/io/handle.rs.html#539-545\">source</a></span><a href=\"#impl-From%3COwnedHandle%3E-for-File\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"../os/windows/io/struct.OwnedHandle.html\" title=\"struct std::os::windows::io::OwnedHandle\">OwnedHandle</a>&gt; for <a class=\"struct\" href=\"struct.File.html\" title=\"struct std::fs::File\">File</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Windows</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/windows/io/handle.rs.html#542-544\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(owned: <a class=\"struct\" href=\"../os/windows/io/struct.OwnedHandle.html\" title=\"struct std::os::windows::io::OwnedHandle\">OwnedHandle</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Returns a <a href=\"struct.File.html\" title=\"struct std::fs::File\"><code>File</code></a> that takes ownership of the given handle.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromRawFd-for-File\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> · <a class=\"src\" href=\"../../src/std/os/fd/raw.rs.html#175-180\">source</a></span><a href=\"#impl-FromRawFd-for-File\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../os/fd/trait.FromRawFd.html\" title=\"trait std::os::fd::FromRawFd\">FromRawFd</a> for <a class=\"struct\" href=\"struct.File.html\" title=\"struct std::fs::File\">File</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_raw_fd\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/fd/raw.rs.html#177-179\">source</a><a href=\"#method.from_raw_fd\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"../os/fd/trait.FromRawFd.html#tymethod.from_raw_fd\" class=\"fn\">from_raw_fd</a>(fd: <a class=\"type\" href=\"../os/fd/type.RawFd.html\" title=\"type std::os::fd::RawFd\">RawFd</a>) -&gt; <a class=\"struct\" href=\"struct.File.html\" title=\"struct std::fs::File\">File</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"File\">ⓘ</a></h4></section></summary><div class=\"docblock\">Constructs a new instance of <code>Self</code> from the given raw file\ndescriptor. <a href=\"../os/fd/trait.FromRawFd.html#tymethod.from_raw_fd\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromRawHandle-for-File\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> · <a class=\"src\" href=\"../../src/std/os/windows/io/raw.rs.html#159-167\">source</a></span><a href=\"#impl-FromRawHandle-for-File\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../os/windows/io/trait.FromRawHandle.html\" title=\"trait std::os::windows::io::FromRawHandle\">FromRawHandle</a> for <a class=\"struct\" href=\"struct.File.html\" title=\"struct std::fs::File\">File</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Windows</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_raw_handle\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/windows/io/raw.rs.html#161-166\">source</a><a href=\"#method.from_raw_handle\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"../os/windows/io/trait.FromRawHandle.html#tymethod.from_raw_handle\" class=\"fn\">from_raw_handle</a>(handle: <a class=\"type\" href=\"../os/windows/io/type.RawHandle.html\" title=\"type std::os::windows::io::RawHandle\">RawHandle</a>) -&gt; <a class=\"struct\" href=\"struct.File.html\" title=\"struct std::fs::File\">File</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"File\">ⓘ</a></h4></section></summary><div class=\"docblock\">Constructs a new I/O object from the specified raw handle. <a href=\"../os/windows/io/trait.FromRawHandle.html#tymethod.from_raw_handle\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-IntoRawFd-for-File\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"../../src/std/os/fd/raw.rs.html#182-187\">source</a></span><a href=\"#impl-IntoRawFd-for-File\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../os/fd/trait.IntoRawFd.html\" title=\"trait std::os::fd::IntoRawFd\">IntoRawFd</a> for <a class=\"struct\" href=\"struct.File.html\" title=\"struct std::fs::File\">File</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_raw_fd\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/fd/raw.rs.html#184-186\">source</a><a href=\"#method.into_raw_fd\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/fd/trait.IntoRawFd.html#tymethod.into_raw_fd\" class=\"fn\">into_raw_fd</a>(self) -&gt; <a class=\"type\" href=\"../os/fd/type.RawFd.html\" title=\"type std::os::fd::RawFd\">RawFd</a></h4></section></summary><div class=\"docblock\">Consumes this object, returning the raw underlying file descriptor. <a href=\"../os/fd/trait.IntoRawFd.html#tymethod.into_raw_fd\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-IntoRawHandle-for-File\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"../../src/std/os/windows/io/raw.rs.html#170-175\">source</a></span><a href=\"#impl-IntoRawHandle-for-File\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../os/windows/io/trait.IntoRawHandle.html\" title=\"trait std::os::windows::io::IntoRawHandle\">IntoRawHandle</a> for <a class=\"struct\" href=\"struct.File.html\" title=\"struct std::fs::File\">File</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Windows</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_raw_handle\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/windows/io/raw.rs.html#172-174\">source</a><a href=\"#method.into_raw_handle\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/windows/io/trait.IntoRawHandle.html#tymethod.into_raw_handle\" class=\"fn\">into_raw_handle</a>(self) -&gt; <a class=\"type\" href=\"../os/windows/io/type.RawHandle.html\" title=\"type std::os::windows::io::RawHandle\">RawHandle</a></h4></section></summary><div class=\"docblock\">Consumes this object, returning the raw underlying handle. <a href=\"../os/windows/io/trait.IntoRawHandle.html#tymethod.into_raw_handle\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-IsTerminal-for-File\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"../../src/std/io/stdio.rs.html#1217\">source</a></span><a href=\"#impl-IsTerminal-for-File\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../io/trait.IsTerminal.html\" title=\"trait std::io::IsTerminal\">IsTerminal</a> for <a class=\"struct\" href=\"struct.File.html\" title=\"struct std::fs::File\">File</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_terminal\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/stdio.rs.html#1217\">source</a><a href=\"#method.is_terminal\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.IsTerminal.html#tymethod.is_terminal\" class=\"fn\">is_terminal</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">Returns <code>true</code> if the descriptor/handle refers to a terminal/tty. <a href=\"../io/trait.IsTerminal.html#tymethod.is_terminal\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Read-for-%26File\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/fs.rs.html#769-835\">source</a></span><a href=\"#impl-Read-for-%26File\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../io/trait.Read.html\" title=\"trait std::io::Read\">Read</a> for &amp;<a class=\"struct\" href=\"struct.File.html\" title=\"struct std::fs::File\">File</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/fs.rs.html#782-784\">source</a><a href=\"#method.read-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Read.html#tymethod.read\" class=\"fn\">read</a>(&amp;mut self, buf: &amp;mut [<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Read some bytes from the file.</p>\n<p>See <a href=\"../io/trait.Read.html#tymethod.read\" title=\"method std::io::Read::read\"><code>Read::read</code></a> docs for more info.</p>\n<h5 id=\"platform-specific-behavior-3\"><a class=\"doc-anchor\" href=\"#platform-specific-behavior-3\">§</a>Platform-specific behavior</h5>\n<p>This function currently corresponds to the <code>read</code> function on Unix and\nthe <code>NtReadFile</code> function on Windows. Note that this <a href=\"../io/index.html#platform-specific-behavior\" title=\"mod std::io\">may change in\nthe future</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_vectored-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/fs.rs.html#798-800\">source</a><a href=\"#method.read_vectored-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Read.html#method.read_vectored\" class=\"fn\">read_vectored</a>(&amp;mut self, bufs: &amp;mut [<a class=\"struct\" href=\"../io/struct.IoSliceMut.html\" title=\"struct std::io::IoSliceMut\">IoSliceMut</a>&lt;'_&gt;]) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Like <code>read</code>, except that it reads into a slice of buffers.</p>\n<p>See <a href=\"../io/trait.Read.html#method.read_vectored\" title=\"method std::io::Read::read_vectored\"><code>Read::read_vectored</code></a> docs for more info.</p>\n<h5 id=\"platform-specific-behavior-4\"><a class=\"doc-anchor\" href=\"#platform-specific-behavior-4\">§</a>Platform-specific behavior</h5>\n<p>This function currently corresponds to the <code>readv</code> function on Unix and\nfalls back to the <code>read</code> implementation on Windows. Note that this\n<a href=\"../io/index.html#platform-specific-behavior\" title=\"mod std::io\">may change in the future</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_read_vectored-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/fs.rs.html#818-820\">source</a><a href=\"#method.is_read_vectored-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Read.html#method.is_read_vectored\" class=\"fn\">is_read_vectored</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>can_vector</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/69941\">#69941</a>)</span></div></span></summary><div class=\"docblock\"><p>Determines if <code>File</code> has an efficient <code>read_vectored</code> implementation.</p>\n<p>See <a href=\"../io/trait.Read.html#method.is_read_vectored\" title=\"method std::io::Read::is_read_vectored\"><code>Read::is_read_vectored</code></a> docs for more info.</p>\n<h5 id=\"platform-specific-behavior-5\"><a class=\"doc-anchor\" href=\"#platform-specific-behavior-5\">§</a>Platform-specific behavior</h5>\n<p>This function currently returns <code>true</code> on Unix an <code>false</code> on Windows.\nNote that this <a href=\"../io/index.html#platform-specific-behavior\" title=\"mod std::io\">may change in the future</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_buf-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/fs.rs.html#803-805\">source</a><a href=\"#method.read_buf-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Read.html#method.read_buf\" class=\"fn\">read_buf</a>(&amp;mut self, cursor: <a class=\"struct\" href=\"../io/struct.BorrowedCursor.html\" title=\"struct std::io::BorrowedCursor\">BorrowedCursor</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>read_buf</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/78485\">#78485</a>)</span></div></span><div class=\"docblock\">Pull some bytes from this source into the specified buffer. <a href=\"../io/trait.Read.html#method.read_buf\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_to_end-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/fs.rs.html#823-827\">source</a><a href=\"#method.read_to_end-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Read.html#method.read_to_end\" class=\"fn\">read_to_end</a>(&amp;mut self, buf: &amp;mut <a class=\"struct\" href=\"../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Read all bytes until EOF in this source, placing them into <code>buf</code>. <a href=\"../io/trait.Read.html#method.read_to_end\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_to_string-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/fs.rs.html#830-834\">source</a><a href=\"#method.read_to_string-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Read.html#method.read_to_string\" class=\"fn\">read_to_string</a>(&amp;mut self, buf: &amp;mut <a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a>) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Read all bytes until EOF in this source, appending them to <code>buf</code>. <a href=\"../io/trait.Read.html#method.read_to_string\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_exact-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#961-963\">source</a></span><a href=\"#method.read_exact-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Read.html#method.read_exact\" class=\"fn\">read_exact</a>(&amp;mut self, buf: &amp;mut [<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\">Read the exact number of bytes required to fill <code>buf</code>. <a href=\"../io/trait.Read.html#method.read_exact\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_buf_exact-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/mod.rs.html#995-997\">source</a><a href=\"#method.read_buf_exact-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Read.html#method.read_buf_exact\" class=\"fn\">read_buf_exact</a>(&amp;mut self, cursor: <a class=\"struct\" href=\"../io/struct.BorrowedCursor.html\" title=\"struct std::io::BorrowedCursor\">BorrowedCursor</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>read_buf</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/78485\">#78485</a>)</span></div></span><div class=\"docblock\">Read the exact number of bytes required to fill <code>cursor</code>. <a href=\"../io/trait.Read.html#method.read_buf_exact\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.by_ref-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1034-1039\">source</a></span><a href=\"#method.by_ref-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Read.html#method.by_ref\" class=\"fn\">by_ref</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut Self</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates a “by reference” adaptor for this instance of <code>Read</code>. <a href=\"../io/trait.Read.html#method.by_ref\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bytes-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1077-1082\">source</a></span><a href=\"#method.bytes-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Read.html#method.bytes\" class=\"fn\">bytes</a>(self) -&gt; <a class=\"struct\" href=\"../io/struct.Bytes.html\" title=\"struct std::io::Bytes\">Bytes</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Bytes<Self>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Transforms this <code>Read</code> instance to an <a href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\"><code>Iterator</code></a> over its bytes. <a href=\"../io/trait.Read.html#method.bytes\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.chain-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1115-1120\">source</a></span><a href=\"#method.chain-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Read.html#method.chain\" class=\"fn\">chain</a>&lt;R: <a class=\"trait\" href=\"../io/trait.Read.html\" title=\"trait std::io::Read\">Read</a>&gt;(self, next: R) -&gt; <a class=\"struct\" href=\"../io/struct.Chain.html\" title=\"struct std::io::Chain\">Chain</a>&lt;Self, R&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Chain<Self, R>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates an adapter which will chain this stream with another. <a href=\"../io/trait.Read.html#method.chain\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.take-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1154-1159\">source</a></span><a href=\"#method.take-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Read.html#method.take\" class=\"fn\">take</a>(self, limit: <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"../io/struct.Take.html\" title=\"struct std::io::Take\">Take</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Take<Self>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates an adapter which will read at most <code>limit</code> bytes from it. <a href=\"../io/trait.Read.html#method.take\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Read-for-File\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/fs.rs.html#908-928\">source</a></span><a href=\"#impl-Read-for-File\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../io/trait.Read.html\" title=\"trait std::io::Read\">Read</a> for <a class=\"struct\" href=\"struct.File.html\" title=\"struct std::fs::File\">File</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/fs.rs.html#909-911\">source</a><a href=\"#method.read\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Read.html#tymethod.read\" class=\"fn\">read</a>(&amp;mut self, buf: &amp;mut [<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Pull some bytes from this source into the specified buffer, returning\nhow many bytes were read. <a href=\"../io/trait.Read.html#tymethod.read\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/fs.rs.html#912-914\">source</a><a href=\"#method.read_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Read.html#method.read_vectored\" class=\"fn\">read_vectored</a>(&amp;mut self, bufs: &amp;mut [<a class=\"struct\" href=\"../io/struct.IoSliceMut.html\" title=\"struct std::io::IoSliceMut\">IoSliceMut</a>&lt;'_&gt;]) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Like <code>read</code>, except that it reads into a slice of buffers. <a href=\"../io/trait.Read.html#method.read_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_buf\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/fs.rs.html#915-917\">source</a><a href=\"#method.read_buf\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Read.html#method.read_buf\" class=\"fn\">read_buf</a>(&amp;mut self, cursor: <a class=\"struct\" href=\"../io/struct.BorrowedCursor.html\" title=\"struct std::io::BorrowedCursor\">BorrowedCursor</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>read_buf</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/78485\">#78485</a>)</span></div></span><div class=\"docblock\">Pull some bytes from this source into the specified buffer. <a href=\"../io/trait.Read.html#method.read_buf\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_read_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/fs.rs.html#919-921\">source</a><a href=\"#method.is_read_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Read.html#method.is_read_vectored\" class=\"fn\">is_read_vectored</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>can_vector</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/69941\">#69941</a>)</span></div></span><div class=\"docblock\">Determines if this <code>Read</code>er has an efficient <code>read_vectored</code>\nimplementation. <a href=\"../io/trait.Read.html#method.is_read_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_to_end\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/fs.rs.html#922-924\">source</a><a href=\"#method.read_to_end\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Read.html#method.read_to_end\" class=\"fn\">read_to_end</a>(&amp;mut self, buf: &amp;mut <a class=\"struct\" href=\"../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Read all bytes until EOF in this source, placing them into <code>buf</code>. <a href=\"../io/trait.Read.html#method.read_to_end\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_to_string\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/fs.rs.html#925-927\">source</a><a href=\"#method.read_to_string\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Read.html#method.read_to_string\" class=\"fn\">read_to_string</a>(&amp;mut self, buf: &amp;mut <a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a>) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Read all bytes until EOF in this source, appending them to <code>buf</code>. <a href=\"../io/trait.Read.html#method.read_to_string\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_exact\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#961-963\">source</a></span><a href=\"#method.read_exact\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Read.html#method.read_exact\" class=\"fn\">read_exact</a>(&amp;mut self, buf: &amp;mut [<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\">Read the exact number of bytes required to fill <code>buf</code>. <a href=\"../io/trait.Read.html#method.read_exact\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_buf_exact\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/mod.rs.html#995-997\">source</a><a href=\"#method.read_buf_exact\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Read.html#method.read_buf_exact\" class=\"fn\">read_buf_exact</a>(&amp;mut self, cursor: <a class=\"struct\" href=\"../io/struct.BorrowedCursor.html\" title=\"struct std::io::BorrowedCursor\">BorrowedCursor</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>read_buf</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/78485\">#78485</a>)</span></div></span><div class=\"docblock\">Read the exact number of bytes required to fill <code>cursor</code>. <a href=\"../io/trait.Read.html#method.read_buf_exact\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.by_ref\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1034-1039\">source</a></span><a href=\"#method.by_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Read.html#method.by_ref\" class=\"fn\">by_ref</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut Self</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates a “by reference” adaptor for this instance of <code>Read</code>. <a href=\"../io/trait.Read.html#method.by_ref\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bytes\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1077-1082\">source</a></span><a href=\"#method.bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Read.html#method.bytes\" class=\"fn\">bytes</a>(self) -&gt; <a class=\"struct\" href=\"../io/struct.Bytes.html\" title=\"struct std::io::Bytes\">Bytes</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Bytes<Self>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Transforms this <code>Read</code> instance to an <a href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\"><code>Iterator</code></a> over its bytes. <a href=\"../io/trait.Read.html#method.bytes\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.chain\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1115-1120\">source</a></span><a href=\"#method.chain\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Read.html#method.chain\" class=\"fn\">chain</a>&lt;R: <a class=\"trait\" href=\"../io/trait.Read.html\" title=\"trait std::io::Read\">Read</a>&gt;(self, next: R) -&gt; <a class=\"struct\" href=\"../io/struct.Chain.html\" title=\"struct std::io::Chain\">Chain</a>&lt;Self, R&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Chain<Self, R>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates an adapter which will chain this stream with another. <a href=\"../io/trait.Read.html#method.chain\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.take\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1154-1159\">source</a></span><a href=\"#method.take\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Read.html#method.take\" class=\"fn\">take</a>(self, limit: <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"../io/struct.Take.html\" title=\"struct std::io::Take\">Take</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Take<Self>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates an adapter which will read at most <code>limit</code> bytes from it. <a href=\"../io/trait.Read.html#method.take\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Seek-for-%26File\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/fs.rs.html#901-905\">source</a></span><a href=\"#impl-Seek-for-%26File\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../io/trait.Seek.html\" title=\"trait std::io::Seek\">Seek</a> for &amp;<a class=\"struct\" href=\"struct.File.html\" title=\"struct std::fs::File\">File</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.seek\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/fs.rs.html#902-904\">source</a><a href=\"#method.seek\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Seek.html#tymethod.seek\" class=\"fn\">seek</a>(&amp;mut self, pos: <a class=\"enum\" href=\"../io/enum.SeekFrom.html\" title=\"enum std::io::SeekFrom\">SeekFrom</a>) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;</h4></section></summary><div class=\"docblock\">Seek to an offset, in bytes, in a stream. <a href=\"../io/trait.Seek.html#tymethod.seek\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rewind\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.55.0\">1.55.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1957-1960\">source</a></span><a href=\"#method.rewind\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Seek.html#method.rewind\" class=\"fn\">rewind</a>(&amp;mut self) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\">Rewind to the beginning of a stream. <a href=\"../io/trait.Seek.html#method.rewind\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.stream_len\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/mod.rs.html#1997-2008\">source</a><a href=\"#method.stream_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Seek.html#method.stream_len\" class=\"fn\">stream_len</a>(&amp;mut self) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>seek_stream_len</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/59359\">#59359</a>)</span></div></span><div class=\"docblock\">Returns the length of this stream (in bytes). <a href=\"../io/trait.Seek.html#method.stream_len\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.stream_position\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#2034-2036\">source</a></span><a href=\"#method.stream_position\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Seek.html#method.stream_position\" class=\"fn\">stream_position</a>(&amp;mut self) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;</h4></section></summary><div class=\"docblock\">Returns the current seek position from the start of the stream. <a href=\"../io/trait.Seek.html#method.stream_position\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.seek_relative\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0\">1.80.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#2062-2065\">source</a></span><a href=\"#method.seek_relative\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Seek.html#method.seek_relative\" class=\"fn\">seek_relative</a>(&amp;mut self, offset: <a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\">Seeks relative to the current position. <a href=\"../io/trait.Seek.html#method.seek_relative\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Seek-for-File\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/fs.rs.html#947-951\">source</a></span><a href=\"#impl-Seek-for-File\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../io/trait.Seek.html\" title=\"trait std::io::Seek\">Seek</a> for <a class=\"struct\" href=\"struct.File.html\" title=\"struct std::fs::File\">File</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.seek-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/fs.rs.html#948-950\">source</a><a href=\"#method.seek-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Seek.html#tymethod.seek\" class=\"fn\">seek</a>(&amp;mut self, pos: <a class=\"enum\" href=\"../io/enum.SeekFrom.html\" title=\"enum std::io::SeekFrom\">SeekFrom</a>) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;</h4></section></summary><div class=\"docblock\">Seek to an offset, in bytes, in a stream. <a href=\"../io/trait.Seek.html#tymethod.seek\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rewind-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.55.0\">1.55.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1957-1960\">source</a></span><a href=\"#method.rewind-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Seek.html#method.rewind\" class=\"fn\">rewind</a>(&amp;mut self) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\">Rewind to the beginning of a stream. <a href=\"../io/trait.Seek.html#method.rewind\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.stream_len-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/mod.rs.html#1997-2008\">source</a><a href=\"#method.stream_len-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Seek.html#method.stream_len\" class=\"fn\">stream_len</a>(&amp;mut self) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>seek_stream_len</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/59359\">#59359</a>)</span></div></span><div class=\"docblock\">Returns the length of this stream (in bytes). <a href=\"../io/trait.Seek.html#method.stream_len\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.stream_position-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#2034-2036\">source</a></span><a href=\"#method.stream_position-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Seek.html#method.stream_position\" class=\"fn\">stream_position</a>(&amp;mut self) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;</h4></section></summary><div class=\"docblock\">Returns the current seek position from the start of the stream. <a href=\"../io/trait.Seek.html#method.stream_position\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.seek_relative-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0\">1.80.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#2062-2065\">source</a></span><a href=\"#method.seek_relative-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Seek.html#method.seek_relative\" class=\"fn\">seek_relative</a>(&amp;mut self, offset: <a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\">Seeks relative to the current position. <a href=\"../io/trait.Seek.html#method.seek_relative\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Write-for-%26File\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/fs.rs.html#837-899\">source</a></span><a href=\"#impl-Write-for-%26File\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../io/trait.Write.html\" title=\"trait std::io::Write\">Write</a> for &amp;<a class=\"struct\" href=\"struct.File.html\" title=\"struct std::fs::File\">File</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/fs.rs.html#849-851\">source</a><a href=\"#method.write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Write.html#tymethod.write\" class=\"fn\">write</a>(&amp;mut self, buf: &amp;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Write some bytes from the file.</p>\n<p>See <a href=\"../io/trait.Write.html#tymethod.write\" title=\"method std::io::Write::write\"><code>Write::write</code></a> docs for more info.</p>\n<h5 id=\"platform-specific-behavior-6\"><a class=\"doc-anchor\" href=\"#platform-specific-behavior-6\">§</a>Platform-specific behavior</h5>\n<p>This function currently corresponds to the <code>write</code> function on Unix and\nthe <code>NtWriteFile</code> function on Windows. Note that this <a href=\"../io/index.html#platform-specific-behavior\" title=\"mod std::io\">may change in\nthe future</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/fs.rs.html#864-866\">source</a><a href=\"#method.write_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Write.html#method.write_vectored\" class=\"fn\">write_vectored</a>(&amp;mut self, bufs: &amp;[<a class=\"struct\" href=\"../io/struct.IoSlice.html\" title=\"struct std::io::IoSlice\">IoSlice</a>&lt;'_&gt;]) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Like <code>write</code>, except that it writes into a slice of buffers.</p>\n<p>See <a href=\"../io/trait.Write.html#method.write_vectored\" title=\"method std::io::Write::write_vectored\"><code>Write::write_vectored</code></a> docs for more info.</p>\n<h5 id=\"platform-specific-behavior-7\"><a class=\"doc-anchor\" href=\"#platform-specific-behavior-7\">§</a>Platform-specific behavior</h5>\n<p>This function currently corresponds to the <code>writev</code> function on Unix\nand falls back to the <code>write</code> implementation on Windows. Note that this\n<a href=\"../io/index.html#platform-specific-behavior\" title=\"mod std::io\">may change in the future</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_write_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/fs.rs.html#879-881\">source</a><a href=\"#method.is_write_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Write.html#method.is_write_vectored\" class=\"fn\">is_write_vectored</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>can_vector</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/69941\">#69941</a>)</span></div></span></summary><div class=\"docblock\"><p>Determines if <code>File</code> has an efficient <code>write_vectored</code> implementation.</p>\n<p>See <a href=\"../io/trait.Write.html#method.is_write_vectored\" title=\"method std::io::Write::is_write_vectored\"><code>Write::is_write_vectored</code></a> docs for more info.</p>\n<h5 id=\"platform-specific-behavior-8\"><a class=\"doc-anchor\" href=\"#platform-specific-behavior-8\">§</a>Platform-specific behavior</h5>\n<p>This function currently returns <code>true</code> on Unix an <code>false</code> on Windows.\nNote that this <a href=\"../io/index.html#platform-specific-behavior\" title=\"mod std::io\">may change in the future</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.flush\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/fs.rs.html#896-898\">source</a><a href=\"#method.flush\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Write.html#tymethod.flush\" class=\"fn\">flush</a>(&amp;mut self) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Flushes the file, ensuring that all intermediately buffered contents\nreach their destination.</p>\n<p>See <a href=\"../io/trait.Write.html#tymethod.flush\" title=\"method std::io::Write::flush\"><code>Write::flush</code></a> docs for more info.</p>\n<h5 id=\"platform-specific-behavior-9\"><a class=\"doc-anchor\" href=\"#platform-specific-behavior-9\">§</a>Platform-specific behavior</h5>\n<p>Since a <code>File</code> structure doesn’t contain any buffers, this function is\ncurrently a no-op on Unix and Windows. Note that this <a href=\"../io/index.html#platform-specific-behavior\" title=\"mod std::io\">may change in\nthe future</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_all\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1699-1711\">source</a></span><a href=\"#method.write_all\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Write.html#method.write_all\" class=\"fn\">write_all</a>(&amp;mut self, buf: &amp;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\">Attempts to write an entire buffer into this writer. <a href=\"../io/trait.Write.html#method.write_all\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_all_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/mod.rs.html#1761-1776\">source</a><a href=\"#method.write_all_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Write.html#method.write_all_vectored\" class=\"fn\">write_all_vectored</a>(&amp;mut self, bufs: &amp;mut [<a class=\"struct\" href=\"../io/struct.IoSlice.html\" title=\"struct std::io::IoSlice\">IoSlice</a>&lt;'_&gt;]) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>write_all_vectored</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/70436\">#70436</a>)</span></div></span><div class=\"docblock\">Attempts to write multiple buffers into this writer. <a href=\"../io/trait.Write.html#method.write_all_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_fmt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1814-1850\">source</a></span><a href=\"#method.write_fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Write.html#method.write_fmt\" class=\"fn\">write_fmt</a>(&amp;mut self, fmt: <a class=\"struct\" href=\"../fmt/struct.Arguments.html\" title=\"struct std::fmt::Arguments\">Arguments</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\">Writes a formatted string into this writer, returning any error\nencountered. <a href=\"../io/trait.Write.html#method.write_fmt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.by_ref-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1874-1879\">source</a></span><a href=\"#method.by_ref-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Write.html#method.by_ref\" class=\"fn\">by_ref</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut Self</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates a “by reference” adapter for this instance of <code>Write</code>. <a href=\"../io/trait.Write.html#method.by_ref\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Write-for-File\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/fs.rs.html#930-945\">source</a></span><a href=\"#impl-Write-for-File\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../io/trait.Write.html\" title=\"trait std::io::Write\">Write</a> for <a class=\"struct\" href=\"struct.File.html\" title=\"struct std::fs::File\">File</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/fs.rs.html#931-933\">source</a><a href=\"#method.write-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Write.html#tymethod.write\" class=\"fn\">write</a>(&amp;mut self, buf: &amp;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Write a buffer into this writer, returning how many bytes were written. <a href=\"../io/trait.Write.html#tymethod.write\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_vectored-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/fs.rs.html#934-936\">source</a><a href=\"#method.write_vectored-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Write.html#method.write_vectored\" class=\"fn\">write_vectored</a>(&amp;mut self, bufs: &amp;[<a class=\"struct\" href=\"../io/struct.IoSlice.html\" title=\"struct std::io::IoSlice\">IoSlice</a>&lt;'_&gt;]) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Like <a href=\"../io/trait.Write.html#tymethod.write\" title=\"method std::io::Write::write\"><code>write</code></a>, except that it writes from a slice of buffers. <a href=\"../io/trait.Write.html#method.write_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_write_vectored-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/fs.rs.html#938-940\">source</a><a href=\"#method.is_write_vectored-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Write.html#method.is_write_vectored\" class=\"fn\">is_write_vectored</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>can_vector</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/69941\">#69941</a>)</span></div></span><div class=\"docblock\">Determines if this <code>Write</code>r has an efficient <a href=\"../io/trait.Write.html#method.write_vectored\" title=\"method std::io::Write::write_vectored\"><code>write_vectored</code></a>\nimplementation. <a href=\"../io/trait.Write.html#method.is_write_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.flush-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/fs.rs.html#942-944\">source</a><a href=\"#method.flush-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Write.html#tymethod.flush\" class=\"fn\">flush</a>(&amp;mut self) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\">Flush this output stream, ensuring that all intermediately buffered\ncontents reach their destination. <a href=\"../io/trait.Write.html#tymethod.flush\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_all-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1699-1711\">source</a></span><a href=\"#method.write_all-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Write.html#method.write_all\" class=\"fn\">write_all</a>(&amp;mut self, buf: &amp;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\">Attempts to write an entire buffer into this writer. <a href=\"../io/trait.Write.html#method.write_all\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_all_vectored-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/mod.rs.html#1761-1776\">source</a><a href=\"#method.write_all_vectored-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Write.html#method.write_all_vectored\" class=\"fn\">write_all_vectored</a>(&amp;mut self, bufs: &amp;mut [<a class=\"struct\" href=\"../io/struct.IoSlice.html\" title=\"struct std::io::IoSlice\">IoSlice</a>&lt;'_&gt;]) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>write_all_vectored</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/70436\">#70436</a>)</span></div></span><div class=\"docblock\">Attempts to write multiple buffers into this writer. <a href=\"../io/trait.Write.html#method.write_all_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_fmt-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1814-1850\">source</a></span><a href=\"#method.write_fmt-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Write.html#method.write_fmt\" class=\"fn\">write_fmt</a>(&amp;mut self, fmt: <a class=\"struct\" href=\"../fmt/struct.Arguments.html\" title=\"struct std::fmt::Arguments\">Arguments</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\">Writes a formatted string into this writer, returning any error\nencountered. <a href=\"../io/trait.Write.html#method.write_fmt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.by_ref-3\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1874-1879\">source</a></span><a href=\"#method.by_ref-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Write.html#method.by_ref\" class=\"fn\">by_ref</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut Self</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates a “by reference” adapter for this instance of <code>Write</code>. <a href=\"../io/trait.Write.html#method.by_ref\">Read more</a></div></details></div></details></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-File\" class=\"impl\"><a href=\"#impl-Freeze-for-File\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.File.html\" title=\"struct std::fs::File\">File</a></h3></section><section id=\"impl-RefUnwindSafe-for-File\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-File\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.File.html\" title=\"struct std::fs::File\">File</a></h3></section><section id=\"impl-Send-for-File\" class=\"impl\"><a href=\"#impl-Send-for-File\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.File.html\" title=\"struct std::fs::File\">File</a></h3></section><section id=\"impl-Sync-for-File\" class=\"impl\"><a href=\"#impl-Sync-for-File\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.File.html\" title=\"struct std::fs::File\">File</a></h3></section><section id=\"impl-Unpin-for-File\" class=\"impl\"><a href=\"#impl-Unpin-for-File\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.File.html\" title=\"struct std::fs::File\">File</a></h3></section><section id=\"impl-UnwindSafe-for-File\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-File\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.File.html\" title=\"struct std::fs::File\">File</a></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div><script type=\"text/json\" id=\"notable-traits-data\">{\"Bytes<Self>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../io/struct.Bytes.html\\\" title=\\\"struct std::io::Bytes\\\">Bytes</a>&lt;R&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;R: <a class=\\\"trait\\\" href=\\\"../io/trait.Read.html\\\" title=\\\"trait std::io::Read\\\">Read</a>&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../io/struct.Bytes.html\\\" title=\\\"struct std::io::Bytes\\\">Bytes</a>&lt;R&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"type\\\" href=\\\"../io/type.Result.html\\\" title=\\\"type std::io::Result\\\">Result</a>&lt;<a class=\\\"primitive\\\" href=\\\"../primitive.u8.html\\\">u8</a>&gt;;</div>\",\"Chain<Self, R>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../io/struct.Chain.html\\\" title=\\\"struct std::io::Chain\\\">Chain</a>&lt;T, U&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;T: <a class=\\\"trait\\\" href=\\\"../io/trait.Read.html\\\" title=\\\"trait std::io::Read\\\">Read</a>, U: <a class=\\\"trait\\\" href=\\\"../io/trait.Read.html\\\" title=\\\"trait std::io::Read\\\">Read</a>&gt; <a class=\\\"trait\\\" href=\\\"../io/trait.Read.html\\\" title=\\\"trait std::io::Read\\\">Read</a> for <a class=\\\"struct\\\" href=\\\"../io/struct.Chain.html\\\" title=\\\"struct std::io::Chain\\\">Chain</a>&lt;T, U&gt;</div>\",\"File\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"struct.File.html\\\" title=\\\"struct std::fs::File\\\">File</a></code></h3><pre><code><div class=\\\"where\\\">impl <a class=\\\"trait\\\" href=\\\"../io/trait.Read.html\\\" title=\\\"trait std::io::Read\\\">Read</a> for <a class=\\\"struct\\\" href=\\\"struct.File.html\\\" title=\\\"struct std::fs::File\\\">File</a></div><div class=\\\"where\\\">impl <a class=\\\"trait\\\" href=\\\"../io/trait.Read.html\\\" title=\\\"trait std::io::Read\\\">Read</a> for &amp;<a class=\\\"struct\\\" href=\\\"struct.File.html\\\" title=\\\"struct std::fs::File\\\">File</a></div><div class=\\\"where\\\">impl <a class=\\\"trait\\\" href=\\\"../io/trait.Write.html\\\" title=\\\"trait std::io::Write\\\">Write</a> for &amp;<a class=\\\"struct\\\" href=\\\"struct.File.html\\\" title=\\\"struct std::fs::File\\\">File</a></div><div class=\\\"where\\\">impl <a class=\\\"trait\\\" href=\\\"../io/trait.Write.html\\\" title=\\\"trait std::io::Write\\\">Write</a> for <a class=\\\"struct\\\" href=\\\"struct.File.html\\\" title=\\\"struct std::fs::File\\\">File</a></div>\",\"Take<Self>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../io/struct.Take.html\\\" title=\\\"struct std::io::Take\\\">Take</a>&lt;T&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;T: <a class=\\\"trait\\\" href=\\\"../io/trait.Read.html\\\" title=\\\"trait std::io::Read\\\">Read</a>&gt; <a class=\\\"trait\\\" href=\\\"../io/trait.Read.html\\\" title=\\\"trait std::io::Read\\\">Read</a> for <a class=\\\"struct\\\" href=\\\"../io/struct.Take.html\\\" title=\\\"struct std::io::Take\\\">Take</a>&lt;T&gt;</div>\"}</script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:20:24.731Z"
}