{
	"title": "OsStr in std::ffi::os_str - Rust",
	"url": "https://doc.rust-lang.org/stable/std/ffi/os_str/struct.OsStr.html",
	"markdown": "# OsStr in std::ffi::os\\_str - Rust\n\n## Struct [std](../../index.html)::[ffi](../index.html)::[os\\_str](index.html)::[OsStr](#)\n\n1.0.0 · [source](about:blank/src/std/ffi/os_str.rs.html#122-124) ·\n\n```\npub struct OsStr { /* private fields */ }\n```\n\nExpand description\n\nBorrowed reference to an OS string (see [`OsString`](../struct.OsString.html \"struct std::ffi::OsString\")).\n\nThis type represents a borrowed reference to a string in the operating system’s preferred representation.\n\n`&OsStr` is to [`OsString`](../struct.OsString.html \"struct std::ffi::OsString\") as `&[str](../../primitive.str.html \"primitive str\")` is to [`String`](../../string/struct.String.html \"struct std::string::String\"): the former in each pair are borrowed references; the latter are owned strings.\n\nSee the [module’s toplevel documentation about conversions](about:blank/index.html#conversions \"mod std::ffi\") for a discussion on the traits which `OsStr` implements for [conversions](about:blank/index.html#conversions \"mod std::ffi\") from/to native representations.\n\n[source](about:blank/src/std/ffi/os_str.rs.html#731-1188)[§](#impl-OsStr)\n\n1.0.0 · [source](about:blank/src/std/ffi/os_str.rs.html#743-745)\n\nCoerces into an `OsStr` slice.\n\n##### [§](#examples)Examples\n\n```\nuse std::ffi::OsStr;\n\nlet os_str = OsStr::new(\"foo\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::OsStr;%0A++++%0A++++let+os_str+=+OsStr::new(%22foo%22);%0A%7D&edition=2021)\n\n1.74.0 · [source](about:blank/src/std/ffi/os_str.rs.html#786-788)\n\nConverts a slice of bytes to an OS string slice without checking that the string contains valid `OsStr`\\-encoded data.\n\nThe byte encoding is an unspecified, platform-specific, self-synchronizing superset of UTF-8. By being a self-synchronizing superset of UTF-8, this encoding is also a superset of 7-bit ASCII.\n\nSee the [module’s toplevel documentation about conversions](about:blank/index.html#conversions \"mod std::ffi\") for safe, cross-platform [conversions](about:blank/index.html#conversions \"mod std::ffi\") from/to native representations.\n\n##### [§](#safety)Safety\n\nAs the encoding is unspecified, callers must pass in bytes that originated as a mixture of validated UTF-8 and bytes from [`OsStr::as_encoded_bytes`](about:blank/struct.OsStr.html#method.as_encoded_bytes \"method std::ffi::OsStr::as_encoded_bytes\") from within the same Rust version built for the same target platform. For example, reconstructing an `OsStr` from bytes sent over the network or stored in a file will likely violate these safety rules.\n\nDue to the encoding being self-synchronizing, the bytes from [`OsStr::as_encoded_bytes`](about:blank/struct.OsStr.html#method.as_encoded_bytes \"method std::ffi::OsStr::as_encoded_bytes\") can be split either immediately before or immediately after any valid non-empty UTF-8 substring.\n\n##### [§](#example)Example\n\n```\nuse std::ffi::OsStr;\n\nlet os_str = OsStr::new(\"Mary had a little lamb\");\nlet bytes = os_str.as_encoded_bytes();\nlet words = bytes.split(|b| *b == b' ');\nlet words: Vec<&OsStr> = words.map(|word| {\n    // SAFETY:\n    // - Each `word` only contains content that originated from `OsStr::as_encoded_bytes`\n    // - Only split with ASCII whitespace which is a non-empty UTF-8 substring\n    unsafe { OsStr::from_encoded_bytes_unchecked(word) }\n}).collect();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::OsStr;%0A++++%0A++++let+os_str+=+OsStr::new(%22Mary+had+a+little+lamb%22);%0A++++let+bytes+=+os_str.as_encoded_bytes();%0A++++let+words+=+bytes.split(%7Cb%7C+*b+==+b%27+%27);%0A++++let+words:+Vec%3C%26OsStr%3E+=+words.map(%7Cword%7C+%7B%0A++++++++//+SAFETY:%0A++++++++//+-+Each+%60word%60+only+contains+content+that+originated+from+%60OsStr::as_encoded_bytes%60%0A++++++++//+-+Only+split+with+ASCII+whitespace+which+is+a+non-empty+UTF-8+substring%0A++++++++unsafe+%7B+OsStr::from_encoded_bytes_unchecked(word)+%7D%0A++++%7D).collect();%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/ffi/os_str.rs.html#822-824)\n\nYields a `&[str](../../primitive.str.html \"primitive str\")` slice if the `OsStr` is valid Unicode.\n\nThis conversion may entail doing a check for UTF-8 validity.\n\n##### [§](#examples-1)Examples\n\n```\nuse std::ffi::OsStr;\n\nlet os_str = OsStr::new(\"foo\");\nassert_eq!(os_str.to_str(), Some(\"foo\"));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::OsStr;%0A++++%0A++++let+os_str+=+OsStr::new(%22foo%22);%0A++++assert_eq!(os_str.to_str(),+Some(%22foo%22));%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/ffi/os_str.rs.html#875-877)\n\nConverts an `OsStr` to a `[Cow](../../borrow/enum.Cow.html \"enum std::borrow::Cow\")<[str](../../primitive.str.html \"primitive str\")>`.\n\nAny non-Unicode sequences are replaced with [`U+FFFD REPLACEMENT CHARACTER`](../../char/constant.REPLACEMENT_CHARACTER.html \"constant std::char::REPLACEMENT_CHARACTER\").\n\n##### [§](#examples-2)Examples\n\nCalling `to_string_lossy` on an `OsStr` with invalid unicode:\n\n```\n// Note, due to differences in how Unix and Windows represent strings,\n// we are forced to complicate this example, setting up example `OsStr`s\n// with different source data and via different platform extensions.\n// Understand that in reality you could end up with such example invalid\n// sequences simply through collecting user command line arguments, for\n// example.\n\n#[cfg(unix)] {\n    use std::ffi::OsStr;\n    use std::os::unix::ffi::OsStrExt;\n\n    // Here, the values 0x66 and 0x6f correspond to 'f' and 'o'\n    // respectively. The value 0x80 is a lone continuation byte, invalid\n    // in a UTF-8 sequence.\n    let source = [0x66, 0x6f, 0x80, 0x6f];\n    let os_str = OsStr::from_bytes(&source[..]);\n\n    assert_eq!(os_str.to_string_lossy(), \"fo�o\");\n}\n#[cfg(windows)] {\n    use std::ffi::OsString;\n    use std::os::windows::prelude::*;\n\n    // Here the values 0x0066 and 0x006f correspond to 'f' and 'o'\n    // respectively. The value 0xD800 is a lone surrogate half, invalid\n    // in a UTF-16 sequence.\n    let source = [0x0066, 0x006f, 0xD800, 0x006f];\n    let os_string = OsString::from_wide(&source[..]);\n    let os_str = os_string.as_os_str();\n\n    assert_eq!(os_str.to_string_lossy(), \"fo�o\");\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+Note,+due+to+differences+in+how+Unix+and+Windows+represent+strings,%0A//+we+are+forced+to+complicate+this+example,+setting+up+example+%60OsStr%60s%0A//+with+different+source+data+and+via+different+platform+extensions.%0A//+Understand+that+in+reality+you+could+end+up+with+such+example+invalid%0A//+sequences+simply+through+collecting+user+command+line+arguments,+for%0A//+example.%0A%0Afn+main()+%7B%0A++++%23%5Bcfg(unix)%5D+%7B%0A++++++++use+std::ffi::OsStr;%0A++++++++use+std::os::unix::ffi::OsStrExt;%0A++++%0A++++++++//+Here,+the+values+0x66+and+0x6f+correspond+to+%27f%27+and+%27o%27%0A++++++++//+respectively.+The+value+0x80+is+a+lone+continuation+byte,+invalid%0A++++++++//+in+a+UTF-8+sequence.%0A++++++++let+source+=+%5B0x66,+0x6f,+0x80,+0x6f%5D;%0A++++++++let+os_str+=+OsStr::from_bytes(%26source%5B..%5D);%0A++++%0A++++++++assert_eq!(os_str.to_string_lossy(),+%22fo%EF%BF%BDo%22);%0A++++%7D%0A++++%23%5Bcfg(windows)%5D+%7B%0A++++++++use+std::ffi::OsString;%0A++++++++use+std::os::windows::prelude::*;%0A++++%0A++++++++//+Here+the+values+0x0066+and+0x006f+correspond+to+%27f%27+and+%27o%27%0A++++++++//+respectively.+The+value+0xD800+is+a+lone+surrogate+half,+invalid%0A++++++++//+in+a+UTF-16+sequence.%0A++++++++let+source+=+%5B0x0066,+0x006f,+0xD800,+0x006f%5D;%0A++++++++let+os_string+=+OsString::from_wide(%26source%5B..%5D);%0A++++++++let+os_str+=+os_string.as_os_str();%0A++++%0A++++++++assert_eq!(os_str.to_string_lossy(),+%22fo%EF%BF%BDo%22);%0A++++%7D%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/ffi/os_str.rs.html#894-896)\n\nCopies the slice into an owned [`OsString`](../struct.OsString.html \"struct std::ffi::OsString\").\n\n##### [§](#examples-3)Examples\n\n```\nuse std::ffi::{OsStr, OsString};\n\nlet os_str = OsStr::new(\"foo\");\nlet os_string = os_str.to_os_string();\nassert_eq!(os_string, OsString::from(\"foo\"));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::%7BOsStr,+OsString%7D;%0A++++%0A++++let+os_str+=+OsStr::new(%22foo%22);%0A++++let+os_string+=+os_str.to_os_string();%0A++++assert_eq!(os_string,+OsString::from(%22foo%22));%0A%7D&edition=2021)\n\n1.9.0 · [source](about:blank/src/std/ffi/os_str.rs.html#914-916)\n\nChecks whether the `OsStr` is empty.\n\n##### [§](#examples-4)Examples\n\n```\nuse std::ffi::OsStr;\n\nlet os_str = OsStr::new(\"\");\nassert!(os_str.is_empty());\n\nlet os_str = OsStr::new(\"foo\");\nassert!(!os_str.is_empty());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::OsStr;%0A++++%0A++++let+os_str+=+OsStr::new(%22%22);%0A++++assert!(os_str.is_empty());%0A++++%0A++++let+os_str+=+OsStr::new(%22foo%22);%0A++++assert!(!os_str.is_empty());%0A%7D&edition=2021)\n\n1.9.0 · [source](about:blank/src/std/ffi/os_str.rs.html#948-950)\n\nReturns the length of this `OsStr`.\n\nNote that this does **not** return the number of bytes in the string in OS string form.\n\nThe length returned is that of the underlying storage used by `OsStr`. As discussed in the [`OsString`](../struct.OsString.html \"struct std::ffi::OsString\") introduction, [`OsString`](../struct.OsString.html \"struct std::ffi::OsString\") and `OsStr` store strings in a form best suited for cheap inter-conversion between native-platform and Rust string forms, which may differ significantly from both of them, including in storage size and encoding.\n\nThis number is simply useful for passing to other methods, like [`OsString::with_capacity`](about:blank/struct.OsString.html#method.with_capacity \"associated function std::ffi::OsString::with_capacity\") to avoid reallocations.\n\nSee the main `OsString` documentation information about encoding and capacity units.\n\n##### [§](#examples-5)Examples\n\n```\nuse std::ffi::OsStr;\n\nlet os_str = OsStr::new(\"\");\nassert_eq!(os_str.len(), 0);\n\nlet os_str = OsStr::new(\"foo\");\nassert_eq!(os_str.len(), 3);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::OsStr;%0A++++%0A++++let+os_str+=+OsStr::new(%22%22);%0A++++assert_eq!(os_str.len(),+0);%0A++++%0A++++let+os_str+=+OsStr::new(%22foo%22);%0A++++assert_eq!(os_str.len(),+3);%0A%7D&edition=2021)\n\n1.20.0 · [source](about:blank/src/std/ffi/os_str.rs.html#955-958)\n\nConverts a `[Box](../../boxed/struct.Box.html \"struct std::boxed::Box\")<[OsStr](../struct.OsStr.html \"struct std::ffi::OsStr\")>` into an [`OsString`](../struct.OsString.html \"struct std::ffi::OsString\") without copying or allocating.\n\n1.74.0 · [source](about:blank/src/std/ffi/os_str.rs.html#976-978)\n\nConverts an OS string slice to a byte slice. To convert the byte slice back into an OS string slice, use the [`OsStr::from_encoded_bytes_unchecked`](about:blank/struct.OsStr.html#method.from_encoded_bytes_unchecked \"associated function std::ffi::OsStr::from_encoded_bytes_unchecked\") function.\n\nThe byte encoding is an unspecified, platform-specific, self-synchronizing superset of UTF-8. By being a self-synchronizing superset of UTF-8, this encoding is also a superset of 7-bit ASCII.\n\nNote: As the encoding is unspecified, any sub-slice of bytes that is not valid UTF-8 should be treated as opaque and only comparable within the same Rust version built for the same target platform. For example, sending the slice over the network or storing it in a file will likely result in incompatible byte slices. See [`OsString`](../struct.OsString.html \"struct std::ffi::OsString\") for more encoding details and [`std::ffi`](../index.html \"mod std::ffi\") for platform-specific, specified conversions.\n\n[source](about:blank/src/std/ffi/os_str.rs.html#1012-1028)\n\n🔬This is a nightly-only experimental API. (`os_str_slice` [#118485](https://github.com/rust-lang/rust/issues/118485))\n\nTakes a substring based on a range that corresponds to the return value of [`OsStr::as_encoded_bytes`](about:blank/struct.OsStr.html#method.as_encoded_bytes \"method std::ffi::OsStr::as_encoded_bytes\").\n\nThe range’s start and end must lie on valid `OsStr` boundaries. A valid `OsStr` boundary is one of:\n\n-   The start of the string\n-   The end of the string\n-   Immediately before a valid non-empty UTF-8 substring\n-   Immediately after a valid non-empty UTF-8 substring\n\n##### [§](#panics)Panics\n\nPanics if `range` does not lie on valid `OsStr` boundaries or if it exceeds the end of the string.\n\n##### [§](#example-1)Example\n\n```\n#![feature(os_str_slice)]\n\nuse std::ffi::OsStr;\n\nlet os_str = OsStr::new(\"foo=bar\");\nlet bytes = os_str.as_encoded_bytes();\nif let Some(index) = bytes.iter().position(|b| *b == b'=') {\n    let key = os_str.slice_encoded_bytes(..index);\n    let value = os_str.slice_encoded_bytes(index + 1..);\n    assert_eq!(key, \"foo\");\n    assert_eq!(value, \"bar\");\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(os_str_slice)%5D%0A%0Afn+main()+%7B%0A++++use+std::ffi::OsStr;%0A++++%0A++++let+os_str+=+OsStr::new(%22foo=bar%22);%0A++++let+bytes+=+os_str.as_encoded_bytes();%0A++++if+let+Some(index)+=+bytes.iter().position(%7Cb%7C+*b+==+b%27=%27)+%7B%0A++++++++let+key+=+os_str.slice_encoded_bytes(..index);%0A++++++++let+value+=+os_str.slice_encoded_bytes(index+%2B+1..);%0A++++++++assert_eq!(key,+%22foo%22);%0A++++++++assert_eq!(value,+%22bar%22);%0A++++%7D%0A%7D&version=nightly&edition=2021)\n\n1.53.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1051-1053)\n\nConverts this string to its ASCII lower case equivalent in-place.\n\nASCII letters ‘A’ to ‘Z’ are mapped to ‘a’ to ‘z’, but non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use [`OsStr::to_ascii_lowercase`](about:blank/struct.OsStr.html#method.to_ascii_lowercase \"method std::ffi::OsStr::to_ascii_lowercase\").\n\n##### [§](#examples-6)Examples\n\n```\nuse std::ffi::OsString;\n\nlet mut s = OsString::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::OsString;%0A++++%0A++++let+mut+s+=+OsString::from(%22GR%C3%9C%C3%9FE,+J%C3%9CRGEN+%E2%9D%A4%22);%0A++++%0A++++s.make_ascii_lowercase();%0A++++%0A++++assert_eq!(%22gr%C3%9C%C3%9Fe,+j%C3%9Crgen+%E2%9D%A4%22,+s);%0A%7D&edition=2021)\n\n1.53.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1076-1078)\n\nConverts this string to its ASCII upper case equivalent in-place.\n\nASCII letters ‘a’ to ‘z’ are mapped to ‘A’ to ‘Z’, but non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use [`OsStr::to_ascii_uppercase`](about:blank/struct.OsStr.html#method.to_ascii_uppercase \"method std::ffi::OsStr::to_ascii_uppercase\").\n\n##### [§](#examples-7)Examples\n\n```\nuse std::ffi::OsString;\n\nlet mut s = OsString::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::OsString;%0A++++%0A++++let+mut+s+=+OsString::from(%22Gr%C3%BC%C3%9Fe,+J%C3%BCrgen+%E2%9D%A4%22);%0A++++%0A++++s.make_ascii_uppercase();%0A++++%0A++++assert_eq!(%22GR%C3%BC%C3%9FE,+J%C3%BCRGEN+%E2%9D%A4%22,+s);%0A%7D&edition=2021)\n\n1.53.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1098-1100)\n\nReturns a copy of this string where each character is mapped to its ASCII lower case equivalent.\n\nASCII letters ‘A’ to ‘Z’ are mapped to ‘a’ to ‘z’, but non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`OsStr::make_ascii_lowercase`](about:blank/struct.OsStr.html#method.make_ascii_lowercase \"method std::ffi::OsStr::make_ascii_lowercase\").\n\n##### [§](#examples-8)Examples\n\n```\nuse std::ffi::OsString;\nlet s = OsString::from(\"Grüße, Jürgen ❤\");\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::OsString;%0A++++let+s+=+OsString::from(%22Gr%C3%BC%C3%9Fe,+J%C3%BCrgen+%E2%9D%A4%22);%0A++++%0A++++assert_eq!(%22gr%C3%BC%C3%9Fe,+j%C3%BCrgen+%E2%9D%A4%22,+s.to_ascii_lowercase());%0A%7D&edition=2021)\n\n1.53.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1120-1122)\n\nReturns a copy of this string where each character is mapped to its ASCII upper case equivalent.\n\nASCII letters ‘a’ to ‘z’ are mapped to ‘A’ to ‘Z’, but non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`OsStr::make_ascii_uppercase`](about:blank/struct.OsStr.html#method.make_ascii_uppercase \"method std::ffi::OsStr::make_ascii_uppercase\").\n\n##### [§](#examples-9)Examples\n\n```\nuse std::ffi::OsString;\nlet s = OsString::from(\"Grüße, Jürgen ❤\");\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::OsString;%0A++++let+s+=+OsString::from(%22Gr%C3%BC%C3%9Fe,+J%C3%BCrgen+%E2%9D%A4%22);%0A++++%0A++++assert_eq!(%22GR%C3%BC%C3%9FE,+J%C3%BCRGEN+%E2%9D%A4%22,+s.to_ascii_uppercase());%0A%7D&edition=2021)\n\n1.53.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1140-1142)\n\nChecks if all characters in this string are within the ASCII range.\n\n##### [§](#examples-10)Examples\n\n```\nuse std::ffi::OsString;\n\nlet ascii = OsString::from(\"hello!\\n\");\nlet non_ascii = OsString::from(\"Grüße, Jürgen ❤\");\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::OsString;%0A++++%0A++++let+ascii+=+OsString::from(%22hello!%5Cn%22);%0A++++let+non_ascii+=+OsString::from(%22Gr%C3%BC%C3%9Fe,+J%C3%BCrgen+%E2%9D%A4%22);%0A++++%0A++++assert!(ascii.is_ascii());%0A++++assert!(!non_ascii.is_ascii());%0A%7D&edition=2021)\n\n1.53.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1159-1161)\n\nChecks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`, but without allocating and copying temporaries.\n\n##### [§](#examples-11)Examples\n\n```\nuse std::ffi::OsString;\n\nassert!(OsString::from(\"Ferris\").eq_ignore_ascii_case(\"FERRIS\"));\nassert!(OsString::from(\"Ferrös\").eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!OsString::from(\"Ferrös\").eq_ignore_ascii_case(\"FERRÖS\"));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::OsString;%0A++++%0A++++assert!(OsString::from(%22Ferris%22).eq_ignore_ascii_case(%22FERRIS%22));%0A++++assert!(OsString::from(%22Ferr%C3%B6s%22).eq_ignore_ascii_case(%22FERR%C3%B6S%22));%0A++++assert!(!OsString::from(%22Ferr%C3%B6s%22).eq_ignore_ascii_case(%22FERR%C3%96S%22));%0A%7D&edition=2021)\n\n[source](about:blank/src/std/ffi/os_str.rs.html#1185-1187)\n\n🔬This is a nightly-only experimental API. (`os_str_display` [#120048](https://github.com/rust-lang/rust/issues/120048))\n\nReturns an object that implements [`Display`](../../fmt/trait.Display.html \"trait std::fmt::Display\") for safely printing an [`OsStr`](../struct.OsStr.html \"struct std::ffi::OsStr\") that may contain non-Unicode data. This may perform lossy conversion, depending on the platform. If you would like an implementation which escapes the [`OsStr`](../struct.OsStr.html \"struct std::ffi::OsStr\") please use [`Debug`](../../fmt/trait.Debug.html \"trait std::fmt::Debug\") instead.\n\n##### [§](#examples-12)Examples\n\n```\n#![feature(os_str_display)]\nuse std::ffi::OsStr;\n\nlet s = OsStr::new(\"Hello, world!\");\nprintln!(\"{}\", s.display());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(os_str_display)%5D%0Afn+main()+%7B%0A++++use+std::ffi::OsStr;%0A++++%0A++++let+s+=+OsStr::new(%22Hello,+world!%22);%0A++++println!(%22%7B%7D%22,+s.display());%0A%7D&version=nightly&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/path.rs.html#561-566)[§](#impl-AsRef%3COsStr%3E-for-Component%3C'_%3E)\n\n[source](about:blank/src/std/path.rs.html#563-565)[§](#method.as_ref-6)\n\nConverts this type into a shared reference of the (usually inferred) input type.\n\n1.0.0 · [source](about:blank/src/std/path.rs.html#805-810)[§](#impl-AsRef%3COsStr%3E-for-Components%3C'_%3E)\n\n[source](about:blank/src/std/path.rs.html#807-809)[§](#method.as_ref-4)\n\nConverts this type into a shared reference of the (usually inferred) input type.\n\n1.0.0 · [source](about:blank/src/std/path.rs.html#858-863)[§](#impl-AsRef%3COsStr%3E-for-Iter%3C'_%3E)\n\n[source](about:blank/src/std/path.rs.html#860-862)[§](#method.as_ref-3)\n\nConverts this type into a shared reference of the (usually inferred) input type.\n\n1.0.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1560-1565)[§](#impl-AsRef%3COsStr%3E-for-OsStr)\n\n[source](about:blank/src/std/ffi/os_str.rs.html#1562-1564)[§](#method.as_ref-7)\n\nConverts this type into a shared reference of the (usually inferred) input type.\n\n1.0.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1568-1573)[§](#impl-AsRef%3COsStr%3E-for-OsString)\n\n[source](about:blank/src/std/ffi/os_str.rs.html#1570-1572)[§](#method.as_ref-1)\n\nConverts this type into a shared reference of the (usually inferred) input type.\n\n1.0.0 · [source](about:blank/src/std/path.rs.html#3010-3015)[§](#impl-AsRef%3COsStr%3E-for-Path)\n\n[source](about:blank/src/std/path.rs.html#3012-3014)[§](#method.as_ref)\n\nConverts this type into a shared reference of the (usually inferred) input type.\n\n1.0.0 · [source](about:blank/src/std/path.rs.html#1957-1962)[§](#impl-AsRef%3COsStr%3E-for-PathBuf)\n\n[source](about:blank/src/std/path.rs.html#1959-1961)[§](#method.as_ref-2)\n\nConverts this type into a shared reference of the (usually inferred) input type.\n\n1.0.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1584-1589)[§](#impl-AsRef%3COsStr%3E-for-String)\n\n[source](about:blank/src/std/ffi/os_str.rs.html#1586-1588)[§](#method.as_ref-8)\n\nConverts this type into a shared reference of the (usually inferred) input type.\n\n1.0.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1576-1581)[§](#impl-AsRef%3COsStr%3E-for-str)\n\n[source](about:blank/src/std/ffi/os_str.rs.html#1578-1580)[§](#method.as_ref-9)\n\nConverts this type into a shared reference of the (usually inferred) input type.\n\n1.0.0 · [source](about:blank/src/std/path.rs.html#3150-3155)[§](#impl-AsRef%3CPath%3E-for-OsStr)\n\n[source](about:blank/src/std/path.rs.html#3152-3154)[§](#method.as_ref-5)\n\nConverts this type into a shared reference of the (usually inferred) input type.\n\n1.0.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1539-1544)[§](#impl-Borrow%3COsStr%3E-for-OsString)\n\n1.29.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1233-1238)[§](#impl-Clone-for-Box%3COsStr%3E)\n\n1.0.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1476-1480)[§](#impl-Debug-for-OsStr)\n\n1.9.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1347-1353)[§](#impl-Default-for-%26OsStr)\n\n1.17.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1338-1344)[§](#impl-Default-for-Box%3COsStr%3E)\n\n1.52.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1633-1640)[§](#impl-Extend%3C%26OsStr%3E-for-OsString)\n\n[source](about:blank/src/std/ffi/os_str.rs.html#1635-1639)[§](#method.extend)\n\nExtends a collection with the contents of an iterator. [Read more](about:blank/iter/trait.Extend.html#tymethod.extend)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/collect.rs.html#453)[§](#method.extend_one)\n\n🔬This is a nightly-only experimental API. (`extend_one` [#72631](https://github.com/rust-lang/rust/issues/72631))\n\nExtends a collection with exactly one element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/iter/traits/collect.rs.html#461)[§](#method.extend_reserve)\n\n🔬This is a nightly-only experimental API. (`extend_one` [#72631](https://github.com/rust-lang/rust/issues/72631))\n\nReserves capacity in a collection for the given number of additional elements. [Read more](about:blank/iter/trait.Extend.html#method.extend_reserve)\n\n1.24.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1252-1259)[§](#impl-From%3C%26OsStr%3E-for-Arc%3COsStr%3E)\n\n1.17.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1191-1198)[§](#impl-From%3C%26OsStr%3E-for-Box%3COsStr%3E)\n\n1.28.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1292-1298)[§](#impl-From%3C%26OsStr%3E-for-Cow%3C'a,+OsStr%3E)\n\n1.24.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1273-1280)[§](#impl-From%3C%26OsStr%3E-for-Rc%3COsStr%3E)\n\n1.45.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1201-1211)[§](#impl-From%3CCow%3C'_,+OsStr%3E%3E-for-Box%3COsStr%3E)\n\n[source](about:blank/src/std/ffi/os_str.rs.html#1205-1210)[§](#method.from-4)\n\nConverts a `Cow<'a, OsStr>` into a `[Box](../../boxed/struct.Box.html \"struct std::boxed::Box\")<[OsStr](../struct.OsStr.html \"struct std::ffi::OsStr\")>`, by copying the contents if they are borrowed.\n\n1.20.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1224-1230)[§](#impl-From%3COsString%3E-for-Box%3COsStr%3E)\n\n1.52.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1672-1681)[§](#impl-FromIterator%3C%26OsStr%3E-for-OsString)\n\n1.0.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1468-1473)[§](#impl-Hash-for-OsStr)\n\n[source](about:blank/src/std/ffi/os_str.rs.html#1522-1536)[§](#impl-Join%3C%26OsStr%3E-for-%5BS%5D)\n\n[§](#associatedtype.Output)\n\n🔬This is a nightly-only experimental API. (`slice_concat_trait` [#27747](https://github.com/rust-lang/rust/issues/27747))\n\nThe resulting type after concatenation\n\n[source](about:blank/src/std/ffi/os_str.rs.html#1525-1535)[§](#method.join)\n\n🔬This is a nightly-only experimental API. (`slice_concat_trait` [#27747](https://github.com/rust-lang/rust/issues/27747))\n\n1.0.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1418-1423)[§](#impl-Ord-for-OsStr)\n\n1.0.0 · [source](about:blank/src/std/os/windows/ffi.rs.html#131-136)[§](#impl-OsStrExt-for-OsStr)\n\nAvailable on **Windows** only.\n\n[source](about:blank/src/std/os/windows/ffi.rs.html#133-135)[§](#method.encode_wide)\n\nRe-encodes an `OsStr` as a wide character sequence, i.e., potentially ill-formed UTF-16. [Read more](about:blank/os/windows/ffi/trait.OsStrExt.html#tymethod.encode_wide)\n\n1.0.0 · [source](about:blank/src/std/os/unix/ffi/os_str.rs.html#61-70)[§](#impl-OsStrExt-for-OsStr-1)\n\nAvailable on **WASI** only.\n\n1.0.0 · [source](about:blank/src/std/os/unix/ffi/os_str.rs.html#61-70)[§](#impl-OsStrExt-for-OsStr-2)\n\nAvailable on **Unix** only.\n\n1.8.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1464)[§](#impl-PartialEq%3C%26OsStr%3E-for-Cow%3C'a,+OsStr%3E)\n\n[source](about:blank/src/std/ffi/os_str.rs.html#1464)[§](#method.eq-16)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne-16)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.8.0 · [source](about:blank/src/std/path.rs.html#3307)[§](#impl-PartialEq%3C%26OsStr%3E-for-Cow%3C'a,+Path%3E)\n\n[source](about:blank/src/std/path.rs.html#3307)[§](#method.eq-3)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne-3)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.8.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1462)[§](#impl-PartialEq%3C%26OsStr%3E-for-OsString)\n\n[source](about:blank/src/std/ffi/os_str.rs.html#1462)[§](#method.eq-22)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne-22)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.8.0 · [source](about:blank/src/std/path.rs.html#3300)[§](#impl-PartialEq%3C%26OsStr%3E-for-Path)\n\n[source](about:blank/src/std/path.rs.html#3300)[§](#method.eq-17)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne-17)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.8.0 · [source](about:blank/src/std/path.rs.html#3296)[§](#impl-PartialEq%3C%26OsStr%3E-for-PathBuf)\n\n[source](about:blank/src/std/path.rs.html#3296)[§](#method.eq-2)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne-2)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.8.0 · [source](about:blank/src/std/path.rs.html#3303)[§](#impl-PartialEq%3C%26Path%3E-for-OsStr)\n\n[source](about:blank/src/std/path.rs.html#3303)[§](#method.eq-21)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne-21)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.8.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1464)[§](#impl-PartialEq%3CCow%3C'a,+OsStr%3E%3E-for-%26OsStr)\n\n[source](about:blank/src/std/ffi/os_str.rs.html#1464)[§](#method.eq-6)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne-6)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.8.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1463)[§](#impl-PartialEq%3CCow%3C'a,+OsStr%3E%3E-for-OsStr)\n\n[source](about:blank/src/std/ffi/os_str.rs.html#1463)[§](#method.eq-1)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne-1)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.8.0 · [source](about:blank/src/std/path.rs.html#3307)[§](#impl-PartialEq%3CCow%3C'a,+Path%3E%3E-for-%26OsStr)\n\n[source](about:blank/src/std/path.rs.html#3307)[§](#method.eq-24)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne-24)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.8.0 · [source](about:blank/src/std/path.rs.html#3306)[§](#impl-PartialEq%3CCow%3C'a,+Path%3E%3E-for-OsStr)\n\n[source](about:blank/src/std/path.rs.html#3306)[§](#method.eq-9)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne-9)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.8.0 · [source](about:blank/src/std/path.rs.html#3303)[§](#impl-PartialEq%3COsStr%3E-for-%26Path)\n\n[source](about:blank/src/std/path.rs.html#3303)[§](#method.eq-19)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne-19)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.8.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1463)[§](#impl-PartialEq%3COsStr%3E-for-Cow%3C'a,+OsStr%3E)\n\n[source](about:blank/src/std/ffi/os_str.rs.html#1463)[§](#method.eq)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.8.0 · [source](about:blank/src/std/path.rs.html#3306)[§](#impl-PartialEq%3COsStr%3E-for-Cow%3C'a,+Path%3E)\n\n[source](about:blank/src/std/path.rs.html#3306)[§](#method.eq-10)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne-10)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.8.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1461)[§](#impl-PartialEq%3COsStr%3E-for-OsString)\n\n[source](about:blank/src/std/ffi/os_str.rs.html#1461)[§](#method.eq-18)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne-18)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.8.0 · [source](about:blank/src/std/path.rs.html#3299)[§](#impl-PartialEq%3COsStr%3E-for-Path)\n\n[source](about:blank/src/std/path.rs.html#3299)[§](#method.eq-14)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne-14)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.8.0 · [source](about:blank/src/std/path.rs.html#3295)[§](#impl-PartialEq%3COsStr%3E-for-PathBuf)\n\n[source](about:blank/src/std/path.rs.html#3295)[§](#method.eq-23)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne-23)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.0.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1372-1377)[§](#impl-PartialEq%3COsStr%3E-for-str)\n\n[source](about:blank/src/std/ffi/os_str.rs.html#1374-1376)[§](#method.eq-11)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne-11)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.8.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1462)[§](#impl-PartialEq%3COsString%3E-for-%26OsStr)\n\n[source](about:blank/src/std/ffi/os_str.rs.html#1462)[§](#method.eq-4)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne-4)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.8.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1461)[§](#impl-PartialEq%3COsString%3E-for-OsStr)\n\n[source](about:blank/src/std/ffi/os_str.rs.html#1461)[§](#method.eq-20)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne-20)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.8.0 · [source](about:blank/src/std/path.rs.html#3300)[§](#impl-PartialEq%3CPath%3E-for-%26OsStr)\n\n[source](about:blank/src/std/path.rs.html#3300)[§](#method.eq-8)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne-8)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.8.0 · [source](about:blank/src/std/path.rs.html#3299)[§](#impl-PartialEq%3CPath%3E-for-OsStr)\n\n[source](about:blank/src/std/path.rs.html#3299)[§](#method.eq-5)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne-5)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.8.0 · [source](about:blank/src/std/path.rs.html#3296)[§](#impl-PartialEq%3CPathBuf%3E-for-%26OsStr)\n\n[source](about:blank/src/std/path.rs.html#3296)[§](#method.eq-7)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne-7)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.8.0 · [source](about:blank/src/std/path.rs.html#3295)[§](#impl-PartialEq%3CPathBuf%3E-for-OsStr)\n\n[source](about:blank/src/std/path.rs.html#3295)[§](#method.eq-13)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne-13)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.0.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1364-1369)[§](#impl-PartialEq%3Cstr%3E-for-OsStr)\n\n[source](about:blank/src/std/ffi/os_str.rs.html#1366-1368)[§](#method.eq-15)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne-15)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.0.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1356-1361)[§](#impl-PartialEq-for-OsStr)\n\n[source](about:blank/src/std/ffi/os_str.rs.html#1358-1360)[§](#method.eq-12)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne-12)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.8.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1464)[§](#impl-PartialOrd%3C%26OsStr%3E-for-Cow%3C'a,+OsStr%3E)\n\n[source](about:blank/src/std/ffi/os_str.rs.html#1464)[§](#method.partial_cmp-22)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[§](#method.lt-22)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[§](#method.le-22)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[§](#method.gt-22)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[§](#method.ge-22)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.8.0 · [source](about:blank/src/std/path.rs.html#3307)[§](#impl-PartialOrd%3C%26OsStr%3E-for-Cow%3C'a,+Path%3E)\n\n[source](about:blank/src/std/path.rs.html#3307)[§](#method.partial_cmp-17)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[§](#method.lt-17)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[§](#method.le-17)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[§](#method.gt-17)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[§](#method.ge-17)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.8.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1462)[§](#impl-PartialOrd%3C%26OsStr%3E-for-OsString)\n\n[source](about:blank/src/std/ffi/os_str.rs.html#1462)[§](#method.partial_cmp-9)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[§](#method.lt-9)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[§](#method.le-9)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[§](#method.gt-9)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[§](#method.ge-9)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.8.0 · [source](about:blank/src/std/path.rs.html#3300)[§](#impl-PartialOrd%3C%26OsStr%3E-for-Path)\n\n[source](about:blank/src/std/path.rs.html#3300)[§](#method.partial_cmp-21)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[§](#method.lt-21)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[§](#method.le-21)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[§](#method.gt-21)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[§](#method.ge-21)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.8.0 · [source](about:blank/src/std/path.rs.html#3296)[§](#impl-PartialOrd%3C%26OsStr%3E-for-PathBuf)\n\n[source](about:blank/src/std/path.rs.html#3296)[§](#method.partial_cmp-16)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[§](#method.lt-16)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[§](#method.le-16)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[§](#method.gt-16)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[§](#method.ge-16)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.8.0 · [source](about:blank/src/std/path.rs.html#3303)[§](#impl-PartialOrd%3C%26Path%3E-for-OsStr)\n\n[source](about:blank/src/std/path.rs.html#3303)[§](#method.partial_cmp-12)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[§](#method.lt-12)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[§](#method.le-12)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[§](#method.gt-12)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[§](#method.ge-12)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.8.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1464)[§](#impl-PartialOrd%3CCow%3C'a,+OsStr%3E%3E-for-%26OsStr)\n\n[source](about:blank/src/std/ffi/os_str.rs.html#1464)[§](#method.partial_cmp-20)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[§](#method.lt-20)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[§](#method.le-20)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[§](#method.gt-20)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[§](#method.ge-20)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.8.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1463)[§](#impl-PartialOrd%3CCow%3C'a,+OsStr%3E%3E-for-OsStr)\n\n[source](about:blank/src/std/ffi/os_str.rs.html#1463)[§](#method.partial_cmp-13)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[§](#method.lt-13)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[§](#method.le-13)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[§](#method.gt-13)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[§](#method.ge-13)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.8.0 · [source](about:blank/src/std/path.rs.html#3307)[§](#impl-PartialOrd%3CCow%3C'a,+Path%3E%3E-for-%26OsStr)\n\n[source](about:blank/src/std/path.rs.html#3307)[§](#method.partial_cmp-6)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[§](#method.lt-6)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[§](#method.le-6)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[§](#method.gt-6)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[§](#method.ge-6)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.8.0 · [source](about:blank/src/std/path.rs.html#3306)[§](#impl-PartialOrd%3CCow%3C'a,+Path%3E%3E-for-OsStr)\n\n[source](about:blank/src/std/path.rs.html#3306)[§](#method.partial_cmp-5)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[§](#method.lt-5)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[§](#method.le-5)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[§](#method.gt-5)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[§](#method.ge-5)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.8.0 · [source](about:blank/src/std/path.rs.html#3303)[§](#impl-PartialOrd%3COsStr%3E-for-%26Path)\n\n[source](about:blank/src/std/path.rs.html#3303)[§](#method.partial_cmp-3)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[§](#method.lt-3)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[§](#method.le-3)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[§](#method.gt-3)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[§](#method.ge-3)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.8.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1463)[§](#impl-PartialOrd%3COsStr%3E-for-Cow%3C'a,+OsStr%3E)\n\n[source](about:blank/src/std/ffi/os_str.rs.html#1463)[§](#method.partial_cmp-4)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[§](#method.lt-4)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[§](#method.le-4)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[§](#method.gt-4)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[§](#method.ge-4)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.8.0 · [source](about:blank/src/std/path.rs.html#3306)[§](#impl-PartialOrd%3COsStr%3E-for-Cow%3C'a,+Path%3E)\n\n[source](about:blank/src/std/path.rs.html#3306)[§](#method.partial_cmp-1)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[§](#method.lt-1)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[§](#method.le-1)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[§](#method.gt-1)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[§](#method.ge-1)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.8.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1461)[§](#impl-PartialOrd%3COsStr%3E-for-OsString)\n\n[source](about:blank/src/std/ffi/os_str.rs.html#1461)[§](#method.partial_cmp-23)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[§](#method.lt-23)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[§](#method.le-23)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[§](#method.gt-23)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[§](#method.ge-23)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.8.0 · [source](about:blank/src/std/path.rs.html#3299)[§](#impl-PartialOrd%3COsStr%3E-for-Path)\n\n[source](about:blank/src/std/path.rs.html#3299)[§](#method.partial_cmp-18)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[§](#method.lt-18)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[§](#method.le-18)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[§](#method.gt-18)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[§](#method.ge-18)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.8.0 · [source](about:blank/src/std/path.rs.html#3295)[§](#impl-PartialOrd%3COsStr%3E-for-PathBuf)\n\n[source](about:blank/src/std/path.rs.html#3295)[§](#method.partial_cmp)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[§](#method.lt)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[§](#method.le)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[§](#method.gt)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[§](#method.ge)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.8.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1462)[§](#impl-PartialOrd%3COsString%3E-for-%26OsStr)\n\n[source](about:blank/src/std/ffi/os_str.rs.html#1462)[§](#method.partial_cmp-7)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[§](#method.lt-7)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[§](#method.le-7)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[§](#method.gt-7)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[§](#method.ge-7)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.8.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1461)[§](#impl-PartialOrd%3COsString%3E-for-OsStr)\n\n[source](about:blank/src/std/ffi/os_str.rs.html#1461)[§](#method.partial_cmp-14)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[§](#method.lt-14)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[§](#method.le-14)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[§](#method.gt-14)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[§](#method.ge-14)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.8.0 · [source](about:blank/src/std/path.rs.html#3300)[§](#impl-PartialOrd%3CPath%3E-for-%26OsStr)\n\n[source](about:blank/src/std/path.rs.html#3300)[§](#method.partial_cmp-2)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[§](#method.lt-2)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[§](#method.le-2)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[§](#method.gt-2)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[§](#method.ge-2)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.8.0 · [source](about:blank/src/std/path.rs.html#3299)[§](#impl-PartialOrd%3CPath%3E-for-OsStr)\n\n[source](about:blank/src/std/path.rs.html#3299)[§](#method.partial_cmp-11)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[§](#method.lt-11)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[§](#method.le-11)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[§](#method.gt-11)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[§](#method.ge-11)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.8.0 · [source](about:blank/src/std/path.rs.html#3296)[§](#impl-PartialOrd%3CPathBuf%3E-for-%26OsStr)\n\n[source](about:blank/src/std/path.rs.html#3296)[§](#method.partial_cmp-15)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[§](#method.lt-15)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[§](#method.le-15)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[§](#method.gt-15)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[§](#method.ge-15)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.8.0 · [source](about:blank/src/std/path.rs.html#3295)[§](#impl-PartialOrd%3CPathBuf%3E-for-OsStr)\n\n[source](about:blank/src/std/path.rs.html#3295)[§](#method.partial_cmp-19)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[§](#method.lt-19)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[§](#method.le-19)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[§](#method.gt-19)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[§](#method.ge-19)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.0.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1407-1412)[§](#impl-PartialOrd%3Cstr%3E-for-OsStr)\n\n[source](about:blank/src/std/ffi/os_str.rs.html#1409-1411)[§](#method.partial_cmp-8)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[§](#method.lt-8)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[§](#method.le-8)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[§](#method.gt-8)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[§](#method.ge-8)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.0.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1383-1404)[§](#impl-PartialOrd-for-OsStr)\n\n[source](about:blank/src/std/ffi/os_str.rs.html#1385-1387)[§](#method.partial_cmp-10)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n[source](about:blank/src/std/ffi/os_str.rs.html#1389-1391)[§](#method.lt-10)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n[source](about:blank/src/std/ffi/os_str.rs.html#1393-1395)[§](#method.le-10)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n[source](about:blank/src/std/ffi/os_str.rs.html#1397-1399)[§](#method.gt-10)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n[source](about:blank/src/std/ffi/os_str.rs.html#1401-1403)[§](#method.ge-10)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.0.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1547-1557)[§](#impl-ToOwned-for-OsStr)\n\n[§](#associatedtype.Owned)\n\nThe resulting type after obtaining ownership.\n\n[source](about:blank/src/std/ffi/os_str.rs.html#1550-1552)[§](#method.to_owned)\n\nCreates owned data from borrowed data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#tymethod.to_owned)\n\n[source](about:blank/src/std/ffi/os_str.rs.html#1554-1556)[§](#method.clone_into)\n\nUses borrowed data to replace owned data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#method.clone_into)\n\n1.72.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1320-1335)[§](#impl-TryFrom%3C%26OsStr%3E-for-%26str)\n\n[source](about:blank/src/std/ffi/os_str.rs.html#1332-1334)[§](#method.try_from)\n\nTries to convert an `&OsStr` to a `&str`.\n\n```\nuse std::ffi::OsStr;\n\nlet os_str = OsStr::new(\"foo\");\nlet as_str = <&str>::try_from(os_str).unwrap();\nassert_eq!(as_str, \"foo\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::OsStr;%0A++++%0A++++let+os_str+=+OsStr::new(%22foo%22);%0A++++let+as_str+=+%3C%26str%3E::try_from(os_str).unwrap();%0A++++assert_eq!(as_str,+%22foo%22);%0A%7D&edition=2021)\n\n[§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n1.0.0 · [source](about:blank/src/std/ffi/os_str.rs.html#1380)[§](#impl-Eq-for-OsStr)\n\n[§](#impl-Freeze-for-OsStr)\n\n[§](#impl-RefUnwindSafe-for-OsStr)\n\n[§](#impl-Send-for-OsStr)\n\n[§](#impl-Sized-for-OsStr)\n\n[§](#impl-Sync-for-OsStr)\n\n[§](#impl-Unpin-for-OsStr)\n\n[§](#impl-UnwindSafe-for-OsStr)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Borrowed reference to an OS string (see `OsString`).\"><title>OsStr in std::ffi::os_str - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../../\" data-static-root-path=\"../../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">OsStr</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">OsStr</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.as_encoded_bytes\">as_encoded_bytes</a></li><li><a href=\"#method.display\">display</a></li><li><a href=\"#method.eq_ignore_ascii_case\">eq_ignore_ascii_case</a></li><li><a href=\"#method.from_encoded_bytes_unchecked\">from_encoded_bytes_unchecked</a></li><li><a href=\"#method.into_os_string\">into_os_string</a></li><li><a href=\"#method.is_ascii\">is_ascii</a></li><li><a href=\"#method.is_empty\">is_empty</a></li><li><a href=\"#method.len\">len</a></li><li><a href=\"#method.make_ascii_lowercase\">make_ascii_lowercase</a></li><li><a href=\"#method.make_ascii_uppercase\">make_ascii_uppercase</a></li><li><a href=\"#method.new\">new</a></li><li><a href=\"#method.slice_encoded_bytes\">slice_encoded_bytes</a></li><li><a href=\"#method.to_ascii_lowercase\">to_ascii_lowercase</a></li><li><a href=\"#method.to_ascii_uppercase\">to_ascii_uppercase</a></li><li><a href=\"#method.to_os_string\">to_os_string</a></li><li><a href=\"#method.to_str\">to_str</a></li><li><a href=\"#method.to_string_lossy\">to_string_lossy</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-AsRef%3COsStr%3E-for-Component%3C'_%3E\">AsRef&lt;OsStr&gt;</a></li><li><a href=\"#impl-AsRef%3COsStr%3E-for-Components%3C'_%3E\">AsRef&lt;OsStr&gt;</a></li><li><a href=\"#impl-AsRef%3COsStr%3E-for-Iter%3C'_%3E\">AsRef&lt;OsStr&gt;</a></li><li><a href=\"#impl-AsRef%3COsStr%3E-for-OsStr\">AsRef&lt;OsStr&gt;</a></li><li><a href=\"#impl-AsRef%3COsStr%3E-for-OsString\">AsRef&lt;OsStr&gt;</a></li><li><a href=\"#impl-AsRef%3COsStr%3E-for-Path\">AsRef&lt;OsStr&gt;</a></li><li><a href=\"#impl-AsRef%3COsStr%3E-for-PathBuf\">AsRef&lt;OsStr&gt;</a></li><li><a href=\"#impl-AsRef%3COsStr%3E-for-String\">AsRef&lt;OsStr&gt;</a></li><li><a href=\"#impl-AsRef%3COsStr%3E-for-str\">AsRef&lt;OsStr&gt;</a></li><li><a href=\"#impl-AsRef%3CPath%3E-for-OsStr\">AsRef&lt;Path&gt;</a></li><li><a href=\"#impl-Borrow%3COsStr%3E-for-OsString\">Borrow&lt;OsStr&gt;</a></li><li><a href=\"#impl-Clone-for-Box%3COsStr%3E\">Clone</a></li><li><a href=\"#impl-Debug-for-OsStr\">Debug</a></li><li><a href=\"#impl-Default-for-%26OsStr\">Default</a></li><li><a href=\"#impl-Default-for-Box%3COsStr%3E\">Default</a></li><li><a href=\"#impl-Eq-for-OsStr\">Eq</a></li><li><a href=\"#impl-Extend%3C%26OsStr%3E-for-OsString\">Extend&lt;&amp;'a OsStr&gt;</a></li><li><a href=\"#impl-From%3C%26OsStr%3E-for-Cow%3C'a,+OsStr%3E\">From&lt;&amp;'a OsStr&gt;</a></li><li><a href=\"#impl-From%3C%26OsStr%3E-for-Arc%3COsStr%3E\">From&lt;&amp;OsStr&gt;</a></li><li><a href=\"#impl-From%3C%26OsStr%3E-for-Box%3COsStr%3E\">From&lt;&amp;OsStr&gt;</a></li><li><a href=\"#impl-From%3C%26OsStr%3E-for-Rc%3COsStr%3E\">From&lt;&amp;OsStr&gt;</a></li><li><a href=\"#impl-From%3CCow%3C'_,+OsStr%3E%3E-for-Box%3COsStr%3E\">From&lt;Cow&lt;'_, OsStr&gt;&gt;</a></li><li><a href=\"#impl-From%3COsString%3E-for-Box%3COsStr%3E\">From&lt;OsString&gt;</a></li><li><a href=\"#impl-FromIterator%3C%26OsStr%3E-for-OsString\">FromIterator&lt;&amp;'a OsStr&gt;</a></li><li><a href=\"#impl-Hash-for-OsStr\">Hash</a></li><li><a href=\"#impl-Join%3C%26OsStr%3E-for-%5BS%5D\">Join&lt;&amp;OsStr&gt;</a></li><li><a href=\"#impl-Ord-for-OsStr\">Ord</a></li><li><a href=\"#impl-OsStrExt-for-OsStr\">OsStrExt</a></li><li><a href=\"#impl-OsStrExt-for-OsStr-1\">OsStrExt</a></li><li><a href=\"#impl-OsStrExt-for-OsStr-2\">OsStrExt</a></li><li><a href=\"#impl-PartialEq-for-OsStr\">PartialEq</a></li><li><a href=\"#impl-PartialEq%3C%26OsStr%3E-for-OsString\">PartialEq&lt;&amp;'a OsStr&gt;</a></li><li><a href=\"#impl-PartialEq%3C%26OsStr%3E-for-Path\">PartialEq&lt;&amp;'a OsStr&gt;</a></li><li><a href=\"#impl-PartialEq%3C%26OsStr%3E-for-PathBuf\">PartialEq&lt;&amp;'a OsStr&gt;</a></li><li><a href=\"#impl-PartialEq%3C%26Path%3E-for-OsStr\">PartialEq&lt;&amp;'a Path&gt;</a></li><li><a href=\"#impl-PartialEq%3C%26OsStr%3E-for-Cow%3C'a,+OsStr%3E\">PartialEq&lt;&amp;'b OsStr&gt;</a></li><li><a href=\"#impl-PartialEq%3C%26OsStr%3E-for-Cow%3C'a,+Path%3E\">PartialEq&lt;&amp;'b OsStr&gt;</a></li><li><a href=\"#impl-PartialEq%3CCow%3C'a,+OsStr%3E%3E-for-%26OsStr\">PartialEq&lt;Cow&lt;'a, OsStr&gt;&gt;</a></li><li><a href=\"#impl-PartialEq%3CCow%3C'a,+OsStr%3E%3E-for-OsStr\">PartialEq&lt;Cow&lt;'a, OsStr&gt;&gt;</a></li><li><a href=\"#impl-PartialEq%3CCow%3C'a,+Path%3E%3E-for-%26OsStr\">PartialEq&lt;Cow&lt;'a, Path&gt;&gt;</a></li><li><a href=\"#impl-PartialEq%3CCow%3C'a,+Path%3E%3E-for-OsStr\">PartialEq&lt;Cow&lt;'a, Path&gt;&gt;</a></li><li><a href=\"#impl-PartialEq%3COsStr%3E-for-%26Path\">PartialEq&lt;OsStr&gt;</a></li><li><a href=\"#impl-PartialEq%3COsStr%3E-for-Cow%3C'a,+OsStr%3E\">PartialEq&lt;OsStr&gt;</a></li><li><a href=\"#impl-PartialEq%3COsStr%3E-for-Cow%3C'a,+Path%3E\">PartialEq&lt;OsStr&gt;</a></li><li><a href=\"#impl-PartialEq%3COsStr%3E-for-OsString\">PartialEq&lt;OsStr&gt;</a></li><li><a href=\"#impl-PartialEq%3COsStr%3E-for-Path\">PartialEq&lt;OsStr&gt;</a></li><li><a href=\"#impl-PartialEq%3COsStr%3E-for-PathBuf\">PartialEq&lt;OsStr&gt;</a></li><li><a href=\"#impl-PartialEq%3COsStr%3E-for-str\">PartialEq&lt;OsStr&gt;</a></li><li><a href=\"#impl-PartialEq%3COsString%3E-for-%26OsStr\">PartialEq&lt;OsString&gt;</a></li><li><a href=\"#impl-PartialEq%3COsString%3E-for-OsStr\">PartialEq&lt;OsString&gt;</a></li><li><a href=\"#impl-PartialEq%3CPath%3E-for-%26OsStr\">PartialEq&lt;Path&gt;</a></li><li><a href=\"#impl-PartialEq%3CPath%3E-for-OsStr\">PartialEq&lt;Path&gt;</a></li><li><a href=\"#impl-PartialEq%3CPathBuf%3E-for-%26OsStr\">PartialEq&lt;PathBuf&gt;</a></li><li><a href=\"#impl-PartialEq%3CPathBuf%3E-for-OsStr\">PartialEq&lt;PathBuf&gt;</a></li><li><a href=\"#impl-PartialEq%3Cstr%3E-for-OsStr\">PartialEq&lt;str&gt;</a></li><li><a href=\"#impl-PartialOrd-for-OsStr\">PartialOrd</a></li><li><a href=\"#impl-PartialOrd%3C%26OsStr%3E-for-OsString\">PartialOrd&lt;&amp;'a OsStr&gt;</a></li><li><a href=\"#impl-PartialOrd%3C%26OsStr%3E-for-Path\">PartialOrd&lt;&amp;'a OsStr&gt;</a></li><li><a href=\"#impl-PartialOrd%3C%26OsStr%3E-for-PathBuf\">PartialOrd&lt;&amp;'a OsStr&gt;</a></li><li><a href=\"#impl-PartialOrd%3C%26Path%3E-for-OsStr\">PartialOrd&lt;&amp;'a Path&gt;</a></li><li><a href=\"#impl-PartialOrd%3C%26OsStr%3E-for-Cow%3C'a,+OsStr%3E\">PartialOrd&lt;&amp;'b OsStr&gt;</a></li><li><a href=\"#impl-PartialOrd%3C%26OsStr%3E-for-Cow%3C'a,+Path%3E\">PartialOrd&lt;&amp;'b OsStr&gt;</a></li><li><a href=\"#impl-PartialOrd%3CCow%3C'a,+OsStr%3E%3E-for-%26OsStr\">PartialOrd&lt;Cow&lt;'a, OsStr&gt;&gt;</a></li><li><a href=\"#impl-PartialOrd%3CCow%3C'a,+OsStr%3E%3E-for-OsStr\">PartialOrd&lt;Cow&lt;'a, OsStr&gt;&gt;</a></li><li><a href=\"#impl-PartialOrd%3CCow%3C'a,+Path%3E%3E-for-%26OsStr\">PartialOrd&lt;Cow&lt;'a, Path&gt;&gt;</a></li><li><a href=\"#impl-PartialOrd%3CCow%3C'a,+Path%3E%3E-for-OsStr\">PartialOrd&lt;Cow&lt;'a, Path&gt;&gt;</a></li><li><a href=\"#impl-PartialOrd%3COsStr%3E-for-%26Path\">PartialOrd&lt;OsStr&gt;</a></li><li><a href=\"#impl-PartialOrd%3COsStr%3E-for-Cow%3C'a,+OsStr%3E\">PartialOrd&lt;OsStr&gt;</a></li><li><a href=\"#impl-PartialOrd%3COsStr%3E-for-Cow%3C'a,+Path%3E\">PartialOrd&lt;OsStr&gt;</a></li><li><a href=\"#impl-PartialOrd%3COsStr%3E-for-OsString\">PartialOrd&lt;OsStr&gt;</a></li><li><a href=\"#impl-PartialOrd%3COsStr%3E-for-Path\">PartialOrd&lt;OsStr&gt;</a></li><li><a href=\"#impl-PartialOrd%3COsStr%3E-for-PathBuf\">PartialOrd&lt;OsStr&gt;</a></li><li><a href=\"#impl-PartialOrd%3COsString%3E-for-%26OsStr\">PartialOrd&lt;OsString&gt;</a></li><li><a href=\"#impl-PartialOrd%3COsString%3E-for-OsStr\">PartialOrd&lt;OsString&gt;</a></li><li><a href=\"#impl-PartialOrd%3CPath%3E-for-%26OsStr\">PartialOrd&lt;Path&gt;</a></li><li><a href=\"#impl-PartialOrd%3CPath%3E-for-OsStr\">PartialOrd&lt;Path&gt;</a></li><li><a href=\"#impl-PartialOrd%3CPathBuf%3E-for-%26OsStr\">PartialOrd&lt;PathBuf&gt;</a></li><li><a href=\"#impl-PartialOrd%3CPathBuf%3E-for-OsStr\">PartialOrd&lt;PathBuf&gt;</a></li><li><a href=\"#impl-PartialOrd%3Cstr%3E-for-OsStr\">PartialOrd&lt;str&gt;</a></li><li><a href=\"#impl-ToOwned-for-OsStr\">ToOwned</a></li><li><a href=\"#impl-TryFrom%3C%26OsStr%3E-for-%26str\">TryFrom&lt;&amp;'a OsStr&gt;</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Sized-for-OsStr\">!Sized</a></li><li><a href=\"#impl-Freeze-for-OsStr\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-OsStr\">RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-OsStr\">Send</a></li><li><a href=\"#impl-Sync-for-OsStr\">Sync</a></li><li><a href=\"#impl-Unpin-for-OsStr\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-OsStr\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::ffi::os_str</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Display.html\">Display</a></li><li><a href=\"struct.OsStr.html\">OsStr</a></li><li><a href=\"struct.OsString.html\">OsString</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../../index.html\">std</a>::<wbr><a href=\"../index.html\">ffi</a>::<wbr><a href=\"index.html\">os_str</a>::<wbr><a class=\"struct\" href=\"#\">OsStr</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../../src/std/ffi/os_str.rs.html#122-124\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct OsStr { <span class=\"comment\">/* private fields */</span> }</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Borrowed reference to an OS string (see <a href=\"../struct.OsString.html\" title=\"struct std::ffi::OsString\"><code>OsString</code></a>).</p>\n<p>This type represents a borrowed reference to a string in the operating system’s preferred\nrepresentation.</p>\n<p><code>&amp;OsStr</code> is to <a href=\"../struct.OsString.html\" title=\"struct std::ffi::OsString\"><code>OsString</code></a> as <code>&amp;<a href=\"../../primitive.str.html\" title=\"primitive str\">str</a></code> is to <a href=\"../../string/struct.String.html\" title=\"struct std::string::String\"><code>String</code></a>: the\nformer in each pair are borrowed references; the latter are owned strings.</p>\n<p>See the <a href=\"../index.html#conversions\" title=\"mod std::ffi\">module’s toplevel documentation about conversions</a> for a discussion on\nthe traits which <code>OsStr</code> implements for <a href=\"../index.html#conversions\" title=\"mod std::ffi\">conversions</a> from/to native representations.</p>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-OsStr\" class=\"impl\"><a class=\"src rightside\" href=\"../../../src/std/ffi/os_str.rs.html#731-1188\">source</a><a href=\"#impl-OsStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.new\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../../src/std/ffi/os_str.rs.html#743-745\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.new\" class=\"fn\">new</a>&lt;S: <a class=\"trait\" href=\"../../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt; + ?<a class=\"trait\" href=\"../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>&gt;(s: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;S</a>) -&gt; &amp;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h4></section></summary><div class=\"docblock\"><p>Coerces into an <code>OsStr</code> slice.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ffi::OsStr;\n\n<span class=\"kw\">let </span>os_str = OsStr::new(<span class=\"string\">\"foo\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::OsStr;%0A++++%0A++++let+os_str+=+OsStr::new(%22foo%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_encoded_bytes_unchecked\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.74.0\">1.74.0</span> · <a class=\"src\" href=\"../../../src/std/ffi/os_str.rs.html#786-788\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.from_encoded_bytes_unchecked\" class=\"fn\">from_encoded_bytes_unchecked</a>(bytes: &amp;[<a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>]) -&gt; <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Self</a></h4></section></summary><div class=\"docblock\"><p>Converts a slice of bytes to an OS string slice without checking that the string contains\nvalid <code>OsStr</code>-encoded data.</p>\n<p>The byte encoding is an unspecified, platform-specific, self-synchronizing superset of UTF-8.\nBy being a self-synchronizing superset of UTF-8, this encoding is also a superset of 7-bit\nASCII.</p>\n<p>See the <a href=\"../index.html#conversions\" title=\"mod std::ffi\">module’s toplevel documentation about conversions</a> for safe,\ncross-platform <a href=\"../index.html#conversions\" title=\"mod std::ffi\">conversions</a> from/to native representations.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>As the encoding is unspecified, callers must pass in bytes that originated as a mixture of\nvalidated UTF-8 and bytes from <a href=\"../struct.OsStr.html#method.as_encoded_bytes\" title=\"method std::ffi::OsStr::as_encoded_bytes\"><code>OsStr::as_encoded_bytes</code></a> from within the same Rust version\nbuilt for the same target platform.  For example, reconstructing an <code>OsStr</code> from bytes sent\nover the network or stored in a file will likely violate these safety rules.</p>\n<p>Due to the encoding being self-synchronizing, the bytes from <a href=\"../struct.OsStr.html#method.as_encoded_bytes\" title=\"method std::ffi::OsStr::as_encoded_bytes\"><code>OsStr::as_encoded_bytes</code></a> can be\nsplit either immediately before or immediately after any valid non-empty UTF-8 substring.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ffi::OsStr;\n\n<span class=\"kw\">let </span>os_str = OsStr::new(<span class=\"string\">\"Mary had a little lamb\"</span>);\n<span class=\"kw\">let </span>bytes = os_str.as_encoded_bytes();\n<span class=\"kw\">let </span>words = bytes.split(|b| <span class=\"kw-2\">*</span>b == <span class=\"string\">b' '</span>);\n<span class=\"kw\">let </span>words: Vec&lt;<span class=\"kw-2\">&amp;</span>OsStr&gt; = words.map(|word| {\n    <span class=\"comment\">// SAFETY:\n    // - Each `word` only contains content that originated from `OsStr::as_encoded_bytes`\n    // - Only split with ASCII whitespace which is a non-empty UTF-8 substring\n    </span><span class=\"kw\">unsafe </span>{ OsStr::from_encoded_bytes_unchecked(word) }\n}).collect();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::OsStr;%0A++++%0A++++let+os_str+=+OsStr::new(%22Mary+had+a+little+lamb%22);%0A++++let+bytes+=+os_str.as_encoded_bytes();%0A++++let+words+=+bytes.split(%7Cb%7C+*b+==+b'+');%0A++++let+words:+Vec%3C%26OsStr%3E+=+words.map(%7Cword%7C+%7B%0A++++++++//+SAFETY:%0A++++++++//+-+Each+%60word%60+only+contains+content+that+originated+from+%60OsStr::as_encoded_bytes%60%0A++++++++//+-+Only+split+with+ASCII+whitespace+which+is+a+non-empty+UTF-8+substring%0A++++++++unsafe+%7B+OsStr::from_encoded_bytes_unchecked(word)+%7D%0A++++%7D).collect();%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_str\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../../src/std/ffi/os_str.rs.html#822-824\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.to_str\" class=\"fn\">to_str</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;<a class=\"primitive\" href=\"../../primitive.str.html\">str</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Yields a <code>&amp;<a href=\"../../primitive.str.html\" title=\"primitive str\">str</a></code> slice if the <code>OsStr</code> is valid Unicode.</p>\n<p>This conversion may entail doing a check for UTF-8 validity.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ffi::OsStr;\n\n<span class=\"kw\">let </span>os_str = OsStr::new(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(os_str.to_str(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"foo\"</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::OsStr;%0A++++%0A++++let+os_str+=+OsStr::new(%22foo%22);%0A++++assert_eq!(os_str.to_str(),+Some(%22foo%22));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_string_lossy\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../../src/std/ffi/os_str.rs.html#875-877\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.to_string_lossy\" class=\"fn\">to_string_lossy</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'_, <a class=\"primitive\" href=\"../../primitive.str.html\">str</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts an <code>OsStr</code> to a <code><a href=\"../../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;<a href=\"../../primitive.str.html\" title=\"primitive str\">str</a>&gt;</code>.</p>\n<p>Any non-Unicode sequences are replaced with\n<a href=\"../../char/constant.REPLACEMENT_CHARACTER.html\" title=\"constant std::char::REPLACEMENT_CHARACTER\"><code>U+FFFD REPLACEMENT CHARACTER</code></a>.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<p>Calling <code>to_string_lossy</code> on an <code>OsStr</code> with invalid unicode:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// Note, due to differences in how Unix and Windows represent strings,\n// we are forced to complicate this example, setting up example `OsStr`s\n// with different source data and via different platform extensions.\n// Understand that in reality you could end up with such example invalid\n// sequences simply through collecting user command line arguments, for\n// example.\n\n</span><span class=\"attr\">#[cfg(unix)] </span>{\n    <span class=\"kw\">use </span>std::ffi::OsStr;\n    <span class=\"kw\">use </span>std::os::unix::ffi::OsStrExt;\n\n    <span class=\"comment\">// Here, the values 0x66 and 0x6f correspond to 'f' and 'o'\n    // respectively. The value 0x80 is a lone continuation byte, invalid\n    // in a UTF-8 sequence.\n    </span><span class=\"kw\">let </span>source = [<span class=\"number\">0x66</span>, <span class=\"number\">0x6f</span>, <span class=\"number\">0x80</span>, <span class=\"number\">0x6f</span>];\n    <span class=\"kw\">let </span>os_str = OsStr::from_bytes(<span class=\"kw-2\">&amp;</span>source[..]);\n\n    <span class=\"macro\">assert_eq!</span>(os_str.to_string_lossy(), <span class=\"string\">\"fo�o\"</span>);\n}\n<span class=\"attr\">#[cfg(windows)] </span>{\n    <span class=\"kw\">use </span>std::ffi::OsString;\n    <span class=\"kw\">use </span>std::os::windows::prelude::<span class=\"kw-2\">*</span>;\n\n    <span class=\"comment\">// Here the values 0x0066 and 0x006f correspond to 'f' and 'o'\n    // respectively. The value 0xD800 is a lone surrogate half, invalid\n    // in a UTF-16 sequence.\n    </span><span class=\"kw\">let </span>source = [<span class=\"number\">0x0066</span>, <span class=\"number\">0x006f</span>, <span class=\"number\">0xD800</span>, <span class=\"number\">0x006f</span>];\n    <span class=\"kw\">let </span>os_string = OsString::from_wide(<span class=\"kw-2\">&amp;</span>source[..]);\n    <span class=\"kw\">let </span>os_str = os_string.as_os_str();\n\n    <span class=\"macro\">assert_eq!</span>(os_str.to_string_lossy(), <span class=\"string\">\"fo�o\"</span>);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+Note,+due+to+differences+in+how+Unix+and+Windows+represent+strings,%0A//+we+are+forced+to+complicate+this+example,+setting+up+example+%60OsStr%60s%0A//+with+different+source+data+and+via+different+platform+extensions.%0A//+Understand+that+in+reality+you+could+end+up+with+such+example+invalid%0A//+sequences+simply+through+collecting+user+command+line+arguments,+for%0A//+example.%0A%0Afn+main()+%7B%0A++++%23%5Bcfg(unix)%5D+%7B%0A++++++++use+std::ffi::OsStr;%0A++++++++use+std::os::unix::ffi::OsStrExt;%0A++++%0A++++++++//+Here,+the+values+0x66+and+0x6f+correspond+to+'f'+and+'o'%0A++++++++//+respectively.+The+value+0x80+is+a+lone+continuation+byte,+invalid%0A++++++++//+in+a+UTF-8+sequence.%0A++++++++let+source+=+%5B0x66,+0x6f,+0x80,+0x6f%5D;%0A++++++++let+os_str+=+OsStr::from_bytes(%26source%5B..%5D);%0A++++%0A++++++++assert_eq!(os_str.to_string_lossy(),+%22fo%EF%BF%BDo%22);%0A++++%7D%0A++++%23%5Bcfg(windows)%5D+%7B%0A++++++++use+std::ffi::OsString;%0A++++++++use+std::os::windows::prelude::*;%0A++++%0A++++++++//+Here+the+values+0x0066+and+0x006f+correspond+to+'f'+and+'o'%0A++++++++//+respectively.+The+value+0xD800+is+a+lone+surrogate+half,+invalid%0A++++++++//+in+a+UTF-16+sequence.%0A++++++++let+source+=+%5B0x0066,+0x006f,+0xD800,+0x006f%5D;%0A++++++++let+os_string+=+OsString::from_wide(%26source%5B..%5D);%0A++++++++let+os_str+=+os_string.as_os_str();%0A++++%0A++++++++assert_eq!(os_str.to_string_lossy(),+%22fo%EF%BF%BDo%22);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_os_string\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../../src/std/ffi/os_str.rs.html#894-896\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.to_os_string\" class=\"fn\">to_os_string</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a></h4></section></summary><div class=\"docblock\"><p>Copies the slice into an owned <a href=\"../struct.OsString.html\" title=\"struct std::ffi::OsString\"><code>OsString</code></a>.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ffi::{OsStr, OsString};\n\n<span class=\"kw\">let </span>os_str = OsStr::new(<span class=\"string\">\"foo\"</span>);\n<span class=\"kw\">let </span>os_string = os_str.to_os_string();\n<span class=\"macro\">assert_eq!</span>(os_string, OsString::from(<span class=\"string\">\"foo\"</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::%7BOsStr,+OsString%7D;%0A++++%0A++++let+os_str+=+OsStr::new(%22foo%22);%0A++++let+os_string+=+os_str.to_os_string();%0A++++assert_eq!(os_string,+OsString::from(%22foo%22));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_empty\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> · <a class=\"src\" href=\"../../../src/std/ffi/os_str.rs.html#914-916\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Checks whether the <code>OsStr</code> is empty.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ffi::OsStr;\n\n<span class=\"kw\">let </span>os_str = OsStr::new(<span class=\"string\">\"\"</span>);\n<span class=\"macro\">assert!</span>(os_str.is_empty());\n\n<span class=\"kw\">let </span>os_str = OsStr::new(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert!</span>(!os_str.is_empty());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::OsStr;%0A++++%0A++++let+os_str+=+OsStr::new(%22%22);%0A++++assert!(os_str.is_empty());%0A++++%0A++++let+os_str+=+OsStr::new(%22foo%22);%0A++++assert!(!os_str.is_empty());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.len\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> · <a class=\"src\" href=\"../../../src/std/ffi/os_str.rs.html#948-950\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the length of this <code>OsStr</code>.</p>\n<p>Note that this does <strong>not</strong> return the number of bytes in the string in\nOS string form.</p>\n<p>The length returned is that of the underlying storage used by <code>OsStr</code>.\nAs discussed in the <a href=\"../struct.OsString.html\" title=\"struct std::ffi::OsString\"><code>OsString</code></a> introduction, <a href=\"../struct.OsString.html\" title=\"struct std::ffi::OsString\"><code>OsString</code></a> and <code>OsStr</code>\nstore strings in a form best suited for cheap inter-conversion between\nnative-platform and Rust string forms, which may differ significantly\nfrom both of them, including in storage size and encoding.</p>\n<p>This number is simply useful for passing to other methods, like\n<a href=\"../struct.OsString.html#method.with_capacity\" title=\"associated function std::ffi::OsString::with_capacity\"><code>OsString::with_capacity</code></a> to avoid reallocations.</p>\n<p>See the main <code>OsString</code> documentation information about encoding and capacity units.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ffi::OsStr;\n\n<span class=\"kw\">let </span>os_str = OsStr::new(<span class=\"string\">\"\"</span>);\n<span class=\"macro\">assert_eq!</span>(os_str.len(), <span class=\"number\">0</span>);\n\n<span class=\"kw\">let </span>os_str = OsStr::new(<span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(os_str.len(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::OsStr;%0A++++%0A++++let+os_str+=+OsStr::new(%22%22);%0A++++assert_eq!(os_str.len(),+0);%0A++++%0A++++let+os_str+=+OsStr::new(%22foo%22);%0A++++assert_eq!(os_str.len(),+3);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_os_string\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"../../../src/std/ffi/os_str.rs.html#955-958\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.into_os_string\" class=\"fn\">into_os_string</a>(self: <a class=\"struct\" href=\"../../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;) -&gt; <a class=\"struct\" href=\"../struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a></h4></section></summary><div class=\"docblock\"><p>Converts a <code><a href=\"../../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;</code> into an <a href=\"../struct.OsString.html\" title=\"struct std::ffi::OsString\"><code>OsString</code></a> without copying or allocating.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_encoded_bytes\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.74.0\">1.74.0</span> · <a class=\"src\" href=\"../../../src/std/ffi/os_str.rs.html#976-978\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.as_encoded_bytes\" class=\"fn\">as_encoded_bytes</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Converts an OS string slice to a byte slice.  To convert the byte slice back into an OS\nstring slice, use the <a href=\"../struct.OsStr.html#method.from_encoded_bytes_unchecked\" title=\"associated function std::ffi::OsStr::from_encoded_bytes_unchecked\"><code>OsStr::from_encoded_bytes_unchecked</code></a> function.</p>\n<p>The byte encoding is an unspecified, platform-specific, self-synchronizing superset of UTF-8.\nBy being a self-synchronizing superset of UTF-8, this encoding is also a superset of 7-bit\nASCII.</p>\n<p>Note: As the encoding is unspecified, any sub-slice of bytes that is not valid UTF-8 should\nbe treated as opaque and only comparable within the same Rust version built for the same\ntarget platform.  For example, sending the slice over the network or storing it in a file\nwill likely result in incompatible byte slices.  See <a href=\"../struct.OsString.html\" title=\"struct std::ffi::OsString\"><code>OsString</code></a> for more encoding details\nand <a href=\"../index.html\" title=\"mod std::ffi\"><code>std::ffi</code></a> for platform-specific, specified conversions.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.slice_encoded_bytes\" class=\"method\"><a class=\"src rightside\" href=\"../../../src/std/ffi/os_str.rs.html#1012-1028\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.slice_encoded_bytes\" class=\"fn\">slice_encoded_bytes</a>&lt;R: <a class=\"trait\" href=\"../../ops/trait.RangeBounds.html\" title=\"trait std::ops::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt;&gt;(&amp;self, range: R) -&gt; <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Self</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>os_str_slice</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/118485\">#118485</a>)</span></div></span></summary><div class=\"docblock\"><p>Takes a substring based on a range that corresponds to the return value of\n<a href=\"../struct.OsStr.html#method.as_encoded_bytes\" title=\"method std::ffi::OsStr::as_encoded_bytes\"><code>OsStr::as_encoded_bytes</code></a>.</p>\n<p>The range’s start and end must lie on valid <code>OsStr</code> boundaries.\nA valid <code>OsStr</code> boundary is one of:</p>\n<ul>\n<li>The start of the string</li>\n<li>The end of the string</li>\n<li>Immediately before a valid non-empty UTF-8 substring</li>\n<li>Immediately after a valid non-empty UTF-8 substring</li>\n</ul>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>range</code> does not lie on valid <code>OsStr</code> boundaries or if it\nexceeds the end of the string.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(os_str_slice)]\n\n</span><span class=\"kw\">use </span>std::ffi::OsStr;\n\n<span class=\"kw\">let </span>os_str = OsStr::new(<span class=\"string\">\"foo=bar\"</span>);\n<span class=\"kw\">let </span>bytes = os_str.as_encoded_bytes();\n<span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(index) = bytes.iter().position(|b| <span class=\"kw-2\">*</span>b == <span class=\"string\">b'='</span>) {\n    <span class=\"kw\">let </span>key = os_str.slice_encoded_bytes(..index);\n    <span class=\"kw\">let </span>value = os_str.slice_encoded_bytes(index + <span class=\"number\">1</span>..);\n    <span class=\"macro\">assert_eq!</span>(key, <span class=\"string\">\"foo\"</span>);\n    <span class=\"macro\">assert_eq!</span>(value, <span class=\"string\">\"bar\"</span>);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(os_str_slice)%5D%0A%0Afn+main()+%7B%0A++++use+std::ffi::OsStr;%0A++++%0A++++let+os_str+=+OsStr::new(%22foo=bar%22);%0A++++let+bytes+=+os_str.as_encoded_bytes();%0A++++if+let+Some(index)+=+bytes.iter().position(%7Cb%7C+*b+==+b'=')+%7B%0A++++++++let+key+=+os_str.slice_encoded_bytes(..index);%0A++++++++let+value+=+os_str.slice_encoded_bytes(index+%2B+1..);%0A++++++++assert_eq!(key,+%22foo%22);%0A++++++++assert_eq!(value,+%22bar%22);%0A++++%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.make_ascii_lowercase\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> · <a class=\"src\" href=\"../../../src/std/ffi/os_str.rs.html#1051-1053\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.make_ascii_lowercase\" class=\"fn\">make_ascii_lowercase</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Converts this string to its ASCII lower case equivalent in-place.</p>\n<p>ASCII letters ‘A’ to ‘Z’ are mapped to ‘a’ to ‘z’,\nbut non-ASCII letters are unchanged.</p>\n<p>To return a new lowercased value without modifying the existing one, use\n<a href=\"../struct.OsStr.html#method.to_ascii_lowercase\" title=\"method std::ffi::OsStr::to_ascii_lowercase\"><code>OsStr::to_ascii_lowercase</code></a>.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ffi::OsString;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = OsString::from(<span class=\"string\">\"GRÜßE, JÜRGEN ❤\"</span>);\n\ns.make_ascii_lowercase();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"grÜße, jÜrgen ❤\"</span>, s);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::OsString;%0A++++%0A++++let+mut+s+=+OsString::from(%22GR%C3%9C%C3%9FE,+J%C3%9CRGEN+%E2%9D%A4%22);%0A++++%0A++++s.make_ascii_lowercase();%0A++++%0A++++assert_eq!(%22gr%C3%9C%C3%9Fe,+j%C3%9Crgen+%E2%9D%A4%22,+s);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.make_ascii_uppercase\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> · <a class=\"src\" href=\"../../../src/std/ffi/os_str.rs.html#1076-1078\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.make_ascii_uppercase\" class=\"fn\">make_ascii_uppercase</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Converts this string to its ASCII upper case equivalent in-place.</p>\n<p>ASCII letters ‘a’ to ‘z’ are mapped to ‘A’ to ‘Z’,\nbut non-ASCII letters are unchanged.</p>\n<p>To return a new uppercased value without modifying the existing one, use\n<a href=\"../struct.OsStr.html#method.to_ascii_uppercase\" title=\"method std::ffi::OsStr::to_ascii_uppercase\"><code>OsStr::to_ascii_uppercase</code></a>.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ffi::OsString;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = OsString::from(<span class=\"string\">\"Grüße, Jürgen ❤\"</span>);\n\ns.make_ascii_uppercase();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"GRüßE, JüRGEN ❤\"</span>, s);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::OsString;%0A++++%0A++++let+mut+s+=+OsString::from(%22Gr%C3%BC%C3%9Fe,+J%C3%BCrgen+%E2%9D%A4%22);%0A++++%0A++++s.make_ascii_uppercase();%0A++++%0A++++assert_eq!(%22GR%C3%BC%C3%9FE,+J%C3%BCRGEN+%E2%9D%A4%22,+s);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ascii_lowercase\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> · <a class=\"src\" href=\"../../../src/std/ffi/os_str.rs.html#1098-1100\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.to_ascii_lowercase\" class=\"fn\">to_ascii_lowercase</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a></h4></section></summary><div class=\"docblock\"><p>Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.</p>\n<p>ASCII letters ‘A’ to ‘Z’ are mapped to ‘a’ to ‘z’,\nbut non-ASCII letters are unchanged.</p>\n<p>To lowercase the value in-place, use <a href=\"../struct.OsStr.html#method.make_ascii_lowercase\" title=\"method std::ffi::OsStr::make_ascii_lowercase\"><code>OsStr::make_ascii_lowercase</code></a>.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ffi::OsString;\n<span class=\"kw\">let </span>s = OsString::from(<span class=\"string\">\"Grüße, Jürgen ❤\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"grüße, jürgen ❤\"</span>, s.to_ascii_lowercase());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::OsString;%0A++++let+s+=+OsString::from(%22Gr%C3%BC%C3%9Fe,+J%C3%BCrgen+%E2%9D%A4%22);%0A++++%0A++++assert_eq!(%22gr%C3%BC%C3%9Fe,+j%C3%BCrgen+%E2%9D%A4%22,+s.to_ascii_lowercase());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ascii_uppercase\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> · <a class=\"src\" href=\"../../../src/std/ffi/os_str.rs.html#1120-1122\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.to_ascii_uppercase\" class=\"fn\">to_ascii_uppercase</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a></h4></section></summary><div class=\"docblock\"><p>Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.</p>\n<p>ASCII letters ‘a’ to ‘z’ are mapped to ‘A’ to ‘Z’,\nbut non-ASCII letters are unchanged.</p>\n<p>To uppercase the value in-place, use <a href=\"../struct.OsStr.html#method.make_ascii_uppercase\" title=\"method std::ffi::OsStr::make_ascii_uppercase\"><code>OsStr::make_ascii_uppercase</code></a>.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ffi::OsString;\n<span class=\"kw\">let </span>s = OsString::from(<span class=\"string\">\"Grüße, Jürgen ❤\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"GRüßE, JüRGEN ❤\"</span>, s.to_ascii_uppercase());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::OsString;%0A++++let+s+=+OsString::from(%22Gr%C3%BC%C3%9Fe,+J%C3%BCrgen+%E2%9D%A4%22);%0A++++%0A++++assert_eq!(%22GR%C3%BC%C3%9FE,+J%C3%BCRGEN+%E2%9D%A4%22,+s.to_ascii_uppercase());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_ascii\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> · <a class=\"src\" href=\"../../../src/std/ffi/os_str.rs.html#1140-1142\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.is_ascii\" class=\"fn\">is_ascii</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Checks if all characters in this string are within the ASCII range.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ffi::OsString;\n\n<span class=\"kw\">let </span>ascii = OsString::from(<span class=\"string\">\"hello!\\n\"</span>);\n<span class=\"kw\">let </span>non_ascii = OsString::from(<span class=\"string\">\"Grüße, Jürgen ❤\"</span>);\n\n<span class=\"macro\">assert!</span>(ascii.is_ascii());\n<span class=\"macro\">assert!</span>(!non_ascii.is_ascii());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::OsString;%0A++++%0A++++let+ascii+=+OsString::from(%22hello!%5Cn%22);%0A++++let+non_ascii+=+OsString::from(%22Gr%C3%BC%C3%9Fe,+J%C3%BCrgen+%E2%9D%A4%22);%0A++++%0A++++assert!(ascii.is_ascii());%0A++++assert!(!non_ascii.is_ascii());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq_ignore_ascii_case\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> · <a class=\"src\" href=\"../../../src/std/ffi/os_str.rs.html#1159-1161\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.eq_ignore_ascii_case\" class=\"fn\">eq_ignore_ascii_case</a>&lt;S: <a class=\"trait\" href=\"../../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;&gt;(&amp;self, other: S) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Checks that two strings are an ASCII case-insensitive match.</p>\n<p>Same as <code>to_ascii_lowercase(a) == to_ascii_lowercase(b)</code>,\nbut without allocating and copying temporaries.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ffi::OsString;\n\n<span class=\"macro\">assert!</span>(OsString::from(<span class=\"string\">\"Ferris\"</span>).eq_ignore_ascii_case(<span class=\"string\">\"FERRIS\"</span>));\n<span class=\"macro\">assert!</span>(OsString::from(<span class=\"string\">\"Ferrös\"</span>).eq_ignore_ascii_case(<span class=\"string\">\"FERRöS\"</span>));\n<span class=\"macro\">assert!</span>(!OsString::from(<span class=\"string\">\"Ferrös\"</span>).eq_ignore_ascii_case(<span class=\"string\">\"FERRÖS\"</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::OsString;%0A++++%0A++++assert!(OsString::from(%22Ferris%22).eq_ignore_ascii_case(%22FERRIS%22));%0A++++assert!(OsString::from(%22Ferr%C3%B6s%22).eq_ignore_ascii_case(%22FERR%C3%B6S%22));%0A++++assert!(!OsString::from(%22Ferr%C3%B6s%22).eq_ignore_ascii_case(%22FERR%C3%96S%22));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.display\" class=\"method\"><a class=\"src rightside\" href=\"../../../src/std/ffi/os_str.rs.html#1185-1187\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.display\" class=\"fn\">display</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.Display.html\" title=\"struct std::ffi::os_str::Display\">Display</a>&lt;'_&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>os_str_display</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/120048\">#120048</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns an object that implements <a href=\"../../fmt/trait.Display.html\" title=\"trait std::fmt::Display\"><code>Display</code></a> for safely printing an\n<a href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\"><code>OsStr</code></a> that may contain non-Unicode data. This may perform lossy\nconversion, depending on the platform.  If you would like an\nimplementation which escapes the <a href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\"><code>OsStr</code></a> please use <a href=\"../../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\"><code>Debug</code></a>\ninstead.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(os_str_display)]\n</span><span class=\"kw\">use </span>std::ffi::OsStr;\n\n<span class=\"kw\">let </span>s = OsStr::new(<span class=\"string\">\"Hello, world!\"</span>);\n<span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, s.display());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(os_str_display)%5D%0Afn+main()+%7B%0A++++use+std::ffi::OsStr;%0A++++%0A++++let+s+=+OsStr::new(%22Hello,+world!%22);%0A++++println!(%22%7B%7D%22,+s.display());%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsRef%3COsStr%3E-for-Component%3C'_%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../../src/std/path.rs.html#561-566\">source</a></span><a href=\"#impl-AsRef%3COsStr%3E-for-Component%3C'_%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt; for <a class=\"enum\" href=\"../../path/enum.Component.html\" title=\"enum std::path::Component\">Component</a>&lt;'_&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_ref-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/path.rs.html#563-565\">source</a><a href=\"#method.as_ref-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h4></section></summary><div class=\"docblock\">Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsRef%3COsStr%3E-for-Components%3C'_%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../../src/std/path.rs.html#805-810\">source</a></span><a href=\"#impl-AsRef%3COsStr%3E-for-Components%3C'_%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt; for <a class=\"struct\" href=\"../../path/struct.Components.html\" title=\"struct std::path::Components\">Components</a>&lt;'_&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_ref-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/path.rs.html#807-809\">source</a><a href=\"#method.as_ref-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h4></section></summary><div class=\"docblock\">Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsRef%3COsStr%3E-for-Iter%3C'_%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../../src/std/path.rs.html#858-863\">source</a></span><a href=\"#impl-AsRef%3COsStr%3E-for-Iter%3C'_%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt; for <a class=\"struct\" href=\"../../path/struct.Iter.html\" title=\"struct std::path::Iter\">Iter</a>&lt;'_&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_ref-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/path.rs.html#860-862\">source</a><a href=\"#method.as_ref-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h4></section></summary><div class=\"docblock\">Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsRef%3COsStr%3E-for-OsStr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../../src/std/ffi/os_str.rs.html#1560-1565\">source</a></span><a href=\"#impl-AsRef%3COsStr%3E-for-OsStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt; for <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_ref-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/ffi/os_str.rs.html#1562-1564\">source</a><a href=\"#method.as_ref-7\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h4></section></summary><div class=\"docblock\">Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsRef%3COsStr%3E-for-OsString\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../../src/std/ffi/os_str.rs.html#1568-1573\">source</a></span><a href=\"#impl-AsRef%3COsStr%3E-for-OsString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt; for <a class=\"struct\" href=\"../struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_ref-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/ffi/os_str.rs.html#1570-1572\">source</a><a href=\"#method.as_ref-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h4></section></summary><div class=\"docblock\">Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsRef%3COsStr%3E-for-Path\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../../src/std/path.rs.html#3010-3015\">source</a></span><a href=\"#impl-AsRef%3COsStr%3E-for-Path\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt; for <a class=\"struct\" href=\"../../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/path.rs.html#3012-3014\">source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h4></section></summary><div class=\"docblock\">Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsRef%3COsStr%3E-for-PathBuf\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../../src/std/path.rs.html#1957-1962\">source</a></span><a href=\"#impl-AsRef%3COsStr%3E-for-PathBuf\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt; for <a class=\"struct\" href=\"../../path/struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_ref-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/path.rs.html#1959-1961\">source</a><a href=\"#method.as_ref-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h4></section></summary><div class=\"docblock\">Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsRef%3COsStr%3E-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../../src/std/ffi/os_str.rs.html#1584-1589\">source</a></span><a href=\"#impl-AsRef%3COsStr%3E-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt; for <a class=\"struct\" href=\"../../string/struct.String.html\" title=\"struct std::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_ref-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/ffi/os_str.rs.html#1586-1588\">source</a><a href=\"#method.as_ref-8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h4></section></summary><div class=\"docblock\">Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsRef%3COsStr%3E-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../../src/std/ffi/os_str.rs.html#1576-1581\">source</a></span><a href=\"#impl-AsRef%3COsStr%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt; for <a class=\"primitive\" href=\"../../primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_ref-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/ffi/os_str.rs.html#1578-1580\">source</a><a href=\"#method.as_ref-9\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h4></section></summary><div class=\"docblock\">Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsRef%3CPath%3E-for-OsStr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../../src/std/path.rs.html#3150-3155\">source</a></span><a href=\"#impl-AsRef%3CPath%3E-for-OsStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt; for <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_ref-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/path.rs.html#3152-3154\">source</a><a href=\"#method.as_ref-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"../../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a></h4></section></summary><div class=\"docblock\">Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Borrow%3COsStr%3E-for-OsString\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../../src/std/ffi/os_str.rs.html#1539-1544\">source</a></span><a href=\"#impl-Borrow%3COsStr%3E-for-OsString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt; for <a class=\"struct\" href=\"../struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/ffi/os_str.rs.html#1541-1543\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Clone-for-Box%3COsStr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.29.0\">1.29.0</span> · <a class=\"src\" href=\"../../../src/std/ffi/os_str.rs.html#1233-1238\">source</a></span><a href=\"#impl-Clone-for-Box%3COsStr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"../../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/ffi/os_str.rs.html#1235-1237\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; Self</h4></section></summary><div class=\"docblock\">Returns a copy of the value. <a href=\"../../clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class=\"docblock\">Performs copy-assignment from <code>source</code>. <a href=\"../../clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-OsStr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../../src/std/ffi/os_str.rs.html#1476-1480\">source</a></span><a href=\"#impl-Debug-for-OsStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/ffi/os_str.rs.html#1477-1479\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, formatter: &amp;mut <a class=\"struct\" href=\"../../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../../fmt/type.Result.html\" title=\"type std::fmt::Result\">Result</a></h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-%26OsStr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> · <a class=\"src\" href=\"../../../src/std/ffi/os_str.rs.html#1347-1353\">source</a></span><a href=\"#impl-Default-for-%26OsStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for &amp;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/ffi/os_str.rs.html#1350-1352\">source</a><a href=\"#method.default-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Creates an empty <code>OsStr</code>.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-Box%3COsStr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.17.0\">1.17.0</span> · <a class=\"src\" href=\"../../../src/std/ffi/os_str.rs.html#1338-1344\">source</a></span><a href=\"#impl-Default-for-Box%3COsStr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"struct\" href=\"../../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/ffi/os_str.rs.html#1340-1343\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"../../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;</h4></section></summary><div class=\"docblock\">Returns the “default value” for a type. <a href=\"../../default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Extend%3C%26OsStr%3E-for-OsString\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.52.0\">1.52.0</span> · <a class=\"src\" href=\"../../../src/std/ffi/os_str.rs.html#1633-1640\">source</a></span><a href=\"#impl-Extend%3C%26OsStr%3E-for-OsString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../../iter/trait.Extend.html\" title=\"trait std::iter::Extend\">Extend</a>&lt;&amp;'a <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt; for <a class=\"struct\" href=\"../struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/ffi/os_str.rs.html#1635-1639\">source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../iter/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;T: <a class=\"trait\" href=\"../../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = &amp;'a <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;&gt;(&amp;mut self, iter: T)</h4></section></summary><div class=\"docblock\">Extends a collection with the contents of an iterator. <a href=\"../../iter/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/collect.rs.html#453\">source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../iter/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/72631\">#72631</a>)</span></div></span><div class=\"docblock\">Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/collect.rs.html#461\">source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../iter/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/72631\">#72631</a>)</span></div></span><div class=\"docblock\">Reserves capacity in a collection for the given number of additional elements. <a href=\"../../iter/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%26OsStr%3E-for-Arc%3COsStr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.24.0\">1.24.0</span> · <a class=\"src\" href=\"../../../src/std/ffi/os_str.rs.html#1252-1259\">source</a></span><a href=\"#impl-From%3C%26OsStr%3E-for-Arc%3COsStr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;&amp;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt; for <a class=\"struct\" href=\"../../sync/struct.Arc.html\" title=\"struct std::sync::Arc\">Arc</a>&lt;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/ffi/os_str.rs.html#1255-1258\">source</a><a href=\"#method.from-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>) -&gt; <a class=\"struct\" href=\"../../sync/struct.Arc.html\" title=\"struct std::sync::Arc\">Arc</a>&lt;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Copies the string into a newly allocated <code><a href=\"../../sync/struct.Arc.html\" title=\"struct std::sync::Arc\">Arc</a>&lt;<a href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;</code>.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%26OsStr%3E-for-Box%3COsStr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.17.0\">1.17.0</span> · <a class=\"src\" href=\"../../../src/std/ffi/os_str.rs.html#1191-1198\">source</a></span><a href=\"#impl-From%3C%26OsStr%3E-for-Box%3COsStr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;&amp;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt; for <a class=\"struct\" href=\"../../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/ffi/os_str.rs.html#1194-1197\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>) -&gt; <a class=\"struct\" href=\"../../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Copies the string into a newly allocated <code><a href=\"../../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;</code>.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%26OsStr%3E-for-Cow%3C'a,+OsStr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"../../../src/std/ffi/os_str.rs.html#1292-1298\">source</a></span><a href=\"#impl-From%3C%26OsStr%3E-for-Cow%3C'a,+OsStr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;&amp;'a <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt; for <a class=\"enum\" href=\"../../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/ffi/os_str.rs.html#1295-1297\">source</a><a href=\"#method.from-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;'a <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>) -&gt; <a class=\"enum\" href=\"../../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts the string reference into a <a href=\"../../borrow/enum.Cow.html#variant.Borrowed\" title=\"variant std::borrow::Cow::Borrowed\"><code>Cow::Borrowed</code></a>.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%26OsStr%3E-for-Rc%3COsStr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.24.0\">1.24.0</span> · <a class=\"src\" href=\"../../../src/std/ffi/os_str.rs.html#1273-1280\">source</a></span><a href=\"#impl-From%3C%26OsStr%3E-for-Rc%3COsStr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;&amp;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt; for <a class=\"struct\" href=\"../../rc/struct.Rc.html\" title=\"struct std::rc::Rc\">Rc</a>&lt;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/ffi/os_str.rs.html#1276-1279\">source</a><a href=\"#method.from-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>) -&gt; <a class=\"struct\" href=\"../../rc/struct.Rc.html\" title=\"struct std::rc::Rc\">Rc</a>&lt;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Copies the string into a newly allocated <code><a href=\"../../rc/struct.Rc.html\" title=\"struct std::rc::Rc\">Rc</a>&lt;<a href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;</code>.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CCow%3C'_,+OsStr%3E%3E-for-Box%3COsStr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> · <a class=\"src\" href=\"../../../src/std/ffi/os_str.rs.html#1201-1211\">source</a></span><a href=\"#impl-From%3CCow%3C'_,+OsStr%3E%3E-for-Box%3COsStr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"enum\" href=\"../../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'_, <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;&gt; for <a class=\"struct\" href=\"../../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/ffi/os_str.rs.html#1205-1210\">source</a><a href=\"#method.from-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(cow: <a class=\"enum\" href=\"../../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'_, <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;) -&gt; <a class=\"struct\" href=\"../../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>Cow&lt;'a, OsStr&gt;</code> into a <code><a href=\"../../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;</code>,\nby copying the contents if they are borrowed.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3COsString%3E-for-Box%3COsStr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"../../../src/std/ffi/os_str.rs.html#1224-1230\">source</a></span><a href=\"#impl-From%3COsString%3E-for-Box%3COsStr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"../struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a>&gt; for <a class=\"struct\" href=\"../../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/ffi/os_str.rs.html#1227-1229\">source</a><a href=\"#method.from-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"struct\" href=\"../struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a>) -&gt; <a class=\"struct\" href=\"../../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts an <a href=\"../struct.OsString.html\" title=\"struct std::ffi::OsString\"><code>OsString</code></a> into a <code><a href=\"../../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;</code> without copying or allocating.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromIterator%3C%26OsStr%3E-for-OsString\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.52.0\">1.52.0</span> · <a class=\"src\" href=\"../../../src/std/ffi/os_str.rs.html#1672-1681\">source</a></span><a href=\"#impl-FromIterator%3C%26OsStr%3E-for-OsString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../../iter/trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;&amp;'a <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt; for <a class=\"struct\" href=\"../struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/ffi/os_str.rs.html#1674-1680\">source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../iter/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I: <a class=\"trait\" href=\"../../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = &amp;'a <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;&gt;(iter: I) -&gt; Self</h4></section></summary><div class=\"docblock\">Creates a value from an iterator. <a href=\"../../iter/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Hash-for-OsStr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../../src/std/ffi/os_str.rs.html#1468-1473\">source</a></span><a href=\"#impl-Hash-for-OsStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/ffi/os_str.rs.html#1470-1472\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H: <a class=\"trait\" href=\"../../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>&gt;(&amp;self, state: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;mut H</a>)</h4></section></summary><div class=\"docblock\">Feeds this value into the given <a href=\"../../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"../../hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Join%3C%26OsStr%3E-for-%5BS%5D\" class=\"impl\"><a class=\"src rightside\" href=\"../../../src/std/ffi/os_str.rs.html#1522-1536\">source</a><a href=\"#impl-Join%3C%26OsStr%3E-for-%5BS%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S: <a class=\"trait\" href=\"../../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;&gt; <a class=\"trait\" href=\"../../slice/trait.Join.html\" title=\"trait std::slice::Join\">Join</a>&lt;&amp;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt; for <a class=\"primitive\" href=\"../../primitive.slice.html\">[S]</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../slice/trait.Join.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"../struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_concat_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27747\">#27747</a>)</span></div></span><div class=\"docblock\">The resulting type after concatenation</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.join\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/ffi/os_str.rs.html#1525-1535\">source</a><a href=\"#method.join\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../slice/trait.Join.html#tymethod.join\" class=\"fn\">join</a>(slice: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Self</a>, sep: &amp;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>) -&gt; <a class=\"struct\" href=\"../struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_concat_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27747\">#27747</a>)</span></div></span><div class=\"docblock\">Implementation of <a href=\"../../primitive.slice.html#method.join\" title=\"method slice::join\"><code>[T]::join</code></a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Ord-for-OsStr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../../src/std/ffi/os_str.rs.html#1418-1423\">source</a></span><a href=\"#impl-Ord-for-OsStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/ffi/os_str.rs.html#1420-1422\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>) -&gt; <a class=\"enum\" href=\"../../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\">This method returns an <a href=\"../../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"../../cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-OsStrExt-for-OsStr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../../src/std/os/windows/ffi.rs.html#131-136\">source</a></span><a href=\"#impl-OsStrExt-for-OsStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../os/windows/ffi/trait.OsStrExt.html\" title=\"trait std::os::windows::ffi::OsStrExt\">OsStrExt</a> for <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Windows</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.encode_wide\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/os/windows/ffi.rs.html#133-135\">source</a><a href=\"#method.encode_wide\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../os/windows/ffi/trait.OsStrExt.html#tymethod.encode_wide\" class=\"fn\">encode_wide</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../../os/windows/ffi/struct.EncodeWide.html\" title=\"struct std::os::windows::ffi::EncodeWide\">EncodeWide</a>&lt;'_&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"EncodeWide<'_>\">ⓘ</a></h4></section></summary><div class=\"docblock\">Re-encodes an <code>OsStr</code> as a wide character sequence, i.e., potentially\nill-formed UTF-16. <a href=\"../../os/windows/ffi/trait.OsStrExt.html#tymethod.encode_wide\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-OsStrExt-for-OsStr-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../../src/std/os/unix/ffi/os_str.rs.html#61-70\">source</a></span><a href=\"#impl-OsStrExt-for-OsStr-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../os/wasi/ffi/trait.OsStrExt.html\" title=\"trait std::os::wasi::ffi::OsStrExt\">OsStrExt</a> for <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>WASI</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/os/unix/ffi/os_str.rs.html#63-65\">source</a><a href=\"#method.from_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../os/wasi/ffi/trait.OsStrExt.html#tymethod.from_bytes\" class=\"fn\">from_bytes</a>(slice: &amp;[<a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>]) -&gt; &amp;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h4></section></summary><div class=\"docblock\">Creates an <a href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\"><code>OsStr</code></a> from a byte slice. <a href=\"../../os/wasi/ffi/trait.OsStrExt.html#tymethod.from_bytes\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/os/unix/ffi/os_str.rs.html#67-69\">source</a><a href=\"#method.as_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../os/wasi/ffi/trait.OsStrExt.html#tymethod.as_bytes\" class=\"fn\">as_bytes</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">ⓘ</a></h4></section></summary><div class=\"docblock\">Gets the underlying byte view of the <a href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\"><code>OsStr</code></a> slice. <a href=\"../../os/wasi/ffi/trait.OsStrExt.html#tymethod.as_bytes\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-OsStrExt-for-OsStr-2\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../../src/std/os/unix/ffi/os_str.rs.html#61-70\">source</a></span><a href=\"#impl-OsStrExt-for-OsStr-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../os/unix/ffi/trait.OsStrExt.html\" title=\"trait std::os::unix::ffi::OsStrExt\">OsStrExt</a> for <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Unix</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_bytes-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/os/unix/ffi/os_str.rs.html#63-65\">source</a><a href=\"#method.from_bytes-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../os/unix/ffi/trait.OsStrExt.html#tymethod.from_bytes\" class=\"fn\">from_bytes</a>(slice: &amp;[<a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>]) -&gt; &amp;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h4></section></summary><div class=\"docblock\">Creates an <a href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\"><code>OsStr</code></a> from a byte slice. <a href=\"../../os/unix/ffi/trait.OsStrExt.html#tymethod.from_bytes\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_bytes-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/os/unix/ffi/os_str.rs.html#67-69\">source</a><a href=\"#method.as_bytes-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../os/unix/ffi/trait.OsStrExt.html#tymethod.as_bytes\" class=\"fn\">as_bytes</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">ⓘ</a></h4></section></summary><div class=\"docblock\">Gets the underlying byte view of the <a href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\"><code>OsStr</code></a> slice. <a href=\"../../os/unix/ffi/trait.OsStrExt.html#tymethod.as_bytes\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3C%26OsStr%3E-for-Cow%3C'a,+OsStr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../../src/std/ffi/os_str.rs.html#1464\">source</a></span><a href=\"#impl-PartialEq%3C%26OsStr%3E-for-Cow%3C'a,+OsStr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"../../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;&amp;'b <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt; for <a class=\"enum\" href=\"../../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/ffi/os_str.rs.html#1464\">source</a><a href=\"#method.eq-16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;'b <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-16\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne-16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3C%26OsStr%3E-for-Cow%3C'a,+Path%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../../src/std/path.rs.html#3307\">source</a></span><a href=\"#impl-PartialEq%3C%26OsStr%3E-for-Cow%3C'a,+Path%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"../../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;&amp;'b <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt; for <a class=\"enum\" href=\"../../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"../../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/path.rs.html#3307\">source</a><a href=\"#method.eq-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;'b <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-3\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3C%26OsStr%3E-for-OsString\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../../src/std/ffi/os_str.rs.html#1462\">source</a></span><a href=\"#impl-PartialEq%3C%26OsStr%3E-for-OsString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"../../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;&amp;'a <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt; for <a class=\"struct\" href=\"../struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-22\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/ffi/os_str.rs.html#1462\">source</a><a href=\"#method.eq-22\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;'a <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-22\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne-22\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3C%26OsStr%3E-for-Path\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../../src/std/path.rs.html#3300\">source</a></span><a href=\"#impl-PartialEq%3C%26OsStr%3E-for-Path\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;&amp;'a <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt; for <a class=\"struct\" href=\"../../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-17\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/path.rs.html#3300\">source</a><a href=\"#method.eq-17\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;'a <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-17\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne-17\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3C%26OsStr%3E-for-PathBuf\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../../src/std/path.rs.html#3296\">source</a></span><a href=\"#impl-PartialEq%3C%26OsStr%3E-for-PathBuf\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;&amp;'a <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt; for <a class=\"struct\" href=\"../../path/struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/path.rs.html#3296\">source</a><a href=\"#method.eq-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;'a <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3C%26Path%3E-for-OsStr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../../src/std/path.rs.html#3303\">source</a></span><a href=\"#impl-PartialEq%3C%26Path%3E-for-OsStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;&amp;'a <a class=\"struct\" href=\"../../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt; for <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/path.rs.html#3303\">source</a><a href=\"#method.eq-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;'a <a class=\"struct\" href=\"../../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-21\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3CCow%3C'a,+OsStr%3E%3E-for-%26OsStr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../../src/std/ffi/os_str.rs.html#1464\">source</a></span><a href=\"#impl-PartialEq%3CCow%3C'a,+OsStr%3E%3E-for-%26OsStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"../../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"enum\" href=\"../../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;&gt; for &amp;'b <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/ffi/os_str.rs.html#1464\">source</a><a href=\"#method.eq-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"../../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-6\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3CCow%3C'a,+OsStr%3E%3E-for-OsStr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../../src/std/ffi/os_str.rs.html#1463\">source</a></span><a href=\"#impl-PartialEq%3CCow%3C'a,+OsStr%3E%3E-for-OsStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"../../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"enum\" href=\"../../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;&gt; for <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/ffi/os_str.rs.html#1463\">source</a><a href=\"#method.eq-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"../../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3CCow%3C'a,+Path%3E%3E-for-%26OsStr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../../src/std/path.rs.html#3307\">source</a></span><a href=\"#impl-PartialEq%3CCow%3C'a,+Path%3E%3E-for-%26OsStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"../../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"enum\" href=\"../../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"../../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;&gt; for &amp;'b <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-24\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/path.rs.html#3307\">source</a><a href=\"#method.eq-24\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"../../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"../../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-24\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne-24\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3CCow%3C'a,+Path%3E%3E-for-OsStr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../../src/std/path.rs.html#3306\">source</a></span><a href=\"#impl-PartialEq%3CCow%3C'a,+Path%3E%3E-for-OsStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"enum\" href=\"../../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"../../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;&gt; for <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/path.rs.html#3306\">source</a><a href=\"#method.eq-9\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"../../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"../../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-9\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne-9\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3COsStr%3E-for-%26Path\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../../src/std/path.rs.html#3303\">source</a></span><a href=\"#impl-PartialEq%3COsStr%3E-for-%26Path\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt; for &amp;'a <a class=\"struct\" href=\"../../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-19\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/path.rs.html#3303\">source</a><a href=\"#method.eq-19\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-19\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne-19\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3COsStr%3E-for-Cow%3C'a,+OsStr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../../src/std/ffi/os_str.rs.html#1463\">source</a></span><a href=\"#impl-PartialEq%3COsStr%3E-for-Cow%3C'a,+OsStr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"../../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt; for <a class=\"enum\" href=\"../../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/ffi/os_str.rs.html#1463\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3COsStr%3E-for-Cow%3C'a,+Path%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../../src/std/path.rs.html#3306\">source</a></span><a href=\"#impl-PartialEq%3COsStr%3E-for-Cow%3C'a,+Path%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt; for <a class=\"enum\" href=\"../../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"../../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/path.rs.html#3306\">source</a><a href=\"#method.eq-10\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-10\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne-10\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3COsStr%3E-for-OsString\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../../src/std/ffi/os_str.rs.html#1461\">source</a></span><a href=\"#impl-PartialEq%3COsStr%3E-for-OsString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"../../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt; for <a class=\"struct\" href=\"../struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-18\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/ffi/os_str.rs.html#1461\">source</a><a href=\"#method.eq-18\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-18\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne-18\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3COsStr%3E-for-Path\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../../src/std/path.rs.html#3299\">source</a></span><a href=\"#impl-PartialEq%3COsStr%3E-for-Path\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt; for <a class=\"struct\" href=\"../../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/path.rs.html#3299\">source</a><a href=\"#method.eq-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-14\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3COsStr%3E-for-PathBuf\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../../src/std/path.rs.html#3295\">source</a></span><a href=\"#impl-PartialEq%3COsStr%3E-for-PathBuf\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt; for <a class=\"struct\" href=\"../../path/struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-23\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/path.rs.html#3295\">source</a><a href=\"#method.eq-23\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-23\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne-23\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3COsStr%3E-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../../src/std/ffi/os_str.rs.html#1372-1377\">source</a></span><a href=\"#impl-PartialEq%3COsStr%3E-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt; for <a class=\"primitive\" href=\"../../primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/ffi/os_str.rs.html#1374-1376\">source</a><a href=\"#method.eq-11\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-11\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne-11\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3COsString%3E-for-%26OsStr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../../src/std/ffi/os_str.rs.html#1462\">source</a></span><a href=\"#impl-PartialEq%3COsString%3E-for-%26OsStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"../../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"../struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a>&gt; for &amp;'a <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/ffi/os_str.rs.html#1462\">source</a><a href=\"#method.eq-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"../struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-4\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3COsString%3E-for-OsStr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../../src/std/ffi/os_str.rs.html#1461\">source</a></span><a href=\"#impl-PartialEq%3COsString%3E-for-OsStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"../../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"../struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a>&gt; for <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-20\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/ffi/os_str.rs.html#1461\">source</a><a href=\"#method.eq-20\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"../struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-20\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne-20\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3CPath%3E-for-%26OsStr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../../src/std/path.rs.html#3300\">source</a></span><a href=\"#impl-PartialEq%3CPath%3E-for-%26OsStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"../../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt; for &amp;'a <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/path.rs.html#3300\">source</a><a href=\"#method.eq-8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"../../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-8\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne-8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3CPath%3E-for-OsStr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../../src/std/path.rs.html#3299\">source</a></span><a href=\"#impl-PartialEq%3CPath%3E-for-OsStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"../../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt; for <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/path.rs.html#3299\">source</a><a href=\"#method.eq-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"../../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-5\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3CPathBuf%3E-for-%26OsStr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../../src/std/path.rs.html#3296\">source</a></span><a href=\"#impl-PartialEq%3CPathBuf%3E-for-%26OsStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"../../path/struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>&gt; for &amp;'a <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/path.rs.html#3296\">source</a><a href=\"#method.eq-7\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"../../path/struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-7\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne-7\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3CPathBuf%3E-for-OsStr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../../src/std/path.rs.html#3295\">source</a></span><a href=\"#impl-PartialEq%3CPathBuf%3E-for-OsStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"../../path/struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>&gt; for <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/path.rs.html#3295\">source</a><a href=\"#method.eq-13\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"../../path/struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-13\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne-13\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3Cstr%3E-for-OsStr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../../src/std/ffi/os_str.rs.html#1364-1369\">source</a></span><a href=\"#impl-PartialEq%3Cstr%3E-for-OsStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"../../primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/ffi/os_str.rs.html#1366-1368\">source</a><a href=\"#method.eq-15\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"../../primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-15\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne-15\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq-for-OsStr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../../src/std/ffi/os_str.rs.html#1356-1361\">source</a></span><a href=\"#impl-PartialEq-for-OsStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-12\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/ffi/os_str.rs.html#1358-1360\">source</a><a href=\"#method.eq-12\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-12\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne-12\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd%3C%26OsStr%3E-for-Cow%3C'a,+OsStr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../../src/std/ffi/os_str.rs.html#1464\">source</a></span><a href=\"#impl-PartialOrd%3C%26OsStr%3E-for-Cow%3C'a,+OsStr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"../../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;&amp;'b <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt; for <a class=\"enum\" href=\"../../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp-22\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/ffi/os_str.rs.html#1464\">source</a><a href=\"#method.partial_cmp-22\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;&amp;'b <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt-22\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt-22\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le-22\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le-22\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt-22\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt-22\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge-22\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge-22\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd%3C%26OsStr%3E-for-Cow%3C'a,+Path%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../../src/std/path.rs.html#3307\">source</a></span><a href=\"#impl-PartialOrd%3C%26OsStr%3E-for-Cow%3C'a,+Path%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"../../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;&amp;'b <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt; for <a class=\"enum\" href=\"../../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"../../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp-17\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/path.rs.html#3307\">source</a><a href=\"#method.partial_cmp-17\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;&amp;'b <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt-17\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt-17\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le-17\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le-17\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt-17\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt-17\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge-17\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge-17\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd%3C%26OsStr%3E-for-OsString\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../../src/std/ffi/os_str.rs.html#1462\">source</a></span><a href=\"#impl-PartialOrd%3C%26OsStr%3E-for-OsString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"../../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;&amp;'a <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt; for <a class=\"struct\" href=\"../struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/ffi/os_str.rs.html#1462\">source</a><a href=\"#method.partial_cmp-9\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;&amp;'a <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt-9\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt-9\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le-9\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le-9\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt-9\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt-9\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge-9\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge-9\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd%3C%26OsStr%3E-for-Path\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../../src/std/path.rs.html#3300\">source</a></span><a href=\"#impl-PartialOrd%3C%26OsStr%3E-for-Path\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;&amp;'a <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt; for <a class=\"struct\" href=\"../../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/path.rs.html#3300\">source</a><a href=\"#method.partial_cmp-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;&amp;'a <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt-21\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le-21\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt-21\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge-21\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd%3C%26OsStr%3E-for-PathBuf\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../../src/std/path.rs.html#3296\">source</a></span><a href=\"#impl-PartialOrd%3C%26OsStr%3E-for-PathBuf\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;&amp;'a <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt; for <a class=\"struct\" href=\"../../path/struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp-16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/path.rs.html#3296\">source</a><a href=\"#method.partial_cmp-16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;&amp;'a <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt-16\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt-16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le-16\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le-16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt-16\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt-16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge-16\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge-16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd%3C%26Path%3E-for-OsStr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../../src/std/path.rs.html#3303\">source</a></span><a href=\"#impl-PartialOrd%3C%26Path%3E-for-OsStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;&amp;'a <a class=\"struct\" href=\"../../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt; for <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp-12\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/path.rs.html#3303\">source</a><a href=\"#method.partial_cmp-12\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;&amp;'a <a class=\"struct\" href=\"../../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt-12\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt-12\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le-12\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le-12\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt-12\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt-12\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge-12\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge-12\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd%3CCow%3C'a,+OsStr%3E%3E-for-%26OsStr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../../src/std/ffi/os_str.rs.html#1464\">source</a></span><a href=\"#impl-PartialOrd%3CCow%3C'a,+OsStr%3E%3E-for-%26OsStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"../../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"enum\" href=\"../../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;&gt; for &amp;'b <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp-20\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/ffi/os_str.rs.html#1464\">source</a><a href=\"#method.partial_cmp-20\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"../../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt-20\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt-20\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le-20\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le-20\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt-20\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt-20\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge-20\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge-20\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd%3CCow%3C'a,+OsStr%3E%3E-for-OsStr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../../src/std/ffi/os_str.rs.html#1463\">source</a></span><a href=\"#impl-PartialOrd%3CCow%3C'a,+OsStr%3E%3E-for-OsStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"../../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"enum\" href=\"../../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;&gt; for <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/ffi/os_str.rs.html#1463\">source</a><a href=\"#method.partial_cmp-13\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"../../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt-13\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt-13\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le-13\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le-13\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt-13\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt-13\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge-13\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge-13\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd%3CCow%3C'a,+Path%3E%3E-for-%26OsStr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../../src/std/path.rs.html#3307\">source</a></span><a href=\"#impl-PartialOrd%3CCow%3C'a,+Path%3E%3E-for-%26OsStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"../../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"enum\" href=\"../../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"../../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;&gt; for &amp;'b <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/path.rs.html#3307\">source</a><a href=\"#method.partial_cmp-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"../../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"../../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt-6\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le-6\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt-6\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge-6\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd%3CCow%3C'a,+Path%3E%3E-for-OsStr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../../src/std/path.rs.html#3306\">source</a></span><a href=\"#impl-PartialOrd%3CCow%3C'a,+Path%3E%3E-for-OsStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"enum\" href=\"../../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"../../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;&gt; for <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/path.rs.html#3306\">source</a><a href=\"#method.partial_cmp-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"../../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"../../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt-5\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le-5\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt-5\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge-5\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd%3COsStr%3E-for-%26Path\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../../src/std/path.rs.html#3303\">source</a></span><a href=\"#impl-PartialOrd%3COsStr%3E-for-%26Path\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt; for &amp;'a <a class=\"struct\" href=\"../../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/path.rs.html#3303\">source</a><a href=\"#method.partial_cmp-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt-3\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le-3\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt-3\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge-3\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd%3COsStr%3E-for-Cow%3C'a,+OsStr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../../src/std/ffi/os_str.rs.html#1463\">source</a></span><a href=\"#impl-PartialOrd%3COsStr%3E-for-Cow%3C'a,+OsStr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"../../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt; for <a class=\"enum\" href=\"../../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/ffi/os_str.rs.html#1463\">source</a><a href=\"#method.partial_cmp-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt-4\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le-4\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt-4\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge-4\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd%3COsStr%3E-for-Cow%3C'a,+Path%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../../src/std/path.rs.html#3306\">source</a></span><a href=\"#impl-PartialOrd%3COsStr%3E-for-Cow%3C'a,+Path%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt; for <a class=\"enum\" href=\"../../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"struct\" href=\"../../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/path.rs.html#3306\">source</a><a href=\"#method.partial_cmp-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd%3COsStr%3E-for-OsString\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../../src/std/ffi/os_str.rs.html#1461\">source</a></span><a href=\"#impl-PartialOrd%3COsStr%3E-for-OsString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"../../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt; for <a class=\"struct\" href=\"../struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp-23\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/ffi/os_str.rs.html#1461\">source</a><a href=\"#method.partial_cmp-23\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt-23\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt-23\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le-23\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le-23\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt-23\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt-23\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge-23\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge-23\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd%3COsStr%3E-for-Path\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../../src/std/path.rs.html#3299\">source</a></span><a href=\"#impl-PartialOrd%3COsStr%3E-for-Path\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt; for <a class=\"struct\" href=\"../../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp-18\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/path.rs.html#3299\">source</a><a href=\"#method.partial_cmp-18\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt-18\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt-18\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le-18\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le-18\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt-18\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt-18\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge-18\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge-18\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd%3COsStr%3E-for-PathBuf\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../../src/std/path.rs.html#3295\">source</a></span><a href=\"#impl-PartialOrd%3COsStr%3E-for-PathBuf\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt; for <a class=\"struct\" href=\"../../path/struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/path.rs.html#3295\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd%3COsString%3E-for-%26OsStr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../../src/std/ffi/os_str.rs.html#1462\">source</a></span><a href=\"#impl-PartialOrd%3COsString%3E-for-%26OsStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"../../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"../struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a>&gt; for &amp;'a <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/ffi/os_str.rs.html#1462\">source</a><a href=\"#method.partial_cmp-7\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"../struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a>) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt-7\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt-7\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le-7\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le-7\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt-7\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt-7\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge-7\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge-7\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd%3COsString%3E-for-OsStr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../../src/std/ffi/os_str.rs.html#1461\">source</a></span><a href=\"#impl-PartialOrd%3COsString%3E-for-OsStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"../../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"../struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a>&gt; for <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/ffi/os_str.rs.html#1461\">source</a><a href=\"#method.partial_cmp-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"../struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a>) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt-14\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le-14\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt-14\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge-14\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd%3CPath%3E-for-%26OsStr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../../src/std/path.rs.html#3300\">source</a></span><a href=\"#impl-PartialOrd%3CPath%3E-for-%26OsStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"../../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt; for &amp;'a <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/path.rs.html#3300\">source</a><a href=\"#method.partial_cmp-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"../../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd%3CPath%3E-for-OsStr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../../src/std/path.rs.html#3299\">source</a></span><a href=\"#impl-PartialOrd%3CPath%3E-for-OsStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"../../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt; for <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/path.rs.html#3299\">source</a><a href=\"#method.partial_cmp-11\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"../../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt-11\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt-11\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le-11\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le-11\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt-11\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt-11\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge-11\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge-11\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd%3CPathBuf%3E-for-%26OsStr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../../src/std/path.rs.html#3296\">source</a></span><a href=\"#impl-PartialOrd%3CPathBuf%3E-for-%26OsStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"../../path/struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>&gt; for &amp;'a <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/path.rs.html#3296\">source</a><a href=\"#method.partial_cmp-15\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"../../path/struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt-15\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt-15\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le-15\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le-15\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt-15\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt-15\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge-15\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge-15\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd%3CPathBuf%3E-for-OsStr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../../src/std/path.rs.html#3295\">source</a></span><a href=\"#impl-PartialOrd%3CPathBuf%3E-for-OsStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"../../path/struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>&gt; for <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp-19\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/path.rs.html#3295\">source</a><a href=\"#method.partial_cmp-19\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"../../path/struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt-19\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt-19\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le-19\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le-19\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt-19\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt-19\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge-19\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge-19\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd%3Cstr%3E-for-OsStr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../../src/std/ffi/os_str.rs.html#1407-1412\">source</a></span><a href=\"#impl-PartialOrd%3Cstr%3E-for-OsStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"primitive\" href=\"../../primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/ffi/os_str.rs.html#1409-1411\">source</a><a href=\"#method.partial_cmp-8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"../../primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt-8\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt-8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le-8\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le-8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt-8\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt-8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge-8\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge-8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd-for-OsStr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../../src/std/ffi/os_str.rs.html#1383-1404\">source</a></span><a href=\"#impl-PartialOrd-for-OsStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/ffi/os_str.rs.html#1385-1387\">source</a><a href=\"#method.partial_cmp-10\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/ffi/os_str.rs.html#1389-1391\">source</a><a href=\"#method.lt-10\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/ffi/os_str.rs.html#1393-1395\">source</a><a href=\"#method.le-10\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/ffi/os_str.rs.html#1397-1399\">source</a><a href=\"#method.gt-10\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/ffi/os_str.rs.html#1401-1403\">source</a><a href=\"#method.ge-10\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ToOwned-for-OsStr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../../src/std/ffi/os_str.rs.html#1547-1557\">source</a></span><a href=\"#impl-ToOwned-for-OsStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../borrow/trait.ToOwned.html\" title=\"trait std::borrow::ToOwned\">ToOwned</a> for <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Owned\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../borrow/trait.ToOwned.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = <a class=\"struct\" href=\"../struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a></h4></section></summary><div class=\"docblock\">The resulting type after obtaining ownership.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/ffi/os_str.rs.html#1550-1552\">source</a><a href=\"#method.to_owned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../borrow/trait.ToOwned.html#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a></h4></section></summary><div class=\"docblock\">Creates owned data from borrowed data, usually by cloning. <a href=\"../../borrow/trait.ToOwned.html#tymethod.to_owned\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/ffi/os_str.rs.html#1554-1556\">source</a><a href=\"#method.clone_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../borrow/trait.ToOwned.html#method.clone_into\" class=\"fn\">clone_into</a>(&amp;self, target: &amp;mut <a class=\"struct\" href=\"../struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a>)</h4></section></summary><div class=\"docblock\">Uses borrowed data to replace owned data, usually by cloning. <a href=\"../../borrow/trait.ToOwned.html#method.clone_into\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3C%26OsStr%3E-for-%26str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.72.0\">1.72.0</span> · <a class=\"src\" href=\"../../../src/std/ffi/os_str.rs.html#1320-1335\">source</a></span><a href=\"#impl-TryFrom%3C%26OsStr%3E-for-%26str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;&amp;'a <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>&gt; for &amp;'a <a class=\"primitive\" href=\"../../primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/ffi/os_str.rs.html#1332-1334\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: &amp;'a <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a>) -&gt; <a class=\"enum\" href=\"../../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;Self, Self::<a class=\"associatedtype\" href=\"../../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Tries to convert an <code>&amp;OsStr</code> to a <code>&amp;str</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ffi::OsStr;\n\n<span class=\"kw\">let </span>os_str = OsStr::new(<span class=\"string\">\"foo\"</span>);\n<span class=\"kw\">let </span>as_str = &lt;<span class=\"kw-2\">&amp;</span>str&gt;::try_from(os_str).unwrap();\n<span class=\"macro\">assert_eq!</span>(as_str, <span class=\"string\">\"foo\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ffi::OsStr;%0A++++%0A++++let+os_str+=+OsStr::new(%22foo%22);%0A++++let+as_str+=+%3C%26str%3E::try_from(os_str).unwrap();%0A++++assert_eq!(as_str,+%22foo%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"../../str/struct.Utf8Error.html\" title=\"struct std::str::Utf8Error\">Utf8Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><section id=\"impl-Eq-for-OsStr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../../src/std/ffi/os_str.rs.html#1380\">source</a></span><a href=\"#impl-Eq-for-OsStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h3></section></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-OsStr\" class=\"impl\"><a href=\"#impl-Freeze-for-OsStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h3></section><section id=\"impl-RefUnwindSafe-for-OsStr\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-OsStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h3></section><section id=\"impl-Send-for-OsStr\" class=\"impl\"><a href=\"#impl-Send-for-OsStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h3></section><section id=\"impl-Sized-for-OsStr\" class=\"impl\"><a href=\"#impl-Sized-for-OsStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl !<a class=\"trait\" href=\"../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> for <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h3></section><section id=\"impl-Sync-for-OsStr\" class=\"impl\"><a href=\"#impl-Sync-for-OsStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h3></section><section id=\"impl-Unpin-for-OsStr\" class=\"impl\"><a href=\"#impl-Unpin-for-OsStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h3></section><section id=\"impl-UnwindSafe-for-OsStr\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-OsStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"../struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details></div><script type=\"text/json\" id=\"notable-traits-data\">{\"&[u8]\":\"<h3>Notable traits for <code>&amp;[<a class=\\\"primitive\\\" href=\\\"../../primitive.u8.html\\\">u8</a>]</code></h3><pre><code><div class=\\\"where\\\">impl <a class=\\\"trait\\\" href=\\\"../../io/trait.Read.html\\\" title=\\\"trait std::io::Read\\\">Read</a> for &amp;[<a class=\\\"primitive\\\" href=\\\"../../primitive.u8.html\\\">u8</a>]</div>\",\"EncodeWide<'_>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../../os/windows/ffi/struct.EncodeWide.html\\\" title=\\\"struct std::os::windows::ffi::EncodeWide\\\">EncodeWide</a>&lt;'a&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a&gt; <a class=\\\"trait\\\" href=\\\"../../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../../os/windows/ffi/struct.EncodeWide.html\\\" title=\\\"struct std::os::windows::ffi::EncodeWide\\\">EncodeWide</a>&lt;'a&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"primitive\\\" href=\\\"../../primitive.u16.html\\\">u16</a>;</div>\"}</script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:26:17.602Z"
}