{
	"title": "current_exe in std::env - Rust",
	"url": "https://doc.rust-lang.org/stable/std/env/fn.current_exe.html",
	"markdown": "# current\\_exe in std::env - Rust\n\n## Function [std](../index.html)::[env](index.html)::[current\\_exe](#)\n\n1.0.0 · [source](about:blank/src/std/env.rs.html#762-764) ·\n\n```\npub fn current_exe() -> Result<PathBuf>\n```\n\nExpand description\n\nReturns the full filesystem path of the current running executable.\n\n## [§](#platform-specific-behavior)Platform-specific behavior\n\nIf the executable was invoked through a symbolic link, some platforms will return the path of the symbolic link and other platforms will return the path of the symbolic link’s target.\n\nIf the executable is renamed while it is running, platforms may return the path at the time it was loaded instead of the new path.\n\n## [§](#errors)Errors\n\nAcquiring the path of the current executable is a platform-specific operation that can fail for a good number of reasons. Some errors can include, but not be limited to, filesystem operations failing or general syscall failures.\n\n## [§](#security)Security\n\nThe output of this function should not be trusted for anything that might have security implications. Basically, if users can run the executable, they can change the output arbitrarily.\n\nAs an example, you can easily introduce a race condition. It goes like this:\n\n1.  You get the path to the current executable using `current_exe()`, and store it in a variable.\n2.  Time passes. A malicious actor removes the current executable, and replaces it with a malicious one.\n3.  You then use the stored path to re-execute the current executable.\n\nYou expected to safely execute the current executable, but you’re instead executing something completely different. The code you just executed run with your privileges.\n\nThis sort of behavior has been known to [lead to privilege escalation](https://securityvulns.com/Wdocument183.html) when used incorrectly.\n\n## [§](#examples)Examples\n\n```\nuse std::env;\n\nmatch env::current_exe() {\n    Ok(exe_path) => println!(\"Path of this executable is: {}\",\n                             exe_path.display()),\n    Err(e) => println!(\"failed to get current exe path: {e}\"),\n};\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::env;%0A++++%0A++++match+env::current_exe()+%7B%0A++++++++Ok(exe_path)+=%3E+println!(%22Path+of+this+executable+is:+%7B%7D%22,%0A+++++++++++++++++++++++++++++++++exe_path.display()),%0A++++++++Err(e)+=%3E+println!(%22failed+to+get+current+exe+path:+%7Be%7D%22),%0A++++%7D;%0A%7D&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Returns the full filesystem path of the current running executable.\"><title>current_exe in std::env - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc fn\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h2><a href=\"index.html\">In std::env</a></h2><h3><a href=\"index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"consts/index.html\">consts</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Args.html\">Args</a></li><li><a href=\"struct.ArgsOs.html\">ArgsOs</a></li><li><a href=\"struct.JoinPathsError.html\">JoinPathsError</a></li><li><a href=\"struct.SplitPaths.html\">SplitPaths</a></li><li><a href=\"struct.Vars.html\">Vars</a></li><li><a href=\"struct.VarsOs.html\">VarsOs</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.VarError.html\">VarError</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.args.html\">args</a></li><li><a href=\"fn.args_os.html\">args_os</a></li><li><a href=\"fn.current_dir.html\">current_dir</a></li><li><a href=\"fn.current_exe.html\">current_exe</a></li><li><a href=\"fn.home_dir.html\">home_dir</a></li><li><a href=\"fn.join_paths.html\">join_paths</a></li><li><a href=\"fn.remove_var.html\">remove_var</a></li><li><a href=\"fn.set_current_dir.html\">set_current_dir</a></li><li><a href=\"fn.set_var.html\">set_var</a></li><li><a href=\"fn.split_paths.html\">split_paths</a></li><li><a href=\"fn.temp_dir.html\">temp_dir</a></li><li><a href=\"fn.var.html\">var</a></li><li><a href=\"fn.var_os.html\">var_os</a></li><li><a href=\"fn.vars.html\">vars</a></li><li><a href=\"fn.vars_os.html\">vars_os</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Function <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">env</a>::<wbr><a class=\"fn\" href=\"#\">current_exe</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/env.rs.html#762-764\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub fn current_exe() -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"struct\" href=\"../path/struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a>&gt;</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Returns the full filesystem path of the current running executable.</p>\n<h2 id=\"platform-specific-behavior\"><a class=\"doc-anchor\" href=\"#platform-specific-behavior\">§</a>Platform-specific behavior</h2>\n<p>If the executable was invoked through a symbolic link, some platforms will\nreturn the path of the symbolic link and other platforms will return the\npath of the symbolic link’s target.</p>\n<p>If the executable is renamed while it is running, platforms may return the\npath at the time it was loaded instead of the new path.</p>\n<h2 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h2>\n<p>Acquiring the path of the current executable is a platform-specific operation\nthat can fail for a good number of reasons. Some errors can include, but not\nbe limited to, filesystem operations failing or general syscall failures.</p>\n<h2 id=\"security\"><a class=\"doc-anchor\" href=\"#security\">§</a>Security</h2>\n<p>The output of this function should not be trusted for anything\nthat might have security implications. Basically, if users can run\nthe executable, they can change the output arbitrarily.</p>\n<p>As an example, you can easily introduce a race condition. It goes\nlike this:</p>\n<ol>\n<li>You get the path to the current executable using <code>current_exe()</code>, and\nstore it in a variable.</li>\n<li>Time passes. A malicious actor removes the current executable, and\nreplaces it with a malicious one.</li>\n<li>You then use the stored path to re-execute the current\nexecutable.</li>\n</ol>\n<p>You expected to safely execute the current executable, but you’re\ninstead executing something completely different. The code you\njust executed run with your privileges.</p>\n<p>This sort of behavior has been known to <a href=\"https://securityvulns.com/Wdocument183.html\">lead to privilege escalation</a> when\nused incorrectly.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::env;\n\n<span class=\"kw\">match </span>env::current_exe() {\n    <span class=\"prelude-val\">Ok</span>(exe_path) =&gt; <span class=\"macro\">println!</span>(<span class=\"string\">\"Path of this executable is: {}\"</span>,\n                             exe_path.display()),\n    <span class=\"prelude-val\">Err</span>(e) =&gt; <span class=\"macro\">println!</span>(<span class=\"string\">\"failed to get current exe path: {e}\"</span>),\n};</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::env;%0A++++%0A++++match+env::current_exe()+%7B%0A++++++++Ok(exe_path)+=%3E+println!(%22Path+of+this+executable+is:+%7B%7D%22,%0A+++++++++++++++++++++++++++++++++exe_path.display()),%0A++++++++Err(e)+=%3E+println!(%22failed+to+get+current+exe+path:+%7Be%7D%22),%0A++++%7D;%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:22:57.012Z"
}