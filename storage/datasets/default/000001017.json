{
	"title": "ReentrantLock in std::sync - Rust",
	"url": "https://doc.rust-lang.org/stable/std/sync/struct.ReentrantLock.html",
	"markdown": "# ReentrantLock in std::sync - Rust\n\n```\npub struct ReentrantLock<T: ?Sized> { /* private fields */ }\n```\n\n🔬This is a nightly-only experimental API. (`reentrant_lock` [#121440](https://github.com/rust-lang/rust/issues/121440))\n\nExpand description\n\nA re-entrant mutual exclusion lock\n\nThis lock will block _other_ threads waiting for the lock to become available. The thread which has already locked the mutex can lock it multiple times without blocking, preventing a common source of deadlocks.\n\n## [§](#examples)Examples\n\nAllow recursively calling a function needing synchronization from within a callback (this is how [`StdoutLock`](../io/struct.StdoutLock.html \"struct std::io::StdoutLock\") is currently implemented):\n\n```\n#![feature(reentrant_lock)]\n\nuse std::cell::RefCell;\nuse std::sync::ReentrantLock;\n\npub struct Log {\n    data: RefCell<String>,\n}\n\nimpl Log {\n    pub fn append(&self, msg: &str) {\n        self.data.borrow_mut().push_str(msg);\n    }\n}\n\nstatic LOG: ReentrantLock<Log> = ReentrantLock::new(Log { data: RefCell::new(String::new()) });\n\npub fn with_log<R>(f: impl FnOnce(&Log) -> R) -> R {\n    let log = LOG.lock();\n    f(&*log)\n}\n\nwith_log(|log| {\n    log.append(\"Hello\");\n    with_log(|log| log.append(\" there!\"));\n});\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(reentrant_lock)%5D%0A%0Afn+main()+%7B%0A++++use+std::cell::RefCell;%0A++++use+std::sync::ReentrantLock;%0A++++%0A++++pub+struct+Log+%7B%0A++++++++data:+RefCell%3CString%3E,%0A++++%7D%0A++++%0A++++impl+Log+%7B%0A++++++++pub+fn+append(%26self,+msg:+%26str)+%7B%0A++++++++++++self.data.borrow_mut().push_str(msg);%0A++++++++%7D%0A++++%7D%0A++++%0A++++static+LOG:+ReentrantLock%3CLog%3E+=+ReentrantLock::new(Log+%7B+data:+RefCell::new(String::new())+%7D);%0A++++%0A++++pub+fn+with_log%3CR%3E(f:+impl+FnOnce(%26Log)+-%3E+R)+-%3E+R+%7B%0A++++++++let+log+=+LOG.lock();%0A++++++++f(%26*log)%0A++++%7D%0A++++%0A++++with_log(%7Clog%7C+%7B%0A++++++++log.append(%22Hello%22);%0A++++++++with_log(%7Clog%7C+log.append(%22+there!%22));%0A++++%7D);%0A%7D&version=nightly&edition=2021)\n\n[source](about:blank/src/std/sync/reentrant_lock.rs.html#123-158)[§](#impl-ReentrantLock%3CT%3E)\n\n[source](about:blank/src/std/sync/reentrant_lock.rs.html#134-141)\n\n🔬This is a nightly-only experimental API. (`reentrant_lock` [#121440](https://github.com/rust-lang/rust/issues/121440))\n\nCreates a new re-entrant lock in an unlocked state ready for use.\n\n##### [§](#examples-1)Examples\n\n```\n#![feature(reentrant_lock)]\nuse std::sync::ReentrantLock;\n\nlet lock = ReentrantLock::new(0);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(reentrant_lock)%5D%0Afn+main()+%7B%0A++++use+std::sync::ReentrantLock;%0A++++%0A++++let+lock+=+ReentrantLock::new(0);%0A%7D&version=nightly&edition=2021)\n\n[source](about:blank/src/std/sync/reentrant_lock.rs.html#155-157)\n\n🔬This is a nightly-only experimental API. (`reentrant_lock` [#121440](https://github.com/rust-lang/rust/issues/121440))\n\nConsumes this lock, returning the underlying data.\n\n##### [§](#examples-2)Examples\n\n```\n#![feature(reentrant_lock)]\n\nuse std::sync::ReentrantLock;\n\nlet lock = ReentrantLock::new(0);\nassert_eq!(lock.into_inner(), 0);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(reentrant_lock)%5D%0A%0Afn+main()+%7B%0A++++use+std::sync::ReentrantLock;%0A++++%0A++++let+lock+=+ReentrantLock::new(0);%0A++++assert_eq!(lock.into_inner(),+0);%0A%7D&version=nightly&edition=2021)\n\n[source](about:blank/src/std/sync/reentrant_lock.rs.html#161-250)[§](#impl-ReentrantLock%3CT%3E-1)\n\n[source](about:blank/src/std/sync/reentrant_lock.rs.html#186-200)\n\n🔬This is a nightly-only experimental API. (`reentrant_lock` [#121440](https://github.com/rust-lang/rust/issues/121440))\n\nAcquires the lock, blocking the current thread until it is able to do so.\n\nThis function will block the caller until it is available to acquire the lock. Upon returning, the thread is the only thread with the lock held. When the thread calling this method already holds the lock, the call succeeds without blocking.\n\n##### [§](#examples-3)Examples\n\n```\n#![feature(reentrant_lock)]\nuse std::cell::Cell;\nuse std::sync::{Arc, ReentrantLock};\nuse std::thread;\n\nlet lock = Arc::new(ReentrantLock::new(Cell::new(0)));\nlet c_lock = Arc::clone(&lock);\n\nthread::spawn(move || {\n    c_lock.lock().set(10);\n}).join().expect(\"thread::spawn failed\");\nassert_eq!(lock.lock().get(), 10);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(reentrant_lock)%5D%0Afn+main()+%7B%0A++++use+std::cell::Cell;%0A++++use+std::sync::%7BArc,+ReentrantLock%7D;%0A++++use+std::thread;%0A++++%0A++++let+lock+=+Arc::new(ReentrantLock::new(Cell::new(0)));%0A++++let+c_lock+=+Arc::clone(%26lock);%0A++++%0A++++thread::spawn(move+%7C%7C+%7B%0A++++++++c_lock.lock().set(10);%0A++++%7D).join().expect(%22thread::spawn+failed%22);%0A++++assert_eq!(lock.lock().get(),+10);%0A%7D&version=nightly&edition=2021)\n\n[source](about:blank/src/std/sync/reentrant_lock.rs.html#218-220)\n\n🔬This is a nightly-only experimental API. (`reentrant_lock` [#121440](https://github.com/rust-lang/rust/issues/121440))\n\nReturns a mutable reference to the underlying data.\n\nSince this call borrows the `ReentrantLock` mutably, no actual locking needs to take place – the mutable borrow statically guarantees no locks exist.\n\n##### [§](#examples-4)Examples\n\n```\n#![feature(reentrant_lock)]\nuse std::sync::ReentrantLock;\n\nlet mut lock = ReentrantLock::new(0);\n*lock.get_mut() = 10;\nassert_eq!(*lock.lock(), 10);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(reentrant_lock)%5D%0Afn+main()+%7B%0A++++use+std::sync::ReentrantLock;%0A++++%0A++++let+mut+lock+=+ReentrantLock::new(0);%0A++++*lock.get_mut()+=+10;%0A++++assert_eq!(*lock.lock(),+10);%0A%7D&version=nightly&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A re-entrant mutual exclusion lock\"><title>ReentrantLock in std::sync - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">ReentrantLock</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">ReentrantLock</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.get_mut\">get_mut</a></li><li><a href=\"#method.into_inner\">into_inner</a></li><li><a href=\"#method.lock\">lock</a></li><li><a href=\"#method.new\">new</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-Debug-for-ReentrantLock%3CT%3E\">Debug</a></li><li><a href=\"#impl-Default-for-ReentrantLock%3CT%3E\">Default</a></li><li><a href=\"#impl-From%3CT%3E-for-ReentrantLock%3CT%3E\">From&lt;T&gt;</a></li><li><a href=\"#impl-RefUnwindSafe-for-ReentrantLock%3CT%3E\">RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-ReentrantLock%3CT%3E\">Send</a></li><li><a href=\"#impl-Sync-for-ReentrantLock%3CT%3E\">Sync</a></li><li><a href=\"#impl-UnwindSafe-for-ReentrantLock%3CT%3E\">UnwindSafe</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-ReentrantLock%3CT%3E\">!Freeze</a></li><li><a href=\"#impl-Unpin-for-ReentrantLock%3CT%3E\">Unpin</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3C!%3E-for-T\">From&lt;!&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::sync</a></h2><h3><a href=\"index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"atomic/index.html\">atomic</a></li><li><a href=\"mpsc/index.html\">mpsc</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Arc.html\">Arc</a></li><li><a href=\"struct.Barrier.html\">Barrier</a></li><li><a href=\"struct.BarrierWaitResult.html\">BarrierWaitResult</a></li><li><a href=\"struct.Condvar.html\">Condvar</a></li><li><a href=\"struct.Exclusive.html\">Exclusive</a></li><li><a href=\"struct.LazyLock.html\">LazyLock</a></li><li><a href=\"struct.MappedMutexGuard.html\">MappedMutexGuard</a></li><li><a href=\"struct.MappedRwLockReadGuard.html\">MappedRwLockReadGuard</a></li><li><a href=\"struct.MappedRwLockWriteGuard.html\">MappedRwLockWriteGuard</a></li><li><a href=\"struct.Mutex.html\">Mutex</a></li><li><a href=\"struct.MutexGuard.html\">MutexGuard</a></li><li><a href=\"struct.Once.html\">Once</a></li><li><a href=\"struct.OnceLock.html\">OnceLock</a></li><li><a href=\"struct.OnceState.html\">OnceState</a></li><li><a href=\"struct.PoisonError.html\">PoisonError</a></li><li><a href=\"struct.ReentrantLock.html\">ReentrantLock</a></li><li><a href=\"struct.ReentrantLockGuard.html\">ReentrantLockGuard</a></li><li><a href=\"struct.RwLock.html\">RwLock</a></li><li><a href=\"struct.RwLockReadGuard.html\">RwLockReadGuard</a></li><li><a href=\"struct.RwLockWriteGuard.html\">RwLockWriteGuard</a></li><li><a href=\"struct.WaitTimeoutResult.html\">WaitTimeoutResult</a></li><li><a href=\"struct.Weak.html\">Weak</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.TryLockError.html\">TryLockError</a></li></ul><h3><a href=\"index.html#constants\">Constants</a></h3><ul class=\"block constant\"><li><a href=\"constant.ONCE_INIT.html\">ONCE_INIT</a></li></ul><h3><a href=\"index.html#types\">Type Aliases</a></h3><ul class=\"block type\"><li><a href=\"type.LockResult.html\">LockResult</a></li><li><a href=\"type.TryLockResult.html\">TryLockResult</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">sync</a>::<wbr><a class=\"struct\" href=\"#\">ReentrantLock</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><a class=\"src\" href=\"../../src/std/sync/reentrant_lock.rs.html#76-81\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct ReentrantLock&lt;T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>&gt; { <span class=\"comment\">/* private fields */</span> }</code></pre><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>reentrant_lock</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/121440\">#121440</a>)</span></div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A re-entrant mutual exclusion lock</p>\n<p>This lock will block <em>other</em> threads waiting for the lock to become\navailable. The thread which has already locked the mutex can lock it\nmultiple times without blocking, preventing a common source of deadlocks.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<p>Allow recursively calling a function needing synchronization from within\na callback (this is how <a href=\"../io/struct.StdoutLock.html\" title=\"struct std::io::StdoutLock\"><code>StdoutLock</code></a> is currently\nimplemented):</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(reentrant_lock)]\n\n</span><span class=\"kw\">use </span>std::cell::RefCell;\n<span class=\"kw\">use </span>std::sync::ReentrantLock;\n\n<span class=\"kw\">pub struct </span>Log {\n    data: RefCell&lt;String&gt;,\n}\n\n<span class=\"kw\">impl </span>Log {\n    <span class=\"kw\">pub fn </span>append(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, msg: <span class=\"kw-2\">&amp;</span>str) {\n        <span class=\"self\">self</span>.data.borrow_mut().push_str(msg);\n    }\n}\n\n<span class=\"kw\">static </span>LOG: ReentrantLock&lt;Log&gt; = ReentrantLock::new(Log { data: RefCell::new(String::new()) });\n\n<span class=\"kw\">pub fn </span>with_log&lt;R&gt;(f: <span class=\"kw\">impl </span>FnOnce(<span class=\"kw-2\">&amp;</span>Log) -&gt; R) -&gt; R {\n    <span class=\"kw\">let </span>log = LOG.lock();\n    f(<span class=\"kw-2\">&amp;*</span>log)\n}\n\nwith_log(|log| {\n    log.append(<span class=\"string\">\"Hello\"</span>);\n    with_log(|log| log.append(<span class=\"string\">\" there!\"</span>));\n});</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(reentrant_lock)%5D%0A%0Afn+main()+%7B%0A++++use+std::cell::RefCell;%0A++++use+std::sync::ReentrantLock;%0A++++%0A++++pub+struct+Log+%7B%0A++++++++data:+RefCell%3CString%3E,%0A++++%7D%0A++++%0A++++impl+Log+%7B%0A++++++++pub+fn+append(%26self,+msg:+%26str)+%7B%0A++++++++++++self.data.borrow_mut().push_str(msg);%0A++++++++%7D%0A++++%7D%0A++++%0A++++static+LOG:+ReentrantLock%3CLog%3E+=+ReentrantLock::new(Log+%7B+data:+RefCell::new(String::new())+%7D);%0A++++%0A++++pub+fn+with_log%3CR%3E(f:+impl+FnOnce(%26Log)+-%3E+R)+-%3E+R+%7B%0A++++++++let+log+=+LOG.lock();%0A++++++++f(%26*log)%0A++++%7D%0A++++%0A++++with_log(%7Clog%7C+%7B%0A++++++++log.append(%22Hello%22);%0A++++++++with_log(%7Clog%7C+log.append(%22+there!%22));%0A++++%7D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ReentrantLock%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/sync/reentrant_lock.rs.html#123-158\">source</a><a href=\"#impl-ReentrantLock%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"struct.ReentrantLock.html\" title=\"struct std::sync::ReentrantLock\">ReentrantLock</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"../../src/std/sync/reentrant_lock.rs.html#134-141\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.new\" class=\"fn\">new</a>(t: T) -&gt; <a class=\"struct\" href=\"struct.ReentrantLock.html\" title=\"struct std::sync::ReentrantLock\">ReentrantLock</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>reentrant_lock</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/121440\">#121440</a>)</span></div></span></summary><div class=\"docblock\"><p>Creates a new re-entrant lock in an unlocked state ready for use.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(reentrant_lock)]\n</span><span class=\"kw\">use </span>std::sync::ReentrantLock;\n\n<span class=\"kw\">let </span>lock = ReentrantLock::new(<span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(reentrant_lock)%5D%0Afn+main()+%7B%0A++++use+std::sync::ReentrantLock;%0A++++%0A++++let+lock+=+ReentrantLock::new(0);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_inner\" class=\"method\"><a class=\"src rightside\" href=\"../../src/std/sync/reentrant_lock.rs.html#155-157\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.into_inner\" class=\"fn\">into_inner</a>(self) -&gt; T</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>reentrant_lock</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/121440\">#121440</a>)</span></div></span></summary><div class=\"docblock\"><p>Consumes this lock, returning the underlying data.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(reentrant_lock)]\n\n</span><span class=\"kw\">use </span>std::sync::ReentrantLock;\n\n<span class=\"kw\">let </span>lock = ReentrantLock::new(<span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(lock.into_inner(), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(reentrant_lock)%5D%0A%0Afn+main()+%7B%0A++++use+std::sync::ReentrantLock;%0A++++%0A++++let+lock+=+ReentrantLock::new(0);%0A++++assert_eq!(lock.into_inner(),+0);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ReentrantLock%3CT%3E-1\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/sync/reentrant_lock.rs.html#161-250\">source</a><a href=\"#impl-ReentrantLock%3CT%3E-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>&gt; <a class=\"struct\" href=\"struct.ReentrantLock.html\" title=\"struct std::sync::ReentrantLock\">ReentrantLock</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lock\" class=\"method\"><a class=\"src rightside\" href=\"../../src/std/sync/reentrant_lock.rs.html#186-200\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.lock\" class=\"fn\">lock</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.ReentrantLockGuard.html\" title=\"struct std::sync::ReentrantLockGuard\">ReentrantLockGuard</a>&lt;'_, T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>reentrant_lock</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/121440\">#121440</a>)</span></div></span></summary><div class=\"docblock\"><p>Acquires the lock, blocking the current thread until it is able to do\nso.</p>\n<p>This function will block the caller until it is available to acquire\nthe lock. Upon returning, the thread is the only thread with the lock\nheld. When the thread calling this method already holds the lock, the\ncall succeeds without blocking.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(reentrant_lock)]\n</span><span class=\"kw\">use </span>std::cell::Cell;\n<span class=\"kw\">use </span>std::sync::{Arc, ReentrantLock};\n<span class=\"kw\">use </span>std::thread;\n\n<span class=\"kw\">let </span>lock = Arc::new(ReentrantLock::new(Cell::new(<span class=\"number\">0</span>)));\n<span class=\"kw\">let </span>c_lock = Arc::clone(<span class=\"kw-2\">&amp;</span>lock);\n\nthread::spawn(<span class=\"kw\">move </span>|| {\n    c_lock.lock().set(<span class=\"number\">10</span>);\n}).join().expect(<span class=\"string\">\"thread::spawn failed\"</span>);\n<span class=\"macro\">assert_eq!</span>(lock.lock().get(), <span class=\"number\">10</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(reentrant_lock)%5D%0Afn+main()+%7B%0A++++use+std::cell::Cell;%0A++++use+std::sync::%7BArc,+ReentrantLock%7D;%0A++++use+std::thread;%0A++++%0A++++let+lock+=+Arc::new(ReentrantLock::new(Cell::new(0)));%0A++++let+c_lock+=+Arc::clone(%26lock);%0A++++%0A++++thread::spawn(move+%7C%7C+%7B%0A++++++++c_lock.lock().set(10);%0A++++%7D).join().expect(%22thread::spawn+failed%22);%0A++++assert_eq!(lock.lock().get(),+10);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_mut\" class=\"method\"><a class=\"src rightside\" href=\"../../src/std/sync/reentrant_lock.rs.html#218-220\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.get_mut\" class=\"fn\">get_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>reentrant_lock</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/121440\">#121440</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns a mutable reference to the underlying data.</p>\n<p>Since this call borrows the <code>ReentrantLock</code> mutably, no actual locking\nneeds to take place – the mutable borrow statically guarantees no locks\nexist.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(reentrant_lock)]\n</span><span class=\"kw\">use </span>std::sync::ReentrantLock;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>lock = ReentrantLock::new(<span class=\"number\">0</span>);\n<span class=\"kw-2\">*</span>lock.get_mut() = <span class=\"number\">10</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>lock.lock(), <span class=\"number\">10</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(reentrant_lock)%5D%0Afn+main()+%7B%0A++++use+std::sync::ReentrantLock;%0A++++%0A++++let+mut+lock+=+ReentrantLock::new(0);%0A++++*lock.get_mut()+=+10;%0A++++assert_eq!(*lock.lock(),+10);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-ReentrantLock%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/sync/reentrant_lock.rs.html#253-262\">source</a><a href=\"#impl-Debug-for-ReentrantLock%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.ReentrantLock.html\" title=\"struct std::sync::ReentrantLock\">ReentrantLock</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/sync/reentrant_lock.rs.html#254-261\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../fmt/type.Result.html\" title=\"type std::fmt::Result\">Result</a></h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-ReentrantLock%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/sync/reentrant_lock.rs.html#265-269\">source</a><a href=\"#impl-Default-for-ReentrantLock%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>&gt; <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"struct\" href=\"struct.ReentrantLock.html\" title=\"struct std::sync::ReentrantLock\">ReentrantLock</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/sync/reentrant_lock.rs.html#266-268\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; Self</h4></section></summary><div class=\"docblock\">Returns the “default value” for a type. <a href=\"../default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CT%3E-for-ReentrantLock%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/sync/reentrant_lock.rs.html#272-276\">source</a><a href=\"#impl-From%3CT%3E-for-ReentrantLock%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for <a class=\"struct\" href=\"struct.ReentrantLock.html\" title=\"struct std::sync::ReentrantLock\">ReentrantLock</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/sync/reentrant_lock.rs.html#273-275\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; Self</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><section id=\"impl-RefUnwindSafe-for-ReentrantLock%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/sync/reentrant_lock.rs.html#92\">source</a><a href=\"#impl-RefUnwindSafe-for-ReentrantLock%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.ReentrantLock.html\" title=\"struct std::sync::ReentrantLock\">ReentrantLock</a>&lt;T&gt;</h3></section><section id=\"impl-Send-for-ReentrantLock%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/sync/reentrant_lock.rs.html#84\">source</a><a href=\"#impl-Send-for-ReentrantLock%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.ReentrantLock.html\" title=\"struct std::sync::ReentrantLock\">ReentrantLock</a>&lt;T&gt;</h3></section><section id=\"impl-Sync-for-ReentrantLock%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/sync/reentrant_lock.rs.html#86\">source</a><a href=\"#impl-Sync-for-ReentrantLock%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.ReentrantLock.html\" title=\"struct std::sync::ReentrantLock\">ReentrantLock</a>&lt;T&gt;</h3></section><section id=\"impl-UnwindSafe-for-ReentrantLock%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/sync/reentrant_lock.rs.html#90\">source</a><a href=\"#impl-UnwindSafe-for-ReentrantLock%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.ReentrantLock.html\" title=\"struct std::sync::ReentrantLock\">ReentrantLock</a>&lt;T&gt;</h3></section></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-ReentrantLock%3CT%3E\" class=\"impl\"><a href=\"#impl-Freeze-for-ReentrantLock%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; !<a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.ReentrantLock.html\" title=\"struct std::sync::ReentrantLock\">ReentrantLock</a>&lt;T&gt;</h3></section><section id=\"impl-Unpin-for-ReentrantLock%3CT%3E\" class=\"impl\"><a href=\"#impl-Unpin-for-ReentrantLock%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.ReentrantLock.html\" title=\"struct std::sync::ReentrantLock\">ReentrantLock</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3C!%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#782\">source</a><a href=\"#impl-From%3C!%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"../primitive.never.html\">!</a>&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#783\">source</a><a href=\"#method.from-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: <a class=\"primitive\" href=\"../primitive.never.html\">!</a>) -&gt; T</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:14:47.918Z"
}