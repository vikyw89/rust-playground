{
	"title": "ExitCode in std::process - Rust",
	"url": "https://doc.rust-lang.org/stable/std/process/struct.ExitCode.html",
	"markdown": "# ExitCode in std::process - Rust\n\n```\npub struct ExitCode(/* private fields */);\n```\n\nExpand description\n\nThis type represents the status code the current process can return to its parent under normal termination.\n\n`ExitCode` is intended to be consumed only by the standard library (via [`Termination::report()`](about:blank/trait.Termination.html#tymethod.report \"method std::process::Termination::report\")), and intentionally does not provide accessors like `PartialEq`, `Eq`, or `Hash`. Instead the standard library provides the canonical `SUCCESS` and `FAILURE` exit codes as well as `From<u8> for ExitCode` for constructing other arbitrary exit codes.\n\n## [§](#portability)Portability\n\nNumeric values used in this type don’t have portable meanings, and different platforms may mask different amounts of them.\n\nFor the platform’s canonical successful and unsuccessful codes, see the [`SUCCESS`](about:blank/struct.ExitCode.html#associatedconstant.SUCCESS \"associated constant std::process::ExitCode::SUCCESS\") and [`FAILURE`](about:blank/struct.ExitCode.html#associatedconstant.FAILURE \"associated constant std::process::ExitCode::FAILURE\") associated items.\n\n## [§](#differences-from-exitstatus)Differences from `ExitStatus`\n\n`ExitCode` is intended for terminating the currently running process, via the `Termination` trait, in contrast to [`ExitStatus`](struct.ExitStatus.html \"struct std::process::ExitStatus\"), which represents the termination of a child process. These APIs are separate due to platform compatibility differences and their expected usage; it is not generally possible to exactly reproduce an `ExitStatus` from a child for the current process after the fact.\n\n## [§](#examples)Examples\n\n`ExitCode` can be returned from the `main` function of a crate, as it implements [`Termination`](trait.Termination.html \"trait std::process::Termination\"):\n\n```\nuse std::process::ExitCode;\n\nfn main() -> ExitCode {\n    if !check_foo() {\n        return ExitCode::from(42);\n    }\n\n    ExitCode::SUCCESS\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::process::ExitCode;%0Afn+check_foo()+-%3E+bool+%7B+true+%7D%0A%0Afn+main()+-%3E+ExitCode+%7B%0A++++if+!check_foo()+%7B%0A++++++++return+ExitCode::from(42);%0A++++%7D%0A%0A++++ExitCode::SUCCESS%0A%7D&edition=2021)\n\n1.61.0 · [source](about:blank/src/std/process.rs.html#1972-2031)[§](#impl-ExitCode)\n\n1.61.0 · [source](about:blank/src/std/process.rs.html#1979)\n\nThe canonical `ExitCode` for successful termination on this platform.\n\nNote that a `()`\\-returning `main` implicitly results in a successful termination, so there’s no need to return this from `main` unless you’re also returning other possible codes.\n\n1.61.0 · [source](about:blank/src/std/process.rs.html#1987)\n\nThe canonical `ExitCode` for unsuccessful termination on this platform.\n\nIf you’re only returning this and `SUCCESS` from `main`, consider instead returning `Err(_)` and `Ok(())` respectively, which will return the same codes (but will also `eprintln!` the error).\n\n[source](about:blank/src/std/process.rs.html#2028-2030)\n\n🔬This is a nightly-only experimental API. (`exitcode_exit_method` [#97100](https://github.com/rust-lang/rust/issues/97100))\n\nExit the current process with the given `ExitCode`.\n\nNote that this has the same caveats as [`process::exit()`](fn.exit.html \"fn std::process::exit\"), namely that this function terminates the process immediately, so no destructors on the current stack or any other thread’s stack will be run. If a clean shutdown is needed, it is recommended to simply return this ExitCode from the `main` function, as demonstrated in the [type documentation](#examples).\n\n##### [§](#differences-from-processexit)Differences from `process::exit()`\n\n`process::exit()` accepts any `i32` value as the exit code for the process; however, there are platforms that only use a subset of that value (see [`process::exit` platform-specific behavior](about:blank/fn.exit.html#platform-specific-behavior \"fn std::process::exit\")). `ExitCode` exists because of this; only `ExitCode`s that are supported by a majority of our platforms can be created, so those problems don’t exist (as much) with this method.\n\n##### [§](#examples-1)Examples\n\n```\n#![feature(exitcode_exit_method)]\n// there's no way to gracefully recover from an UhOhError, so we just\n// print a message and exit\nfn handle_unrecoverable_error(err: UhOhError) -> ! {\n    eprintln!(\"UH OH! {err}\");\n    let code = match err {\n        UhOhError::GenericProblem => ExitCode::FAILURE,\n        UhOhError::Specific => ExitCode::from(3),\n        UhOhError::WithCode { exit_code, .. } => exit_code,\n    };\n    code.exit_process()\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(exitcode_exit_method)%5D%0Afn+main()+%7B%0A++++use+std::process::ExitCode;%0A++++use+std::fmt;%0A++++enum+UhOhError+%7B+GenericProblem,+Specific,+WithCode+%7B+exit_code:+ExitCode,+_x:+()+%7D+%7D%0A++++impl+fmt::Display+for+UhOhError+%7B%0A++++++++fn+fmt(%26self,+_:+%26mut+fmt::Formatter%3C%27_%3E)+-%3E+fmt::Result+%7B+unimplemented!()+%7D%0A++++%7D%0A++++//+there%27s+no+way+to+gracefully+recover+from+an+UhOhError,+so+we+just%0A++++//+print+a+message+and+exit%0A++++fn+handle_unrecoverable_error(err:+UhOhError)+-%3E+!+%7B%0A++++++++eprintln!(%22UH+OH!+%7Berr%7D%22);%0A++++++++let+code+=+match+err+%7B%0A++++++++++++UhOhError::GenericProblem+=%3E+ExitCode::FAILURE,%0A++++++++++++UhOhError::Specific+=%3E+ExitCode::from(3),%0A++++++++++++UhOhError::WithCode+%7B+exit_code,+..+%7D+=%3E+exit_code,%0A++++++++%7D;%0A++++++++code.exit_process()%0A++++%7D%0A%7D&version=nightly&edition=2021)\n\n1.61.0 · [source](about:blank/src/std/process.rs.html#1963)[§](#impl-Clone-for-ExitCode)\n\n1.61.0 · [source](about:blank/src/std/process.rs.html#1963)[§](#impl-Debug-for-ExitCode)\n\n1.75.0 · [source](about:blank/src/std/process.rs.html#2055-2059)[§](#impl-Default-for-ExitCode)\n\n[source](about:blank/src/std/os/windows/process.rs.html#433-437)[§](#impl-ExitCodeExt-for-ExitCode)\n\nAvailable on **Windows** only.\n\n[source](about:blank/src/std/os/windows/process.rs.html#434-436)[§](#method.from_raw)\n\n🔬This is a nightly-only experimental API. (`windows_process_exit_code_from` [#111688](https://github.com/rust-lang/rust/issues/111688))\n\nCreates a new `ExitCode` from the raw underlying `u32` return value of a process. [Read more](about:blank/os/windows/process/trait.ExitCodeExt.html#tymethod.from_raw)\n\n1.61.0 · [source](about:blank/src/std/process.rs.html#2062-2067)[§](#impl-From%3Cu8%3E-for-ExitCode)\n\n[source](about:blank/src/std/process.rs.html#2064-2066)[§](#method.from)\n\nConstruct an `ExitCode` from an arbitrary u8 value.\n\n1.61.0 · [source](about:blank/src/std/process.rs.html#2441-2446)[§](#impl-Termination-for-ExitCode)\n\n[source](about:blank/src/std/process.rs.html#2443-2445)[§](#method.report)\n\nIs called to get the representation of the value as status code. This status code is returned to the operating system.\n\n1.61.0 · [source](about:blank/src/std/process.rs.html#1963)[§](#impl-Copy-for-ExitCode)\n\n[§](#impl-Freeze-for-ExitCode)\n\n[§](#impl-RefUnwindSafe-for-ExitCode)\n\n[§](#impl-Send-for-ExitCode)\n\n[§](#impl-Sync-for-ExitCode)\n\n[§](#impl-Unpin-for-ExitCode)\n\n[§](#impl-UnwindSafe-for-ExitCode)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[§](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[§](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[§](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[§](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[§](#method.from-1)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[§](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[§](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85)[§](#impl-ToOwned-for-T)\n\n[§](#associatedtype.Owned)\n\nThe resulting type after obtaining ownership.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88)[§](#method.to_owned)\n\nCreates owned data from borrowed data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#tymethod.to_owned)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92)[§](#method.clone_into)\n\nUses borrowed data to replace owned data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#method.clone_into)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[§](#impl-TryFrom%3CU%3E-for-T)\n\n[§](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[§](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[§](#impl-TryInto%3CU%3E-for-T)\n\n[§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[§](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"This type represents the status code the current process can return to its parent under normal termination.\"><title>ExitCode in std::process - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">ExitCode</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">ExitCode</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Associated Constants</a></h3><ul class=\"block associatedconstant\"><li><a href=\"#associatedconstant.FAILURE\">FAILURE</a></li><li><a href=\"#associatedconstant.SUCCESS\">SUCCESS</a></li></ul><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.exit_process\">exit_process</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-Clone-for-ExitCode\">Clone</a></li><li><a href=\"#impl-Copy-for-ExitCode\">Copy</a></li><li><a href=\"#impl-Debug-for-ExitCode\">Debug</a></li><li><a href=\"#impl-Default-for-ExitCode\">Default</a></li><li><a href=\"#impl-ExitCodeExt-for-ExitCode\">ExitCodeExt</a></li><li><a href=\"#impl-From%3Cu8%3E-for-ExitCode\">From&lt;u8&gt;</a></li><li><a href=\"#impl-Termination-for-ExitCode\">Termination</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-ExitCode\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-ExitCode\">RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-ExitCode\">Send</a></li><li><a href=\"#impl-Sync-for-ExitCode\">Sync</a></li><li><a href=\"#impl-Unpin-for-ExitCode\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-ExitCode\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-ToOwned-for-T\">ToOwned</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::process</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Child.html\">Child</a></li><li><a href=\"struct.ChildStderr.html\">ChildStderr</a></li><li><a href=\"struct.ChildStdin.html\">ChildStdin</a></li><li><a href=\"struct.ChildStdout.html\">ChildStdout</a></li><li><a href=\"struct.Command.html\">Command</a></li><li><a href=\"struct.CommandArgs.html\">CommandArgs</a></li><li><a href=\"struct.CommandEnvs.html\">CommandEnvs</a></li><li><a href=\"struct.ExitCode.html\">ExitCode</a></li><li><a href=\"struct.ExitStatus.html\">ExitStatus</a></li><li><a href=\"struct.ExitStatusError.html\">ExitStatusError</a></li><li><a href=\"struct.Output.html\">Output</a></li><li><a href=\"struct.Stdio.html\">Stdio</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.Termination.html\">Termination</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.abort.html\">abort</a></li><li><a href=\"fn.exit.html\">exit</a></li><li><a href=\"fn.id.html\">id</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">process</a>::<wbr><a class=\"struct\" href=\"#\">ExitCode</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.61.0\">1.61.0</span> · <a class=\"src\" href=\"../../src/std/process.rs.html#1965\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct ExitCode(<span class=\"comment\">/* private fields */</span>);</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>This type represents the status code the current process can return\nto its parent under normal termination.</p>\n<p><code>ExitCode</code> is intended to be consumed only by the standard library (via\n<a href=\"trait.Termination.html#tymethod.report\" title=\"method std::process::Termination::report\"><code>Termination::report()</code></a>), and intentionally does not provide accessors like\n<code>PartialEq</code>, <code>Eq</code>, or <code>Hash</code>. Instead the standard library provides the\ncanonical <code>SUCCESS</code> and <code>FAILURE</code> exit codes as well as <code>From&lt;u8&gt; for ExitCode</code> for constructing other arbitrary exit codes.</p>\n<h2 id=\"portability\"><a class=\"doc-anchor\" href=\"#portability\">§</a>Portability</h2>\n<p>Numeric values used in this type don’t have portable meanings, and\ndifferent platforms may mask different amounts of them.</p>\n<p>For the platform’s canonical successful and unsuccessful codes, see\nthe <a href=\"struct.ExitCode.html#associatedconstant.SUCCESS\" title=\"associated constant std::process::ExitCode::SUCCESS\"><code>SUCCESS</code></a> and <a href=\"struct.ExitCode.html#associatedconstant.FAILURE\" title=\"associated constant std::process::ExitCode::FAILURE\"><code>FAILURE</code></a> associated items.</p>\n<h2 id=\"differences-from-exitstatus\"><a class=\"doc-anchor\" href=\"#differences-from-exitstatus\">§</a>Differences from <code>ExitStatus</code></h2>\n<p><code>ExitCode</code> is intended for terminating the currently running process, via\nthe <code>Termination</code> trait, in contrast to <a href=\"struct.ExitStatus.html\" title=\"struct std::process::ExitStatus\"><code>ExitStatus</code></a>, which represents the\ntermination of a child process. These APIs are separate due to platform\ncompatibility differences and their expected usage; it is not generally\npossible to exactly reproduce an <code>ExitStatus</code> from a child for the current\nprocess after the fact.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<p><code>ExitCode</code> can be returned from the <code>main</code> function of a crate, as it implements\n<a href=\"trait.Termination.html\" title=\"trait std::process::Termination\"><code>Termination</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::process::ExitCode;\n\n<span class=\"kw\">fn </span>main() -&gt; ExitCode {\n    <span class=\"kw\">if </span>!check_foo() {\n        <span class=\"kw\">return </span>ExitCode::from(<span class=\"number\">42</span>);\n    }\n\n    ExitCode::SUCCESS\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::process::ExitCode;%0Afn+check_foo()+-%3E+bool+%7B+true+%7D%0A%0Afn+main()+-%3E+ExitCode+%7B%0A++++if+!check_foo()+%7B%0A++++++++return+ExitCode::from(42);%0A++++%7D%0A%0A++++ExitCode::SUCCESS%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ExitCode\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.61.0\">1.61.0</span> · <a class=\"src\" href=\"../../src/std/process.rs.html#1972-2031\">source</a></span><a href=\"#impl-ExitCode\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"struct.ExitCode.html\" title=\"struct std::process::ExitCode\">ExitCode</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedconstant.SUCCESS\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.61.0\">1.61.0</span> · <a class=\"src\" href=\"../../src/std/process.rs.html#1979\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.SUCCESS\" class=\"constant\">SUCCESS</a>: <a class=\"struct\" href=\"struct.ExitCode.html\" title=\"struct std::process::ExitCode\">ExitCode</a> = _</h4></section></summary><div class=\"docblock\"><p>The canonical <code>ExitCode</code> for successful termination on this platform.</p>\n<p>Note that a <code>()</code>-returning <code>main</code> implicitly results in a successful\ntermination, so there’s no need to return this from <code>main</code> unless\nyou’re also returning other possible codes.</p>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedconstant.FAILURE\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.61.0\">1.61.0</span> · <a class=\"src\" href=\"../../src/std/process.rs.html#1987\">source</a></span><h4 class=\"code-header\">pub const <a href=\"#associatedconstant.FAILURE\" class=\"constant\">FAILURE</a>: <a class=\"struct\" href=\"struct.ExitCode.html\" title=\"struct std::process::ExitCode\">ExitCode</a> = _</h4></section></summary><div class=\"docblock\"><p>The canonical <code>ExitCode</code> for unsuccessful termination on this platform.</p>\n<p>If you’re only returning this and <code>SUCCESS</code> from <code>main</code>, consider\ninstead returning <code>Err(_)</code> and <code>Ok(())</code> respectively, which will\nreturn the same codes (but will also <code>eprintln!</code> the error).</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.exit_process\" class=\"method\"><a class=\"src rightside\" href=\"../../src/std/process.rs.html#2028-2030\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.exit_process\" class=\"fn\">exit_process</a>(self) -&gt; <a class=\"primitive\" href=\"../primitive.never.html\">!</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>exitcode_exit_method</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/97100\">#97100</a>)</span></div></span></summary><div class=\"docblock\"><p>Exit the current process with the given <code>ExitCode</code>.</p>\n<p>Note that this has the same caveats as <a href=\"fn.exit.html\" title=\"fn std::process::exit\"><code>process::exit()</code></a>, namely that this function\nterminates the process immediately, so no destructors on the current stack or any other\nthread’s stack will be run. If a clean shutdown is needed, it is recommended to simply\nreturn this ExitCode from the <code>main</code> function, as demonstrated in the <a href=\"#examples\">type\ndocumentation</a>.</p>\n<h5 id=\"differences-from-processexit\"><a class=\"doc-anchor\" href=\"#differences-from-processexit\">§</a>Differences from <code>process::exit()</code></h5>\n<p><code>process::exit()</code> accepts any <code>i32</code> value as the exit code for the process; however, there\nare platforms that only use a subset of that value (see <a href=\"fn.exit.html#platform-specific-behavior\" title=\"fn std::process::exit\"><code>process::exit</code> platform-specific\nbehavior</a>). <code>ExitCode</code> exists because of this; only\n<code>ExitCode</code>s that are supported by a majority of our platforms can be created, so those\nproblems don’t exist (as much) with this method.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(exitcode_exit_method)]\n</span><span class=\"comment\">// there's no way to gracefully recover from an UhOhError, so we just\n// print a message and exit\n</span><span class=\"kw\">fn </span>handle_unrecoverable_error(err: UhOhError) -&gt; ! {\n    <span class=\"macro\">eprintln!</span>(<span class=\"string\">\"UH OH! {err}\"</span>);\n    <span class=\"kw\">let </span>code = <span class=\"kw\">match </span>err {\n        UhOhError::GenericProblem =&gt; ExitCode::FAILURE,\n        UhOhError::Specific =&gt; ExitCode::from(<span class=\"number\">3</span>),\n        UhOhError::WithCode { exit_code, .. } =&gt; exit_code,\n    };\n    code.exit_process()\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(exitcode_exit_method)%5D%0Afn+main()+%7B%0A++++use+std::process::ExitCode;%0A++++use+std::fmt;%0A++++enum+UhOhError+%7B+GenericProblem,+Specific,+WithCode+%7B+exit_code:+ExitCode,+_x:+()+%7D+%7D%0A++++impl+fmt::Display+for+UhOhError+%7B%0A++++++++fn+fmt(%26self,+_:+%26mut+fmt::Formatter%3C'_%3E)+-%3E+fmt::Result+%7B+unimplemented!()+%7D%0A++++%7D%0A++++//+there's+no+way+to+gracefully+recover+from+an+UhOhError,+so+we+just%0A++++//+print+a+message+and+exit%0A++++fn+handle_unrecoverable_error(err:+UhOhError)+-%3E+!+%7B%0A++++++++eprintln!(%22UH+OH!+%7Berr%7D%22);%0A++++++++let+code+=+match+err+%7B%0A++++++++++++UhOhError::GenericProblem+=%3E+ExitCode::FAILURE,%0A++++++++++++UhOhError::Specific+=%3E+ExitCode::from(3),%0A++++++++++++UhOhError::WithCode+%7B+exit_code,+..+%7D+=%3E+exit_code,%0A++++++++%7D;%0A++++++++code.exit_process()%0A++++%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Clone-for-ExitCode\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.61.0\">1.61.0</span> · <a class=\"src\" href=\"../../src/std/process.rs.html#1963\">source</a></span><a href=\"#impl-Clone-for-ExitCode\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"struct.ExitCode.html\" title=\"struct std::process::ExitCode\">ExitCode</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/process.rs.html#1963\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.ExitCode.html\" title=\"struct std::process::ExitCode\">ExitCode</a></h4></section></summary><div class=\"docblock\">Returns a copy of the value. <a href=\"../clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class=\"docblock\">Performs copy-assignment from <code>source</code>. <a href=\"../clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-ExitCode\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.61.0\">1.61.0</span> · <a class=\"src\" href=\"../../src/std/process.rs.html#1963\">source</a></span><a href=\"#impl-Debug-for-ExitCode\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.ExitCode.html\" title=\"struct std::process::ExitCode\">ExitCode</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/process.rs.html#1963\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../fmt/type.Result.html\" title=\"type std::fmt::Result\">Result</a></h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-ExitCode\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> · <a class=\"src\" href=\"../../src/std/process.rs.html#2055-2059\">source</a></span><a href=\"#impl-Default-for-ExitCode\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"struct\" href=\"struct.ExitCode.html\" title=\"struct std::process::ExitCode\">ExitCode</a></h3></section></summary><div class=\"docblock\"><p>The default value is <a href=\"struct.ExitCode.html#associatedconstant.SUCCESS\" title=\"associated constant std::process::ExitCode::SUCCESS\"><code>ExitCode::SUCCESS</code></a></p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/process.rs.html#2056-2058\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; Self</h4></section></summary><div class=\"docblock\">Returns the “default value” for a type. <a href=\"../default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-ExitCodeExt-for-ExitCode\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/os/windows/process.rs.html#433-437\">source</a><a href=\"#impl-ExitCodeExt-for-ExitCode\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../os/windows/process/trait.ExitCodeExt.html\" title=\"trait std::os::windows::process::ExitCodeExt\">ExitCodeExt</a> for <a class=\"struct\" href=\"struct.ExitCode.html\" title=\"struct std::process::ExitCode\">ExitCode</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Windows</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_raw\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/windows/process.rs.html#434-436\">source</a><a href=\"#method.from_raw\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/windows/process/trait.ExitCodeExt.html#tymethod.from_raw\" class=\"fn\">from_raw</a>(raw: <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a>) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>windows_process_exit_code_from</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/111688\">#111688</a>)</span></div></span><div class=\"docblock\">Creates a new <code>ExitCode</code> from the raw underlying <code>u32</code> return value of\na process. <a href=\"../os/windows/process/trait.ExitCodeExt.html#tymethod.from_raw\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3Cu8%3E-for-ExitCode\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.61.0\">1.61.0</span> · <a class=\"src\" href=\"../../src/std/process.rs.html#2062-2067\">source</a></span><a href=\"#impl-From%3Cu8%3E-for-ExitCode\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt; for <a class=\"struct\" href=\"struct.ExitCode.html\" title=\"struct std::process::ExitCode\">ExitCode</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/process.rs.html#2064-2066\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(code: <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Construct an <code>ExitCode</code> from an arbitrary u8 value.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Termination-for-ExitCode\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.61.0\">1.61.0</span> · <a class=\"src\" href=\"../../src/std/process.rs.html#2441-2446\">source</a></span><a href=\"#impl-Termination-for-ExitCode\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Termination.html\" title=\"trait std::process::Termination\">Termination</a> for <a class=\"struct\" href=\"struct.ExitCode.html\" title=\"struct std::process::ExitCode\">ExitCode</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.report\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/process.rs.html#2443-2445\">source</a><a href=\"#method.report\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Termination.html#tymethod.report\" class=\"fn\">report</a>(self) -&gt; <a class=\"struct\" href=\"struct.ExitCode.html\" title=\"struct std::process::ExitCode\">ExitCode</a></h4></section></summary><div class=\"docblock\">Is called to get the representation of the value as status code.\nThis status code is returned to the operating system.</div></details></div></details><section id=\"impl-Copy-for-ExitCode\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.61.0\">1.61.0</span> · <a class=\"src\" href=\"../../src/std/process.rs.html#1963\">source</a></span><a href=\"#impl-Copy-for-ExitCode\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a> for <a class=\"struct\" href=\"struct.ExitCode.html\" title=\"struct std::process::ExitCode\">ExitCode</a></h3></section></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-ExitCode\" class=\"impl\"><a href=\"#impl-Freeze-for-ExitCode\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.ExitCode.html\" title=\"struct std::process::ExitCode\">ExitCode</a></h3></section><section id=\"impl-RefUnwindSafe-for-ExitCode\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-ExitCode\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.ExitCode.html\" title=\"struct std::process::ExitCode\">ExitCode</a></h3></section><section id=\"impl-Send-for-ExitCode\" class=\"impl\"><a href=\"#impl-Send-for-ExitCode\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.ExitCode.html\" title=\"struct std::process::ExitCode\">ExitCode</a></h3></section><section id=\"impl-Sync-for-ExitCode\" class=\"impl\"><a href=\"#impl-Sync-for-ExitCode\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.ExitCode.html\" title=\"struct std::process::ExitCode\">ExitCode</a></h3></section><section id=\"impl-Unpin-for-ExitCode\" class=\"impl\"><a href=\"#impl-Unpin-for-ExitCode\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.ExitCode.html\" title=\"struct std::process::ExitCode\">ExitCode</a></h3></section><section id=\"impl-UnwindSafe-for-ExitCode\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-ExitCode\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.ExitCode.html\" title=\"struct std::process::ExitCode\">ExitCode</a></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToOwned-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85\">source</a><a href=\"#impl-ToOwned-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.ToOwned.html\" title=\"trait std::borrow::ToOwned\">ToOwned</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Owned\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../borrow/trait.ToOwned.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = T</h4></section></summary><div class=\"docblock\">The resulting type after obtaining ownership.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88\">source</a><a href=\"#method.to_owned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\">Creates owned data from borrowed data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92\">source</a><a href=\"#method.clone_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#method.clone_into\" class=\"fn\">clone_into</a>(&amp;self, target: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>)</h4></section></summary><div class=\"docblock\">Uses borrowed data to replace owned data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#method.clone_into\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:12:38.823Z"
}