{
	"title": "args in std::env - Rust",
	"url": "https://doc.rust-lang.org/stable/std/env/fn.args.html",
	"markdown": "# args in std::env - Rust\n\n## Function [std](../index.html)::[env](index.html)::[args](#)\n\n1.0.0 · [source](about:blank/src/std/env.rs.html#833-835) ·\n\n```\npub fn args() -> Args ⓘ\n```\n\nExpand description\n\nReturns the arguments that this program was started with (normally passed via the command line).\n\nThe first element is traditionally the path of the executable, but it can be set to arbitrary text, and might not even exist. This means this property should not be relied upon for security purposes.\n\nOn Unix systems the shell usually expands unquoted arguments with glob patterns (such as `*` and `?`). On Windows this is not done, and such arguments are passed as-is.\n\nOn glibc Linux systems, arguments are retrieved by placing a function in `.init_array`. glibc passes `argc`, `argv`, and `envp` to functions in `.init_array`, as a non-standard extension. This allows `std::env::args` to work even in a `cdylib` or `staticlib`, as it does on macOS and Windows.\n\n## [§](#panics)Panics\n\nThe returned iterator will panic during iteration if any argument to the process is not valid Unicode. If this is not desired, use the [`args_os`](fn.args_os.html \"fn std::env::args_os\") function instead.\n\n## [§](#examples)Examples\n\n```\nuse std::env;\n\n// Prints each argument on a separate line\nfor argument in env::args() {\n    println!(\"{argument}\");\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::env;%0A++++%0A++++//+Prints+each+argument+on+a+separate+line%0A++++for+argument+in+env::args()+%7B%0A++++++++println!(%22%7Bargument%7D%22);%0A++++%7D%0A%7D&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Returns the arguments that this program was started with (normally passed via the command line).\"><title>args in std::env - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc fn\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h2><a href=\"index.html\">In std::env</a></h2><h3><a href=\"index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"consts/index.html\">consts</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Args.html\">Args</a></li><li><a href=\"struct.ArgsOs.html\">ArgsOs</a></li><li><a href=\"struct.JoinPathsError.html\">JoinPathsError</a></li><li><a href=\"struct.SplitPaths.html\">SplitPaths</a></li><li><a href=\"struct.Vars.html\">Vars</a></li><li><a href=\"struct.VarsOs.html\">VarsOs</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.VarError.html\">VarError</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.args.html\">args</a></li><li><a href=\"fn.args_os.html\">args_os</a></li><li><a href=\"fn.current_dir.html\">current_dir</a></li><li><a href=\"fn.current_exe.html\">current_exe</a></li><li><a href=\"fn.home_dir.html\">home_dir</a></li><li><a href=\"fn.join_paths.html\">join_paths</a></li><li><a href=\"fn.remove_var.html\">remove_var</a></li><li><a href=\"fn.set_current_dir.html\">set_current_dir</a></li><li><a href=\"fn.set_var.html\">set_var</a></li><li><a href=\"fn.split_paths.html\">split_paths</a></li><li><a href=\"fn.temp_dir.html\">temp_dir</a></li><li><a href=\"fn.var.html\">var</a></li><li><a href=\"fn.var_os.html\">var_os</a></li><li><a href=\"fn.vars.html\">vars</a></li><li><a href=\"fn.vars_os.html\">vars_os</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Function <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">env</a>::<wbr><a class=\"fn\" href=\"#\">args</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/env.rs.html#833-835\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub fn args() -&gt; <a class=\"struct\" href=\"struct.Args.html\" title=\"struct std::env::Args\">Args</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Args\">ⓘ</a></code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Returns the arguments that this program was started with (normally passed\nvia the command line).</p>\n<p>The first element is traditionally the path of the executable, but it can be\nset to arbitrary text, and might not even exist. This means this property should\nnot be relied upon for security purposes.</p>\n<p>On Unix systems the shell usually expands unquoted arguments with glob patterns\n(such as <code>*</code> and <code>?</code>). On Windows this is not done, and such arguments are\npassed as-is.</p>\n<p>On glibc Linux systems, arguments are retrieved by placing a function in <code>.init_array</code>.\nglibc passes <code>argc</code>, <code>argv</code>, and <code>envp</code> to functions in <code>.init_array</code>, as a non-standard\nextension. This allows <code>std::env::args</code> to work even in a <code>cdylib</code> or <code>staticlib</code>, as it\ndoes on macOS and Windows.</p>\n<h2 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h2>\n<p>The returned iterator will panic during iteration if any argument to the\nprocess is not valid Unicode. If this is not desired,\nuse the <a href=\"fn.args_os.html\" title=\"fn std::env::args_os\"><code>args_os</code></a> function instead.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::env;\n\n<span class=\"comment\">// Prints each argument on a separate line\n</span><span class=\"kw\">for </span>argument <span class=\"kw\">in </span>env::args() {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{argument}\"</span>);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::env;%0A++++%0A++++//+Prints+each+argument+on+a+separate+line%0A++++for+argument+in+env::args()+%7B%0A++++++++println!(%22%7Bargument%7D%22);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><script type=\"text/json\" id=\"notable-traits-data\">{\"Args\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"struct.Args.html\\\" title=\\\"struct std::env::Args\\\">Args</a></code></h3><pre><code><div class=\\\"where\\\">impl <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"struct.Args.html\\\" title=\\\"struct std::env::Args\\\">Args</a></div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"struct\\\" href=\\\"../string/struct.String.html\\\" title=\\\"struct std::string::String\\\">String</a>;</div>\"}</script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:22:56.868Z"
}