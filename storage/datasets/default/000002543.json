{
	"title": "needs_drop in std::mem - Rust",
	"url": "https://doc.rust-lang.org/stable/std/mem/fn.needs_drop.html",
	"markdown": "# needs\\_drop in std::mem - Rust\n\n## Function [std](../index.html)::[mem](index.html)::[needs\\_drop](#)\n\n1.21.0 (const: 1.36.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/mem/mod.rs.html#600) ·\n\n```\npub const fn needs_drop<T>() -> boolwhere\n    T: ?Sized,\n```\n\nExpand description\n\nReturns `true` if dropping values of type `T` matters.\n\nThis is purely an optimization hint, and may be implemented conservatively: it may return `true` for types that don’t actually need to be dropped. As such always returning `true` would be a valid implementation of this function. However if this function actually returns `false`, then you can be certain dropping `T` has no side effect.\n\nLow level implementations of things like collections, which need to manually drop their data, should use this function to avoid unnecessarily trying to drop all their contents when they are destroyed. This might not make a difference in release builds (where a loop that has no side-effects is easily detected and eliminated), but is often a big win for debug builds.\n\nNote that [`drop_in_place`](../ptr/fn.drop_in_place.html \"fn std::ptr::drop_in_place\") already performs this check, so if your workload can be reduced to some small number of [`drop_in_place`](../ptr/fn.drop_in_place.html \"fn std::ptr::drop_in_place\") calls, using this is unnecessary. In particular note that you can [`drop_in_place`](../ptr/fn.drop_in_place.html \"fn std::ptr::drop_in_place\") a slice, and that will do a single needs\\_drop check for all the values.\n\nTypes like Vec therefore just `drop_in_place(&mut self[..])` without using `needs_drop` explicitly. Types like [`HashMap`](../../std/collections/struct.HashMap.html), on the other hand, have to drop values one at a time and should use this API.\n\n## [§](#examples)Examples\n\nHere’s an example of how a collection might make use of `needs_drop`:\n\n```\nuse std::{mem, ptr};\n\npub struct MyCollection<T> {\n    /* ... */\n}\n\nimpl<T> Drop for MyCollection<T> {\n    fn drop(&mut self) {\n        unsafe {\n            // drop the data\n            if mem::needs_drop::<T>() {\n                for x in self.iter_mut() {\n                    ptr::drop_in_place(x);\n                }\n            }\n            self.free_buffer();\n        }\n    }\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::%7Bmem,+ptr%7D;%0A++++%0A++++pub+struct+MyCollection%3CT%3E+%7B%0A++++++data:+%5BT;+1%5D,%0A++++++++/*+...+*/%0A++++%7D%0A++++impl%3CT%3E+MyCollection%3CT%3E+%7B%0A++++++fn+iter_mut(%26mut+self)+-%3E+%26mut+%5BT%5D+%7B+%26mut+self.data+%7D%0A++++++fn+free_buffer(%26mut+self)+%7B%7D%0A++++%7D%0A++++%0A++++impl%3CT%3E+Drop+for+MyCollection%3CT%3E+%7B%0A++++++++fn+drop(%26mut+self)+%7B%0A++++++++++++unsafe+%7B%0A++++++++++++++++//+drop+the+data%0A++++++++++++++++if+mem::needs_drop::%3CT%3E()+%7B%0A++++++++++++++++++++for+x+in+self.iter_mut()+%7B%0A++++++++++++++++++++++++ptr::drop_in_place(x);%0A++++++++++++++++++++%7D%0A++++++++++++++++%7D%0A++++++++++++++++self.free_buffer();%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A%7D&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Returns `true` if dropping values of type `T` matters.\"><title>needs_drop in std::mem - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc fn\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h2><a href=\"index.html\">In std::mem</a></h2><h3><a href=\"index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"macro.offset_of.html\">offset_of</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Assume.html\">Assume</a></li><li><a href=\"struct.Discriminant.html\">Discriminant</a></li><li><a href=\"struct.ManuallyDrop.html\">ManuallyDrop</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.BikeshedIntrinsicFrom.html\">BikeshedIntrinsicFrom</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.align_of.html\">align_of</a></li><li><a href=\"fn.align_of_val.html\">align_of_val</a></li><li><a href=\"fn.align_of_val_raw.html\">align_of_val_raw</a></li><li><a href=\"fn.copy.html\">copy</a></li><li><a href=\"fn.discriminant.html\">discriminant</a></li><li><a href=\"fn.drop.html\">drop</a></li><li><a href=\"fn.forget.html\">forget</a></li><li><a href=\"fn.forget_unsized.html\">forget_unsized</a></li><li><a href=\"fn.min_align_of.html\">min_align_of</a></li><li><a href=\"fn.min_align_of_val.html\">min_align_of_val</a></li><li><a href=\"fn.needs_drop.html\">needs_drop</a></li><li><a href=\"fn.replace.html\">replace</a></li><li><a href=\"fn.size_of.html\">size_of</a></li><li><a href=\"fn.size_of_val.html\">size_of_val</a></li><li><a href=\"fn.size_of_val_raw.html\">size_of_val_raw</a></li><li><a href=\"fn.swap.html\">swap</a></li><li><a href=\"fn.take.html\">take</a></li><li><a href=\"fn.transmute.html\">transmute</a></li><li><a href=\"fn.transmute_copy.html\">transmute_copy</a></li><li><a href=\"fn.uninitialized.html\">uninitialized</a></li><li><a href=\"fn.variant_count.html\">variant_count</a></li><li><a href=\"fn.zeroed.html\">zeroed</a></li></ul><h3><a href=\"index.html#unions\">Unions</a></h3><ul class=\"block union\"><li><a href=\"union.MaybeUninit.html\">MaybeUninit</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Function <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">mem</a>::<wbr><a class=\"fn\" href=\"#\">needs_drop</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.21.0, const since 1.36.0\">1.21.0 (const: 1.36.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/mem/mod.rs.html#600\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub const fn needs_drop&lt;T&gt;() -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Returns <code>true</code> if dropping values of type <code>T</code> matters.</p>\n<p>This is purely an optimization hint, and may be implemented conservatively:\nit may return <code>true</code> for types that don’t actually need to be dropped.\nAs such always returning <code>true</code> would be a valid implementation of\nthis function. However if this function actually returns <code>false</code>, then you\ncan be certain dropping <code>T</code> has no side effect.</p>\n<p>Low level implementations of things like collections, which need to manually\ndrop their data, should use this function to avoid unnecessarily\ntrying to drop all their contents when they are destroyed. This might not\nmake a difference in release builds (where a loop that has no side-effects\nis easily detected and eliminated), but is often a big win for debug builds.</p>\n<p>Note that <a href=\"../ptr/fn.drop_in_place.html\" title=\"fn std::ptr::drop_in_place\"><code>drop_in_place</code></a> already performs this check, so if your workload\ncan be reduced to some small number of <a href=\"../ptr/fn.drop_in_place.html\" title=\"fn std::ptr::drop_in_place\"><code>drop_in_place</code></a> calls, using this is\nunnecessary. In particular note that you can <a href=\"../ptr/fn.drop_in_place.html\" title=\"fn std::ptr::drop_in_place\"><code>drop_in_place</code></a> a slice, and that\nwill do a single needs_drop check for all the values.</p>\n<p>Types like Vec therefore just <code>drop_in_place(&amp;mut self[..])</code> without using\n<code>needs_drop</code> explicitly. Types like <a href=\"../../std/collections/struct.HashMap.html\"><code>HashMap</code></a>, on the other hand, have to drop\nvalues one at a time and should use this API.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<p>Here’s an example of how a collection might make use of <code>needs_drop</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::{mem, ptr};\n\n<span class=\"kw\">pub struct </span>MyCollection&lt;T&gt; {\n    <span class=\"comment\">/* ... */\n</span>}\n\n<span class=\"kw\">impl</span>&lt;T&gt; Drop <span class=\"kw\">for </span>MyCollection&lt;T&gt; {\n    <span class=\"kw\">fn </span>drop(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) {\n        <span class=\"kw\">unsafe </span>{\n            <span class=\"comment\">// drop the data\n            </span><span class=\"kw\">if </span>mem::needs_drop::&lt;T&gt;() {\n                <span class=\"kw\">for </span>x <span class=\"kw\">in </span><span class=\"self\">self</span>.iter_mut() {\n                    ptr::drop_in_place(x);\n                }\n            }\n            <span class=\"self\">self</span>.free_buffer();\n        }\n    }\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::%7Bmem,+ptr%7D;%0A++++%0A++++pub+struct+MyCollection%3CT%3E+%7B%0A++++++data:+%5BT;+1%5D,%0A++++++++/*+...+*/%0A++++%7D%0A++++impl%3CT%3E+MyCollection%3CT%3E+%7B%0A++++++fn+iter_mut(%26mut+self)+-%3E+%26mut+%5BT%5D+%7B+%26mut+self.data+%7D%0A++++++fn+free_buffer(%26mut+self)+%7B%7D%0A++++%7D%0A++++%0A++++impl%3CT%3E+Drop+for+MyCollection%3CT%3E+%7B%0A++++++++fn+drop(%26mut+self)+%7B%0A++++++++++++unsafe+%7B%0A++++++++++++++++//+drop+the+data%0A++++++++++++++++if+mem::needs_drop::%3CT%3E()+%7B%0A++++++++++++++++++++for+x+in+self.iter_mut()+%7B%0A++++++++++++++++++++++++ptr::drop_in_place(x);%0A++++++++++++++++++++%7D%0A++++++++++++++++%7D%0A++++++++++++++++self.free_buffer();%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:23:57.372Z"
}