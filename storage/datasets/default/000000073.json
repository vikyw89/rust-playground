{
	"title": "RefCell<T> and the Interior Mutability Pattern - The Rust Programming Language",
	"url": "https://doc.rust-lang.org/stable/book/ch15-05-interior-mutability.html",
	"markdown": "# RefCell and the Interior Mutability Pattern\n\n_Interior mutability_ is a design pattern in Rust that allows you to mutate data even when there are immutable references to that data; normally, this action is disallowed by the borrowing rules. To mutate data, the pattern uses `unsafe` code inside a data structure to bend Rust’s usual rules that govern mutation and borrowing. Unsafe code indicates to the compiler that we’re checking the rules manually instead of relying on the compiler to check them for us; we will discuss unsafe code more in Chapter 19.\n\nWe can use types that use the interior mutability pattern only when we can ensure that the borrowing rules will be followed at runtime, even though the compiler can’t guarantee that. The `unsafe` code involved is then wrapped in a safe API, and the outer type is still immutable.\n\nLet’s explore this concept by looking at the `RefCell<T>` type that follows the interior mutability pattern.\n\n### [Enforcing Borrowing Rules at Runtime with `RefCell<T>`](#enforcing-borrowing-rules-at-runtime-with-refcellt)\n\nUnlike `Rc<T>`, the `RefCell<T>` type represents single ownership over the data it holds. So, what makes `RefCell<T>` different from a type like `Box<T>`? Recall the borrowing rules you learned in Chapter 4:\n\n-   At any given time, you can have _either_ (but not both) one mutable reference or any number of immutable references.\n-   References must always be valid.\n\nWith references and `Box<T>`, the borrowing rules’ invariants are enforced at compile time. With `RefCell<T>`, these invariants are enforced _at runtime_. With references, if you break these rules, you’ll get a compiler error. With `RefCell<T>`, if you break these rules, your program will panic and exit.\n\nThe advantages of checking the borrowing rules at compile time are that errors will be caught sooner in the development process, and there is no impact on runtime performance because all the analysis is completed beforehand. For those reasons, checking the borrowing rules at compile time is the best choice in the majority of cases, which is why this is Rust’s default.\n\nThe advantage of checking the borrowing rules at runtime instead is that certain memory-safe scenarios are then allowed, where they would’ve been disallowed by the compile-time checks. Static analysis, like the Rust compiler, is inherently conservative. Some properties of code are impossible to detect by analyzing the code: the most famous example is the Halting Problem, which is beyond the scope of this book but is an interesting topic to research.\n\nBecause some analysis is impossible, if the Rust compiler can’t be sure the code complies with the ownership rules, it might reject a correct program; in this way, it’s conservative. If Rust accepted an incorrect program, users wouldn’t be able to trust in the guarantees Rust makes. However, if Rust rejects a correct program, the programmer will be inconvenienced, but nothing catastrophic can occur. The `RefCell<T>` type is useful when you’re sure your code follows the borrowing rules but the compiler is unable to understand and guarantee that.\n\nSimilar to `Rc<T>`, `RefCell<T>` is only for use in single-threaded scenarios and will give you a compile-time error if you try using it in a multithreaded context. We’ll talk about how to get the functionality of `RefCell<T>` in a multithreaded program in Chapter 16.\n\nHere is a recap of the reasons to choose `Box<T>`, `Rc<T>`, or `RefCell<T>`:\n\n-   `Rc<T>` enables multiple owners of the same data; `Box<T>` and `RefCell<T>` have single owners.\n-   `Box<T>` allows immutable or mutable borrows checked at compile time; `Rc<T>` allows only immutable borrows checked at compile time; `RefCell<T>` allows immutable or mutable borrows checked at runtime.\n-   Because `RefCell<T>` allows mutable borrows checked at runtime, you can mutate the value inside the `RefCell<T>` even when the `RefCell<T>` is immutable.\n\nMutating the value inside an immutable value is the _interior mutability_ pattern. Let’s look at a situation in which interior mutability is useful and examine how it’s possible.\n\n### [Interior Mutability: A Mutable Borrow to an Immutable Value](#interior-mutability-a-mutable-borrow-to-an-immutable-value)\n\nA consequence of the borrowing rules is that when you have an immutable value, you can’t borrow it mutably. For example, this code won’t compile:\n\n```rust\nfn main() {\n    let x = 5;\n    let y = &mut x;\n}\n```\n\nIf you tried to compile this code, you’d get the following error:\n\n```console\n$ cargo run\n   Compiling borrowing v0.1.0 (file:///projects/borrowing)\nerror[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n --> src/main.rs:3:13\n  |\n3 |     let y = &mut x;\n  |             ^^^^^^ cannot borrow as mutable\n  |\nhelp: consider changing this to be mutable\n  |\n2 |     let mut x = 5;\n  |         +++\n\nFor more information about this error, try `rustc --explain E0596`.\nerror: could not compile `borrowing` (bin \"borrowing\") due to 1 previous error\n\n```\n\nHowever, there are situations in which it would be useful for a value to mutate itself in its methods but appear immutable to other code. Code outside the value’s methods would not be able to mutate the value. Using `RefCell<T>` is one way to get the ability to have interior mutability, but `RefCell<T>` doesn’t get around the borrowing rules completely: the borrow checker in the compiler allows this interior mutability, and the borrowing rules are checked at runtime instead. If you violate the rules, you’ll get a `panic!` instead of a compiler error.\n\nLet’s work through a practical example where we can use `RefCell<T>` to mutate an immutable value and see why that is useful.\n\n#### [A Use Case for Interior Mutability: Mock Objects](#a-use-case-for-interior-mutability-mock-objects)\n\nSometimes during testing a programmer will use a type in place of another type, in order to observe particular behavior and assert it’s implemented correctly. This placeholder type is called a _test double_. Think of it in the sense of a “stunt double” in filmmaking, where a person steps in and substitutes for an actor to do a particular tricky scene. Test doubles stand in for other types when we’re running tests. _Mock objects_ are specific types of test doubles that record what happens during a test so you can assert that the correct actions took place.\n\nRust doesn’t have objects in the same sense as other languages have objects, and Rust doesn’t have mock object functionality built into the standard library as some other languages do. However, you can definitely create a struct that will serve the same purposes as a mock object.\n\nHere’s the scenario we’ll test: we’ll create a library that tracks a value against a maximum value and sends messages based on how close to the maximum value the current value is. This library could be used to keep track of a user’s quota for the number of API calls they’re allowed to make, for example.\n\nOur library will only provide the functionality of tracking how close to the maximum a value is and what the messages should be at what times. Applications that use our library will be expected to provide the mechanism for sending the messages: the application could put a message in the application, send an email, send a text message, or something else. The library doesn’t need to know that detail. All it needs is something that implements a trait we’ll provide called `Messenger`. Listing 15-20 shows the library code:\n\nFilename: src/lib.rs\n\n```rust\npub trait Messenger {\n    fn send(&self, msg: &str);\n}\n\npub struct LimitTracker<'a, T: Messenger> {\n    messenger: &'a T,\n    value: usize,\n    max: usize,\n}\n\nimpl<'a, T> LimitTracker<'a, T>\nwhere\n    T: Messenger,\n{\n    pub fn new(messenger: &'a T, max: usize) -> LimitTracker<'a, T> {\n        LimitTracker {\n            messenger,\n            value: 0,\n            max,\n        }\n    }\n\n    pub fn set_value(&mut self, value: usize) {\n        self.value = value;\n\n        let percentage_of_max = self.value as f64 / self.max as f64;\n\n        if percentage_of_max >= 1.0 {\n            self.messenger.send(\"Error: You are over your quota!\");\n        } else if percentage_of_max >= 0.9 {\n            self.messenger\n                .send(\"Urgent warning: You've used up over 90% of your quota!\");\n        } else if percentage_of_max >= 0.75 {\n            self.messenger\n                .send(\"Warning: You've used up over 75% of your quota!\");\n        }\n    }\n}\n```\n\nListing 15-20: A library to keep track of how close a value is to a maximum value and warn when the value is at certain levels\n\nOne important part of this code is that the `Messenger` trait has one method called `send` that takes an immutable reference to `self` and the text of the message. This trait is the interface our mock object needs to implement so that the mock can be used in the same way a real object is. The other important part is that we want to test the behavior of the `set_value` method on the `LimitTracker`. We can change what we pass in for the `value` parameter, but `set_value` doesn’t return anything for us to make assertions on. We want to be able to say that if we create a `LimitTracker` with something that implements the `Messenger` trait and a particular value for `max`, when we pass different numbers for `value`, the messenger is told to send the appropriate messages.\n\nWe need a mock object that, instead of sending an email or text message when we call `send`, will only keep track of the messages it’s told to send. We can create a new instance of the mock object, create a `LimitTracker` that uses the mock object, call the `set_value` method on `LimitTracker`, and then check that the mock object has the messages we expect. Listing 15-21 shows an attempt to implement a mock object to do just that, but the borrow checker won’t allow it:\n\nFilename: src/lib.rs\n\n```rust\npub trait Messenger {\n    fn send(&self, msg: &str);\n}\n\npub struct LimitTracker<'a, T: Messenger> {\n    messenger: &'a T,\n    value: usize,\n    max: usize,\n}\n\nimpl<'a, T> LimitTracker<'a, T>\nwhere\n    T: Messenger,\n{\n    pub fn new(messenger: &'a T, max: usize) -> LimitTracker<'a, T> {\n        LimitTracker {\n            messenger,\n            value: 0,\n            max,\n        }\n    }\n\n    pub fn set_value(&mut self, value: usize) {\n        self.value = value;\n\n        let percentage_of_max = self.value as f64 / self.max as f64;\n\n        if percentage_of_max >= 1.0 {\n            self.messenger.send(\"Error: You are over your quota!\");\n        } else if percentage_of_max >= 0.9 {\n            self.messenger\n                .send(\"Urgent warning: You've used up over 90% of your quota!\");\n        } else if percentage_of_max >= 0.75 {\n            self.messenger\n                .send(\"Warning: You've used up over 75% of your quota!\");\n        }\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    struct MockMessenger {\n        sent_messages: Vec<String>,\n    }\n\n    impl MockMessenger {\n        fn new() -> MockMessenger {\n            MockMessenger {\n                sent_messages: vec![],\n            }\n        }\n    }\n\n    impl Messenger for MockMessenger {\n        fn send(&self, message: &str) {\n            self.sent_messages.push(String::from(message));\n        }\n    }\n\n    #[test]\n    fn it_sends_an_over_75_percent_warning_message() {\n        let mock_messenger = MockMessenger::new();\n        let mut limit_tracker = LimitTracker::new(&mock_messenger, 100);\n\n        limit_tracker.set_value(80);\n\n        assert_eq!(mock_messenger.sent_messages.len(), 1);\n    }\n}\n```\n\nListing 15-21: An attempt to implement a `MockMessenger` that isn’t allowed by the borrow checker\n\nThis test code defines a `MockMessenger` struct that has a `sent_messages` field with a `Vec` of `String` values to keep track of the messages it’s told to send. We also define an associated function `new` to make it convenient to create new `MockMessenger` values that start with an empty list of messages. We then implement the `Messenger` trait for `MockMessenger` so we can give a `MockMessenger` to a `LimitTracker`. In the definition of the `send` method, we take the message passed in as a parameter and store it in the `MockMessenger` list of `sent_messages`.\n\nIn the test, we’re testing what happens when the `LimitTracker` is told to set `value` to something that is more than 75 percent of the `max` value. First, we create a new `MockMessenger`, which will start with an empty list of messages. Then we create a new `LimitTracker` and give it a reference to the new `MockMessenger` and a `max` value of 100. We call the `set_value` method on the `LimitTracker` with a value of 80, which is more than 75 percent of 100. Then we assert that the list of messages that the `MockMessenger` is keeping track of should now have one message in it.\n\nHowever, there’s one problem with this test, as shown here:\n\n```console\n$ cargo test\n   Compiling limit-tracker v0.1.0 (file:///projects/limit-tracker)\nerror[E0596]: cannot borrow `self.sent_messages` as mutable, as it is behind a `&` reference\n  --> src/lib.rs:58:13\n   |\n58 |             self.sent_messages.push(String::from(message));\n   |             ^^^^^^^^^^^^^^^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n   |\nhelp: consider changing this to be a mutable reference\n   |\n2  |     fn send(&mut self, msg: &str);\n   |             ~~~~~~~~~\n\nFor more information about this error, try `rustc --explain E0596`.\nerror: could not compile `limit-tracker` (lib test) due to 1 previous error\n\n```\n\nWe can’t modify the `MockMessenger` to keep track of the messages, because the `send` method takes an immutable reference to `self`. We also can’t take the suggestion from the error text to use `&mut self` instead, because then the signature of `send` wouldn’t match the signature in the `Messenger` trait definition (feel free to try and see what error message you get).\n\nThis is a situation in which interior mutability can help! We’ll store the `sent_messages` within a `RefCell<T>`, and then the `send` method will be able to modify `sent_messages` to store the messages we’ve seen. Listing 15-22 shows what that looks like:\n\nFilename: src/lib.rs\n\n```rust\npub trait Messenger {\n    fn send(&self, msg: &str);\n}\n\npub struct LimitTracker<'a, T: Messenger> {\n    messenger: &'a T,\n    value: usize,\n    max: usize,\n}\n\nimpl<'a, T> LimitTracker<'a, T>\nwhere\n    T: Messenger,\n{\n    pub fn new(messenger: &'a T, max: usize) -> LimitTracker<'a, T> {\n        LimitTracker {\n            messenger,\n            value: 0,\n            max,\n        }\n    }\n\n    pub fn set_value(&mut self, value: usize) {\n        self.value = value;\n\n        let percentage_of_max = self.value as f64 / self.max as f64;\n\n        if percentage_of_max >= 1.0 {\n            self.messenger.send(\"Error: You are over your quota!\");\n        } else if percentage_of_max >= 0.9 {\n            self.messenger\n                .send(\"Urgent warning: You've used up over 90% of your quota!\");\n        } else if percentage_of_max >= 0.75 {\n            self.messenger\n                .send(\"Warning: You've used up over 75% of your quota!\");\n        }\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n    use std::cell::RefCell;\n\n    struct MockMessenger {\n        sent_messages: RefCell<Vec<String>>,\n    }\n\n    impl MockMessenger {\n        fn new() -> MockMessenger {\n            MockMessenger {\n                sent_messages: RefCell::new(vec![]),\n            }\n        }\n    }\n\n    impl Messenger for MockMessenger {\n        fn send(&self, message: &str) {\n            self.sent_messages.borrow_mut().push(String::from(message));\n        }\n    }\n\n    #[test]\n    fn it_sends_an_over_75_percent_warning_message() {\n        // --snip--\n        let mock_messenger = MockMessenger::new();\n        let mut limit_tracker = LimitTracker::new(&mock_messenger, 100);\n\n        limit_tracker.set_value(80);\n\n        assert_eq!(mock_messenger.sent_messages.borrow().len(), 1);\n    }\n}\n```\n\nListing 15-22: Using `RefCell<T>` to mutate an inner value while the outer value is considered immutable\n\nThe `sent_messages` field is now of type `RefCell<Vec<String>>` instead of `Vec<String>`. In the `new` function, we create a new `RefCell<Vec<String>>` instance around the empty vector.\n\nFor the implementation of the `send` method, the first parameter is still an immutable borrow of `self`, which matches the trait definition. We call `borrow_mut` on the `RefCell<Vec<String>>` in `self.sent_messages` to get a mutable reference to the value inside the `RefCell<Vec<String>>`, which is the vector. Then we can call `push` on the mutable reference to the vector to keep track of the messages sent during the test.\n\nThe last change we have to make is in the assertion: to see how many items are in the inner vector, we call `borrow` on the `RefCell<Vec<String>>` to get an immutable reference to the vector.\n\nNow that you’ve seen how to use `RefCell<T>`, let’s dig into how it works!\n\n#### [Keeping Track of Borrows at Runtime with `RefCell<T>`](#keeping-track-of-borrows-at-runtime-with-refcellt)\n\nWhen creating immutable and mutable references, we use the `&` and `&mut` syntax, respectively. With `RefCell<T>`, we use the `borrow` and `borrow_mut` methods, which are part of the safe API that belongs to `RefCell<T>`. The `borrow` method returns the smart pointer type `Ref<T>`, and `borrow_mut` returns the smart pointer type `RefMut<T>`. Both types implement `Deref`, so we can treat them like regular references.\n\nThe `RefCell<T>` keeps track of how many `Ref<T>` and `RefMut<T>` smart pointers are currently active. Every time we call `borrow`, the `RefCell<T>` increases its count of how many immutable borrows are active. When a `Ref<T>` value goes out of scope, the count of immutable borrows goes down by one. Just like the compile-time borrowing rules, `RefCell<T>` lets us have many immutable borrows or one mutable borrow at any point in time.\n\nIf we try to violate these rules, rather than getting a compiler error as we would with references, the implementation of `RefCell<T>` will panic at runtime. Listing 15-23 shows a modification of the implementation of `send` in Listing 15-22. We’re deliberately trying to create two mutable borrows active for the same scope to illustrate that `RefCell<T>` prevents us from doing this at runtime.\n\nFilename: src/lib.rs\n\n```rust\npub trait Messenger {\n    fn send(&self, msg: &str);\n}\n\npub struct LimitTracker<'a, T: Messenger> {\n    messenger: &'a T,\n    value: usize,\n    max: usize,\n}\n\nimpl<'a, T> LimitTracker<'a, T>\nwhere\n    T: Messenger,\n{\n    pub fn new(messenger: &'a T, max: usize) -> LimitTracker<'a, T> {\n        LimitTracker {\n            messenger,\n            value: 0,\n            max,\n        }\n    }\n\n    pub fn set_value(&mut self, value: usize) {\n        self.value = value;\n\n        let percentage_of_max = self.value as f64 / self.max as f64;\n\n        if percentage_of_max >= 1.0 {\n            self.messenger.send(\"Error: You are over your quota!\");\n        } else if percentage_of_max >= 0.9 {\n            self.messenger\n                .send(\"Urgent warning: You've used up over 90% of your quota!\");\n        } else if percentage_of_max >= 0.75 {\n            self.messenger\n                .send(\"Warning: You've used up over 75% of your quota!\");\n        }\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n    use std::cell::RefCell;\n\n    struct MockMessenger {\n        sent_messages: RefCell<Vec<String>>,\n    }\n\n    impl MockMessenger {\n        fn new() -> MockMessenger {\n            MockMessenger {\n                sent_messages: RefCell::new(vec![]),\n            }\n        }\n    }\n\n    impl Messenger for MockMessenger {\n        fn send(&self, message: &str) {\n            let mut one_borrow = self.sent_messages.borrow_mut();\n            let mut two_borrow = self.sent_messages.borrow_mut();\n\n            one_borrow.push(String::from(message));\n            two_borrow.push(String::from(message));\n        }\n    }\n\n    #[test]\n    fn it_sends_an_over_75_percent_warning_message() {\n        let mock_messenger = MockMessenger::new();\n        let mut limit_tracker = LimitTracker::new(&mock_messenger, 100);\n\n        limit_tracker.set_value(80);\n\n        assert_eq!(mock_messenger.sent_messages.borrow().len(), 1);\n    }\n}\n```\n\nListing 15-23: Creating two mutable references in the same scope to see that `RefCell<T>` will panic\n\nWe create a variable `one_borrow` for the `RefMut<T>` smart pointer returned from `borrow_mut`. Then we create another mutable borrow in the same way in the variable `two_borrow`. This makes two mutable references in the same scope, which isn’t allowed. When we run the tests for our library, the code in Listing 15-23 will compile without any errors, but the test will fail:\n\n```console\n$ cargo test\n   Compiling limit-tracker v0.1.0 (file:///projects/limit-tracker)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.91s\n     Running unittests src/lib.rs (target/debug/deps/limit_tracker-e599811fa246dbde)\n\nrunning 1 test\ntest tests::it_sends_an_over_75_percent_warning_message ... FAILED\n\nfailures:\n\n---- tests::it_sends_an_over_75_percent_warning_message stdout ----\nthread 'tests::it_sends_an_over_75_percent_warning_message' panicked at src/lib.rs:60:53:\nalready borrowed: BorrowMutError\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\n\nfailures:\n    tests::it_sends_an_over_75_percent_warning_message\n\ntest result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\nerror: test failed, to rerun pass `--lib`\n\n```\n\nNotice that the code panicked with the message `already borrowed: BorrowMutError`. This is how `RefCell<T>` handles violations of the borrowing rules at runtime.\n\nChoosing to catch borrowing errors at runtime rather than compile time, as we’ve done here, means you’d potentially be finding mistakes in your code later in the development process: possibly not until your code was deployed to production. Also, your code would incur a small runtime performance penalty as a result of keeping track of the borrows at runtime rather than compile time. However, using `RefCell<T>` makes it possible to write a mock object that can modify itself to keep track of the messages it has seen while you’re using it in a context where only immutable values are allowed. You can use `RefCell<T>` despite its trade-offs to get more functionality than regular references provide.\n\n### [Having Multiple Owners of Mutable Data by Combining `Rc<T>` and `RefCell<T>`](#having-multiple-owners-of-mutable-data-by-combining-rct-and-refcellt)\n\nA common way to use `RefCell<T>` is in combination with `Rc<T>`. Recall that `Rc<T>` lets you have multiple owners of some data, but it only gives immutable access to that data. If you have an `Rc<T>` that holds a `RefCell<T>`, you can get a value that can have multiple owners _and_ that you can mutate!\n\nFor example, recall the cons list example in Listing 15-18 where we used `Rc<T>` to allow multiple lists to share ownership of another list. Because `Rc<T>` holds only immutable values, we can’t change any of the values in the list once we’ve created them. Let’s add in `RefCell<T>` to gain the ability to change the values in the lists. Listing 15-24 shows that by using a `RefCell<T>` in the `Cons` definition, we can modify the value stored in all the lists:\n\nFilename: src/main.rs\n\n```rust\n#[derive(Debug)]\nenum List {\n    Cons(Rc<RefCell<i32>>, Rc<List>),\n    Nil,\n}\n\nuse crate::List::{Cons, Nil};\nuse std::cell::RefCell;\nuse std::rc::Rc;\n\nfn main() {\n    let value = Rc::new(RefCell::new(5));\n\n    let a = Rc::new(Cons(Rc::clone(&value), Rc::new(Nil)));\n\n    let b = Cons(Rc::new(RefCell::new(3)), Rc::clone(&a));\n    let c = Cons(Rc::new(RefCell::new(4)), Rc::clone(&a));\n\n    *value.borrow_mut() += 10;\n\n    println!(\"a after = {a:?}\");\n    println!(\"b after = {b:?}\");\n    println!(\"c after = {c:?}\");\n}\n```\n\nListing 15-24: Using `Rc<RefCell<i32>>` to create a `List` that we can mutate\n\nWe create a value that is an instance of `Rc<RefCell<i32>>` and store it in a variable named `value` so we can access it directly later. Then we create a `List` in `a` with a `Cons` variant that holds `value`. We need to clone `value` so both `a` and `value` have ownership of the inner `5` value rather than transferring ownership from `value` to `a` or having `a` borrow from `value`.\n\nWe wrap the list `a` in an `Rc<T>` so when we create lists `b` and `c`, they can both refer to `a`, which is what we did in Listing 15-18.\n\nAfter we’ve created the lists in `a`, `b`, and `c`, we want to add 10 to the value in `value`. We do this by calling `borrow_mut` on `value`, which uses the automatic dereferencing feature we discussed in Chapter 5 (see the section [“Where’s the `->` Operator?”](about:blank/ch05-03-method-syntax.html#wheres-the---operator)) to dereference the `Rc<T>` to the inner `RefCell<T>` value. The `borrow_mut` method returns a `RefMut<T>` smart pointer, and we use the dereference operator on it and change the inner value.\n\nWhen we print `a`, `b`, and `c`, we can see that they all have the modified value of 15 rather than 5:\n\n```console\n$ cargo run\n   Compiling cons-list v0.1.0 (file:///projects/cons-list)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.63s\n     Running `target/debug/cons-list`\na after = Cons(RefCell { value: 15 }, Nil)\nb after = Cons(RefCell { value: 3 }, Cons(RefCell { value: 15 }, Nil))\nc after = Cons(RefCell { value: 4 }, Cons(RefCell { value: 15 }, Nil))\n\n```\n\nThis technique is pretty neat! By using `RefCell<T>`, we have an outwardly immutable `List` value. But we can use the methods on `RefCell<T>` that provide access to its interior mutability so we can modify our data when we need to. The runtime checks of the borrowing rules protect us from data races, and it’s sometimes worth trading a bit of speed for this flexibility in our data structures. Note that `RefCell<T>` does not work for multithreaded code! `Mutex<T>` is the thread-safe version of `RefCell<T>` and we’ll discuss `Mutex<T>` in Chapter 16.",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>RefCell&lt;T&gt; and the Interior Mutability Pattern - The Rust Programming Language</title>\n\n\n        <!-- Custom HTML head -->\n        \n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"icon\" href=\"favicon.svg\">\n        <link rel=\"shortcut icon\" href=\"favicon.png\">\n        <link rel=\"stylesheet\" href=\"css/variables.css\">\n        <link rel=\"stylesheet\" href=\"css/general.css\">\n        <link rel=\"stylesheet\" href=\"css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"highlight.css\">\n        <link rel=\"stylesheet\" href=\"tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n        <link rel=\"stylesheet\" href=\"ferris.css\">\n        <link rel=\"stylesheet\" href=\"theme/2018-edition.css\">\n        <link rel=\"stylesheet\" href=\"theme/semantic-notes.css\">\n        <link rel=\"stylesheet\" href=\"theme/listing.css\">\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"title-page.html\" tabindex=\"0\">The Rust Programming Language</a></li><li class=\"chapter-item expanded affix \"><a href=\"foreword.html\" tabindex=\"0\">Foreword</a></li><li class=\"chapter-item expanded affix \"><a href=\"ch00-00-introduction.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"ch01-00-getting-started.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> Getting Started</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch01-01-installation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.1.</strong> Installation</a></li><li class=\"chapter-item expanded \"><a href=\"ch01-02-hello-world.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.2.</strong> Hello, World!</a></li><li class=\"chapter-item expanded \"><a href=\"ch01-03-hello-cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.3.</strong> Hello, Cargo!</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch02-00-guessing-game-tutorial.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Programming a Guessing Game</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-00-common-programming-concepts.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Common Programming Concepts</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch03-01-variables-and-mutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> Variables and Mutability</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-02-data-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> Data Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-03-how-functions-work.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.3.</strong> Functions</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-04-comments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.4.</strong> Comments</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-05-control-flow.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.5.</strong> Control Flow</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch04-00-understanding-ownership.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Understanding Ownership</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch04-01-what-is-ownership.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.</strong> What is Ownership?</a></li><li class=\"chapter-item expanded \"><a href=\"ch04-02-references-and-borrowing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.</strong> References and Borrowing</a></li><li class=\"chapter-item expanded \"><a href=\"ch04-03-slices.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.</strong> The Slice Type</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch05-00-structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> Using Structs to Structure Related Data</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch05-01-defining-structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.1.</strong> Defining and Instantiating Structs</a></li><li class=\"chapter-item expanded \"><a href=\"ch05-02-example-structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.2.</strong> An Example Program Using Structs</a></li><li class=\"chapter-item expanded \"><a href=\"ch05-03-method-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.3.</strong> Method Syntax</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch06-00-enums.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Enums and Pattern Matching</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch06-01-defining-an-enum.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.1.</strong> Defining an Enum</a></li><li class=\"chapter-item expanded \"><a href=\"ch06-02-match.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.2.</strong> The match Control Flow Construct</a></li><li class=\"chapter-item expanded \"><a href=\"ch06-03-if-let.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.3.</strong> Concise Control Flow with if let</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch07-00-managing-growing-projects-with-packages-crates-and-modules.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Managing Growing Projects with Packages, Crates, and Modules</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch07-01-packages-and-crates.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.1.</strong> Packages and Crates</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-02-defining-modules-to-control-scope-and-privacy.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.2.</strong> Defining Modules to Control Scope and Privacy</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.3.</strong> Paths for Referring to an Item in the Module Tree</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-04-bringing-paths-into-scope-with-the-use-keyword.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.4.</strong> Bringing Paths Into Scope with the use Keyword</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-05-separating-modules-into-different-files.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.5.</strong> Separating Modules into Different Files</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch08-00-common-collections.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.</strong> Common Collections</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch08-01-vectors.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.1.</strong> Storing Lists of Values with Vectors</a></li><li class=\"chapter-item expanded \"><a href=\"ch08-02-strings.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.</strong> Storing UTF-8 Encoded Text with Strings</a></li><li class=\"chapter-item expanded \"><a href=\"ch08-03-hash-maps.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.3.</strong> Storing Keys with Associated Values in Hash Maps</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch09-00-error-handling.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.</strong> Error Handling</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch09-01-unrecoverable-errors-with-panic.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.1.</strong> Unrecoverable Errors with panic!</a></li><li class=\"chapter-item expanded \"><a href=\"ch09-02-recoverable-errors-with-result.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.2.</strong> Recoverable Errors with Result</a></li><li class=\"chapter-item expanded \"><a href=\"ch09-03-to-panic-or-not-to-panic.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.3.</strong> To panic! or Not to panic!</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch10-00-generics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.</strong> Generic Types, Traits, and Lifetimes</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch10-01-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.</strong> Generic Data Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch10-02-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.2.</strong> Traits: Defining Shared Behavior</a></li><li class=\"chapter-item expanded \"><a href=\"ch10-03-lifetime-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.3.</strong> Validating References with Lifetimes</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch11-00-testing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.</strong> Writing Automated Tests</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch11-01-writing-tests.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.1.</strong> How to Write Tests</a></li><li class=\"chapter-item expanded \"><a href=\"ch11-02-running-tests.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.2.</strong> Controlling How Tests Are Run</a></li><li class=\"chapter-item expanded \"><a href=\"ch11-03-test-organization.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.3.</strong> Test Organization</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch12-00-an-io-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.</strong> An I/O Project: Building a Command Line Program</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch12-01-accepting-command-line-arguments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.1.</strong> Accepting Command Line Arguments</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-02-reading-a-file.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.2.</strong> Reading a File</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-03-improving-error-handling-and-modularity.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.3.</strong> Refactoring to Improve Modularity and Error Handling</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-04-testing-the-librarys-functionality.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.4.</strong> Developing the Library’s Functionality with Test Driven Development</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-05-working-with-environment-variables.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.5.</strong> Working with Environment Variables</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-06-writing-to-stderr-instead-of-stdout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.6.</strong> Writing Error Messages to Standard Error Instead of Standard Output</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch13-00-functional-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.</strong> Functional Language Features: Iterators and Closures</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch13-01-closures.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.1.</strong> Closures: Anonymous Functions that Capture Their Environment</a></li><li class=\"chapter-item expanded \"><a href=\"ch13-02-iterators.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.2.</strong> Processing a Series of Items with Iterators</a></li><li class=\"chapter-item expanded \"><a href=\"ch13-03-improving-our-io-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.3.</strong> Improving Our I/O Project</a></li><li class=\"chapter-item expanded \"><a href=\"ch13-04-performance.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.4.</strong> Comparing Performance: Loops vs. Iterators</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch14-00-more-about-cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.</strong> More about Cargo and Crates.io</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch14-01-release-profiles.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.1.</strong> Customizing Builds with Release Profiles</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-02-publishing-to-crates-io.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.2.</strong> Publishing a Crate to Crates.io</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-03-cargo-workspaces.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.3.</strong> Cargo Workspaces</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-04-installing-binaries.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.4.</strong> Installing Binaries from Crates.io with cargo install</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-05-extending-cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.5.</strong> Extending Cargo with Custom Commands</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch15-00-smart-pointers.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.</strong> Smart Pointers</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch15-01-box.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.1.</strong> Using Box&lt;T&gt; to Point to Data on the Heap</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-02-deref.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.2.</strong> Treating Smart Pointers Like Regular References with the Deref Trait</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-03-drop.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.3.</strong> Running Code on Cleanup with the Drop Trait</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-04-rc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.4.</strong> Rc&lt;T&gt;, the Reference Counted Smart Pointer</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-05-interior-mutability.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">15.5.</strong> RefCell&lt;T&gt; and the Interior Mutability Pattern</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-06-reference-cycles.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.6.</strong> Reference Cycles Can Leak Memory</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch16-00-concurrency.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.</strong> Fearless Concurrency</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch16-01-threads.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.1.</strong> Using Threads to Run Code Simultaneously</a></li><li class=\"chapter-item expanded \"><a href=\"ch16-02-message-passing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.2.</strong> Using Message Passing to Transfer Data Between Threads</a></li><li class=\"chapter-item expanded \"><a href=\"ch16-03-shared-state.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.3.</strong> Shared-State Concurrency</a></li><li class=\"chapter-item expanded \"><a href=\"ch16-04-extensible-concurrency-sync-and-send.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.4.</strong> Extensible Concurrency with the Sync and Send Traits</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch17-00-oop.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.</strong> Object Oriented Programming Features of Rust</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch17-01-what-is-oo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.1.</strong> Characteristics of Object-Oriented Languages</a></li><li class=\"chapter-item expanded \"><a href=\"ch17-02-trait-objects.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.2.</strong> Using Trait Objects That Allow for Values of Different Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch17-03-oo-design-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.3.</strong> Implementing an Object-Oriented Design Pattern</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch18-00-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.</strong> Patterns and Matching</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch18-01-all-the-places-for-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.1.</strong> All the Places Patterns Can Be Used</a></li><li class=\"chapter-item expanded \"><a href=\"ch18-02-refutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.2.</strong> Refutability: Whether a Pattern Might Fail to Match</a></li><li class=\"chapter-item expanded \"><a href=\"ch18-03-pattern-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.3.</strong> Pattern Syntax</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch19-00-advanced-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.</strong> Advanced Features</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch19-01-unsafe-rust.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.1.</strong> Unsafe Rust</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-03-advanced-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.2.</strong> Advanced Traits</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-04-advanced-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.3.</strong> Advanced Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-05-advanced-functions-and-closures.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.4.</strong> Advanced Functions and Closures</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-06-macros.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.5.</strong> Macros</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch20-00-final-project-a-web-server.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.</strong> Final Project: Building a Multithreaded Web Server</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch20-01-single-threaded.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.1.</strong> Building a Single-Threaded Web Server</a></li><li class=\"chapter-item expanded \"><a href=\"ch20-02-multithreaded.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.2.</strong> Turning Our Single-Threaded Server into a Multithreaded Server</a></li><li class=\"chapter-item expanded \"><a href=\"ch20-03-graceful-shutdown-and-cleanup.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.3.</strong> Graceful Shutdown and Cleanup</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"appendix-00.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.</strong> Appendix</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"appendix-01-keywords.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.1.</strong> A - Keywords</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-02-operators.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.2.</strong> B - Operators and Symbols</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-03-derivable-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.3.</strong> C - Derivable Traits</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-04-useful-development-tools.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.4.</strong> D - Useful Development Tools</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-05-editions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.5.</strong> E - Editions</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-06-translation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.6.</strong> F - Translations of the Book</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-07-nightly-rust.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.7.</strong> G - How Rust is Made and “Nightly Rust”</a></li></ol></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Rust Programming Language</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/book\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h2 id=\"refcellt-and-the-interior-mutability-pattern\"><a class=\"header\" href=\"#refcellt-and-the-interior-mutability-pattern\"><code>RefCell&lt;T&gt;</code> and the Interior Mutability Pattern</a></h2>\n<p><em>Interior mutability</em> is a design pattern in Rust that allows you to mutate\ndata even when there are immutable references to that data; normally, this\naction is disallowed by the borrowing rules. To mutate data, the pattern uses\n<code class=\"hljs\">unsafe</code> code inside a data structure to bend Rust’s usual rules that govern\nmutation and borrowing. Unsafe code indicates to the compiler that we’re\nchecking the rules manually instead of relying on the compiler to check them\nfor us; we will discuss unsafe code more in Chapter 19.</p>\n<p>We can use types that use the interior mutability pattern only when we can\nensure that the borrowing rules will be followed at runtime, even though the\ncompiler can’t guarantee that. The <code class=\"hljs\">unsafe</code> code involved is then wrapped in a\nsafe API, and the outer type is still immutable.</p>\n<p>Let’s explore this concept by looking at the <code class=\"hljs\">RefCell&lt;T&gt;</code> type that follows the\ninterior mutability pattern.</p>\n<h3 id=\"enforcing-borrowing-rules-at-runtime-with-refcellt\"><a class=\"header\" href=\"#enforcing-borrowing-rules-at-runtime-with-refcellt\">Enforcing Borrowing Rules at Runtime with <code>RefCell&lt;T&gt;</code></a></h3>\n<p>Unlike <code class=\"hljs\">Rc&lt;T&gt;</code>, the <code class=\"hljs\">RefCell&lt;T&gt;</code> type represents single ownership over the data\nit holds. So, what makes <code class=\"hljs\">RefCell&lt;T&gt;</code> different from a type like <code class=\"hljs\">Box&lt;T&gt;</code>?\nRecall the borrowing rules you learned in Chapter 4:</p>\n<ul>\n<li>At any given time, you can have <em>either</em> (but not both) one mutable reference\nor any number of immutable references.</li>\n<li>References must always be valid.</li>\n</ul>\n<p>With references and <code class=\"hljs\">Box&lt;T&gt;</code>, the borrowing rules’ invariants are enforced at\ncompile time. With <code class=\"hljs\">RefCell&lt;T&gt;</code>, these invariants are enforced <em>at runtime</em>.\nWith references, if you break these rules, you’ll get a compiler error. With\n<code class=\"hljs\">RefCell&lt;T&gt;</code>, if you break these rules, your program will panic and exit.</p>\n<p>The advantages of checking the borrowing rules at compile time are that errors\nwill be caught sooner in the development process, and there is no impact on\nruntime performance because all the analysis is completed beforehand. For those\nreasons, checking the borrowing rules at compile time is the best choice in the\nmajority of cases, which is why this is Rust’s default.</p>\n<p>The advantage of checking the borrowing rules at runtime instead is that\ncertain memory-safe scenarios are then allowed, where they would’ve been\ndisallowed by the compile-time checks. Static analysis, like the Rust compiler,\nis inherently conservative. Some properties of code are impossible to detect by\nanalyzing the code: the most famous example is the Halting Problem, which is\nbeyond the scope of this book but is an interesting topic to research.</p>\n<p>Because some analysis is impossible, if the Rust compiler can’t be sure the\ncode complies with the ownership rules, it might reject a correct program; in\nthis way, it’s conservative. If Rust accepted an incorrect program, users\nwouldn’t be able to trust in the guarantees Rust makes. However, if Rust\nrejects a correct program, the programmer will be inconvenienced, but nothing\ncatastrophic can occur. The <code class=\"hljs\">RefCell&lt;T&gt;</code> type is useful when you’re sure your\ncode follows the borrowing rules but the compiler is unable to understand and\nguarantee that.</p>\n<p>Similar to <code class=\"hljs\">Rc&lt;T&gt;</code>, <code class=\"hljs\">RefCell&lt;T&gt;</code> is only for use in single-threaded scenarios\nand will give you a compile-time error if you try using it in a multithreaded\ncontext. We’ll talk about how to get the functionality of <code class=\"hljs\">RefCell&lt;T&gt;</code> in a\nmultithreaded program in Chapter 16.</p>\n<p>Here is a recap of the reasons to choose <code class=\"hljs\">Box&lt;T&gt;</code>, <code class=\"hljs\">Rc&lt;T&gt;</code>, or <code class=\"hljs\">RefCell&lt;T&gt;</code>:</p>\n<ul>\n<li><code class=\"hljs\">Rc&lt;T&gt;</code> enables multiple owners of the same data; <code class=\"hljs\">Box&lt;T&gt;</code> and <code class=\"hljs\">RefCell&lt;T&gt;</code>\nhave single owners.</li>\n<li><code class=\"hljs\">Box&lt;T&gt;</code> allows immutable or mutable borrows checked at compile time; <code class=\"hljs\">Rc&lt;T&gt;</code>\nallows only immutable borrows checked at compile time; <code class=\"hljs\">RefCell&lt;T&gt;</code> allows\nimmutable or mutable borrows checked at runtime.</li>\n<li>Because <code class=\"hljs\">RefCell&lt;T&gt;</code> allows mutable borrows checked at runtime, you can\nmutate the value inside the <code class=\"hljs\">RefCell&lt;T&gt;</code> even when the <code class=\"hljs\">RefCell&lt;T&gt;</code> is\nimmutable.</li>\n</ul>\n<p>Mutating the value inside an immutable value is the <em>interior mutability</em>\npattern. Let’s look at a situation in which interior mutability is useful and\nexamine how it’s possible.</p>\n<h3 id=\"interior-mutability-a-mutable-borrow-to-an-immutable-value\"><a class=\"header\" href=\"#interior-mutability-a-mutable-borrow-to-an-immutable-value\">Interior Mutability: A Mutable Borrow to an Immutable Value</a></h3>\n<p>A consequence of the borrowing rules is that when you have an immutable value,\nyou can’t borrow it mutably. For example, this code won’t compile:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">5</span>;\n    <span class=\"hljs-keyword\">let</span> y = &amp;<span class=\"hljs-keyword\">mut</span> x;\n}</code></pre>\n<p>If you tried to compile this code, you’d get the following error:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling borrowing v0.1.0 (file:///projects/borrowing)\nerror[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/main.rs:3:13</span>\n  |\n3 |     let y = &amp;mut x;\n  |             ^^^^^^ cannot borrow as mutable\n  |\nhelp: consider changing this to be mutable\n  |\n2 |     let mut x = 5;\n  |         +++\n\nFor more information about this error, try `rustc --explain E0596`.\nerror: could not compile `borrowing` (bin \"borrowing\") due to 1 previous error\n</code></pre>\n<p>However, there are situations in which it would be useful for a value to mutate\nitself in its methods but appear immutable to other code. Code outside the\nvalue’s methods would not be able to mutate the value. Using <code class=\"hljs\">RefCell&lt;T&gt;</code> is\none way to get the ability to have interior mutability, but <code class=\"hljs\">RefCell&lt;T&gt;</code>\ndoesn’t get around the borrowing rules completely: the borrow checker in the\ncompiler allows this interior mutability, and the borrowing rules are checked\nat runtime instead. If you violate the rules, you’ll get a <code class=\"hljs\">panic!</code> instead of\na compiler error.</p>\n<p>Let’s work through a practical example where we can use <code class=\"hljs\">RefCell&lt;T&gt;</code> to mutate\nan immutable value and see why that is useful.</p>\n<h4 id=\"a-use-case-for-interior-mutability-mock-objects\"><a class=\"header\" href=\"#a-use-case-for-interior-mutability-mock-objects\">A Use Case for Interior Mutability: Mock Objects</a></h4>\n<p>Sometimes during testing a programmer will use a type in place of another type,\nin order to observe particular behavior and assert it’s implemented correctly.\nThis placeholder type is called a <em>test double</em>. Think of it in the sense of a\n“stunt double” in filmmaking, where a person steps in and substitutes for an\nactor to do a particular tricky scene. Test doubles stand in for other types\nwhen we’re running tests. <em>Mock objects</em> are specific types of test doubles\nthat record what happens during a test so you can assert that the correct\nactions took place.</p>\n<p>Rust doesn’t have objects in the same sense as other languages have objects,\nand Rust doesn’t have mock object functionality built into the standard library\nas some other languages do. However, you can definitely create a struct that\nwill serve the same purposes as a mock object.</p>\n<p>Here’s the scenario we’ll test: we’ll create a library that tracks a value\nagainst a maximum value and sends messages based on how close to the maximum\nvalue the current value is. This library could be used to keep track of a\nuser’s quota for the number of API calls they’re allowed to make, for example.</p>\n<p>Our library will only provide the functionality of tracking how close to the\nmaximum a value is and what the messages should be at what times. Applications\nthat use our library will be expected to provide the mechanism for sending the\nmessages: the application could put a message in the application, send an\nemail, send a text message, or something else. The library doesn’t need to know\nthat detail. All it needs is something that implements a trait we’ll provide\ncalled <code class=\"hljs\">Messenger</code>. Listing 15-20 shows the library code:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust noplayground hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Messenger</span></span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">send</span></span>(&amp;<span class=\"hljs-keyword\">self</span>, msg: &amp;<span class=\"hljs-built_in\">str</span>);\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">LimitTracker</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, T: Messenger&gt; {\n    messenger: &amp;<span class=\"hljs-symbol\">'a</span> T,\n    value: <span class=\"hljs-built_in\">usize</span>,\n    max: <span class=\"hljs-built_in\">usize</span>,\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; LimitTracker&lt;<span class=\"hljs-symbol\">'a</span>, T&gt;\n<span class=\"hljs-keyword\">where</span>\n    T: Messenger,\n{\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(messenger: &amp;<span class=\"hljs-symbol\">'a</span> T, max: <span class=\"hljs-built_in\">usize</span>) -&gt; LimitTracker&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; {\n        LimitTracker {\n            messenger,\n            value: <span class=\"hljs-number\">0</span>,\n            max,\n        }\n    }\n\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">set_value</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, value: <span class=\"hljs-built_in\">usize</span>) {\n        <span class=\"hljs-keyword\">self</span>.value = value;\n\n        <span class=\"hljs-keyword\">let</span> percentage_of_max = <span class=\"hljs-keyword\">self</span>.value <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">f64</span> / <span class=\"hljs-keyword\">self</span>.max <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">f64</span>;\n\n        <span class=\"hljs-keyword\">if</span> percentage_of_max &gt;= <span class=\"hljs-number\">1.0</span> {\n            <span class=\"hljs-keyword\">self</span>.messenger.send(<span class=\"hljs-string\">\"Error: You are over your quota!\"</span>);\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> percentage_of_max &gt;= <span class=\"hljs-number\">0.9</span> {\n            <span class=\"hljs-keyword\">self</span>.messenger\n                .send(<span class=\"hljs-string\">\"Urgent warning: You've used up over 90% of your quota!\"</span>);\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> percentage_of_max &gt;= <span class=\"hljs-number\">0.75</span> {\n            <span class=\"hljs-keyword\">self</span>.messenger\n                .send(<span class=\"hljs-string\">\"Warning: You've used up over 75% of your quota!\"</span>);\n        }\n    }\n}</code></pre>\n<p><span class=\"caption\">Listing 15-20: A library to keep track of how close a\nvalue is to a maximum value and warn when the value is at certain levels</span></p>\n<p>One important part of this code is that the <code class=\"hljs\">Messenger</code> trait has one method\ncalled <code class=\"hljs\">send</code> that takes an immutable reference to <code class=\"hljs\">self</code> and the text of the\nmessage. This trait is the interface our mock object needs to implement so that\nthe mock can be used in the same way a real object is. The other important part\nis that we want to test the behavior of the <code class=\"hljs\">set_value</code> method on the\n<code class=\"hljs\">LimitTracker</code>. We can change what we pass in for the <code class=\"hljs\">value</code> parameter, but\n<code class=\"hljs\">set_value</code> doesn’t return anything for us to make assertions on. We want to be\nable to say that if we create a <code class=\"hljs\">LimitTracker</code> with something that implements\nthe <code class=\"hljs\">Messenger</code> trait and a particular value for <code class=\"hljs\">max</code>, when we pass different\nnumbers for <code class=\"hljs\">value</code>, the messenger is told to send the appropriate messages.</p>\n<p>We need a mock object that, instead of sending an email or text message when we\ncall <code class=\"hljs\">send</code>, will only keep track of the messages it’s told to send. We can\ncreate a new instance of the mock object, create a <code class=\"hljs\">LimitTracker</code> that uses the\nmock object, call the <code class=\"hljs\">set_value</code> method on <code class=\"hljs\">LimitTracker</code>, and then check that\nthe mock object has the messages we expect. Listing 15-21 shows an attempt to\nimplement a mock object to do just that, but the borrow checker won’t allow it:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Messenger</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">send</span></span>(&amp;<span class=\"hljs-keyword\">self</span>, msg: &amp;<span class=\"hljs-built_in\">str</span>);\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">LimitTracker</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, T: Messenger&gt; {\n</span><span class=\"boring\">    messenger: &amp;<span class=\"hljs-symbol\">'a</span> T,\n</span><span class=\"boring\">    value: <span class=\"hljs-built_in\">usize</span>,\n</span><span class=\"boring\">    max: <span class=\"hljs-built_in\">usize</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; LimitTracker&lt;<span class=\"hljs-symbol\">'a</span>, T&gt;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">where</span>\n</span><span class=\"boring\">    T: Messenger,\n</span><span class=\"boring\">{\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(messenger: &amp;<span class=\"hljs-symbol\">'a</span> T, max: <span class=\"hljs-built_in\">usize</span>) -&gt; LimitTracker&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; {\n</span><span class=\"boring\">        LimitTracker {\n</span><span class=\"boring\">            messenger,\n</span><span class=\"boring\">            value: <span class=\"hljs-number\">0</span>,\n</span><span class=\"boring\">            max,\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">set_value</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, value: <span class=\"hljs-built_in\">usize</span>) {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">self</span>.value = value;\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> percentage_of_max = <span class=\"hljs-keyword\">self</span>.value <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">f64</span> / <span class=\"hljs-keyword\">self</span>.max <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">f64</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> percentage_of_max &gt;= <span class=\"hljs-number\">1.0</span> {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">self</span>.messenger.send(<span class=\"hljs-string\">\"Error: You are over your quota!\"</span>);\n</span><span class=\"boring\">        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> percentage_of_max &gt;= <span class=\"hljs-number\">0.9</span> {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">self</span>.messenger\n</span><span class=\"boring\">                .send(<span class=\"hljs-string\">\"Urgent warning: You've used up over 90% of your quota!\"</span>);\n</span><span class=\"boring\">        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> percentage_of_max &gt;= <span class=\"hljs-number\">0.75</span> {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">self</span>.messenger\n</span><span class=\"boring\">                .send(<span class=\"hljs-string\">\"Warning: You've used up over 75% of your quota!\"</span>);\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::*;\n\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">MockMessenger</span></span> {\n        sent_messages: <span class=\"hljs-built_in\">Vec</span>&lt;<span class=\"hljs-built_in\">String</span>&gt;,\n    }\n\n    <span class=\"hljs-keyword\">impl</span> MockMessenger {\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>() -&gt; MockMessenger {\n            MockMessenger {\n                sent_messages: <span class=\"hljs-built_in\">vec!</span>[],\n            }\n        }\n    }\n\n    <span class=\"hljs-keyword\">impl</span> Messenger <span class=\"hljs-keyword\">for</span> MockMessenger {\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">send</span></span>(&amp;<span class=\"hljs-keyword\">self</span>, message: &amp;<span class=\"hljs-built_in\">str</span>) {\n            <span class=\"hljs-keyword\">self</span>.sent_messages.push(<span class=\"hljs-built_in\">String</span>::from(message));\n        }\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">it_sends_an_over_75_percent_warning_message</span></span>() {\n        <span class=\"hljs-keyword\">let</span> mock_messenger = MockMessenger::new();\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> limit_tracker = LimitTracker::new(&amp;mock_messenger, <span class=\"hljs-number\">100</span>);\n\n        limit_tracker.set_value(<span class=\"hljs-number\">80</span>);\n\n        <span class=\"hljs-built_in\">assert_eq!</span>(mock_messenger.sent_messages.len(), <span class=\"hljs-number\">1</span>);\n    }\n}</code></pre>\n<p><span class=\"caption\">Listing 15-21: An attempt to implement a <code class=\"hljs\">MockMessenger</code>\nthat isn’t allowed by the borrow checker</span></p>\n<p>This test code defines a <code class=\"hljs\">MockMessenger</code> struct that has a <code class=\"hljs\">sent_messages</code>\nfield with a <code class=\"hljs\">Vec</code> of <code class=\"hljs\">String</code> values to keep track of the messages it’s told\nto send. We also define an associated function <code class=\"hljs\">new</code> to make it convenient to\ncreate new <code class=\"hljs\">MockMessenger</code> values that start with an empty list of messages. We\nthen implement the <code class=\"hljs\">Messenger</code> trait for <code class=\"hljs\">MockMessenger</code> so we can give a\n<code class=\"hljs\">MockMessenger</code> to a <code class=\"hljs\">LimitTracker</code>. In the definition of the <code class=\"hljs\">send</code> method, we\ntake the message passed in as a parameter and store it in the <code class=\"hljs\">MockMessenger</code>\nlist of <code class=\"hljs\">sent_messages</code>.</p>\n<p>In the test, we’re testing what happens when the <code class=\"hljs\">LimitTracker</code> is told to set\n<code class=\"hljs\">value</code> to something that is more than 75 percent of the <code class=\"hljs\">max</code> value. First, we\ncreate a new <code class=\"hljs\">MockMessenger</code>, which will start with an empty list of messages.\nThen we create a new <code class=\"hljs\">LimitTracker</code> and give it a reference to the new\n<code class=\"hljs\">MockMessenger</code> and a <code class=\"hljs\">max</code> value of 100. We call the <code class=\"hljs\">set_value</code> method on the\n<code class=\"hljs\">LimitTracker</code> with a value of 80, which is more than 75 percent of 100. Then\nwe assert that the list of messages that the <code class=\"hljs\">MockMessenger</code> is keeping track\nof should now have one message in it.</p>\n<p>However, there’s one problem with this test, as shown here:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo <span class=\"hljs-built_in\">test</span></span>\n   Compiling limit-tracker v0.1.0 (file:///projects/limit-tracker)\nerror[E0596]: cannot borrow `self.sent_messages` as mutable, as it is behind a `&amp;` reference\n<span class=\"hljs-meta\">  --&gt;</span><span class=\"bash\"> src/lib.rs:58:13</span>\n   |\n58 |             self.sent_messages.push(String::from(message));\n   |             ^^^^^^^^^^^^^^^^^^ `self` is a `&amp;` reference, so the data it refers to cannot be borrowed as mutable\n   |\nhelp: consider changing this to be a mutable reference\n   |\n2  |     fn send(&amp;mut self, msg: &amp;str);\n   |             ~~~~~~~~~\n\nFor more information about this error, try `rustc --explain E0596`.\nerror: could not compile `limit-tracker` (lib test) due to 1 previous error\n</code></pre>\n<p>We can’t modify the <code class=\"hljs\">MockMessenger</code> to keep track of the messages, because the\n<code class=\"hljs\">send</code> method takes an immutable reference to <code class=\"hljs\">self</code>. We also can’t take the\nsuggestion from the error text to use <code class=\"hljs\">&amp;mut self</code> instead, because then the\nsignature of <code class=\"hljs\">send</code> wouldn’t match the signature in the <code class=\"hljs\">Messenger</code> trait\ndefinition (feel free to try and see what error message you get).</p>\n<p>This is a situation in which interior mutability can help! We’ll store the\n<code class=\"hljs\">sent_messages</code> within a <code class=\"hljs\">RefCell&lt;T&gt;</code>, and then the <code class=\"hljs\">send</code> method will be\nable to modify <code class=\"hljs\">sent_messages</code> to store the messages we’ve seen. Listing 15-22\nshows what that looks like:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Messenger</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">send</span></span>(&amp;<span class=\"hljs-keyword\">self</span>, msg: &amp;<span class=\"hljs-built_in\">str</span>);\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">LimitTracker</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, T: Messenger&gt; {\n</span><span class=\"boring\">    messenger: &amp;<span class=\"hljs-symbol\">'a</span> T,\n</span><span class=\"boring\">    value: <span class=\"hljs-built_in\">usize</span>,\n</span><span class=\"boring\">    max: <span class=\"hljs-built_in\">usize</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; LimitTracker&lt;<span class=\"hljs-symbol\">'a</span>, T&gt;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">where</span>\n</span><span class=\"boring\">    T: Messenger,\n</span><span class=\"boring\">{\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(messenger: &amp;<span class=\"hljs-symbol\">'a</span> T, max: <span class=\"hljs-built_in\">usize</span>) -&gt; LimitTracker&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; {\n</span><span class=\"boring\">        LimitTracker {\n</span><span class=\"boring\">            messenger,\n</span><span class=\"boring\">            value: <span class=\"hljs-number\">0</span>,\n</span><span class=\"boring\">            max,\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">set_value</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, value: <span class=\"hljs-built_in\">usize</span>) {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">self</span>.value = value;\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> percentage_of_max = <span class=\"hljs-keyword\">self</span>.value <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">f64</span> / <span class=\"hljs-keyword\">self</span>.max <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">f64</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> percentage_of_max &gt;= <span class=\"hljs-number\">1.0</span> {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">self</span>.messenger.send(<span class=\"hljs-string\">\"Error: You are over your quota!\"</span>);\n</span><span class=\"boring\">        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> percentage_of_max &gt;= <span class=\"hljs-number\">0.9</span> {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">self</span>.messenger\n</span><span class=\"boring\">                .send(<span class=\"hljs-string\">\"Urgent warning: You've used up over 90% of your quota!\"</span>);\n</span><span class=\"boring\">        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> percentage_of_max &gt;= <span class=\"hljs-number\">0.75</span> {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">self</span>.messenger\n</span><span class=\"boring\">                .send(<span class=\"hljs-string\">\"Warning: You've used up over 75% of your quota!\"</span>);\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::*;\n    <span class=\"hljs-keyword\">use</span> std::cell::RefCell;\n\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">MockMessenger</span></span> {\n        sent_messages: RefCell&lt;<span class=\"hljs-built_in\">Vec</span>&lt;<span class=\"hljs-built_in\">String</span>&gt;&gt;,\n    }\n\n    <span class=\"hljs-keyword\">impl</span> MockMessenger {\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>() -&gt; MockMessenger {\n            MockMessenger {\n                sent_messages: RefCell::new(<span class=\"hljs-built_in\">vec!</span>[]),\n            }\n        }\n    }\n\n    <span class=\"hljs-keyword\">impl</span> Messenger <span class=\"hljs-keyword\">for</span> MockMessenger {\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">send</span></span>(&amp;<span class=\"hljs-keyword\">self</span>, message: &amp;<span class=\"hljs-built_in\">str</span>) {\n            <span class=\"hljs-keyword\">self</span>.sent_messages.borrow_mut().push(<span class=\"hljs-built_in\">String</span>::from(message));\n        }\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">it_sends_an_over_75_percent_warning_message</span></span>() {\n        <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">        <span class=\"hljs-keyword\">let</span> mock_messenger = MockMessenger::new();\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> limit_tracker = LimitTracker::new(&amp;mock_messenger, <span class=\"hljs-number\">100</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">        limit_tracker.set_value(<span class=\"hljs-number\">80</span>);\n</span>\n        <span class=\"hljs-built_in\">assert_eq!</span>(mock_messenger.sent_messages.borrow().len(), <span class=\"hljs-number\">1</span>);\n    }\n}</code></pre>\n<p><span class=\"caption\">Listing 15-22: Using <code class=\"hljs\">RefCell&lt;T&gt;</code> to mutate an inner\nvalue while the outer value is considered immutable</span></p>\n<p>The <code class=\"hljs\">sent_messages</code> field is now of type <code class=\"hljs\">RefCell&lt;Vec&lt;String&gt;&gt;</code> instead of\n<code class=\"hljs\">Vec&lt;String&gt;</code>. In the <code class=\"hljs\">new</code> function, we create a new <code class=\"hljs\">RefCell&lt;Vec&lt;String&gt;&gt;</code>\ninstance around the empty vector.</p>\n<p>For the implementation of the <code class=\"hljs\">send</code> method, the first parameter is still an\nimmutable borrow of <code class=\"hljs\">self</code>, which matches the trait definition. We call\n<code class=\"hljs\">borrow_mut</code> on the <code class=\"hljs\">RefCell&lt;Vec&lt;String&gt;&gt;</code> in <code class=\"hljs\">self.sent_messages</code> to get a\nmutable reference to the value inside the <code class=\"hljs\">RefCell&lt;Vec&lt;String&gt;&gt;</code>, which is the\nvector. Then we can call <code class=\"hljs\">push</code> on the mutable reference to the vector to keep\ntrack of the messages sent during the test.</p>\n<p>The last change we have to make is in the assertion: to see how many items are\nin the inner vector, we call <code class=\"hljs\">borrow</code> on the <code class=\"hljs\">RefCell&lt;Vec&lt;String&gt;&gt;</code> to get an\nimmutable reference to the vector.</p>\n<p>Now that you’ve seen how to use <code class=\"hljs\">RefCell&lt;T&gt;</code>, let’s dig into how it works!</p>\n<h4 id=\"keeping-track-of-borrows-at-runtime-with-refcellt\"><a class=\"header\" href=\"#keeping-track-of-borrows-at-runtime-with-refcellt\">Keeping Track of Borrows at Runtime with <code>RefCell&lt;T&gt;</code></a></h4>\n<p>When creating immutable and mutable references, we use the <code class=\"hljs\">&amp;</code> and <code class=\"hljs\">&amp;mut</code>\nsyntax, respectively. With <code class=\"hljs\">RefCell&lt;T&gt;</code>, we use the <code class=\"hljs\">borrow</code> and <code class=\"hljs\">borrow_mut</code>\nmethods, which are part of the safe API that belongs to <code class=\"hljs\">RefCell&lt;T&gt;</code>. The\n<code class=\"hljs\">borrow</code> method returns the smart pointer type <code class=\"hljs\">Ref&lt;T&gt;</code>, and <code class=\"hljs\">borrow_mut</code>\nreturns the smart pointer type <code class=\"hljs\">RefMut&lt;T&gt;</code>. Both types implement <code class=\"hljs\">Deref</code>, so we\ncan treat them like regular references.</p>\n<p>The <code class=\"hljs\">RefCell&lt;T&gt;</code> keeps track of how many <code class=\"hljs\">Ref&lt;T&gt;</code> and <code class=\"hljs\">RefMut&lt;T&gt;</code> smart\npointers are currently active. Every time we call <code class=\"hljs\">borrow</code>, the <code class=\"hljs\">RefCell&lt;T&gt;</code>\nincreases its count of how many immutable borrows are active. When a <code class=\"hljs\">Ref&lt;T&gt;</code>\nvalue goes out of scope, the count of immutable borrows goes down by one. Just\nlike the compile-time borrowing rules, <code class=\"hljs\">RefCell&lt;T&gt;</code> lets us have many immutable\nborrows or one mutable borrow at any point in time.</p>\n<p>If we try to violate these rules, rather than getting a compiler error as we\nwould with references, the implementation of <code class=\"hljs\">RefCell&lt;T&gt;</code> will panic at\nruntime. Listing 15-23 shows a modification of the implementation of <code class=\"hljs\">send</code> in\nListing 15-22. We’re deliberately trying to create two mutable borrows active\nfor the same scope to illustrate that <code class=\"hljs\">RefCell&lt;T&gt;</code> prevents us from doing this\nat runtime.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/panics.svg\" title=\"This code panics!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore panics hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Messenger</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">send</span></span>(&amp;<span class=\"hljs-keyword\">self</span>, msg: &amp;<span class=\"hljs-built_in\">str</span>);\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">LimitTracker</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, T: Messenger&gt; {\n</span><span class=\"boring\">    messenger: &amp;<span class=\"hljs-symbol\">'a</span> T,\n</span><span class=\"boring\">    value: <span class=\"hljs-built_in\">usize</span>,\n</span><span class=\"boring\">    max: <span class=\"hljs-built_in\">usize</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; LimitTracker&lt;<span class=\"hljs-symbol\">'a</span>, T&gt;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">where</span>\n</span><span class=\"boring\">    T: Messenger,\n</span><span class=\"boring\">{\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(messenger: &amp;<span class=\"hljs-symbol\">'a</span> T, max: <span class=\"hljs-built_in\">usize</span>) -&gt; LimitTracker&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; {\n</span><span class=\"boring\">        LimitTracker {\n</span><span class=\"boring\">            messenger,\n</span><span class=\"boring\">            value: <span class=\"hljs-number\">0</span>,\n</span><span class=\"boring\">            max,\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">set_value</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, value: <span class=\"hljs-built_in\">usize</span>) {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">self</span>.value = value;\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> percentage_of_max = <span class=\"hljs-keyword\">self</span>.value <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">f64</span> / <span class=\"hljs-keyword\">self</span>.max <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">f64</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> percentage_of_max &gt;= <span class=\"hljs-number\">1.0</span> {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">self</span>.messenger.send(<span class=\"hljs-string\">\"Error: You are over your quota!\"</span>);\n</span><span class=\"boring\">        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> percentage_of_max &gt;= <span class=\"hljs-number\">0.9</span> {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">self</span>.messenger\n</span><span class=\"boring\">                .send(<span class=\"hljs-string\">\"Urgent warning: You've used up over 90% of your quota!\"</span>);\n</span><span class=\"boring\">        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> percentage_of_max &gt;= <span class=\"hljs-number\">0.75</span> {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">self</span>.messenger\n</span><span class=\"boring\">                .send(<span class=\"hljs-string\">\"Warning: You've used up over 75% of your quota!\"</span>);\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-meta\">#[cfg(test)]</span>\n</span><span class=\"boring\"><span class=\"hljs-keyword\">mod</span> tests {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">use</span> super::*;\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">use</span> std::cell::RefCell;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">MockMessenger</span></span> {\n</span><span class=\"boring\">        sent_messages: RefCell&lt;<span class=\"hljs-built_in\">Vec</span>&lt;<span class=\"hljs-built_in\">String</span>&gt;&gt;,\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">impl</span> MockMessenger {\n</span><span class=\"boring\">        <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>() -&gt; MockMessenger {\n</span><span class=\"boring\">            MockMessenger {\n</span><span class=\"boring\">                sent_messages: RefCell::new(<span class=\"hljs-built_in\">vec!</span>[]),\n</span><span class=\"boring\">            }\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span>    <span class=\"hljs-keyword\">impl</span> Messenger <span class=\"hljs-keyword\">for</span> MockMessenger {\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">send</span></span>(&amp;<span class=\"hljs-keyword\">self</span>, message: &amp;<span class=\"hljs-built_in\">str</span>) {\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> one_borrow = <span class=\"hljs-keyword\">self</span>.sent_messages.borrow_mut();\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> two_borrow = <span class=\"hljs-keyword\">self</span>.sent_messages.borrow_mut();\n\n            one_borrow.push(<span class=\"hljs-built_in\">String</span>::from(message));\n            two_borrow.push(<span class=\"hljs-built_in\">String</span>::from(message));\n        }\n    }\n<span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-meta\">#[test]</span>\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">it_sends_an_over_75_percent_warning_message</span></span>() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> mock_messenger = MockMessenger::new();\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> limit_tracker = LimitTracker::new(&amp;mock_messenger, <span class=\"hljs-number\">100</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">        limit_tracker.set_value(<span class=\"hljs-number\">80</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert_eq!</span>(mock_messenger.sent_messages.borrow().len(), <span class=\"hljs-number\">1</span>);\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre>\n<p><span class=\"caption\">Listing 15-23: Creating two mutable references in the\nsame scope to see that <code class=\"hljs\">RefCell&lt;T&gt;</code> will panic</span></p>\n<p>We create a variable <code class=\"hljs\">one_borrow</code> for the <code class=\"hljs\">RefMut&lt;T&gt;</code> smart pointer returned\nfrom <code class=\"hljs\">borrow_mut</code>. Then we create another mutable borrow in the same way in the\nvariable <code class=\"hljs\">two_borrow</code>. This makes two mutable references in the same scope,\nwhich isn’t allowed. When we run the tests for our library, the code in Listing\n15-23 will compile without any errors, but the test will fail:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo <span class=\"hljs-built_in\">test</span></span>\n   Compiling limit-tracker v0.1.0 (file:///projects/limit-tracker)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.91s\n     Running unittests src/lib.rs (target/debug/deps/limit_tracker-e599811fa246dbde)\n\nrunning 1 test\ntest tests::it_sends_an_over_75_percent_warning_message ... FAILED\n\nfailures:\n\n---- tests::it_sends_an_over_75_percent_warning_message stdout ----\nthread 'tests::it_sends_an_over_75_percent_warning_message' panicked at src/lib.rs:60:53:\nalready borrowed: BorrowMutError\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\n\nfailures:\n    tests::it_sends_an_over_75_percent_warning_message\n\ntest result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\nerror: test failed, to rerun pass `--lib`\n</code></pre>\n<p>Notice that the code panicked with the message <code class=\"hljs\">already borrowed: BorrowMutError</code>. This is how <code class=\"hljs\">RefCell&lt;T&gt;</code> handles violations of the borrowing\nrules at runtime.</p>\n<p>Choosing to catch borrowing errors at runtime rather than compile time, as\nwe’ve done here, means you’d potentially be finding mistakes in your code later\nin the development process: possibly not until your code was deployed to\nproduction. Also, your code would incur a small runtime performance penalty as\na result of keeping track of the borrows at runtime rather than compile time.\nHowever, using <code class=\"hljs\">RefCell&lt;T&gt;</code> makes it possible to write a mock object that can\nmodify itself to keep track of the messages it has seen while you’re using it\nin a context where only immutable values are allowed. You can use <code class=\"hljs\">RefCell&lt;T&gt;</code>\ndespite its trade-offs to get more functionality than regular references\nprovide.</p>\n<h3 id=\"having-multiple-owners-of-mutable-data-by-combining-rct-and-refcellt\"><a class=\"header\" href=\"#having-multiple-owners-of-mutable-data-by-combining-rct-and-refcellt\">Having Multiple Owners of Mutable Data by Combining <code>Rc&lt;T&gt;</code> and <code>RefCell&lt;T&gt;</code></a></h3>\n<p>A common way to use <code class=\"hljs\">RefCell&lt;T&gt;</code> is in combination with <code class=\"hljs\">Rc&lt;T&gt;</code>. Recall that\n<code class=\"hljs\">Rc&lt;T&gt;</code> lets you have multiple owners of some data, but it only gives immutable\naccess to that data. If you have an <code class=\"hljs\">Rc&lt;T&gt;</code> that holds a <code class=\"hljs\">RefCell&lt;T&gt;</code>, you can\nget a value that can have multiple owners <em>and</em> that you can mutate!</p>\n<p>For example, recall the cons list example in Listing 15-18 where we used\n<code class=\"hljs\">Rc&lt;T&gt;</code> to allow multiple lists to share ownership of another list. Because\n<code class=\"hljs\">Rc&lt;T&gt;</code> holds only immutable values, we can’t change any of the values in the\nlist once we’ve created them. Let’s add in <code class=\"hljs\">RefCell&lt;T&gt;</code> to gain the ability to\nchange the values in the lists. Listing 15-24 shows that by using a\n<code class=\"hljs\">RefCell&lt;T&gt;</code> in the <code class=\"hljs\">Cons</code> definition, we can modify the value stored in all\nthe lists:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-meta\">#[derive(Debug)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">List</span></span> {\n    Cons(Rc&lt;RefCell&lt;<span class=\"hljs-built_in\">i32</span>&gt;&gt;, Rc&lt;List&gt;),\n    Nil,\n}\n\n<span class=\"hljs-keyword\">use</span> crate::List::{Cons, Nil};\n<span class=\"hljs-keyword\">use</span> std::cell::RefCell;\n<span class=\"hljs-keyword\">use</span> std::rc::Rc;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> value = Rc::new(RefCell::new(<span class=\"hljs-number\">5</span>));\n\n    <span class=\"hljs-keyword\">let</span> a = Rc::new(Cons(Rc::clone(&amp;value), Rc::new(Nil)));\n\n    <span class=\"hljs-keyword\">let</span> b = Cons(Rc::new(RefCell::new(<span class=\"hljs-number\">3</span>)), Rc::clone(&amp;a));\n    <span class=\"hljs-keyword\">let</span> c = Cons(Rc::new(RefCell::new(<span class=\"hljs-number\">4</span>)), Rc::clone(&amp;a));\n\n    *value.borrow_mut() += <span class=\"hljs-number\">10</span>;\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"a after = {a:?}\"</span>);\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"b after = {b:?}\"</span>);\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"c after = {c:?}\"</span>);\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 15-24: Using <code class=\"hljs\">Rc&lt;RefCell&lt;i32&gt;&gt;</code> to create a\n<code class=\"hljs\">List</code> that we can mutate</span></p>\n<p>We create a value that is an instance of <code class=\"hljs\">Rc&lt;RefCell&lt;i32&gt;&gt;</code> and store it in a\nvariable named <code class=\"hljs\">value</code> so we can access it directly later. Then we create a\n<code class=\"hljs\">List</code> in <code class=\"hljs\">a</code> with a <code class=\"hljs\">Cons</code> variant that holds <code class=\"hljs\">value</code>. We need to clone\n<code class=\"hljs\">value</code> so both <code class=\"hljs\">a</code> and <code class=\"hljs\">value</code> have ownership of the inner <code class=\"hljs\">5</code> value rather\nthan transferring ownership from <code class=\"hljs\">value</code> to <code class=\"hljs\">a</code> or having <code class=\"hljs\">a</code> borrow from\n<code class=\"hljs\">value</code>.</p>\n<p>We wrap the list <code class=\"hljs\">a</code> in an <code class=\"hljs\">Rc&lt;T&gt;</code> so when we create lists <code class=\"hljs\">b</code> and <code class=\"hljs\">c</code>, they\ncan both refer to <code class=\"hljs\">a</code>, which is what we did in Listing 15-18.</p>\n<p>After we’ve created the lists in <code class=\"hljs\">a</code>, <code class=\"hljs\">b</code>, and <code class=\"hljs\">c</code>, we want to add 10 to the\nvalue in <code class=\"hljs\">value</code>. We do this by calling <code class=\"hljs\">borrow_mut</code> on <code class=\"hljs\">value</code>, which uses the\nautomatic dereferencing feature we discussed in Chapter 5 (see the section\n<a href=\"ch05-03-method-syntax.html#wheres-the---operator\">“Where’s the <code class=\"hljs\">-&gt;</code> Operator?”</a><!-- ignore -->) to\ndereference the <code class=\"hljs\">Rc&lt;T&gt;</code> to the inner <code class=\"hljs\">RefCell&lt;T&gt;</code> value. The <code class=\"hljs\">borrow_mut</code>\nmethod returns a <code class=\"hljs\">RefMut&lt;T&gt;</code> smart pointer, and we use the dereference operator\non it and change the inner value.</p>\n<p>When we print <code class=\"hljs\">a</code>, <code class=\"hljs\">b</code>, and <code class=\"hljs\">c</code>, we can see that they all have the modified\nvalue of 15 rather than 5:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling cons-list v0.1.0 (file:///projects/cons-list)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.63s\n     Running `target/debug/cons-list`\na after = Cons(RefCell { value: 15 }, Nil)\nb after = Cons(RefCell { value: 3 }, Cons(RefCell { value: 15 }, Nil))\nc after = Cons(RefCell { value: 4 }, Cons(RefCell { value: 15 }, Nil))\n</code></pre>\n<p>This technique is pretty neat! By using <code class=\"hljs\">RefCell&lt;T&gt;</code>, we have an outwardly\nimmutable <code class=\"hljs\">List</code> value. But we can use the methods on <code class=\"hljs\">RefCell&lt;T&gt;</code> that provide\naccess to its interior mutability so we can modify our data when we need to.\nThe runtime checks of the borrowing rules protect us from data races, and it’s\nsometimes worth trading a bit of speed for this flexibility in our data\nstructures. Note that <code class=\"hljs\">RefCell&lt;T&gt;</code> does not work for multithreaded code!\n<code class=\"hljs\">Mutex&lt;T&gt;</code> is the thread-safe version of <code class=\"hljs\">RefCell&lt;T&gt;</code> and we’ll discuss\n<code class=\"hljs\">Mutex&lt;T&gt;</code> in Chapter 16.</p>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"ch15-04-rc.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"ch15-06-reference-cycles.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"ch15-04-rc.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"ch15-06-reference-cycles.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"elasticlunr.min.js\"></script>\n        <script src=\"mark.min.js\"></script>\n        <script src=\"searcher.js\"></script>\n\n        <script src=\"clipboard.min.js\"></script>\n        <script src=\"highlight.js\"></script>\n        <script src=\"book.js\"></script>\n\n        <!-- Custom JS scripts -->\n        <script src=\"ferris.js\"></script>\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:08:29.617Z"
}