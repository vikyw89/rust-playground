{
	"title": "pattern.rs - source",
	"url": "https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#952",
	"markdown": "# pattern.rs - source\n\n```\n//! The string Pattern API.\n//!\n//! The Pattern API provides a generic mechanism for using different pattern\n//! types when searching through a string.\n//!\n//! For more details, see the traits [`Pattern`], [`Searcher`],\n//! [`ReverseSearcher`], and [`DoubleEndedSearcher`].\n//!\n//! Although this API is unstable, it is exposed via stable APIs on the\n//! [`str`] type.\n//!\n//! # Examples\n//!\n//! [`Pattern`] is [implemented][pattern-impls] in the stable API for\n//! [`&str`][`str`], [`char`], slices of [`char`], and functions and closures\n//! implementing `FnMut(char) -> bool`.\n//!\n//! ```\n//! let s = \"Can you find a needle in a haystack?\";\n//!\n//! // &str pattern\n//! assert_eq!(s.find(\"you\"), Some(4));\n//! // char pattern\n//! assert_eq!(s.find('n'), Some(2));\n//! // array of chars pattern\n//! assert_eq!(s.find(&['a', 'e', 'i', 'o', 'u']), Some(1));\n//! // slice of chars pattern\n//! assert_eq!(s.find(&['a', 'e', 'i', 'o', 'u'][..]), Some(1));\n//! // closure pattern\n//! assert_eq!(s.find(|c: char| c.is_ascii_punctuation()), Some(35));\n//! ```\n//!\n//! [pattern-impls]: Pattern#implementors\n\n#![unstable(\n    feature = \"pattern\",\n    reason = \"API not fully fleshed out and ready to be stabilized\",\n    issue = \"27721\"\n)]\n\nuse crate::cmp;\nuse crate::cmp::Ordering;\nuse crate::convert::TryInto as _;\nuse crate::fmt;\nuse crate::slice::memchr;\n\n// Pattern\n\n/// A string pattern.\n///\n/// A `Pattern<'a>` expresses that the implementing type\n/// can be used as a string pattern for searching in a [`&'a str`][str].\n///\n/// For example, both `'a'` and `\"aa\"` are patterns that\n/// would match at index `1` in the string `\"baaaab\"`.\n///\n/// The trait itself acts as a builder for an associated\n/// [`Searcher`] type, which does the actual work of finding\n/// occurrences of the pattern in a string.\n///\n/// Depending on the type of the pattern, the behaviour of methods like\n/// [`str::find`] and [`str::contains`] can change. The table below describes\n/// some of those behaviours.\n///\n/// | Pattern type             | Match condition                           |\n/// |--------------------------|-------------------------------------------|\n/// | `&str`                   | is substring                              |\n/// | `char`                   | is contained in string                    |\n/// | `&[char]`                | any char in slice is contained in string  |\n/// | `F: FnMut(char) -> bool` | `F` returns `true` for a char in string   |\n/// | `&&str`                  | is substring                              |\n/// | `&String`                | is substring                              |\n///\n/// # Examples\n///\n/// ```\n/// // &str\n/// assert_eq!(\"abaaa\".find(\"ba\"), Some(1));\n/// assert_eq!(\"abaaa\".find(\"bac\"), None);\n///\n/// // char\n/// assert_eq!(\"abaaa\".find('a'), Some(0));\n/// assert_eq!(\"abaaa\".find('b'), Some(1));\n/// assert_eq!(\"abaaa\".find('c'), None);\n///\n/// // &[char; N]\n/// assert_eq!(\"ab\".find(&['b', 'a']), Some(0));\n/// assert_eq!(\"abaaa\".find(&['a', 'z']), Some(0));\n/// assert_eq!(\"abaaa\".find(&['c', 'd']), None);\n///\n/// // &[char]\n/// assert_eq!(\"ab\".find(&['b', 'a'][..]), Some(0));\n/// assert_eq!(\"abaaa\".find(&['a', 'z'][..]), Some(0));\n/// assert_eq!(\"abaaa\".find(&['c', 'd'][..]), None);\n///\n/// // FnMut(char) -> bool\n/// assert_eq!(\"abcdef_z\".find(|ch| ch > 'd' && ch < 'y'), Some(4));\n/// assert_eq!(\"abcddd_z\".find(|ch| ch > 'd' && ch < 'y'), None);\n/// ```\npub trait Pattern<'a>: Sized {\n    /// Associated searcher for this pattern\n    type Searcher: Searcher<'a>;\n\n    /// Constructs the associated searcher from\n    /// `self` and the `haystack` to search in.\n    fn into_searcher(self, haystack: &'a str) -> Self::Searcher;\n\n    /// Checks whether the pattern matches anywhere in the haystack\n    #[inline]\n    fn is_contained_in(self, haystack: &'a str) -> bool {\n        self.into_searcher(haystack).next_match().is_some()\n    }\n\n    /// Checks whether the pattern matches at the front of the haystack\n    #[inline]\n    fn is_prefix_of(self, haystack: &'a str) -> bool {\n        matches!(self.into_searcher(haystack).next(), SearchStep::Match(0, _))\n    }\n\n    /// Checks whether the pattern matches at the back of the haystack\n    #[inline]\n    fn is_suffix_of(self, haystack: &'a str) -> bool\n    where\n        Self::Searcher: ReverseSearcher<'a>,\n    {\n        matches!(self.into_searcher(haystack).next_back(), SearchStep::Match(_, j) if haystack.len() == j)\n    }\n\n    /// Removes the pattern from the front of haystack, if it matches.\n    #[inline]\n    fn strip_prefix_of(self, haystack: &'a str) -> Option<&'a str> {\n        if let SearchStep::Match(start, len) = self.into_searcher(haystack).next() {\n            debug_assert_eq!(\n                start, 0,\n                \"The first search step from Searcher \\\n                 must include the first character\"\n            );\n            // SAFETY: `Searcher` is known to return valid indices.\n            unsafe { Some(haystack.get_unchecked(len..)) }\n        } else {\n            None\n        }\n    }\n\n    /// Removes the pattern from the back of haystack, if it matches.\n    #[inline]\n    fn strip_suffix_of(self, haystack: &'a str) -> Option<&'a str>\n    where\n        Self::Searcher: ReverseSearcher<'a>,\n    {\n        if let SearchStep::Match(start, end) = self.into_searcher(haystack).next_back() {\n            debug_assert_eq!(\n                end,\n                haystack.len(),\n                \"The first search step from ReverseSearcher \\\n                 must include the last character\"\n            );\n            // SAFETY: `Searcher` is known to return valid indices.\n            unsafe { Some(haystack.get_unchecked(..start)) }\n        } else {\n            None\n        }\n    }\n}\n\n// Searcher\n\n/// Result of calling [`Searcher::next()`] or [`ReverseSearcher::next_back()`].\n#[derive(Copy, Clone, Eq, PartialEq, Debug)]\npub enum SearchStep {\n    /// Expresses that a match of the pattern has been found at\n    /// `haystack[a..b]`.\n    Match(usize, usize),\n    /// Expresses that `haystack[a..b]` has been rejected as a possible match\n    /// of the pattern.\n    ///\n    /// Note that there might be more than one `Reject` between two `Match`es,\n    /// there is no requirement for them to be combined into one.\n    Reject(usize, usize),\n    /// Expresses that every byte of the haystack has been visited, ending\n    /// the iteration.\n    Done,\n}\n\n/// A searcher for a string pattern.\n///\n/// This trait provides methods for searching for non-overlapping\n/// matches of a pattern starting from the front (left) of a string.\n///\n/// It will be implemented by associated `Searcher`\n/// types of the [`Pattern`] trait.\n///\n/// The trait is marked unsafe because the indices returned by the\n/// [`next()`][Searcher::next] methods are required to lie on valid utf8\n/// boundaries in the haystack. This enables consumers of this trait to\n/// slice the haystack without additional runtime checks.\npub unsafe trait Searcher<'a> {\n    /// Getter for the underlying string to be searched in\n    ///\n    /// Will always return the same [`&str`][str].\n    fn haystack(&self) -> &'a str;\n\n    /// Performs the next search step starting from the front.\n    ///\n    /// - Returns [`Match(a, b)`][SearchStep::Match] if `haystack[a..b]` matches\n    ///   the pattern.\n    /// - Returns [`Reject(a, b)`][SearchStep::Reject] if `haystack[a..b]` can\n    ///   not match the pattern, even partially.\n    /// - Returns [`Done`][SearchStep::Done] if every byte of the haystack has\n    ///   been visited.\n    ///\n    /// The stream of [`Match`][SearchStep::Match] and\n    /// [`Reject`][SearchStep::Reject] values up to a [`Done`][SearchStep::Done]\n    /// will contain index ranges that are adjacent, non-overlapping,\n    /// covering the whole haystack, and laying on utf8 boundaries.\n    ///\n    /// A [`Match`][SearchStep::Match] result needs to contain the whole matched\n    /// pattern, however [`Reject`][SearchStep::Reject] results may be split up\n    /// into arbitrary many adjacent fragments. Both ranges may have zero length.\n    ///\n    /// As an example, the pattern `\"aaa\"` and the haystack `\"cbaaaaab\"`\n    /// might produce the stream\n    /// `[Reject(0, 1), Reject(1, 2), Match(2, 5), Reject(5, 8)]`\n    fn next(&mut self) -> SearchStep;\n\n    /// Finds the next [`Match`][SearchStep::Match] result. See [`next()`][Searcher::next].\n    ///\n    /// Unlike [`next()`][Searcher::next], there is no guarantee that the returned ranges\n    /// of this and [`next_reject`][Searcher::next_reject] will overlap. This will return\n    /// `(start_match, end_match)`, where start_match is the index of where\n    /// the match begins, and end_match is the index after the end of the match.\n    #[inline]\n    fn next_match(&mut self) -> Option<(usize, usize)> {\n        loop {\n            match self.next() {\n                SearchStep::Match(a, b) => return Some((a, b)),\n                SearchStep::Done => return None,\n                _ => continue,\n            }\n        }\n    }\n\n    /// Finds the next [`Reject`][SearchStep::Reject] result. See [`next()`][Searcher::next]\n    /// and [`next_match()`][Searcher::next_match].\n    ///\n    /// Unlike [`next()`][Searcher::next], there is no guarantee that the returned ranges\n    /// of this and [`next_match`][Searcher::next_match] will overlap.\n    #[inline]\n    fn next_reject(&mut self) -> Option<(usize, usize)> {\n        loop {\n            match self.next() {\n                SearchStep::Reject(a, b) => return Some((a, b)),\n                SearchStep::Done => return None,\n                _ => continue,\n            }\n        }\n    }\n}\n\n/// A reverse searcher for a string pattern.\n///\n/// This trait provides methods for searching for non-overlapping\n/// matches of a pattern starting from the back (right) of a string.\n///\n/// It will be implemented by associated [`Searcher`]\n/// types of the [`Pattern`] trait if the pattern supports searching\n/// for it from the back.\n///\n/// The index ranges returned by this trait are not required\n/// to exactly match those of the forward search in reverse.\n///\n/// For the reason why this trait is marked unsafe, see the\n/// parent trait [`Searcher`].\npub unsafe trait ReverseSearcher<'a>: Searcher<'a> {\n    /// Performs the next search step starting from the back.\n    ///\n    /// - Returns [`Match(a, b)`][SearchStep::Match] if `haystack[a..b]`\n    ///   matches the pattern.\n    /// - Returns [`Reject(a, b)`][SearchStep::Reject] if `haystack[a..b]`\n    ///   can not match the pattern, even partially.\n    /// - Returns [`Done`][SearchStep::Done] if every byte of the haystack\n    ///   has been visited\n    ///\n    /// The stream of [`Match`][SearchStep::Match] and\n    /// [`Reject`][SearchStep::Reject] values up to a [`Done`][SearchStep::Done]\n    /// will contain index ranges that are adjacent, non-overlapping,\n    /// covering the whole haystack, and laying on utf8 boundaries.\n    ///\n    /// A [`Match`][SearchStep::Match] result needs to contain the whole matched\n    /// pattern, however [`Reject`][SearchStep::Reject] results may be split up\n    /// into arbitrary many adjacent fragments. Both ranges may have zero length.\n    ///\n    /// As an example, the pattern `\"aaa\"` and the haystack `\"cbaaaaab\"`\n    /// might produce the stream\n    /// `[Reject(7, 8), Match(4, 7), Reject(1, 4), Reject(0, 1)]`.\n    fn next_back(&mut self) -> SearchStep;\n\n    /// Finds the next [`Match`][SearchStep::Match] result.\n    /// See [`next_back()`][ReverseSearcher::next_back].\n    #[inline]\n    fn next_match_back(&mut self) -> Option<(usize, usize)> {\n        loop {\n            match self.next_back() {\n                SearchStep::Match(a, b) => return Some((a, b)),\n                SearchStep::Done => return None,\n                _ => continue,\n            }\n        }\n    }\n\n    /// Finds the next [`Reject`][SearchStep::Reject] result.\n    /// See [`next_back()`][ReverseSearcher::next_back].\n    #[inline]\n    fn next_reject_back(&mut self) -> Option<(usize, usize)> {\n        loop {\n            match self.next_back() {\n                SearchStep::Reject(a, b) => return Some((a, b)),\n                SearchStep::Done => return None,\n                _ => continue,\n            }\n        }\n    }\n}\n\n/// A marker trait to express that a [`ReverseSearcher`]\n/// can be used for a [`DoubleEndedIterator`] implementation.\n///\n/// For this, the impl of [`Searcher`] and [`ReverseSearcher`] need\n/// to follow these conditions:\n///\n/// - All results of `next()` need to be identical\n///   to the results of `next_back()` in reverse order.\n/// - `next()` and `next_back()` need to behave as\n///   the two ends of a range of values, that is they\n///   can not \"walk past each other\".\n///\n/// # Examples\n///\n/// `char::Searcher` is a `DoubleEndedSearcher` because searching for a\n/// [`char`] only requires looking at one at a time, which behaves the same\n/// from both ends.\n///\n/// `(&str)::Searcher` is not a `DoubleEndedSearcher` because\n/// the pattern `\"aa\"` in the haystack `\"aaa\"` matches as either\n/// `\"[aa]a\"` or `\"a[aa]\"`, depending on which side it is searched.\npub trait DoubleEndedSearcher<'a>: ReverseSearcher<'a> {}\n\n/////////////////////////////////////////////////////////////////////////////\n// Impl for char\n/////////////////////////////////////////////////////////////////////////////\n\n/// Associated type for `<char as Pattern<'a>>::Searcher`.\n#[derive(Clone, Debug)]\npub struct CharSearcher<'a> {\n    haystack: &'a str,\n    // safety invariant: `finger`/`finger_back` must be a valid utf8 byte index of `haystack`\n    // This invariant can be broken *within* next_match and next_match_back, however\n    // they must exit with fingers on valid code point boundaries.\n    /// `finger` is the current byte index of the forward search.\n    /// Imagine that it exists before the byte at its index, i.e.\n    /// `haystack[finger]` is the first byte of the slice we must inspect during\n    /// forward searching\n    finger: usize,\n    /// `finger_back` is the current byte index of the reverse search.\n    /// Imagine that it exists after the byte at its index, i.e.\n    /// haystack[finger_back - 1] is the last byte of the slice we must inspect during\n    /// forward searching (and thus the first byte to be inspected when calling next_back()).\n    finger_back: usize,\n    /// The character being searched for\n    needle: char,\n\n    // safety invariant: `utf8_size` must be less than 5\n    /// The number of bytes `needle` takes up when encoded in utf8.\n    utf8_size: u8,\n    /// A utf8 encoded copy of the `needle`\n    utf8_encoded: [u8; 4],\n}\n\nimpl CharSearcher<'_> {\n    fn utf8_size(&self) -> usize {\n        self.utf8_size.into()\n    }\n}\n\nunsafe impl<'a> Searcher<'a> for CharSearcher<'a> {\n    #[inline]\n    fn haystack(&self) -> &'a str {\n        self.haystack\n    }\n    #[inline]\n    fn next(&mut self) -> SearchStep {\n        let old_finger = self.finger;\n        // SAFETY: 1-4 guarantee safety of `get_unchecked`\n        // 1. `self.finger` and `self.finger_back` are kept on unicode boundaries\n        //    (this is invariant)\n        // 2. `self.finger >= 0` since it starts at 0 and only increases\n        // 3. `self.finger < self.finger_back` because otherwise the char `iter`\n        //    would return `SearchStep::Done`\n        // 4. `self.finger` comes before the end of the haystack because `self.finger_back`\n        //    starts at the end and only decreases\n        let slice = unsafe { self.haystack.get_unchecked(old_finger..self.finger_back) };\n        let mut iter = slice.chars();\n        let old_len = iter.iter.len();\n        if let Some(ch) = iter.next() {\n            // add byte offset of current character\n            // without re-encoding as utf-8\n            self.finger += old_len - iter.iter.len();\n            if ch == self.needle {\n                SearchStep::Match(old_finger, self.finger)\n            } else {\n                SearchStep::Reject(old_finger, self.finger)\n            }\n        } else {\n            SearchStep::Done\n        }\n    }\n    #[inline]\n    fn next_match(&mut self) -> Option<(usize, usize)> {\n        loop {\n            // get the haystack after the last character found\n            let bytes = self.haystack.as_bytes().get(self.finger..self.finger_back)?;\n            // the last byte of the utf8 encoded needle\n            // SAFETY: we have an invariant that `utf8_size < 5`\n            let last_byte = unsafe { *self.utf8_encoded.get_unchecked(self.utf8_size() - 1) };\n            if let Some(index) = memchr::memchr(last_byte, bytes) {\n                // The new finger is the index of the byte we found,\n                // plus one, since we memchr'd for the last byte of the character.\n                //\n                // Note that this doesn't always give us a finger on a UTF8 boundary.\n                // If we *didn't* find our character\n                // we may have indexed to the non-last byte of a 3-byte or 4-byte character.\n                // We can't just skip to the next valid starting byte because a character like\n                // ꁁ (U+A041 YI SYLLABLE PA), utf-8 `EA 81 81` will have us always find\n                // the second byte when searching for the third.\n                //\n                // However, this is totally okay. While we have the invariant that\n                // self.finger is on a UTF8 boundary, this invariant is not relied upon\n                // within this method (it is relied upon in CharSearcher::next()).\n                //\n                // We only exit this method when we reach the end of the string, or if we\n                // find something. When we find something the `finger` will be set\n                // to a UTF8 boundary.\n                self.finger += index + 1;\n                if self.finger >= self.utf8_size() {\n                    let found_char = self.finger - self.utf8_size();\n                    if let Some(slice) = self.haystack.as_bytes().get(found_char..self.finger) {\n                        if slice == &self.utf8_encoded[0..self.utf8_size()] {\n                            return Some((found_char, self.finger));\n                        }\n                    }\n                }\n            } else {\n                // found nothing, exit\n                self.finger = self.finger_back;\n                return None;\n            }\n        }\n    }\n\n    // let next_reject use the default implementation from the Searcher trait\n}\n\nunsafe impl<'a> ReverseSearcher<'a> for CharSearcher<'a> {\n    #[inline]\n    fn next_back(&mut self) -> SearchStep {\n        let old_finger = self.finger_back;\n        // SAFETY: see the comment for next() above\n        let slice = unsafe { self.haystack.get_unchecked(self.finger..old_finger) };\n        let mut iter = slice.chars();\n        let old_len = iter.iter.len();\n        if let Some(ch) = iter.next_back() {\n            // subtract byte offset of current character\n            // without re-encoding as utf-8\n            self.finger_back -= old_len - iter.iter.len();\n            if ch == self.needle {\n                SearchStep::Match(self.finger_back, old_finger)\n            } else {\n                SearchStep::Reject(self.finger_back, old_finger)\n            }\n        } else {\n            SearchStep::Done\n        }\n    }\n    #[inline]\n    fn next_match_back(&mut self) -> Option<(usize, usize)> {\n        let haystack = self.haystack.as_bytes();\n        loop {\n            // get the haystack up to but not including the last character searched\n            let bytes = haystack.get(self.finger..self.finger_back)?;\n            // the last byte of the utf8 encoded needle\n            // SAFETY: we have an invariant that `utf8_size < 5`\n            let last_byte = unsafe { *self.utf8_encoded.get_unchecked(self.utf8_size() - 1) };\n            if let Some(index) = memchr::memrchr(last_byte, bytes) {\n                // we searched a slice that was offset by self.finger,\n                // add self.finger to recoup the original index\n                let index = self.finger + index;\n                // memrchr will return the index of the byte we wish to\n                // find. In case of an ASCII character, this is indeed\n                // were we wish our new finger to be (\"after\" the found\n                // char in the paradigm of reverse iteration). For\n                // multibyte chars we need to skip down by the number of more\n                // bytes they have than ASCII\n                let shift = self.utf8_size() - 1;\n                if index >= shift {\n                    let found_char = index - shift;\n                    if let Some(slice) = haystack.get(found_char..(found_char + self.utf8_size())) {\n                        if slice == &self.utf8_encoded[0..self.utf8_size()] {\n                            // move finger to before the character found (i.e., at its start index)\n                            self.finger_back = found_char;\n                            return Some((self.finger_back, self.finger_back + self.utf8_size()));\n                        }\n                    }\n                }\n                // We can't use finger_back = index - size + 1 here. If we found the last char\n                // of a different-sized character (or the middle byte of a different character)\n                // we need to bump the finger_back down to `index`. This similarly makes\n                // `finger_back` have the potential to no longer be on a boundary,\n                // but this is OK since we only exit this function on a boundary\n                // or when the haystack has been searched completely.\n                //\n                // Unlike next_match this does not\n                // have the problem of repeated bytes in utf-8 because\n                // we're searching for the last byte, and we can only have\n                // found the last byte when searching in reverse.\n                self.finger_back = index;\n            } else {\n                self.finger_back = self.finger;\n                // found nothing, exit\n                return None;\n            }\n        }\n    }\n\n    // let next_reject_back use the default implementation from the Searcher trait\n}\n\nimpl<'a> DoubleEndedSearcher<'a> for CharSearcher<'a> {}\n\n/// Searches for chars that are equal to a given [`char`].\n///\n/// # Examples\n///\n/// ```\n/// assert_eq!(\"Hello world\".find('o'), Some(4));\n/// ```\nimpl<'a> Pattern<'a> for char {\n    type Searcher = CharSearcher<'a>;\n\n    #[inline]\n    fn into_searcher(self, haystack: &'a str) -> Self::Searcher {\n        let mut utf8_encoded = [0; 4];\n        let utf8_size = self\n            .encode_utf8(&mut utf8_encoded)\n            .len()\n            .try_into()\n            .expect(\"char len should be less than 255\");\n\n        CharSearcher {\n            haystack,\n            finger: 0,\n            finger_back: haystack.len(),\n            needle: self,\n            utf8_size,\n            utf8_encoded,\n        }\n    }\n\n    #[inline]\n    fn is_contained_in(self, haystack: &'a str) -> bool {\n        if (self as u32) < 128 {\n            haystack.as_bytes().contains(&(self as u8))\n        } else {\n            let mut buffer = [0u8; 4];\n            self.encode_utf8(&mut buffer).is_contained_in(haystack)\n        }\n    }\n\n    #[inline]\n    fn is_prefix_of(self, haystack: &'a str) -> bool {\n        self.encode_utf8(&mut [0u8; 4]).is_prefix_of(haystack)\n    }\n\n    #[inline]\n    fn strip_prefix_of(self, haystack: &'a str) -> Option<&'a str> {\n        self.encode_utf8(&mut [0u8; 4]).strip_prefix_of(haystack)\n    }\n\n    #[inline]\n    fn is_suffix_of(self, haystack: &'a str) -> bool\n    where\n        Self::Searcher: ReverseSearcher<'a>,\n    {\n        self.encode_utf8(&mut [0u8; 4]).is_suffix_of(haystack)\n    }\n\n    #[inline]\n    fn strip_suffix_of(self, haystack: &'a str) -> Option<&'a str>\n    where\n        Self::Searcher: ReverseSearcher<'a>,\n    {\n        self.encode_utf8(&mut [0u8; 4]).strip_suffix_of(haystack)\n    }\n}\n\n/////////////////////////////////////////////////////////////////////////////\n// Impl for a MultiCharEq wrapper\n/////////////////////////////////////////////////////////////////////////////\n\n#[doc(hidden)]\ntrait MultiCharEq {\n    fn matches(&mut self, c: char) -> bool;\n}\n\nimpl<F> MultiCharEq for F\nwhere\n    F: FnMut(char) -> bool,\n{\n    #[inline]\n    fn matches(&mut self, c: char) -> bool {\n        (*self)(c)\n    }\n}\n\nimpl<const N: usize> MultiCharEq for [char; N] {\n    #[inline]\n    fn matches(&mut self, c: char) -> bool {\n        self.iter().any(|&m| m == c)\n    }\n}\n\nimpl<const N: usize> MultiCharEq for &[char; N] {\n    #[inline]\n    fn matches(&mut self, c: char) -> bool {\n        self.iter().any(|&m| m == c)\n    }\n}\n\nimpl MultiCharEq for &[char] {\n    #[inline]\n    fn matches(&mut self, c: char) -> bool {\n        self.iter().any(|&m| m == c)\n    }\n}\n\nstruct MultiCharEqPattern<C: MultiCharEq>(C);\n\n#[derive(Clone, Debug)]\nstruct MultiCharEqSearcher<'a, C: MultiCharEq> {\n    char_eq: C,\n    haystack: &'a str,\n    char_indices: super::CharIndices<'a>,\n}\n\nimpl<'a, C: MultiCharEq> Pattern<'a> for MultiCharEqPattern<C> {\n    type Searcher = MultiCharEqSearcher<'a, C>;\n\n    #[inline]\n    fn into_searcher(self, haystack: &'a str) -> MultiCharEqSearcher<'a, C> {\n        MultiCharEqSearcher { haystack, char_eq: self.0, char_indices: haystack.char_indices() }\n    }\n}\n\nunsafe impl<'a, C: MultiCharEq> Searcher<'a> for MultiCharEqSearcher<'a, C> {\n    #[inline]\n    fn haystack(&self) -> &'a str {\n        self.haystack\n    }\n\n    #[inline]\n    fn next(&mut self) -> SearchStep {\n        let s = &mut self.char_indices;\n        // Compare lengths of the internal byte slice iterator\n        // to find length of current char\n        let pre_len = s.iter.iter.len();\n        if let Some((i, c)) = s.next() {\n            let len = s.iter.iter.len();\n            let char_len = pre_len - len;\n            if self.char_eq.matches(c) {\n                return SearchStep::Match(i, i + char_len);\n            } else {\n                return SearchStep::Reject(i, i + char_len);\n            }\n        }\n        SearchStep::Done\n    }\n}\n\nunsafe impl<'a, C: MultiCharEq> ReverseSearcher<'a> for MultiCharEqSearcher<'a, C> {\n    #[inline]\n    fn next_back(&mut self) -> SearchStep {\n        let s = &mut self.char_indices;\n        // Compare lengths of the internal byte slice iterator\n        // to find length of current char\n        let pre_len = s.iter.iter.len();\n        if let Some((i, c)) = s.next_back() {\n            let len = s.iter.iter.len();\n            let char_len = pre_len - len;\n            if self.char_eq.matches(c) {\n                return SearchStep::Match(i, i + char_len);\n            } else {\n                return SearchStep::Reject(i, i + char_len);\n            }\n        }\n        SearchStep::Done\n    }\n}\n\nimpl<'a, C: MultiCharEq> DoubleEndedSearcher<'a> for MultiCharEqSearcher<'a, C> {}\n\n/////////////////////////////////////////////////////////////////////////////\n\nmacro_rules! pattern_methods {\n    ($t:ty, $pmap:expr, $smap:expr) => {\n        type Searcher = $t;\n\n        #[inline]\n        fn into_searcher(self, haystack: &'a str) -> $t {\n            ($smap)(($pmap)(self).into_searcher(haystack))\n        }\n\n        #[inline]\n        fn is_contained_in(self, haystack: &'a str) -> bool {\n            ($pmap)(self).is_contained_in(haystack)\n        }\n\n        #[inline]\n        fn is_prefix_of(self, haystack: &'a str) -> bool {\n            ($pmap)(self).is_prefix_of(haystack)\n        }\n\n        #[inline]\n        fn strip_prefix_of(self, haystack: &'a str) -> Option<&'a str> {\n            ($pmap)(self).strip_prefix_of(haystack)\n        }\n\n        #[inline]\n        fn is_suffix_of(self, haystack: &'a str) -> bool\n        where\n            $t: ReverseSearcher<'a>,\n        {\n            ($pmap)(self).is_suffix_of(haystack)\n        }\n\n        #[inline]\n        fn strip_suffix_of(self, haystack: &'a str) -> Option<&'a str>\n        where\n            $t: ReverseSearcher<'a>,\n        {\n            ($pmap)(self).strip_suffix_of(haystack)\n        }\n    };\n}\n\nmacro_rules! searcher_methods {\n    (forward) => {\n        #[inline]\n        fn haystack(&self) -> &'a str {\n            self.0.haystack()\n        }\n        #[inline]\n        fn next(&mut self) -> SearchStep {\n            self.0.next()\n        }\n        #[inline]\n        fn next_match(&mut self) -> Option<(usize, usize)> {\n            self.0.next_match()\n        }\n        #[inline]\n        fn next_reject(&mut self) -> Option<(usize, usize)> {\n            self.0.next_reject()\n        }\n    };\n    (reverse) => {\n        #[inline]\n        fn next_back(&mut self) -> SearchStep {\n            self.0.next_back()\n        }\n        #[inline]\n        fn next_match_back(&mut self) -> Option<(usize, usize)> {\n            self.0.next_match_back()\n        }\n        #[inline]\n        fn next_reject_back(&mut self) -> Option<(usize, usize)> {\n            self.0.next_reject_back()\n        }\n    };\n}\n\n/// Associated type for `<[char; N] as Pattern<'a>>::Searcher`.\n#[derive(Clone, Debug)]\npub struct CharArraySearcher<'a, const N: usize>(\n    <MultiCharEqPattern<[char; N]> as Pattern<'a>>::Searcher,\n);\n\n/// Associated type for `<&[char; N] as Pattern<'a>>::Searcher`.\n#[derive(Clone, Debug)]\npub struct CharArrayRefSearcher<'a, 'b, const N: usize>(\n    <MultiCharEqPattern<&'b [char; N]> as Pattern<'a>>::Searcher,\n);\n\n/// Searches for chars that are equal to any of the [`char`]s in the array.\n///\n/// # Examples\n///\n/// ```\n/// assert_eq!(\"Hello world\".find(['o', 'l']), Some(2));\n/// assert_eq!(\"Hello world\".find(['h', 'w']), Some(6));\n/// ```\nimpl<'a, const N: usize> Pattern<'a> for [char; N] {\n    pattern_methods!(CharArraySearcher<'a, N>, MultiCharEqPattern, CharArraySearcher);\n}\n\nunsafe impl<'a, const N: usize> Searcher<'a> for CharArraySearcher<'a, N> {\n    searcher_methods!(forward);\n}\n\nunsafe impl<'a, const N: usize> ReverseSearcher<'a> for CharArraySearcher<'a, N> {\n    searcher_methods!(reverse);\n}\n\nimpl<'a, const N: usize> DoubleEndedSearcher<'a> for CharArraySearcher<'a, N> {}\n\n/// Searches for chars that are equal to any of the [`char`]s in the array.\n///\n/// # Examples\n///\n/// ```\n/// assert_eq!(\"Hello world\".find(&['o', 'l']), Some(2));\n/// assert_eq!(\"Hello world\".find(&['h', 'w']), Some(6));\n/// ```\nimpl<'a, 'b, const N: usize> Pattern<'a> for &'b [char; N] {\n    pattern_methods!(CharArrayRefSearcher<'a, 'b, N>, MultiCharEqPattern, CharArrayRefSearcher);\n}\n\nunsafe impl<'a, 'b, const N: usize> Searcher<'a> for CharArrayRefSearcher<'a, 'b, N> {\n    searcher_methods!(forward);\n}\n\nunsafe impl<'a, 'b, const N: usize> ReverseSearcher<'a> for CharArrayRefSearcher<'a, 'b, N> {\n    searcher_methods!(reverse);\n}\n\nimpl<'a, 'b, const N: usize> DoubleEndedSearcher<'a> for CharArrayRefSearcher<'a, 'b, N> {}\n\n/////////////////////////////////////////////////////////////////////////////\n// Impl for &[char]\n/////////////////////////////////////////////////////////////////////////////\n\n// Todo: Change / Remove due to ambiguity in meaning.\n\n/// Associated type for `<&[char] as Pattern<'a>>::Searcher`.\n#[derive(Clone, Debug)]\npub struct CharSliceSearcher<'a, 'b>(<MultiCharEqPattern<&'b [char]> as Pattern<'a>>::Searcher);\n\nunsafe impl<'a, 'b> Searcher<'a> for CharSliceSearcher<'a, 'b> {\n    searcher_methods!(forward);\n}\n\nunsafe impl<'a, 'b> ReverseSearcher<'a> for CharSliceSearcher<'a, 'b> {\n    searcher_methods!(reverse);\n}\n\nimpl<'a, 'b> DoubleEndedSearcher<'a> for CharSliceSearcher<'a, 'b> {}\n\n/// Searches for chars that are equal to any of the [`char`]s in the slice.\n///\n/// # Examples\n///\n/// ```\n/// assert_eq!(\"Hello world\".find(&['l', 'l'] as &[_]), Some(2));\n/// assert_eq!(\"Hello world\".find(&['l', 'l'][..]), Some(2));\n/// ```\nimpl<'a, 'b> Pattern<'a> for &'b [char] {\n    pattern_methods!(CharSliceSearcher<'a, 'b>, MultiCharEqPattern, CharSliceSearcher);\n}\n\n/////////////////////////////////////////////////////////////////////////////\n// Impl for F: FnMut(char) -> bool\n/////////////////////////////////////////////////////////////////////////////\n\n/// Associated type for `<F as Pattern<'a>>::Searcher`.\n#[derive(Clone)]\npub struct CharPredicateSearcher<'a, F>(<MultiCharEqPattern<F> as Pattern<'a>>::Searcher)\nwhere\n    F: FnMut(char) -> bool;\n\nimpl<F> fmt::Debug for CharPredicateSearcher<'_, F>\nwhere\n    F: FnMut(char) -> bool,\n{\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        f.debug_struct(\"CharPredicateSearcher\")\n            .field(\"haystack\", &self.0.haystack)\n            .field(\"char_indices\", &self.0.char_indices)\n            .finish()\n    }\n}\nunsafe impl<'a, F> Searcher<'a> for CharPredicateSearcher<'a, F>\nwhere\n    F: FnMut(char) -> bool,\n{\n    searcher_methods!(forward);\n}\n\nunsafe impl<'a, F> ReverseSearcher<'a> for CharPredicateSearcher<'a, F>\nwhere\n    F: FnMut(char) -> bool,\n{\n    searcher_methods!(reverse);\n}\n\nimpl<'a, F> DoubleEndedSearcher<'a> for CharPredicateSearcher<'a, F> where F: FnMut(char) -> bool {}\n\n/// Searches for [`char`]s that match the given predicate.\n///\n/// # Examples\n///\n/// ```\n/// assert_eq!(\"Hello world\".find(char::is_uppercase), Some(0));\n/// assert_eq!(\"Hello world\".find(|c| \"aeiou\".contains(c)), Some(1));\n/// ```\nimpl<'a, F> Pattern<'a> for F\nwhere\n    F: FnMut(char) -> bool,\n{\n    pattern_methods!(CharPredicateSearcher<'a, F>, MultiCharEqPattern, CharPredicateSearcher);\n}\n\n/////////////////////////////////////////////////////////////////////////////\n// Impl for &&str\n/////////////////////////////////////////////////////////////////////////////\n\n/// Delegates to the `&str` impl.\nimpl<'a, 'b, 'c> Pattern<'a> for &'c &'b str {\n    pattern_methods!(StrSearcher<'a, 'b>, |&s| s, |s| s);\n}\n\n/////////////////////////////////////////////////////////////////////////////\n// Impl for &str\n/////////////////////////////////////////////////////////////////////////////\n\n/// Non-allocating substring search.\n///\n/// Will handle the pattern `\"\"` as returning empty matches at each character\n/// boundary.\n///\n/// # Examples\n///\n/// ```\n/// assert_eq!(\"Hello world\".find(\"world\"), Some(6));\n/// ```\nimpl<'a, 'b> Pattern<'a> for &'b str {\n    type Searcher = StrSearcher<'a, 'b>;\n\n    #[inline]\n    fn into_searcher(self, haystack: &'a str) -> StrSearcher<'a, 'b> {\n        StrSearcher::new(haystack, self)\n    }\n\n    /// Checks whether the pattern matches at the front of the haystack.\n    #[inline]\n    fn is_prefix_of(self, haystack: &'a str) -> bool {\n        haystack.as_bytes().starts_with(self.as_bytes())\n    }\n\n    /// Checks whether the pattern matches anywhere in the haystack\n    #[inline]\n    fn is_contained_in(self, haystack: &'a str) -> bool {\n        if self.len() == 0 {\n            return true;\n        }\n\n        match self.len().cmp(&haystack.len()) {\n            Ordering::Less => {\n                if self.len() == 1 {\n                    return haystack.as_bytes().contains(&self.as_bytes()[0]);\n                }\n\n                #[cfg(all(target_arch = \"x86_64\", target_feature = \"sse2\"))]\n                if self.len() <= 32 {\n                    if let Some(result) = simd_contains(self, haystack) {\n                        return result;\n                    }\n                }\n\n                self.into_searcher(haystack).next_match().is_some()\n            }\n            _ => self == haystack,\n        }\n    }\n\n    /// Removes the pattern from the front of haystack, if it matches.\n    #[inline]\n    fn strip_prefix_of(self, haystack: &'a str) -> Option<&'a str> {\n        if self.is_prefix_of(haystack) {\n            // SAFETY: prefix was just verified to exist.\n            unsafe { Some(haystack.get_unchecked(self.as_bytes().len()..)) }\n        } else {\n            None\n        }\n    }\n\n    /// Checks whether the pattern matches at the back of the haystack.\n    #[inline]\n    fn is_suffix_of(self, haystack: &'a str) -> bool {\n        haystack.as_bytes().ends_with(self.as_bytes())\n    }\n\n    /// Removes the pattern from the back of haystack, if it matches.\n    #[inline]\n    fn strip_suffix_of(self, haystack: &'a str) -> Option<&'a str> {\n        if self.is_suffix_of(haystack) {\n            let i = haystack.len() - self.as_bytes().len();\n            // SAFETY: suffix was just verified to exist.\n            unsafe { Some(haystack.get_unchecked(..i)) }\n        } else {\n            None\n        }\n    }\n}\n\n/////////////////////////////////////////////////////////////////////////////\n// Two Way substring searcher\n/////////////////////////////////////////////////////////////////////////////\n\n#[derive(Clone, Debug)]\n/// Associated type for `<&str as Pattern<'a>>::Searcher`.\npub struct StrSearcher<'a, 'b> {\n    haystack: &'a str,\n    needle: &'b str,\n\n    searcher: StrSearcherImpl,\n}\n\n#[derive(Clone, Debug)]\nenum StrSearcherImpl {\n    Empty(EmptyNeedle),\n    TwoWay(TwoWaySearcher),\n}\n\n#[derive(Clone, Debug)]\nstruct EmptyNeedle {\n    position: usize,\n    end: usize,\n    is_match_fw: bool,\n    is_match_bw: bool,\n    // Needed in case of an empty haystack, see #85462\n    is_finished: bool,\n}\n\nimpl<'a, 'b> StrSearcher<'a, 'b> {\n    fn new(haystack: &'a str, needle: &'b str) -> StrSearcher<'a, 'b> {\n        if needle.is_empty() {\n            StrSearcher {\n                haystack,\n                needle,\n                searcher: StrSearcherImpl::Empty(EmptyNeedle {\n                    position: 0,\n                    end: haystack.len(),\n                    is_match_fw: true,\n                    is_match_bw: true,\n                    is_finished: false,\n                }),\n            }\n        } else {\n            StrSearcher {\n                haystack,\n                needle,\n                searcher: StrSearcherImpl::TwoWay(TwoWaySearcher::new(\n                    needle.as_bytes(),\n                    haystack.len(),\n                )),\n            }\n        }\n    }\n}\n\nunsafe impl<'a, 'b> Searcher<'a> for StrSearcher<'a, 'b> {\n    #[inline]\n    fn haystack(&self) -> &'a str {\n        self.haystack\n    }\n\n    #[inline]\n    fn next(&mut self) -> SearchStep {\n        match self.searcher {\n            StrSearcherImpl::Empty(ref mut searcher) => {\n                if searcher.is_finished {\n                    return SearchStep::Done;\n                }\n                // empty needle rejects every char and matches every empty string between them\n                let is_match = searcher.is_match_fw;\n                searcher.is_match_fw = !searcher.is_match_fw;\n                let pos = searcher.position;\n                match self.haystack[pos..].chars().next() {\n                    _ if is_match => SearchStep::Match(pos, pos),\n                    None => {\n                        searcher.is_finished = true;\n                        SearchStep::Done\n                    }\n                    Some(ch) => {\n                        searcher.position += ch.len_utf8();\n                        SearchStep::Reject(pos, searcher.position)\n                    }\n                }\n            }\n            StrSearcherImpl::TwoWay(ref mut searcher) => {\n                // TwoWaySearcher produces valid *Match* indices that split at char boundaries\n                // as long as it does correct matching and that haystack and needle are\n                // valid UTF-8\n                // *Rejects* from the algorithm can fall on any indices, but we will walk them\n                // manually to the next character boundary, so that they are utf-8 safe.\n                if searcher.position == self.haystack.len() {\n                    return SearchStep::Done;\n                }\n                let is_long = searcher.memory == usize::MAX;\n                match searcher.next::<RejectAndMatch>(\n                    self.haystack.as_bytes(),\n                    self.needle.as_bytes(),\n                    is_long,\n                ) {\n                    SearchStep::Reject(a, mut b) => {\n                        // skip to next char boundary\n                        while !self.haystack.is_char_boundary(b) {\n                            b += 1;\n                        }\n                        searcher.position = cmp::max(b, searcher.position);\n                        SearchStep::Reject(a, b)\n                    }\n                    otherwise => otherwise,\n                }\n            }\n        }\n    }\n\n    #[inline]\n    fn next_match(&mut self) -> Option<(usize, usize)> {\n        match self.searcher {\n            StrSearcherImpl::Empty(..) => loop {\n                match self.next() {\n                    SearchStep::Match(a, b) => return Some((a, b)),\n                    SearchStep::Done => return None,\n                    SearchStep::Reject(..) => {}\n                }\n            },\n            StrSearcherImpl::TwoWay(ref mut searcher) => {\n                let is_long = searcher.memory == usize::MAX;\n                // write out `true` and `false` cases to encourage the compiler\n                // to specialize the two cases separately.\n                if is_long {\n                    searcher.next::<MatchOnly>(\n                        self.haystack.as_bytes(),\n                        self.needle.as_bytes(),\n                        true,\n                    )\n                } else {\n                    searcher.next::<MatchOnly>(\n                        self.haystack.as_bytes(),\n                        self.needle.as_bytes(),\n                        false,\n                    )\n                }\n            }\n        }\n    }\n}\n\nunsafe impl<'a, 'b> ReverseSearcher<'a> for StrSearcher<'a, 'b> {\n    #[inline]\n    fn next_back(&mut self) -> SearchStep {\n        match self.searcher {\n            StrSearcherImpl::Empty(ref mut searcher) => {\n                if searcher.is_finished {\n                    return SearchStep::Done;\n                }\n                let is_match = searcher.is_match_bw;\n                searcher.is_match_bw = !searcher.is_match_bw;\n                let end = searcher.end;\n                match self.haystack[..end].chars().next_back() {\n                    _ if is_match => SearchStep::Match(end, end),\n                    None => {\n                        searcher.is_finished = true;\n                        SearchStep::Done\n                    }\n                    Some(ch) => {\n                        searcher.end -= ch.len_utf8();\n                        SearchStep::Reject(searcher.end, end)\n                    }\n                }\n            }\n            StrSearcherImpl::TwoWay(ref mut searcher) => {\n                if searcher.end == 0 {\n                    return SearchStep::Done;\n                }\n                let is_long = searcher.memory == usize::MAX;\n                match searcher.next_back::<RejectAndMatch>(\n                    self.haystack.as_bytes(),\n                    self.needle.as_bytes(),\n                    is_long,\n                ) {\n                    SearchStep::Reject(mut a, b) => {\n                        // skip to next char boundary\n                        while !self.haystack.is_char_boundary(a) {\n                            a -= 1;\n                        }\n                        searcher.end = cmp::min(a, searcher.end);\n                        SearchStep::Reject(a, b)\n                    }\n                    otherwise => otherwise,\n                }\n            }\n        }\n    }\n\n    #[inline]\n    fn next_match_back(&mut self) -> Option<(usize, usize)> {\n        match self.searcher {\n            StrSearcherImpl::Empty(..) => loop {\n                match self.next_back() {\n                    SearchStep::Match(a, b) => return Some((a, b)),\n                    SearchStep::Done => return None,\n                    SearchStep::Reject(..) => {}\n                }\n            },\n            StrSearcherImpl::TwoWay(ref mut searcher) => {\n                let is_long = searcher.memory == usize::MAX;\n                // write out `true` and `false`, like `next_match`\n                if is_long {\n                    searcher.next_back::<MatchOnly>(\n                        self.haystack.as_bytes(),\n                        self.needle.as_bytes(),\n                        true,\n                    )\n                } else {\n                    searcher.next_back::<MatchOnly>(\n                        self.haystack.as_bytes(),\n                        self.needle.as_bytes(),\n                        false,\n                    )\n                }\n            }\n        }\n    }\n}\n\n/// The internal state of the two-way substring search algorithm.\n#[derive(Clone, Debug)]\nstruct TwoWaySearcher {\n    // constants\n    /// critical factorization index\n    crit_pos: usize,\n    /// critical factorization index for reversed needle\n    crit_pos_back: usize,\n    period: usize,\n    /// `byteset` is an extension (not part of the two way algorithm);\n    /// it's a 64-bit \"fingerprint\" where each set bit `j` corresponds\n    /// to a (byte & 63) == j present in the needle.\n    byteset: u64,\n\n    // variables\n    position: usize,\n    end: usize,\n    /// index into needle before which we have already matched\n    memory: usize,\n    /// index into needle after which we have already matched\n    memory_back: usize,\n}\n\n/*\n    This is the Two-Way search algorithm, which was introduced in the paper:\n    Crochemore, M., Perrin, D., 1991, Two-way string-matching, Journal of the ACM 38(3):651-675.\n\n    Here's some background information.\n\n    A *word* is a string of symbols. The *length* of a word should be a familiar\n    notion, and here we denote it for any word x by |x|.\n    (We also allow for the possibility of the *empty word*, a word of length zero).\n\n    If x is any non-empty word, then an integer p with 0 < p <= |x| is said to be a\n    *period* for x iff for all i with 0 <= i <= |x| - p - 1, we have x[i] == x[i+p].\n    For example, both 1 and 2 are periods for the string \"aa\". As another example,\n    the only period of the string \"abcd\" is 4.\n\n    We denote by period(x) the *smallest* period of x (provided that x is non-empty).\n    This is always well-defined since every non-empty word x has at least one period,\n    |x|. We sometimes call this *the period* of x.\n\n    If u, v and x are words such that x = uv, where uv is the concatenation of u and\n    v, then we say that (u, v) is a *factorization* of x.\n\n    Let (u, v) be a factorization for a word x. Then if w is a non-empty word such\n    that both of the following hold\n\n      - either w is a suffix of u or u is a suffix of w\n      - either w is a prefix of v or v is a prefix of w\n\n    then w is said to be a *repetition* for the factorization (u, v).\n\n    Just to unpack this, there are four possibilities here. Let w = \"abc\". Then we\n    might have:\n\n      - w is a suffix of u and w is a prefix of v. ex: (\"lolabc\", \"abcde\")\n      - w is a suffix of u and v is a prefix of w. ex: (\"lolabc\", \"ab\")\n      - u is a suffix of w and w is a prefix of v. ex: (\"bc\", \"abchi\")\n      - u is a suffix of w and v is a prefix of w. ex: (\"bc\", \"a\")\n\n    Note that the word vu is a repetition for any factorization (u,v) of x = uv,\n    so every factorization has at least one repetition.\n\n    If x is a string and (u, v) is a factorization for x, then a *local period* for\n    (u, v) is an integer r such that there is some word w such that |w| = r and w is\n    a repetition for (u, v).\n\n    We denote by local_period(u, v) the smallest local period of (u, v). We sometimes\n    call this *the local period* of (u, v). Provided that x = uv is non-empty, this\n    is well-defined (because each non-empty word has at least one factorization, as\n    noted above).\n\n    It can be proven that the following is an equivalent definition of a local period\n    for a factorization (u, v): any positive integer r such that x[i] == x[i+r] for\n    all i such that |u| - r <= i <= |u| - 1 and such that both x[i] and x[i+r] are\n    defined. (i.e., i > 0 and i + r < |x|).\n\n    Using the above reformulation, it is easy to prove that\n\n        1 <= local_period(u, v) <= period(uv)\n\n    A factorization (u, v) of x such that local_period(u,v) = period(x) is called a\n    *critical factorization*.\n\n    The algorithm hinges on the following theorem, which is stated without proof:\n\n    **Critical Factorization Theorem** Any word x has at least one critical\n    factorization (u, v) such that |u| < period(x).\n\n    The purpose of maximal_suffix is to find such a critical factorization.\n\n    If the period is short, compute another factorization x = u' v' to use\n    for reverse search, chosen instead so that |v'| < period(x).\n\n*/\nimpl TwoWaySearcher {\n    fn new(needle: &[u8], end: usize) -> TwoWaySearcher {\n        let (crit_pos_false, period_false) = TwoWaySearcher::maximal_suffix(needle, false);\n        let (crit_pos_true, period_true) = TwoWaySearcher::maximal_suffix(needle, true);\n\n        let (crit_pos, period) = if crit_pos_false > crit_pos_true {\n            (crit_pos_false, period_false)\n        } else {\n            (crit_pos_true, period_true)\n        };\n\n        // A particularly readable explanation of what's going on here can be found\n        // in Crochemore and Rytter's book \"Text Algorithms\", ch 13. Specifically\n        // see the code for \"Algorithm CP\" on p. 323.\n        //\n        // What's going on is we have some critical factorization (u, v) of the\n        // needle, and we want to determine whether u is a suffix of\n        // &v[..period]. If it is, we use \"Algorithm CP1\". Otherwise we use\n        // \"Algorithm CP2\", which is optimized for when the period of the needle\n        // is large.\n        if needle[..crit_pos] == needle[period..period + crit_pos] {\n            // short period case -- the period is exact\n            // compute a separate critical factorization for the reversed needle\n            // x = u' v' where |v'| < period(x).\n            //\n            // This is sped up by the period being known already.\n            // Note that a case like x = \"acba\" may be factored exactly forwards\n            // (crit_pos = 1, period = 3) while being factored with approximate\n            // period in reverse (crit_pos = 2, period = 2). We use the given\n            // reverse factorization but keep the exact period.\n            let crit_pos_back = needle.len()\n                - cmp::max(\n                    TwoWaySearcher::reverse_maximal_suffix(needle, period, false),\n                    TwoWaySearcher::reverse_maximal_suffix(needle, period, true),\n                );\n\n            TwoWaySearcher {\n                crit_pos,\n                crit_pos_back,\n                period,\n                byteset: Self::byteset_create(&needle[..period]),\n\n                position: 0,\n                end,\n                memory: 0,\n                memory_back: needle.len(),\n            }\n        } else {\n            // long period case -- we have an approximation to the actual period,\n            // and don't use memorization.\n            //\n            // Approximate the period by lower bound max(|u|, |v|) + 1.\n            // The critical factorization is efficient to use for both forward and\n            // reverse search.\n\n            TwoWaySearcher {\n                crit_pos,\n                crit_pos_back: crit_pos,\n                period: cmp::max(crit_pos, needle.len() - crit_pos) + 1,\n                byteset: Self::byteset_create(needle),\n\n                position: 0,\n                end,\n                memory: usize::MAX, // Dummy value to signify that the period is long\n                memory_back: usize::MAX,\n            }\n        }\n    }\n\n    #[inline]\n    fn byteset_create(bytes: &[u8]) -> u64 {\n        bytes.iter().fold(0, |a, &b| (1 << (b & 0x3f)) | a)\n    }\n\n    #[inline]\n    fn byteset_contains(&self, byte: u8) -> bool {\n        (self.byteset >> ((byte & 0x3f) as usize)) & 1 != 0\n    }\n\n    // One of the main ideas of Two-Way is that we factorize the needle into\n    // two halves, (u, v), and begin trying to find v in the haystack by scanning\n    // left to right. If v matches, we try to match u by scanning right to left.\n    // How far we can jump when we encounter a mismatch is all based on the fact\n    // that (u, v) is a critical factorization for the needle.\n    #[inline]\n    fn next<S>(&mut self, haystack: &[u8], needle: &[u8], long_period: bool) -> S::Output\n    where\n        S: TwoWayStrategy,\n    {\n        // `next()` uses `self.position` as its cursor\n        let old_pos = self.position;\n        let needle_last = needle.len() - 1;\n        'search: loop {\n            // Check that we have room to search in\n            // position + needle_last can not overflow if we assume slices\n            // are bounded by isize's range.\n            let tail_byte = match haystack.get(self.position + needle_last) {\n                Some(&b) => b,\n                None => {\n                    self.position = haystack.len();\n                    return S::rejecting(old_pos, self.position);\n                }\n            };\n\n            if S::use_early_reject() && old_pos != self.position {\n                return S::rejecting(old_pos, self.position);\n            }\n\n            // Quickly skip by large portions unrelated to our substring\n            if !self.byteset_contains(tail_byte) {\n                self.position += needle.len();\n                if !long_period {\n                    self.memory = 0;\n                }\n                continue 'search;\n            }\n\n            // See if the right part of the needle matches\n            let start =\n                if long_period { self.crit_pos } else { cmp::max(self.crit_pos, self.memory) };\n            for i in start..needle.len() {\n                if needle[i] != haystack[self.position + i] {\n                    self.position += i - self.crit_pos + 1;\n                    if !long_period {\n                        self.memory = 0;\n                    }\n                    continue 'search;\n                }\n            }\n\n            // See if the left part of the needle matches\n            let start = if long_period { 0 } else { self.memory };\n            for i in (start..self.crit_pos).rev() {\n                if needle[i] != haystack[self.position + i] {\n                    self.position += self.period;\n                    if !long_period {\n                        self.memory = needle.len() - self.period;\n                    }\n                    continue 'search;\n                }\n            }\n\n            // We have found a match!\n            let match_pos = self.position;\n\n            // Note: add self.period instead of needle.len() to have overlapping matches\n            self.position += needle.len();\n            if !long_period {\n                self.memory = 0; // set to needle.len() - self.period for overlapping matches\n            }\n\n            return S::matching(match_pos, match_pos + needle.len());\n        }\n    }\n\n    // Follows the ideas in `next()`.\n    //\n    // The definitions are symmetrical, with period(x) = period(reverse(x))\n    // and local_period(u, v) = local_period(reverse(v), reverse(u)), so if (u, v)\n    // is a critical factorization, so is (reverse(v), reverse(u)).\n    //\n    // For the reverse case we have computed a critical factorization x = u' v'\n    // (field `crit_pos_back`). We need |u| < period(x) for the forward case and\n    // thus |v'| < period(x) for the reverse.\n    //\n    // To search in reverse through the haystack, we search forward through\n    // a reversed haystack with a reversed needle, matching first u' and then v'.\n    #[inline]\n    fn next_back<S>(&mut self, haystack: &[u8], needle: &[u8], long_period: bool) -> S::Output\n    where\n        S: TwoWayStrategy,\n    {\n        // `next_back()` uses `self.end` as its cursor -- so that `next()` and `next_back()`\n        // are independent.\n        let old_end = self.end;\n        'search: loop {\n            // Check that we have room to search in\n            // end - needle.len() will wrap around when there is no more room,\n            // but due to slice length limits it can never wrap all the way back\n            // into the length of haystack.\n            let front_byte = match haystack.get(self.end.wrapping_sub(needle.len())) {\n                Some(&b) => b,\n                None => {\n                    self.end = 0;\n                    return S::rejecting(0, old_end);\n                }\n            };\n\n            if S::use_early_reject() && old_end != self.end {\n                return S::rejecting(self.end, old_end);\n            }\n\n            // Quickly skip by large portions unrelated to our substring\n            if !self.byteset_contains(front_byte) {\n                self.end -= needle.len();\n                if !long_period {\n                    self.memory_back = needle.len();\n                }\n                continue 'search;\n            }\n\n            // See if the left part of the needle matches\n            let crit = if long_period {\n                self.crit_pos_back\n            } else {\n                cmp::min(self.crit_pos_back, self.memory_back)\n            };\n            for i in (0..crit).rev() {\n                if needle[i] != haystack[self.end - needle.len() + i] {\n                    self.end -= self.crit_pos_back - i;\n                    if !long_period {\n                        self.memory_back = needle.len();\n                    }\n                    continue 'search;\n                }\n            }\n\n            // See if the right part of the needle matches\n            let needle_end = if long_period { needle.len() } else { self.memory_back };\n            for i in self.crit_pos_back..needle_end {\n                if needle[i] != haystack[self.end - needle.len() + i] {\n                    self.end -= self.period;\n                    if !long_period {\n                        self.memory_back = self.period;\n                    }\n                    continue 'search;\n                }\n            }\n\n            // We have found a match!\n            let match_pos = self.end - needle.len();\n            // Note: sub self.period instead of needle.len() to have overlapping matches\n            self.end -= needle.len();\n            if !long_period {\n                self.memory_back = needle.len();\n            }\n\n            return S::matching(match_pos, match_pos + needle.len());\n        }\n    }\n\n    // Compute the maximal suffix of `arr`.\n    //\n    // The maximal suffix is a possible critical factorization (u, v) of `arr`.\n    //\n    // Returns (`i`, `p`) where `i` is the starting index of v and `p` is the\n    // period of v.\n    //\n    // `order_greater` determines if lexical order is `<` or `>`. Both\n    // orders must be computed -- the ordering with the largest `i` gives\n    // a critical factorization.\n    //\n    // For long period cases, the resulting period is not exact (it is too short).\n    #[inline]\n    fn maximal_suffix(arr: &[u8], order_greater: bool) -> (usize, usize) {\n        let mut left = 0; // Corresponds to i in the paper\n        let mut right = 1; // Corresponds to j in the paper\n        let mut offset = 0; // Corresponds to k in the paper, but starting at 0\n        // to match 0-based indexing.\n        let mut period = 1; // Corresponds to p in the paper\n\n        while let Some(&a) = arr.get(right + offset) {\n            // `left` will be inbounds when `right` is.\n            let b = arr[left + offset];\n            if (a < b && !order_greater) || (a > b && order_greater) {\n                // Suffix is smaller, period is entire prefix so far.\n                right += offset + 1;\n                offset = 0;\n                period = right - left;\n            } else if a == b {\n                // Advance through repetition of the current period.\n                if offset + 1 == period {\n                    right += offset + 1;\n                    offset = 0;\n                } else {\n                    offset += 1;\n                }\n            } else {\n                // Suffix is larger, start over from current location.\n                left = right;\n                right += 1;\n                offset = 0;\n                period = 1;\n            }\n        }\n        (left, period)\n    }\n\n    // Compute the maximal suffix of the reverse of `arr`.\n    //\n    // The maximal suffix is a possible critical factorization (u', v') of `arr`.\n    //\n    // Returns `i` where `i` is the starting index of v', from the back;\n    // returns immediately when a period of `known_period` is reached.\n    //\n    // `order_greater` determines if lexical order is `<` or `>`. Both\n    // orders must be computed -- the ordering with the largest `i` gives\n    // a critical factorization.\n    //\n    // For long period cases, the resulting period is not exact (it is too short).\n    fn reverse_maximal_suffix(arr: &[u8], known_period: usize, order_greater: bool) -> usize {\n        let mut left = 0; // Corresponds to i in the paper\n        let mut right = 1; // Corresponds to j in the paper\n        let mut offset = 0; // Corresponds to k in the paper, but starting at 0\n        // to match 0-based indexing.\n        let mut period = 1; // Corresponds to p in the paper\n        let n = arr.len();\n\n        while right + offset < n {\n            let a = arr[n - (1 + right + offset)];\n            let b = arr[n - (1 + left + offset)];\n            if (a < b && !order_greater) || (a > b && order_greater) {\n                // Suffix is smaller, period is entire prefix so far.\n                right += offset + 1;\n                offset = 0;\n                period = right - left;\n            } else if a == b {\n                // Advance through repetition of the current period.\n                if offset + 1 == period {\n                    right += offset + 1;\n                    offset = 0;\n                } else {\n                    offset += 1;\n                }\n            } else {\n                // Suffix is larger, start over from current location.\n                left = right;\n                right += 1;\n                offset = 0;\n                period = 1;\n            }\n            if period == known_period {\n                break;\n            }\n        }\n        debug_assert!(period <= known_period);\n        left\n    }\n}\n\n// TwoWayStrategy allows the algorithm to either skip non-matches as quickly\n// as possible, or to work in a mode where it emits Rejects relatively quickly.\ntrait TwoWayStrategy {\n    type Output;\n    fn use_early_reject() -> bool;\n    fn rejecting(a: usize, b: usize) -> Self::Output;\n    fn matching(a: usize, b: usize) -> Self::Output;\n}\n\n/// Skip to match intervals as quickly as possible\nenum MatchOnly {}\n\nimpl TwoWayStrategy for MatchOnly {\n    type Output = Option<(usize, usize)>;\n\n    #[inline]\n    fn use_early_reject() -> bool {\n        false\n    }\n    #[inline]\n    fn rejecting(_a: usize, _b: usize) -> Self::Output {\n        None\n    }\n    #[inline]\n    fn matching(a: usize, b: usize) -> Self::Output {\n        Some((a, b))\n    }\n}\n\n/// Emit Rejects regularly\nenum RejectAndMatch {}\n\nimpl TwoWayStrategy for RejectAndMatch {\n    type Output = SearchStep;\n\n    #[inline]\n    fn use_early_reject() -> bool {\n        true\n    }\n    #[inline]\n    fn rejecting(a: usize, b: usize) -> Self::Output {\n        SearchStep::Reject(a, b)\n    }\n    #[inline]\n    fn matching(a: usize, b: usize) -> Self::Output {\n        SearchStep::Match(a, b)\n    }\n}\n\n/// SIMD search for short needles based on\n/// Wojciech Muła's \"SIMD-friendly algorithms for substring searching\"[0]\n///\n/// It skips ahead by the vector width on each iteration (rather than the needle length as two-way\n/// does) by probing the first and last byte of the needle for the whole vector width\n/// and only doing full needle comparisons when the vectorized probe indicated potential matches.\n///\n/// Since the x86_64 baseline only offers SSE2 we only use u8x16 here.\n/// If we ever ship std with for x86-64-v3 or adapt this for other platforms then wider vectors\n/// should be evaluated.\n///\n/// For haystacks smaller than vector-size + needle length it falls back to\n/// a naive O(n*m) search so this implementation should not be called on larger needles.\n///\n/// [0]: http://0x80.pl/articles/simd-strfind.html#sse-avx2\n#[cfg(all(target_arch = \"x86_64\", target_feature = \"sse2\"))]\n#[inline]\nfn simd_contains(needle: &str, haystack: &str) -> Option<bool> {\n    let needle = needle.as_bytes();\n    let haystack = haystack.as_bytes();\n\n    debug_assert!(needle.len() > 1);\n\n    use crate::ops::BitAnd;\n    use crate::simd::cmp::SimdPartialEq;\n    use crate::simd::mask8x16 as Mask;\n    use crate::simd::u8x16 as Block;\n\n    let first_probe = needle[0];\n    let last_byte_offset = needle.len() - 1;\n\n    // the offset used for the 2nd vector\n    let second_probe_offset = if needle.len() == 2 {\n        // never bail out on len=2 needles because the probes will fully cover them and have\n        // no degenerate cases.\n        1\n    } else {\n        // try a few bytes in case first and last byte of the needle are the same\n        let Some(second_probe_offset) =\n            (needle.len().saturating_sub(4)..needle.len()).rfind(|&idx| needle[idx] != first_probe)\n        else {\n            // fall back to other search methods if we can't find any different bytes\n            // since we could otherwise hit some degenerate cases\n            return None;\n        };\n        second_probe_offset\n    };\n\n    // do a naive search if the haystack is too small to fit\n    if haystack.len() < Block::LEN + last_byte_offset {\n        return Some(haystack.windows(needle.len()).any(|c| c == needle));\n    }\n\n    let first_probe: Block = Block::splat(first_probe);\n    let second_probe: Block = Block::splat(needle[second_probe_offset]);\n    // first byte are already checked by the outer loop. to verify a match only the\n    // remainder has to be compared.\n    let trimmed_needle = &needle[1..];\n\n    // this #[cold] is load-bearing, benchmark before removing it...\n    let check_mask = #[cold]\n    |idx, mask: u16, skip: bool| -> bool {\n        if skip {\n            return false;\n        }\n\n        // and so is this. optimizations are weird.\n        let mut mask = mask;\n\n        while mask != 0 {\n            let trailing = mask.trailing_zeros();\n            let offset = idx + trailing as usize + 1;\n            // SAFETY: mask is between 0 and 15 trailing zeroes, we skip one additional byte that was already compared\n            // and then take trimmed_needle.len() bytes. This is within the bounds defined by the outer loop\n            unsafe {\n                let sub = haystack.get_unchecked(offset..).get_unchecked(..trimmed_needle.len());\n                if small_slice_eq(sub, trimmed_needle) {\n                    return true;\n                }\n            }\n            mask &= !(1 << trailing);\n        }\n        return false;\n    };\n\n    let test_chunk = |idx| -> u16 {\n        // SAFETY: this requires at least LANES bytes being readable at idx\n        // that is ensured by the loop ranges (see comments below)\n        let a: Block = unsafe { haystack.as_ptr().add(idx).cast::<Block>().read_unaligned() };\n        // SAFETY: this requires LANES + block_offset bytes being readable at idx\n        let b: Block = unsafe {\n            haystack.as_ptr().add(idx).add(second_probe_offset).cast::<Block>().read_unaligned()\n        };\n        let eq_first: Mask = a.simd_eq(first_probe);\n        let eq_last: Mask = b.simd_eq(second_probe);\n        let both = eq_first.bitand(eq_last);\n        let mask = both.to_bitmask() as u16;\n\n        return mask;\n    };\n\n    let mut i = 0;\n    let mut result = false;\n    // The loop condition must ensure that there's enough headroom to read LANE bytes,\n    // and not only at the current index but also at the index shifted by block_offset\n    const UNROLL: usize = 4;\n    while i + last_byte_offset + UNROLL * Block::LEN < haystack.len() && !result {\n        let mut masks = [0u16; UNROLL];\n        for j in 0..UNROLL {\n            masks[j] = test_chunk(i + j * Block::LEN);\n        }\n        for j in 0..UNROLL {\n            let mask = masks[j];\n            if mask != 0 {\n                result |= check_mask(i + j * Block::LEN, mask, result);\n            }\n        }\n        i += UNROLL * Block::LEN;\n    }\n    while i + last_byte_offset + Block::LEN < haystack.len() && !result {\n        let mask = test_chunk(i);\n        if mask != 0 {\n            result |= check_mask(i, mask, result);\n        }\n        i += Block::LEN;\n    }\n\n    // Process the tail that didn't fit into LANES-sized steps.\n    // This simply repeats the same procedure but as right-aligned chunk instead\n    // of a left-aligned one. The last byte must be exactly flush with the string end so\n    // we don't miss a single byte or read out of bounds.\n    let i = haystack.len() - last_byte_offset - Block::LEN;\n    let mask = test_chunk(i);\n    if mask != 0 {\n        result |= check_mask(i, mask, result);\n    }\n\n    Some(result)\n}\n\n/// Compares short slices for equality.\n///\n/// It avoids a call to libc's memcmp which is faster on long slices\n/// due to SIMD optimizations but it incurs a function call overhead.\n///\n/// # Safety\n///\n/// Both slices must have the same length.\n#[cfg(all(target_arch = \"x86_64\", target_feature = \"sse2\"))] // only called on x86\n#[inline]\nunsafe fn small_slice_eq(x: &[u8], y: &[u8]) -> bool {\n    debug_assert_eq!(x.len(), y.len());\n    // This function is adapted from\n    // https://github.com/BurntSushi/memchr/blob/8037d11b4357b0f07be2bb66dc2659d9cf28ad32/src/memmem/util.rs#L32\n\n    // If we don't have enough bytes to do 4-byte at a time loads, then\n    // fall back to the naive slow version.\n    //\n    // Potential alternative: We could do a copy_nonoverlapping combined with a mask instead\n    // of a loop. Benchmark it.\n    if x.len() < 4 {\n        for (&b1, &b2) in x.iter().zip(y) {\n            if b1 != b2 {\n                return false;\n            }\n        }\n        return true;\n    }\n    // When we have 4 or more bytes to compare, then proceed in chunks of 4 at\n    // a time using unaligned loads.\n    //\n    // Also, why do 4 byte loads instead of, say, 8 byte loads? The reason is\n    // that this particular version of memcmp is likely to be called with tiny\n    // needles. That means that if we do 8 byte loads, then a higher proportion\n    // of memcmp calls will use the slower variant above. With that said, this\n    // is a hypothesis and is only loosely supported by benchmarks. There's\n    // likely some improvement that could be made here. The main thing here\n    // though is to optimize for latency, not throughput.\n\n    // SAFETY: Via the conditional above, we know that both `px` and `py`\n    // have the same length, so `px < pxend` implies that `py < pyend`.\n    // Thus, dereferencing both `px` and `py` in the loop below is safe.\n    //\n    // Moreover, we set `pxend` and `pyend` to be 4 bytes before the actual\n    // end of `px` and `py`. Thus, the final dereference outside of the\n    // loop is guaranteed to be valid. (The final comparison will overlap with\n    // the last comparison done in the loop for lengths that aren't multiples\n    // of four.)\n    //\n    // Finally, we needn't worry about alignment here, since we do unaligned\n    // loads.\n    unsafe {\n        let (mut px, mut py) = (x.as_ptr(), y.as_ptr());\n        let (pxend, pyend) = (px.add(x.len() - 4), py.add(y.len() - 4));\n        while px < pxend {\n            let vx = (px as *const u32).read_unaligned();\n            let vy = (py as *const u32).read_unaligned();\n            if vx != vy {\n                return false;\n            }\n            px = px.add(4);\n            py = py.add(4);\n        }\n        let vx = (pxend as *const u32).read_unaligned();\n        let vy = (pyend as *const u32).read_unaligned();\n        vx == vy\n    }\n}\n\n```",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Source of the Rust file `library/core/src/str/pattern.rs`.\"><title>pattern.rs - source</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../../\" data-static-root-path=\"../../../static.files/\" data-current-crate=\"core\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"../../../static.files/src-script-e66d777a5a92e9b2.js\"></script><script defer=\"\" src=\"../../../src-files1.80.0.js\"></script><script defer=\"\" src=\"../../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc src\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"sidebar\"><div class=\"src-sidebar-title\"><h2>Files</h2></div><div id=\"src-sidebar\"><details class=\"dir-entry\"><summary>alloc</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>boxed</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/alloc/boxed/thin.rs.html\">thin.rs</a></div></details><details class=\"dir-entry\"><summary>collections</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>binary_heap</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/alloc/collections/binary_heap/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>btree</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>map</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/alloc/collections/btree/map/entry.rs.html\">entry.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/alloc/collections/btree/append.rs.html\">append.rs</a><a href=\"../../../src/alloc/collections/btree/borrow.rs.html\">borrow.rs</a><a href=\"../../../src/alloc/collections/btree/dedup_sorted_iter.rs.html\">dedup_sorted_iter.rs</a><a href=\"../../../src/alloc/collections/btree/fix.rs.html\">fix.rs</a><a href=\"../../../src/alloc/collections/btree/map.rs.html\">map.rs</a><a href=\"../../../src/alloc/collections/btree/mem.rs.html\">mem.rs</a><a href=\"../../../src/alloc/collections/btree/merge_iter.rs.html\">merge_iter.rs</a><a href=\"../../../src/alloc/collections/btree/mod.rs.html\">mod.rs</a><a href=\"../../../src/alloc/collections/btree/navigate.rs.html\">navigate.rs</a><a href=\"../../../src/alloc/collections/btree/node.rs.html\">node.rs</a><a href=\"../../../src/alloc/collections/btree/remove.rs.html\">remove.rs</a><a href=\"../../../src/alloc/collections/btree/search.rs.html\">search.rs</a><a href=\"../../../src/alloc/collections/btree/set.rs.html\">set.rs</a><a href=\"../../../src/alloc/collections/btree/set_val.rs.html\">set_val.rs</a><a href=\"../../../src/alloc/collections/btree/split.rs.html\">split.rs</a></div></details><details class=\"dir-entry\"><summary>vec_deque</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/alloc/collections/vec_deque/drain.rs.html\">drain.rs</a><a href=\"../../../src/alloc/collections/vec_deque/into_iter.rs.html\">into_iter.rs</a><a href=\"../../../src/alloc/collections/vec_deque/iter.rs.html\">iter.rs</a><a href=\"../../../src/alloc/collections/vec_deque/iter_mut.rs.html\">iter_mut.rs</a><a href=\"../../../src/alloc/collections/vec_deque/macros.rs.html\">macros.rs</a><a href=\"../../../src/alloc/collections/vec_deque/mod.rs.html\">mod.rs</a><a href=\"../../../src/alloc/collections/vec_deque/spec_extend.rs.html\">spec_extend.rs</a><a href=\"../../../src/alloc/collections/vec_deque/spec_from_iter.rs.html\">spec_from_iter.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/alloc/collections/linked_list.rs.html\">linked_list.rs</a><a href=\"../../../src/alloc/collections/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>ffi</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/alloc/ffi/c_str.rs.html\">c_str.rs</a><a href=\"../../../src/alloc/ffi/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>vec</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/alloc/vec/cow.rs.html\">cow.rs</a><a href=\"../../../src/alloc/vec/drain.rs.html\">drain.rs</a><a href=\"../../../src/alloc/vec/extract_if.rs.html\">extract_if.rs</a><a href=\"../../../src/alloc/vec/in_place_collect.rs.html\">in_place_collect.rs</a><a href=\"../../../src/alloc/vec/in_place_drop.rs.html\">in_place_drop.rs</a><a href=\"../../../src/alloc/vec/into_iter.rs.html\">into_iter.rs</a><a href=\"../../../src/alloc/vec/is_zero.rs.html\">is_zero.rs</a><a href=\"../../../src/alloc/vec/mod.rs.html\">mod.rs</a><a href=\"../../../src/alloc/vec/partial_eq.rs.html\">partial_eq.rs</a><a href=\"../../../src/alloc/vec/set_len_on_drop.rs.html\">set_len_on_drop.rs</a><a href=\"../../../src/alloc/vec/spec_extend.rs.html\">spec_extend.rs</a><a href=\"../../../src/alloc/vec/spec_from_elem.rs.html\">spec_from_elem.rs</a><a href=\"../../../src/alloc/vec/spec_from_iter.rs.html\">spec_from_iter.rs</a><a href=\"../../../src/alloc/vec/spec_from_iter_nested.rs.html\">spec_from_iter_nested.rs</a><a href=\"../../../src/alloc/vec/splice.rs.html\">splice.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/alloc/alloc.rs.html\">alloc.rs</a><a href=\"../../../src/alloc/borrow.rs.html\">borrow.rs</a><a href=\"../../../src/alloc/boxed.rs.html\">boxed.rs</a><a href=\"../../../src/alloc/fmt.rs.html\">fmt.rs</a><a href=\"../../../src/alloc/lib.rs.html\">lib.rs</a><a href=\"../../../src/alloc/macros.rs.html\">macros.rs</a><a href=\"../../../src/alloc/raw_vec.rs.html\">raw_vec.rs</a><a href=\"../../../src/alloc/rc.rs.html\">rc.rs</a><a href=\"../../../src/alloc/slice.rs.html\">slice.rs</a><a href=\"../../../src/alloc/str.rs.html\">str.rs</a><a href=\"../../../src/alloc/string.rs.html\">string.rs</a><a href=\"../../../src/alloc/sync.rs.html\">sync.rs</a><a href=\"../../../src/alloc/task.rs.html\">task.rs</a></div></details><details class=\"dir-entry\" open=\"\"><summary>core</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>alloc</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/alloc/global.rs.html\">global.rs</a><a href=\"../../../src/core/alloc/layout.rs.html\">layout.rs</a><a href=\"../../../src/core/alloc/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>array</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/array/ascii.rs.html\">ascii.rs</a><a href=\"../../../src/core/array/drain.rs.html\">drain.rs</a><a href=\"../../../src/core/array/equality.rs.html\">equality.rs</a><a href=\"../../../src/core/array/iter.rs.html\">iter.rs</a><a href=\"../../../src/core/array/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>ascii</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/ascii/ascii_char.rs.html\">ascii_char.rs</a></div></details><details class=\"dir-entry\"><summary>async_iter</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/async_iter/async_iter.rs.html\">async_iter.rs</a><a href=\"../../../src/core/async_iter/from_iter.rs.html\">from_iter.rs</a><a href=\"../../../src/core/async_iter/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>cell</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/cell/lazy.rs.html\">lazy.rs</a><a href=\"../../../src/core/cell/once.rs.html\">once.rs</a></div></details><details class=\"dir-entry\"><summary>char</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/char/convert.rs.html\">convert.rs</a><a href=\"../../../src/core/char/decode.rs.html\">decode.rs</a><a href=\"../../../src/core/char/methods.rs.html\">methods.rs</a><a href=\"../../../src/core/char/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>cmp</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/cmp/bytewise.rs.html\">bytewise.rs</a></div></details><details class=\"dir-entry\"><summary>convert</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/convert/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/convert/num.rs.html\">num.rs</a></div></details><details class=\"dir-entry\"><summary>ffi</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/ffi/c_str.rs.html\">c_str.rs</a><a href=\"../../../src/core/ffi/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>fmt</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/fmt/builders.rs.html\">builders.rs</a><a href=\"../../../src/core/fmt/float.rs.html\">float.rs</a><a href=\"../../../src/core/fmt/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/fmt/num.rs.html\">num.rs</a><a href=\"../../../src/core/fmt/rt.rs.html\">rt.rs</a></div></details><details class=\"dir-entry\"><summary>future</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/future/async_drop.rs.html\">async_drop.rs</a><a href=\"../../../src/core/future/future.rs.html\">future.rs</a><a href=\"../../../src/core/future/into_future.rs.html\">into_future.rs</a><a href=\"../../../src/core/future/join.rs.html\">join.rs</a><a href=\"../../../src/core/future/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/future/pending.rs.html\">pending.rs</a><a href=\"../../../src/core/future/poll_fn.rs.html\">poll_fn.rs</a><a href=\"../../../src/core/future/ready.rs.html\">ready.rs</a></div></details><details class=\"dir-entry\"><summary>hash</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/hash/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/hash/sip.rs.html\">sip.rs</a></div></details><details class=\"dir-entry\"><summary>intrinsics</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/intrinsics/mir.rs.html\">mir.rs</a><a href=\"../../../src/core/intrinsics/simd.rs.html\">simd.rs</a></div></details><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/io/borrowed_buf.rs.html\">borrowed_buf.rs</a><a href=\"../../../src/core/io/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>iter</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>adapters</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/iter/adapters/array_chunks.rs.html\">array_chunks.rs</a><a href=\"../../../src/core/iter/adapters/by_ref_sized.rs.html\">by_ref_sized.rs</a><a href=\"../../../src/core/iter/adapters/chain.rs.html\">chain.rs</a><a href=\"../../../src/core/iter/adapters/cloned.rs.html\">cloned.rs</a><a href=\"../../../src/core/iter/adapters/copied.rs.html\">copied.rs</a><a href=\"../../../src/core/iter/adapters/cycle.rs.html\">cycle.rs</a><a href=\"../../../src/core/iter/adapters/enumerate.rs.html\">enumerate.rs</a><a href=\"../../../src/core/iter/adapters/filter.rs.html\">filter.rs</a><a href=\"../../../src/core/iter/adapters/filter_map.rs.html\">filter_map.rs</a><a href=\"../../../src/core/iter/adapters/flatten.rs.html\">flatten.rs</a><a href=\"../../../src/core/iter/adapters/fuse.rs.html\">fuse.rs</a><a href=\"../../../src/core/iter/adapters/inspect.rs.html\">inspect.rs</a><a href=\"../../../src/core/iter/adapters/intersperse.rs.html\">intersperse.rs</a><a href=\"../../../src/core/iter/adapters/map.rs.html\">map.rs</a><a href=\"../../../src/core/iter/adapters/map_while.rs.html\">map_while.rs</a><a href=\"../../../src/core/iter/adapters/map_windows.rs.html\">map_windows.rs</a><a href=\"../../../src/core/iter/adapters/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/iter/adapters/peekable.rs.html\">peekable.rs</a><a href=\"../../../src/core/iter/adapters/rev.rs.html\">rev.rs</a><a href=\"../../../src/core/iter/adapters/scan.rs.html\">scan.rs</a><a href=\"../../../src/core/iter/adapters/skip.rs.html\">skip.rs</a><a href=\"../../../src/core/iter/adapters/skip_while.rs.html\">skip_while.rs</a><a href=\"../../../src/core/iter/adapters/step_by.rs.html\">step_by.rs</a><a href=\"../../../src/core/iter/adapters/take.rs.html\">take.rs</a><a href=\"../../../src/core/iter/adapters/take_while.rs.html\">take_while.rs</a><a href=\"../../../src/core/iter/adapters/zip.rs.html\">zip.rs</a></div></details><details class=\"dir-entry\"><summary>sources</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/iter/sources/empty.rs.html\">empty.rs</a><a href=\"../../../src/core/iter/sources/from_coroutine.rs.html\">from_coroutine.rs</a><a href=\"../../../src/core/iter/sources/from_fn.rs.html\">from_fn.rs</a><a href=\"../../../src/core/iter/sources/once.rs.html\">once.rs</a><a href=\"../../../src/core/iter/sources/once_with.rs.html\">once_with.rs</a><a href=\"../../../src/core/iter/sources/repeat.rs.html\">repeat.rs</a><a href=\"../../../src/core/iter/sources/repeat_n.rs.html\">repeat_n.rs</a><a href=\"../../../src/core/iter/sources/repeat_with.rs.html\">repeat_with.rs</a><a href=\"../../../src/core/iter/sources/successors.rs.html\">successors.rs</a></div></details><details class=\"dir-entry\"><summary>traits</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/iter/traits/accum.rs.html\">accum.rs</a><a href=\"../../../src/core/iter/traits/collect.rs.html\">collect.rs</a><a href=\"../../../src/core/iter/traits/double_ended.rs.html\">double_ended.rs</a><a href=\"../../../src/core/iter/traits/exact_size.rs.html\">exact_size.rs</a><a href=\"../../../src/core/iter/traits/iterator.rs.html\">iterator.rs</a><a href=\"../../../src/core/iter/traits/marker.rs.html\">marker.rs</a><a href=\"../../../src/core/iter/traits/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/iter/traits/unchecked_iterator.rs.html\">unchecked_iterator.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/iter/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/iter/range.rs.html\">range.rs</a><a href=\"../../../src/core/iter/sources.rs.html\">sources.rs</a></div></details><details class=\"dir-entry\"><summary>macros</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/macros/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>mem</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/mem/manually_drop.rs.html\">manually_drop.rs</a><a href=\"../../../src/core/mem/maybe_uninit.rs.html\">maybe_uninit.rs</a><a href=\"../../../src/core/mem/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/mem/transmutability.rs.html\">transmutability.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/net/display_buffer.rs.html\">display_buffer.rs</a><a href=\"../../../src/core/net/ip_addr.rs.html\">ip_addr.rs</a><a href=\"../../../src/core/net/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/net/parser.rs.html\">parser.rs</a><a href=\"../../../src/core/net/socket_addr.rs.html\">socket_addr.rs</a></div></details><details class=\"dir-entry\"><summary>num</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>dec2flt</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/num/dec2flt/common.rs.html\">common.rs</a><a href=\"../../../src/core/num/dec2flt/decimal.rs.html\">decimal.rs</a><a href=\"../../../src/core/num/dec2flt/float.rs.html\">float.rs</a><a href=\"../../../src/core/num/dec2flt/fpu.rs.html\">fpu.rs</a><a href=\"../../../src/core/num/dec2flt/lemire.rs.html\">lemire.rs</a><a href=\"../../../src/core/num/dec2flt/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/num/dec2flt/number.rs.html\">number.rs</a><a href=\"../../../src/core/num/dec2flt/parse.rs.html\">parse.rs</a><a href=\"../../../src/core/num/dec2flt/slow.rs.html\">slow.rs</a><a href=\"../../../src/core/num/dec2flt/table.rs.html\">table.rs</a></div></details><details class=\"dir-entry\"><summary>flt2dec</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>strategy</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/num/flt2dec/strategy/dragon.rs.html\">dragon.rs</a><a href=\"../../../src/core/num/flt2dec/strategy/grisu.rs.html\">grisu.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/num/flt2dec/decoder.rs.html\">decoder.rs</a><a href=\"../../../src/core/num/flt2dec/estimator.rs.html\">estimator.rs</a><a href=\"../../../src/core/num/flt2dec/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>shells</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/num/shells/i128.rs.html\">i128.rs</a><a href=\"../../../src/core/num/shells/i16.rs.html\">i16.rs</a><a href=\"../../../src/core/num/shells/i32.rs.html\">i32.rs</a><a href=\"../../../src/core/num/shells/i64.rs.html\">i64.rs</a><a href=\"../../../src/core/num/shells/i8.rs.html\">i8.rs</a><a href=\"../../../src/core/num/shells/int_macros.rs.html\">int_macros.rs</a><a href=\"../../../src/core/num/shells/isize.rs.html\">isize.rs</a><a href=\"../../../src/core/num/shells/u128.rs.html\">u128.rs</a><a href=\"../../../src/core/num/shells/u16.rs.html\">u16.rs</a><a href=\"../../../src/core/num/shells/u32.rs.html\">u32.rs</a><a href=\"../../../src/core/num/shells/u64.rs.html\">u64.rs</a><a href=\"../../../src/core/num/shells/u8.rs.html\">u8.rs</a><a href=\"../../../src/core/num/shells/usize.rs.html\">usize.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/num/bignum.rs.html\">bignum.rs</a><a href=\"../../../src/core/num/diy_float.rs.html\">diy_float.rs</a><a href=\"../../../src/core/num/error.rs.html\">error.rs</a><a href=\"../../../src/core/num/f128.rs.html\">f128.rs</a><a href=\"../../../src/core/num/f16.rs.html\">f16.rs</a><a href=\"../../../src/core/num/f32.rs.html\">f32.rs</a><a href=\"../../../src/core/num/f64.rs.html\">f64.rs</a><a href=\"../../../src/core/num/fmt.rs.html\">fmt.rs</a><a href=\"../../../src/core/num/int_log10.rs.html\">int_log10.rs</a><a href=\"../../../src/core/num/int_macros.rs.html\">int_macros.rs</a><a href=\"../../../src/core/num/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/num/nonzero.rs.html\">nonzero.rs</a><a href=\"../../../src/core/num/overflow_panic.rs.html\">overflow_panic.rs</a><a href=\"../../../src/core/num/saturating.rs.html\">saturating.rs</a><a href=\"../../../src/core/num/uint_macros.rs.html\">uint_macros.rs</a><a href=\"../../../src/core/num/wrapping.rs.html\">wrapping.rs</a></div></details><details class=\"dir-entry\"><summary>ops</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/ops/arith.rs.html\">arith.rs</a><a href=\"../../../src/core/ops/async_function.rs.html\">async_function.rs</a><a href=\"../../../src/core/ops/bit.rs.html\">bit.rs</a><a href=\"../../../src/core/ops/control_flow.rs.html\">control_flow.rs</a><a href=\"../../../src/core/ops/coroutine.rs.html\">coroutine.rs</a><a href=\"../../../src/core/ops/deref.rs.html\">deref.rs</a><a href=\"../../../src/core/ops/drop.rs.html\">drop.rs</a><a href=\"../../../src/core/ops/function.rs.html\">function.rs</a><a href=\"../../../src/core/ops/index.rs.html\">index.rs</a><a href=\"../../../src/core/ops/index_range.rs.html\">index_range.rs</a><a href=\"../../../src/core/ops/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/ops/range.rs.html\">range.rs</a><a href=\"../../../src/core/ops/try_trait.rs.html\">try_trait.rs</a><a href=\"../../../src/core/ops/unsize.rs.html\">unsize.rs</a></div></details><details class=\"dir-entry\"><summary>panic</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/panic/location.rs.html\">location.rs</a><a href=\"../../../src/core/panic/panic_info.rs.html\">panic_info.rs</a><a href=\"../../../src/core/panic/unwind_safe.rs.html\">unwind_safe.rs</a></div></details><details class=\"dir-entry\"><summary>portable-simd</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>crates</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>core_simd</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>masks</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/masks/full_masks.rs.html\">full_masks.rs</a></div></details><details class=\"dir-entry\"><summary>ops</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html\">assign.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html\">deref.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html\">shift_scalar.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html\">unary.rs</a></div></details><details class=\"dir-entry\"><summary>simd</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>cmp</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html\">eq.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html\">ord.rs</a></div></details><details class=\"dir-entry\"><summary>num</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html\">float.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html\">int.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html\">uint.rs</a></div></details><details class=\"dir-entry\"><summary>ptr</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html\">const_ptr.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/ptr/mut_ptr.rs.html\">mut_ptr.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/cmp.rs.html\">cmp.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/num.rs.html\">num.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/prelude.rs.html\">prelude.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/ptr.rs.html\">ptr.rs</a></div></details><details class=\"dir-entry\"><summary>vendor</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html\">x86.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/alias.rs.html\">alias.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/cast.rs.html\">cast.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/fmt.rs.html\">fmt.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/iter.rs.html\">iter.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/lane_count.rs.html\">lane_count.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/masks.rs.html\">masks.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/ops.rs.html\">ops.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/select.rs.html\">select.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/swizzle.rs.html\">swizzle.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/swizzle_dyn.rs.html\">swizzle_dyn.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html\">to_bytes.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/vector.rs.html\">vector.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/vendor.rs.html\">vendor.rs</a></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>prelude</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/prelude/common.rs.html\">common.rs</a><a href=\"../../../src/core/prelude/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>ptr</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/ptr/alignment.rs.html\">alignment.rs</a><a href=\"../../../src/core/ptr/const_ptr.rs.html\">const_ptr.rs</a><a href=\"../../../src/core/ptr/metadata.rs.html\">metadata.rs</a><a href=\"../../../src/core/ptr/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/ptr/mut_ptr.rs.html\">mut_ptr.rs</a><a href=\"../../../src/core/ptr/non_null.rs.html\">non_null.rs</a><a href=\"../../../src/core/ptr/unique.rs.html\">unique.rs</a></div></details><details class=\"dir-entry\"><summary>slice</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>iter</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/slice/iter/macros.rs.html\">macros.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/slice/ascii.rs.html\">ascii.rs</a><a href=\"../../../src/core/slice/cmp.rs.html\">cmp.rs</a><a href=\"../../../src/core/slice/index.rs.html\">index.rs</a><a href=\"../../../src/core/slice/iter.rs.html\">iter.rs</a><a href=\"../../../src/core/slice/memchr.rs.html\">memchr.rs</a><a href=\"../../../src/core/slice/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/slice/raw.rs.html\">raw.rs</a><a href=\"../../../src/core/slice/rotate.rs.html\">rotate.rs</a><a href=\"../../../src/core/slice/select.rs.html\">select.rs</a><a href=\"../../../src/core/slice/sort.rs.html\">sort.rs</a><a href=\"../../../src/core/slice/specialize.rs.html\">specialize.rs</a></div></details><details class=\"dir-entry\"><summary>stdarch</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>crates</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>core_arch</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>aarch64</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>neon</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/aarch64/neon/generated.rs.html\">generated.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/aarch64/neon/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/aarch64/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/aarch64/prefetch.rs.html\">prefetch.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/aarch64/tme.rs.html\">tme.rs</a></div></details><details class=\"dir-entry\"><summary>arm</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm/dsp.rs.html\">dsp.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm/neon.rs.html\">neon.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm/sat.rs.html\">sat.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm/simd32.rs.html\">simd32.rs</a></div></details><details class=\"dir-entry\"><summary>arm_shared</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>barrier</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/barrier/cp15.rs.html\">cp15.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/barrier/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>neon</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/neon/generated.rs.html\">generated.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/neon/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/crc.rs.html\">crc.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/crypto.rs.html\">crypto.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/hints.rs.html\">hints.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>loongarch64</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>lasx</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/loongarch64/lasx/generated.rs.html\">generated.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/loongarch64/lasx/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/loongarch64/lasx/types.rs.html\">types.rs</a></div></details><details class=\"dir-entry\"><summary>lsx</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/loongarch64/lsx/generated.rs.html\">generated.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/loongarch64/lsx/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/loongarch64/lsx/types.rs.html\">types.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/loongarch64/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>mips</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/mips/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>nvptx</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/nvptx/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>powerpc</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/powerpc/altivec.rs.html\">altivec.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/powerpc/macros.rs.html\">macros.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/powerpc/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/powerpc/vsx.rs.html\">vsx.rs</a></div></details><details class=\"dir-entry\"><summary>powerpc64</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/powerpc64/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/powerpc64/vsx.rs.html\">vsx.rs</a></div></details><details class=\"dir-entry\"><summary>riscv32</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv32/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv32/zk.rs.html\">zk.rs</a></div></details><details class=\"dir-entry\"><summary>riscv64</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv64/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv64/zk.rs.html\">zk.rs</a></div></details><details class=\"dir-entry\"><summary>riscv_shared</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv_shared/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv_shared/p.rs.html\">p.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv_shared/zb.rs.html\">zb.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv_shared/zk.rs.html\">zk.rs</a></div></details><details class=\"dir-entry\"><summary>wasm32</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/wasm32/atomic.rs.html\">atomic.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/wasm32/memory.rs.html\">memory.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/wasm32/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/wasm32/relaxed_simd.rs.html\">relaxed_simd.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/wasm32/simd128.rs.html\">simd128.rs</a></div></details><details class=\"dir-entry\"><summary>x86</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/abm.rs.html\">abm.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/adx.rs.html\">adx.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/aes.rs.html\">aes.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx.rs.html\">avx.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx2.rs.html\">avx2.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512bf16.rs.html\">avx512bf16.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512bitalg.rs.html\">avx512bitalg.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512bw.rs.html\">avx512bw.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512cd.rs.html\">avx512cd.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512f.rs.html\">avx512f.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512ifma.rs.html\">avx512ifma.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512vbmi.rs.html\">avx512vbmi.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512vbmi2.rs.html\">avx512vbmi2.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512vnni.rs.html\">avx512vnni.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512vpopcntdq.rs.html\">avx512vpopcntdq.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/bmi1.rs.html\">bmi1.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/bmi2.rs.html\">bmi2.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/bswap.rs.html\">bswap.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/bt.rs.html\">bt.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/cpuid.rs.html\">cpuid.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/eflags.rs.html\">eflags.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/f16c.rs.html\">f16c.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/fma.rs.html\">fma.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/fxsr.rs.html\">fxsr.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/gfni.rs.html\">gfni.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/macros.rs.html\">macros.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/pclmulqdq.rs.html\">pclmulqdq.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/rdrand.rs.html\">rdrand.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/rdtsc.rs.html\">rdtsc.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/rtm.rs.html\">rtm.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/sha.rs.html\">sha.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/sse.rs.html\">sse.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/sse2.rs.html\">sse2.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/sse3.rs.html\">sse3.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/sse41.rs.html\">sse41.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/sse42.rs.html\">sse42.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/sse4a.rs.html\">sse4a.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/ssse3.rs.html\">ssse3.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/tbm.rs.html\">tbm.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/vaes.rs.html\">vaes.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/vpclmulqdq.rs.html\">vpclmulqdq.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/xsave.rs.html\">xsave.rs</a></div></details><details class=\"dir-entry\"><summary>x86_64</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/abm.rs.html\">abm.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/adx.rs.html\">adx.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/avx.rs.html\">avx.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/avx2.rs.html\">avx2.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/avx512f.rs.html\">avx512f.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/bmi.rs.html\">bmi.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/bmi2.rs.html\">bmi2.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/bswap.rs.html\">bswap.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/bt.rs.html\">bt.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/cmpxchg16b.rs.html\">cmpxchg16b.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/fxsr.rs.html\">fxsr.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/macros.rs.html\">macros.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/rdrand.rs.html\">rdrand.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/sse.rs.html\">sse.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/sse2.rs.html\">sse2.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/sse41.rs.html\">sse41.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/sse42.rs.html\">sse42.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/xsave.rs.html\">xsave.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/macros.rs.html\">macros.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/simd.rs.html\">simd.rs</a></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\" open=\"\"><summary>str</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/str/converts.rs.html\">converts.rs</a><a href=\"../../../src/core/str/count.rs.html\">count.rs</a><a href=\"../../../src/core/str/error.rs.html\">error.rs</a><a href=\"../../../src/core/str/iter.rs.html\">iter.rs</a><a href=\"../../../src/core/str/lossy.rs.html\">lossy.rs</a><a href=\"../../../src/core/str/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/str/pattern.rs.html\" class=\"selected\">pattern.rs</a><a href=\"../../../src/core/str/traits.rs.html\">traits.rs</a><a href=\"../../../src/core/str/validations.rs.html\">validations.rs</a></div></details><details class=\"dir-entry\"><summary>sync</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/sync/atomic.rs.html\">atomic.rs</a><a href=\"../../../src/core/sync/exclusive.rs.html\">exclusive.rs</a><a href=\"../../../src/core/sync/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>task</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/task/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/task/poll.rs.html\">poll.rs</a><a href=\"../../../src/core/task/ready.rs.html\">ready.rs</a><a href=\"../../../src/core/task/wake.rs.html\">wake.rs</a></div></details><details class=\"dir-entry\"><summary>unicode</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/unicode/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/unicode/printable.rs.html\">printable.rs</a><a href=\"../../../src/core/unicode/unicode_data.rs.html\">unicode_data.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/any.rs.html\">any.rs</a><a href=\"../../../src/core/arch.rs.html\">arch.rs</a><a href=\"../../../src/core/ascii.rs.html\">ascii.rs</a><a href=\"../../../src/core/asserting.rs.html\">asserting.rs</a><a href=\"../../../src/core/bool.rs.html\">bool.rs</a><a href=\"../../../src/core/borrow.rs.html\">borrow.rs</a><a href=\"../../../src/core/cell.rs.html\">cell.rs</a><a href=\"../../../src/core/clone.rs.html\">clone.rs</a><a href=\"../../../src/core/cmp.rs.html\">cmp.rs</a><a href=\"../../../src/core/default.rs.html\">default.rs</a><a href=\"../../../src/core/error.rs.html\">error.rs</a><a href=\"../../../src/core/escape.rs.html\">escape.rs</a><a href=\"../../../src/core/hint.rs.html\">hint.rs</a><a href=\"../../../src/core/internal_macros.rs.html\">internal_macros.rs</a><a href=\"../../../src/core/intrinsics.rs.html\">intrinsics.rs</a><a href=\"../../../src/core/lib.rs.html\">lib.rs</a><a href=\"../../../src/core/marker.rs.html\">marker.rs</a><a href=\"../../../src/core/option.rs.html\">option.rs</a><a href=\"../../../src/core/panic.rs.html\">panic.rs</a><a href=\"../../../src/core/panicking.rs.html\">panicking.rs</a><a href=\"../../../src/core/pat.rs.html\">pat.rs</a><a href=\"../../../src/core/pin.rs.html\">pin.rs</a><a href=\"../../../src/core/primitive.rs.html\">primitive.rs</a><a href=\"../../../src/core/primitive_docs.rs.html\">primitive_docs.rs</a><a href=\"../../../src/core/result.rs.html\">result.rs</a><a href=\"../../../src/core/time.rs.html\">time.rs</a><a href=\"../../../src/core/tuple.rs.html\">tuple.rs</a><a href=\"../../../src/core/ub_checks.rs.html\">ub_checks.rs</a><a href=\"../../../src/core/unit.rs.html\">unit.rs</a></div></details><details class=\"dir-entry\"><summary>proc_macro</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>bridge</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/proc_macro/bridge/arena.rs.html\">arena.rs</a><a href=\"../../../src/proc_macro/bridge/buffer.rs.html\">buffer.rs</a><a href=\"../../../src/proc_macro/bridge/client.rs.html\">client.rs</a><a href=\"../../../src/proc_macro/bridge/closure.rs.html\">closure.rs</a><a href=\"../../../src/proc_macro/bridge/fxhash.rs.html\">fxhash.rs</a><a href=\"../../../src/proc_macro/bridge/handle.rs.html\">handle.rs</a><a href=\"../../../src/proc_macro/bridge/mod.rs.html\">mod.rs</a><a href=\"../../../src/proc_macro/bridge/rpc.rs.html\">rpc.rs</a><a href=\"../../../src/proc_macro/bridge/selfless_reify.rs.html\">selfless_reify.rs</a><a href=\"../../../src/proc_macro/bridge/server.rs.html\">server.rs</a><a href=\"../../../src/proc_macro/bridge/symbol.rs.html\">symbol.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/proc_macro/diagnostic.rs.html\">diagnostic.rs</a><a href=\"../../../src/proc_macro/lib.rs.html\">lib.rs</a><a href=\"../../../src/proc_macro/quote.rs.html\">quote.rs</a></div></details><details class=\"dir-entry\"><summary>std</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>backtrace</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>backtrace</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/backtrace/src/backtrace/libunwind.rs.html\">libunwind.rs</a><a href=\"../../../src/std/backtrace/src/backtrace/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>symbolize</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>gimli</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/backtrace/src/symbolize/gimli/elf.rs.html\">elf.rs</a><a href=\"../../../src/std/backtrace/src/symbolize/gimli/libs_dl_iterate_phdr.rs.html\">libs_dl_iterate_phdr.rs</a><a href=\"../../../src/std/backtrace/src/symbolize/gimli/mmap_unix.rs.html\">mmap_unix.rs</a><a href=\"../../../src/std/backtrace/src/symbolize/gimli/parse_running_mmaps_unix.rs.html\">parse_running_mmaps_unix.rs</a><a href=\"../../../src/std/backtrace/src/symbolize/gimli/stash.rs.html\">stash.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/backtrace/src/symbolize/gimli.rs.html\">gimli.rs</a><a href=\"../../../src/std/backtrace/src/symbolize/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/backtrace/src/lib.rs.html\">lib.rs</a><a href=\"../../../src/std/backtrace/src/print.rs.html\">print.rs</a><a href=\"../../../src/std/backtrace/src/types.rs.html\">types.rs</a></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>collections</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>hash</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/collections/hash/map.rs.html\">map.rs</a><a href=\"../../../src/std/collections/hash/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/collections/hash/set.rs.html\">set.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/collections/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>core</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/core/src/primitive_docs.rs.html\">primitive_docs.rs</a></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>ffi</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/ffi/c_str.rs.html\">c_str.rs</a><a href=\"../../../src/std/ffi/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/ffi/os_str.rs.html\">os_str.rs</a></div></details><details class=\"dir-entry\"><summary>hash</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/hash/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/hash/random.rs.html\">random.rs</a></div></details><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>buffered</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>bufreader</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/io/buffered/bufreader/buffer.rs.html\">buffer.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/io/buffered/bufreader.rs.html\">bufreader.rs</a><a href=\"../../../src/std/io/buffered/bufwriter.rs.html\">bufwriter.rs</a><a href=\"../../../src/std/io/buffered/linewriter.rs.html\">linewriter.rs</a><a href=\"../../../src/std/io/buffered/linewritershim.rs.html\">linewritershim.rs</a><a href=\"../../../src/std/io/buffered/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>error</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/io/error/repr_bitpacked.rs.html\">repr_bitpacked.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/io/copy.rs.html\">copy.rs</a><a href=\"../../../src/std/io/cursor.rs.html\">cursor.rs</a><a href=\"../../../src/std/io/error.rs.html\">error.rs</a><a href=\"../../../src/std/io/impls.rs.html\">impls.rs</a><a href=\"../../../src/std/io/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/io/prelude.rs.html\">prelude.rs</a><a href=\"../../../src/std/io/stdio.rs.html\">stdio.rs</a><a href=\"../../../src/std/io/util.rs.html\">util.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/net/ip_addr.rs.html\">ip_addr.rs</a><a href=\"../../../src/std/net/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/net/socket_addr.rs.html\">socket_addr.rs</a><a href=\"../../../src/std/net/tcp.rs.html\">tcp.rs</a><a href=\"../../../src/std/net/udp.rs.html\">udp.rs</a></div></details><details class=\"dir-entry\"><summary>os</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>fd</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/fd/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/fd/net.rs.html\">net.rs</a><a href=\"../../../src/std/os/fd/owned.rs.html\">owned.rs</a><a href=\"../../../src/std/os/fd/raw.rs.html\">raw.rs</a></div></details><details class=\"dir-entry\"><summary>linux</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/linux/fs.rs.html\">fs.rs</a><a href=\"../../../src/std/os/linux/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/linux/net.rs.html\">net.rs</a><a href=\"../../../src/std/os/linux/process.rs.html\">process.rs</a><a href=\"../../../src/std/os/linux/raw.rs.html\">raw.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>linux_ext</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/net/linux_ext/addr.rs.html\">addr.rs</a><a href=\"../../../src/std/os/net/linux_ext/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/net/linux_ext/socket.rs.html\">socket.rs</a><a href=\"../../../src/std/os/net/linux_ext/tcp.rs.html\">tcp.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/os/net/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>raw</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/raw/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>unix</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>ffi</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/unix/ffi/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/unix/ffi/os_str.rs.html\">os_str.rs</a></div></details><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/unix/io/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/unix/net/addr.rs.html\">addr.rs</a><a href=\"../../../src/std/os/unix/net/ancillary.rs.html\">ancillary.rs</a><a href=\"../../../src/std/os/unix/net/datagram.rs.html\">datagram.rs</a><a href=\"../../../src/std/os/unix/net/listener.rs.html\">listener.rs</a><a href=\"../../../src/std/os/unix/net/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/unix/net/stream.rs.html\">stream.rs</a><a href=\"../../../src/std/os/unix/net/ucred.rs.html\">ucred.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/os/unix/fs.rs.html\">fs.rs</a><a href=\"../../../src/std/os/unix/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/unix/process.rs.html\">process.rs</a><a href=\"../../../src/std/os/unix/raw.rs.html\">raw.rs</a><a href=\"../../../src/std/os/unix/thread.rs.html\">thread.rs</a></div></details><details class=\"dir-entry\"><summary>wasi</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/wasi/io/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/wasi/net/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/os/wasi/ffi.rs.html\">ffi.rs</a><a href=\"../../../src/std/os/wasi/fs.rs.html\">fs.rs</a><a href=\"../../../src/std/os/wasi/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>wasip2</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/wasip2/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>windows</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/windows/io/handle.rs.html\">handle.rs</a><a href=\"../../../src/std/os/windows/io/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/windows/io/raw.rs.html\">raw.rs</a><a href=\"../../../src/std/os/windows/io/socket.rs.html\">socket.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/os/windows/ffi.rs.html\">ffi.rs</a><a href=\"../../../src/std/os/windows/fs.rs.html\">fs.rs</a><a href=\"../../../src/std/os/windows/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/windows/process.rs.html\">process.rs</a><a href=\"../../../src/std/os/windows/raw.rs.html\">raw.rs</a><a href=\"../../../src/std/os/windows/thread.rs.html\">thread.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/os/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>portable-simd</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>crates</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>std_float</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/portable-simd/crates/std_float/src/lib.rs.html\">lib.rs</a></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>prelude</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/prelude/common.rs.html\">common.rs</a><a href=\"../../../src/std/prelude/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>sync</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>mpmc</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sync/mpmc/array.rs.html\">array.rs</a><a href=\"../../../src/std/sync/mpmc/context.rs.html\">context.rs</a><a href=\"../../../src/std/sync/mpmc/counter.rs.html\">counter.rs</a><a href=\"../../../src/std/sync/mpmc/error.rs.html\">error.rs</a><a href=\"../../../src/std/sync/mpmc/list.rs.html\">list.rs</a><a href=\"../../../src/std/sync/mpmc/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/sync/mpmc/select.rs.html\">select.rs</a><a href=\"../../../src/std/sync/mpmc/utils.rs.html\">utils.rs</a><a href=\"../../../src/std/sync/mpmc/waker.rs.html\">waker.rs</a><a href=\"../../../src/std/sync/mpmc/zero.rs.html\">zero.rs</a></div></details><details class=\"dir-entry\"><summary>mpsc</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sync/mpsc/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/sync/barrier.rs.html\">barrier.rs</a><a href=\"../../../src/std/sync/condvar.rs.html\">condvar.rs</a><a href=\"../../../src/std/sync/lazy_lock.rs.html\">lazy_lock.rs</a><a href=\"../../../src/std/sync/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/sync/mutex.rs.html\">mutex.rs</a><a href=\"../../../src/std/sync/once.rs.html\">once.rs</a><a href=\"../../../src/std/sync/once_lock.rs.html\">once_lock.rs</a><a href=\"../../../src/std/sync/poison.rs.html\">poison.rs</a><a href=\"../../../src/std/sync/reentrant_lock.rs.html\">reentrant_lock.rs</a><a href=\"../../../src/std/sync/rwlock.rs.html\">rwlock.rs</a></div></details><details class=\"dir-entry\"><summary>sys</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>os_str</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/os_str/bytes.rs.html\">bytes.rs</a><a href=\"../../../src/std/sys/os_str/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>pal</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>common</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/pal/common/alloc.rs.html\">alloc.rs</a><a href=\"../../../src/std/sys/pal/common/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/sys/pal/common/small_c_string.rs.html\">small_c_string.rs</a></div></details><details class=\"dir-entry\"><summary>unix</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>process</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/pal/unix/process/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/sys/pal/unix/process/process_common.rs.html\">process_common.rs</a><a href=\"../../../src/std/sys/pal/unix/process/process_unix.rs.html\">process_unix.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/sys/pal/unix/alloc.rs.html\">alloc.rs</a><a href=\"../../../src/std/sys/pal/unix/args.rs.html\">args.rs</a><a href=\"../../../src/std/sys/pal/unix/env.rs.html\">env.rs</a><a href=\"../../../src/std/sys/pal/unix/fd.rs.html\">fd.rs</a><a href=\"../../../src/std/sys/pal/unix/fs.rs.html\">fs.rs</a><a href=\"../../../src/std/sys/pal/unix/futex.rs.html\">futex.rs</a><a href=\"../../../src/std/sys/pal/unix/io.rs.html\">io.rs</a><a href=\"../../../src/std/sys/pal/unix/kernel_copy.rs.html\">kernel_copy.rs</a><a href=\"../../../src/std/sys/pal/unix/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/sys/pal/unix/net.rs.html\">net.rs</a><a href=\"../../../src/std/sys/pal/unix/os.rs.html\">os.rs</a><a href=\"../../../src/std/sys/pal/unix/pipe.rs.html\">pipe.rs</a><a href=\"../../../src/std/sys/pal/unix/rand.rs.html\">rand.rs</a><a href=\"../../../src/std/sys/pal/unix/stack_overflow.rs.html\">stack_overflow.rs</a><a href=\"../../../src/std/sys/pal/unix/stdio.rs.html\">stdio.rs</a><a href=\"../../../src/std/sys/pal/unix/thread.rs.html\">thread.rs</a><a href=\"../../../src/std/sys/pal/unix/thread_local_dtor.rs.html\">thread_local_dtor.rs</a><a href=\"../../../src/std/sys/pal/unix/thread_local_key.rs.html\">thread_local_key.rs</a><a href=\"../../../src/std/sys/pal/unix/time.rs.html\">time.rs</a><a href=\"../../../src/std/sys/pal/unix/weak.rs.html\">weak.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/sys/pal/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>path</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/path/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/sys/path/unix.rs.html\">unix.rs</a></div></details><details class=\"dir-entry\"><summary>personality</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>dwarf</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/personality/dwarf/eh.rs.html\">eh.rs</a><a href=\"../../../src/std/sys/personality/dwarf/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/sys/personality/gcc.rs.html\">gcc.rs</a><a href=\"../../../src/std/sys/personality/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>sync</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>condvar</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/sync/condvar/futex.rs.html\">futex.rs</a><a href=\"../../../src/std/sys/sync/condvar/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>mutex</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/sync/mutex/futex.rs.html\">futex.rs</a><a href=\"../../../src/std/sys/sync/mutex/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>once</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/sync/once/futex.rs.html\">futex.rs</a><a href=\"../../../src/std/sys/sync/once/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>rwlock</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/sync/rwlock/futex.rs.html\">futex.rs</a><a href=\"../../../src/std/sys/sync/rwlock/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>thread_parking</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/sync/thread_parking/futex.rs.html\">futex.rs</a><a href=\"../../../src/std/sys/sync/thread_parking/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/sys/sync/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>thread_local</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>fast_local</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/thread_local/fast_local/eager.rs.html\">eager.rs</a><a href=\"../../../src/std/sys/thread_local/fast_local/lazy.rs.html\">lazy.rs</a><a href=\"../../../src/std/sys/thread_local/fast_local/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/sys/thread_local/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/sys/cmath.rs.html\">cmath.rs</a><a href=\"../../../src/std/sys/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>sys_common</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys_common/backtrace.rs.html\">backtrace.rs</a><a href=\"../../../src/std/sys_common/fs.rs.html\">fs.rs</a><a href=\"../../../src/std/sys_common/io.rs.html\">io.rs</a><a href=\"../../../src/std/sys_common/lazy_box.rs.html\">lazy_box.rs</a><a href=\"../../../src/std/sys_common/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/sys_common/net.rs.html\">net.rs</a><a href=\"../../../src/std/sys_common/process.rs.html\">process.rs</a><a href=\"../../../src/std/sys_common/thread_local_dtor.rs.html\">thread_local_dtor.rs</a><a href=\"../../../src/std/sys_common/thread_local_key.rs.html\">thread_local_key.rs</a><a href=\"../../../src/std/sys_common/wstr.rs.html\">wstr.rs</a><a href=\"../../../src/std/sys_common/wtf8.rs.html\">wtf8.rs</a></div></details><details class=\"dir-entry\"><summary>thread</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/thread/local.rs.html\">local.rs</a><a href=\"../../../src/std/thread/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/thread/scoped.rs.html\">scoped.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/alloc.rs.html\">alloc.rs</a><a href=\"../../../src/std/ascii.rs.html\">ascii.rs</a><a href=\"../../../src/std/backtrace.rs.html\">backtrace.rs</a><a href=\"../../../src/std/env.rs.html\">env.rs</a><a href=\"../../../src/std/error.rs.html\">error.rs</a><a href=\"../../../src/std/f128.rs.html\">f128.rs</a><a href=\"../../../src/std/f16.rs.html\">f16.rs</a><a href=\"../../../src/std/f32.rs.html\">f32.rs</a><a href=\"../../../src/std/f64.rs.html\">f64.rs</a><a href=\"../../../src/std/fs.rs.html\">fs.rs</a><a href=\"../../../src/std/keyword_docs.rs.html\">keyword_docs.rs</a><a href=\"../../../src/std/lib.rs.html\">lib.rs</a><a href=\"../../../src/std/macros.rs.html\">macros.rs</a><a href=\"../../../src/std/num.rs.html\">num.rs</a><a href=\"../../../src/std/panic.rs.html\">panic.rs</a><a href=\"../../../src/std/panicking.rs.html\">panicking.rs</a><a href=\"../../../src/std/pat.rs.html\">pat.rs</a><a href=\"../../../src/std/path.rs.html\">path.rs</a><a href=\"../../../src/std/process.rs.html\">process.rs</a><a href=\"../../../src/std/rt.rs.html\">rt.rs</a><a href=\"../../../src/std/time.rs.html\">time.rs</a></div></details><details class=\"dir-entry\"><summary>test</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>formatters</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/test/formatters/json.rs.html\">json.rs</a><a href=\"../../../src/test/formatters/junit.rs.html\">junit.rs</a><a href=\"../../../src/test/formatters/mod.rs.html\">mod.rs</a><a href=\"../../../src/test/formatters/pretty.rs.html\">pretty.rs</a><a href=\"../../../src/test/formatters/terse.rs.html\">terse.rs</a></div></details><details class=\"dir-entry\"><summary>helpers</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/test/helpers/concurrency.rs.html\">concurrency.rs</a><a href=\"../../../src/test/helpers/metrics.rs.html\">metrics.rs</a><a href=\"../../../src/test/helpers/mod.rs.html\">mod.rs</a><a href=\"../../../src/test/helpers/shuffle.rs.html\">shuffle.rs</a></div></details><details class=\"dir-entry\"><summary>term</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>terminfo</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>parser</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/test/term/terminfo/parser/compiled.rs.html\">compiled.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/test/term/terminfo/mod.rs.html\">mod.rs</a><a href=\"../../../src/test/term/terminfo/parm.rs.html\">parm.rs</a><a href=\"../../../src/test/term/terminfo/searcher.rs.html\">searcher.rs</a></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"><a href=\"../../../src/test/bench.rs.html\">bench.rs</a><a href=\"../../../src/test/cli.rs.html\">cli.rs</a><a href=\"../../../src/test/console.rs.html\">console.rs</a><a href=\"../../../src/test/event.rs.html\">event.rs</a><a href=\"../../../src/test/lib.rs.html\">lib.rs</a><a href=\"../../../src/test/options.rs.html\">options.rs</a><a href=\"../../../src/test/stats.rs.html\">stats.rs</a><a href=\"../../../src/test/term.rs.html\">term.rs</a><a href=\"../../../src/test/test_result.rs.html\">test_result.rs</a><a href=\"../../../src/test/time.rs.html\">time.rs</a><a href=\"../../../src/test/types.rs.html\">types.rs</a></div></details></div></nav><div class=\"sidebar-resizer\"></div><main><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../../core/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"example-wrap\"><div data-nosnippet=\"\"><pre class=\"src-line-numbers\"><a href=\"#1\" id=\"1\">1</a>\n<a href=\"#2\" id=\"2\">2</a>\n<a href=\"#3\" id=\"3\">3</a>\n<a href=\"#4\" id=\"4\">4</a>\n<a href=\"#5\" id=\"5\">5</a>\n<a href=\"#6\" id=\"6\">6</a>\n<a href=\"#7\" id=\"7\">7</a>\n<a href=\"#8\" id=\"8\">8</a>\n<a href=\"#9\" id=\"9\">9</a>\n<a href=\"#10\" id=\"10\">10</a>\n<a href=\"#11\" id=\"11\">11</a>\n<a href=\"#12\" id=\"12\">12</a>\n<a href=\"#13\" id=\"13\">13</a>\n<a href=\"#14\" id=\"14\">14</a>\n<a href=\"#15\" id=\"15\">15</a>\n<a href=\"#16\" id=\"16\">16</a>\n<a href=\"#17\" id=\"17\">17</a>\n<a href=\"#18\" id=\"18\">18</a>\n<a href=\"#19\" id=\"19\">19</a>\n<a href=\"#20\" id=\"20\">20</a>\n<a href=\"#21\" id=\"21\">21</a>\n<a href=\"#22\" id=\"22\">22</a>\n<a href=\"#23\" id=\"23\">23</a>\n<a href=\"#24\" id=\"24\">24</a>\n<a href=\"#25\" id=\"25\">25</a>\n<a href=\"#26\" id=\"26\">26</a>\n<a href=\"#27\" id=\"27\">27</a>\n<a href=\"#28\" id=\"28\">28</a>\n<a href=\"#29\" id=\"29\">29</a>\n<a href=\"#30\" id=\"30\">30</a>\n<a href=\"#31\" id=\"31\">31</a>\n<a href=\"#32\" id=\"32\">32</a>\n<a href=\"#33\" id=\"33\">33</a>\n<a href=\"#34\" id=\"34\">34</a>\n<a href=\"#35\" id=\"35\">35</a>\n<a href=\"#36\" id=\"36\">36</a>\n<a href=\"#37\" id=\"37\">37</a>\n<a href=\"#38\" id=\"38\">38</a>\n<a href=\"#39\" id=\"39\">39</a>\n<a href=\"#40\" id=\"40\">40</a>\n<a href=\"#41\" id=\"41\">41</a>\n<a href=\"#42\" id=\"42\">42</a>\n<a href=\"#43\" id=\"43\">43</a>\n<a href=\"#44\" id=\"44\">44</a>\n<a href=\"#45\" id=\"45\">45</a>\n<a href=\"#46\" id=\"46\">46</a>\n<a href=\"#47\" id=\"47\">47</a>\n<a href=\"#48\" id=\"48\">48</a>\n<a href=\"#49\" id=\"49\">49</a>\n<a href=\"#50\" id=\"50\">50</a>\n<a href=\"#51\" id=\"51\">51</a>\n<a href=\"#52\" id=\"52\">52</a>\n<a href=\"#53\" id=\"53\">53</a>\n<a href=\"#54\" id=\"54\">54</a>\n<a href=\"#55\" id=\"55\">55</a>\n<a href=\"#56\" id=\"56\">56</a>\n<a href=\"#57\" id=\"57\">57</a>\n<a href=\"#58\" id=\"58\">58</a>\n<a href=\"#59\" id=\"59\">59</a>\n<a href=\"#60\" id=\"60\">60</a>\n<a href=\"#61\" id=\"61\">61</a>\n<a href=\"#62\" id=\"62\">62</a>\n<a href=\"#63\" id=\"63\">63</a>\n<a href=\"#64\" id=\"64\">64</a>\n<a href=\"#65\" id=\"65\">65</a>\n<a href=\"#66\" id=\"66\">66</a>\n<a href=\"#67\" id=\"67\">67</a>\n<a href=\"#68\" id=\"68\">68</a>\n<a href=\"#69\" id=\"69\">69</a>\n<a href=\"#70\" id=\"70\">70</a>\n<a href=\"#71\" id=\"71\">71</a>\n<a href=\"#72\" id=\"72\">72</a>\n<a href=\"#73\" id=\"73\">73</a>\n<a href=\"#74\" id=\"74\">74</a>\n<a href=\"#75\" id=\"75\">75</a>\n<a href=\"#76\" id=\"76\">76</a>\n<a href=\"#77\" id=\"77\">77</a>\n<a href=\"#78\" id=\"78\">78</a>\n<a href=\"#79\" id=\"79\">79</a>\n<a href=\"#80\" id=\"80\">80</a>\n<a href=\"#81\" id=\"81\">81</a>\n<a href=\"#82\" id=\"82\">82</a>\n<a href=\"#83\" id=\"83\">83</a>\n<a href=\"#84\" id=\"84\">84</a>\n<a href=\"#85\" id=\"85\">85</a>\n<a href=\"#86\" id=\"86\">86</a>\n<a href=\"#87\" id=\"87\">87</a>\n<a href=\"#88\" id=\"88\">88</a>\n<a href=\"#89\" id=\"89\">89</a>\n<a href=\"#90\" id=\"90\">90</a>\n<a href=\"#91\" id=\"91\">91</a>\n<a href=\"#92\" id=\"92\">92</a>\n<a href=\"#93\" id=\"93\">93</a>\n<a href=\"#94\" id=\"94\">94</a>\n<a href=\"#95\" id=\"95\">95</a>\n<a href=\"#96\" id=\"96\">96</a>\n<a href=\"#97\" id=\"97\">97</a>\n<a href=\"#98\" id=\"98\">98</a>\n<a href=\"#99\" id=\"99\">99</a>\n<a href=\"#100\" id=\"100\">100</a>\n<a href=\"#101\" id=\"101\">101</a>\n<a href=\"#102\" id=\"102\">102</a>\n<a href=\"#103\" id=\"103\">103</a>\n<a href=\"#104\" id=\"104\">104</a>\n<a href=\"#105\" id=\"105\">105</a>\n<a href=\"#106\" id=\"106\">106</a>\n<a href=\"#107\" id=\"107\">107</a>\n<a href=\"#108\" id=\"108\">108</a>\n<a href=\"#109\" id=\"109\">109</a>\n<a href=\"#110\" id=\"110\">110</a>\n<a href=\"#111\" id=\"111\">111</a>\n<a href=\"#112\" id=\"112\">112</a>\n<a href=\"#113\" id=\"113\">113</a>\n<a href=\"#114\" id=\"114\">114</a>\n<a href=\"#115\" id=\"115\">115</a>\n<a href=\"#116\" id=\"116\">116</a>\n<a href=\"#117\" id=\"117\">117</a>\n<a href=\"#118\" id=\"118\">118</a>\n<a href=\"#119\" id=\"119\">119</a>\n<a href=\"#120\" id=\"120\">120</a>\n<a href=\"#121\" id=\"121\">121</a>\n<a href=\"#122\" id=\"122\">122</a>\n<a href=\"#123\" id=\"123\">123</a>\n<a href=\"#124\" id=\"124\">124</a>\n<a href=\"#125\" id=\"125\">125</a>\n<a href=\"#126\" id=\"126\">126</a>\n<a href=\"#127\" id=\"127\">127</a>\n<a href=\"#128\" id=\"128\">128</a>\n<a href=\"#129\" id=\"129\">129</a>\n<a href=\"#130\" id=\"130\">130</a>\n<a href=\"#131\" id=\"131\">131</a>\n<a href=\"#132\" id=\"132\">132</a>\n<a href=\"#133\" id=\"133\">133</a>\n<a href=\"#134\" id=\"134\">134</a>\n<a href=\"#135\" id=\"135\">135</a>\n<a href=\"#136\" id=\"136\">136</a>\n<a href=\"#137\" id=\"137\">137</a>\n<a href=\"#138\" id=\"138\">138</a>\n<a href=\"#139\" id=\"139\">139</a>\n<a href=\"#140\" id=\"140\">140</a>\n<a href=\"#141\" id=\"141\">141</a>\n<a href=\"#142\" id=\"142\">142</a>\n<a href=\"#143\" id=\"143\">143</a>\n<a href=\"#144\" id=\"144\">144</a>\n<a href=\"#145\" id=\"145\">145</a>\n<a href=\"#146\" id=\"146\">146</a>\n<a href=\"#147\" id=\"147\">147</a>\n<a href=\"#148\" id=\"148\">148</a>\n<a href=\"#149\" id=\"149\">149</a>\n<a href=\"#150\" id=\"150\">150</a>\n<a href=\"#151\" id=\"151\">151</a>\n<a href=\"#152\" id=\"152\">152</a>\n<a href=\"#153\" id=\"153\">153</a>\n<a href=\"#154\" id=\"154\">154</a>\n<a href=\"#155\" id=\"155\">155</a>\n<a href=\"#156\" id=\"156\">156</a>\n<a href=\"#157\" id=\"157\">157</a>\n<a href=\"#158\" id=\"158\">158</a>\n<a href=\"#159\" id=\"159\">159</a>\n<a href=\"#160\" id=\"160\">160</a>\n<a href=\"#161\" id=\"161\">161</a>\n<a href=\"#162\" id=\"162\">162</a>\n<a href=\"#163\" id=\"163\">163</a>\n<a href=\"#164\" id=\"164\">164</a>\n<a href=\"#165\" id=\"165\">165</a>\n<a href=\"#166\" id=\"166\">166</a>\n<a href=\"#167\" id=\"167\">167</a>\n<a href=\"#168\" id=\"168\">168</a>\n<a href=\"#169\" id=\"169\">169</a>\n<a href=\"#170\" id=\"170\">170</a>\n<a href=\"#171\" id=\"171\">171</a>\n<a href=\"#172\" id=\"172\">172</a>\n<a href=\"#173\" id=\"173\">173</a>\n<a href=\"#174\" id=\"174\">174</a>\n<a href=\"#175\" id=\"175\">175</a>\n<a href=\"#176\" id=\"176\">176</a>\n<a href=\"#177\" id=\"177\">177</a>\n<a href=\"#178\" id=\"178\">178</a>\n<a href=\"#179\" id=\"179\">179</a>\n<a href=\"#180\" id=\"180\">180</a>\n<a href=\"#181\" id=\"181\">181</a>\n<a href=\"#182\" id=\"182\">182</a>\n<a href=\"#183\" id=\"183\">183</a>\n<a href=\"#184\" id=\"184\">184</a>\n<a href=\"#185\" id=\"185\">185</a>\n<a href=\"#186\" id=\"186\">186</a>\n<a href=\"#187\" id=\"187\">187</a>\n<a href=\"#188\" id=\"188\">188</a>\n<a href=\"#189\" id=\"189\">189</a>\n<a href=\"#190\" id=\"190\">190</a>\n<a href=\"#191\" id=\"191\">191</a>\n<a href=\"#192\" id=\"192\">192</a>\n<a href=\"#193\" id=\"193\">193</a>\n<a href=\"#194\" id=\"194\">194</a>\n<a href=\"#195\" id=\"195\">195</a>\n<a href=\"#196\" id=\"196\">196</a>\n<a href=\"#197\" id=\"197\">197</a>\n<a href=\"#198\" id=\"198\">198</a>\n<a href=\"#199\" id=\"199\">199</a>\n<a href=\"#200\" id=\"200\">200</a>\n<a href=\"#201\" id=\"201\">201</a>\n<a href=\"#202\" id=\"202\">202</a>\n<a href=\"#203\" id=\"203\">203</a>\n<a href=\"#204\" id=\"204\">204</a>\n<a href=\"#205\" id=\"205\">205</a>\n<a href=\"#206\" id=\"206\">206</a>\n<a href=\"#207\" id=\"207\">207</a>\n<a href=\"#208\" id=\"208\">208</a>\n<a href=\"#209\" id=\"209\">209</a>\n<a href=\"#210\" id=\"210\">210</a>\n<a href=\"#211\" id=\"211\">211</a>\n<a href=\"#212\" id=\"212\">212</a>\n<a href=\"#213\" id=\"213\">213</a>\n<a href=\"#214\" id=\"214\">214</a>\n<a href=\"#215\" id=\"215\">215</a>\n<a href=\"#216\" id=\"216\">216</a>\n<a href=\"#217\" id=\"217\">217</a>\n<a href=\"#218\" id=\"218\">218</a>\n<a href=\"#219\" id=\"219\">219</a>\n<a href=\"#220\" id=\"220\">220</a>\n<a href=\"#221\" id=\"221\">221</a>\n<a href=\"#222\" id=\"222\">222</a>\n<a href=\"#223\" id=\"223\">223</a>\n<a href=\"#224\" id=\"224\">224</a>\n<a href=\"#225\" id=\"225\">225</a>\n<a href=\"#226\" id=\"226\">226</a>\n<a href=\"#227\" id=\"227\">227</a>\n<a href=\"#228\" id=\"228\">228</a>\n<a href=\"#229\" id=\"229\">229</a>\n<a href=\"#230\" id=\"230\">230</a>\n<a href=\"#231\" id=\"231\">231</a>\n<a href=\"#232\" id=\"232\">232</a>\n<a href=\"#233\" id=\"233\">233</a>\n<a href=\"#234\" id=\"234\">234</a>\n<a href=\"#235\" id=\"235\">235</a>\n<a href=\"#236\" id=\"236\">236</a>\n<a href=\"#237\" id=\"237\">237</a>\n<a href=\"#238\" id=\"238\">238</a>\n<a href=\"#239\" id=\"239\">239</a>\n<a href=\"#240\" id=\"240\">240</a>\n<a href=\"#241\" id=\"241\">241</a>\n<a href=\"#242\" id=\"242\">242</a>\n<a href=\"#243\" id=\"243\">243</a>\n<a href=\"#244\" id=\"244\">244</a>\n<a href=\"#245\" id=\"245\">245</a>\n<a href=\"#246\" id=\"246\">246</a>\n<a href=\"#247\" id=\"247\">247</a>\n<a href=\"#248\" id=\"248\">248</a>\n<a href=\"#249\" id=\"249\">249</a>\n<a href=\"#250\" id=\"250\">250</a>\n<a href=\"#251\" id=\"251\">251</a>\n<a href=\"#252\" id=\"252\">252</a>\n<a href=\"#253\" id=\"253\">253</a>\n<a href=\"#254\" id=\"254\">254</a>\n<a href=\"#255\" id=\"255\">255</a>\n<a href=\"#256\" id=\"256\">256</a>\n<a href=\"#257\" id=\"257\">257</a>\n<a href=\"#258\" id=\"258\">258</a>\n<a href=\"#259\" id=\"259\">259</a>\n<a href=\"#260\" id=\"260\">260</a>\n<a href=\"#261\" id=\"261\">261</a>\n<a href=\"#262\" id=\"262\">262</a>\n<a href=\"#263\" id=\"263\">263</a>\n<a href=\"#264\" id=\"264\">264</a>\n<a href=\"#265\" id=\"265\">265</a>\n<a href=\"#266\" id=\"266\">266</a>\n<a href=\"#267\" id=\"267\">267</a>\n<a href=\"#268\" id=\"268\">268</a>\n<a href=\"#269\" id=\"269\">269</a>\n<a href=\"#270\" id=\"270\">270</a>\n<a href=\"#271\" id=\"271\">271</a>\n<a href=\"#272\" id=\"272\">272</a>\n<a href=\"#273\" id=\"273\">273</a>\n<a href=\"#274\" id=\"274\">274</a>\n<a href=\"#275\" id=\"275\">275</a>\n<a href=\"#276\" id=\"276\">276</a>\n<a href=\"#277\" id=\"277\">277</a>\n<a href=\"#278\" id=\"278\">278</a>\n<a href=\"#279\" id=\"279\">279</a>\n<a href=\"#280\" id=\"280\">280</a>\n<a href=\"#281\" id=\"281\">281</a>\n<a href=\"#282\" id=\"282\">282</a>\n<a href=\"#283\" id=\"283\">283</a>\n<a href=\"#284\" id=\"284\">284</a>\n<a href=\"#285\" id=\"285\">285</a>\n<a href=\"#286\" id=\"286\">286</a>\n<a href=\"#287\" id=\"287\">287</a>\n<a href=\"#288\" id=\"288\">288</a>\n<a href=\"#289\" id=\"289\">289</a>\n<a href=\"#290\" id=\"290\">290</a>\n<a href=\"#291\" id=\"291\">291</a>\n<a href=\"#292\" id=\"292\">292</a>\n<a href=\"#293\" id=\"293\">293</a>\n<a href=\"#294\" id=\"294\">294</a>\n<a href=\"#295\" id=\"295\">295</a>\n<a href=\"#296\" id=\"296\">296</a>\n<a href=\"#297\" id=\"297\">297</a>\n<a href=\"#298\" id=\"298\">298</a>\n<a href=\"#299\" id=\"299\">299</a>\n<a href=\"#300\" id=\"300\">300</a>\n<a href=\"#301\" id=\"301\">301</a>\n<a href=\"#302\" id=\"302\">302</a>\n<a href=\"#303\" id=\"303\">303</a>\n<a href=\"#304\" id=\"304\">304</a>\n<a href=\"#305\" id=\"305\">305</a>\n<a href=\"#306\" id=\"306\">306</a>\n<a href=\"#307\" id=\"307\">307</a>\n<a href=\"#308\" id=\"308\">308</a>\n<a href=\"#309\" id=\"309\">309</a>\n<a href=\"#310\" id=\"310\">310</a>\n<a href=\"#311\" id=\"311\">311</a>\n<a href=\"#312\" id=\"312\">312</a>\n<a href=\"#313\" id=\"313\">313</a>\n<a href=\"#314\" id=\"314\">314</a>\n<a href=\"#315\" id=\"315\">315</a>\n<a href=\"#316\" id=\"316\">316</a>\n<a href=\"#317\" id=\"317\">317</a>\n<a href=\"#318\" id=\"318\">318</a>\n<a href=\"#319\" id=\"319\">319</a>\n<a href=\"#320\" id=\"320\">320</a>\n<a href=\"#321\" id=\"321\">321</a>\n<a href=\"#322\" id=\"322\">322</a>\n<a href=\"#323\" id=\"323\">323</a>\n<a href=\"#324\" id=\"324\">324</a>\n<a href=\"#325\" id=\"325\">325</a>\n<a href=\"#326\" id=\"326\">326</a>\n<a href=\"#327\" id=\"327\">327</a>\n<a href=\"#328\" id=\"328\">328</a>\n<a href=\"#329\" id=\"329\">329</a>\n<a href=\"#330\" id=\"330\">330</a>\n<a href=\"#331\" id=\"331\">331</a>\n<a href=\"#332\" id=\"332\">332</a>\n<a href=\"#333\" id=\"333\">333</a>\n<a href=\"#334\" id=\"334\">334</a>\n<a href=\"#335\" id=\"335\">335</a>\n<a href=\"#336\" id=\"336\">336</a>\n<a href=\"#337\" id=\"337\">337</a>\n<a href=\"#338\" id=\"338\">338</a>\n<a href=\"#339\" id=\"339\">339</a>\n<a href=\"#340\" id=\"340\">340</a>\n<a href=\"#341\" id=\"341\">341</a>\n<a href=\"#342\" id=\"342\">342</a>\n<a href=\"#343\" id=\"343\">343</a>\n<a href=\"#344\" id=\"344\">344</a>\n<a href=\"#345\" id=\"345\">345</a>\n<a href=\"#346\" id=\"346\">346</a>\n<a href=\"#347\" id=\"347\">347</a>\n<a href=\"#348\" id=\"348\">348</a>\n<a href=\"#349\" id=\"349\">349</a>\n<a href=\"#350\" id=\"350\">350</a>\n<a href=\"#351\" id=\"351\">351</a>\n<a href=\"#352\" id=\"352\">352</a>\n<a href=\"#353\" id=\"353\">353</a>\n<a href=\"#354\" id=\"354\">354</a>\n<a href=\"#355\" id=\"355\">355</a>\n<a href=\"#356\" id=\"356\">356</a>\n<a href=\"#357\" id=\"357\">357</a>\n<a href=\"#358\" id=\"358\">358</a>\n<a href=\"#359\" id=\"359\">359</a>\n<a href=\"#360\" id=\"360\">360</a>\n<a href=\"#361\" id=\"361\">361</a>\n<a href=\"#362\" id=\"362\">362</a>\n<a href=\"#363\" id=\"363\">363</a>\n<a href=\"#364\" id=\"364\">364</a>\n<a href=\"#365\" id=\"365\">365</a>\n<a href=\"#366\" id=\"366\">366</a>\n<a href=\"#367\" id=\"367\">367</a>\n<a href=\"#368\" id=\"368\">368</a>\n<a href=\"#369\" id=\"369\">369</a>\n<a href=\"#370\" id=\"370\">370</a>\n<a href=\"#371\" id=\"371\">371</a>\n<a href=\"#372\" id=\"372\">372</a>\n<a href=\"#373\" id=\"373\">373</a>\n<a href=\"#374\" id=\"374\">374</a>\n<a href=\"#375\" id=\"375\">375</a>\n<a href=\"#376\" id=\"376\">376</a>\n<a href=\"#377\" id=\"377\">377</a>\n<a href=\"#378\" id=\"378\">378</a>\n<a href=\"#379\" id=\"379\">379</a>\n<a href=\"#380\" id=\"380\">380</a>\n<a href=\"#381\" id=\"381\">381</a>\n<a href=\"#382\" id=\"382\">382</a>\n<a href=\"#383\" id=\"383\">383</a>\n<a href=\"#384\" id=\"384\">384</a>\n<a href=\"#385\" id=\"385\">385</a>\n<a href=\"#386\" id=\"386\">386</a>\n<a href=\"#387\" id=\"387\">387</a>\n<a href=\"#388\" id=\"388\">388</a>\n<a href=\"#389\" id=\"389\">389</a>\n<a href=\"#390\" id=\"390\">390</a>\n<a href=\"#391\" id=\"391\">391</a>\n<a href=\"#392\" id=\"392\">392</a>\n<a href=\"#393\" id=\"393\">393</a>\n<a href=\"#394\" id=\"394\">394</a>\n<a href=\"#395\" id=\"395\">395</a>\n<a href=\"#396\" id=\"396\">396</a>\n<a href=\"#397\" id=\"397\">397</a>\n<a href=\"#398\" id=\"398\">398</a>\n<a href=\"#399\" id=\"399\">399</a>\n<a href=\"#400\" id=\"400\">400</a>\n<a href=\"#401\" id=\"401\">401</a>\n<a href=\"#402\" id=\"402\">402</a>\n<a href=\"#403\" id=\"403\">403</a>\n<a href=\"#404\" id=\"404\">404</a>\n<a href=\"#405\" id=\"405\">405</a>\n<a href=\"#406\" id=\"406\">406</a>\n<a href=\"#407\" id=\"407\">407</a>\n<a href=\"#408\" id=\"408\">408</a>\n<a href=\"#409\" id=\"409\">409</a>\n<a href=\"#410\" id=\"410\">410</a>\n<a href=\"#411\" id=\"411\">411</a>\n<a href=\"#412\" id=\"412\">412</a>\n<a href=\"#413\" id=\"413\">413</a>\n<a href=\"#414\" id=\"414\">414</a>\n<a href=\"#415\" id=\"415\">415</a>\n<a href=\"#416\" id=\"416\">416</a>\n<a href=\"#417\" id=\"417\">417</a>\n<a href=\"#418\" id=\"418\">418</a>\n<a href=\"#419\" id=\"419\">419</a>\n<a href=\"#420\" id=\"420\">420</a>\n<a href=\"#421\" id=\"421\">421</a>\n<a href=\"#422\" id=\"422\">422</a>\n<a href=\"#423\" id=\"423\">423</a>\n<a href=\"#424\" id=\"424\">424</a>\n<a href=\"#425\" id=\"425\">425</a>\n<a href=\"#426\" id=\"426\">426</a>\n<a href=\"#427\" id=\"427\">427</a>\n<a href=\"#428\" id=\"428\">428</a>\n<a href=\"#429\" id=\"429\">429</a>\n<a href=\"#430\" id=\"430\">430</a>\n<a href=\"#431\" id=\"431\">431</a>\n<a href=\"#432\" id=\"432\">432</a>\n<a href=\"#433\" id=\"433\">433</a>\n<a href=\"#434\" id=\"434\">434</a>\n<a href=\"#435\" id=\"435\">435</a>\n<a href=\"#436\" id=\"436\">436</a>\n<a href=\"#437\" id=\"437\">437</a>\n<a href=\"#438\" id=\"438\">438</a>\n<a href=\"#439\" id=\"439\">439</a>\n<a href=\"#440\" id=\"440\">440</a>\n<a href=\"#441\" id=\"441\">441</a>\n<a href=\"#442\" id=\"442\">442</a>\n<a href=\"#443\" id=\"443\">443</a>\n<a href=\"#444\" id=\"444\">444</a>\n<a href=\"#445\" id=\"445\">445</a>\n<a href=\"#446\" id=\"446\">446</a>\n<a href=\"#447\" id=\"447\">447</a>\n<a href=\"#448\" id=\"448\">448</a>\n<a href=\"#449\" id=\"449\">449</a>\n<a href=\"#450\" id=\"450\">450</a>\n<a href=\"#451\" id=\"451\">451</a>\n<a href=\"#452\" id=\"452\">452</a>\n<a href=\"#453\" id=\"453\">453</a>\n<a href=\"#454\" id=\"454\">454</a>\n<a href=\"#455\" id=\"455\">455</a>\n<a href=\"#456\" id=\"456\">456</a>\n<a href=\"#457\" id=\"457\">457</a>\n<a href=\"#458\" id=\"458\">458</a>\n<a href=\"#459\" id=\"459\">459</a>\n<a href=\"#460\" id=\"460\">460</a>\n<a href=\"#461\" id=\"461\">461</a>\n<a href=\"#462\" id=\"462\">462</a>\n<a href=\"#463\" id=\"463\">463</a>\n<a href=\"#464\" id=\"464\">464</a>\n<a href=\"#465\" id=\"465\">465</a>\n<a href=\"#466\" id=\"466\">466</a>\n<a href=\"#467\" id=\"467\">467</a>\n<a href=\"#468\" id=\"468\">468</a>\n<a href=\"#469\" id=\"469\">469</a>\n<a href=\"#470\" id=\"470\">470</a>\n<a href=\"#471\" id=\"471\">471</a>\n<a href=\"#472\" id=\"472\">472</a>\n<a href=\"#473\" id=\"473\">473</a>\n<a href=\"#474\" id=\"474\">474</a>\n<a href=\"#475\" id=\"475\">475</a>\n<a href=\"#476\" id=\"476\">476</a>\n<a href=\"#477\" id=\"477\">477</a>\n<a href=\"#478\" id=\"478\">478</a>\n<a href=\"#479\" id=\"479\">479</a>\n<a href=\"#480\" id=\"480\">480</a>\n<a href=\"#481\" id=\"481\">481</a>\n<a href=\"#482\" id=\"482\">482</a>\n<a href=\"#483\" id=\"483\">483</a>\n<a href=\"#484\" id=\"484\">484</a>\n<a href=\"#485\" id=\"485\">485</a>\n<a href=\"#486\" id=\"486\">486</a>\n<a href=\"#487\" id=\"487\">487</a>\n<a href=\"#488\" id=\"488\">488</a>\n<a href=\"#489\" id=\"489\">489</a>\n<a href=\"#490\" id=\"490\">490</a>\n<a href=\"#491\" id=\"491\">491</a>\n<a href=\"#492\" id=\"492\">492</a>\n<a href=\"#493\" id=\"493\">493</a>\n<a href=\"#494\" id=\"494\">494</a>\n<a href=\"#495\" id=\"495\">495</a>\n<a href=\"#496\" id=\"496\">496</a>\n<a href=\"#497\" id=\"497\">497</a>\n<a href=\"#498\" id=\"498\">498</a>\n<a href=\"#499\" id=\"499\">499</a>\n<a href=\"#500\" id=\"500\">500</a>\n<a href=\"#501\" id=\"501\">501</a>\n<a href=\"#502\" id=\"502\">502</a>\n<a href=\"#503\" id=\"503\">503</a>\n<a href=\"#504\" id=\"504\">504</a>\n<a href=\"#505\" id=\"505\">505</a>\n<a href=\"#506\" id=\"506\">506</a>\n<a href=\"#507\" id=\"507\">507</a>\n<a href=\"#508\" id=\"508\">508</a>\n<a href=\"#509\" id=\"509\">509</a>\n<a href=\"#510\" id=\"510\">510</a>\n<a href=\"#511\" id=\"511\">511</a>\n<a href=\"#512\" id=\"512\">512</a>\n<a href=\"#513\" id=\"513\">513</a>\n<a href=\"#514\" id=\"514\">514</a>\n<a href=\"#515\" id=\"515\">515</a>\n<a href=\"#516\" id=\"516\">516</a>\n<a href=\"#517\" id=\"517\">517</a>\n<a href=\"#518\" id=\"518\">518</a>\n<a href=\"#519\" id=\"519\">519</a>\n<a href=\"#520\" id=\"520\">520</a>\n<a href=\"#521\" id=\"521\">521</a>\n<a href=\"#522\" id=\"522\">522</a>\n<a href=\"#523\" id=\"523\">523</a>\n<a href=\"#524\" id=\"524\">524</a>\n<a href=\"#525\" id=\"525\">525</a>\n<a href=\"#526\" id=\"526\">526</a>\n<a href=\"#527\" id=\"527\">527</a>\n<a href=\"#528\" id=\"528\">528</a>\n<a href=\"#529\" id=\"529\">529</a>\n<a href=\"#530\" id=\"530\">530</a>\n<a href=\"#531\" id=\"531\">531</a>\n<a href=\"#532\" id=\"532\">532</a>\n<a href=\"#533\" id=\"533\">533</a>\n<a href=\"#534\" id=\"534\">534</a>\n<a href=\"#535\" id=\"535\">535</a>\n<a href=\"#536\" id=\"536\">536</a>\n<a href=\"#537\" id=\"537\">537</a>\n<a href=\"#538\" id=\"538\">538</a>\n<a href=\"#539\" id=\"539\">539</a>\n<a href=\"#540\" id=\"540\">540</a>\n<a href=\"#541\" id=\"541\">541</a>\n<a href=\"#542\" id=\"542\">542</a>\n<a href=\"#543\" id=\"543\">543</a>\n<a href=\"#544\" id=\"544\">544</a>\n<a href=\"#545\" id=\"545\">545</a>\n<a href=\"#546\" id=\"546\">546</a>\n<a href=\"#547\" id=\"547\">547</a>\n<a href=\"#548\" id=\"548\">548</a>\n<a href=\"#549\" id=\"549\">549</a>\n<a href=\"#550\" id=\"550\">550</a>\n<a href=\"#551\" id=\"551\">551</a>\n<a href=\"#552\" id=\"552\">552</a>\n<a href=\"#553\" id=\"553\">553</a>\n<a href=\"#554\" id=\"554\">554</a>\n<a href=\"#555\" id=\"555\">555</a>\n<a href=\"#556\" id=\"556\">556</a>\n<a href=\"#557\" id=\"557\">557</a>\n<a href=\"#558\" id=\"558\">558</a>\n<a href=\"#559\" id=\"559\">559</a>\n<a href=\"#560\" id=\"560\">560</a>\n<a href=\"#561\" id=\"561\">561</a>\n<a href=\"#562\" id=\"562\">562</a>\n<a href=\"#563\" id=\"563\">563</a>\n<a href=\"#564\" id=\"564\">564</a>\n<a href=\"#565\" id=\"565\">565</a>\n<a href=\"#566\" id=\"566\">566</a>\n<a href=\"#567\" id=\"567\">567</a>\n<a href=\"#568\" id=\"568\">568</a>\n<a href=\"#569\" id=\"569\">569</a>\n<a href=\"#570\" id=\"570\">570</a>\n<a href=\"#571\" id=\"571\">571</a>\n<a href=\"#572\" id=\"572\">572</a>\n<a href=\"#573\" id=\"573\">573</a>\n<a href=\"#574\" id=\"574\">574</a>\n<a href=\"#575\" id=\"575\">575</a>\n<a href=\"#576\" id=\"576\">576</a>\n<a href=\"#577\" id=\"577\">577</a>\n<a href=\"#578\" id=\"578\">578</a>\n<a href=\"#579\" id=\"579\">579</a>\n<a href=\"#580\" id=\"580\">580</a>\n<a href=\"#581\" id=\"581\">581</a>\n<a href=\"#582\" id=\"582\">582</a>\n<a href=\"#583\" id=\"583\">583</a>\n<a href=\"#584\" id=\"584\">584</a>\n<a href=\"#585\" id=\"585\">585</a>\n<a href=\"#586\" id=\"586\">586</a>\n<a href=\"#587\" id=\"587\">587</a>\n<a href=\"#588\" id=\"588\">588</a>\n<a href=\"#589\" id=\"589\">589</a>\n<a href=\"#590\" id=\"590\">590</a>\n<a href=\"#591\" id=\"591\">591</a>\n<a href=\"#592\" id=\"592\">592</a>\n<a href=\"#593\" id=\"593\">593</a>\n<a href=\"#594\" id=\"594\">594</a>\n<a href=\"#595\" id=\"595\">595</a>\n<a href=\"#596\" id=\"596\">596</a>\n<a href=\"#597\" id=\"597\">597</a>\n<a href=\"#598\" id=\"598\">598</a>\n<a href=\"#599\" id=\"599\">599</a>\n<a href=\"#600\" id=\"600\">600</a>\n<a href=\"#601\" id=\"601\">601</a>\n<a href=\"#602\" id=\"602\">602</a>\n<a href=\"#603\" id=\"603\">603</a>\n<a href=\"#604\" id=\"604\">604</a>\n<a href=\"#605\" id=\"605\">605</a>\n<a href=\"#606\" id=\"606\">606</a>\n<a href=\"#607\" id=\"607\">607</a>\n<a href=\"#608\" id=\"608\">608</a>\n<a href=\"#609\" id=\"609\">609</a>\n<a href=\"#610\" id=\"610\">610</a>\n<a href=\"#611\" id=\"611\">611</a>\n<a href=\"#612\" id=\"612\">612</a>\n<a href=\"#613\" id=\"613\">613</a>\n<a href=\"#614\" id=\"614\">614</a>\n<a href=\"#615\" id=\"615\">615</a>\n<a href=\"#616\" id=\"616\">616</a>\n<a href=\"#617\" id=\"617\">617</a>\n<a href=\"#618\" id=\"618\">618</a>\n<a href=\"#619\" id=\"619\">619</a>\n<a href=\"#620\" id=\"620\">620</a>\n<a href=\"#621\" id=\"621\">621</a>\n<a href=\"#622\" id=\"622\">622</a>\n<a href=\"#623\" id=\"623\">623</a>\n<a href=\"#624\" id=\"624\">624</a>\n<a href=\"#625\" id=\"625\">625</a>\n<a href=\"#626\" id=\"626\">626</a>\n<a href=\"#627\" id=\"627\">627</a>\n<a href=\"#628\" id=\"628\">628</a>\n<a href=\"#629\" id=\"629\">629</a>\n<a href=\"#630\" id=\"630\">630</a>\n<a href=\"#631\" id=\"631\">631</a>\n<a href=\"#632\" id=\"632\">632</a>\n<a href=\"#633\" id=\"633\">633</a>\n<a href=\"#634\" id=\"634\">634</a>\n<a href=\"#635\" id=\"635\">635</a>\n<a href=\"#636\" id=\"636\">636</a>\n<a href=\"#637\" id=\"637\">637</a>\n<a href=\"#638\" id=\"638\">638</a>\n<a href=\"#639\" id=\"639\">639</a>\n<a href=\"#640\" id=\"640\">640</a>\n<a href=\"#641\" id=\"641\">641</a>\n<a href=\"#642\" id=\"642\">642</a>\n<a href=\"#643\" id=\"643\">643</a>\n<a href=\"#644\" id=\"644\">644</a>\n<a href=\"#645\" id=\"645\">645</a>\n<a href=\"#646\" id=\"646\">646</a>\n<a href=\"#647\" id=\"647\">647</a>\n<a href=\"#648\" id=\"648\">648</a>\n<a href=\"#649\" id=\"649\">649</a>\n<a href=\"#650\" id=\"650\">650</a>\n<a href=\"#651\" id=\"651\">651</a>\n<a href=\"#652\" id=\"652\">652</a>\n<a href=\"#653\" id=\"653\">653</a>\n<a href=\"#654\" id=\"654\">654</a>\n<a href=\"#655\" id=\"655\">655</a>\n<a href=\"#656\" id=\"656\">656</a>\n<a href=\"#657\" id=\"657\">657</a>\n<a href=\"#658\" id=\"658\">658</a>\n<a href=\"#659\" id=\"659\">659</a>\n<a href=\"#660\" id=\"660\">660</a>\n<a href=\"#661\" id=\"661\">661</a>\n<a href=\"#662\" id=\"662\">662</a>\n<a href=\"#663\" id=\"663\">663</a>\n<a href=\"#664\" id=\"664\">664</a>\n<a href=\"#665\" id=\"665\">665</a>\n<a href=\"#666\" id=\"666\">666</a>\n<a href=\"#667\" id=\"667\">667</a>\n<a href=\"#668\" id=\"668\">668</a>\n<a href=\"#669\" id=\"669\">669</a>\n<a href=\"#670\" id=\"670\">670</a>\n<a href=\"#671\" id=\"671\">671</a>\n<a href=\"#672\" id=\"672\">672</a>\n<a href=\"#673\" id=\"673\">673</a>\n<a href=\"#674\" id=\"674\">674</a>\n<a href=\"#675\" id=\"675\">675</a>\n<a href=\"#676\" id=\"676\">676</a>\n<a href=\"#677\" id=\"677\">677</a>\n<a href=\"#678\" id=\"678\">678</a>\n<a href=\"#679\" id=\"679\">679</a>\n<a href=\"#680\" id=\"680\">680</a>\n<a href=\"#681\" id=\"681\">681</a>\n<a href=\"#682\" id=\"682\">682</a>\n<a href=\"#683\" id=\"683\">683</a>\n<a href=\"#684\" id=\"684\">684</a>\n<a href=\"#685\" id=\"685\">685</a>\n<a href=\"#686\" id=\"686\">686</a>\n<a href=\"#687\" id=\"687\">687</a>\n<a href=\"#688\" id=\"688\">688</a>\n<a href=\"#689\" id=\"689\">689</a>\n<a href=\"#690\" id=\"690\">690</a>\n<a href=\"#691\" id=\"691\">691</a>\n<a href=\"#692\" id=\"692\">692</a>\n<a href=\"#693\" id=\"693\">693</a>\n<a href=\"#694\" id=\"694\">694</a>\n<a href=\"#695\" id=\"695\">695</a>\n<a href=\"#696\" id=\"696\">696</a>\n<a href=\"#697\" id=\"697\">697</a>\n<a href=\"#698\" id=\"698\">698</a>\n<a href=\"#699\" id=\"699\">699</a>\n<a href=\"#700\" id=\"700\">700</a>\n<a href=\"#701\" id=\"701\">701</a>\n<a href=\"#702\" id=\"702\">702</a>\n<a href=\"#703\" id=\"703\">703</a>\n<a href=\"#704\" id=\"704\">704</a>\n<a href=\"#705\" id=\"705\">705</a>\n<a href=\"#706\" id=\"706\">706</a>\n<a href=\"#707\" id=\"707\">707</a>\n<a href=\"#708\" id=\"708\">708</a>\n<a href=\"#709\" id=\"709\">709</a>\n<a href=\"#710\" id=\"710\">710</a>\n<a href=\"#711\" id=\"711\">711</a>\n<a href=\"#712\" id=\"712\">712</a>\n<a href=\"#713\" id=\"713\">713</a>\n<a href=\"#714\" id=\"714\">714</a>\n<a href=\"#715\" id=\"715\">715</a>\n<a href=\"#716\" id=\"716\">716</a>\n<a href=\"#717\" id=\"717\">717</a>\n<a href=\"#718\" id=\"718\">718</a>\n<a href=\"#719\" id=\"719\">719</a>\n<a href=\"#720\" id=\"720\">720</a>\n<a href=\"#721\" id=\"721\">721</a>\n<a href=\"#722\" id=\"722\">722</a>\n<a href=\"#723\" id=\"723\">723</a>\n<a href=\"#724\" id=\"724\">724</a>\n<a href=\"#725\" id=\"725\">725</a>\n<a href=\"#726\" id=\"726\">726</a>\n<a href=\"#727\" id=\"727\">727</a>\n<a href=\"#728\" id=\"728\">728</a>\n<a href=\"#729\" id=\"729\">729</a>\n<a href=\"#730\" id=\"730\">730</a>\n<a href=\"#731\" id=\"731\">731</a>\n<a href=\"#732\" id=\"732\">732</a>\n<a href=\"#733\" id=\"733\">733</a>\n<a href=\"#734\" id=\"734\">734</a>\n<a href=\"#735\" id=\"735\">735</a>\n<a href=\"#736\" id=\"736\">736</a>\n<a href=\"#737\" id=\"737\">737</a>\n<a href=\"#738\" id=\"738\">738</a>\n<a href=\"#739\" id=\"739\">739</a>\n<a href=\"#740\" id=\"740\">740</a>\n<a href=\"#741\" id=\"741\">741</a>\n<a href=\"#742\" id=\"742\">742</a>\n<a href=\"#743\" id=\"743\">743</a>\n<a href=\"#744\" id=\"744\">744</a>\n<a href=\"#745\" id=\"745\">745</a>\n<a href=\"#746\" id=\"746\">746</a>\n<a href=\"#747\" id=\"747\">747</a>\n<a href=\"#748\" id=\"748\">748</a>\n<a href=\"#749\" id=\"749\">749</a>\n<a href=\"#750\" id=\"750\">750</a>\n<a href=\"#751\" id=\"751\">751</a>\n<a href=\"#752\" id=\"752\">752</a>\n<a href=\"#753\" id=\"753\">753</a>\n<a href=\"#754\" id=\"754\">754</a>\n<a href=\"#755\" id=\"755\">755</a>\n<a href=\"#756\" id=\"756\">756</a>\n<a href=\"#757\" id=\"757\">757</a>\n<a href=\"#758\" id=\"758\">758</a>\n<a href=\"#759\" id=\"759\">759</a>\n<a href=\"#760\" id=\"760\">760</a>\n<a href=\"#761\" id=\"761\">761</a>\n<a href=\"#762\" id=\"762\">762</a>\n<a href=\"#763\" id=\"763\">763</a>\n<a href=\"#764\" id=\"764\">764</a>\n<a href=\"#765\" id=\"765\">765</a>\n<a href=\"#766\" id=\"766\">766</a>\n<a href=\"#767\" id=\"767\">767</a>\n<a href=\"#768\" id=\"768\">768</a>\n<a href=\"#769\" id=\"769\">769</a>\n<a href=\"#770\" id=\"770\">770</a>\n<a href=\"#771\" id=\"771\">771</a>\n<a href=\"#772\" id=\"772\">772</a>\n<a href=\"#773\" id=\"773\">773</a>\n<a href=\"#774\" id=\"774\">774</a>\n<a href=\"#775\" id=\"775\">775</a>\n<a href=\"#776\" id=\"776\">776</a>\n<a href=\"#777\" id=\"777\">777</a>\n<a href=\"#778\" id=\"778\">778</a>\n<a href=\"#779\" id=\"779\">779</a>\n<a href=\"#780\" id=\"780\">780</a>\n<a href=\"#781\" id=\"781\">781</a>\n<a href=\"#782\" id=\"782\">782</a>\n<a href=\"#783\" id=\"783\">783</a>\n<a href=\"#784\" id=\"784\">784</a>\n<a href=\"#785\" id=\"785\">785</a>\n<a href=\"#786\" id=\"786\">786</a>\n<a href=\"#787\" id=\"787\">787</a>\n<a href=\"#788\" id=\"788\">788</a>\n<a href=\"#789\" id=\"789\">789</a>\n<a href=\"#790\" id=\"790\">790</a>\n<a href=\"#791\" id=\"791\">791</a>\n<a href=\"#792\" id=\"792\">792</a>\n<a href=\"#793\" id=\"793\">793</a>\n<a href=\"#794\" id=\"794\">794</a>\n<a href=\"#795\" id=\"795\">795</a>\n<a href=\"#796\" id=\"796\">796</a>\n<a href=\"#797\" id=\"797\">797</a>\n<a href=\"#798\" id=\"798\">798</a>\n<a href=\"#799\" id=\"799\">799</a>\n<a href=\"#800\" id=\"800\">800</a>\n<a href=\"#801\" id=\"801\">801</a>\n<a href=\"#802\" id=\"802\">802</a>\n<a href=\"#803\" id=\"803\">803</a>\n<a href=\"#804\" id=\"804\">804</a>\n<a href=\"#805\" id=\"805\">805</a>\n<a href=\"#806\" id=\"806\">806</a>\n<a href=\"#807\" id=\"807\">807</a>\n<a href=\"#808\" id=\"808\">808</a>\n<a href=\"#809\" id=\"809\">809</a>\n<a href=\"#810\" id=\"810\">810</a>\n<a href=\"#811\" id=\"811\">811</a>\n<a href=\"#812\" id=\"812\">812</a>\n<a href=\"#813\" id=\"813\">813</a>\n<a href=\"#814\" id=\"814\">814</a>\n<a href=\"#815\" id=\"815\">815</a>\n<a href=\"#816\" id=\"816\">816</a>\n<a href=\"#817\" id=\"817\">817</a>\n<a href=\"#818\" id=\"818\">818</a>\n<a href=\"#819\" id=\"819\">819</a>\n<a href=\"#820\" id=\"820\">820</a>\n<a href=\"#821\" id=\"821\">821</a>\n<a href=\"#822\" id=\"822\">822</a>\n<a href=\"#823\" id=\"823\">823</a>\n<a href=\"#824\" id=\"824\">824</a>\n<a href=\"#825\" id=\"825\">825</a>\n<a href=\"#826\" id=\"826\">826</a>\n<a href=\"#827\" id=\"827\">827</a>\n<a href=\"#828\" id=\"828\">828</a>\n<a href=\"#829\" id=\"829\">829</a>\n<a href=\"#830\" id=\"830\">830</a>\n<a href=\"#831\" id=\"831\">831</a>\n<a href=\"#832\" id=\"832\">832</a>\n<a href=\"#833\" id=\"833\">833</a>\n<a href=\"#834\" id=\"834\">834</a>\n<a href=\"#835\" id=\"835\">835</a>\n<a href=\"#836\" id=\"836\">836</a>\n<a href=\"#837\" id=\"837\">837</a>\n<a href=\"#838\" id=\"838\">838</a>\n<a href=\"#839\" id=\"839\">839</a>\n<a href=\"#840\" id=\"840\">840</a>\n<a href=\"#841\" id=\"841\">841</a>\n<a href=\"#842\" id=\"842\">842</a>\n<a href=\"#843\" id=\"843\">843</a>\n<a href=\"#844\" id=\"844\">844</a>\n<a href=\"#845\" id=\"845\">845</a>\n<a href=\"#846\" id=\"846\">846</a>\n<a href=\"#847\" id=\"847\">847</a>\n<a href=\"#848\" id=\"848\">848</a>\n<a href=\"#849\" id=\"849\">849</a>\n<a href=\"#850\" id=\"850\">850</a>\n<a href=\"#851\" id=\"851\">851</a>\n<a href=\"#852\" id=\"852\">852</a>\n<a href=\"#853\" id=\"853\">853</a>\n<a href=\"#854\" id=\"854\">854</a>\n<a href=\"#855\" id=\"855\">855</a>\n<a href=\"#856\" id=\"856\">856</a>\n<a href=\"#857\" id=\"857\">857</a>\n<a href=\"#858\" id=\"858\">858</a>\n<a href=\"#859\" id=\"859\">859</a>\n<a href=\"#860\" id=\"860\">860</a>\n<a href=\"#861\" id=\"861\">861</a>\n<a href=\"#862\" id=\"862\">862</a>\n<a href=\"#863\" id=\"863\">863</a>\n<a href=\"#864\" id=\"864\">864</a>\n<a href=\"#865\" id=\"865\">865</a>\n<a href=\"#866\" id=\"866\">866</a>\n<a href=\"#867\" id=\"867\">867</a>\n<a href=\"#868\" id=\"868\">868</a>\n<a href=\"#869\" id=\"869\">869</a>\n<a href=\"#870\" id=\"870\">870</a>\n<a href=\"#871\" id=\"871\">871</a>\n<a href=\"#872\" id=\"872\">872</a>\n<a href=\"#873\" id=\"873\">873</a>\n<a href=\"#874\" id=\"874\">874</a>\n<a href=\"#875\" id=\"875\">875</a>\n<a href=\"#876\" id=\"876\">876</a>\n<a href=\"#877\" id=\"877\">877</a>\n<a href=\"#878\" id=\"878\">878</a>\n<a href=\"#879\" id=\"879\">879</a>\n<a href=\"#880\" id=\"880\">880</a>\n<a href=\"#881\" id=\"881\">881</a>\n<a href=\"#882\" id=\"882\">882</a>\n<a href=\"#883\" id=\"883\">883</a>\n<a href=\"#884\" id=\"884\">884</a>\n<a href=\"#885\" id=\"885\">885</a>\n<a href=\"#886\" id=\"886\">886</a>\n<a href=\"#887\" id=\"887\">887</a>\n<a href=\"#888\" id=\"888\">888</a>\n<a href=\"#889\" id=\"889\">889</a>\n<a href=\"#890\" id=\"890\">890</a>\n<a href=\"#891\" id=\"891\">891</a>\n<a href=\"#892\" id=\"892\">892</a>\n<a href=\"#893\" id=\"893\">893</a>\n<a href=\"#894\" id=\"894\">894</a>\n<a href=\"#895\" id=\"895\">895</a>\n<a href=\"#896\" id=\"896\">896</a>\n<a href=\"#897\" id=\"897\">897</a>\n<a href=\"#898\" id=\"898\">898</a>\n<a href=\"#899\" id=\"899\">899</a>\n<a href=\"#900\" id=\"900\">900</a>\n<a href=\"#901\" id=\"901\">901</a>\n<a href=\"#902\" id=\"902\">902</a>\n<a href=\"#903\" id=\"903\">903</a>\n<a href=\"#904\" id=\"904\">904</a>\n<a href=\"#905\" id=\"905\">905</a>\n<a href=\"#906\" id=\"906\">906</a>\n<a href=\"#907\" id=\"907\">907</a>\n<a href=\"#908\" id=\"908\">908</a>\n<a href=\"#909\" id=\"909\">909</a>\n<a href=\"#910\" id=\"910\">910</a>\n<a href=\"#911\" id=\"911\">911</a>\n<a href=\"#912\" id=\"912\">912</a>\n<a href=\"#913\" id=\"913\">913</a>\n<a href=\"#914\" id=\"914\">914</a>\n<a href=\"#915\" id=\"915\">915</a>\n<a href=\"#916\" id=\"916\">916</a>\n<a href=\"#917\" id=\"917\">917</a>\n<a href=\"#918\" id=\"918\">918</a>\n<a href=\"#919\" id=\"919\">919</a>\n<a href=\"#920\" id=\"920\">920</a>\n<a href=\"#921\" id=\"921\">921</a>\n<a href=\"#922\" id=\"922\">922</a>\n<a href=\"#923\" id=\"923\">923</a>\n<a href=\"#924\" id=\"924\">924</a>\n<a href=\"#925\" id=\"925\">925</a>\n<a href=\"#926\" id=\"926\">926</a>\n<a href=\"#927\" id=\"927\">927</a>\n<a href=\"#928\" id=\"928\">928</a>\n<a href=\"#929\" id=\"929\">929</a>\n<a href=\"#930\" id=\"930\">930</a>\n<a href=\"#931\" id=\"931\">931</a>\n<a href=\"#932\" id=\"932\">932</a>\n<a href=\"#933\" id=\"933\">933</a>\n<a href=\"#934\" id=\"934\">934</a>\n<a href=\"#935\" id=\"935\">935</a>\n<a href=\"#936\" id=\"936\">936</a>\n<a href=\"#937\" id=\"937\">937</a>\n<a href=\"#938\" id=\"938\">938</a>\n<a href=\"#939\" id=\"939\">939</a>\n<a href=\"#940\" id=\"940\">940</a>\n<a href=\"#941\" id=\"941\">941</a>\n<a href=\"#942\" id=\"942\">942</a>\n<a href=\"#943\" id=\"943\">943</a>\n<a href=\"#944\" id=\"944\">944</a>\n<a href=\"#945\" id=\"945\">945</a>\n<a href=\"#946\" id=\"946\">946</a>\n<a href=\"#947\" id=\"947\">947</a>\n<a href=\"#948\" id=\"948\">948</a>\n<a href=\"#949\" id=\"949\">949</a>\n<a href=\"#950\" id=\"950\">950</a>\n<a href=\"#951\" id=\"951\">951</a>\n<a href=\"#952\" id=\"952\" class=\"line-highlighted\">952</a>\n<a href=\"#953\" id=\"953\">953</a>\n<a href=\"#954\" id=\"954\">954</a>\n<a href=\"#955\" id=\"955\">955</a>\n<a href=\"#956\" id=\"956\">956</a>\n<a href=\"#957\" id=\"957\">957</a>\n<a href=\"#958\" id=\"958\">958</a>\n<a href=\"#959\" id=\"959\">959</a>\n<a href=\"#960\" id=\"960\">960</a>\n<a href=\"#961\" id=\"961\">961</a>\n<a href=\"#962\" id=\"962\">962</a>\n<a href=\"#963\" id=\"963\">963</a>\n<a href=\"#964\" id=\"964\">964</a>\n<a href=\"#965\" id=\"965\">965</a>\n<a href=\"#966\" id=\"966\">966</a>\n<a href=\"#967\" id=\"967\">967</a>\n<a href=\"#968\" id=\"968\">968</a>\n<a href=\"#969\" id=\"969\">969</a>\n<a href=\"#970\" id=\"970\">970</a>\n<a href=\"#971\" id=\"971\">971</a>\n<a href=\"#972\" id=\"972\">972</a>\n<a href=\"#973\" id=\"973\">973</a>\n<a href=\"#974\" id=\"974\">974</a>\n<a href=\"#975\" id=\"975\">975</a>\n<a href=\"#976\" id=\"976\">976</a>\n<a href=\"#977\" id=\"977\">977</a>\n<a href=\"#978\" id=\"978\">978</a>\n<a href=\"#979\" id=\"979\">979</a>\n<a href=\"#980\" id=\"980\">980</a>\n<a href=\"#981\" id=\"981\">981</a>\n<a href=\"#982\" id=\"982\">982</a>\n<a href=\"#983\" id=\"983\">983</a>\n<a href=\"#984\" id=\"984\">984</a>\n<a href=\"#985\" id=\"985\">985</a>\n<a href=\"#986\" id=\"986\">986</a>\n<a href=\"#987\" id=\"987\">987</a>\n<a href=\"#988\" id=\"988\">988</a>\n<a href=\"#989\" id=\"989\">989</a>\n<a href=\"#990\" id=\"990\">990</a>\n<a href=\"#991\" id=\"991\">991</a>\n<a href=\"#992\" id=\"992\">992</a>\n<a href=\"#993\" id=\"993\">993</a>\n<a href=\"#994\" id=\"994\">994</a>\n<a href=\"#995\" id=\"995\">995</a>\n<a href=\"#996\" id=\"996\">996</a>\n<a href=\"#997\" id=\"997\">997</a>\n<a href=\"#998\" id=\"998\">998</a>\n<a href=\"#999\" id=\"999\">999</a>\n<a href=\"#1000\" id=\"1000\">1000</a>\n<a href=\"#1001\" id=\"1001\">1001</a>\n<a href=\"#1002\" id=\"1002\">1002</a>\n<a href=\"#1003\" id=\"1003\">1003</a>\n<a href=\"#1004\" id=\"1004\">1004</a>\n<a href=\"#1005\" id=\"1005\">1005</a>\n<a href=\"#1006\" id=\"1006\">1006</a>\n<a href=\"#1007\" id=\"1007\">1007</a>\n<a href=\"#1008\" id=\"1008\">1008</a>\n<a href=\"#1009\" id=\"1009\">1009</a>\n<a href=\"#1010\" id=\"1010\">1010</a>\n<a href=\"#1011\" id=\"1011\">1011</a>\n<a href=\"#1012\" id=\"1012\">1012</a>\n<a href=\"#1013\" id=\"1013\">1013</a>\n<a href=\"#1014\" id=\"1014\">1014</a>\n<a href=\"#1015\" id=\"1015\">1015</a>\n<a href=\"#1016\" id=\"1016\">1016</a>\n<a href=\"#1017\" id=\"1017\">1017</a>\n<a href=\"#1018\" id=\"1018\">1018</a>\n<a href=\"#1019\" id=\"1019\">1019</a>\n<a href=\"#1020\" id=\"1020\">1020</a>\n<a href=\"#1021\" id=\"1021\">1021</a>\n<a href=\"#1022\" id=\"1022\">1022</a>\n<a href=\"#1023\" id=\"1023\">1023</a>\n<a href=\"#1024\" id=\"1024\">1024</a>\n<a href=\"#1025\" id=\"1025\">1025</a>\n<a href=\"#1026\" id=\"1026\">1026</a>\n<a href=\"#1027\" id=\"1027\">1027</a>\n<a href=\"#1028\" id=\"1028\">1028</a>\n<a href=\"#1029\" id=\"1029\">1029</a>\n<a href=\"#1030\" id=\"1030\">1030</a>\n<a href=\"#1031\" id=\"1031\">1031</a>\n<a href=\"#1032\" id=\"1032\">1032</a>\n<a href=\"#1033\" id=\"1033\">1033</a>\n<a href=\"#1034\" id=\"1034\">1034</a>\n<a href=\"#1035\" id=\"1035\">1035</a>\n<a href=\"#1036\" id=\"1036\">1036</a>\n<a href=\"#1037\" id=\"1037\">1037</a>\n<a href=\"#1038\" id=\"1038\">1038</a>\n<a href=\"#1039\" id=\"1039\">1039</a>\n<a href=\"#1040\" id=\"1040\">1040</a>\n<a href=\"#1041\" id=\"1041\">1041</a>\n<a href=\"#1042\" id=\"1042\">1042</a>\n<a href=\"#1043\" id=\"1043\">1043</a>\n<a href=\"#1044\" id=\"1044\">1044</a>\n<a href=\"#1045\" id=\"1045\">1045</a>\n<a href=\"#1046\" id=\"1046\">1046</a>\n<a href=\"#1047\" id=\"1047\">1047</a>\n<a href=\"#1048\" id=\"1048\">1048</a>\n<a href=\"#1049\" id=\"1049\">1049</a>\n<a href=\"#1050\" id=\"1050\">1050</a>\n<a href=\"#1051\" id=\"1051\">1051</a>\n<a href=\"#1052\" id=\"1052\">1052</a>\n<a href=\"#1053\" id=\"1053\">1053</a>\n<a href=\"#1054\" id=\"1054\">1054</a>\n<a href=\"#1055\" id=\"1055\">1055</a>\n<a href=\"#1056\" id=\"1056\">1056</a>\n<a href=\"#1057\" id=\"1057\">1057</a>\n<a href=\"#1058\" id=\"1058\">1058</a>\n<a href=\"#1059\" id=\"1059\">1059</a>\n<a href=\"#1060\" id=\"1060\">1060</a>\n<a href=\"#1061\" id=\"1061\">1061</a>\n<a href=\"#1062\" id=\"1062\">1062</a>\n<a href=\"#1063\" id=\"1063\">1063</a>\n<a href=\"#1064\" id=\"1064\">1064</a>\n<a href=\"#1065\" id=\"1065\">1065</a>\n<a href=\"#1066\" id=\"1066\">1066</a>\n<a href=\"#1067\" id=\"1067\">1067</a>\n<a href=\"#1068\" id=\"1068\">1068</a>\n<a href=\"#1069\" id=\"1069\">1069</a>\n<a href=\"#1070\" id=\"1070\">1070</a>\n<a href=\"#1071\" id=\"1071\">1071</a>\n<a href=\"#1072\" id=\"1072\">1072</a>\n<a href=\"#1073\" id=\"1073\">1073</a>\n<a href=\"#1074\" id=\"1074\">1074</a>\n<a href=\"#1075\" id=\"1075\">1075</a>\n<a href=\"#1076\" id=\"1076\">1076</a>\n<a href=\"#1077\" id=\"1077\">1077</a>\n<a href=\"#1078\" id=\"1078\">1078</a>\n<a href=\"#1079\" id=\"1079\">1079</a>\n<a href=\"#1080\" id=\"1080\">1080</a>\n<a href=\"#1081\" id=\"1081\">1081</a>\n<a href=\"#1082\" id=\"1082\">1082</a>\n<a href=\"#1083\" id=\"1083\">1083</a>\n<a href=\"#1084\" id=\"1084\">1084</a>\n<a href=\"#1085\" id=\"1085\">1085</a>\n<a href=\"#1086\" id=\"1086\">1086</a>\n<a href=\"#1087\" id=\"1087\">1087</a>\n<a href=\"#1088\" id=\"1088\">1088</a>\n<a href=\"#1089\" id=\"1089\">1089</a>\n<a href=\"#1090\" id=\"1090\">1090</a>\n<a href=\"#1091\" id=\"1091\">1091</a>\n<a href=\"#1092\" id=\"1092\">1092</a>\n<a href=\"#1093\" id=\"1093\">1093</a>\n<a href=\"#1094\" id=\"1094\">1094</a>\n<a href=\"#1095\" id=\"1095\">1095</a>\n<a href=\"#1096\" id=\"1096\">1096</a>\n<a href=\"#1097\" id=\"1097\">1097</a>\n<a href=\"#1098\" id=\"1098\">1098</a>\n<a href=\"#1099\" id=\"1099\">1099</a>\n<a href=\"#1100\" id=\"1100\">1100</a>\n<a href=\"#1101\" id=\"1101\">1101</a>\n<a href=\"#1102\" id=\"1102\">1102</a>\n<a href=\"#1103\" id=\"1103\">1103</a>\n<a href=\"#1104\" id=\"1104\">1104</a>\n<a href=\"#1105\" id=\"1105\">1105</a>\n<a href=\"#1106\" id=\"1106\">1106</a>\n<a href=\"#1107\" id=\"1107\">1107</a>\n<a href=\"#1108\" id=\"1108\">1108</a>\n<a href=\"#1109\" id=\"1109\">1109</a>\n<a href=\"#1110\" id=\"1110\">1110</a>\n<a href=\"#1111\" id=\"1111\">1111</a>\n<a href=\"#1112\" id=\"1112\">1112</a>\n<a href=\"#1113\" id=\"1113\">1113</a>\n<a href=\"#1114\" id=\"1114\">1114</a>\n<a href=\"#1115\" id=\"1115\">1115</a>\n<a href=\"#1116\" id=\"1116\">1116</a>\n<a href=\"#1117\" id=\"1117\">1117</a>\n<a href=\"#1118\" id=\"1118\">1118</a>\n<a href=\"#1119\" id=\"1119\">1119</a>\n<a href=\"#1120\" id=\"1120\">1120</a>\n<a href=\"#1121\" id=\"1121\">1121</a>\n<a href=\"#1122\" id=\"1122\">1122</a>\n<a href=\"#1123\" id=\"1123\">1123</a>\n<a href=\"#1124\" id=\"1124\">1124</a>\n<a href=\"#1125\" id=\"1125\">1125</a>\n<a href=\"#1126\" id=\"1126\">1126</a>\n<a href=\"#1127\" id=\"1127\">1127</a>\n<a href=\"#1128\" id=\"1128\">1128</a>\n<a href=\"#1129\" id=\"1129\">1129</a>\n<a href=\"#1130\" id=\"1130\">1130</a>\n<a href=\"#1131\" id=\"1131\">1131</a>\n<a href=\"#1132\" id=\"1132\">1132</a>\n<a href=\"#1133\" id=\"1133\">1133</a>\n<a href=\"#1134\" id=\"1134\">1134</a>\n<a href=\"#1135\" id=\"1135\">1135</a>\n<a href=\"#1136\" id=\"1136\">1136</a>\n<a href=\"#1137\" id=\"1137\">1137</a>\n<a href=\"#1138\" id=\"1138\">1138</a>\n<a href=\"#1139\" id=\"1139\">1139</a>\n<a href=\"#1140\" id=\"1140\">1140</a>\n<a href=\"#1141\" id=\"1141\">1141</a>\n<a href=\"#1142\" id=\"1142\">1142</a>\n<a href=\"#1143\" id=\"1143\">1143</a>\n<a href=\"#1144\" id=\"1144\">1144</a>\n<a href=\"#1145\" id=\"1145\">1145</a>\n<a href=\"#1146\" id=\"1146\">1146</a>\n<a href=\"#1147\" id=\"1147\">1147</a>\n<a href=\"#1148\" id=\"1148\">1148</a>\n<a href=\"#1149\" id=\"1149\">1149</a>\n<a href=\"#1150\" id=\"1150\">1150</a>\n<a href=\"#1151\" id=\"1151\">1151</a>\n<a href=\"#1152\" id=\"1152\">1152</a>\n<a href=\"#1153\" id=\"1153\">1153</a>\n<a href=\"#1154\" id=\"1154\">1154</a>\n<a href=\"#1155\" id=\"1155\">1155</a>\n<a href=\"#1156\" id=\"1156\">1156</a>\n<a href=\"#1157\" id=\"1157\">1157</a>\n<a href=\"#1158\" id=\"1158\">1158</a>\n<a href=\"#1159\" id=\"1159\">1159</a>\n<a href=\"#1160\" id=\"1160\">1160</a>\n<a href=\"#1161\" id=\"1161\">1161</a>\n<a href=\"#1162\" id=\"1162\">1162</a>\n<a href=\"#1163\" id=\"1163\">1163</a>\n<a href=\"#1164\" id=\"1164\">1164</a>\n<a href=\"#1165\" id=\"1165\">1165</a>\n<a href=\"#1166\" id=\"1166\">1166</a>\n<a href=\"#1167\" id=\"1167\">1167</a>\n<a href=\"#1168\" id=\"1168\">1168</a>\n<a href=\"#1169\" id=\"1169\">1169</a>\n<a href=\"#1170\" id=\"1170\">1170</a>\n<a href=\"#1171\" id=\"1171\">1171</a>\n<a href=\"#1172\" id=\"1172\">1172</a>\n<a href=\"#1173\" id=\"1173\">1173</a>\n<a href=\"#1174\" id=\"1174\">1174</a>\n<a href=\"#1175\" id=\"1175\">1175</a>\n<a href=\"#1176\" id=\"1176\">1176</a>\n<a href=\"#1177\" id=\"1177\">1177</a>\n<a href=\"#1178\" id=\"1178\">1178</a>\n<a href=\"#1179\" id=\"1179\">1179</a>\n<a href=\"#1180\" id=\"1180\">1180</a>\n<a href=\"#1181\" id=\"1181\">1181</a>\n<a href=\"#1182\" id=\"1182\">1182</a>\n<a href=\"#1183\" id=\"1183\">1183</a>\n<a href=\"#1184\" id=\"1184\">1184</a>\n<a href=\"#1185\" id=\"1185\">1185</a>\n<a href=\"#1186\" id=\"1186\">1186</a>\n<a href=\"#1187\" id=\"1187\">1187</a>\n<a href=\"#1188\" id=\"1188\">1188</a>\n<a href=\"#1189\" id=\"1189\">1189</a>\n<a href=\"#1190\" id=\"1190\">1190</a>\n<a href=\"#1191\" id=\"1191\">1191</a>\n<a href=\"#1192\" id=\"1192\">1192</a>\n<a href=\"#1193\" id=\"1193\">1193</a>\n<a href=\"#1194\" id=\"1194\">1194</a>\n<a href=\"#1195\" id=\"1195\">1195</a>\n<a href=\"#1196\" id=\"1196\">1196</a>\n<a href=\"#1197\" id=\"1197\">1197</a>\n<a href=\"#1198\" id=\"1198\">1198</a>\n<a href=\"#1199\" id=\"1199\">1199</a>\n<a href=\"#1200\" id=\"1200\">1200</a>\n<a href=\"#1201\" id=\"1201\">1201</a>\n<a href=\"#1202\" id=\"1202\">1202</a>\n<a href=\"#1203\" id=\"1203\">1203</a>\n<a href=\"#1204\" id=\"1204\">1204</a>\n<a href=\"#1205\" id=\"1205\">1205</a>\n<a href=\"#1206\" id=\"1206\">1206</a>\n<a href=\"#1207\" id=\"1207\">1207</a>\n<a href=\"#1208\" id=\"1208\">1208</a>\n<a href=\"#1209\" id=\"1209\">1209</a>\n<a href=\"#1210\" id=\"1210\">1210</a>\n<a href=\"#1211\" id=\"1211\">1211</a>\n<a href=\"#1212\" id=\"1212\">1212</a>\n<a href=\"#1213\" id=\"1213\">1213</a>\n<a href=\"#1214\" id=\"1214\">1214</a>\n<a href=\"#1215\" id=\"1215\">1215</a>\n<a href=\"#1216\" id=\"1216\">1216</a>\n<a href=\"#1217\" id=\"1217\">1217</a>\n<a href=\"#1218\" id=\"1218\">1218</a>\n<a href=\"#1219\" id=\"1219\">1219</a>\n<a href=\"#1220\" id=\"1220\">1220</a>\n<a href=\"#1221\" id=\"1221\">1221</a>\n<a href=\"#1222\" id=\"1222\">1222</a>\n<a href=\"#1223\" id=\"1223\">1223</a>\n<a href=\"#1224\" id=\"1224\">1224</a>\n<a href=\"#1225\" id=\"1225\">1225</a>\n<a href=\"#1226\" id=\"1226\">1226</a>\n<a href=\"#1227\" id=\"1227\">1227</a>\n<a href=\"#1228\" id=\"1228\">1228</a>\n<a href=\"#1229\" id=\"1229\">1229</a>\n<a href=\"#1230\" id=\"1230\">1230</a>\n<a href=\"#1231\" id=\"1231\">1231</a>\n<a href=\"#1232\" id=\"1232\">1232</a>\n<a href=\"#1233\" id=\"1233\">1233</a>\n<a href=\"#1234\" id=\"1234\">1234</a>\n<a href=\"#1235\" id=\"1235\">1235</a>\n<a href=\"#1236\" id=\"1236\">1236</a>\n<a href=\"#1237\" id=\"1237\">1237</a>\n<a href=\"#1238\" id=\"1238\">1238</a>\n<a href=\"#1239\" id=\"1239\">1239</a>\n<a href=\"#1240\" id=\"1240\">1240</a>\n<a href=\"#1241\" id=\"1241\">1241</a>\n<a href=\"#1242\" id=\"1242\">1242</a>\n<a href=\"#1243\" id=\"1243\">1243</a>\n<a href=\"#1244\" id=\"1244\">1244</a>\n<a href=\"#1245\" id=\"1245\">1245</a>\n<a href=\"#1246\" id=\"1246\">1246</a>\n<a href=\"#1247\" id=\"1247\">1247</a>\n<a href=\"#1248\" id=\"1248\">1248</a>\n<a href=\"#1249\" id=\"1249\">1249</a>\n<a href=\"#1250\" id=\"1250\">1250</a>\n<a href=\"#1251\" id=\"1251\">1251</a>\n<a href=\"#1252\" id=\"1252\">1252</a>\n<a href=\"#1253\" id=\"1253\">1253</a>\n<a href=\"#1254\" id=\"1254\">1254</a>\n<a href=\"#1255\" id=\"1255\">1255</a>\n<a href=\"#1256\" id=\"1256\">1256</a>\n<a href=\"#1257\" id=\"1257\">1257</a>\n<a href=\"#1258\" id=\"1258\">1258</a>\n<a href=\"#1259\" id=\"1259\">1259</a>\n<a href=\"#1260\" id=\"1260\">1260</a>\n<a href=\"#1261\" id=\"1261\">1261</a>\n<a href=\"#1262\" id=\"1262\">1262</a>\n<a href=\"#1263\" id=\"1263\">1263</a>\n<a href=\"#1264\" id=\"1264\">1264</a>\n<a href=\"#1265\" id=\"1265\">1265</a>\n<a href=\"#1266\" id=\"1266\">1266</a>\n<a href=\"#1267\" id=\"1267\">1267</a>\n<a href=\"#1268\" id=\"1268\">1268</a>\n<a href=\"#1269\" id=\"1269\">1269</a>\n<a href=\"#1270\" id=\"1270\">1270</a>\n<a href=\"#1271\" id=\"1271\">1271</a>\n<a href=\"#1272\" id=\"1272\">1272</a>\n<a href=\"#1273\" id=\"1273\">1273</a>\n<a href=\"#1274\" id=\"1274\">1274</a>\n<a href=\"#1275\" id=\"1275\">1275</a>\n<a href=\"#1276\" id=\"1276\">1276</a>\n<a href=\"#1277\" id=\"1277\">1277</a>\n<a href=\"#1278\" id=\"1278\">1278</a>\n<a href=\"#1279\" id=\"1279\">1279</a>\n<a href=\"#1280\" id=\"1280\">1280</a>\n<a href=\"#1281\" id=\"1281\">1281</a>\n<a href=\"#1282\" id=\"1282\">1282</a>\n<a href=\"#1283\" id=\"1283\">1283</a>\n<a href=\"#1284\" id=\"1284\">1284</a>\n<a href=\"#1285\" id=\"1285\">1285</a>\n<a href=\"#1286\" id=\"1286\">1286</a>\n<a href=\"#1287\" id=\"1287\">1287</a>\n<a href=\"#1288\" id=\"1288\">1288</a>\n<a href=\"#1289\" id=\"1289\">1289</a>\n<a href=\"#1290\" id=\"1290\">1290</a>\n<a href=\"#1291\" id=\"1291\">1291</a>\n<a href=\"#1292\" id=\"1292\">1292</a>\n<a href=\"#1293\" id=\"1293\">1293</a>\n<a href=\"#1294\" id=\"1294\">1294</a>\n<a href=\"#1295\" id=\"1295\">1295</a>\n<a href=\"#1296\" id=\"1296\">1296</a>\n<a href=\"#1297\" id=\"1297\">1297</a>\n<a href=\"#1298\" id=\"1298\">1298</a>\n<a href=\"#1299\" id=\"1299\">1299</a>\n<a href=\"#1300\" id=\"1300\">1300</a>\n<a href=\"#1301\" id=\"1301\">1301</a>\n<a href=\"#1302\" id=\"1302\">1302</a>\n<a href=\"#1303\" id=\"1303\">1303</a>\n<a href=\"#1304\" id=\"1304\">1304</a>\n<a href=\"#1305\" id=\"1305\">1305</a>\n<a href=\"#1306\" id=\"1306\">1306</a>\n<a href=\"#1307\" id=\"1307\">1307</a>\n<a href=\"#1308\" id=\"1308\">1308</a>\n<a href=\"#1309\" id=\"1309\">1309</a>\n<a href=\"#1310\" id=\"1310\">1310</a>\n<a href=\"#1311\" id=\"1311\">1311</a>\n<a href=\"#1312\" id=\"1312\">1312</a>\n<a href=\"#1313\" id=\"1313\">1313</a>\n<a href=\"#1314\" id=\"1314\">1314</a>\n<a href=\"#1315\" id=\"1315\">1315</a>\n<a href=\"#1316\" id=\"1316\">1316</a>\n<a href=\"#1317\" id=\"1317\">1317</a>\n<a href=\"#1318\" id=\"1318\">1318</a>\n<a href=\"#1319\" id=\"1319\">1319</a>\n<a href=\"#1320\" id=\"1320\">1320</a>\n<a href=\"#1321\" id=\"1321\">1321</a>\n<a href=\"#1322\" id=\"1322\">1322</a>\n<a href=\"#1323\" id=\"1323\">1323</a>\n<a href=\"#1324\" id=\"1324\">1324</a>\n<a href=\"#1325\" id=\"1325\">1325</a>\n<a href=\"#1326\" id=\"1326\">1326</a>\n<a href=\"#1327\" id=\"1327\">1327</a>\n<a href=\"#1328\" id=\"1328\">1328</a>\n<a href=\"#1329\" id=\"1329\">1329</a>\n<a href=\"#1330\" id=\"1330\">1330</a>\n<a href=\"#1331\" id=\"1331\">1331</a>\n<a href=\"#1332\" id=\"1332\">1332</a>\n<a href=\"#1333\" id=\"1333\">1333</a>\n<a href=\"#1334\" id=\"1334\">1334</a>\n<a href=\"#1335\" id=\"1335\">1335</a>\n<a href=\"#1336\" id=\"1336\">1336</a>\n<a href=\"#1337\" id=\"1337\">1337</a>\n<a href=\"#1338\" id=\"1338\">1338</a>\n<a href=\"#1339\" id=\"1339\">1339</a>\n<a href=\"#1340\" id=\"1340\">1340</a>\n<a href=\"#1341\" id=\"1341\">1341</a>\n<a href=\"#1342\" id=\"1342\">1342</a>\n<a href=\"#1343\" id=\"1343\">1343</a>\n<a href=\"#1344\" id=\"1344\">1344</a>\n<a href=\"#1345\" id=\"1345\">1345</a>\n<a href=\"#1346\" id=\"1346\">1346</a>\n<a href=\"#1347\" id=\"1347\">1347</a>\n<a href=\"#1348\" id=\"1348\">1348</a>\n<a href=\"#1349\" id=\"1349\">1349</a>\n<a href=\"#1350\" id=\"1350\">1350</a>\n<a href=\"#1351\" id=\"1351\">1351</a>\n<a href=\"#1352\" id=\"1352\">1352</a>\n<a href=\"#1353\" id=\"1353\">1353</a>\n<a href=\"#1354\" id=\"1354\">1354</a>\n<a href=\"#1355\" id=\"1355\">1355</a>\n<a href=\"#1356\" id=\"1356\">1356</a>\n<a href=\"#1357\" id=\"1357\">1357</a>\n<a href=\"#1358\" id=\"1358\">1358</a>\n<a href=\"#1359\" id=\"1359\">1359</a>\n<a href=\"#1360\" id=\"1360\">1360</a>\n<a href=\"#1361\" id=\"1361\">1361</a>\n<a href=\"#1362\" id=\"1362\">1362</a>\n<a href=\"#1363\" id=\"1363\">1363</a>\n<a href=\"#1364\" id=\"1364\">1364</a>\n<a href=\"#1365\" id=\"1365\">1365</a>\n<a href=\"#1366\" id=\"1366\">1366</a>\n<a href=\"#1367\" id=\"1367\">1367</a>\n<a href=\"#1368\" id=\"1368\">1368</a>\n<a href=\"#1369\" id=\"1369\">1369</a>\n<a href=\"#1370\" id=\"1370\">1370</a>\n<a href=\"#1371\" id=\"1371\">1371</a>\n<a href=\"#1372\" id=\"1372\">1372</a>\n<a href=\"#1373\" id=\"1373\">1373</a>\n<a href=\"#1374\" id=\"1374\">1374</a>\n<a href=\"#1375\" id=\"1375\">1375</a>\n<a href=\"#1376\" id=\"1376\">1376</a>\n<a href=\"#1377\" id=\"1377\">1377</a>\n<a href=\"#1378\" id=\"1378\">1378</a>\n<a href=\"#1379\" id=\"1379\">1379</a>\n<a href=\"#1380\" id=\"1380\">1380</a>\n<a href=\"#1381\" id=\"1381\">1381</a>\n<a href=\"#1382\" id=\"1382\">1382</a>\n<a href=\"#1383\" id=\"1383\">1383</a>\n<a href=\"#1384\" id=\"1384\">1384</a>\n<a href=\"#1385\" id=\"1385\">1385</a>\n<a href=\"#1386\" id=\"1386\">1386</a>\n<a href=\"#1387\" id=\"1387\">1387</a>\n<a href=\"#1388\" id=\"1388\">1388</a>\n<a href=\"#1389\" id=\"1389\">1389</a>\n<a href=\"#1390\" id=\"1390\">1390</a>\n<a href=\"#1391\" id=\"1391\">1391</a>\n<a href=\"#1392\" id=\"1392\">1392</a>\n<a href=\"#1393\" id=\"1393\">1393</a>\n<a href=\"#1394\" id=\"1394\">1394</a>\n<a href=\"#1395\" id=\"1395\">1395</a>\n<a href=\"#1396\" id=\"1396\">1396</a>\n<a href=\"#1397\" id=\"1397\">1397</a>\n<a href=\"#1398\" id=\"1398\">1398</a>\n<a href=\"#1399\" id=\"1399\">1399</a>\n<a href=\"#1400\" id=\"1400\">1400</a>\n<a href=\"#1401\" id=\"1401\">1401</a>\n<a href=\"#1402\" id=\"1402\">1402</a>\n<a href=\"#1403\" id=\"1403\">1403</a>\n<a href=\"#1404\" id=\"1404\">1404</a>\n<a href=\"#1405\" id=\"1405\">1405</a>\n<a href=\"#1406\" id=\"1406\">1406</a>\n<a href=\"#1407\" id=\"1407\">1407</a>\n<a href=\"#1408\" id=\"1408\">1408</a>\n<a href=\"#1409\" id=\"1409\">1409</a>\n<a href=\"#1410\" id=\"1410\">1410</a>\n<a href=\"#1411\" id=\"1411\">1411</a>\n<a href=\"#1412\" id=\"1412\">1412</a>\n<a href=\"#1413\" id=\"1413\">1413</a>\n<a href=\"#1414\" id=\"1414\">1414</a>\n<a href=\"#1415\" id=\"1415\">1415</a>\n<a href=\"#1416\" id=\"1416\">1416</a>\n<a href=\"#1417\" id=\"1417\">1417</a>\n<a href=\"#1418\" id=\"1418\">1418</a>\n<a href=\"#1419\" id=\"1419\">1419</a>\n<a href=\"#1420\" id=\"1420\">1420</a>\n<a href=\"#1421\" id=\"1421\">1421</a>\n<a href=\"#1422\" id=\"1422\">1422</a>\n<a href=\"#1423\" id=\"1423\">1423</a>\n<a href=\"#1424\" id=\"1424\">1424</a>\n<a href=\"#1425\" id=\"1425\">1425</a>\n<a href=\"#1426\" id=\"1426\">1426</a>\n<a href=\"#1427\" id=\"1427\">1427</a>\n<a href=\"#1428\" id=\"1428\">1428</a>\n<a href=\"#1429\" id=\"1429\">1429</a>\n<a href=\"#1430\" id=\"1430\">1430</a>\n<a href=\"#1431\" id=\"1431\">1431</a>\n<a href=\"#1432\" id=\"1432\">1432</a>\n<a href=\"#1433\" id=\"1433\">1433</a>\n<a href=\"#1434\" id=\"1434\">1434</a>\n<a href=\"#1435\" id=\"1435\">1435</a>\n<a href=\"#1436\" id=\"1436\">1436</a>\n<a href=\"#1437\" id=\"1437\">1437</a>\n<a href=\"#1438\" id=\"1438\">1438</a>\n<a href=\"#1439\" id=\"1439\">1439</a>\n<a href=\"#1440\" id=\"1440\">1440</a>\n<a href=\"#1441\" id=\"1441\">1441</a>\n<a href=\"#1442\" id=\"1442\">1442</a>\n<a href=\"#1443\" id=\"1443\">1443</a>\n<a href=\"#1444\" id=\"1444\">1444</a>\n<a href=\"#1445\" id=\"1445\">1445</a>\n<a href=\"#1446\" id=\"1446\">1446</a>\n<a href=\"#1447\" id=\"1447\">1447</a>\n<a href=\"#1448\" id=\"1448\">1448</a>\n<a href=\"#1449\" id=\"1449\">1449</a>\n<a href=\"#1450\" id=\"1450\">1450</a>\n<a href=\"#1451\" id=\"1451\">1451</a>\n<a href=\"#1452\" id=\"1452\">1452</a>\n<a href=\"#1453\" id=\"1453\">1453</a>\n<a href=\"#1454\" id=\"1454\">1454</a>\n<a href=\"#1455\" id=\"1455\">1455</a>\n<a href=\"#1456\" id=\"1456\">1456</a>\n<a href=\"#1457\" id=\"1457\">1457</a>\n<a href=\"#1458\" id=\"1458\">1458</a>\n<a href=\"#1459\" id=\"1459\">1459</a>\n<a href=\"#1460\" id=\"1460\">1460</a>\n<a href=\"#1461\" id=\"1461\">1461</a>\n<a href=\"#1462\" id=\"1462\">1462</a>\n<a href=\"#1463\" id=\"1463\">1463</a>\n<a href=\"#1464\" id=\"1464\">1464</a>\n<a href=\"#1465\" id=\"1465\">1465</a>\n<a href=\"#1466\" id=\"1466\">1466</a>\n<a href=\"#1467\" id=\"1467\">1467</a>\n<a href=\"#1468\" id=\"1468\">1468</a>\n<a href=\"#1469\" id=\"1469\">1469</a>\n<a href=\"#1470\" id=\"1470\">1470</a>\n<a href=\"#1471\" id=\"1471\">1471</a>\n<a href=\"#1472\" id=\"1472\">1472</a>\n<a href=\"#1473\" id=\"1473\">1473</a>\n<a href=\"#1474\" id=\"1474\">1474</a>\n<a href=\"#1475\" id=\"1475\">1475</a>\n<a href=\"#1476\" id=\"1476\">1476</a>\n<a href=\"#1477\" id=\"1477\">1477</a>\n<a href=\"#1478\" id=\"1478\">1478</a>\n<a href=\"#1479\" id=\"1479\">1479</a>\n<a href=\"#1480\" id=\"1480\">1480</a>\n<a href=\"#1481\" id=\"1481\">1481</a>\n<a href=\"#1482\" id=\"1482\">1482</a>\n<a href=\"#1483\" id=\"1483\">1483</a>\n<a href=\"#1484\" id=\"1484\">1484</a>\n<a href=\"#1485\" id=\"1485\">1485</a>\n<a href=\"#1486\" id=\"1486\">1486</a>\n<a href=\"#1487\" id=\"1487\">1487</a>\n<a href=\"#1488\" id=\"1488\">1488</a>\n<a href=\"#1489\" id=\"1489\">1489</a>\n<a href=\"#1490\" id=\"1490\">1490</a>\n<a href=\"#1491\" id=\"1491\">1491</a>\n<a href=\"#1492\" id=\"1492\">1492</a>\n<a href=\"#1493\" id=\"1493\">1493</a>\n<a href=\"#1494\" id=\"1494\">1494</a>\n<a href=\"#1495\" id=\"1495\">1495</a>\n<a href=\"#1496\" id=\"1496\">1496</a>\n<a href=\"#1497\" id=\"1497\">1497</a>\n<a href=\"#1498\" id=\"1498\">1498</a>\n<a href=\"#1499\" id=\"1499\">1499</a>\n<a href=\"#1500\" id=\"1500\">1500</a>\n<a href=\"#1501\" id=\"1501\">1501</a>\n<a href=\"#1502\" id=\"1502\">1502</a>\n<a href=\"#1503\" id=\"1503\">1503</a>\n<a href=\"#1504\" id=\"1504\">1504</a>\n<a href=\"#1505\" id=\"1505\">1505</a>\n<a href=\"#1506\" id=\"1506\">1506</a>\n<a href=\"#1507\" id=\"1507\">1507</a>\n<a href=\"#1508\" id=\"1508\">1508</a>\n<a href=\"#1509\" id=\"1509\">1509</a>\n<a href=\"#1510\" id=\"1510\">1510</a>\n<a href=\"#1511\" id=\"1511\">1511</a>\n<a href=\"#1512\" id=\"1512\">1512</a>\n<a href=\"#1513\" id=\"1513\">1513</a>\n<a href=\"#1514\" id=\"1514\">1514</a>\n<a href=\"#1515\" id=\"1515\">1515</a>\n<a href=\"#1516\" id=\"1516\">1516</a>\n<a href=\"#1517\" id=\"1517\">1517</a>\n<a href=\"#1518\" id=\"1518\">1518</a>\n<a href=\"#1519\" id=\"1519\">1519</a>\n<a href=\"#1520\" id=\"1520\">1520</a>\n<a href=\"#1521\" id=\"1521\">1521</a>\n<a href=\"#1522\" id=\"1522\">1522</a>\n<a href=\"#1523\" id=\"1523\">1523</a>\n<a href=\"#1524\" id=\"1524\">1524</a>\n<a href=\"#1525\" id=\"1525\">1525</a>\n<a href=\"#1526\" id=\"1526\">1526</a>\n<a href=\"#1527\" id=\"1527\">1527</a>\n<a href=\"#1528\" id=\"1528\">1528</a>\n<a href=\"#1529\" id=\"1529\">1529</a>\n<a href=\"#1530\" id=\"1530\">1530</a>\n<a href=\"#1531\" id=\"1531\">1531</a>\n<a href=\"#1532\" id=\"1532\">1532</a>\n<a href=\"#1533\" id=\"1533\">1533</a>\n<a href=\"#1534\" id=\"1534\">1534</a>\n<a href=\"#1535\" id=\"1535\">1535</a>\n<a href=\"#1536\" id=\"1536\">1536</a>\n<a href=\"#1537\" id=\"1537\">1537</a>\n<a href=\"#1538\" id=\"1538\">1538</a>\n<a href=\"#1539\" id=\"1539\">1539</a>\n<a href=\"#1540\" id=\"1540\">1540</a>\n<a href=\"#1541\" id=\"1541\">1541</a>\n<a href=\"#1542\" id=\"1542\">1542</a>\n<a href=\"#1543\" id=\"1543\">1543</a>\n<a href=\"#1544\" id=\"1544\">1544</a>\n<a href=\"#1545\" id=\"1545\">1545</a>\n<a href=\"#1546\" id=\"1546\">1546</a>\n<a href=\"#1547\" id=\"1547\">1547</a>\n<a href=\"#1548\" id=\"1548\">1548</a>\n<a href=\"#1549\" id=\"1549\">1549</a>\n<a href=\"#1550\" id=\"1550\">1550</a>\n<a href=\"#1551\" id=\"1551\">1551</a>\n<a href=\"#1552\" id=\"1552\">1552</a>\n<a href=\"#1553\" id=\"1553\">1553</a>\n<a href=\"#1554\" id=\"1554\">1554</a>\n<a href=\"#1555\" id=\"1555\">1555</a>\n<a href=\"#1556\" id=\"1556\">1556</a>\n<a href=\"#1557\" id=\"1557\">1557</a>\n<a href=\"#1558\" id=\"1558\">1558</a>\n<a href=\"#1559\" id=\"1559\">1559</a>\n<a href=\"#1560\" id=\"1560\">1560</a>\n<a href=\"#1561\" id=\"1561\">1561</a>\n<a href=\"#1562\" id=\"1562\">1562</a>\n<a href=\"#1563\" id=\"1563\">1563</a>\n<a href=\"#1564\" id=\"1564\">1564</a>\n<a href=\"#1565\" id=\"1565\">1565</a>\n<a href=\"#1566\" id=\"1566\">1566</a>\n<a href=\"#1567\" id=\"1567\">1567</a>\n<a href=\"#1568\" id=\"1568\">1568</a>\n<a href=\"#1569\" id=\"1569\">1569</a>\n<a href=\"#1570\" id=\"1570\">1570</a>\n<a href=\"#1571\" id=\"1571\">1571</a>\n<a href=\"#1572\" id=\"1572\">1572</a>\n<a href=\"#1573\" id=\"1573\">1573</a>\n<a href=\"#1574\" id=\"1574\">1574</a>\n<a href=\"#1575\" id=\"1575\">1575</a>\n<a href=\"#1576\" id=\"1576\">1576</a>\n<a href=\"#1577\" id=\"1577\">1577</a>\n<a href=\"#1578\" id=\"1578\">1578</a>\n<a href=\"#1579\" id=\"1579\">1579</a>\n<a href=\"#1580\" id=\"1580\">1580</a>\n<a href=\"#1581\" id=\"1581\">1581</a>\n<a href=\"#1582\" id=\"1582\">1582</a>\n<a href=\"#1583\" id=\"1583\">1583</a>\n<a href=\"#1584\" id=\"1584\">1584</a>\n<a href=\"#1585\" id=\"1585\">1585</a>\n<a href=\"#1586\" id=\"1586\">1586</a>\n<a href=\"#1587\" id=\"1587\">1587</a>\n<a href=\"#1588\" id=\"1588\">1588</a>\n<a href=\"#1589\" id=\"1589\">1589</a>\n<a href=\"#1590\" id=\"1590\">1590</a>\n<a href=\"#1591\" id=\"1591\">1591</a>\n<a href=\"#1592\" id=\"1592\">1592</a>\n<a href=\"#1593\" id=\"1593\">1593</a>\n<a href=\"#1594\" id=\"1594\">1594</a>\n<a href=\"#1595\" id=\"1595\">1595</a>\n<a href=\"#1596\" id=\"1596\">1596</a>\n<a href=\"#1597\" id=\"1597\">1597</a>\n<a href=\"#1598\" id=\"1598\">1598</a>\n<a href=\"#1599\" id=\"1599\">1599</a>\n<a href=\"#1600\" id=\"1600\">1600</a>\n<a href=\"#1601\" id=\"1601\">1601</a>\n<a href=\"#1602\" id=\"1602\">1602</a>\n<a href=\"#1603\" id=\"1603\">1603</a>\n<a href=\"#1604\" id=\"1604\">1604</a>\n<a href=\"#1605\" id=\"1605\">1605</a>\n<a href=\"#1606\" id=\"1606\">1606</a>\n<a href=\"#1607\" id=\"1607\">1607</a>\n<a href=\"#1608\" id=\"1608\">1608</a>\n<a href=\"#1609\" id=\"1609\">1609</a>\n<a href=\"#1610\" id=\"1610\">1610</a>\n<a href=\"#1611\" id=\"1611\">1611</a>\n<a href=\"#1612\" id=\"1612\">1612</a>\n<a href=\"#1613\" id=\"1613\">1613</a>\n<a href=\"#1614\" id=\"1614\">1614</a>\n<a href=\"#1615\" id=\"1615\">1615</a>\n<a href=\"#1616\" id=\"1616\">1616</a>\n<a href=\"#1617\" id=\"1617\">1617</a>\n<a href=\"#1618\" id=\"1618\">1618</a>\n<a href=\"#1619\" id=\"1619\">1619</a>\n<a href=\"#1620\" id=\"1620\">1620</a>\n<a href=\"#1621\" id=\"1621\">1621</a>\n<a href=\"#1622\" id=\"1622\">1622</a>\n<a href=\"#1623\" id=\"1623\">1623</a>\n<a href=\"#1624\" id=\"1624\">1624</a>\n<a href=\"#1625\" id=\"1625\">1625</a>\n<a href=\"#1626\" id=\"1626\">1626</a>\n<a href=\"#1627\" id=\"1627\">1627</a>\n<a href=\"#1628\" id=\"1628\">1628</a>\n<a href=\"#1629\" id=\"1629\">1629</a>\n<a href=\"#1630\" id=\"1630\">1630</a>\n<a href=\"#1631\" id=\"1631\">1631</a>\n<a href=\"#1632\" id=\"1632\">1632</a>\n<a href=\"#1633\" id=\"1633\">1633</a>\n<a href=\"#1634\" id=\"1634\">1634</a>\n<a href=\"#1635\" id=\"1635\">1635</a>\n<a href=\"#1636\" id=\"1636\">1636</a>\n<a href=\"#1637\" id=\"1637\">1637</a>\n<a href=\"#1638\" id=\"1638\">1638</a>\n<a href=\"#1639\" id=\"1639\">1639</a>\n<a href=\"#1640\" id=\"1640\">1640</a>\n<a href=\"#1641\" id=\"1641\">1641</a>\n<a href=\"#1642\" id=\"1642\">1642</a>\n<a href=\"#1643\" id=\"1643\">1643</a>\n<a href=\"#1644\" id=\"1644\">1644</a>\n<a href=\"#1645\" id=\"1645\">1645</a>\n<a href=\"#1646\" id=\"1646\">1646</a>\n<a href=\"#1647\" id=\"1647\">1647</a>\n<a href=\"#1648\" id=\"1648\">1648</a>\n<a href=\"#1649\" id=\"1649\">1649</a>\n<a href=\"#1650\" id=\"1650\">1650</a>\n<a href=\"#1651\" id=\"1651\">1651</a>\n<a href=\"#1652\" id=\"1652\">1652</a>\n<a href=\"#1653\" id=\"1653\">1653</a>\n<a href=\"#1654\" id=\"1654\">1654</a>\n<a href=\"#1655\" id=\"1655\">1655</a>\n<a href=\"#1656\" id=\"1656\">1656</a>\n<a href=\"#1657\" id=\"1657\">1657</a>\n<a href=\"#1658\" id=\"1658\">1658</a>\n<a href=\"#1659\" id=\"1659\">1659</a>\n<a href=\"#1660\" id=\"1660\">1660</a>\n<a href=\"#1661\" id=\"1661\">1661</a>\n<a href=\"#1662\" id=\"1662\">1662</a>\n<a href=\"#1663\" id=\"1663\">1663</a>\n<a href=\"#1664\" id=\"1664\">1664</a>\n<a href=\"#1665\" id=\"1665\">1665</a>\n<a href=\"#1666\" id=\"1666\">1666</a>\n<a href=\"#1667\" id=\"1667\">1667</a>\n<a href=\"#1668\" id=\"1668\">1668</a>\n<a href=\"#1669\" id=\"1669\">1669</a>\n<a href=\"#1670\" id=\"1670\">1670</a>\n<a href=\"#1671\" id=\"1671\">1671</a>\n<a href=\"#1672\" id=\"1672\">1672</a>\n<a href=\"#1673\" id=\"1673\">1673</a>\n<a href=\"#1674\" id=\"1674\">1674</a>\n<a href=\"#1675\" id=\"1675\">1675</a>\n<a href=\"#1676\" id=\"1676\">1676</a>\n<a href=\"#1677\" id=\"1677\">1677</a>\n<a href=\"#1678\" id=\"1678\">1678</a>\n<a href=\"#1679\" id=\"1679\">1679</a>\n<a href=\"#1680\" id=\"1680\">1680</a>\n<a href=\"#1681\" id=\"1681\">1681</a>\n<a href=\"#1682\" id=\"1682\">1682</a>\n<a href=\"#1683\" id=\"1683\">1683</a>\n<a href=\"#1684\" id=\"1684\">1684</a>\n<a href=\"#1685\" id=\"1685\">1685</a>\n<a href=\"#1686\" id=\"1686\">1686</a>\n<a href=\"#1687\" id=\"1687\">1687</a>\n<a href=\"#1688\" id=\"1688\">1688</a>\n<a href=\"#1689\" id=\"1689\">1689</a>\n<a href=\"#1690\" id=\"1690\">1690</a>\n<a href=\"#1691\" id=\"1691\">1691</a>\n<a href=\"#1692\" id=\"1692\">1692</a>\n<a href=\"#1693\" id=\"1693\">1693</a>\n<a href=\"#1694\" id=\"1694\">1694</a>\n<a href=\"#1695\" id=\"1695\">1695</a>\n<a href=\"#1696\" id=\"1696\">1696</a>\n<a href=\"#1697\" id=\"1697\">1697</a>\n<a href=\"#1698\" id=\"1698\">1698</a>\n<a href=\"#1699\" id=\"1699\">1699</a>\n<a href=\"#1700\" id=\"1700\">1700</a>\n<a href=\"#1701\" id=\"1701\">1701</a>\n<a href=\"#1702\" id=\"1702\">1702</a>\n<a href=\"#1703\" id=\"1703\">1703</a>\n<a href=\"#1704\" id=\"1704\">1704</a>\n<a href=\"#1705\" id=\"1705\">1705</a>\n<a href=\"#1706\" id=\"1706\">1706</a>\n<a href=\"#1707\" id=\"1707\">1707</a>\n<a href=\"#1708\" id=\"1708\">1708</a>\n<a href=\"#1709\" id=\"1709\">1709</a>\n<a href=\"#1710\" id=\"1710\">1710</a>\n<a href=\"#1711\" id=\"1711\">1711</a>\n<a href=\"#1712\" id=\"1712\">1712</a>\n<a href=\"#1713\" id=\"1713\">1713</a>\n<a href=\"#1714\" id=\"1714\">1714</a>\n<a href=\"#1715\" id=\"1715\">1715</a>\n<a href=\"#1716\" id=\"1716\">1716</a>\n<a href=\"#1717\" id=\"1717\">1717</a>\n<a href=\"#1718\" id=\"1718\">1718</a>\n<a href=\"#1719\" id=\"1719\">1719</a>\n<a href=\"#1720\" id=\"1720\">1720</a>\n<a href=\"#1721\" id=\"1721\">1721</a>\n<a href=\"#1722\" id=\"1722\">1722</a>\n<a href=\"#1723\" id=\"1723\">1723</a>\n<a href=\"#1724\" id=\"1724\">1724</a>\n<a href=\"#1725\" id=\"1725\">1725</a>\n<a href=\"#1726\" id=\"1726\">1726</a>\n<a href=\"#1727\" id=\"1727\">1727</a>\n<a href=\"#1728\" id=\"1728\">1728</a>\n<a href=\"#1729\" id=\"1729\">1729</a>\n<a href=\"#1730\" id=\"1730\">1730</a>\n<a href=\"#1731\" id=\"1731\">1731</a>\n<a href=\"#1732\" id=\"1732\">1732</a>\n<a href=\"#1733\" id=\"1733\">1733</a>\n<a href=\"#1734\" id=\"1734\">1734</a>\n<a href=\"#1735\" id=\"1735\">1735</a>\n<a href=\"#1736\" id=\"1736\">1736</a>\n<a href=\"#1737\" id=\"1737\">1737</a>\n<a href=\"#1738\" id=\"1738\">1738</a>\n<a href=\"#1739\" id=\"1739\">1739</a>\n<a href=\"#1740\" id=\"1740\">1740</a>\n<a href=\"#1741\" id=\"1741\">1741</a>\n<a href=\"#1742\" id=\"1742\">1742</a>\n<a href=\"#1743\" id=\"1743\">1743</a>\n<a href=\"#1744\" id=\"1744\">1744</a>\n<a href=\"#1745\" id=\"1745\">1745</a>\n<a href=\"#1746\" id=\"1746\">1746</a>\n<a href=\"#1747\" id=\"1747\">1747</a>\n<a href=\"#1748\" id=\"1748\">1748</a>\n<a href=\"#1749\" id=\"1749\">1749</a>\n<a href=\"#1750\" id=\"1750\">1750</a>\n<a href=\"#1751\" id=\"1751\">1751</a>\n<a href=\"#1752\" id=\"1752\">1752</a>\n<a href=\"#1753\" id=\"1753\">1753</a>\n<a href=\"#1754\" id=\"1754\">1754</a>\n<a href=\"#1755\" id=\"1755\">1755</a>\n<a href=\"#1756\" id=\"1756\">1756</a>\n<a href=\"#1757\" id=\"1757\">1757</a>\n<a href=\"#1758\" id=\"1758\">1758</a>\n<a href=\"#1759\" id=\"1759\">1759</a>\n<a href=\"#1760\" id=\"1760\">1760</a>\n<a href=\"#1761\" id=\"1761\">1761</a>\n<a href=\"#1762\" id=\"1762\">1762</a>\n<a href=\"#1763\" id=\"1763\">1763</a>\n<a href=\"#1764\" id=\"1764\">1764</a>\n<a href=\"#1765\" id=\"1765\">1765</a>\n<a href=\"#1766\" id=\"1766\">1766</a>\n<a href=\"#1767\" id=\"1767\">1767</a>\n<a href=\"#1768\" id=\"1768\">1768</a>\n<a href=\"#1769\" id=\"1769\">1769</a>\n<a href=\"#1770\" id=\"1770\">1770</a>\n<a href=\"#1771\" id=\"1771\">1771</a>\n<a href=\"#1772\" id=\"1772\">1772</a>\n<a href=\"#1773\" id=\"1773\">1773</a>\n<a href=\"#1774\" id=\"1774\">1774</a>\n<a href=\"#1775\" id=\"1775\">1775</a>\n<a href=\"#1776\" id=\"1776\">1776</a>\n<a href=\"#1777\" id=\"1777\">1777</a>\n<a href=\"#1778\" id=\"1778\">1778</a>\n<a href=\"#1779\" id=\"1779\">1779</a>\n<a href=\"#1780\" id=\"1780\">1780</a>\n<a href=\"#1781\" id=\"1781\">1781</a>\n<a href=\"#1782\" id=\"1782\">1782</a>\n<a href=\"#1783\" id=\"1783\">1783</a>\n<a href=\"#1784\" id=\"1784\">1784</a>\n<a href=\"#1785\" id=\"1785\">1785</a>\n<a href=\"#1786\" id=\"1786\">1786</a>\n<a href=\"#1787\" id=\"1787\">1787</a>\n<a href=\"#1788\" id=\"1788\">1788</a>\n<a href=\"#1789\" id=\"1789\">1789</a>\n<a href=\"#1790\" id=\"1790\">1790</a>\n<a href=\"#1791\" id=\"1791\">1791</a>\n<a href=\"#1792\" id=\"1792\">1792</a>\n<a href=\"#1793\" id=\"1793\">1793</a>\n<a href=\"#1794\" id=\"1794\">1794</a>\n<a href=\"#1795\" id=\"1795\">1795</a>\n<a href=\"#1796\" id=\"1796\">1796</a>\n<a href=\"#1797\" id=\"1797\">1797</a>\n<a href=\"#1798\" id=\"1798\">1798</a>\n<a href=\"#1799\" id=\"1799\">1799</a>\n<a href=\"#1800\" id=\"1800\">1800</a>\n<a href=\"#1801\" id=\"1801\">1801</a>\n<a href=\"#1802\" id=\"1802\">1802</a>\n<a href=\"#1803\" id=\"1803\">1803</a>\n<a href=\"#1804\" id=\"1804\">1804</a>\n<a href=\"#1805\" id=\"1805\">1805</a>\n<a href=\"#1806\" id=\"1806\">1806</a>\n<a href=\"#1807\" id=\"1807\">1807</a>\n<a href=\"#1808\" id=\"1808\">1808</a>\n<a href=\"#1809\" id=\"1809\">1809</a>\n<a href=\"#1810\" id=\"1810\">1810</a>\n<a href=\"#1811\" id=\"1811\">1811</a>\n<a href=\"#1812\" id=\"1812\">1812</a>\n<a href=\"#1813\" id=\"1813\">1813</a>\n<a href=\"#1814\" id=\"1814\">1814</a>\n<a href=\"#1815\" id=\"1815\">1815</a>\n<a href=\"#1816\" id=\"1816\">1816</a>\n<a href=\"#1817\" id=\"1817\">1817</a>\n<a href=\"#1818\" id=\"1818\">1818</a>\n<a href=\"#1819\" id=\"1819\">1819</a>\n<a href=\"#1820\" id=\"1820\">1820</a>\n<a href=\"#1821\" id=\"1821\">1821</a>\n<a href=\"#1822\" id=\"1822\">1822</a>\n<a href=\"#1823\" id=\"1823\">1823</a>\n<a href=\"#1824\" id=\"1824\">1824</a>\n<a href=\"#1825\" id=\"1825\">1825</a>\n<a href=\"#1826\" id=\"1826\">1826</a>\n<a href=\"#1827\" id=\"1827\">1827</a>\n<a href=\"#1828\" id=\"1828\">1828</a>\n<a href=\"#1829\" id=\"1829\">1829</a>\n<a href=\"#1830\" id=\"1830\">1830</a>\n<a href=\"#1831\" id=\"1831\">1831</a>\n<a href=\"#1832\" id=\"1832\">1832</a>\n<a href=\"#1833\" id=\"1833\">1833</a>\n<a href=\"#1834\" id=\"1834\">1834</a>\n<a href=\"#1835\" id=\"1835\">1835</a>\n<a href=\"#1836\" id=\"1836\">1836</a>\n<a href=\"#1837\" id=\"1837\">1837</a>\n<a href=\"#1838\" id=\"1838\">1838</a>\n<a href=\"#1839\" id=\"1839\">1839</a>\n<a href=\"#1840\" id=\"1840\">1840</a>\n<a href=\"#1841\" id=\"1841\">1841</a>\n<a href=\"#1842\" id=\"1842\">1842</a>\n<a href=\"#1843\" id=\"1843\">1843</a>\n<a href=\"#1844\" id=\"1844\">1844</a>\n<a href=\"#1845\" id=\"1845\">1845</a>\n<a href=\"#1846\" id=\"1846\">1846</a>\n<a href=\"#1847\" id=\"1847\">1847</a>\n<a href=\"#1848\" id=\"1848\">1848</a>\n<a href=\"#1849\" id=\"1849\">1849</a>\n<a href=\"#1850\" id=\"1850\">1850</a>\n<a href=\"#1851\" id=\"1851\">1851</a>\n<a href=\"#1852\" id=\"1852\">1852</a>\n<a href=\"#1853\" id=\"1853\">1853</a>\n<a href=\"#1854\" id=\"1854\">1854</a>\n<a href=\"#1855\" id=\"1855\">1855</a>\n<a href=\"#1856\" id=\"1856\">1856</a>\n<a href=\"#1857\" id=\"1857\">1857</a>\n<a href=\"#1858\" id=\"1858\">1858</a>\n<a href=\"#1859\" id=\"1859\">1859</a>\n<a href=\"#1860\" id=\"1860\">1860</a>\n<a href=\"#1861\" id=\"1861\">1861</a>\n<a href=\"#1862\" id=\"1862\">1862</a>\n<a href=\"#1863\" id=\"1863\">1863</a>\n<a href=\"#1864\" id=\"1864\">1864</a>\n<a href=\"#1865\" id=\"1865\">1865</a>\n<a href=\"#1866\" id=\"1866\">1866</a>\n<a href=\"#1867\" id=\"1867\">1867</a>\n<a href=\"#1868\" id=\"1868\">1868</a>\n<a href=\"#1869\" id=\"1869\">1869</a>\n<a href=\"#1870\" id=\"1870\">1870</a>\n<a href=\"#1871\" id=\"1871\">1871</a>\n<a href=\"#1872\" id=\"1872\">1872</a>\n<a href=\"#1873\" id=\"1873\">1873</a>\n<a href=\"#1874\" id=\"1874\">1874</a>\n<a href=\"#1875\" id=\"1875\">1875</a>\n<a href=\"#1876\" id=\"1876\">1876</a>\n<a href=\"#1877\" id=\"1877\">1877</a>\n<a href=\"#1878\" id=\"1878\">1878</a>\n<a href=\"#1879\" id=\"1879\">1879</a>\n<a href=\"#1880\" id=\"1880\">1880</a>\n<a href=\"#1881\" id=\"1881\">1881</a>\n<a href=\"#1882\" id=\"1882\">1882</a>\n<a href=\"#1883\" id=\"1883\">1883</a>\n<a href=\"#1884\" id=\"1884\">1884</a>\n<a href=\"#1885\" id=\"1885\">1885</a>\n<a href=\"#1886\" id=\"1886\">1886</a>\n<a href=\"#1887\" id=\"1887\">1887</a>\n<a href=\"#1888\" id=\"1888\">1888</a>\n<a href=\"#1889\" id=\"1889\">1889</a>\n<a href=\"#1890\" id=\"1890\">1890</a>\n<a href=\"#1891\" id=\"1891\">1891</a>\n<a href=\"#1892\" id=\"1892\">1892</a>\n<a href=\"#1893\" id=\"1893\">1893</a>\n<a href=\"#1894\" id=\"1894\">1894</a>\n<a href=\"#1895\" id=\"1895\">1895</a>\n<a href=\"#1896\" id=\"1896\">1896</a>\n<a href=\"#1897\" id=\"1897\">1897</a>\n<a href=\"#1898\" id=\"1898\">1898</a>\n<a href=\"#1899\" id=\"1899\">1899</a>\n<a href=\"#1900\" id=\"1900\">1900</a>\n<a href=\"#1901\" id=\"1901\">1901</a>\n<a href=\"#1902\" id=\"1902\">1902</a>\n<a href=\"#1903\" id=\"1903\">1903</a>\n<a href=\"#1904\" id=\"1904\">1904</a>\n<a href=\"#1905\" id=\"1905\">1905</a>\n<a href=\"#1906\" id=\"1906\">1906</a>\n<a href=\"#1907\" id=\"1907\">1907</a>\n<a href=\"#1908\" id=\"1908\">1908</a>\n<a href=\"#1909\" id=\"1909\">1909</a>\n<a href=\"#1910\" id=\"1910\">1910</a>\n<a href=\"#1911\" id=\"1911\">1911</a>\n<a href=\"#1912\" id=\"1912\">1912</a>\n<a href=\"#1913\" id=\"1913\">1913</a>\n<a href=\"#1914\" id=\"1914\">1914</a>\n<a href=\"#1915\" id=\"1915\">1915</a>\n<a href=\"#1916\" id=\"1916\">1916</a>\n<a href=\"#1917\" id=\"1917\">1917</a>\n<a href=\"#1918\" id=\"1918\">1918</a>\n<a href=\"#1919\" id=\"1919\">1919</a>\n<a href=\"#1920\" id=\"1920\">1920</a>\n<a href=\"#1921\" id=\"1921\">1921</a>\n<a href=\"#1922\" id=\"1922\">1922</a>\n<a href=\"#1923\" id=\"1923\">1923</a>\n<a href=\"#1924\" id=\"1924\">1924</a>\n<a href=\"#1925\" id=\"1925\">1925</a>\n<a href=\"#1926\" id=\"1926\">1926</a>\n<a href=\"#1927\" id=\"1927\">1927</a>\n<a href=\"#1928\" id=\"1928\">1928</a>\n<a href=\"#1929\" id=\"1929\">1929</a>\n<a href=\"#1930\" id=\"1930\">1930</a>\n<a href=\"#1931\" id=\"1931\">1931</a>\n<a href=\"#1932\" id=\"1932\">1932</a>\n<a href=\"#1933\" id=\"1933\">1933</a>\n<a href=\"#1934\" id=\"1934\">1934</a>\n<a href=\"#1935\" id=\"1935\">1935</a>\n<a href=\"#1936\" id=\"1936\">1936</a>\n<a href=\"#1937\" id=\"1937\">1937</a>\n<a href=\"#1938\" id=\"1938\">1938</a>\n</pre></div><pre class=\"rust\"><code><span class=\"doccomment\">//! The string Pattern API.\n//!\n//! The Pattern API provides a generic mechanism for using different pattern\n//! types when searching through a string.\n//!\n//! For more details, see the traits [`Pattern`], [`Searcher`],\n//! [`ReverseSearcher`], and [`DoubleEndedSearcher`].\n//!\n//! Although this API is unstable, it is exposed via stable APIs on the\n//! [`str`] type.\n//!\n//! # Examples\n//!\n//! [`Pattern`] is [implemented][pattern-impls] in the stable API for\n//! [`&amp;str`][`str`], [`char`], slices of [`char`], and functions and closures\n//! implementing `FnMut(char) -&gt; bool`.\n//!\n//! ```\n//! let s = \"Can you find a needle in a haystack?\";\n//!\n//! // &amp;str pattern\n//! assert_eq!(s.find(\"you\"), Some(4));\n//! // char pattern\n//! assert_eq!(s.find('n'), Some(2));\n//! // array of chars pattern\n//! assert_eq!(s.find(&amp;['a', 'e', 'i', 'o', 'u']), Some(1));\n//! // slice of chars pattern\n//! assert_eq!(s.find(&amp;['a', 'e', 'i', 'o', 'u'][..]), Some(1));\n//! // closure pattern\n//! assert_eq!(s.find(|c: char| c.is_ascii_punctuation()), Some(35));\n//! ```\n//!\n//! [pattern-impls]: Pattern#implementors\n\n</span><span class=\"attr\">#![unstable(\n    feature = <span class=\"string\">\"pattern\"</span>,\n    reason = <span class=\"string\">\"API not fully fleshed out and ready to be stabilized\"</span>,\n    issue = <span class=\"string\">\"27721\"\n</span>)]\n\n</span><span class=\"kw\">use </span><span class=\"kw\">crate</span>::cmp;\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::cmp::Ordering;\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::convert::TryInto <span class=\"kw\">as _</span>;\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::fmt;\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::slice::memchr;\n\n<span class=\"comment\">// Pattern\n\n</span><span class=\"doccomment\">/// A string pattern.\n///\n/// A `Pattern&lt;'a&gt;` expresses that the implementing type\n/// can be used as a string pattern for searching in a [`&amp;'a str`][str].\n///\n/// For example, both `'a'` and `\"aa\"` are patterns that\n/// would match at index `1` in the string `\"baaaab\"`.\n///\n/// The trait itself acts as a builder for an associated\n/// [`Searcher`] type, which does the actual work of finding\n/// occurrences of the pattern in a string.\n///\n/// Depending on the type of the pattern, the behaviour of methods like\n/// [`str::find`] and [`str::contains`] can change. The table below describes\n/// some of those behaviours.\n///\n/// | Pattern type             | Match condition                           |\n/// |--------------------------|-------------------------------------------|\n/// | `&amp;str`                   | is substring                              |\n/// | `char`                   | is contained in string                    |\n/// | `&amp;[char]`                | any char in slice is contained in string  |\n/// | `F: FnMut(char) -&gt; bool` | `F` returns `true` for a char in string   |\n/// | `&amp;&amp;str`                  | is substring                              |\n/// | `&amp;String`                | is substring                              |\n///\n/// # Examples\n///\n/// ```\n/// // &amp;str\n/// assert_eq!(\"abaaa\".find(\"ba\"), Some(1));\n/// assert_eq!(\"abaaa\".find(\"bac\"), None);\n///\n/// // char\n/// assert_eq!(\"abaaa\".find('a'), Some(0));\n/// assert_eq!(\"abaaa\".find('b'), Some(1));\n/// assert_eq!(\"abaaa\".find('c'), None);\n///\n/// // &amp;[char; N]\n/// assert_eq!(\"ab\".find(&amp;['b', 'a']), Some(0));\n/// assert_eq!(\"abaaa\".find(&amp;['a', 'z']), Some(0));\n/// assert_eq!(\"abaaa\".find(&amp;['c', 'd']), None);\n///\n/// // &amp;[char]\n/// assert_eq!(\"ab\".find(&amp;['b', 'a'][..]), Some(0));\n/// assert_eq!(\"abaaa\".find(&amp;['a', 'z'][..]), Some(0));\n/// assert_eq!(\"abaaa\".find(&amp;['c', 'd'][..]), None);\n///\n/// // FnMut(char) -&gt; bool\n/// assert_eq!(\"abcdef_z\".find(|ch| ch &gt; 'd' &amp;&amp; ch &lt; 'y'), Some(4));\n/// assert_eq!(\"abcddd_z\".find(|ch| ch &gt; 'd' &amp;&amp; ch &lt; 'y'), None);\n/// ```\n</span><span class=\"kw\">pub trait </span>Pattern&lt;<span class=\"lifetime\">'a</span>&gt;: Sized {\n    <span class=\"doccomment\">/// Associated searcher for this pattern\n    </span><span class=\"kw\">type </span>Searcher: Searcher&lt;<span class=\"lifetime\">'a</span>&gt;;\n\n    <span class=\"doccomment\">/// Constructs the associated searcher from\n    /// `self` and the `haystack` to search in.\n    </span><span class=\"kw\">fn </span>into_searcher(<span class=\"self\">self</span>, haystack: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>str) -&gt; <span class=\"self\">Self</span>::Searcher;\n\n    <span class=\"doccomment\">/// Checks whether the pattern matches anywhere in the haystack\n    </span><span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>is_contained_in(<span class=\"self\">self</span>, haystack: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>str) -&gt; bool {\n        <span class=\"self\">self</span>.into_searcher(haystack).next_match().is_some()\n    }\n\n    <span class=\"doccomment\">/// Checks whether the pattern matches at the front of the haystack\n    </span><span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>is_prefix_of(<span class=\"self\">self</span>, haystack: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>str) -&gt; bool {\n        <span class=\"macro\">matches!</span>(<span class=\"self\">self</span>.into_searcher(haystack).next(), SearchStep::Match(<span class=\"number\">0</span>, <span class=\"kw\">_</span>))\n    }\n\n    <span class=\"doccomment\">/// Checks whether the pattern matches at the back of the haystack\n    </span><span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>is_suffix_of(<span class=\"self\">self</span>, haystack: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>str) -&gt; bool\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>::Searcher: ReverseSearcher&lt;<span class=\"lifetime\">'a</span>&gt;,\n    {\n        <span class=\"macro\">matches!</span>(<span class=\"self\">self</span>.into_searcher(haystack).next_back(), SearchStep::Match(<span class=\"kw\">_</span>, j) <span class=\"kw\">if </span>haystack.len() == j)\n    }\n\n    <span class=\"doccomment\">/// Removes the pattern from the front of haystack, if it matches.\n    </span><span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>strip_prefix_of(<span class=\"self\">self</span>, haystack: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>str) -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>str&gt; {\n        <span class=\"kw\">if let </span>SearchStep::Match(start, len) = <span class=\"self\">self</span>.into_searcher(haystack).next() {\n            <span class=\"macro\">debug_assert_eq!</span>(\n                start, <span class=\"number\">0</span>,\n                <span class=\"string\">\"The first search step from Searcher \\\n                 must include the first character\"\n            </span>);\n            <span class=\"comment\">// SAFETY: `Searcher` is known to return valid indices.\n            </span><span class=\"kw\">unsafe </span>{ <span class=\"prelude-val\">Some</span>(haystack.get_unchecked(len..)) }\n        } <span class=\"kw\">else </span>{\n            <span class=\"prelude-val\">None\n        </span>}\n    }\n\n    <span class=\"doccomment\">/// Removes the pattern from the back of haystack, if it matches.\n    </span><span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>strip_suffix_of(<span class=\"self\">self</span>, haystack: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>str) -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>str&gt;\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>::Searcher: ReverseSearcher&lt;<span class=\"lifetime\">'a</span>&gt;,\n    {\n        <span class=\"kw\">if let </span>SearchStep::Match(start, end) = <span class=\"self\">self</span>.into_searcher(haystack).next_back() {\n            <span class=\"macro\">debug_assert_eq!</span>(\n                end,\n                haystack.len(),\n                <span class=\"string\">\"The first search step from ReverseSearcher \\\n                 must include the last character\"\n            </span>);\n            <span class=\"comment\">// SAFETY: `Searcher` is known to return valid indices.\n            </span><span class=\"kw\">unsafe </span>{ <span class=\"prelude-val\">Some</span>(haystack.get_unchecked(..start)) }\n        } <span class=\"kw\">else </span>{\n            <span class=\"prelude-val\">None\n        </span>}\n    }\n}\n\n<span class=\"comment\">// Searcher\n\n</span><span class=\"doccomment\">/// Result of calling [`Searcher::next()`] or [`ReverseSearcher::next_back()`].\n</span><span class=\"attr\">#[derive(Copy, Clone, Eq, PartialEq, Debug)]\n</span><span class=\"kw\">pub enum </span>SearchStep {\n    <span class=\"doccomment\">/// Expresses that a match of the pattern has been found at\n    /// `haystack[a..b]`.\n    </span>Match(usize, usize),\n    <span class=\"doccomment\">/// Expresses that `haystack[a..b]` has been rejected as a possible match\n    /// of the pattern.\n    ///\n    /// Note that there might be more than one `Reject` between two `Match`es,\n    /// there is no requirement for them to be combined into one.\n    </span>Reject(usize, usize),\n    <span class=\"doccomment\">/// Expresses that every byte of the haystack has been visited, ending\n    /// the iteration.\n    </span>Done,\n}\n\n<span class=\"doccomment\">/// A searcher for a string pattern.\n///\n/// This trait provides methods for searching for non-overlapping\n/// matches of a pattern starting from the front (left) of a string.\n///\n/// It will be implemented by associated `Searcher`\n/// types of the [`Pattern`] trait.\n///\n/// The trait is marked unsafe because the indices returned by the\n/// [`next()`][Searcher::next] methods are required to lie on valid utf8\n/// boundaries in the haystack. This enables consumers of this trait to\n/// slice the haystack without additional runtime checks.\n</span><span class=\"kw\">pub unsafe trait </span>Searcher&lt;<span class=\"lifetime\">'a</span>&gt; {\n    <span class=\"doccomment\">/// Getter for the underlying string to be searched in\n    ///\n    /// Will always return the same [`&amp;str`][str].\n    </span><span class=\"kw\">fn </span>haystack(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>str;\n\n    <span class=\"doccomment\">/// Performs the next search step starting from the front.\n    ///\n    /// - Returns [`Match(a, b)`][SearchStep::Match] if `haystack[a..b]` matches\n    ///   the pattern.\n    /// - Returns [`Reject(a, b)`][SearchStep::Reject] if `haystack[a..b]` can\n    ///   not match the pattern, even partially.\n    /// - Returns [`Done`][SearchStep::Done] if every byte of the haystack has\n    ///   been visited.\n    ///\n    /// The stream of [`Match`][SearchStep::Match] and\n    /// [`Reject`][SearchStep::Reject] values up to a [`Done`][SearchStep::Done]\n    /// will contain index ranges that are adjacent, non-overlapping,\n    /// covering the whole haystack, and laying on utf8 boundaries.\n    ///\n    /// A [`Match`][SearchStep::Match] result needs to contain the whole matched\n    /// pattern, however [`Reject`][SearchStep::Reject] results may be split up\n    /// into arbitrary many adjacent fragments. Both ranges may have zero length.\n    ///\n    /// As an example, the pattern `\"aaa\"` and the haystack `\"cbaaaaab\"`\n    /// might produce the stream\n    /// `[Reject(0, 1), Reject(1, 2), Match(2, 5), Reject(5, 8)]`\n    </span><span class=\"kw\">fn </span>next(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; SearchStep;\n\n    <span class=\"doccomment\">/// Finds the next [`Match`][SearchStep::Match] result. See [`next()`][Searcher::next].\n    ///\n    /// Unlike [`next()`][Searcher::next], there is no guarantee that the returned ranges\n    /// of this and [`next_reject`][Searcher::next_reject] will overlap. This will return\n    /// `(start_match, end_match)`, where start_match is the index of where\n    /// the match begins, and end_match is the index after the end of the match.\n    </span><span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>next_match(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;(usize, usize)&gt; {\n        <span class=\"kw\">loop </span>{\n            <span class=\"kw\">match </span><span class=\"self\">self</span>.next() {\n                SearchStep::Match(a, b) =&gt; <span class=\"kw\">return </span><span class=\"prelude-val\">Some</span>((a, b)),\n                SearchStep::Done =&gt; <span class=\"kw\">return </span><span class=\"prelude-val\">None</span>,\n                <span class=\"kw\">_ </span>=&gt; <span class=\"kw\">continue</span>,\n            }\n        }\n    }\n\n    <span class=\"doccomment\">/// Finds the next [`Reject`][SearchStep::Reject] result. See [`next()`][Searcher::next]\n    /// and [`next_match()`][Searcher::next_match].\n    ///\n    /// Unlike [`next()`][Searcher::next], there is no guarantee that the returned ranges\n    /// of this and [`next_match`][Searcher::next_match] will overlap.\n    </span><span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>next_reject(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;(usize, usize)&gt; {\n        <span class=\"kw\">loop </span>{\n            <span class=\"kw\">match </span><span class=\"self\">self</span>.next() {\n                SearchStep::Reject(a, b) =&gt; <span class=\"kw\">return </span><span class=\"prelude-val\">Some</span>((a, b)),\n                SearchStep::Done =&gt; <span class=\"kw\">return </span><span class=\"prelude-val\">None</span>,\n                <span class=\"kw\">_ </span>=&gt; <span class=\"kw\">continue</span>,\n            }\n        }\n    }\n}\n\n<span class=\"doccomment\">/// A reverse searcher for a string pattern.\n///\n/// This trait provides methods for searching for non-overlapping\n/// matches of a pattern starting from the back (right) of a string.\n///\n/// It will be implemented by associated [`Searcher`]\n/// types of the [`Pattern`] trait if the pattern supports searching\n/// for it from the back.\n///\n/// The index ranges returned by this trait are not required\n/// to exactly match those of the forward search in reverse.\n///\n/// For the reason why this trait is marked unsafe, see the\n/// parent trait [`Searcher`].\n</span><span class=\"kw\">pub unsafe trait </span>ReverseSearcher&lt;<span class=\"lifetime\">'a</span>&gt;: Searcher&lt;<span class=\"lifetime\">'a</span>&gt; {\n    <span class=\"doccomment\">/// Performs the next search step starting from the back.\n    ///\n    /// - Returns [`Match(a, b)`][SearchStep::Match] if `haystack[a..b]`\n    ///   matches the pattern.\n    /// - Returns [`Reject(a, b)`][SearchStep::Reject] if `haystack[a..b]`\n    ///   can not match the pattern, even partially.\n    /// - Returns [`Done`][SearchStep::Done] if every byte of the haystack\n    ///   has been visited\n    ///\n    /// The stream of [`Match`][SearchStep::Match] and\n    /// [`Reject`][SearchStep::Reject] values up to a [`Done`][SearchStep::Done]\n    /// will contain index ranges that are adjacent, non-overlapping,\n    /// covering the whole haystack, and laying on utf8 boundaries.\n    ///\n    /// A [`Match`][SearchStep::Match] result needs to contain the whole matched\n    /// pattern, however [`Reject`][SearchStep::Reject] results may be split up\n    /// into arbitrary many adjacent fragments. Both ranges may have zero length.\n    ///\n    /// As an example, the pattern `\"aaa\"` and the haystack `\"cbaaaaab\"`\n    /// might produce the stream\n    /// `[Reject(7, 8), Match(4, 7), Reject(1, 4), Reject(0, 1)]`.\n    </span><span class=\"kw\">fn </span>next_back(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; SearchStep;\n\n    <span class=\"doccomment\">/// Finds the next [`Match`][SearchStep::Match] result.\n    /// See [`next_back()`][ReverseSearcher::next_back].\n    </span><span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>next_match_back(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;(usize, usize)&gt; {\n        <span class=\"kw\">loop </span>{\n            <span class=\"kw\">match </span><span class=\"self\">self</span>.next_back() {\n                SearchStep::Match(a, b) =&gt; <span class=\"kw\">return </span><span class=\"prelude-val\">Some</span>((a, b)),\n                SearchStep::Done =&gt; <span class=\"kw\">return </span><span class=\"prelude-val\">None</span>,\n                <span class=\"kw\">_ </span>=&gt; <span class=\"kw\">continue</span>,\n            }\n        }\n    }\n\n    <span class=\"doccomment\">/// Finds the next [`Reject`][SearchStep::Reject] result.\n    /// See [`next_back()`][ReverseSearcher::next_back].\n    </span><span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>next_reject_back(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;(usize, usize)&gt; {\n        <span class=\"kw\">loop </span>{\n            <span class=\"kw\">match </span><span class=\"self\">self</span>.next_back() {\n                SearchStep::Reject(a, b) =&gt; <span class=\"kw\">return </span><span class=\"prelude-val\">Some</span>((a, b)),\n                SearchStep::Done =&gt; <span class=\"kw\">return </span><span class=\"prelude-val\">None</span>,\n                <span class=\"kw\">_ </span>=&gt; <span class=\"kw\">continue</span>,\n            }\n        }\n    }\n}\n\n<span class=\"doccomment\">/// A marker trait to express that a [`ReverseSearcher`]\n/// can be used for a [`DoubleEndedIterator`] implementation.\n///\n/// For this, the impl of [`Searcher`] and [`ReverseSearcher`] need\n/// to follow these conditions:\n///\n/// - All results of `next()` need to be identical\n///   to the results of `next_back()` in reverse order.\n/// - `next()` and `next_back()` need to behave as\n///   the two ends of a range of values, that is they\n///   can not \"walk past each other\".\n///\n/// # Examples\n///\n/// `char::Searcher` is a `DoubleEndedSearcher` because searching for a\n/// [`char`] only requires looking at one at a time, which behaves the same\n/// from both ends.\n///\n/// `(&amp;str)::Searcher` is not a `DoubleEndedSearcher` because\n/// the pattern `\"aa\"` in the haystack `\"aaa\"` matches as either\n/// `\"[aa]a\"` or `\"a[aa]\"`, depending on which side it is searched.\n</span><span class=\"kw\">pub trait </span>DoubleEndedSearcher&lt;<span class=\"lifetime\">'a</span>&gt;: ReverseSearcher&lt;<span class=\"lifetime\">'a</span>&gt; {}\n\n<span class=\"comment\">/////////////////////////////////////////////////////////////////////////////\n// Impl for char\n/////////////////////////////////////////////////////////////////////////////\n\n</span><span class=\"doccomment\">/// Associated type for `&lt;char as Pattern&lt;'a&gt;&gt;::Searcher`.\n</span><span class=\"attr\">#[derive(Clone, Debug)]\n</span><span class=\"kw\">pub struct </span>CharSearcher&lt;<span class=\"lifetime\">'a</span>&gt; {\n    haystack: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>str,\n    <span class=\"comment\">// safety invariant: `finger`/`finger_back` must be a valid utf8 byte index of `haystack`\n    // This invariant can be broken *within* next_match and next_match_back, however\n    // they must exit with fingers on valid code point boundaries.\n    </span><span class=\"doccomment\">/// `finger` is the current byte index of the forward search.\n    /// Imagine that it exists before the byte at its index, i.e.\n    /// `haystack[finger]` is the first byte of the slice we must inspect during\n    /// forward searching\n    </span>finger: usize,\n    <span class=\"doccomment\">/// `finger_back` is the current byte index of the reverse search.\n    /// Imagine that it exists after the byte at its index, i.e.\n    /// haystack[finger_back - 1] is the last byte of the slice we must inspect during\n    /// forward searching (and thus the first byte to be inspected when calling next_back()).\n    </span>finger_back: usize,\n    <span class=\"doccomment\">/// The character being searched for\n    </span>needle: char,\n\n    <span class=\"comment\">// safety invariant: `utf8_size` must be less than 5\n    </span><span class=\"doccomment\">/// The number of bytes `needle` takes up when encoded in utf8.\n    </span>utf8_size: u8,\n    <span class=\"doccomment\">/// A utf8 encoded copy of the `needle`\n    </span>utf8_encoded: [u8; <span class=\"number\">4</span>],\n}\n\n<span class=\"kw\">impl </span>CharSearcher&lt;<span class=\"lifetime\">'_</span>&gt; {\n    <span class=\"kw\">fn </span>utf8_size(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; usize {\n        <span class=\"self\">self</span>.utf8_size.into()\n    }\n}\n\n<span class=\"kw\">unsafe impl</span>&lt;<span class=\"lifetime\">'a</span>&gt; Searcher&lt;<span class=\"lifetime\">'a</span>&gt; <span class=\"kw\">for </span>CharSearcher&lt;<span class=\"lifetime\">'a</span>&gt; {\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>haystack(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>str {\n        <span class=\"self\">self</span>.haystack\n    }\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>next(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; SearchStep {\n        <span class=\"kw\">let </span>old_finger = <span class=\"self\">self</span>.finger;\n        <span class=\"comment\">// SAFETY: 1-4 guarantee safety of `get_unchecked`\n        // 1. `self.finger` and `self.finger_back` are kept on unicode boundaries\n        //    (this is invariant)\n        // 2. `self.finger &gt;= 0` since it starts at 0 and only increases\n        // 3. `self.finger &lt; self.finger_back` because otherwise the char `iter`\n        //    would return `SearchStep::Done`\n        // 4. `self.finger` comes before the end of the haystack because `self.finger_back`\n        //    starts at the end and only decreases\n        </span><span class=\"kw\">let </span>slice = <span class=\"kw\">unsafe </span>{ <span class=\"self\">self</span>.haystack.get_unchecked(old_finger..<span class=\"self\">self</span>.finger_back) };\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = slice.chars();\n        <span class=\"kw\">let </span>old_len = iter.iter.len();\n        <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(ch) = iter.next() {\n            <span class=\"comment\">// add byte offset of current character\n            // without re-encoding as utf-8\n            </span><span class=\"self\">self</span>.finger += old_len - iter.iter.len();\n            <span class=\"kw\">if </span>ch == <span class=\"self\">self</span>.needle {\n                SearchStep::Match(old_finger, <span class=\"self\">self</span>.finger)\n            } <span class=\"kw\">else </span>{\n                SearchStep::Reject(old_finger, <span class=\"self\">self</span>.finger)\n            }\n        } <span class=\"kw\">else </span>{\n            SearchStep::Done\n        }\n    }\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>next_match(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;(usize, usize)&gt; {\n        <span class=\"kw\">loop </span>{\n            <span class=\"comment\">// get the haystack after the last character found\n            </span><span class=\"kw\">let </span>bytes = <span class=\"self\">self</span>.haystack.as_bytes().get(<span class=\"self\">self</span>.finger..<span class=\"self\">self</span>.finger_back)<span class=\"question-mark\">?</span>;\n            <span class=\"comment\">// the last byte of the utf8 encoded needle\n            // SAFETY: we have an invariant that `utf8_size &lt; 5`\n            </span><span class=\"kw\">let </span>last_byte = <span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">*</span><span class=\"self\">self</span>.utf8_encoded.get_unchecked(<span class=\"self\">self</span>.utf8_size() - <span class=\"number\">1</span>) };\n            <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(index) = memchr::memchr(last_byte, bytes) {\n                <span class=\"comment\">// The new finger is the index of the byte we found,\n                // plus one, since we memchr'd for the last byte of the character.\n                //\n                // Note that this doesn't always give us a finger on a UTF8 boundary.\n                // If we *didn't* find our character\n                // we may have indexed to the non-last byte of a 3-byte or 4-byte character.\n                // We can't just skip to the next valid starting byte because a character like\n                // ꁁ (U+A041 YI SYLLABLE PA), utf-8 `EA 81 81` will have us always find\n                // the second byte when searching for the third.\n                //\n                // However, this is totally okay. While we have the invariant that\n                // self.finger is on a UTF8 boundary, this invariant is not relied upon\n                // within this method (it is relied upon in CharSearcher::next()).\n                //\n                // We only exit this method when we reach the end of the string, or if we\n                // find something. When we find something the `finger` will be set\n                // to a UTF8 boundary.\n                </span><span class=\"self\">self</span>.finger += index + <span class=\"number\">1</span>;\n                <span class=\"kw\">if </span><span class=\"self\">self</span>.finger &gt;= <span class=\"self\">self</span>.utf8_size() {\n                    <span class=\"kw\">let </span>found_char = <span class=\"self\">self</span>.finger - <span class=\"self\">self</span>.utf8_size();\n                    <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(slice) = <span class=\"self\">self</span>.haystack.as_bytes().get(found_char..<span class=\"self\">self</span>.finger) {\n                        <span class=\"kw\">if </span>slice == <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.utf8_encoded[<span class=\"number\">0</span>..<span class=\"self\">self</span>.utf8_size()] {\n                            <span class=\"kw\">return </span><span class=\"prelude-val\">Some</span>((found_char, <span class=\"self\">self</span>.finger));\n                        }\n                    }\n                }\n            } <span class=\"kw\">else </span>{\n                <span class=\"comment\">// found nothing, exit\n                </span><span class=\"self\">self</span>.finger = <span class=\"self\">self</span>.finger_back;\n                <span class=\"kw\">return </span><span class=\"prelude-val\">None</span>;\n            }\n        }\n    }\n\n    <span class=\"comment\">// let next_reject use the default implementation from the Searcher trait\n</span>}\n\n<span class=\"kw\">unsafe impl</span>&lt;<span class=\"lifetime\">'a</span>&gt; ReverseSearcher&lt;<span class=\"lifetime\">'a</span>&gt; <span class=\"kw\">for </span>CharSearcher&lt;<span class=\"lifetime\">'a</span>&gt; {\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>next_back(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; SearchStep {\n        <span class=\"kw\">let </span>old_finger = <span class=\"self\">self</span>.finger_back;\n        <span class=\"comment\">// SAFETY: see the comment for next() above\n        </span><span class=\"kw\">let </span>slice = <span class=\"kw\">unsafe </span>{ <span class=\"self\">self</span>.haystack.get_unchecked(<span class=\"self\">self</span>.finger..old_finger) };\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = slice.chars();\n        <span class=\"kw\">let </span>old_len = iter.iter.len();\n        <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(ch) = iter.next_back() {\n            <span class=\"comment\">// subtract byte offset of current character\n            // without re-encoding as utf-8\n            </span><span class=\"self\">self</span>.finger_back -= old_len - iter.iter.len();\n            <span class=\"kw\">if </span>ch == <span class=\"self\">self</span>.needle {\n                SearchStep::Match(<span class=\"self\">self</span>.finger_back, old_finger)\n            } <span class=\"kw\">else </span>{\n                SearchStep::Reject(<span class=\"self\">self</span>.finger_back, old_finger)\n            }\n        } <span class=\"kw\">else </span>{\n            SearchStep::Done\n        }\n    }\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>next_match_back(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;(usize, usize)&gt; {\n        <span class=\"kw\">let </span>haystack = <span class=\"self\">self</span>.haystack.as_bytes();\n        <span class=\"kw\">loop </span>{\n            <span class=\"comment\">// get the haystack up to but not including the last character searched\n            </span><span class=\"kw\">let </span>bytes = haystack.get(<span class=\"self\">self</span>.finger..<span class=\"self\">self</span>.finger_back)<span class=\"question-mark\">?</span>;\n            <span class=\"comment\">// the last byte of the utf8 encoded needle\n            // SAFETY: we have an invariant that `utf8_size &lt; 5`\n            </span><span class=\"kw\">let </span>last_byte = <span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">*</span><span class=\"self\">self</span>.utf8_encoded.get_unchecked(<span class=\"self\">self</span>.utf8_size() - <span class=\"number\">1</span>) };\n            <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(index) = memchr::memrchr(last_byte, bytes) {\n                <span class=\"comment\">// we searched a slice that was offset by self.finger,\n                // add self.finger to recoup the original index\n                </span><span class=\"kw\">let </span>index = <span class=\"self\">self</span>.finger + index;\n                <span class=\"comment\">// memrchr will return the index of the byte we wish to\n                // find. In case of an ASCII character, this is indeed\n                // were we wish our new finger to be (\"after\" the found\n                // char in the paradigm of reverse iteration). For\n                // multibyte chars we need to skip down by the number of more\n                // bytes they have than ASCII\n                </span><span class=\"kw\">let </span>shift = <span class=\"self\">self</span>.utf8_size() - <span class=\"number\">1</span>;\n                <span class=\"kw\">if </span>index &gt;= shift {\n                    <span class=\"kw\">let </span>found_char = index - shift;\n                    <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(slice) = haystack.get(found_char..(found_char + <span class=\"self\">self</span>.utf8_size())) {\n                        <span class=\"kw\">if </span>slice == <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.utf8_encoded[<span class=\"number\">0</span>..<span class=\"self\">self</span>.utf8_size()] {\n                            <span class=\"comment\">// move finger to before the character found (i.e., at its start index)\n                            </span><span class=\"self\">self</span>.finger_back = found_char;\n                            <span class=\"kw\">return </span><span class=\"prelude-val\">Some</span>((<span class=\"self\">self</span>.finger_back, <span class=\"self\">self</span>.finger_back + <span class=\"self\">self</span>.utf8_size()));\n                        }\n                    }\n                }\n                <span class=\"comment\">// We can't use finger_back = index - size + 1 here. If we found the last char\n                // of a different-sized character (or the middle byte of a different character)\n                // we need to bump the finger_back down to `index`. This similarly makes\n                // `finger_back` have the potential to no longer be on a boundary,\n                // but this is OK since we only exit this function on a boundary\n                // or when the haystack has been searched completely.\n                //\n                // Unlike next_match this does not\n                // have the problem of repeated bytes in utf-8 because\n                // we're searching for the last byte, and we can only have\n                // found the last byte when searching in reverse.\n                </span><span class=\"self\">self</span>.finger_back = index;\n            } <span class=\"kw\">else </span>{\n                <span class=\"self\">self</span>.finger_back = <span class=\"self\">self</span>.finger;\n                <span class=\"comment\">// found nothing, exit\n                </span><span class=\"kw\">return </span><span class=\"prelude-val\">None</span>;\n            }\n        }\n    }\n\n    <span class=\"comment\">// let next_reject_back use the default implementation from the Searcher trait\n</span>}\n\n<span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span>&gt; DoubleEndedSearcher&lt;<span class=\"lifetime\">'a</span>&gt; <span class=\"kw\">for </span>CharSearcher&lt;<span class=\"lifetime\">'a</span>&gt; {}\n\n<span class=\"doccomment\">/// Searches for chars that are equal to a given [`char`].\n///\n/// # Examples\n///\n/// ```\n/// assert_eq!(\"Hello world\".find('o'), Some(4));\n/// ```\n</span><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span>&gt; Pattern&lt;<span class=\"lifetime\">'a</span>&gt; <span class=\"kw\">for </span>char {\n    <span class=\"kw\">type </span>Searcher = CharSearcher&lt;<span class=\"lifetime\">'a</span>&gt;;\n\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>into_searcher(<span class=\"self\">self</span>, haystack: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>str) -&gt; <span class=\"self\">Self</span>::Searcher {\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>utf8_encoded = [<span class=\"number\">0</span>; <span class=\"number\">4</span>];\n        <span class=\"kw\">let </span>utf8_size = <span class=\"self\">self\n            </span>.encode_utf8(<span class=\"kw-2\">&amp;mut </span>utf8_encoded)\n            .len()\n            .try_into()\n            .expect(<span class=\"string\">\"char len should be less than 255\"</span>);\n\n        CharSearcher {\n            haystack,\n            finger: <span class=\"number\">0</span>,\n            finger_back: haystack.len(),\n            needle: <span class=\"self\">self</span>,\n            utf8_size,\n            utf8_encoded,\n        }\n    }\n\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>is_contained_in(<span class=\"self\">self</span>, haystack: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>str) -&gt; bool {\n        <span class=\"kw\">if </span>(<span class=\"self\">self </span><span class=\"kw\">as </span>u32) &lt; <span class=\"number\">128 </span>{\n            haystack.as_bytes().contains(<span class=\"kw-2\">&amp;</span>(<span class=\"self\">self </span><span class=\"kw\">as </span>u8))\n        } <span class=\"kw\">else </span>{\n            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buffer = [<span class=\"number\">0u8</span>; <span class=\"number\">4</span>];\n            <span class=\"self\">self</span>.encode_utf8(<span class=\"kw-2\">&amp;mut </span>buffer).is_contained_in(haystack)\n        }\n    }\n\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>is_prefix_of(<span class=\"self\">self</span>, haystack: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>str) -&gt; bool {\n        <span class=\"self\">self</span>.encode_utf8(<span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">0u8</span>; <span class=\"number\">4</span>]).is_prefix_of(haystack)\n    }\n\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>strip_prefix_of(<span class=\"self\">self</span>, haystack: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>str) -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>str&gt; {\n        <span class=\"self\">self</span>.encode_utf8(<span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">0u8</span>; <span class=\"number\">4</span>]).strip_prefix_of(haystack)\n    }\n\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>is_suffix_of(<span class=\"self\">self</span>, haystack: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>str) -&gt; bool\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>::Searcher: ReverseSearcher&lt;<span class=\"lifetime\">'a</span>&gt;,\n    {\n        <span class=\"self\">self</span>.encode_utf8(<span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">0u8</span>; <span class=\"number\">4</span>]).is_suffix_of(haystack)\n    }\n\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>strip_suffix_of(<span class=\"self\">self</span>, haystack: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>str) -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>str&gt;\n    <span class=\"kw\">where\n        </span><span class=\"self\">Self</span>::Searcher: ReverseSearcher&lt;<span class=\"lifetime\">'a</span>&gt;,\n    {\n        <span class=\"self\">self</span>.encode_utf8(<span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">0u8</span>; <span class=\"number\">4</span>]).strip_suffix_of(haystack)\n    }\n}\n\n<span class=\"comment\">/////////////////////////////////////////////////////////////////////////////\n// Impl for a MultiCharEq wrapper\n/////////////////////////////////////////////////////////////////////////////\n\n</span><span class=\"attr\">#[doc(hidden)]\n</span><span class=\"kw\">trait </span>MultiCharEq {\n    <span class=\"kw\">fn </span>matches(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, c: char) -&gt; bool;\n}\n\n<span class=\"kw\">impl</span>&lt;F&gt; MultiCharEq <span class=\"kw\">for </span>F\n<span class=\"kw\">where\n    </span>F: FnMut(char) -&gt; bool,\n{\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>matches(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, c: char) -&gt; bool {\n        (<span class=\"kw-2\">*</span><span class=\"self\">self</span>)(c)\n    }\n}\n\n<span class=\"kw\">impl</span>&lt;<span class=\"kw\">const </span>N: usize&gt; MultiCharEq <span class=\"kw\">for </span>[char; N] {\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>matches(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, c: char) -&gt; bool {\n        <span class=\"self\">self</span>.iter().any(|<span class=\"kw-2\">&amp;</span>m| m == c)\n    }\n}\n\n<span class=\"kw\">impl</span>&lt;<span class=\"kw\">const </span>N: usize&gt; MultiCharEq <span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span>[char; N] {\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>matches(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, c: char) -&gt; bool {\n        <span class=\"self\">self</span>.iter().any(|<span class=\"kw-2\">&amp;</span>m| m == c)\n    }\n}\n\n<span class=\"kw\">impl </span>MultiCharEq <span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span>[char] {\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>matches(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, c: char) -&gt; bool {\n        <span class=\"self\">self</span>.iter().any(|<span class=\"kw-2\">&amp;</span>m| m == c)\n    }\n}\n\n<span class=\"kw\">struct </span>MultiCharEqPattern&lt;C: MultiCharEq&gt;(C);\n\n<span class=\"attr\">#[derive(Clone, Debug)]\n</span><span class=\"kw\">struct </span>MultiCharEqSearcher&lt;<span class=\"lifetime\">'a</span>, C: MultiCharEq&gt; {\n    char_eq: C,\n    haystack: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>str,\n    char_indices: <span class=\"kw\">super</span>::CharIndices&lt;<span class=\"lifetime\">'a</span>&gt;,\n}\n\n<span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span>, C: MultiCharEq&gt; Pattern&lt;<span class=\"lifetime\">'a</span>&gt; <span class=\"kw\">for </span>MultiCharEqPattern&lt;C&gt; {\n    <span class=\"kw\">type </span>Searcher = MultiCharEqSearcher&lt;<span class=\"lifetime\">'a</span>, C&gt;;\n\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>into_searcher(<span class=\"self\">self</span>, haystack: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>str) -&gt; MultiCharEqSearcher&lt;<span class=\"lifetime\">'a</span>, C&gt; {\n        MultiCharEqSearcher { haystack, char_eq: <span class=\"self\">self</span>.<span class=\"number\">0</span>, char_indices: haystack.char_indices() }\n    }\n}\n\n<span class=\"kw\">unsafe impl</span>&lt;<span class=\"lifetime\">'a</span>, C: MultiCharEq&gt; Searcher&lt;<span class=\"lifetime\">'a</span>&gt; <span class=\"kw\">for </span>MultiCharEqSearcher&lt;<span class=\"lifetime\">'a</span>, C&gt; {\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>haystack(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>str {\n        <span class=\"self\">self</span>.haystack\n    }\n\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>next(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; SearchStep {\n        <span class=\"kw\">let </span>s = <span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>.char_indices;\n        <span class=\"comment\">// Compare lengths of the internal byte slice iterator\n        // to find length of current char\n        </span><span class=\"kw\">let </span>pre_len = s.iter.iter.len();\n        <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>((i, c)) = s.next() {\n            <span class=\"kw\">let </span>len = s.iter.iter.len();\n            <span class=\"kw\">let </span>char_len = pre_len - len;\n            <span class=\"kw\">if </span><span class=\"self\">self</span>.char_eq.matches(c) {\n                <span class=\"kw\">return </span>SearchStep::Match(i, i + char_len);\n            } <span class=\"kw\">else </span>{\n                <span class=\"kw\">return </span>SearchStep::Reject(i, i + char_len);\n            }\n        }\n        SearchStep::Done\n    }\n}\n\n<span class=\"kw\">unsafe impl</span>&lt;<span class=\"lifetime\">'a</span>, C: MultiCharEq&gt; ReverseSearcher&lt;<span class=\"lifetime\">'a</span>&gt; <span class=\"kw\">for </span>MultiCharEqSearcher&lt;<span class=\"lifetime\">'a</span>, C&gt; {\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>next_back(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; SearchStep {\n        <span class=\"kw\">let </span>s = <span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>.char_indices;\n        <span class=\"comment\">// Compare lengths of the internal byte slice iterator\n        // to find length of current char\n        </span><span class=\"kw\">let </span>pre_len = s.iter.iter.len();\n        <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>((i, c)) = s.next_back() {\n            <span class=\"kw\">let </span>len = s.iter.iter.len();\n            <span class=\"kw\">let </span>char_len = pre_len - len;\n            <span class=\"kw\">if </span><span class=\"self\">self</span>.char_eq.matches(c) {\n                <span class=\"kw\">return </span>SearchStep::Match(i, i + char_len);\n            } <span class=\"kw\">else </span>{\n                <span class=\"kw\">return </span>SearchStep::Reject(i, i + char_len);\n            }\n        }\n        SearchStep::Done\n    }\n}\n\n<span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span>, C: MultiCharEq&gt; DoubleEndedSearcher&lt;<span class=\"lifetime\">'a</span>&gt; <span class=\"kw\">for </span>MultiCharEqSearcher&lt;<span class=\"lifetime\">'a</span>, C&gt; {}\n\n<span class=\"comment\">/////////////////////////////////////////////////////////////////////////////\n\n</span><span class=\"macro\">macro_rules!</span> pattern_methods {\n    (<span class=\"macro-nonterminal\">$t</span>:ty, <span class=\"macro-nonterminal\">$pmap</span>:expr, <span class=\"macro-nonterminal\">$smap</span>:expr) =&gt; {\n        <span class=\"kw\">type </span>Searcher = <span class=\"macro-nonterminal\">$t</span>;\n\n        <span class=\"attr\">#[inline]\n        </span><span class=\"kw\">fn </span>into_searcher(<span class=\"self\">self</span>, haystack: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>str) -&gt; <span class=\"macro-nonterminal\">$t </span>{\n            (<span class=\"macro-nonterminal\">$smap</span>)((<span class=\"macro-nonterminal\">$pmap</span>)(<span class=\"self\">self</span>).into_searcher(haystack))\n        }\n\n        <span class=\"attr\">#[inline]\n        </span><span class=\"kw\">fn </span>is_contained_in(<span class=\"self\">self</span>, haystack: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>str) -&gt; bool {\n            (<span class=\"macro-nonterminal\">$pmap</span>)(<span class=\"self\">self</span>).is_contained_in(haystack)\n        }\n\n        <span class=\"attr\">#[inline]\n        </span><span class=\"kw\">fn </span>is_prefix_of(<span class=\"self\">self</span>, haystack: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>str) -&gt; bool {\n            (<span class=\"macro-nonterminal\">$pmap</span>)(<span class=\"self\">self</span>).is_prefix_of(haystack)\n        }\n\n        <span class=\"attr\">#[inline]\n        </span><span class=\"kw\">fn </span>strip_prefix_of(<span class=\"self\">self</span>, haystack: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>str) -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>str&gt; {\n            (<span class=\"macro-nonterminal\">$pmap</span>)(<span class=\"self\">self</span>).strip_prefix_of(haystack)\n        }\n\n        <span class=\"attr\">#[inline]\n        </span><span class=\"kw\">fn </span>is_suffix_of(<span class=\"self\">self</span>, haystack: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>str) -&gt; bool\n        <span class=\"kw\">where\n            </span><span class=\"macro-nonterminal\">$t</span>: ReverseSearcher&lt;<span class=\"lifetime\">'a</span>&gt;,\n        {\n            (<span class=\"macro-nonterminal\">$pmap</span>)(<span class=\"self\">self</span>).is_suffix_of(haystack)\n        }\n\n        <span class=\"attr\">#[inline]\n        </span><span class=\"kw\">fn </span>strip_suffix_of(<span class=\"self\">self</span>, haystack: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>str) -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>str&gt;\n        <span class=\"kw\">where\n            </span><span class=\"macro-nonterminal\">$t</span>: ReverseSearcher&lt;<span class=\"lifetime\">'a</span>&gt;,\n        {\n            (<span class=\"macro-nonterminal\">$pmap</span>)(<span class=\"self\">self</span>).strip_suffix_of(haystack)\n        }\n    };\n}\n\n<span class=\"macro\">macro_rules!</span> searcher_methods {\n    (forward) =&gt; {\n        <span class=\"attr\">#[inline]\n        </span><span class=\"kw\">fn </span>haystack(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>str {\n            <span class=\"self\">self</span>.<span class=\"number\">0</span>.haystack()\n        }\n        <span class=\"attr\">#[inline]\n        </span><span class=\"kw\">fn </span>next(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; SearchStep {\n            <span class=\"self\">self</span>.<span class=\"number\">0</span>.next()\n        }\n        <span class=\"attr\">#[inline]\n        </span><span class=\"kw\">fn </span>next_match(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;(usize, usize)&gt; {\n            <span class=\"self\">self</span>.<span class=\"number\">0</span>.next_match()\n        }\n        <span class=\"attr\">#[inline]\n        </span><span class=\"kw\">fn </span>next_reject(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;(usize, usize)&gt; {\n            <span class=\"self\">self</span>.<span class=\"number\">0</span>.next_reject()\n        }\n    };\n    (reverse) =&gt; {\n        <span class=\"attr\">#[inline]\n        </span><span class=\"kw\">fn </span>next_back(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; SearchStep {\n            <span class=\"self\">self</span>.<span class=\"number\">0</span>.next_back()\n        }\n        <span class=\"attr\">#[inline]\n        </span><span class=\"kw\">fn </span>next_match_back(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;(usize, usize)&gt; {\n            <span class=\"self\">self</span>.<span class=\"number\">0</span>.next_match_back()\n        }\n        <span class=\"attr\">#[inline]\n        </span><span class=\"kw\">fn </span>next_reject_back(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;(usize, usize)&gt; {\n            <span class=\"self\">self</span>.<span class=\"number\">0</span>.next_reject_back()\n        }\n    };\n}\n\n<span class=\"doccomment\">/// Associated type for `&lt;[char; N] as Pattern&lt;'a&gt;&gt;::Searcher`.\n</span><span class=\"attr\">#[derive(Clone, Debug)]\n</span><span class=\"kw\">pub struct </span>CharArraySearcher&lt;<span class=\"lifetime\">'a</span>, <span class=\"kw\">const </span>N: usize&gt;(\n    &lt;MultiCharEqPattern&lt;[char; N]&gt; <span class=\"kw\">as </span>Pattern&lt;<span class=\"lifetime\">'a</span>&gt;&gt;::Searcher,\n);\n\n<span class=\"doccomment\">/// Associated type for `&lt;&amp;[char; N] as Pattern&lt;'a&gt;&gt;::Searcher`.\n</span><span class=\"attr\">#[derive(Clone, Debug)]\n</span><span class=\"kw\">pub struct </span>CharArrayRefSearcher&lt;<span class=\"lifetime\">'a</span>, <span class=\"lifetime\">'b</span>, <span class=\"kw\">const </span>N: usize&gt;(\n    &lt;MultiCharEqPattern&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'b </span>[char; N]&gt; <span class=\"kw\">as </span>Pattern&lt;<span class=\"lifetime\">'a</span>&gt;&gt;::Searcher,\n);\n\n<span class=\"doccomment\">/// Searches for chars that are equal to any of the [`char`]s in the array.\n///\n/// # Examples\n///\n/// ```\n/// assert_eq!(\"Hello world\".find(['o', 'l']), Some(2));\n/// assert_eq!(\"Hello world\".find(['h', 'w']), Some(6));\n/// ```\n</span><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span>, <span class=\"kw\">const </span>N: usize&gt; Pattern&lt;<span class=\"lifetime\">'a</span>&gt; <span class=\"kw\">for </span>[char; N] {\n    <span class=\"macro\">pattern_methods!</span>(CharArraySearcher&lt;<span class=\"lifetime\">'a</span>, N&gt;, MultiCharEqPattern, CharArraySearcher);\n}\n\n<span class=\"kw\">unsafe impl</span>&lt;<span class=\"lifetime\">'a</span>, <span class=\"kw\">const </span>N: usize&gt; Searcher&lt;<span class=\"lifetime\">'a</span>&gt; <span class=\"kw\">for </span>CharArraySearcher&lt;<span class=\"lifetime\">'a</span>, N&gt; {\n    <span class=\"macro\">searcher_methods!</span>(forward);\n}\n\n<span class=\"kw\">unsafe impl</span>&lt;<span class=\"lifetime\">'a</span>, <span class=\"kw\">const </span>N: usize&gt; ReverseSearcher&lt;<span class=\"lifetime\">'a</span>&gt; <span class=\"kw\">for </span>CharArraySearcher&lt;<span class=\"lifetime\">'a</span>, N&gt; {\n    <span class=\"macro\">searcher_methods!</span>(reverse);\n}\n\n<span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span>, <span class=\"kw\">const </span>N: usize&gt; DoubleEndedSearcher&lt;<span class=\"lifetime\">'a</span>&gt; <span class=\"kw\">for </span>CharArraySearcher&lt;<span class=\"lifetime\">'a</span>, N&gt; {}\n\n<span class=\"doccomment\">/// Searches for chars that are equal to any of the [`char`]s in the array.\n///\n/// # Examples\n///\n/// ```\n/// assert_eq!(\"Hello world\".find(&amp;['o', 'l']), Some(2));\n/// assert_eq!(\"Hello world\".find(&amp;['h', 'w']), Some(6));\n/// ```\n</span><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span>, <span class=\"lifetime\">'b</span>, <span class=\"kw\">const </span>N: usize&gt; Pattern&lt;<span class=\"lifetime\">'a</span>&gt; <span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'b </span>[char; N] {\n    <span class=\"macro\">pattern_methods!</span>(CharArrayRefSearcher&lt;<span class=\"lifetime\">'a</span>, <span class=\"lifetime\">'b</span>, N&gt;, MultiCharEqPattern, CharArrayRefSearcher);\n}\n\n<span class=\"kw\">unsafe impl</span>&lt;<span class=\"lifetime\">'a</span>, <span class=\"lifetime\">'b</span>, <span class=\"kw\">const </span>N: usize&gt; Searcher&lt;<span class=\"lifetime\">'a</span>&gt; <span class=\"kw\">for </span>CharArrayRefSearcher&lt;<span class=\"lifetime\">'a</span>, <span class=\"lifetime\">'b</span>, N&gt; {\n    <span class=\"macro\">searcher_methods!</span>(forward);\n}\n\n<span class=\"kw\">unsafe impl</span>&lt;<span class=\"lifetime\">'a</span>, <span class=\"lifetime\">'b</span>, <span class=\"kw\">const </span>N: usize&gt; ReverseSearcher&lt;<span class=\"lifetime\">'a</span>&gt; <span class=\"kw\">for </span>CharArrayRefSearcher&lt;<span class=\"lifetime\">'a</span>, <span class=\"lifetime\">'b</span>, N&gt; {\n    <span class=\"macro\">searcher_methods!</span>(reverse);\n}\n\n<span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span>, <span class=\"lifetime\">'b</span>, <span class=\"kw\">const </span>N: usize&gt; DoubleEndedSearcher&lt;<span class=\"lifetime\">'a</span>&gt; <span class=\"kw\">for </span>CharArrayRefSearcher&lt;<span class=\"lifetime\">'a</span>, <span class=\"lifetime\">'b</span>, N&gt; {}\n\n<span class=\"comment\">/////////////////////////////////////////////////////////////////////////////\n// Impl for &amp;[char]\n/////////////////////////////////////////////////////////////////////////////\n\n// Todo: Change / Remove due to ambiguity in meaning.\n\n</span><span class=\"doccomment\">/// Associated type for `&lt;&amp;[char] as Pattern&lt;'a&gt;&gt;::Searcher`.\n</span><span class=\"attr\">#[derive(Clone, Debug)]\n</span><span class=\"kw\">pub struct </span>CharSliceSearcher&lt;<span class=\"lifetime\">'a</span>, <span class=\"lifetime\">'b</span>&gt;(&lt;MultiCharEqPattern&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'b </span>[char]&gt; <span class=\"kw\">as </span>Pattern&lt;<span class=\"lifetime\">'a</span>&gt;&gt;::Searcher);\n\n<span class=\"kw\">unsafe impl</span>&lt;<span class=\"lifetime\">'a</span>, <span class=\"lifetime\">'b</span>&gt; Searcher&lt;<span class=\"lifetime\">'a</span>&gt; <span class=\"kw\">for </span>CharSliceSearcher&lt;<span class=\"lifetime\">'a</span>, <span class=\"lifetime\">'b</span>&gt; {\n    <span class=\"macro\">searcher_methods!</span>(forward);\n}\n\n<span class=\"kw\">unsafe impl</span>&lt;<span class=\"lifetime\">'a</span>, <span class=\"lifetime\">'b</span>&gt; ReverseSearcher&lt;<span class=\"lifetime\">'a</span>&gt; <span class=\"kw\">for </span>CharSliceSearcher&lt;<span class=\"lifetime\">'a</span>, <span class=\"lifetime\">'b</span>&gt; {\n    <span class=\"macro\">searcher_methods!</span>(reverse);\n}\n\n<span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span>, <span class=\"lifetime\">'b</span>&gt; DoubleEndedSearcher&lt;<span class=\"lifetime\">'a</span>&gt; <span class=\"kw\">for </span>CharSliceSearcher&lt;<span class=\"lifetime\">'a</span>, <span class=\"lifetime\">'b</span>&gt; {}\n\n<span class=\"doccomment\">/// Searches for chars that are equal to any of the [`char`]s in the slice.\n///\n/// # Examples\n///\n/// ```\n/// assert_eq!(\"Hello world\".find(&amp;['l', 'l'] as &amp;[_]), Some(2));\n/// assert_eq!(\"Hello world\".find(&amp;['l', 'l'][..]), Some(2));\n/// ```\n</span><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span>, <span class=\"lifetime\">'b</span>&gt; Pattern&lt;<span class=\"lifetime\">'a</span>&gt; <span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'b </span>[char] {\n    <span class=\"macro\">pattern_methods!</span>(CharSliceSearcher&lt;<span class=\"lifetime\">'a</span>, <span class=\"lifetime\">'b</span>&gt;, MultiCharEqPattern, CharSliceSearcher);\n}\n\n<span class=\"comment\">/////////////////////////////////////////////////////////////////////////////\n// Impl for F: FnMut(char) -&gt; bool\n/////////////////////////////////////////////////////////////////////////////\n\n</span><span class=\"doccomment\">/// Associated type for `&lt;F as Pattern&lt;'a&gt;&gt;::Searcher`.\n</span><span class=\"attr\">#[derive(Clone)]\n</span><span class=\"kw\">pub struct </span>CharPredicateSearcher&lt;<span class=\"lifetime\">'a</span>, F&gt;(&lt;MultiCharEqPattern&lt;F&gt; <span class=\"kw\">as </span>Pattern&lt;<span class=\"lifetime\">'a</span>&gt;&gt;::Searcher)\n<span class=\"kw\">where\n    </span>F: FnMut(char) -&gt; bool;\n\n<span class=\"kw\">impl</span>&lt;F&gt; fmt::Debug <span class=\"kw\">for </span>CharPredicateSearcher&lt;<span class=\"lifetime\">'_</span>, F&gt;\n<span class=\"kw\">where\n    </span>F: FnMut(char) -&gt; bool,\n{\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n        f.debug_struct(<span class=\"string\">\"CharPredicateSearcher\"</span>)\n            .field(<span class=\"string\">\"haystack\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.<span class=\"number\">0</span>.haystack)\n            .field(<span class=\"string\">\"char_indices\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.<span class=\"number\">0</span>.char_indices)\n            .finish()\n    }\n}\n<span class=\"kw\">unsafe impl</span>&lt;<span class=\"lifetime\">'a</span>, F&gt; Searcher&lt;<span class=\"lifetime\">'a</span>&gt; <span class=\"kw\">for </span>CharPredicateSearcher&lt;<span class=\"lifetime\">'a</span>, F&gt;\n<span class=\"kw\">where\n    </span>F: FnMut(char) -&gt; bool,\n{\n    <span class=\"macro\">searcher_methods!</span>(forward);\n}\n\n<span class=\"kw\">unsafe impl</span>&lt;<span class=\"lifetime\">'a</span>, F&gt; ReverseSearcher&lt;<span class=\"lifetime\">'a</span>&gt; <span class=\"kw\">for </span>CharPredicateSearcher&lt;<span class=\"lifetime\">'a</span>, F&gt;\n<span class=\"kw\">where\n    </span>F: FnMut(char) -&gt; bool,\n{\n    <span class=\"macro\">searcher_methods!</span>(reverse);\n}\n\n<span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span>, F&gt; DoubleEndedSearcher&lt;<span class=\"lifetime\">'a</span>&gt; <span class=\"kw\">for </span>CharPredicateSearcher&lt;<span class=\"lifetime\">'a</span>, F&gt; <span class=\"kw\">where </span>F: FnMut(char) -&gt; bool {}\n\n<span class=\"doccomment\">/// Searches for [`char`]s that match the given predicate.\n///\n/// # Examples\n///\n/// ```\n/// assert_eq!(\"Hello world\".find(char::is_uppercase), Some(0));\n/// assert_eq!(\"Hello world\".find(|c| \"aeiou\".contains(c)), Some(1));\n/// ```\n</span><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span>, F&gt; Pattern&lt;<span class=\"lifetime\">'a</span>&gt; <span class=\"kw\">for </span>F\n<span class=\"kw\">where\n    </span>F: FnMut(char) -&gt; bool,\n{\n    <span class=\"macro\">pattern_methods!</span>(CharPredicateSearcher&lt;<span class=\"lifetime\">'a</span>, F&gt;, MultiCharEqPattern, CharPredicateSearcher);\n}\n\n<span class=\"comment\">/////////////////////////////////////////////////////////////////////////////\n// Impl for &amp;&amp;str\n/////////////////////////////////////////////////////////////////////////////\n\n</span><span class=\"doccomment\">/// Delegates to the `&amp;str` impl.\n</span><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span>, <span class=\"lifetime\">'b</span>, <span class=\"lifetime\">'c</span>&gt; Pattern&lt;<span class=\"lifetime\">'a</span>&gt; <span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'c </span><span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'b </span>str {\n    <span class=\"macro\">pattern_methods!</span>(StrSearcher&lt;<span class=\"lifetime\">'a</span>, <span class=\"lifetime\">'b</span>&gt;, |<span class=\"kw-2\">&amp;</span>s| s, |s| s);\n}\n\n<span class=\"comment\">/////////////////////////////////////////////////////////////////////////////\n// Impl for &amp;str\n/////////////////////////////////////////////////////////////////////////////\n\n</span><span class=\"doccomment\">/// Non-allocating substring search.\n///\n/// Will handle the pattern `\"\"` as returning empty matches at each character\n/// boundary.\n///\n/// # Examples\n///\n/// ```\n/// assert_eq!(\"Hello world\".find(\"world\"), Some(6));\n/// ```\n</span><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span>, <span class=\"lifetime\">'b</span>&gt; Pattern&lt;<span class=\"lifetime\">'a</span>&gt; <span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'b </span>str {\n    <span class=\"kw\">type </span>Searcher = StrSearcher&lt;<span class=\"lifetime\">'a</span>, <span class=\"lifetime\">'b</span>&gt;;\n\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>into_searcher(<span class=\"self\">self</span>, haystack: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>str) -&gt; StrSearcher&lt;<span class=\"lifetime\">'a</span>, <span class=\"lifetime\">'b</span>&gt; {\n        StrSearcher::new(haystack, <span class=\"self\">self</span>)\n    }\n\n    <span class=\"doccomment\">/// Checks whether the pattern matches at the front of the haystack.\n    </span><span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>is_prefix_of(<span class=\"self\">self</span>, haystack: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>str) -&gt; bool {\n        haystack.as_bytes().starts_with(<span class=\"self\">self</span>.as_bytes())\n    }\n\n    <span class=\"doccomment\">/// Checks whether the pattern matches anywhere in the haystack\n    </span><span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>is_contained_in(<span class=\"self\">self</span>, haystack: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>str) -&gt; bool {\n        <span class=\"kw\">if </span><span class=\"self\">self</span>.len() == <span class=\"number\">0 </span>{\n            <span class=\"kw\">return </span><span class=\"bool-val\">true</span>;\n        }\n\n        <span class=\"kw\">match </span><span class=\"self\">self</span>.len().cmp(<span class=\"kw-2\">&amp;</span>haystack.len()) {\n            Ordering::Less =&gt; {\n                <span class=\"kw\">if </span><span class=\"self\">self</span>.len() == <span class=\"number\">1 </span>{\n                    <span class=\"kw\">return </span>haystack.as_bytes().contains(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.as_bytes()[<span class=\"number\">0</span>]);\n                }\n\n                <span class=\"attr\">#[cfg(all(target_arch = <span class=\"string\">\"x86_64\"</span>, target_feature = <span class=\"string\">\"sse2\"</span>))]\n                </span><span class=\"kw\">if </span><span class=\"self\">self</span>.len() &lt;= <span class=\"number\">32 </span>{\n                    <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(result) = simd_contains(<span class=\"self\">self</span>, haystack) {\n                        <span class=\"kw\">return </span>result;\n                    }\n                }\n\n                <span class=\"self\">self</span>.into_searcher(haystack).next_match().is_some()\n            }\n            <span class=\"kw\">_ </span>=&gt; <span class=\"self\">self </span>== haystack,\n        }\n    }\n\n    <span class=\"doccomment\">/// Removes the pattern from the front of haystack, if it matches.\n    </span><span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>strip_prefix_of(<span class=\"self\">self</span>, haystack: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>str) -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>str&gt; {\n        <span class=\"kw\">if </span><span class=\"self\">self</span>.is_prefix_of(haystack) {\n            <span class=\"comment\">// SAFETY: prefix was just verified to exist.\n            </span><span class=\"kw\">unsafe </span>{ <span class=\"prelude-val\">Some</span>(haystack.get_unchecked(<span class=\"self\">self</span>.as_bytes().len()..)) }\n        } <span class=\"kw\">else </span>{\n            <span class=\"prelude-val\">None\n        </span>}\n    }\n\n    <span class=\"doccomment\">/// Checks whether the pattern matches at the back of the haystack.\n    </span><span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>is_suffix_of(<span class=\"self\">self</span>, haystack: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>str) -&gt; bool {\n        haystack.as_bytes().ends_with(<span class=\"self\">self</span>.as_bytes())\n    }\n\n    <span class=\"doccomment\">/// Removes the pattern from the back of haystack, if it matches.\n    </span><span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>strip_suffix_of(<span class=\"self\">self</span>, haystack: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>str) -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>str&gt; {\n        <span class=\"kw\">if </span><span class=\"self\">self</span>.is_suffix_of(haystack) {\n            <span class=\"kw\">let </span>i = haystack.len() - <span class=\"self\">self</span>.as_bytes().len();\n            <span class=\"comment\">// SAFETY: suffix was just verified to exist.\n            </span><span class=\"kw\">unsafe </span>{ <span class=\"prelude-val\">Some</span>(haystack.get_unchecked(..i)) }\n        } <span class=\"kw\">else </span>{\n            <span class=\"prelude-val\">None\n        </span>}\n    }\n}\n\n<span class=\"comment\">/////////////////////////////////////////////////////////////////////////////\n// Two Way substring searcher\n/////////////////////////////////////////////////////////////////////////////\n\n</span><span class=\"attr\">#[derive(Clone, Debug)]\n</span><span class=\"doccomment\">/// Associated type for `&lt;&amp;str as Pattern&lt;'a&gt;&gt;::Searcher`.\n</span><span class=\"kw\">pub struct </span>StrSearcher&lt;<span class=\"lifetime\">'a</span>, <span class=\"lifetime\">'b</span>&gt; {\n    haystack: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>str,\n    needle: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'b </span>str,\n\n    searcher: StrSearcherImpl,\n}\n\n<span class=\"attr\">#[derive(Clone, Debug)]\n</span><span class=\"kw\">enum </span>StrSearcherImpl {\n    Empty(EmptyNeedle),\n    TwoWay(TwoWaySearcher),\n}\n\n<span class=\"attr\">#[derive(Clone, Debug)]\n</span><span class=\"kw\">struct </span>EmptyNeedle {\n    position: usize,\n    end: usize,\n    is_match_fw: bool,\n    is_match_bw: bool,\n    <span class=\"comment\">// Needed in case of an empty haystack, see #85462\n    </span>is_finished: bool,\n}\n\n<span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span>, <span class=\"lifetime\">'b</span>&gt; StrSearcher&lt;<span class=\"lifetime\">'a</span>, <span class=\"lifetime\">'b</span>&gt; {\n    <span class=\"kw\">fn </span>new(haystack: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>str, needle: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'b </span>str) -&gt; StrSearcher&lt;<span class=\"lifetime\">'a</span>, <span class=\"lifetime\">'b</span>&gt; {\n        <span class=\"kw\">if </span>needle.is_empty() {\n            StrSearcher {\n                haystack,\n                needle,\n                searcher: StrSearcherImpl::Empty(EmptyNeedle {\n                    position: <span class=\"number\">0</span>,\n                    end: haystack.len(),\n                    is_match_fw: <span class=\"bool-val\">true</span>,\n                    is_match_bw: <span class=\"bool-val\">true</span>,\n                    is_finished: <span class=\"bool-val\">false</span>,\n                }),\n            }\n        } <span class=\"kw\">else </span>{\n            StrSearcher {\n                haystack,\n                needle,\n                searcher: StrSearcherImpl::TwoWay(TwoWaySearcher::new(\n                    needle.as_bytes(),\n                    haystack.len(),\n                )),\n            }\n        }\n    }\n}\n\n<span class=\"kw\">unsafe impl</span>&lt;<span class=\"lifetime\">'a</span>, <span class=\"lifetime\">'b</span>&gt; Searcher&lt;<span class=\"lifetime\">'a</span>&gt; <span class=\"kw\">for </span>StrSearcher&lt;<span class=\"lifetime\">'a</span>, <span class=\"lifetime\">'b</span>&gt; {\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>haystack(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>str {\n        <span class=\"self\">self</span>.haystack\n    }\n\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>next(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; SearchStep {\n        <span class=\"kw\">match </span><span class=\"self\">self</span>.searcher {\n            StrSearcherImpl::Empty(<span class=\"kw-2\">ref mut </span>searcher) =&gt; {\n                <span class=\"kw\">if </span>searcher.is_finished {\n                    <span class=\"kw\">return </span>SearchStep::Done;\n                }\n                <span class=\"comment\">// empty needle rejects every char and matches every empty string between them\n                </span><span class=\"kw\">let </span>is_match = searcher.is_match_fw;\n                searcher.is_match_fw = !searcher.is_match_fw;\n                <span class=\"kw\">let </span>pos = searcher.position;\n                <span class=\"kw\">match </span><span class=\"self\">self</span>.haystack[pos..].chars().next() {\n                    <span class=\"kw\">_ if </span>is_match =&gt; SearchStep::Match(pos, pos),\n                    <span class=\"prelude-val\">None </span>=&gt; {\n                        searcher.is_finished = <span class=\"bool-val\">true</span>;\n                        SearchStep::Done\n                    }\n                    <span class=\"prelude-val\">Some</span>(ch) =&gt; {\n                        searcher.position += ch.len_utf8();\n                        SearchStep::Reject(pos, searcher.position)\n                    }\n                }\n            }\n            StrSearcherImpl::TwoWay(<span class=\"kw-2\">ref mut </span>searcher) =&gt; {\n                <span class=\"comment\">// TwoWaySearcher produces valid *Match* indices that split at char boundaries\n                // as long as it does correct matching and that haystack and needle are\n                // valid UTF-8\n                // *Rejects* from the algorithm can fall on any indices, but we will walk them\n                // manually to the next character boundary, so that they are utf-8 safe.\n                </span><span class=\"kw\">if </span>searcher.position == <span class=\"self\">self</span>.haystack.len() {\n                    <span class=\"kw\">return </span>SearchStep::Done;\n                }\n                <span class=\"kw\">let </span>is_long = searcher.memory == usize::MAX;\n                <span class=\"kw\">match </span>searcher.next::&lt;RejectAndMatch&gt;(\n                    <span class=\"self\">self</span>.haystack.as_bytes(),\n                    <span class=\"self\">self</span>.needle.as_bytes(),\n                    is_long,\n                ) {\n                    SearchStep::Reject(a, <span class=\"kw-2\">mut </span>b) =&gt; {\n                        <span class=\"comment\">// skip to next char boundary\n                        </span><span class=\"kw\">while </span>!<span class=\"self\">self</span>.haystack.is_char_boundary(b) {\n                            b += <span class=\"number\">1</span>;\n                        }\n                        searcher.position = cmp::max(b, searcher.position);\n                        SearchStep::Reject(a, b)\n                    }\n                    otherwise =&gt; otherwise,\n                }\n            }\n        }\n    }\n\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>next_match(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;(usize, usize)&gt; {\n        <span class=\"kw\">match </span><span class=\"self\">self</span>.searcher {\n            StrSearcherImpl::Empty(..) =&gt; <span class=\"kw\">loop </span>{\n                <span class=\"kw\">match </span><span class=\"self\">self</span>.next() {\n                    SearchStep::Match(a, b) =&gt; <span class=\"kw\">return </span><span class=\"prelude-val\">Some</span>((a, b)),\n                    SearchStep::Done =&gt; <span class=\"kw\">return </span><span class=\"prelude-val\">None</span>,\n                    SearchStep::Reject(..) =&gt; {}\n                }\n            },\n            StrSearcherImpl::TwoWay(<span class=\"kw-2\">ref mut </span>searcher) =&gt; {\n                <span class=\"kw\">let </span>is_long = searcher.memory == usize::MAX;\n                <span class=\"comment\">// write out `true` and `false` cases to encourage the compiler\n                // to specialize the two cases separately.\n                </span><span class=\"kw\">if </span>is_long {\n                    searcher.next::&lt;MatchOnly&gt;(\n                        <span class=\"self\">self</span>.haystack.as_bytes(),\n                        <span class=\"self\">self</span>.needle.as_bytes(),\n                        <span class=\"bool-val\">true</span>,\n                    )\n                } <span class=\"kw\">else </span>{\n                    searcher.next::&lt;MatchOnly&gt;(\n                        <span class=\"self\">self</span>.haystack.as_bytes(),\n                        <span class=\"self\">self</span>.needle.as_bytes(),\n                        <span class=\"bool-val\">false</span>,\n                    )\n                }\n            }\n        }\n    }\n}\n\n<span class=\"kw\">unsafe impl</span>&lt;<span class=\"lifetime\">'a</span>, <span class=\"lifetime\">'b</span>&gt; ReverseSearcher&lt;<span class=\"lifetime\">'a</span>&gt; <span class=\"kw\">for </span>StrSearcher&lt;<span class=\"lifetime\">'a</span>, <span class=\"lifetime\">'b</span>&gt; {\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>next_back(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; SearchStep {\n        <span class=\"kw\">match </span><span class=\"self\">self</span>.searcher {\n            StrSearcherImpl::Empty(<span class=\"kw-2\">ref mut </span>searcher) =&gt; {\n                <span class=\"kw\">if </span>searcher.is_finished {\n                    <span class=\"kw\">return </span>SearchStep::Done;\n                }\n                <span class=\"kw\">let </span>is_match = searcher.is_match_bw;\n                searcher.is_match_bw = !searcher.is_match_bw;\n                <span class=\"kw\">let </span>end = searcher.end;\n                <span class=\"kw\">match </span><span class=\"self\">self</span>.haystack[..end].chars().next_back() {\n                    <span class=\"kw\">_ if </span>is_match =&gt; SearchStep::Match(end, end),\n                    <span class=\"prelude-val\">None </span>=&gt; {\n                        searcher.is_finished = <span class=\"bool-val\">true</span>;\n                        SearchStep::Done\n                    }\n                    <span class=\"prelude-val\">Some</span>(ch) =&gt; {\n                        searcher.end -= ch.len_utf8();\n                        SearchStep::Reject(searcher.end, end)\n                    }\n                }\n            }\n            StrSearcherImpl::TwoWay(<span class=\"kw-2\">ref mut </span>searcher) =&gt; {\n                <span class=\"kw\">if </span>searcher.end == <span class=\"number\">0 </span>{\n                    <span class=\"kw\">return </span>SearchStep::Done;\n                }\n                <span class=\"kw\">let </span>is_long = searcher.memory == usize::MAX;\n                <span class=\"kw\">match </span>searcher.next_back::&lt;RejectAndMatch&gt;(\n                    <span class=\"self\">self</span>.haystack.as_bytes(),\n                    <span class=\"self\">self</span>.needle.as_bytes(),\n                    is_long,\n                ) {\n                    SearchStep::Reject(<span class=\"kw-2\">mut </span>a, b) =&gt; {\n                        <span class=\"comment\">// skip to next char boundary\n                        </span><span class=\"kw\">while </span>!<span class=\"self\">self</span>.haystack.is_char_boundary(a) {\n                            a -= <span class=\"number\">1</span>;\n                        }\n                        searcher.end = cmp::min(a, searcher.end);\n                        SearchStep::Reject(a, b)\n                    }\n                    otherwise =&gt; otherwise,\n                }\n            }\n        }\n    }\n\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>next_match_back(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;(usize, usize)&gt; {\n        <span class=\"kw\">match </span><span class=\"self\">self</span>.searcher {\n            StrSearcherImpl::Empty(..) =&gt; <span class=\"kw\">loop </span>{\n                <span class=\"kw\">match </span><span class=\"self\">self</span>.next_back() {\n                    SearchStep::Match(a, b) =&gt; <span class=\"kw\">return </span><span class=\"prelude-val\">Some</span>((a, b)),\n                    SearchStep::Done =&gt; <span class=\"kw\">return </span><span class=\"prelude-val\">None</span>,\n                    SearchStep::Reject(..) =&gt; {}\n                }\n            },\n            StrSearcherImpl::TwoWay(<span class=\"kw-2\">ref mut </span>searcher) =&gt; {\n                <span class=\"kw\">let </span>is_long = searcher.memory == usize::MAX;\n                <span class=\"comment\">// write out `true` and `false`, like `next_match`\n                </span><span class=\"kw\">if </span>is_long {\n                    searcher.next_back::&lt;MatchOnly&gt;(\n                        <span class=\"self\">self</span>.haystack.as_bytes(),\n                        <span class=\"self\">self</span>.needle.as_bytes(),\n                        <span class=\"bool-val\">true</span>,\n                    )\n                } <span class=\"kw\">else </span>{\n                    searcher.next_back::&lt;MatchOnly&gt;(\n                        <span class=\"self\">self</span>.haystack.as_bytes(),\n                        <span class=\"self\">self</span>.needle.as_bytes(),\n                        <span class=\"bool-val\">false</span>,\n                    )\n                }\n            }\n        }\n    }\n}\n\n<span class=\"doccomment\">/// The internal state of the two-way substring search algorithm.\n</span><span class=\"attr\">#[derive(Clone, Debug)]\n</span><span class=\"kw\">struct </span>TwoWaySearcher {\n    <span class=\"comment\">// constants\n    </span><span class=\"doccomment\">/// critical factorization index\n    </span>crit_pos: usize,\n    <span class=\"doccomment\">/// critical factorization index for reversed needle\n    </span>crit_pos_back: usize,\n    period: usize,\n    <span class=\"doccomment\">/// `byteset` is an extension (not part of the two way algorithm);\n    /// it's a 64-bit \"fingerprint\" where each set bit `j` corresponds\n    /// to a (byte &amp; 63) == j present in the needle.\n    </span>byteset: u64,\n\n    <span class=\"comment\">// variables\n    </span>position: usize,\n    end: usize,\n    <span class=\"doccomment\">/// index into needle before which we have already matched\n    </span>memory: usize,\n    <span class=\"doccomment\">/// index into needle after which we have already matched\n    </span>memory_back: usize,\n}\n\n<span class=\"comment\">/*\n    This is the Two-Way search algorithm, which was introduced in the paper:\n    Crochemore, M., Perrin, D., 1991, Two-way string-matching, Journal of the ACM 38(3):651-675.\n\n    Here's some background information.\n\n    A *word* is a string of symbols. The *length* of a word should be a familiar\n    notion, and here we denote it for any word x by |x|.\n    (We also allow for the possibility of the *empty word*, a word of length zero).\n\n    If x is any non-empty word, then an integer p with 0 &lt; p &lt;= |x| is said to be a\n    *period* for x iff for all i with 0 &lt;= i &lt;= |x| - p - 1, we have x[i] == x[i+p].\n    For example, both 1 and 2 are periods for the string \"aa\". As another example,\n    the only period of the string \"abcd\" is 4.\n\n    We denote by period(x) the *smallest* period of x (provided that x is non-empty).\n    This is always well-defined since every non-empty word x has at least one period,\n    |x|. We sometimes call this *the period* of x.\n\n    If u, v and x are words such that x = uv, where uv is the concatenation of u and\n    v, then we say that (u, v) is a *factorization* of x.\n\n    Let (u, v) be a factorization for a word x. Then if w is a non-empty word such\n    that both of the following hold\n\n      - either w is a suffix of u or u is a suffix of w\n      - either w is a prefix of v or v is a prefix of w\n\n    then w is said to be a *repetition* for the factorization (u, v).\n\n    Just to unpack this, there are four possibilities here. Let w = \"abc\". Then we\n    might have:\n\n      - w is a suffix of u and w is a prefix of v. ex: (\"lolabc\", \"abcde\")\n      - w is a suffix of u and v is a prefix of w. ex: (\"lolabc\", \"ab\")\n      - u is a suffix of w and w is a prefix of v. ex: (\"bc\", \"abchi\")\n      - u is a suffix of w and v is a prefix of w. ex: (\"bc\", \"a\")\n\n    Note that the word vu is a repetition for any factorization (u,v) of x = uv,\n    so every factorization has at least one repetition.\n\n    If x is a string and (u, v) is a factorization for x, then a *local period* for\n    (u, v) is an integer r such that there is some word w such that |w| = r and w is\n    a repetition for (u, v).\n\n    We denote by local_period(u, v) the smallest local period of (u, v). We sometimes\n    call this *the local period* of (u, v). Provided that x = uv is non-empty, this\n    is well-defined (because each non-empty word has at least one factorization, as\n    noted above).\n\n    It can be proven that the following is an equivalent definition of a local period\n    for a factorization (u, v): any positive integer r such that x[i] == x[i+r] for\n    all i such that |u| - r &lt;= i &lt;= |u| - 1 and such that both x[i] and x[i+r] are\n    defined. (i.e., i &gt; 0 and i + r &lt; |x|).\n\n    Using the above reformulation, it is easy to prove that\n\n        1 &lt;= local_period(u, v) &lt;= period(uv)\n\n    A factorization (u, v) of x such that local_period(u,v) = period(x) is called a\n    *critical factorization*.\n\n    The algorithm hinges on the following theorem, which is stated without proof:\n\n    **Critical Factorization Theorem** Any word x has at least one critical\n    factorization (u, v) such that |u| &lt; period(x).\n\n    The purpose of maximal_suffix is to find such a critical factorization.\n\n    If the period is short, compute another factorization x = u' v' to use\n    for reverse search, chosen instead so that |v'| &lt; period(x).\n\n*/\n</span><span class=\"kw\">impl </span>TwoWaySearcher {\n    <span class=\"kw\">fn </span>new(needle: <span class=\"kw-2\">&amp;</span>[u8], end: usize) -&gt; TwoWaySearcher {\n        <span class=\"kw\">let </span>(crit_pos_false, period_false) = TwoWaySearcher::maximal_suffix(needle, <span class=\"bool-val\">false</span>);\n        <span class=\"kw\">let </span>(crit_pos_true, period_true) = TwoWaySearcher::maximal_suffix(needle, <span class=\"bool-val\">true</span>);\n\n        <span class=\"kw\">let </span>(crit_pos, period) = <span class=\"kw\">if </span>crit_pos_false &gt; crit_pos_true {\n            (crit_pos_false, period_false)\n        } <span class=\"kw\">else </span>{\n            (crit_pos_true, period_true)\n        };\n\n        <span class=\"comment\">// A particularly readable explanation of what's going on here can be found\n        // in Crochemore and Rytter's book \"Text Algorithms\", ch 13. Specifically\n        // see the code for \"Algorithm CP\" on p. 323.\n        //\n        // What's going on is we have some critical factorization (u, v) of the\n        // needle, and we want to determine whether u is a suffix of\n        // &amp;v[..period]. If it is, we use \"Algorithm CP1\". Otherwise we use\n        // \"Algorithm CP2\", which is optimized for when the period of the needle\n        // is large.\n        </span><span class=\"kw\">if </span>needle[..crit_pos] == needle[period..period + crit_pos] {\n            <span class=\"comment\">// short period case -- the period is exact\n            // compute a separate critical factorization for the reversed needle\n            // x = u' v' where |v'| &lt; period(x).\n            //\n            // This is sped up by the period being known already.\n            // Note that a case like x = \"acba\" may be factored exactly forwards\n            // (crit_pos = 1, period = 3) while being factored with approximate\n            // period in reverse (crit_pos = 2, period = 2). We use the given\n            // reverse factorization but keep the exact period.\n            </span><span class=\"kw\">let </span>crit_pos_back = needle.len()\n                - cmp::max(\n                    TwoWaySearcher::reverse_maximal_suffix(needle, period, <span class=\"bool-val\">false</span>),\n                    TwoWaySearcher::reverse_maximal_suffix(needle, period, <span class=\"bool-val\">true</span>),\n                );\n\n            TwoWaySearcher {\n                crit_pos,\n                crit_pos_back,\n                period,\n                byteset: <span class=\"self\">Self</span>::byteset_create(<span class=\"kw-2\">&amp;</span>needle[..period]),\n\n                position: <span class=\"number\">0</span>,\n                end,\n                memory: <span class=\"number\">0</span>,\n                memory_back: needle.len(),\n            }\n        } <span class=\"kw\">else </span>{\n            <span class=\"comment\">// long period case -- we have an approximation to the actual period,\n            // and don't use memorization.\n            //\n            // Approximate the period by lower bound max(|u|, |v|) + 1.\n            // The critical factorization is efficient to use for both forward and\n            // reverse search.\n\n            </span>TwoWaySearcher {\n                crit_pos,\n                crit_pos_back: crit_pos,\n                period: cmp::max(crit_pos, needle.len() - crit_pos) + <span class=\"number\">1</span>,\n                byteset: <span class=\"self\">Self</span>::byteset_create(needle),\n\n                position: <span class=\"number\">0</span>,\n                end,\n                memory: usize::MAX, <span class=\"comment\">// Dummy value to signify that the period is long\n                </span>memory_back: usize::MAX,\n            }\n        }\n    }\n\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>byteset_create(bytes: <span class=\"kw-2\">&amp;</span>[u8]) -&gt; u64 {\n        bytes.iter().fold(<span class=\"number\">0</span>, |a, <span class=\"kw-2\">&amp;</span>b| (<span class=\"number\">1 </span>&lt;&lt; (b &amp; <span class=\"number\">0x3f</span>)) | a)\n    }\n\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>byteset_contains(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, byte: u8) -&gt; bool {\n        (<span class=\"self\">self</span>.byteset &gt;&gt; ((byte &amp; <span class=\"number\">0x3f</span>) <span class=\"kw\">as </span>usize)) &amp; <span class=\"number\">1 </span>!= <span class=\"number\">0\n    </span>}\n\n    <span class=\"comment\">// One of the main ideas of Two-Way is that we factorize the needle into\n    // two halves, (u, v), and begin trying to find v in the haystack by scanning\n    // left to right. If v matches, we try to match u by scanning right to left.\n    // How far we can jump when we encounter a mismatch is all based on the fact\n    // that (u, v) is a critical factorization for the needle.\n    </span><span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>next&lt;S&gt;(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, haystack: <span class=\"kw-2\">&amp;</span>[u8], needle: <span class=\"kw-2\">&amp;</span>[u8], long_period: bool) -&gt; S::Output\n    <span class=\"kw\">where\n        </span>S: TwoWayStrategy,\n    {\n        <span class=\"comment\">// `next()` uses `self.position` as its cursor\n        </span><span class=\"kw\">let </span>old_pos = <span class=\"self\">self</span>.position;\n        <span class=\"kw\">let </span>needle_last = needle.len() - <span class=\"number\">1</span>;\n        <span class=\"lifetime\">'search</span>: <span class=\"kw\">loop </span>{\n            <span class=\"comment\">// Check that we have room to search in\n            // position + needle_last can not overflow if we assume slices\n            // are bounded by isize's range.\n            </span><span class=\"kw\">let </span>tail_byte = <span class=\"kw\">match </span>haystack.get(<span class=\"self\">self</span>.position + needle_last) {\n                <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span>b) =&gt; b,\n                <span class=\"prelude-val\">None </span>=&gt; {\n                    <span class=\"self\">self</span>.position = haystack.len();\n                    <span class=\"kw\">return </span>S::rejecting(old_pos, <span class=\"self\">self</span>.position);\n                }\n            };\n\n            <span class=\"kw\">if </span>S::use_early_reject() &amp;&amp; old_pos != <span class=\"self\">self</span>.position {\n                <span class=\"kw\">return </span>S::rejecting(old_pos, <span class=\"self\">self</span>.position);\n            }\n\n            <span class=\"comment\">// Quickly skip by large portions unrelated to our substring\n            </span><span class=\"kw\">if </span>!<span class=\"self\">self</span>.byteset_contains(tail_byte) {\n                <span class=\"self\">self</span>.position += needle.len();\n                <span class=\"kw\">if </span>!long_period {\n                    <span class=\"self\">self</span>.memory = <span class=\"number\">0</span>;\n                }\n                <span class=\"kw\">continue </span><span class=\"lifetime\">'search</span>;\n            }\n\n            <span class=\"comment\">// See if the right part of the needle matches\n            </span><span class=\"kw\">let </span>start =\n                <span class=\"kw\">if </span>long_period { <span class=\"self\">self</span>.crit_pos } <span class=\"kw\">else </span>{ cmp::max(<span class=\"self\">self</span>.crit_pos, <span class=\"self\">self</span>.memory) };\n            <span class=\"kw\">for </span>i <span class=\"kw\">in </span>start..needle.len() {\n                <span class=\"kw\">if </span>needle[i] != haystack[<span class=\"self\">self</span>.position + i] {\n                    <span class=\"self\">self</span>.position += i - <span class=\"self\">self</span>.crit_pos + <span class=\"number\">1</span>;\n                    <span class=\"kw\">if </span>!long_period {\n                        <span class=\"self\">self</span>.memory = <span class=\"number\">0</span>;\n                    }\n                    <span class=\"kw\">continue </span><span class=\"lifetime\">'search</span>;\n                }\n            }\n\n            <span class=\"comment\">// See if the left part of the needle matches\n            </span><span class=\"kw\">let </span>start = <span class=\"kw\">if </span>long_period { <span class=\"number\">0 </span>} <span class=\"kw\">else </span>{ <span class=\"self\">self</span>.memory };\n            <span class=\"kw\">for </span>i <span class=\"kw\">in </span>(start..<span class=\"self\">self</span>.crit_pos).rev() {\n                <span class=\"kw\">if </span>needle[i] != haystack[<span class=\"self\">self</span>.position + i] {\n                    <span class=\"self\">self</span>.position += <span class=\"self\">self</span>.period;\n                    <span class=\"kw\">if </span>!long_period {\n                        <span class=\"self\">self</span>.memory = needle.len() - <span class=\"self\">self</span>.period;\n                    }\n                    <span class=\"kw\">continue </span><span class=\"lifetime\">'search</span>;\n                }\n            }\n\n            <span class=\"comment\">// We have found a match!\n            </span><span class=\"kw\">let </span>match_pos = <span class=\"self\">self</span>.position;\n\n            <span class=\"comment\">// Note: add self.period instead of needle.len() to have overlapping matches\n            </span><span class=\"self\">self</span>.position += needle.len();\n            <span class=\"kw\">if </span>!long_period {\n                <span class=\"self\">self</span>.memory = <span class=\"number\">0</span>; <span class=\"comment\">// set to needle.len() - self.period for overlapping matches\n            </span>}\n\n            <span class=\"kw\">return </span>S::matching(match_pos, match_pos + needle.len());\n        }\n    }\n\n    <span class=\"comment\">// Follows the ideas in `next()`.\n    //\n    // The definitions are symmetrical, with period(x) = period(reverse(x))\n    // and local_period(u, v) = local_period(reverse(v), reverse(u)), so if (u, v)\n    // is a critical factorization, so is (reverse(v), reverse(u)).\n    //\n    // For the reverse case we have computed a critical factorization x = u' v'\n    // (field `crit_pos_back`). We need |u| &lt; period(x) for the forward case and\n    // thus |v'| &lt; period(x) for the reverse.\n    //\n    // To search in reverse through the haystack, we search forward through\n    // a reversed haystack with a reversed needle, matching first u' and then v'.\n    </span><span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>next_back&lt;S&gt;(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, haystack: <span class=\"kw-2\">&amp;</span>[u8], needle: <span class=\"kw-2\">&amp;</span>[u8], long_period: bool) -&gt; S::Output\n    <span class=\"kw\">where\n        </span>S: TwoWayStrategy,\n    {\n        <span class=\"comment\">// `next_back()` uses `self.end` as its cursor -- so that `next()` and `next_back()`\n        // are independent.\n        </span><span class=\"kw\">let </span>old_end = <span class=\"self\">self</span>.end;\n        <span class=\"lifetime\">'search</span>: <span class=\"kw\">loop </span>{\n            <span class=\"comment\">// Check that we have room to search in\n            // end - needle.len() will wrap around when there is no more room,\n            // but due to slice length limits it can never wrap all the way back\n            // into the length of haystack.\n            </span><span class=\"kw\">let </span>front_byte = <span class=\"kw\">match </span>haystack.get(<span class=\"self\">self</span>.end.wrapping_sub(needle.len())) {\n                <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span>b) =&gt; b,\n                <span class=\"prelude-val\">None </span>=&gt; {\n                    <span class=\"self\">self</span>.end = <span class=\"number\">0</span>;\n                    <span class=\"kw\">return </span>S::rejecting(<span class=\"number\">0</span>, old_end);\n                }\n            };\n\n            <span class=\"kw\">if </span>S::use_early_reject() &amp;&amp; old_end != <span class=\"self\">self</span>.end {\n                <span class=\"kw\">return </span>S::rejecting(<span class=\"self\">self</span>.end, old_end);\n            }\n\n            <span class=\"comment\">// Quickly skip by large portions unrelated to our substring\n            </span><span class=\"kw\">if </span>!<span class=\"self\">self</span>.byteset_contains(front_byte) {\n                <span class=\"self\">self</span>.end -= needle.len();\n                <span class=\"kw\">if </span>!long_period {\n                    <span class=\"self\">self</span>.memory_back = needle.len();\n                }\n                <span class=\"kw\">continue </span><span class=\"lifetime\">'search</span>;\n            }\n\n            <span class=\"comment\">// See if the left part of the needle matches\n            </span><span class=\"kw\">let </span>crit = <span class=\"kw\">if </span>long_period {\n                <span class=\"self\">self</span>.crit_pos_back\n            } <span class=\"kw\">else </span>{\n                cmp::min(<span class=\"self\">self</span>.crit_pos_back, <span class=\"self\">self</span>.memory_back)\n            };\n            <span class=\"kw\">for </span>i <span class=\"kw\">in </span>(<span class=\"number\">0</span>..crit).rev() {\n                <span class=\"kw\">if </span>needle[i] != haystack[<span class=\"self\">self</span>.end - needle.len() + i] {\n                    <span class=\"self\">self</span>.end -= <span class=\"self\">self</span>.crit_pos_back - i;\n                    <span class=\"kw\">if </span>!long_period {\n                        <span class=\"self\">self</span>.memory_back = needle.len();\n                    }\n                    <span class=\"kw\">continue </span><span class=\"lifetime\">'search</span>;\n                }\n            }\n\n            <span class=\"comment\">// See if the right part of the needle matches\n            </span><span class=\"kw\">let </span>needle_end = <span class=\"kw\">if </span>long_period { needle.len() } <span class=\"kw\">else </span>{ <span class=\"self\">self</span>.memory_back };\n            <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"self\">self</span>.crit_pos_back..needle_end {\n                <span class=\"kw\">if </span>needle[i] != haystack[<span class=\"self\">self</span>.end - needle.len() + i] {\n                    <span class=\"self\">self</span>.end -= <span class=\"self\">self</span>.period;\n                    <span class=\"kw\">if </span>!long_period {\n                        <span class=\"self\">self</span>.memory_back = <span class=\"self\">self</span>.period;\n                    }\n                    <span class=\"kw\">continue </span><span class=\"lifetime\">'search</span>;\n                }\n            }\n\n            <span class=\"comment\">// We have found a match!\n            </span><span class=\"kw\">let </span>match_pos = <span class=\"self\">self</span>.end - needle.len();\n            <span class=\"comment\">// Note: sub self.period instead of needle.len() to have overlapping matches\n            </span><span class=\"self\">self</span>.end -= needle.len();\n            <span class=\"kw\">if </span>!long_period {\n                <span class=\"self\">self</span>.memory_back = needle.len();\n            }\n\n            <span class=\"kw\">return </span>S::matching(match_pos, match_pos + needle.len());\n        }\n    }\n\n    <span class=\"comment\">// Compute the maximal suffix of `arr`.\n    //\n    // The maximal suffix is a possible critical factorization (u, v) of `arr`.\n    //\n    // Returns (`i`, `p`) where `i` is the starting index of v and `p` is the\n    // period of v.\n    //\n    // `order_greater` determines if lexical order is `&lt;` or `&gt;`. Both\n    // orders must be computed -- the ordering with the largest `i` gives\n    // a critical factorization.\n    //\n    // For long period cases, the resulting period is not exact (it is too short).\n    </span><span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>maximal_suffix(arr: <span class=\"kw-2\">&amp;</span>[u8], order_greater: bool) -&gt; (usize, usize) {\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>left = <span class=\"number\">0</span>; <span class=\"comment\">// Corresponds to i in the paper\n        </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>right = <span class=\"number\">1</span>; <span class=\"comment\">// Corresponds to j in the paper\n        </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>offset = <span class=\"number\">0</span>; <span class=\"comment\">// Corresponds to k in the paper, but starting at 0\n        // to match 0-based indexing.\n        </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>period = <span class=\"number\">1</span>; <span class=\"comment\">// Corresponds to p in the paper\n\n        </span><span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span>a) = arr.get(right + offset) {\n            <span class=\"comment\">// `left` will be inbounds when `right` is.\n            </span><span class=\"kw\">let </span>b = arr[left + offset];\n            <span class=\"kw\">if </span>(a &lt; b &amp;&amp; !order_greater) || (a &gt; b &amp;&amp; order_greater) {\n                <span class=\"comment\">// Suffix is smaller, period is entire prefix so far.\n                </span>right += offset + <span class=\"number\">1</span>;\n                offset = <span class=\"number\">0</span>;\n                period = right - left;\n            } <span class=\"kw\">else if </span>a == b {\n                <span class=\"comment\">// Advance through repetition of the current period.\n                </span><span class=\"kw\">if </span>offset + <span class=\"number\">1 </span>== period {\n                    right += offset + <span class=\"number\">1</span>;\n                    offset = <span class=\"number\">0</span>;\n                } <span class=\"kw\">else </span>{\n                    offset += <span class=\"number\">1</span>;\n                }\n            } <span class=\"kw\">else </span>{\n                <span class=\"comment\">// Suffix is larger, start over from current location.\n                </span>left = right;\n                right += <span class=\"number\">1</span>;\n                offset = <span class=\"number\">0</span>;\n                period = <span class=\"number\">1</span>;\n            }\n        }\n        (left, period)\n    }\n\n    <span class=\"comment\">// Compute the maximal suffix of the reverse of `arr`.\n    //\n    // The maximal suffix is a possible critical factorization (u', v') of `arr`.\n    //\n    // Returns `i` where `i` is the starting index of v', from the back;\n    // returns immediately when a period of `known_period` is reached.\n    //\n    // `order_greater` determines if lexical order is `&lt;` or `&gt;`. Both\n    // orders must be computed -- the ordering with the largest `i` gives\n    // a critical factorization.\n    //\n    // For long period cases, the resulting period is not exact (it is too short).\n    </span><span class=\"kw\">fn </span>reverse_maximal_suffix(arr: <span class=\"kw-2\">&amp;</span>[u8], known_period: usize, order_greater: bool) -&gt; usize {\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>left = <span class=\"number\">0</span>; <span class=\"comment\">// Corresponds to i in the paper\n        </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>right = <span class=\"number\">1</span>; <span class=\"comment\">// Corresponds to j in the paper\n        </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>offset = <span class=\"number\">0</span>; <span class=\"comment\">// Corresponds to k in the paper, but starting at 0\n        // to match 0-based indexing.\n        </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>period = <span class=\"number\">1</span>; <span class=\"comment\">// Corresponds to p in the paper\n        </span><span class=\"kw\">let </span>n = arr.len();\n\n        <span class=\"kw\">while </span>right + offset &lt; n {\n            <span class=\"kw\">let </span>a = arr[n - (<span class=\"number\">1 </span>+ right + offset)];\n            <span class=\"kw\">let </span>b = arr[n - (<span class=\"number\">1 </span>+ left + offset)];\n            <span class=\"kw\">if </span>(a &lt; b &amp;&amp; !order_greater) || (a &gt; b &amp;&amp; order_greater) {\n                <span class=\"comment\">// Suffix is smaller, period is entire prefix so far.\n                </span>right += offset + <span class=\"number\">1</span>;\n                offset = <span class=\"number\">0</span>;\n                period = right - left;\n            } <span class=\"kw\">else if </span>a == b {\n                <span class=\"comment\">// Advance through repetition of the current period.\n                </span><span class=\"kw\">if </span>offset + <span class=\"number\">1 </span>== period {\n                    right += offset + <span class=\"number\">1</span>;\n                    offset = <span class=\"number\">0</span>;\n                } <span class=\"kw\">else </span>{\n                    offset += <span class=\"number\">1</span>;\n                }\n            } <span class=\"kw\">else </span>{\n                <span class=\"comment\">// Suffix is larger, start over from current location.\n                </span>left = right;\n                right += <span class=\"number\">1</span>;\n                offset = <span class=\"number\">0</span>;\n                period = <span class=\"number\">1</span>;\n            }\n            <span class=\"kw\">if </span>period == known_period {\n                <span class=\"kw\">break</span>;\n            }\n        }\n        <span class=\"macro\">debug_assert!</span>(period &lt;= known_period);\n        left\n    }\n}\n\n<span class=\"comment\">// TwoWayStrategy allows the algorithm to either skip non-matches as quickly\n// as possible, or to work in a mode where it emits Rejects relatively quickly.\n</span><span class=\"kw\">trait </span>TwoWayStrategy {\n    <span class=\"kw\">type </span>Output;\n    <span class=\"kw\">fn </span>use_early_reject() -&gt; bool;\n    <span class=\"kw\">fn </span>rejecting(a: usize, b: usize) -&gt; <span class=\"self\">Self</span>::Output;\n    <span class=\"kw\">fn </span>matching(a: usize, b: usize) -&gt; <span class=\"self\">Self</span>::Output;\n}\n\n<span class=\"doccomment\">/// Skip to match intervals as quickly as possible\n</span><span class=\"kw\">enum </span>MatchOnly {}\n\n<span class=\"kw\">impl </span>TwoWayStrategy <span class=\"kw\">for </span>MatchOnly {\n    <span class=\"kw\">type </span>Output = <span class=\"prelude-ty\">Option</span>&lt;(usize, usize)&gt;;\n\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>use_early_reject() -&gt; bool {\n        <span class=\"bool-val\">false\n    </span>}\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>rejecting(_a: usize, _b: usize) -&gt; <span class=\"self\">Self</span>::Output {\n        <span class=\"prelude-val\">None\n    </span>}\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>matching(a: usize, b: usize) -&gt; <span class=\"self\">Self</span>::Output {\n        <span class=\"prelude-val\">Some</span>((a, b))\n    }\n}\n\n<span class=\"doccomment\">/// Emit Rejects regularly\n</span><span class=\"kw\">enum </span>RejectAndMatch {}\n\n<span class=\"kw\">impl </span>TwoWayStrategy <span class=\"kw\">for </span>RejectAndMatch {\n    <span class=\"kw\">type </span>Output = SearchStep;\n\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>use_early_reject() -&gt; bool {\n        <span class=\"bool-val\">true\n    </span>}\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>rejecting(a: usize, b: usize) -&gt; <span class=\"self\">Self</span>::Output {\n        SearchStep::Reject(a, b)\n    }\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>matching(a: usize, b: usize) -&gt; <span class=\"self\">Self</span>::Output {\n        SearchStep::Match(a, b)\n    }\n}\n\n<span class=\"doccomment\">/// SIMD search for short needles based on\n/// Wojciech Muła's \"SIMD-friendly algorithms for substring searching\"[0]\n///\n/// It skips ahead by the vector width on each iteration (rather than the needle length as two-way\n/// does) by probing the first and last byte of the needle for the whole vector width\n/// and only doing full needle comparisons when the vectorized probe indicated potential matches.\n///\n/// Since the x86_64 baseline only offers SSE2 we only use u8x16 here.\n/// If we ever ship std with for x86-64-v3 or adapt this for other platforms then wider vectors\n/// should be evaluated.\n///\n/// For haystacks smaller than vector-size + needle length it falls back to\n/// a naive O(n*m) search so this implementation should not be called on larger needles.\n///\n/// [0]: http://0x80.pl/articles/simd-strfind.html#sse-avx2\n</span><span class=\"attr\">#[cfg(all(target_arch = <span class=\"string\">\"x86_64\"</span>, target_feature = <span class=\"string\">\"sse2\"</span>))]\n#[inline]\n</span><span class=\"kw\">fn </span>simd_contains(needle: <span class=\"kw-2\">&amp;</span>str, haystack: <span class=\"kw-2\">&amp;</span>str) -&gt; <span class=\"prelude-ty\">Option</span>&lt;bool&gt; {\n    <span class=\"kw\">let </span>needle = needle.as_bytes();\n    <span class=\"kw\">let </span>haystack = haystack.as_bytes();\n\n    <span class=\"macro\">debug_assert!</span>(needle.len() &gt; <span class=\"number\">1</span>);\n\n    <span class=\"kw\">use </span><span class=\"kw\">crate</span>::ops::BitAnd;\n    <span class=\"kw\">use </span><span class=\"kw\">crate</span>::simd::cmp::SimdPartialEq;\n    <span class=\"kw\">use </span><span class=\"kw\">crate</span>::simd::mask8x16 <span class=\"kw\">as </span>Mask;\n    <span class=\"kw\">use </span><span class=\"kw\">crate</span>::simd::u8x16 <span class=\"kw\">as </span>Block;\n\n    <span class=\"kw\">let </span>first_probe = needle[<span class=\"number\">0</span>];\n    <span class=\"kw\">let </span>last_byte_offset = needle.len() - <span class=\"number\">1</span>;\n\n    <span class=\"comment\">// the offset used for the 2nd vector\n    </span><span class=\"kw\">let </span>second_probe_offset = <span class=\"kw\">if </span>needle.len() == <span class=\"number\">2 </span>{\n        <span class=\"comment\">// never bail out on len=2 needles because the probes will fully cover them and have\n        // no degenerate cases.\n        </span><span class=\"number\">1\n    </span>} <span class=\"kw\">else </span>{\n        <span class=\"comment\">// try a few bytes in case first and last byte of the needle are the same\n        </span><span class=\"kw\">let </span><span class=\"prelude-val\">Some</span>(second_probe_offset) =\n            (needle.len().saturating_sub(<span class=\"number\">4</span>)..needle.len()).rfind(|<span class=\"kw-2\">&amp;</span>idx| needle[idx] != first_probe)\n        <span class=\"kw\">else </span>{\n            <span class=\"comment\">// fall back to other search methods if we can't find any different bytes\n            // since we could otherwise hit some degenerate cases\n            </span><span class=\"kw\">return </span><span class=\"prelude-val\">None</span>;\n        };\n        second_probe_offset\n    };\n\n    <span class=\"comment\">// do a naive search if the haystack is too small to fit\n    </span><span class=\"kw\">if </span>haystack.len() &lt; Block::LEN + last_byte_offset {\n        <span class=\"kw\">return </span><span class=\"prelude-val\">Some</span>(haystack.windows(needle.len()).any(|c| c == needle));\n    }\n\n    <span class=\"kw\">let </span>first_probe: Block = Block::splat(first_probe);\n    <span class=\"kw\">let </span>second_probe: Block = Block::splat(needle[second_probe_offset]);\n    <span class=\"comment\">// first byte are already checked by the outer loop. to verify a match only the\n    // remainder has to be compared.\n    </span><span class=\"kw\">let </span>trimmed_needle = <span class=\"kw-2\">&amp;</span>needle[<span class=\"number\">1</span>..];\n\n    <span class=\"comment\">// this #[cold] is load-bearing, benchmark before removing it...\n    </span><span class=\"kw\">let </span>check_mask = <span class=\"attr\">#[cold]\n    </span>|idx, mask: u16, skip: bool| -&gt; bool {\n        <span class=\"kw\">if </span>skip {\n            <span class=\"kw\">return </span><span class=\"bool-val\">false</span>;\n        }\n\n        <span class=\"comment\">// and so is this. optimizations are weird.\n        </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>mask = mask;\n\n        <span class=\"kw\">while </span>mask != <span class=\"number\">0 </span>{\n            <span class=\"kw\">let </span>trailing = mask.trailing_zeros();\n            <span class=\"kw\">let </span>offset = idx + trailing <span class=\"kw\">as </span>usize + <span class=\"number\">1</span>;\n            <span class=\"comment\">// SAFETY: mask is between 0 and 15 trailing zeroes, we skip one additional byte that was already compared\n            // and then take trimmed_needle.len() bytes. This is within the bounds defined by the outer loop\n            </span><span class=\"kw\">unsafe </span>{\n                <span class=\"kw\">let </span>sub = haystack.get_unchecked(offset..).get_unchecked(..trimmed_needle.len());\n                <span class=\"kw\">if </span>small_slice_eq(sub, trimmed_needle) {\n                    <span class=\"kw\">return </span><span class=\"bool-val\">true</span>;\n                }\n            }\n            mask &amp;= !(<span class=\"number\">1 </span>&lt;&lt; trailing);\n        }\n        <span class=\"kw\">return </span><span class=\"bool-val\">false</span>;\n    };\n\n    <span class=\"kw\">let </span>test_chunk = |idx| -&gt; u16 {\n        <span class=\"comment\">// SAFETY: this requires at least LANES bytes being readable at idx\n        // that is ensured by the loop ranges (see comments below)\n        </span><span class=\"kw\">let </span>a: Block = <span class=\"kw\">unsafe </span>{ haystack.as_ptr().add(idx).cast::&lt;Block&gt;().read_unaligned() };\n        <span class=\"comment\">// SAFETY: this requires LANES + block_offset bytes being readable at idx\n        </span><span class=\"kw\">let </span>b: Block = <span class=\"kw\">unsafe </span>{\n            haystack.as_ptr().add(idx).add(second_probe_offset).cast::&lt;Block&gt;().read_unaligned()\n        };\n        <span class=\"kw\">let </span>eq_first: Mask = a.simd_eq(first_probe);\n        <span class=\"kw\">let </span>eq_last: Mask = b.simd_eq(second_probe);\n        <span class=\"kw\">let </span>both = eq_first.bitand(eq_last);\n        <span class=\"kw\">let </span>mask = both.to_bitmask() <span class=\"kw\">as </span>u16;\n\n        <span class=\"kw\">return </span>mask;\n    };\n\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>i = <span class=\"number\">0</span>;\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>result = <span class=\"bool-val\">false</span>;\n    <span class=\"comment\">// The loop condition must ensure that there's enough headroom to read LANE bytes,\n    // and not only at the current index but also at the index shifted by block_offset\n    </span><span class=\"kw\">const </span>UNROLL: usize = <span class=\"number\">4</span>;\n    <span class=\"kw\">while </span>i + last_byte_offset + UNROLL * Block::LEN &lt; haystack.len() &amp;&amp; !result {\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>masks = [<span class=\"number\">0u16</span>; UNROLL];\n        <span class=\"kw\">for </span>j <span class=\"kw\">in </span><span class=\"number\">0</span>..UNROLL {\n            masks[j] = test_chunk(i + j * Block::LEN);\n        }\n        <span class=\"kw\">for </span>j <span class=\"kw\">in </span><span class=\"number\">0</span>..UNROLL {\n            <span class=\"kw\">let </span>mask = masks[j];\n            <span class=\"kw\">if </span>mask != <span class=\"number\">0 </span>{\n                result |= check_mask(i + j * Block::LEN, mask, result);\n            }\n        }\n        i += UNROLL * Block::LEN;\n    }\n    <span class=\"kw\">while </span>i + last_byte_offset + Block::LEN &lt; haystack.len() &amp;&amp; !result {\n        <span class=\"kw\">let </span>mask = test_chunk(i);\n        <span class=\"kw\">if </span>mask != <span class=\"number\">0 </span>{\n            result |= check_mask(i, mask, result);\n        }\n        i += Block::LEN;\n    }\n\n    <span class=\"comment\">// Process the tail that didn't fit into LANES-sized steps.\n    // This simply repeats the same procedure but as right-aligned chunk instead\n    // of a left-aligned one. The last byte must be exactly flush with the string end so\n    // we don't miss a single byte or read out of bounds.\n    </span><span class=\"kw\">let </span>i = haystack.len() - last_byte_offset - Block::LEN;\n    <span class=\"kw\">let </span>mask = test_chunk(i);\n    <span class=\"kw\">if </span>mask != <span class=\"number\">0 </span>{\n        result |= check_mask(i, mask, result);\n    }\n\n    <span class=\"prelude-val\">Some</span>(result)\n}\n\n<span class=\"doccomment\">/// Compares short slices for equality.\n///\n/// It avoids a call to libc's memcmp which is faster on long slices\n/// due to SIMD optimizations but it incurs a function call overhead.\n///\n/// # Safety\n///\n/// Both slices must have the same length.\n</span><span class=\"attr\">#[cfg(all(target_arch = <span class=\"string\">\"x86_64\"</span>, target_feature = <span class=\"string\">\"sse2\"</span>))] </span><span class=\"comment\">// only called on x86\n</span><span class=\"attr\">#[inline]\n</span><span class=\"kw\">unsafe fn </span>small_slice_eq(x: <span class=\"kw-2\">&amp;</span>[u8], y: <span class=\"kw-2\">&amp;</span>[u8]) -&gt; bool {\n    <span class=\"macro\">debug_assert_eq!</span>(x.len(), y.len());\n    <span class=\"comment\">// This function is adapted from\n    // https://github.com/BurntSushi/memchr/blob/8037d11b4357b0f07be2bb66dc2659d9cf28ad32/src/memmem/util.rs#L32\n\n    // If we don't have enough bytes to do 4-byte at a time loads, then\n    // fall back to the naive slow version.\n    //\n    // Potential alternative: We could do a copy_nonoverlapping combined with a mask instead\n    // of a loop. Benchmark it.\n    </span><span class=\"kw\">if </span>x.len() &lt; <span class=\"number\">4 </span>{\n        <span class=\"kw\">for </span>(<span class=\"kw-2\">&amp;</span>b1, <span class=\"kw-2\">&amp;</span>b2) <span class=\"kw\">in </span>x.iter().zip(y) {\n            <span class=\"kw\">if </span>b1 != b2 {\n                <span class=\"kw\">return </span><span class=\"bool-val\">false</span>;\n            }\n        }\n        <span class=\"kw\">return </span><span class=\"bool-val\">true</span>;\n    }\n    <span class=\"comment\">// When we have 4 or more bytes to compare, then proceed in chunks of 4 at\n    // a time using unaligned loads.\n    //\n    // Also, why do 4 byte loads instead of, say, 8 byte loads? The reason is\n    // that this particular version of memcmp is likely to be called with tiny\n    // needles. That means that if we do 8 byte loads, then a higher proportion\n    // of memcmp calls will use the slower variant above. With that said, this\n    // is a hypothesis and is only loosely supported by benchmarks. There's\n    // likely some improvement that could be made here. The main thing here\n    // though is to optimize for latency, not throughput.\n\n    // SAFETY: Via the conditional above, we know that both `px` and `py`\n    // have the same length, so `px &lt; pxend` implies that `py &lt; pyend`.\n    // Thus, dereferencing both `px` and `py` in the loop below is safe.\n    //\n    // Moreover, we set `pxend` and `pyend` to be 4 bytes before the actual\n    // end of `px` and `py`. Thus, the final dereference outside of the\n    // loop is guaranteed to be valid. (The final comparison will overlap with\n    // the last comparison done in the loop for lengths that aren't multiples\n    // of four.)\n    //\n    // Finally, we needn't worry about alignment here, since we do unaligned\n    // loads.\n    </span><span class=\"kw\">unsafe </span>{\n        <span class=\"kw\">let </span>(<span class=\"kw-2\">mut </span>px, <span class=\"kw-2\">mut </span>py) = (x.as_ptr(), y.as_ptr());\n        <span class=\"kw\">let </span>(pxend, pyend) = (px.add(x.len() - <span class=\"number\">4</span>), py.add(y.len() - <span class=\"number\">4</span>));\n        <span class=\"kw\">while </span>px &lt; pxend {\n            <span class=\"kw\">let </span>vx = (px <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>u32).read_unaligned();\n            <span class=\"kw\">let </span>vy = (py <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>u32).read_unaligned();\n            <span class=\"kw\">if </span>vx != vy {\n                <span class=\"kw\">return </span><span class=\"bool-val\">false</span>;\n            }\n            px = px.add(<span class=\"number\">4</span>);\n            py = py.add(<span class=\"number\">4</span>);\n        }\n        <span class=\"kw\">let </span>vx = (pxend <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>u32).read_unaligned();\n        <span class=\"kw\">let </span>vy = (pyend <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>u32).read_unaligned();\n        vx == vy\n    }\n}\n</code></pre></div></section></main></body></html>",
	"crawlDate": "2024-07-28T05:13:38.795Z"
}