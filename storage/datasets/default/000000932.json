{
	"title": "from_raw_parts in std::slice - Rust",
	"url": "https://doc.rust-lang.org/stable/std/slice/fn.from_raw_parts.html",
	"markdown": "# from\\_raw\\_parts in std::slice - Rust\n\n## Function [std](../index.html)::[slice](index.html)::[from\\_raw\\_parts](#)\n\n1.0.0 (const: 1.64.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/raw.rs.html#92) ·\n\n```\npub const unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T]\n```\n\nExpand description\n\nForms a slice from a pointer and a length.\n\nThe `len` argument is the number of **elements**, not the number of bytes.\n\n## [§](#safety)Safety\n\nBehavior is undefined if any of the following conditions are violated:\n\n-   `data` must be [valid](about:blank/ptr/index.html#safety \"mod std::ptr\") for reads for `len * mem::size_of::<T>()` many bytes, and it must be properly aligned. This means in particular:\n    \n    -   The entire memory range of this slice must be contained within a single allocated object! Slices can never span across multiple allocated objects. See [below](#incorrect-usage) for an example incorrectly not taking this into account.\n    -   `data` must be non-null and aligned even for zero-length slices. One reason for this is that enum layout optimizations may rely on references (including slices of any length) being aligned and non-null to distinguish them from other data. You can obtain a pointer that is usable as `data` for zero-length slices using [`NonNull::dangling()`](about:blank/ptr/struct.NonNull.html#method.dangling \"associated function std::ptr::NonNull::dangling\").\n-   `data` must point to `len` consecutive properly initialized values of type `T`.\n    \n-   The memory referenced by the returned slice must not be mutated for the duration of lifetime `'a`, except inside an `UnsafeCell`.\n    \n-   The total size `len * mem::size_of::<T>()` of the slice must be no larger than `isize::MAX`, and adding that size to `data` must not “wrap around” the address space. See the safety documentation of [`pointer::offset`](about:blank/primitive.pointer.html#method.offset \"method pointer::offset\").\n    \n\n## [§](#caveat)Caveat\n\nThe lifetime for the returned slice is inferred from its usage. To prevent accidental misuse, it’s suggested to tie the lifetime to whichever source lifetime is safe in the context, such as by providing a helper function taking the lifetime of a host value for the slice, or by explicit annotation.\n\n## [§](#examples)Examples\n\n```\nuse std::slice;\n\n// manifest a slice for a single element\nlet x = 42;\nlet ptr = &x as *const _;\nlet slice = unsafe { slice::from_raw_parts(ptr, 1) };\nassert_eq!(slice[0], 42);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::slice;%0A++++%0A++++//+manifest+a+slice+for+a+single+element%0A++++let+x+=+42;%0A++++let+ptr+=+%26x+as+*const+_;%0A++++let+slice+=+unsafe+%7B+slice::from_raw_parts(ptr,+1)+%7D;%0A++++assert_eq!(slice%5B0%5D,+42);%0A%7D&edition=2021)\n\n#### [§](#incorrect-usage)Incorrect usage\n\nThe following `join_slices` function is **unsound** ⚠️\n\n```\nuse std::slice;\n\nfn join_slices<'a, T>(fst: &'a [T], snd: &'a [T]) -> &'a [T] {\n    let fst_end = fst.as_ptr().wrapping_add(fst.len());\n    let snd_start = snd.as_ptr();\n    assert_eq!(fst_end, snd_start, \"Slices must be contiguous!\");\n    unsafe {\n        // The assertion above ensures `fst` and `snd` are contiguous, but they might\n        // still be contained within _different allocated objects_, in which case\n        // creating this slice is undefined behavior.\n        slice::from_raw_parts(fst.as_ptr(), fst.len() + snd.len())\n    }\n}\n\nfn main() {\n    // `a` and `b` are different allocated objects...\n    let a = 42;\n    let b = 27;\n    // ... which may nevertheless be laid out contiguously in memory: | a | b |\n    let _ = join_slices(slice::from_ref(&a), slice::from_ref(&b)); // UB\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::slice;%0A%0Afn+join_slices%3C%27a,+T%3E(fst:+%26%27a+%5BT%5D,+snd:+%26%27a+%5BT%5D)+-%3E+%26%27a+%5BT%5D+%7B%0A++++let+fst_end+=+fst.as_ptr().wrapping_add(fst.len());%0A++++let+snd_start+=+snd.as_ptr();%0A++++assert_eq!(fst_end,+snd_start,+%22Slices+must+be+contiguous!%22);%0A++++unsafe+%7B%0A++++++++//+The+assertion+above+ensures+%60fst%60+and+%60snd%60+are+contiguous,+but+they+might%0A++++++++//+still+be+contained+within+_different+allocated+objects_,+in+which+case%0A++++++++//+creating+this+slice+is+undefined+behavior.%0A++++++++slice::from_raw_parts(fst.as_ptr(),+fst.len()+%2B+snd.len())%0A++++%7D%0A%7D%0A%0Afn+main()+%7B%0A++++//+%60a%60+and+%60b%60+are+different+allocated+objects...%0A++++let+a+=+42;%0A++++let+b+=+27;%0A++++//+...+which+may+nevertheless+be+laid+out+contiguously+in+memory:+%7C+a+%7C+b+%7C%0A++++let+_+=+join_slices(slice::from_ref(%26a),+slice::from_ref(%26b));+//+UB%0A%7D&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Forms a slice from a pointer and a length.\"><title>from_raw_parts in std::slice - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc fn\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h2><a href=\"index.html\">In std::slice</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.ArrayChunks.html\">ArrayChunks</a></li><li><a href=\"struct.ArrayChunksMut.html\">ArrayChunksMut</a></li><li><a href=\"struct.ArrayWindows.html\">ArrayWindows</a></li><li><a href=\"struct.ChunkBy.html\">ChunkBy</a></li><li><a href=\"struct.ChunkByMut.html\">ChunkByMut</a></li><li><a href=\"struct.Chunks.html\">Chunks</a></li><li><a href=\"struct.ChunksExact.html\">ChunksExact</a></li><li><a href=\"struct.ChunksExactMut.html\">ChunksExactMut</a></li><li><a href=\"struct.ChunksMut.html\">ChunksMut</a></li><li><a href=\"struct.EscapeAscii.html\">EscapeAscii</a></li><li><a href=\"struct.Iter.html\">Iter</a></li><li><a href=\"struct.IterMut.html\">IterMut</a></li><li><a href=\"struct.RChunks.html\">RChunks</a></li><li><a href=\"struct.RChunksExact.html\">RChunksExact</a></li><li><a href=\"struct.RChunksExactMut.html\">RChunksExactMut</a></li><li><a href=\"struct.RChunksMut.html\">RChunksMut</a></li><li><a href=\"struct.RSplit.html\">RSplit</a></li><li><a href=\"struct.RSplitMut.html\">RSplitMut</a></li><li><a href=\"struct.RSplitN.html\">RSplitN</a></li><li><a href=\"struct.RSplitNMut.html\">RSplitNMut</a></li><li><a href=\"struct.Split.html\">Split</a></li><li><a href=\"struct.SplitInclusive.html\">SplitInclusive</a></li><li><a href=\"struct.SplitInclusiveMut.html\">SplitInclusiveMut</a></li><li><a href=\"struct.SplitMut.html\">SplitMut</a></li><li><a href=\"struct.SplitN.html\">SplitN</a></li><li><a href=\"struct.SplitNMut.html\">SplitNMut</a></li><li><a href=\"struct.Windows.html\">Windows</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.Concat.html\">Concat</a></li><li><a href=\"trait.Join.html\">Join</a></li><li><a href=\"trait.SliceIndex.html\">SliceIndex</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.from_mut.html\">from_mut</a></li><li><a href=\"fn.from_mut_ptr_range.html\">from_mut_ptr_range</a></li><li><a href=\"fn.from_ptr_range.html\">from_ptr_range</a></li><li><a href=\"fn.from_raw_parts.html\">from_raw_parts</a></li><li><a href=\"fn.from_raw_parts_mut.html\">from_raw_parts_mut</a></li><li><a href=\"fn.from_ref.html\">from_ref</a></li><li><a href=\"fn.range.html\">range</a></li><li><a href=\"fn.try_range.html\">try_range</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Function <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">slice</a>::<wbr><a class=\"fn\" href=\"#\">from_raw_parts</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.64.0\">1.0.0 (const: 1.64.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/raw.rs.html#92\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub const unsafe fn from_raw_parts&lt;'a, T&gt;(data: <a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a>, len: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; &amp;'a <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a></code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Forms a slice from a pointer and a length.</p>\n<p>The <code>len</code> argument is the number of <strong>elements</strong>, not the number of bytes.</p>\n<h2 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h2>\n<p>Behavior is undefined if any of the following conditions are violated:</p>\n<ul>\n<li>\n<p><code>data</code> must be <a href=\"../ptr/index.html#safety\" title=\"mod std::ptr\">valid</a> for reads for <code>len * mem::size_of::&lt;T&gt;()</code> many bytes,\nand it must be properly aligned. This means in particular:</p>\n<ul>\n<li>The entire memory range of this slice must be contained within a single allocated object!\nSlices can never span across multiple allocated objects. See <a href=\"#incorrect-usage\">below</a>\nfor an example incorrectly not taking this into account.</li>\n<li><code>data</code> must be non-null and aligned even for zero-length slices. One\nreason for this is that enum layout optimizations may rely on references\n(including slices of any length) being aligned and non-null to distinguish\nthem from other data. You can obtain a pointer that is usable as <code>data</code>\nfor zero-length slices using <a href=\"../ptr/struct.NonNull.html#method.dangling\" title=\"associated function std::ptr::NonNull::dangling\"><code>NonNull::dangling()</code></a>.</li>\n</ul>\n</li>\n<li>\n<p><code>data</code> must point to <code>len</code> consecutive properly initialized values of type <code>T</code>.</p>\n</li>\n<li>\n<p>The memory referenced by the returned slice must not be mutated for the duration\nof lifetime <code>'a</code>, except inside an <code>UnsafeCell</code>.</p>\n</li>\n<li>\n<p>The total size <code>len * mem::size_of::&lt;T&gt;()</code> of the slice must be no larger than <code>isize::MAX</code>,\nand adding that size to <code>data</code> must not “wrap around” the address space.\nSee the safety documentation of <a href=\"../primitive.pointer.html#method.offset\" title=\"method pointer::offset\"><code>pointer::offset</code></a>.</p>\n</li>\n</ul>\n<h2 id=\"caveat\"><a class=\"doc-anchor\" href=\"#caveat\">§</a>Caveat</h2>\n<p>The lifetime for the returned slice is inferred from its usage. To\nprevent accidental misuse, it’s suggested to tie the lifetime to whichever\nsource lifetime is safe in the context, such as by providing a helper\nfunction taking the lifetime of a host value for the slice, or by explicit\nannotation.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::slice;\n\n<span class=\"comment\">// manifest a slice for a single element\n</span><span class=\"kw\">let </span>x = <span class=\"number\">42</span>;\n<span class=\"kw\">let </span>ptr = <span class=\"kw-2\">&amp;</span>x <span class=\"kw\">as </span><span class=\"kw-2\">*const </span><span class=\"kw\">_</span>;\n<span class=\"kw\">let </span>slice = <span class=\"kw\">unsafe </span>{ slice::from_raw_parts(ptr, <span class=\"number\">1</span>) };\n<span class=\"macro\">assert_eq!</span>(slice[<span class=\"number\">0</span>], <span class=\"number\">42</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::slice;%0A++++%0A++++//+manifest+a+slice+for+a+single+element%0A++++let+x+=+42;%0A++++let+ptr+=+%26x+as+*const+_;%0A++++let+slice+=+unsafe+%7B+slice::from_raw_parts(ptr,+1)+%7D;%0A++++assert_eq!(slice%5B0%5D,+42);%0A%7D&amp;edition=2021\">Run</a></div>\n<h4 id=\"incorrect-usage\"><a class=\"doc-anchor\" href=\"#incorrect-usage\">§</a>Incorrect usage</h4>\n<p>The following <code>join_slices</code> function is <strong>unsound</strong> ⚠️</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::slice;\n\n<span class=\"kw\">fn </span>join_slices&lt;<span class=\"lifetime\">'a</span>, T&gt;(fst: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>[T], snd: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>[T]) -&gt; <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>[T] {\n    <span class=\"kw\">let </span>fst_end = fst.as_ptr().wrapping_add(fst.len());\n    <span class=\"kw\">let </span>snd_start = snd.as_ptr();\n    <span class=\"macro\">assert_eq!</span>(fst_end, snd_start, <span class=\"string\">\"Slices must be contiguous!\"</span>);\n    <span class=\"kw\">unsafe </span>{\n        <span class=\"comment\">// The assertion above ensures `fst` and `snd` are contiguous, but they might\n        // still be contained within _different allocated objects_, in which case\n        // creating this slice is undefined behavior.\n        </span>slice::from_raw_parts(fst.as_ptr(), fst.len() + snd.len())\n    }\n}\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"comment\">// `a` and `b` are different allocated objects...\n    </span><span class=\"kw\">let </span>a = <span class=\"number\">42</span>;\n    <span class=\"kw\">let </span>b = <span class=\"number\">27</span>;\n    <span class=\"comment\">// ... which may nevertheless be laid out contiguously in memory: | a | b |\n    </span><span class=\"kw\">let _ </span>= join_slices(slice::from_ref(<span class=\"kw-2\">&amp;</span>a), slice::from_ref(<span class=\"kw-2\">&amp;</span>b)); <span class=\"comment\">// UB\n</span>}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::slice;%0A%0Afn+join_slices%3C'a,+T%3E(fst:+%26'a+%5BT%5D,+snd:+%26'a+%5BT%5D)+-%3E+%26'a+%5BT%5D+%7B%0A++++let+fst_end+=+fst.as_ptr().wrapping_add(fst.len());%0A++++let+snd_start+=+snd.as_ptr();%0A++++assert_eq!(fst_end,+snd_start,+%22Slices+must+be+contiguous!%22);%0A++++unsafe+%7B%0A++++++++//+The+assertion+above+ensures+%60fst%60+and+%60snd%60+are+contiguous,+but+they+might%0A++++++++//+still+be+contained+within+_different+allocated+objects_,+in+which+case%0A++++++++//+creating+this+slice+is+undefined+behavior.%0A++++++++slice::from_raw_parts(fst.as_ptr(),+fst.len()+%2B+snd.len())%0A++++%7D%0A%7D%0A%0Afn+main()+%7B%0A++++//+%60a%60+and+%60b%60+are+different+allocated+objects...%0A++++let+a+=+42;%0A++++let+b+=+27;%0A++++//+...+which+may+nevertheless+be+laid+out+contiguously+in+memory:+%7C+a+%7C+b+%7C%0A++++let+_+=+join_slices(slice::from_ref(%26a),+slice::from_ref(%26b));+//+UB%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:14:16.908Z"
}