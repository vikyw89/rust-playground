{
	"title": "Searcher in std::str::pattern - Rust",
	"url": "https://doc.rust-lang.org/stable/std/str/pattern/trait.Searcher.html",
	"markdown": "# Searcher in std::str::pattern - Rust\n\n```\npub unsafe trait Searcher<'a> {\n    // Required methods\n    fn haystack(&self) -> &'a str;\n    fn next(&mut self) -> SearchStep;\n\n    // Provided methods\n    fn next_match(&mut self) -> Option<(usize, usize)> { ... }\n    fn next_reject(&mut self) -> Option<(usize, usize)> { ... }\n}\n```\n\nðŸ”¬This is a nightly-only experimental API. (`pattern`Â [#27721](https://github.com/rust-lang/rust/issues/27721))\n\nExpand description\n\nA searcher for a string pattern.\n\nThis trait provides methods for searching for non-overlapping matches of a pattern starting from the front (left) of a string.\n\nIt will be implemented by associated `Searcher` types of the [`Pattern`](trait.Pattern.html \"trait std::str::pattern::Pattern\") trait.\n\nThe trait is marked unsafe because the indices returned by the [`next()`](about:blank/trait.Searcher.html#tymethod.next \"method std::str::pattern::Searcher::next\") methods are required to lie on valid utf8 boundaries in the haystack. This enables consumers of this trait to slice the haystack without additional runtime checks.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#201)\n\nðŸ”¬This is a nightly-only experimental API. (`pattern`Â [#27721](https://github.com/rust-lang/rust/issues/27721))\n\nGetter for the underlying string to be searched in\n\nWill always return the same [`&str`](../../primitive.str.html \"primitive str\").\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#224)\n\nðŸ”¬This is a nightly-only experimental API. (`pattern`Â [#27721](https://github.com/rust-lang/rust/issues/27721))\n\nPerforms the next search step starting from the front.\n\n-   Returns [`Match(a, b)`](about:blank/enum.SearchStep.html#variant.Match \"variant std::str::pattern::SearchStep::Match\") if `haystack[a..b]` matches the pattern.\n-   Returns [`Reject(a, b)`](about:blank/enum.SearchStep.html#variant.Reject \"variant std::str::pattern::SearchStep::Reject\") if `haystack[a..b]` can not match the pattern, even partially.\n-   Returns [`Done`](about:blank/enum.SearchStep.html#variant.Done \"variant std::str::pattern::SearchStep::Done\") if every byte of the haystack has been visited.\n\nThe stream of [`Match`](about:blank/enum.SearchStep.html#variant.Match \"variant std::str::pattern::SearchStep::Match\") and [`Reject`](about:blank/enum.SearchStep.html#variant.Reject \"variant std::str::pattern::SearchStep::Reject\") values up to a [`Done`](about:blank/enum.SearchStep.html#variant.Done \"variant std::str::pattern::SearchStep::Done\") will contain index ranges that are adjacent, non-overlapping, covering the whole haystack, and laying on utf8 boundaries.\n\nA [`Match`](about:blank/enum.SearchStep.html#variant.Match \"variant std::str::pattern::SearchStep::Match\") result needs to contain the whole matched pattern, however [`Reject`](about:blank/enum.SearchStep.html#variant.Reject \"variant std::str::pattern::SearchStep::Reject\") results may be split up into arbitrary many adjacent fragments. Both ranges may have zero length.\n\nAs an example, the pattern `\"aaa\"` and the haystack `\"cbaaaaab\"` might produce the stream `[Reject(0, 1), Reject(1, 2), Match(2, 5), Reject(5, 8)]`\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#233)\n\nðŸ”¬This is a nightly-only experimental API. (`pattern`Â [#27721](https://github.com/rust-lang/rust/issues/27721))\n\nFinds the next [`Match`](about:blank/enum.SearchStep.html#variant.Match \"variant std::str::pattern::SearchStep::Match\") result. See [`next()`](about:blank/trait.Searcher.html#tymethod.next \"method std::str::pattern::Searcher::next\").\n\nUnlike [`next()`](about:blank/trait.Searcher.html#tymethod.next \"method std::str::pattern::Searcher::next\"), there is no guarantee that the returned ranges of this and [`next_reject`](about:blank/trait.Searcher.html#method.next_reject \"method std::str::pattern::Searcher::next_reject\") will overlap. This will return `(start_match, end_match)`, where start\\_match is the index of where the match begins, and end\\_match is the index after the end of the match.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#249)\n\nðŸ”¬This is a nightly-only experimental API. (`pattern`Â [#27721](https://github.com/rust-lang/rust/issues/27721))",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A searcher for a string pattern.\"><title>Searcher in std::str::pattern - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../../\" data-static-root-path=\"../../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc trait\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Searcher</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Searcher</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#required-methods\">Required Methods</a></h3><ul class=\"block\"><li><a href=\"#tymethod.haystack\">haystack</a></li><li><a href=\"#tymethod.next\">next</a></li></ul><h3><a href=\"#provided-methods\">Provided Methods</a></h3><ul class=\"block\"><li><a href=\"#method.next_match\">next_match</a></li><li><a href=\"#method.next_reject\">next_reject</a></li></ul><h3><a href=\"#implementors\">Implementors</a></h3></section><h2><a href=\"index.html\">In std::str::pattern</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.CharArrayRefSearcher.html\">CharArrayRefSearcher</a></li><li><a href=\"struct.CharArraySearcher.html\">CharArraySearcher</a></li><li><a href=\"struct.CharPredicateSearcher.html\">CharPredicateSearcher</a></li><li><a href=\"struct.CharSearcher.html\">CharSearcher</a></li><li><a href=\"struct.CharSliceSearcher.html\">CharSliceSearcher</a></li><li><a href=\"struct.StrSearcher.html\">StrSearcher</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.SearchStep.html\">SearchStep</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.DoubleEndedSearcher.html\">DoubleEndedSearcher</a></li><li><a href=\"trait.Pattern.html\">Pattern</a></li><li><a href=\"trait.ReverseSearcher.html\">ReverseSearcher</a></li><li><a href=\"trait.Searcher.html\">Searcher</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type â€˜Sâ€™ or â€˜/â€™ to search, â€˜?â€™ for more optionsâ€¦\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Trait <a href=\"../../index.html\">std</a>::<wbr><a href=\"../index.html\">str</a>::<wbr><a href=\"index.html\">pattern</a>::<wbr><a class=\"trait\" href=\"#\">Searcher</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#197\">source</a> Â· <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>âˆ’</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub unsafe trait Searcher&lt;'a&gt; {\n    // Required methods\n    fn <a href=\"#tymethod.haystack\" class=\"fn\">haystack</a>(&amp;self) -&gt; &amp;'a <a class=\"primitive\" href=\"../../primitive.str.html\">str</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.next\" class=\"fn\">next</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"enum.SearchStep.html\" title=\"enum std::str::pattern::SearchStep\">SearchStep</a>;\n\n    // Provided methods\n    fn <a href=\"#method.next_match\" class=\"fn\">next_match</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;(<a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>)&gt; { ... }\n<span class=\"item-spacer\"></span>    fn <a href=\"#method.next_reject\" class=\"fn\">next_reject</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;(<a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>)&gt; { ... }\n}</code></pre><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27721\">#27721</a>)</span></div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A searcher for a string pattern.</p>\n<p>This trait provides methods for searching for non-overlapping\nmatches of a pattern starting from the front (left) of a string.</p>\n<p>It will be implemented by associated <code>Searcher</code>\ntypes of the <a href=\"trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\"><code>Pattern</code></a> trait.</p>\n<p>The trait is marked unsafe because the indices returned by the\n<a href=\"trait.Searcher.html#tymethod.next\" title=\"method std::str::pattern::Searcher::next\"><code>next()</code></a> methods are required to lie on valid utf8\nboundaries in the haystack. This enables consumers of this trait to\nslice the haystack without additional runtime checks.</p>\n</div></details><h2 id=\"required-methods\" class=\"section-header\">Required Methods<a href=\"#required-methods\" class=\"anchor\">Â§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.haystack\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#201\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.haystack\" class=\"fn\">haystack</a>(&amp;self) -&gt; &amp;'a <a class=\"primitive\" href=\"../../primitive.str.html\">str</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27721\">#27721</a>)</span></div></span></summary><div class=\"docblock\"><p>Getter for the underlying string to be searched in</p>\n<p>Will always return the same <a href=\"../../primitive.str.html\" title=\"primitive str\"><code>&amp;str</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.next\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#224\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.next\" class=\"fn\">next</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"enum.SearchStep.html\" title=\"enum std::str::pattern::SearchStep\">SearchStep</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27721\">#27721</a>)</span></div></span></summary><div class=\"docblock\"><p>Performs the next search step starting from the front.</p>\n<ul>\n<li>Returns <a href=\"enum.SearchStep.html#variant.Match\" title=\"variant std::str::pattern::SearchStep::Match\"><code>Match(a, b)</code></a> if <code>haystack[a..b]</code> matches\nthe pattern.</li>\n<li>Returns <a href=\"enum.SearchStep.html#variant.Reject\" title=\"variant std::str::pattern::SearchStep::Reject\"><code>Reject(a, b)</code></a> if <code>haystack[a..b]</code> can\nnot match the pattern, even partially.</li>\n<li>Returns <a href=\"enum.SearchStep.html#variant.Done\" title=\"variant std::str::pattern::SearchStep::Done\"><code>Done</code></a> if every byte of the haystack has\nbeen visited.</li>\n</ul>\n<p>The stream of <a href=\"enum.SearchStep.html#variant.Match\" title=\"variant std::str::pattern::SearchStep::Match\"><code>Match</code></a> and\n<a href=\"enum.SearchStep.html#variant.Reject\" title=\"variant std::str::pattern::SearchStep::Reject\"><code>Reject</code></a> values up to a <a href=\"enum.SearchStep.html#variant.Done\" title=\"variant std::str::pattern::SearchStep::Done\"><code>Done</code></a>\nwill contain index ranges that are adjacent, non-overlapping,\ncovering the whole haystack, and laying on utf8 boundaries.</p>\n<p>A <a href=\"enum.SearchStep.html#variant.Match\" title=\"variant std::str::pattern::SearchStep::Match\"><code>Match</code></a> result needs to contain the whole matched\npattern, however <a href=\"enum.SearchStep.html#variant.Reject\" title=\"variant std::str::pattern::SearchStep::Reject\"><code>Reject</code></a> results may be split up\ninto arbitrary many adjacent fragments. Both ranges may have zero length.</p>\n<p>As an example, the pattern <code>\"aaa\"</code> and the haystack <code>\"cbaaaaab\"</code>\nmight produce the stream\n<code>[Reject(0, 1), Reject(1, 2), Match(2, 5), Reject(5, 8)]</code></p>\n</div></details></div><h2 id=\"provided-methods\" class=\"section-header\">Provided Methods<a href=\"#provided-methods\" class=\"anchor\">Â§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.next_match\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#233\">source</a><h4 class=\"code-header\">fn <a href=\"#method.next_match\" class=\"fn\">next_match</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;(<a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>)&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27721\">#27721</a>)</span></div></span></summary><div class=\"docblock\"><p>Finds the next <a href=\"enum.SearchStep.html#variant.Match\" title=\"variant std::str::pattern::SearchStep::Match\"><code>Match</code></a> result. See <a href=\"trait.Searcher.html#tymethod.next\" title=\"method std::str::pattern::Searcher::next\"><code>next()</code></a>.</p>\n<p>Unlike <a href=\"trait.Searcher.html#tymethod.next\" title=\"method std::str::pattern::Searcher::next\"><code>next()</code></a>, there is no guarantee that the returned ranges\nof this and <a href=\"trait.Searcher.html#method.next_reject\" title=\"method std::str::pattern::Searcher::next_reject\"><code>next_reject</code></a> will overlap. This will return\n<code>(start_match, end_match)</code>, where start_match is the index of where\nthe match begins, and end_match is the index after the end of the match.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.next_reject\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#249\">source</a><h4 class=\"code-header\">fn <a href=\"#method.next_reject\" class=\"fn\">next_reject</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;(<a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>)&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27721\">#27721</a>)</span></div></span></summary><div class=\"docblock\"><p>Finds the next <a href=\"enum.SearchStep.html#variant.Reject\" title=\"variant std::str::pattern::SearchStep::Reject\"><code>Reject</code></a> result. See <a href=\"trait.Searcher.html#tymethod.next\" title=\"method std::str::pattern::Searcher::next\"><code>next()</code></a>\nand <a href=\"trait.Searcher.html#method.next_match\" title=\"method std::str::pattern::Searcher::next_match\"><code>next_match()</code></a>.</p>\n<p>Unlike <a href=\"trait.Searcher.html#tymethod.next\" title=\"method std::str::pattern::Searcher::next\"><code>next()</code></a>, there is no guarantee that the returned ranges\nof this and <a href=\"trait.Searcher.html#method.next_match\" title=\"method std::str::pattern::Searcher::next_match\"><code>next_match</code></a> will overlap.</p>\n</div></details></div><h2 id=\"implementors\" class=\"section-header\">Implementors<a href=\"#implementors\" class=\"anchor\">Â§</a></h2><div id=\"implementors-list\"><section id=\"impl-Searcher%3C'a%3E-for-CharSearcher%3C'a%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#385\">source</a><a href=\"#impl-Searcher%3C'a%3E-for-CharSearcher%3C'a%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"trait.Searcher.html\" title=\"trait std::str::pattern::Searcher\">Searcher</a>&lt;'a&gt; for <a class=\"struct\" href=\"struct.CharSearcher.html\" title=\"struct std::str::pattern::CharSearcher\">CharSearcher</a>&lt;'a&gt;</h3></section><section id=\"impl-Searcher%3C'a%3E-for-CharSliceSearcher%3C'a,+'b%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#855\">source</a><a href=\"#impl-Searcher%3C'a%3E-for-CharSliceSearcher%3C'a,+'b%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"trait.Searcher.html\" title=\"trait std::str::pattern::Searcher\">Searcher</a>&lt;'a&gt; for <a class=\"struct\" href=\"struct.CharSliceSearcher.html\" title=\"struct std::str::pattern::CharSliceSearcher\">CharSliceSearcher</a>&lt;'a, 'b&gt;</h3></section><section id=\"impl-Searcher%3C'a%3E-for-StrSearcher%3C'a,+'b%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#1078\">source</a><a href=\"#impl-Searcher%3C'a%3E-for-StrSearcher%3C'a,+'b%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"trait.Searcher.html\" title=\"trait std::str::pattern::Searcher\">Searcher</a>&lt;'a&gt; for <a class=\"struct\" href=\"struct.StrSearcher.html\" title=\"struct std::str::pattern::StrSearcher\">StrSearcher</a>&lt;'a, 'b&gt;</h3></section><section id=\"impl-Searcher%3C'a%3E-for-CharArrayRefSearcher%3C'a,+'b,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#835\">source</a><a href=\"#impl-Searcher%3C'a%3E-for-CharArrayRefSearcher%3C'a,+'b,+N%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, 'b, const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"trait.Searcher.html\" title=\"trait std::str::pattern::Searcher\">Searcher</a>&lt;'a&gt; for <a class=\"struct\" href=\"struct.CharArrayRefSearcher.html\" title=\"struct std::str::pattern::CharArrayRefSearcher\">CharArrayRefSearcher</a>&lt;'a, 'b, N&gt;</h3></section><section id=\"impl-Searcher%3C'a%3E-for-CharPredicateSearcher%3C'a,+F%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#898-900\">source</a><a href=\"#impl-Searcher%3C'a%3E-for-CharPredicateSearcher%3C'a,+F%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, F&gt; <a class=\"trait\" href=\"trait.Searcher.html\" title=\"trait std::str::pattern::Searcher\">Searcher</a>&lt;'a&gt; for <a class=\"struct\" href=\"struct.CharPredicateSearcher.html\" title=\"struct std::str::pattern::CharPredicateSearcher\">CharPredicateSearcher</a>&lt;'a, F&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../../primitive.char.html\">char</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a>,</div></h3></section><section id=\"impl-Searcher%3C'a%3E-for-CharArraySearcher%3C'a,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#813\">source</a><a href=\"#impl-Searcher%3C'a%3E-for-CharArraySearcher%3C'a,+N%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"trait.Searcher.html\" title=\"trait std::str::pattern::Searcher\">Searcher</a>&lt;'a&gt; for <a class=\"struct\" href=\"struct.CharArraySearcher.html\" title=\"struct std::str::pattern::CharArraySearcher\">CharArraySearcher</a>&lt;'a, N&gt;</h3></section></div><script src=\"../../../trait.impl/core/str/pattern/trait.Searcher.js\" data-ignore-extern-crates=\"core\" async=\"\"></script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:26:36.792Z"
}