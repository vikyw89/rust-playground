{
	"title": "from_utf8 in std::str - Rust",
	"url": "https://doc.rust-lang.org/stable/std/str/fn.from_utf8.html",
	"markdown": "# from\\_utf8 in std::str - Rust\n\n## Function [std](../index.html)::[str](index.html)::[from\\_utf8](#)\n\n1.0.0 (const: 1.63.0) ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/str/converts.rs.html#88) ¬∑\n\n```\npub const fn from_utf8(v: &[u8]) -> Result<&str, Utf8Error>\n```\n\nExpand description\n\nConverts a slice of bytes to a string slice.\n\nA string slice ([`&str`](../primitive.str.html \"primitive str\")) is made of bytes ([`u8`](../primitive.u8.html \"primitive u8\")), and a byte slice ([`&[u8]`](../primitive.slice.html \"primitive slice\")) is made of bytes, so this function converts between the two. Not all byte slices are valid string slices, however: [`&str`](../primitive.str.html \"primitive str\") requires that it is valid UTF-8. `from_utf8()` checks to ensure that the bytes are valid UTF-8, and then does the conversion.\n\nIf you are sure that the byte slice is valid UTF-8, and you don‚Äôt want to incur the overhead of the validity check, there is an unsafe version of this function, [`from_utf8_unchecked`](fn.from_utf8_unchecked.html \"fn std::str::from_utf8_unchecked\"), which has the same behavior but skips the check.\n\nIf you need a `String` instead of a `&str`, consider [`String::from_utf8`](about:blank/std/string/struct.String.html#method.from_utf8).\n\nBecause you can stack-allocate a `[u8; N]`, and you can take a [`&[u8]`](../primitive.slice.html \"primitive slice\") of it, this function is one way to have a stack-allocated string. There is an example of this in the examples section below.\n\n## [¬ß](#errors)Errors\n\nReturns `Err` if the slice is not UTF-8 with a description as to why the provided slice is not UTF-8.\n\n## [¬ß](#examples)Examples\n\nBasic usage:\n\n```\nuse std::str;\n\n// some bytes, in a vector\nlet sparkle_heart = vec![240, 159, 146, 150];\n\n// We know these bytes are valid, so just use `unwrap()`.\nlet sparkle_heart = str::from_utf8(&sparkle_heart).unwrap();\n\nassert_eq!(\"üíñ\", sparkle_heart);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::str;%0A++++%0A++++//+some+bytes,+in+a+vector%0A++++let+sparkle_heart+=+vec!%5B240,+159,+146,+150%5D;%0A++++%0A++++//+We+know+these+bytes+are+valid,+so+just+use+%60unwrap()%60.%0A++++let+sparkle_heart+=+str::from_utf8(%26sparkle_heart).unwrap();%0A++++%0A++++assert_eq!(%22%F0%9F%92%96%22,+sparkle_heart);%0A%7D&edition=2021)\n\nIncorrect bytes:\n\n```\nuse std::str;\n\n// some invalid bytes, in a vector\nlet sparkle_heart = vec![0, 159, 146, 150];\n\nassert!(str::from_utf8(&sparkle_heart).is_err());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::str;%0A++++%0A++++//+some+invalid+bytes,+in+a+vector%0A++++let+sparkle_heart+=+vec!%5B0,+159,+146,+150%5D;%0A++++%0A++++assert!(str::from_utf8(%26sparkle_heart).is_err());%0A%7D&edition=2021)\n\nSee the docs for [`Utf8Error`](struct.Utf8Error.html \"struct std::str::Utf8Error\") for more details on the kinds of errors that can be returned.\n\nA ‚Äústack allocated string‚Äù:\n\n```\nuse std::str;\n\n// some bytes, in a stack-allocated array\nlet sparkle_heart = [240, 159, 146, 150];\n\n// We know these bytes are valid, so just use `unwrap()`.\nlet sparkle_heart: &str = str::from_utf8(&sparkle_heart).unwrap();\n\nassert_eq!(\"üíñ\", sparkle_heart);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::str;%0A++++%0A++++//+some+bytes,+in+a+stack-allocated+array%0A++++let+sparkle_heart+=+%5B240,+159,+146,+150%5D;%0A++++%0A++++//+We+know+these+bytes+are+valid,+so+just+use+%60unwrap()%60.%0A++++let+sparkle_heart:+%26str+=+str::from_utf8(%26sparkle_heart).unwrap();%0A++++%0A++++assert_eq!(%22%F0%9F%92%96%22,+sparkle_heart);%0A%7D&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Converts a slice of bytes to a string slice.\"><title>from_utf8 in std::str - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc fn\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h2><a href=\"index.html\">In std::str</a></h2><h3><a href=\"index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"pattern/index.html\">pattern</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Bytes.html\">Bytes</a></li><li><a href=\"struct.CharIndices.html\">CharIndices</a></li><li><a href=\"struct.Chars.html\">Chars</a></li><li><a href=\"struct.EncodeUtf16.html\">EncodeUtf16</a></li><li><a href=\"struct.EscapeDebug.html\">EscapeDebug</a></li><li><a href=\"struct.EscapeDefault.html\">EscapeDefault</a></li><li><a href=\"struct.EscapeUnicode.html\">EscapeUnicode</a></li><li><a href=\"struct.Lines.html\">Lines</a></li><li><a href=\"struct.LinesAny.html\">LinesAny</a></li><li><a href=\"struct.MatchIndices.html\">MatchIndices</a></li><li><a href=\"struct.Matches.html\">Matches</a></li><li><a href=\"struct.ParseBoolError.html\">ParseBoolError</a></li><li><a href=\"struct.RMatchIndices.html\">RMatchIndices</a></li><li><a href=\"struct.RMatches.html\">RMatches</a></li><li><a href=\"struct.RSplit.html\">RSplit</a></li><li><a href=\"struct.RSplitN.html\">RSplitN</a></li><li><a href=\"struct.RSplitTerminator.html\">RSplitTerminator</a></li><li><a href=\"struct.Split.html\">Split</a></li><li><a href=\"struct.SplitAsciiWhitespace.html\">SplitAsciiWhitespace</a></li><li><a href=\"struct.SplitInclusive.html\">SplitInclusive</a></li><li><a href=\"struct.SplitN.html\">SplitN</a></li><li><a href=\"struct.SplitTerminator.html\">SplitTerminator</a></li><li><a href=\"struct.SplitWhitespace.html\">SplitWhitespace</a></li><li><a href=\"struct.Utf8Chunk.html\">Utf8Chunk</a></li><li><a href=\"struct.Utf8Chunks.html\">Utf8Chunks</a></li><li><a href=\"struct.Utf8Error.html\">Utf8Error</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.FromStr.html\">FromStr</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.from_boxed_utf8_unchecked.html\">from_boxed_utf8_unchecked</a></li><li><a href=\"fn.from_raw_parts.html\">from_raw_parts</a></li><li><a href=\"fn.from_raw_parts_mut.html\">from_raw_parts_mut</a></li><li><a href=\"fn.from_utf8.html\">from_utf8</a></li><li><a href=\"fn.from_utf8_mut.html\">from_utf8_mut</a></li><li><a href=\"fn.from_utf8_unchecked.html\">from_utf8_unchecked</a></li><li><a href=\"fn.from_utf8_unchecked_mut.html\">from_utf8_unchecked_mut</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‚ÄòS‚Äô or ‚Äò/‚Äô to search, ‚Äò?‚Äô for more options‚Ä¶\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Function <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">str</a>::<wbr><a class=\"fn\" href=\"#\">from_utf8</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.63.0\">1.0.0 (const: 1.63.0)</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/converts.rs.html#88\">source</a> ¬∑ <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>‚àí</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub const fn from_utf8(v: &amp;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>, <a class=\"struct\" href=\"struct.Utf8Error.html\" title=\"struct std::str::Utf8Error\">Utf8Error</a>&gt;</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Converts a slice of bytes to a string slice.</p>\n<p>A string slice (<a href=\"../primitive.str.html\" title=\"primitive str\"><code>&amp;str</code></a>) is made of bytes (<a href=\"../primitive.u8.html\" title=\"primitive u8\"><code>u8</code></a>), and a byte slice\n(<a href=\"../primitive.slice.html\" title=\"primitive slice\"><code>&amp;[u8]</code></a>) is made of bytes, so this function converts between\nthe two. Not all byte slices are valid string slices, however: <a href=\"../primitive.str.html\" title=\"primitive str\"><code>&amp;str</code></a> requires\nthat it is valid UTF-8. <code>from_utf8()</code> checks to ensure that the bytes are valid\nUTF-8, and then does the conversion.</p>\n<p>If you are sure that the byte slice is valid UTF-8, and you don‚Äôt want to\nincur the overhead of the validity check, there is an unsafe version of\nthis function, <a href=\"fn.from_utf8_unchecked.html\" title=\"fn std::str::from_utf8_unchecked\"><code>from_utf8_unchecked</code></a>, which has the same\nbehavior but skips the check.</p>\n<p>If you need a <code>String</code> instead of a <code>&amp;str</code>, consider\n<a href=\"../../std/string/struct.String.html#method.from_utf8\"><code>String::from_utf8</code></a>.</p>\n<p>Because you can stack-allocate a <code>[u8; N]</code>, and you can take a\n<a href=\"../primitive.slice.html\" title=\"primitive slice\"><code>&amp;[u8]</code></a> of it, this function is one way to have a\nstack-allocated string. There is an example of this in the\nexamples section below.</p>\n<h2 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">¬ß</a>Errors</h2>\n<p>Returns <code>Err</code> if the slice is not UTF-8 with a description as to why the\nprovided slice is not UTF-8.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">¬ß</a>Examples</h2>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::str;\n\n<span class=\"comment\">// some bytes, in a vector\n</span><span class=\"kw\">let </span>sparkle_heart = <span class=\"macro\">vec!</span>[<span class=\"number\">240</span>, <span class=\"number\">159</span>, <span class=\"number\">146</span>, <span class=\"number\">150</span>];\n\n<span class=\"comment\">// We know these bytes are valid, so just use `unwrap()`.\n</span><span class=\"kw\">let </span>sparkle_heart = str::from_utf8(<span class=\"kw-2\">&amp;</span>sparkle_heart).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"üíñ\"</span>, sparkle_heart);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::str;%0A++++%0A++++//+some+bytes,+in+a+vector%0A++++let+sparkle_heart+=+vec!%5B240,+159,+146,+150%5D;%0A++++%0A++++//+We+know+these+bytes+are+valid,+so+just+use+%60unwrap()%60.%0A++++let+sparkle_heart+=+str::from_utf8(%26sparkle_heart).unwrap();%0A++++%0A++++assert_eq!(%22%F0%9F%92%96%22,+sparkle_heart);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Incorrect bytes:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::str;\n\n<span class=\"comment\">// some invalid bytes, in a vector\n</span><span class=\"kw\">let </span>sparkle_heart = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">159</span>, <span class=\"number\">146</span>, <span class=\"number\">150</span>];\n\n<span class=\"macro\">assert!</span>(str::from_utf8(<span class=\"kw-2\">&amp;</span>sparkle_heart).is_err());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::str;%0A++++%0A++++//+some+invalid+bytes,+in+a+vector%0A++++let+sparkle_heart+=+vec!%5B0,+159,+146,+150%5D;%0A++++%0A++++assert!(str::from_utf8(%26sparkle_heart).is_err());%0A%7D&amp;edition=2021\">Run</a></div>\n<p>See the docs for <a href=\"struct.Utf8Error.html\" title=\"struct std::str::Utf8Error\"><code>Utf8Error</code></a> for more details on the kinds of\nerrors that can be returned.</p>\n<p>A ‚Äústack allocated string‚Äù:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::str;\n\n<span class=\"comment\">// some bytes, in a stack-allocated array\n</span><span class=\"kw\">let </span>sparkle_heart = [<span class=\"number\">240</span>, <span class=\"number\">159</span>, <span class=\"number\">146</span>, <span class=\"number\">150</span>];\n\n<span class=\"comment\">// We know these bytes are valid, so just use `unwrap()`.\n</span><span class=\"kw\">let </span>sparkle_heart: <span class=\"kw-2\">&amp;</span>str = str::from_utf8(<span class=\"kw-2\">&amp;</span>sparkle_heart).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"üíñ\"</span>, sparkle_heart);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::str;%0A++++%0A++++//+some+bytes,+in+a+stack-allocated+array%0A++++let+sparkle_heart+=+%5B240,+159,+146,+150%5D;%0A++++%0A++++//+We+know+these+bytes+are+valid,+so+just+use+%60unwrap()%60.%0A++++let+sparkle_heart:+%26str+=+str::from_utf8(%26sparkle_heart).unwrap();%0A++++%0A++++assert_eq!(%22%F0%9F%92%96%22,+sparkle_heart);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:12:02.162Z"
}