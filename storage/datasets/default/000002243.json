{
	"title": "unreachable_unchecked in std::hint - Rust",
	"url": "https://doc.rust-lang.org/stable/std/hint/fn.unreachable_unchecked.html",
	"markdown": "# unreachable\\_unchecked in std::hint - Rust\n\n## Function [std](../index.html)::[hint](index.html)::[unreachable\\_unchecked](#)\n\n1.27.0 (const: 1.57.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/hint.rs.html#101) ·\n\n```\npub const unsafe fn unreachable_unchecked() -> !\n```\n\nExpand description\n\nInforms the compiler that the site which is calling this function is not reachable, possibly enabling further optimizations.\n\n## [§](#safety)Safety\n\nReaching this function is _Undefined Behavior_.\n\nAs the compiler assumes that all forms of Undefined Behavior can never happen, it will eliminate all branches in the surrounding code that it can determine will invariably lead to a call to `unreachable_unchecked()`.\n\nIf the assumptions embedded in using this function turn out to be wrong - that is, if the site which is calling `unreachable_unchecked()` is actually reachable at runtime - the compiler may have generated nonsensical machine instructions for this situation, including in seemingly unrelated code, causing difficult-to-debug problems.\n\nUse this function sparingly. Consider using the [`unreachable!`](../macro.unreachable.html \"macro std::unreachable\") macro, which may prevent some optimizations but will safely panic in case it is actually reached at runtime. Benchmark your code to find out if using `unreachable_unchecked()` comes with a performance benefit.\n\n## [§](#examples)Examples\n\n`unreachable_unchecked()` can be used in situations where the compiler can’t prove invariants that were previously established. Such situations have a higher chance of occurring if those invariants are upheld by external code that the compiler can’t analyze.\n\n```\nfn prepare_inputs(divisors: &mut Vec<u32>) {\n    // Note to future-self when making changes: The invariant established\n    // here is NOT checked in `do_computation()`; if this changes, you HAVE\n    // to change `do_computation()`.\n    divisors.retain(|divisor| *divisor != 0)\n}\n\n/// # Safety\n/// All elements of `divisor` must be non-zero.\nunsafe fn do_computation(i: u32, divisors: &[u32]) -> u32 {\n    divisors.iter().fold(i, |acc, divisor| {\n        // Convince the compiler that a division by zero can't happen here\n        // and a check is not needed below.\n        if *divisor == 0 {\n            // Safety: `divisor` can't be zero because of `prepare_inputs`,\n            // but the compiler does not know about this. We *promise*\n            // that we always call `prepare_inputs`.\n            std::hint::unreachable_unchecked()\n        }\n        // The compiler would normally introduce a check here that prevents\n        // a division by zero. However, if `divisor` was zero, the branch\n        // above would reach what we explicitly marked as unreachable.\n        // The compiler concludes that `divisor` can't be zero at this point\n        // and removes the - now proven useless - check.\n        acc / divisor\n    })\n}\n\nlet mut divisors = vec![2, 0, 4];\nprepare_inputs(&mut divisors);\nlet result = unsafe {\n    // Safety: prepare_inputs() guarantees that divisors is non-zero\n    do_computation(100, &divisors)\n};\nassert_eq!(result, 12);\n\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++fn+prepare_inputs(divisors:+%26mut+Vec%3Cu32%3E)+%7B%0A++++++++//+Note+to+future-self+when+making+changes:+The+invariant+established%0A++++++++//+here+is+NOT+checked+in+%60do_computation()%60;+if+this+changes,+you+HAVE%0A++++++++//+to+change+%60do_computation()%60.%0A++++++++divisors.retain(%7Cdivisor%7C+*divisor+!=+0)%0A++++%7D%0A++++%0A++++///+%23+Safety%0A++++///+All+elements+of+%60divisor%60+must+be+non-zero.%0A++++unsafe+fn+do_computation(i:+u32,+divisors:+%26%5Bu32%5D)+-%3E+u32+%7B%0A++++++++divisors.iter().fold(i,+%7Cacc,+divisor%7C+%7B%0A++++++++++++//+Convince+the+compiler+that+a+division+by+zero+can%27t+happen+here%0A++++++++++++//+and+a+check+is+not+needed+below.%0A++++++++++++if+*divisor+==+0+%7B%0A++++++++++++++++//+Safety:+%60divisor%60+can%27t+be+zero+because+of+%60prepare_inputs%60,%0A++++++++++++++++//+but+the+compiler+does+not+know+about+this.+We+*promise*%0A++++++++++++++++//+that+we+always+call+%60prepare_inputs%60.%0A++++++++++++++++std::hint::unreachable_unchecked()%0A++++++++++++%7D%0A++++++++++++//+The+compiler+would+normally+introduce+a+check+here+that+prevents%0A++++++++++++//+a+division+by+zero.+However,+if+%60divisor%60+was+zero,+the+branch%0A++++++++++++//+above+would+reach+what+we+explicitly+marked+as+unreachable.%0A++++++++++++//+The+compiler+concludes+that+%60divisor%60+can%27t+be+zero+at+this+point%0A++++++++++++//+and+removes+the+-+now+proven+useless+-+check.%0A++++++++++++acc+/+divisor%0A++++++++%7D)%0A++++%7D%0A++++%0A++++let+mut+divisors+=+vec!%5B2,+0,+4%5D;%0A++++prepare_inputs(%26mut+divisors);%0A++++let+result+=+unsafe+%7B%0A++++++++//+Safety:+prepare_inputs()+guarantees+that+divisors+is+non-zero%0A++++++++do_computation(100,+%26divisors)%0A++++%7D;%0A++++assert_eq!(result,+12);%0A%7D&edition=2021)\n\nWhile using `unreachable_unchecked()` is perfectly sound in the following example, as the compiler is able to prove that a division by zero is not possible, benchmarking reveals that `unreachable_unchecked()` provides no benefit over using [`unreachable!`](../macro.unreachable.html \"macro std::unreachable\"), while the latter does not introduce the possibility of Undefined Behavior.\n\n```\nfn div_1(a: u32, b: u32) -> u32 {\n    use std::hint::unreachable_unchecked;\n\n    // `b.saturating_add(1)` is always positive (not zero),\n    // hence `checked_div` will never return `None`.\n    // Therefore, the else branch is unreachable.\n    a.checked_div(b.saturating_add(1))\n        .unwrap_or_else(|| unsafe { unreachable_unchecked() })\n}\n\nassert_eq!(div_1(7, 0), 7);\nassert_eq!(div_1(9, 1), 4);\nassert_eq!(div_1(11, u32::MAX), 0);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++fn+div_1(a:+u32,+b:+u32)+-%3E+u32+%7B%0A++++++++use+std::hint::unreachable_unchecked;%0A++++%0A++++++++//+%60b.saturating_add(1)%60+is+always+positive+(not+zero),%0A++++++++//+hence+%60checked_div%60+will+never+return+%60None%60.%0A++++++++//+Therefore,+the+else+branch+is+unreachable.%0A++++++++a.checked_div(b.saturating_add(1))%0A++++++++++++.unwrap_or_else(%7C%7C+unsafe+%7B+unreachable_unchecked()+%7D)%0A++++%7D%0A++++%0A++++assert_eq!(div_1(7,+0),+7);%0A++++assert_eq!(div_1(9,+1),+4);%0A++++assert_eq!(div_1(11,+u32::MAX),+0);%0A%7D&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Informs the compiler that the site which is calling this function is not reachable, possibly enabling further optimizations.\"><title>unreachable_unchecked in std::hint - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc fn\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h2><a href=\"index.html\">In std::hint</a></h2><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.assert_unchecked.html\">assert_unchecked</a></li><li><a href=\"fn.black_box.html\">black_box</a></li><li><a href=\"fn.must_use.html\">must_use</a></li><li><a href=\"fn.spin_loop.html\">spin_loop</a></li><li><a href=\"fn.unreachable_unchecked.html\">unreachable_unchecked</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Function <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">hint</a>::<wbr><a class=\"fn\" href=\"#\">unreachable_unchecked</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.27.0, const since 1.57.0\">1.27.0 (const: 1.57.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hint.rs.html#101\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub const unsafe fn unreachable_unchecked() -&gt; <a class=\"primitive\" href=\"../primitive.never.html\">!</a></code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Informs the compiler that the site which is calling this function is not\nreachable, possibly enabling further optimizations.</p>\n<h2 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h2>\n<p>Reaching this function is <em>Undefined Behavior</em>.</p>\n<p>As the compiler assumes that all forms of Undefined Behavior can never\nhappen, it will eliminate all branches in the surrounding code that it can\ndetermine will invariably lead to a call to <code>unreachable_unchecked()</code>.</p>\n<p>If the assumptions embedded in using this function turn out to be wrong -\nthat is, if the site which is calling <code>unreachable_unchecked()</code> is actually\nreachable at runtime - the compiler may have generated nonsensical machine\ninstructions for this situation, including in seemingly unrelated code,\ncausing difficult-to-debug problems.</p>\n<p>Use this function sparingly. Consider using the <a href=\"../macro.unreachable.html\" title=\"macro std::unreachable\"><code>unreachable!</code></a> macro,\nwhich may prevent some optimizations but will safely panic in case it is\nactually reached at runtime. Benchmark your code to find out if using\n<code>unreachable_unchecked()</code> comes with a performance benefit.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<p><code>unreachable_unchecked()</code> can be used in situations where the compiler\ncan’t prove invariants that were previously established. Such situations\nhave a higher chance of occurring if those invariants are upheld by\nexternal code that the compiler can’t analyze.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>prepare_inputs(divisors: <span class=\"kw-2\">&amp;mut </span>Vec&lt;u32&gt;) {\n    <span class=\"comment\">// Note to future-self when making changes: The invariant established\n    // here is NOT checked in `do_computation()`; if this changes, you HAVE\n    // to change `do_computation()`.\n    </span>divisors.retain(|divisor| <span class=\"kw-2\">*</span>divisor != <span class=\"number\">0</span>)\n}\n\n<span class=\"doccomment\">/// # Safety\n/// All elements of `divisor` must be non-zero.\n</span><span class=\"kw\">unsafe fn </span>do_computation(i: u32, divisors: <span class=\"kw-2\">&amp;</span>[u32]) -&gt; u32 {\n    divisors.iter().fold(i, |acc, divisor| {\n        <span class=\"comment\">// Convince the compiler that a division by zero can't happen here\n        // and a check is not needed below.\n        </span><span class=\"kw\">if </span><span class=\"kw-2\">*</span>divisor == <span class=\"number\">0 </span>{\n            <span class=\"comment\">// Safety: `divisor` can't be zero because of `prepare_inputs`,\n            // but the compiler does not know about this. We *promise*\n            // that we always call `prepare_inputs`.\n            </span>std::hint::unreachable_unchecked()\n        }\n        <span class=\"comment\">// The compiler would normally introduce a check here that prevents\n        // a division by zero. However, if `divisor` was zero, the branch\n        // above would reach what we explicitly marked as unreachable.\n        // The compiler concludes that `divisor` can't be zero at this point\n        // and removes the - now proven useless - check.\n        </span>acc / divisor\n    })\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>divisors = <span class=\"macro\">vec!</span>[<span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>];\nprepare_inputs(<span class=\"kw-2\">&amp;mut </span>divisors);\n<span class=\"kw\">let </span>result = <span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// Safety: prepare_inputs() guarantees that divisors is non-zero\n    </span>do_computation(<span class=\"number\">100</span>, <span class=\"kw-2\">&amp;</span>divisors)\n};\n<span class=\"macro\">assert_eq!</span>(result, <span class=\"number\">12</span>);\n</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++fn+prepare_inputs(divisors:+%26mut+Vec%3Cu32%3E)+%7B%0A++++++++//+Note+to+future-self+when+making+changes:+The+invariant+established%0A++++++++//+here+is+NOT+checked+in+%60do_computation()%60;+if+this+changes,+you+HAVE%0A++++++++//+to+change+%60do_computation()%60.%0A++++++++divisors.retain(%7Cdivisor%7C+*divisor+!=+0)%0A++++%7D%0A++++%0A++++///+%23+Safety%0A++++///+All+elements+of+%60divisor%60+must+be+non-zero.%0A++++unsafe+fn+do_computation(i:+u32,+divisors:+%26%5Bu32%5D)+-%3E+u32+%7B%0A++++++++divisors.iter().fold(i,+%7Cacc,+divisor%7C+%7B%0A++++++++++++//+Convince+the+compiler+that+a+division+by+zero+can't+happen+here%0A++++++++++++//+and+a+check+is+not+needed+below.%0A++++++++++++if+*divisor+==+0+%7B%0A++++++++++++++++//+Safety:+%60divisor%60+can't+be+zero+because+of+%60prepare_inputs%60,%0A++++++++++++++++//+but+the+compiler+does+not+know+about+this.+We+*promise*%0A++++++++++++++++//+that+we+always+call+%60prepare_inputs%60.%0A++++++++++++++++std::hint::unreachable_unchecked()%0A++++++++++++%7D%0A++++++++++++//+The+compiler+would+normally+introduce+a+check+here+that+prevents%0A++++++++++++//+a+division+by+zero.+However,+if+%60divisor%60+was+zero,+the+branch%0A++++++++++++//+above+would+reach+what+we+explicitly+marked+as+unreachable.%0A++++++++++++//+The+compiler+concludes+that+%60divisor%60+can't+be+zero+at+this+point%0A++++++++++++//+and+removes+the+-+now+proven+useless+-+check.%0A++++++++++++acc+/+divisor%0A++++++++%7D)%0A++++%7D%0A++++%0A++++let+mut+divisors+=+vec!%5B2,+0,+4%5D;%0A++++prepare_inputs(%26mut+divisors);%0A++++let+result+=+unsafe+%7B%0A++++++++//+Safety:+prepare_inputs()+guarantees+that+divisors+is+non-zero%0A++++++++do_computation(100,+%26divisors)%0A++++%7D;%0A++++assert_eq!(result,+12);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>While using <code>unreachable_unchecked()</code> is perfectly sound in the following\nexample, as the compiler is able to prove that a division by zero is not\npossible, benchmarking reveals that <code>unreachable_unchecked()</code> provides\nno benefit over using <a href=\"../macro.unreachable.html\" title=\"macro std::unreachable\"><code>unreachable!</code></a>, while the latter does not introduce\nthe possibility of Undefined Behavior.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>div_1(a: u32, b: u32) -&gt; u32 {\n    <span class=\"kw\">use </span>std::hint::unreachable_unchecked;\n\n    <span class=\"comment\">// `b.saturating_add(1)` is always positive (not zero),\n    // hence `checked_div` will never return `None`.\n    // Therefore, the else branch is unreachable.\n    </span>a.checked_div(b.saturating_add(<span class=\"number\">1</span>))\n        .unwrap_or_else(|| <span class=\"kw\">unsafe </span>{ unreachable_unchecked() })\n}\n\n<span class=\"macro\">assert_eq!</span>(div_1(<span class=\"number\">7</span>, <span class=\"number\">0</span>), <span class=\"number\">7</span>);\n<span class=\"macro\">assert_eq!</span>(div_1(<span class=\"number\">9</span>, <span class=\"number\">1</span>), <span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(div_1(<span class=\"number\">11</span>, u32::MAX), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++fn+div_1(a:+u32,+b:+u32)+-%3E+u32+%7B%0A++++++++use+std::hint::unreachable_unchecked;%0A++++%0A++++++++//+%60b.saturating_add(1)%60+is+always+positive+(not+zero),%0A++++++++//+hence+%60checked_div%60+will+never+return+%60None%60.%0A++++++++//+Therefore,+the+else+branch+is+unreachable.%0A++++++++a.checked_div(b.saturating_add(1))%0A++++++++++++.unwrap_or_else(%7C%7C+unsafe+%7B+unreachable_unchecked()+%7D)%0A++++%7D%0A++++%0A++++assert_eq!(div_1(7,+0),+7);%0A++++assert_eq!(div_1(9,+1),+4);%0A++++assert_eq!(div_1(11,+u32::MAX),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:23:18.023Z"
}