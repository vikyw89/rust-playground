{
	"title": "std::prelude - Rust",
	"url": "https://doc.rust-lang.org/std/prelude/index.html",
	"markdown": "# std::prelude - Rust\n\n## Module [std](../index.html)::[prelude](#)\n\n1.0.0 · [source](about:blank/src/std/prelude/mod.rs.html#1-166) ·\n\nExpand description\n\nRust comes with a variety of things in its standard library. However, if you had to manually import every single thing that you used, it would be very verbose. But importing a lot of things that a program never uses isn’t good either. A balance needs to be struck.\n\nThe _prelude_ is the list of things that Rust automatically imports into every Rust program. It’s kept as small as possible, and is focused on things, particularly traits, which are used in almost every single Rust program.\n\n## [§](#other-preludes)Other preludes\n\nPreludes can be seen as a pattern to make using multiple types more convenient. As such, you’ll find other preludes in the standard library, such as [`std::io::prelude`](../io/prelude/index.html \"mod std::io::prelude\"). Various libraries in the Rust ecosystem may also define their own preludes.\n\nThe difference between ‘the prelude’ and these other preludes is that they are not automatically `use`’d, and must be imported manually. This is still easier than importing all of their constituent components.\n\n## [§](#prelude-contents)Prelude contents\n\nThe first version of the prelude is used in Rust 2015 and Rust 2018, and lives in [`std::prelude::v1`](v1/index.html \"mod std::prelude::v1\"). [`std::prelude::rust_2015`](rust_2015/index.html \"mod std::prelude::rust_2015\") and [`std::prelude::rust_2018`](rust_2018/index.html \"mod std::prelude::rust_2018\") re-export this prelude. It re-exports the following:\n\n-   `[std::marker](../marker/index.html \"mod std::marker\")::{[Copy](../marker/trait.Copy.html \"trait std::marker::Copy\"), [Send](../marker/trait.Send.html \"trait std::marker::Send\"), [Sized](../marker/trait.Sized.html \"trait std::marker::Sized\"), [Sync](../marker/trait.Sync.html \"trait std::marker::Sync\"), [Unpin](../marker/trait.Unpin.html \"trait std::marker::Unpin\")}`, marker traits that indicate fundamental properties of types.\n-   `[std::ops](../ops/index.html \"mod std::ops\")::{[Drop](../ops/trait.Drop.html \"trait std::ops::Drop\"), [Fn](../ops/trait.Fn.html \"trait std::ops::Fn\"), [FnMut](../ops/trait.FnMut.html \"trait std::ops::FnMut\"), [FnOnce](../ops/trait.FnOnce.html \"trait std::ops::FnOnce\")}`, various operations for both destructors and overloading `()`.\n-   `[std::mem](../mem/index.html \"mod std::mem\")::[drop](../mem/fn.drop.html \"fn std::mem::drop\")`, a convenience function for explicitly dropping a value.\n-   `[std::mem](../mem/index.html \"mod std::mem\")::{[size_of](../mem/fn.size_of.html \"fn std::mem::size_of\"), [size_of_val](../mem/fn.size_of_val.html \"fn std::mem::size_of_val\")}`, to get the size of a type or value.\n-   `[std::mem](../mem/index.html \"mod std::mem\")::{[align_of](../mem/fn.align_of.html \"fn std::mem::align_of\"), [align_of_val](../mem/fn.align_of_val.html \"fn std::mem::align_of_val\")}`, to get the alignment of a type or value.\n-   `[std::boxed](../boxed/index.html \"mod std::boxed\")::[Box](../boxed/struct.Box.html \"struct std::boxed::Box\")`, a way to allocate values on the heap.\n-   `[std::borrow](../borrow/index.html \"mod std::borrow\")::[ToOwned](../borrow/trait.ToOwned.html \"trait std::borrow::ToOwned\")`, the conversion trait that defines [`to_owned`](about:blank/borrow/trait.ToOwned.html#tymethod.to_owned \"method std::borrow::ToOwned::to_owned\"), the generic method for creating an owned type from a borrowed type.\n-   `[std::clone](../clone/index.html \"mod std::clone\")::[Clone](../clone/trait.Clone.html \"trait std::clone::Clone\")`, the ubiquitous trait that defines [`clone`](about:blank/clone/trait.Clone.html#tymethod.clone \"method std::clone::Clone::clone\"), the method for producing a copy of a value.\n-   `[std::cmp](../cmp/index.html \"mod std::cmp\")::{[PartialEq](../cmp/trait.PartialEq.html \"trait std::cmp::PartialEq\"), [PartialOrd](../cmp/trait.PartialOrd.html \"trait std::cmp::PartialOrd\"), [Eq](../cmp/trait.Eq.html \"trait std::cmp::Eq\"), [Ord](../cmp/trait.Ord.html \"trait std::cmp::Ord\")}`, the comparison traits, which implement the comparison operators and are often seen in trait bounds.\n-   `[std::convert](../convert/index.html \"mod std::convert\")::{[AsRef](../convert/trait.AsRef.html \"trait std::convert::AsRef\"), [AsMut](../convert/trait.AsMut.html \"trait std::convert::AsMut\"), [Into](../convert/trait.Into.html \"trait std::convert::Into\"), [From](../convert/trait.From.html \"trait std::convert::From\")}`, generic conversions, used by savvy API authors to create overloaded methods.\n-   `[std::default](../default/index.html \"mod std::default\")::[Default](../default/trait.Default.html \"trait std::default::Default\")`, types that have default values.\n-   `[std::iter](../iter/index.html \"mod std::iter\")::{[Iterator](../iter/trait.Iterator.html \"trait std::iter::Iterator\"), [Extend](../iter/trait.Extend.html \"trait std::iter::Extend\"), [IntoIterator](../iter/trait.IntoIterator.html \"trait std::iter::IntoIterator\"), [DoubleEndedIterator](../iter/trait.DoubleEndedIterator.html \"trait std::iter::DoubleEndedIterator\"), [ExactSizeIterator](../iter/trait.ExactSizeIterator.html \"trait std::iter::ExactSizeIterator\")}`, iterators of various kinds.\n-   `[std::option](../option/index.html \"mod std::option\")::[Option](../option/enum.Option.html \"enum std::option::Option\")::{[self](../option/enum.Option.html \"enum std::option::Option\"), [Some](about:blank/option/enum.Option.html#variant.Some \"variant std::option::Option::Some\"), [None](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\")}`, a type which expresses the presence or absence of a value. This type is so commonly used, its variants are also exported.\n-   `[std::result](../result/index.html \"mod std::result\")::[Result](../result/enum.Result.html \"enum std::result::Result\")::{[self](../result/enum.Result.html \"enum std::result::Result\"), [Ok](about:blank/result/enum.Result.html#variant.Ok \"variant std::result::Result::Ok\"), [Err](about:blank/result/enum.Result.html#variant.Err \"variant std::result::Result::Err\")}`, a type for functions that may succeed or fail. Like [`Option`](../option/enum.Option.html \"enum std::option::Option\"), its variants are exported as well.\n-   `[std::string](../string/index.html \"mod std::string\")::{[String](../string/struct.String.html \"struct std::string::String\"), [ToString](../string/trait.ToString.html \"trait std::string::ToString\")}`, heap-allocated strings.\n-   `[std::vec](../vec/index.html \"mod std::vec\")::[Vec](../vec/struct.Vec.html \"struct std::vec::Vec\")`, a growable, heap-allocated vector.\n\nThe prelude used in Rust 2021, [`std::prelude::rust_2021`](rust_2021/index.html \"mod std::prelude::rust_2021\"), includes all of the above, and in addition re-exports:\n\n-   `[std::convert](../convert/index.html \"mod std::convert\")::{[TryFrom](../convert/trait.TryFrom.html \"trait std::convert::TryFrom\"), [TryInto](../convert/trait.TryInto.html \"trait std::convert::TryInto\")}`,\n-   `[std::iter](../iter/index.html \"mod std::iter\")::[FromIterator](../iter/trait.FromIterator.html \"trait std::iter::FromIterator\")`.\n\n-   The 2015 version of the prelude of The Rust Standard Library.\n    \n-   The 2018 version of the prelude of The Rust Standard Library.\n    \n-   The 2021 version of the prelude of The Rust Standard Library.\n    \n-   The first version of the prelude of The Rust Standard Library.\n    \n-   The 2024 version of the prelude of The Rust Standard Library.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"The Rust Prelude\"><title>std::prelude - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"../sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc mod\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Module prelude</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Module prelude</a></h2><div class=\"sidebar-elems\"><section><ul class=\"block\"><li><a href=\"#modules\">Modules</a></li></ul></section><h2><a href=\"../index.html\">In crate std</a></h2><h3><a href=\"../index.html#primitives\">Primitive Types</a></h3><ul class=\"block primitive\"><li><a href=\"../primitive.array.html\">array</a></li><li><a href=\"../primitive.bool.html\">bool</a></li><li><a href=\"../primitive.char.html\">char</a></li><li><a href=\"../primitive.f128.html\">f128</a></li><li><a href=\"../primitive.f16.html\">f16</a></li><li><a href=\"../primitive.f32.html\">f32</a></li><li><a href=\"../primitive.f64.html\">f64</a></li><li><a href=\"../primitive.fn.html\">fn</a></li><li><a href=\"../primitive.i128.html\">i128</a></li><li><a href=\"../primitive.i16.html\">i16</a></li><li><a href=\"../primitive.i32.html\">i32</a></li><li><a href=\"../primitive.i64.html\">i64</a></li><li><a href=\"../primitive.i8.html\">i8</a></li><li><a href=\"../primitive.isize.html\">isize</a></li><li><a href=\"../primitive.never.html\">never</a></li><li><a href=\"../primitive.pointer.html\">pointer</a></li><li><a href=\"../primitive.reference.html\">reference</a></li><li><a href=\"../primitive.slice.html\">slice</a></li><li><a href=\"../primitive.str.html\">str</a></li><li><a href=\"../primitive.tuple.html\">tuple</a></li><li><a href=\"../primitive.u128.html\">u128</a></li><li><a href=\"../primitive.u16.html\">u16</a></li><li><a href=\"../primitive.u32.html\">u32</a></li><li><a href=\"../primitive.u64.html\">u64</a></li><li><a href=\"../primitive.u8.html\">u8</a></li><li><a href=\"../primitive.unit.html\">unit</a></li><li><a href=\"../primitive.usize.html\">usize</a></li></ul><h3><a href=\"../index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"../alloc/index.html\">alloc</a></li><li><a href=\"../any/index.html\">any</a></li><li><a href=\"../arch/index.html\">arch</a></li><li><a href=\"../array/index.html\">array</a></li><li><a href=\"../ascii/index.html\">ascii</a></li><li><a href=\"../assert_matches/index.html\">assert_matches</a></li><li><a href=\"../async_iter/index.html\">async_iter</a></li><li><a href=\"../backtrace/index.html\">backtrace</a></li><li><a href=\"../borrow/index.html\">borrow</a></li><li><a href=\"../boxed/index.html\">boxed</a></li><li><a href=\"../cell/index.html\">cell</a></li><li><a href=\"../char/index.html\">char</a></li><li><a href=\"../clone/index.html\">clone</a></li><li><a href=\"../cmp/index.html\">cmp</a></li><li><a href=\"../collections/index.html\">collections</a></li><li><a href=\"../convert/index.html\">convert</a></li><li><a href=\"../default/index.html\">default</a></li><li><a href=\"../env/index.html\">env</a></li><li><a href=\"../error/index.html\">error</a></li><li><a href=\"../f128/index.html\">f128</a></li><li><a href=\"../f16/index.html\">f16</a></li><li><a href=\"../f32/index.html\">f32</a></li><li><a href=\"../f64/index.html\">f64</a></li><li><a href=\"../ffi/index.html\">ffi</a></li><li><a href=\"../fmt/index.html\">fmt</a></li><li><a href=\"../fs/index.html\">fs</a></li><li><a href=\"../future/index.html\">future</a></li><li><a href=\"../hash/index.html\">hash</a></li><li><a href=\"../hint/index.html\">hint</a></li><li><a href=\"../i128/index.html\">i128</a></li><li><a href=\"../i16/index.html\">i16</a></li><li><a href=\"../i32/index.html\">i32</a></li><li><a href=\"../i64/index.html\">i64</a></li><li><a href=\"../i8/index.html\">i8</a></li><li><a href=\"../intrinsics/index.html\">intrinsics</a></li><li><a href=\"../io/index.html\">io</a></li><li><a href=\"../isize/index.html\">isize</a></li><li><a href=\"../iter/index.html\">iter</a></li><li><a href=\"../marker/index.html\">marker</a></li><li><a href=\"../mem/index.html\">mem</a></li><li><a href=\"../net/index.html\">net</a></li><li><a href=\"../num/index.html\">num</a></li><li><a href=\"../ops/index.html\">ops</a></li><li><a href=\"../option/index.html\">option</a></li><li><a href=\"../os/index.html\">os</a></li><li><a href=\"../panic/index.html\">panic</a></li><li><a href=\"../pat/index.html\">pat</a></li><li><a href=\"../path/index.html\">path</a></li><li><a href=\"../pin/index.html\">pin</a></li><li><a href=\"../prelude/index.html\">prelude</a></li><li><a href=\"../primitive/index.html\">primitive</a></li><li><a href=\"../process/index.html\">process</a></li><li><a href=\"../ptr/index.html\">ptr</a></li><li><a href=\"../rc/index.html\">rc</a></li><li><a href=\"../result/index.html\">result</a></li><li><a href=\"../simd/index.html\">simd</a></li><li><a href=\"../slice/index.html\">slice</a></li><li><a href=\"../str/index.html\">str</a></li><li><a href=\"../string/index.html\">string</a></li><li><a href=\"../sync/index.html\">sync</a></li><li><a href=\"../task/index.html\">task</a></li><li><a href=\"../thread/index.html\">thread</a></li><li><a href=\"../time/index.html\">time</a></li><li><a href=\"../u128/index.html\">u128</a></li><li><a href=\"../u16/index.html\">u16</a></li><li><a href=\"../u32/index.html\">u32</a></li><li><a href=\"../u64/index.html\">u64</a></li><li><a href=\"../u8/index.html\">u8</a></li><li><a href=\"../usize/index.html\">usize</a></li><li><a href=\"../vec/index.html\">vec</a></li></ul><h3><a href=\"../index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"../macro.assert.html\">assert</a></li><li><a href=\"../macro.assert_eq.html\">assert_eq</a></li><li><a href=\"../macro.assert_ne.html\">assert_ne</a></li><li><a href=\"../macro.cfg.html\">cfg</a></li><li><a href=\"../macro.cfg_match.html\">cfg_match</a></li><li><a href=\"../macro.column.html\">column</a></li><li><a href=\"../macro.compile_error.html\">compile_error</a></li><li><a href=\"../macro.concat.html\">concat</a></li><li><a href=\"../macro.concat_bytes.html\">concat_bytes</a></li><li><a href=\"../macro.concat_idents.html\">concat_idents</a></li><li><a href=\"../macro.const_format_args.html\">const_format_args</a></li><li><a href=\"../macro.dbg.html\">dbg</a></li><li><a href=\"../macro.debug_assert.html\">debug_assert</a></li><li><a href=\"../macro.debug_assert_eq.html\">debug_assert_eq</a></li><li><a href=\"../macro.debug_assert_ne.html\">debug_assert_ne</a></li><li><a href=\"../macro.env.html\">env</a></li><li><a href=\"../macro.eprint.html\">eprint</a></li><li><a href=\"../macro.eprintln.html\">eprintln</a></li><li><a href=\"../macro.file.html\">file</a></li><li><a href=\"../macro.format.html\">format</a></li><li><a href=\"../macro.format_args.html\">format_args</a></li><li><a href=\"../macro.format_args_nl.html\">format_args_nl</a></li><li><a href=\"../macro.include.html\">include</a></li><li><a href=\"../macro.include_bytes.html\">include_bytes</a></li><li><a href=\"../macro.include_str.html\">include_str</a></li><li><a href=\"../macro.is_x86_feature_detected.html\">is_x86_feature_detected</a></li><li><a href=\"../macro.line.html\">line</a></li><li><a href=\"../macro.log_syntax.html\">log_syntax</a></li><li><a href=\"../macro.matches.html\">matches</a></li><li><a href=\"../macro.module_path.html\">module_path</a></li><li><a href=\"../macro.option_env.html\">option_env</a></li><li><a href=\"../macro.panic.html\">panic</a></li><li><a href=\"../macro.print.html\">print</a></li><li><a href=\"../macro.println.html\">println</a></li><li><a href=\"../macro.stringify.html\">stringify</a></li><li><a href=\"../macro.thread_local.html\">thread_local</a></li><li><a href=\"../macro.todo.html\">todo</a></li><li><a href=\"../macro.trace_macros.html\">trace_macros</a></li><li><a href=\"../macro.try.html\">try</a></li><li><a href=\"../macro.unimplemented.html\">unimplemented</a></li><li><a href=\"../macro.unreachable.html\">unreachable</a></li><li><a href=\"../macro.vec.html\">vec</a></li><li><a href=\"../macro.write.html\">write</a></li><li><a href=\"../macro.writeln.html\">writeln</a></li></ul><h3><a href=\"../index.html#keywords\">Keywords</a></h3><ul class=\"block keyword\"><li><a href=\"../keyword.SelfTy.html\">SelfTy</a></li><li><a href=\"../keyword.as.html\">as</a></li><li><a href=\"../keyword.async.html\">async</a></li><li><a href=\"../keyword.await.html\">await</a></li><li><a href=\"../keyword.break.html\">break</a></li><li><a href=\"../keyword.const.html\">const</a></li><li><a href=\"../keyword.continue.html\">continue</a></li><li><a href=\"../keyword.crate.html\">crate</a></li><li><a href=\"../keyword.dyn.html\">dyn</a></li><li><a href=\"../keyword.else.html\">else</a></li><li><a href=\"../keyword.enum.html\">enum</a></li><li><a href=\"../keyword.extern.html\">extern</a></li><li><a href=\"../keyword.false.html\">false</a></li><li><a href=\"../keyword.fn.html\">fn</a></li><li><a href=\"../keyword.for.html\">for</a></li><li><a href=\"../keyword.if.html\">if</a></li><li><a href=\"../keyword.impl.html\">impl</a></li><li><a href=\"../keyword.in.html\">in</a></li><li><a href=\"../keyword.let.html\">let</a></li><li><a href=\"../keyword.loop.html\">loop</a></li><li><a href=\"../keyword.match.html\">match</a></li><li><a href=\"../keyword.mod.html\">mod</a></li><li><a href=\"../keyword.move.html\">move</a></li><li><a href=\"../keyword.mut.html\">mut</a></li><li><a href=\"../keyword.pub.html\">pub</a></li><li><a href=\"../keyword.ref.html\">ref</a></li><li><a href=\"../keyword.return.html\">return</a></li><li><a href=\"../keyword.self.html\">self</a></li><li><a href=\"../keyword.static.html\">static</a></li><li><a href=\"../keyword.struct.html\">struct</a></li><li><a href=\"../keyword.super.html\">super</a></li><li><a href=\"../keyword.trait.html\">trait</a></li><li><a href=\"../keyword.true.html\">true</a></li><li><a href=\"../keyword.type.html\">type</a></li><li><a href=\"../keyword.union.html\">union</a></li><li><a href=\"../keyword.unsafe.html\">unsafe</a></li><li><a href=\"../keyword.use.html\">use</a></li><li><a href=\"../keyword.where.html\">where</a></li><li><a href=\"../keyword.while.html\">while</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Module <a href=\"../index.html\">std</a>::<wbr><a class=\"mod\" href=\"#\">prelude</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/prelude/mod.rs.html#1-166\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><h2 id=\"the-rust-prelude\"><a class=\"doc-anchor\" href=\"#the-rust-prelude\">§</a>The Rust Prelude</h2>\n<p>Rust comes with a variety of things in its standard library. However, if\nyou had to manually import every single thing that you used, it would be\nvery verbose. But importing a lot of things that a program never uses isn’t\ngood either. A balance needs to be struck.</p>\n<p>The <em>prelude</em> is the list of things that Rust automatically imports into\nevery Rust program. It’s kept as small as possible, and is focused on\nthings, particularly traits, which are used in almost every single Rust\nprogram.</p>\n<h2 id=\"other-preludes\"><a class=\"doc-anchor\" href=\"#other-preludes\">§</a>Other preludes</h2>\n<p>Preludes can be seen as a pattern to make using multiple types more\nconvenient. As such, you’ll find other preludes in the standard library,\nsuch as <a href=\"../io/prelude/index.html\" title=\"mod std::io::prelude\"><code>std::io::prelude</code></a>. Various libraries in the Rust ecosystem may\nalso define their own preludes.</p>\n<p>The difference between ‘the prelude’ and these other preludes is that they\nare not automatically <code>use</code>’d, and must be imported manually. This is still\neasier than importing all of their constituent components.</p>\n<h2 id=\"prelude-contents\"><a class=\"doc-anchor\" href=\"#prelude-contents\">§</a>Prelude contents</h2>\n<p>The first version of the prelude is used in Rust 2015 and Rust 2018,\nand lives in <a href=\"v1/index.html\" title=\"mod std::prelude::v1\"><code>std::prelude::v1</code></a>.\n<a href=\"rust_2015/index.html\" title=\"mod std::prelude::rust_2015\"><code>std::prelude::rust_2015</code></a> and <a href=\"rust_2018/index.html\" title=\"mod std::prelude::rust_2018\"><code>std::prelude::rust_2018</code></a> re-export this prelude.\nIt re-exports the following:</p>\n<ul>\n<li><code><a href=\"../marker/index.html\" title=\"mod std::marker\">std::marker</a>::{<a href=\"../marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a>, <a href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a>, <a href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>, <a href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a>, <a href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a>}</code>,\nmarker traits that indicate fundamental properties of types.</li>\n<li><code><a href=\"../ops/index.html\" title=\"mod std::ops\">std::ops</a>::{<a href=\"../ops/trait.Drop.html\" title=\"trait std::ops::Drop\">Drop</a>, <a href=\"../ops/trait.Fn.html\" title=\"trait std::ops::Fn\">Fn</a>, <a href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>, <a href=\"../ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>}</code>, various\noperations for both destructors and overloading <code>()</code>.</li>\n<li><code><a href=\"../mem/index.html\" title=\"mod std::mem\">std::mem</a>::<a href=\"../mem/fn.drop.html\" title=\"fn std::mem::drop\">drop</a></code>, a convenience function for explicitly\ndropping a value.</li>\n<li><code><a href=\"../mem/index.html\" title=\"mod std::mem\">std::mem</a>::{<a href=\"../mem/fn.size_of.html\" title=\"fn std::mem::size_of\">size_of</a>, <a href=\"../mem/fn.size_of_val.html\" title=\"fn std::mem::size_of_val\">size_of_val</a>}</code>, to get the size of\na type or value.</li>\n<li><code><a href=\"../mem/index.html\" title=\"mod std::mem\">std::mem</a>::{<a href=\"../mem/fn.align_of.html\" title=\"fn std::mem::align_of\">align_of</a>, <a href=\"../mem/fn.align_of_val.html\" title=\"fn std::mem::align_of_val\">align_of_val</a>}</code>, to get the\nalignment of a type or value.</li>\n<li><code><a href=\"../boxed/index.html\" title=\"mod std::boxed\">std::boxed</a>::<a href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a></code>, a way to allocate values on the heap.</li>\n<li><code><a href=\"../borrow/index.html\" title=\"mod std::borrow\">std::borrow</a>::<a href=\"../borrow/trait.ToOwned.html\" title=\"trait std::borrow::ToOwned\">ToOwned</a></code>, the conversion trait that defines\n<a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\" title=\"method std::borrow::ToOwned::to_owned\"><code>to_owned</code></a>, the generic method for creating an owned type from a\nborrowed type.</li>\n<li><code><a href=\"../clone/index.html\" title=\"mod std::clone\">std::clone</a>::<a href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a></code>, the ubiquitous trait that defines\n<a href=\"../clone/trait.Clone.html#tymethod.clone\" title=\"method std::clone::Clone::clone\"><code>clone</code></a>, the method for producing a copy of a value.</li>\n<li><code><a href=\"../cmp/index.html\" title=\"mod std::cmp\">std::cmp</a>::{<a href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>, <a href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>, <a href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a>, <a href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>}</code>, the\ncomparison traits, which implement the comparison operators and are often\nseen in trait bounds.</li>\n<li><code><a href=\"../convert/index.html\" title=\"mod std::convert\">std::convert</a>::{<a href=\"../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>, <a href=\"../convert/trait.AsMut.html\" title=\"trait std::convert::AsMut\">AsMut</a>, <a href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>, <a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>}</code>, generic\nconversions, used by savvy API authors to create overloaded methods.</li>\n<li><code><a href=\"../default/index.html\" title=\"mod std::default\">std::default</a>::<a href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a></code>, types that have default values.</li>\n<li><code><a href=\"../iter/index.html\" title=\"mod std::iter\">std::iter</a>::{<a href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>, <a href=\"../iter/trait.Extend.html\" title=\"trait std::iter::Extend\">Extend</a>, <a href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>, <a href=\"../iter/trait.DoubleEndedIterator.html\" title=\"trait std::iter::DoubleEndedIterator\">DoubleEndedIterator</a>, <a href=\"../iter/trait.ExactSizeIterator.html\" title=\"trait std::iter::ExactSizeIterator\">ExactSizeIterator</a>}</code>,\niterators of various\nkinds.</li>\n<li><code><a href=\"../option/index.html\" title=\"mod std::option\">std::option</a>::<a href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>::{<a href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">self</a>, <a href=\"../option/enum.Option.html#variant.Some\" title=\"variant std::option::Option::Some\">Some</a>, <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\">None</a>}</code>, a\ntype which expresses the presence or absence of a value. This type is so\ncommonly used, its variants are also exported.</li>\n<li><code><a href=\"../result/index.html\" title=\"mod std::result\">std::result</a>::<a href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>::{<a href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">self</a>, <a href=\"../result/enum.Result.html#variant.Ok\" title=\"variant std::result::Result::Ok\">Ok</a>, <a href=\"../result/enum.Result.html#variant.Err\" title=\"variant std::result::Result::Err\">Err</a>}</code>, a type\nfor functions that may succeed or fail. Like <a href=\"../option/enum.Option.html\" title=\"enum std::option::Option\"><code>Option</code></a>, its variants are\nexported as well.</li>\n<li><code><a href=\"../string/index.html\" title=\"mod std::string\">std::string</a>::{<a href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a>, <a href=\"../string/trait.ToString.html\" title=\"trait std::string::ToString\">ToString</a>}</code>, heap-allocated strings.</li>\n<li><code><a href=\"../vec/index.html\" title=\"mod std::vec\">std::vec</a>::<a href=\"../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a></code>, a growable, heap-allocated vector.</li>\n</ul>\n<p>The prelude used in Rust 2021, <a href=\"rust_2021/index.html\" title=\"mod std::prelude::rust_2021\"><code>std::prelude::rust_2021</code></a>, includes all of the above,\nand in addition re-exports:</p>\n<ul>\n<li><code><a href=\"../convert/index.html\" title=\"mod std::convert\">std::convert</a>::{<a href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>, <a href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>}</code>,</li>\n<li><code><a href=\"../iter/index.html\" title=\"mod std::iter\">std::iter</a>::<a href=\"../iter/trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a></code>.</li>\n</ul>\n</div></details><h2 id=\"modules\" class=\"section-header\">Modules<a href=\"#modules\" class=\"anchor\">§</a></h2><ul class=\"item-table\"><li><div class=\"item-name\"><a class=\"mod\" href=\"rust_2015/index.html\" title=\"mod std::prelude::rust_2015\">rust_2015</a></div><div class=\"desc docblock-short\">The 2015 version of the prelude of The Rust Standard Library.</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"rust_2018/index.html\" title=\"mod std::prelude::rust_2018\">rust_2018</a></div><div class=\"desc docblock-short\">The 2018 version of the prelude of The Rust Standard Library.</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"rust_2021/index.html\" title=\"mod std::prelude::rust_2021\">rust_2021</a></div><div class=\"desc docblock-short\">The 2021 version of the prelude of The Rust Standard Library.</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"v1/index.html\" title=\"mod std::prelude::v1\">v1</a></div><div class=\"desc docblock-short\">The first version of the prelude of The Rust Standard Library.</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"rust_2024/index.html\" title=\"mod std::prelude::rust_2024\">rust_2024</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">The 2024 version of the prelude of The Rust Standard Library.</div></li></ul></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:20:37.992Z"
}