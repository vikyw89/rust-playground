{
	"title": "RefCell in std::cell - Rust",
	"url": "https://doc.rust-lang.org/stable/std/cell/struct.RefCell.html",
	"markdown": "# RefCell in std::cell - Rust\n\n## Struct [std](../index.html)::[cell](index.html)::[RefCell](#)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#715) ·\n\n```\npub struct RefCell<T>where\n    T: ?Sized,{ /* private fields */ }\n```\n\nExpand description\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#822)[§](#impl-RefCell%3CT%3E)\n\n1.0.0 (const: 1.24.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#835)\n\nCreates a new `RefCell` containing `value`.\n\n##### [§](#examples)Examples\n\n```\nuse std::cell::RefCell;\n\nlet c = RefCell::new(5);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::RefCell;%0A++++%0A++++let+c+=+RefCell::new(5);%0A%7D&edition=2021)\n\n1.0.0 (const: [unstable](https://github.com/rust-lang/rust/issues/78729 \"Tracking issue for const_cell_into_inner\")) · [source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#858)\n\nConsumes the `RefCell`, returning the wrapped value.\n\n##### [§](#examples-1)Examples\n\n```\nuse std::cell::RefCell;\n\nlet c = RefCell::new(5);\n\nlet five = c.into_inner();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::RefCell;%0A++++%0A++++let+c+=+RefCell::new(5);%0A++++%0A++++let+five+=+c.into_inner();%0A%7D&edition=2021)\n\n1.24.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#886)\n\nReplaces the wrapped value with a new one, returning the old value, without deinitializing either one.\n\nThis function corresponds to [`std::mem::replace`](../mem/fn.replace.html).\n\n##### [§](#panics)Panics\n\nPanics if the value is currently borrowed.\n\n##### [§](#examples-2)Examples\n\n```\nuse std::cell::RefCell;\nlet cell = RefCell::new(5);\nlet old_value = cell.replace(6);\nassert_eq!(old_value, 5);\nassert_eq!(cell, RefCell::new(6));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::RefCell;%0A++++let+cell+=+RefCell::new(5);%0A++++let+old_value+=+cell.replace(6);%0A++++assert_eq!(old_value,+5);%0A++++assert_eq!(cell,+RefCell::new(6));%0A%7D&edition=2021)\n\n1.35.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#909)\n\nReplaces the wrapped value with a new one computed from `f`, returning the old value, without deinitializing either one.\n\n##### [§](#panics-1)Panics\n\nPanics if the value is currently borrowed.\n\n##### [§](#examples-3)Examples\n\n```\nuse std::cell::RefCell;\nlet cell = RefCell::new(5);\nlet old_value = cell.replace_with(|&mut old| old + 1);\nassert_eq!(old_value, 5);\nassert_eq!(cell, RefCell::new(6));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::RefCell;%0A++++let+cell+=+RefCell::new(5);%0A++++let+old_value+=+cell.replace_with(%7C%26mut+old%7C+old+%2B+1);%0A++++assert_eq!(old_value,+5);%0A++++assert_eq!(cell,+RefCell::new(6));%0A%7D&edition=2021)\n\n1.24.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#937)\n\nSwaps the wrapped value of `self` with the wrapped value of `other`, without deinitializing either one.\n\nThis function corresponds to [`std::mem::swap`](../mem/fn.swap.html).\n\n##### [§](#panics-2)Panics\n\nPanics if the value in either `RefCell` is currently borrowed, or if `self` and `other` point to the same `RefCell`.\n\n##### [§](#examples-4)Examples\n\n```\nuse std::cell::RefCell;\nlet c = RefCell::new(5);\nlet d = RefCell::new(6);\nc.swap(&d);\nassert_eq!(c, RefCell::new(6));\nassert_eq!(d, RefCell::new(5));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::RefCell;%0A++++let+c+=+RefCell::new(5);%0A++++let+d+=+RefCell::new(6);%0A++++c.swap(%26d);%0A++++assert_eq!(c,+RefCell::new(6));%0A++++assert_eq!(d,+RefCell::new(5));%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#942)[§](#impl-RefCell%3CT%3E-1)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#977)\n\nImmutably borrows the wrapped value.\n\nThe borrow lasts until the returned `Ref` exits scope. Multiple immutable borrows can be taken out at the same time.\n\n##### [§](#panics-3)Panics\n\nPanics if the value is currently mutably borrowed. For a non-panicking variant, use [`try_borrow`](#method.try_borrow).\n\n##### [§](#examples-5)Examples\n\n```\nuse std::cell::RefCell;\n\nlet c = RefCell::new(5);\n\nlet borrowed_five = c.borrow();\nlet borrowed_five2 = c.borrow();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::RefCell;%0A++++%0A++++let+c+=+RefCell::new(5);%0A++++%0A++++let+borrowed_five+=+c.borrow();%0A++++let+borrowed_five2+=+c.borrow();%0A%7D&edition=2021)\n\nAn example of panic:\n\n[ⓘ](# \"This example panics\")\n\n```\nuse std::cell::RefCell;\n\nlet c = RefCell::new(5);\n\nlet m = c.borrow_mut();\nlet b = c.borrow(); // this causes a panic\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::RefCell;%0A++++%0A++++let+c+=+RefCell::new(5);%0A++++%0A++++let+m+=+c.borrow_mut();%0A++++let+b+=+c.borrow();+//+this+causes+a+panic%0A%7D&edition=2021)\n\n1.13.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1012)\n\nImmutably borrows the wrapped value, returning an error if the value is currently mutably borrowed.\n\nThe borrow lasts until the returned `Ref` exits scope. Multiple immutable borrows can be taken out at the same time.\n\nThis is the non-panicking variant of [`borrow`](#method.borrow).\n\n##### [§](#examples-6)Examples\n\n```\nuse std::cell::RefCell;\n\nlet c = RefCell::new(5);\n\n{\n    let m = c.borrow_mut();\n    assert!(c.try_borrow().is_err());\n}\n\n{\n    let m = c.borrow();\n    assert!(c.try_borrow().is_ok());\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::RefCell;%0A++++%0A++++let+c+=+RefCell::new(5);%0A++++%0A++++%7B%0A++++++++let+m+=+c.borrow_mut();%0A++++++++assert!(c.try_borrow().is_err());%0A++++%7D%0A++++%0A++++%7B%0A++++++++let+m+=+c.borrow();%0A++++++++assert!(c.try_borrow().is_ok());%0A++++%7D%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1073)\n\nMutably borrows the wrapped value.\n\nThe borrow lasts until the returned `RefMut` or all `RefMut`s derived from it exit scope. The value cannot be borrowed while this borrow is active.\n\n##### [§](#panics-4)Panics\n\nPanics if the value is currently borrowed. For a non-panicking variant, use [`try_borrow_mut`](#method.try_borrow_mut).\n\n##### [§](#examples-7)Examples\n\n```\nuse std::cell::RefCell;\n\nlet c = RefCell::new(\"hello\".to_owned());\n\n*c.borrow_mut() = \"bonjour\".to_owned();\n\nassert_eq!(&*c.borrow(), \"bonjour\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::RefCell;%0A++++%0A++++let+c+=+RefCell::new(%22hello%22.to_owned());%0A++++%0A++++*c.borrow_mut()+=+%22bonjour%22.to_owned();%0A++++%0A++++assert_eq!(%26*c.borrow(),+%22bonjour%22);%0A%7D&edition=2021)\n\nAn example of panic:\n\n[ⓘ](# \"This example panics\")\n\n```\nuse std::cell::RefCell;\n\nlet c = RefCell::new(5);\nlet m = c.borrow();\n\nlet b = c.borrow_mut(); // this causes a panic\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::RefCell;%0A++++%0A++++let+c+=+RefCell::new(5);%0A++++let+m+=+c.borrow();%0A++++%0A++++let+b+=+c.borrow_mut();+//+this+causes+a+panic%0A%7D&edition=2021)\n\n1.13.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1105)\n\nMutably borrows the wrapped value, returning an error if the value is currently borrowed.\n\nThe borrow lasts until the returned `RefMut` or all `RefMut`s derived from it exit scope. The value cannot be borrowed while this borrow is active.\n\nThis is the non-panicking variant of [`borrow_mut`](#method.borrow_mut).\n\n##### [§](#examples-8)Examples\n\n```\nuse std::cell::RefCell;\n\nlet c = RefCell::new(5);\n\n{\n    let m = c.borrow();\n    assert!(c.try_borrow_mut().is_err());\n}\n\nassert!(c.try_borrow_mut().is_ok());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::RefCell;%0A++++%0A++++let+c+=+RefCell::new(5);%0A++++%0A++++%7B%0A++++++++let+m+=+c.borrow();%0A++++++++assert!(c.try_borrow_mut().is_err());%0A++++%7D%0A++++%0A++++assert!(c.try_borrow_mut().is_ok());%0A%7D&edition=2021)\n\n1.12.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1140)\n\nReturns a raw pointer to the underlying data in this cell.\n\n##### [§](#examples-9)Examples\n\n```\nuse std::cell::RefCell;\n\nlet c = RefCell::new(5);\n\nlet ptr = c.as_ptr();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::RefCell;%0A++++%0A++++let+c+=+RefCell::new(5);%0A++++%0A++++let+ptr+=+c.as_ptr();%0A%7D&edition=2021)\n\n1.11.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1173)\n\nReturns a mutable reference to the underlying data.\n\nSince this method borrows `RefCell` mutably, it is statically guaranteed that no borrows to the underlying data exist. The dynamic checks inherent in [`borrow_mut`](about:blank/struct.RefCell.html#method.borrow_mut \"method std::cell::RefCell::borrow_mut\") and most other methods of `RefCell` are therefore unnecessary.\n\nThis method can only be called if `RefCell` can be mutably borrowed, which in general is only the case directly after the `RefCell` has been created. In these situations, skipping the aforementioned dynamic borrowing checks may yield better ergonomics and runtime-performance.\n\nIn most situations where `RefCell` is used, it can’t be borrowed mutably. Use [`borrow_mut`](about:blank/struct.RefCell.html#method.borrow_mut \"method std::cell::RefCell::borrow_mut\") to get mutable access to the underlying data then.\n\n##### [§](#examples-10)Examples\n\n```\nuse std::cell::RefCell;\n\nlet mut c = RefCell::new(5);\n*c.get_mut() += 1;\n\nassert_eq!(c, RefCell::new(6));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::RefCell;%0A++++%0A++++let+mut+c+=+RefCell::new(5);%0A++++*c.get_mut()+%2B=+1;%0A++++%0A++++assert_eq!(c,+RefCell::new(6));%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1199)\n\n🔬This is a nightly-only experimental API. (`cell_leak` [#69099](https://github.com/rust-lang/rust/issues/69099))\n\nUndo the effect of leaked guards on the borrow state of the `RefCell`.\n\nThis call is similar to [`get_mut`](about:blank/struct.RefCell.html#method.get_mut \"method std::cell::RefCell::get_mut\") but more specialized. It borrows `RefCell` mutably to ensure no borrows exist and then resets the state tracking shared borrows. This is relevant if some `Ref` or `RefMut` borrows have been leaked.\n\n##### [§](#examples-11)Examples\n\n```\n#![feature(cell_leak)]\nuse std::cell::RefCell;\n\nlet mut c = RefCell::new(0);\nstd::mem::forget(c.borrow_mut());\n\nassert!(c.try_borrow().is_err());\nc.undo_leak();\nassert!(c.try_borrow().is_ok());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(cell_leak)%5D%0Afn+main()+%7B%0A++++use+std::cell::RefCell;%0A++++%0A++++let+mut+c+=+RefCell::new(0);%0A++++std::mem::forget(c.borrow_mut());%0A++++%0A++++assert!(c.try_borrow().is_err());%0A++++c.undo_leak();%0A++++assert!(c.try_borrow().is_ok());%0A%7D&version=nightly&edition=2021)\n\n1.37.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1233)\n\nImmutably borrows the wrapped value, returning an error if the value is currently mutably borrowed.\n\n##### [§](#safety)Safety\n\nUnlike `RefCell::borrow`, this method is unsafe because it does not return a `Ref`, thus leaving the borrow flag untouched. Mutably borrowing the `RefCell` while the reference returned by this method is alive is undefined behaviour.\n\n##### [§](#examples-12)Examples\n\n```\nuse std::cell::RefCell;\n\nlet c = RefCell::new(5);\n\n{\n    let m = c.borrow_mut();\n    assert!(unsafe { c.try_borrow_unguarded() }.is_err());\n}\n\n{\n    let m = c.borrow();\n    assert!(unsafe { c.try_borrow_unguarded() }.is_ok());\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::RefCell;%0A++++%0A++++let+c+=+RefCell::new(5);%0A++++%0A++++%7B%0A++++++++let+m+=+c.borrow_mut();%0A++++++++assert!(unsafe+%7B+c.try_borrow_unguarded()+%7D.is_err());%0A++++%7D%0A++++%0A++++%7B%0A++++++++let+m+=+c.borrow();%0A++++++++assert!(unsafe+%7B+c.try_borrow_unguarded()+%7D.is_ok());%0A++++%7D%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1252)[§](#impl-RefCell%3CT%3E-2)\n\n1.50.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1271)\n\nTakes the wrapped value, leaving `Default::default()` in its place.\n\n##### [§](#panics-5)Panics\n\nPanics if the value is currently borrowed.\n\n##### [§](#examples-13)Examples\n\n```\nuse std::cell::RefCell;\n\nlet c = RefCell::new(5);\nlet five = c.take();\n\nassert_eq!(five, 5);\nassert_eq!(c.into_inner(), 0);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::RefCell;%0A++++%0A++++let+c+=+RefCell::new(5);%0A++++let+five+=+c.take();%0A++++%0A++++assert_eq!(five,+5);%0A++++assert_eq!(c.into_inner(),+0);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1283)[§](#impl-Clone-for-RefCell%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1289)[§](#method.clone)\n\n##### [§](#panics-6)Panics\n\nPanics if the value is currently mutably borrowed.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1298)[§](#method.clone_from)\n\n##### [§](#panics-7)Panics\n\nPanics if `source` is currently mutably borrowed.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2631)[§](#impl-Debug-for-RefCell%3CT%3E)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1304)[§](#impl-Default-for-RefCell%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1307)[§](#method.default)\n\nCreates a `RefCell<T>`, with the `Default` value for T.\n\n1.12.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1381)[§](#impl-From%3CT%3E-for-RefCell%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1383)[§](#method.from)\n\nCreates a new `RefCell<T>` containing the given value.\n\n1.10.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1370)[§](#impl-Ord-for-RefCell%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1375)[§](#method.cmp)\n\n##### [§](#panics-13)Panics\n\nPanics if the value in either `RefCell` is currently mutably borrowed.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1313)[§](#impl-PartialEq-for-RefCell%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1318)[§](#method.eq)\n\n##### [§](#panics-14)Panics\n\nPanics if the value in either `RefCell` is currently mutably borrowed.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.10.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1327)[§](#impl-PartialOrd-for-RefCell%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1332)[§](#method.partial_cmp)\n\n##### [§](#panics-8)Panics\n\nPanics if the value in either `RefCell` is currently mutably borrowed.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1340)[§](#method.lt)\n\n##### [§](#panics-9)Panics\n\nPanics if the value in either `RefCell` is currently mutably borrowed.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1348)[§](#method.le)\n\n##### [§](#panics-10)Panics\n\nPanics if the value in either `RefCell` is currently mutably borrowed.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1356)[§](#method.gt)\n\n##### [§](#panics-11)Panics\n\nPanics if the value in either `RefCell` is currently mutably borrowed.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1364)[§](#method.ge)\n\n##### [§](#panics-12)Panics\n\nPanics if the value in either `RefCell` is currently mutably borrowed.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1389)[§](#impl-CoerceUnsized%3CRefCell%3CU%3E%3E-for-RefCell%3CT%3E)\n\n1.2.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1324)[§](#impl-Eq-for-RefCell%3CT%3E)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1277)[§](#impl-Send-for-RefCell%3CT%3E)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1280)[§](#impl-Sync-for-RefCell%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[§](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[§](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[§](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#782)[§](#impl-From%3C!%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#783)[§](#method.from-1)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[§](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[§](#method.from-2)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[§](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[§](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85)[§](#impl-ToOwned-for-T)\n\n[§](#associatedtype.Owned)\n\nThe resulting type after obtaining ownership.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88)[§](#method.to_owned)\n\nCreates owned data from borrowed data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#tymethod.to_owned)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92)[§](#method.clone_into)\n\nUses borrowed data to replace owned data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#method.clone_into)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[§](#impl-TryFrom%3CU%3E-for-T)\n\n[§](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[§](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[§](#impl-TryInto%3CU%3E-for-T)\n\n[§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[§](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A mutable memory location with dynamically checked borrow rules\"><title>RefCell in std::cell - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">RefCell</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">RefCell</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.as_ptr\">as_ptr</a></li><li><a href=\"#method.borrow\">borrow</a></li><li><a href=\"#method.borrow_mut\">borrow_mut</a></li><li><a href=\"#method.get_mut\">get_mut</a></li><li><a href=\"#method.into_inner\">into_inner</a></li><li><a href=\"#method.new\">new</a></li><li><a href=\"#method.replace\">replace</a></li><li><a href=\"#method.replace_with\">replace_with</a></li><li><a href=\"#method.swap\">swap</a></li><li><a href=\"#method.take\">take</a></li><li><a href=\"#method.try_borrow\">try_borrow</a></li><li><a href=\"#method.try_borrow_mut\">try_borrow_mut</a></li><li><a href=\"#method.try_borrow_unguarded\">try_borrow_unguarded</a></li><li><a href=\"#method.undo_leak\">undo_leak</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-Sync-for-RefCell%3CT%3E\">!Sync</a></li><li><a href=\"#impl-Clone-for-RefCell%3CT%3E\">Clone</a></li><li><a href=\"#impl-CoerceUnsized%3CRefCell%3CU%3E%3E-for-RefCell%3CT%3E\">CoerceUnsized&lt;RefCell&lt;U&gt;&gt;</a></li><li><a href=\"#impl-Debug-for-RefCell%3CT%3E\">Debug</a></li><li><a href=\"#impl-Default-for-RefCell%3CT%3E\">Default</a></li><li><a href=\"#impl-Eq-for-RefCell%3CT%3E\">Eq</a></li><li><a href=\"#impl-From%3CT%3E-for-RefCell%3CT%3E\">From&lt;T&gt;</a></li><li><a href=\"#impl-Ord-for-RefCell%3CT%3E\">Ord</a></li><li><a href=\"#impl-PartialEq-for-RefCell%3CT%3E\">PartialEq</a></li><li><a href=\"#impl-PartialOrd-for-RefCell%3CT%3E\">PartialOrd</a></li><li><a href=\"#impl-Send-for-RefCell%3CT%3E\">Send</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-RefCell%3CT%3E\">!Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-RefCell%3CT%3E\">!RefUnwindSafe</a></li><li><a href=\"#impl-Unpin-for-RefCell%3CT%3E\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-RefCell%3CT%3E\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3C!%3E-for-T\">From&lt;!&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-ToOwned-for-T\">ToOwned</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::cell</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.BorrowError.html\">BorrowError</a></li><li><a href=\"struct.BorrowMutError.html\">BorrowMutError</a></li><li><a href=\"struct.Cell.html\">Cell</a></li><li><a href=\"struct.LazyCell.html\">LazyCell</a></li><li><a href=\"struct.OnceCell.html\">OnceCell</a></li><li><a href=\"struct.Ref.html\">Ref</a></li><li><a href=\"struct.RefCell.html\">RefCell</a></li><li><a href=\"struct.RefMut.html\">RefMut</a></li><li><a href=\"struct.SyncUnsafeCell.html\">SyncUnsafeCell</a></li><li><a href=\"struct.UnsafeCell.html\">UnsafeCell</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">cell</a>::<wbr><a class=\"struct\" href=\"#\">RefCell</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#715\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct RefCell&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div>{ <span class=\"comment\">/* private fields */</span> }</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A mutable memory location with dynamically checked borrow rules</p>\n<p>See the <a href=\"index.html\" title=\"mod std::cell\">module-level documentation</a> for more.</p>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-RefCell%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#822\">source</a><a href=\"#impl-RefCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"struct.RefCell.html\" title=\"struct std::cell::RefCell\">RefCell</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.new\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.24.0\">1.0.0 (const: 1.24.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#835\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.new\" class=\"fn\">new</a>(value: T) -&gt; <a class=\"struct\" href=\"struct.RefCell.html\" title=\"struct std::cell::RefCell\">RefCell</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new <code>RefCell</code> containing <code>value</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span>c = RefCell::new(<span class=\"number\">5</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::RefCell;%0A++++%0A++++let+c+=+RefCell::new(5);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_inner\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/78729\" title=\"Tracking issue for const_cell_into_inner\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#858\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.into_inner\" class=\"fn\">into_inner</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Consumes the <code>RefCell</code>, returning the wrapped value.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span>c = RefCell::new(<span class=\"number\">5</span>);\n\n<span class=\"kw\">let </span>five = c.into_inner();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::RefCell;%0A++++%0A++++let+c+=+RefCell::new(5);%0A++++%0A++++let+five+=+c.into_inner();%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.replace\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.24.0\">1.24.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#886\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.replace\" class=\"fn\">replace</a>(&amp;self, t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Replaces the wrapped value with a new one, returning the old value,\nwithout deinitializing either one.</p>\n<p>This function corresponds to <a href=\"../mem/fn.replace.html\"><code>std::mem::replace</code></a>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the value is currently borrowed.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n<span class=\"kw\">let </span>cell = RefCell::new(<span class=\"number\">5</span>);\n<span class=\"kw\">let </span>old_value = cell.replace(<span class=\"number\">6</span>);\n<span class=\"macro\">assert_eq!</span>(old_value, <span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(cell, RefCell::new(<span class=\"number\">6</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::RefCell;%0A++++let+cell+=+RefCell::new(5);%0A++++let+old_value+=+cell.replace(6);%0A++++assert_eq!(old_value,+5);%0A++++assert_eq!(cell,+RefCell::new(6));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.replace_with\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.35.0\">1.35.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#909\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.replace_with\" class=\"fn\">replace_with</a>&lt;F&gt;(&amp;self, f: F) -&gt; T<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>) -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Replaces the wrapped value with a new one computed from <code>f</code>, returning\nthe old value, without deinitializing either one.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if the value is currently borrowed.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n<span class=\"kw\">let </span>cell = RefCell::new(<span class=\"number\">5</span>);\n<span class=\"kw\">let </span>old_value = cell.replace_with(|<span class=\"kw-2\">&amp;mut </span>old| old + <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(old_value, <span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(cell, RefCell::new(<span class=\"number\">6</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::RefCell;%0A++++let+cell+=+RefCell::new(5);%0A++++let+old_value+=+cell.replace_with(%7C%26mut+old%7C+old+%2B+1);%0A++++assert_eq!(old_value,+5);%0A++++assert_eq!(cell,+RefCell::new(6));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.swap\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.24.0\">1.24.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#937\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.swap\" class=\"fn\">swap</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.RefCell.html\" title=\"struct std::cell::RefCell\">RefCell</a>&lt;T&gt;)</h4></section></summary><div class=\"docblock\"><p>Swaps the wrapped value of <code>self</code> with the wrapped value of <code>other</code>,\nwithout deinitializing either one.</p>\n<p>This function corresponds to <a href=\"../mem/fn.swap.html\"><code>std::mem::swap</code></a>.</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h5>\n<p>Panics if the value in either <code>RefCell</code> is currently borrowed, or\nif <code>self</code> and <code>other</code> point to the same <code>RefCell</code>.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n<span class=\"kw\">let </span>c = RefCell::new(<span class=\"number\">5</span>);\n<span class=\"kw\">let </span>d = RefCell::new(<span class=\"number\">6</span>);\nc.swap(<span class=\"kw-2\">&amp;</span>d);\n<span class=\"macro\">assert_eq!</span>(c, RefCell::new(<span class=\"number\">6</span>));\n<span class=\"macro\">assert_eq!</span>(d, RefCell::new(<span class=\"number\">5</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::RefCell;%0A++++let+c+=+RefCell::new(5);%0A++++let+d+=+RefCell::new(6);%0A++++c.swap(%26d);%0A++++assert_eq!(c,+RefCell::new(6));%0A++++assert_eq!(d,+RefCell::new(5));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-RefCell%3CT%3E-1\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#942\">source</a><a href=\"#impl-RefCell%3CT%3E-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"struct.RefCell.html\" title=\"struct std::cell::RefCell\">RefCell</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#977\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.Ref.html\" title=\"struct std::cell::Ref\">Ref</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Immutably borrows the wrapped value.</p>\n<p>The borrow lasts until the returned <code>Ref</code> exits scope. Multiple\nimmutable borrows can be taken out at the same time.</p>\n<h5 id=\"panics-3\"><a class=\"doc-anchor\" href=\"#panics-3\">§</a>Panics</h5>\n<p>Panics if the value is currently mutably borrowed. For a non-panicking variant, use\n<a href=\"#method.try_borrow\"><code>try_borrow</code></a>.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span>c = RefCell::new(<span class=\"number\">5</span>);\n\n<span class=\"kw\">let </span>borrowed_five = c.borrow();\n<span class=\"kw\">let </span>borrowed_five2 = c.borrow();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::RefCell;%0A++++%0A++++let+c+=+RefCell::new(5);%0A++++%0A++++let+borrowed_five+=+c.borrow();%0A++++let+borrowed_five2+=+c.borrow();%0A%7D&amp;edition=2021\">Run</a></div>\n<p>An example of panic:</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span>c = RefCell::new(<span class=\"number\">5</span>);\n\n<span class=\"kw\">let </span>m = c.borrow_mut();\n<span class=\"kw\">let </span>b = c.borrow(); <span class=\"comment\">// this causes a panic</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::RefCell;%0A++++%0A++++let+c+=+RefCell::new(5);%0A++++%0A++++let+m+=+c.borrow_mut();%0A++++let+b+=+c.borrow();+//+this+causes+a+panic%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_borrow\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.13.0\">1.13.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1012\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.try_borrow\" class=\"fn\">try_borrow</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.Ref.html\" title=\"struct std::cell::Ref\">Ref</a>&lt;'_, T&gt;, <a class=\"struct\" href=\"struct.BorrowError.html\" title=\"struct std::cell::BorrowError\">BorrowError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Immutably borrows the wrapped value, returning an error if the value is currently mutably\nborrowed.</p>\n<p>The borrow lasts until the returned <code>Ref</code> exits scope. Multiple immutable borrows can be\ntaken out at the same time.</p>\n<p>This is the non-panicking variant of <a href=\"#method.borrow\"><code>borrow</code></a>.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span>c = RefCell::new(<span class=\"number\">5</span>);\n\n{\n    <span class=\"kw\">let </span>m = c.borrow_mut();\n    <span class=\"macro\">assert!</span>(c.try_borrow().is_err());\n}\n\n{\n    <span class=\"kw\">let </span>m = c.borrow();\n    <span class=\"macro\">assert!</span>(c.try_borrow().is_ok());\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::RefCell;%0A++++%0A++++let+c+=+RefCell::new(5);%0A++++%0A++++%7B%0A++++++++let+m+=+c.borrow_mut();%0A++++++++assert!(c.try_borrow().is_err());%0A++++%7D%0A++++%0A++++%7B%0A++++++++let+m+=+c.borrow();%0A++++++++assert!(c.try_borrow().is_ok());%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1073\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.RefMut.html\" title=\"struct std::cell::RefMut\">RefMut</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock\"><p>Mutably borrows the wrapped value.</p>\n<p>The borrow lasts until the returned <code>RefMut</code> or all <code>RefMut</code>s derived\nfrom it exit scope. The value cannot be borrowed while this borrow is\nactive.</p>\n<h5 id=\"panics-4\"><a class=\"doc-anchor\" href=\"#panics-4\">§</a>Panics</h5>\n<p>Panics if the value is currently borrowed. For a non-panicking variant, use\n<a href=\"#method.try_borrow_mut\"><code>try_borrow_mut</code></a>.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span>c = RefCell::new(<span class=\"string\">\"hello\"</span>.to_owned());\n\n<span class=\"kw-2\">*</span>c.borrow_mut() = <span class=\"string\">\"bonjour\"</span>.to_owned();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;*</span>c.borrow(), <span class=\"string\">\"bonjour\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::RefCell;%0A++++%0A++++let+c+=+RefCell::new(%22hello%22.to_owned());%0A++++%0A++++*c.borrow_mut()+=+%22bonjour%22.to_owned();%0A++++%0A++++assert_eq!(%26*c.borrow(),+%22bonjour%22);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>An example of panic:</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span>c = RefCell::new(<span class=\"number\">5</span>);\n<span class=\"kw\">let </span>m = c.borrow();\n\n<span class=\"kw\">let </span>b = c.borrow_mut(); <span class=\"comment\">// this causes a panic</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::RefCell;%0A++++%0A++++let+c+=+RefCell::new(5);%0A++++let+m+=+c.borrow();%0A++++%0A++++let+b+=+c.borrow_mut();+//+this+causes+a+panic%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_borrow_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.13.0\">1.13.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1105\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.try_borrow_mut\" class=\"fn\">try_borrow_mut</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.RefMut.html\" title=\"struct std::cell::RefMut\">RefMut</a>&lt;'_, T&gt;, <a class=\"struct\" href=\"struct.BorrowMutError.html\" title=\"struct std::cell::BorrowMutError\">BorrowMutError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Mutably borrows the wrapped value, returning an error if the value is currently borrowed.</p>\n<p>The borrow lasts until the returned <code>RefMut</code> or all <code>RefMut</code>s derived\nfrom it exit scope. The value cannot be borrowed while this borrow is\nactive.</p>\n<p>This is the non-panicking variant of <a href=\"#method.borrow_mut\"><code>borrow_mut</code></a>.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span>c = RefCell::new(<span class=\"number\">5</span>);\n\n{\n    <span class=\"kw\">let </span>m = c.borrow();\n    <span class=\"macro\">assert!</span>(c.try_borrow_mut().is_err());\n}\n\n<span class=\"macro\">assert!</span>(c.try_borrow_mut().is_ok());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::RefCell;%0A++++%0A++++let+c+=+RefCell::new(5);%0A++++%0A++++%7B%0A++++++++let+m+=+c.borrow();%0A++++++++assert!(c.try_borrow_mut().is_err());%0A++++%7D%0A++++%0A++++assert!(c.try_borrow_mut().is_ok());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_ptr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1140\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.as_ptr\" class=\"fn\">as_ptr</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a></h4></section></summary><div class=\"docblock\"><p>Returns a raw pointer to the underlying data in this cell.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span>c = RefCell::new(<span class=\"number\">5</span>);\n\n<span class=\"kw\">let </span>ptr = c.as_ptr();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::RefCell;%0A++++%0A++++let+c+=+RefCell::new(5);%0A++++%0A++++let+ptr+=+c.as_ptr();%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.11.0\">1.11.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1173\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.get_mut\" class=\"fn\">get_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\"><p>Returns a mutable reference to the underlying data.</p>\n<p>Since this method borrows <code>RefCell</code> mutably, it is statically guaranteed\nthat no borrows to the underlying data exist. The dynamic checks inherent\nin <a href=\"struct.RefCell.html#method.borrow_mut\" title=\"method std::cell::RefCell::borrow_mut\"><code>borrow_mut</code></a> and most other methods of <code>RefCell</code> are therefore\nunnecessary.</p>\n<p>This method can only be called if <code>RefCell</code> can be mutably borrowed,\nwhich in general is only the case directly after the <code>RefCell</code> has\nbeen created. In these situations, skipping the aforementioned dynamic\nborrowing checks may yield better ergonomics and runtime-performance.</p>\n<p>In most situations where <code>RefCell</code> is used, it can’t be borrowed mutably.\nUse <a href=\"struct.RefCell.html#method.borrow_mut\" title=\"method std::cell::RefCell::borrow_mut\"><code>borrow_mut</code></a> to get mutable access to the underlying data then.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = RefCell::new(<span class=\"number\">5</span>);\n<span class=\"kw-2\">*</span>c.get_mut() += <span class=\"number\">1</span>;\n\n<span class=\"macro\">assert_eq!</span>(c, RefCell::new(<span class=\"number\">6</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::RefCell;%0A++++%0A++++let+mut+c+=+RefCell::new(5);%0A++++*c.get_mut()+%2B=+1;%0A++++%0A++++assert_eq!(c,+RefCell::new(6));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.undo_leak\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1199\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.undo_leak\" class=\"fn\">undo_leak</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>cell_leak</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/69099\">#69099</a>)</span></div></span></summary><div class=\"docblock\"><p>Undo the effect of leaked guards on the borrow state of the <code>RefCell</code>.</p>\n<p>This call is similar to <a href=\"struct.RefCell.html#method.get_mut\" title=\"method std::cell::RefCell::get_mut\"><code>get_mut</code></a> but more specialized. It borrows <code>RefCell</code> mutably to\nensure no borrows exist and then resets the state tracking shared borrows. This is relevant\nif some <code>Ref</code> or <code>RefMut</code> borrows have been leaked.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(cell_leak)]\n</span><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = RefCell::new(<span class=\"number\">0</span>);\nstd::mem::forget(c.borrow_mut());\n\n<span class=\"macro\">assert!</span>(c.try_borrow().is_err());\nc.undo_leak();\n<span class=\"macro\">assert!</span>(c.try_borrow().is_ok());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(cell_leak)%5D%0Afn+main()+%7B%0A++++use+std::cell::RefCell;%0A++++%0A++++let+mut+c+=+RefCell::new(0);%0A++++std::mem::forget(c.borrow_mut());%0A++++%0A++++assert!(c.try_borrow().is_err());%0A++++c.undo_leak();%0A++++assert!(c.try_borrow().is_ok());%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_borrow_unguarded\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1233\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.try_borrow_unguarded\" class=\"fn\">try_borrow_unguarded</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>, <a class=\"struct\" href=\"struct.BorrowError.html\" title=\"struct std::cell::BorrowError\">BorrowError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Immutably borrows the wrapped value, returning an error if the value is\ncurrently mutably borrowed.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>Unlike <code>RefCell::borrow</code>, this method is unsafe because it does not\nreturn a <code>Ref</code>, thus leaving the borrow flag untouched. Mutably\nborrowing the <code>RefCell</code> while the reference returned by this method\nis alive is undefined behaviour.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span>c = RefCell::new(<span class=\"number\">5</span>);\n\n{\n    <span class=\"kw\">let </span>m = c.borrow_mut();\n    <span class=\"macro\">assert!</span>(<span class=\"kw\">unsafe </span>{ c.try_borrow_unguarded() }.is_err());\n}\n\n{\n    <span class=\"kw\">let </span>m = c.borrow();\n    <span class=\"macro\">assert!</span>(<span class=\"kw\">unsafe </span>{ c.try_borrow_unguarded() }.is_ok());\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::RefCell;%0A++++%0A++++let+c+=+RefCell::new(5);%0A++++%0A++++%7B%0A++++++++let+m+=+c.borrow_mut();%0A++++++++assert!(unsafe+%7B+c.try_borrow_unguarded()+%7D.is_err());%0A++++%7D%0A++++%0A++++%7B%0A++++++++let+m+=+c.borrow();%0A++++++++assert!(unsafe+%7B+c.try_borrow_unguarded()+%7D.is_ok());%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-RefCell%3CT%3E-2\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1252\">source</a><a href=\"#impl-RefCell%3CT%3E-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"struct.RefCell.html\" title=\"struct std::cell::RefCell\">RefCell</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.take\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1271\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.take\" class=\"fn\">take</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Takes the wrapped value, leaving <code>Default::default()</code> in its place.</p>\n<h5 id=\"panics-5\"><a class=\"doc-anchor\" href=\"#panics-5\">§</a>Panics</h5>\n<p>Panics if the value is currently borrowed.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span>c = RefCell::new(<span class=\"number\">5</span>);\n<span class=\"kw\">let </span>five = c.take();\n\n<span class=\"macro\">assert_eq!</span>(five, <span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(c.into_inner(), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::RefCell;%0A++++%0A++++let+c+=+RefCell::new(5);%0A++++let+five+=+c.take();%0A++++%0A++++assert_eq!(five,+5);%0A++++assert_eq!(c.into_inner(),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Clone-for-RefCell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1283\">source</a></span><a href=\"#impl-Clone-for-RefCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"struct.RefCell.html\" title=\"struct std::cell::RefCell\">RefCell</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1289\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.RefCell.html\" title=\"struct std::cell::RefCell\">RefCell</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><h5 id=\"panics-6\"><a class=\"doc-anchor\" href=\"#panics-6\">§</a>Panics</h5>\n<p>Panics if the value is currently mutably borrowed.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1298\">source</a><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;<a class=\"struct\" href=\"struct.RefCell.html\" title=\"struct std::cell::RefCell\">RefCell</a>&lt;T&gt;)</h4></section></summary><div class=\"docblock\"><h5 id=\"panics-7\"><a class=\"doc-anchor\" href=\"#panics-7\">§</a>Panics</h5>\n<p>Panics if <code>source</code> is currently mutably borrowed.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-RefCell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2631\">source</a></span><a href=\"#impl-Debug-for-RefCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.RefCell.html\" title=\"struct std::cell::RefCell\">RefCell</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2632\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-RefCell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1304\">source</a></span><a href=\"#impl-Default-for-RefCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"struct\" href=\"struct.RefCell.html\" title=\"struct std::cell::RefCell\">RefCell</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1307\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"struct.RefCell.html\" title=\"struct std::cell::RefCell\">RefCell</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a <code>RefCell&lt;T&gt;</code>, with the <code>Default</code> value for T.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CT%3E-for-RefCell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1381\">source</a></span><a href=\"#impl-From%3CT%3E-for-RefCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for <a class=\"struct\" href=\"struct.RefCell.html\" title=\"struct std::cell::RefCell\">RefCell</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1383\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; <a class=\"struct\" href=\"struct.RefCell.html\" title=\"struct std::cell::RefCell\">RefCell</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new <code>RefCell&lt;T&gt;</code> containing the given value.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Ord-for-RefCell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1370\">source</a></span><a href=\"#impl-Ord-for-RefCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"struct.RefCell.html\" title=\"struct std::cell::RefCell\">RefCell</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1375\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.RefCell.html\" title=\"struct std::cell::RefCell\">RefCell</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\"><h5 id=\"panics-13\"><a class=\"doc-anchor\" href=\"#panics-13\">§</a>Panics</h5>\n<p>Panics if the value in either <code>RefCell</code> is currently mutably borrowed.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq-for-RefCell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1313\">source</a></span><a href=\"#impl-PartialEq-for-RefCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"struct.RefCell.html\" title=\"struct std::cell::RefCell\">RefCell</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1318\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.RefCell.html\" title=\"struct std::cell::RefCell\">RefCell</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><h5 id=\"panics-14\"><a class=\"doc-anchor\" href=\"#panics-14\">§</a>Panics</h5>\n<p>Panics if the value in either <code>RefCell</code> is currently mutably borrowed.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd-for-RefCell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1327\">source</a></span><a href=\"#impl-PartialOrd-for-RefCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"struct.RefCell.html\" title=\"struct std::cell::RefCell\">RefCell</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1332\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.RefCell.html\" title=\"struct std::cell::RefCell\">RefCell</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\"><h5 id=\"panics-8\"><a class=\"doc-anchor\" href=\"#panics-8\">§</a>Panics</h5>\n<p>Panics if the value in either <code>RefCell</code> is currently mutably borrowed.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1340\">source</a><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.RefCell.html\" title=\"struct std::cell::RefCell\">RefCell</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><h5 id=\"panics-9\"><a class=\"doc-anchor\" href=\"#panics-9\">§</a>Panics</h5>\n<p>Panics if the value in either <code>RefCell</code> is currently mutably borrowed.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1348\">source</a><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.RefCell.html\" title=\"struct std::cell::RefCell\">RefCell</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><h5 id=\"panics-10\"><a class=\"doc-anchor\" href=\"#panics-10\">§</a>Panics</h5>\n<p>Panics if the value in either <code>RefCell</code> is currently mutably borrowed.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1356\">source</a><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.RefCell.html\" title=\"struct std::cell::RefCell\">RefCell</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><h5 id=\"panics-11\"><a class=\"doc-anchor\" href=\"#panics-11\">§</a>Panics</h5>\n<p>Panics if the value in either <code>RefCell</code> is currently mutably borrowed.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1364\">source</a><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.RefCell.html\" title=\"struct std::cell::RefCell\">RefCell</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><h5 id=\"panics-12\"><a class=\"doc-anchor\" href=\"#panics-12\">§</a>Panics</h5>\n<p>Panics if the value in either <code>RefCell</code> is currently mutably borrowed.</p>\n</div></details></div></details><section id=\"impl-CoerceUnsized%3CRefCell%3CU%3E%3E-for-RefCell%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1389\">source</a><a href=\"#impl-CoerceUnsized%3CRefCell%3CU%3E%3E-for-RefCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../ops/trait.CoerceUnsized.html\" title=\"trait std::ops::CoerceUnsized\">CoerceUnsized</a>&lt;<a class=\"struct\" href=\"struct.RefCell.html\" title=\"struct std::cell::RefCell\">RefCell</a>&lt;U&gt;&gt; for <a class=\"struct\" href=\"struct.RefCell.html\" title=\"struct std::cell::RefCell\">RefCell</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../ops/trait.CoerceUnsized.html\" title=\"trait std::ops::CoerceUnsized\">CoerceUnsized</a>&lt;U&gt;,</div></h3></section><section id=\"impl-Eq-for-RefCell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0\">1.2.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1324\">source</a></span><a href=\"#impl-Eq-for-RefCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"struct.RefCell.html\" title=\"struct std::cell::RefCell\">RefCell</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Send-for-RefCell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1277\">source</a></span><a href=\"#impl-Send-for-RefCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.RefCell.html\" title=\"struct std::cell::RefCell\">RefCell</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Sync-for-RefCell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1280\">source</a></span><a href=\"#impl-Sync-for-RefCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; !<a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.RefCell.html\" title=\"struct std::cell::RefCell\">RefCell</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-RefCell%3CT%3E\" class=\"impl\"><a href=\"#impl-Freeze-for-RefCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; !<a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.RefCell.html\" title=\"struct std::cell::RefCell\">RefCell</a>&lt;T&gt;</h3></section><section id=\"impl-RefUnwindSafe-for-RefCell%3CT%3E\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-RefCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; !<a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.RefCell.html\" title=\"struct std::cell::RefCell\">RefCell</a>&lt;T&gt;</h3></section><section id=\"impl-Unpin-for-RefCell%3CT%3E\" class=\"impl\"><a href=\"#impl-Unpin-for-RefCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.RefCell.html\" title=\"struct std::cell::RefCell\">RefCell</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-UnwindSafe-for-RefCell%3CT%3E\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-RefCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.RefCell.html\" title=\"struct std::cell::RefCell\">RefCell</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3C!%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#782\">source</a><a href=\"#impl-From%3C!%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"../primitive.never.html\">!</a>&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#783\">source</a><a href=\"#method.from-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: <a class=\"primitive\" href=\"../primitive.never.html\">!</a>) -&gt; T</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToOwned-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85\">source</a><a href=\"#impl-ToOwned-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.ToOwned.html\" title=\"trait std::borrow::ToOwned\">ToOwned</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Owned\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../borrow/trait.ToOwned.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = T</h4></section></summary><div class=\"docblock\">The resulting type after obtaining ownership.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88\">source</a><a href=\"#method.to_owned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\">Creates owned data from borrowed data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92\">source</a><a href=\"#method.clone_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#method.clone_into\" class=\"fn\">clone_into</a>(&amp;self, target: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>)</h4></section></summary><div class=\"docblock\">Uses borrowed data to replace owned data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#method.clone_into\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:20:24.450Z"
}