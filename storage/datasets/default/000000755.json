{
	"title": "UniqueRc in std::rc - Rust",
	"url": "https://doc.rust-lang.org/stable/std/rc/struct.UniqueRc.html",
	"markdown": "# UniqueRc in std::rc - Rust\n\n```\npub struct UniqueRc<T> { /* private fields */ }\n```\n\nðŸ”¬This is a nightly-only experimental API. (`unique_rc_arc`Â [#112566](https://github.com/rust-lang/rust/issues/112566))\n\nExpand description\n\nA uniquely owned `Rc`\n\nThis represents an `Rc` that is known to be uniquely owned â€“ that is, have exactly one strong reference. Multiple weak pointers can be created, but attempts to upgrade those to strong references will fail unless the `UniqueRc` they point to has been converted into a regular `Rc`.\n\nBecause they are uniquely owned, the contents of a `UniqueRc` can be freely mutated. A common use case is to have an object be mutable during its initialization phase but then have it become immutable and converted to a normal `Rc`.\n\nThis can be used as a flexible way to create cyclic data structures, as in the example below.\n\n```\n#![feature(unique_rc_arc)]\nuse std::rc::{Rc, Weak, UniqueRc};\n\nstruct Gadget {\n    #[allow(dead_code)]\n    me: Weak<Gadget>,\n}\n\nfn create_gadget() -> Option<Rc<Gadget>> {\n    let mut rc = UniqueRc::new(Gadget {\n        me: Weak::new(),\n    });\n    rc.me = UniqueRc::downgrade(&rc);\n    Some(UniqueRc::into_rc(rc))\n}\n\ncreate_gadget().unwrap();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(unique_rc_arc)%5D%0Afn+main()+%7B%0A++++use+std::rc::%7BRc,+Weak,+UniqueRc%7D;%0A++++%0A++++struct+Gadget+%7B%0A++++++++%23%5Ballow(dead_code)%5D%0A++++++++me:+Weak%3CGadget%3E,%0A++++%7D%0A++++%0A++++fn+create_gadget()+-%3E+Option%3CRc%3CGadget%3E%3E+%7B%0A++++++++let+mut+rc+=+UniqueRc::new(Gadget+%7B%0A++++++++++++me:+Weak::new(),%0A++++++++%7D);%0A++++++++rc.me+=+UniqueRc::downgrade(%26rc);%0A++++++++Some(UniqueRc::into_rc(rc))%0A++++%7D%0A++++%0A++++create_gadget().unwrap();%0A%7D&version=nightly&edition=2021)\n\nAn advantage of using `UniqueRc` over [`Rc::new_cyclic`](about:blank/struct.Rc.html#method.new_cyclic \"associated function std::rc::Rc::new_cyclic\") to build cyclic data structures is that [`Rc::new_cyclic`](about:blank/struct.Rc.html#method.new_cyclic \"associated function std::rc::Rc::new_cyclic\")â€™s `data_fn` parameter cannot be async or return a [`Result`](../result/enum.Result.html \"enum std::result::Result\"). As shown in the previous example, `UniqueRc` allows for more flexibility in the construction of cyclic data, including fallible or async constructors.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/rc.rs.html#3562)[Â§](#impl-UniqueRc%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/rc.rs.html#3571)\n\nðŸ”¬This is a nightly-only experimental API. (`unique_rc_arc`Â [#112566](https://github.com/rust-lang/rust/issues/112566))\n\nCreates a new `UniqueRc`\n\nWeak references to this `UniqueRc` can be created with [`UniqueRc::downgrade`](about:blank/struct.UniqueRc.html#method.downgrade \"associated function std::rc::UniqueRc::downgrade\"). Upgrading these weak references will fail before the `UniqueRc` has been converted into an [`Rc`](struct.Rc.html \"struct std::rc::Rc\"). After converting the `UniqueRc` into an [`Rc`](struct.Rc.html \"struct std::rc::Rc\"), any weak references created beforehand will point to the new [`Rc`](struct.Rc.html \"struct std::rc::Rc\").\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/rc.rs.html#3590)\n\nðŸ”¬This is a nightly-only experimental API. (`unique_rc_arc`Â [#112566](https://github.com/rust-lang/rust/issues/112566))\n\nCreates a new weak reference to the `UniqueRc`\n\nAttempting to upgrade this weak reference will fail before the `UniqueRc` has been converted to a [`Rc`](struct.Rc.html \"struct std::rc::Rc\") using [`UniqueRc::into_rc`](about:blank/struct.UniqueRc.html#method.into_rc \"associated function std::rc::UniqueRc::into_rc\").\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/rc.rs.html#3607)\n\nðŸ”¬This is a nightly-only experimental API. (`unique_rc_arc`Â [#112566](https://github.com/rust-lang/rust/issues/112566))\n\nConverts the `UniqueRc` into a regular [`Rc`](struct.Rc.html \"struct std::rc::Rc\")\n\nThis consumes the `UniqueRc` and returns a regular [`Rc`](struct.Rc.html \"struct std::rc::Rc\") that contains the `value` that is passed to `into_rc`.\n\nAny weak references created before this method is called can now be upgraded to strong references.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[Â§](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[Â§](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[Â§](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[Â§](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[Â§](#method.from)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[Â§](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[Â§](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[Â§](#impl-TryFrom%3CU%3E-for-T)\n\n[Â§](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[Â§](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[Â§](#impl-TryInto%3CU%3E-for-T)\n\n[Â§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[Â§](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A uniquely owned `Rc`\"><title>UniqueRc in std::rc - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">UniqueRc</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">UniqueRc</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.downgrade\">downgrade</a></li><li><a href=\"#method.into_rc\">into_rc</a></li><li><a href=\"#method.new\">new</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-Debug-for-UniqueRc%3CT%3E\">Debug</a></li><li><a href=\"#impl-Deref-for-UniqueRc%3CT%3E\">Deref</a></li><li><a href=\"#impl-DerefMut-for-UniqueRc%3CT%3E\">DerefMut</a></li><li><a href=\"#impl-Drop-for-UniqueRc%3CT%3E\">Drop</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-RefUnwindSafe-for-UniqueRc%3CT%3E\">!RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-UniqueRc%3CT%3E\">!Send</a></li><li><a href=\"#impl-Sync-for-UniqueRc%3CT%3E\">!Sync</a></li><li><a href=\"#impl-UnwindSafe-for-UniqueRc%3CT%3E\">!UnwindSafe</a></li><li><a href=\"#impl-Freeze-for-UniqueRc%3CT%3E\">Freeze</a></li><li><a href=\"#impl-Unpin-for-UniqueRc%3CT%3E\">Unpin</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::rc</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Rc.html\">Rc</a></li><li><a href=\"struct.UniqueRc.html\">UniqueRc</a></li><li><a href=\"struct.Weak.html\">Weak</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type â€˜Sâ€™ or â€˜/â€™ to search, â€˜?â€™ for more optionsâ€¦\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">rc</a>::<wbr><a class=\"struct\" href=\"#\">UniqueRc</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/rc.rs.html#3557\">source</a> Â· <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>âˆ’</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct UniqueRc&lt;T&gt; { <span class=\"comment\">/* private fields */</span> }</code></pre><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>unique_rc_arc</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/112566\">#112566</a>)</span></div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A uniquely owned <code>Rc</code></p>\n<p>This represents an <code>Rc</code> that is known to be uniquely owned â€“ that is, have exactly one strong\nreference. Multiple weak pointers can be created, but attempts to upgrade those to strong\nreferences will fail unless the <code>UniqueRc</code> they point to has been converted into a regular <code>Rc</code>.</p>\n<p>Because they are uniquely owned, the contents of a <code>UniqueRc</code> can be freely mutated. A common\nuse case is to have an object be mutable during its initialization phase but then have it become\nimmutable and converted to a normal <code>Rc</code>.</p>\n<p>This can be used as a flexible way to create cyclic data structures, as in the example below.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(unique_rc_arc)]\n</span><span class=\"kw\">use </span>std::rc::{Rc, Weak, UniqueRc};\n\n<span class=\"kw\">struct </span>Gadget {\n    <span class=\"attr\">#[allow(dead_code)]\n    </span>me: Weak&lt;Gadget&gt;,\n}\n\n<span class=\"kw\">fn </span>create_gadget() -&gt; <span class=\"prelude-ty\">Option</span>&lt;Rc&lt;Gadget&gt;&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rc = UniqueRc::new(Gadget {\n        me: Weak::new(),\n    });\n    rc.me = UniqueRc::downgrade(<span class=\"kw-2\">&amp;</span>rc);\n    <span class=\"prelude-val\">Some</span>(UniqueRc::into_rc(rc))\n}\n\ncreate_gadget().unwrap();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(unique_rc_arc)%5D%0Afn+main()+%7B%0A++++use+std::rc::%7BRc,+Weak,+UniqueRc%7D;%0A++++%0A++++struct+Gadget+%7B%0A++++++++%23%5Ballow(dead_code)%5D%0A++++++++me:+Weak%3CGadget%3E,%0A++++%7D%0A++++%0A++++fn+create_gadget()+-%3E+Option%3CRc%3CGadget%3E%3E+%7B%0A++++++++let+mut+rc+=+UniqueRc::new(Gadget+%7B%0A++++++++++++me:+Weak::new(),%0A++++++++%7D);%0A++++++++rc.me+=+UniqueRc::downgrade(%26rc);%0A++++++++Some(UniqueRc::into_rc(rc))%0A++++%7D%0A++++%0A++++create_gadget().unwrap();%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p>An advantage of using <code>UniqueRc</code> over <a href=\"struct.Rc.html#method.new_cyclic\" title=\"associated function std::rc::Rc::new_cyclic\"><code>Rc::new_cyclic</code></a> to build cyclic data structures is that\n<a href=\"struct.Rc.html#method.new_cyclic\" title=\"associated function std::rc::Rc::new_cyclic\"><code>Rc::new_cyclic</code></a>â€™s <code>data_fn</code> parameter cannot be async or return a <a href=\"../result/enum.Result.html\" title=\"enum std::result::Result\"><code>Result</code></a>. As shown in the\nprevious example, <code>UniqueRc</code> allows for more flexibility in the construction of cyclic data,\nincluding fallible or async constructors.</p>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">Â§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-UniqueRc%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/rc.rs.html#3562\">source</a><a href=\"#impl-UniqueRc%3CT%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"struct.UniqueRc.html\" title=\"struct std::rc::UniqueRc\">UniqueRc</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/rc.rs.html#3571\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.new\" class=\"fn\">new</a>(value: T) -&gt; <a class=\"struct\" href=\"struct.UniqueRc.html\" title=\"struct std::rc::UniqueRc\">UniqueRc</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>unique_rc_arc</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/112566\">#112566</a>)</span></div></span></summary><div class=\"docblock\"><p>Creates a new <code>UniqueRc</code></p>\n<p>Weak references to this <code>UniqueRc</code> can be created with <a href=\"struct.UniqueRc.html#method.downgrade\" title=\"associated function std::rc::UniqueRc::downgrade\"><code>UniqueRc::downgrade</code></a>. Upgrading\nthese weak references will fail before the <code>UniqueRc</code> has been converted into an <a href=\"struct.Rc.html\" title=\"struct std::rc::Rc\"><code>Rc</code></a>.\nAfter converting the <code>UniqueRc</code> into an <a href=\"struct.Rc.html\" title=\"struct std::rc::Rc\"><code>Rc</code></a>, any weak references created beforehand will\npoint to the new <a href=\"struct.Rc.html\" title=\"struct std::rc::Rc\"><code>Rc</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.downgrade\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/rc.rs.html#3590\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.downgrade\" class=\"fn\">downgrade</a>(this: &amp;<a class=\"struct\" href=\"struct.UniqueRc.html\" title=\"struct std::rc::UniqueRc\">UniqueRc</a>&lt;T&gt;) -&gt; <a class=\"struct\" href=\"struct.Weak.html\" title=\"struct std::rc::Weak\">Weak</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>unique_rc_arc</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/112566\">#112566</a>)</span></div></span></summary><div class=\"docblock\"><p>Creates a new weak reference to the <code>UniqueRc</code></p>\n<p>Attempting to upgrade this weak reference will fail before the <code>UniqueRc</code> has been converted\nto a <a href=\"struct.Rc.html\" title=\"struct std::rc::Rc\"><code>Rc</code></a> using <a href=\"struct.UniqueRc.html#method.into_rc\" title=\"associated function std::rc::UniqueRc::into_rc\"><code>UniqueRc::into_rc</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_rc\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/rc.rs.html#3607\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.into_rc\" class=\"fn\">into_rc</a>(this: <a class=\"struct\" href=\"struct.UniqueRc.html\" title=\"struct std::rc::UniqueRc\">UniqueRc</a>&lt;T&gt;) -&gt; <a class=\"struct\" href=\"struct.Rc.html\" title=\"struct std::rc::Rc\">Rc</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>unique_rc_arc</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/112566\">#112566</a>)</span></div></span></summary><div class=\"docblock\"><p>Converts the <code>UniqueRc</code> into a regular <a href=\"struct.Rc.html\" title=\"struct std::rc::Rc\"><code>Rc</code></a></p>\n<p>This consumes the <code>UniqueRc</code> and returns a regular <a href=\"struct.Rc.html\" title=\"struct std::rc::Rc\"><code>Rc</code></a> that contains the <code>value</code> that\nis passed to <code>into_rc</code>.</p>\n<p>Any weak references created before this method is called can now be upgraded to strong\nreferences.</p>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">Â§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-UniqueRc%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/rc.rs.html#3556\">source</a><a href=\"#impl-Debug-for-UniqueRc%3CT%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.UniqueRc.html\" title=\"struct std::rc::UniqueRc\">UniqueRc</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/rc.rs.html#3556\">source</a><a href=\"#method.fmt\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Deref-for-UniqueRc%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/rc.rs.html#3619\">source</a><a href=\"#impl-Deref-for-UniqueRc%3CT%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../ops/trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a> for <a class=\"struct\" href=\"struct.UniqueRc.html\" title=\"struct std::rc::UniqueRc\">UniqueRc</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Deref.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = T</h4></section></summary><div class=\"docblock\">The resulting type after dereferencing.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.deref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/rc.rs.html#3622\">source</a><a href=\"#method.deref\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Deref.html#tymethod.deref\" class=\"fn\">deref</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Dereferences the value.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-DerefMut-for-UniqueRc%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/rc.rs.html#3629\">source</a><a href=\"#impl-DerefMut-for-UniqueRc%3CT%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../ops/trait.DerefMut.html\" title=\"trait std::ops::DerefMut\">DerefMut</a> for <a class=\"struct\" href=\"struct.UniqueRc.html\" title=\"struct std::rc::UniqueRc\">UniqueRc</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.deref_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/rc.rs.html#3630\">source</a><a href=\"#method.deref_mut\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.DerefMut.html#tymethod.deref_mut\" class=\"fn\">deref_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably dereferences the value.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Drop-for-UniqueRc%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/rc.rs.html#3639\">source</a><a href=\"#impl-Drop-for-UniqueRc%3CT%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../ops/trait.Drop.html\" title=\"trait std::ops::Drop\">Drop</a> for <a class=\"struct\" href=\"struct.UniqueRc.html\" title=\"struct std::rc::UniqueRc\">UniqueRc</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.drop\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/rc.rs.html#3640\">source</a><a href=\"#method.drop\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\">Executes the destructor for this type. <a href=\"../ops/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">Â§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-UniqueRc%3CT%3E\" class=\"impl\"><a href=\"#impl-Freeze-for-UniqueRc%3CT%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.UniqueRc.html\" title=\"struct std::rc::UniqueRc\">UniqueRc</a>&lt;T&gt;</h3></section><section id=\"impl-RefUnwindSafe-for-UniqueRc%3CT%3E\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-UniqueRc%3CT%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; !<a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.UniqueRc.html\" title=\"struct std::rc::UniqueRc\">UniqueRc</a>&lt;T&gt;</h3></section><section id=\"impl-Send-for-UniqueRc%3CT%3E\" class=\"impl\"><a href=\"#impl-Send-for-UniqueRc%3CT%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; !<a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.UniqueRc.html\" title=\"struct std::rc::UniqueRc\">UniqueRc</a>&lt;T&gt;</h3></section><section id=\"impl-Sync-for-UniqueRc%3CT%3E\" class=\"impl\"><a href=\"#impl-Sync-for-UniqueRc%3CT%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; !<a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.UniqueRc.html\" title=\"struct std::rc::UniqueRc\">UniqueRc</a>&lt;T&gt;</h3></section><section id=\"impl-Unpin-for-UniqueRc%3CT%3E\" class=\"impl\"><a href=\"#impl-Unpin-for-UniqueRc%3CT%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.UniqueRc.html\" title=\"struct std::rc::UniqueRc\">UniqueRc</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a>,</div></h3></section><section id=\"impl-UnwindSafe-for-UniqueRc%3CT%3E\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-UniqueRc%3CT%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; !<a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.UniqueRc.html\" title=\"struct std::rc::UniqueRc\">UniqueRc</a>&lt;T&gt;</h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">Â§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:13:21.307Z"
}