{
	"title": "spin_loop in std::hint - Rust",
	"url": "https://doc.rust-lang.org/stable/std/hint/fn.spin_loop.html",
	"markdown": "# spin\\_loop in std::hint - Rust\n\n## Function [std](../index.html)::[hint](index.html)::[spin\\_loop](#)\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/hint.rs.html#217) ·\n\n```\npub fn spin_loop()\n```\n\nExpand description\n\nEmits a machine instruction to signal the processor that it is running in a busy-wait spin-loop (“spin lock”).\n\nUpon receiving the spin-loop signal the processor can optimize its behavior by, for example, saving power or switching hyper-threads.\n\nThis function is different from [`thread::yield_now`](../../std/thread/fn.yield_now.html) which directly yields to the system’s scheduler, whereas `spin_loop` does not interact with the operating system.\n\nA common use case for `spin_loop` is implementing bounded optimistic spinning in a CAS loop in synchronization primitives. To avoid problems like priority inversion, it is strongly recommended that the spin loop is terminated after a finite amount of iterations and an appropriate blocking syscall is made.\n\n**Note**: On platforms that do not support receiving spin-loop hints this function does not do anything at all.\n\n## [§](#examples)Examples\n\n```\nuse std::sync::atomic::{AtomicBool, Ordering};\nuse std::sync::Arc;\nuse std::{hint, thread};\n\n// A shared atomic value that threads will use to coordinate\nlet live = Arc::new(AtomicBool::new(false));\n\n// In a background thread we'll eventually set the value\nlet bg_work = {\n    let live = live.clone();\n    thread::spawn(move || {\n        // Do some work, then make the value live\n        do_some_work();\n        live.store(true, Ordering::Release);\n    })\n};\n\n// Back on our current thread, we wait for the value to be set\nwhile !live.load(Ordering::Acquire) {\n    // The spin loop is a hint to the CPU that we're waiting, but probably\n    // not for very long\n    hint::spin_loop();\n}\n\n// The value is now set\ndo_some_work();\nbg_work.join()?;\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B+fn+_inner()+-%3E+Result%3C(),+impl+core::fmt::Debug%3E+%7B%0A++++use+std::sync::atomic::%7BAtomicBool,+Ordering%7D;%0A++++use+std::sync::Arc;%0A++++use+std::%7Bhint,+thread%7D;%0A++++%0A++++//+A+shared+atomic+value+that+threads+will+use+to+coordinate%0A++++let+live+=+Arc::new(AtomicBool::new(false));%0A++++%0A++++//+In+a+background+thread+we%27ll+eventually+set+the+value%0A++++let+bg_work+=+%7B%0A++++++++let+live+=+live.clone();%0A++++++++thread::spawn(move+%7C%7C+%7B%0A++++++++++++//+Do+some+work,+then+make+the+value+live%0A++++++++++++do_some_work();%0A++++++++++++live.store(true,+Ordering::Release);%0A++++++++%7D)%0A++++%7D;%0A++++%0A++++//+Back+on+our+current+thread,+we+wait+for+the+value+to+be+set%0A++++while+!live.load(Ordering::Acquire)+%7B%0A++++++++//+The+spin+loop+is+a+hint+to+the+CPU+that+we%27re+waiting,+but+probably%0A++++++++//+not+for+very+long%0A++++++++hint::spin_loop();%0A++++%7D%0A++++%0A++++//+The+value+is+now+set%0A++++fn+do_some_work()+%7B%7D%0A++++do_some_work();%0A++++bg_work.join()?;%0A++++Ok::%3C(),+Box%3Cdyn+core::any::Any+%2B+Send+%2B+%27static%3E%3E(())%0A%7D+_inner().unwrap()+%7D&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Emits a machine instruction to signal the processor that it is running in a busy-wait spin-loop (“spin lock”).\"><title>spin_loop in std::hint - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc fn\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h2><a href=\"index.html\">In std::hint</a></h2><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.assert_unchecked.html\">assert_unchecked</a></li><li><a href=\"fn.black_box.html\">black_box</a></li><li><a href=\"fn.must_use.html\">must_use</a></li><li><a href=\"fn.spin_loop.html\">spin_loop</a></li><li><a href=\"fn.unreachable_unchecked.html\">unreachable_unchecked</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Function <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">hint</a>::<wbr><a class=\"fn\" href=\"#\">spin_loop</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hint.rs.html#217\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub fn spin_loop()</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Emits a machine instruction to signal the processor that it is running in\na busy-wait spin-loop (“spin lock”).</p>\n<p>Upon receiving the spin-loop signal the processor can optimize its behavior by,\nfor example, saving power or switching hyper-threads.</p>\n<p>This function is different from <a href=\"../../std/thread/fn.yield_now.html\"><code>thread::yield_now</code></a> which directly\nyields to the system’s scheduler, whereas <code>spin_loop</code> does not interact\nwith the operating system.</p>\n<p>A common use case for <code>spin_loop</code> is implementing bounded optimistic\nspinning in a CAS loop in synchronization primitives. To avoid problems\nlike priority inversion, it is strongly recommended that the spin loop is\nterminated after a finite amount of iterations and an appropriate blocking\nsyscall is made.</p>\n<p><strong>Note</strong>: On platforms that do not support receiving spin-loop hints this\nfunction does not do anything at all.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::atomic::{AtomicBool, Ordering};\n<span class=\"kw\">use </span>std::sync::Arc;\n<span class=\"kw\">use </span>std::{hint, thread};\n\n<span class=\"comment\">// A shared atomic value that threads will use to coordinate\n</span><span class=\"kw\">let </span>live = Arc::new(AtomicBool::new(<span class=\"bool-val\">false</span>));\n\n<span class=\"comment\">// In a background thread we'll eventually set the value\n</span><span class=\"kw\">let </span>bg_work = {\n    <span class=\"kw\">let </span>live = live.clone();\n    thread::spawn(<span class=\"kw\">move </span>|| {\n        <span class=\"comment\">// Do some work, then make the value live\n        </span>do_some_work();\n        live.store(<span class=\"bool-val\">true</span>, Ordering::Release);\n    })\n};\n\n<span class=\"comment\">// Back on our current thread, we wait for the value to be set\n</span><span class=\"kw\">while </span>!live.load(Ordering::Acquire) {\n    <span class=\"comment\">// The spin loop is a hint to the CPU that we're waiting, but probably\n    // not for very long\n    </span>hint::spin_loop();\n}\n\n<span class=\"comment\">// The value is now set\n</span>do_some_work();\nbg_work.join()<span class=\"question-mark\">?</span>;</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B+fn+_inner()+-%3E+Result%3C(),+impl+core::fmt::Debug%3E+%7B%0A++++use+std::sync::atomic::%7BAtomicBool,+Ordering%7D;%0A++++use+std::sync::Arc;%0A++++use+std::%7Bhint,+thread%7D;%0A++++%0A++++//+A+shared+atomic+value+that+threads+will+use+to+coordinate%0A++++let+live+=+Arc::new(AtomicBool::new(false));%0A++++%0A++++//+In+a+background+thread+we'll+eventually+set+the+value%0A++++let+bg_work+=+%7B%0A++++++++let+live+=+live.clone();%0A++++++++thread::spawn(move+%7C%7C+%7B%0A++++++++++++//+Do+some+work,+then+make+the+value+live%0A++++++++++++do_some_work();%0A++++++++++++live.store(true,+Ordering::Release);%0A++++++++%7D)%0A++++%7D;%0A++++%0A++++//+Back+on+our+current+thread,+we+wait+for+the+value+to+be+set%0A++++while+!live.load(Ordering::Acquire)+%7B%0A++++++++//+The+spin+loop+is+a+hint+to+the+CPU+that+we're+waiting,+but+probably%0A++++++++//+not+for+very+long%0A++++++++hint::spin_loop();%0A++++%7D%0A++++%0A++++//+The+value+is+now+set%0A++++fn+do_some_work()+%7B%7D%0A++++do_some_work();%0A++++bg_work.join()?;%0A++++Ok::%3C(),+Box%3Cdyn+core::any::Any+%2B+Send+%2B+'static%3E%3E(())%0A%7D+_inner().unwrap()+%7D&amp;edition=2021\">Run</a></div>\n</div></details></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:23:17.578Z"
}