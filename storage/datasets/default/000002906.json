{
	"title": "SyncSender in std::sync::mpsc - Rust",
	"url": "https://doc.rust-lang.org/stable/std/sync/mpsc/struct.SyncSender.html",
	"markdown": "# SyncSender in std::sync::mpsc - Rust\n\n```\npub struct SyncSender<T> { /* private fields */ }\n```\n\nExpand description\n\nThe sending-half of Rust’s synchronous [`sync_channel`](fn.sync_channel.html \"fn std::sync::mpsc::sync_channel\") type.\n\nMessages can be sent through this channel with [`send`](about:blank/struct.SyncSender.html#method.send \"method std::sync::mpsc::SyncSender::send\") or [`try_send`](about:blank/struct.SyncSender.html#method.try_send \"method std::sync::mpsc::SyncSender::try_send\").\n\n[`send`](about:blank/struct.SyncSender.html#method.send \"method std::sync::mpsc::SyncSender::send\") will block if there is no space in the internal buffer.\n\n## [§](#examples)Examples\n\n```\nuse std::sync::mpsc::sync_channel;\nuse std::thread;\n\n// Create a sync_channel with buffer size 2\nlet (sync_sender, receiver) = sync_channel(2);\nlet sync_sender2 = sync_sender.clone();\n\n// First thread owns sync_sender\nthread::spawn(move || {\n    sync_sender.send(1).unwrap();\n    sync_sender.send(2).unwrap();\n});\n\n// Second thread owns sync_sender2\nthread::spawn(move || {\n    sync_sender2.send(3).unwrap();\n    // thread will now block since the buffer is full\n    println!(\"Thread unblocked!\");\n});\n\nlet mut msg;\n\nmsg = receiver.recv().unwrap();\nprintln!(\"message {msg} received\");\n\n// \"Thread unblocked!\" will be printed now\n\nmsg = receiver.recv().unwrap();\nprintln!(\"message {msg} received\");\n\nmsg = receiver.recv().unwrap();\n\nprintln!(\"message {msg} received\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::mpsc::sync_channel;%0A++++use+std::thread;%0A++++%0A++++//+Create+a+sync_channel+with+buffer+size+2%0A++++let+(sync_sender,+receiver)+=+sync_channel(2);%0A++++let+sync_sender2+=+sync_sender.clone();%0A++++%0A++++//+First+thread+owns+sync_sender%0A++++thread::spawn(move+%7C%7C+%7B%0A++++++++sync_sender.send(1).unwrap();%0A++++++++sync_sender.send(2).unwrap();%0A++++%7D);%0A++++%0A++++//+Second+thread+owns+sync_sender2%0A++++thread::spawn(move+%7C%7C+%7B%0A++++++++sync_sender2.send(3).unwrap();%0A++++++++//+thread+will+now+block+since+the+buffer+is+full%0A++++++++println!(%22Thread+unblocked!%22);%0A++++%7D);%0A++++%0A++++let+mut+msg;%0A++++%0A++++msg+=+receiver.recv().unwrap();%0A++++println!(%22message+%7Bmsg%7D+received%22);%0A++++%0A++++//+%22Thread+unblocked!%22+will+be+printed+now%0A++++%0A++++msg+=+receiver.recv().unwrap();%0A++++println!(%22message+%7Bmsg%7D+received%22);%0A++++%0A++++msg+=+receiver.recv().unwrap();%0A++++%0A++++println!(%22message+%7Bmsg%7D+received%22);%0A%7D&edition=2021)\n\n[source](about:blank/src/std/sync/mpsc/mod.rs.html#640-744)[§](#impl-SyncSender%3CT%3E)\n\n1.0.0 · [source](about:blank/src/std/sync/mpsc/mod.rs.html#678-680)\n\nSends a value on this synchronous channel.\n\nThis function will _block_ until space in the internal buffer becomes available or a receiver is available to hand off the message to.\n\nNote that a successful send does _not_ guarantee that the receiver will ever see the data if there is a buffer on this channel. Items may be enqueued in the internal buffer for the receiver to receive at a later time. If the buffer size is 0, however, the channel becomes a rendezvous channel and it guarantees that the receiver has indeed received the data if this function returns success.\n\nThis function will never panic, but it may return [`Err`](about:blank/result/enum.Result.html#variant.Err \"variant std::result::Result::Err\") if the [`Receiver`](struct.Receiver.html \"struct std::sync::mpsc::Receiver\") has disconnected and is no longer able to receive information.\n\n##### [§](#examples-1)Examples\n\n```\nuse std::sync::mpsc::sync_channel;\nuse std::thread;\n\n// Create a rendezvous sync_channel with buffer size 0\nlet (sync_sender, receiver) = sync_channel(0);\n\nthread::spawn(move || {\n   println!(\"sending message...\");\n   sync_sender.send(1).unwrap();\n   // Thread is now blocked until the message is received\n\n   println!(\"...message received!\");\n});\n\nlet msg = receiver.recv().unwrap();\nassert_eq!(1, msg);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::mpsc::sync_channel;%0A++++use+std::thread;%0A++++%0A++++//+Create+a+rendezvous+sync_channel+with+buffer+size+0%0A++++let+(sync_sender,+receiver)+=+sync_channel(0);%0A++++%0A++++thread::spawn(move+%7C%7C+%7B%0A+++++++println!(%22sending+message...%22);%0A+++++++sync_sender.send(1).unwrap();%0A+++++++//+Thread+is+now+blocked+until+the+message+is+received%0A++++%0A+++++++println!(%22...message+received!%22);%0A++++%7D);%0A++++%0A++++let+msg+=+receiver.recv().unwrap();%0A++++assert_eq!(1,+msg);%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/sync/mpsc/mod.rs.html#732-734)\n\nAttempts to send a value on this channel without blocking.\n\nThis method differs from [`send`](about:blank/struct.SyncSender.html#method.send \"method std::sync::mpsc::SyncSender::send\") by returning immediately if the channel’s buffer is full or no receiver is waiting to acquire some data. Compared with [`send`](about:blank/struct.SyncSender.html#method.send \"method std::sync::mpsc::SyncSender::send\"), this function has two failure cases instead of one (one for disconnection, one for a full buffer).\n\nSee [`send`](about:blank/struct.SyncSender.html#method.send \"method std::sync::mpsc::SyncSender::send\") for notes about guarantees of whether the receiver has received the data or not if this function is successful.\n\n##### [§](#examples-2)Examples\n\n```\nuse std::sync::mpsc::sync_channel;\nuse std::thread;\n\n// Create a sync_channel with buffer size 1\nlet (sync_sender, receiver) = sync_channel(1);\nlet sync_sender2 = sync_sender.clone();\n\n// First thread owns sync_sender\nthread::spawn(move || {\n    sync_sender.send(1).unwrap();\n    sync_sender.send(2).unwrap();\n    // Thread blocked\n});\n\n// Second thread owns sync_sender2\nthread::spawn(move || {\n    // This will return an error and send\n    // no message if the buffer is full\n    let _ = sync_sender2.try_send(3);\n});\n\nlet mut msg;\nmsg = receiver.recv().unwrap();\nprintln!(\"message {msg} received\");\n\nmsg = receiver.recv().unwrap();\nprintln!(\"message {msg} received\");\n\n// Third message may have never been sent\nmatch receiver.try_recv() {\n    Ok(msg) => println!(\"message {msg} received\"),\n    Err(_) => println!(\"the third message was never sent\"),\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::mpsc::sync_channel;%0A++++use+std::thread;%0A++++%0A++++//+Create+a+sync_channel+with+buffer+size+1%0A++++let+(sync_sender,+receiver)+=+sync_channel(1);%0A++++let+sync_sender2+=+sync_sender.clone();%0A++++%0A++++//+First+thread+owns+sync_sender%0A++++thread::spawn(move+%7C%7C+%7B%0A++++++++sync_sender.send(1).unwrap();%0A++++++++sync_sender.send(2).unwrap();%0A++++++++//+Thread+blocked%0A++++%7D);%0A++++%0A++++//+Second+thread+owns+sync_sender2%0A++++thread::spawn(move+%7C%7C+%7B%0A++++++++//+This+will+return+an+error+and+send%0A++++++++//+no+message+if+the+buffer+is+full%0A++++++++let+_+=+sync_sender2.try_send(3);%0A++++%7D);%0A++++%0A++++let+mut+msg;%0A++++msg+=+receiver.recv().unwrap();%0A++++println!(%22message+%7Bmsg%7D+received%22);%0A++++%0A++++msg+=+receiver.recv().unwrap();%0A++++println!(%22message+%7Bmsg%7D+received%22);%0A++++%0A++++//+Third+message+may+have+never+been+sent%0A++++match+receiver.try_recv()+%7B%0A++++++++Ok(msg)+=%3E+println!(%22message+%7Bmsg%7D+received%22),%0A++++++++Err(_)+=%3E+println!(%22the+third+message+was+never+sent%22),%0A++++%7D%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[§](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[§](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[§](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[§](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[§](#method.from)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[§](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[§](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85)[§](#impl-ToOwned-for-T)\n\n[§](#associatedtype.Owned)\n\nThe resulting type after obtaining ownership.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88)[§](#method.to_owned)\n\nCreates owned data from borrowed data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#tymethod.to_owned)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92)[§](#method.clone_into)\n\nUses borrowed data to replace owned data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#method.clone_into)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[§](#impl-TryFrom%3CU%3E-for-T)\n\n[§](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[§](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[§](#impl-TryInto%3CU%3E-for-T)\n\n[§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[§](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"The sending-half of Rust’s synchronous `sync_channel` type.\"><title>SyncSender in std::sync::mpsc - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../../\" data-static-root-path=\"../../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">SyncSender</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">SyncSender</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.send\">send</a></li><li><a href=\"#method.try_send\">try_send</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-Clone-for-SyncSender%3CT%3E\">Clone</a></li><li><a href=\"#impl-Debug-for-SyncSender%3CT%3E\">Debug</a></li><li><a href=\"#impl-Send-for-SyncSender%3CT%3E\">Send</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-SyncSender%3CT%3E\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-SyncSender%3CT%3E\">RefUnwindSafe</a></li><li><a href=\"#impl-Sync-for-SyncSender%3CT%3E\">Sync</a></li><li><a href=\"#impl-Unpin-for-SyncSender%3CT%3E\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-SyncSender%3CT%3E\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-ToOwned-for-T\">ToOwned</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::sync::mpsc</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.IntoIter.html\">IntoIter</a></li><li><a href=\"struct.Iter.html\">Iter</a></li><li><a href=\"struct.Receiver.html\">Receiver</a></li><li><a href=\"struct.RecvError.html\">RecvError</a></li><li><a href=\"struct.SendError.html\">SendError</a></li><li><a href=\"struct.Sender.html\">Sender</a></li><li><a href=\"struct.SyncSender.html\">SyncSender</a></li><li><a href=\"struct.TryIter.html\">TryIter</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.RecvTimeoutError.html\">RecvTimeoutError</a></li><li><a href=\"enum.TryRecvError.html\">TryRecvError</a></li><li><a href=\"enum.TrySendError.html\">TrySendError</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.channel.html\">channel</a></li><li><a href=\"fn.sync_channel.html\">sync_channel</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../../index.html\">std</a>::<wbr><a href=\"../index.html\">sync</a>::<wbr><a href=\"index.html\">mpsc</a>::<wbr><a class=\"struct\" href=\"#\">SyncSender</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../../src/std/sync/mpsc/mod.rs.html#399-401\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct SyncSender&lt;T&gt; { <span class=\"comment\">/* private fields */</span> }</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>The sending-half of Rust’s synchronous <a href=\"fn.sync_channel.html\" title=\"fn std::sync::mpsc::sync_channel\"><code>sync_channel</code></a> type.</p>\n<p>Messages can be sent through this channel with <a href=\"struct.SyncSender.html#method.send\" title=\"method std::sync::mpsc::SyncSender::send\"><code>send</code></a> or <a href=\"struct.SyncSender.html#method.try_send\" title=\"method std::sync::mpsc::SyncSender::try_send\"><code>try_send</code></a>.</p>\n<p><a href=\"struct.SyncSender.html#method.send\" title=\"method std::sync::mpsc::SyncSender::send\"><code>send</code></a> will block if there is no space in the internal buffer.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::mpsc::sync_channel;\n<span class=\"kw\">use </span>std::thread;\n\n<span class=\"comment\">// Create a sync_channel with buffer size 2\n</span><span class=\"kw\">let </span>(sync_sender, receiver) = sync_channel(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>sync_sender2 = sync_sender.clone();\n\n<span class=\"comment\">// First thread owns sync_sender\n</span>thread::spawn(<span class=\"kw\">move </span>|| {\n    sync_sender.send(<span class=\"number\">1</span>).unwrap();\n    sync_sender.send(<span class=\"number\">2</span>).unwrap();\n});\n\n<span class=\"comment\">// Second thread owns sync_sender2\n</span>thread::spawn(<span class=\"kw\">move </span>|| {\n    sync_sender2.send(<span class=\"number\">3</span>).unwrap();\n    <span class=\"comment\">// thread will now block since the buffer is full\n    </span><span class=\"macro\">println!</span>(<span class=\"string\">\"Thread unblocked!\"</span>);\n});\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>msg;\n\nmsg = receiver.recv().unwrap();\n<span class=\"macro\">println!</span>(<span class=\"string\">\"message {msg} received\"</span>);\n\n<span class=\"comment\">// \"Thread unblocked!\" will be printed now\n\n</span>msg = receiver.recv().unwrap();\n<span class=\"macro\">println!</span>(<span class=\"string\">\"message {msg} received\"</span>);\n\nmsg = receiver.recv().unwrap();\n\n<span class=\"macro\">println!</span>(<span class=\"string\">\"message {msg} received\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::mpsc::sync_channel;%0A++++use+std::thread;%0A++++%0A++++//+Create+a+sync_channel+with+buffer+size+2%0A++++let+(sync_sender,+receiver)+=+sync_channel(2);%0A++++let+sync_sender2+=+sync_sender.clone();%0A++++%0A++++//+First+thread+owns+sync_sender%0A++++thread::spawn(move+%7C%7C+%7B%0A++++++++sync_sender.send(1).unwrap();%0A++++++++sync_sender.send(2).unwrap();%0A++++%7D);%0A++++%0A++++//+Second+thread+owns+sync_sender2%0A++++thread::spawn(move+%7C%7C+%7B%0A++++++++sync_sender2.send(3).unwrap();%0A++++++++//+thread+will+now+block+since+the+buffer+is+full%0A++++++++println!(%22Thread+unblocked!%22);%0A++++%7D);%0A++++%0A++++let+mut+msg;%0A++++%0A++++msg+=+receiver.recv().unwrap();%0A++++println!(%22message+%7Bmsg%7D+received%22);%0A++++%0A++++//+%22Thread+unblocked!%22+will+be+printed+now%0A++++%0A++++msg+=+receiver.recv().unwrap();%0A++++println!(%22message+%7Bmsg%7D+received%22);%0A++++%0A++++msg+=+receiver.recv().unwrap();%0A++++%0A++++println!(%22message+%7Bmsg%7D+received%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SyncSender%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"../../../src/std/sync/mpsc/mod.rs.html#640-744\">source</a><a href=\"#impl-SyncSender%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"struct.SyncSender.html\" title=\"struct std::sync::mpsc::SyncSender\">SyncSender</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.send\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../../src/std/sync/mpsc/mod.rs.html#678-680\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.send\" class=\"fn\">send</a>(&amp;self, t: T) -&gt; <a class=\"enum\" href=\"../../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"struct.SendError.html\" title=\"struct std::sync::mpsc::SendError\">SendError</a>&lt;T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Sends a value on this synchronous channel.</p>\n<p>This function will <em>block</em> until space in the internal buffer becomes\navailable or a receiver is available to hand off the message to.</p>\n<p>Note that a successful send does <em>not</em> guarantee that the receiver will\never see the data if there is a buffer on this channel. Items may be\nenqueued in the internal buffer for the receiver to receive at a later\ntime. If the buffer size is 0, however, the channel becomes a rendezvous\nchannel and it guarantees that the receiver has indeed received\nthe data if this function returns success.</p>\n<p>This function will never panic, but it may return <a href=\"../../result/enum.Result.html#variant.Err\" title=\"variant std::result::Result::Err\"><code>Err</code></a> if the\n<a href=\"struct.Receiver.html\" title=\"struct std::sync::mpsc::Receiver\"><code>Receiver</code></a> has disconnected and is no longer able to receive\ninformation.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::mpsc::sync_channel;\n<span class=\"kw\">use </span>std::thread;\n\n<span class=\"comment\">// Create a rendezvous sync_channel with buffer size 0\n</span><span class=\"kw\">let </span>(sync_sender, receiver) = sync_channel(<span class=\"number\">0</span>);\n\nthread::spawn(<span class=\"kw\">move </span>|| {\n   <span class=\"macro\">println!</span>(<span class=\"string\">\"sending message...\"</span>);\n   sync_sender.send(<span class=\"number\">1</span>).unwrap();\n   <span class=\"comment\">// Thread is now blocked until the message is received\n\n   </span><span class=\"macro\">println!</span>(<span class=\"string\">\"...message received!\"</span>);\n});\n\n<span class=\"kw\">let </span>msg = receiver.recv().unwrap();\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1</span>, msg);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::mpsc::sync_channel;%0A++++use+std::thread;%0A++++%0A++++//+Create+a+rendezvous+sync_channel+with+buffer+size+0%0A++++let+(sync_sender,+receiver)+=+sync_channel(0);%0A++++%0A++++thread::spawn(move+%7C%7C+%7B%0A+++++++println!(%22sending+message...%22);%0A+++++++sync_sender.send(1).unwrap();%0A+++++++//+Thread+is+now+blocked+until+the+message+is+received%0A++++%0A+++++++println!(%22...message+received!%22);%0A++++%7D);%0A++++%0A++++let+msg+=+receiver.recv().unwrap();%0A++++assert_eq!(1,+msg);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_send\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../../src/std/sync/mpsc/mod.rs.html#732-734\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.try_send\" class=\"fn\">try_send</a>(&amp;self, t: T) -&gt; <a class=\"enum\" href=\"../../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../primitive.unit.html\">()</a>, <a class=\"enum\" href=\"enum.TrySendError.html\" title=\"enum std::sync::mpsc::TrySendError\">TrySendError</a>&lt;T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to send a value on this channel without blocking.</p>\n<p>This method differs from <a href=\"struct.SyncSender.html#method.send\" title=\"method std::sync::mpsc::SyncSender::send\"><code>send</code></a> by returning immediately if the\nchannel’s buffer is full or no receiver is waiting to acquire some\ndata. Compared with <a href=\"struct.SyncSender.html#method.send\" title=\"method std::sync::mpsc::SyncSender::send\"><code>send</code></a>, this function has two failure cases\ninstead of one (one for disconnection, one for a full buffer).</p>\n<p>See <a href=\"struct.SyncSender.html#method.send\" title=\"method std::sync::mpsc::SyncSender::send\"><code>send</code></a> for notes about guarantees of whether the\nreceiver has received the data or not if this function is successful.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::mpsc::sync_channel;\n<span class=\"kw\">use </span>std::thread;\n\n<span class=\"comment\">// Create a sync_channel with buffer size 1\n</span><span class=\"kw\">let </span>(sync_sender, receiver) = sync_channel(<span class=\"number\">1</span>);\n<span class=\"kw\">let </span>sync_sender2 = sync_sender.clone();\n\n<span class=\"comment\">// First thread owns sync_sender\n</span>thread::spawn(<span class=\"kw\">move </span>|| {\n    sync_sender.send(<span class=\"number\">1</span>).unwrap();\n    sync_sender.send(<span class=\"number\">2</span>).unwrap();\n    <span class=\"comment\">// Thread blocked\n</span>});\n\n<span class=\"comment\">// Second thread owns sync_sender2\n</span>thread::spawn(<span class=\"kw\">move </span>|| {\n    <span class=\"comment\">// This will return an error and send\n    // no message if the buffer is full\n    </span><span class=\"kw\">let _ </span>= sync_sender2.try_send(<span class=\"number\">3</span>);\n});\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>msg;\nmsg = receiver.recv().unwrap();\n<span class=\"macro\">println!</span>(<span class=\"string\">\"message {msg} received\"</span>);\n\nmsg = receiver.recv().unwrap();\n<span class=\"macro\">println!</span>(<span class=\"string\">\"message {msg} received\"</span>);\n\n<span class=\"comment\">// Third message may have never been sent\n</span><span class=\"kw\">match </span>receiver.try_recv() {\n    <span class=\"prelude-val\">Ok</span>(msg) =&gt; <span class=\"macro\">println!</span>(<span class=\"string\">\"message {msg} received\"</span>),\n    <span class=\"prelude-val\">Err</span>(<span class=\"kw\">_</span>) =&gt; <span class=\"macro\">println!</span>(<span class=\"string\">\"the third message was never sent\"</span>),\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::mpsc::sync_channel;%0A++++use+std::thread;%0A++++%0A++++//+Create+a+sync_channel+with+buffer+size+1%0A++++let+(sync_sender,+receiver)+=+sync_channel(1);%0A++++let+sync_sender2+=+sync_sender.clone();%0A++++%0A++++//+First+thread+owns+sync_sender%0A++++thread::spawn(move+%7C%7C+%7B%0A++++++++sync_sender.send(1).unwrap();%0A++++++++sync_sender.send(2).unwrap();%0A++++++++//+Thread+blocked%0A++++%7D);%0A++++%0A++++//+Second+thread+owns+sync_sender2%0A++++thread::spawn(move+%7C%7C+%7B%0A++++++++//+This+will+return+an+error+and+send%0A++++++++//+no+message+if+the+buffer+is+full%0A++++++++let+_+=+sync_sender2.try_send(3);%0A++++%7D);%0A++++%0A++++let+mut+msg;%0A++++msg+=+receiver.recv().unwrap();%0A++++println!(%22message+%7Bmsg%7D+received%22);%0A++++%0A++++msg+=+receiver.recv().unwrap();%0A++++println!(%22message+%7Bmsg%7D+received%22);%0A++++%0A++++//+Third+message+may+have+never+been+sent%0A++++match+receiver.try_recv()+%7B%0A++++++++Ok(msg)+=%3E+println!(%22message+%7Bmsg%7D+received%22),%0A++++++++Err(_)+=%3E+println!(%22the+third+message+was+never+sent%22),%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Clone-for-SyncSender%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../../src/std/sync/mpsc/mod.rs.html#747-751\">source</a></span><a href=\"#impl-Clone-for-SyncSender%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"struct.SyncSender.html\" title=\"struct std::sync::mpsc::SyncSender\">SyncSender</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/sync/mpsc/mod.rs.html#748-750\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.SyncSender.html\" title=\"struct std::sync::mpsc::SyncSender\">SyncSender</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\">Returns a copy of the value. <a href=\"../../clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class=\"docblock\">Performs copy-assignment from <code>source</code>. <a href=\"../../clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-SyncSender%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../../src/std/sync/mpsc/mod.rs.html#754-758\">source</a></span><a href=\"#impl-Debug-for-SyncSender%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.SyncSender.html\" title=\"struct std::sync::mpsc::SyncSender\">SyncSender</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../../src/std/sync/mpsc/mod.rs.html#755-757\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../../fmt/type.Result.html\" title=\"type std::fmt::Result\">Result</a></h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><section id=\"impl-Send-for-SyncSender%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../../src/std/sync/mpsc/mod.rs.html#404\">source</a></span><a href=\"#impl-Send-for-SyncSender%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"../../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a>&gt; <a class=\"trait\" href=\"../../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.SyncSender.html\" title=\"struct std::sync::mpsc::SyncSender\">SyncSender</a>&lt;T&gt;</h3></section></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-SyncSender%3CT%3E\" class=\"impl\"><a href=\"#impl-Freeze-for-SyncSender%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.SyncSender.html\" title=\"struct std::sync::mpsc::SyncSender\">SyncSender</a>&lt;T&gt;</h3></section><section id=\"impl-RefUnwindSafe-for-SyncSender%3CT%3E\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-SyncSender%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.SyncSender.html\" title=\"struct std::sync::mpsc::SyncSender\">SyncSender</a>&lt;T&gt;</h3></section><section id=\"impl-Sync-for-SyncSender%3CT%3E\" class=\"impl\"><a href=\"#impl-Sync-for-SyncSender%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.SyncSender.html\" title=\"struct std::sync::mpsc::SyncSender\">SyncSender</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a>,</div></h3></section><section id=\"impl-Unpin-for-SyncSender%3CT%3E\" class=\"impl\"><a href=\"#impl-Unpin-for-SyncSender%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.SyncSender.html\" title=\"struct std::sync::mpsc::SyncSender\">SyncSender</a>&lt;T&gt;</h3></section><section id=\"impl-UnwindSafe-for-SyncSender%3CT%3E\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-SyncSender%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.SyncSender.html\" title=\"struct std::sync::mpsc::SyncSender\">SyncSender</a>&lt;T&gt;</h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToOwned-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85\">source</a><a href=\"#impl-ToOwned-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../borrow/trait.ToOwned.html\" title=\"trait std::borrow::ToOwned\">ToOwned</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Owned\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../borrow/trait.ToOwned.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = T</h4></section></summary><div class=\"docblock\">The resulting type after obtaining ownership.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88\">source</a><a href=\"#method.to_owned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../borrow/trait.ToOwned.html#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\">Creates owned data from borrowed data, usually by cloning. <a href=\"../../borrow/trait.ToOwned.html#tymethod.to_owned\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92\">source</a><a href=\"#method.clone_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../borrow/trait.ToOwned.html#method.clone_into\" class=\"fn\">clone_into</a>(&amp;self, target: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;mut T</a>)</h4></section></summary><div class=\"docblock\">Uses borrowed data to replace owned data, usually by cloning. <a href=\"../../borrow/trait.ToOwned.html#method.clone_into\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:26:21.923Z"
}