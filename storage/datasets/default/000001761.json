{
	"title": "sleep_until in std::thread - Rust",
	"url": "https://doc.rust-lang.org/stable/std/thread/fn.sleep_until.html",
	"markdown": "# sleep\\_until in std::thread - Rust\n\n```\npub fn sleep_until(deadline: Instant)\n```\n\nðŸ”¬This is a nightly-only experimental API. (`thread_sleep_until`Â [#113752](https://github.com/rust-lang/rust/issues/113752))\n\nExpand description\n\nPuts the current thread to sleep until the specified deadline has passed.\n\nThe thread may still be asleep after the deadline specified due to scheduling specifics or platform-dependent functionality. It will never wake before.\n\nThis function is blocking, and should not be used in `async` functions.\n\n## [Â§](#platform-specific-behavior)Platform-specific behavior\n\nThis function uses [`sleep`](fn.sleep.html \"fn std::thread::sleep\") internally, see its platform-specific behaviour.\n\n## [Â§](#examples)Examples\n\nA simple game loop that limits the game to 60 frames per second.\n\n```\n#![feature(thread_sleep_until)]\nlet max_fps = 60.0;\nlet frame_time = Duration::from_secs_f32(1.0/max_fps);\nlet mut next_frame = Instant::now();\nloop {\n    thread::sleep_until(next_frame);\n    next_frame += frame_time;\n    update();\n    render();\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(thread_sleep_until)%5D%0Afn+main()+%7B%0A++++use+std::time::%7BDuration,+Instant%7D;%0A++++use+std::thread;%0A++++%0A++++fn+update()+%7B%7D%0A++++fn+render()+%7B%7D%0A++++%0A++++let+max_fps+=+60.0;%0A++++let+frame_time+=+Duration::from_secs_f32(1.0/max_fps);%0A++++let+mut+next_frame+=+Instant::now();%0A++++loop+%7B%0A++++++++thread::sleep_until(next_frame);%0A++++++++next_frame+%2B=+frame_time;%0A++++++++update();%0A++++++++render();%0A++++%7D%0A%7D&version=nightly&edition=2021)\n\nA slow api we must not call too fast and which takes a few tries before succeeding. By using `sleep_until` the time the api call takes does not influence when we retry or when we give up\n\n```\n#![feature(thread_sleep_until)]\nlet deadline = Instant::now() + MAX_DURATION;\nlet delay = Duration::from_millis(250);\nlet mut next_attempt = Instant::now();\nloop {\n    if Instant::now() > deadline {\n        break Err(());\n    }\n    if let Status::Ready(data) = slow_web_api_call() {\n        break Ok(data);\n    }\n\n    next_attempt = deadline.min(next_attempt + delay);\n    thread::sleep_until(next_attempt);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(thread_sleep_until)%5D%0Afn+main()+%7B%0A++++use+std::time::%7BDuration,+Instant%7D;%0A++++use+std::thread;%0A++++%0A++++enum+Status+%7B%0A++++++++Ready(usize),%0A++++++++Waiting,%0A++++%7D%0A++++fn+slow_web_api_call()+-%3E+Status+%7B+Status::Ready(42)+%7D%0A++++%0A++++const+MAX_DURATION:+Duration+=+Duration::from_secs(10);%0A++++%0A++++fn+try_api_call()+-%3E+Result%3Cusize,+()%3E+%7B%0A++++let+deadline+=+Instant::now()+%2B+MAX_DURATION;%0A++++let+delay+=+Duration::from_millis(250);%0A++++let+mut+next_attempt+=+Instant::now();%0A++++loop+%7B%0A++++++++if+Instant::now()+%3E+deadline+%7B%0A++++++++++++break+Err(());%0A++++++++%7D%0A++++++++if+let+Status::Ready(data)+=+slow_web_api_call()+%7B%0A++++++++++++break+Ok(data);%0A++++++++%7D%0A++++%0A++++++++next_attempt+=+deadline.min(next_attempt+%2B+delay);%0A++++++++thread::sleep_until(next_attempt);%0A++++%7D%0A++++%7D%0A++++let+_data+=+try_api_call();%0A%7D&version=nightly&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Puts the current thread to sleep until the specified deadline has passed.\"><title>sleep_until in std::thread - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc fn\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h2><a href=\"index.html\">In std::thread</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.AccessError.html\">AccessError</a></li><li><a href=\"struct.Builder.html\">Builder</a></li><li><a href=\"struct.JoinHandle.html\">JoinHandle</a></li><li><a href=\"struct.LocalKey.html\">LocalKey</a></li><li><a href=\"struct.Scope.html\">Scope</a></li><li><a href=\"struct.ScopedJoinHandle.html\">ScopedJoinHandle</a></li><li><a href=\"struct.Thread.html\">Thread</a></li><li><a href=\"struct.ThreadId.html\">ThreadId</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.available_parallelism.html\">available_parallelism</a></li><li><a href=\"fn.current.html\">current</a></li><li><a href=\"fn.panicking.html\">panicking</a></li><li><a href=\"fn.park.html\">park</a></li><li><a href=\"fn.park_timeout.html\">park_timeout</a></li><li><a href=\"fn.park_timeout_ms.html\">park_timeout_ms</a></li><li><a href=\"fn.scope.html\">scope</a></li><li><a href=\"fn.sleep.html\">sleep</a></li><li><a href=\"fn.sleep_ms.html\">sleep_ms</a></li><li><a href=\"fn.sleep_until.html\">sleep_until</a></li><li><a href=\"fn.spawn.html\">spawn</a></li><li><a href=\"fn.yield_now.html\">yield_now</a></li></ul><h3><a href=\"index.html#types\">Type Aliases</a></h3><ul class=\"block type\"><li><a href=\"type.Result.html\">Result</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type â€˜Sâ€™ or â€˜/â€™ to search, â€˜?â€™ for more optionsâ€¦\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Function <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">thread</a>::<wbr><a class=\"fn\" href=\"#\">sleep_until</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><a class=\"src\" href=\"../../src/std/thread/mod.rs.html#983-989\">source</a> Â· <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>âˆ’</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub fn sleep_until(deadline: <a class=\"struct\" href=\"../time/struct.Instant.html\" title=\"struct std::time::Instant\">Instant</a>)</code></pre><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>thread_sleep_until</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/113752\">#113752</a>)</span></div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Puts the current thread to sleep until the specified deadline has passed.</p>\n<p>The thread may still be asleep after the deadline specified due to\nscheduling specifics or platform-dependent functionality. It will never\nwake before.</p>\n<p>This function is blocking, and should not be used in <code>async</code> functions.</p>\n<h2 id=\"platform-specific-behavior\"><a class=\"doc-anchor\" href=\"#platform-specific-behavior\">Â§</a>Platform-specific behavior</h2>\n<p>This function uses <a href=\"fn.sleep.html\" title=\"fn std::thread::sleep\"><code>sleep</code></a> internally, see its platform-specific behaviour.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">Â§</a>Examples</h2>\n<p>A simple game loop that limits the game to 60 frames per second.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(thread_sleep_until)]\n</span><span class=\"kw\">let </span>max_fps = <span class=\"number\">60.0</span>;\n<span class=\"kw\">let </span>frame_time = Duration::from_secs_f32(<span class=\"number\">1.0</span>/max_fps);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>next_frame = Instant::now();\n<span class=\"kw\">loop </span>{\n    thread::sleep_until(next_frame);\n    next_frame += frame_time;\n    update();\n    render();\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(thread_sleep_until)%5D%0Afn+main()+%7B%0A++++use+std::time::%7BDuration,+Instant%7D;%0A++++use+std::thread;%0A++++%0A++++fn+update()+%7B%7D%0A++++fn+render()+%7B%7D%0A++++%0A++++let+max_fps+=+60.0;%0A++++let+frame_time+=+Duration::from_secs_f32(1.0/max_fps);%0A++++let+mut+next_frame+=+Instant::now();%0A++++loop+%7B%0A++++++++thread::sleep_until(next_frame);%0A++++++++next_frame+%2B=+frame_time;%0A++++++++update();%0A++++++++render();%0A++++%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p>A slow api we must not call too fast and which takes a few\ntries before succeeding. By using <code>sleep_until</code> the time the\napi call takes does not influence when we retry or when we give up</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(thread_sleep_until)]\n</span><span class=\"kw\">let </span>deadline = Instant::now() + MAX_DURATION;\n<span class=\"kw\">let </span>delay = Duration::from_millis(<span class=\"number\">250</span>);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>next_attempt = Instant::now();\n<span class=\"kw\">loop </span>{\n    <span class=\"kw\">if </span>Instant::now() &gt; deadline {\n        <span class=\"kw\">break </span><span class=\"prelude-val\">Err</span>(());\n    }\n    <span class=\"kw\">if let </span>Status::Ready(data) = slow_web_api_call() {\n        <span class=\"kw\">break </span><span class=\"prelude-val\">Ok</span>(data);\n    }\n\n    next_attempt = deadline.min(next_attempt + delay);\n    thread::sleep_until(next_attempt);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(thread_sleep_until)%5D%0Afn+main()+%7B%0A++++use+std::time::%7BDuration,+Instant%7D;%0A++++use+std::thread;%0A++++%0A++++enum+Status+%7B%0A++++++++Ready(usize),%0A++++++++Waiting,%0A++++%7D%0A++++fn+slow_web_api_call()+-%3E+Status+%7B+Status::Ready(42)+%7D%0A++++%0A++++const+MAX_DURATION:+Duration+=+Duration::from_secs(10);%0A++++%0A++++fn+try_api_call()+-%3E+Result%3Cusize,+()%3E+%7B%0A++++let+deadline+=+Instant::now()+%2B+MAX_DURATION;%0A++++let+delay+=+Duration::from_millis(250);%0A++++let+mut+next_attempt+=+Instant::now();%0A++++loop+%7B%0A++++++++if+Instant::now()+%3E+deadline+%7B%0A++++++++++++break+Err(());%0A++++++++%7D%0A++++++++if+let+Status::Ready(data)+=+slow_web_api_call()+%7B%0A++++++++++++break+Ok(data);%0A++++++++%7D%0A++++%0A++++++++next_attempt+=+deadline.min(next_attempt+%2B+delay);%0A++++++++thread::sleep_until(next_attempt);%0A++++%7D%0A++++%7D%0A++++let+_data+=+try_api_call();%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:20:27.581Z"
}