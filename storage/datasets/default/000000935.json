{
	"title": "replace in std::mem - Rust",
	"url": "https://doc.rust-lang.org/stable/std/mem/fn.replace.html",
	"markdown": "# replace in std::mem - Rust\n\n## Function [std](../index.html)::[mem](index.html)::[replace](#)\n\n1.0.0 (const: [unstable](https://github.com/rust-lang/rust/issues/83164 \"Tracking issue for const_replace\")) · [source](https://doc.rust-lang.org/1.80.0/src/core/mem/mod.rs.html#858) ·\n\n```\npub fn replace<T>(dest: &mut T, src: T) -> T\n```\n\nExpand description\n\nMoves `src` into the referenced `dest`, returning the previous `dest` value.\n\nNeither value is dropped.\n\n-   If you want to replace the values of two variables, see [`swap`](fn.swap.html \"fn std::mem::swap\").\n-   If you want to replace with a default value, see [`take`](fn.take.html \"fn std::mem::take\").\n\n## [§](#examples)Examples\n\nA simple example:\n\n```\nuse std::mem;\n\nlet mut v: Vec<i32> = vec![1, 2];\n\nlet old_v = mem::replace(&mut v, vec![3, 4, 5]);\nassert_eq!(vec![1, 2], old_v);\nassert_eq!(vec![3, 4, 5], v);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::mem;%0A++++%0A++++let+mut+v:+Vec%3Ci32%3E+=+vec!%5B1,+2%5D;%0A++++%0A++++let+old_v+=+mem::replace(%26mut+v,+vec!%5B3,+4,+5%5D);%0A++++assert_eq!(vec!%5B1,+2%5D,+old_v);%0A++++assert_eq!(vec!%5B3,+4,+5%5D,+v);%0A%7D&edition=2021)\n\n`replace` allows consumption of a struct field by replacing it with another value. Without `replace` you can run into issues like these:\n\n[ⓘ](# \"This example deliberately fails to compile\")\n\n```\nstruct Buffer<T> { buf: Vec<T> }\n\nimpl<T> Buffer<T> {\n    fn replace_index(&mut self, i: usize, v: T) -> T {\n        // error: cannot move out of dereference of `&mut`-pointer\n        let t = self.buf[i];\n        self.buf[i] = v;\n        t\n    }\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++struct+Buffer%3CT%3E+%7B+buf:+Vec%3CT%3E+%7D%0A++++%0A++++impl%3CT%3E+Buffer%3CT%3E+%7B%0A++++++++fn+replace_index(%26mut+self,+i:+usize,+v:+T)+-%3E+T+%7B%0A++++++++++++//+error:+cannot+move+out+of+dereference+of+%60%26mut%60-pointer%0A++++++++++++let+t+=+self.buf%5Bi%5D;%0A++++++++++++self.buf%5Bi%5D+=+v;%0A++++++++++++t%0A++++++++%7D%0A++++%7D%0A%7D&edition=2021)\n\nNote that `T` does not necessarily implement [`Clone`](../clone/trait.Clone.html \"trait std::clone::Clone\"), so we can’t even clone `self.buf[i]` to avoid the move. But `replace` can be used to disassociate the original value at that index from `self`, allowing it to be returned:\n\n```\nuse std::mem;\n\nimpl<T> Buffer<T> {\n    fn replace_index(&mut self, i: usize, v: T) -> T {\n        mem::replace(&mut self.buf[i], v)\n    }\n}\n\nlet mut buffer = Buffer { buf: vec![0, 1] };\nassert_eq!(buffer.buf[0], 0);\n\nassert_eq!(buffer.replace_index(0, 2), 0);\nassert_eq!(buffer.buf[0], 2);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Ballow(dead_code)%5D%0Afn+main()+%7B%0A++++use+std::mem;%0A++++%0A++++struct+Buffer%3CT%3E+%7B+buf:+Vec%3CT%3E+%7D%0A++++impl%3CT%3E+Buffer%3CT%3E+%7B%0A++++++++fn+replace_index(%26mut+self,+i:+usize,+v:+T)+-%3E+T+%7B%0A++++++++++++mem::replace(%26mut+self.buf%5Bi%5D,+v)%0A++++++++%7D%0A++++%7D%0A++++%0A++++let+mut+buffer+=+Buffer+%7B+buf:+vec!%5B0,+1%5D+%7D;%0A++++assert_eq!(buffer.buf%5B0%5D,+0);%0A++++%0A++++assert_eq!(buffer.replace_index(0,+2),+0);%0A++++assert_eq!(buffer.buf%5B0%5D,+2);%0A%7D&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Moves `src` into the referenced `dest`, returning the previous `dest` value.\"><title>replace in std::mem - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc fn\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h2><a href=\"index.html\">In std::mem</a></h2><h3><a href=\"index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"macro.offset_of.html\">offset_of</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Assume.html\">Assume</a></li><li><a href=\"struct.Discriminant.html\">Discriminant</a></li><li><a href=\"struct.ManuallyDrop.html\">ManuallyDrop</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.BikeshedIntrinsicFrom.html\">BikeshedIntrinsicFrom</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.align_of.html\">align_of</a></li><li><a href=\"fn.align_of_val.html\">align_of_val</a></li><li><a href=\"fn.align_of_val_raw.html\">align_of_val_raw</a></li><li><a href=\"fn.copy.html\">copy</a></li><li><a href=\"fn.discriminant.html\">discriminant</a></li><li><a href=\"fn.drop.html\">drop</a></li><li><a href=\"fn.forget.html\">forget</a></li><li><a href=\"fn.forget_unsized.html\">forget_unsized</a></li><li><a href=\"fn.min_align_of.html\">min_align_of</a></li><li><a href=\"fn.min_align_of_val.html\">min_align_of_val</a></li><li><a href=\"fn.needs_drop.html\">needs_drop</a></li><li><a href=\"fn.replace.html\">replace</a></li><li><a href=\"fn.size_of.html\">size_of</a></li><li><a href=\"fn.size_of_val.html\">size_of_val</a></li><li><a href=\"fn.size_of_val_raw.html\">size_of_val_raw</a></li><li><a href=\"fn.swap.html\">swap</a></li><li><a href=\"fn.take.html\">take</a></li><li><a href=\"fn.transmute.html\">transmute</a></li><li><a href=\"fn.transmute_copy.html\">transmute_copy</a></li><li><a href=\"fn.uninitialized.html\">uninitialized</a></li><li><a href=\"fn.variant_count.html\">variant_count</a></li><li><a href=\"fn.zeroed.html\">zeroed</a></li></ul><h3><a href=\"index.html#unions\">Unions</a></h3><ul class=\"block union\"><li><a href=\"union.MaybeUninit.html\">MaybeUninit</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Function <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">mem</a>::<wbr><a class=\"fn\" href=\"#\">replace</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/83164\" title=\"Tracking issue for const_replace\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/mem/mod.rs.html#858\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub fn replace&lt;T&gt;(dest: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>, src: T) -&gt; T</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Moves <code>src</code> into the referenced <code>dest</code>, returning the previous <code>dest</code> value.</p>\n<p>Neither value is dropped.</p>\n<ul>\n<li>If you want to replace the values of two variables, see <a href=\"fn.swap.html\" title=\"fn std::mem::swap\"><code>swap</code></a>.</li>\n<li>If you want to replace with a default value, see <a href=\"fn.take.html\" title=\"fn std::mem::take\"><code>take</code></a>.</li>\n</ul>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<p>A simple example:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::mem;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v: Vec&lt;i32&gt; = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>];\n\n<span class=\"kw\">let </span>old_v = mem::replace(<span class=\"kw-2\">&amp;mut </span>v, <span class=\"macro\">vec!</span>[<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>], old_v);\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">vec!</span>[<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>], v);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::mem;%0A++++%0A++++let+mut+v:+Vec%3Ci32%3E+=+vec!%5B1,+2%5D;%0A++++%0A++++let+old_v+=+mem::replace(%26mut+v,+vec!%5B3,+4,+5%5D);%0A++++assert_eq!(vec!%5B1,+2%5D,+old_v);%0A++++assert_eq!(vec!%5B3,+4,+5%5D,+v);%0A%7D&amp;edition=2021\">Run</a></div>\n<p><code>replace</code> allows consumption of a struct field by replacing it with another value.\nWithout <code>replace</code> you can run into issues like these:</p>\n\n<div class=\"example-wrap compile_fail\"><a href=\"#\" class=\"tooltip\" title=\"This example deliberately fails to compile\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">struct </span>Buffer&lt;T&gt; { buf: Vec&lt;T&gt; }\n\n<span class=\"kw\">impl</span>&lt;T&gt; Buffer&lt;T&gt; {\n    <span class=\"kw\">fn </span>replace_index(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, i: usize, v: T) -&gt; T {\n        <span class=\"comment\">// error: cannot move out of dereference of `&amp;mut`-pointer\n        </span><span class=\"kw\">let </span>t = <span class=\"self\">self</span>.buf[i];\n        <span class=\"self\">self</span>.buf[i] = v;\n        t\n    }\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++struct+Buffer%3CT%3E+%7B+buf:+Vec%3CT%3E+%7D%0A++++%0A++++impl%3CT%3E+Buffer%3CT%3E+%7B%0A++++++++fn+replace_index(%26mut+self,+i:+usize,+v:+T)+-%3E+T+%7B%0A++++++++++++//+error:+cannot+move+out+of+dereference+of+%60%26mut%60-pointer%0A++++++++++++let+t+=+self.buf%5Bi%5D;%0A++++++++++++self.buf%5Bi%5D+=+v;%0A++++++++++++t%0A++++++++%7D%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Note that <code>T</code> does not necessarily implement <a href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\"><code>Clone</code></a>, so we can’t even clone <code>self.buf[i]</code> to\navoid the move. But <code>replace</code> can be used to disassociate the original value at that index from\n<code>self</code>, allowing it to be returned:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::mem;\n\n<span class=\"kw\">impl</span>&lt;T&gt; Buffer&lt;T&gt; {\n    <span class=\"kw\">fn </span>replace_index(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, i: usize, v: T) -&gt; T {\n        mem::replace(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>.buf[i], v)\n    }\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buffer = Buffer { buf: <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>] };\n<span class=\"macro\">assert_eq!</span>(buffer.buf[<span class=\"number\">0</span>], <span class=\"number\">0</span>);\n\n<span class=\"macro\">assert_eq!</span>(buffer.replace_index(<span class=\"number\">0</span>, <span class=\"number\">2</span>), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(buffer.buf[<span class=\"number\">0</span>], <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Ballow(dead_code)%5D%0Afn+main()+%7B%0A++++use+std::mem;%0A++++%0A++++struct+Buffer%3CT%3E+%7B+buf:+Vec%3CT%3E+%7D%0A++++impl%3CT%3E+Buffer%3CT%3E+%7B%0A++++++++fn+replace_index(%26mut+self,+i:+usize,+v:+T)+-%3E+T+%7B%0A++++++++++++mem::replace(%26mut+self.buf%5Bi%5D,+v)%0A++++++++%7D%0A++++%7D%0A++++%0A++++let+mut+buffer+=+Buffer+%7B+buf:+vec!%5B0,+1%5D+%7D;%0A++++assert_eq!(buffer.buf%5B0%5D,+0);%0A++++%0A++++assert_eq!(buffer.replace_index(0,+2),+0);%0A++++assert_eq!(buffer.buf%5B0%5D,+2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:14:19.706Z"
}