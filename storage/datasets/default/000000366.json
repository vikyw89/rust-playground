{
	"title": "BufReader in std::io - Rust",
	"url": "https://doc.rust-lang.org/stable/std/io/struct.BufReader.html",
	"markdown": "# BufReader in std::io - Rust\n\n## Struct [std](../index.html)::[io](index.html)::[BufReader](#)\n\n1.0.0 · [source](about:blank/src/std/io/buffered/bufreader.rs.html#50-53) ·\n\n```\npub struct BufReader<R: ?Sized> { /* private fields */ }\n```\n\nExpand description\n\nThe `BufReader<R>` struct adds buffering to any reader.\n\nIt can be excessively inefficient to work directly with a [`Read`](trait.Read.html \"trait std::io::Read\") instance. For example, every call to [`read`](about:blank/net/struct.TcpStream.html#method.read \"method std::net::TcpStream::read\") on [`TcpStream`](../net/struct.TcpStream.html \"struct std::net::TcpStream\") results in a system call. A `BufReader<R>` performs large, infrequent reads on the underlying [`Read`](trait.Read.html \"trait std::io::Read\") and maintains an in-memory buffer of the results.\n\n`BufReader<R>` can improve the speed of programs that make _small_ and _repeated_ read calls to the same file or network socket. It does not help when reading very large amounts at once, or reading just one or a few times. It also provides no advantage when reading from a source that is already in memory, like a `[Vec](../vec/struct.Vec.html \"struct std::vec::Vec\")<u8>`.\n\nWhen the `BufReader<R>` is dropped, the contents of its buffer will be discarded. Creating multiple instances of a `BufReader<R>` on the same stream can cause data loss. Reading from the underlying reader after unwrapping the `BufReader<R>` with [`BufReader::into_inner`](about:blank/struct.BufReader.html#method.into_inner \"method std::io::BufReader::into_inner\") can also cause data loss.\n\n## [§](#examples)Examples\n\n```\nuse std::io::prelude::*;\nuse std::io::BufReader;\nuse std::fs::File;\n\nfn main() -> std::io::Result<()> {\n    let f = File::open(\"log.txt\")?;\n    let mut reader = BufReader::new(f);\n\n    let mut line = String::new();\n    let len = reader.read_line(&mut line)?;\n    println!(\"First line is {len} bytes long\");\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io::prelude::*;%0Ause+std::io::BufReader;%0Ause+std::fs::File;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+f+=+File::open(%22log.txt%22)?;%0A++++let+mut+reader+=+BufReader::new(f);%0A%0A++++let+mut+line+=+String::new();%0A++++let+len+=+reader.read_line(%26mut+line)?;%0A++++println!(%22First+line+is+%7Blen%7D+bytes+long%22);%0A++++Ok(())%0A%7D&edition=2021)\n\n[source](about:blank/src/std/io/buffered/bufreader.rs.html#55-96)[§](#impl-BufReader%3CR%3E)\n\n1.0.0 · [source](about:blank/src/std/io/buffered/bufreader.rs.html#72-74)\n\nCreates a new `BufReader<R>` with a default buffer capacity. The default is currently 8 KiB, but may change in the future.\n\n##### [§](#examples-1)Examples\n\n```\nuse std::io::BufReader;\nuse std::fs::File;\n\nfn main() -> std::io::Result<()> {\n    let f = File::open(\"log.txt\")?;\n    let reader = BufReader::new(f);\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io::BufReader;%0Ause+std::fs::File;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+f+=+File::open(%22log.txt%22)?;%0A++++let+reader+=+BufReader::new(f);%0A++++Ok(())%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/io/buffered/bufreader.rs.html#93-95)\n\nCreates a new `BufReader<R>` with the specified buffer capacity.\n\n##### [§](#examples-2)Examples\n\nCreating a buffer with ten bytes of capacity:\n\n```\nuse std::io::BufReader;\nuse std::fs::File;\n\nfn main() -> std::io::Result<()> {\n    let f = File::open(\"log.txt\")?;\n    let reader = BufReader::with_capacity(10, f);\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io::BufReader;%0Ause+std::fs::File;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+f+=+File::open(%22log.txt%22)?;%0A++++let+reader+=+BufReader::with_capacity(10,+f);%0A++++Ok(())%0A%7D&edition=2021)\n\n[source](about:blank/src/std/io/buffered/bufreader.rs.html#98-228)[§](#impl-BufReader%3CR%3E-1)\n\n1.0.0 · [source](about:blank/src/std/io/buffered/bufreader.rs.html#118-120)\n\nGets a reference to the underlying reader.\n\nIt is inadvisable to directly read from the underlying reader.\n\n##### [§](#examples-3)Examples\n\n```\nuse std::io::BufReader;\nuse std::fs::File;\n\nfn main() -> std::io::Result<()> {\n    let f1 = File::open(\"log.txt\")?;\n    let reader = BufReader::new(f1);\n\n    let f2 = reader.get_ref();\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io::BufReader;%0Ause+std::fs::File;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+f1+=+File::open(%22log.txt%22)?;%0A++++let+reader+=+BufReader::new(f1);%0A%0A++++let+f2+=+reader.get_ref();%0A++++Ok(())%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/io/buffered/bufreader.rs.html#141-143)\n\nGets a mutable reference to the underlying reader.\n\nIt is inadvisable to directly read from the underlying reader.\n\n##### [§](#examples-4)Examples\n\n```\nuse std::io::BufReader;\nuse std::fs::File;\n\nfn main() -> std::io::Result<()> {\n    let f1 = File::open(\"log.txt\")?;\n    let mut reader = BufReader::new(f1);\n\n    let f2 = reader.get_mut();\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io::BufReader;%0Ause+std::fs::File;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+f1+=+File::open(%22log.txt%22)?;%0A++++let+mut+reader+=+BufReader::new(f1);%0A%0A++++let+f2+=+reader.get_mut();%0A++++Ok(())%0A%7D&edition=2021)\n\n1.37.0 · [source](about:blank/src/std/io/buffered/bufreader.rs.html#169-171)\n\nReturns a reference to the internally buffered data.\n\nUnlike [`fill_buf`](about:blank/trait.BufRead.html#tymethod.fill_buf \"method std::io::BufRead::fill_buf\"), this will not attempt to fill the buffer if it is empty.\n\n##### [§](#examples-5)Examples\n\n```\nuse std::io::{BufReader, BufRead};\nuse std::fs::File;\n\nfn main() -> std::io::Result<()> {\n    let f = File::open(\"log.txt\")?;\n    let mut reader = BufReader::new(f);\n    assert!(reader.buffer().is_empty());\n\n    if reader.fill_buf()?.len() > 0 {\n        assert!(!reader.buffer().is_empty());\n    }\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io::%7BBufReader,+BufRead%7D;%0Ause+std::fs::File;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+f+=+File::open(%22log.txt%22)?;%0A++++let+mut+reader+=+BufReader::new(f);%0A++++assert!(reader.buffer().is_empty());%0A%0A++++if+reader.fill_buf()?.len()+%3E+0+%7B%0A++++++++assert!(!reader.buffer().is_empty());%0A++++%7D%0A++++Ok(())%0A%7D&edition=2021)\n\n1.46.0 · [source](about:blank/src/std/io/buffered/bufreader.rs.html#192-194)\n\nReturns the number of bytes the internal buffer can hold at once.\n\n##### [§](#examples-6)Examples\n\n```\nuse std::io::{BufReader, BufRead};\nuse std::fs::File;\n\nfn main() -> std::io::Result<()> {\n    let f = File::open(\"log.txt\")?;\n    let mut reader = BufReader::new(f);\n\n    let capacity = reader.capacity();\n    let buffer = reader.fill_buf()?;\n    assert!(buffer.len() <= capacity);\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io::%7BBufReader,+BufRead%7D;%0Ause+std::fs::File;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+f+=+File::open(%22log.txt%22)?;%0A++++let+mut+reader+=+BufReader::new(f);%0A%0A++++let+capacity+=+reader.capacity();%0A++++let+buffer+=+reader.fill_buf()?;%0A++++assert!(buffer.len()+%3C=+capacity);%0A++++Ok(())%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/io/buffered/bufreader.rs.html#216-221)\n\nUnwraps this `BufReader<R>`, returning the underlying reader.\n\nNote that any leftover data in the internal buffer is lost. Therefore, a following read from the underlying reader may lead to data loss.\n\n##### [§](#examples-7)Examples\n\n```\nuse std::io::BufReader;\nuse std::fs::File;\n\nfn main() -> std::io::Result<()> {\n    let f1 = File::open(\"log.txt\")?;\n    let reader = BufReader::new(f1);\n\n    let f2 = reader.into_inner();\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io::BufReader;%0Ause+std::fs::File;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+f1+=+File::open(%22log.txt%22)?;%0A++++let+reader+=+BufReader::new(f1);%0A%0A++++let+f2+=+reader.into_inner();%0A++++Ok(())%0A%7D&edition=2021)\n\n[source](about:blank/src/std/io/buffered/bufreader.rs.html#238-260)[§](#impl-BufReader%3CR%3E-2)\n\n1.53.0 · [source](about:blank/src/std/io/buffered/bufreader.rs.html#244-259)\n\nSeeks relative to the current position. If the new position lies within the buffer, the buffer will not be flushed, allowing for more efficient seeks. This method does not return the location of the underlying reader, so the caller must track this information themselves if it is required.\n\n1.0.0 · [source](about:blank/src/std/io/buffered/bufreader.rs.html#394-402)[§](#impl-BufRead-for-BufReader%3CR%3E)\n\n[source](about:blank/src/std/io/buffered/bufreader.rs.html#395-397)[§](#method.fill_buf)\n\nReturns the contents of the internal buffer, filling it with more data from the inner reader if it is empty. [Read more](about:blank/trait.BufRead.html#tymethod.fill_buf)\n\n[source](about:blank/src/std/io/buffered/bufreader.rs.html#399-401)[§](#method.consume)\n\nTells this buffer that `amt` bytes have been consumed from the buffer, so they should no longer be returned in calls to `read`. [Read more](about:blank/trait.BufRead.html#tymethod.consume)\n\n[source](about:blank/src/std/io/mod.rs.html#2285-2287)[§](#method.has_data_left)\n\n🔬This is a nightly-only experimental API. (`buf_read_has_data_left` [#86423](https://github.com/rust-lang/rust/issues/86423))\n\nCheck if the underlying `Read` has any data left to be read. [Read more](about:blank/trait.BufRead.html#method.has_data_left)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#2344-2346)[§](#method.read_until)\n\nRead all bytes into `buf` until the delimiter `byte` or EOF is reached. [Read more](about:blank/trait.BufRead.html#method.read_until)\n\n[source](about:blank/src/std/io/mod.rs.html#2406-2408)[§](#method.skip_until)\n\n🔬This is a nightly-only experimental API. (`bufread_skip_until` [#111735](https://github.com/rust-lang/rust/issues/111735))\n\nSkip all bytes until the delimiter `byte` or EOF is reached. [Read more](about:blank/trait.BufRead.html#method.skip_until)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#2474-2479)[§](#method.read_line)\n\nRead all bytes until a newline (the `0xA` byte) is reached, and append them to the provided `String` buffer. [Read more](about:blank/trait.BufRead.html#method.read_line)\n\n1.0.0 · [source](about:blank/src/std/io/buffered/bufreader.rs.html#405-418)[§](#impl-Debug-for-BufReader%3CR%3E)\n\n1.0.0 · [source](about:blank/src/std/io/buffered/bufreader.rs.html#279-391)[§](#impl-Read-for-BufReader%3CR%3E)\n\n[source](about:blank/src/std/io/buffered/bufreader.rs.html#280-292)[§](#method.read)\n\nPull some bytes from this source into the specified buffer, returning how many bytes were read. [Read more](about:blank/trait.Read.html#tymethod.read)\n\n[source](about:blank/src/std/io/buffered/bufreader.rs.html#294-311)[§](#method.read_buf)\n\n🔬This is a nightly-only experimental API. (`read_buf` [#78485](https://github.com/rust-lang/rust/issues/78485))\n\nPull some bytes from this source into the specified buffer. [Read more](about:blank/trait.Read.html#method.read_buf)\n\n[source](about:blank/src/std/io/buffered/bufreader.rs.html#317-323)[§](#method.read_exact)\n\nRead the exact number of bytes required to fill `buf`. [Read more](about:blank/trait.Read.html#method.read_exact)\n\n[source](about:blank/src/std/io/buffered/bufreader.rs.html#325-331)[§](#method.read_buf_exact)\n\n🔬This is a nightly-only experimental API. (`read_buf` [#78485](https://github.com/rust-lang/rust/issues/78485))\n\nRead the exact number of bytes required to fill `cursor`. [Read more](about:blank/trait.Read.html#method.read_buf_exact)\n\n[source](about:blank/src/std/io/buffered/bufreader.rs.html#333-344)[§](#method.read_vectored)\n\nLike `read`, except that it reads into a slice of buffers. [Read more](about:blank/trait.Read.html#method.read_vectored)\n\n[source](about:blank/src/std/io/buffered/bufreader.rs.html#346-348)[§](#method.is_read_vectored)\n\n🔬This is a nightly-only experimental API. (`can_vector` [#69941](https://github.com/rust-lang/rust/issues/69941))\n\nDetermines if this `Read`er has an efficient `read_vectored` implementation. [Read more](about:blank/trait.Read.html#method.is_read_vectored)\n\n[source](about:blank/src/std/io/buffered/bufreader.rs.html#352-359)[§](#method.read_to_end)\n\nRead all bytes until EOF in this source, placing them into `buf`. [Read more](about:blank/trait.Read.html#method.read_to_end)\n\n[source](about:blank/src/std/io/buffered/bufreader.rs.html#363-390)[§](#method.read_to_string)\n\nRead all bytes until EOF in this source, appending them to `buf`. [Read more](about:blank/trait.Read.html#method.read_to_string)\n\n1.0.0 · [source](about:blank/src/std/io/buffered/bufreader.rs.html#421-522)[§](#impl-Seek-for-BufReader%3CR%3E)\n\n[source](about:blank/src/std/io/buffered/bufreader.rs.html#444-467)[§](#method.seek)\n\nSeek to an offset, in bytes, in the underlying reader.\n\nThe position used for seeking with `[SeekFrom::Current](about:blank/enum.SeekFrom.html#variant.Current \"variant std::io::SeekFrom::Current\")(_)` is the position the underlying reader would be at if the `BufReader<R>` had no internal buffer.\n\nSeeking always discards the internal buffer, even if the seek position would otherwise fall within it. This guarantees that calling [`BufReader::into_inner()`](about:blank/struct.BufReader.html#method.into_inner \"method std::io::BufReader::into_inner\") immediately after a seek yields the underlying reader at the same position.\n\nTo seek without discarding the internal buffer, use [`BufReader::seek_relative`](about:blank/struct.BufReader.html#method.seek_relative \"method std::io::BufReader::seek_relative\").\n\nSee [`std::io::Seek`](trait.Seek.html \"trait std::io::Seek\") for more details.\n\nNote: In the edge case where you’re seeking with `[SeekFrom::Current](about:blank/enum.SeekFrom.html#variant.Current \"variant std::io::SeekFrom::Current\")(n)` where `n` minus the internal buffer length overflows an `i64`, two seeks will be performed instead of one. If the second seek returns [`Err`](about:blank/result/enum.Result.html#variant.Err \"variant std::result::Result::Err\"), the underlying reader will be left at the same position it would have if you called `seek` with `[SeekFrom::Current](about:blank/enum.SeekFrom.html#variant.Current \"variant std::io::SeekFrom::Current\")(0)`.\n\n[source](about:blank/src/std/io/buffered/bufreader.rs.html#504-511)[§](#method.stream_position)\n\nReturns the current seek position from the start of the stream.\n\nThe value returned is equivalent to `self.seek(SeekFrom::Current(0))` but does not flush the internal buffer. Due to this optimization the function does not guarantee that calling `.into_inner()` immediately afterwards will yield the underlying reader at the same position. Use [`BufReader::seek`](about:blank/struct.BufReader.html#method.seek \"method std::io::BufReader::seek\") instead if you require that guarantee.\n\n##### [§](#panics)Panics\n\nThis function will panic if the position of the inner reader is smaller than the amount of buffered data. That can happen if the inner reader has an incorrect implementation of [`Seek::stream_position`](about:blank/trait.Seek.html#method.stream_position \"method std::io::Seek::stream_position\"), or if the position has gone out of sync due to calling [`Seek::seek`](about:blank/trait.Seek.html#tymethod.seek \"method std::io::Seek::seek\") directly on the underlying reader.\n\n##### [§](#example)Example\n\n```\nuse std::{\n    io::{self, BufRead, BufReader, Seek},\n    fs::File,\n};\n\nfn main() -> io::Result<()> {\n    let mut f = BufReader::new(File::open(\"foo.txt\")?);\n\n    let before = f.stream_position()?;\n    f.read_line(&mut String::new())?;\n    let after = f.stream_position()?;\n\n    println!(\"The first line was {} bytes long\", after - before);\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::%7B%0A++++io::%7Bself,+BufRead,+BufReader,+Seek%7D,%0A++++fs::File,%0A%7D;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+mut+f+=+BufReader::new(File::open(%22foo.txt%22)?);%0A%0A++++let+before+=+f.stream_position()?;%0A++++f.read_line(%26mut+String::new())?;%0A++++let+after+=+f.stream_position()?;%0A%0A++++println!(%22The+first+line+was+%7B%7D+bytes+long%22,+after+-+before);%0A++++Ok(())%0A%7D&edition=2021)\n\n[source](about:blank/src/std/io/buffered/bufreader.rs.html#519-521)[§](#method.seek_relative-1)\n\nSeeks relative to the current position.\n\nIf the new position lies within the buffer, the buffer will not be flushed, allowing for more efficient seeks. This method does not return the location of the underlying reader, so the caller must track this information themselves if it is required.\n\n1.55.0 · [source](about:blank/src/std/io/mod.rs.html#1957-1960)[§](#method.rewind)\n\nRewind to the beginning of a stream. [Read more](about:blank/trait.Seek.html#method.rewind)\n\n[source](about:blank/src/std/io/mod.rs.html#1997-2008)[§](#method.stream_len)\n\n🔬This is a nightly-only experimental API. (`seek_stream_len` [#59359](https://github.com/rust-lang/rust/issues/59359))\n\nReturns the length of this stream (in bytes). [Read more](about:blank/trait.Seek.html#method.stream_len)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[§](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[§](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[§](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[§](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[§](#method.from)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[§](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[§](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[§](#impl-TryFrom%3CU%3E-for-T)\n\n[§](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[§](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[§](#impl-TryInto%3CU%3E-for-T)\n\n[§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[§](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"The `BufReader<R>` struct adds buffering to any reader.\"><title>BufReader in std::io - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">BufReader</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">BufReader</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.buffer\">buffer</a></li><li><a href=\"#method.capacity\">capacity</a></li><li><a href=\"#method.get_mut\">get_mut</a></li><li><a href=\"#method.get_ref\">get_ref</a></li><li><a href=\"#method.into_inner\">into_inner</a></li><li><a href=\"#method.new\">new</a></li><li><a href=\"#method.seek_relative\">seek_relative</a></li><li><a href=\"#method.with_capacity\">with_capacity</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-BufRead-for-BufReader%3CR%3E\">BufRead</a></li><li><a href=\"#impl-Debug-for-BufReader%3CR%3E\">Debug</a></li><li><a href=\"#impl-Read-for-BufReader%3CR%3E\">Read</a></li><li><a href=\"#impl-Seek-for-BufReader%3CR%3E\">Seek</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-BufReader%3CR%3E\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-BufReader%3CR%3E\">RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-BufReader%3CR%3E\">Send</a></li><li><a href=\"#impl-Sync-for-BufReader%3CR%3E\">Sync</a></li><li><a href=\"#impl-Unpin-for-BufReader%3CR%3E\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-BufReader%3CR%3E\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::io</a></h2><h3><a href=\"index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"prelude/index.html\">prelude</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.BorrowedBuf.html\">BorrowedBuf</a></li><li><a href=\"struct.BorrowedCursor.html\">BorrowedCursor</a></li><li><a href=\"struct.BufReader.html\">BufReader</a></li><li><a href=\"struct.BufWriter.html\">BufWriter</a></li><li><a href=\"struct.Bytes.html\">Bytes</a></li><li><a href=\"struct.Chain.html\">Chain</a></li><li><a href=\"struct.Cursor.html\">Cursor</a></li><li><a href=\"struct.Empty.html\">Empty</a></li><li><a href=\"struct.Error.html\">Error</a></li><li><a href=\"struct.IntoInnerError.html\">IntoInnerError</a></li><li><a href=\"struct.IoSlice.html\">IoSlice</a></li><li><a href=\"struct.IoSliceMut.html\">IoSliceMut</a></li><li><a href=\"struct.LineWriter.html\">LineWriter</a></li><li><a href=\"struct.Lines.html\">Lines</a></li><li><a href=\"struct.Repeat.html\">Repeat</a></li><li><a href=\"struct.Sink.html\">Sink</a></li><li><a href=\"struct.Split.html\">Split</a></li><li><a href=\"struct.Stderr.html\">Stderr</a></li><li><a href=\"struct.StderrLock.html\">StderrLock</a></li><li><a href=\"struct.Stdin.html\">Stdin</a></li><li><a href=\"struct.StdinLock.html\">StdinLock</a></li><li><a href=\"struct.Stdout.html\">Stdout</a></li><li><a href=\"struct.StdoutLock.html\">StdoutLock</a></li><li><a href=\"struct.Take.html\">Take</a></li><li><a href=\"struct.WriterPanicked.html\">WriterPanicked</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.ErrorKind.html\">ErrorKind</a></li><li><a href=\"enum.SeekFrom.html\">SeekFrom</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.BufRead.html\">BufRead</a></li><li><a href=\"trait.IsTerminal.html\">IsTerminal</a></li><li><a href=\"trait.Read.html\">Read</a></li><li><a href=\"trait.Seek.html\">Seek</a></li><li><a href=\"trait.Write.html\">Write</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.copy.html\">copy</a></li><li><a href=\"fn.empty.html\">empty</a></li><li><a href=\"fn.read_to_string.html\">read_to_string</a></li><li><a href=\"fn.repeat.html\">repeat</a></li><li><a href=\"fn.sink.html\">sink</a></li><li><a href=\"fn.stderr.html\">stderr</a></li><li><a href=\"fn.stdin.html\">stdin</a></li><li><a href=\"fn.stdout.html\">stdout</a></li></ul><h3><a href=\"index.html#types\">Type Aliases</a></h3><ul class=\"block type\"><li><a href=\"type.RawOsError.html\">RawOsError</a></li><li><a href=\"type.Result.html\">Result</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">io</a>::<wbr><a class=\"struct\" href=\"#\">BufReader</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/buffered/bufreader.rs.html#50-53\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct BufReader&lt;R: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>&gt; { <span class=\"comment\">/* private fields */</span> }</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>The <code>BufReader&lt;R&gt;</code> struct adds buffering to any reader.</p>\n<p>It can be excessively inefficient to work directly with a <a href=\"trait.Read.html\" title=\"trait std::io::Read\"><code>Read</code></a> instance.\nFor example, every call to <a href=\"../net/struct.TcpStream.html#method.read\" title=\"method std::net::TcpStream::read\"><code>read</code></a> on <a href=\"../net/struct.TcpStream.html\" title=\"struct std::net::TcpStream\"><code>TcpStream</code></a>\nresults in a system call. A <code>BufReader&lt;R&gt;</code> performs large, infrequent reads on\nthe underlying <a href=\"trait.Read.html\" title=\"trait std::io::Read\"><code>Read</code></a> and maintains an in-memory buffer of the results.</p>\n<p><code>BufReader&lt;R&gt;</code> can improve the speed of programs that make <em>small</em> and\n<em>repeated</em> read calls to the same file or network socket. It does not\nhelp when reading very large amounts at once, or reading just one or a few\ntimes. It also provides no advantage when reading from a source that is\nalready in memory, like a <code><a href=\"../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;u8&gt;</code>.</p>\n<p>When the <code>BufReader&lt;R&gt;</code> is dropped, the contents of its buffer will be\ndiscarded. Creating multiple instances of a <code>BufReader&lt;R&gt;</code> on the same\nstream can cause data loss. Reading from the underlying reader after\nunwrapping the <code>BufReader&lt;R&gt;</code> with <a href=\"struct.BufReader.html#method.into_inner\" title=\"method std::io::BufReader::into_inner\"><code>BufReader::into_inner</code></a> can also cause\ndata loss.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::prelude::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>std::io::BufReader;\n<span class=\"kw\">use </span>std::fs::File;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>f = File::open(<span class=\"string\">\"log.txt\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>reader = BufReader::new(f);\n\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>line = String::new();\n    <span class=\"kw\">let </span>len = reader.read_line(<span class=\"kw-2\">&amp;mut </span>line)<span class=\"question-mark\">?</span>;\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"First line is {len} bytes long\"</span>);\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io::prelude::*;%0Ause+std::io::BufReader;%0Ause+std::fs::File;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+f+=+File::open(%22log.txt%22)?;%0A++++let+mut+reader+=+BufReader::new(f);%0A%0A++++let+mut+line+=+String::new();%0A++++let+len+=+reader.read_line(%26mut+line)?;%0A++++println!(%22First+line+is+%7Blen%7D+bytes+long%22);%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BufReader%3CR%3E\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/io/buffered/bufreader.rs.html#55-96\">source</a><a href=\"#impl-BufReader%3CR%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;R: <a class=\"trait\" href=\"trait.Read.html\" title=\"trait std::io::Read\">Read</a>&gt; <a class=\"struct\" href=\"struct.BufReader.html\" title=\"struct std::io::BufReader\">BufReader</a>&lt;R&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.new\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/buffered/bufreader.rs.html#72-74\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.new\" class=\"fn\">new</a>(inner: R) -&gt; <a class=\"struct\" href=\"struct.BufReader.html\" title=\"struct std::io::BufReader\">BufReader</a>&lt;R&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BufReader<R>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Creates a new <code>BufReader&lt;R&gt;</code> with a default buffer capacity. The default is currently 8 KiB,\nbut may change in the future.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::BufReader;\n<span class=\"kw\">use </span>std::fs::File;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>f = File::open(<span class=\"string\">\"log.txt\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>reader = BufReader::new(f);\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io::BufReader;%0Ause+std::fs::File;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+f+=+File::open(%22log.txt%22)?;%0A++++let+reader+=+BufReader::new(f);%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.with_capacity\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/buffered/bufreader.rs.html#93-95\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.with_capacity\" class=\"fn\">with_capacity</a>(capacity: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, inner: R) -&gt; <a class=\"struct\" href=\"struct.BufReader.html\" title=\"struct std::io::BufReader\">BufReader</a>&lt;R&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BufReader<R>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Creates a new <code>BufReader&lt;R&gt;</code> with the specified buffer capacity.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<p>Creating a buffer with ten bytes of capacity:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::BufReader;\n<span class=\"kw\">use </span>std::fs::File;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>f = File::open(<span class=\"string\">\"log.txt\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>reader = BufReader::with_capacity(<span class=\"number\">10</span>, f);\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io::BufReader;%0Ause+std::fs::File;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+f+=+File::open(%22log.txt%22)?;%0A++++let+reader+=+BufReader::with_capacity(10,+f);%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BufReader%3CR%3E-1\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/io/buffered/bufreader.rs.html#98-228\">source</a><a href=\"#impl-BufReader%3CR%3E-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;R: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>&gt; <a class=\"struct\" href=\"struct.BufReader.html\" title=\"struct std::io::BufReader\">BufReader</a>&lt;R&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/buffered/bufreader.rs.html#118-120\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.get_ref\" class=\"fn\">get_ref</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;R</a></h4></section></summary><div class=\"docblock\"><p>Gets a reference to the underlying reader.</p>\n<p>It is inadvisable to directly read from the underlying reader.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::BufReader;\n<span class=\"kw\">use </span>std::fs::File;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>f1 = File::open(<span class=\"string\">\"log.txt\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>reader = BufReader::new(f1);\n\n    <span class=\"kw\">let </span>f2 = reader.get_ref();\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io::BufReader;%0Ause+std::fs::File;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+f1+=+File::open(%22log.txt%22)?;%0A++++let+reader+=+BufReader::new(f1);%0A%0A++++let+f2+=+reader.get_ref();%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/buffered/bufreader.rs.html#141-143\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.get_mut\" class=\"fn\">get_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut R</a></h4></section></summary><div class=\"docblock\"><p>Gets a mutable reference to the underlying reader.</p>\n<p>It is inadvisable to directly read from the underlying reader.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::BufReader;\n<span class=\"kw\">use </span>std::fs::File;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>f1 = File::open(<span class=\"string\">\"log.txt\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>reader = BufReader::new(f1);\n\n    <span class=\"kw\">let </span>f2 = reader.get_mut();\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io::BufReader;%0Ause+std::fs::File;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+f1+=+File::open(%22log.txt%22)?;%0A++++let+mut+reader+=+BufReader::new(f1);%0A%0A++++let+f2+=+reader.get_mut();%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.buffer\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"../../src/std/io/buffered/bufreader.rs.html#169-171\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.buffer\" class=\"fn\">buffer</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns a reference to the internally buffered data.</p>\n<p>Unlike <a href=\"trait.BufRead.html#tymethod.fill_buf\" title=\"method std::io::BufRead::fill_buf\"><code>fill_buf</code></a>, this will not attempt to fill the buffer if it is empty.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::{BufReader, BufRead};\n<span class=\"kw\">use </span>std::fs::File;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>f = File::open(<span class=\"string\">\"log.txt\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>reader = BufReader::new(f);\n    <span class=\"macro\">assert!</span>(reader.buffer().is_empty());\n\n    <span class=\"kw\">if </span>reader.fill_buf()<span class=\"question-mark\">?</span>.len() &gt; <span class=\"number\">0 </span>{\n        <span class=\"macro\">assert!</span>(!reader.buffer().is_empty());\n    }\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io::%7BBufReader,+BufRead%7D;%0Ause+std::fs::File;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+f+=+File::open(%22log.txt%22)?;%0A++++let+mut+reader+=+BufReader::new(f);%0A++++assert!(reader.buffer().is_empty());%0A%0A++++if+reader.fill_buf()?.len()+%3E+0+%7B%0A++++++++assert!(!reader.buffer().is_empty());%0A++++%7D%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.capacity\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0\">1.46.0</span> · <a class=\"src\" href=\"../../src/std/io/buffered/bufreader.rs.html#192-194\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.capacity\" class=\"fn\">capacity</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of bytes the internal buffer can hold at once.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::{BufReader, BufRead};\n<span class=\"kw\">use </span>std::fs::File;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>f = File::open(<span class=\"string\">\"log.txt\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>reader = BufReader::new(f);\n\n    <span class=\"kw\">let </span>capacity = reader.capacity();\n    <span class=\"kw\">let </span>buffer = reader.fill_buf()<span class=\"question-mark\">?</span>;\n    <span class=\"macro\">assert!</span>(buffer.len() &lt;= capacity);\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io::%7BBufReader,+BufRead%7D;%0Ause+std::fs::File;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+f+=+File::open(%22log.txt%22)?;%0A++++let+mut+reader+=+BufReader::new(f);%0A%0A++++let+capacity+=+reader.capacity();%0A++++let+buffer+=+reader.fill_buf()?;%0A++++assert!(buffer.len()+%3C=+capacity);%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_inner\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/buffered/bufreader.rs.html#216-221\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.into_inner\" class=\"fn\">into_inner</a>(self) -&gt; R<div class=\"where\">where\n    R: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Unwraps this <code>BufReader&lt;R&gt;</code>, returning the underlying reader.</p>\n<p>Note that any leftover data in the internal buffer is lost. Therefore,\na following read from the underlying reader may lead to data loss.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::BufReader;\n<span class=\"kw\">use </span>std::fs::File;\n\n<span class=\"kw\">fn </span>main() -&gt; std::io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>f1 = File::open(<span class=\"string\">\"log.txt\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>reader = BufReader::new(f1);\n\n    <span class=\"kw\">let </span>f2 = reader.into_inner();\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io::BufReader;%0Ause+std::fs::File;%0A%0Afn+main()+-%3E+std::io::Result%3C()%3E+%7B%0A++++let+f1+=+File::open(%22log.txt%22)?;%0A++++let+reader+=+BufReader::new(f1);%0A%0A++++let+f2+=+reader.into_inner();%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BufReader%3CR%3E-2\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/io/buffered/bufreader.rs.html#238-260\">source</a><a href=\"#impl-BufReader%3CR%3E-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;R: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"trait.Seek.html\" title=\"trait std::io::Seek\">Seek</a>&gt; <a class=\"struct\" href=\"struct.BufReader.html\" title=\"struct std::io::BufReader\">BufReader</a>&lt;R&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.seek_relative\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> · <a class=\"src\" href=\"../../src/std/io/buffered/bufreader.rs.html#244-259\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.seek_relative\" class=\"fn\">seek_relative</a>(&amp;mut self, offset: <a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Seeks relative to the current position. If the new position lies within the buffer,\nthe buffer will not be flushed, allowing for more efficient seeks.\nThis method does not return the location of the underlying reader, so the caller\nmust track this information themselves if it is required.</p>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BufRead-for-BufReader%3CR%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/buffered/bufreader.rs.html#394-402\">source</a></span><a href=\"#impl-BufRead-for-BufReader%3CR%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;R: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"trait.Read.html\" title=\"trait std::io::Read\">Read</a>&gt; <a class=\"trait\" href=\"trait.BufRead.html\" title=\"trait std::io::BufRead\">BufRead</a> for <a class=\"struct\" href=\"struct.BufReader.html\" title=\"struct std::io::BufReader\">BufReader</a>&lt;R&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fill_buf\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/buffered/bufreader.rs.html#395-397\">source</a><a href=\"#method.fill_buf\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.BufRead.html#tymethod.fill_buf\" class=\"fn\">fill_buf</a>(&amp;mut self) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;&amp;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]&gt;</h4></section></summary><div class=\"docblock\">Returns the contents of the internal buffer, filling it with more data\nfrom the inner reader if it is empty. <a href=\"trait.BufRead.html#tymethod.fill_buf\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.consume\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/buffered/bufreader.rs.html#399-401\">source</a><a href=\"#method.consume\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.BufRead.html#tymethod.consume\" class=\"fn\">consume</a>(&amp;mut self, amt: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\">Tells this buffer that <code>amt</code> bytes have been consumed from the buffer,\nso they should no longer be returned in calls to <code>read</code>. <a href=\"trait.BufRead.html#tymethod.consume\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.has_data_left\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/mod.rs.html#2285-2287\">source</a><a href=\"#method.has_data_left\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.BufRead.html#method.has_data_left\" class=\"fn\">has_data_left</a>(&amp;mut self) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>buf_read_has_data_left</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86423\">#86423</a>)</span></div></span><div class=\"docblock\">Check if the underlying <code>Read</code> has any data left to be read. <a href=\"trait.BufRead.html#method.has_data_left\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_until\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#2344-2346\">source</a></span><a href=\"#method.read_until\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.BufRead.html#method.read_until\" class=\"fn\">read_until</a>(&amp;mut self, byte: <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, buf: &amp;mut <a class=\"struct\" href=\"../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Read all bytes into <code>buf</code> until the delimiter <code>byte</code> or EOF is reached. <a href=\"trait.BufRead.html#method.read_until\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.skip_until\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/mod.rs.html#2406-2408\">source</a><a href=\"#method.skip_until\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.BufRead.html#method.skip_until\" class=\"fn\">skip_until</a>(&amp;mut self, byte: <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>bufread_skip_until</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/111735\">#111735</a>)</span></div></span><div class=\"docblock\">Skip all bytes until the delimiter <code>byte</code> or EOF is reached. <a href=\"trait.BufRead.html#method.skip_until\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_line\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#2474-2479\">source</a></span><a href=\"#method.read_line\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.BufRead.html#method.read_line\" class=\"fn\">read_line</a>(&amp;mut self, buf: &amp;mut <a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a>) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Read all bytes until a newline (the <code>0xA</code> byte) is reached, and append\nthem to the provided <code>String</code> buffer. <a href=\"trait.BufRead.html#method.read_line\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-BufReader%3CR%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/buffered/bufreader.rs.html#405-418\">source</a></span><a href=\"#impl-Debug-for-BufReader%3CR%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;R&gt; <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.BufReader.html\" title=\"struct std::io::BufReader\">BufReader</a>&lt;R&gt;<div class=\"where\">where\n    R: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/buffered/bufreader.rs.html#409-417\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../fmt/type.Result.html\" title=\"type std::fmt::Result\">Result</a></h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Read-for-BufReader%3CR%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/buffered/bufreader.rs.html#279-391\">source</a></span><a href=\"#impl-Read-for-BufReader%3CR%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;R: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"trait.Read.html\" title=\"trait std::io::Read\">Read</a>&gt; <a class=\"trait\" href=\"trait.Read.html\" title=\"trait std::io::Read\">Read</a> for <a class=\"struct\" href=\"struct.BufReader.html\" title=\"struct std::io::BufReader\">BufReader</a>&lt;R&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/buffered/bufreader.rs.html#280-292\">source</a><a href=\"#method.read\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Read.html#tymethod.read\" class=\"fn\">read</a>(&amp;mut self, buf: &amp;mut [<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Pull some bytes from this source into the specified buffer, returning\nhow many bytes were read. <a href=\"trait.Read.html#tymethod.read\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_buf\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/buffered/bufreader.rs.html#294-311\">source</a><a href=\"#method.read_buf\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Read.html#method.read_buf\" class=\"fn\">read_buf</a>(&amp;mut self, cursor: <a class=\"struct\" href=\"struct.BorrowedCursor.html\" title=\"struct std::io::BorrowedCursor\">BorrowedCursor</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>read_buf</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/78485\">#78485</a>)</span></div></span><div class=\"docblock\">Pull some bytes from this source into the specified buffer. <a href=\"trait.Read.html#method.read_buf\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_exact\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/buffered/bufreader.rs.html#317-323\">source</a><a href=\"#method.read_exact\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Read.html#method.read_exact\" class=\"fn\">read_exact</a>(&amp;mut self, buf: &amp;mut [<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\">Read the exact number of bytes required to fill <code>buf</code>. <a href=\"trait.Read.html#method.read_exact\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_buf_exact\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/buffered/bufreader.rs.html#325-331\">source</a><a href=\"#method.read_buf_exact\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Read.html#method.read_buf_exact\" class=\"fn\">read_buf_exact</a>(&amp;mut self, cursor: <a class=\"struct\" href=\"struct.BorrowedCursor.html\" title=\"struct std::io::BorrowedCursor\">BorrowedCursor</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>read_buf</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/78485\">#78485</a>)</span></div></span><div class=\"docblock\">Read the exact number of bytes required to fill <code>cursor</code>. <a href=\"trait.Read.html#method.read_buf_exact\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/buffered/bufreader.rs.html#333-344\">source</a><a href=\"#method.read_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Read.html#method.read_vectored\" class=\"fn\">read_vectored</a>(&amp;mut self, bufs: &amp;mut [<a class=\"struct\" href=\"struct.IoSliceMut.html\" title=\"struct std::io::IoSliceMut\">IoSliceMut</a>&lt;'_&gt;]) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Like <code>read</code>, except that it reads into a slice of buffers. <a href=\"trait.Read.html#method.read_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_read_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/buffered/bufreader.rs.html#346-348\">source</a><a href=\"#method.is_read_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Read.html#method.is_read_vectored\" class=\"fn\">is_read_vectored</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>can_vector</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/69941\">#69941</a>)</span></div></span><div class=\"docblock\">Determines if this <code>Read</code>er has an efficient <code>read_vectored</code>\nimplementation. <a href=\"trait.Read.html#method.is_read_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_to_end\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/buffered/bufreader.rs.html#352-359\">source</a><a href=\"#method.read_to_end\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Read.html#method.read_to_end\" class=\"fn\">read_to_end</a>(&amp;mut self, buf: &amp;mut <a class=\"struct\" href=\"../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Read all bytes until EOF in this source, placing them into <code>buf</code>. <a href=\"trait.Read.html#method.read_to_end\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_to_string\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/buffered/bufreader.rs.html#363-390\">source</a><a href=\"#method.read_to_string\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Read.html#method.read_to_string\" class=\"fn\">read_to_string</a>(&amp;mut self, buf: &amp;mut <a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a>) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Read all bytes until EOF in this source, appending them to <code>buf</code>. <a href=\"trait.Read.html#method.read_to_string\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Seek-for-BufReader%3CR%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/buffered/bufreader.rs.html#421-522\">source</a></span><a href=\"#impl-Seek-for-BufReader%3CR%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;R: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"trait.Seek.html\" title=\"trait std::io::Seek\">Seek</a>&gt; <a class=\"trait\" href=\"trait.Seek.html\" title=\"trait std::io::Seek\">Seek</a> for <a class=\"struct\" href=\"struct.BufReader.html\" title=\"struct std::io::BufReader\">BufReader</a>&lt;R&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.seek\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/buffered/bufreader.rs.html#444-467\">source</a><a href=\"#method.seek\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Seek.html#tymethod.seek\" class=\"fn\">seek</a>(&amp;mut self, pos: <a class=\"enum\" href=\"enum.SeekFrom.html\" title=\"enum std::io::SeekFrom\">SeekFrom</a>) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Seek to an offset, in bytes, in the underlying reader.</p>\n<p>The position used for seeking with <code><a href=\"enum.SeekFrom.html#variant.Current\" title=\"variant std::io::SeekFrom::Current\">SeekFrom::Current</a>(_)</code> is the\nposition the underlying reader would be at if the <code>BufReader&lt;R&gt;</code> had no\ninternal buffer.</p>\n<p>Seeking always discards the internal buffer, even if the seek position\nwould otherwise fall within it. This guarantees that calling\n<a href=\"struct.BufReader.html#method.into_inner\" title=\"method std::io::BufReader::into_inner\"><code>BufReader::into_inner()</code></a> immediately after a seek yields the underlying reader\nat the same position.</p>\n<p>To seek without discarding the internal buffer, use <a href=\"struct.BufReader.html#method.seek_relative\" title=\"method std::io::BufReader::seek_relative\"><code>BufReader::seek_relative</code></a>.</p>\n<p>See <a href=\"trait.Seek.html\" title=\"trait std::io::Seek\"><code>std::io::Seek</code></a> for more details.</p>\n<p>Note: In the edge case where you’re seeking with <code><a href=\"enum.SeekFrom.html#variant.Current\" title=\"variant std::io::SeekFrom::Current\">SeekFrom::Current</a>(n)</code>\nwhere <code>n</code> minus the internal buffer length overflows an <code>i64</code>, two\nseeks will be performed instead of one. If the second seek returns\n<a href=\"../result/enum.Result.html#variant.Err\" title=\"variant std::result::Result::Err\"><code>Err</code></a>, the underlying reader will be left at the same position it would\nhave if you called <code>seek</code> with <code><a href=\"enum.SeekFrom.html#variant.Current\" title=\"variant std::io::SeekFrom::Current\">SeekFrom::Current</a>(0)</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.stream_position\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/buffered/bufreader.rs.html#504-511\">source</a><a href=\"#method.stream_position\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Seek.html#method.stream_position\" class=\"fn\">stream_position</a>(&amp;mut self) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the current seek position from the start of the stream.</p>\n<p>The value returned is equivalent to <code>self.seek(SeekFrom::Current(0))</code>\nbut does not flush the internal buffer. Due to this optimization the\nfunction does not guarantee that calling <code>.into_inner()</code> immediately\nafterwards will yield the underlying reader at the same position. Use\n<a href=\"struct.BufReader.html#method.seek\" title=\"method std::io::BufReader::seek\"><code>BufReader::seek</code></a> instead if you require that guarantee.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>This function will panic if the position of the inner reader is smaller\nthan the amount of buffered data. That can happen if the inner reader\nhas an incorrect implementation of <a href=\"trait.Seek.html#method.stream_position\" title=\"method std::io::Seek::stream_position\"><code>Seek::stream_position</code></a>, or if the\nposition has gone out of sync due to calling <a href=\"trait.Seek.html#tymethod.seek\" title=\"method std::io::Seek::seek\"><code>Seek::seek</code></a> directly on\nthe underlying reader.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::{\n    io::{<span class=\"self\">self</span>, BufRead, BufReader, Seek},\n    fs::File,\n};\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = BufReader::new(File::open(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>);\n\n    <span class=\"kw\">let </span>before = f.stream_position()<span class=\"question-mark\">?</span>;\n    f.read_line(<span class=\"kw-2\">&amp;mut </span>String::new())<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>after = f.stream_position()<span class=\"question-mark\">?</span>;\n\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"The first line was {} bytes long\"</span>, after - before);\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::%7B%0A++++io::%7Bself,+BufRead,+BufReader,+Seek%7D,%0A++++fs::File,%0A%7D;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+mut+f+=+BufReader::new(File::open(%22foo.txt%22)?);%0A%0A++++let+before+=+f.stream_position()?;%0A++++f.read_line(%26mut+String::new())?;%0A++++let+after+=+f.stream_position()?;%0A%0A++++println!(%22The+first+line+was+%7B%7D+bytes+long%22,+after+-+before);%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.seek_relative-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/buffered/bufreader.rs.html#519-521\">source</a><a href=\"#method.seek_relative-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Seek.html#method.seek_relative\" class=\"fn\">seek_relative</a>(&amp;mut self, offset: <a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Seeks relative to the current position.</p>\n<p>If the new position lies within the buffer, the buffer will not be\nflushed, allowing for more efficient seeks. This method does not return\nthe location of the underlying reader, so the caller must track this\ninformation themselves if it is required.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rewind\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.55.0\">1.55.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1957-1960\">source</a></span><a href=\"#method.rewind\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Seek.html#method.rewind\" class=\"fn\">rewind</a>(&amp;mut self) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\">Rewind to the beginning of a stream. <a href=\"trait.Seek.html#method.rewind\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.stream_len\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/mod.rs.html#1997-2008\">source</a><a href=\"#method.stream_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Seek.html#method.stream_len\" class=\"fn\">stream_len</a>(&amp;mut self) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>seek_stream_len</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/59359\">#59359</a>)</span></div></span><div class=\"docblock\">Returns the length of this stream (in bytes). <a href=\"trait.Seek.html#method.stream_len\">Read more</a></div></details></div></details></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-BufReader%3CR%3E\" class=\"impl\"><a href=\"#impl-Freeze-for-BufReader%3CR%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;R&gt; <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.BufReader.html\" title=\"struct std::io::BufReader\">BufReader</a>&lt;R&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-RefUnwindSafe-for-BufReader%3CR%3E\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-BufReader%3CR%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;R&gt; <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.BufReader.html\" title=\"struct std::io::BufReader\">BufReader</a>&lt;R&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Send-for-BufReader%3CR%3E\" class=\"impl\"><a href=\"#impl-Send-for-BufReader%3CR%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;R&gt; <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.BufReader.html\" title=\"struct std::io::BufReader\">BufReader</a>&lt;R&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Sync-for-BufReader%3CR%3E\" class=\"impl\"><a href=\"#impl-Sync-for-BufReader%3CR%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;R&gt; <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.BufReader.html\" title=\"struct std::io::BufReader\">BufReader</a>&lt;R&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Unpin-for-BufReader%3CR%3E\" class=\"impl\"><a href=\"#impl-Unpin-for-BufReader%3CR%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;R&gt; <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.BufReader.html\" title=\"struct std::io::BufReader\">BufReader</a>&lt;R&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-UnwindSafe-for-BufReader%3CR%3E\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-BufReader%3CR%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;R&gt; <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.BufReader.html\" title=\"struct std::io::BufReader\">BufReader</a>&lt;R&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div><script type=\"text/json\" id=\"notable-traits-data\">{\"&[u8]\":\"<h3>Notable traits for <code>&amp;[<a class=\\\"primitive\\\" href=\\\"../primitive.u8.html\\\">u8</a>]</code></h3><pre><code><div class=\\\"where\\\">impl <a class=\\\"trait\\\" href=\\\"trait.Read.html\\\" title=\\\"trait std::io::Read\\\">Read</a> for &amp;[<a class=\\\"primitive\\\" href=\\\"../primitive.u8.html\\\">u8</a>]</div>\",\"BufReader<R>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"struct.BufReader.html\\\" title=\\\"struct std::io::BufReader\\\">BufReader</a>&lt;R&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;R: ?<a class=\\\"trait\\\" href=\\\"../marker/trait.Sized.html\\\" title=\\\"trait std::marker::Sized\\\">Sized</a> + <a class=\\\"trait\\\" href=\\\"trait.Read.html\\\" title=\\\"trait std::io::Read\\\">Read</a>&gt; <a class=\\\"trait\\\" href=\\\"trait.Read.html\\\" title=\\\"trait std::io::Read\\\">Read</a> for <a class=\\\"struct\\\" href=\\\"struct.BufReader.html\\\" title=\\\"struct std::io::BufReader\\\">BufReader</a>&lt;R&gt;</div>\"}</script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:11:20.194Z"
}