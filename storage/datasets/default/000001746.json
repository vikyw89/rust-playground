{
	"title": "JoinHandle in std::thread - Rust",
	"url": "https://doc.rust-lang.org/stable/std/thread/struct.JoinHandle.html",
	"markdown": "# JoinHandle in std::thread - Rust\n\n```\npub struct JoinHandle<T>(/* private fields */);\n```\n\nExpand description\n\nAn owned permission to join on a thread (block on its termination).\n\nA `JoinHandle` _detaches_ the associated thread when it is dropped, which means that there is no longer any handle to the thread and no way to `join` on it.\n\nDue to platform restrictions, it is not possible to [`Clone`](../clone/trait.Clone.html \"trait std::clone::Clone\") this handle: the ability to join a thread is a uniquely-owned permission.\n\nThis `struct` is created by the [`thread::spawn`](fn.spawn.html \"fn std::thread::spawn\") function and the [`thread::Builder::spawn`](about:blank/struct.Builder.html#method.spawn \"method std::thread::Builder::spawn\") method.\n\n## [§](#examples)Examples\n\nCreation from [`thread::spawn`](fn.spawn.html \"fn std::thread::spawn\"):\n\n```\nuse std::thread;\n\nlet join_handle: thread::JoinHandle<_> = thread::spawn(|| {\n    // some work here\n});\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::thread;%0A++++%0A++++let+join_handle:+thread::JoinHandle%3C_%3E+=+thread::spawn(%7C%7C+%7B%0A++++++++//+some+work+here%0A++++%7D);%0A%7D&edition=2021)\n\nCreation from [`thread::Builder::spawn`](about:blank/struct.Builder.html#method.spawn \"method std::thread::Builder::spawn\"):\n\n```\nuse std::thread;\n\nlet builder = thread::Builder::new();\n\nlet join_handle: thread::JoinHandle<_> = builder.spawn(|| {\n    // some work here\n}).unwrap();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::thread;%0A++++%0A++++let+builder+=+thread::Builder::new();%0A++++%0A++++let+join_handle:+thread::JoinHandle%3C_%3E+=+builder.spawn(%7C%7C+%7B%0A++++++++//+some+work+here%0A++++%7D).unwrap();%0A%7D&edition=2021)\n\nA thread being detached and outliving the thread that spawned it:\n\n```\nuse std::thread;\nuse std::time::Duration;\n\nlet original_thread = thread::spawn(|| {\n    let _detached_thread = thread::spawn(|| {\n        // Here we sleep to make sure that the first thread returns before.\n        thread::sleep(Duration::from_millis(10));\n        // This will be called, even though the JoinHandle is dropped.\n        println!(\"♫ Still alive ♫\");\n    });\n});\n\noriginal_thread.join().expect(\"The thread being joined has panicked\");\nprintln!(\"Original thread is joined.\");\n\n// We make sure that the new thread has time to run, before the main\n// thread returns.\n\nthread::sleep(Duration::from_millis(1000));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::thread;%0A++++use+std::time::Duration;%0A++++%0A++++let+original_thread+=+thread::spawn(%7C%7C+%7B%0A++++++++let+_detached_thread+=+thread::spawn(%7C%7C+%7B%0A++++++++++++//+Here+we+sleep+to+make+sure+that+the+first+thread+returns+before.%0A++++++++++++thread::sleep(Duration::from_millis(10));%0A++++++++++++//+This+will+be+called,+even+though+the+JoinHandle+is+dropped.%0A++++++++++++println!(%22%E2%99%AB+Still+alive+%E2%99%AB%22);%0A++++++++%7D);%0A++++%7D);%0A++++%0A++++original_thread.join().expect(%22The+thread+being+joined+has+panicked%22);%0A++++println!(%22Original+thread+is+joined.%22);%0A++++%0A++++//+We+make+sure+that+the+new+thread+has+time+to+run,+before+the+main%0A++++//+thread+returns.%0A++++%0A++++thread::sleep(Duration::from_millis(1000));%0A%7D&edition=2021)\n\n[source](about:blank/src/std/thread/mod.rs.html#1667-1742)[§](#impl-JoinHandle%3CT%3E)\n\n1.0.0 · [source](about:blank/src/std/thread/mod.rs.html#1686-1688)\n\nExtracts a handle to the underlying thread.\n\n##### [§](#examples-1)Examples\n\n```\nuse std::thread;\n\nlet builder = thread::Builder::new();\n\nlet join_handle: thread::JoinHandle<_> = builder.spawn(|| {\n    // some work here\n}).unwrap();\n\nlet thread = join_handle.thread();\nprintln!(\"thread id: {:?}\", thread.id());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::thread;%0A++++%0A++++let+builder+=+thread::Builder::new();%0A++++%0A++++let+join_handle:+thread::JoinHandle%3C_%3E+=+builder.spawn(%7C%7C+%7B%0A++++++++//+some+work+here%0A++++%7D).unwrap();%0A++++%0A++++let+thread+=+join_handle.thread();%0A++++println!(%22thread+id:+%7B:?%7D%22,+thread.id());%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/thread/mod.rs.html#1724-1726)\n\nWaits for the associated thread to finish.\n\nThis function will return immediately if the associated thread has already finished.\n\nIn terms of [atomic memory orderings](../sync/atomic/index.html \"mod std::sync::atomic\"), the completion of the associated thread synchronizes with this function returning. In other words, all operations performed by that thread [happen before](https://doc.rust-lang.org/nomicon/atomics.html#data-accesses) all operations that happen after `join` returns.\n\nIf the associated thread panics, [`Err`](about:blank/result/enum.Result.html#variant.Err \"variant std::result::Result::Err\") is returned with the parameter given to [`panic!`](../macro.panic.html \"macro std::panic\").\n\n##### [§](#panics)Panics\n\nThis function may panic on some platforms if a thread attempts to join itself or otherwise may create a deadlock with joining threads.\n\n##### [§](#examples-2)Examples\n\n```\nuse std::thread;\n\nlet builder = thread::Builder::new();\n\nlet join_handle: thread::JoinHandle<_> = builder.spawn(|| {\n    // some work here\n}).unwrap();\njoin_handle.join().expect(\"Couldn't join on the associated thread\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::thread;%0A++++%0A++++let+builder+=+thread::Builder::new();%0A++++%0A++++let+join_handle:+thread::JoinHandle%3C_%3E+=+builder.spawn(%7C%7C+%7B%0A++++++++//+some+work+here%0A++++%7D).unwrap();%0A++++join_handle.join().expect(%22Couldn%27t+join+on+the+associated+thread%22);%0A%7D&edition=2021)\n\n1.61.0 · [source](about:blank/src/std/thread/mod.rs.html#1739-1741)\n\nChecks if the associated thread has finished running its main function.\n\n`is_finished` supports implementing a non-blocking join operation, by checking `is_finished`, and calling `join` if it returns `true`. This function does not block. To block while waiting on the thread to finish, use [`join`](about:blank/struct.JoinHandle.html#method.join \"method std::thread::JoinHandle::join\").\n\nThis might return `true` for a brief moment after the thread’s main function has returned, but before the thread itself has stopped running. However, once this returns `true`, [`join`](about:blank/struct.JoinHandle.html#method.join \"method std::thread::JoinHandle::join\") can be expected to return quickly, without blocking for any significant amount of time.\n\n1.63.0 · [source](about:blank/src/std/os/windows/io/handle.rs.html#647-652)[§](#impl-AsHandle-for-JoinHandle%3CT%3E)\n\nAvailable on **Windows** only.\n\n1.9.0 · [source](about:blank/src/std/os/windows/thread.rs.html#12-17)[§](#impl-AsRawHandle-for-JoinHandle%3CT%3E)\n\nAvailable on **Windows** only.\n\n1.16.0 · [source](about:blank/src/std/thread/mod.rs.html#1757-1761)[§](#impl-Debug-for-JoinHandle%3CT%3E)\n\n1.63.0 · [source](about:blank/src/std/os/windows/io/handle.rs.html#655-660)[§](#impl-From%3CJoinHandle%3CT%3E%3E-for-OwnedHandle)\n\nAvailable on **Windows** only.\n\n[source](about:blank/src/std/os/windows/io/handle.rs.html#657-659)[§](#method.from)\n\nConverts to this type from the input type.\n\n1.9.0 · [source](about:blank/src/std/os/windows/thread.rs.html#20-25)[§](#impl-IntoRawHandle-for-JoinHandle%3CT%3E)\n\nAvailable on **Windows** only.\n\n1.9.0 · [source](about:blank/src/std/os/unix/thread.rs.html#33-41)[§](#impl-JoinHandleExt-for-JoinHandle%3CT%3E)\n\nAvailable on **Unix** only.\n\n[source](about:blank/src/std/os/unix/thread.rs.html#34-36)[§](#method.as_pthread_t)\n\nExtracts the raw pthread\\_t without taking ownership\n\n[source](about:blank/src/std/os/unix/thread.rs.html#38-40)[§](#method.into_pthread_t)\n\nConsumes the thread, returning the raw pthread\\_t [Read more](about:blank/os/unix/thread/trait.JoinHandleExt.html#tymethod.into_pthread_t)\n\n1.29.0 · [source](about:blank/src/std/thread/mod.rs.html#1663)[§](#impl-Send-for-JoinHandle%3CT%3E)\n\n1.29.0 · [source](about:blank/src/std/thread/mod.rs.html#1665)[§](#impl-Sync-for-JoinHandle%3CT%3E)\n\n[§](#impl-Freeze-for-JoinHandle%3CT%3E)\n\n[§](#impl-RefUnwindSafe-for-JoinHandle%3CT%3E)\n\n[§](#impl-Unpin-for-JoinHandle%3CT%3E)\n\n[§](#impl-UnwindSafe-for-JoinHandle%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[§](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[§](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[§](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[§](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[§](#method.from-1)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[§](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[§](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[§](#impl-TryFrom%3CU%3E-for-T)\n\n[§](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[§](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[§](#impl-TryInto%3CU%3E-for-T)\n\n[§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[§](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"An owned permission to join on a thread (block on its termination).\"><title>JoinHandle in std::thread - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">JoinHandle</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">JoinHandle</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.is_finished\">is_finished</a></li><li><a href=\"#method.join\">join</a></li><li><a href=\"#method.thread\">thread</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-AsHandle-for-JoinHandle%3CT%3E\">AsHandle</a></li><li><a href=\"#impl-AsRawHandle-for-JoinHandle%3CT%3E\">AsRawHandle</a></li><li><a href=\"#impl-Debug-for-JoinHandle%3CT%3E\">Debug</a></li><li><a href=\"#impl-From%3CJoinHandle%3CT%3E%3E-for-OwnedHandle\">From&lt;JoinHandle&lt;T&gt;&gt;</a></li><li><a href=\"#impl-IntoRawHandle-for-JoinHandle%3CT%3E\">IntoRawHandle</a></li><li><a href=\"#impl-JoinHandleExt-for-JoinHandle%3CT%3E\">JoinHandleExt</a></li><li><a href=\"#impl-Send-for-JoinHandle%3CT%3E\">Send</a></li><li><a href=\"#impl-Sync-for-JoinHandle%3CT%3E\">Sync</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-RefUnwindSafe-for-JoinHandle%3CT%3E\">!RefUnwindSafe</a></li><li><a href=\"#impl-UnwindSafe-for-JoinHandle%3CT%3E\">!UnwindSafe</a></li><li><a href=\"#impl-Freeze-for-JoinHandle%3CT%3E\">Freeze</a></li><li><a href=\"#impl-Unpin-for-JoinHandle%3CT%3E\">Unpin</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::thread</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.AccessError.html\">AccessError</a></li><li><a href=\"struct.Builder.html\">Builder</a></li><li><a href=\"struct.JoinHandle.html\">JoinHandle</a></li><li><a href=\"struct.LocalKey.html\">LocalKey</a></li><li><a href=\"struct.Scope.html\">Scope</a></li><li><a href=\"struct.ScopedJoinHandle.html\">ScopedJoinHandle</a></li><li><a href=\"struct.Thread.html\">Thread</a></li><li><a href=\"struct.ThreadId.html\">ThreadId</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.available_parallelism.html\">available_parallelism</a></li><li><a href=\"fn.current.html\">current</a></li><li><a href=\"fn.panicking.html\">panicking</a></li><li><a href=\"fn.park.html\">park</a></li><li><a href=\"fn.park_timeout.html\">park_timeout</a></li><li><a href=\"fn.park_timeout_ms.html\">park_timeout_ms</a></li><li><a href=\"fn.scope.html\">scope</a></li><li><a href=\"fn.sleep.html\">sleep</a></li><li><a href=\"fn.sleep_ms.html\">sleep_ms</a></li><li><a href=\"fn.sleep_until.html\">sleep_until</a></li><li><a href=\"fn.spawn.html\">spawn</a></li><li><a href=\"fn.yield_now.html\">yield_now</a></li></ul><h3><a href=\"index.html#types\">Type Aliases</a></h3><ul class=\"block type\"><li><a href=\"type.Result.html\">Result</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">thread</a>::<wbr><a class=\"struct\" href=\"#\">JoinHandle</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/thread/mod.rs.html#1660\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct JoinHandle&lt;T&gt;(<span class=\"comment\">/* private fields */</span>);</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>An owned permission to join on a thread (block on its termination).</p>\n<p>A <code>JoinHandle</code> <em>detaches</em> the associated thread when it is dropped, which\nmeans that there is no longer any handle to the thread and no way to <code>join</code>\non it.</p>\n<p>Due to platform restrictions, it is not possible to <a href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\"><code>Clone</code></a> this\nhandle: the ability to join a thread is a uniquely-owned permission.</p>\n<p>This <code>struct</code> is created by the <a href=\"fn.spawn.html\" title=\"fn std::thread::spawn\"><code>thread::spawn</code></a> function and the\n<a href=\"struct.Builder.html#method.spawn\" title=\"method std::thread::Builder::spawn\"><code>thread::Builder::spawn</code></a> method.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<p>Creation from <a href=\"fn.spawn.html\" title=\"fn std::thread::spawn\"><code>thread::spawn</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::thread;\n\n<span class=\"kw\">let </span>join_handle: thread::JoinHandle&lt;<span class=\"kw\">_</span>&gt; = thread::spawn(|| {\n    <span class=\"comment\">// some work here\n</span>});</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::thread;%0A++++%0A++++let+join_handle:+thread::JoinHandle%3C_%3E+=+thread::spawn(%7C%7C+%7B%0A++++++++//+some+work+here%0A++++%7D);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Creation from <a href=\"struct.Builder.html#method.spawn\" title=\"method std::thread::Builder::spawn\"><code>thread::Builder::spawn</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::thread;\n\n<span class=\"kw\">let </span>builder = thread::Builder::new();\n\n<span class=\"kw\">let </span>join_handle: thread::JoinHandle&lt;<span class=\"kw\">_</span>&gt; = builder.spawn(|| {\n    <span class=\"comment\">// some work here\n</span>}).unwrap();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::thread;%0A++++%0A++++let+builder+=+thread::Builder::new();%0A++++%0A++++let+join_handle:+thread::JoinHandle%3C_%3E+=+builder.spawn(%7C%7C+%7B%0A++++++++//+some+work+here%0A++++%7D).unwrap();%0A%7D&amp;edition=2021\">Run</a></div>\n<p>A thread being detached and outliving the thread that spawned it:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::thread;\n<span class=\"kw\">use </span>std::time::Duration;\n\n<span class=\"kw\">let </span>original_thread = thread::spawn(|| {\n    <span class=\"kw\">let </span>_detached_thread = thread::spawn(|| {\n        <span class=\"comment\">// Here we sleep to make sure that the first thread returns before.\n        </span>thread::sleep(Duration::from_millis(<span class=\"number\">10</span>));\n        <span class=\"comment\">// This will be called, even though the JoinHandle is dropped.\n        </span><span class=\"macro\">println!</span>(<span class=\"string\">\"♫ Still alive ♫\"</span>);\n    });\n});\n\noriginal_thread.join().expect(<span class=\"string\">\"The thread being joined has panicked\"</span>);\n<span class=\"macro\">println!</span>(<span class=\"string\">\"Original thread is joined.\"</span>);\n\n<span class=\"comment\">// We make sure that the new thread has time to run, before the main\n// thread returns.\n\n</span>thread::sleep(Duration::from_millis(<span class=\"number\">1000</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::thread;%0A++++use+std::time::Duration;%0A++++%0A++++let+original_thread+=+thread::spawn(%7C%7C+%7B%0A++++++++let+_detached_thread+=+thread::spawn(%7C%7C+%7B%0A++++++++++++//+Here+we+sleep+to+make+sure+that+the+first+thread+returns+before.%0A++++++++++++thread::sleep(Duration::from_millis(10));%0A++++++++++++//+This+will+be+called,+even+though+the+JoinHandle+is+dropped.%0A++++++++++++println!(%22%E2%99%AB+Still+alive+%E2%99%AB%22);%0A++++++++%7D);%0A++++%7D);%0A++++%0A++++original_thread.join().expect(%22The+thread+being+joined+has+panicked%22);%0A++++println!(%22Original+thread+is+joined.%22);%0A++++%0A++++//+We+make+sure+that+the+new+thread+has+time+to+run,+before+the+main%0A++++//+thread+returns.%0A++++%0A++++thread::sleep(Duration::from_millis(1000));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-JoinHandle%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/thread/mod.rs.html#1667-1742\">source</a><a href=\"#impl-JoinHandle%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"struct.JoinHandle.html\" title=\"struct std::thread::JoinHandle\">JoinHandle</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.thread\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/thread/mod.rs.html#1686-1688\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.thread\" class=\"fn\">thread</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"struct.Thread.html\" title=\"struct std::thread::Thread\">Thread</a></h4></section></summary><div class=\"docblock\"><p>Extracts a handle to the underlying thread.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::thread;\n\n<span class=\"kw\">let </span>builder = thread::Builder::new();\n\n<span class=\"kw\">let </span>join_handle: thread::JoinHandle&lt;<span class=\"kw\">_</span>&gt; = builder.spawn(|| {\n    <span class=\"comment\">// some work here\n</span>}).unwrap();\n\n<span class=\"kw\">let </span>thread = join_handle.thread();\n<span class=\"macro\">println!</span>(<span class=\"string\">\"thread id: {:?}\"</span>, thread.id());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::thread;%0A++++%0A++++let+builder+=+thread::Builder::new();%0A++++%0A++++let+join_handle:+thread::JoinHandle%3C_%3E+=+builder.spawn(%7C%7C+%7B%0A++++++++//+some+work+here%0A++++%7D).unwrap();%0A++++%0A++++let+thread+=+join_handle.thread();%0A++++println!(%22thread+id:+%7B:?%7D%22,+thread.id());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.join\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/thread/mod.rs.html#1724-1726\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.join\" class=\"fn\">join</a>(self) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::thread::Result\">Result</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Waits for the associated thread to finish.</p>\n<p>This function will return immediately if the associated thread has already finished.</p>\n<p>In terms of <a href=\"../sync/atomic/index.html\" title=\"mod std::sync::atomic\">atomic memory orderings</a>,  the completion of the associated\nthread synchronizes with this function returning. In other words, all\noperations performed by that thread <a href=\"https://doc.rust-lang.org/nomicon/atomics.html#data-accesses\">happen\nbefore</a> all\noperations that happen after <code>join</code> returns.</p>\n<p>If the associated thread panics, <a href=\"../result/enum.Result.html#variant.Err\" title=\"variant std::result::Result::Err\"><code>Err</code></a> is returned with the parameter given\nto <a href=\"../macro.panic.html\" title=\"macro std::panic\"><code>panic!</code></a>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>This function may panic on some platforms if a thread attempts to join\nitself or otherwise may create a deadlock with joining threads.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::thread;\n\n<span class=\"kw\">let </span>builder = thread::Builder::new();\n\n<span class=\"kw\">let </span>join_handle: thread::JoinHandle&lt;<span class=\"kw\">_</span>&gt; = builder.spawn(|| {\n    <span class=\"comment\">// some work here\n</span>}).unwrap();\njoin_handle.join().expect(<span class=\"string\">\"Couldn't join on the associated thread\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::thread;%0A++++%0A++++let+builder+=+thread::Builder::new();%0A++++%0A++++let+join_handle:+thread::JoinHandle%3C_%3E+=+builder.spawn(%7C%7C+%7B%0A++++++++//+some+work+here%0A++++%7D).unwrap();%0A++++join_handle.join().expect(%22Couldn't+join+on+the+associated+thread%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_finished\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.61.0\">1.61.0</span> · <a class=\"src\" href=\"../../src/std/thread/mod.rs.html#1739-1741\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.is_finished\" class=\"fn\">is_finished</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Checks if the associated thread has finished running its main function.</p>\n<p><code>is_finished</code> supports implementing a non-blocking join operation, by checking\n<code>is_finished</code>, and calling <code>join</code> if it returns <code>true</code>. This function does not block. To\nblock while waiting on the thread to finish, use <a href=\"struct.JoinHandle.html#method.join\" title=\"method std::thread::JoinHandle::join\"><code>join</code></a>.</p>\n<p>This might return <code>true</code> for a brief moment after the thread’s main\nfunction has returned, but before the thread itself has stopped running.\nHowever, once this returns <code>true</code>, <a href=\"struct.JoinHandle.html#method.join\" title=\"method std::thread::JoinHandle::join\"><code>join</code></a> can be expected\nto return quickly, without blocking for any significant amount of time.</p>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsHandle-for-JoinHandle%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.63.0\">1.63.0</span> · <a class=\"src\" href=\"../../src/std/os/windows/io/handle.rs.html#647-652\">source</a></span><a href=\"#impl-AsHandle-for-JoinHandle%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../os/windows/io/trait.AsHandle.html\" title=\"trait std::os::windows::io::AsHandle\">AsHandle</a> for <a class=\"struct\" href=\"struct.JoinHandle.html\" title=\"struct std::thread::JoinHandle\">JoinHandle</a>&lt;T&gt;</h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Windows</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_handle\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/windows/io/handle.rs.html#649-651\">source</a><a href=\"#method.as_handle\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/windows/io/trait.AsHandle.html#tymethod.as_handle\" class=\"fn\">as_handle</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../os/windows/io/struct.BorrowedHandle.html\" title=\"struct std::os::windows::io::BorrowedHandle\">BorrowedHandle</a>&lt;'_&gt;</h4></section></summary><div class=\"docblock\">Borrows the handle. <a href=\"../os/windows/io/trait.AsHandle.html#tymethod.as_handle\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsRawHandle-for-JoinHandle%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> · <a class=\"src\" href=\"../../src/std/os/windows/thread.rs.html#12-17\">source</a></span><a href=\"#impl-AsRawHandle-for-JoinHandle%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../os/windows/io/trait.AsRawHandle.html\" title=\"trait std::os::windows::io::AsRawHandle\">AsRawHandle</a> for <a class=\"struct\" href=\"struct.JoinHandle.html\" title=\"struct std::thread::JoinHandle\">JoinHandle</a>&lt;T&gt;</h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Windows</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_raw_handle\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/windows/thread.rs.html#14-16\">source</a><a href=\"#method.as_raw_handle\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/windows/io/trait.AsRawHandle.html#tymethod.as_raw_handle\" class=\"fn\">as_raw_handle</a>(&amp;self) -&gt; <a class=\"type\" href=\"../os/windows/io/type.RawHandle.html\" title=\"type std::os::windows::io::RawHandle\">RawHandle</a></h4></section></summary><div class=\"docblock\">Extracts the raw handle. <a href=\"../os/windows/io/trait.AsRawHandle.html#tymethod.as_raw_handle\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-JoinHandle%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0\">1.16.0</span> · <a class=\"src\" href=\"../../src/std/thread/mod.rs.html#1757-1761\">source</a></span><a href=\"#impl-Debug-for-JoinHandle%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.JoinHandle.html\" title=\"struct std::thread::JoinHandle\">JoinHandle</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/thread/mod.rs.html#1758-1760\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../fmt/type.Result.html\" title=\"type std::fmt::Result\">Result</a></h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CJoinHandle%3CT%3E%3E-for-OwnedHandle\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.63.0\">1.63.0</span> · <a class=\"src\" href=\"../../src/std/os/windows/io/handle.rs.html#655-660\">source</a></span><a href=\"#impl-From%3CJoinHandle%3CT%3E%3E-for-OwnedHandle\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.JoinHandle.html\" title=\"struct std::thread::JoinHandle\">JoinHandle</a>&lt;T&gt;&gt; for <a class=\"struct\" href=\"../os/windows/io/struct.OwnedHandle.html\" title=\"struct std::os::windows::io::OwnedHandle\">OwnedHandle</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Windows</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/windows/io/handle.rs.html#657-659\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(join_handle: <a class=\"struct\" href=\"struct.JoinHandle.html\" title=\"struct std::thread::JoinHandle\">JoinHandle</a>&lt;T&gt;) -&gt; <a class=\"struct\" href=\"../os/windows/io/struct.OwnedHandle.html\" title=\"struct std::os::windows::io::OwnedHandle\">OwnedHandle</a></h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-IntoRawHandle-for-JoinHandle%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> · <a class=\"src\" href=\"../../src/std/os/windows/thread.rs.html#20-25\">source</a></span><a href=\"#impl-IntoRawHandle-for-JoinHandle%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../os/windows/io/trait.IntoRawHandle.html\" title=\"trait std::os::windows::io::IntoRawHandle\">IntoRawHandle</a> for <a class=\"struct\" href=\"struct.JoinHandle.html\" title=\"struct std::thread::JoinHandle\">JoinHandle</a>&lt;T&gt;</h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Windows</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_raw_handle\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/windows/thread.rs.html#22-24\">source</a><a href=\"#method.into_raw_handle\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/windows/io/trait.IntoRawHandle.html#tymethod.into_raw_handle\" class=\"fn\">into_raw_handle</a>(self) -&gt; <a class=\"type\" href=\"../os/windows/io/type.RawHandle.html\" title=\"type std::os::windows::io::RawHandle\">RawHandle</a></h4></section></summary><div class=\"docblock\">Consumes this object, returning the raw underlying handle. <a href=\"../os/windows/io/trait.IntoRawHandle.html#tymethod.into_raw_handle\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-JoinHandleExt-for-JoinHandle%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> · <a class=\"src\" href=\"../../src/std/os/unix/thread.rs.html#33-41\">source</a></span><a href=\"#impl-JoinHandleExt-for-JoinHandle%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../os/unix/thread/trait.JoinHandleExt.html\" title=\"trait std::os::unix::thread::JoinHandleExt\">JoinHandleExt</a> for <a class=\"struct\" href=\"struct.JoinHandle.html\" title=\"struct std::thread::JoinHandle\">JoinHandle</a>&lt;T&gt;</h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Unix</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_pthread_t\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/unix/thread.rs.html#34-36\">source</a><a href=\"#method.as_pthread_t\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/unix/thread/trait.JoinHandleExt.html#tymethod.as_pthread_t\" class=\"fn\">as_pthread_t</a>(&amp;self) -&gt; <a class=\"type\" href=\"../os/unix/thread/type.RawPthread.html\" title=\"type std::os::unix::thread::RawPthread\">RawPthread</a></h4></section></summary><div class=\"docblock\">Extracts the raw pthread_t without taking ownership</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_pthread_t\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/unix/thread.rs.html#38-40\">source</a><a href=\"#method.into_pthread_t\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/unix/thread/trait.JoinHandleExt.html#tymethod.into_pthread_t\" class=\"fn\">into_pthread_t</a>(self) -&gt; <a class=\"type\" href=\"../os/unix/thread/type.RawPthread.html\" title=\"type std::os::unix::thread::RawPthread\">RawPthread</a></h4></section></summary><div class=\"docblock\">Consumes the thread, returning the raw pthread_t <a href=\"../os/unix/thread/trait.JoinHandleExt.html#tymethod.into_pthread_t\">Read more</a></div></details></div></details><section id=\"impl-Send-for-JoinHandle%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.29.0\">1.29.0</span> · <a class=\"src\" href=\"../../src/std/thread/mod.rs.html#1663\">source</a></span><a href=\"#impl-Send-for-JoinHandle%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.JoinHandle.html\" title=\"struct std::thread::JoinHandle\">JoinHandle</a>&lt;T&gt;</h3></section><section id=\"impl-Sync-for-JoinHandle%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.29.0\">1.29.0</span> · <a class=\"src\" href=\"../../src/std/thread/mod.rs.html#1665\">source</a></span><a href=\"#impl-Sync-for-JoinHandle%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.JoinHandle.html\" title=\"struct std::thread::JoinHandle\">JoinHandle</a>&lt;T&gt;</h3></section></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-JoinHandle%3CT%3E\" class=\"impl\"><a href=\"#impl-Freeze-for-JoinHandle%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.JoinHandle.html\" title=\"struct std::thread::JoinHandle\">JoinHandle</a>&lt;T&gt;</h3></section><section id=\"impl-RefUnwindSafe-for-JoinHandle%3CT%3E\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-JoinHandle%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; !<a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.JoinHandle.html\" title=\"struct std::thread::JoinHandle\">JoinHandle</a>&lt;T&gt;</h3></section><section id=\"impl-Unpin-for-JoinHandle%3CT%3E\" class=\"impl\"><a href=\"#impl-Unpin-for-JoinHandle%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.JoinHandle.html\" title=\"struct std::thread::JoinHandle\">JoinHandle</a>&lt;T&gt;</h3></section><section id=\"impl-UnwindSafe-for-JoinHandle%3CT%3E\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-JoinHandle%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; !<a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.JoinHandle.html\" title=\"struct std::thread::JoinHandle\">JoinHandle</a>&lt;T&gt;</h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:20:25.968Z"
}