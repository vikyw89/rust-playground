{
	"title": "Special types and traits - The Rust Reference",
	"url": "https://doc.rust-lang.org/stable/reference/special-types-and-traits.html",
	"markdown": "# Special types and traits - The Rust Reference\n\nCertain types and traits that exist in [the standard library](../std/index.html) are known to the Rust compiler. This chapter documents the special features of these types and traits.\n\n## [`Box<T>`](#boxt)\n\n[`Box<T>`](../std/boxed/struct.Box.html) has a few special features that Rust doesn't currently allow for user defined types.\n\n-   The [dereference operator](about:blank/expressions/operator-expr.html#the-dereference-operator) for `Box<T>` produces a place which can be moved from. This means that the `*` operator and the destructor of `Box<T>` are built-in to the language.\n-   [Methods](about:blank/items/associated-items.html#associated-functions-and-methods) can take `Box<Self>` as a receiver.\n-   A trait may be implemented for `Box<T>` in the same crate as `T`, which the [orphan rules](about:blank/items/implementations.html#trait-implementation-coherence) prevent for other generic types.\n\n## [`Rc<T>`](#rct)\n\n[Methods](about:blank/items/associated-items.html#associated-functions-and-methods) can take [`Rc<Self>`](../std/rc/struct.Rc.html) as a receiver.\n\n## [`Arc<T>`](#arct)\n\n[Methods](about:blank/items/associated-items.html#associated-functions-and-methods) can take [`Arc<Self>`](../std/sync/struct.Arc.html) as a receiver.\n\n## [`Pin<P>`](#pinp)\n\n[Methods](about:blank/items/associated-items.html#associated-functions-and-methods) can take [`Pin<P>`](../std/pin/struct.Pin.html) as a receiver.\n\n## [`UnsafeCell<T>`](#unsafecellt)\n\n[`std::cell::UnsafeCell<T>`](../std/cell/struct.UnsafeCell.html) is used for [interior mutability](interior-mutability.html). It ensures that the compiler doesn't perform optimisations that are incorrect for such types. It also ensures that [`static` items](items/static-items.html) which have a type with interior mutability aren't placed in memory marked as read only.\n\n## [`PhantomData<T>`](#phantomdatat)\n\n[`std::marker::PhantomData<T>`](../std/marker/struct.PhantomData.html) is a zero-sized, minimum alignment, type that is considered to own a `T` for the purposes of [variance](about:blank/subtyping.html#variance), [drop check](../nomicon/dropck.html), and [auto traits](#auto-traits).\n\n## [Operator Traits](#operator-traits)\n\nThe traits in [`std::ops`](../std/ops/index.html) and [`std::cmp`](../std/cmp/index.html) are used to overload [operators](expressions/operator-expr.html), [indexing expressions](about:blank/expressions/array-expr.html#array-and-slice-indexing-expressions), and [call expressions](expressions/call-expr.html).\n\n## [`Deref` and `DerefMut`](#deref-and-derefmut)\n\nAs well as overloading the unary `*` operator, [`Deref`](../std/ops/trait.Deref.html) and [`DerefMut`](../std/ops/trait.DerefMut.html) are also used in [method resolution](expressions/method-call-expr.html) and [deref coercions](about:blank/type-coercions.html#coercion-types).\n\n## [`Drop`](#drop)\n\nThe [`Drop`](../std/ops/trait.Drop.html) trait provides a [destructor](destructors.html), to be run whenever a value of this type is to be destroyed.\n\n## [`Copy`](#copy)\n\nThe [`Copy`](../std/marker/trait.Copy.html) trait changes the semantics of a type implementing it. Values whose type implements `Copy` are copied rather than moved upon assignment.\n\n`Copy` can only be implemented for types which do not implement `Drop`, and whose fields are all `Copy`. For enums, this means all fields of all variants have to be `Copy`. For unions, this means all variants have to be `Copy`.\n\n`Copy` is implemented by the compiler for\n\n-   [Tuples](types/tuple.html) of `Copy` types\n-   [Function pointers](types/function-pointer.html)\n-   [Function items](types/function-item.html)\n-   [Closures](types/closure.html) that capture no values or that only capture values of `Copy` types\n\n## [`Clone`](#clone)\n\nThe [`Clone`](../std/clone/trait.Clone.html) trait is a supertrait of `Copy`, so it also needs compiler generated implementations. It is implemented by the compiler for the following types:\n\n-   Types with a built-in `Copy` implementation (see above)\n-   [Tuples](types/tuple.html) of `Clone` types\n-   [Closures](types/closure.html) that only capture values of `Clone` types or capture no values from the environment\n\n## [`Send`](#send)\n\nThe [`Send`](../std/marker/trait.Send.html) trait indicates that a value of this type is safe to send from one thread to another.\n\n## [`Sync`](#sync)\n\nThe [`Sync`](../std/marker/trait.Sync.html) trait indicates that a value of this type is safe to share between multiple threads. This trait must be implemented for all types used in immutable [`static` items](items/static-items.html).\n\n## [`Termination`](#termination)\n\nThe [`Termination`](../std/process/trait.Termination.html) trait indicates the acceptable return types for the [main function](about:blank/crates-and-source-files.html#main-functions) and [test functions](about:blank/attributes/testing.html#the-test-attribute).\n\n## [Auto traits](#auto-traits)\n\nThe [`Send`](../std/marker/trait.Send.html), [`Sync`](../std/marker/trait.Sync.html), [`Unpin`](../std/marker/trait.Unpin.html), [`UnwindSafe`](../std/panic/trait.UnwindSafe.html), and [`RefUnwindSafe`](../std/panic/trait.RefUnwindSafe.html) traits are _auto traits_. Auto traits have special properties.\n\nIf no explicit implementation or negative implementation is written out for an auto trait for a given type, then the compiler implements it automatically according to the following rules:\n\n-   `&T`, `&mut T`, `*const T`, `*mut T`, `[T; n]`, and `[T]` implement the trait if `T` does.\n-   Function item types and function pointers automatically implement the trait.\n-   Structs, enums, unions, and tuples implement the trait if all of their fields do.\n-   Closures implement the trait if the types of all of their captures do. A closure that captures a `T` by shared reference and a `U` by value implements any auto traits that both `&T` and `U` do.\n\nFor generic types (counting the built-in types above as generic over `T`), if a generic implementation is available, then the compiler does not automatically implement it for types that could use the implementation except that they do not meet the requisite trait bounds. For instance, the standard library implements `Send` for all `&T` where `T` is `Sync`; this means that the compiler will not implement `Send` for `&T` if `T` is `Send` but not `Sync`.\n\nAuto traits can also have negative implementations, shown as `impl !AutoTrait for T` in the standard library documentation, that override the automatic implementations. For example `*mut T` has a negative implementation of `Send`, and so `*mut T` is not `Send`, even if `T` is. There is currently no stable way to specify additional negative implementations; they exist only in the standard library.\n\nAuto traits may be added as an additional bound to any [trait object](types/trait-object.html), even though normally only one trait is allowed. For instance, `Box<dyn Debug + Send + UnwindSafe>` is a valid type.\n\n## [`Sized`](#sized)\n\nThe [`Sized`](../std/marker/trait.Sized.html) trait indicates that the size of this type is known at compile-time; that is, it's not a [dynamically sized type](dynamically-sized-types.html). [Type parameters](types/parameters.html) (except `Self` in traits) are `Sized` by default, as are [associated types](about:blank/items/associated-items.html#associated-types). `Sized` is always implemented automatically by the compiler, not by [implementation items](items/implementations.html). These implicit `Sized` bounds may be relaxed by using the special `?Sized` bound.",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>Special types and traits - The Rust Reference</title>\n\n\n        <!-- Custom HTML head -->\n        \n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"icon\" href=\"favicon.svg\">\n        <link rel=\"shortcut icon\" href=\"favicon.png\">\n        <link rel=\"stylesheet\" href=\"css/variables.css\">\n        <link rel=\"stylesheet\" href=\"css/general.css\">\n        <link rel=\"stylesheet\" href=\"css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"highlight.css\">\n        <link rel=\"stylesheet\" href=\"tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n        <link rel=\"stylesheet\" href=\"theme/reference.css\">\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"introduction.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"notation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> Notation</a></li><li class=\"chapter-item expanded \"><a href=\"lexical-structure.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Lexical structure</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"input-format.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.1.</strong> Input format</a></li><li class=\"chapter-item expanded \"><a href=\"keywords.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.2.</strong> Keywords</a></li><li class=\"chapter-item expanded \"><a href=\"identifiers.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.3.</strong> Identifiers</a></li><li class=\"chapter-item expanded \"><a href=\"comments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.4.</strong> Comments</a></li><li class=\"chapter-item expanded \"><a href=\"whitespace.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.5.</strong> Whitespace</a></li><li class=\"chapter-item expanded \"><a href=\"tokens.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.6.</strong> Tokens</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"macros.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Macros</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"macros-by-example.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> Macros By Example</a></li><li class=\"chapter-item expanded \"><a href=\"procedural-macros.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> Procedural Macros</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"crates-and-source-files.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Crates and source files</a></li><li class=\"chapter-item expanded \"><a href=\"conditional-compilation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> Conditional compilation</a></li><li class=\"chapter-item expanded \"><a href=\"items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Items</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"items/modules.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.1.</strong> Modules</a></li><li class=\"chapter-item expanded \"><a href=\"items/extern-crates.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.2.</strong> Extern crates</a></li><li class=\"chapter-item expanded \"><a href=\"items/use-declarations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.3.</strong> Use declarations</a></li><li class=\"chapter-item expanded \"><a href=\"items/functions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.4.</strong> Functions</a></li><li class=\"chapter-item expanded \"><a href=\"items/type-aliases.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.5.</strong> Type aliases</a></li><li class=\"chapter-item expanded \"><a href=\"items/structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.6.</strong> Structs</a></li><li class=\"chapter-item expanded \"><a href=\"items/enumerations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.7.</strong> Enumerations</a></li><li class=\"chapter-item expanded \"><a href=\"items/unions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.8.</strong> Unions</a></li><li class=\"chapter-item expanded \"><a href=\"items/constant-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.9.</strong> Constant items</a></li><li class=\"chapter-item expanded \"><a href=\"items/static-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.10.</strong> Static items</a></li><li class=\"chapter-item expanded \"><a href=\"items/traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.11.</strong> Traits</a></li><li class=\"chapter-item expanded \"><a href=\"items/implementations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.12.</strong> Implementations</a></li><li class=\"chapter-item expanded \"><a href=\"items/external-blocks.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.13.</strong> External blocks</a></li><li class=\"chapter-item expanded \"><a href=\"items/generics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.14.</strong> Generic parameters</a></li><li class=\"chapter-item expanded \"><a href=\"items/associated-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.15.</strong> Associated Items</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"attributes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Attributes</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"attributes/testing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.1.</strong> Testing</a></li><li class=\"chapter-item expanded \"><a href=\"attributes/derive.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.2.</strong> Derive</a></li><li class=\"chapter-item expanded \"><a href=\"attributes/diagnostics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.3.</strong> Diagnostics</a></li><li class=\"chapter-item expanded \"><a href=\"attributes/codegen.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.4.</strong> Code generation</a></li><li class=\"chapter-item expanded \"><a href=\"attributes/limits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.5.</strong> Limits</a></li><li class=\"chapter-item expanded \"><a href=\"attributes/type_system.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.6.</strong> Type System</a></li><li class=\"chapter-item expanded \"><a href=\"attributes/debugger.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.7.</strong> Debugger</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"statements-and-expressions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.</strong> Statements and expressions</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"statements.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.1.</strong> Statements</a></li><li class=\"chapter-item expanded \"><a href=\"expressions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.</strong> Expressions</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"expressions/literal-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.1.</strong> Literal expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/path-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.2.</strong> Path expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/block-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.3.</strong> Block expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/operator-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.4.</strong> Operator expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/grouped-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.5.</strong> Grouped expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/array-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.6.</strong> Array and index expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/tuple-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.7.</strong> Tuple and index expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/struct-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.8.</strong> Struct expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/call-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.9.</strong> Call expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/method-call-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.10.</strong> Method call expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/field-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.11.</strong> Field access expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/closure-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.12.</strong> Closure expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/loop-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.13.</strong> Loop expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/range-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.14.</strong> Range expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/if-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.15.</strong> If and if let expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/match-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.16.</strong> Match expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/return-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.17.</strong> Return expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/await-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.18.</strong> Await expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/underscore-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.19.</strong> Underscore expressions</a></li></ol></li></ol></li><li class=\"chapter-item expanded \"><a href=\"patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.</strong> Patterns</a></li><li class=\"chapter-item expanded \"><a href=\"type-system.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.</strong> Type system</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.</strong> Types</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"types/boolean.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.1.</strong> Boolean type</a></li><li class=\"chapter-item expanded \"><a href=\"types/numeric.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.2.</strong> Numeric types</a></li><li class=\"chapter-item expanded \"><a href=\"types/textual.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.3.</strong> Textual types</a></li><li class=\"chapter-item expanded \"><a href=\"types/never.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.4.</strong> Never type</a></li><li class=\"chapter-item expanded \"><a href=\"types/tuple.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.5.</strong> Tuple types</a></li><li class=\"chapter-item expanded \"><a href=\"types/array.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.6.</strong> Array types</a></li><li class=\"chapter-item expanded \"><a href=\"types/slice.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.7.</strong> Slice types</a></li><li class=\"chapter-item expanded \"><a href=\"types/struct.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.8.</strong> Struct types</a></li><li class=\"chapter-item expanded \"><a href=\"types/enum.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.9.</strong> Enumerated types</a></li><li class=\"chapter-item expanded \"><a href=\"types/union.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.10.</strong> Union types</a></li><li class=\"chapter-item expanded \"><a href=\"types/function-item.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.11.</strong> Function item types</a></li><li class=\"chapter-item expanded \"><a href=\"types/closure.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.12.</strong> Closure types</a></li><li class=\"chapter-item expanded \"><a href=\"types/pointer.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.13.</strong> Pointer types</a></li><li class=\"chapter-item expanded \"><a href=\"types/function-pointer.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.14.</strong> Function pointer types</a></li><li class=\"chapter-item expanded \"><a href=\"types/trait-object.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.15.</strong> Trait object types</a></li><li class=\"chapter-item expanded \"><a href=\"types/impl-trait.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.16.</strong> Impl trait type</a></li><li class=\"chapter-item expanded \"><a href=\"types/parameters.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.17.</strong> Type parameters</a></li><li class=\"chapter-item expanded \"><a href=\"types/inferred.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.18.</strong> Inferred type</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"dynamically-sized-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.2.</strong> Dynamically Sized Types</a></li><li class=\"chapter-item expanded \"><a href=\"type-layout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.3.</strong> Type layout</a></li><li class=\"chapter-item expanded \"><a href=\"interior-mutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.4.</strong> Interior mutability</a></li><li class=\"chapter-item expanded \"><a href=\"subtyping.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.5.</strong> Subtyping and Variance</a></li><li class=\"chapter-item expanded \"><a href=\"trait-bounds.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.6.</strong> Trait and lifetime bounds</a></li><li class=\"chapter-item expanded \"><a href=\"type-coercions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.7.</strong> Type coercions</a></li><li class=\"chapter-item expanded \"><a href=\"destructors.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.8.</strong> Destructors</a></li><li class=\"chapter-item expanded \"><a href=\"lifetime-elision.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.9.</strong> Lifetime elision</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"special-types-and-traits.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">11.</strong> Special types and traits</a></li><li class=\"chapter-item expanded \"><a href=\"names.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.</strong> Names</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"names/namespaces.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.1.</strong> Namespaces</a></li><li class=\"chapter-item expanded \"><a href=\"names/scopes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.2.</strong> Scopes</a></li><li class=\"chapter-item expanded \"><a href=\"names/preludes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.3.</strong> Preludes</a></li><li class=\"chapter-item expanded \"><a href=\"paths.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.4.</strong> Paths</a></li><li class=\"chapter-item expanded \"><a href=\"names/name-resolution.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.5.</strong> Name resolution</a></li><li class=\"chapter-item expanded \"><a href=\"visibility-and-privacy.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.6.</strong> Visibility and privacy</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"memory-model.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.</strong> Memory model</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"memory-allocation-and-lifetime.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.1.</strong> Memory allocation and lifetime</a></li><li class=\"chapter-item expanded \"><a href=\"variables.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.2.</strong> Variables</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"linkage.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.</strong> Linkage</a></li><li class=\"chapter-item expanded \"><a href=\"inline-assembly.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.</strong> Inline assembly</a></li><li class=\"chapter-item expanded \"><a href=\"unsafety.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.</strong> Unsafety</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"unsafe-keyword.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.1.</strong> The unsafe keyword</a></li><li class=\"chapter-item expanded \"><a href=\"behavior-considered-undefined.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.2.</strong> Behavior considered undefined</a></li><li class=\"chapter-item expanded \"><a href=\"behavior-not-considered-unsafe.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.3.</strong> Behavior not considered unsafe</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"const_eval.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.</strong> Constant Evaluation</a></li><li class=\"chapter-item expanded \"><a href=\"abi.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.</strong> Application Binary Interface</a></li><li class=\"chapter-item expanded \"><a href=\"runtime.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.</strong> The Rust runtime</a></li><li class=\"chapter-item expanded \"><a href=\"appendices.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.</strong> Appendices</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"macro-ambiguity.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.1.</strong> Macro Follow-Set Ambiguity Formal Specification</a></li><li class=\"chapter-item expanded \"><a href=\"influences.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.2.</strong> Influences</a></li><li class=\"chapter-item expanded \"><a href=\"glossary.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.3.</strong> Glossary</a></li></ol></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Rust Reference</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/reference/\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/reference/edit/master/src/special-types-and-traits.md\" title=\"Suggest an edit\" aria-label=\"Suggest an edit\">\n                            <i id=\"git-edit-button\" class=\"fa fa-edit\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h1 id=\"special-types-and-traits\"><a class=\"header\" href=\"#special-types-and-traits\">Special types and traits</a></h1>\n<p>Certain types and traits that exist in <a href=\"../std/index.html\">the standard library</a> are known to the\nRust compiler. This chapter documents the special features of these types and\ntraits.</p>\n<h2 id=\"boxt\"><a class=\"header\" href=\"#boxt\"><code>Box&lt;T&gt;</code></a></h2>\n<p><a href=\"../std/boxed/struct.Box.html\"><code class=\"hljs\">Box&lt;T&gt;</code></a> has a few special features that Rust doesn't currently allow for user\ndefined types.</p>\n<ul>\n<li>The <a href=\"expressions/operator-expr.html#the-dereference-operator\">dereference operator</a> for <code class=\"hljs\">Box&lt;T&gt;</code> produces a place which can be moved\nfrom. This means that the <code class=\"hljs\">*</code> operator and the destructor of <code class=\"hljs\">Box&lt;T&gt;</code> are\nbuilt-in to the language.</li>\n<li><a href=\"items/associated-items.html#associated-functions-and-methods\">Methods</a> can take <code class=\"hljs\">Box&lt;Self&gt;</code> as a receiver.</li>\n<li>A trait may be implemented for <code class=\"hljs\">Box&lt;T&gt;</code> in the same crate as <code class=\"hljs\">T</code>, which the\n<a href=\"items/implementations.html#trait-implementation-coherence\">orphan rules</a> prevent for other generic types.</li>\n</ul>\n<h2 id=\"rct\"><a class=\"header\" href=\"#rct\"><code>Rc&lt;T&gt;</code></a></h2>\n<p><a href=\"items/associated-items.html#associated-functions-and-methods\">Methods</a> can take <a href=\"../std/rc/struct.Rc.html\"><code class=\"hljs\">Rc&lt;Self&gt;</code></a> as a receiver.</p>\n<h2 id=\"arct\"><a class=\"header\" href=\"#arct\"><code>Arc&lt;T&gt;</code></a></h2>\n<p><a href=\"items/associated-items.html#associated-functions-and-methods\">Methods</a> can take <a href=\"../std/sync/struct.Arc.html\"><code class=\"hljs\">Arc&lt;Self&gt;</code></a> as a receiver.</p>\n<h2 id=\"pinp\"><a class=\"header\" href=\"#pinp\"><code>Pin&lt;P&gt;</code></a></h2>\n<p><a href=\"items/associated-items.html#associated-functions-and-methods\">Methods</a> can take <a href=\"../std/pin/struct.Pin.html\"><code class=\"hljs\">Pin&lt;P&gt;</code></a> as a receiver.</p>\n<h2 id=\"unsafecellt\"><a class=\"header\" href=\"#unsafecellt\"><code>UnsafeCell&lt;T&gt;</code></a></h2>\n<p><a href=\"../std/cell/struct.UnsafeCell.html\"><code class=\"hljs\">std::cell::UnsafeCell&lt;T&gt;</code></a> is used for <a href=\"interior-mutability.html\">interior mutability</a>. It ensures that\nthe compiler doesn't perform optimisations that are incorrect for such types.\nIt also ensures that <a href=\"items/static-items.html\"><code class=\"hljs\">static</code> items</a> which have a type with interior\nmutability aren't placed in memory marked as read only.</p>\n<h2 id=\"phantomdatat\"><a class=\"header\" href=\"#phantomdatat\"><code>PhantomData&lt;T&gt;</code></a></h2>\n<p><a href=\"../std/marker/struct.PhantomData.html\"><code class=\"hljs\">std::marker::PhantomData&lt;T&gt;</code></a> is a zero-sized, minimum alignment, type that\nis considered to own a <code class=\"hljs\">T</code> for the purposes of <a href=\"subtyping.html#variance\">variance</a>, <a href=\"../nomicon/dropck.html\">drop check</a>, and\n<a href=\"#auto-traits\">auto traits</a>.</p>\n<h2 id=\"operator-traits\"><a class=\"header\" href=\"#operator-traits\">Operator Traits</a></h2>\n<p>The traits in <a href=\"../std/ops/index.html\"><code class=\"hljs\">std::ops</code></a> and <a href=\"../std/cmp/index.html\"><code class=\"hljs\">std::cmp</code></a> are used to overload <a href=\"expressions/operator-expr.html\">operators</a>,\n<a href=\"expressions/array-expr.html#array-and-slice-indexing-expressions\">indexing expressions</a>, and <a href=\"expressions/call-expr.html\">call expressions</a>.</p>\n<h2 id=\"deref-and-derefmut\"><a class=\"header\" href=\"#deref-and-derefmut\"><code>Deref</code> and <code>DerefMut</code></a></h2>\n<p>As well as overloading the unary <code class=\"hljs\">*</code> operator, <a href=\"../std/ops/trait.Deref.html\"><code class=\"hljs\">Deref</code></a> and <a href=\"../std/ops/trait.DerefMut.html\"><code class=\"hljs\">DerefMut</code></a> are\nalso used in <a href=\"expressions/method-call-expr.html\">method resolution</a> and <a href=\"type-coercions.html#coercion-types\">deref coercions</a>.</p>\n<h2 id=\"drop\"><a class=\"header\" href=\"#drop\"><code>Drop</code></a></h2>\n<p>The <a href=\"../std/ops/trait.Drop.html\"><code class=\"hljs\">Drop</code></a> trait provides a <a href=\"destructors.html\">destructor</a>, to be run whenever a value of this\ntype is to be destroyed.</p>\n<h2 id=\"copy\"><a class=\"header\" href=\"#copy\"><code>Copy</code></a></h2>\n<p>The <a href=\"../std/marker/trait.Copy.html\"><code class=\"hljs\">Copy</code></a> trait changes the semantics of a type implementing it. Values\nwhose type implements <code class=\"hljs\">Copy</code> are copied rather than moved upon assignment.</p>\n<p><code class=\"hljs\">Copy</code> can only be implemented for types which do not implement <code class=\"hljs\">Drop</code>, and whose fields are all <code class=\"hljs\">Copy</code>.\nFor enums, this means all fields of all variants have to be <code class=\"hljs\">Copy</code>.\nFor unions, this means all variants have to be <code class=\"hljs\">Copy</code>.</p>\n<p><code class=\"hljs\">Copy</code> is implemented by the compiler for</p>\n<ul>\n<li><a href=\"types/tuple.html\">Tuples</a> of <code class=\"hljs\">Copy</code> types</li>\n<li><a href=\"types/function-pointer.html\">Function pointers</a></li>\n<li><a href=\"types/function-item.html\">Function items</a></li>\n<li><a href=\"types/closure.html\">Closures</a> that capture no values or that only capture values of <code class=\"hljs\">Copy</code> types</li>\n</ul>\n<h2 id=\"clone\"><a class=\"header\" href=\"#clone\"><code>Clone</code></a></h2>\n<p>The <a href=\"../std/clone/trait.Clone.html\"><code class=\"hljs\">Clone</code></a> trait is a supertrait of <code class=\"hljs\">Copy</code>, so it also needs compiler\ngenerated implementations. It is implemented by the compiler for the following\ntypes:</p>\n<ul>\n<li>Types with a built-in <code class=\"hljs\">Copy</code> implementation (see above)</li>\n<li><a href=\"types/tuple.html\">Tuples</a> of <code class=\"hljs\">Clone</code> types</li>\n<li><a href=\"types/closure.html\">Closures</a> that only capture values of <code class=\"hljs\">Clone</code> types or capture no values from the environment</li>\n</ul>\n<h2 id=\"send\"><a class=\"header\" href=\"#send\"><code>Send</code></a></h2>\n<p>The <a href=\"../std/marker/trait.Send.html\"><code class=\"hljs\">Send</code></a> trait indicates that a value of this type is safe to send from one\nthread to another.</p>\n<h2 id=\"sync\"><a class=\"header\" href=\"#sync\"><code>Sync</code></a></h2>\n<p>The <a href=\"../std/marker/trait.Sync.html\"><code class=\"hljs\">Sync</code></a> trait indicates that a value of this type is safe to share between\nmultiple threads. This trait must be implemented for all types used in\nimmutable <a href=\"items/static-items.html\"><code class=\"hljs\">static</code> items</a>.</p>\n<h2 id=\"termination\"><a class=\"header\" href=\"#termination\"><code>Termination</code></a></h2>\n<p>The <a href=\"../std/process/trait.Termination.html\"><code class=\"hljs\">Termination</code></a> trait indicates the acceptable return types for the <a href=\"crates-and-source-files.html#main-functions\">main function</a> and <a href=\"attributes/testing.html#the-test-attribute\">test functions</a>.</p>\n<h2 id=\"auto-traits\"><a class=\"header\" href=\"#auto-traits\">Auto traits</a></h2>\n<p>The <a href=\"../std/marker/trait.Send.html\"><code class=\"hljs\">Send</code></a>, <a href=\"../std/marker/trait.Sync.html\"><code class=\"hljs\">Sync</code></a>, <a href=\"../std/marker/trait.Unpin.html\"><code class=\"hljs\">Unpin</code></a>, <a href=\"../std/panic/trait.UnwindSafe.html\"><code class=\"hljs\">UnwindSafe</code></a>, and <a href=\"../std/panic/trait.RefUnwindSafe.html\"><code class=\"hljs\">RefUnwindSafe</code></a> traits are <em>auto\ntraits</em>. Auto traits have special properties.</p>\n<p>If no explicit implementation or negative implementation is written out for an\nauto trait for a given type, then the compiler implements it automatically\naccording to the following rules:</p>\n<ul>\n<li><code class=\"hljs\">&amp;T</code>, <code class=\"hljs\">&amp;mut T</code>, <code class=\"hljs\">*const T</code>, <code class=\"hljs\">*mut T</code>, <code class=\"hljs\">[T; n]</code>, and <code class=\"hljs\">[T]</code> implement the trait\nif <code class=\"hljs\">T</code> does.</li>\n<li>Function item types and function pointers automatically implement the trait.</li>\n<li>Structs, enums, unions, and tuples implement the trait if all of their fields\ndo.</li>\n<li>Closures implement the trait if the types of all of their captures do. A\nclosure that captures a <code class=\"hljs\">T</code> by shared reference and a <code class=\"hljs\">U</code> by value implements\nany auto traits that both <code class=\"hljs\">&amp;T</code> and <code class=\"hljs\">U</code> do.</li>\n</ul>\n<p>For generic types (counting the built-in types above as generic over <code class=\"hljs\">T</code>), if a\ngeneric implementation is available, then the compiler does not automatically\nimplement it for types that could use the implementation except that they do not\nmeet the requisite trait bounds. For instance, the standard library implements\n<code class=\"hljs\">Send</code> for all <code class=\"hljs\">&amp;T</code> where <code class=\"hljs\">T</code> is <code class=\"hljs\">Sync</code>; this means that the compiler will not\nimplement <code class=\"hljs\">Send</code> for <code class=\"hljs\">&amp;T</code> if <code class=\"hljs\">T</code> is <code class=\"hljs\">Send</code> but not <code class=\"hljs\">Sync</code>.</p>\n<p>Auto traits can also have negative implementations, shown as <code class=\"hljs\">impl !AutoTrait for T</code> in the standard library documentation, that override the automatic\nimplementations. For example <code class=\"hljs\">*mut T</code> has a negative implementation of <code class=\"hljs\">Send</code>,\nand so <code class=\"hljs\">*mut T</code> is not <code class=\"hljs\">Send</code>, even if <code class=\"hljs\">T</code> is. There is currently no stable way\nto specify additional negative implementations; they exist only in the standard\nlibrary.</p>\n<p>Auto traits may be added as an additional bound to any <a href=\"types/trait-object.html\">trait object</a>, even\nthough normally only one trait is allowed. For instance, <code class=\"hljs\">Box&lt;dyn Debug + Send + UnwindSafe&gt;</code> is a valid type.</p>\n<h2 id=\"sized\"><a class=\"header\" href=\"#sized\"><code>Sized</code></a></h2>\n<p>The <a href=\"../std/marker/trait.Sized.html\"><code class=\"hljs\">Sized</code></a> trait indicates that the size of this type is known at compile-time; that is, it's not a <a href=\"dynamically-sized-types.html\">dynamically sized type</a>.\n<a href=\"types/parameters.html\">Type parameters</a> (except <code class=\"hljs\">Self</code> in traits) are <code class=\"hljs\">Sized</code> by default, as are <a href=\"items/associated-items.html#associated-types\">associated types</a>.\n<code class=\"hljs\">Sized</code> is always implemented automatically by the compiler, not by <a href=\"items/implementations.html\">implementation items</a>.\nThese implicit <code class=\"hljs\">Sized</code> bounds may be relaxed by using the special <code class=\"hljs\">?Sized</code> bound.</p>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"lifetime-elision.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"names.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"lifetime-elision.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"names.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"elasticlunr.min.js\"></script>\n        <script src=\"mark.min.js\"></script>\n        <script src=\"searcher.js\"></script>\n\n        <script src=\"clipboard.min.js\"></script>\n        <script src=\"highlight.js\"></script>\n        <script src=\"book.js\"></script>\n\n        <!-- Custom JS scripts -->\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:13:31.389Z"
}