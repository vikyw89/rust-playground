{
	"title": "identity in std::convert - Rust",
	"url": "https://doc.rust-lang.org/stable/std/convert/fn.identity.html",
	"markdown": "# identity in std::convert - Rust\n\n## Function [std](../index.html)::[convert](index.html)::[identity](#)\n\n1.33.0 (const: 1.33.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#104) ·\n\n```\npub const fn identity<T>(x: T) -> T\n```\n\nExpand description\n\nThe identity function.\n\nTwo things are important to note about this function:\n\n-   It is not always equivalent to a closure like `|x| x`, since the closure may coerce `x` into a different type.\n    \n-   It moves the input `x` passed to the function.\n    \n\nWhile it might seem strange to have a function that just returns back the input, there are some interesting uses.\n\n## [§](#examples)Examples\n\nUsing `identity` to do nothing in a sequence of other, interesting, functions:\n\n```\nuse std::convert::identity;\n\nfn manipulation(x: u32) -> u32 {\n    // Let's pretend that adding one is an interesting function.\n    x + 1\n}\n\nlet _arr = &[identity, manipulation];\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::convert::identity;%0A++++%0A++++fn+manipulation(x:+u32)+-%3E+u32+%7B%0A++++++++//+Let%27s+pretend+that+adding+one+is+an+interesting+function.%0A++++++++x+%2B+1%0A++++%7D%0A++++%0A++++let+_arr+=+%26%5Bidentity,+manipulation%5D;%0A%7D&edition=2021)\n\nUsing `identity` as a “do nothing” base case in a conditional:\n\n```\nuse std::convert::identity;\n\nlet do_stuff = if condition { manipulation } else { identity };\n\n// Do more interesting stuff...\n\nlet _results = do_stuff(42);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::convert::identity;%0A++++%0A++++let+condition+=+true;%0A++++%0A++++fn+manipulation(x:+u32)+-%3E+u32+%7B+x+%2B+1+%7D%0A++++%0A++++let+do_stuff+=+if+condition+%7B+manipulation+%7D+else+%7B+identity+%7D;%0A++++%0A++++//+Do+more+interesting+stuff...%0A++++%0A++++let+_results+=+do_stuff(42);%0A%7D&edition=2021)\n\nUsing `identity` to keep the `Some` variants of an iterator of `Option<T>`:\n\n```\nuse std::convert::identity;\n\nlet iter = [Some(1), None, Some(3)].into_iter();\nlet filtered = iter.filter_map(identity).collect::<Vec<_>>();\nassert_eq!(vec![1, 3], filtered);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::convert::identity;%0A++++%0A++++let+iter+=+%5BSome(1),+None,+Some(3)%5D.into_iter();%0A++++let+filtered+=+iter.filter_map(identity).collect::%3CVec%3C_%3E%3E();%0A++++assert_eq!(vec!%5B1,+3%5D,+filtered);%0A%7D&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"The identity function.\"><title>identity in std::convert - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc fn\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h2><a href=\"index.html\">In std::convert</a></h2><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.Infallible.html\">Infallible</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.AsMut.html\">AsMut</a></li><li><a href=\"trait.AsRef.html\">AsRef</a></li><li><a href=\"trait.FloatToInt.html\">FloatToInt</a></li><li><a href=\"trait.From.html\">From</a></li><li><a href=\"trait.Into.html\">Into</a></li><li><a href=\"trait.TryFrom.html\">TryFrom</a></li><li><a href=\"trait.TryInto.html\">TryInto</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.identity.html\">identity</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Function <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">convert</a>::<wbr><a class=\"fn\" href=\"#\">identity</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.33.0, const since 1.33.0\">1.33.0 (const: 1.33.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#104\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub const fn identity&lt;T&gt;(x: T) -&gt; T</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>The identity function.</p>\n<p>Two things are important to note about this function:</p>\n<ul>\n<li>\n<p>It is not always equivalent to a closure like <code>|x| x</code>, since the\nclosure may coerce <code>x</code> into a different type.</p>\n</li>\n<li>\n<p>It moves the input <code>x</code> passed to the function.</p>\n</li>\n</ul>\n<p>While it might seem strange to have a function that just returns back the\ninput, there are some interesting uses.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<p>Using <code>identity</code> to do nothing in a sequence of other, interesting,\nfunctions:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::convert::identity;\n\n<span class=\"kw\">fn </span>manipulation(x: u32) -&gt; u32 {\n    <span class=\"comment\">// Let's pretend that adding one is an interesting function.\n    </span>x + <span class=\"number\">1\n</span>}\n\n<span class=\"kw\">let </span>_arr = <span class=\"kw-2\">&amp;</span>[identity, manipulation];</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::convert::identity;%0A++++%0A++++fn+manipulation(x:+u32)+-%3E+u32+%7B%0A++++++++//+Let's+pretend+that+adding+one+is+an+interesting+function.%0A++++++++x+%2B+1%0A++++%7D%0A++++%0A++++let+_arr+=+%26%5Bidentity,+manipulation%5D;%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Using <code>identity</code> as a “do nothing” base case in a conditional:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::convert::identity;\n\n<span class=\"kw\">let </span>do_stuff = <span class=\"kw\">if </span>condition { manipulation } <span class=\"kw\">else </span>{ identity };\n\n<span class=\"comment\">// Do more interesting stuff...\n\n</span><span class=\"kw\">let </span>_results = do_stuff(<span class=\"number\">42</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::convert::identity;%0A++++%0A++++let+condition+=+true;%0A++++%0A++++fn+manipulation(x:+u32)+-%3E+u32+%7B+x+%2B+1+%7D%0A++++%0A++++let+do_stuff+=+if+condition+%7B+manipulation+%7D+else+%7B+identity+%7D;%0A++++%0A++++//+Do+more+interesting+stuff...%0A++++%0A++++let+_results+=+do_stuff(42);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Using <code>identity</code> to keep the <code>Some</code> variants of an iterator of <code>Option&lt;T&gt;</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::convert::identity;\n\n<span class=\"kw\">let </span>iter = [<span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>, <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>)].into_iter();\n<span class=\"kw\">let </span>filtered = iter.filter_map(identity).collect::&lt;Vec&lt;<span class=\"kw\">_</span>&gt;&gt;();\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">3</span>], filtered);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::convert::identity;%0A++++%0A++++let+iter+=+%5BSome(1),+None,+Some(3)%5D.into_iter();%0A++++let+filtered+=+iter.filter_map(identity).collect::%3CVec%3C_%3E%3E();%0A++++assert_eq!(vec!%5B1,+3%5D,+filtered);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:22:53.922Z"
}