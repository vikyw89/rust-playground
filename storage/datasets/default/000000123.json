{
	"title": "Vec in std::vec - Rust",
	"url": "https://doc.rust-lang.org/stable/std/vec/struct.Vec.html",
	"markdown": "# Vec in std::vec - Rust\n\n## Struct [std](../index.html)::[vec](index.html)::[Vec](#)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#398) ·\n\n```\npub struct Vec<T, A = Global>where\n    A: Allocator,{ /* private fields */ }\n```\n\nExpand description\n\nA contiguous growable array type, written as `Vec<T>`, short for ‘vector’.\n\n## [§](#examples)Examples\n\n```\nlet mut vec = Vec::new();\nvec.push(1);\nvec.push(2);\n\nassert_eq!(vec.len(), 2);\nassert_eq!(vec[0], 1);\n\nassert_eq!(vec.pop(), Some(2));\nassert_eq!(vec.len(), 1);\n\nvec[0] = 7;\nassert_eq!(vec[0], 7);\n\nvec.extend([1, 2, 3]);\n\nfor x in &vec {\n    println!(\"{x}\");\n}\nassert_eq!(vec, [7, 1, 2, 3]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+vec+=+Vec::new();%0A++++vec.push(1);%0A++++vec.push(2);%0A++++%0A++++assert_eq!(vec.len(),+2);%0A++++assert_eq!(vec%5B0%5D,+1);%0A++++%0A++++assert_eq!(vec.pop(),+Some(2));%0A++++assert_eq!(vec.len(),+1);%0A++++%0A++++vec%5B0%5D+=+7;%0A++++assert_eq!(vec%5B0%5D,+7);%0A++++%0A++++vec.extend(%5B1,+2,+3%5D);%0A++++%0A++++for+x+in+%26vec+%7B%0A++++++++println!(%22%7Bx%7D%22);%0A++++%7D%0A++++assert_eq!(vec,+%5B7,+1,+2,+3%5D);%0A%7D&edition=2021)\n\nThe [`vec!`](../macro.vec.html \"macro std::vec\") macro is provided for convenient initialization:\n\n```\nlet mut vec1 = vec![1, 2, 3];\nvec1.push(4);\nlet vec2 = Vec::from([1, 2, 3, 4]);\nassert_eq!(vec1, vec2);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+vec1+=+vec!%5B1,+2,+3%5D;%0A++++vec1.push(4);%0A++++let+vec2+=+Vec::from(%5B1,+2,+3,+4%5D);%0A++++assert_eq!(vec1,+vec2);%0A%7D&edition=2021)\n\nIt can also initialize each element of a `Vec<T>` with a given value. This may be more efficient than performing allocation and initialization in separate steps, especially when initializing a vector of zeros:\n\n```\nlet vec = vec![0; 5];\nassert_eq!(vec, [0, 0, 0, 0, 0]);\n\n// The following is equivalent, but potentially slower:\nlet mut vec = Vec::with_capacity(5);\nvec.resize(5, 0);\nassert_eq!(vec, [0, 0, 0, 0, 0]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+vec+=+vec!%5B0;+5%5D;%0A++++assert_eq!(vec,+%5B0,+0,+0,+0,+0%5D);%0A++++%0A++++//+The+following+is+equivalent,+but+potentially+slower:%0A++++let+mut+vec+=+Vec::with_capacity(5);%0A++++vec.resize(5,+0);%0A++++assert_eq!(vec,+%5B0,+0,+0,+0,+0%5D);%0A%7D&edition=2021)\n\nFor more information, see [Capacity and Reallocation](#capacity-and-reallocation).\n\nUse a `Vec<T>` as an efficient stack:\n\n```\nlet mut stack = Vec::new();\n\nstack.push(1);\nstack.push(2);\nstack.push(3);\n\nwhile let Some(top) = stack.pop() {\n    // Prints 3, 2, 1\n    println!(\"{top}\");\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+stack+=+Vec::new();%0A++++%0A++++stack.push(1);%0A++++stack.push(2);%0A++++stack.push(3);%0A++++%0A++++while+let+Some(top)+=+stack.pop()+%7B%0A++++++++//+Prints+3,+2,+1%0A++++++++println!(%22%7Btop%7D%22);%0A++++%7D%0A%7D&edition=2021)\n\n## [§](#indexing)Indexing\n\nThe `Vec` type allows access to values by index, because it implements the [`Index`](../ops/trait.Index.html \"trait std::ops::Index\") trait. An example will be more explicit:\n\n```\nlet v = vec![0, 2, 4, 6];\nprintln!(\"{}\", v[1]); // it will display '2'\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v+=+vec!%5B0,+2,+4,+6%5D;%0A++++println!(%22%7B%7D%22,+v%5B1%5D);+//+it+will+display+%272%27%0A%7D&edition=2021)\n\nHowever be careful: if you try to access an index which isn’t in the `Vec`, your software will panic! You cannot do this:\n\n[ⓘ](# \"This example panics\")\n\n```\nlet v = vec![0, 2, 4, 6];\nprintln!(\"{}\", v[6]); // it will panic!\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v+=+vec!%5B0,+2,+4,+6%5D;%0A++++println!(%22%7B%7D%22,+v%5B6%5D);+//+it+will+panic!%0A%7D&edition=2021)\n\nUse [`get`](about:blank/primitive.slice.html#method.get \"method slice::get\") and [`get_mut`](about:blank/primitive.slice.html#method.get_mut \"method slice::get_mut\") if you want to check whether the index is in the `Vec`.\n\n## [§](#slicing)Slicing\n\nA `Vec` can be mutable. On the other hand, slices are read-only objects. To get a [slice](../primitive.slice.html \"primitive slice\"), use [`&`](../primitive.reference.html \"primitive reference\"). Example:\n\n```\nfn read_slice(slice: &[usize]) {\n    // ...\n}\n\nlet v = vec![0, 1];\nread_slice(&v);\n\n// ... and that's all!\n// you can also do it like this:\nlet u: &[usize] = &v;\n// or like this:\nlet u: &[_] = &v;\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++fn+read_slice(slice:+%26%5Busize%5D)+%7B%0A++++++++//+...%0A++++%7D%0A++++%0A++++let+v+=+vec!%5B0,+1%5D;%0A++++read_slice(%26v);%0A++++%0A++++//+...+and+that%27s+all!%0A++++//+you+can+also+do+it+like+this:%0A++++let+u:+%26%5Busize%5D+=+%26v;%0A++++//+or+like+this:%0A++++let+u:+%26%5B_%5D+=+%26v;%0A%7D&edition=2021)\n\nIn Rust, it’s more common to pass slices as arguments rather than vectors when you just want to provide read access. The same goes for [`String`](../string/struct.String.html \"struct std::string::String\") and [`&str`](../primitive.str.html \"primitive str\").\n\n## [§](#capacity-and-reallocation)Capacity and reallocation\n\nThe capacity of a vector is the amount of space allocated for any future elements that will be added onto the vector. This is not to be confused with the _length_ of a vector, which specifies the number of actual elements within the vector. If a vector’s length exceeds its capacity, its capacity will automatically be increased, but its elements will have to be reallocated.\n\nFor example, a vector with capacity 10 and length 0 would be an empty vector with space for 10 more elements. Pushing 10 or fewer elements onto the vector will not change its capacity or cause reallocation to occur. However, if the vector’s length is increased to 11, it will have to reallocate, which can be slow. For this reason, it is recommended to use [`Vec::with_capacity`](about:blank/struct.Vec.html#method.with_capacity \"associated function std::vec::Vec::with_capacity\") whenever possible to specify how big the vector is expected to get.\n\n## [§](#guarantees)Guarantees\n\nDue to its incredibly fundamental nature, `Vec` makes a lot of guarantees about its design. This ensures that it’s as low-overhead as possible in the general case, and can be correctly manipulated in primitive ways by unsafe code. Note that these guarantees refer to an unqualified `Vec<T>`. If additional type parameters are added (e.g., to support custom allocators), overriding their defaults may change the behavior.\n\nMost fundamentally, `Vec` is and always will be a (pointer, capacity, length) triplet. No more, no less. The order of these fields is completely unspecified, and you should use the appropriate methods to modify these. The pointer will never be null, so this type is null-pointer-optimized.\n\nHowever, the pointer might not actually point to allocated memory. In particular, if you construct a `Vec` with capacity 0 via [`Vec::new`](about:blank/struct.Vec.html#method.new \"associated function std::vec::Vec::new\"), [`vec![]`](../macro.vec.html \"macro std::vec\"), [`Vec::with_capacity(0)`](about:blank/struct.Vec.html#method.with_capacity \"associated function std::vec::Vec::with_capacity\"), or by calling [`shrink_to_fit`](about:blank/struct.Vec.html#method.shrink_to_fit \"method std::vec::Vec::shrink_to_fit\") on an empty Vec, it will not allocate memory. Similarly, if you store zero-sized types inside a `Vec`, it will not allocate space for them. _Note that in this case the `Vec` might not report a [`capacity`](about:blank/struct.Vec.html#method.capacity \"method std::vec::Vec::capacity\") of 0_. `Vec` will allocate if and only if `[mem::size_of::<T>](../mem/fn.size_of.html \"fn std::mem::size_of\")() * [capacity](about:blank/struct.Vec.html#method.capacity \"method std::vec::Vec::capacity\")() > 0`. In general, `Vec`’s allocation details are very subtle — if you intend to allocate memory using a `Vec` and use it for something else (either to pass to unsafe code, or to build your own memory-backed collection), be sure to deallocate this memory by using `from_raw_parts` to recover the `Vec` and then dropping it.\n\nIf a `Vec` _has_ allocated memory, then the memory it points to is on the heap (as defined by the allocator Rust is configured to use by default), and its pointer points to [`len`](about:blank/struct.Vec.html#method.len \"method std::vec::Vec::len\") initialized, contiguous elements in order (what you would see if you coerced it to a slice), followed by `[capacity](about:blank/struct.Vec.html#method.capacity \"method std::vec::Vec::capacity\") - [len](about:blank/struct.Vec.html#method.len \"method std::vec::Vec::len\")` logically uninitialized, contiguous elements.\n\nA vector containing the elements `'a'` and `'b'` with capacity 4 can be visualized as below. The top part is the `Vec` struct, it contains a pointer to the head of the allocation in the heap, length and capacity. The bottom part is the allocation on the heap, a contiguous memory block.\n\n```text\n            ptr      len  capacity\n       +--------+--------+--------+\n       | 0x0123 |      2 |      4 |\n       +--------+--------+--------+\n            |\n            v\nHeap   +--------+--------+--------+--------+\n       |    'a' |    'b' | uninit | uninit |\n       +--------+--------+--------+--------+\n\n```\n\n-   **uninit** represents memory that is not initialized, see [`MaybeUninit`](../mem/union.MaybeUninit.html \"union std::mem::MaybeUninit\").\n-   Note: the ABI is not stable and `Vec` makes no guarantees about its memory layout (including the order of fields).\n\n`Vec` will never perform a “small optimization” where elements are actually stored on the stack for two reasons:\n\n-   It would make it more difficult for unsafe code to correctly manipulate a `Vec`. The contents of a `Vec` wouldn’t have a stable address if it were only moved, and it would be more difficult to determine if a `Vec` had actually allocated memory.\n    \n-   It would penalize the general case, incurring an additional branch on every access.\n    \n\n`Vec` will never automatically shrink itself, even if completely empty. This ensures no unnecessary allocations or deallocations occur. Emptying a `Vec` and then filling it back up to the same [`len`](about:blank/struct.Vec.html#method.len \"method std::vec::Vec::len\") should incur no calls to the allocator. If you wish to free up unused memory, use [`shrink_to_fit`](about:blank/struct.Vec.html#method.shrink_to_fit \"method std::vec::Vec::shrink_to_fit\") or [`shrink_to`](about:blank/struct.Vec.html#method.shrink_to \"method std::vec::Vec::shrink_to\").\n\n[`push`](about:blank/struct.Vec.html#method.push \"method std::vec::Vec::push\") and [`insert`](about:blank/struct.Vec.html#method.insert \"method std::vec::Vec::insert\") will never (re)allocate if the reported capacity is sufficient. [`push`](about:blank/struct.Vec.html#method.push \"method std::vec::Vec::push\") and [`insert`](about:blank/struct.Vec.html#method.insert \"method std::vec::Vec::insert\") _will_ (re)allocate if `[len](about:blank/struct.Vec.html#method.len \"method std::vec::Vec::len\") == [capacity](about:blank/struct.Vec.html#method.capacity \"method std::vec::Vec::capacity\")`. That is, the reported capacity is completely accurate, and can be relied on. It can even be used to manually free the memory allocated by a `Vec` if desired. Bulk insertion methods _may_ reallocate, even when not necessary.\n\n`Vec` does not guarantee any particular growth strategy when reallocating when full, nor when [`reserve`](about:blank/struct.Vec.html#method.reserve \"method std::vec::Vec::reserve\") is called. The current strategy is basic and it may prove desirable to use a non-constant growth factor. Whatever strategy is used will of course guarantee _O_(1) amortized [`push`](about:blank/struct.Vec.html#method.push \"method std::vec::Vec::push\").\n\n`vec![x; n]`, `vec![a, b, c, d]`, and [`Vec::with_capacity(n)`](about:blank/struct.Vec.html#method.with_capacity \"associated function std::vec::Vec::with_capacity\"), will all produce a `Vec` with at least the requested capacity. If `[len](about:blank/struct.Vec.html#method.len \"method std::vec::Vec::len\") == [capacity](about:blank/struct.Vec.html#method.capacity \"method std::vec::Vec::capacity\")`, (as is the case for the [`vec!`](../macro.vec.html \"macro std::vec\") macro), then a `Vec<T>` can be converted to and from a [`Box<[T]>`](../boxed/struct.Box.html \"struct std::boxed::Box\") without reallocating or moving the elements.\n\n`Vec` will not specifically overwrite any data that is removed from it, but also won’t specifically preserve it. Its uninitialized memory is scratch space that it may use however it wants. It will generally just do whatever is most efficient or otherwise easy to implement. Do not rely on removed data to be erased for security purposes. Even if you drop a `Vec`, its buffer may simply be reused by another allocation. Even if you zero a `Vec`’s memory first, that might not actually happen because the optimizer does not consider this a side-effect that must be preserved. There is one case which we will not break, however: using `unsafe` code to write to the excess capacity, and then increasing the length to match, is always valid.\n\nCurrently, `Vec` does not guarantee the order in which elements are dropped. The order has changed in the past and may change again.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#407)[§](#impl-Vec%3CT%3E)\n\n1.0.0 (const: 1.39.0) · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#422)\n\nConstructs a new, empty `Vec<T>`.\n\nThe vector will not allocate until elements are pushed onto it.\n\n##### [§](#examples-1)Examples\n\n```\nlet mut vec: Vec<i32> = Vec::new();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Ballow(unused_mut)%5D%0Afn+main()+%7B%0A++++let+mut+vec:+Vec%3Ci32%3E+=+Vec::new();%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#480)\n\nConstructs a new, empty `Vec<T>` with at least the specified capacity.\n\nThe vector will be able to hold at least `capacity` elements without reallocating. This method is allowed to allocate for more elements than `capacity`. If `capacity` is 0, the vector will not allocate.\n\nIt is important to note that although the returned vector has the minimum _capacity_ specified, the vector will have a zero _length_. For an explanation of the difference between length and capacity, see _[Capacity and reallocation](#capacity-and-reallocation)_.\n\nIf it is important to know the exact allocated capacity of a `Vec`, always use the [`capacity`](about:blank/struct.Vec.html#method.capacity \"method std::vec::Vec::capacity\") method after construction.\n\nFor `Vec<T>` where `T` is a zero-sized type, there will be no allocation and the capacity will always be `usize::MAX`.\n\n##### [§](#panics)Panics\n\nPanics if the new capacity exceeds `isize::MAX` _bytes_.\n\n##### [§](#examples-2)Examples\n\n```\nlet mut vec = Vec::with_capacity(10);\n\n// The vector contains no items, even though it has capacity for more\nassert_eq!(vec.len(), 0);\nassert!(vec.capacity() >= 10);\n\n// These are all done without reallocating...\nfor i in 0..10 {\n    vec.push(i);\n}\nassert_eq!(vec.len(), 10);\nassert!(vec.capacity() >= 10);\n\n// ...but this may make the vector reallocate\nvec.push(11);\nassert_eq!(vec.len(), 11);\nassert!(vec.capacity() >= 11);\n\n// A vector of a zero-sized type will always over-allocate, since no\n// allocation is necessary\nlet vec_units = Vec::<()>::with_capacity(10);\nassert_eq!(vec_units.capacity(), usize::MAX);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+vec+=+Vec::with_capacity(10);%0A++++%0A++++//+The+vector+contains+no+items,+even+though+it+has+capacity+for+more%0A++++assert_eq!(vec.len(),+0);%0A++++assert!(vec.capacity()+%3E=+10);%0A++++%0A++++//+These+are+all+done+without+reallocating...%0A++++for+i+in+0..10+%7B%0A++++++++vec.push(i);%0A++++%7D%0A++++assert_eq!(vec.len(),+10);%0A++++assert!(vec.capacity()+%3E=+10);%0A++++%0A++++//+...but+this+may+make+the+vector+reallocate%0A++++vec.push(11);%0A++++assert_eq!(vec.len(),+11);%0A++++assert!(vec.capacity()+%3E=+11);%0A++++%0A++++//+A+vector+of+a+zero-sized+type+will+always+over-allocate,+since+no%0A++++//+allocation+is+necessary%0A++++let+vec_units+=+Vec::%3C()%3E::with_capacity(10);%0A++++assert_eq!(vec_units.capacity(),+usize::MAX);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#496)\n\n🔬This is a nightly-only experimental API. (`try_with_capacity` [#91913](https://github.com/rust-lang/rust/issues/91913))\n\nConstructs a new, empty `Vec<T>` with at least the specified capacity.\n\nThe vector will be able to hold at least `capacity` elements without reallocating. This method is allowed to allocate for more elements than `capacity`. If `capacity` is 0, the vector will not allocate.\n\n##### [§](#errors)Errors\n\nReturns an error if the capacity exceeds `isize::MAX` _bytes_, or if the allocator reports allocation failure.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#603)\n\nCreates a `Vec<T>` directly from a pointer, a length, and a capacity.\n\n##### [§](#safety)Safety\n\nThis is highly unsafe, due to the number of invariants that aren’t checked:\n\n-   `ptr` must have been allocated using the global allocator, such as via the [`alloc::alloc`](../alloc/fn.alloc.html \"fn std::alloc::alloc\") function.\n-   `T` needs to have the same alignment as what `ptr` was allocated with. (`T` having a less strict alignment is not sufficient, the alignment really needs to be equal to satisfy the [`dealloc`](about:blank/alloc/trait.GlobalAlloc.html#tymethod.dealloc \"method std::alloc::GlobalAlloc::dealloc\") requirement that memory must be allocated and deallocated with the same layout.)\n-   The size of `T` times the `capacity` (ie. the allocated size in bytes) needs to be the same size as the pointer was allocated with. (Because similar to alignment, [`dealloc`](about:blank/alloc/trait.GlobalAlloc.html#tymethod.dealloc \"method std::alloc::GlobalAlloc::dealloc\") must be called with the same layout `size`.)\n-   `length` needs to be less than or equal to `capacity`.\n-   The first `length` values must be properly initialized values of type `T`.\n-   `capacity` needs to be the capacity that the pointer was allocated with.\n-   The allocated size in bytes must be no larger than `isize::MAX`. See the safety documentation of [`pointer::offset`](about:blank/primitive.pointer.html#method.offset \"method pointer::offset\").\n\nThese requirements are always upheld by any `ptr` that has been allocated via `Vec<T>`. Other allocation sources are allowed if the invariants are upheld.\n\nViolating these may cause problems like corrupting the allocator’s internal data structures. For example it is normally **not** safe to build a `Vec<u8>` from a pointer to a C `char` array with length `size_t`, doing so is only safe if the array was initially allocated by a `Vec` or `String`. It’s also not safe to build one from a `Vec<u16>` and its length, because the allocator cares about the alignment, and these two types have different alignments. The buffer was allocated with alignment 2 (for `u16`), but after turning it into a `Vec<u8>` it’ll be deallocated with alignment 1. To avoid these issues, it is often preferable to do casting/transmuting using [`slice::from_raw_parts`](../slice/fn.from_raw_parts.html \"fn std::slice::from_raw_parts\") instead.\n\nThe ownership of `ptr` is effectively transferred to the `Vec<T>` which may then deallocate, reallocate or change the contents of memory pointed to by the pointer at will. Ensure that nothing else uses the pointer after calling this function.\n\n##### [§](#examples-3)Examples\n\n```\nuse std::ptr;\nuse std::mem;\n\nlet v = vec![1, 2, 3];\n\n// Prevent running `v`'s destructor so we are in complete control\n// of the allocation.\nlet mut v = mem::ManuallyDrop::new(v);\n\n// Pull out the various important pieces of information about `v`\nlet p = v.as_mut_ptr();\nlet len = v.len();\nlet cap = v.capacity();\n\nunsafe {\n    // Overwrite memory with 4, 5, 6\n    for i in 0..len {\n        ptr::write(p.add(i), 4 + i);\n    }\n\n    // Put everything back together into a Vec\n    let rebuilt = Vec::from_raw_parts(p, len, cap);\n    assert_eq!(rebuilt, [4, 5, 6]);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ptr;%0A++++use+std::mem;%0A++++%0A++++let+v+=+vec!%5B1,+2,+3%5D;%0A++++%0A++++//+Prevent+running+%60v%60%27s+destructor+so+we+are+in+complete+control%0A++++//+of+the+allocation.%0A++++let+mut+v+=+mem::ManuallyDrop::new(v);%0A++++%0A++++//+Pull+out+the+various+important+pieces+of+information+about+%60v%60%0A++++let+p+=+v.as_mut_ptr();%0A++++let+len+=+v.len();%0A++++let+cap+=+v.capacity();%0A++++%0A++++unsafe+%7B%0A++++++++//+Overwrite+memory+with+4,+5,+6%0A++++++++for+i+in+0..len+%7B%0A++++++++++++ptr::write(p.add(i),+4+%2B+i);%0A++++++++%7D%0A++++%0A++++++++//+Put+everything+back+together+into+a+Vec%0A++++++++let+rebuilt+=+Vec::from_raw_parts(p,+len,+cap);%0A++++++++assert_eq!(rebuilt,+%5B4,+5,+6%5D);%0A++++%7D%0A%7D&edition=2021)\n\nUsing memory that was allocated elsewhere:\n\n```\nuse std::alloc::{alloc, Layout};\n\nfn main() {\n    let layout = Layout::array::<u32>(16).expect(\"overflow cannot happen\");\n\n    let vec = unsafe {\n        let mem = alloc(layout).cast::<u32>();\n        if mem.is_null() {\n            return;\n        }\n\n        mem.write(1_000_000);\n\n        Vec::from_raw_parts(mem, 1, 16)\n    };\n\n    assert_eq!(vec, &[1_000_000]);\n    assert_eq!(vec.capacity(), 16);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::alloc::%7Balloc,+Layout%7D;%0A%0Afn+main()+%7B%0A++++let+layout+=+Layout::array::%3Cu32%3E(16).expect(%22overflow+cannot+happen%22);%0A%0A++++let+vec+=+unsafe+%7B%0A++++++++let+mem+=+alloc(layout).cast::%3Cu32%3E();%0A++++++++if+mem.is_null()+%7B%0A++++++++++++return;%0A++++++++%7D%0A%0A++++++++mem.write(1_000_000);%0A%0A++++++++Vec::from_raw_parts(mem,+1,+16)%0A++++%7D;%0A%0A++++assert_eq!(vec,+%26%5B1_000_000%5D);%0A++++assert_eq!(vec.capacity(),+16);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#619)[§](#impl-Vec%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#636)\n\n🔬This is a nightly-only experimental API. (`allocator_api` [#32838](https://github.com/rust-lang/rust/issues/32838))\n\nConstructs a new, empty `Vec<T, A>`.\n\nThe vector will not allocate until elements are pushed onto it.\n\n##### [§](#examples-4)Examples\n\n```\n#![feature(allocator_api)]\n\nuse std::alloc::System;\n\nlet mut vec: Vec<i32, _> = Vec::new_in(System);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(allocator_api)%5D%0A%0Afn+main()+%7B%0A++++use+std::alloc::System;%0A++++%0A++++%23%5Ballow(unused_mut)%5D%0A++++let+mut+vec:+Vec%3Ci32,+_%3E+=+Vec::new_in(System);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#698)\n\n🔬This is a nightly-only experimental API. (`allocator_api` [#32838](https://github.com/rust-lang/rust/issues/32838))\n\nConstructs a new, empty `Vec<T, A>` with at least the specified capacity with the provided allocator.\n\nThe vector will be able to hold at least `capacity` elements without reallocating. This method is allowed to allocate for more elements than `capacity`. If `capacity` is 0, the vector will not allocate.\n\nIt is important to note that although the returned vector has the minimum _capacity_ specified, the vector will have a zero _length_. For an explanation of the difference between length and capacity, see _[Capacity and reallocation](#capacity-and-reallocation)_.\n\nIf it is important to know the exact allocated capacity of a `Vec`, always use the [`capacity`](about:blank/struct.Vec.html#method.capacity \"method std::vec::Vec::capacity\") method after construction.\n\nFor `Vec<T, A>` where `T` is a zero-sized type, there will be no allocation and the capacity will always be `usize::MAX`.\n\n##### [§](#panics-1)Panics\n\nPanics if the new capacity exceeds `isize::MAX` _bytes_.\n\n##### [§](#examples-5)Examples\n\n```\n#![feature(allocator_api)]\n\nuse std::alloc::System;\n\nlet mut vec = Vec::with_capacity_in(10, System);\n\n// The vector contains no items, even though it has capacity for more\nassert_eq!(vec.len(), 0);\nassert!(vec.capacity() >= 10);\n\n// These are all done without reallocating...\nfor i in 0..10 {\n    vec.push(i);\n}\nassert_eq!(vec.len(), 10);\nassert!(vec.capacity() >= 10);\n\n// ...but this may make the vector reallocate\nvec.push(11);\nassert_eq!(vec.len(), 11);\nassert!(vec.capacity() >= 11);\n\n// A vector of a zero-sized type will always over-allocate, since no\n// allocation is necessary\nlet vec_units = Vec::<(), System>::with_capacity_in(10, System);\nassert_eq!(vec_units.capacity(), usize::MAX);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(allocator_api)%5D%0A%0Afn+main()+%7B%0A++++use+std::alloc::System;%0A++++%0A++++let+mut+vec+=+Vec::with_capacity_in(10,+System);%0A++++%0A++++//+The+vector+contains+no+items,+even+though+it+has+capacity+for+more%0A++++assert_eq!(vec.len(),+0);%0A++++assert!(vec.capacity()+%3E=+10);%0A++++%0A++++//+These+are+all+done+without+reallocating...%0A++++for+i+in+0..10+%7B%0A++++++++vec.push(i);%0A++++%7D%0A++++assert_eq!(vec.len(),+10);%0A++++assert!(vec.capacity()+%3E=+10);%0A++++%0A++++//+...but+this+may+make+the+vector+reallocate%0A++++vec.push(11);%0A++++assert_eq!(vec.len(),+11);%0A++++assert!(vec.capacity()+%3E=+11);%0A++++%0A++++//+A+vector+of+a+zero-sized+type+will+always+over-allocate,+since+no%0A++++//+allocation+is+necessary%0A++++let+vec_units+=+Vec::%3C(),+System%3E::with_capacity_in(10,+System);%0A++++assert_eq!(vec_units.capacity(),+usize::MAX);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#716)\n\n🔬This is a nightly-only experimental API. (`allocator_api` [#32838](https://github.com/rust-lang/rust/issues/32838))\n\nConstructs a new, empty `Vec<T, A>` with at least the specified capacity with the provided allocator.\n\nThe vector will be able to hold at least `capacity` elements without reallocating. This method is allowed to allocate for more elements than `capacity`. If `capacity` is 0, the vector will not allocate.\n\n##### [§](#errors-1)Errors\n\nReturns an error if the capacity exceeds `isize::MAX` _bytes_, or if the allocator reports allocation failure.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#830)\n\n🔬This is a nightly-only experimental API. (`allocator_api` [#32838](https://github.com/rust-lang/rust/issues/32838))\n\nCreates a `Vec<T, A>` directly from a pointer, a length, a capacity, and an allocator.\n\n##### [§](#safety-1)Safety\n\nThis is highly unsafe, due to the number of invariants that aren’t checked:\n\n-   `ptr` must be [_currently allocated_](about:blank/alloc/trait.Allocator.html#currently-allocated-memory \"trait std::alloc::Allocator\") via the given allocator `alloc`.\n-   `T` needs to have the same alignment as what `ptr` was allocated with. (`T` having a less strict alignment is not sufficient, the alignment really needs to be equal to satisfy the [`dealloc`](about:blank/alloc/trait.GlobalAlloc.html#tymethod.dealloc \"method std::alloc::GlobalAlloc::dealloc\") requirement that memory must be allocated and deallocated with the same layout.)\n-   The size of `T` times the `capacity` (ie. the allocated size in bytes) needs to be the same size as the pointer was allocated with. (Because similar to alignment, [`dealloc`](about:blank/alloc/trait.GlobalAlloc.html#tymethod.dealloc \"method std::alloc::GlobalAlloc::dealloc\") must be called with the same layout `size`.)\n-   `length` needs to be less than or equal to `capacity`.\n-   The first `length` values must be properly initialized values of type `T`.\n-   `capacity` needs to [_fit_](about:blank/alloc/trait.Allocator.html#memory-fitting \"trait std::alloc::Allocator\") the layout size that the pointer was allocated with.\n-   The allocated size in bytes must be no larger than `isize::MAX`. See the safety documentation of [`pointer::offset`](about:blank/primitive.pointer.html#method.offset \"method pointer::offset\").\n\nThese requirements are always upheld by any `ptr` that has been allocated via `Vec<T, A>`. Other allocation sources are allowed if the invariants are upheld.\n\nViolating these may cause problems like corrupting the allocator’s internal data structures. For example it is **not** safe to build a `Vec<u8>` from a pointer to a C `char` array with length `size_t`. It’s also not safe to build one from a `Vec<u16>` and its length, because the allocator cares about the alignment, and these two types have different alignments. The buffer was allocated with alignment 2 (for `u16`), but after turning it into a `Vec<u8>` it’ll be deallocated with alignment 1.\n\nThe ownership of `ptr` is effectively transferred to the `Vec<T>` which may then deallocate, reallocate or change the contents of memory pointed to by the pointer at will. Ensure that nothing else uses the pointer after calling this function.\n\n##### [§](#examples-6)Examples\n\n```\n#![feature(allocator_api)]\n\nuse std::alloc::System;\n\nuse std::ptr;\nuse std::mem;\n\nlet mut v = Vec::with_capacity_in(3, System);\nv.push(1);\nv.push(2);\nv.push(3);\n\n// Prevent running `v`'s destructor so we are in complete control\n// of the allocation.\nlet mut v = mem::ManuallyDrop::new(v);\n\n// Pull out the various important pieces of information about `v`\nlet p = v.as_mut_ptr();\nlet len = v.len();\nlet cap = v.capacity();\nlet alloc = v.allocator();\n\nunsafe {\n    // Overwrite memory with 4, 5, 6\n    for i in 0..len {\n        ptr::write(p.add(i), 4 + i);\n    }\n\n    // Put everything back together into a Vec\n    let rebuilt = Vec::from_raw_parts_in(p, len, cap, alloc.clone());\n    assert_eq!(rebuilt, [4, 5, 6]);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(allocator_api)%5D%0A%0Afn+main()+%7B%0A++++use+std::alloc::System;%0A++++%0A++++use+std::ptr;%0A++++use+std::mem;%0A++++%0A++++let+mut+v+=+Vec::with_capacity_in(3,+System);%0A++++v.push(1);%0A++++v.push(2);%0A++++v.push(3);%0A++++%0A++++//+Prevent+running+%60v%60%27s+destructor+so+we+are+in+complete+control%0A++++//+of+the+allocation.%0A++++let+mut+v+=+mem::ManuallyDrop::new(v);%0A++++%0A++++//+Pull+out+the+various+important+pieces+of+information+about+%60v%60%0A++++let+p+=+v.as_mut_ptr();%0A++++let+len+=+v.len();%0A++++let+cap+=+v.capacity();%0A++++let+alloc+=+v.allocator();%0A++++%0A++++unsafe+%7B%0A++++++++//+Overwrite+memory+with+4,+5,+6%0A++++++++for+i+in+0..len+%7B%0A++++++++++++ptr::write(p.add(i),+4+%2B+i);%0A++++++++%7D%0A++++%0A++++++++//+Put+everything+back+together+into+a+Vec%0A++++++++let+rebuilt+=+Vec::from_raw_parts_in(p,+len,+cap,+alloc.clone());%0A++++++++assert_eq!(rebuilt,+%5B4,+5,+6%5D);%0A++++%7D%0A%7D&version=nightly&edition=2021)\n\nUsing memory that was allocated elsewhere:\n\n```\n#![feature(allocator_api)]\n\nuse std::alloc::{AllocError, Allocator, Global, Layout};\n\nfn main() {\n    let layout = Layout::array::<u32>(16).expect(\"overflow cannot happen\");\n\n    let vec = unsafe {\n        let mem = match Global.allocate(layout) {\n            Ok(mem) => mem.cast::<u32>().as_ptr(),\n            Err(AllocError) => return,\n        };\n\n        mem.write(1_000_000);\n\n        Vec::from_raw_parts_in(mem, 1, 16, Global)\n    };\n\n    assert_eq!(vec, &[1_000_000]);\n    assert_eq!(vec.capacity(), 16);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(allocator_api)%5D%0A%0Ause+std::alloc::%7BAllocError,+Allocator,+Global,+Layout%7D;%0A%0Afn+main()+%7B%0A++++let+layout+=+Layout::array::%3Cu32%3E(16).expect(%22overflow+cannot+happen%22);%0A%0A++++let+vec+=+unsafe+%7B%0A++++++++let+mem+=+match+Global.allocate(layout)+%7B%0A++++++++++++Ok(mem)+=%3E+mem.cast::%3Cu32%3E().as_ptr(),%0A++++++++++++Err(AllocError)+=%3E+return,%0A++++++++%7D;%0A%0A++++++++mem.write(1_000_000);%0A%0A++++++++Vec::from_raw_parts_in(mem,+1,+16,+Global)%0A++++%7D;%0A%0A++++assert_eq!(vec,+%26%5B1_000_000%5D);%0A++++assert_eq!(vec.capacity(),+16);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#883)\n\n🔬This is a nightly-only experimental API. (`vec_into_raw_parts` [#65816](https://github.com/rust-lang/rust/issues/65816))\n\nDecomposes a `Vec<T>` into its raw components: `(pointer, length, capacity)`.\n\nReturns the raw pointer to the underlying data, the length of the vector (in elements), and the allocated capacity of the data (in elements). These are the same arguments in the same order as the arguments to [`from_raw_parts`](about:blank/struct.Vec.html#method.from_raw_parts \"associated function std::vec::Vec::from_raw_parts\").\n\nAfter calling this function, the caller is responsible for the memory previously managed by the `Vec`. The only way to do this is to convert the raw pointer, length, and capacity back into a `Vec` with the [`from_raw_parts`](about:blank/struct.Vec.html#method.from_raw_parts \"associated function std::vec::Vec::from_raw_parts\") function, allowing the destructor to perform the cleanup.\n\n##### [§](#examples-7)Examples\n\n```\n#![feature(vec_into_raw_parts)]\nlet v: Vec<i32> = vec![-1, 0, 1];\n\nlet (ptr, len, cap) = v.into_raw_parts();\n\nlet rebuilt = unsafe {\n    // We can now make changes to the components, such as\n    // transmuting the raw pointer to a compatible type.\n    let ptr = ptr as *mut u32;\n\n    Vec::from_raw_parts(ptr, len, cap)\n};\nassert_eq!(rebuilt, [4294967295, 0, 1]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(vec_into_raw_parts)%5D%0Afn+main()+%7B%0A++++let+v:+Vec%3Ci32%3E+=+vec!%5B-1,+0,+1%5D;%0A++++%0A++++let+(ptr,+len,+cap)+=+v.into_raw_parts();%0A++++%0A++++let+rebuilt+=+unsafe+%7B%0A++++++++//+We+can+now+make+changes+to+the+components,+such+as%0A++++++++//+transmuting+the+raw+pointer+to+a+compatible+type.%0A++++++++let+ptr+=+ptr+as+*mut+u32;%0A++++%0A++++++++Vec::from_raw_parts(ptr,+len,+cap)%0A++++%7D;%0A++++assert_eq!(rebuilt,+%5B4294967295,+0,+1%5D);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#927)\n\n🔬This is a nightly-only experimental API. (`allocator_api` [#32838](https://github.com/rust-lang/rust/issues/32838))\n\nDecomposes a `Vec<T>` into its raw components: `(pointer, length, capacity, allocator)`.\n\nReturns the raw pointer to the underlying data, the length of the vector (in elements), the allocated capacity of the data (in elements), and the allocator. These are the same arguments in the same order as the arguments to [`from_raw_parts_in`](about:blank/struct.Vec.html#method.from_raw_parts_in \"associated function std::vec::Vec::from_raw_parts_in\").\n\nAfter calling this function, the caller is responsible for the memory previously managed by the `Vec`. The only way to do this is to convert the raw pointer, length, and capacity back into a `Vec` with the [`from_raw_parts_in`](about:blank/struct.Vec.html#method.from_raw_parts_in \"associated function std::vec::Vec::from_raw_parts_in\") function, allowing the destructor to perform the cleanup.\n\n##### [§](#examples-8)Examples\n\n```\n#![feature(allocator_api, vec_into_raw_parts)]\n\nuse std::alloc::System;\n\nlet mut v: Vec<i32, System> = Vec::new_in(System);\nv.push(-1);\nv.push(0);\nv.push(1);\n\nlet (ptr, len, cap, alloc) = v.into_raw_parts_with_alloc();\n\nlet rebuilt = unsafe {\n    // We can now make changes to the components, such as\n    // transmuting the raw pointer to a compatible type.\n    let ptr = ptr as *mut u32;\n\n    Vec::from_raw_parts_in(ptr, len, cap, alloc)\n};\nassert_eq!(rebuilt, [4294967295, 0, 1]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(allocator_api,+vec_into_raw_parts)%5D%0A%0Afn+main()+%7B%0A++++use+std::alloc::System;%0A++++%0A++++let+mut+v:+Vec%3Ci32,+System%3E+=+Vec::new_in(System);%0A++++v.push(-1);%0A++++v.push(0);%0A++++v.push(1);%0A++++%0A++++let+(ptr,+len,+cap,+alloc)+=+v.into_raw_parts_with_alloc();%0A++++%0A++++let+rebuilt+=+unsafe+%7B%0A++++++++//+We+can+now+make+changes+to+the+components,+such+as%0A++++++++//+transmuting+the+raw+pointer+to+a+compatible+type.%0A++++++++let+ptr+=+ptr+as+*mut+u32;%0A++++%0A++++++++Vec::from_raw_parts_in(ptr,+len,+cap,+alloc)%0A++++%7D;%0A++++assert_eq!(rebuilt,+%5B4294967295,+0,+1%5D);%0A%7D&version=nightly&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#948)\n\nReturns the total number of elements the vector can hold without reallocating.\n\n##### [§](#examples-9)Examples\n\n```\nlet mut vec: Vec<i32> = Vec::with_capacity(10);\nvec.push(42);\nassert!(vec.capacity() >= 10);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+vec:+Vec%3Ci32%3E+=+Vec::with_capacity(10);%0A++++vec.push(42);%0A++++assert!(vec.capacity()+%3E=+10);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#971)\n\nReserves capacity for at least `additional` more elements to be inserted in the given `Vec<T>`. The collection may reserve more space to speculatively avoid frequent reallocations. After calling `reserve`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if capacity is already sufficient.\n\n##### [§](#panics-2)Panics\n\nPanics if the new capacity exceeds `isize::MAX` _bytes_.\n\n##### [§](#examples-10)Examples\n\n```\nlet mut vec = vec![1];\nvec.reserve(10);\nassert!(vec.capacity() >= 11);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+vec+=+vec!%5B1%5D;%0A++++vec.reserve(10);%0A++++assert!(vec.capacity()+%3E=+11);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#1001)\n\nReserves the minimum capacity for at least `additional` more elements to be inserted in the given `Vec<T>`. Unlike [`reserve`](about:blank/struct.Vec.html#method.reserve \"method std::vec::Vec::reserve\"), this will not deliberately over-allocate to speculatively avoid frequent allocations. After calling `reserve_exact`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if the capacity is already sufficient.\n\nNote that the allocator may give the collection more space than it requests. Therefore, capacity can not be relied upon to be precisely minimal. Prefer [`reserve`](about:blank/struct.Vec.html#method.reserve \"method std::vec::Vec::reserve\") if future insertions are expected.\n\n##### [§](#panics-3)Panics\n\nPanics if the new capacity exceeds `isize::MAX` _bytes_.\n\n##### [§](#examples-11)Examples\n\n```\nlet mut vec = vec![1];\nvec.reserve_exact(10);\nassert!(vec.capacity() >= 11);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+vec+=+vec!%5B1%5D;%0A++++vec.reserve_exact(10);%0A++++assert!(vec.capacity()+%3E=+11);%0A%7D&edition=2021)\n\n1.57.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#1038)\n\nTries to reserve capacity for at least `additional` more elements to be inserted in the given `Vec<T>`. The collection may reserve more space to speculatively avoid frequent reallocations. After calling `try_reserve`, capacity will be greater than or equal to `self.len() + additional` if it returns `Ok(())`. Does nothing if capacity is already sufficient. This method preserves the contents even if an error occurs.\n\n##### [§](#errors-2)Errors\n\nIf the capacity overflows, or the allocator reports a failure, then an error is returned.\n\n##### [§](#examples-12)Examples\n\n```\nuse std::collections::TryReserveError;\n\nfn process_data(data: &[u32]) -> Result<Vec<u32>, TryReserveError> {\n    let mut output = Vec::new();\n\n    // Pre-reserve the memory, exiting if we can't\n    output.try_reserve(data.len())?;\n\n    // Now we know this can't OOM in the middle of our complex work\n    output.extend(data.iter().map(|&val| {\n        val * 2 + 5 // very complicated\n    }));\n\n    Ok(output)\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::TryReserveError;%0A++++%0A++++fn+process_data(data:+%26%5Bu32%5D)+-%3E+Result%3CVec%3Cu32%3E,+TryReserveError%3E+%7B%0A++++++++let+mut+output+=+Vec::new();%0A++++%0A++++++++//+Pre-reserve+the+memory,+exiting+if+we+can%27t%0A++++++++output.try_reserve(data.len())?;%0A++++%0A++++++++//+Now+we+know+this+can%27t+OOM+in+the+middle+of+our+complex+work%0A++++++++output.extend(data.iter().map(%7C%26val%7C+%7B%0A++++++++++++val+*+2+%2B+5+//+very+complicated%0A++++++++%7D));%0A++++%0A++++++++Ok(output)%0A++++%7D%0A++++process_data(%26%5B1,+2,+3%5D).expect(%22why+is+the+test+harness+OOMing+on+12+bytes?%22);%0A%7D&edition=2021)\n\n1.57.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#1081)\n\nTries to reserve the minimum capacity for at least `additional` elements to be inserted in the given `Vec<T>`. Unlike [`try_reserve`](about:blank/struct.Vec.html#method.try_reserve \"method std::vec::Vec::try_reserve\"), this will not deliberately over-allocate to speculatively avoid frequent allocations. After calling `try_reserve_exact`, capacity will be greater than or equal to `self.len() + additional` if it returns `Ok(())`. Does nothing if the capacity is already sufficient.\n\nNote that the allocator may give the collection more space than it requests. Therefore, capacity can not be relied upon to be precisely minimal. Prefer [`try_reserve`](about:blank/struct.Vec.html#method.try_reserve \"method std::vec::Vec::try_reserve\") if future insertions are expected.\n\n##### [§](#errors-3)Errors\n\nIf the capacity overflows, or the allocator reports a failure, then an error is returned.\n\n##### [§](#examples-13)Examples\n\n```\nuse std::collections::TryReserveError;\n\nfn process_data(data: &[u32]) -> Result<Vec<u32>, TryReserveError> {\n    let mut output = Vec::new();\n\n    // Pre-reserve the memory, exiting if we can't\n    output.try_reserve_exact(data.len())?;\n\n    // Now we know this can't OOM in the middle of our complex work\n    output.extend(data.iter().map(|&val| {\n        val * 2 + 5 // very complicated\n    }));\n\n    Ok(output)\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::TryReserveError;%0A++++%0A++++fn+process_data(data:+%26%5Bu32%5D)+-%3E+Result%3CVec%3Cu32%3E,+TryReserveError%3E+%7B%0A++++++++let+mut+output+=+Vec::new();%0A++++%0A++++++++//+Pre-reserve+the+memory,+exiting+if+we+can%27t%0A++++++++output.try_reserve_exact(data.len())?;%0A++++%0A++++++++//+Now+we+know+this+can%27t+OOM+in+the+middle+of+our+complex+work%0A++++++++output.extend(data.iter().map(%7C%26val%7C+%7B%0A++++++++++++val+*+2+%2B+5+//+very+complicated%0A++++++++%7D));%0A++++%0A++++++++Ok(output)%0A++++%7D%0A++++process_data(%26%5B1,+2,+3%5D).expect(%22why+is+the+test+harness+OOMing+on+12+bytes?%22);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#1104)\n\nShrinks the capacity of the vector as much as possible.\n\nThe behavior of this method depends on the allocator, which may either shrink the vector in-place or reallocate. The resulting vector might still have some excess capacity, just as is the case for [`with_capacity`](about:blank/struct.Vec.html#method.with_capacity \"associated function std::vec::Vec::with_capacity\"). See [`Allocator::shrink`](about:blank/alloc/trait.Allocator.html#method.shrink \"method std::alloc::Allocator::shrink\") for more details.\n\n##### [§](#examples-14)Examples\n\n```\nlet mut vec = Vec::with_capacity(10);\nvec.extend([1, 2, 3]);\nassert!(vec.capacity() >= 10);\nvec.shrink_to_fit();\nassert!(vec.capacity() >= 3);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+vec+=+Vec::with_capacity(10);%0A++++vec.extend(%5B1,+2,+3%5D);%0A++++assert!(vec.capacity()+%3E=+10);%0A++++vec.shrink_to_fit();%0A++++assert!(vec.capacity()+%3E=+3);%0A%7D&edition=2021)\n\n1.56.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#1133)\n\nShrinks the capacity of the vector with a lower bound.\n\nThe capacity will remain at least as large as both the length and the supplied value.\n\nIf the current capacity is less than the lower limit, this is a no-op.\n\n##### [§](#examples-15)Examples\n\n```\nlet mut vec = Vec::with_capacity(10);\nvec.extend([1, 2, 3]);\nassert!(vec.capacity() >= 10);\nvec.shrink_to(4);\nassert!(vec.capacity() >= 4);\nvec.shrink_to(0);\nassert!(vec.capacity() >= 3);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+vec+=+Vec::with_capacity(10);%0A++++vec.extend(%5B1,+2,+3%5D);%0A++++assert!(vec.capacity()+%3E=+10);%0A++++vec.shrink_to(4);%0A++++assert!(vec.capacity()+%3E=+4);%0A++++vec.shrink_to(0);%0A++++assert!(vec.capacity()+%3E=+3);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#1166)\n\nConverts the vector into [`Box<[T]>`](../boxed/struct.Box.html \"struct std::boxed::Box\").\n\nBefore doing the conversion, this method discards excess capacity like [`shrink_to_fit`](about:blank/struct.Vec.html#method.shrink_to_fit \"method std::vec::Vec::shrink_to_fit\").\n\n##### [§](#examples-16)Examples\n\n```\nlet v = vec![1, 2, 3];\n\nlet slice = v.into_boxed_slice();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v+=+vec!%5B1,+2,+3%5D;%0A++++%0A++++let+slice+=+v.into_boxed_slice();%0A%7D&edition=2021)\n\nAny excess capacity is removed:\n\n```\nlet mut vec = Vec::with_capacity(10);\nvec.extend([1, 2, 3]);\n\nassert!(vec.capacity() >= 10);\nlet slice = vec.into_boxed_slice();\nassert_eq!(slice.into_vec().capacity(), 3);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+vec+=+Vec::with_capacity(10);%0A++++vec.extend(%5B1,+2,+3%5D);%0A++++%0A++++assert!(vec.capacity()+%3E=+10);%0A++++let+slice+=+vec.into_boxed_slice();%0A++++assert_eq!(slice.into_vec().capacity(),+3);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#1219)\n\nShortens the vector, keeping the first `len` elements and dropping the rest.\n\nIf `len` is greater or equal to the vector’s current length, this has no effect.\n\nThe [`drain`](about:blank/struct.Vec.html#method.drain \"method std::vec::Vec::drain\") method can emulate `truncate`, but causes the excess elements to be returned instead of dropped.\n\nNote that this method has no effect on the allocated capacity of the vector.\n\n##### [§](#examples-17)Examples\n\nTruncating a five element vector to two elements:\n\n```\nlet mut vec = vec![1, 2, 3, 4, 5];\nvec.truncate(2);\nassert_eq!(vec, [1, 2]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+vec+=+vec!%5B1,+2,+3,+4,+5%5D;%0A++++vec.truncate(2);%0A++++assert_eq!(vec,+%5B1,+2%5D);%0A%7D&edition=2021)\n\nNo truncation occurs when `len` is greater than the vector’s current length:\n\n```\nlet mut vec = vec![1, 2, 3];\nvec.truncate(8);\nassert_eq!(vec, [1, 2, 3]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+vec+=+vec!%5B1,+2,+3%5D;%0A++++vec.truncate(8);%0A++++assert_eq!(vec,+%5B1,+2,+3%5D);%0A%7D&edition=2021)\n\nTruncating when `len == 0` is equivalent to calling the [`clear`](about:blank/struct.Vec.html#method.clear \"method std::vec::Vec::clear\") method.\n\n```\nlet mut vec = vec![1, 2, 3];\nvec.truncate(0);\nassert_eq!(vec, []);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+vec+=+vec!%5B1,+2,+3%5D;%0A++++vec.truncate(0);%0A++++assert_eq!(vec,+%5B%5D);%0A%7D&edition=2021)\n\n1.7.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#1254)\n\nExtracts a slice containing the entire vector.\n\nEquivalent to `&s[..]`.\n\n##### [§](#examples-18)Examples\n\n```\nuse std::io::{self, Write};\nlet buffer = vec![1, 2, 3, 5, 8];\nio::sink().write(buffer.as_slice()).unwrap();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io::%7Bself,+Write%7D;%0A++++let+buffer+=+vec!%5B1,+2,+3,+5,+8%5D;%0A++++io::sink().write(buffer.as_slice()).unwrap();%0A%7D&edition=2021)\n\n1.7.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#1271)\n\nExtracts a mutable slice of the entire vector.\n\nEquivalent to `&mut s[..]`.\n\n##### [§](#examples-19)Examples\n\n```\nuse std::io::{self, Read};\nlet mut buffer = vec![0; 3];\nio::repeat(0b101).read_exact(buffer.as_mut_slice()).unwrap();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io::%7Bself,+Read%7D;%0A++++let+mut+buffer+=+vec!%5B0;+3%5D;%0A++++io::repeat(0b101).read_exact(buffer.as_mut_slice()).unwrap();%0A%7D&edition=2021)\n\n1.37.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#1329)\n\nReturns a raw pointer to the vector’s buffer, or a dangling raw pointer valid for zero sized reads if the vector didn’t allocate.\n\nThe caller must ensure that the vector outlives the pointer this function returns, or else it will end up pointing to garbage. Modifying the vector may cause its buffer to be reallocated, which would also make any pointers to it invalid.\n\nThe caller must also ensure that the memory the pointer (non-transitively) points to is never written to (except inside an `UnsafeCell`) using this pointer or any pointer derived from it. If you need to mutate the contents of the slice, use [`as_mut_ptr`](about:blank/struct.Vec.html#method.as_mut_ptr \"method std::vec::Vec::as_mut_ptr\").\n\nThis method guarantees that for the purpose of the aliasing model, this method does not materialize a reference to the underlying slice, and thus the returned pointer will remain valid when mixed with other calls to [`as_ptr`](about:blank/struct.Vec.html#method.as_ptr \"method std::vec::Vec::as_ptr\") and [`as_mut_ptr`](about:blank/struct.Vec.html#method.as_mut_ptr \"method std::vec::Vec::as_mut_ptr\"). Note that calling other methods that materialize mutable references to the slice, or mutable references to specific elements you are planning on accessing through this pointer, as well as writing to those elements, may still invalidate this pointer. See the second example below for how this guarantee can be used.\n\n##### [§](#examples-20)Examples\n\n```\nlet x = vec![1, 2, 4];\nlet x_ptr = x.as_ptr();\n\nunsafe {\n    for i in 0..x.len() {\n        assert_eq!(*x_ptr.add(i), 1 << i);\n    }\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+vec!%5B1,+2,+4%5D;%0A++++let+x_ptr+=+x.as_ptr();%0A++++%0A++++unsafe+%7B%0A++++++++for+i+in+0..x.len()+%7B%0A++++++++++++assert_eq!(*x_ptr.add(i),+1+%3C%3C+i);%0A++++++++%7D%0A++++%7D%0A%7D&edition=2021)\n\nDue to the aliasing guarantee, the following code is legal:\n\n```\nunsafe {\n    let mut v = vec![0, 1, 2];\n    let ptr1 = v.as_ptr();\n    let _ = ptr1.read();\n    let ptr2 = v.as_mut_ptr().offset(2);\n    ptr2.write(2);\n    // Notably, the write to `ptr2` did *not* invalidate `ptr1`\n    // because it mutated a different element:\n    let _ = ptr1.read();\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++unsafe+%7B%0A++++++++let+mut+v+=+vec!%5B0,+1,+2%5D;%0A++++++++let+ptr1+=+v.as_ptr();%0A++++++++let+_+=+ptr1.read();%0A++++++++let+ptr2+=+v.as_mut_ptr().offset(2);%0A++++++++ptr2.write(2);%0A++++++++//+Notably,+the+write+to+%60ptr2%60+did+*not*+invalidate+%60ptr1%60%0A++++++++//+because+it+mutated+a+different+element:%0A++++++++let+_+=+ptr1.read();%0A++++%7D%0A%7D&edition=2021)\n\n1.37.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#1389)\n\nReturns an unsafe mutable pointer to the vector’s buffer, or a dangling raw pointer valid for zero sized reads if the vector didn’t allocate.\n\nThe caller must ensure that the vector outlives the pointer this function returns, or else it will end up pointing to garbage. Modifying the vector may cause its buffer to be reallocated, which would also make any pointers to it invalid.\n\nThis method guarantees that for the purpose of the aliasing model, this method does not materialize a reference to the underlying slice, and thus the returned pointer will remain valid when mixed with other calls to [`as_ptr`](about:blank/struct.Vec.html#method.as_ptr \"method std::vec::Vec::as_ptr\") and [`as_mut_ptr`](about:blank/struct.Vec.html#method.as_mut_ptr \"method std::vec::Vec::as_mut_ptr\"). Note that calling other methods that materialize references to the slice, or references to specific elements you are planning on accessing through this pointer, may still invalidate this pointer. See the second example below for how this guarantee can be used.\n\n##### [§](#examples-21)Examples\n\n```\n// Allocate vector big enough for 4 elements.\nlet size = 4;\nlet mut x: Vec<i32> = Vec::with_capacity(size);\nlet x_ptr = x.as_mut_ptr();\n\n// Initialize elements via raw pointer writes, then set length.\nunsafe {\n    for i in 0..size {\n        *x_ptr.add(i) = i as i32;\n    }\n    x.set_len(size);\n}\nassert_eq!(&*x, &[0, 1, 2, 3]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+Allocate+vector+big+enough+for+4+elements.%0Afn+main()+%7B%0A++++let+size+=+4;%0A++++let+mut+x:+Vec%3Ci32%3E+=+Vec::with_capacity(size);%0A++++let+x_ptr+=+x.as_mut_ptr();%0A++++%0A++++//+Initialize+elements+via+raw+pointer+writes,+then+set+length.%0A++++unsafe+%7B%0A++++++++for+i+in+0..size+%7B%0A++++++++++++*x_ptr.add(i)+=+i+as+i32;%0A++++++++%7D%0A++++++++x.set_len(size);%0A++++%7D%0A++++assert_eq!(%26*x,+%26%5B0,+1,+2,+3%5D);%0A%7D&edition=2021)\n\nDue to the aliasing guarantee, the following code is legal:\n\n```\nunsafe {\n    let mut v = vec![0];\n    let ptr1 = v.as_mut_ptr();\n    ptr1.write(1);\n    let ptr2 = v.as_mut_ptr();\n    ptr2.write(2);\n    // Notably, the write to `ptr2` did *not* invalidate `ptr1`:\n    ptr1.write(3);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++unsafe+%7B%0A++++++++let+mut+v+=+vec!%5B0%5D;%0A++++++++let+ptr1+=+v.as_mut_ptr();%0A++++++++ptr1.write(1);%0A++++++++let+ptr2+=+v.as_mut_ptr();%0A++++++++ptr2.write(2);%0A++++++++//+Notably,+the+write+to+%60ptr2%60+did+*not*+invalidate+%60ptr1%60:%0A++++++++ptr1.write(3);%0A++++%7D%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#1398)\n\n🔬This is a nightly-only experimental API. (`allocator_api` [#32838](https://github.com/rust-lang/rust/issues/32838))\n\nReturns a reference to the underlying allocator.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#1482)\n\nForces the length of the vector to `new_len`.\n\nThis is a low-level operation that maintains none of the normal invariants of the type. Normally changing the length of a vector is done using one of the safe operations instead, such as [`truncate`](about:blank/struct.Vec.html#method.truncate \"method std::vec::Vec::truncate\"), [`resize`](about:blank/struct.Vec.html#method.resize \"method std::vec::Vec::resize\"), [`extend`](about:blank/iter/trait.Extend.html#tymethod.extend \"method std::iter::Extend::extend\"), or [`clear`](about:blank/struct.Vec.html#method.clear \"method std::vec::Vec::clear\").\n\n##### [§](#safety-2)Safety\n\n-   `new_len` must be less than or equal to [`capacity()`](about:blank/struct.Vec.html#method.capacity \"method std::vec::Vec::capacity\").\n-   The elements at `old_len..new_len` must be initialized.\n\n##### [§](#examples-22)Examples\n\nThis method can be useful for situations in which the vector is serving as a buffer for other code, particularly over FFI:\n\n```\npub fn get_dictionary(&self) -> Option<Vec<u8>> {\n    // Per the FFI method's docs, \"32768 bytes is always enough\".\n    let mut dict = Vec::with_capacity(32_768);\n    let mut dict_length = 0;\n    // SAFETY: When `deflateGetDictionary` returns `Z_OK`, it holds that:\n    // 1. `dict_length` elements were initialized.\n    // 2. `dict_length` <= the capacity (32_768)\n    // which makes `set_len` safe to call.\n    unsafe {\n        // Make the FFI call...\n        let r = deflateGetDictionary(self.strm, dict.as_mut_ptr(), &mut dict_length);\n        if r == Z_OK {\n            // ...and update the length to what was initialized.\n            dict.set_len(dict_length);\n            Some(dict)\n        } else {\n            None\n        }\n    }\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Ballow(dead_code)%5D%0A//+This+is+just+a+minimal+skeleton+for+the+doc+example;%0A//+don%27t+use+this+as+a+starting+point+for+a+real+library.%0Afn+main()+%7B%0A++++pub+struct+StreamWrapper+%7B+strm:+*mut+std::ffi::c_void+%7D%0A++++const+Z_OK:+i32+=+0;%0A++++extern+%22C%22+%7B%0A++++++++fn+deflateGetDictionary(%0A++++++++++++strm:+*mut+std::ffi::c_void,%0A++++++++++++dictionary:+*mut+u8,%0A++++++++++++dictLength:+*mut+usize,%0A++++++++)+-%3E+i32;%0A++++%7D%0A++++impl+StreamWrapper+%7B%0A++++pub+fn+get_dictionary(%26self)+-%3E+Option%3CVec%3Cu8%3E%3E+%7B%0A++++++++//+Per+the+FFI+method%27s+docs,+%2232768+bytes+is+always+enough%22.%0A++++++++let+mut+dict+=+Vec::with_capacity(32_768);%0A++++++++let+mut+dict_length+=+0;%0A++++++++//+SAFETY:+When+%60deflateGetDictionary%60+returns+%60Z_OK%60,+it+holds+that:%0A++++++++//+1.+%60dict_length%60+elements+were+initialized.%0A++++++++//+2.+%60dict_length%60+%3C=+the+capacity+(32_768)%0A++++++++//+which+makes+%60set_len%60+safe+to+call.%0A++++++++unsafe+%7B%0A++++++++++++//+Make+the+FFI+call...%0A++++++++++++let+r+=+deflateGetDictionary(self.strm,+dict.as_mut_ptr(),+%26mut+dict_length);%0A++++++++++++if+r+==+Z_OK+%7B%0A++++++++++++++++//+...and+update+the+length+to+what+was+initialized.%0A++++++++++++++++dict.set_len(dict_length);%0A++++++++++++++++Some(dict)%0A++++++++++++%7D+else+%7B%0A++++++++++++++++None%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A++++%7D%0A%7D&edition=2021)\n\nWhile the following example is sound, there is a memory leak since the inner vectors were not freed prior to the `set_len` call:\n\n```\nlet mut vec = vec![vec![1, 0, 0],\n                   vec![0, 1, 0],\n                   vec![0, 0, 1]];\n// SAFETY:\n// 1. `old_len..0` is empty so no elements need to be initialized.\n// 2. `0 <= capacity` always holds whatever `capacity` is.\nunsafe {\n    vec.set_len(0);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+vec+=+vec!%5Bvec!%5B1,+0,+0%5D,%0A+++++++++++++++++++++++vec!%5B0,+1,+0%5D,%0A+++++++++++++++++++++++vec!%5B0,+0,+1%5D%5D;%0A++++//+SAFETY:%0A++++//+1.+%60old_len..0%60+is+empty+so+no+elements+need+to+be+initialized.%0A++++//+2.+%600+%3C=+capacity%60+always+holds+whatever+%60capacity%60+is.%0A++++unsafe+%7B%0A++++++++vec.set_len(0);%0A++++%7D%0A%7D&edition=2021)\n\nNormally, here, one would use [`clear`](about:blank/struct.Vec.html#method.clear \"method std::vec::Vec::clear\") instead to correctly drop the contents and thus not leak memory.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#1514)\n\nRemoves an element from the vector and returns it.\n\nThe removed element is replaced by the last element of the vector.\n\nThis does not preserve ordering of the remaining elements, but is _O_(1). If you need to preserve the element order, use [`remove`](about:blank/struct.Vec.html#method.remove \"method std::vec::Vec::remove\") instead.\n\n##### [§](#panics-4)Panics\n\nPanics if `index` is out of bounds.\n\n##### [§](#examples-23)Examples\n\n```\nlet mut v = vec![\"foo\", \"bar\", \"baz\", \"qux\"];\n\nassert_eq!(v.swap_remove(1), \"bar\");\nassert_eq!(v, [\"foo\", \"qux\", \"baz\"]);\n\nassert_eq!(v.swap_remove(0), \"foo\");\nassert_eq!(v, [\"baz\", \"qux\"]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+vec!%5B%22foo%22,+%22bar%22,+%22baz%22,+%22qux%22%5D;%0A++++%0A++++assert_eq!(v.swap_remove(1),+%22bar%22);%0A++++assert_eq!(v,+%5B%22foo%22,+%22qux%22,+%22baz%22%5D);%0A++++%0A++++assert_eq!(v.swap_remove(0),+%22foo%22);%0A++++assert_eq!(v,+%5B%22baz%22,+%22qux%22%5D);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#1562)\n\nInserts an element at position `index` within the vector, shifting all elements after it to the right.\n\n##### [§](#panics-5)Panics\n\nPanics if `index > len`.\n\n##### [§](#examples-24)Examples\n\n```\nlet mut vec = vec![1, 2, 3];\nvec.insert(1, 4);\nassert_eq!(vec, [1, 4, 2, 3]);\nvec.insert(4, 5);\nassert_eq!(vec, [1, 4, 2, 3, 5]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+vec+=+vec!%5B1,+2,+3%5D;%0A++++vec.insert(1,+4);%0A++++assert_eq!(vec,+%5B1,+4,+2,+3%5D);%0A++++vec.insert(4,+5);%0A++++assert_eq!(vec,+%5B1,+4,+2,+3,+5%5D);%0A%7D&edition=2021)\n\n##### [§](#time-complexity)Time complexity\n\nTakes _O_([`Vec::len`](about:blank/struct.Vec.html#method.len \"method std::vec::Vec::len\")) time. All items after the insertion index must be shifted to the right. In the worst case, all elements are shifted when the insertion index is 0.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#1624)\n\nRemoves and returns the element at position `index` within the vector, shifting all elements after it to the left.\n\nNote: Because this shifts over the remaining elements, it has a worst-case performance of _O_(_n_). If you don’t need the order of elements to be preserved, use [`swap_remove`](about:blank/struct.Vec.html#method.swap_remove \"method std::vec::Vec::swap_remove\") instead. If you’d like to remove elements from the beginning of the `Vec`, consider using [`VecDeque::pop_front`](about:blank/collections/struct.VecDeque.html#method.pop_front \"method std::collections::VecDeque::pop_front\") instead.\n\n##### [§](#panics-6)Panics\n\nPanics if `index` is out of bounds.\n\n##### [§](#examples-25)Examples\n\n```\nlet mut v = vec![1, 2, 3];\nassert_eq!(v.remove(1), 2);\nassert_eq!(v, [1, 3]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+vec!%5B1,+2,+3%5D;%0A++++assert_eq!(v.remove(1),+2);%0A++++assert_eq!(v,+%5B1,+3%5D);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#1679-1681)\n\nRetains only the elements specified by the predicate.\n\nIn other words, remove all elements `e` for which `f(&e)` returns `false`. This method operates in place, visiting each element exactly once in the original order, and preserves the order of the retained elements.\n\n##### [§](#examples-26)Examples\n\n```\nlet mut vec = vec![1, 2, 3, 4];\nvec.retain(|&x| x % 2 == 0);\nassert_eq!(vec, [2, 4]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+vec+=+vec!%5B1,+2,+3,+4%5D;%0A++++vec.retain(%7C%26x%7C+x+%25+2+==+0);%0A++++assert_eq!(vec,+%5B2,+4%5D);%0A%7D&edition=2021)\n\nBecause the elements are visited exactly once in the original order, external state may be used to decide which elements to keep.\n\n```\nlet mut vec = vec![1, 2, 3, 4, 5];\nlet keep = [false, true, true, false, true];\nlet mut iter = keep.iter();\nvec.retain(|_| *iter.next().unwrap());\nassert_eq!(vec, [2, 3, 5]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+vec+=+vec!%5B1,+2,+3,+4,+5%5D;%0A++++let+keep+=+%5Bfalse,+true,+true,+false,+true%5D;%0A++++let+mut+iter+=+keep.iter();%0A++++vec.retain(%7C_%7C+*iter.next().unwrap());%0A++++assert_eq!(vec,+%5B2,+3,+5%5D);%0A%7D&edition=2021)\n\n1.61.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#1705-1707)\n\nRetains only the elements specified by the predicate, passing a mutable reference to it.\n\nIn other words, remove all elements `e` such that `f(&mut e)` returns `false`. This method operates in place, visiting each element exactly once in the original order, and preserves the order of the retained elements.\n\n##### [§](#examples-27)Examples\n\n```\nlet mut vec = vec![1, 2, 3, 4];\nvec.retain_mut(|x| if *x <= 3 {\n    *x += 1;\n    true\n} else {\n    false\n});\nassert_eq!(vec, [2, 3, 4]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+vec+=+vec!%5B1,+2,+3,+4%5D;%0A++++vec.retain_mut(%7Cx%7C+if+*x+%3C=+3+%7B%0A++++++++*x+%2B=+1;%0A++++++++true%0A++++%7D+else+%7B%0A++++++++false%0A++++%7D);%0A++++assert_eq!(vec,+%5B2,+3,+4%5D);%0A%7D&edition=2021)\n\n1.16.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#1814-1817)\n\nRemoves all but the first of consecutive elements in the vector that resolve to the same key.\n\nIf the vector is sorted, this removes all duplicates.\n\n##### [§](#examples-28)Examples\n\n```\nlet mut vec = vec![10, 20, 21, 30, 20];\n\nvec.dedup_by_key(|i| *i / 10);\n\nassert_eq!(vec, [10, 20, 30, 20]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+vec+=+vec!%5B10,+20,+21,+30,+20%5D;%0A++++%0A++++vec.dedup_by_key(%7Ci%7C+*i+/+10);%0A++++%0A++++assert_eq!(vec,+%5B10,+20,+30,+20%5D);%0A%7D&edition=2021)\n\n1.16.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#1841-1843)\n\nRemoves all but the first of consecutive elements in the vector satisfying a given equality relation.\n\nThe `same_bucket` function is passed references to two elements from the vector and must determine if the elements compare equal. The elements are passed in opposite order from their order in the slice, so if `same_bucket(a, b)` returns `true`, `a` is removed.\n\nIf the vector is sorted, this removes all duplicates.\n\n##### [§](#examples-29)Examples\n\n```\nlet mut vec = vec![\"foo\", \"bar\", \"Bar\", \"baz\", \"bar\"];\n\nvec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));\n\nassert_eq!(vec, [\"foo\", \"bar\", \"baz\", \"bar\"]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+vec+=+vec!%5B%22foo%22,+%22bar%22,+%22Bar%22,+%22baz%22,+%22bar%22%5D;%0A++++%0A++++vec.dedup_by(%7Ca,+b%7C+a.eq_ignore_ascii_case(b));%0A++++%0A++++assert_eq!(vec,+%5B%22foo%22,+%22bar%22,+%22baz%22,+%22bar%22%5D);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#1993)\n\nAppends an element to the back of a collection.\n\n##### [§](#panics-7)Panics\n\nPanics if the new capacity exceeds `isize::MAX` _bytes_.\n\n##### [§](#examples-30)Examples\n\n```\nlet mut vec = vec![1, 2];\nvec.push(3);\nassert_eq!(vec, [1, 2, 3]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+vec+=+vec!%5B1,+2%5D;%0A++++vec.push(3);%0A++++assert_eq!(vec,+%5B1,+2,+3%5D);%0A%7D&edition=2021)\n\n##### [§](#time-complexity-1)Time complexity\n\nTakes amortized _O_(1) time. If the vector’s length would exceed its capacity after the push, _O_(_capacity_) time is taken to copy the vector’s elements to a larger allocation. This expensive operation is offset by the _capacity_ _O_(1) insertions it allows.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2045)\n\n🔬This is a nightly-only experimental API. (`vec_push_within_capacity` [#100486](https://github.com/rust-lang/rust/issues/100486))\n\nAppends an element if there is sufficient spare capacity, otherwise an error is returned with the element.\n\nUnlike [`push`](about:blank/struct.Vec.html#method.push \"method std::vec::Vec::push\") this method will not reallocate when there’s insufficient capacity. The caller should use [`reserve`](about:blank/struct.Vec.html#method.reserve \"method std::vec::Vec::reserve\") or [`try_reserve`](about:blank/struct.Vec.html#method.try_reserve \"method std::vec::Vec::try_reserve\") to ensure that there is enough capacity.\n\n##### [§](#examples-31)Examples\n\nA manual, panic-free alternative to [`FromIterator`](../iter/trait.FromIterator.html \"trait std::iter::FromIterator\"):\n\n```\n#![feature(vec_push_within_capacity)]\n\nuse std::collections::TryReserveError;\nfn from_iter_fallible<T>(iter: impl Iterator<Item=T>) -> Result<Vec<T>, TryReserveError> {\n    let mut vec = Vec::new();\n    for value in iter {\n        if let Err(value) = vec.push_within_capacity(value) {\n            vec.try_reserve(1)?;\n            // this cannot fail, the previous line either returned or added at least 1 free slot\n            let _ = vec.push_within_capacity(value);\n        }\n    }\n    Ok(vec)\n}\nassert_eq!(from_iter_fallible(0..100), Ok(Vec::from_iter(0..100)));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(vec_push_within_capacity)%5D%0A%0Afn+main()+%7B%0A++++use+std::collections::TryReserveError;%0A++++fn+from_iter_fallible%3CT%3E(iter:+impl+Iterator%3CItem=T%3E)+-%3E+Result%3CVec%3CT%3E,+TryReserveError%3E+%7B%0A++++++++let+mut+vec+=+Vec::new();%0A++++++++for+value+in+iter+%7B%0A++++++++++++if+let+Err(value)+=+vec.push_within_capacity(value)+%7B%0A++++++++++++++++vec.try_reserve(1)?;%0A++++++++++++++++//+this+cannot+fail,+the+previous+line+either+returned+or+added+at+least+1+free+slot%0A++++++++++++++++let+_+=+vec.push_within_capacity(value);%0A++++++++++++%7D%0A++++++++%7D%0A++++++++Ok(vec)%0A++++%7D%0A++++assert_eq!(from_iter_fallible(0..100),+Ok(Vec::from_iter(0..100)));%0A%7D&version=nightly&edition=2021)\n\n##### [§](#time-complexity-2)Time complexity\n\nTakes _O_(1) time.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2078)\n\nRemoves the last element from a vector and returns it, or [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") if it is empty.\n\nIf you’d like to pop the first element, consider using [`VecDeque::pop_front`](about:blank/collections/struct.VecDeque.html#method.pop_front \"method std::collections::VecDeque::pop_front\") instead.\n\n##### [§](#examples-32)Examples\n\n```\nlet mut vec = vec![1, 2, 3];\nassert_eq!(vec.pop(), Some(3));\nassert_eq!(vec, [1, 2]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+vec+=+vec!%5B1,+2,+3%5D;%0A++++assert_eq!(vec.pop(),+Some(3));%0A++++assert_eq!(vec,+%5B1,+2%5D);%0A%7D&edition=2021)\n\n##### [§](#time-complexity-3)Time complexity\n\nTakes _O_(1) time.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2107-2109)\n\n🔬This is a nightly-only experimental API. (`vec_pop_if` [#122741](https://github.com/rust-lang/rust/issues/122741))\n\nRemoves and returns the last element in a vector if the predicate returns `true`, or [`None`](about:blank/option/enum.Option.html#variant.None \"variant std::option::Option::None\") if the predicate returns false or the vector is empty.\n\n##### [§](#examples-33)Examples\n\n```\n#![feature(vec_pop_if)]\n\nlet mut vec = vec![1, 2, 3, 4];\nlet pred = |x: &mut i32| *x % 2 == 0;\n\nassert_eq!(vec.pop_if(pred), Some(4));\nassert_eq!(vec, [1, 2, 3]);\nassert_eq!(vec.pop_if(pred), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(vec_pop_if)%5D%0A%0Afn+main()+%7B%0A++++let+mut+vec+=+vec!%5B1,+2,+3,+4%5D;%0A++++let+pred+=+%7Cx:+%26mut+i32%7C+*x+%25+2+==+0;%0A++++%0A++++assert_eq!(vec.pop_if(pred),+Some(4));%0A++++assert_eq!(vec,+%5B1,+2,+3%5D);%0A++++assert_eq!(vec.pop_if(pred),+None);%0A%7D&version=nightly&edition=2021)\n\n1.4.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2133)\n\nMoves all the elements of `other` into `self`, leaving `other` empty.\n\n##### [§](#panics-8)Panics\n\nPanics if the new capacity exceeds `isize::MAX` _bytes_.\n\n##### [§](#examples-34)Examples\n\n```\nlet mut vec = vec![1, 2, 3];\nlet mut vec2 = vec![4, 5, 6];\nvec.append(&mut vec2);\nassert_eq!(vec, [1, 2, 3, 4, 5, 6]);\nassert_eq!(vec2, []);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+vec+=+vec!%5B1,+2,+3%5D;%0A++++let+mut+vec2+=+vec!%5B4,+5,+6%5D;%0A++++vec.append(%26mut+vec2);%0A++++assert_eq!(vec,+%5B1,+2,+3,+4,+5,+6%5D);%0A++++assert_eq!(vec2,+%5B%5D);%0A%7D&edition=2021)\n\n1.6.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2182-2184)\n\nRemoves the specified range from the vector in bulk, returning all removed elements as an iterator. If the iterator is dropped before being fully consumed, it drops the remaining removed elements.\n\nThe returned iterator keeps a mutable borrow on the vector to optimize its implementation.\n\n##### [§](#panics-9)Panics\n\nPanics if the starting point is greater than the end point or if the end point is greater than the length of the vector.\n\n##### [§](#leaking)Leaking\n\nIf the returned iterator goes out of scope without being dropped (due to [`mem::forget`](../mem/fn.forget.html \"fn std::mem::forget\"), for example), the vector may have lost and leaked elements arbitrarily, including elements outside the range.\n\n##### [§](#examples-35)Examples\n\n```\nlet mut v = vec![1, 2, 3];\nlet u: Vec<_> = v.drain(1..).collect();\nassert_eq!(v, &[1]);\nassert_eq!(u, &[2, 3]);\n\n// A full range clears the vector, like `clear()` does\nv.drain(..);\nassert_eq!(v, &[]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+vec!%5B1,+2,+3%5D;%0A++++let+u:+Vec%3C_%3E+=+v.drain(1..).collect();%0A++++assert_eq!(v,+%26%5B1%5D);%0A++++assert_eq!(u,+%26%5B2,+3%5D);%0A++++%0A++++//+A+full+range+clears+the+vector,+like+%60clear()%60+does%0A++++v.drain(..);%0A++++assert_eq!(v,+%26%5B%5D);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2228)\n\nClears the vector, removing all values.\n\nNote that this method has no effect on the allocated capacity of the vector.\n\n##### [§](#examples-36)Examples\n\n```\nlet mut v = vec![1, 2, 3];\n\nv.clear();\n\nassert!(v.is_empty());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+vec!%5B1,+2,+3%5D;%0A++++%0A++++v.clear();%0A++++%0A++++assert!(v.is_empty());%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2255)\n\nReturns the number of elements in the vector, also referred to as its ‘length’.\n\n##### [§](#examples-37)Examples\n\n```\nlet a = vec![1, 2, 3];\nassert_eq!(a.len(), 3);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+a+=+vec!%5B1,+2,+3%5D;%0A++++assert_eq!(a.len(),+3);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2271)\n\nReturns `true` if the vector contains no elements.\n\n##### [§](#examples-38)Examples\n\n```\nlet mut v = Vec::new();\nassert!(v.is_empty());\n\nv.push(1);\nassert!(!v.is_empty());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+Vec::new();%0A++++assert!(v.is_empty());%0A++++%0A++++v.push(1);%0A++++assert!(!v.is_empty());%0A%7D&edition=2021)\n\n1.4.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2303-2305)\n\nSplits the collection into two at the given index.\n\nReturns a newly allocated vector containing the elements in the range `[at, len)`. After the call, the original vector will be left containing the elements `[0, at)` with its previous capacity unchanged.\n\n-   If you want to take ownership of the entire contents and capacity of the vector, see [`mem::take`](../mem/fn.take.html \"fn std::mem::take\") or [`mem::replace`](../mem/fn.replace.html \"fn std::mem::replace\").\n-   If you don’t need the returned vector at all, see [`Vec::truncate`](about:blank/struct.Vec.html#method.truncate \"method std::vec::Vec::truncate\").\n-   If you want to take ownership of an arbitrary subslice, or you don’t necessarily want to store the removed items in a vector, see [`Vec::drain`](about:blank/struct.Vec.html#method.drain \"method std::vec::Vec::drain\").\n\n##### [§](#panics-10)Panics\n\nPanics if `at > len`.\n\n##### [§](#examples-39)Examples\n\n```\nlet mut vec = vec![1, 2, 3];\nlet vec2 = vec.split_off(1);\nassert_eq!(vec, [1]);\nassert_eq!(vec2, [2, 3]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+vec+=+vec!%5B1,+2,+3%5D;%0A++++let+vec2+=+vec.split_off(1);%0A++++assert_eq!(vec,+%5B1%5D);%0A++++assert_eq!(vec2,+%5B2,+3%5D);%0A%7D&edition=2021)\n\n1.33.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2359-2361)\n\nResizes the `Vec` in-place so that `len` is equal to `new_len`.\n\nIf `new_len` is greater than `len`, the `Vec` is extended by the difference, with each additional slot filled with the result of calling the closure `f`. The return values from `f` will end up in the `Vec` in the order they have been generated.\n\nIf `new_len` is less than `len`, the `Vec` is simply truncated.\n\nThis method uses a closure to create new values on every push. If you’d rather [`Clone`](../clone/trait.Clone.html \"trait std::clone::Clone\") a given value, use [`Vec::resize`](about:blank/struct.Vec.html#method.resize \"method std::vec::Vec::resize\"). If you want to use the [`Default`](../default/trait.Default.html \"trait std::default::Default\") trait to generate values, you can pass [`Default::default`](about:blank/default/trait.Default.html#tymethod.default \"associated function std::default::Default::default\") as the second argument.\n\n##### [§](#examples-40)Examples\n\n```\nlet mut vec = vec![1, 2, 3];\nvec.resize_with(5, Default::default);\nassert_eq!(vec, [1, 2, 3, 0, 0]);\n\nlet mut vec = vec![];\nlet mut p = 1;\nvec.resize_with(4, || { p *= 2; p });\nassert_eq!(vec, [2, 4, 8, 16]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+vec+=+vec!%5B1,+2,+3%5D;%0A++++vec.resize_with(5,+Default::default);%0A++++assert_eq!(vec,+%5B1,+2,+3,+0,+0%5D);%0A++++%0A++++let+mut+vec+=+vec!%5B%5D;%0A++++let+mut+p+=+1;%0A++++vec.resize_with(4,+%7C%7C+%7B+p+*=+2;+p+%7D);%0A++++assert_eq!(vec,+%5B2,+4,+8,+16%5D);%0A%7D&edition=2021)\n\n1.47.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2396-2398)\n\nConsumes and leaks the `Vec`, returning a mutable reference to the contents, `&'a mut [T]`. Note that the type `T` must outlive the chosen lifetime `'a`. If the type has only static references, or none at all, then this may be chosen to be `'static`.\n\nAs of Rust 1.57, this method does not reallocate or shrink the `Vec`, so the leaked allocation may include unused capacity that is not part of the returned slice.\n\nThis function is mainly useful for data that lives for the remainder of the program’s life. Dropping the returned reference will cause a memory leak.\n\n##### [§](#examples-41)Examples\n\nSimple usage:\n\n```\nlet x = vec![1, 2, 3];\nlet static_ref: &'static mut [usize] = x.leak();\nstatic_ref[0] += 1;\nassert_eq!(static_ref, &[2, 2, 3]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+vec!%5B1,+2,+3%5D;%0A++++let+static_ref:+%26%27static+mut+%5Busize%5D+=+x.leak();%0A++++static_ref%5B0%5D+%2B=+1;%0A++++assert_eq!(static_ref,+%26%5B2,+2,+3%5D);%0A%7D&edition=2021)\n\n1.60.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2434)\n\nReturns the remaining spare capacity of the vector as a slice of `MaybeUninit<T>`.\n\nThe returned slice can be used to fill the vector with data (e.g. by reading from a file) before marking the data as initialized using the [`set_len`](about:blank/struct.Vec.html#method.set_len \"method std::vec::Vec::set_len\") method.\n\n##### [§](#examples-42)Examples\n\n```\n// Allocate vector big enough for 10 elements.\nlet mut v = Vec::with_capacity(10);\n\n// Fill in the first 3 elements.\nlet uninit = v.spare_capacity_mut();\nuninit[0].write(0);\nuninit[1].write(1);\nuninit[2].write(2);\n\n// Mark the first 3 elements of the vector as being initialized.\nunsafe {\n    v.set_len(3);\n}\n\nassert_eq!(&v, &[0, 1, 2]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+Allocate+vector+big+enough+for+10+elements.%0Afn+main()+%7B%0A++++let+mut+v+=+Vec::with_capacity(10);%0A++++%0A++++//+Fill+in+the+first+3+elements.%0A++++let+uninit+=+v.spare_capacity_mut();%0A++++uninit%5B0%5D.write(0);%0A++++uninit%5B1%5D.write(1);%0A++++uninit%5B2%5D.write(2);%0A++++%0A++++//+Mark+the+first+3+elements+of+the+vector+as+being+initialized.%0A++++unsafe+%7B%0A++++++++v.set_len(3);%0A++++%7D%0A++++%0A++++assert_eq!(%26v,+%26%5B0,+1,+2%5D);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2499)\n\n🔬This is a nightly-only experimental API. (`vec_split_at_spare` [#81944](https://github.com/rust-lang/rust/issues/81944))\n\nReturns vector content as a slice of `T`, along with the remaining spare capacity of the vector as a slice of `MaybeUninit<T>`.\n\nThe returned spare capacity slice can be used to fill the vector with data (e.g. by reading from a file) before marking the data as initialized using the [`set_len`](about:blank/struct.Vec.html#method.set_len \"method std::vec::Vec::set_len\") method.\n\nNote that this is a low-level API, which should be used with care for optimization purposes. If you need to append data to a `Vec` you can use [`push`](about:blank/struct.Vec.html#method.push \"method std::vec::Vec::push\"), [`extend`](about:blank/struct.Vec.html#method.extend \"method std::vec::Vec::extend\"), [`extend_from_slice`](about:blank/struct.Vec.html#method.extend_from_slice \"method std::vec::Vec::extend_from_slice\"), [`extend_from_within`](about:blank/struct.Vec.html#method.extend_from_within \"method std::vec::Vec::extend_from_within\"), [`insert`](about:blank/struct.Vec.html#method.insert \"method std::vec::Vec::insert\"), [`append`](about:blank/struct.Vec.html#method.append \"method std::vec::Vec::append\"), [`resize`](about:blank/struct.Vec.html#method.resize \"method std::vec::Vec::resize\") or [`resize_with`](about:blank/struct.Vec.html#method.resize_with \"method std::vec::Vec::resize_with\"), depending on your exact needs.\n\n##### [§](#examples-43)Examples\n\n```\n#![feature(vec_split_at_spare)]\n\nlet mut v = vec![1, 1, 2];\n\n// Reserve additional space big enough for 10 elements.\nv.reserve(10);\n\nlet (init, uninit) = v.split_at_spare_mut();\nlet sum = init.iter().copied().sum::<u32>();\n\n// Fill in the next 4 elements.\nuninit[0].write(sum);\nuninit[1].write(sum * 2);\nuninit[2].write(sum * 3);\nuninit[3].write(sum * 4);\n\n// Mark the 4 elements of the vector as being initialized.\nunsafe {\n    let len = v.len();\n    v.set_len(len + 4);\n}\n\nassert_eq!(&v, &[1, 1, 2, 4, 8, 12, 16]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(vec_split_at_spare)%5D%0A%0Afn+main()+%7B%0A++++let+mut+v+=+vec!%5B1,+1,+2%5D;%0A++++%0A++++//+Reserve+additional+space+big+enough+for+10+elements.%0A++++v.reserve(10);%0A++++%0A++++let+(init,+uninit)+=+v.split_at_spare_mut();%0A++++let+sum+=+init.iter().copied().sum::%3Cu32%3E();%0A++++%0A++++//+Fill+in+the+next+4+elements.%0A++++uninit%5B0%5D.write(sum);%0A++++uninit%5B1%5D.write(sum+*+2);%0A++++uninit%5B2%5D.write(sum+*+3);%0A++++uninit%5B3%5D.write(sum+*+4);%0A++++%0A++++//+Mark+the+4+elements+of+the+vector+as+being+initialized.%0A++++unsafe+%7B%0A++++++++let+len+=+v.len();%0A++++++++v.set_len(len+%2B+4);%0A++++%7D%0A++++%0A++++assert_eq!(%26v,+%26%5B1,+1,+2,+4,+8,+12,+16%5D);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2533)[§](#impl-Vec%3CT,+A%3E-1)\n\n1.5.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2559)\n\nResizes the `Vec` in-place so that `len` is equal to `new_len`.\n\nIf `new_len` is greater than `len`, the `Vec` is extended by the difference, with each additional slot filled with `value`. If `new_len` is less than `len`, the `Vec` is simply truncated.\n\nThis method requires `T` to implement [`Clone`](../clone/trait.Clone.html \"trait std::clone::Clone\"), in order to be able to clone the passed value. If you need more flexibility (or want to rely on [`Default`](../default/trait.Default.html \"trait std::default::Default\") instead of [`Clone`](../clone/trait.Clone.html \"trait std::clone::Clone\")), use [`Vec::resize_with`](about:blank/struct.Vec.html#method.resize_with \"method std::vec::Vec::resize_with\"). If you only need to resize to a smaller size, use [`Vec::truncate`](about:blank/struct.Vec.html#method.truncate \"method std::vec::Vec::truncate\").\n\n##### [§](#examples-44)Examples\n\n```\nlet mut vec = vec![\"hello\"];\nvec.resize(3, \"world\");\nassert_eq!(vec, [\"hello\", \"world\", \"world\"]);\n\nlet mut vec = vec![1, 2, 3, 4];\nvec.resize(2, 0);\nassert_eq!(vec, [1, 2]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+vec+=+vec!%5B%22hello%22%5D;%0A++++vec.resize(3,+%22world%22);%0A++++assert_eq!(vec,+%5B%22hello%22,+%22world%22,+%22world%22%5D);%0A++++%0A++++let+mut+vec+=+vec!%5B1,+2,+3,+4%5D;%0A++++vec.resize(2,+0);%0A++++assert_eq!(vec,+%5B1,+2%5D);%0A%7D&edition=2021)\n\n1.6.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2590)\n\nClones and appends all elements in a slice to the `Vec`.\n\nIterates over the slice `other`, clones each element, and then appends it to this `Vec`. The `other` slice is traversed in-order.\n\nNote that this function is same as [`extend`](about:blank/struct.Vec.html#method.extend \"method std::vec::Vec::extend\") except that it is specialized to work with slices instead. If and when Rust gets specialization this function will likely be deprecated (but still available).\n\n##### [§](#examples-45)Examples\n\n```\nlet mut vec = vec![1];\nvec.extend_from_slice(&[2, 3, 4]);\nassert_eq!(vec, [1, 2, 3, 4]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+vec+=+vec!%5B1%5D;%0A++++vec.extend_from_slice(%26%5B2,+3,+4%5D);%0A++++assert_eq!(vec,+%5B1,+2,+3,+4%5D);%0A%7D&edition=2021)\n\n1.53.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2617-2619)\n\nCopies elements from `src` range to the end of the vector.\n\n##### [§](#panics-11)Panics\n\nPanics if the starting point is greater than the end point or if the end point is greater than the length of the vector.\n\n##### [§](#examples-46)Examples\n\n```\nlet mut vec = vec![0, 1, 2, 3, 4];\n\nvec.extend_from_within(2..);\nassert_eq!(vec, [0, 1, 2, 3, 4, 2, 3, 4]);\n\nvec.extend_from_within(..2);\nassert_eq!(vec, [0, 1, 2, 3, 4, 2, 3, 4, 0, 1]);\n\nvec.extend_from_within(4..8);\nassert_eq!(vec, [0, 1, 2, 3, 4, 2, 3, 4, 0, 1, 4, 2, 3, 4]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+vec+=+vec!%5B0,+1,+2,+3,+4%5D;%0A++++%0A++++vec.extend_from_within(2..);%0A++++assert_eq!(vec,+%5B0,+1,+2,+3,+4,+2,+3,+4%5D);%0A++++%0A++++vec.extend_from_within(..2);%0A++++assert_eq!(vec,+%5B0,+1,+2,+3,+4,+2,+3,+4,+0,+1%5D);%0A++++%0A++++vec.extend_from_within(4..8);%0A++++assert_eq!(vec,+%5B0,+1,+2,+3,+4,+2,+3,+4,+0,+1,+4,+2,+3,+4%5D);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2632)[§](#impl-Vec%3C%5BT;+N%5D,+A%3E)\n\n1.80.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2653)\n\nTakes a `Vec<[T; N]>` and flattens it into a `Vec<T>`.\n\n##### [§](#panics-12)Panics\n\nPanics if the length of the resulting vector would overflow a `usize`.\n\nThis is only possible when flattening a vector of arrays of zero-sized types, and thus tends to be irrelevant in practice. If `size_of::<T>() > 0`, this will never panic.\n\n##### [§](#examples-47)Examples\n\n```\nlet mut vec = vec![[1, 2, 3], [4, 5, 6], [7, 8, 9]];\nassert_eq!(vec.pop(), Some([7, 8, 9]));\n\nlet mut flattened = vec.into_flattened();\nassert_eq!(flattened.pop(), Some(6));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+vec+=+vec!%5B%5B1,+2,+3%5D,+%5B4,+5,+6%5D,+%5B7,+8,+9%5D%5D;%0A++++assert_eq!(vec.pop(),+Some(%5B7,+8,+9%5D));%0A++++%0A++++let+mut+flattened+=+vec.into_flattened();%0A++++assert_eq!(flattened.pop(),+Some(6));%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2707)[§](#impl-Vec%3CT,+A%3E-2)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2724)\n\nRemoves consecutive repeated elements in the vector according to the [`PartialEq`](../cmp/trait.PartialEq.html \"trait std::cmp::PartialEq\") trait implementation.\n\nIf the vector is sorted, this removes all duplicates.\n\n##### [§](#examples-48)Examples\n\n```\nlet mut vec = vec![1, 2, 2, 3, 2];\n\nvec.dedup();\n\nassert_eq!(vec, [1, 2, 3, 2]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+vec+=+vec!%5B1,+2,+2,+3,+2%5D;%0A++++%0A++++vec.dedup();%0A++++%0A++++assert_eq!(vec,+%5B1,+2,+3,+2%5D);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3052)[§](#impl-Vec%3CT,+A%3E-3)\n\n1.21.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3150-3153)\n\nCreates a splicing iterator that replaces the specified range in the vector with the given `replace_with` iterator and yields the removed items. `replace_with` does not need to be the same length as `range`.\n\n`range` is removed even if the iterator is not consumed until the end.\n\nIt is unspecified how many elements are removed from the vector if the `Splice` value is leaked.\n\nThe input iterator `replace_with` is only consumed when the `Splice` value is dropped.\n\nThis is optimal if:\n\n-   The tail (elements in the vector after `range`) is empty,\n-   or `replace_with` yields fewer or equal elements than `range`’s length\n-   or the lower bound of its `size_hint()` is exact.\n\nOtherwise, a temporary vector is allocated and the tail is moved twice.\n\n##### [§](#panics-13)Panics\n\nPanics if the starting point is greater than the end point or if the end point is greater than the length of the vector.\n\n##### [§](#examples-49)Examples\n\n```\nlet mut v = vec![1, 2, 3, 4];\nlet new = [7, 8, 9];\nlet u: Vec<_> = v.splice(1..3, new).collect();\nassert_eq!(v, &[1, 7, 8, 9, 4]);\nassert_eq!(u, &[2, 3]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+vec!%5B1,+2,+3,+4%5D;%0A++++let+new+=+%5B7,+8,+9%5D;%0A++++let+u:+Vec%3C_%3E+=+v.splice(1..3,+new).collect();%0A++++assert_eq!(v,+%26%5B1,+7,+8,+9,+4%5D);%0A++++assert_eq!(u,+%26%5B2,+3%5D);%0A%7D&edition=2021)\n\n🔬This is a nightly-only experimental API. (`extract_if` [#43244](https://github.com/rust-lang/rust/issues/43244))\n\nCreates an iterator which uses a closure to determine if an element should be removed.\n\nIf the closure returns true, then the element is removed and yielded. If the closure returns false, the element will remain in the vector and will not be yielded by the iterator.\n\nIf the returned `ExtractIf` is not exhausted, e.g. because it is dropped without iterating or the iteration short-circuits, then the remaining elements will be retained. Use [`retain`](about:blank/struct.Vec.html#method.retain \"method std::vec::Vec::retain\") with a negated predicate if you do not need the returned iterator.\n\nUsing this method is equivalent to the following code:\n\n```\nlet mut i = 0;\nwhile i < vec.len() {\n    if some_predicate(&mut vec[i]) {\n        let val = vec.remove(i);\n        // your code here\n    } else {\n        i += 1;\n    }\n}\n\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+some_predicate+=+%7Cx:+%26mut+i32%7C+%7B+*x+==+2+%7C%7C+*x+==+3+%7C%7C+*x+==+6+%7D;%0A++++let+mut+vec+=+vec!%5B1,+2,+3,+4,+5,+6%5D;%0A++++let+mut+i+=+0;%0A++++while+i+%3C+vec.len()+%7B%0A++++++++if+some_predicate(%26mut+vec%5Bi%5D)+%7B%0A++++++++++++let+val+=+vec.remove(i);%0A++++++++++++//+your+code+here%0A++++++++%7D+else+%7B%0A++++++++++++i+%2B=+1;%0A++++++++%7D%0A++++%7D%0A++++%0A++++assert_eq!(vec,+vec!%5B1,+4,+5%5D);%0A%7D&edition=2021)\n\nBut `extract_if` is easier to use. `extract_if` is also more efficient, because it can backshift the elements of the array in bulk.\n\nNote that `extract_if` also lets you mutate every element in the filter closure, regardless of whether you choose to keep or remove it.\n\n##### [§](#examples-50)Examples\n\nSplitting an array into evens and odds, reusing the original allocation:\n\n```\n#![feature(extract_if)]\nlet mut numbers = vec![1, 2, 3, 4, 5, 6, 8, 9, 11, 13, 14, 15];\n\nlet evens = numbers.extract_if(|x| *x % 2 == 0).collect::<Vec<_>>();\nlet odds = numbers;\n\nassert_eq!(evens, vec![2, 4, 6, 8, 14]);\nassert_eq!(odds, vec![1, 3, 5, 9, 11, 13, 15]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(extract_if)%5D%0Afn+main()+%7B%0A++++let+mut+numbers+=+vec!%5B1,+2,+3,+4,+5,+6,+8,+9,+11,+13,+14,+15%5D;%0A++++%0A++++let+evens+=+numbers.extract_if(%7Cx%7C+*x+%25+2+==+0).collect::%3CVec%3C_%3E%3E();%0A++++let+odds+=+numbers;%0A++++%0A++++assert_eq!(evens,+vec!%5B2,+4,+6,+8,+14%5D);%0A++++assert_eq!(odds,+vec!%5B1,+3,+5,+9,+11,+13,+15%5D);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#4651)\n\n🔬This is a nightly-only experimental API. (`sort_floats` [#93396](https://github.com/rust-lang/rust/issues/93396))\n\nSorts the slice of floats.\n\nThis sort is in-place (i.e. does not allocate), _O_(_n_ \\* log(_n_)) worst-case, and uses the ordering defined by [`f64::total_cmp`](about:blank/primitive.f64.html#method.total_cmp \"method f64::total_cmp\").\n\n##### [§](#current-implementation)Current implementation\n\nThis uses the same sorting algorithm as [`sort_unstable_by`](about:blank/primitive.slice.html#method.sort_unstable_by \"method slice::sort_unstable_by\").\n\n##### [§](#examples-51)Examples\n\n```\n#![feature(sort_floats)]\nlet mut v = [2.6, -5e-8, f64::NAN, 8.29, f64::INFINITY, -1.0, 0.0, -f64::INFINITY, -0.0];\n\nv.sort_floats();\nlet sorted = [-f64::INFINITY, -1.0, -5e-8, -0.0, 0.0, 2.6, 8.29, f64::INFINITY, f64::NAN];\nassert_eq!(&v[..8], &sorted[..8]);\nassert!(v[8].is_nan());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(sort_floats)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+%5B2.6,+-5e-8,+f64::NAN,+8.29,+f64::INFINITY,+-1.0,+0.0,+-f64::INFINITY,+-0.0%5D;%0A++++%0A++++v.sort_floats();%0A++++let+sorted+=+%5B-f64::INFINITY,+-1.0,+-5e-8,+-0.0,+0.0,+2.6,+8.29,+f64::INFINITY,+f64::NAN%5D;%0A++++assert_eq!(%26v%5B..8%5D,+%26sorted%5B..8%5D);%0A++++assert!(v%5B8%5D.is_nan());%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#4622)\n\n🔬This is a nightly-only experimental API. (`sort_floats` [#93396](https://github.com/rust-lang/rust/issues/93396))\n\nSorts the slice of floats.\n\nThis sort is in-place (i.e. does not allocate), _O_(_n_ \\* log(_n_)) worst-case, and uses the ordering defined by [`f32::total_cmp`](about:blank/primitive.f32.html#method.total_cmp \"method f32::total_cmp\").\n\n##### [§](#current-implementation-1)Current implementation\n\nThis uses the same sorting algorithm as [`sort_unstable_by`](about:blank/primitive.slice.html#method.sort_unstable_by \"method slice::sort_unstable_by\").\n\n##### [§](#examples-52)Examples\n\n```\n#![feature(sort_floats)]\nlet mut v = [2.6, -5e-8, f32::NAN, 8.29, f32::INFINITY, -1.0, 0.0, -f32::INFINITY, -0.0];\n\nv.sort_floats();\nlet sorted = [-f32::INFINITY, -1.0, -5e-8, -0.0, 0.0, 2.6, 8.29, f32::INFINITY, f32::NAN];\nassert_eq!(&v[..8], &sorted[..8]);\nassert!(v[8].is_nan());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(sort_floats)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+%5B2.6,+-5e-8,+f32::NAN,+8.29,+f32::INFINITY,+-1.0,+0.0,+-f32::INFINITY,+-0.0%5D;%0A++++%0A++++v.sort_floats();%0A++++let+sorted+=+%5B-f32::INFINITY,+-1.0,+-5e-8,+-0.0,+0.0,+2.6,+8.29,+f32::INFINITY,+f32::NAN%5D;%0A++++assert_eq!(%26v%5B..8%5D,+%26sorted%5B..8%5D);%0A++++assert!(v%5B8%5D.is_nan());%0A%7D&version=nightly&edition=2021)\n\n1.80.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#4549)\n\nTakes a `&[[T; N]]`, and flattens it to a `&[T]`.\n\n##### [§](#panics-14)Panics\n\nThis panics if the length of the resulting slice would overflow a `usize`.\n\nThis is only possible when flattening a slice of arrays of zero-sized types, and thus tends to be irrelevant in practice. If `size_of::<T>() > 0`, this will never panic.\n\n##### [§](#examples-53)Examples\n\n```\nassert_eq!([[1, 2, 3], [4, 5, 6]].as_flattened(), &[1, 2, 3, 4, 5, 6]);\n\nassert_eq!(\n    [[1, 2, 3], [4, 5, 6]].as_flattened(),\n    [[1, 2], [3, 4], [5, 6]].as_flattened(),\n);\n\nlet slice_of_empty_arrays: &[[i32; 0]] = &[[], [], [], [], []];\nassert!(slice_of_empty_arrays.as_flattened().is_empty());\n\nlet empty_slice_of_arrays: &[[u32; 10]] = &[];\nassert!(empty_slice_of_arrays.as_flattened().is_empty());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%5B%5B1,+2,+3%5D,+%5B4,+5,+6%5D%5D.as_flattened(),+%26%5B1,+2,+3,+4,+5,+6%5D);%0A++++%0A++++assert_eq!(%0A++++++++%5B%5B1,+2,+3%5D,+%5B4,+5,+6%5D%5D.as_flattened(),%0A++++++++%5B%5B1,+2%5D,+%5B3,+4%5D,+%5B5,+6%5D%5D.as_flattened(),%0A++++);%0A++++%0A++++let+slice_of_empty_arrays:+%26%5B%5Bi32;+0%5D%5D+=+%26%5B%5B%5D,+%5B%5D,+%5B%5D,+%5B%5D,+%5B%5D%5D;%0A++++assert!(slice_of_empty_arrays.as_flattened().is_empty());%0A++++%0A++++let+empty_slice_of_arrays:+%26%5B%5Bu32;+10%5D%5D+=+%26%5B%5D;%0A++++assert!(empty_slice_of_arrays.as_flattened().is_empty());%0A%7D&edition=2021)\n\n1.80.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#4585)\n\nTakes a `&mut [[T; N]]`, and flattens it to a `&mut [T]`.\n\n##### [§](#panics-15)Panics\n\nThis panics if the length of the resulting slice would overflow a `usize`.\n\nThis is only possible when flattening a slice of arrays of zero-sized types, and thus tends to be irrelevant in practice. If `size_of::<T>() > 0`, this will never panic.\n\n##### [§](#examples-54)Examples\n\n```\nfn add_5_to_all(slice: &mut [i32]) {\n    for i in slice {\n        *i += 5;\n    }\n}\n\nlet mut array = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\nadd_5_to_all(array.as_flattened_mut());\nassert_eq!(array, [[6, 7, 8], [9, 10, 11], [12, 13, 14]]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++fn+add_5_to_all(slice:+%26mut+%5Bi32%5D)+%7B%0A++++++++for+i+in+slice+%7B%0A++++++++++++*i+%2B=+5;%0A++++++++%7D%0A++++%7D%0A++++%0A++++let+mut+array+=+%5B%5B1,+2,+3%5D,+%5B4,+5,+6%5D,+%5B7,+8,+9%5D%5D;%0A++++add_5_to_all(array.as_flattened_mut());%0A++++assert_eq!(array,+%5B%5B6,+7,+8%5D,+%5B9,+10,+11%5D,+%5B12,+13,+14%5D%5D);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#138)\n\nReturns the number of elements in the slice.\n\n##### [§](#examples-55)Examples\n\n```\nlet a = [1, 2, 3];\nassert_eq!(a.len(), 3);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+a+=+%5B1,+2,+3%5D;%0A++++assert_eq!(a.len(),+3);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#157)\n\nReturns `true` if the slice has a length of 0.\n\n##### [§](#examples-56)Examples\n\n```\nlet a = [1, 2, 3];\nassert!(!a.is_empty());\n\nlet b: &[i32] = &[];\nassert!(b.is_empty());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+a+=+%5B1,+2,+3%5D;%0A++++assert!(!a.is_empty());%0A++++%0A++++let+b:+%26%5Bi32%5D+=+%26%5B%5D;%0A++++assert!(b.is_empty());%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#176)\n\nReturns the first element of the slice, or `None` if it is empty.\n\n##### [§](#examples-57)Examples\n\n```\nlet v = [10, 40, 30];\nassert_eq!(Some(&10), v.first());\n\nlet w: &[i32] = &[];\nassert_eq!(None, w.first());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v+=+%5B10,+40,+30%5D;%0A++++assert_eq!(Some(%2610),+v.first());%0A++++%0A++++let+w:+%26%5Bi32%5D+=+%26%5B%5D;%0A++++assert_eq!(None,+w.first());%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#199)\n\nReturns a mutable pointer to the first element of the slice, or `None` if it is empty.\n\n##### [§](#examples-58)Examples\n\n```\nlet x = &mut [0, 1, 2];\n\nif let Some(first) = x.first_mut() {\n    *first = 5;\n}\nassert_eq!(x, &[5, 1, 2]);\n\nlet y: &mut [i32] = &mut [];\nassert_eq!(None, y.first_mut());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+%26mut+%5B0,+1,+2%5D;%0A++++%0A++++if+let+Some(first)+=+x.first_mut()+%7B%0A++++++++*first+=+5;%0A++++%7D%0A++++assert_eq!(x,+%26%5B5,+1,+2%5D);%0A++++%0A++++let+y:+%26mut+%5Bi32%5D+=+%26mut+%5B%5D;%0A++++assert_eq!(None,+y.first_mut());%0A%7D&edition=2021)\n\n1.5.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#219)\n\nReturns the first and all the rest of the elements of the slice, or `None` if it is empty.\n\n##### [§](#examples-59)Examples\n\n```\nlet x = &[0, 1, 2];\n\nif let Some((first, elements)) = x.split_first() {\n    assert_eq!(first, &0);\n    assert_eq!(elements, &[1, 2]);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+%26%5B0,+1,+2%5D;%0A++++%0A++++if+let+Some((first,+elements))+=+x.split_first()+%7B%0A++++++++assert_eq!(first,+%260);%0A++++++++assert_eq!(elements,+%26%5B1,+2%5D);%0A++++%7D%0A%7D&edition=2021)\n\n1.5.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#241)\n\nReturns the first and all the rest of the elements of the slice, or `None` if it is empty.\n\n##### [§](#examples-60)Examples\n\n```\nlet x = &mut [0, 1, 2];\n\nif let Some((first, elements)) = x.split_first_mut() {\n    *first = 3;\n    elements[0] = 4;\n    elements[1] = 5;\n}\nassert_eq!(x, &[3, 4, 5]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+%26mut+%5B0,+1,+2%5D;%0A++++%0A++++if+let+Some((first,+elements))+=+x.split_first_mut()+%7B%0A++++++++*first+=+3;%0A++++++++elements%5B0%5D+=+4;%0A++++++++elements%5B1%5D+=+5;%0A++++%7D%0A++++assert_eq!(x,+%26%5B3,+4,+5%5D);%0A%7D&edition=2021)\n\n1.5.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#261)\n\nReturns the last and all the rest of the elements of the slice, or `None` if it is empty.\n\n##### [§](#examples-61)Examples\n\n```\nlet x = &[0, 1, 2];\n\nif let Some((last, elements)) = x.split_last() {\n    assert_eq!(last, &2);\n    assert_eq!(elements, &[0, 1]);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+%26%5B0,+1,+2%5D;%0A++++%0A++++if+let+Some((last,+elements))+=+x.split_last()+%7B%0A++++++++assert_eq!(last,+%262);%0A++++++++assert_eq!(elements,+%26%5B0,+1%5D);%0A++++%7D%0A%7D&edition=2021)\n\n1.5.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#283)\n\nReturns the last and all the rest of the elements of the slice, or `None` if it is empty.\n\n##### [§](#examples-62)Examples\n\n```\nlet x = &mut [0, 1, 2];\n\nif let Some((last, elements)) = x.split_last_mut() {\n    *last = 3;\n    elements[0] = 4;\n    elements[1] = 5;\n}\nassert_eq!(x, &[4, 5, 3]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+%26mut+%5B0,+1,+2%5D;%0A++++%0A++++if+let+Some((last,+elements))+=+x.split_last_mut()+%7B%0A++++++++*last+=+3;%0A++++++++elements%5B0%5D+=+4;%0A++++++++elements%5B1%5D+=+5;%0A++++%7D%0A++++assert_eq!(x,+%26%5B4,+5,+3%5D);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#302)\n\nReturns the last element of the slice, or `None` if it is empty.\n\n##### [§](#examples-63)Examples\n\n```\nlet v = [10, 40, 30];\nassert_eq!(Some(&30), v.last());\n\nlet w: &[i32] = &[];\nassert_eq!(None, w.last());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v+=+%5B10,+40,+30%5D;%0A++++assert_eq!(Some(%2630),+v.last());%0A++++%0A++++let+w:+%26%5Bi32%5D+=+%26%5B%5D;%0A++++assert_eq!(None,+w.last());%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#325)\n\nReturns a mutable reference to the last item in the slice, or `None` if it is empty.\n\n##### [§](#examples-64)Examples\n\n```\nlet x = &mut [0, 1, 2];\n\nif let Some(last) = x.last_mut() {\n    *last = 10;\n}\nassert_eq!(x, &[0, 1, 10]);\n\nlet y: &mut [i32] = &mut [];\nassert_eq!(None, y.last_mut());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+%26mut+%5B0,+1,+2%5D;%0A++++%0A++++if+let+Some(last)+=+x.last_mut()+%7B%0A++++++++*last+=+10;%0A++++%7D%0A++++assert_eq!(x,+%26%5B0,+1,+10%5D);%0A++++%0A++++let+y:+%26mut+%5Bi32%5D+=+%26mut+%5B%5D;%0A++++assert_eq!(None,+y.last_mut());%0A%7D&edition=2021)\n\n1.77.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#348)\n\nReturn an array reference to the first `N` items in the slice.\n\nIf the slice is not at least `N` in length, this will return `None`.\n\n##### [§](#examples-65)Examples\n\n```\nlet u = [10, 40, 30];\nassert_eq!(Some(&[10, 40]), u.first_chunk::<2>());\n\nlet v: &[i32] = &[10];\nassert_eq!(None, v.first_chunk::<2>());\n\nlet w: &[i32] = &[];\nassert_eq!(Some(&[]), w.first_chunk::<0>());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+u+=+%5B10,+40,+30%5D;%0A++++assert_eq!(Some(%26%5B10,+40%5D),+u.first_chunk::%3C2%3E());%0A++++%0A++++let+v:+%26%5Bi32%5D+=+%26%5B10%5D;%0A++++assert_eq!(None,+v.first_chunk::%3C2%3E());%0A++++%0A++++let+w:+%26%5Bi32%5D+=+%26%5B%5D;%0A++++assert_eq!(Some(%26%5B%5D),+w.first_chunk::%3C0%3E());%0A%7D&edition=2021)\n\n1.77.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#378)\n\nReturn a mutable array reference to the first `N` items in the slice.\n\nIf the slice is not at least `N` in length, this will return `None`.\n\n##### [§](#examples-66)Examples\n\n```\nlet x = &mut [0, 1, 2];\n\nif let Some(first) = x.first_chunk_mut::<2>() {\n    first[0] = 5;\n    first[1] = 4;\n}\nassert_eq!(x, &[5, 4, 2]);\n\nassert_eq!(None, x.first_chunk_mut::<4>());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+%26mut+%5B0,+1,+2%5D;%0A++++%0A++++if+let+Some(first)+=+x.first_chunk_mut::%3C2%3E()+%7B%0A++++++++first%5B0%5D+=+5;%0A++++++++first%5B1%5D+=+4;%0A++++%7D%0A++++assert_eq!(x,+%26%5B5,+4,+2%5D);%0A++++%0A++++assert_eq!(None,+x.first_chunk_mut::%3C4%3E());%0A%7D&edition=2021)\n\n1.77.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#408)\n\nReturn an array reference to the first `N` items in the slice and the remaining slice.\n\nIf the slice is not at least `N` in length, this will return `None`.\n\n##### [§](#examples-67)Examples\n\n```\nlet x = &[0, 1, 2];\n\nif let Some((first, elements)) = x.split_first_chunk::<2>() {\n    assert_eq!(first, &[0, 1]);\n    assert_eq!(elements, &[2]);\n}\n\nassert_eq!(None, x.split_first_chunk::<4>());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+%26%5B0,+1,+2%5D;%0A++++%0A++++if+let+Some((first,+elements))+=+x.split_first_chunk::%3C2%3E()+%7B%0A++++++++assert_eq!(first,+%26%5B0,+1%5D);%0A++++++++assert_eq!(elements,+%26%5B2%5D);%0A++++%7D%0A++++%0A++++assert_eq!(None,+x.split_first_chunk::%3C4%3E());%0A%7D&edition=2021)\n\n1.77.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#443-445)\n\nReturn a mutable array reference to the first `N` items in the slice and the remaining slice.\n\nIf the slice is not at least `N` in length, this will return `None`.\n\n##### [§](#examples-68)Examples\n\n```\nlet x = &mut [0, 1, 2];\n\nif let Some((first, elements)) = x.split_first_chunk_mut::<2>() {\n    first[0] = 3;\n    first[1] = 4;\n    elements[0] = 5;\n}\nassert_eq!(x, &[3, 4, 5]);\n\nassert_eq!(None, x.split_first_chunk_mut::<4>());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+%26mut+%5B0,+1,+2%5D;%0A++++%0A++++if+let+Some((first,+elements))+=+x.split_first_chunk_mut::%3C2%3E()+%7B%0A++++++++first%5B0%5D+=+3;%0A++++++++first%5B1%5D+=+4;%0A++++++++elements%5B0%5D+=+5;%0A++++%7D%0A++++assert_eq!(x,+%26%5B3,+4,+5%5D);%0A++++%0A++++assert_eq!(None,+x.split_first_chunk_mut::%3C4%3E());%0A%7D&edition=2021)\n\n1.77.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#478)\n\nReturn an array reference to the last `N` items in the slice and the remaining slice.\n\nIf the slice is not at least `N` in length, this will return `None`.\n\n##### [§](#examples-69)Examples\n\n```\nlet x = &[0, 1, 2];\n\nif let Some((elements, last)) = x.split_last_chunk::<2>() {\n    assert_eq!(elements, &[0]);\n    assert_eq!(last, &[1, 2]);\n}\n\nassert_eq!(None, x.split_last_chunk::<4>());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+%26%5B0,+1,+2%5D;%0A++++%0A++++if+let+Some((elements,+last))+=+x.split_last_chunk::%3C2%3E()+%7B%0A++++++++assert_eq!(elements,+%26%5B0%5D);%0A++++++++assert_eq!(last,+%26%5B1,+2%5D);%0A++++%7D%0A++++%0A++++assert_eq!(None,+x.split_last_chunk::%3C4%3E());%0A%7D&edition=2021)\n\n1.77.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#513-515)\n\nReturn a mutable array reference to the last `N` items in the slice and the remaining slice.\n\nIf the slice is not at least `N` in length, this will return `None`.\n\n##### [§](#examples-70)Examples\n\n```\nlet x = &mut [0, 1, 2];\n\nif let Some((elements, last)) = x.split_last_chunk_mut::<2>() {\n    last[0] = 3;\n    last[1] = 4;\n    elements[0] = 5;\n}\nassert_eq!(x, &[5, 3, 4]);\n\nassert_eq!(None, x.split_last_chunk_mut::<4>());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+%26mut+%5B0,+1,+2%5D;%0A++++%0A++++if+let+Some((elements,+last))+=+x.split_last_chunk_mut::%3C2%3E()+%7B%0A++++++++last%5B0%5D+=+3;%0A++++++++last%5B1%5D+=+4;%0A++++++++elements%5B0%5D+=+5;%0A++++%7D%0A++++assert_eq!(x,+%26%5B5,+3,+4%5D);%0A++++%0A++++assert_eq!(None,+x.split_last_chunk_mut::%3C4%3E());%0A%7D&edition=2021)\n\n1.77.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#548)\n\nReturn an array reference to the last `N` items in the slice.\n\nIf the slice is not at least `N` in length, this will return `None`.\n\n##### [§](#examples-71)Examples\n\n```\nlet u = [10, 40, 30];\nassert_eq!(Some(&[40, 30]), u.last_chunk::<2>());\n\nlet v: &[i32] = &[10];\nassert_eq!(None, v.last_chunk::<2>());\n\nlet w: &[i32] = &[];\nassert_eq!(Some(&[]), w.last_chunk::<0>());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+u+=+%5B10,+40,+30%5D;%0A++++assert_eq!(Some(%26%5B40,+30%5D),+u.last_chunk::%3C2%3E());%0A++++%0A++++let+v:+%26%5Bi32%5D+=+%26%5B10%5D;%0A++++assert_eq!(None,+v.last_chunk::%3C2%3E());%0A++++%0A++++let+w:+%26%5Bi32%5D+=+%26%5B%5D;%0A++++assert_eq!(Some(%26%5B%5D),+w.last_chunk::%3C0%3E());%0A%7D&edition=2021)\n\n1.77.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#582)\n\nReturn a mutable array reference to the last `N` items in the slice.\n\nIf the slice is not at least `N` in length, this will return `None`.\n\n##### [§](#examples-72)Examples\n\n```\nlet x = &mut [0, 1, 2];\n\nif let Some(last) = x.last_chunk_mut::<2>() {\n    last[0] = 10;\n    last[1] = 20;\n}\nassert_eq!(x, &[0, 10, 20]);\n\nassert_eq!(None, x.last_chunk_mut::<4>());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+%26mut+%5B0,+1,+2%5D;%0A++++%0A++++if+let+Some(last)+=+x.last_chunk_mut::%3C2%3E()+%7B%0A++++++++last%5B0%5D+=+10;%0A++++++++last%5B1%5D+=+20;%0A++++%7D%0A++++assert_eq!(x,+%26%5B0,+10,+20%5D);%0A++++%0A++++assert_eq!(None,+x.last_chunk_mut::%3C4%3E());%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#617-619)\n\nReturns a reference to an element or subslice depending on the type of index.\n\n-   If given a position, returns a reference to the element at that position or `None` if out of bounds.\n-   If given a range, returns the subslice corresponding to that range, or `None` if out of bounds.\n\n##### [§](#examples-73)Examples\n\n```\nlet v = [10, 40, 30];\nassert_eq!(Some(&40), v.get(1));\nassert_eq!(Some(&[10, 40][..]), v.get(0..2));\nassert_eq!(None, v.get(3));\nassert_eq!(None, v.get(0..4));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v+=+%5B10,+40,+30%5D;%0A++++assert_eq!(Some(%2640),+v.get(1));%0A++++assert_eq!(Some(%26%5B10,+40%5D%5B..%5D),+v.get(0..2));%0A++++assert_eq!(None,+v.get(3));%0A++++assert_eq!(None,+v.get(0..4));%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#642-644)\n\nReturns a mutable reference to an element or subslice depending on the type of index (see [`get`](about:blank/primitive.slice.html#method.get \"method slice::get\")) or `None` if the index is out of bounds.\n\n##### [§](#examples-74)Examples\n\n```\nlet x = &mut [0, 1, 2];\n\nif let Some(elem) = x.get_mut(1) {\n    *elem = 42;\n}\nassert_eq!(x, &[0, 42, 2]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+%26mut+%5B0,+1,+2%5D;%0A++++%0A++++if+let+Some(elem)+=+x.get_mut(1)+%7B%0A++++++++*elem+=+42;%0A++++%7D%0A++++assert_eq!(x,+%26%5B0,+42,+2%5D);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#679-681)\n\nReturns a reference to an element or subslice, without doing bounds checking.\n\nFor a safe alternative see [`get`](about:blank/primitive.slice.html#method.get \"method slice::get\").\n\n##### [§](#safety-3)Safety\n\nCalling this method with an out-of-bounds index is _[undefined behavior](https://doc.rust-lang.org/reference/behavior-considered-undefined.html)_ even if the resulting reference is not used.\n\nYou can think of this like `.get(index).unwrap_unchecked()`. It’s UB to call `.get_unchecked(len)`, even if you immediately convert to a pointer. And it’s UB to call `.get_unchecked(..len + 1)`, `.get_unchecked(..=len)`, or similar.\n\n##### [§](#examples-75)Examples\n\n```\nlet x = &[1, 2, 4];\n\nunsafe {\n    assert_eq!(x.get_unchecked(1), &2);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+%26%5B1,+2,+4%5D;%0A++++%0A++++unsafe+%7B%0A++++++++assert_eq!(x.get_unchecked(1),+%262);%0A++++%7D%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#721-723)\n\nReturns a mutable reference to an element or subslice, without doing bounds checking.\n\nFor a safe alternative see [`get_mut`](about:blank/primitive.slice.html#method.get_mut \"method slice::get_mut\").\n\n##### [§](#safety-4)Safety\n\nCalling this method with an out-of-bounds index is _[undefined behavior](https://doc.rust-lang.org/reference/behavior-considered-undefined.html)_ even if the resulting reference is not used.\n\nYou can think of this like `.get_mut(index).unwrap_unchecked()`. It’s UB to call `.get_unchecked_mut(len)`, even if you immediately convert to a pointer. And it’s UB to call `.get_unchecked_mut(..len + 1)`, `.get_unchecked_mut(..=len)`, or similar.\n\n##### [§](#examples-76)Examples\n\n```\nlet x = &mut [1, 2, 4];\n\nunsafe {\n    let elem = x.get_unchecked_mut(1);\n    *elem = 13;\n}\nassert_eq!(x, &[1, 13, 4]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+%26mut+%5B1,+2,+4%5D;%0A++++%0A++++unsafe+%7B%0A++++++++let+elem+=+x.get_unchecked_mut(1);%0A++++++++*elem+=+13;%0A++++%7D%0A++++assert_eq!(x,+%26%5B1,+13,+4%5D);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#762)\n\nReturns a raw pointer to the slice’s buffer.\n\nThe caller must ensure that the slice outlives the pointer this function returns, or else it will end up pointing to garbage.\n\nThe caller must also ensure that the memory the pointer (non-transitively) points to is never written to (except inside an `UnsafeCell`) using this pointer or any pointer derived from it. If you need to mutate the contents of the slice, use [`as_mut_ptr`](about:blank/primitive.slice.html#method.as_mut_ptr \"method slice::as_mut_ptr\").\n\nModifying the container referenced by this slice may cause its buffer to be reallocated, which would also make any pointers to it invalid.\n\n##### [§](#examples-77)Examples\n\n```\nlet x = &[1, 2, 4];\nlet x_ptr = x.as_ptr();\n\nunsafe {\n    for i in 0..x.len() {\n        assert_eq!(x.get_unchecked(i), &*x_ptr.add(i));\n    }\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+%26%5B1,+2,+4%5D;%0A++++let+x_ptr+=+x.as_ptr();%0A++++%0A++++unsafe+%7B%0A++++++++for+i+in+0..x.len()+%7B%0A++++++++++++assert_eq!(x.get_unchecked(i),+%26*x_ptr.add(i));%0A++++++++%7D%0A++++%7D%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#793)\n\nReturns an unsafe mutable pointer to the slice’s buffer.\n\nThe caller must ensure that the slice outlives the pointer this function returns, or else it will end up pointing to garbage.\n\nModifying the container referenced by this slice may cause its buffer to be reallocated, which would also make any pointers to it invalid.\n\n##### [§](#examples-78)Examples\n\n```\nlet x = &mut [1, 2, 4];\nlet x_ptr = x.as_mut_ptr();\n\nunsafe {\n    for i in 0..x.len() {\n        *x_ptr.add(i) += 2;\n    }\n}\nassert_eq!(x, &[3, 4, 6]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+%26mut+%5B1,+2,+4%5D;%0A++++let+x_ptr+=+x.as_mut_ptr();%0A++++%0A++++unsafe+%7B%0A++++++++for+i+in+0..x.len()+%7B%0A++++++++++++*x_ptr.add(i)+%2B=+2;%0A++++++++%7D%0A++++%7D%0A++++assert_eq!(x,+%26%5B3,+4,+6%5D);%0A%7D&edition=2021)\n\n1.48.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#829)\n\nReturns the two raw pointers spanning the slice.\n\nThe returned range is half-open, which means that the end pointer points _one past_ the last element of the slice. This way, an empty slice is represented by two equal pointers, and the difference between the two pointers represents the size of the slice.\n\nSee [`as_ptr`](about:blank/primitive.slice.html#method.as_ptr \"method slice::as_ptr\") for warnings on using these pointers. The end pointer requires extra caution, as it does not point to a valid element in the slice.\n\nThis function is useful for interacting with foreign interfaces which use two pointers to refer to a range of elements in memory, as is common in C++.\n\nIt can also be useful to check if a pointer to an element refers to an element of this slice:\n\n```\nlet a = [1, 2, 3];\nlet x = &a[1] as *const _;\nlet y = &5 as *const _;\n\nassert!(a.as_ptr_range().contains(&x));\nassert!(!a.as_ptr_range().contains(&y));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+a+=+%5B1,+2,+3%5D;%0A++++let+x+=+%26a%5B1%5D+as+*const+_;%0A++++let+y+=+%265+as+*const+_;%0A++++%0A++++assert!(a.as_ptr_range().contains(%26x));%0A++++assert!(!a.as_ptr_range().contains(%26y));%0A%7D&edition=2021)\n\n1.48.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#873)\n\nReturns the two unsafe mutable pointers spanning the slice.\n\nThe returned range is half-open, which means that the end pointer points _one past_ the last element of the slice. This way, an empty slice is represented by two equal pointers, and the difference between the two pointers represents the size of the slice.\n\nSee [`as_mut_ptr`](about:blank/primitive.slice.html#method.as_mut_ptr \"method slice::as_mut_ptr\") for warnings on using these pointers. The end pointer requires extra caution, as it does not point to a valid element in the slice.\n\nThis function is useful for interacting with foreign interfaces which use two pointers to refer to a range of elements in memory, as is common in C++.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#904)\n\nSwaps two elements in the slice.\n\nIf `a` equals to `b`, it’s guaranteed that elements won’t change value.\n\n##### [§](#arguments)Arguments\n\n-   a - The index of the first element\n-   b - The index of the second element\n\n##### [§](#panics-16)Panics\n\nPanics if `a` or `b` are out of bounds.\n\n##### [§](#examples-79)Examples\n\n```\nlet mut v = [\"a\", \"b\", \"c\", \"d\", \"e\"];\nv.swap(2, 4);\nassert!(v == [\"a\", \"b\", \"e\", \"d\", \"c\"]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+%5B%22a%22,+%22b%22,+%22c%22,+%22d%22,+%22e%22%5D;%0A++++v.swap(2,+4);%0A++++assert!(v+==+%5B%22a%22,+%22b%22,+%22e%22,+%22d%22,+%22c%22%5D);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#947)\n\n🔬This is a nightly-only experimental API. (`slice_swap_unchecked` [#88539](https://github.com/rust-lang/rust/issues/88539))\n\nSwaps two elements in the slice, without doing bounds checking.\n\nFor a safe alternative see [`swap`](about:blank/primitive.slice.html#method.swap \"method slice::swap\").\n\n##### [§](#arguments-1)Arguments\n\n-   a - The index of the first element\n-   b - The index of the second element\n\n##### [§](#safety-5)Safety\n\nCalling this method with an out-of-bounds index is _[undefined behavior](https://doc.rust-lang.org/reference/behavior-considered-undefined.html)_. The caller has to ensure that `a < self.len()` and `b < self.len()`.\n\n##### [§](#examples-80)Examples\n\n```\n#![feature(slice_swap_unchecked)]\n\nlet mut v = [\"a\", \"b\", \"c\", \"d\"];\n// SAFETY: we know that 1 and 3 are both indices of the slice\nunsafe { v.swap_unchecked(1, 3) };\nassert!(v == [\"a\", \"d\", \"c\", \"b\"]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(slice_swap_unchecked)%5D%0A%0Afn+main()+%7B%0A++++let+mut+v+=+%5B%22a%22,+%22b%22,+%22c%22,+%22d%22%5D;%0A++++//+SAFETY:+we+know+that+1+and+3+are+both+indices+of+the+slice%0A++++unsafe+%7B+v.swap_unchecked(1,+3)+%7D;%0A++++assert!(v+==+%5B%22a%22,+%22d%22,+%22c%22,+%22b%22%5D);%0A%7D&version=nightly&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#976)\n\nReverses the order of elements in the slice, in place.\n\n##### [§](#examples-81)Examples\n\n```\nlet mut v = [1, 2, 3];\nv.reverse();\nassert!(v == [3, 2, 1]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+%5B1,+2,+3%5D;%0A++++v.reverse();%0A++++assert!(v+==+%5B3,+2,+1%5D);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#1034)\n\nReturns an iterator over the slice.\n\nThe iterator yields all items from start to end.\n\n##### [§](#examples-82)Examples\n\n```\nlet x = &[1, 2, 4];\nlet mut iterator = x.iter();\n\nassert_eq!(iterator.next(), Some(&1));\nassert_eq!(iterator.next(), Some(&2));\nassert_eq!(iterator.next(), Some(&4));\nassert_eq!(iterator.next(), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+%26%5B1,+2,+4%5D;%0A++++let+mut+iterator+=+x.iter();%0A++++%0A++++assert_eq!(iterator.next(),+Some(%261));%0A++++assert_eq!(iterator.next(),+Some(%262));%0A++++assert_eq!(iterator.next(),+Some(%264));%0A++++assert_eq!(iterator.next(),+None);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#1053)\n\nReturns an iterator that allows modifying each value.\n\nThe iterator yields all items from start to end.\n\n##### [§](#examples-83)Examples\n\n```\nlet x = &mut [1, 2, 4];\nfor elem in x.iter_mut() {\n    *elem += 2;\n}\nassert_eq!(x, &[3, 4, 6]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+%26mut+%5B1,+2,+4%5D;%0A++++for+elem+in+x.iter_mut()+%7B%0A++++++++*elem+%2B=+2;%0A++++%7D%0A++++assert_eq!(x,+%26%5B3,+4,+6%5D);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#1102)\n\nReturns an iterator over all contiguous windows of length `size`. The windows overlap. If the slice is shorter than `size`, the iterator returns no values.\n\n##### [§](#panics-17)Panics\n\nPanics if `size` is 0.\n\n##### [§](#examples-84)Examples\n\n```\nlet slice = ['l', 'o', 'r', 'e', 'm'];\nlet mut iter = slice.windows(3);\nassert_eq!(iter.next().unwrap(), &['l', 'o', 'r']);\nassert_eq!(iter.next().unwrap(), &['o', 'r', 'e']);\nassert_eq!(iter.next().unwrap(), &['r', 'e', 'm']);\nassert!(iter.next().is_none());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+slice+=+%5B%27l%27,+%27o%27,+%27r%27,+%27e%27,+%27m%27%5D;%0A++++let+mut+iter+=+slice.windows(3);%0A++++assert_eq!(iter.next().unwrap(),+%26%5B%27l%27,+%27o%27,+%27r%27%5D);%0A++++assert_eq!(iter.next().unwrap(),+%26%5B%27o%27,+%27r%27,+%27e%27%5D);%0A++++assert_eq!(iter.next().unwrap(),+%26%5B%27r%27,+%27e%27,+%27m%27%5D);%0A++++assert!(iter.next().is_none());%0A%7D&edition=2021)\n\nIf the slice is shorter than `size`:\n\n```\nlet slice = ['f', 'o', 'o'];\nlet mut iter = slice.windows(4);\nassert!(iter.next().is_none());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+slice+=+%5B%27f%27,+%27o%27,+%27o%27%5D;%0A++++let+mut+iter+=+slice.windows(4);%0A++++assert!(iter.next().is_none());%0A%7D&edition=2021)\n\nThere’s no `windows_mut`, as that existing would let safe code violate the “only one `&mut` at a time to the same thing” rule. However, you can sometimes use [`Cell::as_slice_of_cells`](about:blank/cell/struct.Cell.html#method.as_slice_of_cells \"method std::cell::Cell::as_slice_of_cells\") in conjunction with `windows` to accomplish something similar:\n\n```\nuse std::cell::Cell;\n\nlet mut array = ['R', 'u', 's', 't', ' ', '2', '0', '1', '5'];\nlet slice = &mut array[..];\nlet slice_of_cells: &[Cell<char>] = Cell::from_mut(slice).as_slice_of_cells();\nfor w in slice_of_cells.windows(3) {\n    Cell::swap(&w[0], &w[2]);\n}\nassert_eq!(array, ['s', 't', ' ', '2', '0', '1', '5', 'u', 'R']);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::Cell;%0A++++%0A++++let+mut+array+=+%5B%27R%27,+%27u%27,+%27s%27,+%27t%27,+%27+%27,+%272%27,+%270%27,+%271%27,+%275%27%5D;%0A++++let+slice+=+%26mut+array%5B..%5D;%0A++++let+slice_of_cells:+%26%5BCell%3Cchar%3E%5D+=+Cell::from_mut(slice).as_slice_of_cells();%0A++++for+w+in+slice_of_cells.windows(3)+%7B%0A++++++++Cell::swap(%26w%5B0%5D,+%26w%5B2%5D);%0A++++%7D%0A++++assert_eq!(array,+%5B%27s%27,+%27t%27,+%27+%27,+%272%27,+%270%27,+%271%27,+%275%27,+%27u%27,+%27R%27%5D);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#1137)\n\nReturns an iterator over `chunk_size` elements of the slice at a time, starting at the beginning of the slice.\n\nThe chunks are slices and do not overlap. If `chunk_size` does not divide the length of the slice, then the last chunk will not have length `chunk_size`.\n\nSee [`chunks_exact`](about:blank/primitive.slice.html#method.chunks_exact \"method slice::chunks_exact\") for a variant of this iterator that returns chunks of always exactly `chunk_size` elements, and [`rchunks`](about:blank/primitive.slice.html#method.rchunks \"method slice::rchunks\") for the same iterator but starting at the end of the slice.\n\n##### [§](#panics-18)Panics\n\nPanics if `chunk_size` is 0.\n\n##### [§](#examples-85)Examples\n\n```\nlet slice = ['l', 'o', 'r', 'e', 'm'];\nlet mut iter = slice.chunks(2);\nassert_eq!(iter.next().unwrap(), &['l', 'o']);\nassert_eq!(iter.next().unwrap(), &['r', 'e']);\nassert_eq!(iter.next().unwrap(), &['m']);\nassert!(iter.next().is_none());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+slice+=+%5B%27l%27,+%27o%27,+%27r%27,+%27e%27,+%27m%27%5D;%0A++++let+mut+iter+=+slice.chunks(2);%0A++++assert_eq!(iter.next().unwrap(),+%26%5B%27l%27,+%27o%27%5D);%0A++++assert_eq!(iter.next().unwrap(),+%26%5B%27r%27,+%27e%27%5D);%0A++++assert_eq!(iter.next().unwrap(),+%26%5B%27m%27%5D);%0A++++assert!(iter.next().is_none());%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#1176)\n\nReturns an iterator over `chunk_size` elements of the slice at a time, starting at the beginning of the slice.\n\nThe chunks are mutable slices, and do not overlap. If `chunk_size` does not divide the length of the slice, then the last chunk will not have length `chunk_size`.\n\nSee [`chunks_exact_mut`](about:blank/primitive.slice.html#method.chunks_exact_mut \"method slice::chunks_exact_mut\") for a variant of this iterator that returns chunks of always exactly `chunk_size` elements, and [`rchunks_mut`](about:blank/primitive.slice.html#method.rchunks_mut \"method slice::rchunks_mut\") for the same iterator but starting at the end of the slice.\n\n##### [§](#panics-19)Panics\n\nPanics if `chunk_size` is 0.\n\n##### [§](#examples-86)Examples\n\n```\nlet v = &mut [0, 0, 0, 0, 0];\nlet mut count = 1;\n\nfor chunk in v.chunks_mut(2) {\n    for elem in chunk.iter_mut() {\n        *elem += count;\n    }\n    count += 1;\n}\nassert_eq!(v, &[1, 1, 2, 2, 3]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v+=+%26mut+%5B0,+0,+0,+0,+0%5D;%0A++++let+mut+count+=+1;%0A++++%0A++++for+chunk+in+v.chunks_mut(2)+%7B%0A++++++++for+elem+in+chunk.iter_mut()+%7B%0A++++++++++++*elem+%2B=+count;%0A++++++++%7D%0A++++++++count+%2B=+1;%0A++++%7D%0A++++assert_eq!(v,+%26%5B1,+1,+2,+2,+3%5D);%0A%7D&edition=2021)\n\n1.31.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#1214)\n\nReturns an iterator over `chunk_size` elements of the slice at a time, starting at the beginning of the slice.\n\nThe chunks are slices and do not overlap. If `chunk_size` does not divide the length of the slice, then the last up to `chunk_size-1` elements will be omitted and can be retrieved from the `remainder` function of the iterator.\n\nDue to each chunk having exactly `chunk_size` elements, the compiler can often optimize the resulting code better than in the case of [`chunks`](about:blank/primitive.slice.html#method.chunks \"method slice::chunks\").\n\nSee [`chunks`](about:blank/primitive.slice.html#method.chunks \"method slice::chunks\") for a variant of this iterator that also returns the remainder as a smaller chunk, and [`rchunks_exact`](about:blank/primitive.slice.html#method.rchunks_exact \"method slice::rchunks_exact\") for the same iterator but starting at the end of the slice.\n\n##### [§](#panics-20)Panics\n\nPanics if `chunk_size` is 0.\n\n##### [§](#examples-87)Examples\n\n```\nlet slice = ['l', 'o', 'r', 'e', 'm'];\nlet mut iter = slice.chunks_exact(2);\nassert_eq!(iter.next().unwrap(), &['l', 'o']);\nassert_eq!(iter.next().unwrap(), &['r', 'e']);\nassert!(iter.next().is_none());\nassert_eq!(iter.remainder(), &['m']);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+slice+=+%5B%27l%27,+%27o%27,+%27r%27,+%27e%27,+%27m%27%5D;%0A++++let+mut+iter+=+slice.chunks_exact(2);%0A++++assert_eq!(iter.next().unwrap(),+%26%5B%27l%27,+%27o%27%5D);%0A++++assert_eq!(iter.next().unwrap(),+%26%5B%27r%27,+%27e%27%5D);%0A++++assert!(iter.next().is_none());%0A++++assert_eq!(iter.remainder(),+%26%5B%27m%27%5D);%0A%7D&edition=2021)\n\n1.31.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#1257)\n\nReturns an iterator over `chunk_size` elements of the slice at a time, starting at the beginning of the slice.\n\nThe chunks are mutable slices, and do not overlap. If `chunk_size` does not divide the length of the slice, then the last up to `chunk_size-1` elements will be omitted and can be retrieved from the `into_remainder` function of the iterator.\n\nDue to each chunk having exactly `chunk_size` elements, the compiler can often optimize the resulting code better than in the case of [`chunks_mut`](about:blank/primitive.slice.html#method.chunks_mut \"method slice::chunks_mut\").\n\nSee [`chunks_mut`](about:blank/primitive.slice.html#method.chunks_mut \"method slice::chunks_mut\") for a variant of this iterator that also returns the remainder as a smaller chunk, and [`rchunks_exact_mut`](about:blank/primitive.slice.html#method.rchunks_exact_mut \"method slice::rchunks_exact_mut\") for the same iterator but starting at the end of the slice.\n\n##### [§](#panics-21)Panics\n\nPanics if `chunk_size` is 0.\n\n##### [§](#examples-88)Examples\n\n```\nlet v = &mut [0, 0, 0, 0, 0];\nlet mut count = 1;\n\nfor chunk in v.chunks_exact_mut(2) {\n    for elem in chunk.iter_mut() {\n        *elem += count;\n    }\n    count += 1;\n}\nassert_eq!(v, &[1, 1, 2, 2, 0]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v+=+%26mut+%5B0,+0,+0,+0,+0%5D;%0A++++let+mut+count+=+1;%0A++++%0A++++for+chunk+in+v.chunks_exact_mut(2)+%7B%0A++++++++for+elem+in+chunk.iter_mut()+%7B%0A++++++++++++*elem+%2B=+count;%0A++++++++%7D%0A++++++++count+%2B=+1;%0A++++%7D%0A++++assert_eq!(v,+%26%5B1,+1,+2,+2,+0%5D);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#1292)\n\n🔬This is a nightly-only experimental API. (`slice_as_chunks` [#74985](https://github.com/rust-lang/rust/issues/74985))\n\nSplits the slice into a slice of `N`\\-element arrays, assuming that there’s no remainder.\n\n##### [§](#safety-6)Safety\n\nThis may only be called when\n\n-   The slice splits exactly into `N`\\-element chunks (aka `self.len() % N == 0`).\n-   `N != 0`.\n\n##### [§](#examples-89)Examples\n\n```\n#![feature(slice_as_chunks)]\nlet slice: &[char] = &['l', 'o', 'r', 'e', 'm', '!'];\nlet chunks: &[[char; 1]] =\n    // SAFETY: 1-element chunks never have remainder\n    unsafe { slice.as_chunks_unchecked() };\nassert_eq!(chunks, &[['l'], ['o'], ['r'], ['e'], ['m'], ['!']]);\nlet chunks: &[[char; 3]] =\n    // SAFETY: The slice length (6) is a multiple of 3\n    unsafe { slice.as_chunks_unchecked() };\nassert_eq!(chunks, &[['l', 'o', 'r'], ['e', 'm', '!']]);\n\n// These would be unsound:\n// let chunks: &[[_; 5]] = slice.as_chunks_unchecked() // The slice length is not a multiple of 5\n// let chunks: &[[_; 0]] = slice.as_chunks_unchecked() // Zero-length chunks are never allowed\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(slice_as_chunks)%5D%0Afn+main()+%7B%0A++++let+slice:+%26%5Bchar%5D+=+%26%5B%27l%27,+%27o%27,+%27r%27,+%27e%27,+%27m%27,+%27!%27%5D;%0A++++let+chunks:+%26%5B%5Bchar;+1%5D%5D+=%0A++++++++//+SAFETY:+1-element+chunks+never+have+remainder%0A++++++++unsafe+%7B+slice.as_chunks_unchecked()+%7D;%0A++++assert_eq!(chunks,+%26%5B%5B%27l%27%5D,+%5B%27o%27%5D,+%5B%27r%27%5D,+%5B%27e%27%5D,+%5B%27m%27%5D,+%5B%27!%27%5D%5D);%0A++++let+chunks:+%26%5B%5Bchar;+3%5D%5D+=%0A++++++++//+SAFETY:+The+slice+length+(6)+is+a+multiple+of+3%0A++++++++unsafe+%7B+slice.as_chunks_unchecked()+%7D;%0A++++assert_eq!(chunks,+%26%5B%5B%27l%27,+%27o%27,+%27r%27%5D,+%5B%27e%27,+%27m%27,+%27!%27%5D%5D);%0A++++%0A++++//+These+would+be+unsound:%0A++++//+let+chunks:+%26%5B%5B_;+5%5D%5D+=+slice.as_chunks_unchecked()+//+The+slice+length+is+not+a+multiple+of+5%0A++++//+let+chunks:+%26%5B%5B_;+0%5D%5D+=+slice.as_chunks_unchecked()+//+Zero-length+chunks+are+never+allowed%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#1338)\n\n🔬This is a nightly-only experimental API. (`slice_as_chunks` [#74985](https://github.com/rust-lang/rust/issues/74985))\n\nSplits the slice into a slice of `N`\\-element arrays, starting at the beginning of the slice, and a remainder slice with length strictly less than `N`.\n\n##### [§](#panics-22)Panics\n\nPanics if `N` is 0. This check will most probably get changed to a compile time error before this method gets stabilized.\n\n##### [§](#examples-90)Examples\n\n```\n#![feature(slice_as_chunks)]\nlet slice = ['l', 'o', 'r', 'e', 'm'];\nlet (chunks, remainder) = slice.as_chunks();\nassert_eq!(chunks, &[['l', 'o'], ['r', 'e']]);\nassert_eq!(remainder, &['m']);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(slice_as_chunks)%5D%0Afn+main()+%7B%0A++++let+slice+=+%5B%27l%27,+%27o%27,+%27r%27,+%27e%27,+%27m%27%5D;%0A++++let+(chunks,+remainder)+=+slice.as_chunks();%0A++++assert_eq!(chunks,+%26%5B%5B%27l%27,+%27o%27%5D,+%5B%27r%27,+%27e%27%5D%5D);%0A++++assert_eq!(remainder,+%26%5B%27m%27%5D);%0A%7D&version=nightly&edition=2021)\n\nIf you expect the slice to be an exact multiple, you can combine `let`\\-`else` with an empty slice pattern:\n\n```\n#![feature(slice_as_chunks)]\nlet slice = ['R', 'u', 's', 't'];\nlet (chunks, []) = slice.as_chunks::<2>() else {\n    panic!(\"slice didn't have even length\")\n};\nassert_eq!(chunks, &[['R', 'u'], ['s', 't']]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(slice_as_chunks)%5D%0Afn+main()+%7B%0A++++let+slice+=+%5B%27R%27,+%27u%27,+%27s%27,+%27t%27%5D;%0A++++let+(chunks,+%5B%5D)+=+slice.as_chunks::%3C2%3E()+else+%7B%0A++++++++panic!(%22slice+didn%27t+have+even+length%22)%0A++++%7D;%0A++++assert_eq!(chunks,+%26%5B%5B%27R%27,+%27u%27%5D,+%5B%27s%27,+%27t%27%5D%5D);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#1372)\n\n🔬This is a nightly-only experimental API. (`slice_as_chunks` [#74985](https://github.com/rust-lang/rust/issues/74985))\n\nSplits the slice into a slice of `N`\\-element arrays, starting at the end of the slice, and a remainder slice with length strictly less than `N`.\n\n##### [§](#panics-23)Panics\n\nPanics if `N` is 0. This check will most probably get changed to a compile time error before this method gets stabilized.\n\n##### [§](#examples-91)Examples\n\n```\n#![feature(slice_as_chunks)]\nlet slice = ['l', 'o', 'r', 'e', 'm'];\nlet (remainder, chunks) = slice.as_rchunks();\nassert_eq!(remainder, &['l']);\nassert_eq!(chunks, &[['o', 'r'], ['e', 'm']]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(slice_as_chunks)%5D%0Afn+main()+%7B%0A++++let+slice+=+%5B%27l%27,+%27o%27,+%27r%27,+%27e%27,+%27m%27%5D;%0A++++let+(remainder,+chunks)+=+slice.as_rchunks();%0A++++assert_eq!(remainder,+%26%5B%27l%27%5D);%0A++++assert_eq!(chunks,+%26%5B%5B%27o%27,+%27r%27%5D,+%5B%27e%27,+%27m%27%5D%5D);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#1412)\n\n🔬This is a nightly-only experimental API. (`array_chunks` [#74985](https://github.com/rust-lang/rust/issues/74985))\n\nReturns an iterator over `N` elements of the slice at a time, starting at the beginning of the slice.\n\nThe chunks are array references and do not overlap. If `N` does not divide the length of the slice, then the last up to `N-1` elements will be omitted and can be retrieved from the `remainder` function of the iterator.\n\nThis method is the const generic equivalent of [`chunks_exact`](about:blank/primitive.slice.html#method.chunks_exact \"method slice::chunks_exact\").\n\n##### [§](#panics-24)Panics\n\nPanics if `N` is 0. This check will most probably get changed to a compile time error before this method gets stabilized.\n\n##### [§](#examples-92)Examples\n\n```\n#![feature(array_chunks)]\nlet slice = ['l', 'o', 'r', 'e', 'm'];\nlet mut iter = slice.array_chunks();\nassert_eq!(iter.next().unwrap(), &['l', 'o']);\nassert_eq!(iter.next().unwrap(), &['r', 'e']);\nassert!(iter.next().is_none());\nassert_eq!(iter.remainder(), &['m']);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(array_chunks)%5D%0Afn+main()+%7B%0A++++let+slice+=+%5B%27l%27,+%27o%27,+%27r%27,+%27e%27,+%27m%27%5D;%0A++++let+mut+iter+=+slice.array_chunks();%0A++++assert_eq!(iter.next().unwrap(),+%26%5B%27l%27,+%27o%27%5D);%0A++++assert_eq!(iter.next().unwrap(),+%26%5B%27r%27,+%27e%27%5D);%0A++++assert!(iter.next().is_none());%0A++++assert_eq!(iter.remainder(),+%26%5B%27m%27%5D);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#1449)\n\n🔬This is a nightly-only experimental API. (`slice_as_chunks` [#74985](https://github.com/rust-lang/rust/issues/74985))\n\nSplits the slice into a slice of `N`\\-element arrays, assuming that there’s no remainder.\n\n##### [§](#safety-7)Safety\n\nThis may only be called when\n\n-   The slice splits exactly into `N`\\-element chunks (aka `self.len() % N == 0`).\n-   `N != 0`.\n\n##### [§](#examples-93)Examples\n\n```\n#![feature(slice_as_chunks)]\nlet slice: &mut [char] = &mut ['l', 'o', 'r', 'e', 'm', '!'];\nlet chunks: &mut [[char; 1]] =\n    // SAFETY: 1-element chunks never have remainder\n    unsafe { slice.as_chunks_unchecked_mut() };\nchunks[0] = ['L'];\nassert_eq!(chunks, &[['L'], ['o'], ['r'], ['e'], ['m'], ['!']]);\nlet chunks: &mut [[char; 3]] =\n    // SAFETY: The slice length (6) is a multiple of 3\n    unsafe { slice.as_chunks_unchecked_mut() };\nchunks[1] = ['a', 'x', '?'];\nassert_eq!(slice, &['L', 'o', 'r', 'a', 'x', '?']);\n\n// These would be unsound:\n// let chunks: &[[_; 5]] = slice.as_chunks_unchecked_mut() // The slice length is not a multiple of 5\n// let chunks: &[[_; 0]] = slice.as_chunks_unchecked_mut() // Zero-length chunks are never allowed\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(slice_as_chunks)%5D%0Afn+main()+%7B%0A++++let+slice:+%26mut+%5Bchar%5D+=+%26mut+%5B%27l%27,+%27o%27,+%27r%27,+%27e%27,+%27m%27,+%27!%27%5D;%0A++++let+chunks:+%26mut+%5B%5Bchar;+1%5D%5D+=%0A++++++++//+SAFETY:+1-element+chunks+never+have+remainder%0A++++++++unsafe+%7B+slice.as_chunks_unchecked_mut()+%7D;%0A++++chunks%5B0%5D+=+%5B%27L%27%5D;%0A++++assert_eq!(chunks,+%26%5B%5B%27L%27%5D,+%5B%27o%27%5D,+%5B%27r%27%5D,+%5B%27e%27%5D,+%5B%27m%27%5D,+%5B%27!%27%5D%5D);%0A++++let+chunks:+%26mut+%5B%5Bchar;+3%5D%5D+=%0A++++++++//+SAFETY:+The+slice+length+(6)+is+a+multiple+of+3%0A++++++++unsafe+%7B+slice.as_chunks_unchecked_mut()+%7D;%0A++++chunks%5B1%5D+=+%5B%27a%27,+%27x%27,+%27?%27%5D;%0A++++assert_eq!(slice,+%26%5B%27L%27,+%27o%27,+%27r%27,+%27a%27,+%27x%27,+%27?%27%5D);%0A++++%0A++++//+These+would+be+unsound:%0A++++//+let+chunks:+%26%5B%5B_;+5%5D%5D+=+slice.as_chunks_unchecked_mut()+//+The+slice+length+is+not+a+multiple+of+5%0A++++//+let+chunks:+%26%5B%5B_;+0%5D%5D+=+slice.as_chunks_unchecked_mut()+//+Zero-length+chunks+are+never+allowed%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#1490)\n\n🔬This is a nightly-only experimental API. (`slice_as_chunks` [#74985](https://github.com/rust-lang/rust/issues/74985))\n\nSplits the slice into a slice of `N`\\-element arrays, starting at the beginning of the slice, and a remainder slice with length strictly less than `N`.\n\n##### [§](#panics-25)Panics\n\nPanics if `N` is 0. This check will most probably get changed to a compile time error before this method gets stabilized.\n\n##### [§](#examples-94)Examples\n\n```\n#![feature(slice_as_chunks)]\nlet v = &mut [0, 0, 0, 0, 0];\nlet mut count = 1;\n\nlet (chunks, remainder) = v.as_chunks_mut();\nremainder[0] = 9;\nfor chunk in chunks {\n    *chunk = [count; 2];\n    count += 1;\n}\nassert_eq!(v, &[1, 1, 2, 2, 9]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(slice_as_chunks)%5D%0Afn+main()+%7B%0A++++let+v+=+%26mut+%5B0,+0,+0,+0,+0%5D;%0A++++let+mut+count+=+1;%0A++++%0A++++let+(chunks,+remainder)+=+v.as_chunks_mut();%0A++++remainder%5B0%5D+=+9;%0A++++for+chunk+in+chunks+%7B%0A++++++++*chunk+=+%5Bcount;+2%5D;%0A++++++++count+%2B=+1;%0A++++%7D%0A++++assert_eq!(v,+%26%5B1,+1,+2,+2,+9%5D);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#1530)\n\n🔬This is a nightly-only experimental API. (`slice_as_chunks` [#74985](https://github.com/rust-lang/rust/issues/74985))\n\nSplits the slice into a slice of `N`\\-element arrays, starting at the end of the slice, and a remainder slice with length strictly less than `N`.\n\n##### [§](#panics-26)Panics\n\nPanics if `N` is 0. This check will most probably get changed to a compile time error before this method gets stabilized.\n\n##### [§](#examples-95)Examples\n\n```\n#![feature(slice_as_chunks)]\nlet v = &mut [0, 0, 0, 0, 0];\nlet mut count = 1;\n\nlet (remainder, chunks) = v.as_rchunks_mut();\nremainder[0] = 9;\nfor chunk in chunks {\n    *chunk = [count; 2];\n    count += 1;\n}\nassert_eq!(v, &[9, 1, 1, 2, 2]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(slice_as_chunks)%5D%0Afn+main()+%7B%0A++++let+v+=+%26mut+%5B0,+0,+0,+0,+0%5D;%0A++++let+mut+count+=+1;%0A++++%0A++++let+(remainder,+chunks)+=+v.as_rchunks_mut();%0A++++remainder%5B0%5D+=+9;%0A++++for+chunk+in+chunks+%7B%0A++++++++*chunk+=+%5Bcount;+2%5D;%0A++++++++count+%2B=+1;%0A++++%7D%0A++++assert_eq!(v,+%26%5B9,+1,+1,+2,+2%5D);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#1572)\n\n🔬This is a nightly-only experimental API. (`array_chunks` [#74985](https://github.com/rust-lang/rust/issues/74985))\n\nReturns an iterator over `N` elements of the slice at a time, starting at the beginning of the slice.\n\nThe chunks are mutable array references and do not overlap. If `N` does not divide the length of the slice, then the last up to `N-1` elements will be omitted and can be retrieved from the `into_remainder` function of the iterator.\n\nThis method is the const generic equivalent of [`chunks_exact_mut`](about:blank/primitive.slice.html#method.chunks_exact_mut \"method slice::chunks_exact_mut\").\n\n##### [§](#panics-27)Panics\n\nPanics if `N` is 0. This check will most probably get changed to a compile time error before this method gets stabilized.\n\n##### [§](#examples-96)Examples\n\n```\n#![feature(array_chunks)]\nlet v = &mut [0, 0, 0, 0, 0];\nlet mut count = 1;\n\nfor chunk in v.array_chunks_mut() {\n    *chunk = [count; 2];\n    count += 1;\n}\nassert_eq!(v, &[1, 1, 2, 2, 0]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(array_chunks)%5D%0Afn+main()+%7B%0A++++let+v+=+%26mut+%5B0,+0,+0,+0,+0%5D;%0A++++let+mut+count+=+1;%0A++++%0A++++for+chunk+in+v.array_chunks_mut()+%7B%0A++++++++*chunk+=+%5Bcount;+2%5D;%0A++++++++count+%2B=+1;%0A++++%7D%0A++++assert_eq!(v,+%26%5B1,+1,+2,+2,+0%5D);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#1605)\n\n🔬This is a nightly-only experimental API. (`array_windows` [#75027](https://github.com/rust-lang/rust/issues/75027))\n\nReturns an iterator over overlapping windows of `N` elements of a slice, starting at the beginning of the slice.\n\nThis is the const generic equivalent of [`windows`](about:blank/primitive.slice.html#method.windows \"method slice::windows\").\n\nIf `N` is greater than the size of the slice, it will return no windows.\n\n##### [§](#panics-28)Panics\n\nPanics if `N` is 0. This check will most probably get changed to a compile time error before this method gets stabilized.\n\n##### [§](#examples-97)Examples\n\n```\n#![feature(array_windows)]\nlet slice = [0, 1, 2, 3];\nlet mut iter = slice.array_windows();\nassert_eq!(iter.next().unwrap(), &[0, 1]);\nassert_eq!(iter.next().unwrap(), &[1, 2]);\nassert_eq!(iter.next().unwrap(), &[2, 3]);\nassert!(iter.next().is_none());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(array_windows)%5D%0Afn+main()+%7B%0A++++let+slice+=+%5B0,+1,+2,+3%5D;%0A++++let+mut+iter+=+slice.array_windows();%0A++++assert_eq!(iter.next().unwrap(),+%26%5B0,+1%5D);%0A++++assert_eq!(iter.next().unwrap(),+%26%5B1,+2%5D);%0A++++assert_eq!(iter.next().unwrap(),+%26%5B2,+3%5D);%0A++++assert!(iter.next().is_none());%0A%7D&version=nightly&edition=2021)\n\n1.31.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#1640)\n\nReturns an iterator over `chunk_size` elements of the slice at a time, starting at the end of the slice.\n\nThe chunks are slices and do not overlap. If `chunk_size` does not divide the length of the slice, then the last chunk will not have length `chunk_size`.\n\nSee [`rchunks_exact`](about:blank/primitive.slice.html#method.rchunks_exact \"method slice::rchunks_exact\") for a variant of this iterator that returns chunks of always exactly `chunk_size` elements, and [`chunks`](about:blank/primitive.slice.html#method.chunks \"method slice::chunks\") for the same iterator but starting at the beginning of the slice.\n\n##### [§](#panics-29)Panics\n\nPanics if `chunk_size` is 0.\n\n##### [§](#examples-98)Examples\n\n```\nlet slice = ['l', 'o', 'r', 'e', 'm'];\nlet mut iter = slice.rchunks(2);\nassert_eq!(iter.next().unwrap(), &['e', 'm']);\nassert_eq!(iter.next().unwrap(), &['o', 'r']);\nassert_eq!(iter.next().unwrap(), &['l']);\nassert!(iter.next().is_none());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+slice+=+%5B%27l%27,+%27o%27,+%27r%27,+%27e%27,+%27m%27%5D;%0A++++let+mut+iter+=+slice.rchunks(2);%0A++++assert_eq!(iter.next().unwrap(),+%26%5B%27e%27,+%27m%27%5D);%0A++++assert_eq!(iter.next().unwrap(),+%26%5B%27o%27,+%27r%27%5D);%0A++++assert_eq!(iter.next().unwrap(),+%26%5B%27l%27%5D);%0A++++assert!(iter.next().is_none());%0A%7D&edition=2021)\n\n1.31.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#1679)\n\nReturns an iterator over `chunk_size` elements of the slice at a time, starting at the end of the slice.\n\nThe chunks are mutable slices, and do not overlap. If `chunk_size` does not divide the length of the slice, then the last chunk will not have length `chunk_size`.\n\nSee [`rchunks_exact_mut`](about:blank/primitive.slice.html#method.rchunks_exact_mut \"method slice::rchunks_exact_mut\") for a variant of this iterator that returns chunks of always exactly `chunk_size` elements, and [`chunks_mut`](about:blank/primitive.slice.html#method.chunks_mut \"method slice::chunks_mut\") for the same iterator but starting at the beginning of the slice.\n\n##### [§](#panics-30)Panics\n\nPanics if `chunk_size` is 0.\n\n##### [§](#examples-99)Examples\n\n```\nlet v = &mut [0, 0, 0, 0, 0];\nlet mut count = 1;\n\nfor chunk in v.rchunks_mut(2) {\n    for elem in chunk.iter_mut() {\n        *elem += count;\n    }\n    count += 1;\n}\nassert_eq!(v, &[3, 2, 2, 1, 1]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v+=+%26mut+%5B0,+0,+0,+0,+0%5D;%0A++++let+mut+count+=+1;%0A++++%0A++++for+chunk+in+v.rchunks_mut(2)+%7B%0A++++++++for+elem+in+chunk.iter_mut()+%7B%0A++++++++++++*elem+%2B=+count;%0A++++++++%7D%0A++++++++count+%2B=+1;%0A++++%7D%0A++++assert_eq!(v,+%26%5B3,+2,+2,+1,+1%5D);%0A%7D&edition=2021)\n\n1.31.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#1719)\n\nReturns an iterator over `chunk_size` elements of the slice at a time, starting at the end of the slice.\n\nThe chunks are slices and do not overlap. If `chunk_size` does not divide the length of the slice, then the last up to `chunk_size-1` elements will be omitted and can be retrieved from the `remainder` function of the iterator.\n\nDue to each chunk having exactly `chunk_size` elements, the compiler can often optimize the resulting code better than in the case of [`rchunks`](about:blank/primitive.slice.html#method.rchunks \"method slice::rchunks\").\n\nSee [`rchunks`](about:blank/primitive.slice.html#method.rchunks \"method slice::rchunks\") for a variant of this iterator that also returns the remainder as a smaller chunk, and [`chunks_exact`](about:blank/primitive.slice.html#method.chunks_exact \"method slice::chunks_exact\") for the same iterator but starting at the beginning of the slice.\n\n##### [§](#panics-31)Panics\n\nPanics if `chunk_size` is 0.\n\n##### [§](#examples-100)Examples\n\n```\nlet slice = ['l', 'o', 'r', 'e', 'm'];\nlet mut iter = slice.rchunks_exact(2);\nassert_eq!(iter.next().unwrap(), &['e', 'm']);\nassert_eq!(iter.next().unwrap(), &['o', 'r']);\nassert!(iter.next().is_none());\nassert_eq!(iter.remainder(), &['l']);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+slice+=+%5B%27l%27,+%27o%27,+%27r%27,+%27e%27,+%27m%27%5D;%0A++++let+mut+iter+=+slice.rchunks_exact(2);%0A++++assert_eq!(iter.next().unwrap(),+%26%5B%27e%27,+%27m%27%5D);%0A++++assert_eq!(iter.next().unwrap(),+%26%5B%27o%27,+%27r%27%5D);%0A++++assert!(iter.next().is_none());%0A++++assert_eq!(iter.remainder(),+%26%5B%27l%27%5D);%0A%7D&edition=2021)\n\n1.31.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#1763)\n\nReturns an iterator over `chunk_size` elements of the slice at a time, starting at the end of the slice.\n\nThe chunks are mutable slices, and do not overlap. If `chunk_size` does not divide the length of the slice, then the last up to `chunk_size-1` elements will be omitted and can be retrieved from the `into_remainder` function of the iterator.\n\nDue to each chunk having exactly `chunk_size` elements, the compiler can often optimize the resulting code better than in the case of [`chunks_mut`](about:blank/primitive.slice.html#method.chunks_mut \"method slice::chunks_mut\").\n\nSee [`rchunks_mut`](about:blank/primitive.slice.html#method.rchunks_mut \"method slice::rchunks_mut\") for a variant of this iterator that also returns the remainder as a smaller chunk, and [`chunks_exact_mut`](about:blank/primitive.slice.html#method.chunks_exact_mut \"method slice::chunks_exact_mut\") for the same iterator but starting at the beginning of the slice.\n\n##### [§](#panics-32)Panics\n\nPanics if `chunk_size` is 0.\n\n##### [§](#examples-101)Examples\n\n```\nlet v = &mut [0, 0, 0, 0, 0];\nlet mut count = 1;\n\nfor chunk in v.rchunks_exact_mut(2) {\n    for elem in chunk.iter_mut() {\n        *elem += count;\n    }\n    count += 1;\n}\nassert_eq!(v, &[0, 2, 2, 1, 1]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v+=+%26mut+%5B0,+0,+0,+0,+0%5D;%0A++++let+mut+count+=+1;%0A++++%0A++++for+chunk+in+v.rchunks_exact_mut(2)+%7B%0A++++++++for+elem+in+chunk.iter_mut()+%7B%0A++++++++++++*elem+%2B=+count;%0A++++++++%7D%0A++++++++count+%2B=+1;%0A++++%7D%0A++++assert_eq!(v,+%26%5B0,+2,+2,+1,+1%5D);%0A%7D&edition=2021)\n\n1.77.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#1802-1804)\n\nReturns an iterator over the slice producing non-overlapping runs of elements using the predicate to separate them.\n\nThe predicate is called for every pair of consecutive elements, meaning that it is called on `slice[0]` and `slice[1]`, followed by `slice[1]` and `slice[2]`, and so on.\n\n##### [§](#examples-102)Examples\n\n```\nlet slice = &[1, 1, 1, 3, 3, 2, 2, 2];\n\nlet mut iter = slice.chunk_by(|a, b| a == b);\n\nassert_eq!(iter.next(), Some(&[1, 1, 1][..]));\nassert_eq!(iter.next(), Some(&[3, 3][..]));\nassert_eq!(iter.next(), Some(&[2, 2, 2][..]));\nassert_eq!(iter.next(), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+slice+=+%26%5B1,+1,+1,+3,+3,+2,+2,+2%5D;%0A++++%0A++++let+mut+iter+=+slice.chunk_by(%7Ca,+b%7C+a+==+b);%0A++++%0A++++assert_eq!(iter.next(),+Some(%26%5B1,+1,+1%5D%5B..%5D));%0A++++assert_eq!(iter.next(),+Some(%26%5B3,+3%5D%5B..%5D));%0A++++assert_eq!(iter.next(),+Some(%26%5B2,+2,+2%5D%5B..%5D));%0A++++assert_eq!(iter.next(),+None);%0A%7D&edition=2021)\n\nThis method can be used to extract the sorted subslices:\n\n```\nlet slice = &[1, 1, 2, 3, 2, 3, 2, 3, 4];\n\nlet mut iter = slice.chunk_by(|a, b| a <= b);\n\nassert_eq!(iter.next(), Some(&[1, 1, 2, 3][..]));\nassert_eq!(iter.next(), Some(&[2, 3][..]));\nassert_eq!(iter.next(), Some(&[2, 3, 4][..]));\nassert_eq!(iter.next(), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+slice+=+%26%5B1,+1,+2,+3,+2,+3,+2,+3,+4%5D;%0A++++%0A++++let+mut+iter+=+slice.chunk_by(%7Ca,+b%7C+a+%3C=+b);%0A++++%0A++++assert_eq!(iter.next(),+Some(%26%5B1,+1,+2,+3%5D%5B..%5D));%0A++++assert_eq!(iter.next(),+Some(%26%5B2,+3%5D%5B..%5D));%0A++++assert_eq!(iter.next(),+Some(%26%5B2,+3,+4%5D%5B..%5D));%0A++++assert_eq!(iter.next(),+None);%0A%7D&edition=2021)\n\n1.77.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#1843-1845)\n\nReturns an iterator over the slice producing non-overlapping mutable runs of elements using the predicate to separate them.\n\nThe predicate is called for every pair of consecutive elements, meaning that it is called on `slice[0]` and `slice[1]`, followed by `slice[1]` and `slice[2]`, and so on.\n\n##### [§](#examples-103)Examples\n\n```\nlet slice = &mut [1, 1, 1, 3, 3, 2, 2, 2];\n\nlet mut iter = slice.chunk_by_mut(|a, b| a == b);\n\nassert_eq!(iter.next(), Some(&mut [1, 1, 1][..]));\nassert_eq!(iter.next(), Some(&mut [3, 3][..]));\nassert_eq!(iter.next(), Some(&mut [2, 2, 2][..]));\nassert_eq!(iter.next(), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+slice+=+%26mut+%5B1,+1,+1,+3,+3,+2,+2,+2%5D;%0A++++%0A++++let+mut+iter+=+slice.chunk_by_mut(%7Ca,+b%7C+a+==+b);%0A++++%0A++++assert_eq!(iter.next(),+Some(%26mut+%5B1,+1,+1%5D%5B..%5D));%0A++++assert_eq!(iter.next(),+Some(%26mut+%5B3,+3%5D%5B..%5D));%0A++++assert_eq!(iter.next(),+Some(%26mut+%5B2,+2,+2%5D%5B..%5D));%0A++++assert_eq!(iter.next(),+None);%0A%7D&edition=2021)\n\nThis method can be used to extract the sorted subslices:\n\n```\nlet slice = &mut [1, 1, 2, 3, 2, 3, 2, 3, 4];\n\nlet mut iter = slice.chunk_by_mut(|a, b| a <= b);\n\nassert_eq!(iter.next(), Some(&mut [1, 1, 2, 3][..]));\nassert_eq!(iter.next(), Some(&mut [2, 3][..]));\nassert_eq!(iter.next(), Some(&mut [2, 3, 4][..]));\nassert_eq!(iter.next(), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+slice+=+%26mut+%5B1,+1,+2,+3,+2,+3,+2,+3,+4%5D;%0A++++%0A++++let+mut+iter+=+slice.chunk_by_mut(%7Ca,+b%7C+a+%3C=+b);%0A++++%0A++++assert_eq!(iter.next(),+Some(%26mut+%5B1,+1,+2,+3%5D%5B..%5D));%0A++++assert_eq!(iter.next(),+Some(%26mut+%5B2,+3%5D%5B..%5D));%0A++++assert_eq!(iter.next(),+Some(%26mut+%5B2,+3,+4%5D%5B..%5D));%0A++++assert_eq!(iter.next(),+None);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#1890)\n\nDivides one slice into two at an index.\n\nThe first will contain all indices from `[0, mid)` (excluding the index `mid` itself) and the second will contain all indices from `[mid, len)` (excluding the index `len` itself).\n\n##### [§](#panics-33)Panics\n\nPanics if `mid > len`. For a non-panicking alternative see [`split_at_checked`](about:blank/primitive.slice.html#method.split_at_checked \"method slice::split_at_checked\").\n\n##### [§](#examples-104)Examples\n\n```\nlet v = [1, 2, 3, 4, 5, 6];\n\n{\n   let (left, right) = v.split_at(0);\n   assert_eq!(left, []);\n   assert_eq!(right, [1, 2, 3, 4, 5, 6]);\n}\n\n{\n    let (left, right) = v.split_at(2);\n    assert_eq!(left, [1, 2]);\n    assert_eq!(right, [3, 4, 5, 6]);\n}\n\n{\n    let (left, right) = v.split_at(6);\n    assert_eq!(left, [1, 2, 3, 4, 5, 6]);\n    assert_eq!(right, []);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v+=+%5B1,+2,+3,+4,+5,+6%5D;%0A++++%0A++++%7B%0A+++++++let+(left,+right)+=+v.split_at(0);%0A+++++++assert_eq!(left,+%5B%5D);%0A+++++++assert_eq!(right,+%5B1,+2,+3,+4,+5,+6%5D);%0A++++%7D%0A++++%0A++++%7B%0A++++++++let+(left,+right)+=+v.split_at(2);%0A++++++++assert_eq!(left,+%5B1,+2%5D);%0A++++++++assert_eq!(right,+%5B3,+4,+5,+6%5D);%0A++++%7D%0A++++%0A++++%7B%0A++++++++let+(left,+right)+=+v.split_at(6);%0A++++++++assert_eq!(left,+%5B1,+2,+3,+4,+5,+6%5D);%0A++++++++assert_eq!(right,+%5B%5D);%0A++++%7D%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#1924)\n\nDivides one mutable slice into two at an index.\n\nThe first will contain all indices from `[0, mid)` (excluding the index `mid` itself) and the second will contain all indices from `[mid, len)` (excluding the index `len` itself).\n\n##### [§](#panics-34)Panics\n\nPanics if `mid > len`. For a non-panicking alternative see [`split_at_mut_checked`](about:blank/primitive.slice.html#method.split_at_mut_checked \"method slice::split_at_mut_checked\").\n\n##### [§](#examples-105)Examples\n\n```\nlet mut v = [1, 0, 3, 0, 5, 6];\nlet (left, right) = v.split_at_mut(2);\nassert_eq!(left, [1, 0]);\nassert_eq!(right, [3, 0, 5, 6]);\nleft[1] = 2;\nright[1] = 4;\nassert_eq!(v, [1, 2, 3, 4, 5, 6]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+%5B1,+0,+3,+0,+5,+6%5D;%0A++++let+(left,+right)+=+v.split_at_mut(2);%0A++++assert_eq!(left,+%5B1,+0%5D);%0A++++assert_eq!(right,+%5B3,+0,+5,+6%5D);%0A++++left%5B1%5D+=+2;%0A++++right%5B1%5D+=+4;%0A++++assert_eq!(v,+%5B1,+2,+3,+4,+5,+6%5D);%0A%7D&edition=2021)\n\n1.79.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#1975)\n\nDivides one slice into two at an index, without doing bounds checking.\n\nThe first will contain all indices from `[0, mid)` (excluding the index `mid` itself) and the second will contain all indices from `[mid, len)` (excluding the index `len` itself).\n\nFor a safe alternative see [`split_at`](about:blank/primitive.slice.html#method.split_at \"method slice::split_at\").\n\n##### [§](#safety-8)Safety\n\nCalling this method with an out-of-bounds index is _[undefined behavior](https://doc.rust-lang.org/reference/behavior-considered-undefined.html)_ even if the resulting reference is not used. The caller has to ensure that `0 <= mid <= self.len()`.\n\n##### [§](#examples-106)Examples\n\n```\nlet v = [1, 2, 3, 4, 5, 6];\n\nunsafe {\n   let (left, right) = v.split_at_unchecked(0);\n   assert_eq!(left, []);\n   assert_eq!(right, [1, 2, 3, 4, 5, 6]);\n}\n\nunsafe {\n    let (left, right) = v.split_at_unchecked(2);\n    assert_eq!(left, [1, 2]);\n    assert_eq!(right, [3, 4, 5, 6]);\n}\n\nunsafe {\n    let (left, right) = v.split_at_unchecked(6);\n    assert_eq!(left, [1, 2, 3, 4, 5, 6]);\n    assert_eq!(right, []);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v+=+%5B1,+2,+3,+4,+5,+6%5D;%0A++++%0A++++unsafe+%7B%0A+++++++let+(left,+right)+=+v.split_at_unchecked(0);%0A+++++++assert_eq!(left,+%5B%5D);%0A+++++++assert_eq!(right,+%5B1,+2,+3,+4,+5,+6%5D);%0A++++%7D%0A++++%0A++++unsafe+%7B%0A++++++++let+(left,+right)+=+v.split_at_unchecked(2);%0A++++++++assert_eq!(left,+%5B1,+2%5D);%0A++++++++assert_eq!(right,+%5B3,+4,+5,+6%5D);%0A++++%7D%0A++++%0A++++unsafe+%7B%0A++++++++let+(left,+right)+=+v.split_at_unchecked(6);%0A++++++++assert_eq!(left,+%5B1,+2,+3,+4,+5,+6%5D);%0A++++++++assert_eq!(right,+%5B%5D);%0A++++%7D%0A%7D&edition=2021)\n\n1.79.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#2028)\n\nDivides one mutable slice into two at an index, without doing bounds checking.\n\nThe first will contain all indices from `[0, mid)` (excluding the index `mid` itself) and the second will contain all indices from `[mid, len)` (excluding the index `len` itself).\n\nFor a safe alternative see [`split_at_mut`](about:blank/primitive.slice.html#method.split_at_mut \"method slice::split_at_mut\").\n\n##### [§](#safety-9)Safety\n\nCalling this method with an out-of-bounds index is _[undefined behavior](https://doc.rust-lang.org/reference/behavior-considered-undefined.html)_ even if the resulting reference is not used. The caller has to ensure that `0 <= mid <= self.len()`.\n\n##### [§](#examples-107)Examples\n\n```\nlet mut v = [1, 0, 3, 0, 5, 6];\n// scoped to restrict the lifetime of the borrows\nunsafe {\n    let (left, right) = v.split_at_mut_unchecked(2);\n    assert_eq!(left, [1, 0]);\n    assert_eq!(right, [3, 0, 5, 6]);\n    left[1] = 2;\n    right[1] = 4;\n}\nassert_eq!(v, [1, 2, 3, 4, 5, 6]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+%5B1,+0,+3,+0,+5,+6%5D;%0A++++//+scoped+to+restrict+the+lifetime+of+the+borrows%0A++++unsafe+%7B%0A++++++++let+(left,+right)+=+v.split_at_mut_unchecked(2);%0A++++++++assert_eq!(left,+%5B1,+0%5D);%0A++++++++assert_eq!(right,+%5B3,+0,+5,+6%5D);%0A++++++++left%5B1%5D+=+2;%0A++++++++right%5B1%5D+=+4;%0A++++%7D%0A++++assert_eq!(v,+%5B1,+2,+3,+4,+5,+6%5D);%0A%7D&edition=2021)\n\n1.80.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#2089)\n\nDivides one slice into two at an index, returning `None` if the slice is too short.\n\nIf `mid ≤ len` returns a pair of slices where the first will contain all indices from `[0, mid)` (excluding the index `mid` itself) and the second will contain all indices from `[mid, len)` (excluding the index `len` itself).\n\nOtherwise, if `mid > len`, returns `None`.\n\n##### [§](#examples-108)Examples\n\n```\nlet v = [1, -2, 3, -4, 5, -6];\n\n{\n   let (left, right) = v.split_at_checked(0).unwrap();\n   assert_eq!(left, []);\n   assert_eq!(right, [1, -2, 3, -4, 5, -6]);\n}\n\n{\n    let (left, right) = v.split_at_checked(2).unwrap();\n    assert_eq!(left, [1, -2]);\n    assert_eq!(right, [3, -4, 5, -6]);\n}\n\n{\n    let (left, right) = v.split_at_checked(6).unwrap();\n    assert_eq!(left, [1, -2, 3, -4, 5, -6]);\n    assert_eq!(right, []);\n}\n\nassert_eq!(None, v.split_at_checked(7));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v+=+%5B1,+-2,+3,+-4,+5,+-6%5D;%0A++++%0A++++%7B%0A+++++++let+(left,+right)+=+v.split_at_checked(0).unwrap();%0A+++++++assert_eq!(left,+%5B%5D);%0A+++++++assert_eq!(right,+%5B1,+-2,+3,+-4,+5,+-6%5D);%0A++++%7D%0A++++%0A++++%7B%0A++++++++let+(left,+right)+=+v.split_at_checked(2).unwrap();%0A++++++++assert_eq!(left,+%5B1,+-2%5D);%0A++++++++assert_eq!(right,+%5B3,+-4,+5,+-6%5D);%0A++++%7D%0A++++%0A++++%7B%0A++++++++let+(left,+right)+=+v.split_at_checked(6).unwrap();%0A++++++++assert_eq!(left,+%5B1,+-2,+3,+-4,+5,+-6%5D);%0A++++++++assert_eq!(right,+%5B%5D);%0A++++%7D%0A++++%0A++++assert_eq!(None,+v.split_at_checked(7));%0A%7D&edition=2021)\n\n1.80.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#2128)\n\nDivides one mutable slice into two at an index, returning `None` if the slice is too short.\n\nIf `mid ≤ len` returns a pair of slices where the first will contain all indices from `[0, mid)` (excluding the index `mid` itself) and the second will contain all indices from `[mid, len)` (excluding the index `len` itself).\n\nOtherwise, if `mid > len`, returns `None`.\n\n##### [§](#examples-109)Examples\n\n```\nlet mut v = [1, 0, 3, 0, 5, 6];\n\nif let Some((left, right)) = v.split_at_mut_checked(2) {\n    assert_eq!(left, [1, 0]);\n    assert_eq!(right, [3, 0, 5, 6]);\n    left[1] = 2;\n    right[1] = 4;\n}\nassert_eq!(v, [1, 2, 3, 4, 5, 6]);\n\nassert_eq!(None, v.split_at_mut_checked(7));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+%5B1,+0,+3,+0,+5,+6%5D;%0A++++%0A++++if+let+Some((left,+right))+=+v.split_at_mut_checked(2)+%7B%0A++++++++assert_eq!(left,+%5B1,+0%5D);%0A++++++++assert_eq!(right,+%5B3,+0,+5,+6%5D);%0A++++++++left%5B1%5D+=+2;%0A++++++++right%5B1%5D+=+4;%0A++++%7D%0A++++assert_eq!(v,+%5B1,+2,+3,+4,+5,+6%5D);%0A++++%0A++++assert_eq!(None,+v.split_at_mut_checked(7));%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#2180-2182)\n\nReturns an iterator over subslices separated by elements that match `pred`. The matched element is not contained in the subslices.\n\n##### [§](#examples-110)Examples\n\n```\nlet slice = [10, 40, 33, 20];\nlet mut iter = slice.split(|num| num % 3 == 0);\n\nassert_eq!(iter.next().unwrap(), &[10, 40]);\nassert_eq!(iter.next().unwrap(), &[20]);\nassert!(iter.next().is_none());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+slice+=+%5B10,+40,+33,+20%5D;%0A++++let+mut+iter+=+slice.split(%7Cnum%7C+num+%25+3+==+0);%0A++++%0A++++assert_eq!(iter.next().unwrap(),+%26%5B10,+40%5D);%0A++++assert_eq!(iter.next().unwrap(),+%26%5B20%5D);%0A++++assert!(iter.next().is_none());%0A%7D&edition=2021)\n\nIf the first element is matched, an empty slice will be the first item returned by the iterator. Similarly, if the last element in the slice is matched, an empty slice will be the last item returned by the iterator:\n\n```\nlet slice = [10, 40, 33];\nlet mut iter = slice.split(|num| num % 3 == 0);\n\nassert_eq!(iter.next().unwrap(), &[10, 40]);\nassert_eq!(iter.next().unwrap(), &[]);\nassert!(iter.next().is_none());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+slice+=+%5B10,+40,+33%5D;%0A++++let+mut+iter+=+slice.split(%7Cnum%7C+num+%25+3+==+0);%0A++++%0A++++assert_eq!(iter.next().unwrap(),+%26%5B10,+40%5D);%0A++++assert_eq!(iter.next().unwrap(),+%26%5B%5D);%0A++++assert!(iter.next().is_none());%0A%7D&edition=2021)\n\nIf two matched elements are directly adjacent, an empty slice will be present between them:\n\n```\nlet slice = [10, 6, 33, 20];\nlet mut iter = slice.split(|num| num % 3 == 0);\n\nassert_eq!(iter.next().unwrap(), &[10]);\nassert_eq!(iter.next().unwrap(), &[]);\nassert_eq!(iter.next().unwrap(), &[20]);\nassert!(iter.next().is_none());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+slice+=+%5B10,+6,+33,+20%5D;%0A++++let+mut+iter+=+slice.split(%7Cnum%7C+num+%25+3+==+0);%0A++++%0A++++assert_eq!(iter.next().unwrap(),+%26%5B10%5D);%0A++++assert_eq!(iter.next().unwrap(),+%26%5B%5D);%0A++++assert_eq!(iter.next().unwrap(),+%26%5B20%5D);%0A++++assert!(iter.next().is_none());%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#2202-2204)\n\nReturns an iterator over mutable subslices separated by elements that match `pred`. The matched element is not contained in the subslices.\n\n##### [§](#examples-111)Examples\n\n```\nlet mut v = [10, 40, 30, 20, 60, 50];\n\nfor group in v.split_mut(|num| *num % 3 == 0) {\n    group[0] = 1;\n}\nassert_eq!(v, [1, 40, 30, 1, 60, 1]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+%5B10,+40,+30,+20,+60,+50%5D;%0A++++%0A++++for+group+in+v.split_mut(%7Cnum%7C+*num+%25+3+==+0)+%7B%0A++++++++group%5B0%5D+=+1;%0A++++%7D%0A++++assert_eq!(v,+%5B1,+40,+30,+1,+60,+1%5D);%0A%7D&edition=2021)\n\n1.51.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#2238-2240)\n\nReturns an iterator over subslices separated by elements that match `pred`. The matched element is contained in the end of the previous subslice as a terminator.\n\n##### [§](#examples-112)Examples\n\n```\nlet slice = [10, 40, 33, 20];\nlet mut iter = slice.split_inclusive(|num| num % 3 == 0);\n\nassert_eq!(iter.next().unwrap(), &[10, 40, 33]);\nassert_eq!(iter.next().unwrap(), &[20]);\nassert!(iter.next().is_none());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+slice+=+%5B10,+40,+33,+20%5D;%0A++++let+mut+iter+=+slice.split_inclusive(%7Cnum%7C+num+%25+3+==+0);%0A++++%0A++++assert_eq!(iter.next().unwrap(),+%26%5B10,+40,+33%5D);%0A++++assert_eq!(iter.next().unwrap(),+%26%5B20%5D);%0A++++assert!(iter.next().is_none());%0A%7D&edition=2021)\n\nIf the last element of the slice is matched, that element will be considered the terminator of the preceding slice. That slice will be the last item returned by the iterator.\n\n```\nlet slice = [3, 10, 40, 33];\nlet mut iter = slice.split_inclusive(|num| num % 3 == 0);\n\nassert_eq!(iter.next().unwrap(), &[3]);\nassert_eq!(iter.next().unwrap(), &[10, 40, 33]);\nassert!(iter.next().is_none());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+slice+=+%5B3,+10,+40,+33%5D;%0A++++let+mut+iter+=+slice.split_inclusive(%7Cnum%7C+num+%25+3+==+0);%0A++++%0A++++assert_eq!(iter.next().unwrap(),+%26%5B3%5D);%0A++++assert_eq!(iter.next().unwrap(),+%26%5B10,+40,+33%5D);%0A++++assert!(iter.next().is_none());%0A%7D&edition=2021)\n\n1.51.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#2262-2264)\n\nReturns an iterator over mutable subslices separated by elements that match `pred`. The matched element is contained in the previous subslice as a terminator.\n\n##### [§](#examples-113)Examples\n\n```\nlet mut v = [10, 40, 30, 20, 60, 50];\n\nfor group in v.split_inclusive_mut(|num| *num % 3 == 0) {\n    let terminator_idx = group.len()-1;\n    group[terminator_idx] = 1;\n}\nassert_eq!(v, [10, 40, 1, 20, 1, 1]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+%5B10,+40,+30,+20,+60,+50%5D;%0A++++%0A++++for+group+in+v.split_inclusive_mut(%7Cnum%7C+*num+%25+3+==+0)+%7B%0A++++++++let+terminator_idx+=+group.len()-1;%0A++++++++group%5Bterminator_idx%5D+=+1;%0A++++%7D%0A++++assert_eq!(v,+%5B10,+40,+1,+20,+1,+1%5D);%0A%7D&edition=2021)\n\n1.27.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#2298-2300)\n\nReturns an iterator over subslices separated by elements that match `pred`, starting at the end of the slice and working backwards. The matched element is not contained in the subslices.\n\n##### [§](#examples-114)Examples\n\n```\nlet slice = [11, 22, 33, 0, 44, 55];\nlet mut iter = slice.rsplit(|num| *num == 0);\n\nassert_eq!(iter.next().unwrap(), &[44, 55]);\nassert_eq!(iter.next().unwrap(), &[11, 22, 33]);\nassert_eq!(iter.next(), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+slice+=+%5B11,+22,+33,+0,+44,+55%5D;%0A++++let+mut+iter+=+slice.rsplit(%7Cnum%7C+*num+==+0);%0A++++%0A++++assert_eq!(iter.next().unwrap(),+%26%5B44,+55%5D);%0A++++assert_eq!(iter.next().unwrap(),+%26%5B11,+22,+33%5D);%0A++++assert_eq!(iter.next(),+None);%0A%7D&edition=2021)\n\nAs with `split()`, if the first or last element is matched, an empty slice will be the first (or last) item returned by the iterator.\n\n```\nlet v = &[0, 1, 1, 2, 3, 5, 8];\nlet mut it = v.rsplit(|n| *n % 2 == 0);\nassert_eq!(it.next().unwrap(), &[]);\nassert_eq!(it.next().unwrap(), &[3, 5]);\nassert_eq!(it.next().unwrap(), &[1, 1]);\nassert_eq!(it.next().unwrap(), &[]);\nassert_eq!(it.next(), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v+=+%26%5B0,+1,+1,+2,+3,+5,+8%5D;%0A++++let+mut+it+=+v.rsplit(%7Cn%7C+*n+%25+2+==+0);%0A++++assert_eq!(it.next().unwrap(),+%26%5B%5D);%0A++++assert_eq!(it.next().unwrap(),+%26%5B3,+5%5D);%0A++++assert_eq!(it.next().unwrap(),+%26%5B1,+1%5D);%0A++++assert_eq!(it.next().unwrap(),+%26%5B%5D);%0A++++assert_eq!(it.next(),+None);%0A%7D&edition=2021)\n\n1.27.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#2324-2326)\n\nReturns an iterator over mutable subslices separated by elements that match `pred`, starting at the end of the slice and working backwards. The matched element is not contained in the subslices.\n\n##### [§](#examples-115)Examples\n\n```\nlet mut v = [100, 400, 300, 200, 600, 500];\n\nlet mut count = 0;\nfor group in v.rsplit_mut(|num| *num % 3 == 0) {\n    count += 1;\n    group[0] = count;\n}\nassert_eq!(v, [3, 400, 300, 2, 600, 1]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+%5B100,+400,+300,+200,+600,+500%5D;%0A++++%0A++++let+mut+count+=+0;%0A++++for+group+in+v.rsplit_mut(%7Cnum%7C+*num+%25+3+==+0)+%7B%0A++++++++count+%2B=+1;%0A++++++++group%5B0%5D+=+count;%0A++++%7D%0A++++assert_eq!(v,+%5B3,+400,+300,+2,+600,+1%5D);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#2352-2354)\n\nReturns an iterator over subslices separated by elements that match `pred`, limited to returning at most `n` items. The matched element is not contained in the subslices.\n\nThe last element returned, if any, will contain the remainder of the slice.\n\n##### [§](#examples-116)Examples\n\nPrint the slice split once by numbers divisible by 3 (i.e., `[10, 40]`, `[20, 60, 50]`):\n\n```\nlet v = [10, 40, 30, 20, 60, 50];\n\nfor group in v.splitn(2, |num| *num % 3 == 0) {\n    println!(\"{group:?}\");\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v+=+%5B10,+40,+30,+20,+60,+50%5D;%0A++++%0A++++for+group+in+v.splitn(2,+%7Cnum%7C+*num+%25+3+==+0)+%7B%0A++++++++println!(%22%7Bgroup:?%7D%22);%0A++++%7D%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#2378-2380)\n\nReturns an iterator over mutable subslices separated by elements that match `pred`, limited to returning at most `n` items. The matched element is not contained in the subslices.\n\nThe last element returned, if any, will contain the remainder of the slice.\n\n##### [§](#examples-117)Examples\n\n```\nlet mut v = [10, 40, 30, 20, 60, 50];\n\nfor group in v.splitn_mut(2, |num| *num % 3 == 0) {\n    group[0] = 1;\n}\nassert_eq!(v, [1, 40, 30, 1, 60, 50]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+%5B10,+40,+30,+20,+60,+50%5D;%0A++++%0A++++for+group+in+v.splitn_mut(2,+%7Cnum%7C+*num+%25+3+==+0)+%7B%0A++++++++group%5B0%5D+=+1;%0A++++%7D%0A++++assert_eq!(v,+%5B1,+40,+30,+1,+60,+50%5D);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#2407-2409)\n\nReturns an iterator over subslices separated by elements that match `pred` limited to returning at most `n` items. This starts at the end of the slice and works backwards. The matched element is not contained in the subslices.\n\nThe last element returned, if any, will contain the remainder of the slice.\n\n##### [§](#examples-118)Examples\n\nPrint the slice split once, starting from the end, by numbers divisible by 3 (i.e., `[50]`, `[10, 40, 30, 20]`):\n\n```\nlet v = [10, 40, 30, 20, 60, 50];\n\nfor group in v.rsplitn(2, |num| *num % 3 == 0) {\n    println!(\"{group:?}\");\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v+=+%5B10,+40,+30,+20,+60,+50%5D;%0A++++%0A++++for+group+in+v.rsplitn(2,+%7Cnum%7C+*num+%25+3+==+0)+%7B%0A++++++++println!(%22%7Bgroup:?%7D%22);%0A++++%7D%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#2434-2436)\n\nReturns an iterator over subslices separated by elements that match `pred` limited to returning at most `n` items. This starts at the end of the slice and works backwards. The matched element is not contained in the subslices.\n\nThe last element returned, if any, will contain the remainder of the slice.\n\n##### [§](#examples-119)Examples\n\n```\nlet mut s = [10, 40, 30, 20, 60, 50];\n\nfor group in s.rsplitn_mut(2, |num| *num % 3 == 0) {\n    group[0] = 1;\n}\nassert_eq!(s, [1, 40, 30, 20, 60, 1]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+s+=+%5B10,+40,+30,+20,+60,+50%5D;%0A++++%0A++++for+group+in+s.rsplitn_mut(2,+%7Cnum%7C+*num+%25+3+==+0)+%7B%0A++++++++group%5B0%5D+=+1;%0A++++%7D%0A++++assert_eq!(s,+%5B1,+40,+30,+20,+60,+1%5D);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#2461-2463)\n\n🔬This is a nightly-only experimental API. (`slice_split_once` [#112811](https://github.com/rust-lang/rust/issues/112811))\n\nSplits the slice on the first element that matches the specified predicate.\n\nIf any matching elements are present in the slice, returns the prefix before the match and suffix after. The matching element itself is not included. If no elements match, returns `None`.\n\n##### [§](#examples-120)Examples\n\n```\n#![feature(slice_split_once)]\nlet s = [1, 2, 3, 2, 4];\nassert_eq!(s.split_once(|&x| x == 2), Some((\n    &[1][..],\n    &[3, 2, 4][..]\n)));\nassert_eq!(s.split_once(|&x| x == 0), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(slice_split_once)%5D%0Afn+main()+%7B%0A++++let+s+=+%5B1,+2,+3,+2,+4%5D;%0A++++assert_eq!(s.split_once(%7C%26x%7C+x+==+2),+Some((%0A++++++++%26%5B1%5D%5B..%5D,%0A++++++++%26%5B3,+2,+4%5D%5B..%5D%0A++++)));%0A++++assert_eq!(s.split_once(%7C%26x%7C+x+==+0),+None);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#2489-2491)\n\n🔬This is a nightly-only experimental API. (`slice_split_once` [#112811](https://github.com/rust-lang/rust/issues/112811))\n\nSplits the slice on the last element that matches the specified predicate.\n\nIf any matching elements are present in the slice, returns the prefix before the match and suffix after. The matching element itself is not included. If no elements match, returns `None`.\n\n##### [§](#examples-121)Examples\n\n```\n#![feature(slice_split_once)]\nlet s = [1, 2, 3, 2, 4];\nassert_eq!(s.rsplit_once(|&x| x == 2), Some((\n    &[1, 2, 3][..],\n    &[4][..]\n)));\nassert_eq!(s.rsplit_once(|&x| x == 0), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(slice_split_once)%5D%0Afn+main()+%7B%0A++++let+s+=+%5B1,+2,+3,+2,+4%5D;%0A++++assert_eq!(s.rsplit_once(%7C%26x%7C+x+==+2),+Some((%0A++++++++%26%5B1,+2,+3%5D%5B..%5D,%0A++++++++%26%5B4%5D%5B..%5D%0A++++)));%0A++++assert_eq!(s.rsplit_once(%7C%26x%7C+x+==+0),+None);%0A%7D&version=nightly&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#2525-2527)\n\nReturns `true` if the slice contains an element with the given value.\n\nThis operation is _O_(_n_).\n\nNote that if you have a sorted slice, [`binary_search`](about:blank/primitive.slice.html#method.binary_search \"method slice::binary_search\") may be faster.\n\n##### [§](#examples-122)Examples\n\n```\nlet v = [10, 40, 30];\nassert!(v.contains(&30));\nassert!(!v.contains(&50));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v+=+%5B10,+40,+30%5D;%0A++++assert!(v.contains(%2630));%0A++++assert!(!v.contains(%2650));%0A%7D&edition=2021)\n\nIf you do not have a `&T`, but some other value that you can compare with one (for example, `String` implements `PartialEq<str>`), you can use `iter().any`:\n\n```\nlet v = [String::from(\"hello\"), String::from(\"world\")]; // slice of `String`\nassert!(v.iter().any(|e| e == \"hello\")); // search with `&str`\nassert!(!v.iter().any(|e| e == \"hi\"));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v+=+%5BString::from(%22hello%22),+String::from(%22world%22)%5D;+//+slice+of+%60String%60%0A++++assert!(v.iter().any(%7Ce%7C+e+==+%22hello%22));+//+search+with+%60%26str%60%0A++++assert!(!v.iter().any(%7Ce%7C+e+==+%22hi%22));%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#2555-2557)\n\nReturns `true` if `needle` is a prefix of the slice or equal to the slice.\n\n##### [§](#examples-123)Examples\n\n```\nlet v = [10, 40, 30];\nassert!(v.starts_with(&[10]));\nassert!(v.starts_with(&[10, 40]));\nassert!(v.starts_with(&v));\nassert!(!v.starts_with(&[50]));\nassert!(!v.starts_with(&[10, 50]));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v+=+%5B10,+40,+30%5D;%0A++++assert!(v.starts_with(%26%5B10%5D));%0A++++assert!(v.starts_with(%26%5B10,+40%5D));%0A++++assert!(v.starts_with(%26v));%0A++++assert!(!v.starts_with(%26%5B50%5D));%0A++++assert!(!v.starts_with(%26%5B10,+50%5D));%0A%7D&edition=2021)\n\nAlways returns `true` if `needle` is an empty slice:\n\n```\nlet v = &[10, 40, 30];\nassert!(v.starts_with(&[]));\nlet v: &[u8] = &[];\nassert!(v.starts_with(&[]));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v+=+%26%5B10,+40,+30%5D;%0A++++assert!(v.starts_with(%26%5B%5D));%0A++++let+v:+%26%5Bu8%5D+=+%26%5B%5D;%0A++++assert!(v.starts_with(%26%5B%5D));%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#2586-2588)\n\nReturns `true` if `needle` is a suffix of the slice or equal to the slice.\n\n##### [§](#examples-124)Examples\n\n```\nlet v = [10, 40, 30];\nassert!(v.ends_with(&[30]));\nassert!(v.ends_with(&[40, 30]));\nassert!(v.ends_with(&v));\nassert!(!v.ends_with(&[50]));\nassert!(!v.ends_with(&[50, 30]));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v+=+%5B10,+40,+30%5D;%0A++++assert!(v.ends_with(%26%5B30%5D));%0A++++assert!(v.ends_with(%26%5B40,+30%5D));%0A++++assert!(v.ends_with(%26v));%0A++++assert!(!v.ends_with(%26%5B50%5D));%0A++++assert!(!v.ends_with(%26%5B50,+30%5D));%0A%7D&edition=2021)\n\nAlways returns `true` if `needle` is an empty slice:\n\n```\nlet v = &[10, 40, 30];\nassert!(v.ends_with(&[]));\nlet v: &[u8] = &[];\nassert!(v.ends_with(&[]));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v+=+%26%5B10,+40,+30%5D;%0A++++assert!(v.ends_with(%26%5B%5D));%0A++++let+v:+%26%5Bu8%5D+=+%26%5B%5D;%0A++++assert!(v.ends_with(%26%5B%5D));%0A%7D&edition=2021)\n\n1.51.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#2618-2620)\n\nReturns a subslice with the prefix removed.\n\nIf the slice starts with `prefix`, returns the subslice after the prefix, wrapped in `Some`. If `prefix` is empty, simply returns the original slice. If `prefix` is equal to the original slice, returns an empty slice.\n\nIf the slice does not start with `prefix`, returns `None`.\n\n##### [§](#examples-125)Examples\n\n```\nlet v = &[10, 40, 30];\nassert_eq!(v.strip_prefix(&[10]), Some(&[40, 30][..]));\nassert_eq!(v.strip_prefix(&[10, 40]), Some(&[30][..]));\nassert_eq!(v.strip_prefix(&[10, 40, 30]), Some(&[][..]));\nassert_eq!(v.strip_prefix(&[50]), None);\nassert_eq!(v.strip_prefix(&[10, 50]), None);\n\nlet prefix : &str = \"he\";\nassert_eq!(b\"hello\".strip_prefix(prefix.as_bytes()),\n           Some(b\"llo\".as_ref()));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v+=+%26%5B10,+40,+30%5D;%0A++++assert_eq!(v.strip_prefix(%26%5B10%5D),+Some(%26%5B40,+30%5D%5B..%5D));%0A++++assert_eq!(v.strip_prefix(%26%5B10,+40%5D),+Some(%26%5B30%5D%5B..%5D));%0A++++assert_eq!(v.strip_prefix(%26%5B10,+40,+30%5D),+Some(%26%5B%5D%5B..%5D));%0A++++assert_eq!(v.strip_prefix(%26%5B50%5D),+None);%0A++++assert_eq!(v.strip_prefix(%26%5B10,+50%5D),+None);%0A++++%0A++++let+prefix+:+%26str+=+%22he%22;%0A++++assert_eq!(b%22hello%22.strip_prefix(prefix.as_bytes()),%0A+++++++++++++++Some(b%22llo%22.as_ref()));%0A%7D&edition=2021)\n\n1.51.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#2654-2656)\n\nReturns a subslice with the suffix removed.\n\nIf the slice ends with `suffix`, returns the subslice before the suffix, wrapped in `Some`. If `suffix` is empty, simply returns the original slice. If `suffix` is equal to the original slice, returns an empty slice.\n\nIf the slice does not end with `suffix`, returns `None`.\n\n##### [§](#examples-126)Examples\n\n```\nlet v = &[10, 40, 30];\nassert_eq!(v.strip_suffix(&[30]), Some(&[10, 40][..]));\nassert_eq!(v.strip_suffix(&[40, 30]), Some(&[10][..]));\nassert_eq!(v.strip_suffix(&[10, 40, 30]), Some(&[][..]));\nassert_eq!(v.strip_suffix(&[50]), None);\nassert_eq!(v.strip_suffix(&[50, 30]), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v+=+%26%5B10,+40,+30%5D;%0A++++assert_eq!(v.strip_suffix(%26%5B30%5D),+Some(%26%5B10,+40%5D%5B..%5D));%0A++++assert_eq!(v.strip_suffix(%26%5B40,+30%5D),+Some(%26%5B10%5D%5B..%5D));%0A++++assert_eq!(v.strip_suffix(%26%5B10,+40,+30%5D),+Some(%26%5B%5D%5B..%5D));%0A++++assert_eq!(v.strip_suffix(%26%5B50%5D),+None);%0A++++assert_eq!(v.strip_suffix(%26%5B50,+30%5D),+None);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#2740-2742)\n\nBinary searches this slice for a given element. If the slice is not sorted, the returned result is unspecified and meaningless.\n\nIf the value is found then [`Result::Ok`](about:blank/result/enum.Result.html#variant.Ok \"variant std::result::Result::Ok\") is returned, containing the index of the matching element. If there are multiple matches, then any one of the matches could be returned. The index is chosen deterministically, but is subject to change in future versions of Rust. If the value is not found then [`Result::Err`](about:blank/result/enum.Result.html#variant.Err \"variant std::result::Result::Err\") is returned, containing the index where a matching element could be inserted while maintaining sorted order.\n\nSee also [`binary_search_by`](about:blank/primitive.slice.html#method.binary_search_by \"method slice::binary_search_by\"), [`binary_search_by_key`](about:blank/primitive.slice.html#method.binary_search_by_key \"method slice::binary_search_by_key\"), and [`partition_point`](about:blank/primitive.slice.html#method.partition_point \"method slice::partition_point\").\n\n##### [§](#examples-127)Examples\n\nLooks up a series of four elements. The first is found, with a uniquely determined position; the second and third are not found; the fourth could match any position in `[1, 4]`.\n\n```\nlet s = [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55];\n\nassert_eq!(s.binary_search(&13),  Ok(9));\nassert_eq!(s.binary_search(&4),   Err(7));\nassert_eq!(s.binary_search(&100), Err(13));\nlet r = s.binary_search(&1);\nassert!(match r { Ok(1..=4) => true, _ => false, });\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%5B0,+1,+1,+1,+1,+2,+3,+5,+8,+13,+21,+34,+55%5D;%0A++++%0A++++assert_eq!(s.binary_search(%2613),++Ok(9));%0A++++assert_eq!(s.binary_search(%264),+++Err(7));%0A++++assert_eq!(s.binary_search(%26100),+Err(13));%0A++++let+r+=+s.binary_search(%261);%0A++++assert!(match+r+%7B+Ok(1..=4)+=%3E+true,+_+=%3E+false,+%7D);%0A%7D&edition=2021)\n\nIf you want to find that whole _range_ of matching items, rather than an arbitrary matching one, that can be done using [`partition_point`](about:blank/primitive.slice.html#method.partition_point \"method slice::partition_point\"):\n\n```\nlet s = [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55];\n\nlet low = s.partition_point(|x| x < &1);\nassert_eq!(low, 1);\nlet high = s.partition_point(|x| x <= &1);\nassert_eq!(high, 5);\nlet r = s.binary_search(&1);\nassert!((low..high).contains(&r.unwrap()));\n\nassert!(s[..low].iter().all(|&x| x < 1));\nassert!(s[low..high].iter().all(|&x| x == 1));\nassert!(s[high..].iter().all(|&x| x > 1));\n\n// For something not found, the \"range\" of equal items is empty\nassert_eq!(s.partition_point(|x| x < &11), 9);\nassert_eq!(s.partition_point(|x| x <= &11), 9);\nassert_eq!(s.binary_search(&11), Err(9));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%5B0,+1,+1,+1,+1,+2,+3,+5,+8,+13,+21,+34,+55%5D;%0A++++%0A++++let+low+=+s.partition_point(%7Cx%7C+x+%3C+%261);%0A++++assert_eq!(low,+1);%0A++++let+high+=+s.partition_point(%7Cx%7C+x+%3C=+%261);%0A++++assert_eq!(high,+5);%0A++++let+r+=+s.binary_search(%261);%0A++++assert!((low..high).contains(%26r.unwrap()));%0A++++%0A++++assert!(s%5B..low%5D.iter().all(%7C%26x%7C+x+%3C+1));%0A++++assert!(s%5Blow..high%5D.iter().all(%7C%26x%7C+x+==+1));%0A++++assert!(s%5Bhigh..%5D.iter().all(%7C%26x%7C+x+%3E+1));%0A++++%0A++++//+For+something+not+found,+the+%22range%22+of+equal+items+is+empty%0A++++assert_eq!(s.partition_point(%7Cx%7C+x+%3C+%2611),+9);%0A++++assert_eq!(s.partition_point(%7Cx%7C+x+%3C=+%2611),+9);%0A++++assert_eq!(s.binary_search(%2611),+Err(9));%0A%7D&edition=2021)\n\nIf you want to insert an item to a sorted vector, while maintaining sort order, consider using [`partition_point`](about:blank/primitive.slice.html#method.partition_point \"method slice::partition_point\"):\n\n```\nlet mut s = vec![0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55];\nlet num = 42;\nlet idx = s.partition_point(|&x| x <= num);\n// If `num` is unique, `s.partition_point(|&x| x < num)` (with `<`) is equivalent to\n// `s.binary_search(&num).unwrap_or_else(|x| x)`, but using `<=` will allow `insert`\n// to shift less elements.\ns.insert(idx, num);\nassert_eq!(s, [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 42, 55]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+s+=+vec!%5B0,+1,+1,+1,+1,+2,+3,+5,+8,+13,+21,+34,+55%5D;%0A++++let+num+=+42;%0A++++let+idx+=+s.partition_point(%7C%26x%7C+x+%3C=+num);%0A++++//+If+%60num%60+is+unique,+%60s.partition_point(%7C%26x%7C+x+%3C+num)%60+(with+%60%3C%60)+is+equivalent+to%0A++++//+%60s.binary_search(%26num).unwrap_or_else(%7Cx%7C+x)%60,+but+using+%60%3C=%60+will+allow+%60insert%60%0A++++//+to+shift+less+elements.%0A++++s.insert(idx,+num);%0A++++assert_eq!(s,+%5B0,+1,+1,+1,+1,+2,+3,+5,+8,+13,+21,+34,+42,+55%5D);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#2791-2793)\n\nBinary searches this slice with a comparator function.\n\nThe comparator function should return an order code that indicates whether its argument is `Less`, `Equal` or `Greater` the desired target. If the slice is not sorted or if the comparator function does not implement an order consistent with the sort order of the underlying slice, the returned result is unspecified and meaningless.\n\nIf the value is found then [`Result::Ok`](about:blank/result/enum.Result.html#variant.Ok \"variant std::result::Result::Ok\") is returned, containing the index of the matching element. If there are multiple matches, then any one of the matches could be returned. The index is chosen deterministically, but is subject to change in future versions of Rust. If the value is not found then [`Result::Err`](about:blank/result/enum.Result.html#variant.Err \"variant std::result::Result::Err\") is returned, containing the index where a matching element could be inserted while maintaining sorted order.\n\nSee also [`binary_search`](about:blank/primitive.slice.html#method.binary_search \"method slice::binary_search\"), [`binary_search_by_key`](about:blank/primitive.slice.html#method.binary_search_by_key \"method slice::binary_search_by_key\"), and [`partition_point`](about:blank/primitive.slice.html#method.partition_point \"method slice::partition_point\").\n\n##### [§](#examples-128)Examples\n\nLooks up a series of four elements. The first is found, with a uniquely determined position; the second and third are not found; the fourth could match any position in `[1, 4]`.\n\n```\nlet s = [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55];\n\nlet seek = 13;\nassert_eq!(s.binary_search_by(|probe| probe.cmp(&seek)), Ok(9));\nlet seek = 4;\nassert_eq!(s.binary_search_by(|probe| probe.cmp(&seek)), Err(7));\nlet seek = 100;\nassert_eq!(s.binary_search_by(|probe| probe.cmp(&seek)), Err(13));\nlet seek = 1;\nlet r = s.binary_search_by(|probe| probe.cmp(&seek));\nassert!(match r { Ok(1..=4) => true, _ => false, });\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%5B0,+1,+1,+1,+1,+2,+3,+5,+8,+13,+21,+34,+55%5D;%0A++++%0A++++let+seek+=+13;%0A++++assert_eq!(s.binary_search_by(%7Cprobe%7C+probe.cmp(%26seek)),+Ok(9));%0A++++let+seek+=+4;%0A++++assert_eq!(s.binary_search_by(%7Cprobe%7C+probe.cmp(%26seek)),+Err(7));%0A++++let+seek+=+100;%0A++++assert_eq!(s.binary_search_by(%7Cprobe%7C+probe.cmp(%26seek)),+Err(13));%0A++++let+seek+=+1;%0A++++let+r+=+s.binary_search_by(%7Cprobe%7C+probe.cmp(%26seek));%0A++++assert!(match+r+%7B+Ok(1..=4)+=%3E+true,+_+=%3E+false,+%7D);%0A%7D&edition=2021)\n\n1.10.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#2879-2882)\n\nBinary searches this slice with a key extraction function.\n\nAssumes that the slice is sorted by the key, for instance with [`sort_by_key`](about:blank/primitive.slice.html#method.sort_by_key \"method slice::sort_by_key\") using the same key extraction function. If the slice is not sorted by the key, the returned result is unspecified and meaningless.\n\nIf the value is found then [`Result::Ok`](about:blank/result/enum.Result.html#variant.Ok \"variant std::result::Result::Ok\") is returned, containing the index of the matching element. If there are multiple matches, then any one of the matches could be returned. The index is chosen deterministically, but is subject to change in future versions of Rust. If the value is not found then [`Result::Err`](about:blank/result/enum.Result.html#variant.Err \"variant std::result::Result::Err\") is returned, containing the index where a matching element could be inserted while maintaining sorted order.\n\nSee also [`binary_search`](about:blank/primitive.slice.html#method.binary_search \"method slice::binary_search\"), [`binary_search_by`](about:blank/primitive.slice.html#method.binary_search_by \"method slice::binary_search_by\"), and [`partition_point`](about:blank/primitive.slice.html#method.partition_point \"method slice::partition_point\").\n\n##### [§](#examples-129)Examples\n\nLooks up a series of four elements in a slice of pairs sorted by their second elements. The first is found, with a uniquely determined position; the second and third are not found; the fourth could match any position in `[1, 4]`.\n\n```\nlet s = [(0, 0), (2, 1), (4, 1), (5, 1), (3, 1),\n         (1, 2), (2, 3), (4, 5), (5, 8), (3, 13),\n         (1, 21), (2, 34), (4, 55)];\n\nassert_eq!(s.binary_search_by_key(&13, |&(a, b)| b),  Ok(9));\nassert_eq!(s.binary_search_by_key(&4, |&(a, b)| b),   Err(7));\nassert_eq!(s.binary_search_by_key(&100, |&(a, b)| b), Err(13));\nlet r = s.binary_search_by_key(&1, |&(a, b)| b);\nassert!(match r { Ok(1..=4) => true, _ => false, });\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%5B(0,+0),+(2,+1),+(4,+1),+(5,+1),+(3,+1),%0A+++++++++++++(1,+2),+(2,+3),+(4,+5),+(5,+8),+(3,+13),%0A+++++++++++++(1,+21),+(2,+34),+(4,+55)%5D;%0A++++%0A++++assert_eq!(s.binary_search_by_key(%2613,+%7C%26(a,+b)%7C+b),++Ok(9));%0A++++assert_eq!(s.binary_search_by_key(%264,+%7C%26(a,+b)%7C+b),+++Err(7));%0A++++assert_eq!(s.binary_search_by_key(%26100,+%7C%26(a,+b)%7C+b),+Err(13));%0A++++let+r+=+s.binary_search_by_key(%261,+%7C%26(a,+b)%7C+b);%0A++++assert!(match+r+%7B+Ok(1..=4)+=%3E+true,+_+=%3E+false,+%7D);%0A%7D&edition=2021)\n\n1.20.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#2915-2917)\n\nSorts the slice, but might not preserve the order of equal elements.\n\nThis sort is unstable (i.e., may reorder equal elements), in-place (i.e., does not allocate), and _O_(_n_ \\* log(_n_)) worst-case.\n\n##### [§](#current-implementation-2)Current implementation\n\nThe current algorithm is based on [pattern-defeating quicksort](https://github.com/orlp/pdqsort) by Orson Peters, which combines the fast average case of randomized quicksort with the fast worst case of heapsort, while achieving linear time on slices with certain patterns. It uses some randomization to avoid degenerate cases, but with a fixed seed to always provide deterministic behavior.\n\nIt is typically faster than stable sorting, except in a few special cases, e.g., when the slice consists of several concatenated sorted sequences.\n\n##### [§](#examples-130)Examples\n\n```\nlet mut v = [-5, 4, 1, -3, 2];\n\nv.sort_unstable();\nassert!(v == [-5, -3, 1, 2, 4]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+%5B-5,+4,+1,+-3,+2%5D;%0A++++%0A++++v.sort_unstable();%0A++++assert!(v+==+%5B-5,+-3,+1,+2,+4%5D);%0A%7D&edition=2021)\n\n1.20.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#2970-2972)\n\nSorts the slice with a comparator function, but might not preserve the order of equal elements.\n\nThis sort is unstable (i.e., may reorder equal elements), in-place (i.e., does not allocate), and _O_(_n_ \\* log(_n_)) worst-case.\n\nThe comparator function must define a total ordering for the elements in the slice. If the ordering is not total, the order of the elements is unspecified. An order is a total order if it is (for all `a`, `b` and `c`):\n\n-   total and antisymmetric: exactly one of `a < b`, `a == b` or `a > b` is true, and\n-   transitive, `a < b` and `b < c` implies `a < c`. The same must hold for both `==` and `>`.\n\nFor example, while [`f64`](../primitive.f64.html \"primitive f64\") doesn’t implement [`Ord`](../cmp/trait.Ord.html \"trait std::cmp::Ord\") because `NaN != NaN`, we can use `partial_cmp` as our sort function when we know the slice doesn’t contain a `NaN`.\n\n```\nlet mut floats = [5f64, 4.0, 1.0, 3.0, 2.0];\nfloats.sort_unstable_by(|a, b| a.partial_cmp(b).unwrap());\nassert_eq!(floats, [1.0, 2.0, 3.0, 4.0, 5.0]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+floats+=+%5B5f64,+4.0,+1.0,+3.0,+2.0%5D;%0A++++floats.sort_unstable_by(%7Ca,+b%7C+a.partial_cmp(b).unwrap());%0A++++assert_eq!(floats,+%5B1.0,+2.0,+3.0,+4.0,+5.0%5D);%0A%7D&edition=2021)\n\n##### [§](#current-implementation-3)Current implementation\n\nThe current algorithm is based on [pattern-defeating quicksort](https://github.com/orlp/pdqsort) by Orson Peters, which combines the fast average case of randomized quicksort with the fast worst case of heapsort, while achieving linear time on slices with certain patterns. It uses some randomization to avoid degenerate cases, but with a fixed seed to always provide deterministic behavior.\n\nIt is typically faster than stable sorting, except in a few special cases, e.g., when the slice consists of several concatenated sorted sequences.\n\n##### [§](#examples-131)Examples\n\n```\nlet mut v = [5, 4, 1, 3, 2];\nv.sort_unstable_by(|a, b| a.cmp(b));\nassert!(v == [1, 2, 3, 4, 5]);\n\n// reverse sorting\nv.sort_unstable_by(|a, b| b.cmp(a));\nassert!(v == [5, 4, 3, 2, 1]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+%5B5,+4,+1,+3,+2%5D;%0A++++v.sort_unstable_by(%7Ca,+b%7C+a.cmp(b));%0A++++assert!(v+==+%5B1,+2,+3,+4,+5%5D);%0A++++%0A++++//+reverse+sorting%0A++++v.sort_unstable_by(%7Ca,+b%7C+b.cmp(a));%0A++++assert!(v+==+%5B5,+4,+3,+2,+1%5D);%0A%7D&edition=2021)\n\n1.20.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#3008-3011)\n\nSorts the slice with a key extraction function, but might not preserve the order of equal elements.\n\nThis sort is unstable (i.e., may reorder equal elements), in-place (i.e., does not allocate), and _O_(_m_ \\* _n_ \\* log(_n_)) worst-case, where the key function is _O_(_m_).\n\n##### [§](#current-implementation-4)Current implementation\n\nThe current algorithm is based on [pattern-defeating quicksort](https://github.com/orlp/pdqsort) by Orson Peters, which combines the fast average case of randomized quicksort with the fast worst case of heapsort, while achieving linear time on slices with certain patterns. It uses some randomization to avoid degenerate cases, but with a fixed seed to always provide deterministic behavior.\n\nDue to its key calling strategy, [`sort_unstable_by_key`](#method.sort_unstable_by_key) is likely to be slower than [`sort_by_cached_key`](#method.sort_by_cached_key) in cases where the key function is expensive.\n\n##### [§](#examples-132)Examples\n\n```\nlet mut v = [-5i32, 4, 1, -3, 2];\n\nv.sort_unstable_by_key(|k| k.abs());\nassert!(v == [1, 2, -3, 4, -5]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+%5B-5i32,+4,+1,+-3,+2%5D;%0A++++%0A++++v.sort_unstable_by_key(%7Ck%7C+k.abs());%0A++++assert!(v+==+%5B1,+2,+-3,+4,+-5%5D);%0A%7D&edition=2021)\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#3063-3065)\n\nReorder the slice such that the element at `index` after the reordering is at its final sorted position.\n\nThis reordering has the additional property that any value at position `i < index` will be less than or equal to any value at a position `j > index`. Additionally, this reordering is unstable (i.e. any number of equal elements may end up at position `index`), in-place (i.e. does not allocate), and runs in _O_(_n_) time. This function is also known as “kth element” in other libraries.\n\nIt returns a triplet of the following from the reordered slice: the subslice prior to `index`, the element at `index`, and the subslice after `index`; accordingly, the values in those two subslices will respectively all be less-than-or-equal-to and greater-than-or-equal-to the value of the element at `index`.\n\n##### [§](#current-implementation-5)Current implementation\n\nThe current algorithm is an introselect implementation based on Pattern Defeating Quicksort, which is also the basis for [`sort_unstable`](about:blank/primitive.slice.html#method.sort_unstable \"method slice::sort_unstable\"). The fallback algorithm is Median of Medians using Tukey’s Ninther for pivot selection, which guarantees linear runtime for all inputs.\n\n##### [§](#panics-35)Panics\n\nPanics when `index >= len()`, meaning it always panics on empty slices.\n\n##### [§](#examples-133)Examples\n\n```\nlet mut v = [-5i32, 4, 2, -3, 1];\n\n// Find the items less than or equal to the median, the median, and greater than or equal to\n// the median.\nlet (lesser, median, greater) = v.select_nth_unstable(2);\n\nassert!(lesser == [-3, -5] || lesser == [-5, -3]);\nassert_eq!(median, &mut 1);\nassert!(greater == [4, 2] || greater == [2, 4]);\n\n// We are only guaranteed the slice will be one of the following, based on the way we sort\n// about the specified index.\nassert!(v == [-3, -5, 1, 2, 4] ||\n        v == [-5, -3, 1, 2, 4] ||\n        v == [-3, -5, 1, 4, 2] ||\n        v == [-5, -3, 1, 4, 2]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+%5B-5i32,+4,+2,+-3,+1%5D;%0A++++%0A++++//+Find+the+items+less+than+or+equal+to+the+median,+the+median,+and+greater+than+or+equal+to%0A++++//+the+median.%0A++++let+(lesser,+median,+greater)+=+v.select_nth_unstable(2);%0A++++%0A++++assert!(lesser+==+%5B-3,+-5%5D+%7C%7C+lesser+==+%5B-5,+-3%5D);%0A++++assert_eq!(median,+%26mut+1);%0A++++assert!(greater+==+%5B4,+2%5D+%7C%7C+greater+==+%5B2,+4%5D);%0A++++%0A++++//+We+are+only+guaranteed+the+slice+will+be+one+of+the+following,+based+on+the+way+we+sort%0A++++//+about+the+specified+index.%0A++++assert!(v+==+%5B-3,+-5,+1,+2,+4%5D+%7C%7C%0A++++++++++++v+==+%5B-5,+-3,+1,+2,+4%5D+%7C%7C%0A++++++++++++v+==+%5B-3,+-5,+1,+4,+2%5D+%7C%7C%0A++++++++++++v+==+%5B-5,+-3,+1,+4,+2%5D);%0A%7D&edition=2021)\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#3119-3125)\n\nReorder the slice with a comparator function such that the element at `index` after the reordering is at its final sorted position.\n\nThis reordering has the additional property that any value at position `i < index` will be less than or equal to any value at a position `j > index` using the comparator function. Additionally, this reordering is unstable (i.e. any number of equal elements may end up at position `index`), in-place (i.e. does not allocate), and runs in _O_(_n_) time. This function is also known as “kth element” in other libraries.\n\nIt returns a triplet of the following from the slice reordered according to the provided comparator function: the subslice prior to `index`, the element at `index`, and the subslice after `index`; accordingly, the values in those two subslices will respectively all be less-than-or-equal-to and greater-than-or-equal-to the value of the element at `index`.\n\n##### [§](#current-implementation-6)Current implementation\n\nThe current algorithm is an introselect implementation based on Pattern Defeating Quicksort, which is also the basis for [`sort_unstable`](about:blank/primitive.slice.html#method.sort_unstable \"method slice::sort_unstable\"). The fallback algorithm is Median of Medians using Tukey’s Ninther for pivot selection, which guarantees linear runtime for all inputs.\n\n##### [§](#panics-36)Panics\n\nPanics when `index >= len()`, meaning it always panics on empty slices.\n\n##### [§](#examples-134)Examples\n\n```\nlet mut v = [-5i32, 4, 2, -3, 1];\n\n// Find the items less than or equal to the median, the median, and greater than or equal to\n// the median as if the slice were sorted in descending order.\nlet (lesser, median, greater) = v.select_nth_unstable_by(2, |a, b| b.cmp(a));\n\nassert!(lesser == [4, 2] || lesser == [2, 4]);\nassert_eq!(median, &mut 1);\nassert!(greater == [-3, -5] || greater == [-5, -3]);\n\n// We are only guaranteed the slice will be one of the following, based on the way we sort\n// about the specified index.\nassert!(v == [2, 4, 1, -5, -3] ||\n        v == [2, 4, 1, -3, -5] ||\n        v == [4, 2, 1, -5, -3] ||\n        v == [4, 2, 1, -3, -5]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+%5B-5i32,+4,+2,+-3,+1%5D;%0A++++%0A++++//+Find+the+items+less+than+or+equal+to+the+median,+the+median,+and+greater+than+or+equal+to%0A++++//+the+median+as+if+the+slice+were+sorted+in+descending+order.%0A++++let+(lesser,+median,+greater)+=+v.select_nth_unstable_by(2,+%7Ca,+b%7C+b.cmp(a));%0A++++%0A++++assert!(lesser+==+%5B4,+2%5D+%7C%7C+lesser+==+%5B2,+4%5D);%0A++++assert_eq!(median,+%26mut+1);%0A++++assert!(greater+==+%5B-3,+-5%5D+%7C%7C+greater+==+%5B-5,+-3%5D);%0A++++%0A++++//+We+are+only+guaranteed+the+slice+will+be+one+of+the+following,+based+on+the+way+we+sort%0A++++//+about+the+specified+index.%0A++++assert!(v+==+%5B2,+4,+1,+-5,+-3%5D+%7C%7C%0A++++++++++++v+==+%5B2,+4,+1,+-3,+-5%5D+%7C%7C%0A++++++++++++v+==+%5B4,+2,+1,+-5,+-3%5D+%7C%7C%0A++++++++++++v+==+%5B4,+2,+1,+-3,+-5%5D);%0A%7D&edition=2021)\n\n1.49.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#3179-3186)\n\nReorder the slice with a key extraction function such that the element at `index` after the reordering is at its final sorted position.\n\nThis reordering has the additional property that any value at position `i < index` will be less than or equal to any value at a position `j > index` using the key extraction function. Additionally, this reordering is unstable (i.e. any number of equal elements may end up at position `index`), in-place (i.e. does not allocate), and runs in _O_(_n_) time. This function is also known as “kth element” in other libraries.\n\nIt returns a triplet of the following from the slice reordered according to the provided key extraction function: the subslice prior to `index`, the element at `index`, and the subslice after `index`; accordingly, the values in those two subslices will respectively all be less-than-or-equal-to and greater-than-or-equal-to the value of the element at `index`.\n\n##### [§](#current-implementation-7)Current implementation\n\nThe current algorithm is an introselect implementation based on Pattern Defeating Quicksort, which is also the basis for [`sort_unstable`](about:blank/primitive.slice.html#method.sort_unstable \"method slice::sort_unstable\"). The fallback algorithm is Median of Medians using Tukey’s Ninther for pivot selection, which guarantees linear runtime for all inputs.\n\n##### [§](#panics-37)Panics\n\nPanics when `index >= len()`, meaning it always panics on empty slices.\n\n##### [§](#examples-135)Examples\n\n```\nlet mut v = [-5i32, 4, 1, -3, 2];\n\n// Find the items less than or equal to the median, the median, and greater than or equal to\n// the median as if the slice were sorted according to absolute value.\nlet (lesser, median, greater) = v.select_nth_unstable_by_key(2, |a| a.abs());\n\nassert!(lesser == [1, 2] || lesser == [2, 1]);\nassert_eq!(median, &mut -3);\nassert!(greater == [4, -5] || greater == [-5, 4]);\n\n// We are only guaranteed the slice will be one of the following, based on the way we sort\n// about the specified index.\nassert!(v == [1, 2, -3, 4, -5] ||\n        v == [1, 2, -3, -5, 4] ||\n        v == [2, 1, -3, 4, -5] ||\n        v == [2, 1, -3, -5, 4]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+%5B-5i32,+4,+1,+-3,+2%5D;%0A++++%0A++++//+Find+the+items+less+than+or+equal+to+the+median,+the+median,+and+greater+than+or+equal+to%0A++++//+the+median+as+if+the+slice+were+sorted+according+to+absolute+value.%0A++++let+(lesser,+median,+greater)+=+v.select_nth_unstable_by_key(2,+%7Ca%7C+a.abs());%0A++++%0A++++assert!(lesser+==+%5B1,+2%5D+%7C%7C+lesser+==+%5B2,+1%5D);%0A++++assert_eq!(median,+%26mut+-3);%0A++++assert!(greater+==+%5B4,+-5%5D+%7C%7C+greater+==+%5B-5,+4%5D);%0A++++%0A++++//+We+are+only+guaranteed+the+slice+will+be+one+of+the+following,+based+on+the+way+we+sort%0A++++//+about+the+specified+index.%0A++++assert!(v+==+%5B1,+2,+-3,+4,+-5%5D+%7C%7C%0A++++++++++++v+==+%5B1,+2,+-3,+-5,+4%5D+%7C%7C%0A++++++++++++v+==+%5B2,+1,+-3,+4,+-5%5D+%7C%7C%0A++++++++++++v+==+%5B2,+1,+-3,+-5,+4%5D);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#3213-3215)\n\n🔬This is a nightly-only experimental API. (`slice_partition_dedup` [#54279](https://github.com/rust-lang/rust/issues/54279))\n\nMoves all consecutive repeated elements to the end of the slice according to the [`PartialEq`](../cmp/trait.PartialEq.html \"trait std::cmp::PartialEq\") trait implementation.\n\nReturns two slices. The first contains no consecutive repeated elements. The second contains all the duplicates in no specified order.\n\nIf the slice is sorted, the first returned slice contains no duplicates.\n\n##### [§](#examples-136)Examples\n\n```\n#![feature(slice_partition_dedup)]\n\nlet mut slice = [1, 2, 2, 3, 3, 2, 1, 1];\n\nlet (dedup, duplicates) = slice.partition_dedup();\n\nassert_eq!(dedup, [1, 2, 3, 2, 1]);\nassert_eq!(duplicates, [2, 3, 1]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(slice_partition_dedup)%5D%0A%0Afn+main()+%7B%0A++++let+mut+slice+=+%5B1,+2,+2,+3,+3,+2,+1,+1%5D;%0A++++%0A++++let+(dedup,+duplicates)+=+slice.partition_dedup();%0A++++%0A++++assert_eq!(dedup,+%5B1,+2,+3,+2,+1%5D);%0A++++assert_eq!(duplicates,+%5B2,+3,+1%5D);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#3247-3249)\n\n🔬This is a nightly-only experimental API. (`slice_partition_dedup` [#54279](https://github.com/rust-lang/rust/issues/54279))\n\nMoves all but the first of consecutive elements to the end of the slice satisfying a given equality relation.\n\nReturns two slices. The first contains no consecutive repeated elements. The second contains all the duplicates in no specified order.\n\nThe `same_bucket` function is passed references to two elements from the slice and must determine if the elements compare equal. The elements are passed in opposite order from their order in the slice, so if `same_bucket(a, b)` returns `true`, `a` is moved at the end of the slice.\n\nIf the slice is sorted, the first returned slice contains no duplicates.\n\n##### [§](#examples-137)Examples\n\n```\n#![feature(slice_partition_dedup)]\n\nlet mut slice = [\"foo\", \"Foo\", \"BAZ\", \"Bar\", \"bar\", \"baz\", \"BAZ\"];\n\nlet (dedup, duplicates) = slice.partition_dedup_by(|a, b| a.eq_ignore_ascii_case(b));\n\nassert_eq!(dedup, [\"foo\", \"BAZ\", \"Bar\", \"baz\"]);\nassert_eq!(duplicates, [\"bar\", \"Foo\", \"BAZ\"]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(slice_partition_dedup)%5D%0A%0Afn+main()+%7B%0A++++let+mut+slice+=+%5B%22foo%22,+%22Foo%22,+%22BAZ%22,+%22Bar%22,+%22bar%22,+%22baz%22,+%22BAZ%22%5D;%0A++++%0A++++let+(dedup,+duplicates)+=+slice.partition_dedup_by(%7Ca,+b%7C+a.eq_ignore_ascii_case(b));%0A++++%0A++++assert_eq!(dedup,+%5B%22foo%22,+%22BAZ%22,+%22Bar%22,+%22baz%22%5D);%0A++++assert_eq!(duplicates,+%5B%22bar%22,+%22Foo%22,+%22BAZ%22%5D);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#3373-3376)\n\n🔬This is a nightly-only experimental API. (`slice_partition_dedup` [#54279](https://github.com/rust-lang/rust/issues/54279))\n\nMoves all but the first of consecutive elements to the end of the slice that resolve to the same key.\n\nReturns two slices. The first contains no consecutive repeated elements. The second contains all the duplicates in no specified order.\n\nIf the slice is sorted, the first returned slice contains no duplicates.\n\n##### [§](#examples-138)Examples\n\n```\n#![feature(slice_partition_dedup)]\n\nlet mut slice = [10, 20, 21, 30, 30, 20, 11, 13];\n\nlet (dedup, duplicates) = slice.partition_dedup_by_key(|i| *i / 10);\n\nassert_eq!(dedup, [10, 20, 30, 20, 11]);\nassert_eq!(duplicates, [21, 30, 13]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(slice_partition_dedup)%5D%0A%0Afn+main()+%7B%0A++++let+mut+slice+=+%5B10,+20,+21,+30,+30,+20,+11,+13%5D;%0A++++%0A++++let+(dedup,+duplicates)+=+slice.partition_dedup_by_key(%7Ci%7C+*i+/+10);%0A++++%0A++++assert_eq!(dedup,+%5B10,+20,+30,+20,+11%5D);%0A++++assert_eq!(duplicates,+%5B21,+30,+13%5D);%0A%7D&version=nightly&edition=2021)\n\n1.26.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#3412)\n\nRotates the slice in-place such that the first `mid` elements of the slice move to the end while the last `self.len() - mid` elements move to the front. After calling `rotate_left`, the element previously at index `mid` will become the first element in the slice.\n\n##### [§](#panics-38)Panics\n\nThis function will panic if `mid` is greater than the length of the slice. Note that `mid == self.len()` does _not_ panic and is a no-op rotation.\n\n##### [§](#complexity)Complexity\n\nTakes linear (in `self.len()`) time.\n\n##### [§](#examples-139)Examples\n\n```\nlet mut a = ['a', 'b', 'c', 'd', 'e', 'f'];\na.rotate_left(2);\nassert_eq!(a, ['c', 'd', 'e', 'f', 'a', 'b']);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+a+=+%5B%27a%27,+%27b%27,+%27c%27,+%27d%27,+%27e%27,+%27f%27%5D;%0A++++a.rotate_left(2);%0A++++assert_eq!(a,+%5B%27c%27,+%27d%27,+%27e%27,+%27f%27,+%27a%27,+%27b%27%5D);%0A%7D&edition=2021)\n\nRotating a subslice:\n\n```\nlet mut a = ['a', 'b', 'c', 'd', 'e', 'f'];\na[1..5].rotate_left(1);\nassert_eq!(a, ['a', 'c', 'd', 'e', 'b', 'f']);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+a+=+%5B%27a%27,+%27b%27,+%27c%27,+%27d%27,+%27e%27,+%27f%27%5D;%0A++++a%5B1..5%5D.rotate_left(1);%0A++++assert_eq!(a,+%5B%27a%27,+%27c%27,+%27d%27,+%27e%27,+%27b%27,+%27f%27%5D);%0A%7D&edition=2021)\n\n1.26.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#3455)\n\nRotates the slice in-place such that the first `self.len() - k` elements of the slice move to the end while the last `k` elements move to the front. After calling `rotate_right`, the element previously at index `self.len() - k` will become the first element in the slice.\n\n##### [§](#panics-39)Panics\n\nThis function will panic if `k` is greater than the length of the slice. Note that `k == self.len()` does _not_ panic and is a no-op rotation.\n\n##### [§](#complexity-1)Complexity\n\nTakes linear (in `self.len()`) time.\n\n##### [§](#examples-140)Examples\n\n```\nlet mut a = ['a', 'b', 'c', 'd', 'e', 'f'];\na.rotate_right(2);\nassert_eq!(a, ['e', 'f', 'a', 'b', 'c', 'd']);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+a+=+%5B%27a%27,+%27b%27,+%27c%27,+%27d%27,+%27e%27,+%27f%27%5D;%0A++++a.rotate_right(2);%0A++++assert_eq!(a,+%5B%27e%27,+%27f%27,+%27a%27,+%27b%27,+%27c%27,+%27d%27%5D);%0A%7D&edition=2021)\n\nRotating a subslice:\n\n```\nlet mut a = ['a', 'b', 'c', 'd', 'e', 'f'];\na[1..5].rotate_right(1);\nassert_eq!(a, ['a', 'e', 'b', 'c', 'd', 'f']);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+a+=+%5B%27a%27,+%27b%27,+%27c%27,+%27d%27,+%27e%27,+%27f%27%5D;%0A++++a%5B1..5%5D.rotate_right(1);%0A++++assert_eq!(a,+%5B%27a%27,+%27e%27,+%27b%27,+%27c%27,+%27d%27,+%27f%27%5D);%0A%7D&edition=2021)\n\n1.50.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#3478-3480)\n\nFills `self` with elements by cloning `value`.\n\n##### [§](#examples-141)Examples\n\n```\nlet mut buf = vec![0; 10];\nbuf.fill(1);\nassert_eq!(buf, vec![1; 10]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+buf+=+vec!%5B0;+10%5D;%0A++++buf.fill(1);%0A++++assert_eq!(buf,+vec!%5B1;+10%5D);%0A%7D&edition=2021)\n\n1.51.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#3502-3504)\n\nFills `self` with elements returned by calling a closure repeatedly.\n\nThis method uses a closure to create new values. If you’d rather [`Clone`](../clone/trait.Clone.html \"trait std::clone::Clone\") a given value, use [`fill`](about:blank/primitive.slice.html#method.fill \"method slice::fill\"). If you want to use the [`Default`](../default/trait.Default.html \"trait std::default::Default\") trait to generate values, you can pass [`Default::default`](about:blank/default/trait.Default.html#tymethod.default \"associated function std::default::Default::default\") as the argument.\n\n##### [§](#examples-142)Examples\n\n```\nlet mut buf = vec![1; 10];\nbuf.fill_with(Default::default);\nassert_eq!(buf, vec![0; 10]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+buf+=+vec!%5B1;+10%5D;%0A++++buf.fill_with(Default::default);%0A++++assert_eq!(buf,+vec!%5B0;+10%5D);%0A%7D&edition=2021)\n\n1.7.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#3565-3567)\n\nCopies the elements from `src` into `self`.\n\nThe length of `src` must be the same as `self`.\n\n##### [§](#panics-40)Panics\n\nThis function will panic if the two slices have different lengths.\n\n##### [§](#examples-143)Examples\n\nCloning two elements from a slice into another:\n\n```\nlet src = [1, 2, 3, 4];\nlet mut dst = [0, 0];\n\n// Because the slices have to be the same length,\n// we slice the source slice from four elements\n// to two. It will panic if we don't do this.\ndst.clone_from_slice(&src[2..]);\n\nassert_eq!(src, [1, 2, 3, 4]);\nassert_eq!(dst, [3, 4]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+src+=+%5B1,+2,+3,+4%5D;%0A++++let+mut+dst+=+%5B0,+0%5D;%0A++++%0A++++//+Because+the+slices+have+to+be+the+same+length,%0A++++//+we+slice+the+source+slice+from+four+elements%0A++++//+to+two.+It+will+panic+if+we+don%27t+do+this.%0A++++dst.clone_from_slice(%26src%5B2..%5D);%0A++++%0A++++assert_eq!(src,+%5B1,+2,+3,+4%5D);%0A++++assert_eq!(dst,+%5B3,+4%5D);%0A%7D&edition=2021)\n\nRust enforces that there can only be one mutable reference with no immutable references to a particular piece of data in a particular scope. Because of this, attempting to use `clone_from_slice` on a single slice will result in a compile failure:\n\n[ⓘ](# \"This example deliberately fails to compile\")\n\n```\nlet mut slice = [1, 2, 3, 4, 5];\n\nslice[..2].clone_from_slice(&slice[3..]); // compile fail!\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+slice+=+%5B1,+2,+3,+4,+5%5D;%0A++++%0A++++slice%5B..2%5D.clone_from_slice(%26slice%5B3..%5D);+//+compile+fail!%0A%7D&edition=2021)\n\nTo work around this, we can use [`split_at_mut`](about:blank/primitive.slice.html#method.split_at_mut \"method slice::split_at_mut\") to create two distinct sub-slices from a slice:\n\n```\nlet mut slice = [1, 2, 3, 4, 5];\n\n{\n    let (left, right) = slice.split_at_mut(2);\n    left.clone_from_slice(&right[1..]);\n}\n\nassert_eq!(slice, [4, 5, 3, 4, 5]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+slice+=+%5B1,+2,+3,+4,+5%5D;%0A++++%0A++++%7B%0A++++++++let+(left,+right)+=+slice.split_at_mut(2);%0A++++++++left.clone_from_slice(%26right%5B1..%5D);%0A++++%7D%0A++++%0A++++assert_eq!(slice,+%5B4,+5,+3,+4,+5%5D);%0A%7D&edition=2021)\n\n1.9.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#3629-3631)\n\nCopies all elements from `src` into `self`, using a memcpy.\n\nThe length of `src` must be the same as `self`.\n\nIf `T` does not implement `Copy`, use [`clone_from_slice`](about:blank/primitive.slice.html#method.clone_from_slice \"method slice::clone_from_slice\").\n\n##### [§](#panics-41)Panics\n\nThis function will panic if the two slices have different lengths.\n\n##### [§](#examples-144)Examples\n\nCopying two elements from a slice into another:\n\n```\nlet src = [1, 2, 3, 4];\nlet mut dst = [0, 0];\n\n// Because the slices have to be the same length,\n// we slice the source slice from four elements\n// to two. It will panic if we don't do this.\ndst.copy_from_slice(&src[2..]);\n\nassert_eq!(src, [1, 2, 3, 4]);\nassert_eq!(dst, [3, 4]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+src+=+%5B1,+2,+3,+4%5D;%0A++++let+mut+dst+=+%5B0,+0%5D;%0A++++%0A++++//+Because+the+slices+have+to+be+the+same+length,%0A++++//+we+slice+the+source+slice+from+four+elements%0A++++//+to+two.+It+will+panic+if+we+don%27t+do+this.%0A++++dst.copy_from_slice(%26src%5B2..%5D);%0A++++%0A++++assert_eq!(src,+%5B1,+2,+3,+4%5D);%0A++++assert_eq!(dst,+%5B3,+4%5D);%0A%7D&edition=2021)\n\nRust enforces that there can only be one mutable reference with no immutable references to a particular piece of data in a particular scope. Because of this, attempting to use `copy_from_slice` on a single slice will result in a compile failure:\n\n[ⓘ](# \"This example deliberately fails to compile\")\n\n```\nlet mut slice = [1, 2, 3, 4, 5];\n\nslice[..2].copy_from_slice(&slice[3..]); // compile fail!\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+slice+=+%5B1,+2,+3,+4,+5%5D;%0A++++%0A++++slice%5B..2%5D.copy_from_slice(%26slice%5B3..%5D);+//+compile+fail!%0A%7D&edition=2021)\n\nTo work around this, we can use [`split_at_mut`](about:blank/primitive.slice.html#method.split_at_mut \"method slice::split_at_mut\") to create two distinct sub-slices from a slice:\n\n```\nlet mut slice = [1, 2, 3, 4, 5];\n\n{\n    let (left, right) = slice.split_at_mut(2);\n    left.copy_from_slice(&right[1..]);\n}\n\nassert_eq!(slice, [4, 5, 3, 4, 5]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+slice+=+%5B1,+2,+3,+4,+5%5D;%0A++++%0A++++%7B%0A++++++++let+(left,+right)+=+slice.split_at_mut(2);%0A++++++++left.copy_from_slice(%26right%5B1..%5D);%0A++++%7D%0A++++%0A++++assert_eq!(slice,+%5B4,+5,+3,+4,+5%5D);%0A%7D&edition=2021)\n\n1.37.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#3683-3685)\n\nCopies elements from one part of the slice to another part of itself, using a memmove.\n\n`src` is the range within `self` to copy from. `dest` is the starting index of the range within `self` to copy to, which will have the same length as `src`. The two ranges may overlap. The ends of the two ranges must be less than or equal to `self.len()`.\n\n##### [§](#panics-42)Panics\n\nThis function will panic if either range exceeds the end of the slice, or if the end of `src` is before the start.\n\n##### [§](#examples-145)Examples\n\nCopying four bytes within a slice:\n\n```\nlet mut bytes = *b\"Hello, World!\";\n\nbytes.copy_within(1..5, 8);\n\nassert_eq!(&bytes, b\"Hello, Wello!\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+bytes+=+*b%22Hello,+World!%22;%0A++++%0A++++bytes.copy_within(1..5,+8);%0A++++%0A++++assert_eq!(%26bytes,+b%22Hello,+Wello!%22);%0A%7D&edition=2021)\n\n1.27.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#3750)\n\nSwaps all elements in `self` with those in `other`.\n\nThe length of `other` must be the same as `self`.\n\n##### [§](#panics-43)Panics\n\nThis function will panic if the two slices have different lengths.\n\n##### [§](#example)Example\n\nSwapping two elements across slices:\n\n```\nlet mut slice1 = [0, 0];\nlet mut slice2 = [1, 2, 3, 4];\n\nslice1.swap_with_slice(&mut slice2[2..]);\n\nassert_eq!(slice1, [3, 4]);\nassert_eq!(slice2, [1, 2, 0, 0]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+slice1+=+%5B0,+0%5D;%0A++++let+mut+slice2+=+%5B1,+2,+3,+4%5D;%0A++++%0A++++slice1.swap_with_slice(%26mut+slice2%5B2..%5D);%0A++++%0A++++assert_eq!(slice1,+%5B3,+4%5D);%0A++++assert_eq!(slice2,+%5B1,+2,+0,+0%5D);%0A%7D&edition=2021)\n\nRust enforces that there can only be one mutable reference to a particular piece of data in a particular scope. Because of this, attempting to use `swap_with_slice` on a single slice will result in a compile failure:\n\n[ⓘ](# \"This example deliberately fails to compile\")\n\n```\nlet mut slice = [1, 2, 3, 4, 5];\nslice[..2].swap_with_slice(&mut slice[3..]); // compile fail!\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+slice+=+%5B1,+2,+3,+4,+5%5D;%0A++++slice%5B..2%5D.swap_with_slice(%26mut+slice%5B3..%5D);+//+compile+fail!%0A%7D&edition=2021)\n\nTo work around this, we can use [`split_at_mut`](about:blank/primitive.slice.html#method.split_at_mut \"method slice::split_at_mut\") to create two distinct mutable sub-slices from a slice:\n\n```\nlet mut slice = [1, 2, 3, 4, 5];\n\n{\n    let (left, right) = slice.split_at_mut(2);\n    left.swap_with_slice(&mut right[1..]);\n}\n\nassert_eq!(slice, [4, 5, 3, 1, 2]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+slice+=+%5B1,+2,+3,+4,+5%5D;%0A++++%0A++++%7B%0A++++++++let+(left,+right)+=+slice.split_at_mut(2);%0A++++++++left.swap_with_slice(%26mut+right%5B1..%5D);%0A++++%7D%0A++++%0A++++assert_eq!(slice,+%5B4,+5,+3,+1,+2%5D);%0A%7D&edition=2021)\n\n1.30.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#3827)\n\nTransmute the slice to a slice of another type, ensuring alignment of the types is maintained.\n\nThis method splits the slice into three distinct slices: prefix, correctly aligned middle slice of a new type, and the suffix slice. The middle part will be as big as possible under the given alignment constraint and element size.\n\nThis method has no purpose when either input element `T` or output element `U` are zero-sized and will return the original slice without splitting anything.\n\n##### [§](#safety-10)Safety\n\nThis method is essentially a `transmute` with respect to the elements in the returned middle slice, so all the usual caveats pertaining to `transmute::<T, U>` also apply here.\n\n##### [§](#examples-146)Examples\n\nBasic usage:\n\n```\nunsafe {\n    let bytes: [u8; 7] = [1, 2, 3, 4, 5, 6, 7];\n    let (prefix, shorts, suffix) = bytes.align_to::<u16>();\n    // less_efficient_algorithm_for_bytes(prefix);\n    // more_efficient_algorithm_for_aligned_shorts(shorts);\n    // less_efficient_algorithm_for_bytes(suffix);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++unsafe+%7B%0A++++++++let+bytes:+%5Bu8;+7%5D+=+%5B1,+2,+3,+4,+5,+6,+7%5D;%0A++++++++let+(prefix,+shorts,+suffix)+=+bytes.align_to::%3Cu16%3E();%0A++++++++//+less_efficient_algorithm_for_bytes(prefix);%0A++++++++//+more_efficient_algorithm_for_aligned_shorts(shorts);%0A++++++++//+less_efficient_algorithm_for_bytes(suffix);%0A++++%7D%0A%7D&edition=2021)\n\n1.30.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#3892)\n\nTransmute the mutable slice to a mutable slice of another type, ensuring alignment of the types is maintained.\n\nThis method splits the slice into three distinct slices: prefix, correctly aligned middle slice of a new type, and the suffix slice. The middle part will be as big as possible under the given alignment constraint and element size.\n\nThis method has no purpose when either input element `T` or output element `U` are zero-sized and will return the original slice without splitting anything.\n\n##### [§](#safety-11)Safety\n\nThis method is essentially a `transmute` with respect to the elements in the returned middle slice, so all the usual caveats pertaining to `transmute::<T, U>` also apply here.\n\n##### [§](#examples-147)Examples\n\nBasic usage:\n\n```\nunsafe {\n    let mut bytes: [u8; 7] = [1, 2, 3, 4, 5, 6, 7];\n    let (prefix, shorts, suffix) = bytes.align_to_mut::<u16>();\n    // less_efficient_algorithm_for_bytes(prefix);\n    // more_efficient_algorithm_for_aligned_shorts(shorts);\n    // less_efficient_algorithm_for_bytes(suffix);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++unsafe+%7B%0A++++++++let+mut+bytes:+%5Bu8;+7%5D+=+%5B1,+2,+3,+4,+5,+6,+7%5D;%0A++++++++let+(prefix,+shorts,+suffix)+=+bytes.align_to_mut::%3Cu16%3E();%0A++++++++//+less_efficient_algorithm_for_bytes(prefix);%0A++++++++//+more_efficient_algorithm_for_aligned_shorts(shorts);%0A++++++++//+less_efficient_algorithm_for_bytes(suffix);%0A++++%7D%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#3992-3996)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nSplit a slice into a prefix, a middle of aligned SIMD types, and a suffix.\n\nThis is a safe wrapper around [`slice::align_to`](about:blank/primitive.slice.html#method.align_to \"method slice::align_to\"), so has the same weak postconditions as that method. You’re only assured that `self.len() == prefix.len() + middle.len() * LANES + suffix.len()`.\n\nNotably, all of the following are possible:\n\n-   `prefix.len() >= LANES`.\n-   `middle.is_empty()` despite `self.len() >= 3 * LANES`.\n-   `suffix.len() >= LANES`.\n\nThat said, this is a safe method, so if you’re only writing safe code, then this can at most cause incorrect logic, not unsoundness.\n\n##### [§](#panics-44)Panics\n\nThis will panic if the size of the SIMD type is different from `LANES` times that of the scalar.\n\nAt the time of writing, the trait restrictions on `Simd<T, LANES>` keeps that from ever happening, as only power-of-two numbers of lanes are supported. It’s possible that, in the future, those restrictions might be lifted in a way that would make it possible to see panics from this method for something like `LANES == 3`.\n\n##### [§](#examples-148)Examples\n\n```\n#![feature(portable_simd)]\nuse core::simd::prelude::*;\n\nlet short = &[1, 2, 3];\nlet (prefix, middle, suffix) = short.as_simd::<4>();\nassert_eq!(middle, []); // Not enough elements for anything in the middle\n\n// They might be split in any possible way between prefix and suffix\nlet it = prefix.iter().chain(suffix).copied();\nassert_eq!(it.collect::<Vec<_>>(), vec![1, 2, 3]);\n\nfn basic_simd_sum(x: &[f32]) -> f32 {\n    use std::ops::Add;\n    let (prefix, middle, suffix) = x.as_simd();\n    let sums = f32x4::from_array([\n        prefix.iter().copied().sum(),\n        0.0,\n        0.0,\n        suffix.iter().copied().sum(),\n    ]);\n    let sums = middle.iter().copied().fold(sums, f32x4::add);\n    sums.reduce_sum()\n}\n\nlet numbers: Vec<f32> = (1..101).map(|x| x as _).collect();\nassert_eq!(basic_simd_sum(&numbers[1..99]), 4949.0);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++use+core::simd::prelude::*;%0A++++%0A++++let+short+=+%26%5B1,+2,+3%5D;%0A++++let+(prefix,+middle,+suffix)+=+short.as_simd::%3C4%3E();%0A++++assert_eq!(middle,+%5B%5D);+//+Not+enough+elements+for+anything+in+the+middle%0A++++%0A++++//+They+might+be+split+in+any+possible+way+between+prefix+and+suffix%0A++++let+it+=+prefix.iter().chain(suffix).copied();%0A++++assert_eq!(it.collect::%3CVec%3C_%3E%3E(),+vec!%5B1,+2,+3%5D);%0A++++%0A++++fn+basic_simd_sum(x:+%26%5Bf32%5D)+-%3E+f32+%7B%0A++++++++use+std::ops::Add;%0A++++++++let+(prefix,+middle,+suffix)+=+x.as_simd();%0A++++++++let+sums+=+f32x4::from_array(%5B%0A++++++++++++prefix.iter().copied().sum(),%0A++++++++++++0.0,%0A++++++++++++0.0,%0A++++++++++++suffix.iter().copied().sum(),%0A++++++++%5D);%0A++++++++let+sums+=+middle.iter().copied().fold(sums,+f32x4::add);%0A++++++++sums.reduce_sum()%0A++++%7D%0A++++%0A++++let+numbers:+Vec%3Cf32%3E+=+(1..101).map(%7Cx%7C+x+as+_).collect();%0A++++assert_eq!(basic_simd_sum(%26numbers%5B1..99%5D),+4949.0);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#4037-4041)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nSplit a mutable slice into a mutable prefix, a middle of aligned SIMD types, and a mutable suffix.\n\nThis is a safe wrapper around [`slice::align_to_mut`](about:blank/primitive.slice.html#method.align_to_mut \"method slice::align_to_mut\"), so has the same weak postconditions as that method. You’re only assured that `self.len() == prefix.len() + middle.len() * LANES + suffix.len()`.\n\nNotably, all of the following are possible:\n\n-   `prefix.len() >= LANES`.\n-   `middle.is_empty()` despite `self.len() >= 3 * LANES`.\n-   `suffix.len() >= LANES`.\n\nThat said, this is a safe method, so if you’re only writing safe code, then this can at most cause incorrect logic, not unsoundness.\n\nThis is the mutable version of [`slice::as_simd`](about:blank/primitive.slice.html#method.as_simd \"method slice::as_simd\"); see that for examples.\n\n##### [§](#panics-45)Panics\n\nThis will panic if the size of the SIMD type is different from `LANES` times that of the scalar.\n\nAt the time of writing, the trait restrictions on `Simd<T, LANES>` keeps that from ever happening, as only power-of-two numbers of lanes are supported. It’s possible that, in the future, those restrictions might be lifted in a way that would make it possible to see panics from this method for something like `LANES == 3`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#4077-4079)\n\n🔬This is a nightly-only experimental API. (`is_sorted` [#53485](https://github.com/rust-lang/rust/issues/53485))\n\nChecks if the elements of this slice are sorted.\n\nThat is, for each element `a` and its following element `b`, `a <= b` must hold. If the slice yields exactly zero or one element, `true` is returned.\n\nNote that if `Self::Item` is only `PartialOrd`, but not `Ord`, the above definition implies that this function returns `false` if any two consecutive items are not comparable.\n\n##### [§](#examples-149)Examples\n\n```\n#![feature(is_sorted)]\nlet empty: [i32; 0] = [];\n\nassert!([1, 2, 2, 9].is_sorted());\nassert!(![1, 3, 2, 4].is_sorted());\nassert!([0].is_sorted());\nassert!(empty.is_sorted());\nassert!(![0.0, 1.0, f32::NAN].is_sorted());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(is_sorted)%5D%0Afn+main()+%7B%0A++++let+empty:+%5Bi32;+0%5D+=+%5B%5D;%0A++++%0A++++assert!(%5B1,+2,+2,+9%5D.is_sorted());%0A++++assert!(!%5B1,+3,+2,+4%5D.is_sorted());%0A++++assert!(%5B0%5D.is_sorted());%0A++++assert!(empty.is_sorted());%0A++++assert!(!%5B0.0,+1.0,+f32::NAN%5D.is_sorted());%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#4106-4108)\n\n🔬This is a nightly-only experimental API. (`is_sorted` [#53485](https://github.com/rust-lang/rust/issues/53485))\n\nChecks if the elements of this slice are sorted using the given comparator function.\n\nInstead of using `PartialOrd::partial_cmp`, this function uses the given `compare` function to determine whether two elements are to be considered in sorted order.\n\n##### [§](#examples-150)Examples\n\n```\n#![feature(is_sorted)]\n\nassert!([1, 2, 2, 9].is_sorted_by(|a, b| a <= b));\nassert!(![1, 2, 2, 9].is_sorted_by(|a, b| a < b));\n\nassert!([0].is_sorted_by(|a, b| true));\nassert!([0].is_sorted_by(|a, b| false));\n\nlet empty: [i32; 0] = [];\nassert!(empty.is_sorted_by(|a, b| false));\nassert!(empty.is_sorted_by(|a, b| true));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(is_sorted)%5D%0A%0Afn+main()+%7B%0A++++assert!(%5B1,+2,+2,+9%5D.is_sorted_by(%7Ca,+b%7C+a+%3C=+b));%0A++++assert!(!%5B1,+2,+2,+9%5D.is_sorted_by(%7Ca,+b%7C+a+%3C+b));%0A++++%0A++++assert!(%5B0%5D.is_sorted_by(%7Ca,+b%7C+true));%0A++++assert!(%5B0%5D.is_sorted_by(%7Ca,+b%7C+false));%0A++++%0A++++let+empty:+%5Bi32;+0%5D+=+%5B%5D;%0A++++assert!(empty.is_sorted_by(%7Ca,+b%7C+false));%0A++++assert!(empty.is_sorted_by(%7Ca,+b%7C+true));%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#4132-4135)\n\n🔬This is a nightly-only experimental API. (`is_sorted` [#53485](https://github.com/rust-lang/rust/issues/53485))\n\nChecks if the elements of this slice are sorted using the given key extraction function.\n\nInstead of comparing the slice’s elements directly, this function compares the keys of the elements, as determined by `f`. Apart from that, it’s equivalent to [`is_sorted`](about:blank/primitive.slice.html#method.is_sorted \"method slice::is_sorted\"); see its documentation for more information.\n\n##### [§](#examples-151)Examples\n\n```\n#![feature(is_sorted)]\n\nassert!([\"c\", \"bb\", \"aaa\"].is_sorted_by_key(|s| s.len()));\nassert!(![-2i32, -1, 0, 3].is_sorted_by_key(|n| n.abs()));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(is_sorted)%5D%0A%0Afn+main()+%7B%0A++++assert!(%5B%22c%22,+%22bb%22,+%22aaa%22%5D.is_sorted_by_key(%7Cs%7C+s.len()));%0A++++assert!(!%5B-2i32,+-1,+0,+3%5D.is_sorted_by_key(%7Cn%7C+n.abs()));%0A%7D&version=nightly&edition=2021)\n\n1.52.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#4191-4193)\n\nReturns the index of the partition point according to the given predicate (the index of the first element of the second partition).\n\nThe slice is assumed to be partitioned according to the given predicate. This means that all elements for which the predicate returns true are at the start of the slice and all elements for which the predicate returns false are at the end. For example, `[7, 15, 3, 5, 4, 12, 6]` is partitioned under the predicate `x % 2 != 0` (all odd numbers are at the start, all even at the end).\n\nIf this slice is not partitioned, the returned result is unspecified and meaningless, as this method performs a kind of binary search.\n\nSee also [`binary_search`](about:blank/primitive.slice.html#method.binary_search \"method slice::binary_search\"), [`binary_search_by`](about:blank/primitive.slice.html#method.binary_search_by \"method slice::binary_search_by\"), and [`binary_search_by_key`](about:blank/primitive.slice.html#method.binary_search_by_key \"method slice::binary_search_by_key\").\n\n##### [§](#examples-152)Examples\n\n```\nlet v = [1, 2, 3, 3, 5, 6, 7];\nlet i = v.partition_point(|&x| x < 5);\n\nassert_eq!(i, 4);\nassert!(v[..i].iter().all(|&x| x < 5));\nassert!(v[i..].iter().all(|&x| !(x < 5)));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v+=+%5B1,+2,+3,+3,+5,+6,+7%5D;%0A++++let+i+=+v.partition_point(%7C%26x%7C+x+%3C+5);%0A++++%0A++++assert_eq!(i,+4);%0A++++assert!(v%5B..i%5D.iter().all(%7C%26x%7C+x+%3C+5));%0A++++assert!(v%5Bi..%5D.iter().all(%7C%26x%7C+!(x+%3C+5)));%0A%7D&edition=2021)\n\nIf all elements of the slice match the predicate, including if the slice is empty, then the length of the slice will be returned:\n\n```\nlet a = [2, 4, 8];\nassert_eq!(a.partition_point(|x| x < &100), a.len());\nlet a: [i32; 0] = [];\nassert_eq!(a.partition_point(|x| x < &100), 0);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+a+=+%5B2,+4,+8%5D;%0A++++assert_eq!(a.partition_point(%7Cx%7C+x+%3C+%26100),+a.len());%0A++++let+a:+%5Bi32;+0%5D+=+%5B%5D;%0A++++assert_eq!(a.partition_point(%7Cx%7C+x+%3C+%26100),+0);%0A%7D&edition=2021)\n\nIf you want to insert an item to a sorted vector, while maintaining sort order:\n\n```\nlet mut s = vec![0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55];\nlet num = 42;\nlet idx = s.partition_point(|&x| x <= num);\ns.insert(idx, num);\nassert_eq!(s, [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 42, 55]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+s+=+vec!%5B0,+1,+1,+1,+1,+2,+3,+5,+8,+13,+21,+34,+55%5D;%0A++++let+num+=+42;%0A++++let+idx+=+s.partition_point(%7C%26x%7C+x+%3C=+num);%0A++++s.insert(idx,+num);%0A++++assert_eq!(s,+%5B0,+1,+1,+1,+1,+2,+3,+5,+8,+13,+21,+34,+42,+55%5D);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#4249)\n\n🔬This is a nightly-only experimental API. (`slice_take` [#62280](https://github.com/rust-lang/rust/issues/62280))\n\nRemoves the subslice corresponding to the given range and returns a reference to it.\n\nReturns `None` and does not modify the slice if the given range is out of bounds.\n\nNote that this method only accepts one-sided ranges such as `2..` or `..6`, but not `2..6`.\n\n##### [§](#examples-153)Examples\n\nTaking the first three elements of a slice:\n\n```\n#![feature(slice_take)]\n\nlet mut slice: &[_] = &['a', 'b', 'c', 'd'];\nlet mut first_three = slice.take(..3).unwrap();\n\nassert_eq!(slice, &['d']);\nassert_eq!(first_three, &['a', 'b', 'c']);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(slice_take)%5D%0A%0Afn+main()+%7B%0A++++let+mut+slice:+%26%5B_%5D+=+%26%5B%27a%27,+%27b%27,+%27c%27,+%27d%27%5D;%0A++++let+mut+first_three+=+slice.take(..3).unwrap();%0A++++%0A++++assert_eq!(slice,+%26%5B%27d%27%5D);%0A++++assert_eq!(first_three,+%26%5B%27a%27,+%27b%27,+%27c%27%5D);%0A%7D&version=nightly&edition=2021)\n\nTaking the last two elements of a slice:\n\n```\n#![feature(slice_take)]\n\nlet mut slice: &[_] = &['a', 'b', 'c', 'd'];\nlet mut tail = slice.take(2..).unwrap();\n\nassert_eq!(slice, &['a', 'b']);\nassert_eq!(tail, &['c', 'd']);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(slice_take)%5D%0A%0Afn+main()+%7B%0A++++let+mut+slice:+%26%5B_%5D+=+%26%5B%27a%27,+%27b%27,+%27c%27,+%27d%27%5D;%0A++++let+mut+tail+=+slice.take(2..).unwrap();%0A++++%0A++++assert_eq!(slice,+%26%5B%27a%27,+%27b%27%5D);%0A++++assert_eq!(tail,+%26%5B%27c%27,+%27d%27%5D);%0A%7D&version=nightly&edition=2021)\n\nGetting `None` when `range` is out of bounds:\n\n```\n#![feature(slice_take)]\n\nlet mut slice: &[_] = &['a', 'b', 'c', 'd'];\n\nassert_eq!(None, slice.take(5..));\nassert_eq!(None, slice.take(..5));\nassert_eq!(None, slice.take(..=4));\nlet expected: &[char] = &['a', 'b', 'c', 'd'];\nassert_eq!(Some(expected), slice.take(..4));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(slice_take)%5D%0A%0Afn+main()+%7B%0A++++let+mut+slice:+%26%5B_%5D+=+%26%5B%27a%27,+%27b%27,+%27c%27,+%27d%27%5D;%0A++++%0A++++assert_eq!(None,+slice.take(5..));%0A++++assert_eq!(None,+slice.take(..5));%0A++++assert_eq!(None,+slice.take(..=4));%0A++++let+expected:+%26%5Bchar%5D+=+%26%5B%27a%27,+%27b%27,+%27c%27,+%27d%27%5D;%0A++++assert_eq!(Some(expected),+slice.take(..4));%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#4318-4321)\n\n🔬This is a nightly-only experimental API. (`slice_take` [#62280](https://github.com/rust-lang/rust/issues/62280))\n\nRemoves the subslice corresponding to the given range and returns a mutable reference to it.\n\nReturns `None` and does not modify the slice if the given range is out of bounds.\n\nNote that this method only accepts one-sided ranges such as `2..` or `..6`, but not `2..6`.\n\n##### [§](#examples-154)Examples\n\nTaking the first three elements of a slice:\n\n```\n#![feature(slice_take)]\n\nlet mut slice: &mut [_] = &mut ['a', 'b', 'c', 'd'];\nlet mut first_three = slice.take_mut(..3).unwrap();\n\nassert_eq!(slice, &mut ['d']);\nassert_eq!(first_three, &mut ['a', 'b', 'c']);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(slice_take)%5D%0A%0Afn+main()+%7B%0A++++let+mut+slice:+%26mut+%5B_%5D+=+%26mut+%5B%27a%27,+%27b%27,+%27c%27,+%27d%27%5D;%0A++++let+mut+first_three+=+slice.take_mut(..3).unwrap();%0A++++%0A++++assert_eq!(slice,+%26mut+%5B%27d%27%5D);%0A++++assert_eq!(first_three,+%26mut+%5B%27a%27,+%27b%27,+%27c%27%5D);%0A%7D&version=nightly&edition=2021)\n\nTaking the last two elements of a slice:\n\n```\n#![feature(slice_take)]\n\nlet mut slice: &mut [_] = &mut ['a', 'b', 'c', 'd'];\nlet mut tail = slice.take_mut(2..).unwrap();\n\nassert_eq!(slice, &mut ['a', 'b']);\nassert_eq!(tail, &mut ['c', 'd']);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(slice_take)%5D%0A%0Afn+main()+%7B%0A++++let+mut+slice:+%26mut+%5B_%5D+=+%26mut+%5B%27a%27,+%27b%27,+%27c%27,+%27d%27%5D;%0A++++let+mut+tail+=+slice.take_mut(2..).unwrap();%0A++++%0A++++assert_eq!(slice,+%26mut+%5B%27a%27,+%27b%27%5D);%0A++++assert_eq!(tail,+%26mut+%5B%27c%27,+%27d%27%5D);%0A%7D&version=nightly&edition=2021)\n\nGetting `None` when `range` is out of bounds:\n\n```\n#![feature(slice_take)]\n\nlet mut slice: &mut [_] = &mut ['a', 'b', 'c', 'd'];\n\nassert_eq!(None, slice.take_mut(5..));\nassert_eq!(None, slice.take_mut(..5));\nassert_eq!(None, slice.take_mut(..=4));\nlet expected: &mut [_] = &mut ['a', 'b', 'c', 'd'];\nassert_eq!(Some(expected), slice.take_mut(..4));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(slice_take)%5D%0A%0Afn+main()+%7B%0A++++let+mut+slice:+%26mut+%5B_%5D+=+%26mut+%5B%27a%27,+%27b%27,+%27c%27,+%27d%27%5D;%0A++++%0A++++assert_eq!(None,+slice.take_mut(5..));%0A++++assert_eq!(None,+slice.take_mut(..5));%0A++++assert_eq!(None,+slice.take_mut(..=4));%0A++++let+expected:+%26mut+%5B_%5D+=+%26mut+%5B%27a%27,+%27b%27,+%27c%27,+%27d%27%5D;%0A++++assert_eq!(Some(expected),+slice.take_mut(..4));%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#4357)\n\n🔬This is a nightly-only experimental API. (`slice_take` [#62280](https://github.com/rust-lang/rust/issues/62280))\n\nRemoves the first element of the slice and returns a reference to it.\n\nReturns `None` if the slice is empty.\n\n##### [§](#examples-155)Examples\n\n```\n#![feature(slice_take)]\n\nlet mut slice: &[_] = &['a', 'b', 'c'];\nlet first = slice.take_first().unwrap();\n\nassert_eq!(slice, &['b', 'c']);\nassert_eq!(first, &'a');\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(slice_take)%5D%0A%0Afn+main()+%7B%0A++++let+mut+slice:+%26%5B_%5D+=+%26%5B%27a%27,+%27b%27,+%27c%27%5D;%0A++++let+first+=+slice.take_first().unwrap();%0A++++%0A++++assert_eq!(slice,+%26%5B%27b%27,+%27c%27%5D);%0A++++assert_eq!(first,+%26%27a%27);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#4382)\n\n🔬This is a nightly-only experimental API. (`slice_take` [#62280](https://github.com/rust-lang/rust/issues/62280))\n\nRemoves the first element of the slice and returns a mutable reference to it.\n\nReturns `None` if the slice is empty.\n\n##### [§](#examples-156)Examples\n\n```\n#![feature(slice_take)]\n\nlet mut slice: &mut [_] = &mut ['a', 'b', 'c'];\nlet first = slice.take_first_mut().unwrap();\n*first = 'd';\n\nassert_eq!(slice, &['b', 'c']);\nassert_eq!(first, &'d');\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(slice_take)%5D%0A%0Afn+main()+%7B%0A++++let+mut+slice:+%26mut+%5B_%5D+=+%26mut+%5B%27a%27,+%27b%27,+%27c%27%5D;%0A++++let+first+=+slice.take_first_mut().unwrap();%0A++++*first+=+%27d%27;%0A++++%0A++++assert_eq!(slice,+%26%5B%27b%27,+%27c%27%5D);%0A++++assert_eq!(first,+%26%27d%27);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#4406)\n\n🔬This is a nightly-only experimental API. (`slice_take` [#62280](https://github.com/rust-lang/rust/issues/62280))\n\nRemoves the last element of the slice and returns a reference to it.\n\nReturns `None` if the slice is empty.\n\n##### [§](#examples-157)Examples\n\n```\n#![feature(slice_take)]\n\nlet mut slice: &[_] = &['a', 'b', 'c'];\nlet last = slice.take_last().unwrap();\n\nassert_eq!(slice, &['a', 'b']);\nassert_eq!(last, &'c');\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(slice_take)%5D%0A%0Afn+main()+%7B%0A++++let+mut+slice:+%26%5B_%5D+=+%26%5B%27a%27,+%27b%27,+%27c%27%5D;%0A++++let+last+=+slice.take_last().unwrap();%0A++++%0A++++assert_eq!(slice,+%26%5B%27a%27,+%27b%27%5D);%0A++++assert_eq!(last,+%26%27c%27);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#4431)\n\n🔬This is a nightly-only experimental API. (`slice_take` [#62280](https://github.com/rust-lang/rust/issues/62280))\n\nRemoves the last element of the slice and returns a mutable reference to it.\n\nReturns `None` if the slice is empty.\n\n##### [§](#examples-158)Examples\n\n```\n#![feature(slice_take)]\n\nlet mut slice: &mut [_] = &mut ['a', 'b', 'c'];\nlet last = slice.take_last_mut().unwrap();\n*last = 'd';\n\nassert_eq!(slice, &['a', 'b']);\nassert_eq!(last, &'d');\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(slice_take)%5D%0A%0Afn+main()+%7B%0A++++let+mut+slice:+%26mut+%5B_%5D+=+%26mut+%5B%27a%27,+%27b%27,+%27c%27%5D;%0A++++let+last+=+slice.take_last_mut().unwrap();%0A++++*last+=+%27d%27;%0A++++%0A++++assert_eq!(slice,+%26%5B%27a%27,+%27b%27%5D);%0A++++assert_eq!(last,+%26%27d%27);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#4465-4468)\n\n🔬This is a nightly-only experimental API. (`get_many_mut` [#104642](https://github.com/rust-lang/rust/issues/104642))\n\nReturns mutable references to many indices at once, without doing any checks.\n\nFor a safe alternative see [`get_many_mut`](about:blank/primitive.slice.html#method.get_many_mut \"method slice::get_many_mut\").\n\n##### [§](#safety-12)Safety\n\nCalling this method with overlapping or out-of-bounds indices is _[undefined behavior](https://doc.rust-lang.org/reference/behavior-considered-undefined.html)_ even if the resulting references are not used.\n\n##### [§](#examples-159)Examples\n\n```\n#![feature(get_many_mut)]\n\nlet x = &mut [1, 2, 4];\n\nunsafe {\n    let [a, b] = x.get_many_unchecked_mut([0, 2]);\n    *a *= 10;\n    *b *= 100;\n}\nassert_eq!(x, &[10, 2, 400]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(get_many_mut)%5D%0A%0Afn+main()+%7B%0A++++let+x+=+%26mut+%5B1,+2,+4%5D;%0A++++%0A++++unsafe+%7B%0A++++++++let+%5Ba,+b%5D+=+x.get_many_unchecked_mut(%5B0,+2%5D);%0A++++++++*a+*=+10;%0A++++++++*b+*=+100;%0A++++%7D%0A++++assert_eq!(x,+%26%5B10,+2,+400%5D);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#4507-4510)\n\n🔬This is a nightly-only experimental API. (`get_many_mut` [#104642](https://github.com/rust-lang/rust/issues/104642))\n\nReturns mutable references to many indices at once.\n\nReturns an error if any index is out-of-bounds, or if the same index was passed more than once.\n\n##### [§](#examples-160)Examples\n\n```\n#![feature(get_many_mut)]\n\nlet v = &mut [1, 2, 3];\nif let Ok([a, b]) = v.get_many_mut([0, 2]) {\n    *a = 413;\n    *b = 612;\n}\nassert_eq!(v, &[413, 2, 612]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(get_many_mut)%5D%0A%0Afn+main()+%7B%0A++++let+v+=+%26mut+%5B1,+2,+3%5D;%0A++++if+let+Ok(%5Ba,+b%5D)+=+v.get_many_mut(%5B0,+2%5D)+%7B%0A++++++++*a+=+413;%0A++++++++*b+=+612;%0A++++%7D%0A++++assert_eq!(v,+%26%5B413,+2,+612%5D);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#560)\n\n🔬This is a nightly-only experimental API. (`ascii_char` [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nViews this slice of ASCII characters as a UTF-8 `str`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#571)\n\n🔬This is a nightly-only experimental API. (`ascii_char` [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nViews this slice of ASCII characters as a slice of `u8` bytes.\n\n1.23.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/ascii.rs.html#17)\n\nChecks if all bytes in this slice are within the ASCII range.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/slice/ascii.rs.html#26)\n\n🔬This is a nightly-only experimental API. (`ascii_char` [#110998](https://github.com/rust-lang/rust/issues/110998))\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/slice/ascii.rs.html#44)\n\n🔬This is a nightly-only experimental API. (`ascii_char` [#110998](https://github.com/rust-lang/rust/issues/110998))\n\nConverts this slice of bytes into a slice of ASCII characters, without checking whether they’re valid.\n\n##### [§](#safety-13)Safety\n\nEvery byte in the slice must be in `0..=127`, or else this is UB.\n\n1.23.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/ascii.rs.html#58)\n\nChecks that two slices are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`, but without allocating and copying temporaries.\n\n1.23.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/ascii.rs.html#73)\n\nConverts this slice to its ASCII upper case equivalent in-place.\n\nASCII letters ‘a’ to ‘z’ are mapped to ‘A’ to ‘Z’, but non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use [`to_ascii_uppercase`](#method.to_ascii_uppercase).\n\n1.23.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/ascii.rs.html#90)\n\nConverts this slice to its ASCII lower case equivalent in-place.\n\nASCII letters ‘A’ to ‘Z’ are mapped to ‘a’ to ‘z’, but non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use [`to_ascii_lowercase`](#method.to_ascii_lowercase).\n\n1.60.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/ascii.rs.html#110)\n\nReturns an iterator that produces an escaped version of this slice, treating it as an ASCII string.\n\n##### [§](#examples-161)Examples\n\n```\n\nlet s = b\"0\\t\\r\\n'\\\"\\\\\\x9d\";\nlet escaped = s.escape_ascii().to_string();\nassert_eq!(escaped, \"0\\\\t\\\\r\\\\n\\\\'\\\\\\\"\\\\\\\\\\\\x9d\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%0Afn+main()+%7B%0A++++let+s+=+b%220%5Ct%5Cr%5Cn%27%5C%22%5C%5C%5Cx9d%22;%0A++++let+escaped+=+s.escape_ascii().to_string();%0A++++assert_eq!(escaped,+%220%5C%5Ct%5C%5Cr%5C%5Cn%5C%5C%27%5C%5C%5C%22%5C%5C%5C%5C%5C%5Cx9d%22);%0A%7D&edition=2021)\n\n1.80.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/ascii.rs.html#129)\n\nReturns a byte slice with leading ASCII whitespace bytes removed.\n\n‘Whitespace’ refers to the definition used by [`u8::is_ascii_whitespace`](about:blank/primitive.u8.html#method.is_ascii_whitespace \"method u8::is_ascii_whitespace\").\n\n##### [§](#examples-162)Examples\n\n```\nassert_eq!(b\" \\t hello world\\n\".trim_ascii_start(), b\"hello world\\n\");\nassert_eq!(b\"  \".trim_ascii_start(), b\"\");\nassert_eq!(b\"\".trim_ascii_start(), b\"\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(b%22+%5Ct+hello+world%5Cn%22.trim_ascii_start(),+b%22hello+world%5Cn%22);%0A++++assert_eq!(b%22++%22.trim_ascii_start(),+b%22%22);%0A++++assert_eq!(b%22%22.trim_ascii_start(),+b%22%22);%0A%7D&edition=2021)\n\n1.80.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/ascii.rs.html#158)\n\nReturns a byte slice with trailing ASCII whitespace bytes removed.\n\n‘Whitespace’ refers to the definition used by [`u8::is_ascii_whitespace`](about:blank/primitive.u8.html#method.is_ascii_whitespace \"method u8::is_ascii_whitespace\").\n\n##### [§](#examples-163)Examples\n\n```\nassert_eq!(b\"\\r hello world\\n \".trim_ascii_end(), b\"\\r hello world\");\nassert_eq!(b\"  \".trim_ascii_end(), b\"\");\nassert_eq!(b\"\".trim_ascii_end(), b\"\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(b%22%5Cr+hello+world%5Cn+%22.trim_ascii_end(),+b%22%5Cr+hello+world%22);%0A++++assert_eq!(b%22++%22.trim_ascii_end(),+b%22%22);%0A++++assert_eq!(b%22%22.trim_ascii_end(),+b%22%22);%0A%7D&edition=2021)\n\n1.80.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/slice/ascii.rs.html#188)\n\nReturns a byte slice with leading and trailing ASCII whitespace bytes removed.\n\n‘Whitespace’ refers to the definition used by [`u8::is_ascii_whitespace`](about:blank/primitive.u8.html#method.is_ascii_whitespace \"method u8::is_ascii_whitespace\").\n\n##### [§](#examples-164)Examples\n\n```\nassert_eq!(b\"\\r hello world\\n \".trim_ascii(), b\"hello world\");\nassert_eq!(b\"  \".trim_ascii(), b\"\");\nassert_eq!(b\"\".trim_ascii(), b\"\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(b%22%5Cr+hello+world%5Cn+%22.trim_ascii(),+b%22hello+world%22);%0A++++assert_eq!(b%22++%22.trim_ascii(),+b%22%22);%0A++++assert_eq!(b%22%22.trim_ascii(),+b%22%22);%0A%7D&edition=2021)\n\n1.79.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/str/lossy.rs.html#44)\n\nCreates an iterator over the contiguous valid UTF-8 ranges of this slice, and the non-UTF-8 fragments in between.\n\n##### [§](#examples-165)Examples\n\nThis function formats arbitrary but mostly-UTF-8 bytes into Rust source code in the form of a C-string literal (`c\"...\"`).\n\n```\nuse std::fmt::Write as _;\n\npub fn cstr_literal(bytes: &[u8]) -> String {\n    let mut repr = String::new();\n    repr.push_str(\"c\\\"\");\n    for chunk in bytes.utf8_chunks() {\n        for ch in chunk.valid().chars() {\n            // Escapes \\0, \\t, \\r, \\n, \\\\, \\', \\\", and uses \\u{...} for non-printable characters.\n            write!(repr, \"{}\", ch.escape_debug()).unwrap();\n        }\n        for byte in chunk.invalid() {\n            write!(repr, \"\\\\x{:02X}\", byte).unwrap();\n        }\n    }\n    repr.push('\"');\n    repr\n}\n\nfn main() {\n    let lit = cstr_literal(b\"\\xferris the \\xf0\\x9f\\xa6\\x80\\x07\");\n    let expected = stringify!(c\"\\xFErris the 🦀\\u{7}\");\n    assert_eq!(lit, expected);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fmt::Write+as+_;%0A%0Apub+fn+cstr_literal(bytes:+%26%5Bu8%5D)+-%3E+String+%7B%0A++++let+mut+repr+=+String::new();%0A++++repr.push_str(%22c%5C%22%22);%0A++++for+chunk+in+bytes.utf8_chunks()+%7B%0A++++++++for+ch+in+chunk.valid().chars()+%7B%0A++++++++++++//+Escapes+%5C0,+%5Ct,+%5Cr,+%5Cn,+%5C%5C,+%5C%27,+%5C%22,+and+uses+%5Cu%7B...%7D+for+non-printable+characters.%0A++++++++++++write!(repr,+%22%7B%7D%22,+ch.escape_debug()).unwrap();%0A++++++++%7D%0A++++++++for+byte+in+chunk.invalid()+%7B%0A++++++++++++write!(repr,+%22%5C%5Cx%7B:02X%7D%22,+byte).unwrap();%0A++++++++%7D%0A++++%7D%0A++++repr.push(%27%22%27);%0A++++repr%0A%7D%0A%0Afn+main()+%7B%0A++++let+lit+=+cstr_literal(b%22%5Cxferris+the+%5Cxf0%5Cx9f%5Cxa6%5Cx80%5Cx07%22);%0A++++let+expected+=+stringify!(c%22%5CxFErris+the+%F0%9F%A6%80%5Cu%7B7%7D%22);%0A++++assert_eq!(lit,+expected);%0A%7D&edition=2021)\n\n1.23.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/slice.rs.html#621)\n\nReturns a vector containing a copy of this slice where each byte is mapped to its ASCII upper case equivalent.\n\nASCII letters ‘a’ to ‘z’ are mapped to ‘A’ to ‘Z’, but non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`](about:blank/primitive.slice.html#method.make_ascii_uppercase \"method slice::make_ascii_uppercase\").\n\n1.23.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/slice.rs.html#642)\n\nReturns a vector containing a copy of this slice where each byte is mapped to its ASCII lower case equivalent.\n\nASCII letters ‘A’ to ‘Z’ are mapped to ‘a’ to ‘z’, but non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`](about:blank/primitive.slice.html#method.make_ascii_lowercase \"method slice::make_ascii_lowercase\").\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/slice.rs.html#207-209)\n\nSorts the slice.\n\nThis sort is stable (i.e., does not reorder equal elements) and _O_(_n_ \\* log(_n_)) worst-case.\n\nWhen applicable, unstable sorting is preferred because it is generally faster than stable sorting and it doesn’t allocate auxiliary memory. See [`sort_unstable`](about:blank/primitive.slice.html#method.sort_unstable \"method slice::sort_unstable\").\n\n##### [§](#current-implementation-8)Current implementation\n\nThe current algorithm is an adaptive, iterative merge sort inspired by [timsort](https://en.wikipedia.org/wiki/Timsort). It is designed to be very fast in cases where the slice is nearly sorted, or consists of two or more sorted sequences concatenated one after another.\n\nAlso, it allocates temporary storage half the size of `self`, but for short slices a non-allocating insertion sort is used instead.\n\n##### [§](#examples-166)Examples\n\n```\nlet mut v = [-5, 4, 1, -3, 2];\n\nv.sort();\nassert!(v == [-5, -3, 1, 2, 4]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+%5B-5,+4,+1,+-3,+2%5D;%0A++++%0A++++v.sort();%0A++++assert!(v+==+%5B-5,+-3,+1,+2,+4%5D);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/slice.rs.html#263-265)\n\nSorts the slice with a comparator function.\n\nThis sort is stable (i.e., does not reorder equal elements) and _O_(_n_ \\* log(_n_)) worst-case.\n\nThe comparator function must define a total ordering for the elements in the slice. If the ordering is not total, the order of the elements is unspecified. An order is a total order if it is (for all `a`, `b` and `c`):\n\n-   total and antisymmetric: exactly one of `a < b`, `a == b` or `a > b` is true, and\n-   transitive, `a < b` and `b < c` implies `a < c`. The same must hold for both `==` and `>`.\n\nFor example, while [`f64`](../primitive.f64.html \"primitive f64\") doesn’t implement [`Ord`](../cmp/trait.Ord.html \"trait std::cmp::Ord\") because `NaN != NaN`, we can use `partial_cmp` as our sort function when we know the slice doesn’t contain a `NaN`.\n\n```\nlet mut floats = [5f64, 4.0, 1.0, 3.0, 2.0];\nfloats.sort_by(|a, b| a.partial_cmp(b).unwrap());\nassert_eq!(floats, [1.0, 2.0, 3.0, 4.0, 5.0]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+floats+=+%5B5f64,+4.0,+1.0,+3.0,+2.0%5D;%0A++++floats.sort_by(%7Ca,+b%7C+a.partial_cmp(b).unwrap());%0A++++assert_eq!(floats,+%5B1.0,+2.0,+3.0,+4.0,+5.0%5D);%0A%7D&edition=2021)\n\nWhen applicable, unstable sorting is preferred because it is generally faster than stable sorting and it doesn’t allocate auxiliary memory. See [`sort_unstable_by`](about:blank/primitive.slice.html#method.sort_unstable_by \"method slice::sort_unstable_by\").\n\n##### [§](#current-implementation-9)Current implementation\n\nThe current algorithm is an adaptive, iterative merge sort inspired by [timsort](https://en.wikipedia.org/wiki/Timsort). It is designed to be very fast in cases where the slice is nearly sorted, or consists of two or more sorted sequences concatenated one after another.\n\nAlso, it allocates temporary storage half the size of `self`, but for short slices a non-allocating insertion sort is used instead.\n\n##### [§](#examples-167)Examples\n\n```\nlet mut v = [5, 4, 1, 3, 2];\nv.sort_by(|a, b| a.cmp(b));\nassert!(v == [1, 2, 3, 4, 5]);\n\n// reverse sorting\nv.sort_by(|a, b| b.cmp(a));\nassert!(v == [5, 4, 3, 2, 1]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+%5B5,+4,+1,+3,+2%5D;%0A++++v.sort_by(%7Ca,+b%7C+a.cmp(b));%0A++++assert!(v+==+%5B1,+2,+3,+4,+5%5D);%0A++++%0A++++//+reverse+sorting%0A++++v.sort_by(%7Ca,+b%7C+b.cmp(a));%0A++++assert!(v+==+%5B5,+4,+3,+2,+1%5D);%0A%7D&edition=2021)\n\n1.7.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/slice.rs.html#305-308)\n\nSorts the slice with a key extraction function.\n\nThis sort is stable (i.e., does not reorder equal elements) and _O_(_m_ \\* _n_ \\* log(_n_)) worst-case, where the key function is _O_(_m_).\n\nFor expensive key functions (e.g. functions that are not simple property accesses or basic operations), [`sort_by_cached_key`](about:blank/primitive.slice.html#method.sort_by_cached_key \"method slice::sort_by_cached_key\") is likely to be significantly faster, as it does not recompute element keys.\n\nWhen applicable, unstable sorting is preferred because it is generally faster than stable sorting and it doesn’t allocate auxiliary memory. See [`sort_unstable_by_key`](about:blank/primitive.slice.html#method.sort_unstable_by_key \"method slice::sort_unstable_by_key\").\n\n##### [§](#current-implementation-10)Current implementation\n\nThe current algorithm is an adaptive, iterative merge sort inspired by [timsort](https://en.wikipedia.org/wiki/Timsort). It is designed to be very fast in cases where the slice is nearly sorted, or consists of two or more sorted sequences concatenated one after another.\n\nAlso, it allocates temporary storage half the size of `self`, but for short slices a non-allocating insertion sort is used instead.\n\n##### [§](#examples-168)Examples\n\n```\nlet mut v = [-5i32, 4, 1, -3, 2];\n\nv.sort_by_key(|k| k.abs());\nassert!(v == [1, 2, -3, 4, -5]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+%5B-5i32,+4,+1,+-3,+2%5D;%0A++++%0A++++v.sort_by_key(%7Ck%7C+k.abs());%0A++++assert!(v+==+%5B1,+2,+-3,+4,+-5%5D);%0A%7D&edition=2021)\n\n1.34.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/slice.rs.html#352-355)\n\nSorts the slice with a key extraction function.\n\nDuring sorting, the key function is called at most once per element, by using temporary storage to remember the results of key evaluation. The order of calls to the key function is unspecified and may change in future versions of the standard library.\n\nThis sort is stable (i.e., does not reorder equal elements) and _O_(_m_ \\* _n_ + _n_ \\* log(_n_)) worst-case, where the key function is _O_(_m_).\n\nFor simple key functions (e.g., functions that are property accesses or basic operations), [`sort_by_key`](about:blank/primitive.slice.html#method.sort_by_key \"method slice::sort_by_key\") is likely to be faster.\n\n##### [§](#current-implementation-11)Current implementation\n\nThe current algorithm is based on [pattern-defeating quicksort](https://github.com/orlp/pdqsort) by Orson Peters, which combines the fast average case of randomized quicksort with the fast worst case of heapsort, while achieving linear time on slices with certain patterns. It uses some randomization to avoid degenerate cases, but with a fixed seed to always provide deterministic behavior.\n\nIn the worst case, the algorithm allocates temporary storage in a `Vec<(K, usize)>` the length of the slice.\n\n##### [§](#examples-169)Examples\n\n```\nlet mut v = [-5i32, 4, 32, -3, 2];\n\nv.sort_by_cached_key(|k| k.to_string());\nassert!(v == [-3, -5, 2, 32, 4]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+%5B-5i32,+4,+32,+-3,+2%5D;%0A++++%0A++++v.sort_by_cached_key(%7Ck%7C+k.to_string());%0A++++assert!(v+==+%5B-3,+-5,+2,+32,+4%5D);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/slice.rs.html#412-414)\n\nCopies `self` into a new `Vec`.\n\n##### [§](#examples-170)Examples\n\n```\nlet s = [10, 40, 30];\nlet x = s.to_vec();\n// Here, `s` and `x` can be modified independently.\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%5B10,+40,+30%5D;%0A++++let+x+=+s.to_vec();%0A++++//+Here,+%60s%60+and+%60x%60+can+be+modified+independently.%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/slice.rs.html#436-438)\n\n🔬This is a nightly-only experimental API. (`allocator_api` [#32838](https://github.com/rust-lang/rust/issues/32838))\n\nCopies `self` into a new `Vec` with an allocator.\n\n##### [§](#examples-171)Examples\n\n```\n#![feature(allocator_api)]\n\nuse std::alloc::System;\n\nlet s = [10, 40, 30];\nlet x = s.to_vec_in(System);\n// Here, `s` and `x` can be modified independently.\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(allocator_api)%5D%0A%0Afn+main()+%7B%0A++++use+std::alloc::System;%0A++++%0A++++let+s+=+%5B10,+40,+30%5D;%0A++++let+x+=+s.to_vec_in(System);%0A++++//+Here,+%60s%60+and+%60x%60+can+be+modified+independently.%0A%7D&version=nightly&edition=2021)\n\n1.40.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/slice.rs.html#489-491)\n\nCreates a vector by copying a slice `n` times.\n\n##### [§](#panics-46)Panics\n\nThis function will panic if the capacity would overflow.\n\n##### [§](#examples-172)Examples\n\nBasic usage:\n\n```\nassert_eq!([1, 2].repeat(3), vec![1, 2, 1, 2, 1, 2]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%5B1,+2%5D.repeat(3),+vec!%5B1,+2,+1,+2,+1,+2%5D);%0A%7D&edition=2021)\n\nA panic upon overflow:\n\n[ⓘ](# \"This example panics\")\n\n```\n// this will panic at runtime\nb\"0123456789abcdef\".repeat(usize::MAX);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+this+will+panic+at+runtime%0Afn+main()+%7B%0A++++b%220123456789abcdef%22.repeat(usize::MAX);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/slice.rs.html#557-559)\n\nFlattens a slice of `T` into a single value `Self::Output`.\n\n##### [§](#examples-173)Examples\n\n```\nassert_eq!([\"hello\", \"world\"].concat(), \"helloworld\");\nassert_eq!([[1, 2], [3, 4]].concat(), [1, 2, 3, 4]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%5B%22hello%22,+%22world%22%5D.concat(),+%22helloworld%22);%0A++++assert_eq!(%5B%5B1,+2%5D,+%5B3,+4%5D%5D.concat(),+%5B1,+2,+3,+4%5D);%0A%7D&edition=2021)\n\n1.3.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/slice.rs.html#576-578)\n\nFlattens a slice of `T` into a single value `Self::Output`, placing a given separator between each.\n\n##### [§](#examples-174)Examples\n\n```\nassert_eq!([\"hello\", \"world\"].join(\" \"), \"hello world\");\nassert_eq!([[1, 2], [3, 4]].join(&0), [1, 2, 0, 3, 4]);\nassert_eq!([[1, 2], [3, 4]].join(&[0, 0][..]), [1, 2, 0, 0, 3, 4]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%5B%22hello%22,+%22world%22%5D.join(%22+%22),+%22hello+world%22);%0A++++assert_eq!(%5B%5B1,+2%5D,+%5B3,+4%5D%5D.join(%260),+%5B1,+2,+0,+3,+4%5D);%0A++++assert_eq!(%5B%5B1,+2%5D,+%5B3,+4%5D%5D.join(%26%5B0,+0%5D%5B..%5D),+%5B1,+2,+0,+0,+3,+4%5D);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/slice.rs.html#596-598)\n\n👎Deprecated since 1.3.0: renamed to join\n\nFlattens a slice of `T` into a single value `Self::Output`, placing a given separator between each.\n\n##### [§](#examples-175)Examples\n\n```\nassert_eq!([\"hello\", \"world\"].connect(\" \"), \"hello world\");\nassert_eq!([[1, 2], [3, 4]].connect(&0), [1, 2, 0, 3, 4]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Ballow(deprecated)%5D%0Afn+main()+%7B%0A++++assert_eq!(%5B%22hello%22,+%22world%22%5D.connect(%22+%22),+%22hello+world%22);%0A++++assert_eq!(%5B%5B1,+2%5D,+%5B3,+4%5D%5D.connect(%260),+%5B1,+2,+0,+3,+4%5D);%0A%7D&edition=2021)\n\n1.5.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3326)[§](#impl-AsMut%3C%5BT%5D%3E-for-Vec%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3327)[§](#method.as_mut)\n\nConverts this type into a mutable reference of the (usually inferred) input type.\n\n1.5.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3312)[§](#impl-AsMut%3CVec%3CT,+A%3E%3E-for-Vec%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3313)[§](#method.as_mut-1)\n\nConverts this type into a mutable reference of the (usually inferred) input type.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3319)[§](#impl-AsRef%3C%5BT%5D%3E-for-Vec%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3320)[§](#method.as_ref)\n\nConverts this type into a shared reference of the (usually inferred) input type.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3305)[§](#impl-AsRef%3CVec%3CT,+A%3E%3E-for-Vec%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3306)[§](#method.as_ref-1)\n\nConverts this type into a shared reference of the (usually inferred) input type.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/slice.rs.html#772)[§](#impl-Borrow%3C%5BT%5D%3E-for-Vec%3CT,+A%3E)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/slice.rs.html#779)[§](#impl-BorrowMut%3C%5BT%5D%3E-for-Vec%3CT,+A%3E)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2832)[§](#impl-Clone-for-Vec%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2871)[§](#method.clone_from)\n\nOverwrites the contents of `self` with a clone of the contents of `source`.\n\nThis method is preferred over simply assigning `source.clone()` to `self`, as it avoids reallocation if possible. Additionally, if the element type `T` overrides `clone_from()`, this will reuse the resources of `self`’s elements as well.\n\n##### [§](#examples-176)Examples\n\n```\nlet x = vec![5, 6, 7];\nlet mut y = vec![8, 9, 10];\nlet yp: *const i32 = y.as_ptr();\n\ny.clone_from(&x);\n\n// The value is the same\nassert_eq!(x, y);\n\n// And no reallocation occurred\nassert_eq!(yp, y.as_ptr());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+vec!%5B5,+6,+7%5D;%0A++++let+mut+y+=+vec!%5B8,+9,+10%5D;%0A++++let+yp:+*const+i32+=+y.as_ptr();%0A++++%0A++++y.clone_from(%26x);%0A++++%0A++++//+The+value+is+the+same%0A++++assert_eq!(x,+y);%0A++++%0A++++//+And+no+reallocation+occurred%0A++++assert_eq!(yp,+y.as_ptr());%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2834)[§](#method.clone)\n\nReturns a copy of the value. [Read more](about:blank/clone/trait.Clone.html#tymethod.clone)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3298)[§](#impl-Debug-for-Vec%3CT,+A%3E)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3288)[§](#impl-Default-for-Vec%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3292)[§](#method.default)\n\nCreates an empty `Vec<T>`.\n\nThe vector will not allocate until elements are pushed onto it.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2810)[§](#impl-Deref-for-Vec%3CT,+A%3E)\n\n[§](#associatedtype.Target)\n\nThe resulting type after dereferencing.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2814)[§](#method.deref)\n\nDereferences the value.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2820)[§](#impl-DerefMut-for-Vec%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2822)[§](#method.deref_mut)\n\nMutably dereferences the value.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3275)[§](#impl-Drop-for-Vec%3CT,+A%3E)\n\n1.2.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3232)[§](#impl-Extend%3C%26T%3E-for-Vec%3CT,+A%3E)\n\nExtend implementation that copies elements out of references before pushing them onto the Vec.\n\nThis implementation is specialized for slice iterators, where it uses [`copy_from_slice`](about:blank/primitive.slice.html#method.copy_from_slice \"method slice::copy_from_slice\") to append the entire slice at once.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3233)[§](#method.extend-1)\n\nExtends a collection with the contents of an iterator. [Read more](about:blank/iter/trait.Extend.html#tymethod.extend)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3238)[§](#method.extend_one-1)\n\n🔬This is a nightly-only experimental API. (`extend_one` [#72631](https://github.com/rust-lang/rust/issues/72631))\n\nExtends a collection with exactly one element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3243)[§](#method.extend_reserve-1)\n\n🔬This is a nightly-only experimental API. (`extend_one` [#72631](https://github.com/rust-lang/rust/issues/72631))\n\nReserves capacity in a collection for the given number of additional elements. [Read more](about:blank/iter/trait.Extend.html#method.extend_reserve)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3035)[§](#impl-Extend%3CT%3E-for-Vec%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3037)[§](#method.extend)\n\nExtends a collection with the contents of an iterator. [Read more](about:blank/iter/trait.Extend.html#tymethod.extend)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3042)[§](#method.extend_one)\n\n🔬This is a nightly-only experimental API. (`extend_one` [#72631](https://github.com/rust-lang/rust/issues/72631))\n\nExtends a collection with exactly one element.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3047)[§](#method.extend_reserve)\n\n🔬This is a nightly-only experimental API. (`extend_one` [#72631](https://github.com/rust-lang/rust/issues/72631))\n\nReserves capacity in a collection for the given number of additional elements. [Read more](about:blank/iter/trait.Extend.html#method.extend_reserve)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3334)[§](#impl-From%3C%26%5BT%5D%3E-for-Vec%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3343)[§](#method.from-13)\n\nAllocate a `Vec<T>` and fill it by cloning `s`’s items.\n\n##### [§](#examples-187)Examples\n\n```\nassert_eq!(Vec::from(&[1, 2, 3][..]), vec![1, 2, 3]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(Vec::from(%26%5B1,+2,+3%5D%5B..%5D),+vec!%5B1,+2,+3%5D);%0A%7D&edition=2021)\n\n1.74.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3374)[§](#impl-From%3C%26%5BT;+N%5D%3E-for-Vec%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3382)[§](#method.from)\n\nAllocate a `Vec<T>` and fill it by cloning `s`’s items.\n\n##### [§](#examples-179)Examples\n\n```\nassert_eq!(Vec::from(&[1, 2, 3]), vec![1, 2, 3]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(Vec::from(%26%5B1,+2,+3%5D),+vec!%5B1,+2,+3%5D);%0A%7D&edition=2021)\n\n1.28.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/cow.rs.html#45)[§](#impl-From%3C%26Vec%3CT%3E%3E-for-Cow%3C'a,+%5BT%5D%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/cow.rs.html#52)[§](#method.from-10)\n\nCreates a [`Borrowed`](about:blank/borrow/enum.Cow.html#variant.Borrowed \"variant std::borrow::Cow::Borrowed\") variant of [`Cow`](../borrow/enum.Cow.html \"enum std::borrow::Cow\") from a reference to [`Vec`](struct.Vec.html \"struct std::vec::Vec\").\n\nThis conversion does not allocate or clone the data.\n\n1.19.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3354)[§](#impl-From%3C%26mut+%5BT%5D%3E-for-Vec%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3363)[§](#method.from-8)\n\nAllocate a `Vec<T>` and fill it by cloning `s`’s items.\n\n##### [§](#examples-184)Examples\n\n```\nassert_eq!(Vec::from(&mut [1, 2, 3][..]), vec![1, 2, 3]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(Vec::from(%26mut+%5B1,+2,+3%5D%5B..%5D),+vec!%5B1,+2,+3%5D);%0A%7D&edition=2021)\n\n1.74.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3389)[§](#impl-From%3C%26mut+%5BT;+N%5D%3E-for-Vec%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3397)[§](#method.from-15)\n\nAllocate a `Vec<T>` and fill it by cloning `s`’s items.\n\n##### [§](#examples-188)Examples\n\n```\nassert_eq!(Vec::from(&mut [1, 2, 3]), vec![1, 2, 3]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(Vec::from(%26mut+%5B1,+2,+3%5D),+vec!%5B1,+2,+3%5D);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3497)[§](#impl-From%3C%26str%3E-for-Vec%3Cu8%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3505)[§](#method.from-12)\n\nAllocate a `Vec<u8>` and fill it with a UTF-8 string.\n\n##### [§](#examples-186)Examples\n\n```\nassert_eq!(Vec::from(\"123\"), vec![b'1', b'2', b'3']);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(Vec::from(%22123%22),+vec!%5Bb%271%27,+b%272%27,+b%273%27%5D);%0A%7D&edition=2021)\n\n1.44.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3404)[§](#impl-From%3C%5BT;+N%5D%3E-for-Vec%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3413)[§](#method.from-7)\n\nAllocate a `Vec<T>` and move `s`’s items into it.\n\n##### [§](#examples-183)Examples\n\n```\nassert_eq!(Vec::from([1, 2, 3]), vec![1, 2, 3]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(Vec::from(%5B1,+2,+3%5D),+vec!%5B1,+2,+3%5D);%0A%7D&edition=2021)\n\n1.5.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/binary_heap/mod.rs.html#1796)[§](#impl-From%3CBinaryHeap%3CT,+A%3E%3E-for-Vec%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/binary_heap/mod.rs.html#1801)[§](#method.from-14)\n\nConverts a `BinaryHeap<T>` into a `Vec<T>`.\n\nThis conversion requires no data movement or allocation, and has constant time complexity.\n\n1.18.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3450)[§](#impl-From%3CBox%3C%5BT%5D,+A%3E%3E-for-Vec%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3460)[§](#method.from-4)\n\nConvert a boxed slice into a vector by transferring ownership of the existing heap allocation.\n\n##### [§](#examples-180)Examples\n\n```\nlet b: Box<[i32]> = vec![1, 2, 3].into_boxed_slice();\nassert_eq!(Vec::from(b), vec![1, 2, 3]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+b:+Box%3C%5Bi32%5D%3E+=+vec!%5B1,+2,+3%5D.into_boxed_slice();%0A++++assert_eq!(Vec::from(b),+vec!%5B1,+2,+3%5D);%0A%7D&edition=2021)\n\n1.7.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#729)[§](#impl-From%3CCString%3E-for-Vec%3Cu8%3E)\n\n1.14.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3424-3426)[§](#impl-From%3CCow%3C'a,+%5BT%5D%3E%3E-for-Vec%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3442)[§](#method.from-6)\n\nConvert a clone-on-write slice into a vector.\n\nIf `s` already owns a `Vec<T>`, it will be returned directly. If `s` is borrowing a slice, a new `Vec<T>` will be allocated and filled by cloning `s`’s items into it.\n\n##### [§](#examples-182)Examples\n\n```\nlet o: Cow<'_, [i32]> = Cow::Owned(vec![1, 2, 3]);\nlet b: Cow<'_, [i32]> = Cow::Borrowed(&[1, 2, 3]);\nassert_eq!(Vec::from(o), Vec::from(b));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::borrow::Cow;%0A++++let+o:+Cow%3C%27_,+%5Bi32%5D%3E+=+Cow::Owned(vec!%5B1,+2,+3%5D);%0A++++let+b:+Cow%3C%27_,+%5Bi32%5D%3E+=+Cow::Borrowed(%26%5B1,+2,+3%5D);%0A++++assert_eq!(Vec::from(o),+Vec::from(b));%0A%7D&edition=2021)\n\n1.14.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2898)[§](#impl-From%3CString%3E-for-Vec%3Cu8%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2911)[§](#method.from-5)\n\nConverts the given [`String`](../string/struct.String.html \"struct std::string::String\") to a vector [`Vec`](struct.Vec.html \"struct std::vec::Vec\") that holds values of type [`u8`](../primitive.u8.html \"primitive u8\").\n\n##### [§](#examples-181)Examples\n\n```\nlet s1 = String::from(\"hello world\");\nlet v1 = Vec::from(s1);\n\nfor b in v1 {\n    println!(\"{b}\");\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s1+=+String::from(%22hello+world%22);%0A++++let+v1+=+Vec::from(s1);%0A++++%0A++++for+b+in+v1+%7B%0A++++++++println!(%22%7Bb%7D%22);%0A++++%7D%0A%7D&edition=2021)\n\n1.43.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#801)[§](#impl-From%3CVec%3CNonZero%3Cu8%3E%3E%3E-for-CString)\n\n1.8.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/cow.rs.html#32)[§](#impl-From%3CVec%3CT%3E%3E-for-Cow%3C'a,+%5BT%5D%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/cow.rs.html#39)[§](#method.from-16)\n\nCreates an [`Owned`](about:blank/borrow/enum.Cow.html#variant.Owned \"variant std::borrow::Cow::Owned\") variant of [`Cow`](../borrow/enum.Cow.html \"enum std::borrow::Cow\") from an owned instance of [`Vec`](struct.Vec.html \"struct std::vec::Vec\").\n\nThis conversion does not allocate or clone the data.\n\n1.21.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#3596)[§](#impl-From%3CVec%3CT,+A%3E%3E-for-Arc%3C%5BT%5D,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#3608)[§](#method.from-1)\n\nAllocate a reference-counted slice and move `v`’s items into it.\n\n##### [§](#example-1)Example\n\n```\nlet unique: Vec<i32> = vec![1, 2, 3];\nlet shared: Arc<[i32]> = Arc::from(unique);\nassert_eq!(&[1, 2, 3], &shared[..]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::Arc;%0A++++let+unique:+Vec%3Ci32%3E+=+vec!%5B1,+2,+3%5D;%0A++++let+shared:+Arc%3C%5Bi32%5D%3E+=+Arc::from(unique);%0A++++assert_eq!(%26%5B1,+2,+3%5D,+%26shared%5B..%5D);%0A%7D&edition=2021)\n\n1.5.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/binary_heap/mod.rs.html#1768)[§](#impl-From%3CVec%3CT,+A%3E%3E-for-BinaryHeap%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/binary_heap/mod.rs.html#1772)[§](#method.from-9)\n\nConverts a `Vec<T>` into a `BinaryHeap<T>`.\n\nThis conversion happens in-place, and has _O_(_n_) time complexity.\n\n1.20.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3469)[§](#impl-From%3CVec%3CT,+A%3E%3E-for-Box%3C%5BT%5D,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3490)[§](#method.from-11)\n\nConvert a vector into a boxed slice.\n\nBefore doing the conversion, this method discards excess capacity like [`Vec::shrink_to_fit`](about:blank/struct.Vec.html#method.shrink_to_fit \"method std::vec::Vec::shrink_to_fit\").\n\n##### [§](#examples-185)Examples\n\n```\nassert_eq!(Box::from(vec![1, 2, 3]), vec![1, 2, 3].into_boxed_slice());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(Box::from(vec!%5B1,+2,+3%5D),+vec!%5B1,+2,+3%5D.into_boxed_slice());%0A%7D&edition=2021)\n\nAny excess capacity is removed:\n\n```\nlet mut vec = Vec::with_capacity(10);\nvec.extend([1, 2, 3]);\n\nassert_eq!(Box::from(vec), vec![1, 2, 3].into_boxed_slice());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+vec+=+Vec::with_capacity(10);%0A++++vec.extend(%5B1,+2,+3%5D);%0A++++%0A++++assert_eq!(Box::from(vec),+vec!%5B1,+2,+3%5D.into_boxed_slice());%0A%7D&edition=2021)\n\n1.21.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/rc.rs.html#2637)[§](#impl-From%3CVec%3CT,+A%3E%3E-for-Rc%3C%5BT%5D,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/rc.rs.html#2649)[§](#method.from-18)\n\nAllocate a reference-counted slice and move `v`’s items into it.\n\n##### [§](#example-2)Example\n\n```\nlet unique: Vec<i32> = vec![1, 2, 3];\nlet shared: Rc<[i32]> = Rc::from(unique);\nassert_eq!(&[1, 2, 3], &shared[..]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::rc::Rc;%0A++++let+unique:+Vec%3Ci32%3E+=+vec!%5B1,+2,+3%5D;%0A++++let+shared:+Rc%3C%5Bi32%5D%3E+=+Rc::from(unique);%0A++++assert_eq!(%26%5B1,+2,+3%5D,+%26shared%5B..%5D);%0A%7D&edition=2021)\n\n1.10.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2941)[§](#impl-From%3CVec%3CT,+A%3E%3E-for-VecDeque%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2951)[§](#method.from-2)\n\nTurn a [`Vec<T>`](struct.Vec.html \"struct std::vec::Vec\") into a [`VecDeque<T>`](../collections/struct.VecDeque.html \"struct std::collections::VecDeque\").\n\nThis conversion is guaranteed to run in _O_(1) time and to not re-allocate the `Vec`’s buffer or allocate any additional memory.\n\n1.10.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2958)[§](#impl-From%3CVecDeque%3CT,+A%3E%3E-for-Vec%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2988)[§](#method.from-19)\n\nTurn a [`VecDeque<T>`](../collections/struct.VecDeque.html \"struct std::collections::VecDeque\") into a [`Vec<T>`](struct.Vec.html \"struct std::vec::Vec\").\n\nThis never needs to re-allocate, but does need to do _O_(_n_) data movement if the circular buffer doesn’t happen to be at the beginning of the allocation.\n\n##### [§](#examples-189)Examples\n\n```\nuse std::collections::VecDeque;\n\n// This one is *O*(1).\nlet deque: VecDeque<_> = (1..5).collect();\nlet ptr = deque.as_slices().0.as_ptr();\nlet vec = Vec::from(deque);\nassert_eq!(vec, [1, 2, 3, 4]);\nassert_eq!(vec.as_ptr(), ptr);\n\n// This one needs data rearranging.\nlet mut deque: VecDeque<_> = (1..5).collect();\ndeque.push_front(9);\ndeque.push_front(8);\nlet ptr = deque.as_slices().1.as_ptr();\nlet vec = Vec::from(deque);\nassert_eq!(vec, [8, 9, 1, 2, 3, 4]);\nassert_eq!(vec.as_ptr(), ptr);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++//+This+one+is+*O*(1).%0A++++let+deque:+VecDeque%3C_%3E+=+(1..5).collect();%0A++++let+ptr+=+deque.as_slices().0.as_ptr();%0A++++let+vec+=+Vec::from(deque);%0A++++assert_eq!(vec,+%5B1,+2,+3,+4%5D);%0A++++assert_eq!(vec.as_ptr(),+ptr);%0A++++%0A++++//+This+one+needs+data+rearranging.%0A++++let+mut+deque:+VecDeque%3C_%3E+=+(1..5).collect();%0A++++deque.push_front(9);%0A++++deque.push_front(8);%0A++++let+ptr+=+deque.as_slices().1.as_ptr();%0A++++let+vec+=+Vec::from(deque);%0A++++assert_eq!(vec,+%5B8,+9,+1,+2,+3,+4%5D);%0A++++assert_eq!(vec.as_ptr(),+ptr);%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2967)[§](#impl-FromIterator%3CT%3E-for-Vec%3CT%3E)\n\nCollects an iterator into a Vec, commonly called via [`Iterator::collect()`](about:blank/iter/trait.Iterator.html#method.collect \"method std::iter::Iterator::collect\")\n\n#### [§](#allocation-behavior)Allocation behavior\n\nIn general `Vec` does not guarantee any particular growth or allocation strategy. That also applies to this trait impl.\n\n**Note:** This section covers implementation details and is therefore exempt from stability guarantees.\n\nVec may use any or none of the following strategies, depending on the supplied iterator:\n\n-   preallocate based on [`Iterator::size_hint()`](about:blank/iter/trait.Iterator.html#method.size_hint \"method std::iter::Iterator::size_hint\")\n    -   and panic if the number of items is outside the provided lower/upper bounds\n-   use an amortized growth strategy similar to `pushing` one item at a time\n-   perform the iteration in-place on the original allocation backing the iterator\n\nThe last case warrants some attention. It is an optimization that in many cases reduces peak memory consumption and improves cache locality. But when big, short-lived allocations are created, only a small fraction of their items get collected, no further use is made of the spare capacity and the resulting `Vec` is moved into a longer-lived structure, then this can lead to the large allocations having their lifetimes unnecessarily extended which can result in increased memory footprint.\n\nIn cases where this is an issue, the excess capacity can be discarded with [`Vec::shrink_to()`](about:blank/struct.Vec.html#method.shrink_to \"method std::vec::Vec::shrink_to\"), [`Vec::shrink_to_fit()`](about:blank/struct.Vec.html#method.shrink_to_fit \"method std::vec::Vec::shrink_to_fit\") or by collecting into [`Box<[T]>`](../boxed/struct.Box.html \"struct std::boxed::Box\") instead, which additionally reduces the size of the long-lived struct.\n\n```\nstatic LONG_LIVED: Mutex<Vec<Vec<u16>>> = Mutex::new(Vec::new());\n\nfor i in 0..10 {\n    let big_temporary: Vec<u16> = (0..1024).collect();\n    // discard most items\n    let mut result: Vec<_> = big_temporary.into_iter().filter(|i| i % 100 == 0).collect();\n    // without this a lot of unused capacity might be moved into the global\n    result.shrink_to_fit();\n    LONG_LIVED.lock().unwrap().push(result);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::Mutex;%0A++++static+LONG_LIVED:+Mutex%3CVec%3CVec%3Cu16%3E%3E%3E+=+Mutex::new(Vec::new());%0A++++%0A++++for+i+in+0..10+%7B%0A++++++++let+big_temporary:+Vec%3Cu16%3E+=+(0..1024).collect();%0A++++++++//+discard+most+items%0A++++++++let+mut+result:+Vec%3C_%3E+=+big_temporary.into_iter().filter(%7Ci%7C+i+%25+100+==+0).collect();%0A++++++++//+without+this+a+lot+of+unused+capacity+might+be+moved+into+the+global%0A++++++++result.shrink_to_fit();%0A++++++++LONG_LIVED.lock().unwrap().push(result);%0A++++%7D%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2888)[§](#impl-Hash-for-Vec%3CT,+A%3E)\n\nThe hash of a vector is the same as that of the corresponding slice, as required by the `core::borrow::Borrow` implementation.\n\n```\nuse std::hash::BuildHasher;\n\nlet b = std::hash::RandomState::new();\nlet v: Vec<u8> = vec![0xa8, 0x3c, 0x09];\nlet s: &[u8] = &[0xa8, 0x3c, 0x09];\nassert_eq!(b.hash_one(v), b.hash_one(s));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::hash::BuildHasher;%0A++++%0A++++let+b+=+std::hash::RandomState::new();%0A++++let+v:+Vec%3Cu8%3E+=+vec!%5B0xa8,+0x3c,+0x09%5D;%0A++++let+s:+%26%5Bu8%5D+=+%26%5B0xa8,+0x3c,+0x09%5D;%0A++++assert_eq!(b.hash_one(v),+b.hash_one(s));%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2900)[§](#impl-Index%3CI%3E-for-Vec%3CT,+A%3E)\n\n[§](#associatedtype.Output)\n\nThe returned type after indexing.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2904)[§](#method.index)\n\nPerforms the indexing (`container[index]`) operation. [Read more](about:blank/ops/trait.Index.html#tymethod.index)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2914)[§](#impl-IndexMut%3CI%3E-for-Vec%3CT,+A%3E)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3014)[§](#impl-IntoIterator-for-%26Vec%3CT,+A%3E)\n\n[§](#associatedtype.Item-1)\n\nThe type of the elements being iterated over.\n\n[§](#associatedtype.IntoIter-1)\n\nWhich kind of iterator are we turning this into?\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3018)[§](#method.into_iter-1)\n\nCreates an iterator from a value. [Read more](about:blank/iter/trait.IntoIterator.html#tymethod.into_iter)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3024)[§](#impl-IntoIterator-for-%26mut+Vec%3CT,+A%3E)\n\n[§](#associatedtype.Item-2)\n\nThe type of the elements being iterated over.\n\n[§](#associatedtype.IntoIter-2)\n\nWhich kind of iterator are we turning this into?\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3028)[§](#method.into_iter-2)\n\nCreates an iterator from a value. [Read more](about:blank/iter/trait.IntoIterator.html#tymethod.into_iter)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2975)[§](#impl-IntoIterator-for-Vec%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2996)[§](#method.into_iter)\n\nCreates a consuming iterator, that is, one that moves each value out of the vector (from start to end). The vector cannot be used after calling this.\n\n##### [§](#examples-190)Examples\n\n```\nlet v = vec![\"a\".to_string(), \"b\".to_string()];\nlet mut v_iter = v.into_iter();\n\nlet first_element: Option<String> = v_iter.next();\n\nassert_eq!(first_element, Some(\"a\".to_string()));\nassert_eq!(v_iter.next(), Some(\"b\".to_string()));\nassert_eq!(v_iter.next(), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v+=+vec!%5B%22a%22.to_string(),+%22b%22.to_string()%5D;%0A++++let+mut+v_iter+=+v.into_iter();%0A++++%0A++++let+first_element:+Option%3CString%3E+=+v_iter.next();%0A++++%0A++++assert_eq!(first_element,+Some(%22a%22.to_string()));%0A++++assert_eq!(v_iter.next(),+Some(%22b%22.to_string()));%0A++++assert_eq!(v_iter.next(),+None);%0A%7D&edition=2021)\n\n[§](#associatedtype.Item)\n\nThe type of the elements being iterated over.\n\n[§](#associatedtype.IntoIter)\n\nWhich kind of iterator are we turning this into?\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3267)[§](#impl-Ord-for-Vec%3CT,+A%3E)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#24)[§](#impl-PartialEq%3C%26%5BU%5D%3E-for-Vec%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#24)[§](#method.eq-7)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#24)[§](#method.ne-7)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#37)[§](#impl-PartialEq%3C%26%5BU;+N%5D%3E-for-Vec%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#37)[§](#method.eq-9)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#37)[§](#method.ne-9)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#25)[§](#impl-PartialEq%3C%26mut+%5BU%5D%3E-for-Vec%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#25)[§](#method.eq-6)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#25)[§](#method.ne-6)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.48.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#28)[§](#impl-PartialEq%3C%5BU%5D%3E-for-Vec%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#28)[§](#method.eq-10)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#28)[§](#method.ne-10)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#36)[§](#impl-PartialEq%3C%5BU;+N%5D%3E-for-Vec%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#36)[§](#method.eq-5)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#36)[§](#method.ne-5)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.46.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#26)[§](#impl-PartialEq%3CVec%3CU,+A%3E%3E-for-%26%5BT%5D)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#26)[§](#method.eq-4)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#26)[§](#method.ne-4)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.46.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#27)[§](#impl-PartialEq%3CVec%3CU,+A%3E%3E-for-%26mut+%5BT%5D)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#27)[§](#method.eq-8)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#27)[§](#method.ne-8)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.48.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#29)[§](#impl-PartialEq%3CVec%3CU,+A%3E%3E-for-%5BT%5D)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#29)[§](#method.eq-3)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#29)[§](#method.ne-3)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#31)[§](#impl-PartialEq%3CVec%3CU,+A%3E%3E-for-Cow%3C'_,+%5BT%5D%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#31)[§](#method.eq-1)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#31)[§](#method.ne-1)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.17.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2806)[§](#impl-PartialEq%3CVec%3CU,+A%3E%3E-for-VecDeque%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2806)[§](#method.eq-2)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne-2)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#23)[§](#impl-PartialEq%3CVec%3CU,+A2%3E%3E-for-Vec%3CT,+A1%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#23)[§](#method.eq)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#23)[§](#method.ne)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3250-3254)[§](#impl-PartialOrd%3CVec%3CT,+A2%3E%3E-for-Vec%3CT,+A1%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3257)[§](#method.partial_cmp)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[§](#method.lt)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[§](#method.le)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[§](#method.gt)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[§](#method.ge)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n1.66.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1738)[§](#impl-TryFrom%3CVec%3CT%3E%3E-for-Box%3C%5BT;+N%5D%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1759)[§](#method.try_from)\n\nAttempts to convert a `Vec<T>` into a `Box<[T; N]>`.\n\nLike [`Vec::into_boxed_slice`](about:blank/struct.Vec.html#method.into_boxed_slice \"method std::vec::Vec::into_boxed_slice\"), this is in-place if `vec.capacity() == N`, but will require a reallocation otherwise.\n\n##### [§](#errors-4)Errors\n\nReturns the original `Vec<T>` in the `Err` variant if `boxed_slice.len()` does not equal `N`.\n\n##### [§](#examples-177)Examples\n\nThis can be used with [`vec!`](../macro.vec.html \"macro std::vec\") to create an array on the heap:\n\n```\nlet state: Box<[f32; 100]> = vec![1.0; 100].try_into().unwrap();\nassert_eq!(state.len(), 100);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+state:+Box%3C%5Bf32;+100%5D%3E+=+vec!%5B1.0;+100%5D.try_into().unwrap();%0A++++assert_eq!(state.len(),+100);%0A%7D&edition=2021)\n\n[§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n1.48.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3511)[§](#impl-TryFrom%3CVec%3CT,+A%3E%3E-for-%5BT;+N%5D)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3540)[§](#method.try_from-1)\n\nGets the entire contents of the `Vec<T>` as an array, if its size exactly matches that of the requested array.\n\n##### [§](#examples-178)Examples\n\n```\nassert_eq!(vec![1, 2, 3].try_into(), Ok([1, 2, 3]));\nassert_eq!(<Vec<i32>>::new().try_into(), Ok([]));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(vec!%5B1,+2,+3%5D.try_into(),+Ok(%5B1,+2,+3%5D));%0A++++assert_eq!(%3CVec%3Ci32%3E%3E::new().try_into(),+Ok(%5B%5D));%0A%7D&edition=2021)\n\nIf the length doesn’t match, the input comes back in `Err`:\n\n```\nlet r: Result<[i32; 4], _> = (0..10).collect::<Vec<_>>().try_into();\nassert_eq!(r, Err(vec![0, 1, 2, 3, 4, 5, 6, 7, 8, 9]));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+r:+Result%3C%5Bi32;+4%5D,+_%3E+=+(0..10).collect::%3CVec%3C_%3E%3E().try_into();%0A++++assert_eq!(r,+Err(vec!%5B0,+1,+2,+3,+4,+5,+6,+7,+8,+9%5D));%0A%7D&edition=2021)\n\nIf you’re fine with just getting a prefix of the `Vec<T>`, you can call [`.truncate(N)`](about:blank/struct.Vec.html#method.truncate \"method std::vec::Vec::truncate\") first.\n\n```\nlet mut v = String::from(\"hello world\").into_bytes();\nv.sort();\nv.truncate(2);\nlet [a, b]: [_; 2] = v.try_into().unwrap();\nassert_eq!(a, b' ');\nassert_eq!(b, b'd');\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+String::from(%22hello+world%22).into_bytes();%0A++++v.sort();%0A++++v.truncate(2);%0A++++let+%5Ba,+b%5D:+%5B_;+2%5D+=+v.try_into().unwrap();%0A++++assert_eq!(a,+b%27+%27);%0A++++assert_eq!(b,+b%27d%27);%0A%7D&edition=2021)\n\n[§](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n1.0.0 · [source](about:blank/src/std/io/impls.rs.html#411-443)[§](#impl-Write-for-Vec%3Cu8,+A%3E)\n\nWrite is implemented for `Vec<u8>` by appending to the vector. The vector will grow as needed.\n\n[source](about:blank/src/std/io/impls.rs.html#413-416)[§](#method.write)\n\nWrite a buffer into this writer, returning how many bytes were written. [Read more](about:blank/io/trait.Write.html#tymethod.write)\n\n[source](about:blank/src/std/io/impls.rs.html#419-426)[§](#method.write_vectored)\n\nLike [`write`](about:blank/io/trait.Write.html#tymethod.write \"method std::io::Write::write\"), except that it writes from a slice of buffers. [Read more](about:blank/io/trait.Write.html#method.write_vectored)\n\n[source](about:blank/src/std/io/impls.rs.html#429-431)[§](#method.is_write_vectored)\n\n🔬This is a nightly-only experimental API. (`can_vector` [#69941](https://github.com/rust-lang/rust/issues/69941))\n\n[source](about:blank/src/std/io/impls.rs.html#434-437)[§](#method.write_all)\n\nAttempts to write an entire buffer into this writer. [Read more](about:blank/io/trait.Write.html#method.write_all)\n\n[source](about:blank/src/std/io/impls.rs.html#440-442)[§](#method.flush)\n\nFlush this output stream, ensuring that all intermediately buffered contents reach their destination. [Read more](about:blank/io/trait.Write.html#tymethod.flush)\n\n[source](about:blank/src/std/io/mod.rs.html#1761-1776)[§](#method.write_all_vectored)\n\n🔬This is a nightly-only experimental API. (`write_all_vectored` [#70436](https://github.com/rust-lang/rust/issues/70436))\n\nAttempts to write multiple buffers into this writer. [Read more](about:blank/io/trait.Write.html#method.write_all_vectored)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1814-1850)[§](#method.write_fmt)\n\nWrites a formatted string into this writer, returning any error encountered. [Read more](about:blank/io/trait.Write.html#method.write_fmt)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1874-1879)[§](#method.by_ref)\n\nCreates a “by reference” adapter for this instance of `Write`. [Read more](about:blank/io/trait.Write.html#method.by_ref)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2828)[§](#impl-DerefPure-for-Vec%3CT,+A%3E)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3263)[§](#impl-Eq-for-Vec%3CT,+A%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[§](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[§](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[§](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[§](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[§](#method.from-20)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[§](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[§](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85)[§](#impl-ToOwned-for-T)\n\n[§](#associatedtype.Owned)\n\nThe resulting type after obtaining ownership.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88)[§](#method.to_owned)\n\nCreates owned data from borrowed data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#tymethod.to_owned)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92)[§](#method.clone_into)\n\nUses borrowed data to replace owned data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#method.clone_into)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[§](#impl-TryFrom%3CU%3E-for-T)\n\n[§](#associatedtype.Error-3)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[§](#method.try_from-2)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[§](#impl-TryInto%3CU%3E-for-T)\n\n[§](#associatedtype.Error-2)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[§](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A contiguous growable array type, written as `Vec<T>`, short for ‘vector’.\"><title>Vec in std::vec - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Vec</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Vec</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.allocator\">allocator</a></li><li><a href=\"#method.append\">append</a></li><li><a href=\"#method.as_mut_ptr\">as_mut_ptr</a></li><li><a href=\"#method.as_mut_slice\">as_mut_slice</a></li><li><a href=\"#method.as_ptr\">as_ptr</a></li><li><a href=\"#method.as_slice\">as_slice</a></li><li><a href=\"#method.capacity\">capacity</a></li><li><a href=\"#method.clear\">clear</a></li><li><a href=\"#method.dedup\">dedup</a></li><li><a href=\"#method.dedup_by\">dedup_by</a></li><li><a href=\"#method.dedup_by_key\">dedup_by_key</a></li><li><a href=\"#method.drain\">drain</a></li><li><a href=\"#method.extend_from_slice\">extend_from_slice</a></li><li><a href=\"#method.extend_from_within\">extend_from_within</a></li><li><a href=\"#method.extract_if\">extract_if</a></li><li><a href=\"#method.from_raw_parts\">from_raw_parts</a></li><li><a href=\"#method.from_raw_parts_in\">from_raw_parts_in</a></li><li><a href=\"#method.insert\">insert</a></li><li><a href=\"#method.into_boxed_slice\">into_boxed_slice</a></li><li><a href=\"#method.into_flattened\">into_flattened</a></li><li><a href=\"#method.into_raw_parts\">into_raw_parts</a></li><li><a href=\"#method.into_raw_parts_with_alloc\">into_raw_parts_with_alloc</a></li><li><a href=\"#method.is_empty\">is_empty</a></li><li><a href=\"#method.leak\">leak</a></li><li><a href=\"#method.len\">len</a></li><li><a href=\"#method.new\">new</a></li><li><a href=\"#method.new_in\">new_in</a></li><li><a href=\"#method.pop\">pop</a></li><li><a href=\"#method.pop_if\">pop_if</a></li><li><a href=\"#method.push\">push</a></li><li><a href=\"#method.push_within_capacity\">push_within_capacity</a></li><li><a href=\"#method.remove\">remove</a></li><li><a href=\"#method.reserve\">reserve</a></li><li><a href=\"#method.reserve_exact\">reserve_exact</a></li><li><a href=\"#method.resize\">resize</a></li><li><a href=\"#method.resize_with\">resize_with</a></li><li><a href=\"#method.retain\">retain</a></li><li><a href=\"#method.retain_mut\">retain_mut</a></li><li><a href=\"#method.set_len\">set_len</a></li><li><a href=\"#method.shrink_to\">shrink_to</a></li><li><a href=\"#method.shrink_to_fit\">shrink_to_fit</a></li><li><a href=\"#method.spare_capacity_mut\">spare_capacity_mut</a></li><li><a href=\"#method.splice\">splice</a></li><li><a href=\"#method.split_at_spare_mut\">split_at_spare_mut</a></li><li><a href=\"#method.split_off\">split_off</a></li><li><a href=\"#method.swap_remove\">swap_remove</a></li><li><a href=\"#method.truncate\">truncate</a></li><li><a href=\"#method.try_reserve\">try_reserve</a></li><li><a href=\"#method.try_reserve_exact\">try_reserve_exact</a></li><li><a href=\"#method.try_with_capacity\">try_with_capacity</a></li><li><a href=\"#method.try_with_capacity_in\">try_with_capacity_in</a></li><li><a href=\"#method.with_capacity\">with_capacity</a></li><li><a href=\"#method.with_capacity_in\">with_capacity_in</a></li></ul><h3><a href=\"#deref-methods-%5BT%5D\">Methods from Deref&lt;Target=[T]&gt;</a></h3><ul class=\"block deref-methods\"><li><a href=\"#method.align_to\">align_to</a></li><li><a href=\"#method.align_to_mut\">align_to_mut</a></li><li><a href=\"#method.array_chunks\">array_chunks</a></li><li><a href=\"#method.array_chunks_mut\">array_chunks_mut</a></li><li><a href=\"#method.array_windows\">array_windows</a></li><li><a href=\"#method.as_ascii\">as_ascii</a></li><li><a href=\"#method.as_ascii_unchecked\">as_ascii_unchecked</a></li><li><a href=\"#method.as_bytes\">as_bytes</a></li><li><a href=\"#method.as_chunks\">as_chunks</a></li><li><a href=\"#method.as_chunks_mut\">as_chunks_mut</a></li><li><a href=\"#method.as_chunks_unchecked\">as_chunks_unchecked</a></li><li><a href=\"#method.as_chunks_unchecked_mut\">as_chunks_unchecked_mut</a></li><li><a href=\"#method.as_flattened\">as_flattened</a></li><li><a href=\"#method.as_flattened_mut\">as_flattened_mut</a></li><li><a href=\"#method.as_mut_ptr-1\">as_mut_ptr</a></li><li><a href=\"#method.as_mut_ptr_range\">as_mut_ptr_range</a></li><li><a href=\"#method.as_ptr-1\">as_ptr</a></li><li><a href=\"#method.as_ptr_range\">as_ptr_range</a></li><li><a href=\"#method.as_rchunks\">as_rchunks</a></li><li><a href=\"#method.as_rchunks_mut\">as_rchunks_mut</a></li><li><a href=\"#method.as_simd\">as_simd</a></li><li><a href=\"#method.as_simd_mut\">as_simd_mut</a></li><li><a href=\"#method.as_str\">as_str</a></li><li><a href=\"#method.binary_search\">binary_search</a></li><li><a href=\"#method.binary_search_by\">binary_search_by</a></li><li><a href=\"#method.binary_search_by_key\">binary_search_by_key</a></li><li><a href=\"#method.chunk_by\">chunk_by</a></li><li><a href=\"#method.chunk_by_mut\">chunk_by_mut</a></li><li><a href=\"#method.chunks\">chunks</a></li><li><a href=\"#method.chunks_exact\">chunks_exact</a></li><li><a href=\"#method.chunks_exact_mut\">chunks_exact_mut</a></li><li><a href=\"#method.chunks_mut\">chunks_mut</a></li><li><a href=\"#method.clone_from_slice\">clone_from_slice</a></li><li><a href=\"#method.concat\">concat</a></li><li><a href=\"#method.connect\">connect</a></li><li><a href=\"#method.contains\">contains</a></li><li><a href=\"#method.copy_from_slice\">copy_from_slice</a></li><li><a href=\"#method.copy_within\">copy_within</a></li><li><a href=\"#method.ends_with\">ends_with</a></li><li><a href=\"#method.eq_ignore_ascii_case\">eq_ignore_ascii_case</a></li><li><a href=\"#method.escape_ascii\">escape_ascii</a></li><li><a href=\"#method.fill\">fill</a></li><li><a href=\"#method.fill_with\">fill_with</a></li><li><a href=\"#method.first\">first</a></li><li><a href=\"#method.first_chunk\">first_chunk</a></li><li><a href=\"#method.first_chunk_mut\">first_chunk_mut</a></li><li><a href=\"#method.first_mut\">first_mut</a></li><li><a href=\"#method.get\">get</a></li><li><a href=\"#method.get_many_mut\">get_many_mut</a></li><li><a href=\"#method.get_many_unchecked_mut\">get_many_unchecked_mut</a></li><li><a href=\"#method.get_mut\">get_mut</a></li><li><a href=\"#method.get_unchecked\">get_unchecked</a></li><li><a href=\"#method.get_unchecked_mut\">get_unchecked_mut</a></li><li><a href=\"#method.is_ascii\">is_ascii</a></li><li><a href=\"#method.is_empty-1\">is_empty</a></li><li><a href=\"#method.is_sorted\">is_sorted</a></li><li><a href=\"#method.is_sorted_by\">is_sorted_by</a></li><li><a href=\"#method.is_sorted_by_key\">is_sorted_by_key</a></li><li><a href=\"#method.iter\">iter</a></li><li><a href=\"#method.iter_mut\">iter_mut</a></li><li><a href=\"#method.join\">join</a></li><li><a href=\"#method.last\">last</a></li><li><a href=\"#method.last_chunk\">last_chunk</a></li><li><a href=\"#method.last_chunk_mut\">last_chunk_mut</a></li><li><a href=\"#method.last_mut\">last_mut</a></li><li><a href=\"#method.len-1\">len</a></li><li><a href=\"#method.make_ascii_lowercase\">make_ascii_lowercase</a></li><li><a href=\"#method.make_ascii_uppercase\">make_ascii_uppercase</a></li><li><a href=\"#method.partition_dedup\">partition_dedup</a></li><li><a href=\"#method.partition_dedup_by\">partition_dedup_by</a></li><li><a href=\"#method.partition_dedup_by_key\">partition_dedup_by_key</a></li><li><a href=\"#method.partition_point\">partition_point</a></li><li><a href=\"#method.rchunks\">rchunks</a></li><li><a href=\"#method.rchunks_exact\">rchunks_exact</a></li><li><a href=\"#method.rchunks_exact_mut\">rchunks_exact_mut</a></li><li><a href=\"#method.rchunks_mut\">rchunks_mut</a></li><li><a href=\"#method.repeat\">repeat</a></li><li><a href=\"#method.reverse\">reverse</a></li><li><a href=\"#method.rotate_left\">rotate_left</a></li><li><a href=\"#method.rotate_right\">rotate_right</a></li><li><a href=\"#method.rsplit\">rsplit</a></li><li><a href=\"#method.rsplit_mut\">rsplit_mut</a></li><li><a href=\"#method.rsplit_once\">rsplit_once</a></li><li><a href=\"#method.rsplitn\">rsplitn</a></li><li><a href=\"#method.rsplitn_mut\">rsplitn_mut</a></li><li><a href=\"#method.select_nth_unstable\">select_nth_unstable</a></li><li><a href=\"#method.select_nth_unstable_by\">select_nth_unstable_by</a></li><li><a href=\"#method.select_nth_unstable_by_key\">select_nth_unstable_by_key</a></li><li><a href=\"#method.sort\">sort</a></li><li><a href=\"#method.sort_by\">sort_by</a></li><li><a href=\"#method.sort_by_cached_key\">sort_by_cached_key</a></li><li><a href=\"#method.sort_by_key\">sort_by_key</a></li><li><a href=\"#method.sort_floats\">sort_floats</a></li><li><a href=\"#method.sort_floats-1\">sort_floats</a></li><li><a href=\"#method.sort_unstable\">sort_unstable</a></li><li><a href=\"#method.sort_unstable_by\">sort_unstable_by</a></li><li><a href=\"#method.sort_unstable_by_key\">sort_unstable_by_key</a></li><li><a href=\"#method.split\">split</a></li><li><a href=\"#method.split_at\">split_at</a></li><li><a href=\"#method.split_at_checked\">split_at_checked</a></li><li><a href=\"#method.split_at_mut\">split_at_mut</a></li><li><a href=\"#method.split_at_mut_checked\">split_at_mut_checked</a></li><li><a href=\"#method.split_at_mut_unchecked\">split_at_mut_unchecked</a></li><li><a href=\"#method.split_at_unchecked\">split_at_unchecked</a></li><li><a href=\"#method.split_first\">split_first</a></li><li><a href=\"#method.split_first_chunk\">split_first_chunk</a></li><li><a href=\"#method.split_first_chunk_mut\">split_first_chunk_mut</a></li><li><a href=\"#method.split_first_mut\">split_first_mut</a></li><li><a href=\"#method.split_inclusive\">split_inclusive</a></li><li><a href=\"#method.split_inclusive_mut\">split_inclusive_mut</a></li><li><a href=\"#method.split_last\">split_last</a></li><li><a href=\"#method.split_last_chunk\">split_last_chunk</a></li><li><a href=\"#method.split_last_chunk_mut\">split_last_chunk_mut</a></li><li><a href=\"#method.split_last_mut\">split_last_mut</a></li><li><a href=\"#method.split_mut\">split_mut</a></li><li><a href=\"#method.split_once\">split_once</a></li><li><a href=\"#method.splitn\">splitn</a></li><li><a href=\"#method.splitn_mut\">splitn_mut</a></li><li><a href=\"#method.starts_with\">starts_with</a></li><li><a href=\"#method.strip_prefix\">strip_prefix</a></li><li><a href=\"#method.strip_suffix\">strip_suffix</a></li><li><a href=\"#method.swap\">swap</a></li><li><a href=\"#method.swap_unchecked\">swap_unchecked</a></li><li><a href=\"#method.swap_with_slice\">swap_with_slice</a></li><li><a href=\"#method.take\">take</a></li><li><a href=\"#method.take_first\">take_first</a></li><li><a href=\"#method.take_first_mut\">take_first_mut</a></li><li><a href=\"#method.take_last\">take_last</a></li><li><a href=\"#method.take_last_mut\">take_last_mut</a></li><li><a href=\"#method.take_mut\">take_mut</a></li><li><a href=\"#method.to_ascii_lowercase\">to_ascii_lowercase</a></li><li><a href=\"#method.to_ascii_uppercase\">to_ascii_uppercase</a></li><li><a href=\"#method.to_vec\">to_vec</a></li><li><a href=\"#method.to_vec_in\">to_vec_in</a></li><li><a href=\"#method.trim_ascii\">trim_ascii</a></li><li><a href=\"#method.trim_ascii_end\">trim_ascii_end</a></li><li><a href=\"#method.trim_ascii_start\">trim_ascii_start</a></li><li><a href=\"#method.utf8_chunks\">utf8_chunks</a></li><li><a href=\"#method.windows\">windows</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-AsMut%3CVec%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\">AsMut&lt;Vec&lt;T, A&gt;&gt;</a></li><li><a href=\"#impl-AsMut%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\">AsMut&lt;[T]&gt;</a></li><li><a href=\"#impl-AsRef%3CVec%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\">AsRef&lt;Vec&lt;T, A&gt;&gt;</a></li><li><a href=\"#impl-AsRef%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\">AsRef&lt;[T]&gt;</a></li><li><a href=\"#impl-Borrow%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\">Borrow&lt;[T]&gt;</a></li><li><a href=\"#impl-BorrowMut%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\">BorrowMut&lt;[T]&gt;</a></li><li><a href=\"#impl-Clone-for-Vec%3CT,+A%3E\">Clone</a></li><li><a href=\"#impl-Debug-for-Vec%3CT,+A%3E\">Debug</a></li><li><a href=\"#impl-Default-for-Vec%3CT%3E\">Default</a></li><li><a href=\"#impl-Deref-for-Vec%3CT,+A%3E\">Deref</a></li><li><a href=\"#impl-DerefMut-for-Vec%3CT,+A%3E\">DerefMut</a></li><li><a href=\"#impl-DerefPure-for-Vec%3CT,+A%3E\">DerefPure</a></li><li><a href=\"#impl-Drop-for-Vec%3CT,+A%3E\">Drop</a></li><li><a href=\"#impl-Eq-for-Vec%3CT,+A%3E\">Eq</a></li><li><a href=\"#impl-Extend%3C%26T%3E-for-Vec%3CT,+A%3E\">Extend&lt;&amp;'a T&gt;</a></li><li><a href=\"#impl-Extend%3CT%3E-for-Vec%3CT,+A%3E\">Extend&lt;T&gt;</a></li><li><a href=\"#impl-From%3C%26Vec%3CT%3E%3E-for-Cow%3C'a,+%5BT%5D%3E\">From&lt;&amp;'a Vec&lt;T&gt;&gt;</a></li><li><a href=\"#impl-From%3C%26%5BT;+N%5D%3E-for-Vec%3CT%3E\">From&lt;&amp;[T; N]&gt;</a></li><li><a href=\"#impl-From%3C%26%5BT%5D%3E-for-Vec%3CT%3E\">From&lt;&amp;[T]&gt;</a></li><li><a href=\"#impl-From%3C%26mut+%5BT;+N%5D%3E-for-Vec%3CT%3E\">From&lt;&amp;mut [T; N]&gt;</a></li><li><a href=\"#impl-From%3C%26mut+%5BT%5D%3E-for-Vec%3CT%3E\">From&lt;&amp;mut [T]&gt;</a></li><li><a href=\"#impl-From%3C%26str%3E-for-Vec%3Cu8%3E\">From&lt;&amp;str&gt;</a></li><li><a href=\"#impl-From%3CBinaryHeap%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\">From&lt;BinaryHeap&lt;T, A&gt;&gt;</a></li><li><a href=\"#impl-From%3CBox%3C%5BT%5D,+A%3E%3E-for-Vec%3CT,+A%3E\">From&lt;Box&lt;[T], A&gt;&gt;</a></li><li><a href=\"#impl-From%3CCString%3E-for-Vec%3Cu8%3E\">From&lt;CString&gt;</a></li><li><a href=\"#impl-From%3CCow%3C'a,+%5BT%5D%3E%3E-for-Vec%3CT%3E\">From&lt;Cow&lt;'a, [T]&gt;&gt;</a></li><li><a href=\"#impl-From%3CString%3E-for-Vec%3Cu8%3E\">From&lt;String&gt;</a></li><li><a href=\"#impl-From%3CVec%3CNonZero%3Cu8%3E%3E%3E-for-CString\">From&lt;Vec&lt;NonZero&lt;u8&gt;&gt;&gt;</a></li><li><a href=\"#impl-From%3CVec%3CT,+A%3E%3E-for-Arc%3C%5BT%5D,+A%3E\">From&lt;Vec&lt;T, A&gt;&gt;</a></li><li><a href=\"#impl-From%3CVec%3CT,+A%3E%3E-for-BinaryHeap%3CT,+A%3E\">From&lt;Vec&lt;T, A&gt;&gt;</a></li><li><a href=\"#impl-From%3CVec%3CT,+A%3E%3E-for-Box%3C%5BT%5D,+A%3E\">From&lt;Vec&lt;T, A&gt;&gt;</a></li><li><a href=\"#impl-From%3CVec%3CT,+A%3E%3E-for-Rc%3C%5BT%5D,+A%3E\">From&lt;Vec&lt;T, A&gt;&gt;</a></li><li><a href=\"#impl-From%3CVec%3CT,+A%3E%3E-for-VecDeque%3CT,+A%3E\">From&lt;Vec&lt;T, A&gt;&gt;</a></li><li><a href=\"#impl-From%3CVec%3CT%3E%3E-for-Cow%3C'a,+%5BT%5D%3E\">From&lt;Vec&lt;T&gt;&gt;</a></li><li><a href=\"#impl-From%3CVecDeque%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\">From&lt;VecDeque&lt;T, A&gt;&gt;</a></li><li><a href=\"#impl-From%3C%5BT;+N%5D%3E-for-Vec%3CT%3E\">From&lt;[T; N]&gt;</a></li><li><a href=\"#impl-FromIterator%3CT%3E-for-Vec%3CT%3E\">FromIterator&lt;T&gt;</a></li><li><a href=\"#impl-Hash-for-Vec%3CT,+A%3E\">Hash</a></li><li><a href=\"#impl-Index%3CI%3E-for-Vec%3CT,+A%3E\">Index&lt;I&gt;</a></li><li><a href=\"#impl-IndexMut%3CI%3E-for-Vec%3CT,+A%3E\">IndexMut&lt;I&gt;</a></li><li><a href=\"#impl-IntoIterator-for-%26Vec%3CT,+A%3E\">IntoIterator</a></li><li><a href=\"#impl-IntoIterator-for-%26mut+Vec%3CT,+A%3E\">IntoIterator</a></li><li><a href=\"#impl-IntoIterator-for-Vec%3CT,+A%3E\">IntoIterator</a></li><li><a href=\"#impl-Ord-for-Vec%3CT,+A%3E\">Ord</a></li><li><a href=\"#impl-PartialEq%3C%26%5BU;+N%5D%3E-for-Vec%3CT,+A%3E\">PartialEq&lt;&amp;[U; N]&gt;</a></li><li><a href=\"#impl-PartialEq%3C%26%5BU%5D%3E-for-Vec%3CT,+A%3E\">PartialEq&lt;&amp;[U]&gt;</a></li><li><a href=\"#impl-PartialEq%3C%26mut+%5BU%5D%3E-for-Vec%3CT,+A%3E\">PartialEq&lt;&amp;mut [U]&gt;</a></li><li><a href=\"#impl-PartialEq%3CVec%3CU,+A2%3E%3E-for-Vec%3CT,+A1%3E\">PartialEq&lt;Vec&lt;U, A2&gt;&gt;</a></li><li><a href=\"#impl-PartialEq%3CVec%3CU,+A%3E%3E-for-%26%5BT%5D\">PartialEq&lt;Vec&lt;U, A&gt;&gt;</a></li><li><a href=\"#impl-PartialEq%3CVec%3CU,+A%3E%3E-for-%26mut+%5BT%5D\">PartialEq&lt;Vec&lt;U, A&gt;&gt;</a></li><li><a href=\"#impl-PartialEq%3CVec%3CU,+A%3E%3E-for-%5BT%5D\">PartialEq&lt;Vec&lt;U, A&gt;&gt;</a></li><li><a href=\"#impl-PartialEq%3CVec%3CU,+A%3E%3E-for-Cow%3C'_,+%5BT%5D%3E\">PartialEq&lt;Vec&lt;U, A&gt;&gt;</a></li><li><a href=\"#impl-PartialEq%3CVec%3CU,+A%3E%3E-for-VecDeque%3CT,+A%3E\">PartialEq&lt;Vec&lt;U, A&gt;&gt;</a></li><li><a href=\"#impl-PartialEq%3C%5BU;+N%5D%3E-for-Vec%3CT,+A%3E\">PartialEq&lt;[U; N]&gt;</a></li><li><a href=\"#impl-PartialEq%3C%5BU%5D%3E-for-Vec%3CT,+A%3E\">PartialEq&lt;[U]&gt;</a></li><li><a href=\"#impl-PartialOrd%3CVec%3CT,+A2%3E%3E-for-Vec%3CT,+A1%3E\">PartialOrd&lt;Vec&lt;T, A2&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CVec%3CT,+A%3E%3E-for-%5BT;+N%5D\">TryFrom&lt;Vec&lt;T, A&gt;&gt;</a></li><li><a href=\"#impl-TryFrom%3CVec%3CT%3E%3E-for-Box%3C%5BT;+N%5D%3E\">TryFrom&lt;Vec&lt;T&gt;&gt;</a></li><li><a href=\"#impl-Write-for-Vec%3Cu8,+A%3E\">Write</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-Vec%3CT,+A%3E\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-Vec%3CT,+A%3E\">RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-Vec%3CT,+A%3E\">Send</a></li><li><a href=\"#impl-Sync-for-Vec%3CT,+A%3E\">Sync</a></li><li><a href=\"#impl-Unpin-for-Vec%3CT,+A%3E\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-Vec%3CT,+A%3E\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-ToOwned-for-T\">ToOwned</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::vec</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Drain.html\">Drain</a></li><li><a href=\"struct.ExtractIf.html\">ExtractIf</a></li><li><a href=\"struct.IntoIter.html\">IntoIter</a></li><li><a href=\"struct.Splice.html\">Splice</a></li><li><a href=\"struct.Vec.html\">Vec</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">vec</a>::<wbr><a class=\"struct\" href=\"#\">Vec</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#398\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct Vec&lt;T, A = <a class=\"struct\" href=\"../alloc/struct.Global.html\" title=\"struct std::alloc::Global\">Global</a>&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div>{ <span class=\"comment\">/* private fields */</span> }</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A contiguous growable array type, written as <code>Vec&lt;T&gt;</code>, short for ‘vector’.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = Vec::new();\nvec.push(<span class=\"number\">1</span>);\nvec.push(<span class=\"number\">2</span>);\n\n<span class=\"macro\">assert_eq!</span>(vec.len(), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(vec[<span class=\"number\">0</span>], <span class=\"number\">1</span>);\n\n<span class=\"macro\">assert_eq!</span>(vec.pop(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(vec.len(), <span class=\"number\">1</span>);\n\nvec[<span class=\"number\">0</span>] = <span class=\"number\">7</span>;\n<span class=\"macro\">assert_eq!</span>(vec[<span class=\"number\">0</span>], <span class=\"number\">7</span>);\n\nvec.extend([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n\n<span class=\"kw\">for </span>x <span class=\"kw\">in </span><span class=\"kw-2\">&amp;</span>vec {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{x}\"</span>);\n}\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">7</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+vec+=+Vec::new();%0A++++vec.push(1);%0A++++vec.push(2);%0A++++%0A++++assert_eq!(vec.len(),+2);%0A++++assert_eq!(vec%5B0%5D,+1);%0A++++%0A++++assert_eq!(vec.pop(),+Some(2));%0A++++assert_eq!(vec.len(),+1);%0A++++%0A++++vec%5B0%5D+=+7;%0A++++assert_eq!(vec%5B0%5D,+7);%0A++++%0A++++vec.extend(%5B1,+2,+3%5D);%0A++++%0A++++for+x+in+%26vec+%7B%0A++++++++println!(%22%7Bx%7D%22);%0A++++%7D%0A++++assert_eq!(vec,+%5B7,+1,+2,+3%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>The <a href=\"../macro.vec.html\" title=\"macro std::vec\"><code>vec!</code></a> macro is provided for convenient initialization:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec1 = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\nvec1.push(<span class=\"number\">4</span>);\n<span class=\"kw\">let </span>vec2 = Vec::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n<span class=\"macro\">assert_eq!</span>(vec1, vec2);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+vec1+=+vec!%5B1,+2,+3%5D;%0A++++vec1.push(4);%0A++++let+vec2+=+Vec::from(%5B1,+2,+3,+4%5D);%0A++++assert_eq!(vec1,+vec2);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>It can also initialize each element of a <code>Vec&lt;T&gt;</code> with a given value.\nThis may be more efficient than performing allocation and initialization\nin separate steps, especially when initializing a vector of zeros:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>; <span class=\"number\">5</span>];\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]);\n\n<span class=\"comment\">// The following is equivalent, but potentially slower:\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = Vec::with_capacity(<span class=\"number\">5</span>);\nvec.resize(<span class=\"number\">5</span>, <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+vec+=+vec!%5B0;+5%5D;%0A++++assert_eq!(vec,+%5B0,+0,+0,+0,+0%5D);%0A++++%0A++++//+The+following+is+equivalent,+but+potentially+slower:%0A++++let+mut+vec+=+Vec::with_capacity(5);%0A++++vec.resize(5,+0);%0A++++assert_eq!(vec,+%5B0,+0,+0,+0,+0%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>For more information, see\n<a href=\"#capacity-and-reallocation\">Capacity and Reallocation</a>.</p>\n<p>Use a <code>Vec&lt;T&gt;</code> as an efficient stack:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>stack = Vec::new();\n\nstack.push(<span class=\"number\">1</span>);\nstack.push(<span class=\"number\">2</span>);\nstack.push(<span class=\"number\">3</span>);\n\n<span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span>(top) = stack.pop() {\n    <span class=\"comment\">// Prints 3, 2, 1\n    </span><span class=\"macro\">println!</span>(<span class=\"string\">\"{top}\"</span>);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+stack+=+Vec::new();%0A++++%0A++++stack.push(1);%0A++++stack.push(2);%0A++++stack.push(3);%0A++++%0A++++while+let+Some(top)+=+stack.pop()+%7B%0A++++++++//+Prints+3,+2,+1%0A++++++++println!(%22%7Btop%7D%22);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<h2 id=\"indexing\"><a class=\"doc-anchor\" href=\"#indexing\">§</a>Indexing</h2>\n<p>The <code>Vec</code> type allows access to values by index, because it implements the\n<a href=\"../ops/trait.Index.html\" title=\"trait std::ops::Index\"><code>Index</code></a> trait. An example will be more explicit:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>];\n<span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, v[<span class=\"number\">1</span>]); <span class=\"comment\">// it will display '2'</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v+=+vec!%5B0,+2,+4,+6%5D;%0A++++println!(%22%7B%7D%22,+v%5B1%5D);+//+it+will+display+'2'%0A%7D&amp;edition=2021\">Run</a></div>\n<p>However be careful: if you try to access an index which isn’t in the <code>Vec</code>,\nyour software will panic! You cannot do this:</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>];\n<span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, v[<span class=\"number\">6</span>]); <span class=\"comment\">// it will panic!</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v+=+vec!%5B0,+2,+4,+6%5D;%0A++++println!(%22%7B%7D%22,+v%5B6%5D);+//+it+will+panic!%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Use <a href=\"../primitive.slice.html#method.get\" title=\"method slice::get\"><code>get</code></a> and <a href=\"../primitive.slice.html#method.get_mut\" title=\"method slice::get_mut\"><code>get_mut</code></a> if you want to check whether the index is in\nthe <code>Vec</code>.</p>\n<h2 id=\"slicing\"><a class=\"doc-anchor\" href=\"#slicing\">§</a>Slicing</h2>\n<p>A <code>Vec</code> can be mutable. On the other hand, slices are read-only objects.\nTo get a <a href=\"../primitive.slice.html\" title=\"primitive slice\">slice</a>, use <a href=\"../primitive.reference.html\" title=\"primitive reference\"><code>&amp;</code></a>. Example:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>read_slice(slice: <span class=\"kw-2\">&amp;</span>[usize]) {\n    <span class=\"comment\">// ...\n</span>}\n\n<span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>];\nread_slice(<span class=\"kw-2\">&amp;</span>v);\n\n<span class=\"comment\">// ... and that's all!\n// you can also do it like this:\n</span><span class=\"kw\">let </span>u: <span class=\"kw-2\">&amp;</span>[usize] = <span class=\"kw-2\">&amp;</span>v;\n<span class=\"comment\">// or like this:\n</span><span class=\"kw\">let </span>u: <span class=\"kw-2\">&amp;</span>[<span class=\"kw\">_</span>] = <span class=\"kw-2\">&amp;</span>v;</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++fn+read_slice(slice:+%26%5Busize%5D)+%7B%0A++++++++//+...%0A++++%7D%0A++++%0A++++let+v+=+vec!%5B0,+1%5D;%0A++++read_slice(%26v);%0A++++%0A++++//+...+and+that's+all!%0A++++//+you+can+also+do+it+like+this:%0A++++let+u:+%26%5Busize%5D+=+%26v;%0A++++//+or+like+this:%0A++++let+u:+%26%5B_%5D+=+%26v;%0A%7D&amp;edition=2021\">Run</a></div>\n<p>In Rust, it’s more common to pass slices as arguments rather than vectors\nwhen you just want to provide read access. The same goes for <a href=\"../string/struct.String.html\" title=\"struct std::string::String\"><code>String</code></a> and\n<a href=\"../primitive.str.html\" title=\"primitive str\"><code>&amp;str</code></a>.</p>\n<h2 id=\"capacity-and-reallocation\"><a class=\"doc-anchor\" href=\"#capacity-and-reallocation\">§</a>Capacity and reallocation</h2>\n<p>The capacity of a vector is the amount of space allocated for any future\nelements that will be added onto the vector. This is not to be confused with\nthe <em>length</em> of a vector, which specifies the number of actual elements\nwithin the vector. If a vector’s length exceeds its capacity, its capacity\nwill automatically be increased, but its elements will have to be\nreallocated.</p>\n<p>For example, a vector with capacity 10 and length 0 would be an empty vector\nwith space for 10 more elements. Pushing 10 or fewer elements onto the\nvector will not change its capacity or cause reallocation to occur. However,\nif the vector’s length is increased to 11, it will have to reallocate, which\ncan be slow. For this reason, it is recommended to use <a href=\"struct.Vec.html#method.with_capacity\" title=\"associated function std::vec::Vec::with_capacity\"><code>Vec::with_capacity</code></a>\nwhenever possible to specify how big the vector is expected to get.</p>\n<h2 id=\"guarantees\"><a class=\"doc-anchor\" href=\"#guarantees\">§</a>Guarantees</h2>\n<p>Due to its incredibly fundamental nature, <code>Vec</code> makes a lot of guarantees\nabout its design. This ensures that it’s as low-overhead as possible in\nthe general case, and can be correctly manipulated in primitive ways\nby unsafe code. Note that these guarantees refer to an unqualified <code>Vec&lt;T&gt;</code>.\nIf additional type parameters are added (e.g., to support custom allocators),\noverriding their defaults may change the behavior.</p>\n<p>Most fundamentally, <code>Vec</code> is and always will be a (pointer, capacity, length)\ntriplet. No more, no less. The order of these fields is completely\nunspecified, and you should use the appropriate methods to modify these.\nThe pointer will never be null, so this type is null-pointer-optimized.</p>\n<p>However, the pointer might not actually point to allocated memory. In particular,\nif you construct a <code>Vec</code> with capacity 0 via <a href=\"struct.Vec.html#method.new\" title=\"associated function std::vec::Vec::new\"><code>Vec::new</code></a>, <a href=\"../macro.vec.html\" title=\"macro std::vec\"><code>vec![]</code></a>,\n<a href=\"struct.Vec.html#method.with_capacity\" title=\"associated function std::vec::Vec::with_capacity\"><code>Vec::with_capacity(0)</code></a>, or by calling <a href=\"struct.Vec.html#method.shrink_to_fit\" title=\"method std::vec::Vec::shrink_to_fit\"><code>shrink_to_fit</code></a>\non an empty Vec, it will not allocate memory. Similarly, if you store zero-sized\ntypes inside a <code>Vec</code>, it will not allocate space for them. <em>Note that in this case\nthe <code>Vec</code> might not report a <a href=\"struct.Vec.html#method.capacity\" title=\"method std::vec::Vec::capacity\"><code>capacity</code></a> of 0</em>. <code>Vec</code> will allocate if and only\nif <code><a href=\"../mem/fn.size_of.html\" title=\"fn std::mem::size_of\">mem::size_of::&lt;T&gt;</a>() * <a href=\"struct.Vec.html#method.capacity\" title=\"method std::vec::Vec::capacity\">capacity</a>() &gt; 0</code>. In general, <code>Vec</code>’s allocation\ndetails are very subtle — if you intend to allocate memory using a <code>Vec</code>\nand use it for something else (either to pass to unsafe code, or to build your\nown memory-backed collection), be sure to deallocate this memory by using\n<code>from_raw_parts</code> to recover the <code>Vec</code> and then dropping it.</p>\n<p>If a <code>Vec</code> <em>has</em> allocated memory, then the memory it points to is on the heap\n(as defined by the allocator Rust is configured to use by default), and its\npointer points to <a href=\"struct.Vec.html#method.len\" title=\"method std::vec::Vec::len\"><code>len</code></a> initialized, contiguous elements in order (what\nyou would see if you coerced it to a slice), followed by <code><a href=\"struct.Vec.html#method.capacity\" title=\"method std::vec::Vec::capacity\">capacity</a> - <a href=\"struct.Vec.html#method.len\" title=\"method std::vec::Vec::len\">len</a></code>\nlogically uninitialized, contiguous elements.</p>\n<p>A vector containing the elements <code>'a'</code> and <code>'b'</code> with capacity 4 can be\nvisualized as below. The top part is the <code>Vec</code> struct, it contains a\npointer to the head of the allocation in the heap, length and capacity.\nThe bottom part is the allocation on the heap, a contiguous memory block.</p>\n<div class=\"example-wrap\"><pre class=\"language-text\"><code>            ptr      len  capacity\n       +--------+--------+--------+\n       | 0x0123 |      2 |      4 |\n       +--------+--------+--------+\n            |\n            v\nHeap   +--------+--------+--------+--------+\n       |    'a' |    'b' | uninit | uninit |\n       +--------+--------+--------+--------+\n</code></pre></div>\n<ul>\n<li><strong>uninit</strong> represents memory that is not initialized, see <a href=\"../mem/union.MaybeUninit.html\" title=\"union std::mem::MaybeUninit\"><code>MaybeUninit</code></a>.</li>\n<li>Note: the ABI is not stable and <code>Vec</code> makes no guarantees about its memory\nlayout (including the order of fields).</li>\n</ul>\n<p><code>Vec</code> will never perform a “small optimization” where elements are actually\nstored on the stack for two reasons:</p>\n<ul>\n<li>\n<p>It would make it more difficult for unsafe code to correctly manipulate\na <code>Vec</code>. The contents of a <code>Vec</code> wouldn’t have a stable address if it were\nonly moved, and it would be more difficult to determine if a <code>Vec</code> had\nactually allocated memory.</p>\n</li>\n<li>\n<p>It would penalize the general case, incurring an additional branch\non every access.</p>\n</li>\n</ul>\n<p><code>Vec</code> will never automatically shrink itself, even if completely empty. This\nensures no unnecessary allocations or deallocations occur. Emptying a <code>Vec</code>\nand then filling it back up to the same <a href=\"struct.Vec.html#method.len\" title=\"method std::vec::Vec::len\"><code>len</code></a> should incur no calls to\nthe allocator. If you wish to free up unused memory, use\n<a href=\"struct.Vec.html#method.shrink_to_fit\" title=\"method std::vec::Vec::shrink_to_fit\"><code>shrink_to_fit</code></a> or <a href=\"struct.Vec.html#method.shrink_to\" title=\"method std::vec::Vec::shrink_to\"><code>shrink_to</code></a>.</p>\n<p><a href=\"struct.Vec.html#method.push\" title=\"method std::vec::Vec::push\"><code>push</code></a> and <a href=\"struct.Vec.html#method.insert\" title=\"method std::vec::Vec::insert\"><code>insert</code></a> will never (re)allocate if the reported capacity is\nsufficient. <a href=\"struct.Vec.html#method.push\" title=\"method std::vec::Vec::push\"><code>push</code></a> and <a href=\"struct.Vec.html#method.insert\" title=\"method std::vec::Vec::insert\"><code>insert</code></a> <em>will</em> (re)allocate if\n<code><a href=\"struct.Vec.html#method.len\" title=\"method std::vec::Vec::len\">len</a> == <a href=\"struct.Vec.html#method.capacity\" title=\"method std::vec::Vec::capacity\">capacity</a></code>. That is, the reported capacity is completely\naccurate, and can be relied on. It can even be used to manually free the memory\nallocated by a <code>Vec</code> if desired. Bulk insertion methods <em>may</em> reallocate, even\nwhen not necessary.</p>\n<p><code>Vec</code> does not guarantee any particular growth strategy when reallocating\nwhen full, nor when <a href=\"struct.Vec.html#method.reserve\" title=\"method std::vec::Vec::reserve\"><code>reserve</code></a> is called. The current strategy is basic\nand it may prove desirable to use a non-constant growth factor. Whatever\nstrategy is used will of course guarantee <em>O</em>(1) amortized <a href=\"struct.Vec.html#method.push\" title=\"method std::vec::Vec::push\"><code>push</code></a>.</p>\n<p><code>vec![x; n]</code>, <code>vec![a, b, c, d]</code>, and\n<a href=\"struct.Vec.html#method.with_capacity\" title=\"associated function std::vec::Vec::with_capacity\"><code>Vec::with_capacity(n)</code></a>, will all produce a <code>Vec</code>\nwith at least the requested capacity. If <code><a href=\"struct.Vec.html#method.len\" title=\"method std::vec::Vec::len\">len</a> == <a href=\"struct.Vec.html#method.capacity\" title=\"method std::vec::Vec::capacity\">capacity</a></code>,\n(as is the case for the <a href=\"../macro.vec.html\" title=\"macro std::vec\"><code>vec!</code></a> macro), then a <code>Vec&lt;T&gt;</code> can be converted to\nand from a <a href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\"><code>Box&lt;[T]&gt;</code></a> without reallocating or moving the elements.</p>\n<p><code>Vec</code> will not specifically overwrite any data that is removed from it,\nbut also won’t specifically preserve it. Its uninitialized memory is\nscratch space that it may use however it wants. It will generally just do\nwhatever is most efficient or otherwise easy to implement. Do not rely on\nremoved data to be erased for security purposes. Even if you drop a <code>Vec</code>, its\nbuffer may simply be reused by another allocation. Even if you zero a <code>Vec</code>’s memory\nfirst, that might not actually happen because the optimizer does not consider\nthis a side-effect that must be preserved. There is one case which we will\nnot break, however: using <code>unsafe</code> code to write to the excess capacity,\nand then increasing the length to match, is always valid.</p>\n<p>Currently, <code>Vec</code> does not guarantee the order in which elements are dropped.\nThe order has changed in the past and may change again.</p>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Vec%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#407\">source</a><a href=\"#impl-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.new\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.39.0\">1.0.0 (const: 1.39.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#422\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.new\" class=\"fn\">new</a>() -&gt; <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a new, empty <code>Vec&lt;T&gt;</code>.</p>\n<p>The vector will not allocate until elements are pushed onto it.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec: Vec&lt;i32&gt; = Vec::new();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Ballow(unused_mut)%5D%0Afn+main()+%7B%0A++++let+mut+vec:+Vec%3Ci32%3E+=+Vec::new();%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.with_capacity\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#480\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.with_capacity\" class=\"fn\">with_capacity</a>(capacity: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a new, empty <code>Vec&lt;T&gt;</code> with at least the specified capacity.</p>\n<p>The vector will be able to hold at least <code>capacity</code> elements without\nreallocating. This method is allowed to allocate for more elements than\n<code>capacity</code>. If <code>capacity</code> is 0, the vector will not allocate.</p>\n<p>It is important to note that although the returned vector has the\nminimum <em>capacity</em> specified, the vector will have a zero <em>length</em>. For\nan explanation of the difference between length and capacity, see\n<em><a href=\"#capacity-and-reallocation\">Capacity and reallocation</a></em>.</p>\n<p>If it is important to know the exact allocated capacity of a <code>Vec</code>,\nalways use the <a href=\"struct.Vec.html#method.capacity\" title=\"method std::vec::Vec::capacity\"><code>capacity</code></a> method after construction.</p>\n<p>For <code>Vec&lt;T&gt;</code> where <code>T</code> is a zero-sized type, there will be no allocation\nand the capacity will always be <code>usize::MAX</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = Vec::with_capacity(<span class=\"number\">10</span>);\n\n<span class=\"comment\">// The vector contains no items, even though it has capacity for more\n</span><span class=\"macro\">assert_eq!</span>(vec.len(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);\n\n<span class=\"comment\">// These are all done without reallocating...\n</span><span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..<span class=\"number\">10 </span>{\n    vec.push(i);\n}\n<span class=\"macro\">assert_eq!</span>(vec.len(), <span class=\"number\">10</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);\n\n<span class=\"comment\">// ...but this may make the vector reallocate\n</span>vec.push(<span class=\"number\">11</span>);\n<span class=\"macro\">assert_eq!</span>(vec.len(), <span class=\"number\">11</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">11</span>);\n\n<span class=\"comment\">// A vector of a zero-sized type will always over-allocate, since no\n// allocation is necessary\n</span><span class=\"kw\">let </span>vec_units = Vec::&lt;()&gt;::with_capacity(<span class=\"number\">10</span>);\n<span class=\"macro\">assert_eq!</span>(vec_units.capacity(), usize::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+vec+=+Vec::with_capacity(10);%0A++++%0A++++//+The+vector+contains+no+items,+even+though+it+has+capacity+for+more%0A++++assert_eq!(vec.len(),+0);%0A++++assert!(vec.capacity()+%3E=+10);%0A++++%0A++++//+These+are+all+done+without+reallocating...%0A++++for+i+in+0..10+%7B%0A++++++++vec.push(i);%0A++++%7D%0A++++assert_eq!(vec.len(),+10);%0A++++assert!(vec.capacity()+%3E=+10);%0A++++%0A++++//+...but+this+may+make+the+vector+reallocate%0A++++vec.push(11);%0A++++assert_eq!(vec.len(),+11);%0A++++assert!(vec.capacity()+%3E=+11);%0A++++%0A++++//+A+vector+of+a+zero-sized+type+will+always+over-allocate,+since+no%0A++++//+allocation+is+necessary%0A++++let+vec_units+=+Vec::%3C()%3E::with_capacity(10);%0A++++assert_eq!(vec_units.capacity(),+usize::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_with_capacity\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#496\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.try_with_capacity\" class=\"fn\">try_with_capacity</a>(capacity: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T&gt;, <a class=\"struct\" href=\"../collections/struct.TryReserveError.html\" title=\"struct std::collections::TryReserveError\">TryReserveError</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>try_with_capacity</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/91913\">#91913</a>)</span></div></span></summary><div class=\"docblock\"><p>Constructs a new, empty <code>Vec&lt;T&gt;</code> with at least the specified capacity.</p>\n<p>The vector will be able to hold at least <code>capacity</code> elements without\nreallocating. This method is allowed to allocate for more elements than\n<code>capacity</code>. If <code>capacity</code> is 0, the vector will not allocate.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>Returns an error if the capacity exceeds <code>isize::MAX</code> <em>bytes</em>,\nor if the allocator reports allocation failure.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_raw_parts\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#603\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.from_raw_parts\" class=\"fn\">from_raw_parts</a>(\n    ptr: <a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a>,\n    length: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>,\n    capacity: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a <code>Vec&lt;T&gt;</code> directly from a pointer, a length, and a capacity.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>This is highly unsafe, due to the number of invariants that aren’t\nchecked:</p>\n<ul>\n<li><code>ptr</code> must have been allocated using the global allocator, such as via\nthe <a href=\"../alloc/fn.alloc.html\" title=\"fn std::alloc::alloc\"><code>alloc::alloc</code></a> function.</li>\n<li><code>T</code> needs to have the same alignment as what <code>ptr</code> was allocated with.\n(<code>T</code> having a less strict alignment is not sufficient, the alignment really\nneeds to be equal to satisfy the <a href=\"../alloc/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method std::alloc::GlobalAlloc::dealloc\"><code>dealloc</code></a> requirement that memory must be\nallocated and deallocated with the same layout.)</li>\n<li>The size of <code>T</code> times the <code>capacity</code> (ie. the allocated size in bytes) needs\nto be the same size as the pointer was allocated with. (Because similar to\nalignment, <a href=\"../alloc/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method std::alloc::GlobalAlloc::dealloc\"><code>dealloc</code></a> must be called with the same layout <code>size</code>.)</li>\n<li><code>length</code> needs to be less than or equal to <code>capacity</code>.</li>\n<li>The first <code>length</code> values must be properly initialized values of type <code>T</code>.</li>\n<li><code>capacity</code> needs to be the capacity that the pointer was allocated with.</li>\n<li>The allocated size in bytes must be no larger than <code>isize::MAX</code>.\nSee the safety documentation of <a href=\"../primitive.pointer.html#method.offset\" title=\"method pointer::offset\"><code>pointer::offset</code></a>.</li>\n</ul>\n<p>These requirements are always upheld by any <code>ptr</code> that has been allocated\nvia <code>Vec&lt;T&gt;</code>. Other allocation sources are allowed if the invariants are\nupheld.</p>\n<p>Violating these may cause problems like corrupting the allocator’s\ninternal data structures. For example it is normally <strong>not</strong> safe\nto build a <code>Vec&lt;u8&gt;</code> from a pointer to a C <code>char</code> array with length\n<code>size_t</code>, doing so is only safe if the array was initially allocated by\na <code>Vec</code> or <code>String</code>.\nIt’s also not safe to build one from a <code>Vec&lt;u16&gt;</code> and its length, because\nthe allocator cares about the alignment, and these two types have different\nalignments. The buffer was allocated with alignment 2 (for <code>u16</code>), but after\nturning it into a <code>Vec&lt;u8&gt;</code> it’ll be deallocated with alignment 1. To avoid\nthese issues, it is often preferable to do casting/transmuting using\n<a href=\"../slice/fn.from_raw_parts.html\" title=\"fn std::slice::from_raw_parts\"><code>slice::from_raw_parts</code></a> instead.</p>\n<p>The ownership of <code>ptr</code> is effectively transferred to the\n<code>Vec&lt;T&gt;</code> which may then deallocate, reallocate or change the\ncontents of memory pointed to by the pointer at will. Ensure\nthat nothing else uses the pointer after calling this\nfunction.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr;\n<span class=\"kw\">use </span>std::mem;\n\n<span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n\n<span class=\"comment\">// Prevent running `v`'s destructor so we are in complete control\n// of the allocation.\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = mem::ManuallyDrop::new(v);\n\n<span class=\"comment\">// Pull out the various important pieces of information about `v`\n</span><span class=\"kw\">let </span>p = v.as_mut_ptr();\n<span class=\"kw\">let </span>len = v.len();\n<span class=\"kw\">let </span>cap = v.capacity();\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// Overwrite memory with 4, 5, 6\n    </span><span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..len {\n        ptr::write(p.add(i), <span class=\"number\">4 </span>+ i);\n    }\n\n    <span class=\"comment\">// Put everything back together into a Vec\n    </span><span class=\"kw\">let </span>rebuilt = Vec::from_raw_parts(p, len, cap);\n    <span class=\"macro\">assert_eq!</span>(rebuilt, [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ptr;%0A++++use+std::mem;%0A++++%0A++++let+v+=+vec!%5B1,+2,+3%5D;%0A++++%0A++++//+Prevent+running+%60v%60's+destructor+so+we+are+in+complete+control%0A++++//+of+the+allocation.%0A++++let+mut+v+=+mem::ManuallyDrop::new(v);%0A++++%0A++++//+Pull+out+the+various+important+pieces+of+information+about+%60v%60%0A++++let+p+=+v.as_mut_ptr();%0A++++let+len+=+v.len();%0A++++let+cap+=+v.capacity();%0A++++%0A++++unsafe+%7B%0A++++++++//+Overwrite+memory+with+4,+5,+6%0A++++++++for+i+in+0..len+%7B%0A++++++++++++ptr::write(p.add(i),+4+%2B+i);%0A++++++++%7D%0A++++%0A++++++++//+Put+everything+back+together+into+a+Vec%0A++++++++let+rebuilt+=+Vec::from_raw_parts(p,+len,+cap);%0A++++++++assert_eq!(rebuilt,+%5B4,+5,+6%5D);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Using memory that was allocated elsewhere:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::alloc::{alloc, Layout};\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"kw\">let </span>layout = Layout::array::&lt;u32&gt;(<span class=\"number\">16</span>).expect(<span class=\"string\">\"overflow cannot happen\"</span>);\n\n    <span class=\"kw\">let </span>vec = <span class=\"kw\">unsafe </span>{\n        <span class=\"kw\">let </span>mem = alloc(layout).cast::&lt;u32&gt;();\n        <span class=\"kw\">if </span>mem.is_null() {\n            <span class=\"kw\">return</span>;\n        }\n\n        mem.write(<span class=\"number\">1_000_000</span>);\n\n        Vec::from_raw_parts(mem, <span class=\"number\">1</span>, <span class=\"number\">16</span>)\n    };\n\n    <span class=\"macro\">assert_eq!</span>(vec, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1_000_000</span>]);\n    <span class=\"macro\">assert_eq!</span>(vec.capacity(), <span class=\"number\">16</span>);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::alloc::%7Balloc,+Layout%7D;%0A%0Afn+main()+%7B%0A++++let+layout+=+Layout::array::%3Cu32%3E(16).expect(%22overflow+cannot+happen%22);%0A%0A++++let+vec+=+unsafe+%7B%0A++++++++let+mem+=+alloc(layout).cast::%3Cu32%3E();%0A++++++++if+mem.is_null()+%7B%0A++++++++++++return;%0A++++++++%7D%0A%0A++++++++mem.write(1_000_000);%0A%0A++++++++Vec::from_raw_parts(mem,+1,+16)%0A++++%7D;%0A%0A++++assert_eq!(vec,+%26%5B1_000_000%5D);%0A++++assert_eq!(vec.capacity(),+16);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Vec%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#619\">source</a><a href=\"#impl-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.new_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#636\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.new_in\" class=\"fn\">new_in</a>(alloc: A) -&gt; <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/32838\">#32838</a>)</span></div></span></summary><div class=\"docblock\"><p>Constructs a new, empty <code>Vec&lt;T, A&gt;</code>.</p>\n<p>The vector will not allocate until elements are pushed onto it.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec: Vec&lt;i32, <span class=\"kw\">_</span>&gt; = Vec::new_in(System);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(allocator_api)%5D%0A%0Afn+main()+%7B%0A++++use+std::alloc::System;%0A++++%0A++++%23%5Ballow(unused_mut)%5D%0A++++let+mut+vec:+Vec%3Ci32,+_%3E+=+Vec::new_in(System);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.with_capacity_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#698\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.with_capacity_in\" class=\"fn\">with_capacity_in</a>(capacity: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, alloc: A) -&gt; <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/32838\">#32838</a>)</span></div></span></summary><div class=\"docblock\"><p>Constructs a new, empty <code>Vec&lt;T, A&gt;</code> with at least the specified capacity\nwith the provided allocator.</p>\n<p>The vector will be able to hold at least <code>capacity</code> elements without\nreallocating. This method is allowed to allocate for more elements than\n<code>capacity</code>. If <code>capacity</code> is 0, the vector will not allocate.</p>\n<p>It is important to note that although the returned vector has the\nminimum <em>capacity</em> specified, the vector will have a zero <em>length</em>. For\nan explanation of the difference between length and capacity, see\n<em><a href=\"#capacity-and-reallocation\">Capacity and reallocation</a></em>.</p>\n<p>If it is important to know the exact allocated capacity of a <code>Vec</code>,\nalways use the <a href=\"struct.Vec.html#method.capacity\" title=\"method std::vec::Vec::capacity\"><code>capacity</code></a> method after construction.</p>\n<p>For <code>Vec&lt;T, A&gt;</code> where <code>T</code> is a zero-sized type, there will be no allocation\nand the capacity will always be <code>usize::MAX</code>.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = Vec::with_capacity_in(<span class=\"number\">10</span>, System);\n\n<span class=\"comment\">// The vector contains no items, even though it has capacity for more\n</span><span class=\"macro\">assert_eq!</span>(vec.len(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);\n\n<span class=\"comment\">// These are all done without reallocating...\n</span><span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..<span class=\"number\">10 </span>{\n    vec.push(i);\n}\n<span class=\"macro\">assert_eq!</span>(vec.len(), <span class=\"number\">10</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);\n\n<span class=\"comment\">// ...but this may make the vector reallocate\n</span>vec.push(<span class=\"number\">11</span>);\n<span class=\"macro\">assert_eq!</span>(vec.len(), <span class=\"number\">11</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">11</span>);\n\n<span class=\"comment\">// A vector of a zero-sized type will always over-allocate, since no\n// allocation is necessary\n</span><span class=\"kw\">let </span>vec_units = Vec::&lt;(), System&gt;::with_capacity_in(<span class=\"number\">10</span>, System);\n<span class=\"macro\">assert_eq!</span>(vec_units.capacity(), usize::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(allocator_api)%5D%0A%0Afn+main()+%7B%0A++++use+std::alloc::System;%0A++++%0A++++let+mut+vec+=+Vec::with_capacity_in(10,+System);%0A++++%0A++++//+The+vector+contains+no+items,+even+though+it+has+capacity+for+more%0A++++assert_eq!(vec.len(),+0);%0A++++assert!(vec.capacity()+%3E=+10);%0A++++%0A++++//+These+are+all+done+without+reallocating...%0A++++for+i+in+0..10+%7B%0A++++++++vec.push(i);%0A++++%7D%0A++++assert_eq!(vec.len(),+10);%0A++++assert!(vec.capacity()+%3E=+10);%0A++++%0A++++//+...but+this+may+make+the+vector+reallocate%0A++++vec.push(11);%0A++++assert_eq!(vec.len(),+11);%0A++++assert!(vec.capacity()+%3E=+11);%0A++++%0A++++//+A+vector+of+a+zero-sized+type+will+always+over-allocate,+since+no%0A++++//+allocation+is+necessary%0A++++let+vec_units+=+Vec::%3C(),+System%3E::with_capacity_in(10,+System);%0A++++assert_eq!(vec_units.capacity(),+usize::MAX);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_with_capacity_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#716\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.try_with_capacity_in\" class=\"fn\">try_with_capacity_in</a>(\n    capacity: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>,\n    alloc: A,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;, <a class=\"struct\" href=\"../collections/struct.TryReserveError.html\" title=\"struct std::collections::TryReserveError\">TryReserveError</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/32838\">#32838</a>)</span></div></span></summary><div class=\"docblock\"><p>Constructs a new, empty <code>Vec&lt;T, A&gt;</code> with at least the specified capacity\nwith the provided allocator.</p>\n<p>The vector will be able to hold at least <code>capacity</code> elements without\nreallocating. This method is allowed to allocate for more elements than\n<code>capacity</code>. If <code>capacity</code> is 0, the vector will not allocate.</p>\n<h5 id=\"errors-1\"><a class=\"doc-anchor\" href=\"#errors-1\">§</a>Errors</h5>\n<p>Returns an error if the capacity exceeds <code>isize::MAX</code> <em>bytes</em>,\nor if the allocator reports allocation failure.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_raw_parts_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#830\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.from_raw_parts_in\" class=\"fn\">from_raw_parts_in</a>(\n    ptr: <a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a>,\n    length: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>,\n    capacity: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>,\n    alloc: A,\n) -&gt; <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/32838\">#32838</a>)</span></div></span></summary><div class=\"docblock\"><p>Creates a <code>Vec&lt;T, A&gt;</code> directly from a pointer, a length, a capacity,\nand an allocator.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>This is highly unsafe, due to the number of invariants that aren’t\nchecked:</p>\n<ul>\n<li><code>ptr</code> must be <a href=\"../alloc/trait.Allocator.html#currently-allocated-memory\" title=\"trait std::alloc::Allocator\"><em>currently allocated</em></a> via the given allocator <code>alloc</code>.</li>\n<li><code>T</code> needs to have the same alignment as what <code>ptr</code> was allocated with.\n(<code>T</code> having a less strict alignment is not sufficient, the alignment really\nneeds to be equal to satisfy the <a href=\"../alloc/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method std::alloc::GlobalAlloc::dealloc\"><code>dealloc</code></a> requirement that memory must be\nallocated and deallocated with the same layout.)</li>\n<li>The size of <code>T</code> times the <code>capacity</code> (ie. the allocated size in bytes) needs\nto be the same size as the pointer was allocated with. (Because similar to\nalignment, <a href=\"../alloc/trait.GlobalAlloc.html#tymethod.dealloc\" title=\"method std::alloc::GlobalAlloc::dealloc\"><code>dealloc</code></a> must be called with the same layout <code>size</code>.)</li>\n<li><code>length</code> needs to be less than or equal to <code>capacity</code>.</li>\n<li>The first <code>length</code> values must be properly initialized values of type <code>T</code>.</li>\n<li><code>capacity</code> needs to <a href=\"../alloc/trait.Allocator.html#memory-fitting\" title=\"trait std::alloc::Allocator\"><em>fit</em></a> the layout size that the pointer was allocated with.</li>\n<li>The allocated size in bytes must be no larger than <code>isize::MAX</code>.\nSee the safety documentation of <a href=\"../primitive.pointer.html#method.offset\" title=\"method pointer::offset\"><code>pointer::offset</code></a>.</li>\n</ul>\n<p>These requirements are always upheld by any <code>ptr</code> that has been allocated\nvia <code>Vec&lt;T, A&gt;</code>. Other allocation sources are allowed if the invariants are\nupheld.</p>\n<p>Violating these may cause problems like corrupting the allocator’s\ninternal data structures. For example it is <strong>not</strong> safe\nto build a <code>Vec&lt;u8&gt;</code> from a pointer to a C <code>char</code> array with length <code>size_t</code>.\nIt’s also not safe to build one from a <code>Vec&lt;u16&gt;</code> and its length, because\nthe allocator cares about the alignment, and these two types have different\nalignments. The buffer was allocated with alignment 2 (for <code>u16</code>), but after\nturning it into a <code>Vec&lt;u8&gt;</code> it’ll be deallocated with alignment 1.</p>\n<p>The ownership of <code>ptr</code> is effectively transferred to the\n<code>Vec&lt;T&gt;</code> which may then deallocate, reallocate or change the\ncontents of memory pointed to by the pointer at will. Ensure\nthat nothing else uses the pointer after calling this\nfunction.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">use </span>std::ptr;\n<span class=\"kw\">use </span>std::mem;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = Vec::with_capacity_in(<span class=\"number\">3</span>, System);\nv.push(<span class=\"number\">1</span>);\nv.push(<span class=\"number\">2</span>);\nv.push(<span class=\"number\">3</span>);\n\n<span class=\"comment\">// Prevent running `v`'s destructor so we are in complete control\n// of the allocation.\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = mem::ManuallyDrop::new(v);\n\n<span class=\"comment\">// Pull out the various important pieces of information about `v`\n</span><span class=\"kw\">let </span>p = v.as_mut_ptr();\n<span class=\"kw\">let </span>len = v.len();\n<span class=\"kw\">let </span>cap = v.capacity();\n<span class=\"kw\">let </span>alloc = v.allocator();\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// Overwrite memory with 4, 5, 6\n    </span><span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..len {\n        ptr::write(p.add(i), <span class=\"number\">4 </span>+ i);\n    }\n\n    <span class=\"comment\">// Put everything back together into a Vec\n    </span><span class=\"kw\">let </span>rebuilt = Vec::from_raw_parts_in(p, len, cap, alloc.clone());\n    <span class=\"macro\">assert_eq!</span>(rebuilt, [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(allocator_api)%5D%0A%0Afn+main()+%7B%0A++++use+std::alloc::System;%0A++++%0A++++use+std::ptr;%0A++++use+std::mem;%0A++++%0A++++let+mut+v+=+Vec::with_capacity_in(3,+System);%0A++++v.push(1);%0A++++v.push(2);%0A++++v.push(3);%0A++++%0A++++//+Prevent+running+%60v%60's+destructor+so+we+are+in+complete+control%0A++++//+of+the+allocation.%0A++++let+mut+v+=+mem::ManuallyDrop::new(v);%0A++++%0A++++//+Pull+out+the+various+important+pieces+of+information+about+%60v%60%0A++++let+p+=+v.as_mut_ptr();%0A++++let+len+=+v.len();%0A++++let+cap+=+v.capacity();%0A++++let+alloc+=+v.allocator();%0A++++%0A++++unsafe+%7B%0A++++++++//+Overwrite+memory+with+4,+5,+6%0A++++++++for+i+in+0..len+%7B%0A++++++++++++ptr::write(p.add(i),+4+%2B+i);%0A++++++++%7D%0A++++%0A++++++++//+Put+everything+back+together+into+a+Vec%0A++++++++let+rebuilt+=+Vec::from_raw_parts_in(p,+len,+cap,+alloc.clone());%0A++++++++assert_eq!(rebuilt,+%5B4,+5,+6%5D);%0A++++%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p>Using memory that was allocated elsewhere:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n\n</span><span class=\"kw\">use </span>std::alloc::{AllocError, Allocator, Global, Layout};\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"kw\">let </span>layout = Layout::array::&lt;u32&gt;(<span class=\"number\">16</span>).expect(<span class=\"string\">\"overflow cannot happen\"</span>);\n\n    <span class=\"kw\">let </span>vec = <span class=\"kw\">unsafe </span>{\n        <span class=\"kw\">let </span>mem = <span class=\"kw\">match </span>Global.allocate(layout) {\n            <span class=\"prelude-val\">Ok</span>(mem) =&gt; mem.cast::&lt;u32&gt;().as_ptr(),\n            <span class=\"prelude-val\">Err</span>(AllocError) =&gt; <span class=\"kw\">return</span>,\n        };\n\n        mem.write(<span class=\"number\">1_000_000</span>);\n\n        Vec::from_raw_parts_in(mem, <span class=\"number\">1</span>, <span class=\"number\">16</span>, Global)\n    };\n\n    <span class=\"macro\">assert_eq!</span>(vec, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1_000_000</span>]);\n    <span class=\"macro\">assert_eq!</span>(vec.capacity(), <span class=\"number\">16</span>);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(allocator_api)%5D%0A%0Ause+std::alloc::%7BAllocError,+Allocator,+Global,+Layout%7D;%0A%0Afn+main()+%7B%0A++++let+layout+=+Layout::array::%3Cu32%3E(16).expect(%22overflow+cannot+happen%22);%0A%0A++++let+vec+=+unsafe+%7B%0A++++++++let+mem+=+match+Global.allocate(layout)+%7B%0A++++++++++++Ok(mem)+=%3E+mem.cast::%3Cu32%3E().as_ptr(),%0A++++++++++++Err(AllocError)+=%3E+return,%0A++++++++%7D;%0A%0A++++++++mem.write(1_000_000);%0A%0A++++++++Vec::from_raw_parts_in(mem,+1,+16,+Global)%0A++++%7D;%0A%0A++++assert_eq!(vec,+%26%5B1_000_000%5D);%0A++++assert_eq!(vec.capacity(),+16);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_raw_parts\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#883\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.into_raw_parts\" class=\"fn\">into_raw_parts</a>(self) -&gt; (<a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a>, <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>vec_into_raw_parts</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/65816\">#65816</a>)</span></div></span></summary><div class=\"docblock\"><p>Decomposes a <code>Vec&lt;T&gt;</code> into its raw components: <code>(pointer, length, capacity)</code>.</p>\n<p>Returns the raw pointer to the underlying data, the length of\nthe vector (in elements), and the allocated capacity of the\ndata (in elements). These are the same arguments in the same\norder as the arguments to <a href=\"struct.Vec.html#method.from_raw_parts\" title=\"associated function std::vec::Vec::from_raw_parts\"><code>from_raw_parts</code></a>.</p>\n<p>After calling this function, the caller is responsible for the\nmemory previously managed by the <code>Vec</code>. The only way to do\nthis is to convert the raw pointer, length, and capacity back\ninto a <code>Vec</code> with the <a href=\"struct.Vec.html#method.from_raw_parts\" title=\"associated function std::vec::Vec::from_raw_parts\"><code>from_raw_parts</code></a> function, allowing\nthe destructor to perform the cleanup.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(vec_into_raw_parts)]\n</span><span class=\"kw\">let </span>v: Vec&lt;i32&gt; = <span class=\"macro\">vec!</span>[-<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>];\n\n<span class=\"kw\">let </span>(ptr, len, cap) = v.into_raw_parts();\n\n<span class=\"kw\">let </span>rebuilt = <span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// We can now make changes to the components, such as\n    // transmuting the raw pointer to a compatible type.\n    </span><span class=\"kw\">let </span>ptr = ptr <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span>u32;\n\n    Vec::from_raw_parts(ptr, len, cap)\n};\n<span class=\"macro\">assert_eq!</span>(rebuilt, [<span class=\"number\">4294967295</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(vec_into_raw_parts)%5D%0Afn+main()+%7B%0A++++let+v:+Vec%3Ci32%3E+=+vec!%5B-1,+0,+1%5D;%0A++++%0A++++let+(ptr,+len,+cap)+=+v.into_raw_parts();%0A++++%0A++++let+rebuilt+=+unsafe+%7B%0A++++++++//+We+can+now+make+changes+to+the+components,+such+as%0A++++++++//+transmuting+the+raw+pointer+to+a+compatible+type.%0A++++++++let+ptr+=+ptr+as+*mut+u32;%0A++++%0A++++++++Vec::from_raw_parts(ptr,+len,+cap)%0A++++%7D;%0A++++assert_eq!(rebuilt,+%5B4294967295,+0,+1%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_raw_parts_with_alloc\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#927\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.into_raw_parts_with_alloc\" class=\"fn\">into_raw_parts_with_alloc</a>(self) -&gt; (<a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a>, <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, A)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/32838\">#32838</a>)</span></div></span></summary><div class=\"docblock\"><p>Decomposes a <code>Vec&lt;T&gt;</code> into its raw components: <code>(pointer, length, capacity, allocator)</code>.</p>\n<p>Returns the raw pointer to the underlying data, the length of the vector (in elements),\nthe allocated capacity of the data (in elements), and the allocator. These are the same\narguments in the same order as the arguments to <a href=\"struct.Vec.html#method.from_raw_parts_in\" title=\"associated function std::vec::Vec::from_raw_parts_in\"><code>from_raw_parts_in</code></a>.</p>\n<p>After calling this function, the caller is responsible for the\nmemory previously managed by the <code>Vec</code>. The only way to do\nthis is to convert the raw pointer, length, and capacity back\ninto a <code>Vec</code> with the <a href=\"struct.Vec.html#method.from_raw_parts_in\" title=\"associated function std::vec::Vec::from_raw_parts_in\"><code>from_raw_parts_in</code></a> function, allowing\nthe destructor to perform the cleanup.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api, vec_into_raw_parts)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v: Vec&lt;i32, System&gt; = Vec::new_in(System);\nv.push(-<span class=\"number\">1</span>);\nv.push(<span class=\"number\">0</span>);\nv.push(<span class=\"number\">1</span>);\n\n<span class=\"kw\">let </span>(ptr, len, cap, alloc) = v.into_raw_parts_with_alloc();\n\n<span class=\"kw\">let </span>rebuilt = <span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// We can now make changes to the components, such as\n    // transmuting the raw pointer to a compatible type.\n    </span><span class=\"kw\">let </span>ptr = ptr <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span>u32;\n\n    Vec::from_raw_parts_in(ptr, len, cap, alloc)\n};\n<span class=\"macro\">assert_eq!</span>(rebuilt, [<span class=\"number\">4294967295</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(allocator_api,+vec_into_raw_parts)%5D%0A%0Afn+main()+%7B%0A++++use+std::alloc::System;%0A++++%0A++++let+mut+v:+Vec%3Ci32,+System%3E+=+Vec::new_in(System);%0A++++v.push(-1);%0A++++v.push(0);%0A++++v.push(1);%0A++++%0A++++let+(ptr,+len,+cap,+alloc)+=+v.into_raw_parts_with_alloc();%0A++++%0A++++let+rebuilt+=+unsafe+%7B%0A++++++++//+We+can+now+make+changes+to+the+components,+such+as%0A++++++++//+transmuting+the+raw+pointer+to+a+compatible+type.%0A++++++++let+ptr+=+ptr+as+*mut+u32;%0A++++%0A++++++++Vec::from_raw_parts_in(ptr,+len,+cap,+alloc)%0A++++%7D;%0A++++assert_eq!(rebuilt,+%5B4294967295,+0,+1%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.capacity\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#948\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.capacity\" class=\"fn\">capacity</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the total number of elements the vector can hold without\nreallocating.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec: Vec&lt;i32&gt; = Vec::with_capacity(<span class=\"number\">10</span>);\nvec.push(<span class=\"number\">42</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+vec:+Vec%3Ci32%3E+=+Vec::with_capacity(10);%0A++++vec.push(42);%0A++++assert!(vec.capacity()+%3E=+10);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reserve\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#971\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.reserve\" class=\"fn\">reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Reserves capacity for at least <code>additional</code> more elements to be inserted\nin the given <code>Vec&lt;T&gt;</code>. The collection may reserve more space to\nspeculatively avoid frequent reallocations. After calling <code>reserve</code>,\ncapacity will be greater than or equal to <code>self.len() + additional</code>.\nDoes nothing if capacity is already sufficient.</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>];\nvec.reserve(<span class=\"number\">10</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">11</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+vec+=+vec!%5B1%5D;%0A++++vec.reserve(10);%0A++++assert!(vec.capacity()+%3E=+11);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reserve_exact\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#1001\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.reserve_exact\" class=\"fn\">reserve_exact</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Reserves the minimum capacity for at least <code>additional</code> more elements to\nbe inserted in the given <code>Vec&lt;T&gt;</code>. Unlike <a href=\"struct.Vec.html#method.reserve\" title=\"method std::vec::Vec::reserve\"><code>reserve</code></a>, this will not\ndeliberately over-allocate to speculatively avoid frequent allocations.\nAfter calling <code>reserve_exact</code>, capacity will be greater than or equal to\n<code>self.len() + additional</code>. Does nothing if the capacity is already\nsufficient.</p>\n<p>Note that the allocator may give the collection more space than it\nrequests. Therefore, capacity can not be relied upon to be precisely\nminimal. Prefer <a href=\"struct.Vec.html#method.reserve\" title=\"method std::vec::Vec::reserve\"><code>reserve</code></a> if future insertions are expected.</p>\n<h5 id=\"panics-3\"><a class=\"doc-anchor\" href=\"#panics-3\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>];\nvec.reserve_exact(<span class=\"number\">10</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">11</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+vec+=+vec!%5B1%5D;%0A++++vec.reserve_exact(10);%0A++++assert!(vec.capacity()+%3E=+11);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_reserve\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.57.0\">1.57.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#1038\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.try_reserve\" class=\"fn\">try_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../collections/struct.TryReserveError.html\" title=\"struct std::collections::TryReserveError\">TryReserveError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Tries to reserve capacity for at least <code>additional</code> more elements to be inserted\nin the given <code>Vec&lt;T&gt;</code>. The collection may reserve more space to speculatively avoid\nfrequent reallocations. After calling <code>try_reserve</code>, capacity will be\ngreater than or equal to <code>self.len() + additional</code> if it returns\n<code>Ok(())</code>. Does nothing if capacity is already sufficient. This method\npreserves the contents even if an error occurs.</p>\n<h5 id=\"errors-2\"><a class=\"doc-anchor\" href=\"#errors-2\">§</a>Errors</h5>\n<p>If the capacity overflows, or the allocator reports a failure, then an error\nis returned.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::TryReserveError;\n\n<span class=\"kw\">fn </span>process_data(data: <span class=\"kw-2\">&amp;</span>[u32]) -&gt; <span class=\"prelude-ty\">Result</span>&lt;Vec&lt;u32&gt;, TryReserveError&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>output = Vec::new();\n\n    <span class=\"comment\">// Pre-reserve the memory, exiting if we can't\n    </span>output.try_reserve(data.len())<span class=\"question-mark\">?</span>;\n\n    <span class=\"comment\">// Now we know this can't OOM in the middle of our complex work\n    </span>output.extend(data.iter().map(|<span class=\"kw-2\">&amp;</span>val| {\n        val * <span class=\"number\">2 </span>+ <span class=\"number\">5 </span><span class=\"comment\">// very complicated\n    </span>}));\n\n    <span class=\"prelude-val\">Ok</span>(output)\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::TryReserveError;%0A++++%0A++++fn+process_data(data:+%26%5Bu32%5D)+-%3E+Result%3CVec%3Cu32%3E,+TryReserveError%3E+%7B%0A++++++++let+mut+output+=+Vec::new();%0A++++%0A++++++++//+Pre-reserve+the+memory,+exiting+if+we+can't%0A++++++++output.try_reserve(data.len())?;%0A++++%0A++++++++//+Now+we+know+this+can't+OOM+in+the+middle+of+our+complex+work%0A++++++++output.extend(data.iter().map(%7C%26val%7C+%7B%0A++++++++++++val+*+2+%2B+5+//+very+complicated%0A++++++++%7D));%0A++++%0A++++++++Ok(output)%0A++++%7D%0A++++process_data(%26%5B1,+2,+3%5D).expect(%22why+is+the+test+harness+OOMing+on+12+bytes?%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_reserve_exact\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.57.0\">1.57.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#1081\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.try_reserve_exact\" class=\"fn\">try_reserve_exact</a>(\n    &amp;mut self,\n    additional: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../collections/struct.TryReserveError.html\" title=\"struct std::collections::TryReserveError\">TryReserveError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Tries to reserve the minimum capacity for at least <code>additional</code>\nelements to be inserted in the given <code>Vec&lt;T&gt;</code>. Unlike <a href=\"struct.Vec.html#method.try_reserve\" title=\"method std::vec::Vec::try_reserve\"><code>try_reserve</code></a>,\nthis will not deliberately over-allocate to speculatively avoid frequent\nallocations. After calling <code>try_reserve_exact</code>, capacity will be greater\nthan or equal to <code>self.len() + additional</code> if it returns <code>Ok(())</code>.\nDoes nothing if the capacity is already sufficient.</p>\n<p>Note that the allocator may give the collection more space than it\nrequests. Therefore, capacity can not be relied upon to be precisely\nminimal. Prefer <a href=\"struct.Vec.html#method.try_reserve\" title=\"method std::vec::Vec::try_reserve\"><code>try_reserve</code></a> if future insertions are expected.</p>\n<h5 id=\"errors-3\"><a class=\"doc-anchor\" href=\"#errors-3\">§</a>Errors</h5>\n<p>If the capacity overflows, or the allocator reports a failure, then an error\nis returned.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::TryReserveError;\n\n<span class=\"kw\">fn </span>process_data(data: <span class=\"kw-2\">&amp;</span>[u32]) -&gt; <span class=\"prelude-ty\">Result</span>&lt;Vec&lt;u32&gt;, TryReserveError&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>output = Vec::new();\n\n    <span class=\"comment\">// Pre-reserve the memory, exiting if we can't\n    </span>output.try_reserve_exact(data.len())<span class=\"question-mark\">?</span>;\n\n    <span class=\"comment\">// Now we know this can't OOM in the middle of our complex work\n    </span>output.extend(data.iter().map(|<span class=\"kw-2\">&amp;</span>val| {\n        val * <span class=\"number\">2 </span>+ <span class=\"number\">5 </span><span class=\"comment\">// very complicated\n    </span>}));\n\n    <span class=\"prelude-val\">Ok</span>(output)\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::TryReserveError;%0A++++%0A++++fn+process_data(data:+%26%5Bu32%5D)+-%3E+Result%3CVec%3Cu32%3E,+TryReserveError%3E+%7B%0A++++++++let+mut+output+=+Vec::new();%0A++++%0A++++++++//+Pre-reserve+the+memory,+exiting+if+we+can't%0A++++++++output.try_reserve_exact(data.len())?;%0A++++%0A++++++++//+Now+we+know+this+can't+OOM+in+the+middle+of+our+complex+work%0A++++++++output.extend(data.iter().map(%7C%26val%7C+%7B%0A++++++++++++val+*+2+%2B+5+//+very+complicated%0A++++++++%7D));%0A++++%0A++++++++Ok(output)%0A++++%7D%0A++++process_data(%26%5B1,+2,+3%5D).expect(%22why+is+the+test+harness+OOMing+on+12+bytes?%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shrink_to_fit\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#1104\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.shrink_to_fit\" class=\"fn\">shrink_to_fit</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Shrinks the capacity of the vector as much as possible.</p>\n<p>The behavior of this method depends on the allocator, which may either shrink the vector\nin-place or reallocate. The resulting vector might still have some excess capacity, just as\nis the case for <a href=\"struct.Vec.html#method.with_capacity\" title=\"associated function std::vec::Vec::with_capacity\"><code>with_capacity</code></a>. See <a href=\"../alloc/trait.Allocator.html#method.shrink\" title=\"method std::alloc::Allocator::shrink\"><code>Allocator::shrink</code></a> for more details.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = Vec::with_capacity(<span class=\"number\">10</span>);\nvec.extend([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);\nvec.shrink_to_fit();\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+vec+=+Vec::with_capacity(10);%0A++++vec.extend(%5B1,+2,+3%5D);%0A++++assert!(vec.capacity()+%3E=+10);%0A++++vec.shrink_to_fit();%0A++++assert!(vec.capacity()+%3E=+3);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.shrink_to\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.56.0\">1.56.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#1133\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.shrink_to\" class=\"fn\">shrink_to</a>(&amp;mut self, min_capacity: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Shrinks the capacity of the vector with a lower bound.</p>\n<p>The capacity will remain at least as large as both the length\nand the supplied value.</p>\n<p>If the current capacity is less than the lower limit, this is a no-op.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = Vec::with_capacity(<span class=\"number\">10</span>);\nvec.extend([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);\nvec.shrink_to(<span class=\"number\">4</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">4</span>);\nvec.shrink_to(<span class=\"number\">0</span>);\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+vec+=+Vec::with_capacity(10);%0A++++vec.extend(%5B1,+2,+3%5D);%0A++++assert!(vec.capacity()+%3E=+10);%0A++++vec.shrink_to(4);%0A++++assert!(vec.capacity()+%3E=+4);%0A++++vec.shrink_to(0);%0A++++assert!(vec.capacity()+%3E=+3);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_boxed_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#1166\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.into_boxed_slice\" class=\"fn\">into_boxed_slice</a>(self) -&gt; <a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>, A&gt;</h4></section></summary><div class=\"docblock\"><p>Converts the vector into <a href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\"><code>Box&lt;[T]&gt;</code></a>.</p>\n<p>Before doing the conversion, this method discards excess capacity like <a href=\"struct.Vec.html#method.shrink_to_fit\" title=\"method std::vec::Vec::shrink_to_fit\"><code>shrink_to_fit</code></a>.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n\n<span class=\"kw\">let </span>slice = v.into_boxed_slice();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v+=+vec!%5B1,+2,+3%5D;%0A++++%0A++++let+slice+=+v.into_boxed_slice();%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Any excess capacity is removed:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = Vec::with_capacity(<span class=\"number\">10</span>);\nvec.extend([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n\n<span class=\"macro\">assert!</span>(vec.capacity() &gt;= <span class=\"number\">10</span>);\n<span class=\"kw\">let </span>slice = vec.into_boxed_slice();\n<span class=\"macro\">assert_eq!</span>(slice.into_vec().capacity(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+vec+=+Vec::with_capacity(10);%0A++++vec.extend(%5B1,+2,+3%5D);%0A++++%0A++++assert!(vec.capacity()+%3E=+10);%0A++++let+slice+=+vec.into_boxed_slice();%0A++++assert_eq!(slice.into_vec().capacity(),+3);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.truncate\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#1219\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.truncate\" class=\"fn\">truncate</a>(&amp;mut self, len: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Shortens the vector, keeping the first <code>len</code> elements and dropping\nthe rest.</p>\n<p>If <code>len</code> is greater or equal to the vector’s current length, this has\nno effect.</p>\n<p>The <a href=\"struct.Vec.html#method.drain\" title=\"method std::vec::Vec::drain\"><code>drain</code></a> method can emulate <code>truncate</code>, but causes the excess\nelements to be returned instead of dropped.</p>\n<p>Note that this method has no effect on the allocated capacity\nof the vector.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<p>Truncating a five element vector to two elements:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\nvec.truncate(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+vec+=+vec!%5B1,+2,+3,+4,+5%5D;%0A++++vec.truncate(2);%0A++++assert_eq!(vec,+%5B1,+2%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>No truncation occurs when <code>len</code> is greater than the vector’s current\nlength:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\nvec.truncate(<span class=\"number\">8</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+vec+=+vec!%5B1,+2,+3%5D;%0A++++vec.truncate(8);%0A++++assert_eq!(vec,+%5B1,+2,+3%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Truncating when <code>len == 0</code> is equivalent to calling the <a href=\"struct.Vec.html#method.clear\" title=\"method std::vec::Vec::clear\"><code>clear</code></a>\nmethod.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\nvec.truncate(<span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(vec, []);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+vec+=+vec!%5B1,+2,+3%5D;%0A++++vec.truncate(0);%0A++++assert_eq!(vec,+%5B%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0\">1.7.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#1254\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.as_slice\" class=\"fn\">as_slice</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Extracts a slice containing the entire vector.</p>\n<p>Equivalent to <code>&amp;s[..]</code>.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::{<span class=\"self\">self</span>, Write};\n<span class=\"kw\">let </span>buffer = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>];\nio::sink().write(buffer.as_slice()).unwrap();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io::%7Bself,+Write%7D;%0A++++let+buffer+=+vec!%5B1,+2,+3,+5,+8%5D;%0A++++io::sink().write(buffer.as_slice()).unwrap();%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_mut_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0\">1.7.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#1271\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.as_mut_slice\" class=\"fn\">as_mut_slice</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Extracts a mutable slice of the entire vector.</p>\n<p>Equivalent to <code>&amp;mut s[..]</code>.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::{<span class=\"self\">self</span>, Read};\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buffer = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>; <span class=\"number\">3</span>];\nio::repeat(<span class=\"number\">0b101</span>).read_exact(buffer.as_mut_slice()).unwrap();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io::%7Bself,+Read%7D;%0A++++let+mut+buffer+=+vec!%5B0;+3%5D;%0A++++io::repeat(0b101).read_exact(buffer.as_mut_slice()).unwrap();%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_ptr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#1329\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.as_ptr\" class=\"fn\">as_ptr</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Returns a raw pointer to the vector’s buffer, or a dangling raw pointer\nvalid for zero sized reads if the vector didn’t allocate.</p>\n<p>The caller must ensure that the vector outlives the pointer this\nfunction returns, or else it will end up pointing to garbage.\nModifying the vector may cause its buffer to be reallocated,\nwhich would also make any pointers to it invalid.</p>\n<p>The caller must also ensure that the memory the pointer (non-transitively) points to\nis never written to (except inside an <code>UnsafeCell</code>) using this pointer or any pointer\nderived from it. If you need to mutate the contents of the slice, use <a href=\"struct.Vec.html#method.as_mut_ptr\" title=\"method std::vec::Vec::as_mut_ptr\"><code>as_mut_ptr</code></a>.</p>\n<p>This method guarantees that for the purpose of the aliasing model, this method\ndoes not materialize a reference to the underlying slice, and thus the returned pointer\nwill remain valid when mixed with other calls to <a href=\"struct.Vec.html#method.as_ptr\" title=\"method std::vec::Vec::as_ptr\"><code>as_ptr</code></a> and <a href=\"struct.Vec.html#method.as_mut_ptr\" title=\"method std::vec::Vec::as_mut_ptr\"><code>as_mut_ptr</code></a>.\nNote that calling other methods that materialize mutable references to the slice,\nor mutable references to specific elements you are planning on accessing through this pointer,\nas well as writing to those elements, may still invalidate this pointer.\nSee the second example below for how this guarantee can be used.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>];\n<span class=\"kw\">let </span>x_ptr = x.as_ptr();\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..x.len() {\n        <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>x_ptr.add(i), <span class=\"number\">1 </span>&lt;&lt; i);\n    }\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+vec!%5B1,+2,+4%5D;%0A++++let+x_ptr+=+x.as_ptr();%0A++++%0A++++unsafe+%7B%0A++++++++for+i+in+0..x.len()+%7B%0A++++++++++++assert_eq!(*x_ptr.add(i),+1+%3C%3C+i);%0A++++++++%7D%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Due to the aliasing guarantee, the following code is legal:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];\n    <span class=\"kw\">let </span>ptr1 = v.as_ptr();\n    <span class=\"kw\">let _ </span>= ptr1.read();\n    <span class=\"kw\">let </span>ptr2 = v.as_mut_ptr().offset(<span class=\"number\">2</span>);\n    ptr2.write(<span class=\"number\">2</span>);\n    <span class=\"comment\">// Notably, the write to `ptr2` did *not* invalidate `ptr1`\n    // because it mutated a different element:\n    </span><span class=\"kw\">let _ </span>= ptr1.read();\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++unsafe+%7B%0A++++++++let+mut+v+=+vec!%5B0,+1,+2%5D;%0A++++++++let+ptr1+=+v.as_ptr();%0A++++++++let+_+=+ptr1.read();%0A++++++++let+ptr2+=+v.as_mut_ptr().offset(2);%0A++++++++ptr2.write(2);%0A++++++++//+Notably,+the+write+to+%60ptr2%60+did+*not*+invalidate+%60ptr1%60%0A++++++++//+because+it+mutated+a+different+element:%0A++++++++let+_+=+ptr1.read();%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_mut_ptr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#1389\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.as_mut_ptr\" class=\"fn\">as_mut_ptr</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a></h4></section></summary><div class=\"docblock\"><p>Returns an unsafe mutable pointer to the vector’s buffer, or a dangling\nraw pointer valid for zero sized reads if the vector didn’t allocate.</p>\n<p>The caller must ensure that the vector outlives the pointer this\nfunction returns, or else it will end up pointing to garbage.\nModifying the vector may cause its buffer to be reallocated,\nwhich would also make any pointers to it invalid.</p>\n<p>This method guarantees that for the purpose of the aliasing model, this method\ndoes not materialize a reference to the underlying slice, and thus the returned pointer\nwill remain valid when mixed with other calls to <a href=\"struct.Vec.html#method.as_ptr\" title=\"method std::vec::Vec::as_ptr\"><code>as_ptr</code></a> and <a href=\"struct.Vec.html#method.as_mut_ptr\" title=\"method std::vec::Vec::as_mut_ptr\"><code>as_mut_ptr</code></a>.\nNote that calling other methods that materialize references to the slice,\nor references to specific elements you are planning on accessing through this pointer,\nmay still invalidate this pointer.\nSee the second example below for how this guarantee can be used.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// Allocate vector big enough for 4 elements.\n</span><span class=\"kw\">let </span>size = <span class=\"number\">4</span>;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: Vec&lt;i32&gt; = Vec::with_capacity(size);\n<span class=\"kw\">let </span>x_ptr = x.as_mut_ptr();\n\n<span class=\"comment\">// Initialize elements via raw pointer writes, then set length.\n</span><span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..size {\n        <span class=\"kw-2\">*</span>x_ptr.add(i) = i <span class=\"kw\">as </span>i32;\n    }\n    x.set_len(size);\n}\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;*</span>x, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+Allocate+vector+big+enough+for+4+elements.%0Afn+main()+%7B%0A++++let+size+=+4;%0A++++let+mut+x:+Vec%3Ci32%3E+=+Vec::with_capacity(size);%0A++++let+x_ptr+=+x.as_mut_ptr();%0A++++%0A++++//+Initialize+elements+via+raw+pointer+writes,+then+set+length.%0A++++unsafe+%7B%0A++++++++for+i+in+0..size+%7B%0A++++++++++++*x_ptr.add(i)+=+i+as+i32;%0A++++++++%7D%0A++++++++x.set_len(size);%0A++++%7D%0A++++assert_eq!(%26*x,+%26%5B0,+1,+2,+3%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Due to the aliasing guarantee, the following code is legal:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>];\n    <span class=\"kw\">let </span>ptr1 = v.as_mut_ptr();\n    ptr1.write(<span class=\"number\">1</span>);\n    <span class=\"kw\">let </span>ptr2 = v.as_mut_ptr();\n    ptr2.write(<span class=\"number\">2</span>);\n    <span class=\"comment\">// Notably, the write to `ptr2` did *not* invalidate `ptr1`:\n    </span>ptr1.write(<span class=\"number\">3</span>);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++unsafe+%7B%0A++++++++let+mut+v+=+vec!%5B0%5D;%0A++++++++let+ptr1+=+v.as_mut_ptr();%0A++++++++ptr1.write(1);%0A++++++++let+ptr2+=+v.as_mut_ptr();%0A++++++++ptr2.write(2);%0A++++++++//+Notably,+the+write+to+%60ptr2%60+did+*not*+invalidate+%60ptr1%60:%0A++++++++ptr1.write(3);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.allocator\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#1398\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.allocator\" class=\"fn\">allocator</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;A</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/32838\">#32838</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns a reference to the underlying allocator.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.set_len\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#1482\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.set_len\" class=\"fn\">set_len</a>(&amp;mut self, new_len: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Forces the length of the vector to <code>new_len</code>.</p>\n<p>This is a low-level operation that maintains none of the normal\ninvariants of the type. Normally changing the length of a vector\nis done using one of the safe operations instead, such as\n<a href=\"struct.Vec.html#method.truncate\" title=\"method std::vec::Vec::truncate\"><code>truncate</code></a>, <a href=\"struct.Vec.html#method.resize\" title=\"method std::vec::Vec::resize\"><code>resize</code></a>, <a href=\"../iter/trait.Extend.html#tymethod.extend\" title=\"method std::iter::Extend::extend\"><code>extend</code></a>, or <a href=\"struct.Vec.html#method.clear\" title=\"method std::vec::Vec::clear\"><code>clear</code></a>.</p>\n<h5 id=\"safety-2\"><a class=\"doc-anchor\" href=\"#safety-2\">§</a>Safety</h5>\n<ul>\n<li><code>new_len</code> must be less than or equal to <a href=\"struct.Vec.html#method.capacity\" title=\"method std::vec::Vec::capacity\"><code>capacity()</code></a>.</li>\n<li>The elements at <code>old_len..new_len</code> must be initialized.</li>\n</ul>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<p>This method can be useful for situations in which the vector\nis serving as a buffer for other code, particularly over FFI:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">pub fn </span>get_dictionary(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;u8&gt;&gt; {\n    <span class=\"comment\">// Per the FFI method's docs, \"32768 bytes is always enough\".\n    </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>dict = Vec::with_capacity(<span class=\"number\">32_768</span>);\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>dict_length = <span class=\"number\">0</span>;\n    <span class=\"comment\">// SAFETY: When `deflateGetDictionary` returns `Z_OK`, it holds that:\n    // 1. `dict_length` elements were initialized.\n    // 2. `dict_length` &lt;= the capacity (32_768)\n    // which makes `set_len` safe to call.\n    </span><span class=\"kw\">unsafe </span>{\n        <span class=\"comment\">// Make the FFI call...\n        </span><span class=\"kw\">let </span>r = deflateGetDictionary(<span class=\"self\">self</span>.strm, dict.as_mut_ptr(), <span class=\"kw-2\">&amp;mut </span>dict_length);\n        <span class=\"kw\">if </span>r == Z_OK {\n            <span class=\"comment\">// ...and update the length to what was initialized.\n            </span>dict.set_len(dict_length);\n            <span class=\"prelude-val\">Some</span>(dict)\n        } <span class=\"kw\">else </span>{\n            <span class=\"prelude-val\">None\n        </span>}\n    }\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Ballow(dead_code)%5D%0A//+This+is+just+a+minimal+skeleton+for+the+doc+example;%0A//+don't+use+this+as+a+starting+point+for+a+real+library.%0Afn+main()+%7B%0A++++pub+struct+StreamWrapper+%7B+strm:+*mut+std::ffi::c_void+%7D%0A++++const+Z_OK:+i32+=+0;%0A++++extern+%22C%22+%7B%0A++++++++fn+deflateGetDictionary(%0A++++++++++++strm:+*mut+std::ffi::c_void,%0A++++++++++++dictionary:+*mut+u8,%0A++++++++++++dictLength:+*mut+usize,%0A++++++++)+-%3E+i32;%0A++++%7D%0A++++impl+StreamWrapper+%7B%0A++++pub+fn+get_dictionary(%26self)+-%3E+Option%3CVec%3Cu8%3E%3E+%7B%0A++++++++//+Per+the+FFI+method's+docs,+%2232768+bytes+is+always+enough%22.%0A++++++++let+mut+dict+=+Vec::with_capacity(32_768);%0A++++++++let+mut+dict_length+=+0;%0A++++++++//+SAFETY:+When+%60deflateGetDictionary%60+returns+%60Z_OK%60,+it+holds+that:%0A++++++++//+1.+%60dict_length%60+elements+were+initialized.%0A++++++++//+2.+%60dict_length%60+%3C=+the+capacity+(32_768)%0A++++++++//+which+makes+%60set_len%60+safe+to+call.%0A++++++++unsafe+%7B%0A++++++++++++//+Make+the+FFI+call...%0A++++++++++++let+r+=+deflateGetDictionary(self.strm,+dict.as_mut_ptr(),+%26mut+dict_length);%0A++++++++++++if+r+==+Z_OK+%7B%0A++++++++++++++++//+...and+update+the+length+to+what+was+initialized.%0A++++++++++++++++dict.set_len(dict_length);%0A++++++++++++++++Some(dict)%0A++++++++++++%7D+else+%7B%0A++++++++++++++++None%0A++++++++++++%7D%0A++++++++%7D%0A++++%7D%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>While the following example is sound, there is a memory leak since\nthe inner vectors were not freed prior to the <code>set_len</code> call:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>],\n                   <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>],\n                   <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]];\n<span class=\"comment\">// SAFETY:\n// 1. `old_len..0` is empty so no elements need to be initialized.\n// 2. `0 &lt;= capacity` always holds whatever `capacity` is.\n</span><span class=\"kw\">unsafe </span>{\n    vec.set_len(<span class=\"number\">0</span>);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+vec+=+vec!%5Bvec!%5B1,+0,+0%5D,%0A+++++++++++++++++++++++vec!%5B0,+1,+0%5D,%0A+++++++++++++++++++++++vec!%5B0,+0,+1%5D%5D;%0A++++//+SAFETY:%0A++++//+1.+%60old_len..0%60+is+empty+so+no+elements+need+to+be+initialized.%0A++++//+2.+%600+%3C=+capacity%60+always+holds+whatever+%60capacity%60+is.%0A++++unsafe+%7B%0A++++++++vec.set_len(0);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Normally, here, one would use <a href=\"struct.Vec.html#method.clear\" title=\"method std::vec::Vec::clear\"><code>clear</code></a> instead to correctly drop\nthe contents and thus not leak memory.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.swap_remove\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#1514\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.swap_remove\" class=\"fn\">swap_remove</a>(&amp;mut self, index: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Removes an element from the vector and returns it.</p>\n<p>The removed element is replaced by the last element of the vector.</p>\n<p>This does not preserve ordering of the remaining elements, but is <em>O</em>(1).\nIf you need to preserve the element order, use <a href=\"struct.Vec.html#method.remove\" title=\"method std::vec::Vec::remove\"><code>remove</code></a> instead.</p>\n<h5 id=\"panics-4\"><a class=\"doc-anchor\" href=\"#panics-4\">§</a>Panics</h5>\n<p>Panics if <code>index</code> is out of bounds.</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>, <span class=\"string\">\"baz\"</span>, <span class=\"string\">\"qux\"</span>];\n\n<span class=\"macro\">assert_eq!</span>(v.swap_remove(<span class=\"number\">1</span>), <span class=\"string\">\"bar\"</span>);\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"qux\"</span>, <span class=\"string\">\"baz\"</span>]);\n\n<span class=\"macro\">assert_eq!</span>(v.swap_remove(<span class=\"number\">0</span>), <span class=\"string\">\"foo\"</span>);\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"string\">\"baz\"</span>, <span class=\"string\">\"qux\"</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+vec!%5B%22foo%22,+%22bar%22,+%22baz%22,+%22qux%22%5D;%0A++++%0A++++assert_eq!(v.swap_remove(1),+%22bar%22);%0A++++assert_eq!(v,+%5B%22foo%22,+%22qux%22,+%22baz%22%5D);%0A++++%0A++++assert_eq!(v.swap_remove(0),+%22foo%22);%0A++++assert_eq!(v,+%5B%22baz%22,+%22qux%22%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.insert\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#1562\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.insert\" class=\"fn\">insert</a>(&amp;mut self, index: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, element: T)</h4></section></summary><div class=\"docblock\"><p>Inserts an element at position <code>index</code> within the vector, shifting all\nelements after it to the right.</p>\n<h5 id=\"panics-5\"><a class=\"doc-anchor\" href=\"#panics-5\">§</a>Panics</h5>\n<p>Panics if <code>index &gt; len</code>.</p>\n<h5 id=\"examples-24\"><a class=\"doc-anchor\" href=\"#examples-24\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\nvec.insert(<span class=\"number\">1</span>, <span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\nvec.insert(<span class=\"number\">4</span>, <span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+vec+=+vec!%5B1,+2,+3%5D;%0A++++vec.insert(1,+4);%0A++++assert_eq!(vec,+%5B1,+4,+2,+3%5D);%0A++++vec.insert(4,+5);%0A++++assert_eq!(vec,+%5B1,+4,+2,+3,+5%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n<h5 id=\"time-complexity\"><a class=\"doc-anchor\" href=\"#time-complexity\">§</a>Time complexity</h5>\n<p>Takes <em>O</em>(<a href=\"struct.Vec.html#method.len\" title=\"method std::vec::Vec::len\"><code>Vec::len</code></a>) time. All items after the insertion index must be\nshifted to the right. In the worst case, all elements are shifted when\nthe insertion index is 0.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.remove\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#1624\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.remove\" class=\"fn\">remove</a>(&amp;mut self, index: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Removes and returns the element at position <code>index</code> within the vector,\nshifting all elements after it to the left.</p>\n<p>Note: Because this shifts over the remaining elements, it has a\nworst-case performance of <em>O</em>(<em>n</em>). If you don’t need the order of elements\nto be preserved, use <a href=\"struct.Vec.html#method.swap_remove\" title=\"method std::vec::Vec::swap_remove\"><code>swap_remove</code></a> instead. If you’d like to remove\nelements from the beginning of the <code>Vec</code>, consider using\n<a href=\"../collections/struct.VecDeque.html#method.pop_front\" title=\"method std::collections::VecDeque::pop_front\"><code>VecDeque::pop_front</code></a> instead.</p>\n<h5 id=\"panics-6\"><a class=\"doc-anchor\" href=\"#panics-6\">§</a>Panics</h5>\n<p>Panics if <code>index</code> is out of bounds.</p>\n<h5 id=\"examples-25\"><a class=\"doc-anchor\" href=\"#examples-25\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"macro\">assert_eq!</span>(v.remove(<span class=\"number\">1</span>), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"number\">1</span>, <span class=\"number\">3</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+vec!%5B1,+2,+3%5D;%0A++++assert_eq!(v.remove(1),+2);%0A++++assert_eq!(v,+%5B1,+3%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.retain\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#1679-1681\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.retain\" class=\"fn\">retain</a>&lt;F&gt;(&amp;mut self, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Retains only the elements specified by the predicate.</p>\n<p>In other words, remove all elements <code>e</code> for which <code>f(&amp;e)</code> returns <code>false</code>.\nThis method operates in place, visiting each element exactly once in the\noriginal order, and preserves the order of the retained elements.</p>\n<h5 id=\"examples-26\"><a class=\"doc-anchor\" href=\"#examples-26\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];\nvec.retain(|<span class=\"kw-2\">&amp;</span>x| x % <span class=\"number\">2 </span>== <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">2</span>, <span class=\"number\">4</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+vec+=+vec!%5B1,+2,+3,+4%5D;%0A++++vec.retain(%7C%26x%7C+x+%25+2+==+0);%0A++++assert_eq!(vec,+%5B2,+4%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Because the elements are visited exactly once in the original order,\nexternal state may be used to decide which elements to keep.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n<span class=\"kw\">let </span>keep = [<span class=\"bool-val\">false</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">false</span>, <span class=\"bool-val\">true</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = keep.iter();\nvec.retain(|<span class=\"kw\">_</span>| <span class=\"kw-2\">*</span>iter.next().unwrap());\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+vec+=+vec!%5B1,+2,+3,+4,+5%5D;%0A++++let+keep+=+%5Bfalse,+true,+true,+false,+true%5D;%0A++++let+mut+iter+=+keep.iter();%0A++++vec.retain(%7C_%7C+*iter.next().unwrap());%0A++++assert_eq!(vec,+%5B2,+3,+5%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.retain_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.61.0\">1.61.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#1705-1707\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.retain_mut\" class=\"fn\">retain_mut</a>&lt;F&gt;(&amp;mut self, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Retains only the elements specified by the predicate, passing a mutable reference to it.</p>\n<p>In other words, remove all elements <code>e</code> such that <code>f(&amp;mut e)</code> returns <code>false</code>.\nThis method operates in place, visiting each element exactly once in the\noriginal order, and preserves the order of the retained elements.</p>\n<h5 id=\"examples-27\"><a class=\"doc-anchor\" href=\"#examples-27\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];\nvec.retain_mut(|x| <span class=\"kw\">if </span><span class=\"kw-2\">*</span>x &lt;= <span class=\"number\">3 </span>{\n    <span class=\"kw-2\">*</span>x += <span class=\"number\">1</span>;\n    <span class=\"bool-val\">true\n</span>} <span class=\"kw\">else </span>{\n    <span class=\"bool-val\">false\n</span>});\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+vec+=+vec!%5B1,+2,+3,+4%5D;%0A++++vec.retain_mut(%7Cx%7C+if+*x+%3C=+3+%7B%0A++++++++*x+%2B=+1;%0A++++++++true%0A++++%7D+else+%7B%0A++++++++false%0A++++%7D);%0A++++assert_eq!(vec,+%5B2,+3,+4%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.dedup_by_key\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0\">1.16.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#1814-1817\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.dedup_by_key\" class=\"fn\">dedup_by_key</a>&lt;F, K&gt;(&amp;mut self, key: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>) -&gt; K,\n    K: <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>,</div></h4></section></summary><div class=\"docblock\"><p>Removes all but the first of consecutive elements in the vector that resolve to the same\nkey.</p>\n<p>If the vector is sorted, this removes all duplicates.</p>\n<h5 id=\"examples-28\"><a class=\"doc-anchor\" href=\"#examples-28\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">21</span>, <span class=\"number\">30</span>, <span class=\"number\">20</span>];\n\nvec.dedup_by_key(|i| <span class=\"kw-2\">*</span>i / <span class=\"number\">10</span>);\n\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">20</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+vec+=+vec!%5B10,+20,+21,+30,+20%5D;%0A++++%0A++++vec.dedup_by_key(%7Ci%7C+*i+/+10);%0A++++%0A++++assert_eq!(vec,+%5B10,+20,+30,+20%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.dedup_by\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0\">1.16.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#1841-1843\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.dedup_by\" class=\"fn\">dedup_by</a>&lt;F&gt;(&amp;mut self, same_bucket: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>, <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Removes all but the first of consecutive elements in the vector satisfying a given equality\nrelation.</p>\n<p>The <code>same_bucket</code> function is passed references to two elements from the vector and\nmust determine if the elements compare equal. The elements are passed in opposite order\nfrom their order in the slice, so if <code>same_bucket(a, b)</code> returns <code>true</code>, <code>a</code> is removed.</p>\n<p>If the vector is sorted, this removes all duplicates.</p>\n<h5 id=\"examples-29\"><a class=\"doc-anchor\" href=\"#examples-29\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>, <span class=\"string\">\"Bar\"</span>, <span class=\"string\">\"baz\"</span>, <span class=\"string\">\"bar\"</span>];\n\nvec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));\n\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>, <span class=\"string\">\"baz\"</span>, <span class=\"string\">\"bar\"</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+vec+=+vec!%5B%22foo%22,+%22bar%22,+%22Bar%22,+%22baz%22,+%22bar%22%5D;%0A++++%0A++++vec.dedup_by(%7Ca,+b%7C+a.eq_ignore_ascii_case(b));%0A++++%0A++++assert_eq!(vec,+%5B%22foo%22,+%22bar%22,+%22baz%22,+%22bar%22%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.push\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#1993\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.push\" class=\"fn\">push</a>(&amp;mut self, value: T)</h4></section></summary><div class=\"docblock\"><p>Appends an element to the back of a collection.</p>\n<h5 id=\"panics-7\"><a class=\"doc-anchor\" href=\"#panics-7\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples-30\"><a class=\"doc-anchor\" href=\"#examples-30\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>];\nvec.push(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+vec+=+vec!%5B1,+2%5D;%0A++++vec.push(3);%0A++++assert_eq!(vec,+%5B1,+2,+3%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n<h5 id=\"time-complexity-1\"><a class=\"doc-anchor\" href=\"#time-complexity-1\">§</a>Time complexity</h5>\n<p>Takes amortized <em>O</em>(1) time. If the vector’s length would exceed its\ncapacity after the push, <em>O</em>(<em>capacity</em>) time is taken to copy the\nvector’s elements to a larger allocation. This expensive operation is\noffset by the <em>capacity</em> <em>O</em>(1) insertions it allows.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.push_within_capacity\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2045\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.push_within_capacity\" class=\"fn\">push_within_capacity</a>(&amp;mut self, value: T) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>vec_push_within_capacity</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/100486\">#100486</a>)</span></div></span></summary><div class=\"docblock\"><p>Appends an element if there is sufficient spare capacity, otherwise an error is returned\nwith the element.</p>\n<p>Unlike <a href=\"struct.Vec.html#method.push\" title=\"method std::vec::Vec::push\"><code>push</code></a> this method will not reallocate when there’s insufficient capacity.\nThe caller should use <a href=\"struct.Vec.html#method.reserve\" title=\"method std::vec::Vec::reserve\"><code>reserve</code></a> or <a href=\"struct.Vec.html#method.try_reserve\" title=\"method std::vec::Vec::try_reserve\"><code>try_reserve</code></a> to ensure that there is enough capacity.</p>\n<h5 id=\"examples-31\"><a class=\"doc-anchor\" href=\"#examples-31\">§</a>Examples</h5>\n<p>A manual, panic-free alternative to <a href=\"../iter/trait.FromIterator.html\" title=\"trait std::iter::FromIterator\"><code>FromIterator</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(vec_push_within_capacity)]\n\n</span><span class=\"kw\">use </span>std::collections::TryReserveError;\n<span class=\"kw\">fn </span>from_iter_fallible&lt;T&gt;(iter: <span class=\"kw\">impl </span>Iterator&lt;Item=T&gt;) -&gt; <span class=\"prelude-ty\">Result</span>&lt;Vec&lt;T&gt;, TryReserveError&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = Vec::new();\n    <span class=\"kw\">for </span>value <span class=\"kw\">in </span>iter {\n        <span class=\"kw\">if let </span><span class=\"prelude-val\">Err</span>(value) = vec.push_within_capacity(value) {\n            vec.try_reserve(<span class=\"number\">1</span>)<span class=\"question-mark\">?</span>;\n            <span class=\"comment\">// this cannot fail, the previous line either returned or added at least 1 free slot\n            </span><span class=\"kw\">let _ </span>= vec.push_within_capacity(value);\n        }\n    }\n    <span class=\"prelude-val\">Ok</span>(vec)\n}\n<span class=\"macro\">assert_eq!</span>(from_iter_fallible(<span class=\"number\">0</span>..<span class=\"number\">100</span>), <span class=\"prelude-val\">Ok</span>(Vec::from_iter(<span class=\"number\">0</span>..<span class=\"number\">100</span>)));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(vec_push_within_capacity)%5D%0A%0Afn+main()+%7B%0A++++use+std::collections::TryReserveError;%0A++++fn+from_iter_fallible%3CT%3E(iter:+impl+Iterator%3CItem=T%3E)+-%3E+Result%3CVec%3CT%3E,+TryReserveError%3E+%7B%0A++++++++let+mut+vec+=+Vec::new();%0A++++++++for+value+in+iter+%7B%0A++++++++++++if+let+Err(value)+=+vec.push_within_capacity(value)+%7B%0A++++++++++++++++vec.try_reserve(1)?;%0A++++++++++++++++//+this+cannot+fail,+the+previous+line+either+returned+or+added+at+least+1+free+slot%0A++++++++++++++++let+_+=+vec.push_within_capacity(value);%0A++++++++++++%7D%0A++++++++%7D%0A++++++++Ok(vec)%0A++++%7D%0A++++assert_eq!(from_iter_fallible(0..100),+Ok(Vec::from_iter(0..100)));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<h5 id=\"time-complexity-2\"><a class=\"doc-anchor\" href=\"#time-complexity-2\">§</a>Time complexity</h5>\n<p>Takes <em>O</em>(1) time.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.pop\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2078\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.pop\" class=\"fn\">pop</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Removes the last element from a vector and returns it, or <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> if it\nis empty.</p>\n<p>If you’d like to pop the first element, consider using\n<a href=\"../collections/struct.VecDeque.html#method.pop_front\" title=\"method std::collections::VecDeque::pop_front\"><code>VecDeque::pop_front</code></a> instead.</p>\n<h5 id=\"examples-32\"><a class=\"doc-anchor\" href=\"#examples-32\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"macro\">assert_eq!</span>(vec.pop(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+vec+=+vec!%5B1,+2,+3%5D;%0A++++assert_eq!(vec.pop(),+Some(3));%0A++++assert_eq!(vec,+%5B1,+2%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n<h5 id=\"time-complexity-3\"><a class=\"doc-anchor\" href=\"#time-complexity-3\">§</a>Time complexity</h5>\n<p>Takes <em>O</em>(1) time.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.pop_if\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2107-2109\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.pop_if\" class=\"fn\">pop_if</a>&lt;F&gt;(&amp;mut self, f: F) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>vec_pop_if</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/122741\">#122741</a>)</span></div></span></summary><div class=\"docblock\"><p>Removes and returns the last element in a vector if the predicate\nreturns <code>true</code>, or <a href=\"../option/enum.Option.html#variant.None\" title=\"variant std::option::Option::None\"><code>None</code></a> if the predicate returns false or the vector\nis empty.</p>\n<h5 id=\"examples-33\"><a class=\"doc-anchor\" href=\"#examples-33\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(vec_pop_if)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];\n<span class=\"kw\">let </span>pred = |x: <span class=\"kw-2\">&amp;mut </span>i32| <span class=\"kw-2\">*</span>x % <span class=\"number\">2 </span>== <span class=\"number\">0</span>;\n\n<span class=\"macro\">assert_eq!</span>(vec.pop_if(pred), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>));\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>(vec.pop_if(pred), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(vec_pop_if)%5D%0A%0Afn+main()+%7B%0A++++let+mut+vec+=+vec!%5B1,+2,+3,+4%5D;%0A++++let+pred+=+%7Cx:+%26mut+i32%7C+*x+%25+2+==+0;%0A++++%0A++++assert_eq!(vec.pop_if(pred),+Some(4));%0A++++assert_eq!(vec,+%5B1,+2,+3%5D);%0A++++assert_eq!(vec.pop_if(pred),+None);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.append\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2133\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.append\" class=\"fn\">append</a>(&amp;mut self, other: &amp;mut <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;)</h4></section></summary><div class=\"docblock\"><p>Moves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> empty.</p>\n<h5 id=\"panics-8\"><a class=\"doc-anchor\" href=\"#panics-8\">§</a>Panics</h5>\n<p>Panics if the new capacity exceeds <code>isize::MAX</code> <em>bytes</em>.</p>\n<h5 id=\"examples-34\"><a class=\"doc-anchor\" href=\"#examples-34\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec2 = <span class=\"macro\">vec!</span>[<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];\nvec.append(<span class=\"kw-2\">&amp;mut </span>vec2);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n<span class=\"macro\">assert_eq!</span>(vec2, []);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+vec+=+vec!%5B1,+2,+3%5D;%0A++++let+mut+vec2+=+vec!%5B4,+5,+6%5D;%0A++++vec.append(%26mut+vec2);%0A++++assert_eq!(vec,+%5B1,+2,+3,+4,+5,+6%5D);%0A++++assert_eq!(vec2,+%5B%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.drain\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2182-2184\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.drain\" class=\"fn\">drain</a>&lt;R&gt;(&amp;mut self, range: R) -&gt; <a class=\"struct\" href=\"struct.Drain.html\" title=\"struct std::vec::Drain\">Drain</a>&lt;'_, T, A&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Drain<'_, T, A>\">ⓘ</a><div class=\"where\">where\n    R: <a class=\"trait\" href=\"../ops/trait.RangeBounds.html\" title=\"trait std::ops::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Removes the specified range from the vector in bulk, returning all\nremoved elements as an iterator. If the iterator is dropped before\nbeing fully consumed, it drops the remaining removed elements.</p>\n<p>The returned iterator keeps a mutable borrow on the vector to optimize\nits implementation.</p>\n<h5 id=\"panics-9\"><a class=\"doc-anchor\" href=\"#panics-9\">§</a>Panics</h5>\n<p>Panics if the starting point is greater than the end point or if\nthe end point is greater than the length of the vector.</p>\n<h5 id=\"leaking\"><a class=\"doc-anchor\" href=\"#leaking\">§</a>Leaking</h5>\n<p>If the returned iterator goes out of scope without being dropped (due to\n<a href=\"../mem/fn.forget.html\" title=\"fn std::mem::forget\"><code>mem::forget</code></a>, for example), the vector may have lost and leaked\nelements arbitrarily, including elements outside the range.</p>\n<h5 id=\"examples-35\"><a class=\"doc-anchor\" href=\"#examples-35\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span>u: Vec&lt;<span class=\"kw\">_</span>&gt; = v.drain(<span class=\"number\">1</span>..).collect();\n<span class=\"macro\">assert_eq!</span>(v, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>]);\n<span class=\"macro\">assert_eq!</span>(u, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n\n<span class=\"comment\">// A full range clears the vector, like `clear()` does\n</span>v.drain(..);\n<span class=\"macro\">assert_eq!</span>(v, <span class=\"kw-2\">&amp;</span>[]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+vec!%5B1,+2,+3%5D;%0A++++let+u:+Vec%3C_%3E+=+v.drain(1..).collect();%0A++++assert_eq!(v,+%26%5B1%5D);%0A++++assert_eq!(u,+%26%5B2,+3%5D);%0A++++%0A++++//+A+full+range+clears+the+vector,+like+%60clear()%60+does%0A++++v.drain(..);%0A++++assert_eq!(v,+%26%5B%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clear\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2228\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.clear\" class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Clears the vector, removing all values.</p>\n<p>Note that this method has no effect on the allocated capacity\nof the vector.</p>\n<h5 id=\"examples-36\"><a class=\"doc-anchor\" href=\"#examples-36\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n\nv.clear();\n\n<span class=\"macro\">assert!</span>(v.is_empty());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+vec!%5B1,+2,+3%5D;%0A++++%0A++++v.clear();%0A++++%0A++++assert!(v.is_empty());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.len\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2255\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of elements in the vector, also referred to\nas its ‘length’.</p>\n<h5 id=\"examples-37\"><a class=\"doc-anchor\" href=\"#examples-37\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"macro\">assert_eq!</span>(a.len(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+a+=+vec!%5B1,+2,+3%5D;%0A++++assert_eq!(a.len(),+3);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_empty\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2271\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the vector contains no elements.</p>\n<h5 id=\"examples-38\"><a class=\"doc-anchor\" href=\"#examples-38\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = Vec::new();\n<span class=\"macro\">assert!</span>(v.is_empty());\n\nv.push(<span class=\"number\">1</span>);\n<span class=\"macro\">assert!</span>(!v.is_empty());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+Vec::new();%0A++++assert!(v.is_empty());%0A++++%0A++++v.push(1);%0A++++assert!(!v.is_empty());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.split_off\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2303-2305\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.split_off\" class=\"fn\">split_off</a>(&amp;mut self, at: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h4></section></summary><div class=\"docblock\"><p>Splits the collection into two at the given index.</p>\n<p>Returns a newly allocated vector containing the elements in the range\n<code>[at, len)</code>. After the call, the original vector will be left containing\nthe elements <code>[0, at)</code> with its previous capacity unchanged.</p>\n<ul>\n<li>If you want to take ownership of the entire contents and capacity of\nthe vector, see <a href=\"../mem/fn.take.html\" title=\"fn std::mem::take\"><code>mem::take</code></a> or <a href=\"../mem/fn.replace.html\" title=\"fn std::mem::replace\"><code>mem::replace</code></a>.</li>\n<li>If you don’t need the returned vector at all, see <a href=\"struct.Vec.html#method.truncate\" title=\"method std::vec::Vec::truncate\"><code>Vec::truncate</code></a>.</li>\n<li>If you want to take ownership of an arbitrary subslice, or you don’t\nnecessarily want to store the removed items in a vector, see <a href=\"struct.Vec.html#method.drain\" title=\"method std::vec::Vec::drain\"><code>Vec::drain</code></a>.</li>\n</ul>\n<h5 id=\"panics-10\"><a class=\"doc-anchor\" href=\"#panics-10\">§</a>Panics</h5>\n<p>Panics if <code>at &gt; len</code>.</p>\n<h5 id=\"examples-39\"><a class=\"doc-anchor\" href=\"#examples-39\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span>vec2 = vec.split_off(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>]);\n<span class=\"macro\">assert_eq!</span>(vec2, [<span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+vec+=+vec!%5B1,+2,+3%5D;%0A++++let+vec2+=+vec.split_off(1);%0A++++assert_eq!(vec,+%5B1%5D);%0A++++assert_eq!(vec2,+%5B2,+3%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.resize_with\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0\">1.33.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2359-2361\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.resize_with\" class=\"fn\">resize_with</a>&lt;F&gt;(&amp;mut self, new_len: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.</p>\n<p>If <code>new_len</code> is greater than <code>len</code>, the <code>Vec</code> is extended by the\ndifference, with each additional slot filled with the result of\ncalling the closure <code>f</code>. The return values from <code>f</code> will end up\nin the <code>Vec</code> in the order they have been generated.</p>\n<p>If <code>new_len</code> is less than <code>len</code>, the <code>Vec</code> is simply truncated.</p>\n<p>This method uses a closure to create new values on every push. If\nyou’d rather <a href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\"><code>Clone</code></a> a given value, use <a href=\"struct.Vec.html#method.resize\" title=\"method std::vec::Vec::resize\"><code>Vec::resize</code></a>. If you\nwant to use the <a href=\"../default/trait.Default.html\" title=\"trait std::default::Default\"><code>Default</code></a> trait to generate values, you can\npass <a href=\"../default/trait.Default.html#tymethod.default\" title=\"associated function std::default::Default::default\"><code>Default::default</code></a> as the second argument.</p>\n<h5 id=\"examples-40\"><a class=\"doc-anchor\" href=\"#examples-40\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\nvec.resize_with(<span class=\"number\">5</span>, Default::default);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>p = <span class=\"number\">1</span>;\nvec.resize_with(<span class=\"number\">4</span>, || { p <span class=\"kw-2\">*</span>= <span class=\"number\">2</span>; p });\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>, <span class=\"number\">16</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+vec+=+vec!%5B1,+2,+3%5D;%0A++++vec.resize_with(5,+Default::default);%0A++++assert_eq!(vec,+%5B1,+2,+3,+0,+0%5D);%0A++++%0A++++let+mut+vec+=+vec!%5B%5D;%0A++++let+mut+p+=+1;%0A++++vec.resize_with(4,+%7C%7C+%7B+p+*=+2;+p+%7D);%0A++++assert_eq!(vec,+%5B2,+4,+8,+16%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.leak\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.47.0\">1.47.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2396-2398\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.leak\" class=\"fn\">leak</a>&lt;'a&gt;(self) -&gt; &amp;'a mut <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a><div class=\"where\">where\n    A: 'a,</div></h4></section></summary><div class=\"docblock\"><p>Consumes and leaks the <code>Vec</code>, returning a mutable reference to the contents,\n<code>&amp;'a mut [T]</code>. Note that the type <code>T</code> must outlive the chosen lifetime\n<code>'a</code>. If the type has only static references, or none at all, then this\nmay be chosen to be <code>'static</code>.</p>\n<p>As of Rust 1.57, this method does not reallocate or shrink the <code>Vec</code>,\nso the leaked allocation may include unused capacity that is not part\nof the returned slice.</p>\n<p>This function is mainly useful for data that lives for the remainder of\nthe program’s life. Dropping the returned reference will cause a memory\nleak.</p>\n<h5 id=\"examples-41\"><a class=\"doc-anchor\" href=\"#examples-41\">§</a>Examples</h5>\n<p>Simple usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span>static_ref: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span><span class=\"kw-2\">mut </span>[usize] = x.leak();\nstatic_ref[<span class=\"number\">0</span>] += <span class=\"number\">1</span>;\n<span class=\"macro\">assert_eq!</span>(static_ref, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+vec!%5B1,+2,+3%5D;%0A++++let+static_ref:+%26'static+mut+%5Busize%5D+=+x.leak();%0A++++static_ref%5B0%5D+%2B=+1;%0A++++assert_eq!(static_ref,+%26%5B2,+2,+3%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.spare_capacity_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.60.0\">1.60.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2434\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.spare_capacity_mut\" class=\"fn\">spare_capacity_mut</a>(&amp;mut self) -&gt; &amp;mut [<a class=\"union\" href=\"../mem/union.MaybeUninit.html\" title=\"union std::mem::MaybeUninit\">MaybeUninit</a>&lt;T&gt;]</h4></section></summary><div class=\"docblock\"><p>Returns the remaining spare capacity of the vector as a slice of\n<code>MaybeUninit&lt;T&gt;</code>.</p>\n<p>The returned slice can be used to fill the vector with data (e.g. by\nreading from a file) before marking the data as initialized using the\n<a href=\"struct.Vec.html#method.set_len\" title=\"method std::vec::Vec::set_len\"><code>set_len</code></a> method.</p>\n<h5 id=\"examples-42\"><a class=\"doc-anchor\" href=\"#examples-42\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// Allocate vector big enough for 10 elements.\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = Vec::with_capacity(<span class=\"number\">10</span>);\n\n<span class=\"comment\">// Fill in the first 3 elements.\n</span><span class=\"kw\">let </span>uninit = v.spare_capacity_mut();\nuninit[<span class=\"number\">0</span>].write(<span class=\"number\">0</span>);\nuninit[<span class=\"number\">1</span>].write(<span class=\"number\">1</span>);\nuninit[<span class=\"number\">2</span>].write(<span class=\"number\">2</span>);\n\n<span class=\"comment\">// Mark the first 3 elements of the vector as being initialized.\n</span><span class=\"kw\">unsafe </span>{\n    v.set_len(<span class=\"number\">3</span>);\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>v, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+Allocate+vector+big+enough+for+10+elements.%0Afn+main()+%7B%0A++++let+mut+v+=+Vec::with_capacity(10);%0A++++%0A++++//+Fill+in+the+first+3+elements.%0A++++let+uninit+=+v.spare_capacity_mut();%0A++++uninit%5B0%5D.write(0);%0A++++uninit%5B1%5D.write(1);%0A++++uninit%5B2%5D.write(2);%0A++++%0A++++//+Mark+the+first+3+elements+of+the+vector+as+being+initialized.%0A++++unsafe+%7B%0A++++++++v.set_len(3);%0A++++%7D%0A++++%0A++++assert_eq!(%26v,+%26%5B0,+1,+2%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.split_at_spare_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2499\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.split_at_spare_mut\" class=\"fn\">split_at_spare_mut</a>(&amp;mut self) -&gt; (&amp;mut <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>, &amp;mut [<a class=\"union\" href=\"../mem/union.MaybeUninit.html\" title=\"union std::mem::MaybeUninit\">MaybeUninit</a>&lt;T&gt;])</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>vec_split_at_spare</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/81944\">#81944</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns vector content as a slice of <code>T</code>, along with the remaining spare\ncapacity of the vector as a slice of <code>MaybeUninit&lt;T&gt;</code>.</p>\n<p>The returned spare capacity slice can be used to fill the vector with data\n(e.g. by reading from a file) before marking the data as initialized using\nthe <a href=\"struct.Vec.html#method.set_len\" title=\"method std::vec::Vec::set_len\"><code>set_len</code></a> method.</p>\n<p>Note that this is a low-level API, which should be used with care for\noptimization purposes. If you need to append data to a <code>Vec</code>\nyou can use <a href=\"struct.Vec.html#method.push\" title=\"method std::vec::Vec::push\"><code>push</code></a>, <a href=\"struct.Vec.html#method.extend\" title=\"method std::vec::Vec::extend\"><code>extend</code></a>, <a href=\"struct.Vec.html#method.extend_from_slice\" title=\"method std::vec::Vec::extend_from_slice\"><code>extend_from_slice</code></a>,\n<a href=\"struct.Vec.html#method.extend_from_within\" title=\"method std::vec::Vec::extend_from_within\"><code>extend_from_within</code></a>, <a href=\"struct.Vec.html#method.insert\" title=\"method std::vec::Vec::insert\"><code>insert</code></a>, <a href=\"struct.Vec.html#method.append\" title=\"method std::vec::Vec::append\"><code>append</code></a>, <a href=\"struct.Vec.html#method.resize\" title=\"method std::vec::Vec::resize\"><code>resize</code></a> or\n<a href=\"struct.Vec.html#method.resize_with\" title=\"method std::vec::Vec::resize_with\"><code>resize_with</code></a>, depending on your exact needs.</p>\n<h5 id=\"examples-43\"><a class=\"doc-anchor\" href=\"#examples-43\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(vec_split_at_spare)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];\n\n<span class=\"comment\">// Reserve additional space big enough for 10 elements.\n</span>v.reserve(<span class=\"number\">10</span>);\n\n<span class=\"kw\">let </span>(init, uninit) = v.split_at_spare_mut();\n<span class=\"kw\">let </span>sum = init.iter().copied().sum::&lt;u32&gt;();\n\n<span class=\"comment\">// Fill in the next 4 elements.\n</span>uninit[<span class=\"number\">0</span>].write(sum);\nuninit[<span class=\"number\">1</span>].write(sum * <span class=\"number\">2</span>);\nuninit[<span class=\"number\">2</span>].write(sum * <span class=\"number\">3</span>);\nuninit[<span class=\"number\">3</span>].write(sum * <span class=\"number\">4</span>);\n\n<span class=\"comment\">// Mark the 4 elements of the vector as being initialized.\n</span><span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span>len = v.len();\n    v.set_len(len + <span class=\"number\">4</span>);\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>v, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>, <span class=\"number\">12</span>, <span class=\"number\">16</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(vec_split_at_spare)%5D%0A%0Afn+main()+%7B%0A++++let+mut+v+=+vec!%5B1,+1,+2%5D;%0A++++%0A++++//+Reserve+additional+space+big+enough+for+10+elements.%0A++++v.reserve(10);%0A++++%0A++++let+(init,+uninit)+=+v.split_at_spare_mut();%0A++++let+sum+=+init.iter().copied().sum::%3Cu32%3E();%0A++++%0A++++//+Fill+in+the+next+4+elements.%0A++++uninit%5B0%5D.write(sum);%0A++++uninit%5B1%5D.write(sum+*+2);%0A++++uninit%5B2%5D.write(sum+*+3);%0A++++uninit%5B3%5D.write(sum+*+4);%0A++++%0A++++//+Mark+the+4+elements+of+the+vector+as+being+initialized.%0A++++unsafe+%7B%0A++++++++let+len+=+v.len();%0A++++++++v.set_len(len+%2B+4);%0A++++%7D%0A++++%0A++++assert_eq!(%26v,+%26%5B1,+1,+2,+4,+8,+12,+16%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Vec%3CT,+A%3E-1\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2533\">source</a><a href=\"#impl-Vec%3CT,+A%3E-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.resize\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2559\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.resize\" class=\"fn\">resize</a>(&amp;mut self, new_len: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, value: T)</h4></section></summary><div class=\"docblock\"><p>Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.</p>\n<p>If <code>new_len</code> is greater than <code>len</code>, the <code>Vec</code> is extended by the\ndifference, with each additional slot filled with <code>value</code>.\nIf <code>new_len</code> is less than <code>len</code>, the <code>Vec</code> is simply truncated.</p>\n<p>This method requires <code>T</code> to implement <a href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\"><code>Clone</code></a>,\nin order to be able to clone the passed value.\nIf you need more flexibility (or want to rely on <a href=\"../default/trait.Default.html\" title=\"trait std::default::Default\"><code>Default</code></a> instead of\n<a href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\"><code>Clone</code></a>), use <a href=\"struct.Vec.html#method.resize_with\" title=\"method std::vec::Vec::resize_with\"><code>Vec::resize_with</code></a>.\nIf you only need to resize to a smaller size, use <a href=\"struct.Vec.html#method.truncate\" title=\"method std::vec::Vec::truncate\"><code>Vec::truncate</code></a>.</p>\n<h5 id=\"examples-44\"><a class=\"doc-anchor\" href=\"#examples-44\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"string\">\"hello\"</span>];\nvec.resize(<span class=\"number\">3</span>, <span class=\"string\">\"world\"</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"string\">\"hello\"</span>, <span class=\"string\">\"world\"</span>, <span class=\"string\">\"world\"</span>]);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];\nvec.resize(<span class=\"number\">2</span>, <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+vec+=+vec!%5B%22hello%22%5D;%0A++++vec.resize(3,+%22world%22);%0A++++assert_eq!(vec,+%5B%22hello%22,+%22world%22,+%22world%22%5D);%0A++++%0A++++let+mut+vec+=+vec!%5B1,+2,+3,+4%5D;%0A++++vec.resize(2,+0);%0A++++assert_eq!(vec,+%5B1,+2%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend_from_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2590\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.extend_from_slice\" class=\"fn\">extend_from_slice</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>)</h4></section></summary><div class=\"docblock\"><p>Clones and appends all elements in a slice to the <code>Vec</code>.</p>\n<p>Iterates over the slice <code>other</code>, clones each element, and then appends\nit to this <code>Vec</code>. The <code>other</code> slice is traversed in-order.</p>\n<p>Note that this function is same as <a href=\"struct.Vec.html#method.extend\" title=\"method std::vec::Vec::extend\"><code>extend</code></a> except that it is\nspecialized to work with slices instead. If and when Rust gets\nspecialization this function will likely be deprecated (but still\navailable).</p>\n<h5 id=\"examples-45\"><a class=\"doc-anchor\" href=\"#examples-45\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>];\nvec.extend_from_slice(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+vec+=+vec!%5B1%5D;%0A++++vec.extend_from_slice(%26%5B2,+3,+4%5D);%0A++++assert_eq!(vec,+%5B1,+2,+3,+4%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend_from_within\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2617-2619\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.extend_from_within\" class=\"fn\">extend_from_within</a>&lt;R&gt;(&amp;mut self, src: R)<div class=\"where\">where\n    R: <a class=\"trait\" href=\"../ops/trait.RangeBounds.html\" title=\"trait std::ops::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Copies elements from <code>src</code> range to the end of the vector.</p>\n<h5 id=\"panics-11\"><a class=\"doc-anchor\" href=\"#panics-11\">§</a>Panics</h5>\n<p>Panics if the starting point is greater than the end point or if\nthe end point is greater than the length of the vector.</p>\n<h5 id=\"examples-46\"><a class=\"doc-anchor\" href=\"#examples-46\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];\n\nvec.extend_from_within(<span class=\"number\">2</span>..);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n\nvec.extend_from_within(..<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]);\n\nvec.extend_from_within(<span class=\"number\">4</span>..<span class=\"number\">8</span>);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+vec+=+vec!%5B0,+1,+2,+3,+4%5D;%0A++++%0A++++vec.extend_from_within(2..);%0A++++assert_eq!(vec,+%5B0,+1,+2,+3,+4,+2,+3,+4%5D);%0A++++%0A++++vec.extend_from_within(..2);%0A++++assert_eq!(vec,+%5B0,+1,+2,+3,+4,+2,+3,+4,+0,+1%5D);%0A++++%0A++++vec.extend_from_within(4..8);%0A++++assert_eq!(vec,+%5B0,+1,+2,+3,+4,+2,+3,+4,+0,+1,+4,+2,+3,+4%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Vec%3C%5BT;+N%5D,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2632\">source</a><a href=\"#impl-Vec%3C%5BT;+N%5D,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"../primitive.array.html\">[T; N]</a>, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_flattened\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0\">1.80.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2653\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.into_flattened\" class=\"fn\">into_flattened</a>(self) -&gt; <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section></summary><div class=\"docblock\"><p>Takes a <code>Vec&lt;[T; N]&gt;</code> and flattens it into a <code>Vec&lt;T&gt;</code>.</p>\n<h5 id=\"panics-12\"><a class=\"doc-anchor\" href=\"#panics-12\">§</a>Panics</h5>\n<p>Panics if the length of the resulting vector would overflow a <code>usize</code>.</p>\n<p>This is only possible when flattening a vector of arrays of zero-sized\ntypes, and thus tends to be irrelevant in practice. If\n<code>size_of::&lt;T&gt;() &gt; 0</code>, this will never panic.</p>\n<h5 id=\"examples-47\"><a class=\"doc-anchor\" href=\"#examples-47\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>], [<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]];\n<span class=\"macro\">assert_eq!</span>(vec.pop(), <span class=\"prelude-val\">Some</span>([<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>flattened = vec.into_flattened();\n<span class=\"macro\">assert_eq!</span>(flattened.pop(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">6</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+vec+=+vec!%5B%5B1,+2,+3%5D,+%5B4,+5,+6%5D,+%5B7,+8,+9%5D%5D;%0A++++assert_eq!(vec.pop(),+Some(%5B7,+8,+9%5D));%0A++++%0A++++let+mut+flattened+=+vec.into_flattened();%0A++++assert_eq!(flattened.pop(),+Some(6));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Vec%3CT,+A%3E-2\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2707\">source</a><a href=\"#impl-Vec%3CT,+A%3E-2\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.dedup\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2724\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.dedup\" class=\"fn\">dedup</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Removes consecutive repeated elements in the vector according to the\n<a href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\"><code>PartialEq</code></a> trait implementation.</p>\n<p>If the vector is sorted, this removes all duplicates.</p>\n<h5 id=\"examples-48\"><a class=\"doc-anchor\" href=\"#examples-48\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>];\n\nvec.dedup();\n\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+vec+=+vec!%5B1,+2,+2,+3,+2%5D;%0A++++%0A++++vec.dedup();%0A++++%0A++++assert_eq!(vec,+%5B1,+2,+3,+2%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Vec%3CT,+A%3E-3\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3052\">source</a><a href=\"#impl-Vec%3CT,+A%3E-3\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.splice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3150-3153\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.splice\" class=\"fn\">splice</a>&lt;R, I&gt;(\n    &amp;mut self,\n    range: R,\n    replace_with: I,\n) -&gt; <a class=\"struct\" href=\"struct.Splice.html\" title=\"struct std::vec::Splice\">Splice</a>&lt;'_, &lt;I as <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"../iter/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type std::iter::IntoIterator::IntoIter\">IntoIter</a>, A&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Splice<'_, <I as IntoIterator>::IntoIter, A>\">ⓘ</a><div class=\"where\">where\n    R: <a class=\"trait\" href=\"../ops/trait.RangeBounds.html\" title=\"trait std::ops::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;,\n    I: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Creates a splicing iterator that replaces the specified range in the vector\nwith the given <code>replace_with</code> iterator and yields the removed items.\n<code>replace_with</code> does not need to be the same length as <code>range</code>.</p>\n<p><code>range</code> is removed even if the iterator is not consumed until the end.</p>\n<p>It is unspecified how many elements are removed from the vector\nif the <code>Splice</code> value is leaked.</p>\n<p>The input iterator <code>replace_with</code> is only consumed when the <code>Splice</code> value is dropped.</p>\n<p>This is optimal if:</p>\n<ul>\n<li>The tail (elements in the vector after <code>range</code>) is empty,</li>\n<li>or <code>replace_with</code> yields fewer or equal elements than <code>range</code>’s length</li>\n<li>or the lower bound of its <code>size_hint()</code> is exact.</li>\n</ul>\n<p>Otherwise, a temporary vector is allocated and the tail is moved twice.</p>\n<h5 id=\"panics-13\"><a class=\"doc-anchor\" href=\"#panics-13\">§</a>Panics</h5>\n<p>Panics if the starting point is greater than the end point or if\nthe end point is greater than the length of the vector.</p>\n<h5 id=\"examples-49\"><a class=\"doc-anchor\" href=\"#examples-49\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];\n<span class=\"kw\">let </span>new = [<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>];\n<span class=\"kw\">let </span>u: Vec&lt;<span class=\"kw\">_</span>&gt; = v.splice(<span class=\"number\">1</span>..<span class=\"number\">3</span>, new).collect();\n<span class=\"macro\">assert_eq!</span>(v, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">4</span>]);\n<span class=\"macro\">assert_eq!</span>(u, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+vec!%5B1,+2,+3,+4%5D;%0A++++let+new+=+%5B7,+8,+9%5D;%0A++++let+u:+Vec%3C_%3E+=+v.splice(1..3,+new).collect();%0A++++assert_eq!(v,+%26%5B1,+7,+8,+9,+4%5D);%0A++++assert_eq!(u,+%26%5B2,+3%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extract_if\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3209-3211\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.extract_if\" class=\"fn\">extract_if</a>&lt;F&gt;(&amp;mut self, filter: F) -&gt; <a class=\"struct\" href=\"struct.ExtractIf.html\" title=\"struct std::vec::ExtractIf\">ExtractIf</a>&lt;'_, T, F, A&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"ExtractIf<'_, T, F, A>\">ⓘ</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extract_if</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/43244\">#43244</a>)</span></div></span></summary><div class=\"docblock\"><p>Creates an iterator which uses a closure to determine if an element should be removed.</p>\n<p>If the closure returns true, then the element is removed and yielded.\nIf the closure returns false, the element will remain in the vector and will not be yielded\nby the iterator.</p>\n<p>If the returned <code>ExtractIf</code> is not exhausted, e.g. because it is dropped without iterating\nor the iteration short-circuits, then the remaining elements will be retained.\nUse <a href=\"struct.Vec.html#method.retain\" title=\"method std::vec::Vec::retain\"><code>retain</code></a> with a negated predicate if you do not need the returned iterator.</p>\n<p>Using this method is equivalent to the following code:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>i = <span class=\"number\">0</span>;\n<span class=\"kw\">while </span>i &lt; vec.len() {\n    <span class=\"kw\">if </span>some_predicate(<span class=\"kw-2\">&amp;mut </span>vec[i]) {\n        <span class=\"kw\">let </span>val = vec.remove(i);\n        <span class=\"comment\">// your code here\n    </span>} <span class=\"kw\">else </span>{\n        i += <span class=\"number\">1</span>;\n    }\n}\n</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+some_predicate+=+%7Cx:+%26mut+i32%7C+%7B+*x+==+2+%7C%7C+*x+==+3+%7C%7C+*x+==+6+%7D;%0A++++let+mut+vec+=+vec!%5B1,+2,+3,+4,+5,+6%5D;%0A++++let+mut+i+=+0;%0A++++while+i+%3C+vec.len()+%7B%0A++++++++if+some_predicate(%26mut+vec%5Bi%5D)+%7B%0A++++++++++++let+val+=+vec.remove(i);%0A++++++++++++//+your+code+here%0A++++++++%7D+else+%7B%0A++++++++++++i+%2B=+1;%0A++++++++%7D%0A++++%7D%0A++++%0A++++assert_eq!(vec,+vec!%5B1,+4,+5%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>But <code>extract_if</code> is easier to use. <code>extract_if</code> is also more efficient,\nbecause it can backshift the elements of the array in bulk.</p>\n<p>Note that <code>extract_if</code> also lets you mutate every element in the filter closure,\nregardless of whether you choose to keep or remove it.</p>\n<h5 id=\"examples-50\"><a class=\"doc-anchor\" href=\"#examples-50\">§</a>Examples</h5>\n<p>Splitting an array into evens and odds, reusing the original allocation:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(extract_if)]\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>numbers = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>, <span class=\"number\">14</span>, <span class=\"number\">15</span>];\n\n<span class=\"kw\">let </span>evens = numbers.extract_if(|x| <span class=\"kw-2\">*</span>x % <span class=\"number\">2 </span>== <span class=\"number\">0</span>).collect::&lt;Vec&lt;<span class=\"kw\">_</span>&gt;&gt;();\n<span class=\"kw\">let </span>odds = numbers;\n\n<span class=\"macro\">assert_eq!</span>(evens, <span class=\"macro\">vec!</span>[<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">14</span>]);\n<span class=\"macro\">assert_eq!</span>(odds, <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">9</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>, <span class=\"number\">15</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(extract_if)%5D%0Afn+main()+%7B%0A++++let+mut+numbers+=+vec!%5B1,+2,+3,+4,+5,+6,+8,+9,+11,+13,+14,+15%5D;%0A++++%0A++++let+evens+=+numbers.extract_if(%7Cx%7C+*x+%25+2+==+0).collect::%3CVec%3C_%3E%3E();%0A++++let+odds+=+numbers;%0A++++%0A++++assert_eq!(evens,+vec!%5B2,+4,+6,+8,+14%5D);%0A++++assert_eq!(odds,+vec!%5B1,+3,+5,+9,+11,+13,+15%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"deref-methods-%5BT%5D\" class=\"section-header\"><span>Methods from <a class=\"trait\" href=\"../ops/trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a>&lt;Target = <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt;</span><a href=\"#deref-methods-%5BT%5D\" class=\"anchor\">§</a></h2><div id=\"deref-methods-%5BT%5D-1\" class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sort_floats\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#4651\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.sort_floats\" class=\"fn\">sort_floats</a>(&amp;mut self)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>sort_floats</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/93396\">#93396</a>)</span></div></span></summary><div class=\"docblock\"><p>Sorts the slice of floats.</p>\n<p>This sort is in-place (i.e. does not allocate), <em>O</em>(<em>n</em> * log(<em>n</em>)) worst-case, and uses\nthe ordering defined by <a href=\"../primitive.f64.html#method.total_cmp\" title=\"method f64::total_cmp\"><code>f64::total_cmp</code></a>.</p>\n<h5 id=\"current-implementation\"><a class=\"doc-anchor\" href=\"#current-implementation\">§</a>Current implementation</h5>\n<p>This uses the same sorting algorithm as <a href=\"../primitive.slice.html#method.sort_unstable_by\" title=\"method slice::sort_unstable_by\"><code>sort_unstable_by</code></a>.</p>\n<h5 id=\"examples-51\"><a class=\"doc-anchor\" href=\"#examples-51\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(sort_floats)]\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = [<span class=\"number\">2.6</span>, -<span class=\"number\">5e-8</span>, f64::NAN, <span class=\"number\">8.29</span>, f64::INFINITY, -<span class=\"number\">1.0</span>, <span class=\"number\">0.0</span>, -f64::INFINITY, -<span class=\"number\">0.0</span>];\n\nv.sort_floats();\n<span class=\"kw\">let </span>sorted = [-f64::INFINITY, -<span class=\"number\">1.0</span>, -<span class=\"number\">5e-8</span>, -<span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>, <span class=\"number\">2.6</span>, <span class=\"number\">8.29</span>, f64::INFINITY, f64::NAN];\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>v[..<span class=\"number\">8</span>], <span class=\"kw-2\">&amp;</span>sorted[..<span class=\"number\">8</span>]);\n<span class=\"macro\">assert!</span>(v[<span class=\"number\">8</span>].is_nan());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(sort_floats)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+%5B2.6,+-5e-8,+f64::NAN,+8.29,+f64::INFINITY,+-1.0,+0.0,+-f64::INFINITY,+-0.0%5D;%0A++++%0A++++v.sort_floats();%0A++++let+sorted+=+%5B-f64::INFINITY,+-1.0,+-5e-8,+-0.0,+0.0,+2.6,+8.29,+f64::INFINITY,+f64::NAN%5D;%0A++++assert_eq!(%26v%5B..8%5D,+%26sorted%5B..8%5D);%0A++++assert!(v%5B8%5D.is_nan());%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sort_floats-1\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#4622\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.sort_floats-1\" class=\"fn\">sort_floats</a>(&amp;mut self)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>sort_floats</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/93396\">#93396</a>)</span></div></span></summary><div class=\"docblock\"><p>Sorts the slice of floats.</p>\n<p>This sort is in-place (i.e. does not allocate), <em>O</em>(<em>n</em> * log(<em>n</em>)) worst-case, and uses\nthe ordering defined by <a href=\"../primitive.f32.html#method.total_cmp\" title=\"method f32::total_cmp\"><code>f32::total_cmp</code></a>.</p>\n<h5 id=\"current-implementation-1\"><a class=\"doc-anchor\" href=\"#current-implementation-1\">§</a>Current implementation</h5>\n<p>This uses the same sorting algorithm as <a href=\"../primitive.slice.html#method.sort_unstable_by\" title=\"method slice::sort_unstable_by\"><code>sort_unstable_by</code></a>.</p>\n<h5 id=\"examples-52\"><a class=\"doc-anchor\" href=\"#examples-52\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(sort_floats)]\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = [<span class=\"number\">2.6</span>, -<span class=\"number\">5e-8</span>, f32::NAN, <span class=\"number\">8.29</span>, f32::INFINITY, -<span class=\"number\">1.0</span>, <span class=\"number\">0.0</span>, -f32::INFINITY, -<span class=\"number\">0.0</span>];\n\nv.sort_floats();\n<span class=\"kw\">let </span>sorted = [-f32::INFINITY, -<span class=\"number\">1.0</span>, -<span class=\"number\">5e-8</span>, -<span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>, <span class=\"number\">2.6</span>, <span class=\"number\">8.29</span>, f32::INFINITY, f32::NAN];\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>v[..<span class=\"number\">8</span>], <span class=\"kw-2\">&amp;</span>sorted[..<span class=\"number\">8</span>]);\n<span class=\"macro\">assert!</span>(v[<span class=\"number\">8</span>].is_nan());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(sort_floats)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+%5B2.6,+-5e-8,+f32::NAN,+8.29,+f32::INFINITY,+-1.0,+0.0,+-f32::INFINITY,+-0.0%5D;%0A++++%0A++++v.sort_floats();%0A++++let+sorted+=+%5B-f32::INFINITY,+-1.0,+-5e-8,+-0.0,+0.0,+2.6,+8.29,+f32::INFINITY,+f32::NAN%5D;%0A++++assert_eq!(%26v%5B..8%5D,+%26sorted%5B..8%5D);%0A++++assert!(v%5B8%5D.is_nan());%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_flattened\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0\">1.80.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#4549\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.as_flattened\" class=\"fn\">as_flattened</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Takes a <code>&amp;[[T; N]]</code>, and flattens it to a <code>&amp;[T]</code>.</p>\n<h5 id=\"panics-14\"><a class=\"doc-anchor\" href=\"#panics-14\">§</a>Panics</h5>\n<p>This panics if the length of the resulting slice would overflow a <code>usize</code>.</p>\n<p>This is only possible when flattening a slice of arrays of zero-sized\ntypes, and thus tends to be irrelevant in practice. If\n<code>size_of::&lt;T&gt;() &gt; 0</code>, this will never panic.</p>\n<h5 id=\"examples-53\"><a class=\"doc-anchor\" href=\"#examples-53\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>([[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]].as_flattened(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n\n<span class=\"macro\">assert_eq!</span>(\n    [[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]].as_flattened(),\n    [[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>], [<span class=\"number\">5</span>, <span class=\"number\">6</span>]].as_flattened(),\n);\n\n<span class=\"kw\">let </span>slice_of_empty_arrays: <span class=\"kw-2\">&amp;</span>[[i32; <span class=\"number\">0</span>]] = <span class=\"kw-2\">&amp;</span>[[], [], [], [], []];\n<span class=\"macro\">assert!</span>(slice_of_empty_arrays.as_flattened().is_empty());\n\n<span class=\"kw\">let </span>empty_slice_of_arrays: <span class=\"kw-2\">&amp;</span>[[u32; <span class=\"number\">10</span>]] = <span class=\"kw-2\">&amp;</span>[];\n<span class=\"macro\">assert!</span>(empty_slice_of_arrays.as_flattened().is_empty());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%5B%5B1,+2,+3%5D,+%5B4,+5,+6%5D%5D.as_flattened(),+%26%5B1,+2,+3,+4,+5,+6%5D);%0A++++%0A++++assert_eq!(%0A++++++++%5B%5B1,+2,+3%5D,+%5B4,+5,+6%5D%5D.as_flattened(),%0A++++++++%5B%5B1,+2%5D,+%5B3,+4%5D,+%5B5,+6%5D%5D.as_flattened(),%0A++++);%0A++++%0A++++let+slice_of_empty_arrays:+%26%5B%5Bi32;+0%5D%5D+=+%26%5B%5B%5D,+%5B%5D,+%5B%5D,+%5B%5D,+%5B%5D%5D;%0A++++assert!(slice_of_empty_arrays.as_flattened().is_empty());%0A++++%0A++++let+empty_slice_of_arrays:+%26%5B%5Bu32;+10%5D%5D+=+%26%5B%5D;%0A++++assert!(empty_slice_of_arrays.as_flattened().is_empty());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_flattened_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0\">1.80.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#4585\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.as_flattened_mut\" class=\"fn\">as_flattened_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Takes a <code>&amp;mut [[T; N]]</code>, and flattens it to a <code>&amp;mut [T]</code>.</p>\n<h5 id=\"panics-15\"><a class=\"doc-anchor\" href=\"#panics-15\">§</a>Panics</h5>\n<p>This panics if the length of the resulting slice would overflow a <code>usize</code>.</p>\n<p>This is only possible when flattening a slice of arrays of zero-sized\ntypes, and thus tends to be irrelevant in practice. If\n<code>size_of::&lt;T&gt;() &gt; 0</code>, this will never panic.</p>\n<h5 id=\"examples-54\"><a class=\"doc-anchor\" href=\"#examples-54\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>add_5_to_all(slice: <span class=\"kw-2\">&amp;mut </span>[i32]) {\n    <span class=\"kw\">for </span>i <span class=\"kw\">in </span>slice {\n        <span class=\"kw-2\">*</span>i += <span class=\"number\">5</span>;\n    }\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>array = [[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>], [<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]];\nadd_5_to_all(array.as_flattened_mut());\n<span class=\"macro\">assert_eq!</span>(array, [[<span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>], [<span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">11</span>], [<span class=\"number\">12</span>, <span class=\"number\">13</span>, <span class=\"number\">14</span>]]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++fn+add_5_to_all(slice:+%26mut+%5Bi32%5D)+%7B%0A++++++++for+i+in+slice+%7B%0A++++++++++++*i+%2B=+5;%0A++++++++%7D%0A++++%7D%0A++++%0A++++let+mut+array+=+%5B%5B1,+2,+3%5D,+%5B4,+5,+6%5D,+%5B7,+8,+9%5D%5D;%0A++++add_5_to_all(array.as_flattened_mut());%0A++++assert_eq!(array,+%5B%5B6,+7,+8%5D,+%5B9,+10,+11%5D,+%5B12,+13,+14%5D%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.len-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#138\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.len-1\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of elements in the slice.</p>\n<h5 id=\"examples-55\"><a class=\"doc-anchor\" href=\"#examples-55\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"macro\">assert_eq!</span>(a.len(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+a+=+%5B1,+2,+3%5D;%0A++++assert_eq!(a.len(),+3);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_empty-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#157\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.is_empty-1\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the slice has a length of 0.</p>\n<h5 id=\"examples-56\"><a class=\"doc-anchor\" href=\"#examples-56\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"macro\">assert!</span>(!a.is_empty());\n\n<span class=\"kw\">let </span>b: <span class=\"kw-2\">&amp;</span>[i32] = <span class=\"kw-2\">&amp;</span>[];\n<span class=\"macro\">assert!</span>(b.is_empty());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+a+=+%5B1,+2,+3%5D;%0A++++assert!(!a.is_empty());%0A++++%0A++++let+b:+%26%5Bi32%5D+=+%26%5B%5D;%0A++++assert!(b.is_empty());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.first\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#176\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.first\" class=\"fn\">first</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the first element of the slice, or <code>None</code> if it is empty.</p>\n<h5 id=\"examples-57\"><a class=\"doc-anchor\" href=\"#examples-57\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = [<span class=\"number\">10</span>, <span class=\"number\">40</span>, <span class=\"number\">30</span>];\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">10</span>), v.first());\n\n<span class=\"kw\">let </span>w: <span class=\"kw-2\">&amp;</span>[i32] = <span class=\"kw-2\">&amp;</span>[];\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, w.first());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v+=+%5B10,+40,+30%5D;%0A++++assert_eq!(Some(%2610),+v.first());%0A++++%0A++++let+w:+%26%5Bi32%5D+=+%26%5B%5D;%0A++++assert_eq!(None,+w.first());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.first_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#199\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.first_mut\" class=\"fn\">first_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a mutable pointer to the first element of the slice, or <code>None</code> if it is empty.</p>\n<h5 id=\"examples-58\"><a class=\"doc-anchor\" href=\"#examples-58\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];\n\n<span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(first) = x.first_mut() {\n    <span class=\"kw-2\">*</span>first = <span class=\"number\">5</span>;\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]);\n\n<span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>[i32] = <span class=\"kw-2\">&amp;mut </span>[];\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, y.first_mut());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+%26mut+%5B0,+1,+2%5D;%0A++++%0A++++if+let+Some(first)+=+x.first_mut()+%7B%0A++++++++*first+=+5;%0A++++%7D%0A++++assert_eq!(x,+%26%5B5,+1,+2%5D);%0A++++%0A++++let+y:+%26mut+%5Bi32%5D+=+%26mut+%5B%5D;%0A++++assert_eq!(None,+y.first_mut());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.split_first\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#219\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.split_first\" class=\"fn\">split_first</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>, &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>)&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the first and all the rest of the elements of the slice, or <code>None</code> if it is empty.</p>\n<h5 id=\"examples-59\"><a class=\"doc-anchor\" href=\"#examples-59\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];\n\n<span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>((first, elements)) = x.split_first() {\n    <span class=\"macro\">assert_eq!</span>(first, <span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>);\n    <span class=\"macro\">assert_eq!</span>(elements, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>]);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+%26%5B0,+1,+2%5D;%0A++++%0A++++if+let+Some((first,+elements))+=+x.split_first()+%7B%0A++++++++assert_eq!(first,+%260);%0A++++++++assert_eq!(elements,+%26%5B1,+2%5D);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.split_first_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#241\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.split_first_mut\" class=\"fn\">split_first_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>, &amp;mut <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>)&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the first and all the rest of the elements of the slice, or <code>None</code> if it is empty.</p>\n<h5 id=\"examples-60\"><a class=\"doc-anchor\" href=\"#examples-60\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];\n\n<span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>((first, elements)) = x.split_first_mut() {\n    <span class=\"kw-2\">*</span>first = <span class=\"number\">3</span>;\n    elements[<span class=\"number\">0</span>] = <span class=\"number\">4</span>;\n    elements[<span class=\"number\">1</span>] = <span class=\"number\">5</span>;\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+%26mut+%5B0,+1,+2%5D;%0A++++%0A++++if+let+Some((first,+elements))+=+x.split_first_mut()+%7B%0A++++++++*first+=+3;%0A++++++++elements%5B0%5D+=+4;%0A++++++++elements%5B1%5D+=+5;%0A++++%7D%0A++++assert_eq!(x,+%26%5B3,+4,+5%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.split_last\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#261\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.split_last\" class=\"fn\">split_last</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>, &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>)&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the last and all the rest of the elements of the slice, or <code>None</code> if it is empty.</p>\n<h5 id=\"examples-61\"><a class=\"doc-anchor\" href=\"#examples-61\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];\n\n<span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>((last, elements)) = x.split_last() {\n    <span class=\"macro\">assert_eq!</span>(last, <span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>);\n    <span class=\"macro\">assert_eq!</span>(elements, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>]);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+%26%5B0,+1,+2%5D;%0A++++%0A++++if+let+Some((last,+elements))+=+x.split_last()+%7B%0A++++++++assert_eq!(last,+%262);%0A++++++++assert_eq!(elements,+%26%5B0,+1%5D);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.split_last_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#283\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.split_last_mut\" class=\"fn\">split_last_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>, &amp;mut <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>)&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the last and all the rest of the elements of the slice, or <code>None</code> if it is empty.</p>\n<h5 id=\"examples-62\"><a class=\"doc-anchor\" href=\"#examples-62\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];\n\n<span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>((last, elements)) = x.split_last_mut() {\n    <span class=\"kw-2\">*</span>last = <span class=\"number\">3</span>;\n    elements[<span class=\"number\">0</span>] = <span class=\"number\">4</span>;\n    elements[<span class=\"number\">1</span>] = <span class=\"number\">5</span>;\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+%26mut+%5B0,+1,+2%5D;%0A++++%0A++++if+let+Some((last,+elements))+=+x.split_last_mut()+%7B%0A++++++++*last+=+3;%0A++++++++elements%5B0%5D+=+4;%0A++++++++elements%5B1%5D+=+5;%0A++++%7D%0A++++assert_eq!(x,+%26%5B4,+5,+3%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.last\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#302\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.last\" class=\"fn\">last</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the last element of the slice, or <code>None</code> if it is empty.</p>\n<h5 id=\"examples-63\"><a class=\"doc-anchor\" href=\"#examples-63\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = [<span class=\"number\">10</span>, <span class=\"number\">40</span>, <span class=\"number\">30</span>];\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">30</span>), v.last());\n\n<span class=\"kw\">let </span>w: <span class=\"kw-2\">&amp;</span>[i32] = <span class=\"kw-2\">&amp;</span>[];\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, w.last());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v+=+%5B10,+40,+30%5D;%0A++++assert_eq!(Some(%2630),+v.last());%0A++++%0A++++let+w:+%26%5Bi32%5D+=+%26%5B%5D;%0A++++assert_eq!(None,+w.last());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.last_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#325\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.last_mut\" class=\"fn\">last_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a mutable reference to the last item in the slice, or <code>None</code> if it is empty.</p>\n<h5 id=\"examples-64\"><a class=\"doc-anchor\" href=\"#examples-64\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];\n\n<span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(last) = x.last_mut() {\n    <span class=\"kw-2\">*</span>last = <span class=\"number\">10</span>;\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>]);\n\n<span class=\"kw\">let </span>y: <span class=\"kw-2\">&amp;mut </span>[i32] = <span class=\"kw-2\">&amp;mut </span>[];\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, y.last_mut());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+%26mut+%5B0,+1,+2%5D;%0A++++%0A++++if+let+Some(last)+=+x.last_mut()+%7B%0A++++++++*last+=+10;%0A++++%7D%0A++++assert_eq!(x,+%26%5B0,+1,+10%5D);%0A++++%0A++++let+y:+%26mut+%5Bi32%5D+=+%26mut+%5B%5D;%0A++++assert_eq!(None,+y.last_mut());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.first_chunk\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.77.0\">1.77.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#348\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.first_chunk\" class=\"fn\">first_chunk</a>&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;(&amp;self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.array.html\">[T; N]</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Return an array reference to the first <code>N</code> items in the slice.</p>\n<p>If the slice is not at least <code>N</code> in length, this will return <code>None</code>.</p>\n<h5 id=\"examples-65\"><a class=\"doc-anchor\" href=\"#examples-65\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>u = [<span class=\"number\">10</span>, <span class=\"number\">40</span>, <span class=\"number\">30</span>];\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">10</span>, <span class=\"number\">40</span>]), u.first_chunk::&lt;<span class=\"number\">2</span>&gt;());\n\n<span class=\"kw\">let </span>v: <span class=\"kw-2\">&amp;</span>[i32] = <span class=\"kw-2\">&amp;</span>[<span class=\"number\">10</span>];\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, v.first_chunk::&lt;<span class=\"number\">2</span>&gt;());\n\n<span class=\"kw\">let </span>w: <span class=\"kw-2\">&amp;</span>[i32] = <span class=\"kw-2\">&amp;</span>[];\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span>[]), w.first_chunk::&lt;<span class=\"number\">0</span>&gt;());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+u+=+%5B10,+40,+30%5D;%0A++++assert_eq!(Some(%26%5B10,+40%5D),+u.first_chunk::%3C2%3E());%0A++++%0A++++let+v:+%26%5Bi32%5D+=+%26%5B10%5D;%0A++++assert_eq!(None,+v.first_chunk::%3C2%3E());%0A++++%0A++++let+w:+%26%5Bi32%5D+=+%26%5B%5D;%0A++++assert_eq!(Some(%26%5B%5D),+w.first_chunk::%3C0%3E());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.first_chunk_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.77.0\">1.77.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#378\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.first_chunk_mut\" class=\"fn\">first_chunk_mut</a>&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;(&amp;mut self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;mut <a class=\"primitive\" href=\"../primitive.array.html\">[T; N]</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Return a mutable array reference to the first <code>N</code> items in the slice.</p>\n<p>If the slice is not at least <code>N</code> in length, this will return <code>None</code>.</p>\n<h5 id=\"examples-66\"><a class=\"doc-anchor\" href=\"#examples-66\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];\n\n<span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(first) = x.first_chunk_mut::&lt;<span class=\"number\">2</span>&gt;() {\n    first[<span class=\"number\">0</span>] = <span class=\"number\">5</span>;\n    first[<span class=\"number\">1</span>] = <span class=\"number\">4</span>;\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>]);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, x.first_chunk_mut::&lt;<span class=\"number\">4</span>&gt;());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+%26mut+%5B0,+1,+2%5D;%0A++++%0A++++if+let+Some(first)+=+x.first_chunk_mut::%3C2%3E()+%7B%0A++++++++first%5B0%5D+=+5;%0A++++++++first%5B1%5D+=+4;%0A++++%7D%0A++++assert_eq!(x,+%26%5B5,+4,+2%5D);%0A++++%0A++++assert_eq!(None,+x.first_chunk_mut::%3C4%3E());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.split_first_chunk\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.77.0\">1.77.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#408\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.split_first_chunk\" class=\"fn\">split_first_chunk</a>&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;(&amp;self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;(&amp;<a class=\"primitive\" href=\"../primitive.array.html\">[T; N]</a>, &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>)&gt;</h4></section></summary><div class=\"docblock\"><p>Return an array reference to the first <code>N</code> items in the slice and the remaining slice.</p>\n<p>If the slice is not at least <code>N</code> in length, this will return <code>None</code>.</p>\n<h5 id=\"examples-67\"><a class=\"doc-anchor\" href=\"#examples-67\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];\n\n<span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>((first, elements)) = x.split_first_chunk::&lt;<span class=\"number\">2</span>&gt;() {\n    <span class=\"macro\">assert_eq!</span>(first, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>]);\n    <span class=\"macro\">assert_eq!</span>(elements, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>]);\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, x.split_first_chunk::&lt;<span class=\"number\">4</span>&gt;());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+%26%5B0,+1,+2%5D;%0A++++%0A++++if+let+Some((first,+elements))+=+x.split_first_chunk::%3C2%3E()+%7B%0A++++++++assert_eq!(first,+%26%5B0,+1%5D);%0A++++++++assert_eq!(elements,+%26%5B2%5D);%0A++++%7D%0A++++%0A++++assert_eq!(None,+x.split_first_chunk::%3C4%3E());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.split_first_chunk_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.77.0\">1.77.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#443-445\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.split_first_chunk_mut\" class=\"fn\">split_first_chunk_mut</a>&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;(\n    &amp;mut self,\n) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;(&amp;mut <a class=\"primitive\" href=\"../primitive.array.html\">[T; N]</a>, &amp;mut <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>)&gt;</h4></section></summary><div class=\"docblock\"><p>Return a mutable array reference to the first <code>N</code> items in the slice and the remaining\nslice.</p>\n<p>If the slice is not at least <code>N</code> in length, this will return <code>None</code>.</p>\n<h5 id=\"examples-68\"><a class=\"doc-anchor\" href=\"#examples-68\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];\n\n<span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>((first, elements)) = x.split_first_chunk_mut::&lt;<span class=\"number\">2</span>&gt;() {\n    first[<span class=\"number\">0</span>] = <span class=\"number\">3</span>;\n    first[<span class=\"number\">1</span>] = <span class=\"number\">4</span>;\n    elements[<span class=\"number\">0</span>] = <span class=\"number\">5</span>;\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, x.split_first_chunk_mut::&lt;<span class=\"number\">4</span>&gt;());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+%26mut+%5B0,+1,+2%5D;%0A++++%0A++++if+let+Some((first,+elements))+=+x.split_first_chunk_mut::%3C2%3E()+%7B%0A++++++++first%5B0%5D+=+3;%0A++++++++first%5B1%5D+=+4;%0A++++++++elements%5B0%5D+=+5;%0A++++%7D%0A++++assert_eq!(x,+%26%5B3,+4,+5%5D);%0A++++%0A++++assert_eq!(None,+x.split_first_chunk_mut::%3C4%3E());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.split_last_chunk\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.77.0\">1.77.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#478\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.split_last_chunk\" class=\"fn\">split_last_chunk</a>&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;(&amp;self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;(&amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>, &amp;<a class=\"primitive\" href=\"../primitive.array.html\">[T; N]</a>)&gt;</h4></section></summary><div class=\"docblock\"><p>Return an array reference to the last <code>N</code> items in the slice and the remaining slice.</p>\n<p>If the slice is not at least <code>N</code> in length, this will return <code>None</code>.</p>\n<h5 id=\"examples-69\"><a class=\"doc-anchor\" href=\"#examples-69\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];\n\n<span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>((elements, last)) = x.split_last_chunk::&lt;<span class=\"number\">2</span>&gt;() {\n    <span class=\"macro\">assert_eq!</span>(elements, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>]);\n    <span class=\"macro\">assert_eq!</span>(last, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>]);\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, x.split_last_chunk::&lt;<span class=\"number\">4</span>&gt;());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+%26%5B0,+1,+2%5D;%0A++++%0A++++if+let+Some((elements,+last))+=+x.split_last_chunk::%3C2%3E()+%7B%0A++++++++assert_eq!(elements,+%26%5B0%5D);%0A++++++++assert_eq!(last,+%26%5B1,+2%5D);%0A++++%7D%0A++++%0A++++assert_eq!(None,+x.split_last_chunk::%3C4%3E());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.split_last_chunk_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.77.0\">1.77.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#513-515\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.split_last_chunk_mut\" class=\"fn\">split_last_chunk_mut</a>&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;(\n    &amp;mut self,\n) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;(&amp;mut <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>, &amp;mut <a class=\"primitive\" href=\"../primitive.array.html\">[T; N]</a>)&gt;</h4></section></summary><div class=\"docblock\"><p>Return a mutable array reference to the last <code>N</code> items in the slice and the remaining\nslice.</p>\n<p>If the slice is not at least <code>N</code> in length, this will return <code>None</code>.</p>\n<h5 id=\"examples-70\"><a class=\"doc-anchor\" href=\"#examples-70\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];\n\n<span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>((elements, last)) = x.split_last_chunk_mut::&lt;<span class=\"number\">2</span>&gt;() {\n    last[<span class=\"number\">0</span>] = <span class=\"number\">3</span>;\n    last[<span class=\"number\">1</span>] = <span class=\"number\">4</span>;\n    elements[<span class=\"number\">0</span>] = <span class=\"number\">5</span>;\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, x.split_last_chunk_mut::&lt;<span class=\"number\">4</span>&gt;());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+%26mut+%5B0,+1,+2%5D;%0A++++%0A++++if+let+Some((elements,+last))+=+x.split_last_chunk_mut::%3C2%3E()+%7B%0A++++++++last%5B0%5D+=+3;%0A++++++++last%5B1%5D+=+4;%0A++++++++elements%5B0%5D+=+5;%0A++++%7D%0A++++assert_eq!(x,+%26%5B5,+3,+4%5D);%0A++++%0A++++assert_eq!(None,+x.split_last_chunk_mut::%3C4%3E());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.last_chunk\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.77.0\">1.77.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#548\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.last_chunk\" class=\"fn\">last_chunk</a>&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;(&amp;self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.array.html\">[T; N]</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Return an array reference to the last <code>N</code> items in the slice.</p>\n<p>If the slice is not at least <code>N</code> in length, this will return <code>None</code>.</p>\n<h5 id=\"examples-71\"><a class=\"doc-anchor\" href=\"#examples-71\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>u = [<span class=\"number\">10</span>, <span class=\"number\">40</span>, <span class=\"number\">30</span>];\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">40</span>, <span class=\"number\">30</span>]), u.last_chunk::&lt;<span class=\"number\">2</span>&gt;());\n\n<span class=\"kw\">let </span>v: <span class=\"kw-2\">&amp;</span>[i32] = <span class=\"kw-2\">&amp;</span>[<span class=\"number\">10</span>];\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, v.last_chunk::&lt;<span class=\"number\">2</span>&gt;());\n\n<span class=\"kw\">let </span>w: <span class=\"kw-2\">&amp;</span>[i32] = <span class=\"kw-2\">&amp;</span>[];\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span>[]), w.last_chunk::&lt;<span class=\"number\">0</span>&gt;());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+u+=+%5B10,+40,+30%5D;%0A++++assert_eq!(Some(%26%5B40,+30%5D),+u.last_chunk::%3C2%3E());%0A++++%0A++++let+v:+%26%5Bi32%5D+=+%26%5B10%5D;%0A++++assert_eq!(None,+v.last_chunk::%3C2%3E());%0A++++%0A++++let+w:+%26%5Bi32%5D+=+%26%5B%5D;%0A++++assert_eq!(Some(%26%5B%5D),+w.last_chunk::%3C0%3E());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.last_chunk_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.77.0\">1.77.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#582\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.last_chunk_mut\" class=\"fn\">last_chunk_mut</a>&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;(&amp;mut self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;mut <a class=\"primitive\" href=\"../primitive.array.html\">[T; N]</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Return a mutable array reference to the last <code>N</code> items in the slice.</p>\n<p>If the slice is not at least <code>N</code> in length, this will return <code>None</code>.</p>\n<h5 id=\"examples-72\"><a class=\"doc-anchor\" href=\"#examples-72\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];\n\n<span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(last) = x.last_chunk_mut::&lt;<span class=\"number\">2</span>&gt;() {\n    last[<span class=\"number\">0</span>] = <span class=\"number\">10</span>;\n    last[<span class=\"number\">1</span>] = <span class=\"number\">20</span>;\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">10</span>, <span class=\"number\">20</span>]);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, x.last_chunk_mut::&lt;<span class=\"number\">4</span>&gt;());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+%26mut+%5B0,+1,+2%5D;%0A++++%0A++++if+let+Some(last)+=+x.last_chunk_mut::%3C2%3E()+%7B%0A++++++++last%5B0%5D+=+10;%0A++++++++last%5B1%5D+=+20;%0A++++%7D%0A++++assert_eq!(x,+%26%5B0,+10,+20%5D);%0A++++%0A++++assert_eq!(None,+x.last_chunk_mut::%3C4%3E());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#617-619\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.get\" class=\"fn\">get</a>&lt;I&gt;(&amp;self, index: I) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;&lt;I as <a class=\"trait\" href=\"../slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns a reference to an element or subslice depending on the type of\nindex.</p>\n<ul>\n<li>If given a position, returns a reference to the element at that\nposition or <code>None</code> if out of bounds.</li>\n<li>If given a range, returns the subslice corresponding to that range,\nor <code>None</code> if out of bounds.</li>\n</ul>\n<h5 id=\"examples-73\"><a class=\"doc-anchor\" href=\"#examples-73\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = [<span class=\"number\">10</span>, <span class=\"number\">40</span>, <span class=\"number\">30</span>];\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">40</span>), v.get(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">10</span>, <span class=\"number\">40</span>][..]), v.get(<span class=\"number\">0</span>..<span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, v.get(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, v.get(<span class=\"number\">0</span>..<span class=\"number\">4</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v+=+%5B10,+40,+30%5D;%0A++++assert_eq!(Some(%2640),+v.get(1));%0A++++assert_eq!(Some(%26%5B10,+40%5D%5B..%5D),+v.get(0..2));%0A++++assert_eq!(None,+v.get(3));%0A++++assert_eq!(None,+v.get(0..4));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#642-644\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.get_mut\" class=\"fn\">get_mut</a>&lt;I&gt;(\n    &amp;mut self,\n    index: I,\n) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;mut &lt;I as <a class=\"trait\" href=\"../slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns a mutable reference to an element or subslice depending on the\ntype of index (see <a href=\"../primitive.slice.html#method.get\" title=\"method slice::get\"><code>get</code></a>) or <code>None</code> if the index is out of bounds.</p>\n<h5 id=\"examples-74\"><a class=\"doc-anchor\" href=\"#examples-74\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];\n\n<span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(elem) = x.get_mut(<span class=\"number\">1</span>) {\n    <span class=\"kw-2\">*</span>elem = <span class=\"number\">42</span>;\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">42</span>, <span class=\"number\">2</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+%26mut+%5B0,+1,+2%5D;%0A++++%0A++++if+let+Some(elem)+=+x.get_mut(1)+%7B%0A++++++++*elem+=+42;%0A++++%7D%0A++++assert_eq!(x,+%26%5B0,+42,+2%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_unchecked\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#679-681\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.get_unchecked\" class=\"fn\">get_unchecked</a>&lt;I&gt;(\n    &amp;self,\n    index: I,\n) -&gt; &amp;&lt;I as <a class=\"trait\" href=\"../slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"../slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns a reference to an element or subslice, without doing bounds\nchecking.</p>\n<p>For a safe alternative see <a href=\"../primitive.slice.html#method.get\" title=\"method slice::get\"><code>get</code></a>.</p>\n<h5 id=\"safety-3\"><a class=\"doc-anchor\" href=\"#safety-3\">§</a>Safety</h5>\n<p>Calling this method with an out-of-bounds index is <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em>\neven if the resulting reference is not used.</p>\n<p>You can think of this like <code>.get(index).unwrap_unchecked()</code>.  It’s UB\nto call <code>.get_unchecked(len)</code>, even if you immediately convert to a\npointer.  And it’s UB to call <code>.get_unchecked(..len + 1)</code>,\n<code>.get_unchecked(..=len)</code>, or similar.</p>\n<h5 id=\"examples-75\"><a class=\"doc-anchor\" href=\"#examples-75\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>];\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">assert_eq!</span>(x.get_unchecked(<span class=\"number\">1</span>), <span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+%26%5B1,+2,+4%5D;%0A++++%0A++++unsafe+%7B%0A++++++++assert_eq!(x.get_unchecked(1),+%262);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_unchecked_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#721-723\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.get_unchecked_mut\" class=\"fn\">get_unchecked_mut</a>&lt;I&gt;(\n    &amp;mut self,\n    index: I,\n) -&gt; &amp;mut &lt;I as <a class=\"trait\" href=\"../slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"../slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Returns a mutable reference to an element or subslice, without doing\nbounds checking.</p>\n<p>For a safe alternative see <a href=\"../primitive.slice.html#method.get_mut\" title=\"method slice::get_mut\"><code>get_mut</code></a>.</p>\n<h5 id=\"safety-4\"><a class=\"doc-anchor\" href=\"#safety-4\">§</a>Safety</h5>\n<p>Calling this method with an out-of-bounds index is <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em>\neven if the resulting reference is not used.</p>\n<p>You can think of this like <code>.get_mut(index).unwrap_unchecked()</code>.  It’s\nUB to call <code>.get_unchecked_mut(len)</code>, even if you immediately convert\nto a pointer.  And it’s UB to call <code>.get_unchecked_mut(..len + 1)</code>,\n<code>.get_unchecked_mut(..=len)</code>, or similar.</p>\n<h5 id=\"examples-76\"><a class=\"doc-anchor\" href=\"#examples-76\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>];\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span>elem = x.get_unchecked_mut(<span class=\"number\">1</span>);\n    <span class=\"kw-2\">*</span>elem = <span class=\"number\">13</span>;\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">13</span>, <span class=\"number\">4</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+%26mut+%5B1,+2,+4%5D;%0A++++%0A++++unsafe+%7B%0A++++++++let+elem+=+x.get_unchecked_mut(1);%0A++++++++*elem+=+13;%0A++++%7D%0A++++assert_eq!(x,+%26%5B1,+13,+4%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_ptr-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#762\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.as_ptr-1\" class=\"fn\">as_ptr</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Returns a raw pointer to the slice’s buffer.</p>\n<p>The caller must ensure that the slice outlives the pointer this\nfunction returns, or else it will end up pointing to garbage.</p>\n<p>The caller must also ensure that the memory the pointer (non-transitively) points to\nis never written to (except inside an <code>UnsafeCell</code>) using this pointer or any pointer\nderived from it. If you need to mutate the contents of the slice, use <a href=\"../primitive.slice.html#method.as_mut_ptr\" title=\"method slice::as_mut_ptr\"><code>as_mut_ptr</code></a>.</p>\n<p>Modifying the container referenced by this slice may cause its buffer\nto be reallocated, which would also make any pointers to it invalid.</p>\n<h5 id=\"examples-77\"><a class=\"doc-anchor\" href=\"#examples-77\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>];\n<span class=\"kw\">let </span>x_ptr = x.as_ptr();\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..x.len() {\n        <span class=\"macro\">assert_eq!</span>(x.get_unchecked(i), <span class=\"kw-2\">&amp;*</span>x_ptr.add(i));\n    }\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+%26%5B1,+2,+4%5D;%0A++++let+x_ptr+=+x.as_ptr();%0A++++%0A++++unsafe+%7B%0A++++++++for+i+in+0..x.len()+%7B%0A++++++++++++assert_eq!(x.get_unchecked(i),+%26*x_ptr.add(i));%0A++++++++%7D%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_mut_ptr-1\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#793\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.as_mut_ptr-1\" class=\"fn\">as_mut_ptr</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a></h4></section></summary><div class=\"docblock\"><p>Returns an unsafe mutable pointer to the slice’s buffer.</p>\n<p>The caller must ensure that the slice outlives the pointer this\nfunction returns, or else it will end up pointing to garbage.</p>\n<p>Modifying the container referenced by this slice may cause its buffer\nto be reallocated, which would also make any pointers to it invalid.</p>\n<h5 id=\"examples-78\"><a class=\"doc-anchor\" href=\"#examples-78\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>];\n<span class=\"kw\">let </span>x_ptr = x.as_mut_ptr();\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..x.len() {\n        <span class=\"kw-2\">*</span>x_ptr.add(i) += <span class=\"number\">2</span>;\n    }\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+%26mut+%5B1,+2,+4%5D;%0A++++let+x_ptr+=+x.as_mut_ptr();%0A++++%0A++++unsafe+%7B%0A++++++++for+i+in+0..x.len()+%7B%0A++++++++++++*x_ptr.add(i)+%2B=+2;%0A++++++++%7D%0A++++%7D%0A++++assert_eq!(x,+%26%5B3,+4,+6%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_ptr_range\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.48.0\">1.48.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#829\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.as_ptr_range\" class=\"fn\">as_ptr_range</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../ops/struct.Range.html\" title=\"struct std::ops::Range\">Range</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Range<*const T>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns the two raw pointers spanning the slice.</p>\n<p>The returned range is half-open, which means that the end pointer\npoints <em>one past</em> the last element of the slice. This way, an empty\nslice is represented by two equal pointers, and the difference between\nthe two pointers represents the size of the slice.</p>\n<p>See <a href=\"../primitive.slice.html#method.as_ptr\" title=\"method slice::as_ptr\"><code>as_ptr</code></a> for warnings on using these pointers. The end pointer\nrequires extra caution, as it does not point to a valid element in the\nslice.</p>\n<p>This function is useful for interacting with foreign interfaces which\nuse two pointers to refer to a range of elements in memory, as is\ncommon in C++.</p>\n<p>It can also be useful to check if a pointer to an element refers to an\nelement of this slice:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span>x = <span class=\"kw-2\">&amp;</span>a[<span class=\"number\">1</span>] <span class=\"kw\">as </span><span class=\"kw-2\">*const </span><span class=\"kw\">_</span>;\n<span class=\"kw\">let </span>y = <span class=\"kw-2\">&amp;</span><span class=\"number\">5 </span><span class=\"kw\">as </span><span class=\"kw-2\">*const </span><span class=\"kw\">_</span>;\n\n<span class=\"macro\">assert!</span>(a.as_ptr_range().contains(<span class=\"kw-2\">&amp;</span>x));\n<span class=\"macro\">assert!</span>(!a.as_ptr_range().contains(<span class=\"kw-2\">&amp;</span>y));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+a+=+%5B1,+2,+3%5D;%0A++++let+x+=+%26a%5B1%5D+as+*const+_;%0A++++let+y+=+%265+as+*const+_;%0A++++%0A++++assert!(a.as_ptr_range().contains(%26x));%0A++++assert!(!a.as_ptr_range().contains(%26y));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_mut_ptr_range\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.48.0\">1.48.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#873\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.as_mut_ptr_range\" class=\"fn\">as_mut_ptr_range</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"../ops/struct.Range.html\" title=\"struct std::ops::Range\">Range</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Range<*mut T>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns the two unsafe mutable pointers spanning the slice.</p>\n<p>The returned range is half-open, which means that the end pointer\npoints <em>one past</em> the last element of the slice. This way, an empty\nslice is represented by two equal pointers, and the difference between\nthe two pointers represents the size of the slice.</p>\n<p>See <a href=\"../primitive.slice.html#method.as_mut_ptr\" title=\"method slice::as_mut_ptr\"><code>as_mut_ptr</code></a> for warnings on using these pointers. The end\npointer requires extra caution, as it does not point to a valid element\nin the slice.</p>\n<p>This function is useful for interacting with foreign interfaces which\nuse two pointers to refer to a range of elements in memory, as is\ncommon in C++.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.swap\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#904\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.swap\" class=\"fn\">swap</a>(&amp;mut self, a: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, b: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Swaps two elements in the slice.</p>\n<p>If <code>a</code> equals to <code>b</code>, it’s guaranteed that elements won’t change value.</p>\n<h5 id=\"arguments\"><a class=\"doc-anchor\" href=\"#arguments\">§</a>Arguments</h5>\n<ul>\n<li>a - The index of the first element</li>\n<li>b - The index of the second element</li>\n</ul>\n<h5 id=\"panics-16\"><a class=\"doc-anchor\" href=\"#panics-16\">§</a>Panics</h5>\n<p>Panics if <code>a</code> or <code>b</code> are out of bounds.</p>\n<h5 id=\"examples-79\"><a class=\"doc-anchor\" href=\"#examples-79\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = [<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>, <span class=\"string\">\"d\"</span>, <span class=\"string\">\"e\"</span>];\nv.swap(<span class=\"number\">2</span>, <span class=\"number\">4</span>);\n<span class=\"macro\">assert!</span>(v == [<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"e\"</span>, <span class=\"string\">\"d\"</span>, <span class=\"string\">\"c\"</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+%5B%22a%22,+%22b%22,+%22c%22,+%22d%22,+%22e%22%5D;%0A++++v.swap(2,+4);%0A++++assert!(v+==+%5B%22a%22,+%22b%22,+%22e%22,+%22d%22,+%22c%22%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.swap_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#947\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.swap_unchecked\" class=\"fn\">swap_unchecked</a>(&amp;mut self, a: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, b: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_swap_unchecked</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/88539\">#88539</a>)</span></div></span></summary><div class=\"docblock\"><p>Swaps two elements in the slice, without doing bounds checking.</p>\n<p>For a safe alternative see <a href=\"../primitive.slice.html#method.swap\" title=\"method slice::swap\"><code>swap</code></a>.</p>\n<h5 id=\"arguments-1\"><a class=\"doc-anchor\" href=\"#arguments-1\">§</a>Arguments</h5>\n<ul>\n<li>a - The index of the first element</li>\n<li>b - The index of the second element</li>\n</ul>\n<h5 id=\"safety-5\"><a class=\"doc-anchor\" href=\"#safety-5\">§</a>Safety</h5>\n<p>Calling this method with an out-of-bounds index is <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em>.\nThe caller has to ensure that <code>a &lt; self.len()</code> and <code>b &lt; self.len()</code>.</p>\n<h5 id=\"examples-80\"><a class=\"doc-anchor\" href=\"#examples-80\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(slice_swap_unchecked)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = [<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>, <span class=\"string\">\"d\"</span>];\n<span class=\"comment\">// SAFETY: we know that 1 and 3 are both indices of the slice\n</span><span class=\"kw\">unsafe </span>{ v.swap_unchecked(<span class=\"number\">1</span>, <span class=\"number\">3</span>) };\n<span class=\"macro\">assert!</span>(v == [<span class=\"string\">\"a\"</span>, <span class=\"string\">\"d\"</span>, <span class=\"string\">\"c\"</span>, <span class=\"string\">\"b\"</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(slice_swap_unchecked)%5D%0A%0Afn+main()+%7B%0A++++let+mut+v+=+%5B%22a%22,+%22b%22,+%22c%22,+%22d%22%5D;%0A++++//+SAFETY:+we+know+that+1+and+3+are+both+indices+of+the+slice%0A++++unsafe+%7B+v.swap_unchecked(1,+3)+%7D;%0A++++assert!(v+==+%5B%22a%22,+%22d%22,+%22c%22,+%22b%22%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.reverse\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#976\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.reverse\" class=\"fn\">reverse</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Reverses the order of elements in the slice, in place.</p>\n<h5 id=\"examples-81\"><a class=\"doc-anchor\" href=\"#examples-81\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\nv.reverse();\n<span class=\"macro\">assert!</span>(v == [<span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+%5B1,+2,+3%5D;%0A++++v.reverse();%0A++++assert!(v+==+%5B3,+2,+1%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.iter\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#1034\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.iter\" class=\"fn\">iter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../slice/struct.Iter.html\" title=\"struct std::slice::Iter\">Iter</a>&lt;'_, T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Iter<'_, T>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns an iterator over the slice.</p>\n<p>The iterator yields all items from start to end.</p>\n<h5 id=\"examples-82\"><a class=\"doc-anchor\" href=\"#examples-82\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iterator = x.iter();\n\n<span class=\"macro\">assert_eq!</span>(iterator.next(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(iterator.next(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(iterator.next(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">4</span>));\n<span class=\"macro\">assert_eq!</span>(iterator.next(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+%26%5B1,+2,+4%5D;%0A++++let+mut+iterator+=+x.iter();%0A++++%0A++++assert_eq!(iterator.next(),+Some(%261));%0A++++assert_eq!(iterator.next(),+Some(%262));%0A++++assert_eq!(iterator.next(),+Some(%264));%0A++++assert_eq!(iterator.next(),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.iter_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#1053\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.iter_mut\" class=\"fn\">iter_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"../slice/struct.IterMut.html\" title=\"struct std::slice::IterMut\">IterMut</a>&lt;'_, T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"IterMut<'_, T>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns an iterator that allows modifying each value.</p>\n<p>The iterator yields all items from start to end.</p>\n<h5 id=\"examples-83\"><a class=\"doc-anchor\" href=\"#examples-83\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>];\n<span class=\"kw\">for </span>elem <span class=\"kw\">in </span>x.iter_mut() {\n    <span class=\"kw-2\">*</span>elem += <span class=\"number\">2</span>;\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+%26mut+%5B1,+2,+4%5D;%0A++++for+elem+in+x.iter_mut()+%7B%0A++++++++*elem+%2B=+2;%0A++++%7D%0A++++assert_eq!(x,+%26%5B3,+4,+6%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.windows\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#1102\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.windows\" class=\"fn\">windows</a>(&amp;self, size: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"../slice/struct.Windows.html\" title=\"struct std::slice::Windows\">Windows</a>&lt;'_, T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Windows<'_, T>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns an iterator over all contiguous windows of length\n<code>size</code>. The windows overlap. If the slice is shorter than\n<code>size</code>, the iterator returns no values.</p>\n<h5 id=\"panics-17\"><a class=\"doc-anchor\" href=\"#panics-17\">§</a>Panics</h5>\n<p>Panics if <code>size</code> is 0.</p>\n<h5 id=\"examples-84\"><a class=\"doc-anchor\" href=\"#examples-84\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>slice = [<span class=\"string\">'l'</span>, <span class=\"string\">'o'</span>, <span class=\"string\">'r'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'m'</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = slice.windows(<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(iter.next().unwrap(), <span class=\"kw-2\">&amp;</span>[<span class=\"string\">'l'</span>, <span class=\"string\">'o'</span>, <span class=\"string\">'r'</span>]);\n<span class=\"macro\">assert_eq!</span>(iter.next().unwrap(), <span class=\"kw-2\">&amp;</span>[<span class=\"string\">'o'</span>, <span class=\"string\">'r'</span>, <span class=\"string\">'e'</span>]);\n<span class=\"macro\">assert_eq!</span>(iter.next().unwrap(), <span class=\"kw-2\">&amp;</span>[<span class=\"string\">'r'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'m'</span>]);\n<span class=\"macro\">assert!</span>(iter.next().is_none());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+slice+=+%5B'l',+'o',+'r',+'e',+'m'%5D;%0A++++let+mut+iter+=+slice.windows(3);%0A++++assert_eq!(iter.next().unwrap(),+%26%5B'l',+'o',+'r'%5D);%0A++++assert_eq!(iter.next().unwrap(),+%26%5B'o',+'r',+'e'%5D);%0A++++assert_eq!(iter.next().unwrap(),+%26%5B'r',+'e',+'m'%5D);%0A++++assert!(iter.next().is_none());%0A%7D&amp;edition=2021\">Run</a></div>\n<p>If the slice is shorter than <code>size</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>slice = [<span class=\"string\">'f'</span>, <span class=\"string\">'o'</span>, <span class=\"string\">'o'</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = slice.windows(<span class=\"number\">4</span>);\n<span class=\"macro\">assert!</span>(iter.next().is_none());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+slice+=+%5B'f',+'o',+'o'%5D;%0A++++let+mut+iter+=+slice.windows(4);%0A++++assert!(iter.next().is_none());%0A%7D&amp;edition=2021\">Run</a></div>\n<p>There’s no <code>windows_mut</code>, as that existing would let safe code violate the\n“only one <code>&amp;mut</code> at a time to the same thing” rule.  However, you can sometimes\nuse <a href=\"../cell/struct.Cell.html#method.as_slice_of_cells\" title=\"method std::cell::Cell::as_slice_of_cells\"><code>Cell::as_slice_of_cells</code></a> in\nconjunction with <code>windows</code> to accomplish something similar:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::Cell;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>array = [<span class=\"string\">'R'</span>, <span class=\"string\">'u'</span>, <span class=\"string\">'s'</span>, <span class=\"string\">'t'</span>, <span class=\"string\">' '</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'0'</span>, <span class=\"string\">'1'</span>, <span class=\"string\">'5'</span>];\n<span class=\"kw\">let </span>slice = <span class=\"kw-2\">&amp;mut </span>array[..];\n<span class=\"kw\">let </span>slice_of_cells: <span class=\"kw-2\">&amp;</span>[Cell&lt;char&gt;] = Cell::from_mut(slice).as_slice_of_cells();\n<span class=\"kw\">for </span>w <span class=\"kw\">in </span>slice_of_cells.windows(<span class=\"number\">3</span>) {\n    Cell::swap(<span class=\"kw-2\">&amp;</span>w[<span class=\"number\">0</span>], <span class=\"kw-2\">&amp;</span>w[<span class=\"number\">2</span>]);\n}\n<span class=\"macro\">assert_eq!</span>(array, [<span class=\"string\">'s'</span>, <span class=\"string\">'t'</span>, <span class=\"string\">' '</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'0'</span>, <span class=\"string\">'1'</span>, <span class=\"string\">'5'</span>, <span class=\"string\">'u'</span>, <span class=\"string\">'R'</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::Cell;%0A++++%0A++++let+mut+array+=+%5B'R',+'u',+'s',+'t',+'+',+'2',+'0',+'1',+'5'%5D;%0A++++let+slice+=+%26mut+array%5B..%5D;%0A++++let+slice_of_cells:+%26%5BCell%3Cchar%3E%5D+=+Cell::from_mut(slice).as_slice_of_cells();%0A++++for+w+in+slice_of_cells.windows(3)+%7B%0A++++++++Cell::swap(%26w%5B0%5D,+%26w%5B2%5D);%0A++++%7D%0A++++assert_eq!(array,+%5B's',+'t',+'+',+'2',+'0',+'1',+'5',+'u',+'R'%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.chunks\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#1137\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.chunks\" class=\"fn\">chunks</a>(&amp;self, chunk_size: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"../slice/struct.Chunks.html\" title=\"struct std::slice::Chunks\">Chunks</a>&lt;'_, T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Chunks<'_, T>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns an iterator over <code>chunk_size</code> elements of the slice at a time, starting at the\nbeginning of the slice.</p>\n<p>The chunks are slices and do not overlap. If <code>chunk_size</code> does not divide the length of the\nslice, then the last chunk will not have length <code>chunk_size</code>.</p>\n<p>See <a href=\"../primitive.slice.html#method.chunks_exact\" title=\"method slice::chunks_exact\"><code>chunks_exact</code></a> for a variant of this iterator that returns chunks of always exactly\n<code>chunk_size</code> elements, and <a href=\"../primitive.slice.html#method.rchunks\" title=\"method slice::rchunks\"><code>rchunks</code></a> for the same iterator but starting at the end of the\nslice.</p>\n<h5 id=\"panics-18\"><a class=\"doc-anchor\" href=\"#panics-18\">§</a>Panics</h5>\n<p>Panics if <code>chunk_size</code> is 0.</p>\n<h5 id=\"examples-85\"><a class=\"doc-anchor\" href=\"#examples-85\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>slice = [<span class=\"string\">'l'</span>, <span class=\"string\">'o'</span>, <span class=\"string\">'r'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'m'</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = slice.chunks(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(iter.next().unwrap(), <span class=\"kw-2\">&amp;</span>[<span class=\"string\">'l'</span>, <span class=\"string\">'o'</span>]);\n<span class=\"macro\">assert_eq!</span>(iter.next().unwrap(), <span class=\"kw-2\">&amp;</span>[<span class=\"string\">'r'</span>, <span class=\"string\">'e'</span>]);\n<span class=\"macro\">assert_eq!</span>(iter.next().unwrap(), <span class=\"kw-2\">&amp;</span>[<span class=\"string\">'m'</span>]);\n<span class=\"macro\">assert!</span>(iter.next().is_none());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+slice+=+%5B'l',+'o',+'r',+'e',+'m'%5D;%0A++++let+mut+iter+=+slice.chunks(2);%0A++++assert_eq!(iter.next().unwrap(),+%26%5B'l',+'o'%5D);%0A++++assert_eq!(iter.next().unwrap(),+%26%5B'r',+'e'%5D);%0A++++assert_eq!(iter.next().unwrap(),+%26%5B'm'%5D);%0A++++assert!(iter.next().is_none());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.chunks_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#1176\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.chunks_mut\" class=\"fn\">chunks_mut</a>(&amp;mut self, chunk_size: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"../slice/struct.ChunksMut.html\" title=\"struct std::slice::ChunksMut\">ChunksMut</a>&lt;'_, T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"ChunksMut<'_, T>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns an iterator over <code>chunk_size</code> elements of the slice at a time, starting at the\nbeginning of the slice.</p>\n<p>The chunks are mutable slices, and do not overlap. If <code>chunk_size</code> does not divide the\nlength of the slice, then the last chunk will not have length <code>chunk_size</code>.</p>\n<p>See <a href=\"../primitive.slice.html#method.chunks_exact_mut\" title=\"method slice::chunks_exact_mut\"><code>chunks_exact_mut</code></a> for a variant of this iterator that returns chunks of always\nexactly <code>chunk_size</code> elements, and <a href=\"../primitive.slice.html#method.rchunks_mut\" title=\"method slice::rchunks_mut\"><code>rchunks_mut</code></a> for the same iterator but starting at\nthe end of the slice.</p>\n<h5 id=\"panics-19\"><a class=\"doc-anchor\" href=\"#panics-19\">§</a>Panics</h5>\n<p>Panics if <code>chunk_size</code> is 0.</p>\n<h5 id=\"examples-86\"><a class=\"doc-anchor\" href=\"#examples-86\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>count = <span class=\"number\">1</span>;\n\n<span class=\"kw\">for </span>chunk <span class=\"kw\">in </span>v.chunks_mut(<span class=\"number\">2</span>) {\n    <span class=\"kw\">for </span>elem <span class=\"kw\">in </span>chunk.iter_mut() {\n        <span class=\"kw-2\">*</span>elem += count;\n    }\n    count += <span class=\"number\">1</span>;\n}\n<span class=\"macro\">assert_eq!</span>(v, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v+=+%26mut+%5B0,+0,+0,+0,+0%5D;%0A++++let+mut+count+=+1;%0A++++%0A++++for+chunk+in+v.chunks_mut(2)+%7B%0A++++++++for+elem+in+chunk.iter_mut()+%7B%0A++++++++++++*elem+%2B=+count;%0A++++++++%7D%0A++++++++count+%2B=+1;%0A++++%7D%0A++++assert_eq!(v,+%26%5B1,+1,+2,+2,+3%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.chunks_exact\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.31.0\">1.31.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#1214\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.chunks_exact\" class=\"fn\">chunks_exact</a>(&amp;self, chunk_size: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"../slice/struct.ChunksExact.html\" title=\"struct std::slice::ChunksExact\">ChunksExact</a>&lt;'_, T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"ChunksExact<'_, T>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns an iterator over <code>chunk_size</code> elements of the slice at a time, starting at the\nbeginning of the slice.</p>\n<p>The chunks are slices and do not overlap. If <code>chunk_size</code> does not divide the length of the\nslice, then the last up to <code>chunk_size-1</code> elements will be omitted and can be retrieved\nfrom the <code>remainder</code> function of the iterator.</p>\n<p>Due to each chunk having exactly <code>chunk_size</code> elements, the compiler can often optimize the\nresulting code better than in the case of <a href=\"../primitive.slice.html#method.chunks\" title=\"method slice::chunks\"><code>chunks</code></a>.</p>\n<p>See <a href=\"../primitive.slice.html#method.chunks\" title=\"method slice::chunks\"><code>chunks</code></a> for a variant of this iterator that also returns the remainder as a smaller\nchunk, and <a href=\"../primitive.slice.html#method.rchunks_exact\" title=\"method slice::rchunks_exact\"><code>rchunks_exact</code></a> for the same iterator but starting at the end of the slice.</p>\n<h5 id=\"panics-20\"><a class=\"doc-anchor\" href=\"#panics-20\">§</a>Panics</h5>\n<p>Panics if <code>chunk_size</code> is 0.</p>\n<h5 id=\"examples-87\"><a class=\"doc-anchor\" href=\"#examples-87\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>slice = [<span class=\"string\">'l'</span>, <span class=\"string\">'o'</span>, <span class=\"string\">'r'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'m'</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = slice.chunks_exact(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(iter.next().unwrap(), <span class=\"kw-2\">&amp;</span>[<span class=\"string\">'l'</span>, <span class=\"string\">'o'</span>]);\n<span class=\"macro\">assert_eq!</span>(iter.next().unwrap(), <span class=\"kw-2\">&amp;</span>[<span class=\"string\">'r'</span>, <span class=\"string\">'e'</span>]);\n<span class=\"macro\">assert!</span>(iter.next().is_none());\n<span class=\"macro\">assert_eq!</span>(iter.remainder(), <span class=\"kw-2\">&amp;</span>[<span class=\"string\">'m'</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+slice+=+%5B'l',+'o',+'r',+'e',+'m'%5D;%0A++++let+mut+iter+=+slice.chunks_exact(2);%0A++++assert_eq!(iter.next().unwrap(),+%26%5B'l',+'o'%5D);%0A++++assert_eq!(iter.next().unwrap(),+%26%5B'r',+'e'%5D);%0A++++assert!(iter.next().is_none());%0A++++assert_eq!(iter.remainder(),+%26%5B'm'%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.chunks_exact_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.31.0\">1.31.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#1257\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.chunks_exact_mut\" class=\"fn\">chunks_exact_mut</a>(&amp;mut self, chunk_size: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"../slice/struct.ChunksExactMut.html\" title=\"struct std::slice::ChunksExactMut\">ChunksExactMut</a>&lt;'_, T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"ChunksExactMut<'_, T>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns an iterator over <code>chunk_size</code> elements of the slice at a time, starting at the\nbeginning of the slice.</p>\n<p>The chunks are mutable slices, and do not overlap. If <code>chunk_size</code> does not divide the\nlength of the slice, then the last up to <code>chunk_size-1</code> elements will be omitted and can be\nretrieved from the <code>into_remainder</code> function of the iterator.</p>\n<p>Due to each chunk having exactly <code>chunk_size</code> elements, the compiler can often optimize the\nresulting code better than in the case of <a href=\"../primitive.slice.html#method.chunks_mut\" title=\"method slice::chunks_mut\"><code>chunks_mut</code></a>.</p>\n<p>See <a href=\"../primitive.slice.html#method.chunks_mut\" title=\"method slice::chunks_mut\"><code>chunks_mut</code></a> for a variant of this iterator that also returns the remainder as a\nsmaller chunk, and <a href=\"../primitive.slice.html#method.rchunks_exact_mut\" title=\"method slice::rchunks_exact_mut\"><code>rchunks_exact_mut</code></a> for the same iterator but starting at the end of\nthe slice.</p>\n<h5 id=\"panics-21\"><a class=\"doc-anchor\" href=\"#panics-21\">§</a>Panics</h5>\n<p>Panics if <code>chunk_size</code> is 0.</p>\n<h5 id=\"examples-88\"><a class=\"doc-anchor\" href=\"#examples-88\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>count = <span class=\"number\">1</span>;\n\n<span class=\"kw\">for </span>chunk <span class=\"kw\">in </span>v.chunks_exact_mut(<span class=\"number\">2</span>) {\n    <span class=\"kw\">for </span>elem <span class=\"kw\">in </span>chunk.iter_mut() {\n        <span class=\"kw-2\">*</span>elem += count;\n    }\n    count += <span class=\"number\">1</span>;\n}\n<span class=\"macro\">assert_eq!</span>(v, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v+=+%26mut+%5B0,+0,+0,+0,+0%5D;%0A++++let+mut+count+=+1;%0A++++%0A++++for+chunk+in+v.chunks_exact_mut(2)+%7B%0A++++++++for+elem+in+chunk.iter_mut()+%7B%0A++++++++++++*elem+%2B=+count;%0A++++++++%7D%0A++++++++count+%2B=+1;%0A++++%7D%0A++++assert_eq!(v,+%26%5B1,+1,+2,+2,+0%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_chunks_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#1292\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.as_chunks_unchecked\" class=\"fn\">as_chunks_unchecked</a>&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"../primitive.array.html\">[T; N]</a>]</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_as_chunks</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/74985\">#74985</a>)</span></div></span></summary><div class=\"docblock\"><p>Splits the slice into a slice of <code>N</code>-element arrays,\nassuming that there’s no remainder.</p>\n<h5 id=\"safety-6\"><a class=\"doc-anchor\" href=\"#safety-6\">§</a>Safety</h5>\n<p>This may only be called when</p>\n<ul>\n<li>The slice splits exactly into <code>N</code>-element chunks (aka <code>self.len() % N == 0</code>).</li>\n<li><code>N != 0</code>.</li>\n</ul>\n<h5 id=\"examples-89\"><a class=\"doc-anchor\" href=\"#examples-89\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(slice_as_chunks)]\n</span><span class=\"kw\">let </span>slice: <span class=\"kw-2\">&amp;</span>[char] = <span class=\"kw-2\">&amp;</span>[<span class=\"string\">'l'</span>, <span class=\"string\">'o'</span>, <span class=\"string\">'r'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'m'</span>, <span class=\"string\">'!'</span>];\n<span class=\"kw\">let </span>chunks: <span class=\"kw-2\">&amp;</span>[[char; <span class=\"number\">1</span>]] =\n    <span class=\"comment\">// SAFETY: 1-element chunks never have remainder\n    </span><span class=\"kw\">unsafe </span>{ slice.as_chunks_unchecked() };\n<span class=\"macro\">assert_eq!</span>(chunks, <span class=\"kw-2\">&amp;</span>[[<span class=\"string\">'l'</span>], [<span class=\"string\">'o'</span>], [<span class=\"string\">'r'</span>], [<span class=\"string\">'e'</span>], [<span class=\"string\">'m'</span>], [<span class=\"string\">'!'</span>]]);\n<span class=\"kw\">let </span>chunks: <span class=\"kw-2\">&amp;</span>[[char; <span class=\"number\">3</span>]] =\n    <span class=\"comment\">// SAFETY: The slice length (6) is a multiple of 3\n    </span><span class=\"kw\">unsafe </span>{ slice.as_chunks_unchecked() };\n<span class=\"macro\">assert_eq!</span>(chunks, <span class=\"kw-2\">&amp;</span>[[<span class=\"string\">'l'</span>, <span class=\"string\">'o'</span>, <span class=\"string\">'r'</span>], [<span class=\"string\">'e'</span>, <span class=\"string\">'m'</span>, <span class=\"string\">'!'</span>]]);\n\n<span class=\"comment\">// These would be unsound:\n// let chunks: &amp;[[_; 5]] = slice.as_chunks_unchecked() // The slice length is not a multiple of 5\n// let chunks: &amp;[[_; 0]] = slice.as_chunks_unchecked() // Zero-length chunks are never allowed</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(slice_as_chunks)%5D%0Afn+main()+%7B%0A++++let+slice:+%26%5Bchar%5D+=+%26%5B'l',+'o',+'r',+'e',+'m',+'!'%5D;%0A++++let+chunks:+%26%5B%5Bchar;+1%5D%5D+=%0A++++++++//+SAFETY:+1-element+chunks+never+have+remainder%0A++++++++unsafe+%7B+slice.as_chunks_unchecked()+%7D;%0A++++assert_eq!(chunks,+%26%5B%5B'l'%5D,+%5B'o'%5D,+%5B'r'%5D,+%5B'e'%5D,+%5B'm'%5D,+%5B'!'%5D%5D);%0A++++let+chunks:+%26%5B%5Bchar;+3%5D%5D+=%0A++++++++//+SAFETY:+The+slice+length+(6)+is+a+multiple+of+3%0A++++++++unsafe+%7B+slice.as_chunks_unchecked()+%7D;%0A++++assert_eq!(chunks,+%26%5B%5B'l',+'o',+'r'%5D,+%5B'e',+'m',+'!'%5D%5D);%0A++++%0A++++//+These+would+be+unsound:%0A++++//+let+chunks:+%26%5B%5B_;+5%5D%5D+=+slice.as_chunks_unchecked()+//+The+slice+length+is+not+a+multiple+of+5%0A++++//+let+chunks:+%26%5B%5B_;+0%5D%5D+=+slice.as_chunks_unchecked()+//+Zero-length+chunks+are+never+allowed%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_chunks\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#1338\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.as_chunks\" class=\"fn\">as_chunks</a>&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;(&amp;self) -&gt; (&amp;[<a class=\"primitive\" href=\"../primitive.array.html\">[T; N]</a>], &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_as_chunks</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/74985\">#74985</a>)</span></div></span></summary><div class=\"docblock\"><p>Splits the slice into a slice of <code>N</code>-element arrays,\nstarting at the beginning of the slice,\nand a remainder slice with length strictly less than <code>N</code>.</p>\n<h5 id=\"panics-22\"><a class=\"doc-anchor\" href=\"#panics-22\">§</a>Panics</h5>\n<p>Panics if <code>N</code> is 0. This check will most probably get changed to a compile time\nerror before this method gets stabilized.</p>\n<h5 id=\"examples-90\"><a class=\"doc-anchor\" href=\"#examples-90\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(slice_as_chunks)]\n</span><span class=\"kw\">let </span>slice = [<span class=\"string\">'l'</span>, <span class=\"string\">'o'</span>, <span class=\"string\">'r'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'m'</span>];\n<span class=\"kw\">let </span>(chunks, remainder) = slice.as_chunks();\n<span class=\"macro\">assert_eq!</span>(chunks, <span class=\"kw-2\">&amp;</span>[[<span class=\"string\">'l'</span>, <span class=\"string\">'o'</span>], [<span class=\"string\">'r'</span>, <span class=\"string\">'e'</span>]]);\n<span class=\"macro\">assert_eq!</span>(remainder, <span class=\"kw-2\">&amp;</span>[<span class=\"string\">'m'</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(slice_as_chunks)%5D%0Afn+main()+%7B%0A++++let+slice+=+%5B'l',+'o',+'r',+'e',+'m'%5D;%0A++++let+(chunks,+remainder)+=+slice.as_chunks();%0A++++assert_eq!(chunks,+%26%5B%5B'l',+'o'%5D,+%5B'r',+'e'%5D%5D);%0A++++assert_eq!(remainder,+%26%5B'm'%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p>If you expect the slice to be an exact multiple, you can combine\n<code>let</code>-<code>else</code> with an empty slice pattern:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(slice_as_chunks)]\n</span><span class=\"kw\">let </span>slice = [<span class=\"string\">'R'</span>, <span class=\"string\">'u'</span>, <span class=\"string\">'s'</span>, <span class=\"string\">'t'</span>];\n<span class=\"kw\">let </span>(chunks, []) = slice.as_chunks::&lt;<span class=\"number\">2</span>&gt;() <span class=\"kw\">else </span>{\n    <span class=\"macro\">panic!</span>(<span class=\"string\">\"slice didn't have even length\"</span>)\n};\n<span class=\"macro\">assert_eq!</span>(chunks, <span class=\"kw-2\">&amp;</span>[[<span class=\"string\">'R'</span>, <span class=\"string\">'u'</span>], [<span class=\"string\">'s'</span>, <span class=\"string\">'t'</span>]]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(slice_as_chunks)%5D%0Afn+main()+%7B%0A++++let+slice+=+%5B'R',+'u',+'s',+'t'%5D;%0A++++let+(chunks,+%5B%5D)+=+slice.as_chunks::%3C2%3E()+else+%7B%0A++++++++panic!(%22slice+didn't+have+even+length%22)%0A++++%7D;%0A++++assert_eq!(chunks,+%26%5B%5B'R',+'u'%5D,+%5B's',+'t'%5D%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_rchunks\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#1372\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.as_rchunks\" class=\"fn\">as_rchunks</a>&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;(&amp;self) -&gt; (&amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>, &amp;[<a class=\"primitive\" href=\"../primitive.array.html\">[T; N]</a>])</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_as_chunks</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/74985\">#74985</a>)</span></div></span></summary><div class=\"docblock\"><p>Splits the slice into a slice of <code>N</code>-element arrays,\nstarting at the end of the slice,\nand a remainder slice with length strictly less than <code>N</code>.</p>\n<h5 id=\"panics-23\"><a class=\"doc-anchor\" href=\"#panics-23\">§</a>Panics</h5>\n<p>Panics if <code>N</code> is 0. This check will most probably get changed to a compile time\nerror before this method gets stabilized.</p>\n<h5 id=\"examples-91\"><a class=\"doc-anchor\" href=\"#examples-91\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(slice_as_chunks)]\n</span><span class=\"kw\">let </span>slice = [<span class=\"string\">'l'</span>, <span class=\"string\">'o'</span>, <span class=\"string\">'r'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'m'</span>];\n<span class=\"kw\">let </span>(remainder, chunks) = slice.as_rchunks();\n<span class=\"macro\">assert_eq!</span>(remainder, <span class=\"kw-2\">&amp;</span>[<span class=\"string\">'l'</span>]);\n<span class=\"macro\">assert_eq!</span>(chunks, <span class=\"kw-2\">&amp;</span>[[<span class=\"string\">'o'</span>, <span class=\"string\">'r'</span>], [<span class=\"string\">'e'</span>, <span class=\"string\">'m'</span>]]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(slice_as_chunks)%5D%0Afn+main()+%7B%0A++++let+slice+=+%5B'l',+'o',+'r',+'e',+'m'%5D;%0A++++let+(remainder,+chunks)+=+slice.as_rchunks();%0A++++assert_eq!(remainder,+%26%5B'l'%5D);%0A++++assert_eq!(chunks,+%26%5B%5B'o',+'r'%5D,+%5B'e',+'m'%5D%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.array_chunks\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#1412\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.array_chunks\" class=\"fn\">array_chunks</a>&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;(&amp;self) -&gt; <a class=\"struct\" href=\"../slice/struct.ArrayChunks.html\" title=\"struct std::slice::ArrayChunks\">ArrayChunks</a>&lt;'_, T, N&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"ArrayChunks<'_, T, N>\">ⓘ</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>array_chunks</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/74985\">#74985</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns an iterator over <code>N</code> elements of the slice at a time, starting at the\nbeginning of the slice.</p>\n<p>The chunks are array references and do not overlap. If <code>N</code> does not divide the\nlength of the slice, then the last up to <code>N-1</code> elements will be omitted and can be\nretrieved from the <code>remainder</code> function of the iterator.</p>\n<p>This method is the const generic equivalent of <a href=\"../primitive.slice.html#method.chunks_exact\" title=\"method slice::chunks_exact\"><code>chunks_exact</code></a>.</p>\n<h5 id=\"panics-24\"><a class=\"doc-anchor\" href=\"#panics-24\">§</a>Panics</h5>\n<p>Panics if <code>N</code> is 0. This check will most probably get changed to a compile time\nerror before this method gets stabilized.</p>\n<h5 id=\"examples-92\"><a class=\"doc-anchor\" href=\"#examples-92\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(array_chunks)]\n</span><span class=\"kw\">let </span>slice = [<span class=\"string\">'l'</span>, <span class=\"string\">'o'</span>, <span class=\"string\">'r'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'m'</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = slice.array_chunks();\n<span class=\"macro\">assert_eq!</span>(iter.next().unwrap(), <span class=\"kw-2\">&amp;</span>[<span class=\"string\">'l'</span>, <span class=\"string\">'o'</span>]);\n<span class=\"macro\">assert_eq!</span>(iter.next().unwrap(), <span class=\"kw-2\">&amp;</span>[<span class=\"string\">'r'</span>, <span class=\"string\">'e'</span>]);\n<span class=\"macro\">assert!</span>(iter.next().is_none());\n<span class=\"macro\">assert_eq!</span>(iter.remainder(), <span class=\"kw-2\">&amp;</span>[<span class=\"string\">'m'</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(array_chunks)%5D%0Afn+main()+%7B%0A++++let+slice+=+%5B'l',+'o',+'r',+'e',+'m'%5D;%0A++++let+mut+iter+=+slice.array_chunks();%0A++++assert_eq!(iter.next().unwrap(),+%26%5B'l',+'o'%5D);%0A++++assert_eq!(iter.next().unwrap(),+%26%5B'r',+'e'%5D);%0A++++assert!(iter.next().is_none());%0A++++assert_eq!(iter.remainder(),+%26%5B'm'%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_chunks_unchecked_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#1449\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.as_chunks_unchecked_mut\" class=\"fn\">as_chunks_unchecked_mut</a>&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;(\n    &amp;mut self,\n) -&gt; &amp;mut [<a class=\"primitive\" href=\"../primitive.array.html\">[T; N]</a>]</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_as_chunks</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/74985\">#74985</a>)</span></div></span></summary><div class=\"docblock\"><p>Splits the slice into a slice of <code>N</code>-element arrays,\nassuming that there’s no remainder.</p>\n<h5 id=\"safety-7\"><a class=\"doc-anchor\" href=\"#safety-7\">§</a>Safety</h5>\n<p>This may only be called when</p>\n<ul>\n<li>The slice splits exactly into <code>N</code>-element chunks (aka <code>self.len() % N == 0</code>).</li>\n<li><code>N != 0</code>.</li>\n</ul>\n<h5 id=\"examples-93\"><a class=\"doc-anchor\" href=\"#examples-93\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(slice_as_chunks)]\n</span><span class=\"kw\">let </span>slice: <span class=\"kw-2\">&amp;mut </span>[char] = <span class=\"kw-2\">&amp;mut </span>[<span class=\"string\">'l'</span>, <span class=\"string\">'o'</span>, <span class=\"string\">'r'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'m'</span>, <span class=\"string\">'!'</span>];\n<span class=\"kw\">let </span>chunks: <span class=\"kw-2\">&amp;mut </span>[[char; <span class=\"number\">1</span>]] =\n    <span class=\"comment\">// SAFETY: 1-element chunks never have remainder\n    </span><span class=\"kw\">unsafe </span>{ slice.as_chunks_unchecked_mut() };\nchunks[<span class=\"number\">0</span>] = [<span class=\"string\">'L'</span>];\n<span class=\"macro\">assert_eq!</span>(chunks, <span class=\"kw-2\">&amp;</span>[[<span class=\"string\">'L'</span>], [<span class=\"string\">'o'</span>], [<span class=\"string\">'r'</span>], [<span class=\"string\">'e'</span>], [<span class=\"string\">'m'</span>], [<span class=\"string\">'!'</span>]]);\n<span class=\"kw\">let </span>chunks: <span class=\"kw-2\">&amp;mut </span>[[char; <span class=\"number\">3</span>]] =\n    <span class=\"comment\">// SAFETY: The slice length (6) is a multiple of 3\n    </span><span class=\"kw\">unsafe </span>{ slice.as_chunks_unchecked_mut() };\nchunks[<span class=\"number\">1</span>] = [<span class=\"string\">'a'</span>, <span class=\"string\">'x'</span>, <span class=\"string\">'?'</span>];\n<span class=\"macro\">assert_eq!</span>(slice, <span class=\"kw-2\">&amp;</span>[<span class=\"string\">'L'</span>, <span class=\"string\">'o'</span>, <span class=\"string\">'r'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'x'</span>, <span class=\"string\">'?'</span>]);\n\n<span class=\"comment\">// These would be unsound:\n// let chunks: &amp;[[_; 5]] = slice.as_chunks_unchecked_mut() // The slice length is not a multiple of 5\n// let chunks: &amp;[[_; 0]] = slice.as_chunks_unchecked_mut() // Zero-length chunks are never allowed</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(slice_as_chunks)%5D%0Afn+main()+%7B%0A++++let+slice:+%26mut+%5Bchar%5D+=+%26mut+%5B'l',+'o',+'r',+'e',+'m',+'!'%5D;%0A++++let+chunks:+%26mut+%5B%5Bchar;+1%5D%5D+=%0A++++++++//+SAFETY:+1-element+chunks+never+have+remainder%0A++++++++unsafe+%7B+slice.as_chunks_unchecked_mut()+%7D;%0A++++chunks%5B0%5D+=+%5B'L'%5D;%0A++++assert_eq!(chunks,+%26%5B%5B'L'%5D,+%5B'o'%5D,+%5B'r'%5D,+%5B'e'%5D,+%5B'm'%5D,+%5B'!'%5D%5D);%0A++++let+chunks:+%26mut+%5B%5Bchar;+3%5D%5D+=%0A++++++++//+SAFETY:+The+slice+length+(6)+is+a+multiple+of+3%0A++++++++unsafe+%7B+slice.as_chunks_unchecked_mut()+%7D;%0A++++chunks%5B1%5D+=+%5B'a',+'x',+'?'%5D;%0A++++assert_eq!(slice,+%26%5B'L',+'o',+'r',+'a',+'x',+'?'%5D);%0A++++%0A++++//+These+would+be+unsound:%0A++++//+let+chunks:+%26%5B%5B_;+5%5D%5D+=+slice.as_chunks_unchecked_mut()+//+The+slice+length+is+not+a+multiple+of+5%0A++++//+let+chunks:+%26%5B%5B_;+0%5D%5D+=+slice.as_chunks_unchecked_mut()+//+Zero-length+chunks+are+never+allowed%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_chunks_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#1490\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.as_chunks_mut\" class=\"fn\">as_chunks_mut</a>&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;(&amp;mut self) -&gt; (&amp;mut [<a class=\"primitive\" href=\"../primitive.array.html\">[T; N]</a>], &amp;mut <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_as_chunks</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/74985\">#74985</a>)</span></div></span></summary><div class=\"docblock\"><p>Splits the slice into a slice of <code>N</code>-element arrays,\nstarting at the beginning of the slice,\nand a remainder slice with length strictly less than <code>N</code>.</p>\n<h5 id=\"panics-25\"><a class=\"doc-anchor\" href=\"#panics-25\">§</a>Panics</h5>\n<p>Panics if <code>N</code> is 0. This check will most probably get changed to a compile time\nerror before this method gets stabilized.</p>\n<h5 id=\"examples-94\"><a class=\"doc-anchor\" href=\"#examples-94\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(slice_as_chunks)]\n</span><span class=\"kw\">let </span>v = <span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>count = <span class=\"number\">1</span>;\n\n<span class=\"kw\">let </span>(chunks, remainder) = v.as_chunks_mut();\nremainder[<span class=\"number\">0</span>] = <span class=\"number\">9</span>;\n<span class=\"kw\">for </span>chunk <span class=\"kw\">in </span>chunks {\n    <span class=\"kw-2\">*</span>chunk = [count; <span class=\"number\">2</span>];\n    count += <span class=\"number\">1</span>;\n}\n<span class=\"macro\">assert_eq!</span>(v, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">9</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(slice_as_chunks)%5D%0Afn+main()+%7B%0A++++let+v+=+%26mut+%5B0,+0,+0,+0,+0%5D;%0A++++let+mut+count+=+1;%0A++++%0A++++let+(chunks,+remainder)+=+v.as_chunks_mut();%0A++++remainder%5B0%5D+=+9;%0A++++for+chunk+in+chunks+%7B%0A++++++++*chunk+=+%5Bcount;+2%5D;%0A++++++++count+%2B=+1;%0A++++%7D%0A++++assert_eq!(v,+%26%5B1,+1,+2,+2,+9%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_rchunks_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#1530\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.as_rchunks_mut\" class=\"fn\">as_rchunks_mut</a>&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;(&amp;mut self) -&gt; (&amp;mut <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>, &amp;mut [<a class=\"primitive\" href=\"../primitive.array.html\">[T; N]</a>])</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_as_chunks</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/74985\">#74985</a>)</span></div></span></summary><div class=\"docblock\"><p>Splits the slice into a slice of <code>N</code>-element arrays,\nstarting at the end of the slice,\nand a remainder slice with length strictly less than <code>N</code>.</p>\n<h5 id=\"panics-26\"><a class=\"doc-anchor\" href=\"#panics-26\">§</a>Panics</h5>\n<p>Panics if <code>N</code> is 0. This check will most probably get changed to a compile time\nerror before this method gets stabilized.</p>\n<h5 id=\"examples-95\"><a class=\"doc-anchor\" href=\"#examples-95\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(slice_as_chunks)]\n</span><span class=\"kw\">let </span>v = <span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>count = <span class=\"number\">1</span>;\n\n<span class=\"kw\">let </span>(remainder, chunks) = v.as_rchunks_mut();\nremainder[<span class=\"number\">0</span>] = <span class=\"number\">9</span>;\n<span class=\"kw\">for </span>chunk <span class=\"kw\">in </span>chunks {\n    <span class=\"kw-2\">*</span>chunk = [count; <span class=\"number\">2</span>];\n    count += <span class=\"number\">1</span>;\n}\n<span class=\"macro\">assert_eq!</span>(v, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">9</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(slice_as_chunks)%5D%0Afn+main()+%7B%0A++++let+v+=+%26mut+%5B0,+0,+0,+0,+0%5D;%0A++++let+mut+count+=+1;%0A++++%0A++++let+(remainder,+chunks)+=+v.as_rchunks_mut();%0A++++remainder%5B0%5D+=+9;%0A++++for+chunk+in+chunks+%7B%0A++++++++*chunk+=+%5Bcount;+2%5D;%0A++++++++count+%2B=+1;%0A++++%7D%0A++++assert_eq!(v,+%26%5B9,+1,+1,+2,+2%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.array_chunks_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#1572\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.array_chunks_mut\" class=\"fn\">array_chunks_mut</a>&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;(&amp;mut self) -&gt; <a class=\"struct\" href=\"../slice/struct.ArrayChunksMut.html\" title=\"struct std::slice::ArrayChunksMut\">ArrayChunksMut</a>&lt;'_, T, N&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"ArrayChunksMut<'_, T, N>\">ⓘ</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>array_chunks</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/74985\">#74985</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns an iterator over <code>N</code> elements of the slice at a time, starting at the\nbeginning of the slice.</p>\n<p>The chunks are mutable array references and do not overlap. If <code>N</code> does not divide\nthe length of the slice, then the last up to <code>N-1</code> elements will be omitted and\ncan be retrieved from the <code>into_remainder</code> function of the iterator.</p>\n<p>This method is the const generic equivalent of <a href=\"../primitive.slice.html#method.chunks_exact_mut\" title=\"method slice::chunks_exact_mut\"><code>chunks_exact_mut</code></a>.</p>\n<h5 id=\"panics-27\"><a class=\"doc-anchor\" href=\"#panics-27\">§</a>Panics</h5>\n<p>Panics if <code>N</code> is 0. This check will most probably get changed to a compile time\nerror before this method gets stabilized.</p>\n<h5 id=\"examples-96\"><a class=\"doc-anchor\" href=\"#examples-96\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(array_chunks)]\n</span><span class=\"kw\">let </span>v = <span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>count = <span class=\"number\">1</span>;\n\n<span class=\"kw\">for </span>chunk <span class=\"kw\">in </span>v.array_chunks_mut() {\n    <span class=\"kw-2\">*</span>chunk = [count; <span class=\"number\">2</span>];\n    count += <span class=\"number\">1</span>;\n}\n<span class=\"macro\">assert_eq!</span>(v, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(array_chunks)%5D%0Afn+main()+%7B%0A++++let+v+=+%26mut+%5B0,+0,+0,+0,+0%5D;%0A++++let+mut+count+=+1;%0A++++%0A++++for+chunk+in+v.array_chunks_mut()+%7B%0A++++++++*chunk+=+%5Bcount;+2%5D;%0A++++++++count+%2B=+1;%0A++++%7D%0A++++assert_eq!(v,+%26%5B1,+1,+2,+2,+0%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.array_windows\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#1605\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.array_windows\" class=\"fn\">array_windows</a>&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;(&amp;self) -&gt; <a class=\"struct\" href=\"../slice/struct.ArrayWindows.html\" title=\"struct std::slice::ArrayWindows\">ArrayWindows</a>&lt;'_, T, N&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"ArrayWindows<'_, T, N>\">ⓘ</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>array_windows</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/75027\">#75027</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns an iterator over overlapping windows of <code>N</code> elements of a slice,\nstarting at the beginning of the slice.</p>\n<p>This is the const generic equivalent of <a href=\"../primitive.slice.html#method.windows\" title=\"method slice::windows\"><code>windows</code></a>.</p>\n<p>If <code>N</code> is greater than the size of the slice, it will return no windows.</p>\n<h5 id=\"panics-28\"><a class=\"doc-anchor\" href=\"#panics-28\">§</a>Panics</h5>\n<p>Panics if <code>N</code> is 0. This check will most probably get changed to a compile time\nerror before this method gets stabilized.</p>\n<h5 id=\"examples-97\"><a class=\"doc-anchor\" href=\"#examples-97\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(array_windows)]\n</span><span class=\"kw\">let </span>slice = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = slice.array_windows();\n<span class=\"macro\">assert_eq!</span>(iter.next().unwrap(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>]);\n<span class=\"macro\">assert_eq!</span>(iter.next().unwrap(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>]);\n<span class=\"macro\">assert_eq!</span>(iter.next().unwrap(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert!</span>(iter.next().is_none());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(array_windows)%5D%0Afn+main()+%7B%0A++++let+slice+=+%5B0,+1,+2,+3%5D;%0A++++let+mut+iter+=+slice.array_windows();%0A++++assert_eq!(iter.next().unwrap(),+%26%5B0,+1%5D);%0A++++assert_eq!(iter.next().unwrap(),+%26%5B1,+2%5D);%0A++++assert_eq!(iter.next().unwrap(),+%26%5B2,+3%5D);%0A++++assert!(iter.next().is_none());%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rchunks\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.31.0\">1.31.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#1640\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.rchunks\" class=\"fn\">rchunks</a>(&amp;self, chunk_size: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"../slice/struct.RChunks.html\" title=\"struct std::slice::RChunks\">RChunks</a>&lt;'_, T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"RChunks<'_, T>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns an iterator over <code>chunk_size</code> elements of the slice at a time, starting at the end\nof the slice.</p>\n<p>The chunks are slices and do not overlap. If <code>chunk_size</code> does not divide the length of the\nslice, then the last chunk will not have length <code>chunk_size</code>.</p>\n<p>See <a href=\"../primitive.slice.html#method.rchunks_exact\" title=\"method slice::rchunks_exact\"><code>rchunks_exact</code></a> for a variant of this iterator that returns chunks of always exactly\n<code>chunk_size</code> elements, and <a href=\"../primitive.slice.html#method.chunks\" title=\"method slice::chunks\"><code>chunks</code></a> for the same iterator but starting at the beginning\nof the slice.</p>\n<h5 id=\"panics-29\"><a class=\"doc-anchor\" href=\"#panics-29\">§</a>Panics</h5>\n<p>Panics if <code>chunk_size</code> is 0.</p>\n<h5 id=\"examples-98\"><a class=\"doc-anchor\" href=\"#examples-98\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>slice = [<span class=\"string\">'l'</span>, <span class=\"string\">'o'</span>, <span class=\"string\">'r'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'m'</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = slice.rchunks(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(iter.next().unwrap(), <span class=\"kw-2\">&amp;</span>[<span class=\"string\">'e'</span>, <span class=\"string\">'m'</span>]);\n<span class=\"macro\">assert_eq!</span>(iter.next().unwrap(), <span class=\"kw-2\">&amp;</span>[<span class=\"string\">'o'</span>, <span class=\"string\">'r'</span>]);\n<span class=\"macro\">assert_eq!</span>(iter.next().unwrap(), <span class=\"kw-2\">&amp;</span>[<span class=\"string\">'l'</span>]);\n<span class=\"macro\">assert!</span>(iter.next().is_none());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+slice+=+%5B'l',+'o',+'r',+'e',+'m'%5D;%0A++++let+mut+iter+=+slice.rchunks(2);%0A++++assert_eq!(iter.next().unwrap(),+%26%5B'e',+'m'%5D);%0A++++assert_eq!(iter.next().unwrap(),+%26%5B'o',+'r'%5D);%0A++++assert_eq!(iter.next().unwrap(),+%26%5B'l'%5D);%0A++++assert!(iter.next().is_none());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rchunks_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.31.0\">1.31.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#1679\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.rchunks_mut\" class=\"fn\">rchunks_mut</a>(&amp;mut self, chunk_size: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"../slice/struct.RChunksMut.html\" title=\"struct std::slice::RChunksMut\">RChunksMut</a>&lt;'_, T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"RChunksMut<'_, T>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns an iterator over <code>chunk_size</code> elements of the slice at a time, starting at the end\nof the slice.</p>\n<p>The chunks are mutable slices, and do not overlap. If <code>chunk_size</code> does not divide the\nlength of the slice, then the last chunk will not have length <code>chunk_size</code>.</p>\n<p>See <a href=\"../primitive.slice.html#method.rchunks_exact_mut\" title=\"method slice::rchunks_exact_mut\"><code>rchunks_exact_mut</code></a> for a variant of this iterator that returns chunks of always\nexactly <code>chunk_size</code> elements, and <a href=\"../primitive.slice.html#method.chunks_mut\" title=\"method slice::chunks_mut\"><code>chunks_mut</code></a> for the same iterator but starting at the\nbeginning of the slice.</p>\n<h5 id=\"panics-30\"><a class=\"doc-anchor\" href=\"#panics-30\">§</a>Panics</h5>\n<p>Panics if <code>chunk_size</code> is 0.</p>\n<h5 id=\"examples-99\"><a class=\"doc-anchor\" href=\"#examples-99\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>count = <span class=\"number\">1</span>;\n\n<span class=\"kw\">for </span>chunk <span class=\"kw\">in </span>v.rchunks_mut(<span class=\"number\">2</span>) {\n    <span class=\"kw\">for </span>elem <span class=\"kw\">in </span>chunk.iter_mut() {\n        <span class=\"kw-2\">*</span>elem += count;\n    }\n    count += <span class=\"number\">1</span>;\n}\n<span class=\"macro\">assert_eq!</span>(v, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v+=+%26mut+%5B0,+0,+0,+0,+0%5D;%0A++++let+mut+count+=+1;%0A++++%0A++++for+chunk+in+v.rchunks_mut(2)+%7B%0A++++++++for+elem+in+chunk.iter_mut()+%7B%0A++++++++++++*elem+%2B=+count;%0A++++++++%7D%0A++++++++count+%2B=+1;%0A++++%7D%0A++++assert_eq!(v,+%26%5B3,+2,+2,+1,+1%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rchunks_exact\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.31.0\">1.31.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#1719\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.rchunks_exact\" class=\"fn\">rchunks_exact</a>(&amp;self, chunk_size: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"../slice/struct.RChunksExact.html\" title=\"struct std::slice::RChunksExact\">RChunksExact</a>&lt;'_, T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"RChunksExact<'_, T>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns an iterator over <code>chunk_size</code> elements of the slice at a time, starting at the\nend of the slice.</p>\n<p>The chunks are slices and do not overlap. If <code>chunk_size</code> does not divide the length of the\nslice, then the last up to <code>chunk_size-1</code> elements will be omitted and can be retrieved\nfrom the <code>remainder</code> function of the iterator.</p>\n<p>Due to each chunk having exactly <code>chunk_size</code> elements, the compiler can often optimize the\nresulting code better than in the case of <a href=\"../primitive.slice.html#method.rchunks\" title=\"method slice::rchunks\"><code>rchunks</code></a>.</p>\n<p>See <a href=\"../primitive.slice.html#method.rchunks\" title=\"method slice::rchunks\"><code>rchunks</code></a> for a variant of this iterator that also returns the remainder as a smaller\nchunk, and <a href=\"../primitive.slice.html#method.chunks_exact\" title=\"method slice::chunks_exact\"><code>chunks_exact</code></a> for the same iterator but starting at the beginning of the\nslice.</p>\n<h5 id=\"panics-31\"><a class=\"doc-anchor\" href=\"#panics-31\">§</a>Panics</h5>\n<p>Panics if <code>chunk_size</code> is 0.</p>\n<h5 id=\"examples-100\"><a class=\"doc-anchor\" href=\"#examples-100\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>slice = [<span class=\"string\">'l'</span>, <span class=\"string\">'o'</span>, <span class=\"string\">'r'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'m'</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = slice.rchunks_exact(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(iter.next().unwrap(), <span class=\"kw-2\">&amp;</span>[<span class=\"string\">'e'</span>, <span class=\"string\">'m'</span>]);\n<span class=\"macro\">assert_eq!</span>(iter.next().unwrap(), <span class=\"kw-2\">&amp;</span>[<span class=\"string\">'o'</span>, <span class=\"string\">'r'</span>]);\n<span class=\"macro\">assert!</span>(iter.next().is_none());\n<span class=\"macro\">assert_eq!</span>(iter.remainder(), <span class=\"kw-2\">&amp;</span>[<span class=\"string\">'l'</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+slice+=+%5B'l',+'o',+'r',+'e',+'m'%5D;%0A++++let+mut+iter+=+slice.rchunks_exact(2);%0A++++assert_eq!(iter.next().unwrap(),+%26%5B'e',+'m'%5D);%0A++++assert_eq!(iter.next().unwrap(),+%26%5B'o',+'r'%5D);%0A++++assert!(iter.next().is_none());%0A++++assert_eq!(iter.remainder(),+%26%5B'l'%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rchunks_exact_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.31.0\">1.31.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#1763\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.rchunks_exact_mut\" class=\"fn\">rchunks_exact_mut</a>(&amp;mut self, chunk_size: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"../slice/struct.RChunksExactMut.html\" title=\"struct std::slice::RChunksExactMut\">RChunksExactMut</a>&lt;'_, T&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"RChunksExactMut<'_, T>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns an iterator over <code>chunk_size</code> elements of the slice at a time, starting at the end\nof the slice.</p>\n<p>The chunks are mutable slices, and do not overlap. If <code>chunk_size</code> does not divide the\nlength of the slice, then the last up to <code>chunk_size-1</code> elements will be omitted and can be\nretrieved from the <code>into_remainder</code> function of the iterator.</p>\n<p>Due to each chunk having exactly <code>chunk_size</code> elements, the compiler can often optimize the\nresulting code better than in the case of <a href=\"../primitive.slice.html#method.chunks_mut\" title=\"method slice::chunks_mut\"><code>chunks_mut</code></a>.</p>\n<p>See <a href=\"../primitive.slice.html#method.rchunks_mut\" title=\"method slice::rchunks_mut\"><code>rchunks_mut</code></a> for a variant of this iterator that also returns the remainder as a\nsmaller chunk, and <a href=\"../primitive.slice.html#method.chunks_exact_mut\" title=\"method slice::chunks_exact_mut\"><code>chunks_exact_mut</code></a> for the same iterator but starting at the beginning\nof the slice.</p>\n<h5 id=\"panics-32\"><a class=\"doc-anchor\" href=\"#panics-32\">§</a>Panics</h5>\n<p>Panics if <code>chunk_size</code> is 0.</p>\n<h5 id=\"examples-101\"><a class=\"doc-anchor\" href=\"#examples-101\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>count = <span class=\"number\">1</span>;\n\n<span class=\"kw\">for </span>chunk <span class=\"kw\">in </span>v.rchunks_exact_mut(<span class=\"number\">2</span>) {\n    <span class=\"kw\">for </span>elem <span class=\"kw\">in </span>chunk.iter_mut() {\n        <span class=\"kw-2\">*</span>elem += count;\n    }\n    count += <span class=\"number\">1</span>;\n}\n<span class=\"macro\">assert_eq!</span>(v, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v+=+%26mut+%5B0,+0,+0,+0,+0%5D;%0A++++let+mut+count+=+1;%0A++++%0A++++for+chunk+in+v.rchunks_exact_mut(2)+%7B%0A++++++++for+elem+in+chunk.iter_mut()+%7B%0A++++++++++++*elem+%2B=+count;%0A++++++++%7D%0A++++++++count+%2B=+1;%0A++++%7D%0A++++assert_eq!(v,+%26%5B0,+2,+2,+1,+1%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.chunk_by\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.77.0\">1.77.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#1802-1804\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.chunk_by\" class=\"fn\">chunk_by</a>&lt;F&gt;(&amp;self, pred: F) -&gt; <a class=\"struct\" href=\"../slice/struct.ChunkBy.html\" title=\"struct std::slice::ChunkBy\">ChunkBy</a>&lt;'_, T, F&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"ChunkBy<'_, T, F>\">ⓘ</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>, <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns an iterator over the slice producing non-overlapping runs\nof elements using the predicate to separate them.</p>\n<p>The predicate is called for every pair of consecutive elements,\nmeaning that it is called on <code>slice[0]</code> and <code>slice[1]</code>,\nfollowed by <code>slice[1]</code> and <code>slice[2]</code>, and so on.</p>\n<h5 id=\"examples-102\"><a class=\"doc-anchor\" href=\"#examples-102\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>slice = <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>];\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = slice.chunk_by(|a, b| a == b);\n\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>][..]));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">3</span>, <span class=\"number\">3</span>][..]));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>][..]));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+slice+=+%26%5B1,+1,+1,+3,+3,+2,+2,+2%5D;%0A++++%0A++++let+mut+iter+=+slice.chunk_by(%7Ca,+b%7C+a+==+b);%0A++++%0A++++assert_eq!(iter.next(),+Some(%26%5B1,+1,+1%5D%5B..%5D));%0A++++assert_eq!(iter.next(),+Some(%26%5B3,+3%5D%5B..%5D));%0A++++assert_eq!(iter.next(),+Some(%26%5B2,+2,+2%5D%5B..%5D));%0A++++assert_eq!(iter.next(),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>This method can be used to extract the sorted subslices:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>slice = <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = slice.chunk_by(|a, b| a &lt;= b);\n\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>][..]));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>, <span class=\"number\">3</span>][..]));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>][..]));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+slice+=+%26%5B1,+1,+2,+3,+2,+3,+2,+3,+4%5D;%0A++++%0A++++let+mut+iter+=+slice.chunk_by(%7Ca,+b%7C+a+%3C=+b);%0A++++%0A++++assert_eq!(iter.next(),+Some(%26%5B1,+1,+2,+3%5D%5B..%5D));%0A++++assert_eq!(iter.next(),+Some(%26%5B2,+3%5D%5B..%5D));%0A++++assert_eq!(iter.next(),+Some(%26%5B2,+3,+4%5D%5B..%5D));%0A++++assert_eq!(iter.next(),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.chunk_by_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.77.0\">1.77.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#1843-1845\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.chunk_by_mut\" class=\"fn\">chunk_by_mut</a>&lt;F&gt;(&amp;mut self, pred: F) -&gt; <a class=\"struct\" href=\"../slice/struct.ChunkByMut.html\" title=\"struct std::slice::ChunkByMut\">ChunkByMut</a>&lt;'_, T, F&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"ChunkByMut<'_, T, F>\">ⓘ</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>, <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns an iterator over the slice producing non-overlapping mutable\nruns of elements using the predicate to separate them.</p>\n<p>The predicate is called for every pair of consecutive elements,\nmeaning that it is called on <code>slice[0]</code> and <code>slice[1]</code>,\nfollowed by <code>slice[1]</code> and <code>slice[2]</code>, and so on.</p>\n<h5 id=\"examples-103\"><a class=\"doc-anchor\" href=\"#examples-103\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>slice = <span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>];\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = slice.chunk_by_mut(|a, b| a == b);\n\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>][..]));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">3</span>, <span class=\"number\">3</span>][..]));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>][..]));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+slice+=+%26mut+%5B1,+1,+1,+3,+3,+2,+2,+2%5D;%0A++++%0A++++let+mut+iter+=+slice.chunk_by_mut(%7Ca,+b%7C+a+==+b);%0A++++%0A++++assert_eq!(iter.next(),+Some(%26mut+%5B1,+1,+1%5D%5B..%5D));%0A++++assert_eq!(iter.next(),+Some(%26mut+%5B3,+3%5D%5B..%5D));%0A++++assert_eq!(iter.next(),+Some(%26mut+%5B2,+2,+2%5D%5B..%5D));%0A++++assert_eq!(iter.next(),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>This method can be used to extract the sorted subslices:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>slice = <span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = slice.chunk_by_mut(|a, b| a &lt;= b);\n\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>][..]));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">2</span>, <span class=\"number\">3</span>][..]));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>][..]));\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+slice+=+%26mut+%5B1,+1,+2,+3,+2,+3,+2,+3,+4%5D;%0A++++%0A++++let+mut+iter+=+slice.chunk_by_mut(%7Ca,+b%7C+a+%3C=+b);%0A++++%0A++++assert_eq!(iter.next(),+Some(%26mut+%5B1,+1,+2,+3%5D%5B..%5D));%0A++++assert_eq!(iter.next(),+Some(%26mut+%5B2,+3%5D%5B..%5D));%0A++++assert_eq!(iter.next(),+Some(%26mut+%5B2,+3,+4%5D%5B..%5D));%0A++++assert_eq!(iter.next(),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.split_at\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#1890\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.split_at\" class=\"fn\">split_at</a>(&amp;self, mid: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; (&amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>, &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>)</h4></section></summary><div class=\"docblock\"><p>Divides one slice into two at an index.</p>\n<p>The first will contain all indices from <code>[0, mid)</code> (excluding\nthe index <code>mid</code> itself) and the second will contain all\nindices from <code>[mid, len)</code> (excluding the index <code>len</code> itself).</p>\n<h5 id=\"panics-33\"><a class=\"doc-anchor\" href=\"#panics-33\">§</a>Panics</h5>\n<p>Panics if <code>mid &gt; len</code>.  For a non-panicking alternative see\n<a href=\"../primitive.slice.html#method.split_at_checked\" title=\"method slice::split_at_checked\"><code>split_at_checked</code></a>.</p>\n<h5 id=\"examples-104\"><a class=\"doc-anchor\" href=\"#examples-104\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];\n\n{\n   <span class=\"kw\">let </span>(left, right) = v.split_at(<span class=\"number\">0</span>);\n   <span class=\"macro\">assert_eq!</span>(left, []);\n   <span class=\"macro\">assert_eq!</span>(right, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n}\n\n{\n    <span class=\"kw\">let </span>(left, right) = v.split_at(<span class=\"number\">2</span>);\n    <span class=\"macro\">assert_eq!</span>(left, [<span class=\"number\">1</span>, <span class=\"number\">2</span>]);\n    <span class=\"macro\">assert_eq!</span>(right, [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n}\n\n{\n    <span class=\"kw\">let </span>(left, right) = v.split_at(<span class=\"number\">6</span>);\n    <span class=\"macro\">assert_eq!</span>(left, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n    <span class=\"macro\">assert_eq!</span>(right, []);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v+=+%5B1,+2,+3,+4,+5,+6%5D;%0A++++%0A++++%7B%0A+++++++let+(left,+right)+=+v.split_at(0);%0A+++++++assert_eq!(left,+%5B%5D);%0A+++++++assert_eq!(right,+%5B1,+2,+3,+4,+5,+6%5D);%0A++++%7D%0A++++%0A++++%7B%0A++++++++let+(left,+right)+=+v.split_at(2);%0A++++++++assert_eq!(left,+%5B1,+2%5D);%0A++++++++assert_eq!(right,+%5B3,+4,+5,+6%5D);%0A++++%7D%0A++++%0A++++%7B%0A++++++++let+(left,+right)+=+v.split_at(6);%0A++++++++assert_eq!(left,+%5B1,+2,+3,+4,+5,+6%5D);%0A++++++++assert_eq!(right,+%5B%5D);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.split_at_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#1924\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.split_at_mut\" class=\"fn\">split_at_mut</a>(&amp;mut self, mid: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; (&amp;mut <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>, &amp;mut <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>)</h4></section></summary><div class=\"docblock\"><p>Divides one mutable slice into two at an index.</p>\n<p>The first will contain all indices from <code>[0, mid)</code> (excluding\nthe index <code>mid</code> itself) and the second will contain all\nindices from <code>[mid, len)</code> (excluding the index <code>len</code> itself).</p>\n<h5 id=\"panics-34\"><a class=\"doc-anchor\" href=\"#panics-34\">§</a>Panics</h5>\n<p>Panics if <code>mid &gt; len</code>.  For a non-panicking alternative see\n<a href=\"../primitive.slice.html#method.split_at_mut_checked\" title=\"method slice::split_at_mut_checked\"><code>split_at_mut_checked</code></a>.</p>\n<h5 id=\"examples-105\"><a class=\"doc-anchor\" href=\"#examples-105\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];\n<span class=\"kw\">let </span>(left, right) = v.split_at_mut(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(left, [<span class=\"number\">1</span>, <span class=\"number\">0</span>]);\n<span class=\"macro\">assert_eq!</span>(right, [<span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\nleft[<span class=\"number\">1</span>] = <span class=\"number\">2</span>;\nright[<span class=\"number\">1</span>] = <span class=\"number\">4</span>;\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+%5B1,+0,+3,+0,+5,+6%5D;%0A++++let+(left,+right)+=+v.split_at_mut(2);%0A++++assert_eq!(left,+%5B1,+0%5D);%0A++++assert_eq!(right,+%5B3,+0,+5,+6%5D);%0A++++left%5B1%5D+=+2;%0A++++right%5B1%5D+=+4;%0A++++assert_eq!(v,+%5B1,+2,+3,+4,+5,+6%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.split_at_unchecked\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.79.0\">1.79.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#1975\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.split_at_unchecked\" class=\"fn\">split_at_unchecked</a>(&amp;self, mid: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; (&amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>, &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>)</h4></section></summary><div class=\"docblock\"><p>Divides one slice into two at an index, without doing bounds checking.</p>\n<p>The first will contain all indices from <code>[0, mid)</code> (excluding\nthe index <code>mid</code> itself) and the second will contain all\nindices from <code>[mid, len)</code> (excluding the index <code>len</code> itself).</p>\n<p>For a safe alternative see <a href=\"../primitive.slice.html#method.split_at\" title=\"method slice::split_at\"><code>split_at</code></a>.</p>\n<h5 id=\"safety-8\"><a class=\"doc-anchor\" href=\"#safety-8\">§</a>Safety</h5>\n<p>Calling this method with an out-of-bounds index is <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em>\neven if the resulting reference is not used. The caller has to ensure that\n<code>0 &lt;= mid &lt;= self.len()</code>.</p>\n<h5 id=\"examples-106\"><a class=\"doc-anchor\" href=\"#examples-106\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];\n\n<span class=\"kw\">unsafe </span>{\n   <span class=\"kw\">let </span>(left, right) = v.split_at_unchecked(<span class=\"number\">0</span>);\n   <span class=\"macro\">assert_eq!</span>(left, []);\n   <span class=\"macro\">assert_eq!</span>(right, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n}\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span>(left, right) = v.split_at_unchecked(<span class=\"number\">2</span>);\n    <span class=\"macro\">assert_eq!</span>(left, [<span class=\"number\">1</span>, <span class=\"number\">2</span>]);\n    <span class=\"macro\">assert_eq!</span>(right, [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n}\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span>(left, right) = v.split_at_unchecked(<span class=\"number\">6</span>);\n    <span class=\"macro\">assert_eq!</span>(left, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n    <span class=\"macro\">assert_eq!</span>(right, []);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v+=+%5B1,+2,+3,+4,+5,+6%5D;%0A++++%0A++++unsafe+%7B%0A+++++++let+(left,+right)+=+v.split_at_unchecked(0);%0A+++++++assert_eq!(left,+%5B%5D);%0A+++++++assert_eq!(right,+%5B1,+2,+3,+4,+5,+6%5D);%0A++++%7D%0A++++%0A++++unsafe+%7B%0A++++++++let+(left,+right)+=+v.split_at_unchecked(2);%0A++++++++assert_eq!(left,+%5B1,+2%5D);%0A++++++++assert_eq!(right,+%5B3,+4,+5,+6%5D);%0A++++%7D%0A++++%0A++++unsafe+%7B%0A++++++++let+(left,+right)+=+v.split_at_unchecked(6);%0A++++++++assert_eq!(left,+%5B1,+2,+3,+4,+5,+6%5D);%0A++++++++assert_eq!(right,+%5B%5D);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.split_at_mut_unchecked\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.79.0\">1.79.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#2028\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.split_at_mut_unchecked\" class=\"fn\">split_at_mut_unchecked</a>(\n    &amp;mut self,\n    mid: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>,\n) -&gt; (&amp;mut <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>, &amp;mut <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>)</h4></section></summary><div class=\"docblock\"><p>Divides one mutable slice into two at an index, without doing bounds checking.</p>\n<p>The first will contain all indices from <code>[0, mid)</code> (excluding\nthe index <code>mid</code> itself) and the second will contain all\nindices from <code>[mid, len)</code> (excluding the index <code>len</code> itself).</p>\n<p>For a safe alternative see <a href=\"../primitive.slice.html#method.split_at_mut\" title=\"method slice::split_at_mut\"><code>split_at_mut</code></a>.</p>\n<h5 id=\"safety-9\"><a class=\"doc-anchor\" href=\"#safety-9\">§</a>Safety</h5>\n<p>Calling this method with an out-of-bounds index is <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em>\neven if the resulting reference is not used. The caller has to ensure that\n<code>0 &lt;= mid &lt;= self.len()</code>.</p>\n<h5 id=\"examples-107\"><a class=\"doc-anchor\" href=\"#examples-107\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];\n<span class=\"comment\">// scoped to restrict the lifetime of the borrows\n</span><span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span>(left, right) = v.split_at_mut_unchecked(<span class=\"number\">2</span>);\n    <span class=\"macro\">assert_eq!</span>(left, [<span class=\"number\">1</span>, <span class=\"number\">0</span>]);\n    <span class=\"macro\">assert_eq!</span>(right, [<span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n    left[<span class=\"number\">1</span>] = <span class=\"number\">2</span>;\n    right[<span class=\"number\">1</span>] = <span class=\"number\">4</span>;\n}\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+%5B1,+0,+3,+0,+5,+6%5D;%0A++++//+scoped+to+restrict+the+lifetime+of+the+borrows%0A++++unsafe+%7B%0A++++++++let+(left,+right)+=+v.split_at_mut_unchecked(2);%0A++++++++assert_eq!(left,+%5B1,+0%5D);%0A++++++++assert_eq!(right,+%5B3,+0,+5,+6%5D);%0A++++++++left%5B1%5D+=+2;%0A++++++++right%5B1%5D+=+4;%0A++++%7D%0A++++assert_eq!(v,+%5B1,+2,+3,+4,+5,+6%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.split_at_checked\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0\">1.80.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#2089\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.split_at_checked\" class=\"fn\">split_at_checked</a>(&amp;self, mid: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;(&amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>, &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>)&gt;</h4></section></summary><div class=\"docblock\"><p>Divides one slice into two at an index, returning <code>None</code> if the slice is\ntoo short.</p>\n<p>If <code>mid ≤ len</code> returns a pair of slices where the first will contain all\nindices from <code>[0, mid)</code> (excluding the index <code>mid</code> itself) and the\nsecond will contain all indices from <code>[mid, len)</code> (excluding the index\n<code>len</code> itself).</p>\n<p>Otherwise, if <code>mid &gt; len</code>, returns <code>None</code>.</p>\n<h5 id=\"examples-108\"><a class=\"doc-anchor\" href=\"#examples-108\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = [<span class=\"number\">1</span>, -<span class=\"number\">2</span>, <span class=\"number\">3</span>, -<span class=\"number\">4</span>, <span class=\"number\">5</span>, -<span class=\"number\">6</span>];\n\n{\n   <span class=\"kw\">let </span>(left, right) = v.split_at_checked(<span class=\"number\">0</span>).unwrap();\n   <span class=\"macro\">assert_eq!</span>(left, []);\n   <span class=\"macro\">assert_eq!</span>(right, [<span class=\"number\">1</span>, -<span class=\"number\">2</span>, <span class=\"number\">3</span>, -<span class=\"number\">4</span>, <span class=\"number\">5</span>, -<span class=\"number\">6</span>]);\n}\n\n{\n    <span class=\"kw\">let </span>(left, right) = v.split_at_checked(<span class=\"number\">2</span>).unwrap();\n    <span class=\"macro\">assert_eq!</span>(left, [<span class=\"number\">1</span>, -<span class=\"number\">2</span>]);\n    <span class=\"macro\">assert_eq!</span>(right, [<span class=\"number\">3</span>, -<span class=\"number\">4</span>, <span class=\"number\">5</span>, -<span class=\"number\">6</span>]);\n}\n\n{\n    <span class=\"kw\">let </span>(left, right) = v.split_at_checked(<span class=\"number\">6</span>).unwrap();\n    <span class=\"macro\">assert_eq!</span>(left, [<span class=\"number\">1</span>, -<span class=\"number\">2</span>, <span class=\"number\">3</span>, -<span class=\"number\">4</span>, <span class=\"number\">5</span>, -<span class=\"number\">6</span>]);\n    <span class=\"macro\">assert_eq!</span>(right, []);\n}\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, v.split_at_checked(<span class=\"number\">7</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v+=+%5B1,+-2,+3,+-4,+5,+-6%5D;%0A++++%0A++++%7B%0A+++++++let+(left,+right)+=+v.split_at_checked(0).unwrap();%0A+++++++assert_eq!(left,+%5B%5D);%0A+++++++assert_eq!(right,+%5B1,+-2,+3,+-4,+5,+-6%5D);%0A++++%7D%0A++++%0A++++%7B%0A++++++++let+(left,+right)+=+v.split_at_checked(2).unwrap();%0A++++++++assert_eq!(left,+%5B1,+-2%5D);%0A++++++++assert_eq!(right,+%5B3,+-4,+5,+-6%5D);%0A++++%7D%0A++++%0A++++%7B%0A++++++++let+(left,+right)+=+v.split_at_checked(6).unwrap();%0A++++++++assert_eq!(left,+%5B1,+-2,+3,+-4,+5,+-6%5D);%0A++++++++assert_eq!(right,+%5B%5D);%0A++++%7D%0A++++%0A++++assert_eq!(None,+v.split_at_checked(7));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.split_at_mut_checked\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0\">1.80.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#2128\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.split_at_mut_checked\" class=\"fn\">split_at_mut_checked</a>(\n    &amp;mut self,\n    mid: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;(&amp;mut <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>, &amp;mut <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>)&gt;</h4></section></summary><div class=\"docblock\"><p>Divides one mutable slice into two at an index, returning <code>None</code> if the\nslice is too short.</p>\n<p>If <code>mid ≤ len</code> returns a pair of slices where the first will contain all\nindices from <code>[0, mid)</code> (excluding the index <code>mid</code> itself) and the\nsecond will contain all indices from <code>[mid, len)</code> (excluding the index\n<code>len</code> itself).</p>\n<p>Otherwise, if <code>mid &gt; len</code>, returns <code>None</code>.</p>\n<h5 id=\"examples-109\"><a class=\"doc-anchor\" href=\"#examples-109\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = [<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];\n\n<span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>((left, right)) = v.split_at_mut_checked(<span class=\"number\">2</span>) {\n    <span class=\"macro\">assert_eq!</span>(left, [<span class=\"number\">1</span>, <span class=\"number\">0</span>]);\n    <span class=\"macro\">assert_eq!</span>(right, [<span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n    left[<span class=\"number\">1</span>] = <span class=\"number\">2</span>;\n    right[<span class=\"number\">1</span>] = <span class=\"number\">4</span>;\n}\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, v.split_at_mut_checked(<span class=\"number\">7</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+%5B1,+0,+3,+0,+5,+6%5D;%0A++++%0A++++if+let+Some((left,+right))+=+v.split_at_mut_checked(2)+%7B%0A++++++++assert_eq!(left,+%5B1,+0%5D);%0A++++++++assert_eq!(right,+%5B3,+0,+5,+6%5D);%0A++++++++left%5B1%5D+=+2;%0A++++++++right%5B1%5D+=+4;%0A++++%7D%0A++++assert_eq!(v,+%5B1,+2,+3,+4,+5,+6%5D);%0A++++%0A++++assert_eq!(None,+v.split_at_mut_checked(7));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.split\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#2180-2182\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.split\" class=\"fn\">split</a>&lt;F&gt;(&amp;self, pred: F) -&gt; <a class=\"struct\" href=\"../slice/struct.Split.html\" title=\"struct std::slice::Split\">Split</a>&lt;'_, T, F&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Split<'_, T, F>\">ⓘ</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns an iterator over subslices separated by elements that match\n<code>pred</code>. The matched element is not contained in the subslices.</p>\n<h5 id=\"examples-110\"><a class=\"doc-anchor\" href=\"#examples-110\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>slice = [<span class=\"number\">10</span>, <span class=\"number\">40</span>, <span class=\"number\">33</span>, <span class=\"number\">20</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = slice.split(|num| num % <span class=\"number\">3 </span>== <span class=\"number\">0</span>);\n\n<span class=\"macro\">assert_eq!</span>(iter.next().unwrap(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">10</span>, <span class=\"number\">40</span>]);\n<span class=\"macro\">assert_eq!</span>(iter.next().unwrap(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">20</span>]);\n<span class=\"macro\">assert!</span>(iter.next().is_none());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+slice+=+%5B10,+40,+33,+20%5D;%0A++++let+mut+iter+=+slice.split(%7Cnum%7C+num+%25+3+==+0);%0A++++%0A++++assert_eq!(iter.next().unwrap(),+%26%5B10,+40%5D);%0A++++assert_eq!(iter.next().unwrap(),+%26%5B20%5D);%0A++++assert!(iter.next().is_none());%0A%7D&amp;edition=2021\">Run</a></div>\n<p>If the first element is matched, an empty slice will be the first item\nreturned by the iterator. Similarly, if the last element in the slice\nis matched, an empty slice will be the last item returned by the\niterator:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>slice = [<span class=\"number\">10</span>, <span class=\"number\">40</span>, <span class=\"number\">33</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = slice.split(|num| num % <span class=\"number\">3 </span>== <span class=\"number\">0</span>);\n\n<span class=\"macro\">assert_eq!</span>(iter.next().unwrap(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">10</span>, <span class=\"number\">40</span>]);\n<span class=\"macro\">assert_eq!</span>(iter.next().unwrap(), <span class=\"kw-2\">&amp;</span>[]);\n<span class=\"macro\">assert!</span>(iter.next().is_none());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+slice+=+%5B10,+40,+33%5D;%0A++++let+mut+iter+=+slice.split(%7Cnum%7C+num+%25+3+==+0);%0A++++%0A++++assert_eq!(iter.next().unwrap(),+%26%5B10,+40%5D);%0A++++assert_eq!(iter.next().unwrap(),+%26%5B%5D);%0A++++assert!(iter.next().is_none());%0A%7D&amp;edition=2021\">Run</a></div>\n<p>If two matched elements are directly adjacent, an empty slice will be\npresent between them:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>slice = [<span class=\"number\">10</span>, <span class=\"number\">6</span>, <span class=\"number\">33</span>, <span class=\"number\">20</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = slice.split(|num| num % <span class=\"number\">3 </span>== <span class=\"number\">0</span>);\n\n<span class=\"macro\">assert_eq!</span>(iter.next().unwrap(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">10</span>]);\n<span class=\"macro\">assert_eq!</span>(iter.next().unwrap(), <span class=\"kw-2\">&amp;</span>[]);\n<span class=\"macro\">assert_eq!</span>(iter.next().unwrap(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">20</span>]);\n<span class=\"macro\">assert!</span>(iter.next().is_none());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+slice+=+%5B10,+6,+33,+20%5D;%0A++++let+mut+iter+=+slice.split(%7Cnum%7C+num+%25+3+==+0);%0A++++%0A++++assert_eq!(iter.next().unwrap(),+%26%5B10%5D);%0A++++assert_eq!(iter.next().unwrap(),+%26%5B%5D);%0A++++assert_eq!(iter.next().unwrap(),+%26%5B20%5D);%0A++++assert!(iter.next().is_none());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.split_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#2202-2204\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.split_mut\" class=\"fn\">split_mut</a>&lt;F&gt;(&amp;mut self, pred: F) -&gt; <a class=\"struct\" href=\"../slice/struct.SplitMut.html\" title=\"struct std::slice::SplitMut\">SplitMut</a>&lt;'_, T, F&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"SplitMut<'_, T, F>\">ⓘ</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns an iterator over mutable subslices separated by elements that\nmatch <code>pred</code>. The matched element is not contained in the subslices.</p>\n<h5 id=\"examples-111\"><a class=\"doc-anchor\" href=\"#examples-111\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = [<span class=\"number\">10</span>, <span class=\"number\">40</span>, <span class=\"number\">30</span>, <span class=\"number\">20</span>, <span class=\"number\">60</span>, <span class=\"number\">50</span>];\n\n<span class=\"kw\">for </span>group <span class=\"kw\">in </span>v.split_mut(|num| <span class=\"kw-2\">*</span>num % <span class=\"number\">3 </span>== <span class=\"number\">0</span>) {\n    group[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;\n}\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"number\">1</span>, <span class=\"number\">40</span>, <span class=\"number\">30</span>, <span class=\"number\">1</span>, <span class=\"number\">60</span>, <span class=\"number\">1</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+%5B10,+40,+30,+20,+60,+50%5D;%0A++++%0A++++for+group+in+v.split_mut(%7Cnum%7C+*num+%25+3+==+0)+%7B%0A++++++++group%5B0%5D+=+1;%0A++++%7D%0A++++assert_eq!(v,+%5B1,+40,+30,+1,+60,+1%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.split_inclusive\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#2238-2240\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.split_inclusive\" class=\"fn\">split_inclusive</a>&lt;F&gt;(&amp;self, pred: F) -&gt; <a class=\"struct\" href=\"../slice/struct.SplitInclusive.html\" title=\"struct std::slice::SplitInclusive\">SplitInclusive</a>&lt;'_, T, F&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"SplitInclusive<'_, T, F>\">ⓘ</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns an iterator over subslices separated by elements that match\n<code>pred</code>. The matched element is contained in the end of the previous\nsubslice as a terminator.</p>\n<h5 id=\"examples-112\"><a class=\"doc-anchor\" href=\"#examples-112\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>slice = [<span class=\"number\">10</span>, <span class=\"number\">40</span>, <span class=\"number\">33</span>, <span class=\"number\">20</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = slice.split_inclusive(|num| num % <span class=\"number\">3 </span>== <span class=\"number\">0</span>);\n\n<span class=\"macro\">assert_eq!</span>(iter.next().unwrap(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">10</span>, <span class=\"number\">40</span>, <span class=\"number\">33</span>]);\n<span class=\"macro\">assert_eq!</span>(iter.next().unwrap(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">20</span>]);\n<span class=\"macro\">assert!</span>(iter.next().is_none());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+slice+=+%5B10,+40,+33,+20%5D;%0A++++let+mut+iter+=+slice.split_inclusive(%7Cnum%7C+num+%25+3+==+0);%0A++++%0A++++assert_eq!(iter.next().unwrap(),+%26%5B10,+40,+33%5D);%0A++++assert_eq!(iter.next().unwrap(),+%26%5B20%5D);%0A++++assert!(iter.next().is_none());%0A%7D&amp;edition=2021\">Run</a></div>\n<p>If the last element of the slice is matched,\nthat element will be considered the terminator of the preceding slice.\nThat slice will be the last item returned by the iterator.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>slice = [<span class=\"number\">3</span>, <span class=\"number\">10</span>, <span class=\"number\">40</span>, <span class=\"number\">33</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = slice.split_inclusive(|num| num % <span class=\"number\">3 </span>== <span class=\"number\">0</span>);\n\n<span class=\"macro\">assert_eq!</span>(iter.next().unwrap(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>(iter.next().unwrap(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">10</span>, <span class=\"number\">40</span>, <span class=\"number\">33</span>]);\n<span class=\"macro\">assert!</span>(iter.next().is_none());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+slice+=+%5B3,+10,+40,+33%5D;%0A++++let+mut+iter+=+slice.split_inclusive(%7Cnum%7C+num+%25+3+==+0);%0A++++%0A++++assert_eq!(iter.next().unwrap(),+%26%5B3%5D);%0A++++assert_eq!(iter.next().unwrap(),+%26%5B10,+40,+33%5D);%0A++++assert!(iter.next().is_none());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.split_inclusive_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#2262-2264\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.split_inclusive_mut\" class=\"fn\">split_inclusive_mut</a>&lt;F&gt;(&amp;mut self, pred: F) -&gt; <a class=\"struct\" href=\"../slice/struct.SplitInclusiveMut.html\" title=\"struct std::slice::SplitInclusiveMut\">SplitInclusiveMut</a>&lt;'_, T, F&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"SplitInclusiveMut<'_, T, F>\">ⓘ</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns an iterator over mutable subslices separated by elements that\nmatch <code>pred</code>. The matched element is contained in the previous\nsubslice as a terminator.</p>\n<h5 id=\"examples-113\"><a class=\"doc-anchor\" href=\"#examples-113\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = [<span class=\"number\">10</span>, <span class=\"number\">40</span>, <span class=\"number\">30</span>, <span class=\"number\">20</span>, <span class=\"number\">60</span>, <span class=\"number\">50</span>];\n\n<span class=\"kw\">for </span>group <span class=\"kw\">in </span>v.split_inclusive_mut(|num| <span class=\"kw-2\">*</span>num % <span class=\"number\">3 </span>== <span class=\"number\">0</span>) {\n    <span class=\"kw\">let </span>terminator_idx = group.len()-<span class=\"number\">1</span>;\n    group[terminator_idx] = <span class=\"number\">1</span>;\n}\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"number\">10</span>, <span class=\"number\">40</span>, <span class=\"number\">1</span>, <span class=\"number\">20</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+%5B10,+40,+30,+20,+60,+50%5D;%0A++++%0A++++for+group+in+v.split_inclusive_mut(%7Cnum%7C+*num+%25+3+==+0)+%7B%0A++++++++let+terminator_idx+=+group.len()-1;%0A++++++++group%5Bterminator_idx%5D+=+1;%0A++++%7D%0A++++assert_eq!(v,+%5B10,+40,+1,+20,+1,+1%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rsplit\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0\">1.27.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#2298-2300\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.rsplit\" class=\"fn\">rsplit</a>&lt;F&gt;(&amp;self, pred: F) -&gt; <a class=\"struct\" href=\"../slice/struct.RSplit.html\" title=\"struct std::slice::RSplit\">RSplit</a>&lt;'_, T, F&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"RSplit<'_, T, F>\">ⓘ</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns an iterator over subslices separated by elements that match\n<code>pred</code>, starting at the end of the slice and working backwards.\nThe matched element is not contained in the subslices.</p>\n<h5 id=\"examples-114\"><a class=\"doc-anchor\" href=\"#examples-114\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>slice = [<span class=\"number\">11</span>, <span class=\"number\">22</span>, <span class=\"number\">33</span>, <span class=\"number\">0</span>, <span class=\"number\">44</span>, <span class=\"number\">55</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>iter = slice.rsplit(|num| <span class=\"kw-2\">*</span>num == <span class=\"number\">0</span>);\n\n<span class=\"macro\">assert_eq!</span>(iter.next().unwrap(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">44</span>, <span class=\"number\">55</span>]);\n<span class=\"macro\">assert_eq!</span>(iter.next().unwrap(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">11</span>, <span class=\"number\">22</span>, <span class=\"number\">33</span>]);\n<span class=\"macro\">assert_eq!</span>(iter.next(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+slice+=+%5B11,+22,+33,+0,+44,+55%5D;%0A++++let+mut+iter+=+slice.rsplit(%7Cnum%7C+*num+==+0);%0A++++%0A++++assert_eq!(iter.next().unwrap(),+%26%5B44,+55%5D);%0A++++assert_eq!(iter.next().unwrap(),+%26%5B11,+22,+33%5D);%0A++++assert_eq!(iter.next(),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>As with <code>split()</code>, if the first or last element is matched, an empty\nslice will be the first (or last) item returned by the iterator.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>it = v.rsplit(|n| <span class=\"kw-2\">*</span>n % <span class=\"number\">2 </span>== <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(it.next().unwrap(), <span class=\"kw-2\">&amp;</span>[]);\n<span class=\"macro\">assert_eq!</span>(it.next().unwrap(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">3</span>, <span class=\"number\">5</span>]);\n<span class=\"macro\">assert_eq!</span>(it.next().unwrap(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">1</span>]);\n<span class=\"macro\">assert_eq!</span>(it.next().unwrap(), <span class=\"kw-2\">&amp;</span>[]);\n<span class=\"macro\">assert_eq!</span>(it.next(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v+=+%26%5B0,+1,+1,+2,+3,+5,+8%5D;%0A++++let+mut+it+=+v.rsplit(%7Cn%7C+*n+%25+2+==+0);%0A++++assert_eq!(it.next().unwrap(),+%26%5B%5D);%0A++++assert_eq!(it.next().unwrap(),+%26%5B3,+5%5D);%0A++++assert_eq!(it.next().unwrap(),+%26%5B1,+1%5D);%0A++++assert_eq!(it.next().unwrap(),+%26%5B%5D);%0A++++assert_eq!(it.next(),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rsplit_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0\">1.27.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#2324-2326\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.rsplit_mut\" class=\"fn\">rsplit_mut</a>&lt;F&gt;(&amp;mut self, pred: F) -&gt; <a class=\"struct\" href=\"../slice/struct.RSplitMut.html\" title=\"struct std::slice::RSplitMut\">RSplitMut</a>&lt;'_, T, F&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"RSplitMut<'_, T, F>\">ⓘ</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns an iterator over mutable subslices separated by elements that\nmatch <code>pred</code>, starting at the end of the slice and working\nbackwards. The matched element is not contained in the subslices.</p>\n<h5 id=\"examples-115\"><a class=\"doc-anchor\" href=\"#examples-115\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = [<span class=\"number\">100</span>, <span class=\"number\">400</span>, <span class=\"number\">300</span>, <span class=\"number\">200</span>, <span class=\"number\">600</span>, <span class=\"number\">500</span>];\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>count = <span class=\"number\">0</span>;\n<span class=\"kw\">for </span>group <span class=\"kw\">in </span>v.rsplit_mut(|num| <span class=\"kw-2\">*</span>num % <span class=\"number\">3 </span>== <span class=\"number\">0</span>) {\n    count += <span class=\"number\">1</span>;\n    group[<span class=\"number\">0</span>] = count;\n}\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"number\">3</span>, <span class=\"number\">400</span>, <span class=\"number\">300</span>, <span class=\"number\">2</span>, <span class=\"number\">600</span>, <span class=\"number\">1</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+%5B100,+400,+300,+200,+600,+500%5D;%0A++++%0A++++let+mut+count+=+0;%0A++++for+group+in+v.rsplit_mut(%7Cnum%7C+*num+%25+3+==+0)+%7B%0A++++++++count+%2B=+1;%0A++++++++group%5B0%5D+=+count;%0A++++%7D%0A++++assert_eq!(v,+%5B3,+400,+300,+2,+600,+1%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.splitn\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#2352-2354\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.splitn\" class=\"fn\">splitn</a>&lt;F&gt;(&amp;self, n: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, pred: F) -&gt; <a class=\"struct\" href=\"../slice/struct.SplitN.html\" title=\"struct std::slice::SplitN\">SplitN</a>&lt;'_, T, F&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"SplitN<'_, T, F>\">ⓘ</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns an iterator over subslices separated by elements that match\n<code>pred</code>, limited to returning at most <code>n</code> items. The matched element is\nnot contained in the subslices.</p>\n<p>The last element returned, if any, will contain the remainder of the\nslice.</p>\n<h5 id=\"examples-116\"><a class=\"doc-anchor\" href=\"#examples-116\">§</a>Examples</h5>\n<p>Print the slice split once by numbers divisible by 3 (i.e., <code>[10, 40]</code>,\n<code>[20, 60, 50]</code>):</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = [<span class=\"number\">10</span>, <span class=\"number\">40</span>, <span class=\"number\">30</span>, <span class=\"number\">20</span>, <span class=\"number\">60</span>, <span class=\"number\">50</span>];\n\n<span class=\"kw\">for </span>group <span class=\"kw\">in </span>v.splitn(<span class=\"number\">2</span>, |num| <span class=\"kw-2\">*</span>num % <span class=\"number\">3 </span>== <span class=\"number\">0</span>) {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{group:?}\"</span>);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v+=+%5B10,+40,+30,+20,+60,+50%5D;%0A++++%0A++++for+group+in+v.splitn(2,+%7Cnum%7C+*num+%25+3+==+0)+%7B%0A++++++++println!(%22%7Bgroup:?%7D%22);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.splitn_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#2378-2380\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.splitn_mut\" class=\"fn\">splitn_mut</a>&lt;F&gt;(&amp;mut self, n: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, pred: F) -&gt; <a class=\"struct\" href=\"../slice/struct.SplitNMut.html\" title=\"struct std::slice::SplitNMut\">SplitNMut</a>&lt;'_, T, F&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"SplitNMut<'_, T, F>\">ⓘ</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns an iterator over mutable subslices separated by elements that match\n<code>pred</code>, limited to returning at most <code>n</code> items. The matched element is\nnot contained in the subslices.</p>\n<p>The last element returned, if any, will contain the remainder of the\nslice.</p>\n<h5 id=\"examples-117\"><a class=\"doc-anchor\" href=\"#examples-117\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = [<span class=\"number\">10</span>, <span class=\"number\">40</span>, <span class=\"number\">30</span>, <span class=\"number\">20</span>, <span class=\"number\">60</span>, <span class=\"number\">50</span>];\n\n<span class=\"kw\">for </span>group <span class=\"kw\">in </span>v.splitn_mut(<span class=\"number\">2</span>, |num| <span class=\"kw-2\">*</span>num % <span class=\"number\">3 </span>== <span class=\"number\">0</span>) {\n    group[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;\n}\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"number\">1</span>, <span class=\"number\">40</span>, <span class=\"number\">30</span>, <span class=\"number\">1</span>, <span class=\"number\">60</span>, <span class=\"number\">50</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+%5B10,+40,+30,+20,+60,+50%5D;%0A++++%0A++++for+group+in+v.splitn_mut(2,+%7Cnum%7C+*num+%25+3+==+0)+%7B%0A++++++++group%5B0%5D+=+1;%0A++++%7D%0A++++assert_eq!(v,+%5B1,+40,+30,+1,+60,+50%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rsplitn\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#2407-2409\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.rsplitn\" class=\"fn\">rsplitn</a>&lt;F&gt;(&amp;self, n: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, pred: F) -&gt; <a class=\"struct\" href=\"../slice/struct.RSplitN.html\" title=\"struct std::slice::RSplitN\">RSplitN</a>&lt;'_, T, F&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"RSplitN<'_, T, F>\">ⓘ</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns an iterator over subslices separated by elements that match\n<code>pred</code> limited to returning at most <code>n</code> items. This starts at the end of\nthe slice and works backwards. The matched element is not contained in\nthe subslices.</p>\n<p>The last element returned, if any, will contain the remainder of the\nslice.</p>\n<h5 id=\"examples-118\"><a class=\"doc-anchor\" href=\"#examples-118\">§</a>Examples</h5>\n<p>Print the slice split once, starting from the end, by numbers divisible\nby 3 (i.e., <code>[50]</code>, <code>[10, 40, 30, 20]</code>):</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = [<span class=\"number\">10</span>, <span class=\"number\">40</span>, <span class=\"number\">30</span>, <span class=\"number\">20</span>, <span class=\"number\">60</span>, <span class=\"number\">50</span>];\n\n<span class=\"kw\">for </span>group <span class=\"kw\">in </span>v.rsplitn(<span class=\"number\">2</span>, |num| <span class=\"kw-2\">*</span>num % <span class=\"number\">3 </span>== <span class=\"number\">0</span>) {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{group:?}\"</span>);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v+=+%5B10,+40,+30,+20,+60,+50%5D;%0A++++%0A++++for+group+in+v.rsplitn(2,+%7Cnum%7C+*num+%25+3+==+0)+%7B%0A++++++++println!(%22%7Bgroup:?%7D%22);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rsplitn_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#2434-2436\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.rsplitn_mut\" class=\"fn\">rsplitn_mut</a>&lt;F&gt;(&amp;mut self, n: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, pred: F) -&gt; <a class=\"struct\" href=\"../slice/struct.RSplitNMut.html\" title=\"struct std::slice::RSplitNMut\">RSplitNMut</a>&lt;'_, T, F&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"RSplitNMut<'_, T, F>\">ⓘ</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns an iterator over subslices separated by elements that match\n<code>pred</code> limited to returning at most <code>n</code> items. This starts at the end of\nthe slice and works backwards. The matched element is not contained in\nthe subslices.</p>\n<p>The last element returned, if any, will contain the remainder of the\nslice.</p>\n<h5 id=\"examples-119\"><a class=\"doc-anchor\" href=\"#examples-119\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = [<span class=\"number\">10</span>, <span class=\"number\">40</span>, <span class=\"number\">30</span>, <span class=\"number\">20</span>, <span class=\"number\">60</span>, <span class=\"number\">50</span>];\n\n<span class=\"kw\">for </span>group <span class=\"kw\">in </span>s.rsplitn_mut(<span class=\"number\">2</span>, |num| <span class=\"kw-2\">*</span>num % <span class=\"number\">3 </span>== <span class=\"number\">0</span>) {\n    group[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;\n}\n<span class=\"macro\">assert_eq!</span>(s, [<span class=\"number\">1</span>, <span class=\"number\">40</span>, <span class=\"number\">30</span>, <span class=\"number\">20</span>, <span class=\"number\">60</span>, <span class=\"number\">1</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+s+=+%5B10,+40,+30,+20,+60,+50%5D;%0A++++%0A++++for+group+in+s.rsplitn_mut(2,+%7Cnum%7C+*num+%25+3+==+0)+%7B%0A++++++++group%5B0%5D+=+1;%0A++++%7D%0A++++assert_eq!(s,+%5B1,+40,+30,+20,+60,+1%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.split_once\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#2461-2463\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.split_once\" class=\"fn\">split_once</a>&lt;F&gt;(&amp;self, pred: F) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;(&amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>, &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>)&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_split_once</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/112811\">#112811</a>)</span></div></span></summary><div class=\"docblock\"><p>Splits the slice on the first element that matches the specified\npredicate.</p>\n<p>If any matching elements are present in the slice, returns the prefix\nbefore the match and suffix after. The matching element itself is not\nincluded. If no elements match, returns <code>None</code>.</p>\n<h5 id=\"examples-120\"><a class=\"doc-anchor\" href=\"#examples-120\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(slice_split_once)]\n</span><span class=\"kw\">let </span>s = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>];\n<span class=\"macro\">assert_eq!</span>(s.split_once(|<span class=\"kw-2\">&amp;</span>x| x == <span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>((\n    <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>][..],\n    <span class=\"kw-2\">&amp;</span>[<span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>][..]\n)));\n<span class=\"macro\">assert_eq!</span>(s.split_once(|<span class=\"kw-2\">&amp;</span>x| x == <span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(slice_split_once)%5D%0Afn+main()+%7B%0A++++let+s+=+%5B1,+2,+3,+2,+4%5D;%0A++++assert_eq!(s.split_once(%7C%26x%7C+x+==+2),+Some((%0A++++++++%26%5B1%5D%5B..%5D,%0A++++++++%26%5B3,+2,+4%5D%5B..%5D%0A++++)));%0A++++assert_eq!(s.split_once(%7C%26x%7C+x+==+0),+None);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rsplit_once\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#2489-2491\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.rsplit_once\" class=\"fn\">rsplit_once</a>&lt;F&gt;(&amp;self, pred: F) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;(&amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>, &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>)&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_split_once</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/112811\">#112811</a>)</span></div></span></summary><div class=\"docblock\"><p>Splits the slice on the last element that matches the specified\npredicate.</p>\n<p>If any matching elements are present in the slice, returns the prefix\nbefore the match and suffix after. The matching element itself is not\nincluded. If no elements match, returns <code>None</code>.</p>\n<h5 id=\"examples-121\"><a class=\"doc-anchor\" href=\"#examples-121\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(slice_split_once)]\n</span><span class=\"kw\">let </span>s = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>];\n<span class=\"macro\">assert_eq!</span>(s.rsplit_once(|<span class=\"kw-2\">&amp;</span>x| x == <span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>((\n    <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>][..],\n    <span class=\"kw-2\">&amp;</span>[<span class=\"number\">4</span>][..]\n)));\n<span class=\"macro\">assert_eq!</span>(s.rsplit_once(|<span class=\"kw-2\">&amp;</span>x| x == <span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(slice_split_once)%5D%0Afn+main()+%7B%0A++++let+s+=+%5B1,+2,+3,+2,+4%5D;%0A++++assert_eq!(s.rsplit_once(%7C%26x%7C+x+==+2),+Some((%0A++++++++%26%5B1,+2,+3%5D%5B..%5D,%0A++++++++%26%5B4%5D%5B..%5D%0A++++)));%0A++++assert_eq!(s.rsplit_once(%7C%26x%7C+x+==+0),+None);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.contains\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#2525-2527\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.contains\" class=\"fn\">contains</a>(&amp;self, x: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the slice contains an element with the given value.</p>\n<p>This operation is <em>O</em>(<em>n</em>).</p>\n<p>Note that if you have a sorted slice, <a href=\"../primitive.slice.html#method.binary_search\" title=\"method slice::binary_search\"><code>binary_search</code></a> may be faster.</p>\n<h5 id=\"examples-122\"><a class=\"doc-anchor\" href=\"#examples-122\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = [<span class=\"number\">10</span>, <span class=\"number\">40</span>, <span class=\"number\">30</span>];\n<span class=\"macro\">assert!</span>(v.contains(<span class=\"kw-2\">&amp;</span><span class=\"number\">30</span>));\n<span class=\"macro\">assert!</span>(!v.contains(<span class=\"kw-2\">&amp;</span><span class=\"number\">50</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v+=+%5B10,+40,+30%5D;%0A++++assert!(v.contains(%2630));%0A++++assert!(!v.contains(%2650));%0A%7D&amp;edition=2021\">Run</a></div>\n<p>If you do not have a <code>&amp;T</code>, but some other value that you can compare\nwith one (for example, <code>String</code> implements <code>PartialEq&lt;str&gt;</code>), you can\nuse <code>iter().any</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = [String::from(<span class=\"string\">\"hello\"</span>), String::from(<span class=\"string\">\"world\"</span>)]; <span class=\"comment\">// slice of `String`\n</span><span class=\"macro\">assert!</span>(v.iter().any(|e| e == <span class=\"string\">\"hello\"</span>)); <span class=\"comment\">// search with `&amp;str`\n</span><span class=\"macro\">assert!</span>(!v.iter().any(|e| e == <span class=\"string\">\"hi\"</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v+=+%5BString::from(%22hello%22),+String::from(%22world%22)%5D;+//+slice+of+%60String%60%0A++++assert!(v.iter().any(%7Ce%7C+e+==+%22hello%22));+//+search+with+%60%26str%60%0A++++assert!(!v.iter().any(%7Ce%7C+e+==+%22hi%22));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.starts_with\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#2555-2557\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.starts_with\" class=\"fn\">starts_with</a>(&amp;self, needle: &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>needle</code> is a prefix of the slice or equal to the slice.</p>\n<h5 id=\"examples-123\"><a class=\"doc-anchor\" href=\"#examples-123\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = [<span class=\"number\">10</span>, <span class=\"number\">40</span>, <span class=\"number\">30</span>];\n<span class=\"macro\">assert!</span>(v.starts_with(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">10</span>]));\n<span class=\"macro\">assert!</span>(v.starts_with(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">10</span>, <span class=\"number\">40</span>]));\n<span class=\"macro\">assert!</span>(v.starts_with(<span class=\"kw-2\">&amp;</span>v));\n<span class=\"macro\">assert!</span>(!v.starts_with(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">50</span>]));\n<span class=\"macro\">assert!</span>(!v.starts_with(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">10</span>, <span class=\"number\">50</span>]));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v+=+%5B10,+40,+30%5D;%0A++++assert!(v.starts_with(%26%5B10%5D));%0A++++assert!(v.starts_with(%26%5B10,+40%5D));%0A++++assert!(v.starts_with(%26v));%0A++++assert!(!v.starts_with(%26%5B50%5D));%0A++++assert!(!v.starts_with(%26%5B10,+50%5D));%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Always returns <code>true</code> if <code>needle</code> is an empty slice:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"kw-2\">&amp;</span>[<span class=\"number\">10</span>, <span class=\"number\">40</span>, <span class=\"number\">30</span>];\n<span class=\"macro\">assert!</span>(v.starts_with(<span class=\"kw-2\">&amp;</span>[]));\n<span class=\"kw\">let </span>v: <span class=\"kw-2\">&amp;</span>[u8] = <span class=\"kw-2\">&amp;</span>[];\n<span class=\"macro\">assert!</span>(v.starts_with(<span class=\"kw-2\">&amp;</span>[]));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v+=+%26%5B10,+40,+30%5D;%0A++++assert!(v.starts_with(%26%5B%5D));%0A++++let+v:+%26%5Bu8%5D+=+%26%5B%5D;%0A++++assert!(v.starts_with(%26%5B%5D));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ends_with\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#2586-2588\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.ends_with\" class=\"fn\">ends_with</a>(&amp;self, needle: &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>needle</code> is a suffix of the slice or equal to the slice.</p>\n<h5 id=\"examples-124\"><a class=\"doc-anchor\" href=\"#examples-124\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = [<span class=\"number\">10</span>, <span class=\"number\">40</span>, <span class=\"number\">30</span>];\n<span class=\"macro\">assert!</span>(v.ends_with(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">30</span>]));\n<span class=\"macro\">assert!</span>(v.ends_with(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">40</span>, <span class=\"number\">30</span>]));\n<span class=\"macro\">assert!</span>(v.ends_with(<span class=\"kw-2\">&amp;</span>v));\n<span class=\"macro\">assert!</span>(!v.ends_with(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">50</span>]));\n<span class=\"macro\">assert!</span>(!v.ends_with(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">50</span>, <span class=\"number\">30</span>]));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v+=+%5B10,+40,+30%5D;%0A++++assert!(v.ends_with(%26%5B30%5D));%0A++++assert!(v.ends_with(%26%5B40,+30%5D));%0A++++assert!(v.ends_with(%26v));%0A++++assert!(!v.ends_with(%26%5B50%5D));%0A++++assert!(!v.ends_with(%26%5B50,+30%5D));%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Always returns <code>true</code> if <code>needle</code> is an empty slice:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"kw-2\">&amp;</span>[<span class=\"number\">10</span>, <span class=\"number\">40</span>, <span class=\"number\">30</span>];\n<span class=\"macro\">assert!</span>(v.ends_with(<span class=\"kw-2\">&amp;</span>[]));\n<span class=\"kw\">let </span>v: <span class=\"kw-2\">&amp;</span>[u8] = <span class=\"kw-2\">&amp;</span>[];\n<span class=\"macro\">assert!</span>(v.ends_with(<span class=\"kw-2\">&amp;</span>[]));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v+=+%26%5B10,+40,+30%5D;%0A++++assert!(v.ends_with(%26%5B%5D));%0A++++let+v:+%26%5Bu8%5D+=+%26%5B%5D;%0A++++assert!(v.ends_with(%26%5B%5D));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.strip_prefix\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#2618-2620\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.strip_prefix\" class=\"fn\">strip_prefix</a>&lt;P&gt;(&amp;self, prefix: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;P</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/slice/trait.SlicePattern.html\" title=\"trait core::slice::SlicePattern\">SlicePattern</a>&lt;Item = T&gt; + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    T: <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns a subslice with the prefix removed.</p>\n<p>If the slice starts with <code>prefix</code>, returns the subslice after the prefix, wrapped in <code>Some</code>.\nIf <code>prefix</code> is empty, simply returns the original slice. If <code>prefix</code> is equal to the\noriginal slice, returns an empty slice.</p>\n<p>If the slice does not start with <code>prefix</code>, returns <code>None</code>.</p>\n<h5 id=\"examples-125\"><a class=\"doc-anchor\" href=\"#examples-125\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"kw-2\">&amp;</span>[<span class=\"number\">10</span>, <span class=\"number\">40</span>, <span class=\"number\">30</span>];\n<span class=\"macro\">assert_eq!</span>(v.strip_prefix(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">10</span>]), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">40</span>, <span class=\"number\">30</span>][..]));\n<span class=\"macro\">assert_eq!</span>(v.strip_prefix(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">10</span>, <span class=\"number\">40</span>]), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">30</span>][..]));\n<span class=\"macro\">assert_eq!</span>(v.strip_prefix(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">10</span>, <span class=\"number\">40</span>, <span class=\"number\">30</span>]), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span>[][..]));\n<span class=\"macro\">assert_eq!</span>(v.strip_prefix(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">50</span>]), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(v.strip_prefix(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">10</span>, <span class=\"number\">50</span>]), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>prefix : <span class=\"kw-2\">&amp;</span>str = <span class=\"string\">\"he\"</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">b\"hello\"</span>.strip_prefix(prefix.as_bytes()),\n           <span class=\"prelude-val\">Some</span>(<span class=\"string\">b\"llo\"</span>.as_ref()));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v+=+%26%5B10,+40,+30%5D;%0A++++assert_eq!(v.strip_prefix(%26%5B10%5D),+Some(%26%5B40,+30%5D%5B..%5D));%0A++++assert_eq!(v.strip_prefix(%26%5B10,+40%5D),+Some(%26%5B30%5D%5B..%5D));%0A++++assert_eq!(v.strip_prefix(%26%5B10,+40,+30%5D),+Some(%26%5B%5D%5B..%5D));%0A++++assert_eq!(v.strip_prefix(%26%5B50%5D),+None);%0A++++assert_eq!(v.strip_prefix(%26%5B10,+50%5D),+None);%0A++++%0A++++let+prefix+:+%26str+=+%22he%22;%0A++++assert_eq!(b%22hello%22.strip_prefix(prefix.as_bytes()),%0A+++++++++++++++Some(b%22llo%22.as_ref()));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.strip_suffix\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#2654-2656\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.strip_suffix\" class=\"fn\">strip_suffix</a>&lt;P&gt;(&amp;self, suffix: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;P</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/slice/trait.SlicePattern.html\" title=\"trait core::slice::SlicePattern\">SlicePattern</a>&lt;Item = T&gt; + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    T: <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns a subslice with the suffix removed.</p>\n<p>If the slice ends with <code>suffix</code>, returns the subslice before the suffix, wrapped in <code>Some</code>.\nIf <code>suffix</code> is empty, simply returns the original slice. If <code>suffix</code> is equal to the\noriginal slice, returns an empty slice.</p>\n<p>If the slice does not end with <code>suffix</code>, returns <code>None</code>.</p>\n<h5 id=\"examples-126\"><a class=\"doc-anchor\" href=\"#examples-126\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"kw-2\">&amp;</span>[<span class=\"number\">10</span>, <span class=\"number\">40</span>, <span class=\"number\">30</span>];\n<span class=\"macro\">assert_eq!</span>(v.strip_suffix(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">30</span>]), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">10</span>, <span class=\"number\">40</span>][..]));\n<span class=\"macro\">assert_eq!</span>(v.strip_suffix(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">40</span>, <span class=\"number\">30</span>]), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">10</span>][..]));\n<span class=\"macro\">assert_eq!</span>(v.strip_suffix(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">10</span>, <span class=\"number\">40</span>, <span class=\"number\">30</span>]), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span>[][..]));\n<span class=\"macro\">assert_eq!</span>(v.strip_suffix(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">50</span>]), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(v.strip_suffix(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">50</span>, <span class=\"number\">30</span>]), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v+=+%26%5B10,+40,+30%5D;%0A++++assert_eq!(v.strip_suffix(%26%5B30%5D),+Some(%26%5B10,+40%5D%5B..%5D));%0A++++assert_eq!(v.strip_suffix(%26%5B40,+30%5D),+Some(%26%5B10%5D%5B..%5D));%0A++++assert_eq!(v.strip_suffix(%26%5B10,+40,+30%5D),+Some(%26%5B%5D%5B..%5D));%0A++++assert_eq!(v.strip_suffix(%26%5B50%5D),+None);%0A++++assert_eq!(v.strip_suffix(%26%5B50,+30%5D),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.binary_search\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#2740-2742\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.binary_search\" class=\"fn\">binary_search</a>(&amp;self, x: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,</div></h4></section></summary><div class=\"docblock\"><p>Binary searches this slice for a given element.\nIf the slice is not sorted, the returned result is unspecified and\nmeaningless.</p>\n<p>If the value is found then <a href=\"../result/enum.Result.html#variant.Ok\" title=\"variant std::result::Result::Ok\"><code>Result::Ok</code></a> is returned, containing the\nindex of the matching element. If there are multiple matches, then any\none of the matches could be returned. The index is chosen\ndeterministically, but is subject to change in future versions of Rust.\nIf the value is not found then <a href=\"../result/enum.Result.html#variant.Err\" title=\"variant std::result::Result::Err\"><code>Result::Err</code></a> is returned, containing\nthe index where a matching element could be inserted while maintaining\nsorted order.</p>\n<p>See also <a href=\"../primitive.slice.html#method.binary_search_by\" title=\"method slice::binary_search_by\"><code>binary_search_by</code></a>, <a href=\"../primitive.slice.html#method.binary_search_by_key\" title=\"method slice::binary_search_by_key\"><code>binary_search_by_key</code></a>, and <a href=\"../primitive.slice.html#method.partition_point\" title=\"method slice::partition_point\"><code>partition_point</code></a>.</p>\n<h5 id=\"examples-127\"><a class=\"doc-anchor\" href=\"#examples-127\">§</a>Examples</h5>\n<p>Looks up a series of four elements. The first is found, with a\nuniquely determined position; the second and third are not\nfound; the fourth could match any position in <code>[1, 4]</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">13</span>, <span class=\"number\">21</span>, <span class=\"number\">34</span>, <span class=\"number\">55</span>];\n\n<span class=\"macro\">assert_eq!</span>(s.binary_search(<span class=\"kw-2\">&amp;</span><span class=\"number\">13</span>),  <span class=\"prelude-val\">Ok</span>(<span class=\"number\">9</span>));\n<span class=\"macro\">assert_eq!</span>(s.binary_search(<span class=\"kw-2\">&amp;</span><span class=\"number\">4</span>),   <span class=\"prelude-val\">Err</span>(<span class=\"number\">7</span>));\n<span class=\"macro\">assert_eq!</span>(s.binary_search(<span class=\"kw-2\">&amp;</span><span class=\"number\">100</span>), <span class=\"prelude-val\">Err</span>(<span class=\"number\">13</span>));\n<span class=\"kw\">let </span>r = s.binary_search(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>);\n<span class=\"macro\">assert!</span>(<span class=\"kw\">match </span>r { <span class=\"prelude-val\">Ok</span>(<span class=\"number\">1</span>..=<span class=\"number\">4</span>) =&gt; <span class=\"bool-val\">true</span>, <span class=\"kw\">_ </span>=&gt; <span class=\"bool-val\">false</span>, });</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%5B0,+1,+1,+1,+1,+2,+3,+5,+8,+13,+21,+34,+55%5D;%0A++++%0A++++assert_eq!(s.binary_search(%2613),++Ok(9));%0A++++assert_eq!(s.binary_search(%264),+++Err(7));%0A++++assert_eq!(s.binary_search(%26100),+Err(13));%0A++++let+r+=+s.binary_search(%261);%0A++++assert!(match+r+%7B+Ok(1..=4)+=%3E+true,+_+=%3E+false,+%7D);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>If you want to find that whole <em>range</em> of matching items, rather than\nan arbitrary matching one, that can be done using <a href=\"../primitive.slice.html#method.partition_point\" title=\"method slice::partition_point\"><code>partition_point</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">13</span>, <span class=\"number\">21</span>, <span class=\"number\">34</span>, <span class=\"number\">55</span>];\n\n<span class=\"kw\">let </span>low = s.partition_point(|x| x &lt; <span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(low, <span class=\"number\">1</span>);\n<span class=\"kw\">let </span>high = s.partition_point(|x| x &lt;= <span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(high, <span class=\"number\">5</span>);\n<span class=\"kw\">let </span>r = s.binary_search(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>);\n<span class=\"macro\">assert!</span>((low..high).contains(<span class=\"kw-2\">&amp;</span>r.unwrap()));\n\n<span class=\"macro\">assert!</span>(s[..low].iter().all(|<span class=\"kw-2\">&amp;</span>x| x &lt; <span class=\"number\">1</span>));\n<span class=\"macro\">assert!</span>(s[low..high].iter().all(|<span class=\"kw-2\">&amp;</span>x| x == <span class=\"number\">1</span>));\n<span class=\"macro\">assert!</span>(s[high..].iter().all(|<span class=\"kw-2\">&amp;</span>x| x &gt; <span class=\"number\">1</span>));\n\n<span class=\"comment\">// For something not found, the \"range\" of equal items is empty\n</span><span class=\"macro\">assert_eq!</span>(s.partition_point(|x| x &lt; <span class=\"kw-2\">&amp;</span><span class=\"number\">11</span>), <span class=\"number\">9</span>);\n<span class=\"macro\">assert_eq!</span>(s.partition_point(|x| x &lt;= <span class=\"kw-2\">&amp;</span><span class=\"number\">11</span>), <span class=\"number\">9</span>);\n<span class=\"macro\">assert_eq!</span>(s.binary_search(<span class=\"kw-2\">&amp;</span><span class=\"number\">11</span>), <span class=\"prelude-val\">Err</span>(<span class=\"number\">9</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%5B0,+1,+1,+1,+1,+2,+3,+5,+8,+13,+21,+34,+55%5D;%0A++++%0A++++let+low+=+s.partition_point(%7Cx%7C+x+%3C+%261);%0A++++assert_eq!(low,+1);%0A++++let+high+=+s.partition_point(%7Cx%7C+x+%3C=+%261);%0A++++assert_eq!(high,+5);%0A++++let+r+=+s.binary_search(%261);%0A++++assert!((low..high).contains(%26r.unwrap()));%0A++++%0A++++assert!(s%5B..low%5D.iter().all(%7C%26x%7C+x+%3C+1));%0A++++assert!(s%5Blow..high%5D.iter().all(%7C%26x%7C+x+==+1));%0A++++assert!(s%5Bhigh..%5D.iter().all(%7C%26x%7C+x+%3E+1));%0A++++%0A++++//+For+something+not+found,+the+%22range%22+of+equal+items+is+empty%0A++++assert_eq!(s.partition_point(%7Cx%7C+x+%3C+%2611),+9);%0A++++assert_eq!(s.partition_point(%7Cx%7C+x+%3C=+%2611),+9);%0A++++assert_eq!(s.binary_search(%2611),+Err(9));%0A%7D&amp;edition=2021\">Run</a></div>\n<p>If you want to insert an item to a sorted vector, while maintaining\nsort order, consider using <a href=\"../primitive.slice.html#method.partition_point\" title=\"method slice::partition_point\"><code>partition_point</code></a>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">13</span>, <span class=\"number\">21</span>, <span class=\"number\">34</span>, <span class=\"number\">55</span>];\n<span class=\"kw\">let </span>num = <span class=\"number\">42</span>;\n<span class=\"kw\">let </span>idx = s.partition_point(|<span class=\"kw-2\">&amp;</span>x| x &lt;= num);\n<span class=\"comment\">// If `num` is unique, `s.partition_point(|&amp;x| x &lt; num)` (with `&lt;`) is equivalent to\n// `s.binary_search(&amp;num).unwrap_or_else(|x| x)`, but using `&lt;=` will allow `insert`\n// to shift less elements.\n</span>s.insert(idx, num);\n<span class=\"macro\">assert_eq!</span>(s, [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">13</span>, <span class=\"number\">21</span>, <span class=\"number\">34</span>, <span class=\"number\">42</span>, <span class=\"number\">55</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+s+=+vec!%5B0,+1,+1,+1,+1,+2,+3,+5,+8,+13,+21,+34,+55%5D;%0A++++let+num+=+42;%0A++++let+idx+=+s.partition_point(%7C%26x%7C+x+%3C=+num);%0A++++//+If+%60num%60+is+unique,+%60s.partition_point(%7C%26x%7C+x+%3C+num)%60+(with+%60%3C%60)+is+equivalent+to%0A++++//+%60s.binary_search(%26num).unwrap_or_else(%7Cx%7C+x)%60,+but+using+%60%3C=%60+will+allow+%60insert%60%0A++++//+to+shift+less+elements.%0A++++s.insert(idx,+num);%0A++++assert_eq!(s,+%5B0,+1,+1,+1,+1,+2,+3,+5,+8,+13,+21,+34,+42,+55%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.binary_search_by\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#2791-2793\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.binary_search_by\" class=\"fn\">binary_search_by</a>&lt;'a, F&gt;(&amp;'a self, f: F) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a T</a>) -&gt; <a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>,</div></h4></section></summary><div class=\"docblock\"><p>Binary searches this slice with a comparator function.</p>\n<p>The comparator function should return an order code that indicates\nwhether its argument is <code>Less</code>, <code>Equal</code> or <code>Greater</code> the desired\ntarget.\nIf the slice is not sorted or if the comparator function does not\nimplement an order consistent with the sort order of the underlying\nslice, the returned result is unspecified and meaningless.</p>\n<p>If the value is found then <a href=\"../result/enum.Result.html#variant.Ok\" title=\"variant std::result::Result::Ok\"><code>Result::Ok</code></a> is returned, containing the\nindex of the matching element. If there are multiple matches, then any\none of the matches could be returned. The index is chosen\ndeterministically, but is subject to change in future versions of Rust.\nIf the value is not found then <a href=\"../result/enum.Result.html#variant.Err\" title=\"variant std::result::Result::Err\"><code>Result::Err</code></a> is returned, containing\nthe index where a matching element could be inserted while maintaining\nsorted order.</p>\n<p>See also <a href=\"../primitive.slice.html#method.binary_search\" title=\"method slice::binary_search\"><code>binary_search</code></a>, <a href=\"../primitive.slice.html#method.binary_search_by_key\" title=\"method slice::binary_search_by_key\"><code>binary_search_by_key</code></a>, and <a href=\"../primitive.slice.html#method.partition_point\" title=\"method slice::partition_point\"><code>partition_point</code></a>.</p>\n<h5 id=\"examples-128\"><a class=\"doc-anchor\" href=\"#examples-128\">§</a>Examples</h5>\n<p>Looks up a series of four elements. The first is found, with a\nuniquely determined position; the second and third are not\nfound; the fourth could match any position in <code>[1, 4]</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">13</span>, <span class=\"number\">21</span>, <span class=\"number\">34</span>, <span class=\"number\">55</span>];\n\n<span class=\"kw\">let </span>seek = <span class=\"number\">13</span>;\n<span class=\"macro\">assert_eq!</span>(s.binary_search_by(|probe| probe.cmp(<span class=\"kw-2\">&amp;</span>seek)), <span class=\"prelude-val\">Ok</span>(<span class=\"number\">9</span>));\n<span class=\"kw\">let </span>seek = <span class=\"number\">4</span>;\n<span class=\"macro\">assert_eq!</span>(s.binary_search_by(|probe| probe.cmp(<span class=\"kw-2\">&amp;</span>seek)), <span class=\"prelude-val\">Err</span>(<span class=\"number\">7</span>));\n<span class=\"kw\">let </span>seek = <span class=\"number\">100</span>;\n<span class=\"macro\">assert_eq!</span>(s.binary_search_by(|probe| probe.cmp(<span class=\"kw-2\">&amp;</span>seek)), <span class=\"prelude-val\">Err</span>(<span class=\"number\">13</span>));\n<span class=\"kw\">let </span>seek = <span class=\"number\">1</span>;\n<span class=\"kw\">let </span>r = s.binary_search_by(|probe| probe.cmp(<span class=\"kw-2\">&amp;</span>seek));\n<span class=\"macro\">assert!</span>(<span class=\"kw\">match </span>r { <span class=\"prelude-val\">Ok</span>(<span class=\"number\">1</span>..=<span class=\"number\">4</span>) =&gt; <span class=\"bool-val\">true</span>, <span class=\"kw\">_ </span>=&gt; <span class=\"bool-val\">false</span>, });</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%5B0,+1,+1,+1,+1,+2,+3,+5,+8,+13,+21,+34,+55%5D;%0A++++%0A++++let+seek+=+13;%0A++++assert_eq!(s.binary_search_by(%7Cprobe%7C+probe.cmp(%26seek)),+Ok(9));%0A++++let+seek+=+4;%0A++++assert_eq!(s.binary_search_by(%7Cprobe%7C+probe.cmp(%26seek)),+Err(7));%0A++++let+seek+=+100;%0A++++assert_eq!(s.binary_search_by(%7Cprobe%7C+probe.cmp(%26seek)),+Err(13));%0A++++let+seek+=+1;%0A++++let+r+=+s.binary_search_by(%7Cprobe%7C+probe.cmp(%26seek));%0A++++assert!(match+r+%7B+Ok(1..=4)+=%3E+true,+_+=%3E+false,+%7D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.binary_search_by_key\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#2879-2882\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.binary_search_by_key\" class=\"fn\">binary_search_by_key</a>&lt;'a, B, F&gt;(\n    &amp;'a self,\n    b: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;B</a>,\n    f: F,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a T</a>) -&gt; B,\n    B: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,</div></h4></section></summary><div class=\"docblock\"><p>Binary searches this slice with a key extraction function.</p>\n<p>Assumes that the slice is sorted by the key, for instance with\n<a href=\"../primitive.slice.html#method.sort_by_key\" title=\"method slice::sort_by_key\"><code>sort_by_key</code></a> using the same key extraction function.\nIf the slice is not sorted by the key, the returned result is\nunspecified and meaningless.</p>\n<p>If the value is found then <a href=\"../result/enum.Result.html#variant.Ok\" title=\"variant std::result::Result::Ok\"><code>Result::Ok</code></a> is returned, containing the\nindex of the matching element. If there are multiple matches, then any\none of the matches could be returned. The index is chosen\ndeterministically, but is subject to change in future versions of Rust.\nIf the value is not found then <a href=\"../result/enum.Result.html#variant.Err\" title=\"variant std::result::Result::Err\"><code>Result::Err</code></a> is returned, containing\nthe index where a matching element could be inserted while maintaining\nsorted order.</p>\n<p>See also <a href=\"../primitive.slice.html#method.binary_search\" title=\"method slice::binary_search\"><code>binary_search</code></a>, <a href=\"../primitive.slice.html#method.binary_search_by\" title=\"method slice::binary_search_by\"><code>binary_search_by</code></a>, and <a href=\"../primitive.slice.html#method.partition_point\" title=\"method slice::partition_point\"><code>partition_point</code></a>.</p>\n<h5 id=\"examples-129\"><a class=\"doc-anchor\" href=\"#examples-129\">§</a>Examples</h5>\n<p>Looks up a series of four elements in a slice of pairs sorted by\ntheir second elements. The first is found, with a uniquely\ndetermined position; the second and third are not found; the\nfourth could match any position in <code>[1, 4]</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = [(<span class=\"number\">0</span>, <span class=\"number\">0</span>), (<span class=\"number\">2</span>, <span class=\"number\">1</span>), (<span class=\"number\">4</span>, <span class=\"number\">1</span>), (<span class=\"number\">5</span>, <span class=\"number\">1</span>), (<span class=\"number\">3</span>, <span class=\"number\">1</span>),\n         (<span class=\"number\">1</span>, <span class=\"number\">2</span>), (<span class=\"number\">2</span>, <span class=\"number\">3</span>), (<span class=\"number\">4</span>, <span class=\"number\">5</span>), (<span class=\"number\">5</span>, <span class=\"number\">8</span>), (<span class=\"number\">3</span>, <span class=\"number\">13</span>),\n         (<span class=\"number\">1</span>, <span class=\"number\">21</span>), (<span class=\"number\">2</span>, <span class=\"number\">34</span>), (<span class=\"number\">4</span>, <span class=\"number\">55</span>)];\n\n<span class=\"macro\">assert_eq!</span>(s.binary_search_by_key(<span class=\"kw-2\">&amp;</span><span class=\"number\">13</span>, |<span class=\"kw-2\">&amp;</span>(a, b)| b),  <span class=\"prelude-val\">Ok</span>(<span class=\"number\">9</span>));\n<span class=\"macro\">assert_eq!</span>(s.binary_search_by_key(<span class=\"kw-2\">&amp;</span><span class=\"number\">4</span>, |<span class=\"kw-2\">&amp;</span>(a, b)| b),   <span class=\"prelude-val\">Err</span>(<span class=\"number\">7</span>));\n<span class=\"macro\">assert_eq!</span>(s.binary_search_by_key(<span class=\"kw-2\">&amp;</span><span class=\"number\">100</span>, |<span class=\"kw-2\">&amp;</span>(a, b)| b), <span class=\"prelude-val\">Err</span>(<span class=\"number\">13</span>));\n<span class=\"kw\">let </span>r = s.binary_search_by_key(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>, |<span class=\"kw-2\">&amp;</span>(a, b)| b);\n<span class=\"macro\">assert!</span>(<span class=\"kw\">match </span>r { <span class=\"prelude-val\">Ok</span>(<span class=\"number\">1</span>..=<span class=\"number\">4</span>) =&gt; <span class=\"bool-val\">true</span>, <span class=\"kw\">_ </span>=&gt; <span class=\"bool-val\">false</span>, });</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%5B(0,+0),+(2,+1),+(4,+1),+(5,+1),+(3,+1),%0A+++++++++++++(1,+2),+(2,+3),+(4,+5),+(5,+8),+(3,+13),%0A+++++++++++++(1,+21),+(2,+34),+(4,+55)%5D;%0A++++%0A++++assert_eq!(s.binary_search_by_key(%2613,+%7C%26(a,+b)%7C+b),++Ok(9));%0A++++assert_eq!(s.binary_search_by_key(%264,+%7C%26(a,+b)%7C+b),+++Err(7));%0A++++assert_eq!(s.binary_search_by_key(%26100,+%7C%26(a,+b)%7C+b),+Err(13));%0A++++let+r+=+s.binary_search_by_key(%261,+%7C%26(a,+b)%7C+b);%0A++++assert!(match+r+%7B+Ok(1..=4)+=%3E+true,+_+=%3E+false,+%7D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sort_unstable\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#2915-2917\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.sort_unstable\" class=\"fn\">sort_unstable</a>(&amp;mut self)<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,</div></h4></section></summary><div class=\"docblock\"><p>Sorts the slice, but might not preserve the order of equal elements.</p>\n<p>This sort is unstable (i.e., may reorder equal elements), in-place\n(i.e., does not allocate), and <em>O</em>(<em>n</em> * log(<em>n</em>)) worst-case.</p>\n<h5 id=\"current-implementation-2\"><a class=\"doc-anchor\" href=\"#current-implementation-2\">§</a>Current implementation</h5>\n<p>The current algorithm is based on <a href=\"https://github.com/orlp/pdqsort\">pattern-defeating quicksort</a> by Orson Peters,\nwhich combines the fast average case of randomized quicksort with the fast worst case of\nheapsort, while achieving linear time on slices with certain patterns. It uses some\nrandomization to avoid degenerate cases, but with a fixed seed to always provide\ndeterministic behavior.</p>\n<p>It is typically faster than stable sorting, except in a few special cases, e.g., when the\nslice consists of several concatenated sorted sequences.</p>\n<h5 id=\"examples-130\"><a class=\"doc-anchor\" href=\"#examples-130\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = [-<span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, -<span class=\"number\">3</span>, <span class=\"number\">2</span>];\n\nv.sort_unstable();\n<span class=\"macro\">assert!</span>(v == [-<span class=\"number\">5</span>, -<span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+%5B-5,+4,+1,+-3,+2%5D;%0A++++%0A++++v.sort_unstable();%0A++++assert!(v+==+%5B-5,+-3,+1,+2,+4%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sort_unstable_by\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#2970-2972\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.sort_unstable_by\" class=\"fn\">sort_unstable_by</a>&lt;F&gt;(&amp;mut self, compare: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>, <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>,</div></h4></section></summary><div class=\"docblock\"><p>Sorts the slice with a comparator function, but might not preserve the order of equal\nelements.</p>\n<p>This sort is unstable (i.e., may reorder equal elements), in-place\n(i.e., does not allocate), and <em>O</em>(<em>n</em> * log(<em>n</em>)) worst-case.</p>\n<p>The comparator function must define a total ordering for the elements in the slice. If\nthe ordering is not total, the order of the elements is unspecified. An order is a\ntotal order if it is (for all <code>a</code>, <code>b</code> and <code>c</code>):</p>\n<ul>\n<li>total and antisymmetric: exactly one of <code>a &lt; b</code>, <code>a == b</code> or <code>a &gt; b</code> is true, and</li>\n<li>transitive, <code>a &lt; b</code> and <code>b &lt; c</code> implies <code>a &lt; c</code>. The same must hold for both <code>==</code> and <code>&gt;</code>.</li>\n</ul>\n<p>For example, while <a href=\"../primitive.f64.html\" title=\"primitive f64\"><code>f64</code></a> doesn’t implement <a href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\"><code>Ord</code></a> because <code>NaN != NaN</code>, we can use\n<code>partial_cmp</code> as our sort function when we know the slice doesn’t contain a <code>NaN</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>floats = [<span class=\"number\">5f64</span>, <span class=\"number\">4.0</span>, <span class=\"number\">1.0</span>, <span class=\"number\">3.0</span>, <span class=\"number\">2.0</span>];\nfloats.sort_unstable_by(|a, b| a.partial_cmp(b).unwrap());\n<span class=\"macro\">assert_eq!</span>(floats, [<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>, <span class=\"number\">3.0</span>, <span class=\"number\">4.0</span>, <span class=\"number\">5.0</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+floats+=+%5B5f64,+4.0,+1.0,+3.0,+2.0%5D;%0A++++floats.sort_unstable_by(%7Ca,+b%7C+a.partial_cmp(b).unwrap());%0A++++assert_eq!(floats,+%5B1.0,+2.0,+3.0,+4.0,+5.0%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n<h5 id=\"current-implementation-3\"><a class=\"doc-anchor\" href=\"#current-implementation-3\">§</a>Current implementation</h5>\n<p>The current algorithm is based on <a href=\"https://github.com/orlp/pdqsort\">pattern-defeating quicksort</a> by Orson Peters,\nwhich combines the fast average case of randomized quicksort with the fast worst case of\nheapsort, while achieving linear time on slices with certain patterns. It uses some\nrandomization to avoid degenerate cases, but with a fixed seed to always provide\ndeterministic behavior.</p>\n<p>It is typically faster than stable sorting, except in a few special cases, e.g., when the\nslice consists of several concatenated sorted sequences.</p>\n<h5 id=\"examples-131\"><a class=\"doc-anchor\" href=\"#examples-131\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = [<span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>];\nv.sort_unstable_by(|a, b| a.cmp(b));\n<span class=\"macro\">assert!</span>(v == [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);\n\n<span class=\"comment\">// reverse sorting\n</span>v.sort_unstable_by(|a, b| b.cmp(a));\n<span class=\"macro\">assert!</span>(v == [<span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+%5B5,+4,+1,+3,+2%5D;%0A++++v.sort_unstable_by(%7Ca,+b%7C+a.cmp(b));%0A++++assert!(v+==+%5B1,+2,+3,+4,+5%5D);%0A++++%0A++++//+reverse+sorting%0A++++v.sort_unstable_by(%7Ca,+b%7C+b.cmp(a));%0A++++assert!(v+==+%5B5,+4,+3,+2,+1%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sort_unstable_by_key\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#3008-3011\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.sort_unstable_by_key\" class=\"fn\">sort_unstable_by_key</a>&lt;K, F&gt;(&amp;mut self, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>) -&gt; K,\n    K: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,</div></h4></section></summary><div class=\"docblock\"><p>Sorts the slice with a key extraction function, but might not preserve the order of equal\nelements.</p>\n<p>This sort is unstable (i.e., may reorder equal elements), in-place\n(i.e., does not allocate), and <em>O</em>(<em>m</em> * <em>n</em> * log(<em>n</em>)) worst-case, where the key function is\n<em>O</em>(<em>m</em>).</p>\n<h5 id=\"current-implementation-4\"><a class=\"doc-anchor\" href=\"#current-implementation-4\">§</a>Current implementation</h5>\n<p>The current algorithm is based on <a href=\"https://github.com/orlp/pdqsort\">pattern-defeating quicksort</a> by Orson Peters,\nwhich combines the fast average case of randomized quicksort with the fast worst case of\nheapsort, while achieving linear time on slices with certain patterns. It uses some\nrandomization to avoid degenerate cases, but with a fixed seed to always provide\ndeterministic behavior.</p>\n<p>Due to its key calling strategy, <a href=\"#method.sort_unstable_by_key\"><code>sort_unstable_by_key</code></a>\nis likely to be slower than <a href=\"#method.sort_by_cached_key\"><code>sort_by_cached_key</code></a> in\ncases where the key function is expensive.</p>\n<h5 id=\"examples-132\"><a class=\"doc-anchor\" href=\"#examples-132\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = [-<span class=\"number\">5i32</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, -<span class=\"number\">3</span>, <span class=\"number\">2</span>];\n\nv.sort_unstable_by_key(|k| k.abs());\n<span class=\"macro\">assert!</span>(v == [<span class=\"number\">1</span>, <span class=\"number\">2</span>, -<span class=\"number\">3</span>, <span class=\"number\">4</span>, -<span class=\"number\">5</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+%5B-5i32,+4,+1,+-3,+2%5D;%0A++++%0A++++v.sort_unstable_by_key(%7Ck%7C+k.abs());%0A++++assert!(v+==+%5B1,+2,+-3,+4,+-5%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.select_nth_unstable\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#3063-3065\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.select_nth_unstable\" class=\"fn\">select_nth_unstable</a>(\n    &amp;mut self,\n    index: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>,\n) -&gt; (&amp;mut <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>, <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>, &amp;mut <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>)<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,</div></h4></section></summary><div class=\"docblock\"><p>Reorder the slice such that the element at <code>index</code> after the reordering is at its final sorted position.</p>\n<p>This reordering has the additional property that any value at position <code>i &lt; index</code> will be\nless than or equal to any value at a position <code>j &gt; index</code>. Additionally, this reordering is\nunstable (i.e. any number of equal elements may end up at position <code>index</code>), in-place\n(i.e. does not allocate), and runs in <em>O</em>(<em>n</em>) time.\nThis function is also known as “kth element” in other libraries.</p>\n<p>It returns a triplet of the following from the reordered slice:\nthe subslice prior to <code>index</code>, the element at <code>index</code>, and the subslice after <code>index</code>;\naccordingly, the values in those two subslices will respectively all be less-than-or-equal-to\nand greater-than-or-equal-to the value of the element at <code>index</code>.</p>\n<h5 id=\"current-implementation-5\"><a class=\"doc-anchor\" href=\"#current-implementation-5\">§</a>Current implementation</h5>\n<p>The current algorithm is an introselect implementation based on Pattern Defeating Quicksort, which is also\nthe basis for <a href=\"../primitive.slice.html#method.sort_unstable\" title=\"method slice::sort_unstable\"><code>sort_unstable</code></a>. The fallback algorithm is Median of Medians using Tukey’s Ninther for\npivot selection, which guarantees linear runtime for all inputs.</p>\n<h5 id=\"panics-35\"><a class=\"doc-anchor\" href=\"#panics-35\">§</a>Panics</h5>\n<p>Panics when <code>index &gt;= len()</code>, meaning it always panics on empty slices.</p>\n<h5 id=\"examples-133\"><a class=\"doc-anchor\" href=\"#examples-133\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = [-<span class=\"number\">5i32</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, -<span class=\"number\">3</span>, <span class=\"number\">1</span>];\n\n<span class=\"comment\">// Find the items less than or equal to the median, the median, and greater than or equal to\n// the median.\n</span><span class=\"kw\">let </span>(lesser, median, greater) = v.select_nth_unstable(<span class=\"number\">2</span>);\n\n<span class=\"macro\">assert!</span>(lesser == [-<span class=\"number\">3</span>, -<span class=\"number\">5</span>] || lesser == [-<span class=\"number\">5</span>, -<span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>(median, <span class=\"kw-2\">&amp;mut </span><span class=\"number\">1</span>);\n<span class=\"macro\">assert!</span>(greater == [<span class=\"number\">4</span>, <span class=\"number\">2</span>] || greater == [<span class=\"number\">2</span>, <span class=\"number\">4</span>]);\n\n<span class=\"comment\">// We are only guaranteed the slice will be one of the following, based on the way we sort\n// about the specified index.\n</span><span class=\"macro\">assert!</span>(v == [-<span class=\"number\">3</span>, -<span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>] ||\n        v == [-<span class=\"number\">5</span>, -<span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>] ||\n        v == [-<span class=\"number\">3</span>, -<span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>] ||\n        v == [-<span class=\"number\">5</span>, -<span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+%5B-5i32,+4,+2,+-3,+1%5D;%0A++++%0A++++//+Find+the+items+less+than+or+equal+to+the+median,+the+median,+and+greater+than+or+equal+to%0A++++//+the+median.%0A++++let+(lesser,+median,+greater)+=+v.select_nth_unstable(2);%0A++++%0A++++assert!(lesser+==+%5B-3,+-5%5D+%7C%7C+lesser+==+%5B-5,+-3%5D);%0A++++assert_eq!(median,+%26mut+1);%0A++++assert!(greater+==+%5B4,+2%5D+%7C%7C+greater+==+%5B2,+4%5D);%0A++++%0A++++//+We+are+only+guaranteed+the+slice+will+be+one+of+the+following,+based+on+the+way+we+sort%0A++++//+about+the+specified+index.%0A++++assert!(v+==+%5B-3,+-5,+1,+2,+4%5D+%7C%7C%0A++++++++++++v+==+%5B-5,+-3,+1,+2,+4%5D+%7C%7C%0A++++++++++++v+==+%5B-3,+-5,+1,+4,+2%5D+%7C%7C%0A++++++++++++v+==+%5B-5,+-3,+1,+4,+2%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.select_nth_unstable_by\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#3119-3125\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.select_nth_unstable_by\" class=\"fn\">select_nth_unstable_by</a>&lt;F&gt;(\n    &amp;mut self,\n    index: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>,\n    compare: F,\n) -&gt; (&amp;mut <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>, <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>, &amp;mut <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>, <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>,</div></h4></section></summary><div class=\"docblock\"><p>Reorder the slice with a comparator function such that the element at <code>index</code> after the reordering is at\nits final sorted position.</p>\n<p>This reordering has the additional property that any value at position <code>i &lt; index</code> will be\nless than or equal to any value at a position <code>j &gt; index</code> using the comparator function.\nAdditionally, this reordering is unstable (i.e. any number of equal elements may end up at\nposition <code>index</code>), in-place (i.e. does not allocate), and runs in <em>O</em>(<em>n</em>) time.\nThis function is also known as “kth element” in other libraries.</p>\n<p>It returns a triplet of the following from\nthe slice reordered according to the provided comparator function: the subslice prior to\n<code>index</code>, the element at <code>index</code>, and the subslice after <code>index</code>; accordingly, the values in\nthose two subslices will respectively all be less-than-or-equal-to and greater-than-or-equal-to\nthe value of the element at <code>index</code>.</p>\n<h5 id=\"current-implementation-6\"><a class=\"doc-anchor\" href=\"#current-implementation-6\">§</a>Current implementation</h5>\n<p>The current algorithm is an introselect implementation based on Pattern Defeating Quicksort, which is also\nthe basis for <a href=\"../primitive.slice.html#method.sort_unstable\" title=\"method slice::sort_unstable\"><code>sort_unstable</code></a>. The fallback algorithm is Median of Medians using Tukey’s Ninther for\npivot selection, which guarantees linear runtime for all inputs.</p>\n<h5 id=\"panics-36\"><a class=\"doc-anchor\" href=\"#panics-36\">§</a>Panics</h5>\n<p>Panics when <code>index &gt;= len()</code>, meaning it always panics on empty slices.</p>\n<h5 id=\"examples-134\"><a class=\"doc-anchor\" href=\"#examples-134\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = [-<span class=\"number\">5i32</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, -<span class=\"number\">3</span>, <span class=\"number\">1</span>];\n\n<span class=\"comment\">// Find the items less than or equal to the median, the median, and greater than or equal to\n// the median as if the slice were sorted in descending order.\n</span><span class=\"kw\">let </span>(lesser, median, greater) = v.select_nth_unstable_by(<span class=\"number\">2</span>, |a, b| b.cmp(a));\n\n<span class=\"macro\">assert!</span>(lesser == [<span class=\"number\">4</span>, <span class=\"number\">2</span>] || lesser == [<span class=\"number\">2</span>, <span class=\"number\">4</span>]);\n<span class=\"macro\">assert_eq!</span>(median, <span class=\"kw-2\">&amp;mut </span><span class=\"number\">1</span>);\n<span class=\"macro\">assert!</span>(greater == [-<span class=\"number\">3</span>, -<span class=\"number\">5</span>] || greater == [-<span class=\"number\">5</span>, -<span class=\"number\">3</span>]);\n\n<span class=\"comment\">// We are only guaranteed the slice will be one of the following, based on the way we sort\n// about the specified index.\n</span><span class=\"macro\">assert!</span>(v == [<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, -<span class=\"number\">5</span>, -<span class=\"number\">3</span>] ||\n        v == [<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, -<span class=\"number\">3</span>, -<span class=\"number\">5</span>] ||\n        v == [<span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, -<span class=\"number\">5</span>, -<span class=\"number\">3</span>] ||\n        v == [<span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, -<span class=\"number\">3</span>, -<span class=\"number\">5</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+%5B-5i32,+4,+2,+-3,+1%5D;%0A++++%0A++++//+Find+the+items+less+than+or+equal+to+the+median,+the+median,+and+greater+than+or+equal+to%0A++++//+the+median+as+if+the+slice+were+sorted+in+descending+order.%0A++++let+(lesser,+median,+greater)+=+v.select_nth_unstable_by(2,+%7Ca,+b%7C+b.cmp(a));%0A++++%0A++++assert!(lesser+==+%5B4,+2%5D+%7C%7C+lesser+==+%5B2,+4%5D);%0A++++assert_eq!(median,+%26mut+1);%0A++++assert!(greater+==+%5B-3,+-5%5D+%7C%7C+greater+==+%5B-5,+-3%5D);%0A++++%0A++++//+We+are+only+guaranteed+the+slice+will+be+one+of+the+following,+based+on+the+way+we+sort%0A++++//+about+the+specified+index.%0A++++assert!(v+==+%5B2,+4,+1,+-5,+-3%5D+%7C%7C%0A++++++++++++v+==+%5B2,+4,+1,+-3,+-5%5D+%7C%7C%0A++++++++++++v+==+%5B4,+2,+1,+-5,+-3%5D+%7C%7C%0A++++++++++++v+==+%5B4,+2,+1,+-3,+-5%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.select_nth_unstable_by_key\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.49.0\">1.49.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#3179-3186\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.select_nth_unstable_by_key\" class=\"fn\">select_nth_unstable_by_key</a>&lt;K, F&gt;(\n    &amp;mut self,\n    index: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>,\n    f: F,\n) -&gt; (&amp;mut <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>, <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>, &amp;mut <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>) -&gt; K,\n    K: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,</div></h4></section></summary><div class=\"docblock\"><p>Reorder the slice with a key extraction function such that the element at <code>index</code> after the reordering is\nat its final sorted position.</p>\n<p>This reordering has the additional property that any value at position <code>i &lt; index</code> will be\nless than or equal to any value at a position <code>j &gt; index</code> using the key extraction function.\nAdditionally, this reordering is unstable (i.e. any number of equal elements may end up at\nposition <code>index</code>), in-place (i.e. does not allocate), and runs in <em>O</em>(<em>n</em>) time.\nThis function is also known as “kth element” in other libraries.</p>\n<p>It returns a triplet of the following from\nthe slice reordered according to the provided key extraction function: the subslice prior to\n<code>index</code>, the element at <code>index</code>, and the subslice after <code>index</code>; accordingly, the values in\nthose two subslices will respectively all be less-than-or-equal-to and greater-than-or-equal-to\nthe value of the element at <code>index</code>.</p>\n<h5 id=\"current-implementation-7\"><a class=\"doc-anchor\" href=\"#current-implementation-7\">§</a>Current implementation</h5>\n<p>The current algorithm is an introselect implementation based on Pattern Defeating Quicksort, which is also\nthe basis for <a href=\"../primitive.slice.html#method.sort_unstable\" title=\"method slice::sort_unstable\"><code>sort_unstable</code></a>. The fallback algorithm is Median of Medians using Tukey’s Ninther for\npivot selection, which guarantees linear runtime for all inputs.</p>\n<h5 id=\"panics-37\"><a class=\"doc-anchor\" href=\"#panics-37\">§</a>Panics</h5>\n<p>Panics when <code>index &gt;= len()</code>, meaning it always panics on empty slices.</p>\n<h5 id=\"examples-135\"><a class=\"doc-anchor\" href=\"#examples-135\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = [-<span class=\"number\">5i32</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, -<span class=\"number\">3</span>, <span class=\"number\">2</span>];\n\n<span class=\"comment\">// Find the items less than or equal to the median, the median, and greater than or equal to\n// the median as if the slice were sorted according to absolute value.\n</span><span class=\"kw\">let </span>(lesser, median, greater) = v.select_nth_unstable_by_key(<span class=\"number\">2</span>, |a| a.abs());\n\n<span class=\"macro\">assert!</span>(lesser == [<span class=\"number\">1</span>, <span class=\"number\">2</span>] || lesser == [<span class=\"number\">2</span>, <span class=\"number\">1</span>]);\n<span class=\"macro\">assert_eq!</span>(median, <span class=\"kw-2\">&amp;mut </span>-<span class=\"number\">3</span>);\n<span class=\"macro\">assert!</span>(greater == [<span class=\"number\">4</span>, -<span class=\"number\">5</span>] || greater == [-<span class=\"number\">5</span>, <span class=\"number\">4</span>]);\n\n<span class=\"comment\">// We are only guaranteed the slice will be one of the following, based on the way we sort\n// about the specified index.\n</span><span class=\"macro\">assert!</span>(v == [<span class=\"number\">1</span>, <span class=\"number\">2</span>, -<span class=\"number\">3</span>, <span class=\"number\">4</span>, -<span class=\"number\">5</span>] ||\n        v == [<span class=\"number\">1</span>, <span class=\"number\">2</span>, -<span class=\"number\">3</span>, -<span class=\"number\">5</span>, <span class=\"number\">4</span>] ||\n        v == [<span class=\"number\">2</span>, <span class=\"number\">1</span>, -<span class=\"number\">3</span>, <span class=\"number\">4</span>, -<span class=\"number\">5</span>] ||\n        v == [<span class=\"number\">2</span>, <span class=\"number\">1</span>, -<span class=\"number\">3</span>, -<span class=\"number\">5</span>, <span class=\"number\">4</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+%5B-5i32,+4,+1,+-3,+2%5D;%0A++++%0A++++//+Find+the+items+less+than+or+equal+to+the+median,+the+median,+and+greater+than+or+equal+to%0A++++//+the+median+as+if+the+slice+were+sorted+according+to+absolute+value.%0A++++let+(lesser,+median,+greater)+=+v.select_nth_unstable_by_key(2,+%7Ca%7C+a.abs());%0A++++%0A++++assert!(lesser+==+%5B1,+2%5D+%7C%7C+lesser+==+%5B2,+1%5D);%0A++++assert_eq!(median,+%26mut+-3);%0A++++assert!(greater+==+%5B4,+-5%5D+%7C%7C+greater+==+%5B-5,+4%5D);%0A++++%0A++++//+We+are+only+guaranteed+the+slice+will+be+one+of+the+following,+based+on+the+way+we+sort%0A++++//+about+the+specified+index.%0A++++assert!(v+==+%5B1,+2,+-3,+4,+-5%5D+%7C%7C%0A++++++++++++v+==+%5B1,+2,+-3,+-5,+4%5D+%7C%7C%0A++++++++++++v+==+%5B2,+1,+-3,+4,+-5%5D+%7C%7C%0A++++++++++++v+==+%5B2,+1,+-3,+-5,+4%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partition_dedup\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#3213-3215\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.partition_dedup\" class=\"fn\">partition_dedup</a>(&amp;mut self) -&gt; (&amp;mut <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>, &amp;mut <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>)<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_partition_dedup</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/54279\">#54279</a>)</span></div></span></summary><div class=\"docblock\"><p>Moves all consecutive repeated elements to the end of the slice according to the\n<a href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\"><code>PartialEq</code></a> trait implementation.</p>\n<p>Returns two slices. The first contains no consecutive repeated elements.\nThe second contains all the duplicates in no specified order.</p>\n<p>If the slice is sorted, the first returned slice contains no duplicates.</p>\n<h5 id=\"examples-136\"><a class=\"doc-anchor\" href=\"#examples-136\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(slice_partition_dedup)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>slice = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>];\n\n<span class=\"kw\">let </span>(dedup, duplicates) = slice.partition_dedup();\n\n<span class=\"macro\">assert_eq!</span>(dedup, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>]);\n<span class=\"macro\">assert_eq!</span>(duplicates, [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(slice_partition_dedup)%5D%0A%0Afn+main()+%7B%0A++++let+mut+slice+=+%5B1,+2,+2,+3,+3,+2,+1,+1%5D;%0A++++%0A++++let+(dedup,+duplicates)+=+slice.partition_dedup();%0A++++%0A++++assert_eq!(dedup,+%5B1,+2,+3,+2,+1%5D);%0A++++assert_eq!(duplicates,+%5B2,+3,+1%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partition_dedup_by\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#3247-3249\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.partition_dedup_by\" class=\"fn\">partition_dedup_by</a>&lt;F&gt;(&amp;mut self, same_bucket: F) -&gt; (&amp;mut <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>, &amp;mut <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>, <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_partition_dedup</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/54279\">#54279</a>)</span></div></span></summary><div class=\"docblock\"><p>Moves all but the first of consecutive elements to the end of the slice satisfying\na given equality relation.</p>\n<p>Returns two slices. The first contains no consecutive repeated elements.\nThe second contains all the duplicates in no specified order.</p>\n<p>The <code>same_bucket</code> function is passed references to two elements from the slice and\nmust determine if the elements compare equal. The elements are passed in opposite order\nfrom their order in the slice, so if <code>same_bucket(a, b)</code> returns <code>true</code>, <code>a</code> is moved\nat the end of the slice.</p>\n<p>If the slice is sorted, the first returned slice contains no duplicates.</p>\n<h5 id=\"examples-137\"><a class=\"doc-anchor\" href=\"#examples-137\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(slice_partition_dedup)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>slice = [<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"Foo\"</span>, <span class=\"string\">\"BAZ\"</span>, <span class=\"string\">\"Bar\"</span>, <span class=\"string\">\"bar\"</span>, <span class=\"string\">\"baz\"</span>, <span class=\"string\">\"BAZ\"</span>];\n\n<span class=\"kw\">let </span>(dedup, duplicates) = slice.partition_dedup_by(|a, b| a.eq_ignore_ascii_case(b));\n\n<span class=\"macro\">assert_eq!</span>(dedup, [<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"BAZ\"</span>, <span class=\"string\">\"Bar\"</span>, <span class=\"string\">\"baz\"</span>]);\n<span class=\"macro\">assert_eq!</span>(duplicates, [<span class=\"string\">\"bar\"</span>, <span class=\"string\">\"Foo\"</span>, <span class=\"string\">\"BAZ\"</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(slice_partition_dedup)%5D%0A%0Afn+main()+%7B%0A++++let+mut+slice+=+%5B%22foo%22,+%22Foo%22,+%22BAZ%22,+%22Bar%22,+%22bar%22,+%22baz%22,+%22BAZ%22%5D;%0A++++%0A++++let+(dedup,+duplicates)+=+slice.partition_dedup_by(%7Ca,+b%7C+a.eq_ignore_ascii_case(b));%0A++++%0A++++assert_eq!(dedup,+%5B%22foo%22,+%22BAZ%22,+%22Bar%22,+%22baz%22%5D);%0A++++assert_eq!(duplicates,+%5B%22bar%22,+%22Foo%22,+%22BAZ%22%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partition_dedup_by_key\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#3373-3376\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.partition_dedup_by_key\" class=\"fn\">partition_dedup_by_key</a>&lt;K, F&gt;(&amp;mut self, key: F) -&gt; (&amp;mut <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>, &amp;mut <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>) -&gt; K,\n    K: <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_partition_dedup</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/54279\">#54279</a>)</span></div></span></summary><div class=\"docblock\"><p>Moves all but the first of consecutive elements to the end of the slice that resolve\nto the same key.</p>\n<p>Returns two slices. The first contains no consecutive repeated elements.\nThe second contains all the duplicates in no specified order.</p>\n<p>If the slice is sorted, the first returned slice contains no duplicates.</p>\n<h5 id=\"examples-138\"><a class=\"doc-anchor\" href=\"#examples-138\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(slice_partition_dedup)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>slice = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">21</span>, <span class=\"number\">30</span>, <span class=\"number\">30</span>, <span class=\"number\">20</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>];\n\n<span class=\"kw\">let </span>(dedup, duplicates) = slice.partition_dedup_by_key(|i| <span class=\"kw-2\">*</span>i / <span class=\"number\">10</span>);\n\n<span class=\"macro\">assert_eq!</span>(dedup, [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">20</span>, <span class=\"number\">11</span>]);\n<span class=\"macro\">assert_eq!</span>(duplicates, [<span class=\"number\">21</span>, <span class=\"number\">30</span>, <span class=\"number\">13</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(slice_partition_dedup)%5D%0A%0Afn+main()+%7B%0A++++let+mut+slice+=+%5B10,+20,+21,+30,+30,+20,+11,+13%5D;%0A++++%0A++++let+(dedup,+duplicates)+=+slice.partition_dedup_by_key(%7Ci%7C+*i+/+10);%0A++++%0A++++assert_eq!(dedup,+%5B10,+20,+30,+20,+11%5D);%0A++++assert_eq!(duplicates,+%5B21,+30,+13%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rotate_left\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0\">1.26.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#3412\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.rotate_left\" class=\"fn\">rotate_left</a>(&amp;mut self, mid: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Rotates the slice in-place such that the first <code>mid</code> elements of the\nslice move to the end while the last <code>self.len() - mid</code> elements move to\nthe front. After calling <code>rotate_left</code>, the element previously at index\n<code>mid</code> will become the first element in the slice.</p>\n<h5 id=\"panics-38\"><a class=\"doc-anchor\" href=\"#panics-38\">§</a>Panics</h5>\n<p>This function will panic if <code>mid</code> is greater than the length of the\nslice. Note that <code>mid == self.len()</code> does <em>not</em> panic and is a no-op\nrotation.</p>\n<h5 id=\"complexity\"><a class=\"doc-anchor\" href=\"#complexity\">§</a>Complexity</h5>\n<p>Takes linear (in <code>self.len()</code>) time.</p>\n<h5 id=\"examples-139\"><a class=\"doc-anchor\" href=\"#examples-139\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>a = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'f'</span>];\na.rotate_left(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(a, [<span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'f'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+a+=+%5B'a',+'b',+'c',+'d',+'e',+'f'%5D;%0A++++a.rotate_left(2);%0A++++assert_eq!(a,+%5B'c',+'d',+'e',+'f',+'a',+'b'%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Rotating a subslice:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>a = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'f'</span>];\na[<span class=\"number\">1</span>..<span class=\"number\">5</span>].rotate_left(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(a, [<span class=\"string\">'a'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'f'</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+a+=+%5B'a',+'b',+'c',+'d',+'e',+'f'%5D;%0A++++a%5B1..5%5D.rotate_left(1);%0A++++assert_eq!(a,+%5B'a',+'c',+'d',+'e',+'b',+'f'%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rotate_right\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0\">1.26.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#3455\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.rotate_right\" class=\"fn\">rotate_right</a>(&amp;mut self, k: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Rotates the slice in-place such that the first <code>self.len() - k</code>\nelements of the slice move to the end while the last <code>k</code> elements move\nto the front. After calling <code>rotate_right</code>, the element previously at\nindex <code>self.len() - k</code> will become the first element in the slice.</p>\n<h5 id=\"panics-39\"><a class=\"doc-anchor\" href=\"#panics-39\">§</a>Panics</h5>\n<p>This function will panic if <code>k</code> is greater than the length of the\nslice. Note that <code>k == self.len()</code> does <em>not</em> panic and is a no-op\nrotation.</p>\n<h5 id=\"complexity-1\"><a class=\"doc-anchor\" href=\"#complexity-1\">§</a>Complexity</h5>\n<p>Takes linear (in <code>self.len()</code>) time.</p>\n<h5 id=\"examples-140\"><a class=\"doc-anchor\" href=\"#examples-140\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>a = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'f'</span>];\na.rotate_right(<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(a, [<span class=\"string\">'e'</span>, <span class=\"string\">'f'</span>, <span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+a+=+%5B'a',+'b',+'c',+'d',+'e',+'f'%5D;%0A++++a.rotate_right(2);%0A++++assert_eq!(a,+%5B'e',+'f',+'a',+'b',+'c',+'d'%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Rotating a subslice:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>a = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'f'</span>];\na[<span class=\"number\">1</span>..<span class=\"number\">5</span>].rotate_right(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(a, [<span class=\"string\">'a'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'f'</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+a+=+%5B'a',+'b',+'c',+'d',+'e',+'f'%5D;%0A++++a%5B1..5%5D.rotate_right(1);%0A++++assert_eq!(a,+%5B'a',+'e',+'b',+'c',+'d',+'f'%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fill\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#3478-3480\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.fill\" class=\"fn\">fill</a>(&amp;mut self, value: T)<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h4></section></summary><div class=\"docblock\"><p>Fills <code>self</code> with elements by cloning <code>value</code>.</p>\n<h5 id=\"examples-141\"><a class=\"doc-anchor\" href=\"#examples-141\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buf = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>; <span class=\"number\">10</span>];\nbuf.fill(<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(buf, <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>; <span class=\"number\">10</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+buf+=+vec!%5B0;+10%5D;%0A++++buf.fill(1);%0A++++assert_eq!(buf,+vec!%5B1;+10%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fill_with\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#3502-3504\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.fill_with\" class=\"fn\">fill_with</a>&lt;F&gt;(&amp;mut self, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Fills <code>self</code> with elements returned by calling a closure repeatedly.</p>\n<p>This method uses a closure to create new values. If you’d rather\n<a href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\"><code>Clone</code></a> a given value, use <a href=\"../primitive.slice.html#method.fill\" title=\"method slice::fill\"><code>fill</code></a>. If you want to use the <a href=\"../default/trait.Default.html\" title=\"trait std::default::Default\"><code>Default</code></a>\ntrait to generate values, you can pass <a href=\"../default/trait.Default.html#tymethod.default\" title=\"associated function std::default::Default::default\"><code>Default::default</code></a> as the\nargument.</p>\n<h5 id=\"examples-142\"><a class=\"doc-anchor\" href=\"#examples-142\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buf = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>; <span class=\"number\">10</span>];\nbuf.fill_with(Default::default);\n<span class=\"macro\">assert_eq!</span>(buf, <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>; <span class=\"number\">10</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+buf+=+vec!%5B1;+10%5D;%0A++++buf.fill_with(Default::default);%0A++++assert_eq!(buf,+vec!%5B0;+10%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_from_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0\">1.7.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#3565-3567\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.clone_from_slice\" class=\"fn\">clone_from_slice</a>(&amp;mut self, src: &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>)<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h4></section></summary><div class=\"docblock\"><p>Copies the elements from <code>src</code> into <code>self</code>.</p>\n<p>The length of <code>src</code> must be the same as <code>self</code>.</p>\n<h5 id=\"panics-40\"><a class=\"doc-anchor\" href=\"#panics-40\">§</a>Panics</h5>\n<p>This function will panic if the two slices have different lengths.</p>\n<h5 id=\"examples-143\"><a class=\"doc-anchor\" href=\"#examples-143\">§</a>Examples</h5>\n<p>Cloning two elements from a slice into another:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>src = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>dst = [<span class=\"number\">0</span>, <span class=\"number\">0</span>];\n\n<span class=\"comment\">// Because the slices have to be the same length,\n// we slice the source slice from four elements\n// to two. It will panic if we don't do this.\n</span>dst.clone_from_slice(<span class=\"kw-2\">&amp;</span>src[<span class=\"number\">2</span>..]);\n\n<span class=\"macro\">assert_eq!</span>(src, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n<span class=\"macro\">assert_eq!</span>(dst, [<span class=\"number\">3</span>, <span class=\"number\">4</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+src+=+%5B1,+2,+3,+4%5D;%0A++++let+mut+dst+=+%5B0,+0%5D;%0A++++%0A++++//+Because+the+slices+have+to+be+the+same+length,%0A++++//+we+slice+the+source+slice+from+four+elements%0A++++//+to+two.+It+will+panic+if+we+don't+do+this.%0A++++dst.clone_from_slice(%26src%5B2..%5D);%0A++++%0A++++assert_eq!(src,+%5B1,+2,+3,+4%5D);%0A++++assert_eq!(dst,+%5B3,+4%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Rust enforces that there can only be one mutable reference with no\nimmutable references to a particular piece of data in a particular\nscope. Because of this, attempting to use <code>clone_from_slice</code> on a\nsingle slice will result in a compile failure:</p>\n\n<div class=\"example-wrap compile_fail\"><a href=\"#\" class=\"tooltip\" title=\"This example deliberately fails to compile\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>slice = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n\nslice[..<span class=\"number\">2</span>].clone_from_slice(<span class=\"kw-2\">&amp;</span>slice[<span class=\"number\">3</span>..]); <span class=\"comment\">// compile fail!</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+slice+=+%5B1,+2,+3,+4,+5%5D;%0A++++%0A++++slice%5B..2%5D.clone_from_slice(%26slice%5B3..%5D);+//+compile+fail!%0A%7D&amp;edition=2021\">Run</a></div>\n<p>To work around this, we can use <a href=\"../primitive.slice.html#method.split_at_mut\" title=\"method slice::split_at_mut\"><code>split_at_mut</code></a> to create two distinct\nsub-slices from a slice:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>slice = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n\n{\n    <span class=\"kw\">let </span>(left, right) = slice.split_at_mut(<span class=\"number\">2</span>);\n    left.clone_from_slice(<span class=\"kw-2\">&amp;</span>right[<span class=\"number\">1</span>..]);\n}\n\n<span class=\"macro\">assert_eq!</span>(slice, [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+slice+=+%5B1,+2,+3,+4,+5%5D;%0A++++%0A++++%7B%0A++++++++let+(left,+right)+=+slice.split_at_mut(2);%0A++++++++left.clone_from_slice(%26right%5B1..%5D);%0A++++%7D%0A++++%0A++++assert_eq!(slice,+%5B4,+5,+3,+4,+5%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.copy_from_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#3629-3631\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.copy_from_slice\" class=\"fn\">copy_from_slice</a>(&amp;mut self, src: &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>)<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a>,</div></h4></section></summary><div class=\"docblock\"><p>Copies all elements from <code>src</code> into <code>self</code>, using a memcpy.</p>\n<p>The length of <code>src</code> must be the same as <code>self</code>.</p>\n<p>If <code>T</code> does not implement <code>Copy</code>, use <a href=\"../primitive.slice.html#method.clone_from_slice\" title=\"method slice::clone_from_slice\"><code>clone_from_slice</code></a>.</p>\n<h5 id=\"panics-41\"><a class=\"doc-anchor\" href=\"#panics-41\">§</a>Panics</h5>\n<p>This function will panic if the two slices have different lengths.</p>\n<h5 id=\"examples-144\"><a class=\"doc-anchor\" href=\"#examples-144\">§</a>Examples</h5>\n<p>Copying two elements from a slice into another:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>src = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>dst = [<span class=\"number\">0</span>, <span class=\"number\">0</span>];\n\n<span class=\"comment\">// Because the slices have to be the same length,\n// we slice the source slice from four elements\n// to two. It will panic if we don't do this.\n</span>dst.copy_from_slice(<span class=\"kw-2\">&amp;</span>src[<span class=\"number\">2</span>..]);\n\n<span class=\"macro\">assert_eq!</span>(src, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n<span class=\"macro\">assert_eq!</span>(dst, [<span class=\"number\">3</span>, <span class=\"number\">4</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+src+=+%5B1,+2,+3,+4%5D;%0A++++let+mut+dst+=+%5B0,+0%5D;%0A++++%0A++++//+Because+the+slices+have+to+be+the+same+length,%0A++++//+we+slice+the+source+slice+from+four+elements%0A++++//+to+two.+It+will+panic+if+we+don't+do+this.%0A++++dst.copy_from_slice(%26src%5B2..%5D);%0A++++%0A++++assert_eq!(src,+%5B1,+2,+3,+4%5D);%0A++++assert_eq!(dst,+%5B3,+4%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Rust enforces that there can only be one mutable reference with no\nimmutable references to a particular piece of data in a particular\nscope. Because of this, attempting to use <code>copy_from_slice</code> on a\nsingle slice will result in a compile failure:</p>\n\n<div class=\"example-wrap compile_fail\"><a href=\"#\" class=\"tooltip\" title=\"This example deliberately fails to compile\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>slice = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n\nslice[..<span class=\"number\">2</span>].copy_from_slice(<span class=\"kw-2\">&amp;</span>slice[<span class=\"number\">3</span>..]); <span class=\"comment\">// compile fail!</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+slice+=+%5B1,+2,+3,+4,+5%5D;%0A++++%0A++++slice%5B..2%5D.copy_from_slice(%26slice%5B3..%5D);+//+compile+fail!%0A%7D&amp;edition=2021\">Run</a></div>\n<p>To work around this, we can use <a href=\"../primitive.slice.html#method.split_at_mut\" title=\"method slice::split_at_mut\"><code>split_at_mut</code></a> to create two distinct\nsub-slices from a slice:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>slice = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n\n{\n    <span class=\"kw\">let </span>(left, right) = slice.split_at_mut(<span class=\"number\">2</span>);\n    left.copy_from_slice(<span class=\"kw-2\">&amp;</span>right[<span class=\"number\">1</span>..]);\n}\n\n<span class=\"macro\">assert_eq!</span>(slice, [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+slice+=+%5B1,+2,+3,+4,+5%5D;%0A++++%0A++++%7B%0A++++++++let+(left,+right)+=+slice.split_at_mut(2);%0A++++++++left.copy_from_slice(%26right%5B1..%5D);%0A++++%7D%0A++++%0A++++assert_eq!(slice,+%5B4,+5,+3,+4,+5%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.copy_within\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0\">1.37.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#3683-3685\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.copy_within\" class=\"fn\">copy_within</a>&lt;R&gt;(&amp;mut self, src: R, dest: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>)<div class=\"where\">where\n    R: <a class=\"trait\" href=\"../ops/trait.RangeBounds.html\" title=\"trait std::ops::RangeBounds\">RangeBounds</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;,\n    T: <a class=\"trait\" href=\"../marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a>,</div></h4></section></summary><div class=\"docblock\"><p>Copies elements from one part of the slice to another part of itself,\nusing a memmove.</p>\n<p><code>src</code> is the range within <code>self</code> to copy from. <code>dest</code> is the starting\nindex of the range within <code>self</code> to copy to, which will have the same\nlength as <code>src</code>. The two ranges may overlap. The ends of the two ranges\nmust be less than or equal to <code>self.len()</code>.</p>\n<h5 id=\"panics-42\"><a class=\"doc-anchor\" href=\"#panics-42\">§</a>Panics</h5>\n<p>This function will panic if either range exceeds the end of the slice,\nor if the end of <code>src</code> is before the start.</p>\n<h5 id=\"examples-145\"><a class=\"doc-anchor\" href=\"#examples-145\">§</a>Examples</h5>\n<p>Copying four bytes within a slice:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bytes = <span class=\"kw-2\">*</span><span class=\"string\">b\"Hello, World!\"</span>;\n\nbytes.copy_within(<span class=\"number\">1</span>..<span class=\"number\">5</span>, <span class=\"number\">8</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>bytes, <span class=\"string\">b\"Hello, Wello!\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+bytes+=+*b%22Hello,+World!%22;%0A++++%0A++++bytes.copy_within(1..5,+8);%0A++++%0A++++assert_eq!(%26bytes,+b%22Hello,+Wello!%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.swap_with_slice\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0\">1.27.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#3750\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.swap_with_slice\" class=\"fn\">swap_with_slice</a>(&amp;mut self, other: &amp;mut <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>)</h4></section></summary><div class=\"docblock\"><p>Swaps all elements in <code>self</code> with those in <code>other</code>.</p>\n<p>The length of <code>other</code> must be the same as <code>self</code>.</p>\n<h5 id=\"panics-43\"><a class=\"doc-anchor\" href=\"#panics-43\">§</a>Panics</h5>\n<p>This function will panic if the two slices have different lengths.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<p>Swapping two elements across slices:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>slice1 = [<span class=\"number\">0</span>, <span class=\"number\">0</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>slice2 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];\n\nslice1.swap_with_slice(<span class=\"kw-2\">&amp;mut </span>slice2[<span class=\"number\">2</span>..]);\n\n<span class=\"macro\">assert_eq!</span>(slice1, [<span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n<span class=\"macro\">assert_eq!</span>(slice2, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+slice1+=+%5B0,+0%5D;%0A++++let+mut+slice2+=+%5B1,+2,+3,+4%5D;%0A++++%0A++++slice1.swap_with_slice(%26mut+slice2%5B2..%5D);%0A++++%0A++++assert_eq!(slice1,+%5B3,+4%5D);%0A++++assert_eq!(slice2,+%5B1,+2,+0,+0%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Rust enforces that there can only be one mutable reference to a\nparticular piece of data in a particular scope. Because of this,\nattempting to use <code>swap_with_slice</code> on a single slice will result in\na compile failure:</p>\n\n<div class=\"example-wrap compile_fail\"><a href=\"#\" class=\"tooltip\" title=\"This example deliberately fails to compile\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>slice = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\nslice[..<span class=\"number\">2</span>].swap_with_slice(<span class=\"kw-2\">&amp;mut </span>slice[<span class=\"number\">3</span>..]); <span class=\"comment\">// compile fail!</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+slice+=+%5B1,+2,+3,+4,+5%5D;%0A++++slice%5B..2%5D.swap_with_slice(%26mut+slice%5B3..%5D);+//+compile+fail!%0A%7D&amp;edition=2021\">Run</a></div>\n<p>To work around this, we can use <a href=\"../primitive.slice.html#method.split_at_mut\" title=\"method slice::split_at_mut\"><code>split_at_mut</code></a> to create two distinct\nmutable sub-slices from a slice:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>slice = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];\n\n{\n    <span class=\"kw\">let </span>(left, right) = slice.split_at_mut(<span class=\"number\">2</span>);\n    left.swap_with_slice(<span class=\"kw-2\">&amp;mut </span>right[<span class=\"number\">1</span>..]);\n}\n\n<span class=\"macro\">assert_eq!</span>(slice, [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+slice+=+%5B1,+2,+3,+4,+5%5D;%0A++++%0A++++%7B%0A++++++++let+(left,+right)+=+slice.split_at_mut(2);%0A++++++++left.swap_with_slice(%26mut+right%5B1..%5D);%0A++++%7D%0A++++%0A++++assert_eq!(slice,+%5B4,+5,+3,+1,+2%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.align_to\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.30.0\">1.30.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#3827\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.align_to\" class=\"fn\">align_to</a>&lt;U&gt;(&amp;self) -&gt; (&amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>, &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[U]</a>, &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>)</h4></section></summary><div class=\"docblock\"><p>Transmute the slice to a slice of another type, ensuring alignment of the types is\nmaintained.</p>\n<p>This method splits the slice into three distinct slices: prefix, correctly aligned middle\nslice of a new type, and the suffix slice. The middle part will be as big as possible under\nthe given alignment constraint and element size.</p>\n<p>This method has no purpose when either input element <code>T</code> or output element <code>U</code> are\nzero-sized and will return the original slice without splitting anything.</p>\n<h5 id=\"safety-10\"><a class=\"doc-anchor\" href=\"#safety-10\">§</a>Safety</h5>\n<p>This method is essentially a <code>transmute</code> with respect to the elements in the returned\nmiddle slice, so all the usual caveats pertaining to <code>transmute::&lt;T, U&gt;</code> also apply here.</p>\n<h5 id=\"examples-146\"><a class=\"doc-anchor\" href=\"#examples-146\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span>bytes: [u8; <span class=\"number\">7</span>] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>];\n    <span class=\"kw\">let </span>(prefix, shorts, suffix) = bytes.align_to::&lt;u16&gt;();\n    <span class=\"comment\">// less_efficient_algorithm_for_bytes(prefix);\n    // more_efficient_algorithm_for_aligned_shorts(shorts);\n    // less_efficient_algorithm_for_bytes(suffix);\n</span>}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++unsafe+%7B%0A++++++++let+bytes:+%5Bu8;+7%5D+=+%5B1,+2,+3,+4,+5,+6,+7%5D;%0A++++++++let+(prefix,+shorts,+suffix)+=+bytes.align_to::%3Cu16%3E();%0A++++++++//+less_efficient_algorithm_for_bytes(prefix);%0A++++++++//+more_efficient_algorithm_for_aligned_shorts(shorts);%0A++++++++//+less_efficient_algorithm_for_bytes(suffix);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.align_to_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.30.0\">1.30.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#3892\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.align_to_mut\" class=\"fn\">align_to_mut</a>&lt;U&gt;(&amp;mut self) -&gt; (&amp;mut <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>, &amp;mut <a class=\"primitive\" href=\"../primitive.slice.html\">[U]</a>, &amp;mut <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>)</h4></section></summary><div class=\"docblock\"><p>Transmute the mutable slice to a mutable slice of another type, ensuring alignment of the\ntypes is maintained.</p>\n<p>This method splits the slice into three distinct slices: prefix, correctly aligned middle\nslice of a new type, and the suffix slice. The middle part will be as big as possible under\nthe given alignment constraint and element size.</p>\n<p>This method has no purpose when either input element <code>T</code> or output element <code>U</code> are\nzero-sized and will return the original slice without splitting anything.</p>\n<h5 id=\"safety-11\"><a class=\"doc-anchor\" href=\"#safety-11\">§</a>Safety</h5>\n<p>This method is essentially a <code>transmute</code> with respect to the elements in the returned\nmiddle slice, so all the usual caveats pertaining to <code>transmute::&lt;T, U&gt;</code> also apply here.</p>\n<h5 id=\"examples-147\"><a class=\"doc-anchor\" href=\"#examples-147\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bytes: [u8; <span class=\"number\">7</span>] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>];\n    <span class=\"kw\">let </span>(prefix, shorts, suffix) = bytes.align_to_mut::&lt;u16&gt;();\n    <span class=\"comment\">// less_efficient_algorithm_for_bytes(prefix);\n    // more_efficient_algorithm_for_aligned_shorts(shorts);\n    // less_efficient_algorithm_for_bytes(suffix);\n</span>}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++unsafe+%7B%0A++++++++let+mut+bytes:+%5Bu8;+7%5D+=+%5B1,+2,+3,+4,+5,+6,+7%5D;%0A++++++++let+(prefix,+shorts,+suffix)+=+bytes.align_to_mut::%3Cu16%3E();%0A++++++++//+less_efficient_algorithm_for_bytes(prefix);%0A++++++++//+more_efficient_algorithm_for_aligned_shorts(shorts);%0A++++++++//+less_efficient_algorithm_for_bytes(suffix);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_simd\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#3992-3996\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.as_simd\" class=\"fn\">as_simd</a>&lt;const LANES: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;(&amp;self) -&gt; (&amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>, &amp;[<a class=\"struct\" href=\"../simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, LANES&gt;], &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>)<div class=\"where\">where\n    <a class=\"struct\" href=\"../simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, LANES&gt;: <a class=\"trait\" href=\"../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"../primitive.array.html\">[T; LANES]</a>&gt;,\n    T: <a class=\"trait\" href=\"../simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"../simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;LANES&gt;: <a class=\"trait\" href=\"../simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Split a slice into a prefix, a middle of aligned SIMD types, and a suffix.</p>\n<p>This is a safe wrapper around <a href=\"../primitive.slice.html#method.align_to\" title=\"method slice::align_to\"><code>slice::align_to</code></a>, so has the same weak\npostconditions as that method.  You’re only assured that\n<code>self.len() == prefix.len() + middle.len() * LANES + suffix.len()</code>.</p>\n<p>Notably, all of the following are possible:</p>\n<ul>\n<li><code>prefix.len() &gt;= LANES</code>.</li>\n<li><code>middle.is_empty()</code> despite <code>self.len() &gt;= 3 * LANES</code>.</li>\n<li><code>suffix.len() &gt;= LANES</code>.</li>\n</ul>\n<p>That said, this is a safe method, so if you’re only writing safe code,\nthen this can at most cause incorrect logic, not unsoundness.</p>\n<h5 id=\"panics-44\"><a class=\"doc-anchor\" href=\"#panics-44\">§</a>Panics</h5>\n<p>This will panic if the size of the SIMD type is different from\n<code>LANES</code> times that of the scalar.</p>\n<p>At the time of writing, the trait restrictions on <code>Simd&lt;T, LANES&gt;</code> keeps\nthat from ever happening, as only power-of-two numbers of lanes are\nsupported.  It’s possible that, in the future, those restrictions might\nbe lifted in a way that would make it possible to see panics from this\nmethod for something like <code>LANES == 3</code>.</p>\n<h5 id=\"examples-148\"><a class=\"doc-anchor\" href=\"#examples-148\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(portable_simd)]\n</span><span class=\"kw\">use </span>core::simd::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>short = <span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span>(prefix, middle, suffix) = short.as_simd::&lt;<span class=\"number\">4</span>&gt;();\n<span class=\"macro\">assert_eq!</span>(middle, []); <span class=\"comment\">// Not enough elements for anything in the middle\n\n// They might be split in any possible way between prefix and suffix\n</span><span class=\"kw\">let </span>it = prefix.iter().chain(suffix).copied();\n<span class=\"macro\">assert_eq!</span>(it.collect::&lt;Vec&lt;<span class=\"kw\">_</span>&gt;&gt;(), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n\n<span class=\"kw\">fn </span>basic_simd_sum(x: <span class=\"kw-2\">&amp;</span>[f32]) -&gt; f32 {\n    <span class=\"kw\">use </span>std::ops::Add;\n    <span class=\"kw\">let </span>(prefix, middle, suffix) = x.as_simd();\n    <span class=\"kw\">let </span>sums = f32x4::from_array([\n        prefix.iter().copied().sum(),\n        <span class=\"number\">0.0</span>,\n        <span class=\"number\">0.0</span>,\n        suffix.iter().copied().sum(),\n    ]);\n    <span class=\"kw\">let </span>sums = middle.iter().copied().fold(sums, f32x4::add);\n    sums.reduce_sum()\n}\n\n<span class=\"kw\">let </span>numbers: Vec&lt;f32&gt; = (<span class=\"number\">1</span>..<span class=\"number\">101</span>).map(|x| x <span class=\"kw\">as _</span>).collect();\n<span class=\"macro\">assert_eq!</span>(basic_simd_sum(<span class=\"kw-2\">&amp;</span>numbers[<span class=\"number\">1</span>..<span class=\"number\">99</span>]), <span class=\"number\">4949.0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++use+core::simd::prelude::*;%0A++++%0A++++let+short+=+%26%5B1,+2,+3%5D;%0A++++let+(prefix,+middle,+suffix)+=+short.as_simd::%3C4%3E();%0A++++assert_eq!(middle,+%5B%5D);+//+Not+enough+elements+for+anything+in+the+middle%0A++++%0A++++//+They+might+be+split+in+any+possible+way+between+prefix+and+suffix%0A++++let+it+=+prefix.iter().chain(suffix).copied();%0A++++assert_eq!(it.collect::%3CVec%3C_%3E%3E(),+vec!%5B1,+2,+3%5D);%0A++++%0A++++fn+basic_simd_sum(x:+%26%5Bf32%5D)+-%3E+f32+%7B%0A++++++++use+std::ops::Add;%0A++++++++let+(prefix,+middle,+suffix)+=+x.as_simd();%0A++++++++let+sums+=+f32x4::from_array(%5B%0A++++++++++++prefix.iter().copied().sum(),%0A++++++++++++0.0,%0A++++++++++++0.0,%0A++++++++++++suffix.iter().copied().sum(),%0A++++++++%5D);%0A++++++++let+sums+=+middle.iter().copied().fold(sums,+f32x4::add);%0A++++++++sums.reduce_sum()%0A++++%7D%0A++++%0A++++let+numbers:+Vec%3Cf32%3E+=+(1..101).map(%7Cx%7C+x+as+_).collect();%0A++++assert_eq!(basic_simd_sum(%26numbers%5B1..99%5D),+4949.0);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_simd_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#4037-4041\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.as_simd_mut\" class=\"fn\">as_simd_mut</a>&lt;const LANES: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;(\n    &amp;mut self,\n) -&gt; (&amp;mut <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>, &amp;mut [<a class=\"struct\" href=\"../simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, LANES&gt;], &amp;mut <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>)<div class=\"where\">where\n    <a class=\"struct\" href=\"../simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, LANES&gt;: <a class=\"trait\" href=\"../convert/trait.AsMut.html\" title=\"trait std::convert::AsMut\">AsMut</a>&lt;<a class=\"primitive\" href=\"../primitive.array.html\">[T; LANES]</a>&gt;,\n    T: <a class=\"trait\" href=\"../simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>,\n    <a class=\"struct\" href=\"../simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;LANES&gt;: <a class=\"trait\" href=\"../simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Split a mutable slice into a mutable prefix, a middle of aligned SIMD types,\nand a mutable suffix.</p>\n<p>This is a safe wrapper around <a href=\"../primitive.slice.html#method.align_to_mut\" title=\"method slice::align_to_mut\"><code>slice::align_to_mut</code></a>, so has the same weak\npostconditions as that method.  You’re only assured that\n<code>self.len() == prefix.len() + middle.len() * LANES + suffix.len()</code>.</p>\n<p>Notably, all of the following are possible:</p>\n<ul>\n<li><code>prefix.len() &gt;= LANES</code>.</li>\n<li><code>middle.is_empty()</code> despite <code>self.len() &gt;= 3 * LANES</code>.</li>\n<li><code>suffix.len() &gt;= LANES</code>.</li>\n</ul>\n<p>That said, this is a safe method, so if you’re only writing safe code,\nthen this can at most cause incorrect logic, not unsoundness.</p>\n<p>This is the mutable version of <a href=\"../primitive.slice.html#method.as_simd\" title=\"method slice::as_simd\"><code>slice::as_simd</code></a>; see that for examples.</p>\n<h5 id=\"panics-45\"><a class=\"doc-anchor\" href=\"#panics-45\">§</a>Panics</h5>\n<p>This will panic if the size of the SIMD type is different from\n<code>LANES</code> times that of the scalar.</p>\n<p>At the time of writing, the trait restrictions on <code>Simd&lt;T, LANES&gt;</code> keeps\nthat from ever happening, as only power-of-two numbers of lanes are\nsupported.  It’s possible that, in the future, those restrictions might\nbe lifted in a way that would make it possible to see panics from this\nmethod for something like <code>LANES == 3</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_sorted\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#4077-4079\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.is_sorted\" class=\"fn\">is_sorted</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>is_sorted</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/53485\">#53485</a>)</span></div></span></summary><div class=\"docblock\"><p>Checks if the elements of this slice are sorted.</p>\n<p>That is, for each element <code>a</code> and its following element <code>b</code>, <code>a &lt;= b</code> must hold. If the\nslice yields exactly zero or one element, <code>true</code> is returned.</p>\n<p>Note that if <code>Self::Item</code> is only <code>PartialOrd</code>, but not <code>Ord</code>, the above definition\nimplies that this function returns <code>false</code> if any two consecutive items are not\ncomparable.</p>\n<h5 id=\"examples-149\"><a class=\"doc-anchor\" href=\"#examples-149\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(is_sorted)]\n</span><span class=\"kw\">let </span>empty: [i32; <span class=\"number\">0</span>] = [];\n\n<span class=\"macro\">assert!</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">9</span>].is_sorted());\n<span class=\"macro\">assert!</span>(![<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>].is_sorted());\n<span class=\"macro\">assert!</span>([<span class=\"number\">0</span>].is_sorted());\n<span class=\"macro\">assert!</span>(empty.is_sorted());\n<span class=\"macro\">assert!</span>(![<span class=\"number\">0.0</span>, <span class=\"number\">1.0</span>, f32::NAN].is_sorted());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(is_sorted)%5D%0Afn+main()+%7B%0A++++let+empty:+%5Bi32;+0%5D+=+%5B%5D;%0A++++%0A++++assert!(%5B1,+2,+2,+9%5D.is_sorted());%0A++++assert!(!%5B1,+3,+2,+4%5D.is_sorted());%0A++++assert!(%5B0%5D.is_sorted());%0A++++assert!(empty.is_sorted());%0A++++assert!(!%5B0.0,+1.0,+f32::NAN%5D.is_sorted());%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_sorted_by\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#4106-4108\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.is_sorted_by\" class=\"fn\">is_sorted_by</a>&lt;'a, F&gt;(&amp;'a self, compare: F) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a T</a>, <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a T</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>is_sorted</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/53485\">#53485</a>)</span></div></span></summary><div class=\"docblock\"><p>Checks if the elements of this slice are sorted using the given comparator function.</p>\n<p>Instead of using <code>PartialOrd::partial_cmp</code>, this function uses the given <code>compare</code>\nfunction to determine whether two elements are to be considered in sorted order.</p>\n<h5 id=\"examples-150\"><a class=\"doc-anchor\" href=\"#examples-150\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(is_sorted)]\n\n</span><span class=\"macro\">assert!</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">9</span>].is_sorted_by(|a, b| a &lt;= b));\n<span class=\"macro\">assert!</span>(![<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">9</span>].is_sorted_by(|a, b| a &lt; b));\n\n<span class=\"macro\">assert!</span>([<span class=\"number\">0</span>].is_sorted_by(|a, b| <span class=\"bool-val\">true</span>));\n<span class=\"macro\">assert!</span>([<span class=\"number\">0</span>].is_sorted_by(|a, b| <span class=\"bool-val\">false</span>));\n\n<span class=\"kw\">let </span>empty: [i32; <span class=\"number\">0</span>] = [];\n<span class=\"macro\">assert!</span>(empty.is_sorted_by(|a, b| <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert!</span>(empty.is_sorted_by(|a, b| <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(is_sorted)%5D%0A%0Afn+main()+%7B%0A++++assert!(%5B1,+2,+2,+9%5D.is_sorted_by(%7Ca,+b%7C+a+%3C=+b));%0A++++assert!(!%5B1,+2,+2,+9%5D.is_sorted_by(%7Ca,+b%7C+a+%3C+b));%0A++++%0A++++assert!(%5B0%5D.is_sorted_by(%7Ca,+b%7C+true));%0A++++assert!(%5B0%5D.is_sorted_by(%7Ca,+b%7C+false));%0A++++%0A++++let+empty:+%5Bi32;+0%5D+=+%5B%5D;%0A++++assert!(empty.is_sorted_by(%7Ca,+b%7C+false));%0A++++assert!(empty.is_sorted_by(%7Ca,+b%7C+true));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_sorted_by_key\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#4132-4135\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.is_sorted_by_key\" class=\"fn\">is_sorted_by_key</a>&lt;'a, F, K&gt;(&amp;'a self, f: F) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a T</a>) -&gt; K,\n    K: <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>is_sorted</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/53485\">#53485</a>)</span></div></span></summary><div class=\"docblock\"><p>Checks if the elements of this slice are sorted using the given key extraction function.</p>\n<p>Instead of comparing the slice’s elements directly, this function compares the keys of the\nelements, as determined by <code>f</code>. Apart from that, it’s equivalent to <a href=\"../primitive.slice.html#method.is_sorted\" title=\"method slice::is_sorted\"><code>is_sorted</code></a>; see its\ndocumentation for more information.</p>\n<h5 id=\"examples-151\"><a class=\"doc-anchor\" href=\"#examples-151\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(is_sorted)]\n\n</span><span class=\"macro\">assert!</span>([<span class=\"string\">\"c\"</span>, <span class=\"string\">\"bb\"</span>, <span class=\"string\">\"aaa\"</span>].is_sorted_by_key(|s| s.len()));\n<span class=\"macro\">assert!</span>(![-<span class=\"number\">2i32</span>, -<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>].is_sorted_by_key(|n| n.abs()));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(is_sorted)%5D%0A%0Afn+main()+%7B%0A++++assert!(%5B%22c%22,+%22bb%22,+%22aaa%22%5D.is_sorted_by_key(%7Cs%7C+s.len()));%0A++++assert!(!%5B-2i32,+-1,+0,+3%5D.is_sorted_by_key(%7Cn%7C+n.abs()));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partition_point\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.52.0\">1.52.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#4191-4193\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.partition_point\" class=\"fn\">partition_point</a>&lt;P&gt;(&amp;self, pred: P) -&gt; <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a><div class=\"where\">where\n    P: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns the index of the partition point according to the given predicate\n(the index of the first element of the second partition).</p>\n<p>The slice is assumed to be partitioned according to the given predicate.\nThis means that all elements for which the predicate returns true are at the start of the slice\nand all elements for which the predicate returns false are at the end.\nFor example, <code>[7, 15, 3, 5, 4, 12, 6]</code> is partitioned under the predicate <code>x % 2 != 0</code>\n(all odd numbers are at the start, all even at the end).</p>\n<p>If this slice is not partitioned, the returned result is unspecified and meaningless,\nas this method performs a kind of binary search.</p>\n<p>See also <a href=\"../primitive.slice.html#method.binary_search\" title=\"method slice::binary_search\"><code>binary_search</code></a>, <a href=\"../primitive.slice.html#method.binary_search_by\" title=\"method slice::binary_search_by\"><code>binary_search_by</code></a>, and <a href=\"../primitive.slice.html#method.binary_search_by_key\" title=\"method slice::binary_search_by_key\"><code>binary_search_by_key</code></a>.</p>\n<h5 id=\"examples-152\"><a class=\"doc-anchor\" href=\"#examples-152\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>];\n<span class=\"kw\">let </span>i = v.partition_point(|<span class=\"kw-2\">&amp;</span>x| x &lt; <span class=\"number\">5</span>);\n\n<span class=\"macro\">assert_eq!</span>(i, <span class=\"number\">4</span>);\n<span class=\"macro\">assert!</span>(v[..i].iter().all(|<span class=\"kw-2\">&amp;</span>x| x &lt; <span class=\"number\">5</span>));\n<span class=\"macro\">assert!</span>(v[i..].iter().all(|<span class=\"kw-2\">&amp;</span>x| !(x &lt; <span class=\"number\">5</span>)));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v+=+%5B1,+2,+3,+3,+5,+6,+7%5D;%0A++++let+i+=+v.partition_point(%7C%26x%7C+x+%3C+5);%0A++++%0A++++assert_eq!(i,+4);%0A++++assert!(v%5B..i%5D.iter().all(%7C%26x%7C+x+%3C+5));%0A++++assert!(v%5Bi..%5D.iter().all(%7C%26x%7C+!(x+%3C+5)));%0A%7D&amp;edition=2021\">Run</a></div>\n<p>If all elements of the slice match the predicate, including if the slice\nis empty, then the length of the slice will be returned:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = [<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>];\n<span class=\"macro\">assert_eq!</span>(a.partition_point(|x| x &lt; <span class=\"kw-2\">&amp;</span><span class=\"number\">100</span>), a.len());\n<span class=\"kw\">let </span>a: [i32; <span class=\"number\">0</span>] = [];\n<span class=\"macro\">assert_eq!</span>(a.partition_point(|x| x &lt; <span class=\"kw-2\">&amp;</span><span class=\"number\">100</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+a+=+%5B2,+4,+8%5D;%0A++++assert_eq!(a.partition_point(%7Cx%7C+x+%3C+%26100),+a.len());%0A++++let+a:+%5Bi32;+0%5D+=+%5B%5D;%0A++++assert_eq!(a.partition_point(%7Cx%7C+x+%3C+%26100),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>If you want to insert an item to a sorted vector, while maintaining\nsort order:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">13</span>, <span class=\"number\">21</span>, <span class=\"number\">34</span>, <span class=\"number\">55</span>];\n<span class=\"kw\">let </span>num = <span class=\"number\">42</span>;\n<span class=\"kw\">let </span>idx = s.partition_point(|<span class=\"kw-2\">&amp;</span>x| x &lt;= num);\ns.insert(idx, num);\n<span class=\"macro\">assert_eq!</span>(s, [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">13</span>, <span class=\"number\">21</span>, <span class=\"number\">34</span>, <span class=\"number\">42</span>, <span class=\"number\">55</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+s+=+vec!%5B0,+1,+1,+1,+1,+2,+3,+5,+8,+13,+21,+34,+55%5D;%0A++++let+num+=+42;%0A++++let+idx+=+s.partition_point(%7C%26x%7C+x+%3C=+num);%0A++++s.insert(idx,+num);%0A++++assert_eq!(s,+%5B0,+1,+1,+1,+1,+2,+3,+5,+8,+13,+21,+34,+42,+55%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.take\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#4249\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.take\" class=\"fn\">take</a>&lt;'a, R&gt;(self: &amp;mut &amp;'a <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>, range: R) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;'a <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"../ops/trait.OneSidedRange.html\" title=\"trait std::ops::OneSidedRange\">OneSidedRange</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_take</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/62280\">#62280</a>)</span></div></span></summary><div class=\"docblock\"><p>Removes the subslice corresponding to the given range\nand returns a reference to it.</p>\n<p>Returns <code>None</code> and does not modify the slice if the given\nrange is out of bounds.</p>\n<p>Note that this method only accepts one-sided ranges such as\n<code>2..</code> or <code>..6</code>, but not <code>2..6</code>.</p>\n<h5 id=\"examples-153\"><a class=\"doc-anchor\" href=\"#examples-153\">§</a>Examples</h5>\n<p>Taking the first three elements of a slice:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(slice_take)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>slice: <span class=\"kw-2\">&amp;</span>[<span class=\"kw\">_</span>] = <span class=\"kw-2\">&amp;</span>[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>first_three = slice.take(..<span class=\"number\">3</span>).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(slice, <span class=\"kw-2\">&amp;</span>[<span class=\"string\">'d'</span>]);\n<span class=\"macro\">assert_eq!</span>(first_three, <span class=\"kw-2\">&amp;</span>[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(slice_take)%5D%0A%0Afn+main()+%7B%0A++++let+mut+slice:+%26%5B_%5D+=+%26%5B'a',+'b',+'c',+'d'%5D;%0A++++let+mut+first_three+=+slice.take(..3).unwrap();%0A++++%0A++++assert_eq!(slice,+%26%5B'd'%5D);%0A++++assert_eq!(first_three,+%26%5B'a',+'b',+'c'%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p>Taking the last two elements of a slice:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(slice_take)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>slice: <span class=\"kw-2\">&amp;</span>[<span class=\"kw\">_</span>] = <span class=\"kw-2\">&amp;</span>[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>tail = slice.take(<span class=\"number\">2</span>..).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(slice, <span class=\"kw-2\">&amp;</span>[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>]);\n<span class=\"macro\">assert_eq!</span>(tail, <span class=\"kw-2\">&amp;</span>[<span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(slice_take)%5D%0A%0Afn+main()+%7B%0A++++let+mut+slice:+%26%5B_%5D+=+%26%5B'a',+'b',+'c',+'d'%5D;%0A++++let+mut+tail+=+slice.take(2..).unwrap();%0A++++%0A++++assert_eq!(slice,+%26%5B'a',+'b'%5D);%0A++++assert_eq!(tail,+%26%5B'c',+'d'%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p>Getting <code>None</code> when <code>range</code> is out of bounds:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(slice_take)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>slice: <span class=\"kw-2\">&amp;</span>[<span class=\"kw\">_</span>] = <span class=\"kw-2\">&amp;</span>[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>];\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, slice.take(<span class=\"number\">5</span>..));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, slice.take(..<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, slice.take(..=<span class=\"number\">4</span>));\n<span class=\"kw\">let </span>expected: <span class=\"kw-2\">&amp;</span>[char] = <span class=\"kw-2\">&amp;</span>[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>];\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(expected), slice.take(..<span class=\"number\">4</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(slice_take)%5D%0A%0Afn+main()+%7B%0A++++let+mut+slice:+%26%5B_%5D+=+%26%5B'a',+'b',+'c',+'d'%5D;%0A++++%0A++++assert_eq!(None,+slice.take(5..));%0A++++assert_eq!(None,+slice.take(..5));%0A++++assert_eq!(None,+slice.take(..=4));%0A++++let+expected:+%26%5Bchar%5D+=+%26%5B'a',+'b',+'c',+'d'%5D;%0A++++assert_eq!(Some(expected),+slice.take(..4));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.take_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#4318-4321\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.take_mut\" class=\"fn\">take_mut</a>&lt;'a, R&gt;(self: &amp;mut &amp;'a mut <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>, range: R) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;'a mut <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"../ops/trait.OneSidedRange.html\" title=\"trait std::ops::OneSidedRange\">OneSidedRange</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_take</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/62280\">#62280</a>)</span></div></span></summary><div class=\"docblock\"><p>Removes the subslice corresponding to the given range\nand returns a mutable reference to it.</p>\n<p>Returns <code>None</code> and does not modify the slice if the given\nrange is out of bounds.</p>\n<p>Note that this method only accepts one-sided ranges such as\n<code>2..</code> or <code>..6</code>, but not <code>2..6</code>.</p>\n<h5 id=\"examples-154\"><a class=\"doc-anchor\" href=\"#examples-154\">§</a>Examples</h5>\n<p>Taking the first three elements of a slice:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(slice_take)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>slice: <span class=\"kw-2\">&amp;mut </span>[<span class=\"kw\">_</span>] = <span class=\"kw-2\">&amp;mut </span>[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>first_three = slice.take_mut(..<span class=\"number\">3</span>).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(slice, <span class=\"kw-2\">&amp;mut </span>[<span class=\"string\">'d'</span>]);\n<span class=\"macro\">assert_eq!</span>(first_three, <span class=\"kw-2\">&amp;mut </span>[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(slice_take)%5D%0A%0Afn+main()+%7B%0A++++let+mut+slice:+%26mut+%5B_%5D+=+%26mut+%5B'a',+'b',+'c',+'d'%5D;%0A++++let+mut+first_three+=+slice.take_mut(..3).unwrap();%0A++++%0A++++assert_eq!(slice,+%26mut+%5B'd'%5D);%0A++++assert_eq!(first_three,+%26mut+%5B'a',+'b',+'c'%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p>Taking the last two elements of a slice:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(slice_take)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>slice: <span class=\"kw-2\">&amp;mut </span>[<span class=\"kw\">_</span>] = <span class=\"kw-2\">&amp;mut </span>[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>tail = slice.take_mut(<span class=\"number\">2</span>..).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(slice, <span class=\"kw-2\">&amp;mut </span>[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>]);\n<span class=\"macro\">assert_eq!</span>(tail, <span class=\"kw-2\">&amp;mut </span>[<span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(slice_take)%5D%0A%0Afn+main()+%7B%0A++++let+mut+slice:+%26mut+%5B_%5D+=+%26mut+%5B'a',+'b',+'c',+'d'%5D;%0A++++let+mut+tail+=+slice.take_mut(2..).unwrap();%0A++++%0A++++assert_eq!(slice,+%26mut+%5B'a',+'b'%5D);%0A++++assert_eq!(tail,+%26mut+%5B'c',+'d'%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p>Getting <code>None</code> when <code>range</code> is out of bounds:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(slice_take)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>slice: <span class=\"kw-2\">&amp;mut </span>[<span class=\"kw\">_</span>] = <span class=\"kw-2\">&amp;mut </span>[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>];\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, slice.take_mut(<span class=\"number\">5</span>..));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, slice.take_mut(..<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, slice.take_mut(..=<span class=\"number\">4</span>));\n<span class=\"kw\">let </span>expected: <span class=\"kw-2\">&amp;mut </span>[<span class=\"kw\">_</span>] = <span class=\"kw-2\">&amp;mut </span>[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>];\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(expected), slice.take_mut(..<span class=\"number\">4</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(slice_take)%5D%0A%0Afn+main()+%7B%0A++++let+mut+slice:+%26mut+%5B_%5D+=+%26mut+%5B'a',+'b',+'c',+'d'%5D;%0A++++%0A++++assert_eq!(None,+slice.take_mut(5..));%0A++++assert_eq!(None,+slice.take_mut(..5));%0A++++assert_eq!(None,+slice.take_mut(..=4));%0A++++let+expected:+%26mut+%5B_%5D+=+%26mut+%5B'a',+'b',+'c',+'d'%5D;%0A++++assert_eq!(Some(expected),+slice.take_mut(..4));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.take_first\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#4357\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.take_first\" class=\"fn\">take_first</a>&lt;'a&gt;(self: &amp;mut &amp;'a <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a T</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_take</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/62280\">#62280</a>)</span></div></span></summary><div class=\"docblock\"><p>Removes the first element of the slice and returns a reference\nto it.</p>\n<p>Returns <code>None</code> if the slice is empty.</p>\n<h5 id=\"examples-155\"><a class=\"doc-anchor\" href=\"#examples-155\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(slice_take)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>slice: <span class=\"kw-2\">&amp;</span>[<span class=\"kw\">_</span>] = <span class=\"kw-2\">&amp;</span>[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];\n<span class=\"kw\">let </span>first = slice.take_first().unwrap();\n\n<span class=\"macro\">assert_eq!</span>(slice, <span class=\"kw-2\">&amp;</span>[<span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>]);\n<span class=\"macro\">assert_eq!</span>(first, <span class=\"kw-2\">&amp;</span><span class=\"string\">'a'</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(slice_take)%5D%0A%0Afn+main()+%7B%0A++++let+mut+slice:+%26%5B_%5D+=+%26%5B'a',+'b',+'c'%5D;%0A++++let+first+=+slice.take_first().unwrap();%0A++++%0A++++assert_eq!(slice,+%26%5B'b',+'c'%5D);%0A++++assert_eq!(first,+%26'a');%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.take_first_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#4382\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.take_first_mut\" class=\"fn\">take_first_mut</a>&lt;'a&gt;(self: &amp;mut &amp;'a mut <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a mut T</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_take</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/62280\">#62280</a>)</span></div></span></summary><div class=\"docblock\"><p>Removes the first element of the slice and returns a mutable\nreference to it.</p>\n<p>Returns <code>None</code> if the slice is empty.</p>\n<h5 id=\"examples-156\"><a class=\"doc-anchor\" href=\"#examples-156\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(slice_take)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>slice: <span class=\"kw-2\">&amp;mut </span>[<span class=\"kw\">_</span>] = <span class=\"kw-2\">&amp;mut </span>[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];\n<span class=\"kw\">let </span>first = slice.take_first_mut().unwrap();\n<span class=\"kw-2\">*</span>first = <span class=\"string\">'d'</span>;\n\n<span class=\"macro\">assert_eq!</span>(slice, <span class=\"kw-2\">&amp;</span>[<span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>]);\n<span class=\"macro\">assert_eq!</span>(first, <span class=\"kw-2\">&amp;</span><span class=\"string\">'d'</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(slice_take)%5D%0A%0Afn+main()+%7B%0A++++let+mut+slice:+%26mut+%5B_%5D+=+%26mut+%5B'a',+'b',+'c'%5D;%0A++++let+first+=+slice.take_first_mut().unwrap();%0A++++*first+=+'d';%0A++++%0A++++assert_eq!(slice,+%26%5B'b',+'c'%5D);%0A++++assert_eq!(first,+%26'd');%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.take_last\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#4406\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.take_last\" class=\"fn\">take_last</a>&lt;'a&gt;(self: &amp;mut &amp;'a <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a T</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_take</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/62280\">#62280</a>)</span></div></span></summary><div class=\"docblock\"><p>Removes the last element of the slice and returns a reference\nto it.</p>\n<p>Returns <code>None</code> if the slice is empty.</p>\n<h5 id=\"examples-157\"><a class=\"doc-anchor\" href=\"#examples-157\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(slice_take)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>slice: <span class=\"kw-2\">&amp;</span>[<span class=\"kw\">_</span>] = <span class=\"kw-2\">&amp;</span>[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];\n<span class=\"kw\">let </span>last = slice.take_last().unwrap();\n\n<span class=\"macro\">assert_eq!</span>(slice, <span class=\"kw-2\">&amp;</span>[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>]);\n<span class=\"macro\">assert_eq!</span>(last, <span class=\"kw-2\">&amp;</span><span class=\"string\">'c'</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(slice_take)%5D%0A%0Afn+main()+%7B%0A++++let+mut+slice:+%26%5B_%5D+=+%26%5B'a',+'b',+'c'%5D;%0A++++let+last+=+slice.take_last().unwrap();%0A++++%0A++++assert_eq!(slice,+%26%5B'a',+'b'%5D);%0A++++assert_eq!(last,+%26'c');%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.take_last_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#4431\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.take_last_mut\" class=\"fn\">take_last_mut</a>&lt;'a&gt;(self: &amp;mut &amp;'a mut <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a mut T</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>slice_take</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/62280\">#62280</a>)</span></div></span></summary><div class=\"docblock\"><p>Removes the last element of the slice and returns a mutable\nreference to it.</p>\n<p>Returns <code>None</code> if the slice is empty.</p>\n<h5 id=\"examples-158\"><a class=\"doc-anchor\" href=\"#examples-158\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(slice_take)]\n\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>slice: <span class=\"kw-2\">&amp;mut </span>[<span class=\"kw\">_</span>] = <span class=\"kw-2\">&amp;mut </span>[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];\n<span class=\"kw\">let </span>last = slice.take_last_mut().unwrap();\n<span class=\"kw-2\">*</span>last = <span class=\"string\">'d'</span>;\n\n<span class=\"macro\">assert_eq!</span>(slice, <span class=\"kw-2\">&amp;</span>[<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>]);\n<span class=\"macro\">assert_eq!</span>(last, <span class=\"kw-2\">&amp;</span><span class=\"string\">'d'</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(slice_take)%5D%0A%0Afn+main()+%7B%0A++++let+mut+slice:+%26mut+%5B_%5D+=+%26mut+%5B'a',+'b',+'c'%5D;%0A++++let+last+=+slice.take_last_mut().unwrap();%0A++++*last+=+'d';%0A++++%0A++++assert_eq!(slice,+%26%5B'a',+'b'%5D);%0A++++assert_eq!(last,+%26'd');%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_many_unchecked_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#4465-4468\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.get_many_unchecked_mut\" class=\"fn\">get_many_unchecked_mut</a>&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;(\n    &amp;mut self,\n    indices: [<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>; <a class=\"primitive\" href=\"../primitive.array.html\">N</a>],\n) -&gt; [<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>; <a class=\"primitive\" href=\"../primitive.array.html\">N</a>]</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>get_many_mut</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/104642\">#104642</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns mutable references to many indices at once, without doing any checks.</p>\n<p>For a safe alternative see <a href=\"../primitive.slice.html#method.get_many_mut\" title=\"method slice::get_many_mut\"><code>get_many_mut</code></a>.</p>\n<h5 id=\"safety-12\"><a class=\"doc-anchor\" href=\"#safety-12\">§</a>Safety</h5>\n<p>Calling this method with overlapping or out-of-bounds indices is <em><a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">undefined behavior</a></em>\neven if the resulting references are not used.</p>\n<h5 id=\"examples-159\"><a class=\"doc-anchor\" href=\"#examples-159\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(get_many_mut)]\n\n</span><span class=\"kw\">let </span>x = <span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>];\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span>[a, b] = x.get_many_unchecked_mut([<span class=\"number\">0</span>, <span class=\"number\">2</span>]);\n    <span class=\"kw-2\">*</span>a <span class=\"kw-2\">*</span>= <span class=\"number\">10</span>;\n    <span class=\"kw-2\">*</span>b <span class=\"kw-2\">*</span>= <span class=\"number\">100</span>;\n}\n<span class=\"macro\">assert_eq!</span>(x, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">10</span>, <span class=\"number\">2</span>, <span class=\"number\">400</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(get_many_mut)%5D%0A%0Afn+main()+%7B%0A++++let+x+=+%26mut+%5B1,+2,+4%5D;%0A++++%0A++++unsafe+%7B%0A++++++++let+%5Ba,+b%5D+=+x.get_many_unchecked_mut(%5B0,+2%5D);%0A++++++++*a+*=+10;%0A++++++++*b+*=+100;%0A++++%7D%0A++++assert_eq!(x,+%26%5B10,+2,+400%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_many_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/mod.rs.html#4507-4510\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.get_many_mut\" class=\"fn\">get_many_mut</a>&lt;const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;(\n    &amp;mut self,\n    indices: [<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>; <a class=\"primitive\" href=\"../primitive.array.html\">N</a>],\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;[<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>; <a class=\"primitive\" href=\"../primitive.array.html\">N</a>], <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/slice/struct.GetManyMutError.html\" title=\"struct core::slice::GetManyMutError\">GetManyMutError</a>&lt;N&gt;&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>get_many_mut</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/104642\">#104642</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns mutable references to many indices at once.</p>\n<p>Returns an error if any index is out-of-bounds, or if the same index was\npassed more than once.</p>\n<h5 id=\"examples-160\"><a class=\"doc-anchor\" href=\"#examples-160\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(get_many_mut)]\n\n</span><span class=\"kw\">let </span>v = <span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span>([a, b]) = v.get_many_mut([<span class=\"number\">0</span>, <span class=\"number\">2</span>]) {\n    <span class=\"kw-2\">*</span>a = <span class=\"number\">413</span>;\n    <span class=\"kw-2\">*</span>b = <span class=\"number\">612</span>;\n}\n<span class=\"macro\">assert_eq!</span>(v, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">413</span>, <span class=\"number\">2</span>, <span class=\"number\">612</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(get_many_mut)%5D%0A%0Afn+main()+%7B%0A++++let+v+=+%26mut+%5B1,+2,+3%5D;%0A++++if+let+Ok(%5Ba,+b%5D)+=+v.get_many_mut(%5B0,+2%5D)+%7B%0A++++++++*a+=+413;%0A++++++++*b+=+612;%0A++++%7D%0A++++assert_eq!(v,+%26%5B413,+2,+612%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_str\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#560\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.as_str\" class=\"fn\">as_str</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"../primitive.str.html\">str</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>ascii_char</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span></summary><div class=\"docblock\"><p>Views this slice of ASCII characters as a UTF-8 <code>str</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_bytes\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#571\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.as_bytes\" class=\"fn\">as_bytes</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">ⓘ</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>ascii_char</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span></summary><div class=\"docblock\"><p>Views this slice of ASCII characters as a slice of <code>u8</code> bytes.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_ascii\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.23.0\">1.23.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/ascii.rs.html#17\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.is_ascii\" class=\"fn\">is_ascii</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Checks if all bytes in this slice are within the ASCII range.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_ascii\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/ascii.rs.html#26\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.as_ascii\" class=\"fn\">as_ascii</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;&amp;[<a class=\"enum\" href=\"../ascii/enum.Char.html\" title=\"enum std::ascii::Char\">AsciiChar</a>]&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>ascii_char</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span></summary><div class=\"docblock\"><p>If this slice <a href=\"../primitive.slice.html#method.is_ascii\" title=\"method slice::is_ascii\"><code>is_ascii</code></a>, returns it as a slice of\n<a href=\"../ascii/enum.Char.html\" title=\"enum std::ascii::Char\">ASCII characters</a>, otherwise returns <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_ascii_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/ascii.rs.html#44\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.as_ascii_unchecked\" class=\"fn\">as_ascii_unchecked</a>(&amp;self) -&gt; &amp;[<a class=\"enum\" href=\"../ascii/enum.Char.html\" title=\"enum std::ascii::Char\">AsciiChar</a>]</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>ascii_char</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110998\">#110998</a>)</span></div></span></summary><div class=\"docblock\"><p>Converts this slice of bytes into a slice of ASCII characters,\nwithout checking whether they’re valid.</p>\n<h5 id=\"safety-13\"><a class=\"doc-anchor\" href=\"#safety-13\">§</a>Safety</h5>\n<p>Every byte in the slice must be in <code>0..=127</code>, or else this is UB.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq_ignore_ascii_case\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.23.0\">1.23.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/ascii.rs.html#58\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.eq_ignore_ascii_case\" class=\"fn\">eq_ignore_ascii_case</a>(&amp;self, other: &amp;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Checks that two slices are an ASCII case-insensitive match.</p>\n<p>Same as <code>to_ascii_lowercase(a) == to_ascii_lowercase(b)</code>,\nbut without allocating and copying temporaries.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.make_ascii_uppercase\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.23.0\">1.23.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/ascii.rs.html#73\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.make_ascii_uppercase\" class=\"fn\">make_ascii_uppercase</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Converts this slice to its ASCII upper case equivalent in-place.</p>\n<p>ASCII letters ‘a’ to ‘z’ are mapped to ‘A’ to ‘Z’,\nbut non-ASCII letters are unchanged.</p>\n<p>To return a new uppercased value without modifying the existing one, use\n<a href=\"#method.to_ascii_uppercase\"><code>to_ascii_uppercase</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.make_ascii_lowercase\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.23.0\">1.23.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/ascii.rs.html#90\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.make_ascii_lowercase\" class=\"fn\">make_ascii_lowercase</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Converts this slice to its ASCII lower case equivalent in-place.</p>\n<p>ASCII letters ‘A’ to ‘Z’ are mapped to ‘a’ to ‘z’,\nbut non-ASCII letters are unchanged.</p>\n<p>To return a new lowercased value without modifying the existing one, use\n<a href=\"#method.to_ascii_lowercase\"><code>to_ascii_lowercase</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.escape_ascii\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.60.0\">1.60.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/ascii.rs.html#110\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.escape_ascii\" class=\"fn\">escape_ascii</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../slice/struct.EscapeAscii.html\" title=\"struct std::slice::EscapeAscii\">EscapeAscii</a>&lt;'_&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"EscapeAscii<'_>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns an iterator that produces an escaped version of this slice,\ntreating it as an ASCII string.</p>\n<h5 id=\"examples-161\"><a class=\"doc-anchor\" href=\"#examples-161\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>\n<span class=\"kw\">let </span>s = <span class=\"string\">b\"0\\t\\r\\n'\\\"\\\\\\x9d\"</span>;\n<span class=\"kw\">let </span>escaped = s.escape_ascii().to_string();\n<span class=\"macro\">assert_eq!</span>(escaped, <span class=\"string\">\"0\\\\t\\\\r\\\\n\\\\'\\\\\\\"\\\\\\\\\\\\x9d\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%0Afn+main()+%7B%0A++++let+s+=+b%220%5Ct%5Cr%5Cn'%5C%22%5C%5C%5Cx9d%22;%0A++++let+escaped+=+s.escape_ascii().to_string();%0A++++assert_eq!(escaped,+%220%5C%5Ct%5C%5Cr%5C%5Cn%5C%5C'%5C%5C%5C%22%5C%5C%5C%5C%5C%5Cx9d%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.trim_ascii_start\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0\">1.80.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/ascii.rs.html#129\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.trim_ascii_start\" class=\"fn\">trim_ascii_start</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns a byte slice with leading ASCII whitespace bytes removed.</p>\n<p>‘Whitespace’ refers to the definition used by\n<a href=\"../primitive.u8.html#method.is_ascii_whitespace\" title=\"method u8::is_ascii_whitespace\"><code>u8::is_ascii_whitespace</code></a>.</p>\n<h5 id=\"examples-162\"><a class=\"doc-anchor\" href=\"#examples-162\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">b\" \\t hello world\\n\"</span>.trim_ascii_start(), <span class=\"string\">b\"hello world\\n\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">b\"  \"</span>.trim_ascii_start(), <span class=\"string\">b\"\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">b\"\"</span>.trim_ascii_start(), <span class=\"string\">b\"\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(b%22+%5Ct+hello+world%5Cn%22.trim_ascii_start(),+b%22hello+world%5Cn%22);%0A++++assert_eq!(b%22++%22.trim_ascii_start(),+b%22%22);%0A++++assert_eq!(b%22%22.trim_ascii_start(),+b%22%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.trim_ascii_end\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0\">1.80.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/ascii.rs.html#158\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.trim_ascii_end\" class=\"fn\">trim_ascii_end</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns a byte slice with trailing ASCII whitespace bytes removed.</p>\n<p>‘Whitespace’ refers to the definition used by\n<a href=\"../primitive.u8.html#method.is_ascii_whitespace\" title=\"method u8::is_ascii_whitespace\"><code>u8::is_ascii_whitespace</code></a>.</p>\n<h5 id=\"examples-163\"><a class=\"doc-anchor\" href=\"#examples-163\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">b\"\\r hello world\\n \"</span>.trim_ascii_end(), <span class=\"string\">b\"\\r hello world\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">b\"  \"</span>.trim_ascii_end(), <span class=\"string\">b\"\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">b\"\"</span>.trim_ascii_end(), <span class=\"string\">b\"\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(b%22%5Cr+hello+world%5Cn+%22.trim_ascii_end(),+b%22%5Cr+hello+world%22);%0A++++assert_eq!(b%22++%22.trim_ascii_end(),+b%22%22);%0A++++assert_eq!(b%22%22.trim_ascii_end(),+b%22%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.trim_ascii\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0\">1.80.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/ascii.rs.html#188\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.trim_ascii\" class=\"fn\">trim_ascii</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns a byte slice with leading and trailing ASCII whitespace bytes\nremoved.</p>\n<p>‘Whitespace’ refers to the definition used by\n<a href=\"../primitive.u8.html#method.is_ascii_whitespace\" title=\"method u8::is_ascii_whitespace\"><code>u8::is_ascii_whitespace</code></a>.</p>\n<h5 id=\"examples-164\"><a class=\"doc-anchor\" href=\"#examples-164\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"string\">b\"\\r hello world\\n \"</span>.trim_ascii(), <span class=\"string\">b\"hello world\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">b\"  \"</span>.trim_ascii(), <span class=\"string\">b\"\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">b\"\"</span>.trim_ascii(), <span class=\"string\">b\"\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(b%22%5Cr+hello+world%5Cn+%22.trim_ascii(),+b%22hello+world%22);%0A++++assert_eq!(b%22++%22.trim_ascii(),+b%22%22);%0A++++assert_eq!(b%22%22.trim_ascii(),+b%22%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.utf8_chunks\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.79.0\">1.79.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/lossy.rs.html#44\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.utf8_chunks\" class=\"fn\">utf8_chunks</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../str/struct.Utf8Chunks.html\" title=\"struct std::str::Utf8Chunks\">Utf8Chunks</a>&lt;'_&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Utf8Chunks<'_>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Creates an iterator over the contiguous valid UTF-8 ranges of this\nslice, and the non-UTF-8 fragments in between.</p>\n<h5 id=\"examples-165\"><a class=\"doc-anchor\" href=\"#examples-165\">§</a>Examples</h5>\n<p>This function formats arbitrary but mostly-UTF-8 bytes into Rust source\ncode in the form of a C-string literal (<code>c\"...\"</code>).</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fmt::Write <span class=\"kw\">as _</span>;\n\n<span class=\"kw\">pub fn </span>cstr_literal(bytes: <span class=\"kw-2\">&amp;</span>[u8]) -&gt; String {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>repr = String::new();\n    repr.push_str(<span class=\"string\">\"c\\\"\"</span>);\n    <span class=\"kw\">for </span>chunk <span class=\"kw\">in </span>bytes.utf8_chunks() {\n        <span class=\"kw\">for </span>ch <span class=\"kw\">in </span>chunk.valid().chars() {\n            <span class=\"comment\">// Escapes \\0, \\t, \\r, \\n, \\\\, \\', \\\", and uses \\u{...} for non-printable characters.\n            </span><span class=\"macro\">write!</span>(repr, <span class=\"string\">\"{}\"</span>, ch.escape_debug()).unwrap();\n        }\n        <span class=\"kw\">for </span>byte <span class=\"kw\">in </span>chunk.invalid() {\n            <span class=\"macro\">write!</span>(repr, <span class=\"string\">\"\\\\x{:02X}\"</span>, byte).unwrap();\n        }\n    }\n    repr.push(<span class=\"string\">'\"'</span>);\n    repr\n}\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"kw\">let </span>lit = cstr_literal(<span class=\"string\">b\"\\xferris the \\xf0\\x9f\\xa6\\x80\\x07\"</span>);\n    <span class=\"kw\">let </span>expected = <span class=\"macro\">stringify!</span>(<span class=\"string\">c\"\\xFErris the 🦀\\u{7}\"</span>);\n    <span class=\"macro\">assert_eq!</span>(lit, expected);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fmt::Write+as+_;%0A%0Apub+fn+cstr_literal(bytes:+%26%5Bu8%5D)+-%3E+String+%7B%0A++++let+mut+repr+=+String::new();%0A++++repr.push_str(%22c%5C%22%22);%0A++++for+chunk+in+bytes.utf8_chunks()+%7B%0A++++++++for+ch+in+chunk.valid().chars()+%7B%0A++++++++++++//+Escapes+%5C0,+%5Ct,+%5Cr,+%5Cn,+%5C%5C,+%5C',+%5C%22,+and+uses+%5Cu%7B...%7D+for+non-printable+characters.%0A++++++++++++write!(repr,+%22%7B%7D%22,+ch.escape_debug()).unwrap();%0A++++++++%7D%0A++++++++for+byte+in+chunk.invalid()+%7B%0A++++++++++++write!(repr,+%22%5C%5Cx%7B:02X%7D%22,+byte).unwrap();%0A++++++++%7D%0A++++%7D%0A++++repr.push('%22');%0A++++repr%0A%7D%0A%0Afn+main()+%7B%0A++++let+lit+=+cstr_literal(b%22%5Cxferris+the+%5Cxf0%5Cx9f%5Cxa6%5Cx80%5Cx07%22);%0A++++let+expected+=+stringify!(c%22%5CxFErris+the+%F0%9F%A6%80%5Cu%7B7%7D%22);%0A++++assert_eq!(lit,+expected);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ascii_uppercase\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.23.0\">1.23.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/slice.rs.html#621\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.to_ascii_uppercase\" class=\"fn\">to_ascii_uppercase</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec<u8>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns a vector containing a copy of this slice where each byte\nis mapped to its ASCII upper case equivalent.</p>\n<p>ASCII letters ‘a’ to ‘z’ are mapped to ‘A’ to ‘Z’,\nbut non-ASCII letters are unchanged.</p>\n<p>To uppercase the value in-place, use <a href=\"../primitive.slice.html#method.make_ascii_uppercase\" title=\"method slice::make_ascii_uppercase\"><code>make_ascii_uppercase</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_ascii_lowercase\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.23.0\">1.23.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/slice.rs.html#642\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.to_ascii_lowercase\" class=\"fn\">to_ascii_lowercase</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec<u8>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns a vector containing a copy of this slice where each byte\nis mapped to its ASCII lower case equivalent.</p>\n<p>ASCII letters ‘A’ to ‘Z’ are mapped to ‘a’ to ‘z’,\nbut non-ASCII letters are unchanged.</p>\n<p>To lowercase the value in-place, use <a href=\"../primitive.slice.html#method.make_ascii_lowercase\" title=\"method slice::make_ascii_lowercase\"><code>make_ascii_lowercase</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sort\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/slice.rs.html#207-209\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.sort\" class=\"fn\">sort</a>(&amp;mut self)<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,</div></h4></section></summary><div class=\"docblock\"><p>Sorts the slice.</p>\n<p>This sort is stable (i.e., does not reorder equal elements) and <em>O</em>(<em>n</em> * log(<em>n</em>)) worst-case.</p>\n<p>When applicable, unstable sorting is preferred because it is generally faster than stable\nsorting and it doesn’t allocate auxiliary memory.\nSee <a href=\"../primitive.slice.html#method.sort_unstable\" title=\"method slice::sort_unstable\"><code>sort_unstable</code></a>.</p>\n<h5 id=\"current-implementation-8\"><a class=\"doc-anchor\" href=\"#current-implementation-8\">§</a>Current implementation</h5>\n<p>The current algorithm is an adaptive, iterative merge sort inspired by\n<a href=\"https://en.wikipedia.org/wiki/Timsort\">timsort</a>.\nIt is designed to be very fast in cases where the slice is nearly sorted, or consists of\ntwo or more sorted sequences concatenated one after another.</p>\n<p>Also, it allocates temporary storage half the size of <code>self</code>, but for short slices a\nnon-allocating insertion sort is used instead.</p>\n<h5 id=\"examples-166\"><a class=\"doc-anchor\" href=\"#examples-166\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = [-<span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, -<span class=\"number\">3</span>, <span class=\"number\">2</span>];\n\nv.sort();\n<span class=\"macro\">assert!</span>(v == [-<span class=\"number\">5</span>, -<span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+%5B-5,+4,+1,+-3,+2%5D;%0A++++%0A++++v.sort();%0A++++assert!(v+==+%5B-5,+-3,+1,+2,+4%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sort_by\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/slice.rs.html#263-265\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.sort_by\" class=\"fn\">sort_by</a>&lt;F&gt;(&amp;mut self, compare: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>, <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>,</div></h4></section></summary><div class=\"docblock\"><p>Sorts the slice with a comparator function.</p>\n<p>This sort is stable (i.e., does not reorder equal elements) and <em>O</em>(<em>n</em> * log(<em>n</em>)) worst-case.</p>\n<p>The comparator function must define a total ordering for the elements in the slice. If\nthe ordering is not total, the order of the elements is unspecified. An order is a\ntotal order if it is (for all <code>a</code>, <code>b</code> and <code>c</code>):</p>\n<ul>\n<li>total and antisymmetric: exactly one of <code>a &lt; b</code>, <code>a == b</code> or <code>a &gt; b</code> is true, and</li>\n<li>transitive, <code>a &lt; b</code> and <code>b &lt; c</code> implies <code>a &lt; c</code>. The same must hold for both <code>==</code> and <code>&gt;</code>.</li>\n</ul>\n<p>For example, while <a href=\"../primitive.f64.html\" title=\"primitive f64\"><code>f64</code></a> doesn’t implement <a href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\"><code>Ord</code></a> because <code>NaN != NaN</code>, we can use\n<code>partial_cmp</code> as our sort function when we know the slice doesn’t contain a <code>NaN</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>floats = [<span class=\"number\">5f64</span>, <span class=\"number\">4.0</span>, <span class=\"number\">1.0</span>, <span class=\"number\">3.0</span>, <span class=\"number\">2.0</span>];\nfloats.sort_by(|a, b| a.partial_cmp(b).unwrap());\n<span class=\"macro\">assert_eq!</span>(floats, [<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>, <span class=\"number\">3.0</span>, <span class=\"number\">4.0</span>, <span class=\"number\">5.0</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+floats+=+%5B5f64,+4.0,+1.0,+3.0,+2.0%5D;%0A++++floats.sort_by(%7Ca,+b%7C+a.partial_cmp(b).unwrap());%0A++++assert_eq!(floats,+%5B1.0,+2.0,+3.0,+4.0,+5.0%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>When applicable, unstable sorting is preferred because it is generally faster than stable\nsorting and it doesn’t allocate auxiliary memory.\nSee <a href=\"../primitive.slice.html#method.sort_unstable_by\" title=\"method slice::sort_unstable_by\"><code>sort_unstable_by</code></a>.</p>\n<h5 id=\"current-implementation-9\"><a class=\"doc-anchor\" href=\"#current-implementation-9\">§</a>Current implementation</h5>\n<p>The current algorithm is an adaptive, iterative merge sort inspired by\n<a href=\"https://en.wikipedia.org/wiki/Timsort\">timsort</a>.\nIt is designed to be very fast in cases where the slice is nearly sorted, or consists of\ntwo or more sorted sequences concatenated one after another.</p>\n<p>Also, it allocates temporary storage half the size of <code>self</code>, but for short slices a\nnon-allocating insertion sort is used instead.</p>\n<h5 id=\"examples-167\"><a class=\"doc-anchor\" href=\"#examples-167\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = [<span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>];\nv.sort_by(|a, b| a.cmp(b));\n<span class=\"macro\">assert!</span>(v == [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);\n\n<span class=\"comment\">// reverse sorting\n</span>v.sort_by(|a, b| b.cmp(a));\n<span class=\"macro\">assert!</span>(v == [<span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+%5B5,+4,+1,+3,+2%5D;%0A++++v.sort_by(%7Ca,+b%7C+a.cmp(b));%0A++++assert!(v+==+%5B1,+2,+3,+4,+5%5D);%0A++++%0A++++//+reverse+sorting%0A++++v.sort_by(%7Ca,+b%7C+b.cmp(a));%0A++++assert!(v+==+%5B5,+4,+3,+2,+1%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sort_by_key\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0\">1.7.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/slice.rs.html#305-308\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.sort_by_key\" class=\"fn\">sort_by_key</a>&lt;K, F&gt;(&amp;mut self, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>) -&gt; K,\n    K: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,</div></h4></section></summary><div class=\"docblock\"><p>Sorts the slice with a key extraction function.</p>\n<p>This sort is stable (i.e., does not reorder equal elements) and <em>O</em>(<em>m</em> * <em>n</em> * log(<em>n</em>))\nworst-case, where the key function is <em>O</em>(<em>m</em>).</p>\n<p>For expensive key functions (e.g. functions that are not simple property accesses or\nbasic operations), <a href=\"../primitive.slice.html#method.sort_by_cached_key\" title=\"method slice::sort_by_cached_key\"><code>sort_by_cached_key</code></a> is likely to be\nsignificantly faster, as it does not recompute element keys.</p>\n<p>When applicable, unstable sorting is preferred because it is generally faster than stable\nsorting and it doesn’t allocate auxiliary memory.\nSee <a href=\"../primitive.slice.html#method.sort_unstable_by_key\" title=\"method slice::sort_unstable_by_key\"><code>sort_unstable_by_key</code></a>.</p>\n<h5 id=\"current-implementation-10\"><a class=\"doc-anchor\" href=\"#current-implementation-10\">§</a>Current implementation</h5>\n<p>The current algorithm is an adaptive, iterative merge sort inspired by\n<a href=\"https://en.wikipedia.org/wiki/Timsort\">timsort</a>.\nIt is designed to be very fast in cases where the slice is nearly sorted, or consists of\ntwo or more sorted sequences concatenated one after another.</p>\n<p>Also, it allocates temporary storage half the size of <code>self</code>, but for short slices a\nnon-allocating insertion sort is used instead.</p>\n<h5 id=\"examples-168\"><a class=\"doc-anchor\" href=\"#examples-168\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = [-<span class=\"number\">5i32</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, -<span class=\"number\">3</span>, <span class=\"number\">2</span>];\n\nv.sort_by_key(|k| k.abs());\n<span class=\"macro\">assert!</span>(v == [<span class=\"number\">1</span>, <span class=\"number\">2</span>, -<span class=\"number\">3</span>, <span class=\"number\">4</span>, -<span class=\"number\">5</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+%5B-5i32,+4,+1,+-3,+2%5D;%0A++++%0A++++v.sort_by_key(%7Ck%7C+k.abs());%0A++++assert!(v+==+%5B1,+2,+-3,+4,+-5%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.sort_by_cached_key\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/slice.rs.html#352-355\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.sort_by_cached_key\" class=\"fn\">sort_by_cached_key</a>&lt;K, F&gt;(&amp;mut self, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>) -&gt; K,\n    K: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,</div></h4></section></summary><div class=\"docblock\"><p>Sorts the slice with a key extraction function.</p>\n<p>During sorting, the key function is called at most once per element, by using\ntemporary storage to remember the results of key evaluation.\nThe order of calls to the key function is unspecified and may change in future versions\nof the standard library.</p>\n<p>This sort is stable (i.e., does not reorder equal elements) and <em>O</em>(<em>m</em> * <em>n</em> + <em>n</em> * log(<em>n</em>))\nworst-case, where the key function is <em>O</em>(<em>m</em>).</p>\n<p>For simple key functions (e.g., functions that are property accesses or\nbasic operations), <a href=\"../primitive.slice.html#method.sort_by_key\" title=\"method slice::sort_by_key\"><code>sort_by_key</code></a> is likely to be\nfaster.</p>\n<h5 id=\"current-implementation-11\"><a class=\"doc-anchor\" href=\"#current-implementation-11\">§</a>Current implementation</h5>\n<p>The current algorithm is based on <a href=\"https://github.com/orlp/pdqsort\">pattern-defeating quicksort</a> by Orson Peters,\nwhich combines the fast average case of randomized quicksort with the fast worst case of\nheapsort, while achieving linear time on slices with certain patterns. It uses some\nrandomization to avoid degenerate cases, but with a fixed seed to always provide\ndeterministic behavior.</p>\n<p>In the worst case, the algorithm allocates temporary storage in a <code>Vec&lt;(K, usize)&gt;</code> the\nlength of the slice.</p>\n<h5 id=\"examples-169\"><a class=\"doc-anchor\" href=\"#examples-169\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = [-<span class=\"number\">5i32</span>, <span class=\"number\">4</span>, <span class=\"number\">32</span>, -<span class=\"number\">3</span>, <span class=\"number\">2</span>];\n\nv.sort_by_cached_key(|k| k.to_string());\n<span class=\"macro\">assert!</span>(v == [-<span class=\"number\">3</span>, -<span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">32</span>, <span class=\"number\">4</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+%5B-5i32,+4,+32,+-3,+2%5D;%0A++++%0A++++v.sort_by_cached_key(%7Ck%7C+k.to_string());%0A++++assert!(v+==+%5B-3,+-5,+2,+32,+4%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_vec\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/slice.rs.html#412-414\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.to_vec\" class=\"fn\">to_vec</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h4></section></summary><div class=\"docblock\"><p>Copies <code>self</code> into a new <code>Vec</code>.</p>\n<h5 id=\"examples-170\"><a class=\"doc-anchor\" href=\"#examples-170\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s = [<span class=\"number\">10</span>, <span class=\"number\">40</span>, <span class=\"number\">30</span>];\n<span class=\"kw\">let </span>x = s.to_vec();\n<span class=\"comment\">// Here, `s` and `x` can be modified independently.</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s+=+%5B10,+40,+30%5D;%0A++++let+x+=+s.to_vec();%0A++++//+Here,+%60s%60+and+%60x%60+can+be+modified+independently.%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_vec_in\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/slice.rs.html#436-438\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.to_vec_in\" class=\"fn\">to_vec_in</a>&lt;A&gt;(&amp;self, alloc: A) -&gt; <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>allocator_api</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/32838\">#32838</a>)</span></div></span></summary><div class=\"docblock\"><p>Copies <code>self</code> into a new <code>Vec</code> with an allocator.</p>\n<h5 id=\"examples-171\"><a class=\"doc-anchor\" href=\"#examples-171\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(allocator_api)]\n\n</span><span class=\"kw\">use </span>std::alloc::System;\n\n<span class=\"kw\">let </span>s = [<span class=\"number\">10</span>, <span class=\"number\">40</span>, <span class=\"number\">30</span>];\n<span class=\"kw\">let </span>x = s.to_vec_in(System);\n<span class=\"comment\">// Here, `s` and `x` can be modified independently.</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(allocator_api)%5D%0A%0Afn+main()+%7B%0A++++use+std::alloc::System;%0A++++%0A++++let+s+=+%5B10,+40,+30%5D;%0A++++let+x+=+s.to_vec_in(System);%0A++++//+Here,+%60s%60+and+%60x%60+can+be+modified+independently.%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.repeat\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.40.0\">1.40.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/slice.rs.html#489-491\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.repeat\" class=\"fn\">repeat</a>(&amp;self, n: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a>,</div></h4></section></summary><div class=\"docblock\"><p>Creates a vector by copying a slice <code>n</code> times.</p>\n<h5 id=\"panics-46\"><a class=\"doc-anchor\" href=\"#panics-46\">§</a>Panics</h5>\n<p>This function will panic if the capacity would overflow.</p>\n<h5 id=\"examples-172\"><a class=\"doc-anchor\" href=\"#examples-172\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>].repeat(<span class=\"number\">3</span>), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%5B1,+2%5D.repeat(3),+vec!%5B1,+2,+1,+2,+1,+2%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>A panic upon overflow:</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// this will panic at runtime\n</span><span class=\"string\">b\"0123456789abcdef\"</span>.repeat(usize::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A//+this+will+panic+at+runtime%0Afn+main()+%7B%0A++++b%220123456789abcdef%22.repeat(usize::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.concat\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/slice.rs.html#557-559\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.concat\" class=\"fn\">concat</a>&lt;Item&gt;(&amp;self) -&gt; &lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a> as <a class=\"trait\" href=\"../slice/trait.Concat.html\" title=\"trait std::slice::Concat\">Concat</a>&lt;Item&gt;&gt;::<a class=\"associatedtype\" href=\"../slice/trait.Concat.html#associatedtype.Output\" title=\"type std::slice::Concat::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"<[T] as Concat<Item>>::Output\">ⓘ</a><div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>: <a class=\"trait\" href=\"../slice/trait.Concat.html\" title=\"trait std::slice::Concat\">Concat</a>&lt;Item&gt;,\n    Item: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Flattens a slice of <code>T</code> into a single value <code>Self::Output</code>.</p>\n<h5 id=\"examples-173\"><a class=\"doc-anchor\" href=\"#examples-173\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>([<span class=\"string\">\"hello\"</span>, <span class=\"string\">\"world\"</span>].concat(), <span class=\"string\">\"helloworld\"</span>);\n<span class=\"macro\">assert_eq!</span>([[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>]].concat(), [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%5B%22hello%22,+%22world%22%5D.concat(),+%22helloworld%22);%0A++++assert_eq!(%5B%5B1,+2%5D,+%5B3,+4%5D%5D.concat(),+%5B1,+2,+3,+4%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.join\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/slice.rs.html#576-578\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.join\" class=\"fn\">join</a>&lt;Separator&gt;(\n    &amp;self,\n    sep: Separator,\n) -&gt; &lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a> as <a class=\"trait\" href=\"../slice/trait.Join.html\" title=\"trait std::slice::Join\">Join</a>&lt;Separator&gt;&gt;::<a class=\"associatedtype\" href=\"../slice/trait.Join.html#associatedtype.Output\" title=\"type std::slice::Join::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"<[T] as Join<Separator>>::Output\">ⓘ</a><div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>: <a class=\"trait\" href=\"../slice/trait.Join.html\" title=\"trait std::slice::Join\">Join</a>&lt;Separator&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Flattens a slice of <code>T</code> into a single value <code>Self::Output</code>, placing a\ngiven separator between each.</p>\n<h5 id=\"examples-174\"><a class=\"doc-anchor\" href=\"#examples-174\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>([<span class=\"string\">\"hello\"</span>, <span class=\"string\">\"world\"</span>].join(<span class=\"string\">\" \"</span>), <span class=\"string\">\"hello world\"</span>);\n<span class=\"macro\">assert_eq!</span>([[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>]].join(<span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>), [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n<span class=\"macro\">assert_eq!</span>([[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>]].join(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">0</span>, <span class=\"number\">0</span>][..]), [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(%5B%22hello%22,+%22world%22%5D.join(%22+%22),+%22hello+world%22);%0A++++assert_eq!(%5B%5B1,+2%5D,+%5B3,+4%5D%5D.join(%260),+%5B1,+2,+0,+3,+4%5D);%0A++++assert_eq!(%5B%5B1,+2%5D,+%5B3,+4%5D%5D.join(%26%5B0,+0%5D%5B..%5D),+%5B1,+2,+0,+0,+3,+4%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.connect\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/slice.rs.html#596-598\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.connect\" class=\"fn\">connect</a>&lt;Separator&gt;(\n    &amp;self,\n    sep: Separator,\n) -&gt; &lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a> as <a class=\"trait\" href=\"../slice/trait.Join.html\" title=\"trait std::slice::Join\">Join</a>&lt;Separator&gt;&gt;::<a class=\"associatedtype\" href=\"../slice/trait.Join.html#associatedtype.Output\" title=\"type std::slice::Join::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"<[T] as Join<Separator>>::Output\">ⓘ</a><div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>: <a class=\"trait\" href=\"../slice/trait.Join.html\" title=\"trait std::slice::Join\">Join</a>&lt;Separator&gt;,</div></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.3.0: renamed to join</span></div></span></summary><div class=\"docblock\"><p>Flattens a slice of <code>T</code> into a single value <code>Self::Output</code>, placing a\ngiven separator between each.</p>\n<h5 id=\"examples-175\"><a class=\"doc-anchor\" href=\"#examples-175\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>([<span class=\"string\">\"hello\"</span>, <span class=\"string\">\"world\"</span>].connect(<span class=\"string\">\" \"</span>), <span class=\"string\">\"hello world\"</span>);\n<span class=\"macro\">assert_eq!</span>([[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>]].connect(<span class=\"kw-2\">&amp;</span><span class=\"number\">0</span>), [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Ballow(deprecated)%5D%0Afn+main()+%7B%0A++++assert_eq!(%5B%22hello%22,+%22world%22%5D.connect(%22+%22),+%22hello+world%22);%0A++++assert_eq!(%5B%5B1,+2%5D,+%5B3,+4%5D%5D.connect(%260),+%5B1,+2,+0,+3,+4%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsMut%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3326\">source</a></span><a href=\"#impl-AsMut%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../convert/trait.AsMut.html\" title=\"trait std::convert::AsMut\">AsMut</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3327\">source</a><a href=\"#method.as_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.AsMut.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\">Converts this type into a mutable reference of the (usually inferred) input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsMut%3CVec%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3312\">source</a></span><a href=\"#impl-AsMut%3CVec%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../convert/trait.AsMut.html\" title=\"trait std::convert::AsMut\">AsMut</a>&lt;<a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;&gt; for <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_mut-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3313\">source</a><a href=\"#method.as_mut-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.AsMut.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section></summary><div class=\"docblock\">Converts this type into a mutable reference of the (usually inferred) input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsRef%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3319\">source</a></span><a href=\"#impl-AsRef%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3320\">source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\">Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsRef%3CVec%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3305\">source</a></span><a href=\"#impl-AsRef%3CVec%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;&gt; for <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_ref-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3306\">source</a><a href=\"#method.as_ref-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section></summary><div class=\"docblock\">Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Borrow%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/slice.rs.html#772\">source</a></span><a href=\"#impl-Borrow%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/slice.rs.html#773\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BorrowMut%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/slice.rs.html#779\">source</a></span><a href=\"#impl-BorrowMut%3C%5BT%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/slice.rs.html#780\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Clone-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2832\">source</a></span><a href=\"#impl-Clone-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2871\">source</a><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;<a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;)</h4></section></summary><div class=\"docblock\"><p>Overwrites the contents of <code>self</code> with a clone of the contents of <code>source</code>.</p>\n<p>This method is preferred over simply assigning <code>source.clone()</code> to <code>self</code>,\nas it avoids reallocation if possible. Additionally, if the element type\n<code>T</code> overrides <code>clone_from()</code>, this will reuse the resources of <code>self</code>’s\nelements as well.</p>\n<h5 id=\"examples-176\"><a class=\"doc-anchor\" href=\"#examples-176\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x = <span class=\"macro\">vec!</span>[<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>y = <span class=\"macro\">vec!</span>[<span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>];\n<span class=\"kw\">let </span>yp: <span class=\"kw-2\">*const </span>i32 = y.as_ptr();\n\ny.clone_from(<span class=\"kw-2\">&amp;</span>x);\n\n<span class=\"comment\">// The value is the same\n</span><span class=\"macro\">assert_eq!</span>(x, y);\n\n<span class=\"comment\">// And no reallocation occurred\n</span><span class=\"macro\">assert_eq!</span>(yp, y.as_ptr());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+x+=+vec!%5B5,+6,+7%5D;%0A++++let+mut+y+=+vec!%5B8,+9,+10%5D;%0A++++let+yp:+*const+i32+=+y.as_ptr();%0A++++%0A++++y.clone_from(%26x);%0A++++%0A++++//+The+value+is+the+same%0A++++assert_eq!(x,+y);%0A++++%0A++++//+And+no+reallocation+occurred%0A++++assert_eq!(yp,+y.as_ptr());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2834\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section></summary><div class=\"docblock\">Returns a copy of the value. <a href=\"../clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3298\">source</a></span><a href=\"#impl-Debug-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3299\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3288\">source</a></span><a href=\"#impl-Default-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3292\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates an empty <code>Vec&lt;T&gt;</code>.</p>\n<p>The vector will not allocate until elements are pushed onto it.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Deref-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2810\">source</a></span><a href=\"#impl-Deref-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../ops/trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a> for <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Deref.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\">The resulting type after dereferencing.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.deref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2814\">source</a><a href=\"#method.deref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Deref.html#tymethod.deref\" class=\"fn\">deref</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\">Dereferences the value.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-DerefMut-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2820\">source</a></span><a href=\"#impl-DerefMut-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../ops/trait.DerefMut.html\" title=\"trait std::ops::DerefMut\">DerefMut</a> for <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.deref_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2822\">source</a><a href=\"#method.deref_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.DerefMut.html#tymethod.deref_mut\" class=\"fn\">deref_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\">Mutably dereferences the value.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Drop-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3275\">source</a></span><a href=\"#impl-Drop-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../ops/trait.Drop.html\" title=\"trait std::ops::Drop\">Drop</a> for <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.drop\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3276\">source</a><a href=\"#method.drop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\">Executes the destructor for this type. <a href=\"../ops/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Extend%3C%26T%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0\">1.2.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3232\">source</a></span><a href=\"#impl-Extend%3C%26T%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, A&gt; <a class=\"trait\" href=\"../iter/trait.Extend.html\" title=\"trait std::iter::Extend\">Extend</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a T</a>&gt; for <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a> + 'a,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"docblock\"><p>Extend implementation that copies elements out of references before pushing them onto the Vec.</p>\n<p>This implementation is specialized for slice iterators, where it uses <a href=\"../primitive.slice.html#method.copy_from_slice\" title=\"method slice::copy_from_slice\"><code>copy_from_slice</code></a> to\nappend the entire slice at once.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3233\">source</a><a href=\"#method.extend-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a T</a>&gt;,</div></h4></section></summary><div class=\"docblock\">Extends a collection with the contents of an iterator. <a href=\"../iter/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend_one-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3238\">source</a><a href=\"#method.extend_one-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, _: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a T</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/72631\">#72631</a>)</span></div></span><div class=\"docblock\">Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend_reserve-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3243\">source</a><a href=\"#method.extend_reserve-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/72631\">#72631</a>)</span></div></span><div class=\"docblock\">Reserves capacity in a collection for the given number of additional elements. <a href=\"../iter/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Extend%3CT%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3035\">source</a></span><a href=\"#impl-Extend%3CT%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../iter/trait.Extend.html\" title=\"trait std::iter::Extend\">Extend</a>&lt;T&gt; for <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3037\">source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, iter: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = T&gt;,</div></h4></section></summary><div class=\"docblock\">Extends a collection with the contents of an iterator. <a href=\"../iter/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3042\">source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: T)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/72631\">#72631</a>)</span></div></span><div class=\"docblock\">Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3047\">source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/72631\">#72631</a>)</span></div></span><div class=\"docblock\">Reserves capacity in a collection for the given number of additional elements. <a href=\"../iter/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%26%5BT%5D%3E-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3334\">source</a></span><a href=\"#impl-From%3C%26%5BT%5D%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3343\">source</a><a href=\"#method.from-13\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>) -&gt; <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Allocate a <code>Vec&lt;T&gt;</code> and fill it by cloning <code>s</code>’s items.</p>\n<h5 id=\"examples-187\"><a class=\"doc-anchor\" href=\"#examples-187\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Vec::from(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>][..]), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(Vec::from(%26%5B1,+2,+3%5D%5B..%5D),+vec!%5B1,+2,+3%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%26%5BT;+N%5D%3E-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.74.0\">1.74.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3374\">source</a></span><a href=\"#impl-From%3C%26%5BT;+N%5D%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.array.html\">[T; N]</a>&gt; for <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3382\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;<a class=\"primitive\" href=\"../primitive.array.html\">[T; N]</a>) -&gt; <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Allocate a <code>Vec&lt;T&gt;</code> and fill it by cloning <code>s</code>’s items.</p>\n<h5 id=\"examples-179\"><a class=\"doc-anchor\" href=\"#examples-179\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Vec::from(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(Vec::from(%26%5B1,+2,+3%5D),+vec!%5B1,+2,+3%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%26Vec%3CT%3E%3E-for-Cow%3C'a,+%5BT%5D%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/cow.rs.html#45\">source</a></span><a href=\"#impl-From%3C%26Vec%3CT%3E%3E-for-Cow%3C'a,+%5BT%5D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;&amp;'a <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T&gt;&gt; for <a class=\"enum\" href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/cow.rs.html#52\">source</a><a href=\"#method.from-10\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(v: &amp;'a <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a <a href=\"../borrow/enum.Cow.html#variant.Borrowed\" title=\"variant std::borrow::Cow::Borrowed\"><code>Borrowed</code></a> variant of <a href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\"><code>Cow</code></a>\nfrom a reference to <a href=\"struct.Vec.html\" title=\"struct std::vec::Vec\"><code>Vec</code></a>.</p>\n<p>This conversion does not allocate or clone the data.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%26mut+%5BT%5D%3E-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.19.0\">1.19.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3354\">source</a></span><a href=\"#impl-From%3C%26mut+%5BT%5D%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;&amp;mut <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt; for <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3363\">source</a><a href=\"#method.from-8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;mut <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>) -&gt; <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Allocate a <code>Vec&lt;T&gt;</code> and fill it by cloning <code>s</code>’s items.</p>\n<h5 id=\"examples-184\"><a class=\"doc-anchor\" href=\"#examples-184\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Vec::from(<span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>][..]), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(Vec::from(%26mut+%5B1,+2,+3%5D%5B..%5D),+vec!%5B1,+2,+3%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%26mut+%5BT;+N%5D%3E-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.74.0\">1.74.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3389\">source</a></span><a href=\"#impl-From%3C%26mut+%5BT;+N%5D%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;&amp;mut <a class=\"primitive\" href=\"../primitive.array.html\">[T; N]</a>&gt; for <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3397\">source</a><a href=\"#method.from-15\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;mut <a class=\"primitive\" href=\"../primitive.array.html\">[T; N]</a>) -&gt; <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Allocate a <code>Vec&lt;T&gt;</code> and fill it by cloning <code>s</code>’s items.</p>\n<h5 id=\"examples-188\"><a class=\"doc-anchor\" href=\"#examples-188\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Vec::from(<span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(Vec::from(%26mut+%5B1,+2,+3%5D),+vec!%5B1,+2,+3%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%26str%3E-for-Vec%3Cu8%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3497\">source</a></span><a href=\"#impl-From%3C%26str%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-12\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3505\">source</a><a href=\"#method.from-12\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: &amp;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>) -&gt; <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec<u8>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Allocate a <code>Vec&lt;u8&gt;</code> and fill it with a UTF-8 string.</p>\n<h5 id=\"examples-186\"><a class=\"doc-anchor\" href=\"#examples-186\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Vec::from(<span class=\"string\">\"123\"</span>), <span class=\"macro\">vec!</span>[<span class=\"string\">b'1'</span>, <span class=\"string\">b'2'</span>, <span class=\"string\">b'3'</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(Vec::from(%22123%22),+vec!%5Bb'1',+b'2',+b'3'%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%5BT;+N%5D%3E-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.44.0\">1.44.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3404\">source</a></span><a href=\"#impl-From%3C%5BT;+N%5D%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"../primitive.array.html\">[T; N]</a>&gt; for <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3413\">source</a><a href=\"#method.from-7\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"primitive\" href=\"../primitive.array.html\">[T; N]</a>) -&gt; <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Allocate a <code>Vec&lt;T&gt;</code> and move <code>s</code>’s items into it.</p>\n<h5 id=\"examples-183\"><a class=\"doc-anchor\" href=\"#examples-183\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Vec::from([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(Vec::from(%5B1,+2,+3%5D),+vec!%5B1,+2,+3%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CBinaryHeap%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/binary_heap/mod.rs.html#1796\">source</a></span><a href=\"#impl-From%3CBinaryHeap%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"../collections/struct.BinaryHeap.html\" title=\"struct std::collections::BinaryHeap\">BinaryHeap</a>&lt;T, A&gt;&gt; for <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/binary_heap/mod.rs.html#1801\">source</a><a href=\"#method.from-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(heap: <a class=\"struct\" href=\"../collections/struct.BinaryHeap.html\" title=\"struct std::collections::BinaryHeap\">BinaryHeap</a>&lt;T, A&gt;) -&gt; <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>BinaryHeap&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.</p>\n<p>This conversion requires no data movement or allocation, and has\nconstant time complexity.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CBox%3C%5BT%5D,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.18.0\">1.18.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3450\">source</a></span><a href=\"#impl-From%3CBox%3C%5BT%5D,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>, A&gt;&gt; for <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3460\">source</a><a href=\"#method.from-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>, A&gt;) -&gt; <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section></summary><div class=\"docblock\"><p>Convert a boxed slice into a vector by transferring ownership of\nthe existing heap allocation.</p>\n<h5 id=\"examples-180\"><a class=\"doc-anchor\" href=\"#examples-180\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>b: Box&lt;[i32]&gt; = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].into_boxed_slice();\n<span class=\"macro\">assert_eq!</span>(Vec::from(b), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+b:+Box%3C%5Bi32%5D%3E+=+vec!%5B1,+2,+3%5D.into_boxed_slice();%0A++++assert_eq!(Vec::from(b),+vec!%5B1,+2,+3%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CCString%3E-for-Vec%3Cu8%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0\">1.7.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#729\">source</a></span><a href=\"#impl-From%3CCString%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"../ffi/struct.CString.html\" title=\"struct std::ffi::CString\">CString</a>&gt; for <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-17\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#734\">source</a><a href=\"#method.from-17\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"struct\" href=\"../ffi/struct.CString.html\" title=\"struct std::ffi::CString\">CString</a>) -&gt; <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec<u8>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"../ffi/struct.CString.html\" title=\"struct std::ffi::CString\"><code>CString</code></a> into a <code><a href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;<a href=\"../primitive.u8.html\" title=\"primitive u8\">u8</a>&gt;</code>.</p>\n<p>The conversion consumes the <a href=\"../ffi/struct.CString.html\" title=\"struct std::ffi::CString\"><code>CString</code></a>, and removes the terminating NUL byte.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CCow%3C'a,+%5BT%5D%3E%3E-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.14.0\">1.14.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3424-3426\">source</a></span><a href=\"#impl-From%3CCow%3C'a,+%5BT%5D%3E%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"enum\" href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt;&gt; for <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>: <a class=\"trait\" href=\"../borrow/trait.ToOwned.html\" title=\"trait std::borrow::ToOwned\">ToOwned</a>&lt;Owned = <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3442\">source</a><a href=\"#method.from-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"enum\" href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt;) -&gt; <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Convert a clone-on-write slice into a vector.</p>\n<p>If <code>s</code> already owns a <code>Vec&lt;T&gt;</code>, it will be returned directly.\nIf <code>s</code> is borrowing a slice, a new <code>Vec&lt;T&gt;</code> will be allocated and\nfilled by cloning <code>s</code>’s items into it.</p>\n<h5 id=\"examples-182\"><a class=\"doc-anchor\" href=\"#examples-182\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>o: Cow&lt;<span class=\"lifetime\">'_</span>, [i32]&gt; = Cow::Owned(<span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"kw\">let </span>b: Cow&lt;<span class=\"lifetime\">'_</span>, [i32]&gt; = Cow::Borrowed(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"macro\">assert_eq!</span>(Vec::from(o), Vec::from(b));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::borrow::Cow;%0A++++let+o:+Cow%3C'_,+%5Bi32%5D%3E+=+Cow::Owned(vec!%5B1,+2,+3%5D);%0A++++let+b:+Cow%3C'_,+%5Bi32%5D%3E+=+Cow::Borrowed(%26%5B1,+2,+3%5D);%0A++++assert_eq!(Vec::from(o),+Vec::from(b));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CString%3E-for-Vec%3Cu8%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.14.0\">1.14.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2898\">source</a></span><a href=\"#impl-From%3CString%3E-for-Vec%3Cu8%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a>&gt; for <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2911\">source</a><a href=\"#method.from-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(string: <a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a>) -&gt; <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec<u8>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Converts the given <a href=\"../string/struct.String.html\" title=\"struct std::string::String\"><code>String</code></a> to a vector <a href=\"struct.Vec.html\" title=\"struct std::vec::Vec\"><code>Vec</code></a> that holds values of type <a href=\"../primitive.u8.html\" title=\"primitive u8\"><code>u8</code></a>.</p>\n<h5 id=\"examples-181\"><a class=\"doc-anchor\" href=\"#examples-181\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>s1 = String::from(<span class=\"string\">\"hello world\"</span>);\n<span class=\"kw\">let </span>v1 = Vec::from(s1);\n\n<span class=\"kw\">for </span>b <span class=\"kw\">in </span>v1 {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{b}\"</span>);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+s1+=+String::from(%22hello+world%22);%0A++++let+v1+=+Vec::from(s1);%0A++++%0A++++for+b+in+v1+%7B%0A++++++++println!(%22%7Bb%7D%22);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CVec%3CNonZero%3Cu8%3E%3E%3E-for-CString\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.43.0\">1.43.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#801\">source</a></span><a href=\"#impl-From%3CVec%3CNonZero%3Cu8%3E%3E%3E-for-CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;<a class=\"struct\" href=\"../num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;&gt;&gt; for <a class=\"struct\" href=\"../ffi/struct.CString.html\" title=\"struct std::ffi::CString\">CString</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#805\">source</a><a href=\"#method.from-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(v: <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;<a class=\"struct\" href=\"../num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;&gt;) -&gt; <a class=\"struct\" href=\"../ffi/struct.CString.html\" title=\"struct std::ffi::CString\">CString</a></h4></section></summary><div class=\"docblock\"><p>Converts a <code><a href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;<a href=\"../num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;<a href=\"../primitive.u8.html\" title=\"primitive u8\">u8</a>&gt;&gt;</code> into a <a href=\"../ffi/struct.CString.html\" title=\"struct std::ffi::CString\"><code>CString</code></a> without\ncopying nor checking for inner nul bytes.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CVec%3CT%3E%3E-for-Cow%3C'a,+%5BT%5D%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/cow.rs.html#32\">source</a></span><a href=\"#impl-From%3CVec%3CT%3E%3E-for-Cow%3C'a,+%5BT%5D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T&gt;&gt; for <a class=\"enum\" href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/cow.rs.html#39\">source</a><a href=\"#method.from-16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(v: <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'a, <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Creates an <a href=\"../borrow/enum.Cow.html#variant.Owned\" title=\"variant std::borrow::Cow::Owned\"><code>Owned</code></a> variant of <a href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\"><code>Cow</code></a>\nfrom an owned instance of <a href=\"struct.Vec.html\" title=\"struct std::vec::Vec\"><code>Vec</code></a>.</p>\n<p>This conversion does not allocate or clone the data.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CVec%3CT,+A%3E%3E-for-Arc%3C%5BT%5D,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#3596\">source</a></span><a href=\"#impl-From%3CVec%3CT,+A%3E%3E-for-Arc%3C%5BT%5D,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;&gt; for <a class=\"struct\" href=\"../sync/struct.Arc.html\" title=\"struct std::sync::Arc\">Arc</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#3608\">source</a><a href=\"#method.from-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(v: <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;) -&gt; <a class=\"struct\" href=\"../sync/struct.Arc.html\" title=\"struct std::sync::Arc\">Arc</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>, A&gt;</h4></section></summary><div class=\"docblock\"><p>Allocate a reference-counted slice and move <code>v</code>’s items into it.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>unique: Vec&lt;i32&gt; = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span>shared: Arc&lt;[i32]&gt; = Arc::from(unique);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"kw-2\">&amp;</span>shared[..]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::Arc;%0A++++let+unique:+Vec%3Ci32%3E+=+vec!%5B1,+2,+3%5D;%0A++++let+shared:+Arc%3C%5Bi32%5D%3E+=+Arc::from(unique);%0A++++assert_eq!(%26%5B1,+2,+3%5D,+%26shared%5B..%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CVec%3CT,+A%3E%3E-for-BinaryHeap%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/binary_heap/mod.rs.html#1768\">source</a></span><a href=\"#impl-From%3CVec%3CT,+A%3E%3E-for-BinaryHeap%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;&gt; for <a class=\"struct\" href=\"../collections/struct.BinaryHeap.html\" title=\"struct std::collections::BinaryHeap\">BinaryHeap</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/binary_heap/mod.rs.html#1772\">source</a><a href=\"#method.from-9\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(vec: <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;) -&gt; <a class=\"struct\" href=\"../collections/struct.BinaryHeap.html\" title=\"struct std::collections::BinaryHeap\">BinaryHeap</a>&lt;T, A&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>Vec&lt;T&gt;</code> into a <code>BinaryHeap&lt;T&gt;</code>.</p>\n<p>This conversion happens in-place, and has <em>O</em>(<em>n</em>) time complexity.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CVec%3CT,+A%3E%3E-for-Box%3C%5BT%5D,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3469\">source</a></span><a href=\"#impl-From%3CVec%3CT,+A%3E%3E-for-Box%3C%5BT%5D,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;&gt; for <a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3490\">source</a><a href=\"#method.from-11\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(v: <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;) -&gt; <a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>, A&gt;</h4></section></summary><div class=\"docblock\"><p>Convert a vector into a boxed slice.</p>\n<p>Before doing the conversion, this method discards excess capacity like <a href=\"struct.Vec.html#method.shrink_to_fit\" title=\"method std::vec::Vec::shrink_to_fit\"><code>Vec::shrink_to_fit</code></a>.</p>\n<h5 id=\"examples-185\"><a class=\"doc-anchor\" href=\"#examples-185\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(Box::from(<span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].into_boxed_slice());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(Box::from(vec!%5B1,+2,+3%5D),+vec!%5B1,+2,+3%5D.into_boxed_slice());%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Any excess capacity is removed:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>vec = Vec::with_capacity(<span class=\"number\">10</span>);\nvec.extend([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n\n<span class=\"macro\">assert_eq!</span>(Box::from(vec), <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].into_boxed_slice());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+vec+=+Vec::with_capacity(10);%0A++++vec.extend(%5B1,+2,+3%5D);%0A++++%0A++++assert_eq!(Box::from(vec),+vec!%5B1,+2,+3%5D.into_boxed_slice());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CVec%3CT,+A%3E%3E-for-Rc%3C%5BT%5D,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/rc.rs.html#2637\">source</a></span><a href=\"#impl-From%3CVec%3CT,+A%3E%3E-for-Rc%3C%5BT%5D,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;&gt; for <a class=\"struct\" href=\"../rc/struct.Rc.html\" title=\"struct std::rc::Rc\">Rc</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-18\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/rc.rs.html#2649\">source</a><a href=\"#method.from-18\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(v: <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;) -&gt; <a class=\"struct\" href=\"../rc/struct.Rc.html\" title=\"struct std::rc::Rc\">Rc</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>, A&gt;</h4></section></summary><div class=\"docblock\"><p>Allocate a reference-counted slice and move <code>v</code>’s items into it.</p>\n<h5 id=\"example-2\"><a class=\"doc-anchor\" href=\"#example-2\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>unique: Vec&lt;i32&gt; = <span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span>shared: Rc&lt;[i32]&gt; = Rc::from(unique);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"kw-2\">&amp;</span>shared[..]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::rc::Rc;%0A++++let+unique:+Vec%3Ci32%3E+=+vec!%5B1,+2,+3%5D;%0A++++let+shared:+Rc%3C%5Bi32%5D%3E+=+Rc::from(unique);%0A++++assert_eq!(%26%5B1,+2,+3%5D,+%26shared%5B..%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CVec%3CT,+A%3E%3E-for-VecDeque%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2941\">source</a></span><a href=\"#impl-From%3CVec%3CT,+A%3E%3E-for-VecDeque%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;&gt; for <a class=\"struct\" href=\"../collections/struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2951\">source</a><a href=\"#method.from-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(other: <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;) -&gt; <a class=\"struct\" href=\"../collections/struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T, A&gt;</h4></section></summary><div class=\"docblock\"><p>Turn a <a href=\"struct.Vec.html\" title=\"struct std::vec::Vec\"><code>Vec&lt;T&gt;</code></a> into a <a href=\"../collections/struct.VecDeque.html\" title=\"struct std::collections::VecDeque\"><code>VecDeque&lt;T&gt;</code></a>.</p>\n<p>This conversion is guaranteed to run in <em>O</em>(1) time\nand to not re-allocate the <code>Vec</code>’s buffer or allocate\nany additional memory.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CVecDeque%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2958\">source</a></span><a href=\"#impl-From%3CVecDeque%3CT,+A%3E%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"../collections/struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T, A&gt;&gt; for <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-19\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2988\">source</a><a href=\"#method.from-19\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(other: <a class=\"struct\" href=\"../collections/struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T, A&gt;) -&gt; <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section></summary><div class=\"docblock\"><p>Turn a <a href=\"../collections/struct.VecDeque.html\" title=\"struct std::collections::VecDeque\"><code>VecDeque&lt;T&gt;</code></a> into a <a href=\"struct.Vec.html\" title=\"struct std::vec::Vec\"><code>Vec&lt;T&gt;</code></a>.</p>\n<p>This never needs to re-allocate, but does need to do <em>O</em>(<em>n</em>) data movement if\nthe circular buffer doesn’t happen to be at the beginning of the allocation.</p>\n<h5 id=\"examples-189\"><a class=\"doc-anchor\" href=\"#examples-189\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::collections::VecDeque;\n\n<span class=\"comment\">// This one is *O*(1).\n</span><span class=\"kw\">let </span>deque: VecDeque&lt;<span class=\"kw\">_</span>&gt; = (<span class=\"number\">1</span>..<span class=\"number\">5</span>).collect();\n<span class=\"kw\">let </span>ptr = deque.as_slices().<span class=\"number\">0</span>.as_ptr();\n<span class=\"kw\">let </span>vec = Vec::from(deque);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n<span class=\"macro\">assert_eq!</span>(vec.as_ptr(), ptr);\n\n<span class=\"comment\">// This one needs data rearranging.\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>deque: VecDeque&lt;<span class=\"kw\">_</span>&gt; = (<span class=\"number\">1</span>..<span class=\"number\">5</span>).collect();\ndeque.push_front(<span class=\"number\">9</span>);\ndeque.push_front(<span class=\"number\">8</span>);\n<span class=\"kw\">let </span>ptr = deque.as_slices().<span class=\"number\">1</span>.as_ptr();\n<span class=\"kw\">let </span>vec = Vec::from(deque);\n<span class=\"macro\">assert_eq!</span>(vec, [<span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]);\n<span class=\"macro\">assert_eq!</span>(vec.as_ptr(), ptr);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::collections::VecDeque;%0A++++%0A++++//+This+one+is+*O*(1).%0A++++let+deque:+VecDeque%3C_%3E+=+(1..5).collect();%0A++++let+ptr+=+deque.as_slices().0.as_ptr();%0A++++let+vec+=+Vec::from(deque);%0A++++assert_eq!(vec,+%5B1,+2,+3,+4%5D);%0A++++assert_eq!(vec.as_ptr(),+ptr);%0A++++%0A++++//+This+one+needs+data+rearranging.%0A++++let+mut+deque:+VecDeque%3C_%3E+=+(1..5).collect();%0A++++deque.push_front(9);%0A++++deque.push_front(8);%0A++++let+ptr+=+deque.as_slices().1.as_ptr();%0A++++let+vec+=+Vec::from(deque);%0A++++assert_eq!(vec,+%5B8,+9,+1,+2,+3,+4%5D);%0A++++assert_eq!(vec.as_ptr(),+ptr);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-FromIterator%3CT%3E-for-Vec%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2967\">source</a></span><a href=\"#impl-FromIterator%3CT%3E-for-Vec%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../iter/trait.FromIterator.html\" title=\"trait std::iter::FromIterator\">FromIterator</a>&lt;T&gt; for <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T&gt;</h3></section></summary><div class=\"docblock\"><p>Collects an iterator into a Vec, commonly called via <a href=\"../iter/trait.Iterator.html#method.collect\" title=\"method std::iter::Iterator::collect\"><code>Iterator::collect()</code></a></p>\n<h4 id=\"allocation-behavior\"><a class=\"doc-anchor\" href=\"#allocation-behavior\">§</a>Allocation behavior</h4>\n<p>In general <code>Vec</code> does not guarantee any particular growth or allocation strategy.\nThat also applies to this trait impl.</p>\n<p><strong>Note:</strong> This section covers implementation details and is therefore exempt from\nstability guarantees.</p>\n<p>Vec may use any or none of the following strategies,\ndepending on the supplied iterator:</p>\n<ul>\n<li>preallocate based on <a href=\"../iter/trait.Iterator.html#method.size_hint\" title=\"method std::iter::Iterator::size_hint\"><code>Iterator::size_hint()</code></a>\n<ul>\n<li>and panic if the number of items is outside the provided lower/upper bounds</li>\n</ul>\n</li>\n<li>use an amortized growth strategy similar to <code>pushing</code> one item at a time</li>\n<li>perform the iteration in-place on the original allocation backing the iterator</li>\n</ul>\n<p>The last case warrants some attention. It is an optimization that in many cases reduces peak memory\nconsumption and improves cache locality. But when big, short-lived allocations are created,\nonly a small fraction of their items get collected, no further use is made of the spare capacity\nand the resulting <code>Vec</code> is moved into a longer-lived structure, then this can lead to the large\nallocations having their lifetimes unnecessarily extended which can result in increased memory\nfootprint.</p>\n<p>In cases where this is an issue, the excess capacity can be discarded with <a href=\"struct.Vec.html#method.shrink_to\" title=\"method std::vec::Vec::shrink_to\"><code>Vec::shrink_to()</code></a>,\n<a href=\"struct.Vec.html#method.shrink_to_fit\" title=\"method std::vec::Vec::shrink_to_fit\"><code>Vec::shrink_to_fit()</code></a> or by collecting into <a href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\"><code>Box&lt;[T]&gt;</code></a> instead, which additionally reduces\nthe size of the long-lived struct.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">static </span>LONG_LIVED: Mutex&lt;Vec&lt;Vec&lt;u16&gt;&gt;&gt; = Mutex::new(Vec::new());\n\n<span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..<span class=\"number\">10 </span>{\n    <span class=\"kw\">let </span>big_temporary: Vec&lt;u16&gt; = (<span class=\"number\">0</span>..<span class=\"number\">1024</span>).collect();\n    <span class=\"comment\">// discard most items\n    </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>result: Vec&lt;<span class=\"kw\">_</span>&gt; = big_temporary.into_iter().filter(|i| i % <span class=\"number\">100 </span>== <span class=\"number\">0</span>).collect();\n    <span class=\"comment\">// without this a lot of unused capacity might be moved into the global\n    </span>result.shrink_to_fit();\n    LONG_LIVED.lock().unwrap().push(result);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::Mutex;%0A++++static+LONG_LIVED:+Mutex%3CVec%3CVec%3Cu16%3E%3E%3E+=+Mutex::new(Vec::new());%0A++++%0A++++for+i+in+0..10+%7B%0A++++++++let+big_temporary:+Vec%3Cu16%3E+=+(0..1024).collect();%0A++++++++//+discard+most+items%0A++++++++let+mut+result:+Vec%3C_%3E+=+big_temporary.into_iter().filter(%7Ci%7C+i+%25+100+==+0).collect();%0A++++++++//+without+this+a+lot+of+unused+capacity+might+be+moved+into+the+global%0A++++++++result.shrink_to_fit();%0A++++++++LONG_LIVED.lock().unwrap().push(result);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2969\">source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(iter: I) -&gt; <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&lt;Item = T&gt;,</div></h4></section></summary><div class=\"docblock\">Creates a value from an iterator. <a href=\"../iter/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Hash-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2888\">source</a></span><a href=\"#impl-Hash-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../hash/trait.Hash.html\" title=\"trait std::hash::Hash\">Hash</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"docblock\"><p>The hash of a vector is the same as that of the corresponding slice,\nas required by the <code>core::borrow::Borrow</code> implementation.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::hash::BuildHasher;\n\n<span class=\"kw\">let </span>b = std::hash::RandomState::new();\n<span class=\"kw\">let </span>v: Vec&lt;u8&gt; = <span class=\"macro\">vec!</span>[<span class=\"number\">0xa8</span>, <span class=\"number\">0x3c</span>, <span class=\"number\">0x09</span>];\n<span class=\"kw\">let </span>s: <span class=\"kw-2\">&amp;</span>[u8] = <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0xa8</span>, <span class=\"number\">0x3c</span>, <span class=\"number\">0x09</span>];\n<span class=\"macro\">assert_eq!</span>(b.hash_one(v), b.hash_one(s));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::hash::BuildHasher;%0A++++%0A++++let+b+=+std::hash::RandomState::new();%0A++++let+v:+Vec%3Cu8%3E+=+vec!%5B0xa8,+0x3c,+0x09%5D;%0A++++let+s:+%26%5Bu8%5D+=+%26%5B0xa8,+0x3c,+0x09%5D;%0A++++assert_eq!(b.hash_one(v),+b.hash_one(s));%0A%7D&amp;edition=2021\">Run</a></div>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2890\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class=\"docblock\">Feeds this value into the given <a href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"../hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Feeds a slice of this type into the given <a href=\"../hash/trait.Hasher.html\" title=\"trait std::hash::Hasher\"><code>Hasher</code></a>. <a href=\"../hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Index%3CI%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2900\">source</a></span><a href=\"#impl-Index%3CI%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, I, A&gt; <a class=\"trait\" href=\"../ops/trait.Index.html\" title=\"trait std::ops::Index\">Index</a>&lt;I&gt; for <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt;,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../ops/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;I as <a class=\"trait\" href=\"../slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../slice/trait.SliceIndex.html#associatedtype.Output\" title=\"type std::slice::SliceIndex::Output\">Output</a></h4></section></summary><div class=\"docblock\">The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2904\">source</a><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: I) -&gt; &amp;&lt;<a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt; as <a class=\"trait\" href=\"../ops/trait.Index.html\" title=\"trait std::ops::Index\">Index</a>&lt;I&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Index.html#associatedtype.Output\" title=\"type std::ops::Index::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;<Vec<T, A> as Index<I>>::Output\">ⓘ</a></h4></section></summary><div class=\"docblock\">Performs the indexing (<code>container[index]</code>) operation. <a href=\"../ops/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-IndexMut%3CI%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2914\">source</a></span><a href=\"#impl-IndexMut%3CI%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, I, A&gt; <a class=\"trait\" href=\"../ops/trait.IndexMut.html\" title=\"trait std::ops::IndexMut\">IndexMut</a>&lt;I&gt; for <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../slice/trait.SliceIndex.html\" title=\"trait std::slice::SliceIndex\">SliceIndex</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt;,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2916\">source</a><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: I) -&gt; &amp;mut &lt;<a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt; as <a class=\"trait\" href=\"../ops/trait.Index.html\" title=\"trait std::ops::Index\">Index</a>&lt;I&gt;&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Index.html#associatedtype.Output\" title=\"type std::ops::Index::Output\">Output</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;mut <Vec<T, A> as Index<I>>::Output\">ⓘ</a></h4></section></summary><div class=\"docblock\">Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"../ops/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-IntoIterator-for-%26Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3014\">source</a></span><a href=\"#impl-IntoIterator-for-%26Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, A&gt; <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a> for &amp;'a <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Item-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../iter/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a T</a></h4></section></summary><div class=\"docblock\">The type of the elements being iterated over.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.IntoIter-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../iter/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"../slice/struct.Iter.html\" title=\"struct std::slice::Iter\">Iter</a>&lt;'a, T&gt;</h4></section></summary><div class=\"docblock\">Which kind of iterator are we turning this into?</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_iter-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3018\">source</a><a href=\"#method.into_iter-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; &lt;&amp;'a <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt; as <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"../iter/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type std::iter::IntoIterator::IntoIter\">IntoIter</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"<&amp;'a Vec<T, A> as IntoIterator>::IntoIter\">ⓘ</a></h4></section></summary><div class=\"docblock\">Creates an iterator from a value. <a href=\"../iter/trait.IntoIterator.html#tymethod.into_iter\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-IntoIterator-for-%26mut+Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3024\">source</a></span><a href=\"#impl-IntoIterator-for-%26mut+Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, A&gt; <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a> for &amp;'a mut <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Item-2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item-2\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../iter/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a mut T</a></h4></section></summary><div class=\"docblock\">The type of the elements being iterated over.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.IntoIter-2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter-2\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../iter/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"../slice/struct.IterMut.html\" title=\"struct std::slice::IterMut\">IterMut</a>&lt;'a, T&gt;</h4></section></summary><div class=\"docblock\">Which kind of iterator are we turning this into?</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_iter-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3028\">source</a><a href=\"#method.into_iter-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; &lt;&amp;'a mut <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt; as <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"../iter/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type std::iter::IntoIterator::IntoIter\">IntoIter</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"<&amp;'a mut Vec<T, A> as IntoIterator>::IntoIter\">ⓘ</a></h4></section></summary><div class=\"docblock\">Creates an iterator from a value. <a href=\"../iter/trait.IntoIterator.html#tymethod.into_iter\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-IntoIterator-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2975\">source</a></span><a href=\"#impl-IntoIterator-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a> for <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2996\">source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../iter/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; &lt;<a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt; as <a class=\"trait\" href=\"../iter/trait.IntoIterator.html\" title=\"trait std::iter::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"../iter/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type std::iter::IntoIterator::IntoIter\">IntoIter</a> <a href=\"#\" class=\"tooltip\" data-notable-ty=\"<Vec<T, A> as IntoIterator>::IntoIter\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.</p>\n<h5 id=\"examples-190\"><a class=\"doc-anchor\" href=\"#examples-190\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>v = <span class=\"macro\">vec!</span>[<span class=\"string\">\"a\"</span>.to_string(), <span class=\"string\">\"b\"</span>.to_string()];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v_iter = v.into_iter();\n\n<span class=\"kw\">let </span>first_element: <span class=\"prelude-ty\">Option</span>&lt;String&gt; = v_iter.next();\n\n<span class=\"macro\">assert_eq!</span>(first_element, <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"a\"</span>.to_string()));\n<span class=\"macro\">assert_eq!</span>(v_iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"b\"</span>.to_string()));\n<span class=\"macro\">assert_eq!</span>(v_iter.next(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+v+=+vec!%5B%22a%22.to_string(),+%22b%22.to_string()%5D;%0A++++let+mut+v_iter+=+v.into_iter();%0A++++%0A++++let+first_element:+Option%3CString%3E+=+v_iter.next();%0A++++%0A++++assert_eq!(first_element,+Some(%22a%22.to_string()));%0A++++assert_eq!(v_iter.next(),+Some(%22b%22.to_string()));%0A++++assert_eq!(v_iter.next(),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../iter/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = T</h4></section></summary><div class=\"docblock\">The type of the elements being iterated over.</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../iter/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"struct.IntoIter.html\" title=\"struct std::vec::IntoIter\">IntoIter</a>&lt;T, A&gt;</h4></section></summary><div class=\"docblock\">Which kind of iterator are we turning this into?</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Ord-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3267\">source</a></span><a href=\"#impl-Ord-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"docblock\"><p>Implements ordering of vectors, <a href=\"../cmp/trait.Ord.html#lexicographical-comparison\" title=\"trait std::cmp::Ord\">lexicographically</a>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3269\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;) -&gt; <a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\">This method returns an <a href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"../cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#856-858\">source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Compares and returns the maximum of two values. <a href=\"../cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#877-879\">source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Compares and returns the minimum of two values. <a href=\"../cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#903-906\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class=\"docblock\">Restrict a value to a certain interval. <a href=\"../cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3C%26%5BU%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#24\">source</a></span><a href=\"#impl-PartialEq%3C%26%5BU%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A&gt; <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[U]</a>&gt; for <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#24\">source</a><a href=\"#method.eq-7\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[U]</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#24\">source</a><a href=\"#method.ne-7\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;&amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[U]</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3C%26%5BU;+N%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#37\">source</a></span><a href=\"#impl-PartialEq%3C%26%5BU;+N%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;&amp;<a class=\"primitive\" href=\"../primitive.array.html\">[U; N]</a>&gt; for <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#37\">source</a><a href=\"#method.eq-9\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;<a class=\"primitive\" href=\"../primitive.array.html\">[U; N]</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#37\">source</a><a href=\"#method.ne-9\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;&amp;<a class=\"primitive\" href=\"../primitive.array.html\">[U; N]</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3C%26mut+%5BU%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#25\">source</a></span><a href=\"#impl-PartialEq%3C%26mut+%5BU%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A&gt; <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;&amp;mut <a class=\"primitive\" href=\"../primitive.slice.html\">[U]</a>&gt; for <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#25\">source</a><a href=\"#method.eq-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;mut <a class=\"primitive\" href=\"../primitive.slice.html\">[U]</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#25\">source</a><a href=\"#method.ne-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;&amp;mut <a class=\"primitive\" href=\"../primitive.slice.html\">[U]</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3C%5BU%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.48.0\">1.48.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#28\">source</a></span><a href=\"#impl-PartialEq%3C%5BU%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A&gt; <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"../primitive.slice.html\">[U]</a>&gt; for <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#28\">source</a><a href=\"#method.eq-10\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[U]</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#28\">source</a><a href=\"#method.ne-10\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[U]</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3C%5BU;+N%5D%3E-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#36\">source</a></span><a href=\"#impl-PartialEq%3C%5BU;+N%5D%3E-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"primitive\" href=\"../primitive.array.html\">[U; N]</a>&gt; for <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#36\">source</a><a href=\"#method.eq-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"../primitive.array.html\">[U; N]</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#36\">source</a><a href=\"#method.ne-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"../primitive.array.html\">[U; N]</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3CVec%3CU,+A%3E%3E-for-%26%5BT%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0\">1.46.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#26\">source</a></span><a href=\"#impl-PartialEq%3CVec%3CU,+A%3E%3E-for-%26%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A&gt; <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;U, A&gt;&gt; for &amp;<a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a><div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#26\">source</a><a href=\"#method.eq-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;U, A&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#26\">source</a><a href=\"#method.ne-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;U, A&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3CVec%3CU,+A%3E%3E-for-%26mut+%5BT%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0\">1.46.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#27\">source</a></span><a href=\"#impl-PartialEq%3CVec%3CU,+A%3E%3E-for-%26mut+%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A&gt; <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;U, A&gt;&gt; for &amp;mut <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a><div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#27\">source</a><a href=\"#method.eq-8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;U, A&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#27\">source</a><a href=\"#method.ne-8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;U, A&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3CVec%3CU,+A%3E%3E-for-%5BT%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.48.0\">1.48.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#29\">source</a></span><a href=\"#impl-PartialEq%3CVec%3CU,+A%3E%3E-for-%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A&gt; <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;U, A&gt;&gt; for <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a><div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#29\">source</a><a href=\"#method.eq-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;U, A&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#29\">source</a><a href=\"#method.ne-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;U, A&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3CVec%3CU,+A%3E%3E-for-Cow%3C'_,+%5BT%5D%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#31\">source</a></span><a href=\"#impl-PartialEq%3CVec%3CU,+A%3E%3E-for-Cow%3C'_,+%5BT%5D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A&gt; <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;U, A&gt;&gt; for <a class=\"enum\" href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'_, <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a>&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;U&gt; + <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#31\">source</a><a href=\"#method.eq-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;U, A&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#31\">source</a><a href=\"#method.ne-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;U, A&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3CVec%3CU,+A%3E%3E-for-VecDeque%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.17.0\">1.17.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2806\">source</a></span><a href=\"#impl-PartialEq%3CVec%3CU,+A%3E%3E-for-VecDeque%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A&gt; <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;U, A&gt;&gt; for <a class=\"struct\" href=\"../collections/struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2806\">source</a><a href=\"#method.eq-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;U, A&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne-2\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq%3CVec%3CU,+A2%3E%3E-for-Vec%3CT,+A1%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#23\">source</a></span><a href=\"#impl-PartialEq%3CVec%3CU,+A2%3E%3E-for-Vec%3CT,+A1%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, A1, A2&gt; <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;U, A2&gt;&gt; for <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A1&gt;<div class=\"where\">where\n    A1: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,\n    A2: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,\n    T: <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#23\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;U, A2&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/partial_eq.rs.html#23\">source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;U, A2&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd%3CVec%3CT,+A2%3E%3E-for-Vec%3CT,+A1%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3250-3254\">source</a></span><a href=\"#impl-PartialOrd%3CVec%3CT,+A2%3E%3E-for-Vec%3CT,+A1%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A1, A2&gt; <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>&lt;<a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A2&gt;&gt; for <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A1&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>,\n    A1: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,\n    A2: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"docblock\"><p>Implements comparison of vectors, <a href=\"../cmp/trait.Ord.html#lexicographical-comparison\" title=\"trait std::cmp::Ord\">lexicographically</a>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3257\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A2&gt;) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CVec%3CT%3E%3E-for-Box%3C%5BT;+N%5D%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0\">1.66.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1738\">source</a></span><a href=\"#impl-TryFrom%3CVec%3CT%3E%3E-for-Box%3C%5BT;+N%5D%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T&gt;&gt; for <a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.array.html\">[T; N]</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1759\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    vec: <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T&gt;,\n) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.array.html\">[T; N]</a>&gt;, &lt;<a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"../primitive.array.html\">[T; N]</a>&gt; as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert a <code>Vec&lt;T&gt;</code> into a <code>Box&lt;[T; N]&gt;</code>.</p>\n<p>Like <a href=\"struct.Vec.html#method.into_boxed_slice\" title=\"method std::vec::Vec::into_boxed_slice\"><code>Vec::into_boxed_slice</code></a>, this is in-place if <code>vec.capacity() == N</code>,\nbut will require a reallocation otherwise.</p>\n<h5 id=\"errors-4\"><a class=\"doc-anchor\" href=\"#errors-4\">§</a>Errors</h5>\n<p>Returns the original <code>Vec&lt;T&gt;</code> in the <code>Err</code> variant if\n<code>boxed_slice.len()</code> does not equal <code>N</code>.</p>\n<h5 id=\"examples-177\"><a class=\"doc-anchor\" href=\"#examples-177\">§</a>Examples</h5>\n<p>This can be used with <a href=\"../macro.vec.html\" title=\"macro std::vec\"><code>vec!</code></a> to create an array on the heap:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>state: Box&lt;[f32; <span class=\"number\">100</span>]&gt; = <span class=\"macro\">vec!</span>[<span class=\"number\">1.0</span>; <span class=\"number\">100</span>].try_into().unwrap();\n<span class=\"macro\">assert_eq!</span>(state.len(), <span class=\"number\">100</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+state:+Box%3C%5Bf32;+100%5D%3E+=+vec!%5B1.0;+100%5D.try_into().unwrap();%0A++++assert_eq!(state.len(),+100);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-TryFrom%3CVec%3CT,+A%3E%3E-for-%5BT;+N%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.48.0\">1.48.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3511\">source</a></span><a href=\"#impl-TryFrom%3CVec%3CT,+A%3E%3E-for-%5BT;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;&gt; for <a class=\"primitive\" href=\"../primitive.array.html\">[T; N]</a><div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3540\">source</a><a href=\"#method.try_from-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(vec: <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.array.html\">[T; N]</a>, <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Gets the entire contents of the <code>Vec&lt;T&gt;</code> as an array,\nif its size exactly matches that of the requested array.</p>\n<h5 id=\"examples-178\"><a class=\"doc-anchor\" href=\"#examples-178\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"macro\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].try_into(), <span class=\"prelude-val\">Ok</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]));\n<span class=\"macro\">assert_eq!</span>(&lt;Vec&lt;i32&gt;&gt;::new().try_into(), <span class=\"prelude-val\">Ok</span>([]));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(vec!%5B1,+2,+3%5D.try_into(),+Ok(%5B1,+2,+3%5D));%0A++++assert_eq!(%3CVec%3Ci32%3E%3E::new().try_into(),+Ok(%5B%5D));%0A%7D&amp;edition=2021\">Run</a></div>\n<p>If the length doesn’t match, the input comes back in <code>Err</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>r: <span class=\"prelude-ty\">Result</span>&lt;[i32; <span class=\"number\">4</span>], <span class=\"kw\">_</span>&gt; = (<span class=\"number\">0</span>..<span class=\"number\">10</span>).collect::&lt;Vec&lt;<span class=\"kw\">_</span>&gt;&gt;().try_into();\n<span class=\"macro\">assert_eq!</span>(r, <span class=\"prelude-val\">Err</span>(<span class=\"macro\">vec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+r:+Result%3C%5Bi32;+4%5D,+_%3E+=+(0..10).collect::%3CVec%3C_%3E%3E().try_into();%0A++++assert_eq!(r,+Err(vec!%5B0,+1,+2,+3,+4,+5,+6,+7,+8,+9%5D));%0A%7D&amp;edition=2021\">Run</a></div>\n<p>If you’re fine with just getting a prefix of the <code>Vec&lt;T&gt;</code>,\nyou can call <a href=\"struct.Vec.html#method.truncate\" title=\"method std::vec::Vec::truncate\"><code>.truncate(N)</code></a> first.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = String::from(<span class=\"string\">\"hello world\"</span>).into_bytes();\nv.sort();\nv.truncate(<span class=\"number\">2</span>);\n<span class=\"kw\">let </span>[a, b]: [<span class=\"kw\">_</span>; <span class=\"number\">2</span>] = v.try_into().unwrap();\n<span class=\"macro\">assert_eq!</span>(a, <span class=\"string\">b' '</span>);\n<span class=\"macro\">assert_eq!</span>(b, <span class=\"string\">b'd'</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++let+mut+v+=+String::from(%22hello+world%22).into_bytes();%0A++++v.sort();%0A++++v.truncate(2);%0A++++let+%5Ba,+b%5D:+%5B_;+2%5D+=+v.try_into().unwrap();%0A++++assert_eq!(a,+b'+');%0A++++assert_eq!(b,+b'd');%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;</h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Write-for-Vec%3Cu8,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/impls.rs.html#411-443\">source</a></span><a href=\"#impl-Write-for-Vec%3Cu8,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>&gt; <a class=\"trait\" href=\"../io/trait.Write.html\" title=\"trait std::io::Write\">Write</a> for <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, A&gt;</h3></section></summary><div class=\"docblock\"><p>Write is implemented for <code>Vec&lt;u8&gt;</code> by appending to the vector.\nThe vector will grow as needed.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/impls.rs.html#413-416\">source</a><a href=\"#method.write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Write.html#tymethod.write\" class=\"fn\">write</a>(&amp;mut self, buf: &amp;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Write a buffer into this writer, returning how many bytes were written. <a href=\"../io/trait.Write.html#tymethod.write\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/impls.rs.html#419-426\">source</a><a href=\"#method.write_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Write.html#method.write_vectored\" class=\"fn\">write_vectored</a>(&amp;mut self, bufs: &amp;[<a class=\"struct\" href=\"../io/struct.IoSlice.html\" title=\"struct std::io::IoSlice\">IoSlice</a>&lt;'_&gt;]) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Like <a href=\"../io/trait.Write.html#tymethod.write\" title=\"method std::io::Write::write\"><code>write</code></a>, except that it writes from a slice of buffers. <a href=\"../io/trait.Write.html#method.write_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_write_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/impls.rs.html#429-431\">source</a><a href=\"#method.is_write_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Write.html#method.is_write_vectored\" class=\"fn\">is_write_vectored</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>can_vector</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/69941\">#69941</a>)</span></div></span><div class=\"docblock\">Determines if this <code>Write</code>r has an efficient <a href=\"../io/trait.Write.html#method.write_vectored\" title=\"method std::io::Write::write_vectored\"><code>write_vectored</code></a>\nimplementation. <a href=\"../io/trait.Write.html#method.is_write_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_all\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/impls.rs.html#434-437\">source</a><a href=\"#method.write_all\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Write.html#method.write_all\" class=\"fn\">write_all</a>(&amp;mut self, buf: &amp;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\">Attempts to write an entire buffer into this writer. <a href=\"../io/trait.Write.html#method.write_all\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.flush\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/impls.rs.html#440-442\">source</a><a href=\"#method.flush\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Write.html#tymethod.flush\" class=\"fn\">flush</a>(&amp;mut self) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\">Flush this output stream, ensuring that all intermediately buffered\ncontents reach their destination. <a href=\"../io/trait.Write.html#tymethod.flush\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_all_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/mod.rs.html#1761-1776\">source</a><a href=\"#method.write_all_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Write.html#method.write_all_vectored\" class=\"fn\">write_all_vectored</a>(&amp;mut self, bufs: &amp;mut [<a class=\"struct\" href=\"../io/struct.IoSlice.html\" title=\"struct std::io::IoSlice\">IoSlice</a>&lt;'_&gt;]) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>write_all_vectored</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/70436\">#70436</a>)</span></div></span><div class=\"docblock\">Attempts to write multiple buffers into this writer. <a href=\"../io/trait.Write.html#method.write_all_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write_fmt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1814-1850\">source</a></span><a href=\"#method.write_fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Write.html#method.write_fmt\" class=\"fn\">write_fmt</a>(&amp;mut self, fmt: <a class=\"struct\" href=\"../fmt/struct.Arguments.html\" title=\"struct std::fmt::Arguments\">Arguments</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\">Writes a formatted string into this writer, returning any error\nencountered. <a href=\"../io/trait.Write.html#method.write_fmt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.by_ref\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1874-1879\">source</a></span><a href=\"#method.by_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../io/trait.Write.html#method.by_ref\" class=\"fn\">by_ref</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut Self</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates a “by reference” adapter for this instance of <code>Write</code>. <a href=\"../io/trait.Write.html#method.by_ref\">Read more</a></div></details></div></details><section id=\"impl-DerefPure-for-Vec%3CT,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#2828\">source</a><a href=\"#impl-DerefPure-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../ops/trait.DerefPure.html\" title=\"trait std::ops::DerefPure\">DerefPure</a> for <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section><section id=\"impl-Eq-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3263\">source</a></span><a href=\"#impl-Eq-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-Vec%3CT,+A%3E\" class=\"impl\"><a href=\"#impl-Freeze-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a>,</div></h3></section><section id=\"impl-RefUnwindSafe-for-Vec%3CT,+A%3E\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a>,\n    T: <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a>,</div></h3></section><section id=\"impl-Send-for-Vec%3CT,+A%3E\" class=\"impl\"><a href=\"#impl-Send-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a>,\n    T: <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a>,</div></h3></section><section id=\"impl-Sync-for-Vec%3CT,+A%3E\" class=\"impl\"><a href=\"#impl-Sync-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a>,\n    T: <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a>,</div></h3></section><section id=\"impl-Unpin-for-Vec%3CT,+A%3E\" class=\"impl\"><a href=\"#impl-Unpin-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a>,\n    T: <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a>,</div></h3></section><section id=\"impl-UnwindSafe-for-Vec%3CT,+A%3E\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a>,\n    T: <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a>,</div></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-20\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from-20\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToOwned-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85\">source</a><a href=\"#impl-ToOwned-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.ToOwned.html\" title=\"trait std::borrow::ToOwned\">ToOwned</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Owned\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../borrow/trait.ToOwned.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = T</h4></section></summary><div class=\"docblock\">The resulting type after obtaining ownership.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88\">source</a><a href=\"#method.to_owned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\">Creates owned data from borrowed data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92\">source</a><a href=\"#method.clone_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#method.clone_into\" class=\"fn\">clone_into</a>(&amp;self, target: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>)</h4></section></summary><div class=\"docblock\">Uses borrowed data to replace owned data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#method.clone_into\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-3\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-3\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-2\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div><script type=\"text/json\" id=\"notable-traits-data\">{\"&<Vec<T, A> as Index<I>>::Output\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"struct.Vec.html\\\" title=\\\"struct std::vec::Vec\\\">Vec</a>&lt;<a class=\\\"primitive\\\" href=\\\"../primitive.u8.html\\\">u8</a>, A&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;A: <a class=\\\"trait\\\" href=\\\"../alloc/trait.Allocator.html\\\" title=\\\"trait std::alloc::Allocator\\\">Allocator</a>&gt; <a class=\\\"trait\\\" href=\\\"../io/trait.Write.html\\\" title=\\\"trait std::io::Write\\\">Write</a> for <a class=\\\"struct\\\" href=\\\"struct.Vec.html\\\" title=\\\"struct std::vec::Vec\\\">Vec</a>&lt;<a class=\\\"primitive\\\" href=\\\"../primitive.u8.html\\\">u8</a>, A&gt;</div>\",\"&[u8]\":\"<h3>Notable traits for <code>&amp;[<a class=\\\"primitive\\\" href=\\\"../primitive.u8.html\\\">u8</a>]</code></h3><pre><code><div class=\\\"where\\\">impl <a class=\\\"trait\\\" href=\\\"../io/trait.Read.html\\\" title=\\\"trait std::io::Read\\\">Read</a> for &amp;[<a class=\\\"primitive\\\" href=\\\"../primitive.u8.html\\\">u8</a>]</div>\",\"&mut <Vec<T, A> as Index<I>>::Output\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"struct.Vec.html\\\" title=\\\"struct std::vec::Vec\\\">Vec</a>&lt;<a class=\\\"primitive\\\" href=\\\"../primitive.u8.html\\\">u8</a>, A&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;A: <a class=\\\"trait\\\" href=\\\"../alloc/trait.Allocator.html\\\" title=\\\"trait std::alloc::Allocator\\\">Allocator</a>&gt; <a class=\\\"trait\\\" href=\\\"../io/trait.Write.html\\\" title=\\\"trait std::io::Write\\\">Write</a> for <a class=\\\"struct\\\" href=\\\"struct.Vec.html\\\" title=\\\"struct std::vec::Vec\\\">Vec</a>&lt;<a class=\\\"primitive\\\" href=\\\"../primitive.u8.html\\\">u8</a>, A&gt;</div>\",\"<&'a Vec<T, A> as IntoIterator>::IntoIter\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"struct.Vec.html\\\" title=\\\"struct std::vec::Vec\\\">Vec</a>&lt;<a class=\\\"primitive\\\" href=\\\"../primitive.u8.html\\\">u8</a>, A&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;A: <a class=\\\"trait\\\" href=\\\"../alloc/trait.Allocator.html\\\" title=\\\"trait std::alloc::Allocator\\\">Allocator</a>&gt; <a class=\\\"trait\\\" href=\\\"../io/trait.Write.html\\\" title=\\\"trait std::io::Write\\\">Write</a> for <a class=\\\"struct\\\" href=\\\"struct.Vec.html\\\" title=\\\"struct std::vec::Vec\\\">Vec</a>&lt;<a class=\\\"primitive\\\" href=\\\"../primitive.u8.html\\\">u8</a>, A&gt;</div>\",\"<&'a mut Vec<T, A> as IntoIterator>::IntoIter\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"struct.Vec.html\\\" title=\\\"struct std::vec::Vec\\\">Vec</a>&lt;<a class=\\\"primitive\\\" href=\\\"../primitive.u8.html\\\">u8</a>, A&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;A: <a class=\\\"trait\\\" href=\\\"../alloc/trait.Allocator.html\\\" title=\\\"trait std::alloc::Allocator\\\">Allocator</a>&gt; <a class=\\\"trait\\\" href=\\\"../io/trait.Write.html\\\" title=\\\"trait std::io::Write\\\">Write</a> for <a class=\\\"struct\\\" href=\\\"struct.Vec.html\\\" title=\\\"struct std::vec::Vec\\\">Vec</a>&lt;<a class=\\\"primitive\\\" href=\\\"../primitive.u8.html\\\">u8</a>, A&gt;</div>\",\"<Vec<T, A> as IntoIterator>::IntoIter\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"struct.Vec.html\\\" title=\\\"struct std::vec::Vec\\\">Vec</a>&lt;<a class=\\\"primitive\\\" href=\\\"../primitive.u8.html\\\">u8</a>, A&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;A: <a class=\\\"trait\\\" href=\\\"../alloc/trait.Allocator.html\\\" title=\\\"trait std::alloc::Allocator\\\">Allocator</a>&gt; <a class=\\\"trait\\\" href=\\\"../io/trait.Write.html\\\" title=\\\"trait std::io::Write\\\">Write</a> for <a class=\\\"struct\\\" href=\\\"struct.Vec.html\\\" title=\\\"struct std::vec::Vec\\\">Vec</a>&lt;<a class=\\\"primitive\\\" href=\\\"../primitive.u8.html\\\">u8</a>, A&gt;</div>\",\"<[T] as Concat<Item>>::Output\":\"<h3>Notable traits for <code>&amp;[<a class=\\\"primitive\\\" href=\\\"../primitive.u8.html\\\">u8</a>]</code></h3><pre><code><div class=\\\"where\\\">impl <a class=\\\"trait\\\" href=\\\"../io/trait.Read.html\\\" title=\\\"trait std::io::Read\\\">Read</a> for &amp;[<a class=\\\"primitive\\\" href=\\\"../primitive.u8.html\\\">u8</a>]</div><div class=\\\"where\\\">impl <a class=\\\"trait\\\" href=\\\"../io/trait.Write.html\\\" title=\\\"trait std::io::Write\\\">Write</a> for &amp;mut [<a class=\\\"primitive\\\" href=\\\"../primitive.u8.html\\\">u8</a>]</div>\",\"<[T] as Join<Separator>>::Output\":\"<h3>Notable traits for <code>&amp;[<a class=\\\"primitive\\\" href=\\\"../primitive.u8.html\\\">u8</a>]</code></h3><pre><code><div class=\\\"where\\\">impl <a class=\\\"trait\\\" href=\\\"../io/trait.Read.html\\\" title=\\\"trait std::io::Read\\\">Read</a> for &amp;[<a class=\\\"primitive\\\" href=\\\"../primitive.u8.html\\\">u8</a>]</div><div class=\\\"where\\\">impl <a class=\\\"trait\\\" href=\\\"../io/trait.Write.html\\\" title=\\\"trait std::io::Write\\\">Write</a> for &amp;mut [<a class=\\\"primitive\\\" href=\\\"../primitive.u8.html\\\">u8</a>]</div>\",\"ArrayChunks<'_, T, N>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../slice/struct.ArrayChunks.html\\\" title=\\\"struct std::slice::ArrayChunks\\\">ArrayChunks</a>&lt;'a, T, N&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, T, const N: <a class=\\\"primitive\\\" href=\\\"../primitive.usize.html\\\">usize</a>&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../slice/struct.ArrayChunks.html\\\" title=\\\"struct std::slice::ArrayChunks\\\">ArrayChunks</a>&lt;'a, T, N&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = &amp;'a <a class=\\\"primitive\\\" href=\\\"../primitive.array.html\\\">[T; N]</a>;</div>\",\"ArrayChunksMut<'_, T, N>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../slice/struct.ArrayChunksMut.html\\\" title=\\\"struct std::slice::ArrayChunksMut\\\">ArrayChunksMut</a>&lt;'a, T, N&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, T, const N: <a class=\\\"primitive\\\" href=\\\"../primitive.usize.html\\\">usize</a>&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../slice/struct.ArrayChunksMut.html\\\" title=\\\"struct std::slice::ArrayChunksMut\\\">ArrayChunksMut</a>&lt;'a, T, N&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = &amp;'a mut <a class=\\\"primitive\\\" href=\\\"../primitive.array.html\\\">[T; N]</a>;</div>\",\"ArrayWindows<'_, T, N>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../slice/struct.ArrayWindows.html\\\" title=\\\"struct std::slice::ArrayWindows\\\">ArrayWindows</a>&lt;'a, T, N&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, T, const N: <a class=\\\"primitive\\\" href=\\\"../primitive.usize.html\\\">usize</a>&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../slice/struct.ArrayWindows.html\\\" title=\\\"struct std::slice::ArrayWindows\\\">ArrayWindows</a>&lt;'a, T, N&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = &amp;'a <a class=\\\"primitive\\\" href=\\\"../primitive.array.html\\\">[T; N]</a>;</div>\",\"ChunkBy<'_, T, F>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../slice/struct.ChunkBy.html\\\" title=\\\"struct std::slice::ChunkBy\\\">ChunkBy</a>&lt;'a, T, P&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, T, P&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../slice/struct.ChunkBy.html\\\" title=\\\"struct std::slice::ChunkBy\\\">ChunkBy</a>&lt;'a, T, P&gt;<div class=\\\"where\\\">where\\n    T: 'a,\\n    P: <a class=\\\"trait\\\" href=\\\"../ops/trait.FnMut.html\\\" title=\\\"trait std::ops::FnMut\\\">FnMut</a>(<a class=\\\"primitive\\\" href=\\\"../primitive.reference.html\\\">&amp;T</a>, <a class=\\\"primitive\\\" href=\\\"../primitive.reference.html\\\">&amp;T</a>) -&gt; <a class=\\\"primitive\\\" href=\\\"../primitive.bool.html\\\">bool</a>,</div></div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = &amp;'a <a class=\\\"primitive\\\" href=\\\"../primitive.slice.html\\\">[T]</a>;</div>\",\"ChunkByMut<'_, T, F>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../slice/struct.ChunkByMut.html\\\" title=\\\"struct std::slice::ChunkByMut\\\">ChunkByMut</a>&lt;'a, T, P&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, T, P&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../slice/struct.ChunkByMut.html\\\" title=\\\"struct std::slice::ChunkByMut\\\">ChunkByMut</a>&lt;'a, T, P&gt;<div class=\\\"where\\\">where\\n    T: 'a,\\n    P: <a class=\\\"trait\\\" href=\\\"../ops/trait.FnMut.html\\\" title=\\\"trait std::ops::FnMut\\\">FnMut</a>(<a class=\\\"primitive\\\" href=\\\"../primitive.reference.html\\\">&amp;T</a>, <a class=\\\"primitive\\\" href=\\\"../primitive.reference.html\\\">&amp;T</a>) -&gt; <a class=\\\"primitive\\\" href=\\\"../primitive.bool.html\\\">bool</a>,</div></div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = &amp;'a mut <a class=\\\"primitive\\\" href=\\\"../primitive.slice.html\\\">[T]</a>;</div>\",\"Chunks<'_, T>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../slice/struct.Chunks.html\\\" title=\\\"struct std::slice::Chunks\\\">Chunks</a>&lt;'a, T&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, T&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../slice/struct.Chunks.html\\\" title=\\\"struct std::slice::Chunks\\\">Chunks</a>&lt;'a, T&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = &amp;'a <a class=\\\"primitive\\\" href=\\\"../primitive.slice.html\\\">[T]</a>;</div>\",\"ChunksExact<'_, T>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../slice/struct.ChunksExact.html\\\" title=\\\"struct std::slice::ChunksExact\\\">ChunksExact</a>&lt;'a, T&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, T&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../slice/struct.ChunksExact.html\\\" title=\\\"struct std::slice::ChunksExact\\\">ChunksExact</a>&lt;'a, T&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = &amp;'a <a class=\\\"primitive\\\" href=\\\"../primitive.slice.html\\\">[T]</a>;</div>\",\"ChunksExactMut<'_, T>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../slice/struct.ChunksExactMut.html\\\" title=\\\"struct std::slice::ChunksExactMut\\\">ChunksExactMut</a>&lt;'a, T&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, T&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../slice/struct.ChunksExactMut.html\\\" title=\\\"struct std::slice::ChunksExactMut\\\">ChunksExactMut</a>&lt;'a, T&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = &amp;'a mut <a class=\\\"primitive\\\" href=\\\"../primitive.slice.html\\\">[T]</a>;</div>\",\"ChunksMut<'_, T>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../slice/struct.ChunksMut.html\\\" title=\\\"struct std::slice::ChunksMut\\\">ChunksMut</a>&lt;'a, T&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, T&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../slice/struct.ChunksMut.html\\\" title=\\\"struct std::slice::ChunksMut\\\">ChunksMut</a>&lt;'a, T&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = &amp;'a mut <a class=\\\"primitive\\\" href=\\\"../primitive.slice.html\\\">[T]</a>;</div>\",\"Drain<'_, T, A>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"struct.Drain.html\\\" title=\\\"struct std::vec::Drain\\\">Drain</a>&lt;'_, T, A&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;T, A&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"struct.Drain.html\\\" title=\\\"struct std::vec::Drain\\\">Drain</a>&lt;'_, T, A&gt;<div class=\\\"where\\\">where\\n    A: <a class=\\\"trait\\\" href=\\\"../alloc/trait.Allocator.html\\\" title=\\\"trait std::alloc::Allocator\\\">Allocator</a>,</div></div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = T;</div>\",\"EscapeAscii<'_>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../slice/struct.EscapeAscii.html\\\" title=\\\"struct std::slice::EscapeAscii\\\">EscapeAscii</a>&lt;'a&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../slice/struct.EscapeAscii.html\\\" title=\\\"struct std::slice::EscapeAscii\\\">EscapeAscii</a>&lt;'a&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"primitive\\\" href=\\\"../primitive.u8.html\\\">u8</a>;</div>\",\"ExtractIf<'_, T, F, A>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"struct.ExtractIf.html\\\" title=\\\"struct std::vec::ExtractIf\\\">ExtractIf</a>&lt;'_, T, F, A&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;T, F, A&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"struct.ExtractIf.html\\\" title=\\\"struct std::vec::ExtractIf\\\">ExtractIf</a>&lt;'_, T, F, A&gt;<div class=\\\"where\\\">where\\n    A: <a class=\\\"trait\\\" href=\\\"../alloc/trait.Allocator.html\\\" title=\\\"trait std::alloc::Allocator\\\">Allocator</a>,\\n    F: <a class=\\\"trait\\\" href=\\\"../ops/trait.FnMut.html\\\" title=\\\"trait std::ops::FnMut\\\">FnMut</a>(<a class=\\\"primitive\\\" href=\\\"../primitive.reference.html\\\">&amp;mut T</a>) -&gt; <a class=\\\"primitive\\\" href=\\\"../primitive.bool.html\\\">bool</a>,</div></div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = T;</div>\",\"Iter<'_, T>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../slice/struct.Iter.html\\\" title=\\\"struct std::slice::Iter\\\">Iter</a>&lt;'a, T&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, T&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../slice/struct.Iter.html\\\" title=\\\"struct std::slice::Iter\\\">Iter</a>&lt;'a, T&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"primitive\\\" href=\\\"../primitive.reference.html\\\">&amp;'a T</a>;</div>\",\"IterMut<'_, T>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../slice/struct.IterMut.html\\\" title=\\\"struct std::slice::IterMut\\\">IterMut</a>&lt;'a, T&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, T&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../slice/struct.IterMut.html\\\" title=\\\"struct std::slice::IterMut\\\">IterMut</a>&lt;'a, T&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"primitive\\\" href=\\\"../primitive.reference.html\\\">&amp;'a mut T</a>;</div>\",\"RChunks<'_, T>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../slice/struct.RChunks.html\\\" title=\\\"struct std::slice::RChunks\\\">RChunks</a>&lt;'a, T&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, T&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../slice/struct.RChunks.html\\\" title=\\\"struct std::slice::RChunks\\\">RChunks</a>&lt;'a, T&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = &amp;'a <a class=\\\"primitive\\\" href=\\\"../primitive.slice.html\\\">[T]</a>;</div>\",\"RChunksExact<'_, T>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../slice/struct.RChunksExact.html\\\" title=\\\"struct std::slice::RChunksExact\\\">RChunksExact</a>&lt;'a, T&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, T&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../slice/struct.RChunksExact.html\\\" title=\\\"struct std::slice::RChunksExact\\\">RChunksExact</a>&lt;'a, T&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = &amp;'a <a class=\\\"primitive\\\" href=\\\"../primitive.slice.html\\\">[T]</a>;</div>\",\"RChunksExactMut<'_, T>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../slice/struct.RChunksExactMut.html\\\" title=\\\"struct std::slice::RChunksExactMut\\\">RChunksExactMut</a>&lt;'a, T&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, T&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../slice/struct.RChunksExactMut.html\\\" title=\\\"struct std::slice::RChunksExactMut\\\">RChunksExactMut</a>&lt;'a, T&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = &amp;'a mut <a class=\\\"primitive\\\" href=\\\"../primitive.slice.html\\\">[T]</a>;</div>\",\"RChunksMut<'_, T>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../slice/struct.RChunksMut.html\\\" title=\\\"struct std::slice::RChunksMut\\\">RChunksMut</a>&lt;'a, T&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, T&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../slice/struct.RChunksMut.html\\\" title=\\\"struct std::slice::RChunksMut\\\">RChunksMut</a>&lt;'a, T&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = &amp;'a mut <a class=\\\"primitive\\\" href=\\\"../primitive.slice.html\\\">[T]</a>;</div>\",\"RSplit<'_, T, F>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../slice/struct.RSplit.html\\\" title=\\\"struct std::slice::RSplit\\\">RSplit</a>&lt;'a, T, P&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, T, P&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../slice/struct.RSplit.html\\\" title=\\\"struct std::slice::RSplit\\\">RSplit</a>&lt;'a, T, P&gt;<div class=\\\"where\\\">where\\n    P: <a class=\\\"trait\\\" href=\\\"../ops/trait.FnMut.html\\\" title=\\\"trait std::ops::FnMut\\\">FnMut</a>(<a class=\\\"primitive\\\" href=\\\"../primitive.reference.html\\\">&amp;T</a>) -&gt; <a class=\\\"primitive\\\" href=\\\"../primitive.bool.html\\\">bool</a>,</div></div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = &amp;'a <a class=\\\"primitive\\\" href=\\\"../primitive.slice.html\\\">[T]</a>;</div>\",\"RSplitMut<'_, T, F>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../slice/struct.RSplitMut.html\\\" title=\\\"struct std::slice::RSplitMut\\\">RSplitMut</a>&lt;'a, T, P&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, T, P&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../slice/struct.RSplitMut.html\\\" title=\\\"struct std::slice::RSplitMut\\\">RSplitMut</a>&lt;'a, T, P&gt;<div class=\\\"where\\\">where\\n    P: <a class=\\\"trait\\\" href=\\\"../ops/trait.FnMut.html\\\" title=\\\"trait std::ops::FnMut\\\">FnMut</a>(<a class=\\\"primitive\\\" href=\\\"../primitive.reference.html\\\">&amp;T</a>) -&gt; <a class=\\\"primitive\\\" href=\\\"../primitive.bool.html\\\">bool</a>,</div></div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = &amp;'a mut <a class=\\\"primitive\\\" href=\\\"../primitive.slice.html\\\">[T]</a>;</div>\",\"RSplitN<'_, T, F>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../slice/struct.RSplitN.html\\\" title=\\\"struct std::slice::RSplitN\\\">RSplitN</a>&lt;'a, T, P&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, T, P&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../slice/struct.RSplitN.html\\\" title=\\\"struct std::slice::RSplitN\\\">RSplitN</a>&lt;'a, T, P&gt;<div class=\\\"where\\\">where\\n    P: <a class=\\\"trait\\\" href=\\\"../ops/trait.FnMut.html\\\" title=\\\"trait std::ops::FnMut\\\">FnMut</a>(<a class=\\\"primitive\\\" href=\\\"../primitive.reference.html\\\">&amp;T</a>) -&gt; <a class=\\\"primitive\\\" href=\\\"../primitive.bool.html\\\">bool</a>,</div></div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = &amp;'a <a class=\\\"primitive\\\" href=\\\"../primitive.slice.html\\\">[T]</a>;</div>\",\"RSplitNMut<'_, T, F>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../slice/struct.RSplitNMut.html\\\" title=\\\"struct std::slice::RSplitNMut\\\">RSplitNMut</a>&lt;'a, T, P&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, T, P&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../slice/struct.RSplitNMut.html\\\" title=\\\"struct std::slice::RSplitNMut\\\">RSplitNMut</a>&lt;'a, T, P&gt;<div class=\\\"where\\\">where\\n    P: <a class=\\\"trait\\\" href=\\\"../ops/trait.FnMut.html\\\" title=\\\"trait std::ops::FnMut\\\">FnMut</a>(<a class=\\\"primitive\\\" href=\\\"../primitive.reference.html\\\">&amp;T</a>) -&gt; <a class=\\\"primitive\\\" href=\\\"../primitive.bool.html\\\">bool</a>,</div></div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = &amp;'a mut <a class=\\\"primitive\\\" href=\\\"../primitive.slice.html\\\">[T]</a>;</div>\",\"Range<*const T>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../ops/struct.Range.html\\\" title=\\\"struct std::ops::Range\\\">Range</a>&lt;A&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;A&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../ops/struct.Range.html\\\" title=\\\"struct std::ops::Range\\\">Range</a>&lt;A&gt;<div class=\\\"where\\\">where\\n    A: <a class=\\\"trait\\\" href=\\\"../iter/trait.Step.html\\\" title=\\\"trait std::iter::Step\\\">Step</a>,</div></div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = A;</div>\",\"Range<*mut T>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../ops/struct.Range.html\\\" title=\\\"struct std::ops::Range\\\">Range</a>&lt;A&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;A&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../ops/struct.Range.html\\\" title=\\\"struct std::ops::Range\\\">Range</a>&lt;A&gt;<div class=\\\"where\\\">where\\n    A: <a class=\\\"trait\\\" href=\\\"../iter/trait.Step.html\\\" title=\\\"trait std::iter::Step\\\">Step</a>,</div></div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = A;</div>\",\"Splice<'_, <I as IntoIterator>::IntoIter, A>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"struct.Splice.html\\\" title=\\\"struct std::vec::Splice\\\">Splice</a>&lt;'_, I, A&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;I, A&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"struct.Splice.html\\\" title=\\\"struct std::vec::Splice\\\">Splice</a>&lt;'_, I, A&gt;<div class=\\\"where\\\">where\\n    I: <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a>,\\n    A: <a class=\\\"trait\\\" href=\\\"../alloc/trait.Allocator.html\\\" title=\\\"trait std::alloc::Allocator\\\">Allocator</a>,</div></div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = &lt;I as <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a>&gt;::<a class=\\\"associatedtype\\\" href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" title=\\\"type std::iter::Iterator::Item\\\">Item</a>;</div>\",\"Split<'_, T, F>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../slice/struct.Split.html\\\" title=\\\"struct std::slice::Split\\\">Split</a>&lt;'a, T, P&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, T, P&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../slice/struct.Split.html\\\" title=\\\"struct std::slice::Split\\\">Split</a>&lt;'a, T, P&gt;<div class=\\\"where\\\">where\\n    P: <a class=\\\"trait\\\" href=\\\"../ops/trait.FnMut.html\\\" title=\\\"trait std::ops::FnMut\\\">FnMut</a>(<a class=\\\"primitive\\\" href=\\\"../primitive.reference.html\\\">&amp;T</a>) -&gt; <a class=\\\"primitive\\\" href=\\\"../primitive.bool.html\\\">bool</a>,</div></div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = &amp;'a <a class=\\\"primitive\\\" href=\\\"../primitive.slice.html\\\">[T]</a>;</div>\",\"SplitInclusive<'_, T, F>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../slice/struct.SplitInclusive.html\\\" title=\\\"struct std::slice::SplitInclusive\\\">SplitInclusive</a>&lt;'a, T, P&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, T, P&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../slice/struct.SplitInclusive.html\\\" title=\\\"struct std::slice::SplitInclusive\\\">SplitInclusive</a>&lt;'a, T, P&gt;<div class=\\\"where\\\">where\\n    P: <a class=\\\"trait\\\" href=\\\"../ops/trait.FnMut.html\\\" title=\\\"trait std::ops::FnMut\\\">FnMut</a>(<a class=\\\"primitive\\\" href=\\\"../primitive.reference.html\\\">&amp;T</a>) -&gt; <a class=\\\"primitive\\\" href=\\\"../primitive.bool.html\\\">bool</a>,</div></div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = &amp;'a <a class=\\\"primitive\\\" href=\\\"../primitive.slice.html\\\">[T]</a>;</div>\",\"SplitInclusiveMut<'_, T, F>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../slice/struct.SplitInclusiveMut.html\\\" title=\\\"struct std::slice::SplitInclusiveMut\\\">SplitInclusiveMut</a>&lt;'a, T, P&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, T, P&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../slice/struct.SplitInclusiveMut.html\\\" title=\\\"struct std::slice::SplitInclusiveMut\\\">SplitInclusiveMut</a>&lt;'a, T, P&gt;<div class=\\\"where\\\">where\\n    P: <a class=\\\"trait\\\" href=\\\"../ops/trait.FnMut.html\\\" title=\\\"trait std::ops::FnMut\\\">FnMut</a>(<a class=\\\"primitive\\\" href=\\\"../primitive.reference.html\\\">&amp;T</a>) -&gt; <a class=\\\"primitive\\\" href=\\\"../primitive.bool.html\\\">bool</a>,</div></div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = &amp;'a mut <a class=\\\"primitive\\\" href=\\\"../primitive.slice.html\\\">[T]</a>;</div>\",\"SplitMut<'_, T, F>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../slice/struct.SplitMut.html\\\" title=\\\"struct std::slice::SplitMut\\\">SplitMut</a>&lt;'a, T, P&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, T, P&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../slice/struct.SplitMut.html\\\" title=\\\"struct std::slice::SplitMut\\\">SplitMut</a>&lt;'a, T, P&gt;<div class=\\\"where\\\">where\\n    P: <a class=\\\"trait\\\" href=\\\"../ops/trait.FnMut.html\\\" title=\\\"trait std::ops::FnMut\\\">FnMut</a>(<a class=\\\"primitive\\\" href=\\\"../primitive.reference.html\\\">&amp;T</a>) -&gt; <a class=\\\"primitive\\\" href=\\\"../primitive.bool.html\\\">bool</a>,</div></div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = &amp;'a mut <a class=\\\"primitive\\\" href=\\\"../primitive.slice.html\\\">[T]</a>;</div>\",\"SplitN<'_, T, F>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../slice/struct.SplitN.html\\\" title=\\\"struct std::slice::SplitN\\\">SplitN</a>&lt;'a, T, P&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, T, P&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../slice/struct.SplitN.html\\\" title=\\\"struct std::slice::SplitN\\\">SplitN</a>&lt;'a, T, P&gt;<div class=\\\"where\\\">where\\n    P: <a class=\\\"trait\\\" href=\\\"../ops/trait.FnMut.html\\\" title=\\\"trait std::ops::FnMut\\\">FnMut</a>(<a class=\\\"primitive\\\" href=\\\"../primitive.reference.html\\\">&amp;T</a>) -&gt; <a class=\\\"primitive\\\" href=\\\"../primitive.bool.html\\\">bool</a>,</div></div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = &amp;'a <a class=\\\"primitive\\\" href=\\\"../primitive.slice.html\\\">[T]</a>;</div>\",\"SplitNMut<'_, T, F>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../slice/struct.SplitNMut.html\\\" title=\\\"struct std::slice::SplitNMut\\\">SplitNMut</a>&lt;'a, T, P&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, T, P&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../slice/struct.SplitNMut.html\\\" title=\\\"struct std::slice::SplitNMut\\\">SplitNMut</a>&lt;'a, T, P&gt;<div class=\\\"where\\\">where\\n    P: <a class=\\\"trait\\\" href=\\\"../ops/trait.FnMut.html\\\" title=\\\"trait std::ops::FnMut\\\">FnMut</a>(<a class=\\\"primitive\\\" href=\\\"../primitive.reference.html\\\">&amp;T</a>) -&gt; <a class=\\\"primitive\\\" href=\\\"../primitive.bool.html\\\">bool</a>,</div></div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = &amp;'a mut <a class=\\\"primitive\\\" href=\\\"../primitive.slice.html\\\">[T]</a>;</div>\",\"Utf8Chunks<'_>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../str/struct.Utf8Chunks.html\\\" title=\\\"struct std::str::Utf8Chunks\\\">Utf8Chunks</a>&lt;'a&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../str/struct.Utf8Chunks.html\\\" title=\\\"struct std::str::Utf8Chunks\\\">Utf8Chunks</a>&lt;'a&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"struct\\\" href=\\\"../str/struct.Utf8Chunk.html\\\" title=\\\"struct std::str::Utf8Chunk\\\">Utf8Chunk</a>&lt;'a&gt;;</div>\",\"Vec<u8>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"struct.Vec.html\\\" title=\\\"struct std::vec::Vec\\\">Vec</a>&lt;<a class=\\\"primitive\\\" href=\\\"../primitive.u8.html\\\">u8</a>, A&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;A: <a class=\\\"trait\\\" href=\\\"../alloc/trait.Allocator.html\\\" title=\\\"trait std::alloc::Allocator\\\">Allocator</a>&gt; <a class=\\\"trait\\\" href=\\\"../io/trait.Write.html\\\" title=\\\"trait std::io::Write\\\">Write</a> for <a class=\\\"struct\\\" href=\\\"struct.Vec.html\\\" title=\\\"struct std::vec::Vec\\\">Vec</a>&lt;<a class=\\\"primitive\\\" href=\\\"../primitive.u8.html\\\">u8</a>, A&gt;</div>\",\"Windows<'_, T>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"../slice/struct.Windows.html\\\" title=\\\"struct std::slice::Windows\\\">Windows</a>&lt;'a, T&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;'a, T&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"../slice/struct.Windows.html\\\" title=\\\"struct std::slice::Windows\\\">Windows</a>&lt;'a, T&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = &amp;'a <a class=\\\"primitive\\\" href=\\\"../primitive.slice.html\\\">[T]</a>;</div>\"}</script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:09:15.583Z"
}