{
	"title": "UNIX_EPOCH in std::time - Rust",
	"url": "https://doc.rust-lang.org/stable/std/time/constant.UNIX_EPOCH.html",
	"markdown": "# UNIX\\_EPOCH in std::time - Rust\n\n## Constant [std](../index.html)::[time](index.html)::[UNIX\\_EPOCH](#)\n\n1.8.0 · [source](about:blank/src/std/time.rs.html#663) ·\n\n```\npub const UNIX_EPOCH: SystemTime;\n```\n\nExpand description\n\nAn anchor in time which can be used to create new `SystemTime` instances or learn about where in time a `SystemTime` lies.\n\nThis constant is defined to be “1970-01-01 00:00:00 UTC” on all systems with respect to the system clock. Using `duration_since` on an existing [`SystemTime`](struct.SystemTime.html \"struct std::time::SystemTime\") instance can tell how far away from this point in time a measurement lies, and using `UNIX_EPOCH + duration` can be used to create a [`SystemTime`](struct.SystemTime.html \"struct std::time::SystemTime\") instance to represent another fixed point in time.\n\n`duration_since(UNIX_EPOCH).unwrap().as_secs()` returns the number of non-leap seconds since the start of 1970 UTC. This is a POSIX `time_t` (as a `u64`), and is the same time representation as used in many Internet protocols.\n\n## [§](#examples)Examples\n\n```\nuse std::time::{SystemTime, UNIX_EPOCH};\n\nmatch SystemTime::now().duration_since(UNIX_EPOCH) {\n    Ok(n) => println!(\"1970-01-01 00:00:00 UTC was {} seconds ago!\", n.as_secs()),\n    Err(_) => panic!(\"SystemTime before UNIX EPOCH!\"),\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::%7BSystemTime,+UNIX_EPOCH%7D;%0A++++%0A++++match+SystemTime::now().duration_since(UNIX_EPOCH)+%7B%0A++++++++Ok(n)+=%3E+println!(%221970-01-01+00:00:00+UTC+was+%7B%7D+seconds+ago!%22,+n.as_secs()),%0A++++++++Err(_)+=%3E+panic!(%22SystemTime+before+UNIX+EPOCH!%22),%0A++++%7D%0A%7D&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"An anchor in time which can be used to create new `SystemTime` instances or learn about where in time a `SystemTime` lies.\"><title>UNIX_EPOCH in std::time - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc constant\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h2><a href=\"index.html\">In std::time</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Duration.html\">Duration</a></li><li><a href=\"struct.Instant.html\">Instant</a></li><li><a href=\"struct.SystemTime.html\">SystemTime</a></li><li><a href=\"struct.SystemTimeError.html\">SystemTimeError</a></li><li><a href=\"struct.TryFromFloatSecsError.html\">TryFromFloatSecsError</a></li></ul><h3><a href=\"index.html#constants\">Constants</a></h3><ul class=\"block constant\"><li><a href=\"constant.UNIX_EPOCH.html\">UNIX_EPOCH</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Constant <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">time</a>::<wbr><a class=\"constant\" href=\"#\">UNIX_EPOCH</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../src/std/time.rs.html#663\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub const UNIX_EPOCH: <a class=\"struct\" href=\"struct.SystemTime.html\" title=\"struct std::time::SystemTime\">SystemTime</a>;</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>An anchor in time which can be used to create new <code>SystemTime</code> instances or\nlearn about where in time a <code>SystemTime</code> lies.</p>\n<p>This constant is defined to be “1970-01-01 00:00:00 UTC” on all systems with\nrespect to the system clock. Using <code>duration_since</code> on an existing\n<a href=\"struct.SystemTime.html\" title=\"struct std::time::SystemTime\"><code>SystemTime</code></a> instance can tell how far away from this point in time a\nmeasurement lies, and using <code>UNIX_EPOCH + duration</code> can be used to create a\n<a href=\"struct.SystemTime.html\" title=\"struct std::time::SystemTime\"><code>SystemTime</code></a> instance to represent another fixed point in time.</p>\n<p><code>duration_since(UNIX_EPOCH).unwrap().as_secs()</code> returns\nthe number of non-leap seconds since the start of 1970 UTC.\nThis is a POSIX <code>time_t</code> (as a <code>u64</code>),\nand is the same time representation as used in many Internet protocols.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::time::{SystemTime, UNIX_EPOCH};\n\n<span class=\"kw\">match </span>SystemTime::now().duration_since(UNIX_EPOCH) {\n    <span class=\"prelude-val\">Ok</span>(n) =&gt; <span class=\"macro\">println!</span>(<span class=\"string\">\"1970-01-01 00:00:00 UTC was {} seconds ago!\"</span>, n.as_secs()),\n    <span class=\"prelude-val\">Err</span>(<span class=\"kw\">_</span>) =&gt; <span class=\"macro\">panic!</span>(<span class=\"string\">\"SystemTime before UNIX EPOCH!\"</span>),\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::time::%7BSystemTime,+UNIX_EPOCH%7D;%0A++++%0A++++match+SystemTime::now().duration_since(UNIX_EPOCH)+%7B%0A++++++++Ok(n)+=%3E+println!(%221970-01-01+00:00:00+UTC+was+%7B%7D+seconds+ago!%22,+n.as_secs()),%0A++++++++Err(_)+=%3E+panic!(%22SystemTime+before+UNIX+EPOCH!%22),%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:25:49.351Z"
}