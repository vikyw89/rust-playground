{
	"title": "BufRead in std::io - Rust",
	"url": "https://doc.rust-lang.org/stable/std/io/trait.BufRead.html",
	"markdown": "# BufRead in std::io - Rust\n\n## Trait [std](../index.html)::[io](index.html)::[BufRead](#)\n\n1.0.0 ¬∑ [source](about:blank/src/std/io/mod.rs.html#2193-2555) ¬∑\n\n```\npub trait BufRead: Read {\n    // Required methods\n    fn fill_buf(&mut self) -> Result<&[u8]>;\n    fn consume(&mut self, amt: usize);\n\n    // Provided methods\n    fn has_data_left(&mut self) -> Result<bool> { ... }\n    fn read_until(&mut self, byte: u8, buf: &mut Vec<u8>) -> Result<usize> { ... }\n    fn skip_until(&mut self, byte: u8) -> Result<usize> { ... }\n    fn read_line(&mut self, buf: &mut String) -> Result<usize> { ... }\n    fn split(self, byte: u8) -> Split<Self> ‚ìò\n       where Self: Sized { ... }\n    fn lines(self) -> Lines<Self> ‚ìò\n       where Self: Sized { ... }\n}\n```\n\nExpand description\n\nA `BufRead` is a type of `Read`er which has an internal buffer, allowing it to perform extra ways of reading.\n\nFor example, reading line-by-line is inefficient without using a buffer, so if you want to read by line, you‚Äôll need `BufRead`, which includes a [`read_line`](about:blank/trait.BufRead.html#method.read_line \"method std::io::BufRead::read_line\") method as well as a [`lines`](about:blank/trait.BufRead.html#method.lines \"method std::io::BufRead::lines\") iterator.\n\n## [¬ß](#examples)Examples\n\nA locked standard input implements `BufRead`:\n\n```\nuse std::io;\nuse std::io::prelude::*;\n\nlet stdin = io::stdin();\nfor line in stdin.lock().lines() {\n    println!(\"{}\", line.unwrap());\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io;%0A++++use+std::io::prelude::*;%0A++++%0A++++let+stdin+=+io::stdin();%0A++++for+line+in+stdin.lock().lines()+%7B%0A++++++++println!(%22%7B%7D%22,+line.unwrap());%0A++++%7D%0A%7D&edition=2021)\n\nIf you have something that implements [`Read`](trait.Read.html \"trait std::io::Read\"), you can use the [`BufReader` type](struct.BufReader.html \"struct std::io::BufReader\") to turn it into a `BufRead`.\n\nFor example, [`File`](../fs/struct.File.html \"struct std::fs::File\") implements [`Read`](trait.Read.html \"trait std::io::Read\"), but not `BufRead`. [`BufReader`](struct.BufReader.html \"struct std::io::BufReader\") to the rescue!\n\n```\nuse std::io::{self, BufReader};\nuse std::io::prelude::*;\nuse std::fs::File;\n\nfn main() -> io::Result<()> {\n    let f = File::open(\"foo.txt\")?;\n    let f = BufReader::new(f);\n\n    for line in f.lines() {\n        println!(\"{}\", line.unwrap());\n    }\n\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io::%7Bself,+BufReader%7D;%0Ause+std::io::prelude::*;%0Ause+std::fs::File;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+f+=+File::open(%22foo.txt%22)?;%0A++++let+f+=+BufReader::new(f);%0A%0A++++for+line+in+f.lines()+%7B%0A++++++++println!(%22%7B%7D%22,+line.unwrap());%0A++++%7D%0A%0A++++Ok(())%0A%7D&edition=2021)\n\n1.0.0 ¬∑ [source](about:blank/src/std/io/mod.rs.html#2234)\n\nReturns the contents of the internal buffer, filling it with more data from the inner reader if it is empty.\n\nThis function is a lower-level call. It needs to be paired with the [`consume`](about:blank/trait.BufRead.html#tymethod.consume \"method std::io::BufRead::consume\") method to function properly. When calling this method, none of the contents will be ‚Äúread‚Äù in the sense that later calling `read` may return the same contents. As such, [`consume`](about:blank/trait.BufRead.html#tymethod.consume \"method std::io::BufRead::consume\") must be called with the number of bytes that are consumed from this buffer to ensure that the bytes are never returned twice.\n\nAn empty buffer returned indicates that the stream has reached EOF.\n\n##### [¬ß](#errors)Errors\n\nThis function will return an I/O error if the underlying reader was read, but returned an error.\n\n##### [¬ß](#examples-1)Examples\n\nA locked standard input implements `BufRead`:\n\n```\nuse std::io;\nuse std::io::prelude::*;\n\nlet stdin = io::stdin();\nlet mut stdin = stdin.lock();\n\nlet buffer = stdin.fill_buf().unwrap();\n\n// work with buffer\nprintln!(\"{buffer:?}\");\n\n// ensure the bytes we worked with aren't returned again later\nlet length = buffer.len();\nstdin.consume(length);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io;%0A++++use+std::io::prelude::*;%0A++++%0A++++let+stdin+=+io::stdin();%0A++++let+mut+stdin+=+stdin.lock();%0A++++%0A++++let+buffer+=+stdin.fill_buf().unwrap();%0A++++%0A++++//+work+with+buffer%0A++++println!(%22%7Bbuffer:?%7D%22);%0A++++%0A++++//+ensure+the+bytes+we+worked+with+aren%27t+returned+again+later%0A++++let+length+=+buffer.len();%0A++++stdin.consume(length);%0A%7D&edition=2021)\n\n1.0.0 ¬∑ [source](about:blank/src/std/io/mod.rs.html#2256)\n\nTells this buffer that `amt` bytes have been consumed from the buffer, so they should no longer be returned in calls to `read`.\n\nThis function is a lower-level call. It needs to be paired with the [`fill_buf`](about:blank/trait.BufRead.html#tymethod.fill_buf \"method std::io::BufRead::fill_buf\") method to function properly. This function does not perform any I/O, it simply informs this object that some amount of its buffer, returned from [`fill_buf`](about:blank/trait.BufRead.html#tymethod.fill_buf \"method std::io::BufRead::fill_buf\"), has been consumed and should no longer be returned. As such, this function may do odd things if [`fill_buf`](about:blank/trait.BufRead.html#tymethod.fill_buf \"method std::io::BufRead::fill_buf\") isn‚Äôt called before calling it.\n\nThe `amt` must be `<=` the number of bytes in the buffer returned by [`fill_buf`](about:blank/trait.BufRead.html#tymethod.fill_buf \"method std::io::BufRead::fill_buf\").\n\n##### [¬ß](#examples-2)Examples\n\nSince `consume()` is meant to be used with [`fill_buf`](about:blank/trait.BufRead.html#tymethod.fill_buf \"method std::io::BufRead::fill_buf\"), that method‚Äôs example includes an example of `consume()`.\n\n[source](about:blank/src/std/io/mod.rs.html#2285-2287)\n\nüî¨This is a nightly-only experimental API. (`buf_read_has_data_left`¬†[#86423](https://github.com/rust-lang/rust/issues/86423))\n\nCheck if the underlying `Read` has any data left to be read.\n\nThis function may fill the buffer to check for data, so this functions returns `Result<bool>`, not `bool`.\n\nDefault implementation calls `fill_buf` and checks that returned slice is empty (which means that there is no data left, since EOF is reached).\n\nExamples\n\n```\n#![feature(buf_read_has_data_left)]\nuse std::io;\nuse std::io::prelude::*;\n\nlet stdin = io::stdin();\nlet mut stdin = stdin.lock();\n\nwhile stdin.has_data_left().unwrap() {\n    let mut line = String::new();\n    stdin.read_line(&mut line).unwrap();\n    // work with line\n    println!(\"{line:?}\");\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(buf_read_has_data_left)%5D%0Afn+main()+%7B%0A++++use+std::io;%0A++++use+std::io::prelude::*;%0A++++%0A++++let+stdin+=+io::stdin();%0A++++let+mut+stdin+=+stdin.lock();%0A++++%0A++++while+stdin.has_data_left().unwrap()+%7B%0A++++++++let+mut+line+=+String::new();%0A++++++++stdin.read_line(%26mut+line).unwrap();%0A++++++++//+work+with+line%0A++++++++println!(%22%7Bline:?%7D%22);%0A++++%7D%0A%7D&version=nightly&edition=2021)\n\n1.0.0 ¬∑ [source](about:blank/src/std/io/mod.rs.html#2344-2346)\n\nRead all bytes into `buf` until the delimiter `byte` or EOF is reached.\n\nThis function will read bytes from the underlying stream until the delimiter or EOF is found. Once found, all bytes up to, and including, the delimiter (if found) will be appended to `buf`.\n\nIf successful, this function will return the total number of bytes read.\n\nThis function is blocking and should be used carefully: it is possible for an attacker to continuously send bytes without ever sending the delimiter or EOF.\n\n##### [¬ß](#errors-1)Errors\n\nThis function will ignore all instances of [`ErrorKind::Interrupted`](about:blank/enum.ErrorKind.html#variant.Interrupted \"variant std::io::ErrorKind::Interrupted\") and will otherwise return any errors returned by [`fill_buf`](about:blank/trait.BufRead.html#tymethod.fill_buf \"method std::io::BufRead::fill_buf\").\n\nIf an I/O error is encountered then all bytes read so far will be present in `buf` and its length will have been adjusted appropriately.\n\n##### [¬ß](#examples-3)Examples\n\n[`std::io::Cursor`](struct.Cursor.html \"struct std::io::Cursor\") is a type that implements `BufRead`. In this example, we use [`Cursor`](struct.Cursor.html \"struct std::io::Cursor\") to read all the bytes in a byte slice in hyphen delimited segments:\n\n```\nuse std::io::{self, BufRead};\n\nlet mut cursor = io::Cursor::new(b\"lorem-ipsum\");\nlet mut buf = vec![];\n\n// cursor is at 'l'\nlet num_bytes = cursor.read_until(b'-', &mut buf)\n    .expect(\"reading from cursor won't fail\");\nassert_eq!(num_bytes, 6);\nassert_eq!(buf, b\"lorem-\");\nbuf.clear();\n\n// cursor is at 'i'\nlet num_bytes = cursor.read_until(b'-', &mut buf)\n    .expect(\"reading from cursor won't fail\");\nassert_eq!(num_bytes, 5);\nassert_eq!(buf, b\"ipsum\");\nbuf.clear();\n\n// cursor is at EOF\nlet num_bytes = cursor.read_until(b'-', &mut buf)\n    .expect(\"reading from cursor won't fail\");\nassert_eq!(num_bytes, 0);\nassert_eq!(buf, b\"\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io::%7Bself,+BufRead%7D;%0A++++%0A++++let+mut+cursor+=+io::Cursor::new(b%22lorem-ipsum%22);%0A++++let+mut+buf+=+vec!%5B%5D;%0A++++%0A++++//+cursor+is+at+%27l%27%0A++++let+num_bytes+=+cursor.read_until(b%27-%27,+%26mut+buf)%0A++++++++.expect(%22reading+from+cursor+won%27t+fail%22);%0A++++assert_eq!(num_bytes,+6);%0A++++assert_eq!(buf,+b%22lorem-%22);%0A++++buf.clear();%0A++++%0A++++//+cursor+is+at+%27i%27%0A++++let+num_bytes+=+cursor.read_until(b%27-%27,+%26mut+buf)%0A++++++++.expect(%22reading+from+cursor+won%27t+fail%22);%0A++++assert_eq!(num_bytes,+5);%0A++++assert_eq!(buf,+b%22ipsum%22);%0A++++buf.clear();%0A++++%0A++++//+cursor+is+at+EOF%0A++++let+num_bytes+=+cursor.read_until(b%27-%27,+%26mut+buf)%0A++++++++.expect(%22reading+from+cursor+won%27t+fail%22);%0A++++assert_eq!(num_bytes,+0);%0A++++assert_eq!(buf,+b%22%22);%0A%7D&edition=2021)\n\n[source](about:blank/src/std/io/mod.rs.html#2406-2408)\n\nüî¨This is a nightly-only experimental API. (`bufread_skip_until`¬†[#111735](https://github.com/rust-lang/rust/issues/111735))\n\nSkip all bytes until the delimiter `byte` or EOF is reached.\n\nThis function will read (and discard) bytes from the underlying stream until the delimiter or EOF is found.\n\nIf successful, this function will return the total number of bytes read, including the delimiter byte.\n\nThis is useful for efficiently skipping data such as NUL-terminated strings in binary file formats without buffering.\n\nThis function is blocking and should be used carefully: it is possible for an attacker to continuously send bytes without ever sending the delimiter or EOF.\n\n##### [¬ß](#errors-2)Errors\n\nThis function will ignore all instances of [`ErrorKind::Interrupted`](about:blank/enum.ErrorKind.html#variant.Interrupted \"variant std::io::ErrorKind::Interrupted\") and will otherwise return any errors returned by [`fill_buf`](about:blank/trait.BufRead.html#tymethod.fill_buf \"method std::io::BufRead::fill_buf\").\n\nIf an I/O error is encountered then all bytes read so far will be present in `buf` and its length will have been adjusted appropriately.\n\n##### [¬ß](#examples-4)Examples\n\n[`std::io::Cursor`](struct.Cursor.html \"struct std::io::Cursor\") is a type that implements `BufRead`. In this example, we use [`Cursor`](struct.Cursor.html \"struct std::io::Cursor\") to read some NUL-terminated information about Ferris from a binary string, skipping the fun fact:\n\n```\n#![feature(bufread_skip_until)]\n\nuse std::io::{self, BufRead};\n\nlet mut cursor = io::Cursor::new(b\"Ferris\\0Likes long walks on the beach\\0Crustacean\\0\");\n\n// read name\nlet mut name = Vec::new();\nlet num_bytes = cursor.read_until(b'\\0', &mut name)\n    .expect(\"reading from cursor won't fail\");\nassert_eq!(num_bytes, 7);\nassert_eq!(name, b\"Ferris\\0\");\n\n// skip fun fact\nlet num_bytes = cursor.skip_until(b'\\0')\n    .expect(\"reading from cursor won't fail\");\nassert_eq!(num_bytes, 30);\n\n// read animal type\nlet mut animal = Vec::new();\nlet num_bytes = cursor.read_until(b'\\0', &mut animal)\n    .expect(\"reading from cursor won't fail\");\nassert_eq!(num_bytes, 11);\nassert_eq!(animal, b\"Crustacean\\0\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bufread_skip_until)%5D%0A%0Afn+main()+%7B%0A++++use+std::io::%7Bself,+BufRead%7D;%0A++++%0A++++let+mut+cursor+=+io::Cursor::new(b%22Ferris%5C0Likes+long+walks+on+the+beach%5C0Crustacean%5C0%22);%0A++++%0A++++//+read+name%0A++++let+mut+name+=+Vec::new();%0A++++let+num_bytes+=+cursor.read_until(b%27%5C0%27,+%26mut+name)%0A++++++++.expect(%22reading+from+cursor+won%27t+fail%22);%0A++++assert_eq!(num_bytes,+7);%0A++++assert_eq!(name,+b%22Ferris%5C0%22);%0A++++%0A++++//+skip+fun+fact%0A++++let+num_bytes+=+cursor.skip_until(b%27%5C0%27)%0A++++++++.expect(%22reading+from+cursor+won%27t+fail%22);%0A++++assert_eq!(num_bytes,+30);%0A++++%0A++++//+read+animal+type%0A++++let+mut+animal+=+Vec::new();%0A++++let+num_bytes+=+cursor.read_until(b%27%5C0%27,+%26mut+animal)%0A++++++++.expect(%22reading+from+cursor+won%27t+fail%22);%0A++++assert_eq!(num_bytes,+11);%0A++++assert_eq!(animal,+b%22Crustacean%5C0%22);%0A%7D&version=nightly&edition=2021)\n\n1.0.0 ¬∑ [source](about:blank/src/std/io/mod.rs.html#2474-2479)\n\nRead all bytes until a newline (the `0xA` byte) is reached, and append them to the provided `String` buffer.\n\nPrevious content of the buffer will be preserved. To avoid appending to the buffer, you need to [`clear`](about:blank/string/struct.String.html#method.clear \"method std::string::String::clear\") it first.\n\nThis function will read bytes from the underlying stream until the newline delimiter (the `0xA` byte) or EOF is found. Once found, all bytes up to, and including, the delimiter (if found) will be appended to `buf`.\n\nIf successful, this function will return the total number of bytes read.\n\nIf this function returns [`Ok(0)`](about:blank/result/enum.Result.html#variant.Ok \"variant std::result::Result::Ok\"), the stream has reached EOF.\n\nThis function is blocking and should be used carefully: it is possible for an attacker to continuously send bytes without ever sending a newline or EOF. You can use [`take`](about:blank/trait.Read.html#method.take \"method std::io::Read::take\") to limit the maximum number of bytes read.\n\n##### [¬ß](#errors-3)Errors\n\nThis function has the same error semantics as [`read_until`](about:blank/trait.BufRead.html#method.read_until \"method std::io::BufRead::read_until\") and will also return an error if the read bytes are not valid UTF-8. If an I/O error is encountered then `buf` may contain some bytes already read in the event that all data read so far was valid UTF-8.\n\n##### [¬ß](#examples-5)Examples\n\n[`std::io::Cursor`](struct.Cursor.html \"struct std::io::Cursor\") is a type that implements `BufRead`. In this example, we use [`Cursor`](struct.Cursor.html \"struct std::io::Cursor\") to read all the lines in a byte slice:\n\n```\nuse std::io::{self, BufRead};\n\nlet mut cursor = io::Cursor::new(b\"foo\\nbar\");\nlet mut buf = String::new();\n\n// cursor is at 'f'\nlet num_bytes = cursor.read_line(&mut buf)\n    .expect(\"reading from cursor won't fail\");\nassert_eq!(num_bytes, 4);\nassert_eq!(buf, \"foo\\n\");\nbuf.clear();\n\n// cursor is at 'b'\nlet num_bytes = cursor.read_line(&mut buf)\n    .expect(\"reading from cursor won't fail\");\nassert_eq!(num_bytes, 3);\nassert_eq!(buf, \"bar\");\nbuf.clear();\n\n// cursor is at EOF\nlet num_bytes = cursor.read_line(&mut buf)\n    .expect(\"reading from cursor won't fail\");\nassert_eq!(num_bytes, 0);\nassert_eq!(buf, \"\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io::%7Bself,+BufRead%7D;%0A++++%0A++++let+mut+cursor+=+io::Cursor::new(b%22foo%5Cnbar%22);%0A++++let+mut+buf+=+String::new();%0A++++%0A++++//+cursor+is+at+%27f%27%0A++++let+num_bytes+=+cursor.read_line(%26mut+buf)%0A++++++++.expect(%22reading+from+cursor+won%27t+fail%22);%0A++++assert_eq!(num_bytes,+4);%0A++++assert_eq!(buf,+%22foo%5Cn%22);%0A++++buf.clear();%0A++++%0A++++//+cursor+is+at+%27b%27%0A++++let+num_bytes+=+cursor.read_line(%26mut+buf)%0A++++++++.expect(%22reading+from+cursor+won%27t+fail%22);%0A++++assert_eq!(num_bytes,+3);%0A++++assert_eq!(buf,+%22bar%22);%0A++++buf.clear();%0A++++%0A++++//+cursor+is+at+EOF%0A++++let+num_bytes+=+cursor.read_line(%26mut+buf)%0A++++++++.expect(%22reading+from+cursor+won%27t+fail%22);%0A++++assert_eq!(num_bytes,+0);%0A++++assert_eq!(buf,+%22%22);%0A%7D&edition=2021)\n\n1.0.0 ¬∑ [source](about:blank/src/std/io/mod.rs.html#2512-2517)\n\nReturns an iterator over the contents of this reader split on the byte `byte`.\n\nThe iterator returned from this function will return instances of `[io::Result](type.Result.html \"io::Result\")<[Vec](../vec/struct.Vec.html \"struct std::vec::Vec\")<u8>>`. Each vector returned will _not_ have the delimiter byte at the end.\n\nThis function will yield errors whenever [`read_until`](about:blank/trait.BufRead.html#method.read_until \"method std::io::BufRead::read_until\") would have also yielded an error.\n\n##### [¬ß](#examples-6)Examples\n\n[`std::io::Cursor`](struct.Cursor.html \"struct std::io::Cursor\") is a type that implements `BufRead`. In this example, we use [`Cursor`](struct.Cursor.html \"struct std::io::Cursor\") to iterate over all hyphen delimited segments in a byte slice\n\n```\nuse std::io::{self, BufRead};\n\nlet cursor = io::Cursor::new(b\"lorem-ipsum-dolor\");\n\nlet mut split_iter = cursor.split(b'-').map(|l| l.unwrap());\nassert_eq!(split_iter.next(), Some(b\"lorem\".to_vec()));\nassert_eq!(split_iter.next(), Some(b\"ipsum\".to_vec()));\nassert_eq!(split_iter.next(), Some(b\"dolor\".to_vec()));\nassert_eq!(split_iter.next(), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io::%7Bself,+BufRead%7D;%0A++++%0A++++let+cursor+=+io::Cursor::new(b%22lorem-ipsum-dolor%22);%0A++++%0A++++let+mut+split_iter+=+cursor.split(b%27-%27).map(%7Cl%7C+l.unwrap());%0A++++assert_eq!(split_iter.next(),+Some(b%22lorem%22.to_vec()));%0A++++assert_eq!(split_iter.next(),+Some(b%22ipsum%22.to_vec()));%0A++++assert_eq!(split_iter.next(),+Some(b%22dolor%22.to_vec()));%0A++++assert_eq!(split_iter.next(),+None);%0A%7D&edition=2021)\n\n1.0.0 ¬∑ [source](about:blank/src/std/io/mod.rs.html#2549-2554)\n\nReturns an iterator over the lines of this reader.\n\nThe iterator returned from this function will yield instances of `[io::Result](type.Result.html \"io::Result\")<[String](../string/struct.String.html \"struct std::string::String\")>`. Each string returned will _not_ have a newline byte (the `0xA` byte) or `CRLF` (`0xD`, `0xA` bytes) at the end.\n\n##### [¬ß](#examples-7)Examples\n\n[`std::io::Cursor`](struct.Cursor.html \"struct std::io::Cursor\") is a type that implements `BufRead`. In this example, we use [`Cursor`](struct.Cursor.html \"struct std::io::Cursor\") to iterate over all the lines in a byte slice.\n\n```\nuse std::io::{self, BufRead};\n\nlet cursor = io::Cursor::new(b\"lorem\\nipsum\\r\\ndolor\");\n\nlet mut lines_iter = cursor.lines().map(|l| l.unwrap());\nassert_eq!(lines_iter.next(), Some(String::from(\"lorem\")));\nassert_eq!(lines_iter.next(), Some(String::from(\"ipsum\")));\nassert_eq!(lines_iter.next(), Some(String::from(\"dolor\")));\nassert_eq!(lines_iter.next(), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io::%7Bself,+BufRead%7D;%0A++++%0A++++let+cursor+=+io::Cursor::new(b%22lorem%5Cnipsum%5Cr%5Cndolor%22);%0A++++%0A++++let+mut+lines_iter+=+cursor.lines().map(%7Cl%7C+l.unwrap());%0A++++assert_eq!(lines_iter.next(),+Some(String::from(%22lorem%22)));%0A++++assert_eq!(lines_iter.next(),+Some(String::from(%22ipsum%22)));%0A++++assert_eq!(lines_iter.next(),+Some(String::from(%22dolor%22)));%0A++++assert_eq!(lines_iter.next(),+None);%0A%7D&edition=2021)\n\n##### [¬ß](#errors-4)Errors\n\nEach line of the iterator has the same error semantics as [`BufRead::read_line`](about:blank/trait.BufRead.html#method.read_line \"method std::io::BufRead::read_line\").",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A `BufRead` is a type of `Read`er which has an internal buffer, allowing it to perform extra ways of reading.\"><title>BufRead in std::io - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc trait\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">BufRead</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">BufRead</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#required-methods\">Required Methods</a></h3><ul class=\"block\"><li><a href=\"#tymethod.consume\">consume</a></li><li><a href=\"#tymethod.fill_buf\">fill_buf</a></li></ul><h3><a href=\"#provided-methods\">Provided Methods</a></h3><ul class=\"block\"><li><a href=\"#method.has_data_left\">has_data_left</a></li><li><a href=\"#method.lines\">lines</a></li><li><a href=\"#method.read_line\">read_line</a></li><li><a href=\"#method.read_until\">read_until</a></li><li><a href=\"#method.skip_until\">skip_until</a></li><li><a href=\"#method.split\">split</a></li></ul><h3><a href=\"#implementors\">Implementors</a></h3></section><h2><a href=\"index.html\">In std::io</a></h2><h3><a href=\"index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"prelude/index.html\">prelude</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.BorrowedBuf.html\">BorrowedBuf</a></li><li><a href=\"struct.BorrowedCursor.html\">BorrowedCursor</a></li><li><a href=\"struct.BufReader.html\">BufReader</a></li><li><a href=\"struct.BufWriter.html\">BufWriter</a></li><li><a href=\"struct.Bytes.html\">Bytes</a></li><li><a href=\"struct.Chain.html\">Chain</a></li><li><a href=\"struct.Cursor.html\">Cursor</a></li><li><a href=\"struct.Empty.html\">Empty</a></li><li><a href=\"struct.Error.html\">Error</a></li><li><a href=\"struct.IntoInnerError.html\">IntoInnerError</a></li><li><a href=\"struct.IoSlice.html\">IoSlice</a></li><li><a href=\"struct.IoSliceMut.html\">IoSliceMut</a></li><li><a href=\"struct.LineWriter.html\">LineWriter</a></li><li><a href=\"struct.Lines.html\">Lines</a></li><li><a href=\"struct.Repeat.html\">Repeat</a></li><li><a href=\"struct.Sink.html\">Sink</a></li><li><a href=\"struct.Split.html\">Split</a></li><li><a href=\"struct.Stderr.html\">Stderr</a></li><li><a href=\"struct.StderrLock.html\">StderrLock</a></li><li><a href=\"struct.Stdin.html\">Stdin</a></li><li><a href=\"struct.StdinLock.html\">StdinLock</a></li><li><a href=\"struct.Stdout.html\">Stdout</a></li><li><a href=\"struct.StdoutLock.html\">StdoutLock</a></li><li><a href=\"struct.Take.html\">Take</a></li><li><a href=\"struct.WriterPanicked.html\">WriterPanicked</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.ErrorKind.html\">ErrorKind</a></li><li><a href=\"enum.SeekFrom.html\">SeekFrom</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.BufRead.html\">BufRead</a></li><li><a href=\"trait.IsTerminal.html\">IsTerminal</a></li><li><a href=\"trait.Read.html\">Read</a></li><li><a href=\"trait.Seek.html\">Seek</a></li><li><a href=\"trait.Write.html\">Write</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.copy.html\">copy</a></li><li><a href=\"fn.empty.html\">empty</a></li><li><a href=\"fn.read_to_string.html\">read_to_string</a></li><li><a href=\"fn.repeat.html\">repeat</a></li><li><a href=\"fn.sink.html\">sink</a></li><li><a href=\"fn.stderr.html\">stderr</a></li><li><a href=\"fn.stdin.html\">stdin</a></li><li><a href=\"fn.stdout.html\">stdout</a></li></ul><h3><a href=\"index.html#types\">Type Aliases</a></h3><ul class=\"block type\"><li><a href=\"type.RawOsError.html\">RawOsError</a></li><li><a href=\"type.Result.html\">Result</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‚ÄòS‚Äô or ‚Äò/‚Äô to search, ‚Äò?‚Äô for more options‚Ä¶\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Trait <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">io</a>::<wbr><a class=\"trait\" href=\"#\">BufRead</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"../../src/std/io/mod.rs.html#2193-2555\">source</a> ¬∑ <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>‚àí</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub trait BufRead: <a class=\"trait\" href=\"trait.Read.html\" title=\"trait std::io::Read\">Read</a> {\n    // Required methods\n    fn <a href=\"#tymethod.fill_buf\" class=\"fn\">fill_buf</a>(&amp;mut self) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;&amp;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]&gt;;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.consume\" class=\"fn\">consume</a>(&amp;mut self, amt: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>);\n\n    // Provided methods\n    fn <a href=\"#method.has_data_left\" class=\"fn\">has_data_left</a>(&amp;mut self) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>&gt; { ... }\n<span class=\"item-spacer\"></span>    fn <a href=\"#method.read_until\" class=\"fn\">read_until</a>(&amp;mut self, byte: <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, buf: &amp;mut <a class=\"struct\" href=\"../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; { ... }\n<span class=\"item-spacer\"></span>    fn <a href=\"#method.skip_until\" class=\"fn\">skip_until</a>(&amp;mut self, byte: <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; { ... }\n<span class=\"item-spacer\"></span>    fn <a href=\"#method.read_line\" class=\"fn\">read_line</a>(&amp;mut self, buf: &amp;mut <a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a>) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; { ... }\n<span class=\"item-spacer\"></span>    fn <a href=\"#method.split\" class=\"fn\">split</a>(self, byte: <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>) -&gt; <a class=\"struct\" href=\"struct.Split.html\" title=\"struct std::io::Split\">Split</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Split<Self>\">‚ìò</a>\n       <span class=\"where\">where Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a></span> { ... }\n<span class=\"item-spacer\"></span>    fn <a href=\"#method.lines\" class=\"fn\">lines</a>(self) -&gt; <a class=\"struct\" href=\"struct.Lines.html\" title=\"struct std::io::Lines\">Lines</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Lines<Self>\">‚ìò</a>\n       <span class=\"where\">where Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a></span> { ... }\n}</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A <code>BufRead</code> is a type of <code>Read</code>er which has an internal buffer, allowing it\nto perform extra ways of reading.</p>\n<p>For example, reading line-by-line is inefficient without using a buffer, so\nif you want to read by line, you‚Äôll need <code>BufRead</code>, which includes a\n<a href=\"trait.BufRead.html#method.read_line\" title=\"method std::io::BufRead::read_line\"><code>read_line</code></a> method as well as a <a href=\"trait.BufRead.html#method.lines\" title=\"method std::io::BufRead::lines\"><code>lines</code></a> iterator.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">¬ß</a>Examples</h2>\n<p>A locked standard input implements <code>BufRead</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io;\n<span class=\"kw\">use </span>std::io::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>stdin = io::stdin();\n<span class=\"kw\">for </span>line <span class=\"kw\">in </span>stdin.lock().lines() {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, line.unwrap());\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io;%0A++++use+std::io::prelude::*;%0A++++%0A++++let+stdin+=+io::stdin();%0A++++for+line+in+stdin.lock().lines()+%7B%0A++++++++println!(%22%7B%7D%22,+line.unwrap());%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>If you have something that implements <a href=\"trait.Read.html\" title=\"trait std::io::Read\"><code>Read</code></a>, you can use the <a href=\"struct.BufReader.html\" title=\"struct std::io::BufReader\"><code>BufReader</code>\ntype</a> to turn it into a <code>BufRead</code>.</p>\n<p>For example, <a href=\"../fs/struct.File.html\" title=\"struct std::fs::File\"><code>File</code></a> implements <a href=\"trait.Read.html\" title=\"trait std::io::Read\"><code>Read</code></a>, but not <code>BufRead</code>.\n<a href=\"struct.BufReader.html\" title=\"struct std::io::BufReader\"><code>BufReader</code></a> to the rescue!</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::{<span class=\"self\">self</span>, BufReader};\n<span class=\"kw\">use </span>std::io::prelude::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>std::fs::File;\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span>f = File::open(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>f = BufReader::new(f);\n\n    <span class=\"kw\">for </span>line <span class=\"kw\">in </span>f.lines() {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, line.unwrap());\n    }\n\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io::%7Bself,+BufReader%7D;%0Ause+std::io::prelude::*;%0Ause+std::fs::File;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+f+=+File::open(%22foo.txt%22)?;%0A++++let+f+=+BufReader::new(f);%0A%0A++++for+line+in+f.lines()+%7B%0A++++++++println!(%22%7B%7D%22,+line.unwrap());%0A++++%7D%0A%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"required-methods\" class=\"section-header\">Required Methods<a href=\"#required-methods\" class=\"anchor\">¬ß</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.fill_buf\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"../../src/std/io/mod.rs.html#2234\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.fill_buf\" class=\"fn\">fill_buf</a>(&amp;mut self) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;&amp;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the contents of the internal buffer, filling it with more data\nfrom the inner reader if it is empty.</p>\n<p>This function is a lower-level call. It needs to be paired with the\n<a href=\"trait.BufRead.html#tymethod.consume\" title=\"method std::io::BufRead::consume\"><code>consume</code></a> method to function properly. When calling this\nmethod, none of the contents will be ‚Äúread‚Äù in the sense that later\ncalling <code>read</code> may return the same contents. As such, <a href=\"trait.BufRead.html#tymethod.consume\" title=\"method std::io::BufRead::consume\"><code>consume</code></a> must\nbe called with the number of bytes that are consumed from this buffer to\nensure that the bytes are never returned twice.</p>\n<p>An empty buffer returned indicates that the stream has reached EOF.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">¬ß</a>Errors</h5>\n<p>This function will return an I/O error if the underlying reader was\nread, but returned an error.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">¬ß</a>Examples</h5>\n<p>A locked standard input implements <code>BufRead</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io;\n<span class=\"kw\">use </span>std::io::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>stdin = io::stdin();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>stdin = stdin.lock();\n\n<span class=\"kw\">let </span>buffer = stdin.fill_buf().unwrap();\n\n<span class=\"comment\">// work with buffer\n</span><span class=\"macro\">println!</span>(<span class=\"string\">\"{buffer:?}\"</span>);\n\n<span class=\"comment\">// ensure the bytes we worked with aren't returned again later\n</span><span class=\"kw\">let </span>length = buffer.len();\nstdin.consume(length);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io;%0A++++use+std::io::prelude::*;%0A++++%0A++++let+stdin+=+io::stdin();%0A++++let+mut+stdin+=+stdin.lock();%0A++++%0A++++let+buffer+=+stdin.fill_buf().unwrap();%0A++++%0A++++//+work+with+buffer%0A++++println!(%22%7Bbuffer:?%7D%22);%0A++++%0A++++//+ensure+the+bytes+we+worked+with+aren't+returned+again+later%0A++++let+length+=+buffer.len();%0A++++stdin.consume(length);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.consume\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"../../src/std/io/mod.rs.html#2256\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.consume\" class=\"fn\">consume</a>(&amp;mut self, amt: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Tells this buffer that <code>amt</code> bytes have been consumed from the buffer,\nso they should no longer be returned in calls to <code>read</code>.</p>\n<p>This function is a lower-level call. It needs to be paired with the\n<a href=\"trait.BufRead.html#tymethod.fill_buf\" title=\"method std::io::BufRead::fill_buf\"><code>fill_buf</code></a> method to function properly. This function does\nnot perform any I/O, it simply informs this object that some amount of\nits buffer, returned from <a href=\"trait.BufRead.html#tymethod.fill_buf\" title=\"method std::io::BufRead::fill_buf\"><code>fill_buf</code></a>, has been consumed and should\nno longer be returned. As such, this function may do odd things if\n<a href=\"trait.BufRead.html#tymethod.fill_buf\" title=\"method std::io::BufRead::fill_buf\"><code>fill_buf</code></a> isn‚Äôt called before calling it.</p>\n<p>The <code>amt</code> must be <code>&lt;=</code> the number of bytes in the buffer returned by\n<a href=\"trait.BufRead.html#tymethod.fill_buf\" title=\"method std::io::BufRead::fill_buf\"><code>fill_buf</code></a>.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">¬ß</a>Examples</h5>\n<p>Since <code>consume()</code> is meant to be used with <a href=\"trait.BufRead.html#tymethod.fill_buf\" title=\"method std::io::BufRead::fill_buf\"><code>fill_buf</code></a>,\nthat method‚Äôs example includes an example of <code>consume()</code>.</p>\n</div></details></div><h2 id=\"provided-methods\" class=\"section-header\">Provided Methods<a href=\"#provided-methods\" class=\"anchor\">¬ß</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.has_data_left\" class=\"method\"><a class=\"src rightside\" href=\"../../src/std/io/mod.rs.html#2285-2287\">source</a><h4 class=\"code-header\">fn <a href=\"#method.has_data_left\" class=\"fn\">has_data_left</a>(&amp;mut self) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>buf_read_has_data_left</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86423\">#86423</a>)</span></div></span></summary><div class=\"docblock\"><p>Check if the underlying <code>Read</code> has any data left to be read.</p>\n<p>This function may fill the buffer to check for data,\nso this functions returns <code>Result&lt;bool&gt;</code>, not <code>bool</code>.</p>\n<p>Default implementation calls <code>fill_buf</code> and checks that\nreturned slice is empty (which means that there is no data left,\nsince EOF is reached).</p>\n<p>Examples</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(buf_read_has_data_left)]\n</span><span class=\"kw\">use </span>std::io;\n<span class=\"kw\">use </span>std::io::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>stdin = io::stdin();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>stdin = stdin.lock();\n\n<span class=\"kw\">while </span>stdin.has_data_left().unwrap() {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>line = String::new();\n    stdin.read_line(<span class=\"kw-2\">&amp;mut </span>line).unwrap();\n    <span class=\"comment\">// work with line\n    </span><span class=\"macro\">println!</span>(<span class=\"string\">\"{line:?}\"</span>);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(buf_read_has_data_left)%5D%0Afn+main()+%7B%0A++++use+std::io;%0A++++use+std::io::prelude::*;%0A++++%0A++++let+stdin+=+io::stdin();%0A++++let+mut+stdin+=+stdin.lock();%0A++++%0A++++while+stdin.has_data_left().unwrap()+%7B%0A++++++++let+mut+line+=+String::new();%0A++++++++stdin.read_line(%26mut+line).unwrap();%0A++++++++//+work+with+line%0A++++++++println!(%22%7Bline:?%7D%22);%0A++++%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_until\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"../../src/std/io/mod.rs.html#2344-2346\">source</a></span><h4 class=\"code-header\">fn <a href=\"#method.read_until\" class=\"fn\">read_until</a>(&amp;mut self, byte: <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, buf: &amp;mut <a class=\"struct\" href=\"../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Read all bytes into <code>buf</code> until the delimiter <code>byte</code> or EOF is reached.</p>\n<p>This function will read bytes from the underlying stream until the\ndelimiter or EOF is found. Once found, all bytes up to, and including,\nthe delimiter (if found) will be appended to <code>buf</code>.</p>\n<p>If successful, this function will return the total number of bytes read.</p>\n<p>This function is blocking and should be used carefully: it is possible for\nan attacker to continuously send bytes without ever sending the delimiter\nor EOF.</p>\n<h5 id=\"errors-1\"><a class=\"doc-anchor\" href=\"#errors-1\">¬ß</a>Errors</h5>\n<p>This function will ignore all instances of <a href=\"enum.ErrorKind.html#variant.Interrupted\" title=\"variant std::io::ErrorKind::Interrupted\"><code>ErrorKind::Interrupted</code></a> and\nwill otherwise return any errors returned by <a href=\"trait.BufRead.html#tymethod.fill_buf\" title=\"method std::io::BufRead::fill_buf\"><code>fill_buf</code></a>.</p>\n<p>If an I/O error is encountered then all bytes read so far will be\npresent in <code>buf</code> and its length will have been adjusted appropriately.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">¬ß</a>Examples</h5>\n<p><a href=\"struct.Cursor.html\" title=\"struct std::io::Cursor\"><code>std::io::Cursor</code></a> is a type that implements <code>BufRead</code>. In\nthis example, we use <a href=\"struct.Cursor.html\" title=\"struct std::io::Cursor\"><code>Cursor</code></a> to read all the bytes in a byte slice\nin hyphen delimited segments:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::{<span class=\"self\">self</span>, BufRead};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>cursor = io::Cursor::new(<span class=\"string\">b\"lorem-ipsum\"</span>);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buf = <span class=\"macro\">vec!</span>[];\n\n<span class=\"comment\">// cursor is at 'l'\n</span><span class=\"kw\">let </span>num_bytes = cursor.read_until(<span class=\"string\">b'-'</span>, <span class=\"kw-2\">&amp;mut </span>buf)\n    .expect(<span class=\"string\">\"reading from cursor won't fail\"</span>);\n<span class=\"macro\">assert_eq!</span>(num_bytes, <span class=\"number\">6</span>);\n<span class=\"macro\">assert_eq!</span>(buf, <span class=\"string\">b\"lorem-\"</span>);\nbuf.clear();\n\n<span class=\"comment\">// cursor is at 'i'\n</span><span class=\"kw\">let </span>num_bytes = cursor.read_until(<span class=\"string\">b'-'</span>, <span class=\"kw-2\">&amp;mut </span>buf)\n    .expect(<span class=\"string\">\"reading from cursor won't fail\"</span>);\n<span class=\"macro\">assert_eq!</span>(num_bytes, <span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(buf, <span class=\"string\">b\"ipsum\"</span>);\nbuf.clear();\n\n<span class=\"comment\">// cursor is at EOF\n</span><span class=\"kw\">let </span>num_bytes = cursor.read_until(<span class=\"string\">b'-'</span>, <span class=\"kw-2\">&amp;mut </span>buf)\n    .expect(<span class=\"string\">\"reading from cursor won't fail\"</span>);\n<span class=\"macro\">assert_eq!</span>(num_bytes, <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(buf, <span class=\"string\">b\"\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io::%7Bself,+BufRead%7D;%0A++++%0A++++let+mut+cursor+=+io::Cursor::new(b%22lorem-ipsum%22);%0A++++let+mut+buf+=+vec!%5B%5D;%0A++++%0A++++//+cursor+is+at+'l'%0A++++let+num_bytes+=+cursor.read_until(b'-',+%26mut+buf)%0A++++++++.expect(%22reading+from+cursor+won't+fail%22);%0A++++assert_eq!(num_bytes,+6);%0A++++assert_eq!(buf,+b%22lorem-%22);%0A++++buf.clear();%0A++++%0A++++//+cursor+is+at+'i'%0A++++let+num_bytes+=+cursor.read_until(b'-',+%26mut+buf)%0A++++++++.expect(%22reading+from+cursor+won't+fail%22);%0A++++assert_eq!(num_bytes,+5);%0A++++assert_eq!(buf,+b%22ipsum%22);%0A++++buf.clear();%0A++++%0A++++//+cursor+is+at+EOF%0A++++let+num_bytes+=+cursor.read_until(b'-',+%26mut+buf)%0A++++++++.expect(%22reading+from+cursor+won't+fail%22);%0A++++assert_eq!(num_bytes,+0);%0A++++assert_eq!(buf,+b%22%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.skip_until\" class=\"method\"><a class=\"src rightside\" href=\"../../src/std/io/mod.rs.html#2406-2408\">source</a><h4 class=\"code-header\">fn <a href=\"#method.skip_until\" class=\"fn\">skip_until</a>(&amp;mut self, byte: <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>bufread_skip_until</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/111735\">#111735</a>)</span></div></span></summary><div class=\"docblock\"><p>Skip all bytes until the delimiter <code>byte</code> or EOF is reached.</p>\n<p>This function will read (and discard) bytes from the underlying stream until the\ndelimiter or EOF is found.</p>\n<p>If successful, this function will return the total number of bytes read,\nincluding the delimiter byte.</p>\n<p>This is useful for efficiently skipping data such as NUL-terminated strings\nin binary file formats without buffering.</p>\n<p>This function is blocking and should be used carefully: it is possible for\nan attacker to continuously send bytes without ever sending the delimiter\nor EOF.</p>\n<h5 id=\"errors-2\"><a class=\"doc-anchor\" href=\"#errors-2\">¬ß</a>Errors</h5>\n<p>This function will ignore all instances of <a href=\"enum.ErrorKind.html#variant.Interrupted\" title=\"variant std::io::ErrorKind::Interrupted\"><code>ErrorKind::Interrupted</code></a> and\nwill otherwise return any errors returned by <a href=\"trait.BufRead.html#tymethod.fill_buf\" title=\"method std::io::BufRead::fill_buf\"><code>fill_buf</code></a>.</p>\n<p>If an I/O error is encountered then all bytes read so far will be\npresent in <code>buf</code> and its length will have been adjusted appropriately.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">¬ß</a>Examples</h5>\n<p><a href=\"struct.Cursor.html\" title=\"struct std::io::Cursor\"><code>std::io::Cursor</code></a> is a type that implements <code>BufRead</code>. In\nthis example, we use <a href=\"struct.Cursor.html\" title=\"struct std::io::Cursor\"><code>Cursor</code></a> to read some NUL-terminated information\nabout Ferris from a binary string, skipping the fun fact:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bufread_skip_until)]\n\n</span><span class=\"kw\">use </span>std::io::{<span class=\"self\">self</span>, BufRead};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>cursor = io::Cursor::new(<span class=\"string\">b\"Ferris\\0Likes long walks on the beach\\0Crustacean\\0\"</span>);\n\n<span class=\"comment\">// read name\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>name = Vec::new();\n<span class=\"kw\">let </span>num_bytes = cursor.read_until(<span class=\"string\">b'\\0'</span>, <span class=\"kw-2\">&amp;mut </span>name)\n    .expect(<span class=\"string\">\"reading from cursor won't fail\"</span>);\n<span class=\"macro\">assert_eq!</span>(num_bytes, <span class=\"number\">7</span>);\n<span class=\"macro\">assert_eq!</span>(name, <span class=\"string\">b\"Ferris\\0\"</span>);\n\n<span class=\"comment\">// skip fun fact\n</span><span class=\"kw\">let </span>num_bytes = cursor.skip_until(<span class=\"string\">b'\\0'</span>)\n    .expect(<span class=\"string\">\"reading from cursor won't fail\"</span>);\n<span class=\"macro\">assert_eq!</span>(num_bytes, <span class=\"number\">30</span>);\n\n<span class=\"comment\">// read animal type\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>animal = Vec::new();\n<span class=\"kw\">let </span>num_bytes = cursor.read_until(<span class=\"string\">b'\\0'</span>, <span class=\"kw-2\">&amp;mut </span>animal)\n    .expect(<span class=\"string\">\"reading from cursor won't fail\"</span>);\n<span class=\"macro\">assert_eq!</span>(num_bytes, <span class=\"number\">11</span>);\n<span class=\"macro\">assert_eq!</span>(animal, <span class=\"string\">b\"Crustacean\\0\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bufread_skip_until)%5D%0A%0Afn+main()+%7B%0A++++use+std::io::%7Bself,+BufRead%7D;%0A++++%0A++++let+mut+cursor+=+io::Cursor::new(b%22Ferris%5C0Likes+long+walks+on+the+beach%5C0Crustacean%5C0%22);%0A++++%0A++++//+read+name%0A++++let+mut+name+=+Vec::new();%0A++++let+num_bytes+=+cursor.read_until(b'%5C0',+%26mut+name)%0A++++++++.expect(%22reading+from+cursor+won't+fail%22);%0A++++assert_eq!(num_bytes,+7);%0A++++assert_eq!(name,+b%22Ferris%5C0%22);%0A++++%0A++++//+skip+fun+fact%0A++++let+num_bytes+=+cursor.skip_until(b'%5C0')%0A++++++++.expect(%22reading+from+cursor+won't+fail%22);%0A++++assert_eq!(num_bytes,+30);%0A++++%0A++++//+read+animal+type%0A++++let+mut+animal+=+Vec::new();%0A++++let+num_bytes+=+cursor.read_until(b'%5C0',+%26mut+animal)%0A++++++++.expect(%22reading+from+cursor+won't+fail%22);%0A++++assert_eq!(num_bytes,+11);%0A++++assert_eq!(animal,+b%22Crustacean%5C0%22);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_line\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"../../src/std/io/mod.rs.html#2474-2479\">source</a></span><h4 class=\"code-header\">fn <a href=\"#method.read_line\" class=\"fn\">read_line</a>(&amp;mut self, buf: &amp;mut <a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a>) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Read all bytes until a newline (the <code>0xA</code> byte) is reached, and append\nthem to the provided <code>String</code> buffer.</p>\n<p>Previous content of the buffer will be preserved. To avoid appending to\nthe buffer, you need to <a href=\"../string/struct.String.html#method.clear\" title=\"method std::string::String::clear\"><code>clear</code></a> it first.</p>\n<p>This function will read bytes from the underlying stream until the\nnewline delimiter (the <code>0xA</code> byte) or EOF is found. Once found, all bytes\nup to, and including, the delimiter (if found) will be appended to\n<code>buf</code>.</p>\n<p>If successful, this function will return the total number of bytes read.</p>\n<p>If this function returns <a href=\"../result/enum.Result.html#variant.Ok\" title=\"variant std::result::Result::Ok\"><code>Ok(0)</code></a>, the stream has reached EOF.</p>\n<p>This function is blocking and should be used carefully: it is possible for\nan attacker to continuously send bytes without ever sending a newline\nor EOF. You can use <a href=\"trait.Read.html#method.take\" title=\"method std::io::Read::take\"><code>take</code></a> to limit the maximum number of bytes read.</p>\n<h5 id=\"errors-3\"><a class=\"doc-anchor\" href=\"#errors-3\">¬ß</a>Errors</h5>\n<p>This function has the same error semantics as <a href=\"trait.BufRead.html#method.read_until\" title=\"method std::io::BufRead::read_until\"><code>read_until</code></a> and will\nalso return an error if the read bytes are not valid UTF-8. If an I/O\nerror is encountered then <code>buf</code> may contain some bytes already read in\nthe event that all data read so far was valid UTF-8.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">¬ß</a>Examples</h5>\n<p><a href=\"struct.Cursor.html\" title=\"struct std::io::Cursor\"><code>std::io::Cursor</code></a> is a type that implements <code>BufRead</code>. In\nthis example, we use <a href=\"struct.Cursor.html\" title=\"struct std::io::Cursor\"><code>Cursor</code></a> to read all the lines in a byte slice:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::{<span class=\"self\">self</span>, BufRead};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>cursor = io::Cursor::new(<span class=\"string\">b\"foo\\nbar\"</span>);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buf = String::new();\n\n<span class=\"comment\">// cursor is at 'f'\n</span><span class=\"kw\">let </span>num_bytes = cursor.read_line(<span class=\"kw-2\">&amp;mut </span>buf)\n    .expect(<span class=\"string\">\"reading from cursor won't fail\"</span>);\n<span class=\"macro\">assert_eq!</span>(num_bytes, <span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(buf, <span class=\"string\">\"foo\\n\"</span>);\nbuf.clear();\n\n<span class=\"comment\">// cursor is at 'b'\n</span><span class=\"kw\">let </span>num_bytes = cursor.read_line(<span class=\"kw-2\">&amp;mut </span>buf)\n    .expect(<span class=\"string\">\"reading from cursor won't fail\"</span>);\n<span class=\"macro\">assert_eq!</span>(num_bytes, <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(buf, <span class=\"string\">\"bar\"</span>);\nbuf.clear();\n\n<span class=\"comment\">// cursor is at EOF\n</span><span class=\"kw\">let </span>num_bytes = cursor.read_line(<span class=\"kw-2\">&amp;mut </span>buf)\n    .expect(<span class=\"string\">\"reading from cursor won't fail\"</span>);\n<span class=\"macro\">assert_eq!</span>(num_bytes, <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(buf, <span class=\"string\">\"\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io::%7Bself,+BufRead%7D;%0A++++%0A++++let+mut+cursor+=+io::Cursor::new(b%22foo%5Cnbar%22);%0A++++let+mut+buf+=+String::new();%0A++++%0A++++//+cursor+is+at+'f'%0A++++let+num_bytes+=+cursor.read_line(%26mut+buf)%0A++++++++.expect(%22reading+from+cursor+won't+fail%22);%0A++++assert_eq!(num_bytes,+4);%0A++++assert_eq!(buf,+%22foo%5Cn%22);%0A++++buf.clear();%0A++++%0A++++//+cursor+is+at+'b'%0A++++let+num_bytes+=+cursor.read_line(%26mut+buf)%0A++++++++.expect(%22reading+from+cursor+won't+fail%22);%0A++++assert_eq!(num_bytes,+3);%0A++++assert_eq!(buf,+%22bar%22);%0A++++buf.clear();%0A++++%0A++++//+cursor+is+at+EOF%0A++++let+num_bytes+=+cursor.read_line(%26mut+buf)%0A++++++++.expect(%22reading+from+cursor+won't+fail%22);%0A++++assert_eq!(num_bytes,+0);%0A++++assert_eq!(buf,+%22%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.split\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"../../src/std/io/mod.rs.html#2512-2517\">source</a></span><h4 class=\"code-header\">fn <a href=\"#method.split\" class=\"fn\">split</a>(self, byte: <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>) -&gt; <a class=\"struct\" href=\"struct.Split.html\" title=\"struct std::io::Split\">Split</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Split<Self>\">‚ìò</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns an iterator over the contents of this reader split on the byte\n<code>byte</code>.</p>\n<p>The iterator returned from this function will return instances of\n<code><a href=\"type.Result.html\" title=\"io::Result\">io::Result</a>&lt;<a href=\"../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;u8&gt;&gt;</code>. Each vector returned will <em>not</em> have\nthe delimiter byte at the end.</p>\n<p>This function will yield errors whenever <a href=\"trait.BufRead.html#method.read_until\" title=\"method std::io::BufRead::read_until\"><code>read_until</code></a> would have\nalso yielded an error.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">¬ß</a>Examples</h5>\n<p><a href=\"struct.Cursor.html\" title=\"struct std::io::Cursor\"><code>std::io::Cursor</code></a> is a type that implements <code>BufRead</code>. In\nthis example, we use <a href=\"struct.Cursor.html\" title=\"struct std::io::Cursor\"><code>Cursor</code></a> to iterate over all hyphen delimited\nsegments in a byte slice</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::{<span class=\"self\">self</span>, BufRead};\n\n<span class=\"kw\">let </span>cursor = io::Cursor::new(<span class=\"string\">b\"lorem-ipsum-dolor\"</span>);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>split_iter = cursor.split(<span class=\"string\">b'-'</span>).map(|l| l.unwrap());\n<span class=\"macro\">assert_eq!</span>(split_iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">b\"lorem\"</span>.to_vec()));\n<span class=\"macro\">assert_eq!</span>(split_iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">b\"ipsum\"</span>.to_vec()));\n<span class=\"macro\">assert_eq!</span>(split_iter.next(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">b\"dolor\"</span>.to_vec()));\n<span class=\"macro\">assert_eq!</span>(split_iter.next(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io::%7Bself,+BufRead%7D;%0A++++%0A++++let+cursor+=+io::Cursor::new(b%22lorem-ipsum-dolor%22);%0A++++%0A++++let+mut+split_iter+=+cursor.split(b'-').map(%7Cl%7C+l.unwrap());%0A++++assert_eq!(split_iter.next(),+Some(b%22lorem%22.to_vec()));%0A++++assert_eq!(split_iter.next(),+Some(b%22ipsum%22.to_vec()));%0A++++assert_eq!(split_iter.next(),+Some(b%22dolor%22.to_vec()));%0A++++assert_eq!(split_iter.next(),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lines\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"../../src/std/io/mod.rs.html#2549-2554\">source</a></span><h4 class=\"code-header\">fn <a href=\"#method.lines\" class=\"fn\">lines</a>(self) -&gt; <a class=\"struct\" href=\"struct.Lines.html\" title=\"struct std::io::Lines\">Lines</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Lines<Self>\">‚ìò</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns an iterator over the lines of this reader.</p>\n<p>The iterator returned from this function will yield instances of\n<code><a href=\"type.Result.html\" title=\"io::Result\">io::Result</a>&lt;<a href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a>&gt;</code>. Each string returned will <em>not</em> have a newline\nbyte (the <code>0xA</code> byte) or <code>CRLF</code> (<code>0xD</code>, <code>0xA</code> bytes) at the end.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">¬ß</a>Examples</h5>\n<p><a href=\"struct.Cursor.html\" title=\"struct std::io::Cursor\"><code>std::io::Cursor</code></a> is a type that implements <code>BufRead</code>. In\nthis example, we use <a href=\"struct.Cursor.html\" title=\"struct std::io::Cursor\"><code>Cursor</code></a> to iterate over all the lines in a byte\nslice.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::{<span class=\"self\">self</span>, BufRead};\n\n<span class=\"kw\">let </span>cursor = io::Cursor::new(<span class=\"string\">b\"lorem\\nipsum\\r\\ndolor\"</span>);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>lines_iter = cursor.lines().map(|l| l.unwrap());\n<span class=\"macro\">assert_eq!</span>(lines_iter.next(), <span class=\"prelude-val\">Some</span>(String::from(<span class=\"string\">\"lorem\"</span>)));\n<span class=\"macro\">assert_eq!</span>(lines_iter.next(), <span class=\"prelude-val\">Some</span>(String::from(<span class=\"string\">\"ipsum\"</span>)));\n<span class=\"macro\">assert_eq!</span>(lines_iter.next(), <span class=\"prelude-val\">Some</span>(String::from(<span class=\"string\">\"dolor\"</span>)));\n<span class=\"macro\">assert_eq!</span>(lines_iter.next(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io::%7Bself,+BufRead%7D;%0A++++%0A++++let+cursor+=+io::Cursor::new(b%22lorem%5Cnipsum%5Cr%5Cndolor%22);%0A++++%0A++++let+mut+lines_iter+=+cursor.lines().map(%7Cl%7C+l.unwrap());%0A++++assert_eq!(lines_iter.next(),+Some(String::from(%22lorem%22)));%0A++++assert_eq!(lines_iter.next(),+Some(String::from(%22ipsum%22)));%0A++++assert_eq!(lines_iter.next(),+Some(String::from(%22dolor%22)));%0A++++assert_eq!(lines_iter.next(),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n<h5 id=\"errors-4\"><a class=\"doc-anchor\" href=\"#errors-4\">¬ß</a>Errors</h5>\n<p>Each line of the iterator has the same error semantics as <a href=\"trait.BufRead.html#method.read_line\" title=\"method std::io::BufRead::read_line\"><code>BufRead::read_line</code></a>.</p>\n</div></details></div><h2 id=\"implementors\" class=\"section-header\">Implementors<a href=\"#implementors\" class=\"anchor\">¬ß</a></h2><div id=\"implementors-list\"><section id=\"impl-BufRead-for-%26%5Bu8%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"../../src/std/io/impls.rs.html#347-357\">source</a></span><a href=\"#impl-BufRead-for-%26%5Bu8%5D\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.BufRead.html\" title=\"trait std::io::BufRead\">BufRead</a> for &amp;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]</h3></section><section id=\"impl-BufRead-for-Empty\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"../../src/std/io/util.rs.html#72-79\">source</a></span><a href=\"#impl-BufRead-for-Empty\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.BufRead.html\" title=\"trait std::io::BufRead\">BufRead</a> for <a class=\"struct\" href=\"struct.Empty.html\" title=\"struct std::io::Empty\">Empty</a></h3></section><section id=\"impl-BufRead-for-StdinLock%3C'_%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"../../src/std/io/stdio.rs.html#541-557\">source</a></span><a href=\"#impl-BufRead-for-StdinLock%3C'_%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.BufRead.html\" title=\"trait std::io::BufRead\">BufRead</a> for <a class=\"struct\" href=\"struct.StdinLock.html\" title=\"struct std::io::StdinLock\">StdinLock</a>&lt;'_&gt;</h3></section><section id=\"impl-BufRead-for-VecDeque%3Cu8,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.75.0\">1.75.0</span> ¬∑ <a class=\"src\" href=\"../../src/std/io/impls.rs.html#490-504\">source</a></span><a href=\"#impl-BufRead-for-VecDeque%3Cu8,+A%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>&gt; <a class=\"trait\" href=\"trait.BufRead.html\" title=\"trait std::io::BufRead\">BufRead</a> for <a class=\"struct\" href=\"../collections/struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>, A&gt;</h3></section><div class=\"docblock\"><p>BufRead is implemented for <code>VecDeque&lt;u8&gt;</code> by reading bytes from the front of the <code>VecDeque</code>.</p>\n</div><section id=\"impl-BufRead-for-%26mut+B\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"../../src/std/io/impls.rs.html#101-121\">source</a></span><a href=\"#impl-BufRead-for-%26mut+B\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;B: <a class=\"trait\" href=\"trait.BufRead.html\" title=\"trait std::io::BufRead\">BufRead</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"trait.BufRead.html\" title=\"trait std::io::BufRead\">BufRead</a> for <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut B</a></h3></section><section id=\"impl-BufRead-for-Box%3CB%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"../../src/std/io/impls.rs.html#209-229\">source</a></span><a href=\"#impl-BufRead-for-Box%3CB%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;B: <a class=\"trait\" href=\"trait.BufRead.html\" title=\"trait std::io::BufRead\">BufRead</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"trait.BufRead.html\" title=\"trait std::io::BufRead\">BufRead</a> for <a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;B&gt;</h3></section><section id=\"impl-BufRead-for-BufReader%3CR%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"../../src/std/io/buffered/bufreader.rs.html#394-402\">source</a></span><a href=\"#impl-BufRead-for-BufReader%3CR%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;R: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"trait.Read.html\" title=\"trait std::io::Read\">Read</a>&gt; <a class=\"trait\" href=\"trait.BufRead.html\" title=\"trait std::io::BufRead\">BufRead</a> for <a class=\"struct\" href=\"struct.BufReader.html\" title=\"struct std::io::BufReader\">BufReader</a>&lt;R&gt;</h3></section><section id=\"impl-BufRead-for-Cursor%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"../../src/std/io/cursor.rs.html#398-408\">source</a></span><a href=\"#impl-BufRead-for-Cursor%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.BufRead.html\" title=\"trait std::io::BufRead\">BufRead</a> for <a class=\"struct\" href=\"struct.Cursor.html\" title=\"struct std::io::Cursor\">Cursor</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]&gt;,</div></h3></section><section id=\"impl-BufRead-for-Take%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"../../src/std/io/mod.rs.html#2971-2989\">source</a></span><a href=\"#impl-BufRead-for-Take%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"trait.BufRead.html\" title=\"trait std::io::BufRead\">BufRead</a>&gt; <a class=\"trait\" href=\"trait.BufRead.html\" title=\"trait std::io::BufRead\">BufRead</a> for <a class=\"struct\" href=\"struct.Take.html\" title=\"struct std::io::Take\">Take</a>&lt;T&gt;</h3></section><section id=\"impl-BufRead-for-Chain%3CT,+U%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> ¬∑ <a class=\"src\" href=\"../../src/std/io/mod.rs.html#2706-2738\">source</a></span><a href=\"#impl-BufRead-for-Chain%3CT,+U%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"trait.BufRead.html\" title=\"trait std::io::BufRead\">BufRead</a>, U: <a class=\"trait\" href=\"trait.BufRead.html\" title=\"trait std::io::BufRead\">BufRead</a>&gt; <a class=\"trait\" href=\"trait.BufRead.html\" title=\"trait std::io::BufRead\">BufRead</a> for <a class=\"struct\" href=\"struct.Chain.html\" title=\"struct std::io::Chain\">Chain</a>&lt;T, U&gt;</h3></section></div><script src=\"../../trait.impl/std/io/trait.BufRead.js\" data-ignore-extern-crates=\"alloc\" async=\"\"></script><script type=\"text/json\" id=\"notable-traits-data\">{\"Lines<Self>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"struct.Lines.html\\\" title=\\\"struct std::io::Lines\\\">Lines</a>&lt;B&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;B: <a class=\\\"trait\\\" href=\\\"trait.BufRead.html\\\" title=\\\"trait std::io::BufRead\\\">BufRead</a>&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"struct.Lines.html\\\" title=\\\"struct std::io::Lines\\\">Lines</a>&lt;B&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"type\\\" href=\\\"type.Result.html\\\" title=\\\"type std::io::Result\\\">Result</a>&lt;<a class=\\\"struct\\\" href=\\\"../string/struct.String.html\\\" title=\\\"struct std::string::String\\\">String</a>&gt;;</div>\",\"Split<Self>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"struct.Split.html\\\" title=\\\"struct std::io::Split\\\">Split</a>&lt;B&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;B: <a class=\\\"trait\\\" href=\\\"trait.BufRead.html\\\" title=\\\"trait std::io::BufRead\\\">BufRead</a>&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"struct.Split.html\\\" title=\\\"struct std::io::Split\\\">Split</a>&lt;B&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"type\\\" href=\\\"type.Result.html\\\" title=\\\"type std::io::Result\\\">Result</a>&lt;<a class=\\\"struct\\\" href=\\\"../vec/struct.Vec.html\\\" title=\\\"struct std::vec::Vec\\\">Vec</a>&lt;<a class=\\\"primitive\\\" href=\\\"../primitive.u8.html\\\">u8</a>&gt;&gt;;</div>\"}</script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:11:31.622Z"
}