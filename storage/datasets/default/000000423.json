{
	"title": "Seek in std::io - Rust",
	"url": "https://doc.rust-lang.org/stable/std/io/trait.Seek.html",
	"markdown": "# Seek in std::io - Rust\n\n## Trait [std](../index.html)::[io](index.html)::[Seek](#)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1910-2066) ·\n\n```\npub trait Seek {\n    // Required method\n    fn seek(&mut self, pos: SeekFrom) -> Result<u64>;\n\n    // Provided methods\n    fn rewind(&mut self) -> Result<()> { ... }\n    fn stream_len(&mut self) -> Result<u64> { ... }\n    fn stream_position(&mut self) -> Result<u64> { ... }\n    fn seek_relative(&mut self, offset: i64) -> Result<()> { ... }\n}\n```\n\nExpand description\n\nThe `Seek` trait provides a cursor which can be moved within a stream of bytes.\n\nThe stream typically has a fixed size, allowing seeking relative to either end or the current offset.\n\n## [§](#examples)Examples\n\n[`File`](../fs/struct.File.html \"struct std::fs::File\")s implement `Seek`:\n\n```\nuse std::io;\nuse std::io::prelude::*;\nuse std::fs::File;\nuse std::io::SeekFrom;\n\nfn main() -> io::Result<()> {\n    let mut f = File::open(\"foo.txt\")?;\n\n    // move the cursor 42 bytes from the start of the file\n    f.seek(SeekFrom::Start(42))?;\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io;%0Ause+std::io::prelude::*;%0Ause+std::fs::File;%0Ause+std::io::SeekFrom;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+mut+f+=+File::open(%22foo.txt%22)?;%0A%0A++++//+move+the+cursor+42+bytes+from+the+start+of+the+file%0A++++f.seek(SeekFrom::Start(42))?;%0A++++Ok(())%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1926)\n\nSeek to an offset, in bytes, in a stream.\n\nA seek beyond the end of a stream is allowed, but behavior is defined by the implementation.\n\nIf the seek operation completed successfully, this method returns the new position from the start of the stream. That position can be used later with [`SeekFrom::Start`](about:blank/enum.SeekFrom.html#variant.Start \"variant std::io::SeekFrom::Start\").\n\n##### [§](#errors)Errors\n\nSeeking can fail, for example because it might involve flushing a buffer.\n\nSeeking to a negative offset is considered an error.\n\n1.55.0 · [source](about:blank/src/std/io/mod.rs.html#1957-1960)\n\nRewind to the beginning of a stream.\n\nThis is a convenience method, equivalent to `seek(SeekFrom::Start(0))`.\n\n##### [§](#errors-1)Errors\n\nRewinding can fail, for example because it might involve flushing a buffer.\n\n##### [§](#example)Example\n\n```\nuse std::io::{Read, Seek, Write};\nuse std::fs::OpenOptions;\n\nlet mut f = OpenOptions::new()\n    .write(true)\n    .read(true)\n    .create(true)\n    .open(\"foo.txt\").unwrap();\n\nlet hello = \"Hello!\\n\";\nwrite!(f, \"{hello}\").unwrap();\nf.rewind().unwrap();\n\nlet mut buf = String::new();\nf.read_to_string(&mut buf).unwrap();\nassert_eq!(&buf, hello);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io::%7BRead,+Seek,+Write%7D;%0A++++use+std::fs::OpenOptions;%0A++++%0A++++let+mut+f+=+OpenOptions::new()%0A++++++++.write(true)%0A++++++++.read(true)%0A++++++++.create(true)%0A++++++++.open(%22foo.txt%22).unwrap();%0A++++%0A++++let+hello+=+%22Hello!%5Cn%22;%0A++++write!(f,+%22%7Bhello%7D%22).unwrap();%0A++++f.rewind().unwrap();%0A++++%0A++++let+mut+buf+=+String::new();%0A++++f.read_to_string(%26mut+buf).unwrap();%0A++++assert_eq!(%26buf,+hello);%0A%7D&edition=2021)\n\n[source](about:blank/src/std/io/mod.rs.html#1997-2008)\n\n🔬This is a nightly-only experimental API. (`seek_stream_len` [#59359](https://github.com/rust-lang/rust/issues/59359))\n\nReturns the length of this stream (in bytes).\n\nThis method is implemented using up to three seek operations. If this method returns successfully, the seek position is unchanged (i.e. the position before calling this method is the same as afterwards). However, if this method returns an error, the seek position is unspecified.\n\nIf you need to obtain the length of _many_ streams and you don’t care about the seek position afterwards, you can reduce the number of seek operations by simply calling `seek(SeekFrom::End(0))` and using its return value (it is also the stream length).\n\nNote that length of a stream can change over time (for example, when data is appended to a file). So calling this method multiple times does not necessarily return the same length each time.\n\n##### [§](#example-1)Example\n\n```\n#![feature(seek_stream_len)]\nuse std::{\n    io::{self, Seek},\n    fs::File,\n};\n\nfn main() -> io::Result<()> {\n    let mut f = File::open(\"foo.txt\")?;\n\n    let len = f.stream_len()?;\n    println!(\"The file is currently {len} bytes long\");\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(seek_stream_len)%5D%0Ause+std::%7B%0A++++io::%7Bself,+Seek%7D,%0A++++fs::File,%0A%7D;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+mut+f+=+File::open(%22foo.txt%22)?;%0A%0A++++let+len+=+f.stream_len()?;%0A++++println!(%22The+file+is+currently+%7Blen%7D+bytes+long%22);%0A++++Ok(())%0A%7D&version=nightly&edition=2021)\n\n1.51.0 · [source](about:blank/src/std/io/mod.rs.html#2034-2036)\n\nReturns the current seek position from the start of the stream.\n\nThis is equivalent to `self.seek(SeekFrom::Current(0))`.\n\n##### [§](#example-2)Example\n\n```\nuse std::{\n    io::{self, BufRead, BufReader, Seek},\n    fs::File,\n};\n\nfn main() -> io::Result<()> {\n    let mut f = BufReader::new(File::open(\"foo.txt\")?);\n\n    let before = f.stream_position()?;\n    f.read_line(&mut String::new())?;\n    let after = f.stream_position()?;\n\n    println!(\"The first line was {} bytes long\", after - before);\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::%7B%0A++++io::%7Bself,+BufRead,+BufReader,+Seek%7D,%0A++++fs::File,%0A%7D;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+mut+f+=+BufReader::new(File::open(%22foo.txt%22)?);%0A%0A++++let+before+=+f.stream_position()?;%0A++++f.read_line(%26mut+String::new())?;%0A++++let+after+=+f.stream_position()?;%0A%0A++++println!(%22The+first+line+was+%7B%7D+bytes+long%22,+after+-+before);%0A++++Ok(())%0A%7D&edition=2021)\n\n1.80.0 · [source](about:blank/src/std/io/mod.rs.html#2062-2065)\n\nSeeks relative to the current position.\n\nThis is equivalent to `self.seek(SeekFrom::Current(offset))` but doesn’t return the new position which can allow some implementations such as [`BufReader`](struct.BufReader.html \"struct std::io::BufReader\") to perform more efficient seeks.\n\n##### [§](#example-3)Example\n\n```\nuse std::{\n    io::{self, Seek},\n    fs::File,\n};\n\nfn main() -> io::Result<()> {\n    let mut f = File::open(\"foo.txt\")?;\n    f.seek_relative(10)?;\n    assert_eq!(f.stream_position()?, 10);\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::%7B%0A++++io::%7Bself,+Seek%7D,%0A++++fs::File,%0A%7D;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+mut+f+=+File::open(%22foo.txt%22)?;%0A++++f.seek_relative(10)?;%0A++++assert_eq!(f.stream_position()?,+10);%0A++++Ok(())%0A%7D&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"The `Seek` trait provides a cursor which can be moved within a stream of bytes.\"><title>Seek in std::io - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc trait\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Seek</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Seek</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#required-methods\">Required Methods</a></h3><ul class=\"block\"><li><a href=\"#tymethod.seek\">seek</a></li></ul><h3><a href=\"#provided-methods\">Provided Methods</a></h3><ul class=\"block\"><li><a href=\"#method.rewind\">rewind</a></li><li><a href=\"#method.seek_relative\">seek_relative</a></li><li><a href=\"#method.stream_len\">stream_len</a></li><li><a href=\"#method.stream_position\">stream_position</a></li></ul><h3><a href=\"#implementors\">Implementors</a></h3></section><h2><a href=\"index.html\">In std::io</a></h2><h3><a href=\"index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"prelude/index.html\">prelude</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.BorrowedBuf.html\">BorrowedBuf</a></li><li><a href=\"struct.BorrowedCursor.html\">BorrowedCursor</a></li><li><a href=\"struct.BufReader.html\">BufReader</a></li><li><a href=\"struct.BufWriter.html\">BufWriter</a></li><li><a href=\"struct.Bytes.html\">Bytes</a></li><li><a href=\"struct.Chain.html\">Chain</a></li><li><a href=\"struct.Cursor.html\">Cursor</a></li><li><a href=\"struct.Empty.html\">Empty</a></li><li><a href=\"struct.Error.html\">Error</a></li><li><a href=\"struct.IntoInnerError.html\">IntoInnerError</a></li><li><a href=\"struct.IoSlice.html\">IoSlice</a></li><li><a href=\"struct.IoSliceMut.html\">IoSliceMut</a></li><li><a href=\"struct.LineWriter.html\">LineWriter</a></li><li><a href=\"struct.Lines.html\">Lines</a></li><li><a href=\"struct.Repeat.html\">Repeat</a></li><li><a href=\"struct.Sink.html\">Sink</a></li><li><a href=\"struct.Split.html\">Split</a></li><li><a href=\"struct.Stderr.html\">Stderr</a></li><li><a href=\"struct.StderrLock.html\">StderrLock</a></li><li><a href=\"struct.Stdin.html\">Stdin</a></li><li><a href=\"struct.StdinLock.html\">StdinLock</a></li><li><a href=\"struct.Stdout.html\">Stdout</a></li><li><a href=\"struct.StdoutLock.html\">StdoutLock</a></li><li><a href=\"struct.Take.html\">Take</a></li><li><a href=\"struct.WriterPanicked.html\">WriterPanicked</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.ErrorKind.html\">ErrorKind</a></li><li><a href=\"enum.SeekFrom.html\">SeekFrom</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.BufRead.html\">BufRead</a></li><li><a href=\"trait.IsTerminal.html\">IsTerminal</a></li><li><a href=\"trait.Read.html\">Read</a></li><li><a href=\"trait.Seek.html\">Seek</a></li><li><a href=\"trait.Write.html\">Write</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.copy.html\">copy</a></li><li><a href=\"fn.empty.html\">empty</a></li><li><a href=\"fn.read_to_string.html\">read_to_string</a></li><li><a href=\"fn.repeat.html\">repeat</a></li><li><a href=\"fn.sink.html\">sink</a></li><li><a href=\"fn.stderr.html\">stderr</a></li><li><a href=\"fn.stdin.html\">stdin</a></li><li><a href=\"fn.stdout.html\">stdout</a></li></ul><h3><a href=\"index.html#types\">Type Aliases</a></h3><ul class=\"block type\"><li><a href=\"type.RawOsError.html\">RawOsError</a></li><li><a href=\"type.Result.html\">Result</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Trait <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">io</a>::<wbr><a class=\"trait\" href=\"#\">Seek</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1910-2066\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub trait Seek {\n    // Required method\n    fn <a href=\"#tymethod.seek\" class=\"fn\">seek</a>(&amp;mut self, pos: <a class=\"enum\" href=\"enum.SeekFrom.html\" title=\"enum std::io::SeekFrom\">SeekFrom</a>) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;;\n\n    // Provided methods\n    fn <a href=\"#method.rewind\" class=\"fn\">rewind</a>(&amp;mut self) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt; { ... }\n<span class=\"item-spacer\"></span>    fn <a href=\"#method.stream_len\" class=\"fn\">stream_len</a>(&amp;mut self) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt; { ... }\n<span class=\"item-spacer\"></span>    fn <a href=\"#method.stream_position\" class=\"fn\">stream_position</a>(&amp;mut self) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt; { ... }\n<span class=\"item-spacer\"></span>    fn <a href=\"#method.seek_relative\" class=\"fn\">seek_relative</a>(&amp;mut self, offset: <a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt; { ... }\n}</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>The <code>Seek</code> trait provides a cursor which can be moved within a stream of\nbytes.</p>\n<p>The stream typically has a fixed size, allowing seeking relative to either\nend or the current offset.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<p><a href=\"../fs/struct.File.html\" title=\"struct std::fs::File\"><code>File</code></a>s implement <code>Seek</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io;\n<span class=\"kw\">use </span>std::io::prelude::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>std::fs::File;\n<span class=\"kw\">use </span>std::io::SeekFrom;\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = File::open(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>;\n\n    <span class=\"comment\">// move the cursor 42 bytes from the start of the file\n    </span>f.seek(SeekFrom::Start(<span class=\"number\">42</span>))<span class=\"question-mark\">?</span>;\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io;%0Ause+std::io::prelude::*;%0Ause+std::fs::File;%0Ause+std::io::SeekFrom;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+mut+f+=+File::open(%22foo.txt%22)?;%0A%0A++++//+move+the+cursor+42+bytes+from+the+start+of+the+file%0A++++f.seek(SeekFrom::Start(42))?;%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"required-methods\" class=\"section-header\">Required Methods<a href=\"#required-methods\" class=\"anchor\">§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.seek\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1926\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.seek\" class=\"fn\">seek</a>(&amp;mut self, pos: <a class=\"enum\" href=\"enum.SeekFrom.html\" title=\"enum std::io::SeekFrom\">SeekFrom</a>) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Seek to an offset, in bytes, in a stream.</p>\n<p>A seek beyond the end of a stream is allowed, but behavior is defined\nby the implementation.</p>\n<p>If the seek operation completed successfully,\nthis method returns the new position from the start of the stream.\nThat position can be used later with <a href=\"enum.SeekFrom.html#variant.Start\" title=\"variant std::io::SeekFrom::Start\"><code>SeekFrom::Start</code></a>.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>Seeking can fail, for example because it might involve flushing a buffer.</p>\n<p>Seeking to a negative offset is considered an error.</p>\n</div></details></div><h2 id=\"provided-methods\" class=\"section-header\">Provided Methods<a href=\"#provided-methods\" class=\"anchor\">§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.rewind\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.55.0\">1.55.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1957-1960\">source</a></span><h4 class=\"code-header\">fn <a href=\"#method.rewind\" class=\"fn\">rewind</a>(&amp;mut self) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Rewind to the beginning of a stream.</p>\n<p>This is a convenience method, equivalent to <code>seek(SeekFrom::Start(0))</code>.</p>\n<h5 id=\"errors-1\"><a class=\"doc-anchor\" href=\"#errors-1\">§</a>Errors</h5>\n<p>Rewinding can fail, for example because it might involve flushing a buffer.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::{Read, Seek, Write};\n<span class=\"kw\">use </span>std::fs::OpenOptions;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = OpenOptions::new()\n    .write(<span class=\"bool-val\">true</span>)\n    .read(<span class=\"bool-val\">true</span>)\n    .create(<span class=\"bool-val\">true</span>)\n    .open(<span class=\"string\">\"foo.txt\"</span>).unwrap();\n\n<span class=\"kw\">let </span>hello = <span class=\"string\">\"Hello!\\n\"</span>;\n<span class=\"macro\">write!</span>(f, <span class=\"string\">\"{hello}\"</span>).unwrap();\nf.rewind().unwrap();\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buf = String::new();\nf.read_to_string(<span class=\"kw-2\">&amp;mut </span>buf).unwrap();\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;</span>buf, hello);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io::%7BRead,+Seek,+Write%7D;%0A++++use+std::fs::OpenOptions;%0A++++%0A++++let+mut+f+=+OpenOptions::new()%0A++++++++.write(true)%0A++++++++.read(true)%0A++++++++.create(true)%0A++++++++.open(%22foo.txt%22).unwrap();%0A++++%0A++++let+hello+=+%22Hello!%5Cn%22;%0A++++write!(f,+%22%7Bhello%7D%22).unwrap();%0A++++f.rewind().unwrap();%0A++++%0A++++let+mut+buf+=+String::new();%0A++++f.read_to_string(%26mut+buf).unwrap();%0A++++assert_eq!(%26buf,+hello);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.stream_len\" class=\"method\"><a class=\"src rightside\" href=\"../../src/std/io/mod.rs.html#1997-2008\">source</a><h4 class=\"code-header\">fn <a href=\"#method.stream_len\" class=\"fn\">stream_len</a>(&amp;mut self) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>seek_stream_len</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/59359\">#59359</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the length of this stream (in bytes).</p>\n<p>This method is implemented using up to three seek operations. If this\nmethod returns successfully, the seek position is unchanged (i.e. the\nposition before calling this method is the same as afterwards).\nHowever, if this method returns an error, the seek position is\nunspecified.</p>\n<p>If you need to obtain the length of <em>many</em> streams and you don’t care\nabout the seek position afterwards, you can reduce the number of seek\noperations by simply calling <code>seek(SeekFrom::End(0))</code> and using its\nreturn value (it is also the stream length).</p>\n<p>Note that length of a stream can change over time (for example, when\ndata is appended to a file). So calling this method multiple times does\nnot necessarily return the same length each time.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(seek_stream_len)]\n</span><span class=\"kw\">use </span>std::{\n    io::{<span class=\"self\">self</span>, Seek},\n    fs::File,\n};\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = File::open(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>;\n\n    <span class=\"kw\">let </span>len = f.stream_len()<span class=\"question-mark\">?</span>;\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"The file is currently {len} bytes long\"</span>);\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(seek_stream_len)%5D%0Ause+std::%7B%0A++++io::%7Bself,+Seek%7D,%0A++++fs::File,%0A%7D;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+mut+f+=+File::open(%22foo.txt%22)?;%0A%0A++++let+len+=+f.stream_len()?;%0A++++println!(%22The+file+is+currently+%7Blen%7D+bytes+long%22);%0A++++Ok(())%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.stream_position\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#2034-2036\">source</a></span><h4 class=\"code-header\">fn <a href=\"#method.stream_position\" class=\"fn\">stream_position</a>(&amp;mut self) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the current seek position from the start of the stream.</p>\n<p>This is equivalent to <code>self.seek(SeekFrom::Current(0))</code>.</p>\n<h5 id=\"example-2\"><a class=\"doc-anchor\" href=\"#example-2\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::{\n    io::{<span class=\"self\">self</span>, BufRead, BufReader, Seek},\n    fs::File,\n};\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = BufReader::new(File::open(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>);\n\n    <span class=\"kw\">let </span>before = f.stream_position()<span class=\"question-mark\">?</span>;\n    f.read_line(<span class=\"kw-2\">&amp;mut </span>String::new())<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>after = f.stream_position()<span class=\"question-mark\">?</span>;\n\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"The first line was {} bytes long\"</span>, after - before);\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::%7B%0A++++io::%7Bself,+BufRead,+BufReader,+Seek%7D,%0A++++fs::File,%0A%7D;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+mut+f+=+BufReader::new(File::open(%22foo.txt%22)?);%0A%0A++++let+before+=+f.stream_position()?;%0A++++f.read_line(%26mut+String::new())?;%0A++++let+after+=+f.stream_position()?;%0A%0A++++println!(%22The+first+line+was+%7B%7D+bytes+long%22,+after+-+before);%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.seek_relative\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0\">1.80.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#2062-2065\">source</a></span><h4 class=\"code-header\">fn <a href=\"#method.seek_relative\" class=\"fn\">seek_relative</a>(&amp;mut self, offset: <a class=\"primitive\" href=\"../primitive.i64.html\">i64</a>) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Seeks relative to the current position.</p>\n<p>This is equivalent to <code>self.seek(SeekFrom::Current(offset))</code> but\ndoesn’t return the new position which can allow some implementations\nsuch as <a href=\"struct.BufReader.html\" title=\"struct std::io::BufReader\"><code>BufReader</code></a> to perform more efficient seeks.</p>\n<h5 id=\"example-3\"><a class=\"doc-anchor\" href=\"#example-3\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::{\n    io::{<span class=\"self\">self</span>, Seek},\n    fs::File,\n};\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = File::open(<span class=\"string\">\"foo.txt\"</span>)<span class=\"question-mark\">?</span>;\n    f.seek_relative(<span class=\"number\">10</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"macro\">assert_eq!</span>(f.stream_position()<span class=\"question-mark\">?</span>, <span class=\"number\">10</span>);\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::%7B%0A++++io::%7Bself,+Seek%7D,%0A++++fs::File,%0A%7D;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+mut+f+=+File::open(%22foo.txt%22)?;%0A++++f.seek_relative(10)?;%0A++++assert_eq!(f.stream_position()?,+10);%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div><h2 id=\"implementors\" class=\"section-header\">Implementors<a href=\"#implementors\" class=\"anchor\">§</a></h2><div id=\"implementors-list\"><section id=\"impl-Seek-for-%26File\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/fs.rs.html#901-905\">source</a></span><a href=\"#impl-Seek-for-%26File\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Seek.html\" title=\"trait std::io::Seek\">Seek</a> for &amp;<a class=\"struct\" href=\"../fs/struct.File.html\" title=\"struct std::fs::File\">File</a></h3></section><section id=\"impl-Seek-for-File\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/fs.rs.html#947-951\">source</a></span><a href=\"#impl-Seek-for-File\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Seek.html\" title=\"trait std::io::Seek\">Seek</a> for <a class=\"struct\" href=\"../fs/struct.File.html\" title=\"struct std::fs::File\">File</a></h3></section><section id=\"impl-Seek-for-Arc%3CFile%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.73.0\">1.73.0</span> · <a class=\"src\" href=\"../../src/std/fs.rs.html#993-997\">source</a></span><a href=\"#impl-Seek-for-Arc%3CFile%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Seek.html\" title=\"trait std::io::Seek\">Seek</a> for <a class=\"struct\" href=\"../sync/struct.Arc.html\" title=\"struct std::sync::Arc\">Arc</a>&lt;<a class=\"struct\" href=\"../fs/struct.File.html\" title=\"struct std::fs::File\">File</a>&gt;</h3></section><section id=\"impl-Seek-for-Empty\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> · <a class=\"src\" href=\"../../src/std/io/util.rs.html#82-94\">source</a></span><a href=\"#impl-Seek-for-Empty\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Seek.html\" title=\"trait std::io::Seek\">Seek</a> for <a class=\"struct\" href=\"struct.Empty.html\" title=\"struct std::io::Empty\">Empty</a></h3></section><section id=\"impl-Seek-for-BufReader%3CR%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/buffered/bufreader.rs.html#421-522\">source</a></span><a href=\"#impl-Seek-for-BufReader%3CR%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;R: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"trait.Seek.html\" title=\"trait std::io::Seek\">Seek</a>&gt; <a class=\"trait\" href=\"trait.Seek.html\" title=\"trait std::io::Seek\">Seek</a> for <a class=\"struct\" href=\"struct.BufReader.html\" title=\"struct std::io::BufReader\">BufReader</a>&lt;R&gt;</h3></section><section id=\"impl-Seek-for-%26mut+S\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/impls.rs.html#89-99\">source</a></span><a href=\"#impl-Seek-for-%26mut+S\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S: <a class=\"trait\" href=\"trait.Seek.html\" title=\"trait std::io::Seek\">Seek</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"trait.Seek.html\" title=\"trait std::io::Seek\">Seek</a> for <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut S</a></h3></section><section id=\"impl-Seek-for-Box%3CS%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/impls.rs.html#197-207\">source</a></span><a href=\"#impl-Seek-for-Box%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S: <a class=\"trait\" href=\"trait.Seek.html\" title=\"trait std::io::Seek\">Seek</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"trait.Seek.html\" title=\"trait std::io::Seek\">Seek</a> for <a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;S&gt;</h3></section><section id=\"impl-Seek-for-Cursor%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/cursor.rs.html#283-315\">source</a></span><a href=\"#impl-Seek-for-Cursor%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.Seek.html\" title=\"trait std::io::Seek\">Seek</a> for <a class=\"struct\" href=\"struct.Cursor.html\" title=\"struct std::io::Cursor\">Cursor</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]&gt;,</div></h3></section><section id=\"impl-Seek-for-BufWriter%3CW%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/buffered/bufwriter.rs.html#660-668\">source</a></span><a href=\"#impl-Seek-for-BufWriter%3CW%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;W: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"trait.Write.html\" title=\"trait std::io::Write\">Write</a> + <a class=\"trait\" href=\"trait.Seek.html\" title=\"trait std::io::Seek\">Seek</a>&gt; <a class=\"trait\" href=\"trait.Seek.html\" title=\"trait std::io::Seek\">Seek</a> for <a class=\"struct\" href=\"struct.BufWriter.html\" title=\"struct std::io::BufWriter\">BufWriter</a>&lt;W&gt;</h3></section></div><script src=\"../../trait.impl/std/io/trait.Seek.js\" data-ignore-extern-crates=\"alloc\" async=\"\"></script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:11:32.215Z"
}