{
	"title": "LocalWaker in std::task - Rust",
	"url": "https://doc.rust-lang.org/stable/std/task/struct.LocalWaker.html",
	"markdown": "# LocalWaker in std::task - Rust\n\n```\npub struct LocalWaker { /* private fields */ }\n```\n\nðŸ”¬This is a nightly-only experimental API. (`local_waker`Â [#118959](https://github.com/rust-lang/rust/issues/118959))\n\nExpand description\n\nA `LocalWaker` is analogous to a [`Waker`](struct.Waker.html \"struct std::task::Waker\"), but it does not implement [`Send`](../marker/trait.Send.html \"trait std::marker::Send\") or [`Sync`](../marker/trait.Sync.html \"trait std::marker::Sync\").\n\nThis handle encapsulates a [`RawWaker`](struct.RawWaker.html \"struct std::task::RawWaker\") instance, which defines the executor-specific wakeup behavior.\n\nLocal wakers can be requested from a `Context` with the [`local_waker`](about:blank/struct.Context.html#method.local_waker \"method std::task::Context::local_waker\") method.\n\nThe typical life of a `LocalWaker` is that it is constructed by an executor, wrapped in a [`Context`](struct.Context.html \"struct std::task::Context\") using [`ContextBuilder`](struct.ContextBuilder.html \"struct std::task::ContextBuilder\"), then passed to [`Future::poll()`](about:blank/future/trait.Future.html#tymethod.poll \"method std::future::Future::poll\"). Then, if the future chooses to return [`Poll::Pending`](about:blank/enum.Poll.html#variant.Pending \"variant std::task::Poll::Pending\"), it must also store the waker somehow and call [`LocalWaker::wake()`](about:blank/struct.LocalWaker.html#method.wake \"method std::task::LocalWaker::wake\") when the future should be polled again.\n\nImplements [`Clone`](../clone/trait.Clone.html \"trait std::clone::Clone\"), but neither [`Send`](../marker/trait.Send.html \"trait std::marker::Send\") nor [`Sync`](../marker/trait.Sync.html \"trait std::marker::Sync\"); therefore, a local waker may not be moved to other threads. In general, when deciding to use wakers or local wakers, local wakers are preferable unless the waker needs to be sent across threads. This is because wakers can incur in additional cost related to memory synchronization.\n\nNote that it is preferable to use `local_waker.clone_from(&new_waker)` instead of `*local_waker = new_waker.clone()`, as the former will avoid cloning the waker unnecessarily if the two wakers [wake the same task](about:blank/struct.LocalWaker.html#method.will_wake \"method std::task::LocalWaker::will_wake\").\n\n## [Â§](#examples)Examples\n\nUsage of a local waker to implement a future analogous to `std::thread::yield_now()`.\n\n```\n#![feature(local_waker)]\nuse std::future::{Future, poll_fn};\nuse std::task::Poll;\n\n// a future that returns pending once.\nfn yield_now() -> impl Future<Output=()> + Unpin {\n    let mut yielded = false;\n    poll_fn(move |cx| {\n        if !yielded {\n            yielded = true;\n            cx.local_waker().wake_by_ref();\n            return Poll::Pending;\n        }\n        return Poll::Ready(())\n    })\n}\n\nyield_now().await;\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(local_waker)%5D%0Afn+main()+%7B%0A++++use+std::future::%7BFuture,+poll_fn%7D;%0A++++use+std::task::Poll;%0A++++%0A++++//+a+future+that+returns+pending+once.%0A++++fn+yield_now()+-%3E+impl+Future%3COutput=()%3E+%2B+Unpin+%7B%0A++++++++let+mut+yielded+=+false;%0A++++++++poll_fn(move+%7Ccx%7C+%7B%0A++++++++++++if+!yielded+%7B%0A++++++++++++++++yielded+=+true;%0A++++++++++++++++cx.local_waker().wake_by_ref();%0A++++++++++++++++return+Poll::Pending;%0A++++++++++++%7D%0A++++++++++++return+Poll::Ready(())%0A++++++++%7D)%0A++++%7D%0A++++%0A++++async+fn+__()+%7B%0A++++yield_now().await;%0A++++%7D%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#706)[Â§](#impl-LocalWaker)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#726)\n\nðŸ”¬This is a nightly-only experimental API. (`local_waker`Â [#118959](https://github.com/rust-lang/rust/issues/118959))\n\nWake up the task associated with this `LocalWaker`.\n\nAs long as the executor keeps running and the task is not finished, it is guaranteed that each invocation of [`wake()`](about:blank/struct.LocalWaker.html#method.wake \"method std::task::LocalWaker::wake\") (or [`wake_by_ref()`](about:blank/struct.LocalWaker.html#method.wake_by_ref \"method std::task::LocalWaker::wake_by_ref\")) will be followed by at least one [`poll()`](about:blank/future/trait.Future.html#tymethod.poll \"method std::future::Future::poll\") of the task to which this `LocalWaker` belongs. This makes it possible to temporarily yield to other tasks while running potentially unbounded processing loops.\n\nNote that the above implies that multiple wake-ups may be coalesced into a single [`poll()`](about:blank/future/trait.Future.html#tymethod.poll \"method std::future::Future::poll\") invocation by the runtime.\n\nAlso note that yielding to competing tasks is not guaranteed: it is the executorâ€™s choice which task to run and the executor may choose to run the current task again.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#748)\n\nðŸ”¬This is a nightly-only experimental API. (`local_waker`Â [#118959](https://github.com/rust-lang/rust/issues/118959))\n\nWake up the task associated with this `LocalWaker` without consuming the `LocalWaker`.\n\nThis is similar to [`wake()`](about:blank/struct.LocalWaker.html#method.wake \"method std::task::LocalWaker::wake\"), but may be slightly less efficient in the case where an owned `Waker` is available. This method should be preferred to calling `waker.clone().wake()`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#768)\n\nðŸ”¬This is a nightly-only experimental API. (`local_waker`Â [#118959](https://github.com/rust-lang/rust/issues/118959))\n\nReturns `true` if this `LocalWaker` and another `LocalWaker` would awake the same task.\n\nThis function works on a best-effort basis, and may return false even when the `Waker`s would awaken the same task. However, if this function returns `true`, it is guaranteed that the `Waker`s will awaken the same task.\n\nThis function is primarily used for optimization purposes â€” for example, this typeâ€™s [`clone_from`](about:blank/struct.LocalWaker.html#method.clone_from \"method std::task::LocalWaker::clone_from\") implementation uses it to avoid cloning the waker when they would wake the same task anyway.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#781)\n\nðŸ”¬This is a nightly-only experimental API. (`local_waker`Â [#118959](https://github.com/rust-lang/rust/issues/118959))\n\nCreates a new `LocalWaker` from [`RawWaker`](struct.RawWaker.html \"struct std::task::RawWaker\").\n\nThe behavior of the returned `LocalWaker` is undefined if the contract defined in [`RawWaker`](struct.RawWaker.html \"struct std::task::RawWaker\")â€™s and [`RawWakerVTable`](struct.RawWakerVTable.html \"struct std::task::RawWakerVTable\")â€™s documentation is not upheld. Therefore this method is unsafe.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#810)\n\nðŸ”¬This is a nightly-only experimental API. (`noop_waker`Â [#98286](https://github.com/rust-lang/rust/issues/98286))\n\nCreates a new `LocalWaker` that does nothing when `wake` is called.\n\nThis is mostly useful for writing tests that need a [`Context`](struct.Context.html \"struct std::task::Context\") to poll some futures, but are not expecting those futures to wake the waker or do not need to do anything specific if it happens.\n\n##### [Â§](#examples-1)Examples\n\n```\n#![feature(local_waker)]\n#![feature(noop_waker)]\n\nuse std::future::Future;\nuse std::task::{ContextBuilder, LocalWaker, Waker, Poll};\n\nlet mut cx = ContextBuilder::from_waker(Waker::noop())\n    .local_waker(LocalWaker::noop())\n    .build();\n\nlet mut future = Box::pin(async { 10 });\nassert_eq!(future.as_mut().poll(&mut cx), Poll::Ready(10));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(local_waker)%5D%0A%23!%5Bfeature(noop_waker)%5D%0A%0Afn+main()+%7B%0A++++use+std::future::Future;%0A++++use+std::task::%7BContextBuilder,+LocalWaker,+Waker,+Poll%7D;%0A++++%0A++++let+mut+cx+=+ContextBuilder::from_waker(Waker::noop())%0A++++++++.local_waker(LocalWaker::noop())%0A++++++++.build();%0A++++%0A++++let+mut+future+=+Box::pin(async+%7B+10+%7D);%0A++++assert_eq!(future.as_mut().poll(%26mut+cx),+Poll::Ready(10));%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#819)\n\nðŸ”¬This is a nightly-only experimental API. (`waker_getters`Â [#96992](https://github.com/rust-lang/rust/issues/96992))\n\nGet a reference to the underlying [`RawWaker`](struct.RawWaker.html \"struct std::task::RawWaker\").\n\n[Â§](#impl-Freeze-for-LocalWaker)\n\n[Â§](#impl-RefUnwindSafe-for-LocalWaker)\n\n[Â§](#impl-UnwindSafe-for-LocalWaker)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[Â§](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[Â§](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[Â§](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[Â§](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[Â§](#method.from-1)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[Â§](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[Â§](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85)[Â§](#impl-ToOwned-for-T)\n\n[Â§](#associatedtype.Owned)\n\nThe resulting type after obtaining ownership.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88)[Â§](#method.to_owned)\n\nCreates owned data from borrowed data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#tymethod.to_owned)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92)[Â§](#method.clone_into)\n\nUses borrowed data to replace owned data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#method.clone_into)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[Â§](#impl-TryFrom%3CU%3E-for-T)\n\n[Â§](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[Â§](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[Â§](#impl-TryInto%3CU%3E-for-T)\n\n[Â§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[Â§](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A `LocalWaker` is analogous to a `Waker`, but it does not implement `Send` or `Sync`.\"><title>LocalWaker in std::task - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">LocalWaker</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">LocalWaker</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.as_raw\">as_raw</a></li><li><a href=\"#method.from_raw\">from_raw</a></li><li><a href=\"#method.noop\">noop</a></li><li><a href=\"#method.wake\">wake</a></li><li><a href=\"#method.wake_by_ref\">wake_by_ref</a></li><li><a href=\"#method.will_wake\">will_wake</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-Send-for-LocalWaker\">!Send</a></li><li><a href=\"#impl-Sync-for-LocalWaker\">!Sync</a></li><li><a href=\"#impl-AsRef%3CLocalWaker%3E-for-Waker\">AsRef&lt;LocalWaker&gt;</a></li><li><a href=\"#impl-Clone-for-LocalWaker\">Clone</a></li><li><a href=\"#impl-Debug-for-LocalWaker\">Debug</a></li><li><a href=\"#impl-Drop-for-LocalWaker\">Drop</a></li><li><a href=\"#impl-From%3CRc%3CW%3E%3E-for-LocalWaker\">From&lt;Rc&lt;W&gt;&gt;</a></li><li><a href=\"#impl-Unpin-for-LocalWaker\">Unpin</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-LocalWaker\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-LocalWaker\">RefUnwindSafe</a></li><li><a href=\"#impl-UnwindSafe-for-LocalWaker\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-ToOwned-for-T\">ToOwned</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::task</a></h2><h3><a href=\"index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"macro.ready.html\">ready</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Context.html\">Context</a></li><li><a href=\"struct.ContextBuilder.html\">ContextBuilder</a></li><li><a href=\"struct.LocalWaker.html\">LocalWaker</a></li><li><a href=\"struct.RawWaker.html\">RawWaker</a></li><li><a href=\"struct.RawWakerVTable.html\">RawWakerVTable</a></li><li><a href=\"struct.Waker.html\">Waker</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.Poll.html\">Poll</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.LocalWake.html\">LocalWake</a></li><li><a href=\"trait.Wake.html\">Wake</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type â€˜Sâ€™ or â€˜/â€™ to search, â€˜?â€™ for more optionsâ€¦\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">task</a>::<wbr><a class=\"struct\" href=\"#\">LocalWaker</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#699\">source</a> Â· <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>âˆ’</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct LocalWaker { <span class=\"comment\">/* private fields */</span> }</code></pre><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>local_waker</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/118959\">#118959</a>)</span></div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A <code>LocalWaker</code> is analogous to a <a href=\"struct.Waker.html\" title=\"struct std::task::Waker\"><code>Waker</code></a>, but it does not implement <a href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\"><code>Send</code></a> or <a href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\"><code>Sync</code></a>.</p>\n<p>This handle encapsulates a <a href=\"struct.RawWaker.html\" title=\"struct std::task::RawWaker\"><code>RawWaker</code></a> instance, which defines the\nexecutor-specific wakeup behavior.</p>\n<p>Local wakers can be requested from a <code>Context</code> with the <a href=\"struct.Context.html#method.local_waker\" title=\"method std::task::Context::local_waker\"><code>local_waker</code></a> method.</p>\n<p>The typical life of a <code>LocalWaker</code> is that it is constructed by an executor, wrapped in a\n<a href=\"struct.Context.html\" title=\"struct std::task::Context\"><code>Context</code></a> using <a href=\"struct.ContextBuilder.html\" title=\"struct std::task::ContextBuilder\"><code>ContextBuilder</code></a>, then passed to <a href=\"../future/trait.Future.html#tymethod.poll\" title=\"method std::future::Future::poll\"><code>Future::poll()</code></a>. Then, if the future chooses to return\n<a href=\"enum.Poll.html#variant.Pending\" title=\"variant std::task::Poll::Pending\"><code>Poll::Pending</code></a>, it must also store the waker somehow and call <a href=\"struct.LocalWaker.html#method.wake\" title=\"method std::task::LocalWaker::wake\"><code>LocalWaker::wake()</code></a> when\nthe future should be polled again.</p>\n<p>Implements <a href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\"><code>Clone</code></a>, but neither <a href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\"><code>Send</code></a> nor <a href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\"><code>Sync</code></a>; therefore, a local waker may\nnot be moved to other threads. In general, when deciding to use wakers or local wakers,\nlocal wakers are preferable unless the waker needs to be sent across threads. This is because\nwakers can incur in additional cost related to memory synchronization.</p>\n<p>Note that it is preferable to use <code>local_waker.clone_from(&amp;new_waker)</code> instead\nof <code>*local_waker = new_waker.clone()</code>, as the former will avoid cloning the waker\nunnecessarily if the two wakers <a href=\"struct.LocalWaker.html#method.will_wake\" title=\"method std::task::LocalWaker::will_wake\">wake the same task</a>.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">Â§</a>Examples</h2>\n<p>Usage of a local waker to implement a future analogous to <code>std::thread::yield_now()</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(local_waker)]\n</span><span class=\"kw\">use </span>std::future::{Future, poll_fn};\n<span class=\"kw\">use </span>std::task::Poll;\n\n<span class=\"comment\">// a future that returns pending once.\n</span><span class=\"kw\">fn </span>yield_now() -&gt; <span class=\"kw\">impl </span>Future&lt;Output=()&gt; + Unpin {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>yielded = <span class=\"bool-val\">false</span>;\n    poll_fn(<span class=\"kw\">move </span>|cx| {\n        <span class=\"kw\">if </span>!yielded {\n            yielded = <span class=\"bool-val\">true</span>;\n            cx.local_waker().wake_by_ref();\n            <span class=\"kw\">return </span>Poll::Pending;\n        }\n        <span class=\"kw\">return </span>Poll::Ready(())\n    })\n}\n\nyield_now().<span class=\"kw\">await</span>;</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(local_waker)%5D%0Afn+main()+%7B%0A++++use+std::future::%7BFuture,+poll_fn%7D;%0A++++use+std::task::Poll;%0A++++%0A++++//+a+future+that+returns+pending+once.%0A++++fn+yield_now()+-%3E+impl+Future%3COutput=()%3E+%2B+Unpin+%7B%0A++++++++let+mut+yielded+=+false;%0A++++++++poll_fn(move+%7Ccx%7C+%7B%0A++++++++++++if+!yielded+%7B%0A++++++++++++++++yielded+=+true;%0A++++++++++++++++cx.local_waker().wake_by_ref();%0A++++++++++++++++return+Poll::Pending;%0A++++++++++++%7D%0A++++++++++++return+Poll::Ready(())%0A++++++++%7D)%0A++++%7D%0A++++%0A++++async+fn+__()+%7B%0A++++yield_now().await;%0A++++%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">Â§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-LocalWaker\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#706\">source</a><a href=\"#impl-LocalWaker\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"struct.LocalWaker.html\" title=\"struct std::task::LocalWaker\">LocalWaker</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.wake\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#726\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.wake\" class=\"fn\">wake</a>(self)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>local_waker</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/118959\">#118959</a>)</span></div></span></summary><div class=\"docblock\"><p>Wake up the task associated with this <code>LocalWaker</code>.</p>\n<p>As long as the executor keeps running and the task is not finished, it is\nguaranteed that each invocation of <a href=\"struct.LocalWaker.html#method.wake\" title=\"method std::task::LocalWaker::wake\"><code>wake()</code></a> (or\n<a href=\"struct.LocalWaker.html#method.wake_by_ref\" title=\"method std::task::LocalWaker::wake_by_ref\"><code>wake_by_ref()</code></a>) will be followed by at least one\n<a href=\"../future/trait.Future.html#tymethod.poll\" title=\"method std::future::Future::poll\"><code>poll()</code></a> of the task to which this <code>LocalWaker</code> belongs. This makes\nit possible to temporarily yield to other tasks while running potentially\nunbounded processing loops.</p>\n<p>Note that the above implies that multiple wake-ups may be coalesced into a\nsingle <a href=\"../future/trait.Future.html#tymethod.poll\" title=\"method std::future::Future::poll\"><code>poll()</code></a> invocation by the runtime.</p>\n<p>Also note that yielding to competing tasks is not guaranteed: it is the\nexecutorâ€™s choice which task to run and the executor may choose to run the\ncurrent task again.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.wake_by_ref\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#748\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.wake_by_ref\" class=\"fn\">wake_by_ref</a>(&amp;self)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>local_waker</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/118959\">#118959</a>)</span></div></span></summary><div class=\"docblock\"><p>Wake up the task associated with this <code>LocalWaker</code> without consuming the <code>LocalWaker</code>.</p>\n<p>This is similar to <a href=\"struct.LocalWaker.html#method.wake\" title=\"method std::task::LocalWaker::wake\"><code>wake()</code></a>, but may be slightly less efficient in\nthe case where an owned <code>Waker</code> is available. This method should be preferred to\ncalling <code>waker.clone().wake()</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.will_wake\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#768\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.will_wake\" class=\"fn\">will_wake</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.LocalWaker.html\" title=\"struct std::task::LocalWaker\">LocalWaker</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>local_waker</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/118959\">#118959</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns <code>true</code> if this <code>LocalWaker</code> and another <code>LocalWaker</code> would awake the same task.</p>\n<p>This function works on a best-effort basis, and may return false even\nwhen the <code>Waker</code>s would awaken the same task. However, if this function\nreturns <code>true</code>, it is guaranteed that the <code>Waker</code>s will awaken the same task.</p>\n<p>This function is primarily used for optimization purposes â€” for example,\nthis typeâ€™s <a href=\"struct.LocalWaker.html#method.clone_from\" title=\"method std::task::LocalWaker::clone_from\"><code>clone_from</code></a> implementation uses it to\navoid cloning the waker when they would wake the same task anyway.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_raw\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#781\">source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"#method.from_raw\" class=\"fn\">from_raw</a>(waker: <a class=\"struct\" href=\"struct.RawWaker.html\" title=\"struct std::task::RawWaker\">RawWaker</a>) -&gt; <a class=\"struct\" href=\"struct.LocalWaker.html\" title=\"struct std::task::LocalWaker\">LocalWaker</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>local_waker</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/118959\">#118959</a>)</span></div></span></summary><div class=\"docblock\"><p>Creates a new <code>LocalWaker</code> from <a href=\"struct.RawWaker.html\" title=\"struct std::task::RawWaker\"><code>RawWaker</code></a>.</p>\n<p>The behavior of the returned <code>LocalWaker</code> is undefined if the contract defined\nin <a href=\"struct.RawWaker.html\" title=\"struct std::task::RawWaker\"><code>RawWaker</code></a>â€™s and <a href=\"struct.RawWakerVTable.html\" title=\"struct std::task::RawWakerVTable\"><code>RawWakerVTable</code></a>â€™s documentation is not upheld.\nTherefore this method is unsafe.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.noop\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#810\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.noop\" class=\"fn\">noop</a>() -&gt; &amp;'static <a class=\"struct\" href=\"struct.LocalWaker.html\" title=\"struct std::task::LocalWaker\">LocalWaker</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>noop_waker</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/98286\">#98286</a>)</span></div></span></summary><div class=\"docblock\"><p>Creates a new <code>LocalWaker</code> that does nothing when <code>wake</code> is called.</p>\n<p>This is mostly useful for writing tests that need a <a href=\"struct.Context.html\" title=\"struct std::task::Context\"><code>Context</code></a> to poll\nsome futures, but are not expecting those futures to wake the waker or\ndo not need to do anything specific if it happens.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(local_waker)]\n#![feature(noop_waker)]\n\n</span><span class=\"kw\">use </span>std::future::Future;\n<span class=\"kw\">use </span>std::task::{ContextBuilder, LocalWaker, Waker, Poll};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>cx = ContextBuilder::from_waker(Waker::noop())\n    .local_waker(LocalWaker::noop())\n    .build();\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>future = Box::pin(<span class=\"kw\">async </span>{ <span class=\"number\">10 </span>});\n<span class=\"macro\">assert_eq!</span>(future.as_mut().poll(<span class=\"kw-2\">&amp;mut </span>cx), Poll::Ready(<span class=\"number\">10</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(local_waker)%5D%0A%23!%5Bfeature(noop_waker)%5D%0A%0Afn+main()+%7B%0A++++use+std::future::Future;%0A++++use+std::task::%7BContextBuilder,+LocalWaker,+Waker,+Poll%7D;%0A++++%0A++++let+mut+cx+=+ContextBuilder::from_waker(Waker::noop())%0A++++++++.local_waker(LocalWaker::noop())%0A++++++++.build();%0A++++%0A++++let+mut+future+=+Box::pin(async+%7B+10+%7D);%0A++++assert_eq!(future.as_mut().poll(%26mut+cx),+Poll::Ready(10));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_raw\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#819\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.as_raw\" class=\"fn\">as_raw</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"struct.RawWaker.html\" title=\"struct std::task::RawWaker\">RawWaker</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>waker_getters</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/96992\">#96992</a>)</span></div></span></summary><div class=\"docblock\"><p>Get a reference to the underlying <a href=\"struct.RawWaker.html\" title=\"struct std::task::RawWaker\"><code>RawWaker</code></a>.</p>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">Â§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsRef%3CLocalWaker%3E-for-Waker\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#844\">source</a><a href=\"#impl-AsRef%3CLocalWaker%3E-for-Waker\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"struct.LocalWaker.html\" title=\"struct std::task::LocalWaker\">LocalWaker</a>&gt; for <a class=\"struct\" href=\"struct.Waker.html\" title=\"struct std::task::Waker\">Waker</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#845\">source</a><a href=\"#method.as_ref\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"struct.LocalWaker.html\" title=\"struct std::task::LocalWaker\">LocalWaker</a></h4></section></summary><div class=\"docblock\">Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Clone-for-LocalWaker\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#824\">source</a><a href=\"#impl-Clone-for-LocalWaker\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"struct.LocalWaker.html\" title=\"struct std::task::LocalWaker\">LocalWaker</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#826\">source</a><a href=\"#method.clone\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.LocalWaker.html\" title=\"struct std::task::LocalWaker\">LocalWaker</a></h4></section></summary><div class=\"docblock\">Returns a copy of the value. <a href=\"../clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#836\">source</a><a href=\"#method.clone_from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;<a class=\"struct\" href=\"struct.LocalWaker.html\" title=\"struct std::task::LocalWaker\">LocalWaker</a>)</h4></section></summary><div class=\"docblock\">Performs copy-assignment from <code>source</code>. <a href=\"../clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-LocalWaker\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#863\">source</a><a href=\"#impl-Debug-for-LocalWaker\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.LocalWaker.html\" title=\"struct std::task::LocalWaker\">LocalWaker</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#864\">source</a><a href=\"#method.fmt\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Drop-for-LocalWaker\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#852\">source</a><a href=\"#impl-Drop-for-LocalWaker\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../ops/trait.Drop.html\" title=\"trait std::ops::Drop\">Drop</a> for <a class=\"struct\" href=\"struct.LocalWaker.html\" title=\"struct std::task::LocalWaker\">LocalWaker</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.drop\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#854\">source</a><a href=\"#method.drop\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\">Executes the destructor for this type. <a href=\"../ops/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CRc%3CW%3E%3E-for-LocalWaker\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/task.rs.html#287\">source</a><a href=\"#impl-From%3CRc%3CW%3E%3E-for-LocalWaker\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;W&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"../rc/struct.Rc.html\" title=\"struct std::rc::Rc\">Rc</a>&lt;W&gt;&gt; for <a class=\"struct\" href=\"struct.LocalWaker.html\" title=\"struct std::task::LocalWaker\">LocalWaker</a><div class=\"where\">where\n    W: <a class=\"trait\" href=\"trait.LocalWake.html\" title=\"trait std::task::LocalWake\">LocalWake</a> + 'static,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/task.rs.html#291\">source</a><a href=\"#method.from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(waker: <a class=\"struct\" href=\"../rc/struct.Rc.html\" title=\"struct std::rc::Rc\">Rc</a>&lt;W&gt;) -&gt; <a class=\"struct\" href=\"struct.LocalWaker.html\" title=\"struct std::task::LocalWaker\">LocalWaker</a></h4></section></summary><div class=\"docblock\"><p>Use a <code>Wake</code>-able type as a <code>LocalWaker</code>.</p>\n<p>No heap allocations or atomic operations are used for this conversion.</p>\n</div></details></div></details><section id=\"impl-Send-for-LocalWaker\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#874\">source</a><a href=\"#impl-Send-for-LocalWaker\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl !<a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.LocalWaker.html\" title=\"struct std::task::LocalWaker\">LocalWaker</a></h3></section><section id=\"impl-Sync-for-LocalWaker\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#876\">source</a><a href=\"#impl-Sync-for-LocalWaker\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl !<a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.LocalWaker.html\" title=\"struct std::task::LocalWaker\">LocalWaker</a></h3></section><section id=\"impl-Unpin-for-LocalWaker\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#704\">source</a><a href=\"#impl-Unpin-for-LocalWaker\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.LocalWaker.html\" title=\"struct std::task::LocalWaker\">LocalWaker</a></h3></section></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">Â§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-LocalWaker\" class=\"impl\"><a href=\"#impl-Freeze-for-LocalWaker\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.LocalWaker.html\" title=\"struct std::task::LocalWaker\">LocalWaker</a></h3></section><section id=\"impl-RefUnwindSafe-for-LocalWaker\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-LocalWaker\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.LocalWaker.html\" title=\"struct std::task::LocalWaker\">LocalWaker</a></h3></section><section id=\"impl-UnwindSafe-for-LocalWaker\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-LocalWaker\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.LocalWaker.html\" title=\"struct std::task::LocalWaker\">LocalWaker</a></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">Â§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToOwned-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85\">source</a><a href=\"#impl-ToOwned-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.ToOwned.html\" title=\"trait std::borrow::ToOwned\">ToOwned</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Owned\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"../borrow/trait.ToOwned.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = T</h4></section></summary><div class=\"docblock\">The resulting type after obtaining ownership.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88\">source</a><a href=\"#method.to_owned\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\">Creates owned data from borrowed data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92\">source</a><a href=\"#method.clone_into\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#method.clone_into\" class=\"fn\">clone_into</a>(&amp;self, target: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>)</h4></section></summary><div class=\"docblock\">Uses borrowed data to replace owned data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#method.clone_into\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:13:11.924Z"
}