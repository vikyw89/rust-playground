{
	"title": "Mask in std::simd::prelude - Rust",
	"url": "https://doc.rust-lang.org/stable/std/simd/prelude/struct.Mask.html",
	"markdown": "# Mask in std::simd::prelude - Rust\n\n```\npub struct Mask<T, const N: usize>(/* private fields */)\nwhere\n    T: MaskElement,\n    LaneCount<N>: SupportedLaneCount;\n```\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nExpand description\n\nA SIMD vector mask for `N` elements of width specified by `Element`.\n\nMasks represent boolean inclusion/exclusion on a per-element basis.\n\nThe layout of this type is unspecified, and may change between platforms and/or Rust versions, and code should not assume that it is equivalent to `[T; N]`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#135-138)[§](#impl-Mask%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#142)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nConstruct a mask by setting all elements to the given value.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#148)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nConverts an array of bools to a SIMD mask.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#165)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nConverts a SIMD mask to an array of bools.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#190)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nConverts a vector of integers to a mask, where 0 represents `false` and -1 represents `true`.\n\n##### [§](#safety)Safety\n\nAll elements must be either 0 or -1.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#206)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nConverts a vector of integers to a mask, where 0 represents `false` and -1 represents `true`.\n\n##### [§](#panics)Panics\n\nPanics if any element is not 0 or -1.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#216)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nConverts the mask to a vector of integers, where 0 represents `false` and -1 represents `true`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#223)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nConverts the mask to a mask of any other element size.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#233)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTests the value of the specified element.\n\n##### [§](#safety-1)Safety\n\n`index` must be less than `self.len()`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#245)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTests the value of the specified element.\n\n##### [§](#panics-1)Panics\n\nPanics if `index` is greater than or equal to the number of elements in the vector.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#256)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nSets the value of the specified element.\n\n##### [§](#safety-2)Safety\n\n`index` must be less than `self.len()`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#269)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nSets the value of the specified element.\n\n##### [§](#panics-2)Panics\n\nPanics if `index` is greater than or equal to the number of elements in the vector.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#280)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns true if any element is set, or false otherwise.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#287)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns true if all elements are set, or false otherwise.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#297)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a bitmask from a mask.\n\nEach bit is set if the corresponding element in the mask is `true`. If the mask contains more than 64 elements, the bitmask is truncated to the first 64.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#307)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a mask from a bitmask.\n\nFor each bit, if it is set, the corresponding element in the mask is set to `true`. If the mask contains more than 64 elements, the remainder are set to `false`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#327)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a bitmask vector from a mask.\n\nEach bit is set if the corresponding element in the mask is `true`. The remaining bits are unset.\n\nThe bits are packed into the first N bits of the vector:\n\n```\nlet mask = mask32x8::from_array([true, false, true, false, false, false, true, false]);\nassert_eq!(mask.to_bitmask_vector()[0], 0b01000101);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::mask32x8;%0A++++let+mask+=+mask32x8::from_array(%5Btrue,+false,+true,+false,+false,+false,+true,+false%5D);%0A++++assert_eq!(mask.to_bitmask_vector()%5B0%5D,+0b01000101);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#349)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nCreate a mask from a bitmask vector.\n\nFor each bit, if it is set, the corresponding element in the mask is set to `true`.\n\nThe bits are packed into the first N bits of the vector:\n\n```\nlet bitmask = u8x8::from_array([0b01000101, 0, 0, 0, 0, 0, 0, 0]);\nassert_eq!(\n    mask32x8::from_bitmask_vector(bitmask),\n    mask32x8::from_array([true, false, true, false, false, false, true, false]),\n);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::%7Bmask32x8,+u8x8%7D;%0A++++let+bitmask+=+u8x8::from_array(%5B0b01000101,+0,+0,+0,+0,+0,+0,+0%5D);%0A++++assert_eq!(%0A++++++++mask32x8::from_bitmask_vector(bitmask),%0A++++++++mask32x8::from_array(%5Btrue,+false,+true,+false,+false,+false,+true,+false%5D),%0A++++);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#368)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nFind the index of the first set element.\n\n```\nassert_eq!(mask32x8::splat(false).first_set(), None);\nassert_eq!(mask32x8::splat(true).first_set(), Some(0));\n\nlet mask = mask32x8::from_array([false, true, false, false, true, false, false, true]);\nassert_eq!(mask.first_set(), Some(1));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::mask32x8;%0A++++assert_eq!(mask32x8::splat(false).first_set(),+None);%0A++++assert_eq!(mask32x8::splat(true).first_set(),+Some(0));%0A++++%0A++++let+mask+=+mask32x8::from_array(%5Bfalse,+true,+false,+false,+true,+false,+false,+true%5D);%0A++++assert_eq!(mask.first_set(),+Some(1));%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/select.rs.html#3-6)[§](#impl-Mask%3CT,+N%3E-1)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/select.rs.html#25-27)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nChoose elements from two vectors.\n\nFor each element in the mask, choose the corresponding element from `true_values` if that element mask is true, and `false_values` if that element mask is false.\n\n##### [§](#examples)Examples\n\n```\nlet a = Simd::from_array([0, 1, 2, 3]);\nlet b = Simd::from_array([4, 5, 6, 7]);\nlet mask = Mask::from_array([true, false, false, true]);\nlet c = mask.select(a, b);\nassert_eq!(c.to_array(), [0, 5, 6, 3]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++use+core::simd::%7BSimd,+Mask%7D;%0A++++let+a+=+Simd::from_array(%5B0,+1,+2,+3%5D);%0A++++let+b+=+Simd::from_array(%5B4,+5,+6,+7%5D);%0A++++let+mask+=+Mask::from_array(%5Btrue,+false,+false,+true%5D);%0A++++let+c+=+mask.select(a,+b);%0A++++assert_eq!(c.to_array(),+%5B0,+5,+6,+3%5D);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/select.rs.html#51)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nChoose elements from two masks.\n\nFor each element in the mask, choose the corresponding element from `true_values` if that element mask is true, and `false_values` if that element mask is false.\n\n##### [§](#examples-1)Examples\n\n```\nlet a = Mask::<i32, 4>::from_array([true, true, false, false]);\nlet b = Mask::<i32, 4>::from_array([false, false, true, true]);\nlet mask = Mask::<i32, 4>::from_array([true, false, false, true]);\nlet c = mask.select_mask(a, b);\nassert_eq!(c.to_array(), [true, false, true, false]);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++use+core::simd::Mask;%0A++++let+a+=+Mask::%3Ci32,+4%3E::from_array(%5Btrue,+true,+false,+false%5D);%0A++++let+b+=+Mask::%3Ci32,+4%3E::from_array(%5Bfalse,+false,+true,+true%5D);%0A++++let+mask+=+Mask::%3Ci32,+4%3E::from_array(%5Btrue,+false,+false,+true%5D);%0A++++let+c+=+mask.select_mask(a,+b);%0A++++assert_eq!(c.to_array(),+%5Btrue,+false,+true,+false%5D);%0A%7D&version=nightly&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#515-518)[§](#impl-BitAnd%3CMask%3CT,+N%3E%3E-for-bool)\n\n[§](#associatedtype.Output-3)\n\nThe resulting type after applying the `&` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#523)[§](#method.bitand)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#502-505)[§](#impl-BitAnd%3Cbool%3E-for-Mask%3CT,+N%3E)\n\n[§](#associatedtype.Output-4)\n\nThe resulting type after applying the `&` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#510)[§](#method.bitand-1)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#489-492)[§](#impl-BitAnd-for-Mask%3CT,+N%3E)\n\n[§](#associatedtype.Output-5)\n\nThe resulting type after applying the `&` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#497)[§](#method.bitand-2)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#630-633)[§](#impl-BitAndAssign%3Cbool%3E-for-Mask%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#619-622)[§](#impl-BitAndAssign-for-Mask%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#554-557)[§](#impl-BitOr%3CMask%3CT,+N%3E%3E-for-bool)\n\n[§](#associatedtype.Output)\n\nThe resulting type after applying the `|` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#562)[§](#method.bitor)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#541-544)[§](#impl-BitOr%3Cbool%3E-for-Mask%3CT,+N%3E)\n\n[§](#associatedtype.Output-2)\n\nThe resulting type after applying the `|` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#549)[§](#method.bitor-2)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#528-531)[§](#impl-BitOr-for-Mask%3CT,+N%3E)\n\n[§](#associatedtype.Output-1)\n\nThe resulting type after applying the `|` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#536)[§](#method.bitor-1)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#652-655)[§](#impl-BitOrAssign%3Cbool%3E-for-Mask%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#641-644)[§](#impl-BitOrAssign-for-Mask%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#593-596)[§](#impl-BitXor%3CMask%3CT,+N%3E%3E-for-bool)\n\n[§](#associatedtype.Output-8)\n\nThe resulting type after applying the `^` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#601)[§](#method.bitxor-1)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#580-583)[§](#impl-BitXor%3Cbool%3E-for-Mask%3CT,+N%3E)\n\n[§](#associatedtype.Output-7)\n\nThe resulting type after applying the `^` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#588)[§](#method.bitxor)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#567-570)[§](#impl-BitXor-for-Mask%3CT,+N%3E)\n\n[§](#associatedtype.Output-9)\n\nThe resulting type after applying the `^` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#575)[§](#method.bitxor-2)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#674-677)[§](#impl-BitXorAssign%3Cbool%3E-for-Mask%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#663-666)[§](#impl-BitXorAssign-for-Mask%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#124-127)[§](#impl-Clone-for-Mask%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#476-479)[§](#impl-Debug-for-Mask%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#440-443)[§](#impl-Default-for-Mask%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#418-421)[§](#impl-From%3C%5Bbool;+N%5D%3E-for-Mask%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#424)[§](#method.from-3)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#429-432)[§](#impl-From%3CMask%3CT,+N%3E%3E-for-%5Bbool;+N%5D)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#435)[§](#method.from-9)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#701)[§](#impl-From%3CMask%3Ci16,+N%3E%3E-for-Mask%3Ci32,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#701)[§](#method.from-18)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#701)[§](#impl-From%3CMask%3Ci16,+N%3E%3E-for-Mask%3Ci64,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#701)[§](#method.from-1)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#701)[§](#impl-From%3CMask%3Ci16,+N%3E%3E-for-Mask%3Ci8,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#701)[§](#method.from-5)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#701)[§](#impl-From%3CMask%3Ci16,+N%3E%3E-for-Mask%3Cisize,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#701)[§](#method.from-2)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#702)[§](#impl-From%3CMask%3Ci32,+N%3E%3E-for-Mask%3Ci16,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#702)[§](#method.from-11)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#702)[§](#impl-From%3CMask%3Ci32,+N%3E%3E-for-Mask%3Ci64,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#702)[§](#method.from-19)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#702)[§](#impl-From%3CMask%3Ci32,+N%3E%3E-for-Mask%3Ci8,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#702)[§](#method.from-16)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#702)[§](#impl-From%3CMask%3Ci32,+N%3E%3E-for-Mask%3Cisize,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#702)[§](#method.from-12)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#703)[§](#impl-From%3CMask%3Ci64,+N%3E%3E-for-Mask%3Ci16,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#703)[§](#method.from-21)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#703)[§](#impl-From%3CMask%3Ci64,+N%3E%3E-for-Mask%3Ci32,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#703)[§](#method.from-14)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#703)[§](#impl-From%3CMask%3Ci64,+N%3E%3E-for-Mask%3Ci8,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#703)[§](#method.from-4)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#703)[§](#impl-From%3CMask%3Ci64,+N%3E%3E-for-Mask%3Cisize,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#703)[§](#method.from-8)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#700)[§](#impl-From%3CMask%3Ci8,+N%3E%3E-for-Mask%3Ci16,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#700)[§](#method.from-17)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#700)[§](#impl-From%3CMask%3Ci8,+N%3E%3E-for-Mask%3Ci32,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#700)[§](#method.from-10)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#700)[§](#impl-From%3CMask%3Ci8,+N%3E%3E-for-Mask%3Ci64,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#700)[§](#method.from-15)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#700)[§](#impl-From%3CMask%3Ci8,+N%3E%3E-for-Mask%3Cisize,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#700)[§](#method.from)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#704)[§](#impl-From%3CMask%3Cisize,+N%3E%3E-for-Mask%3Ci16,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#704)[§](#method.from-13)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#704)[§](#impl-From%3CMask%3Cisize,+N%3E%3E-for-Mask%3Ci32,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#704)[§](#method.from-6)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#704)[§](#impl-From%3CMask%3Cisize,+N%3E%3E-for-Mask%3Ci64,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#704)[§](#method.from-20)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#704)[§](#impl-From%3CMask%3Cisize,+N%3E%3E-for-Mask%3Ci8,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#704)[§](#method.from-7)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#606-609)[§](#impl-Not-for-Mask%3CT,+N%3E)\n\n[§](#associatedtype.Output-6)\n\nThe resulting type after applying the `!` operator.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#614)[§](#method.not)\n\nPerforms the unary `!` operation. [Read more](about:blank/ops/trait.Not.html#tymethod.not)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#452-455)[§](#impl-PartialEq-for-Mask%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#459)[§](#method.eq)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[§](#method.ne)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#464-467)[§](#impl-PartialOrd-for-Mask%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#471)[§](#method.partial_cmp)\n\nThis method returns an ordering between `self` and `other` values if one exists. [Read more](about:blank/cmp/trait.PartialOrd.html#tymethod.partial_cmp)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180)[§](#method.lt)\n\nThis method tests less than (for `self` and `other`) and is used by the `<` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.lt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198)[§](#method.le)\n\nThis method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.le)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215)[§](#method.gt)\n\nThis method tests greater than (for `self` and `other`) and is used by the `>` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.gt)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233)[§](#method.ge)\n\nThis method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator. [Read more](about:blank/cmp/trait.PartialOrd.html#method.ge)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219)[§](#impl-SimdOrd-for-Mask%3Ci16,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219)[§](#method.simd_max-3)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the element-wise maximum with `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219)[§](#method.simd_min-3)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the element-wise minimum with `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219)[§](#method.simd_clamp-3)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nRestrict each element to a certain interval. [Read more](about:blank/trait.SimdOrd.html#tymethod.simd_clamp)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219)[§](#impl-SimdOrd-for-Mask%3Ci32,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219)[§](#method.simd_max-1)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the element-wise maximum with `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219)[§](#method.simd_min-1)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the element-wise minimum with `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219)[§](#method.simd_clamp-1)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nRestrict each element to a certain interval. [Read more](about:blank/trait.SimdOrd.html#tymethod.simd_clamp)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219)[§](#impl-SimdOrd-for-Mask%3Ci64,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219)[§](#method.simd_max-4)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the element-wise maximum with `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219)[§](#method.simd_min-4)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the element-wise minimum with `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219)[§](#method.simd_clamp-4)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nRestrict each element to a certain interval. [Read more](about:blank/trait.SimdOrd.html#tymethod.simd_clamp)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219)[§](#impl-SimdOrd-for-Mask%3Ci8,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219)[§](#method.simd_max)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the element-wise maximum with `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219)[§](#method.simd_min)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the element-wise minimum with `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219)[§](#method.simd_clamp)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nRestrict each element to a certain interval. [Read more](about:blank/trait.SimdOrd.html#tymethod.simd_clamp)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219)[§](#impl-SimdOrd-for-Mask%3Cisize,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219)[§](#method.simd_max-2)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the element-wise maximum with `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219)[§](#method.simd_min-2)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nReturns the element-wise minimum with `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219)[§](#method.simd_clamp-2)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nRestrict each element to a certain interval. [Read more](about:blank/trait.SimdOrd.html#tymethod.simd_clamp)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#76)[§](#impl-SimdPartialEq-for-Mask%3Ci16,+N%3E)\n\n[§](#associatedtype.Mask-4)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThe mask type returned by each comparison.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#76)[§](#method.simd_eq-4)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#76)[§](#method.simd_ne-4)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#76)[§](#impl-SimdPartialEq-for-Mask%3Ci32,+N%3E)\n\n[§](#associatedtype.Mask-3)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThe mask type returned by each comparison.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#76)[§](#method.simd_eq-3)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#76)[§](#method.simd_ne-3)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#76)[§](#impl-SimdPartialEq-for-Mask%3Ci64,+N%3E)\n\n[§](#associatedtype.Mask-1)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThe mask type returned by each comparison.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#76)[§](#method.simd_eq-1)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#76)[§](#method.simd_ne-1)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#76)[§](#impl-SimdPartialEq-for-Mask%3Ci8,+N%3E)\n\n[§](#associatedtype.Mask)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThe mask type returned by each comparison.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#76)[§](#method.simd_eq)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#76)[§](#method.simd_ne)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#76)[§](#impl-SimdPartialEq-for-Mask%3Cisize,+N%3E)\n\n[§](#associatedtype.Mask-2)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nThe mask type returned by each comparison.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#76)[§](#method.simd_eq-2)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#76)[§](#method.simd_ne-2)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219)[§](#impl-SimdPartialOrd-for-Mask%3Ci16,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219)[§](#method.simd_lt-3)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is less than the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219)[§](#method.simd_le-3)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is less than or equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219)[§](#method.simd_gt-3)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is greater than the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219)[§](#method.simd_ge-3)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is greater than or equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219)[§](#impl-SimdPartialOrd-for-Mask%3Ci32,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219)[§](#method.simd_lt-1)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is less than the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219)[§](#method.simd_le-1)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is less than or equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219)[§](#method.simd_gt-1)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is greater than the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219)[§](#method.simd_ge-1)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is greater than or equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219)[§](#impl-SimdPartialOrd-for-Mask%3Ci64,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219)[§](#method.simd_lt)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is less than the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219)[§](#method.simd_le)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is less than or equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219)[§](#method.simd_gt)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is greater than the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219)[§](#method.simd_ge)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is greater than or equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219)[§](#impl-SimdPartialOrd-for-Mask%3Ci8,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219)[§](#method.simd_lt-2)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is less than the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219)[§](#method.simd_le-2)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is less than or equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219)[§](#method.simd_gt-2)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is greater than the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219)[§](#method.simd_ge-2)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is greater than or equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219)[§](#impl-SimdPartialOrd-for-Mask%3Cisize,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219)[§](#method.simd_lt-4)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is less than the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219)[§](#method.simd_le-4)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is less than or equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219)[§](#method.simd_gt-4)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is greater than the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219)[§](#method.simd_ge-4)\n\n🔬This is a nightly-only experimental API. (`portable_simd` [#86656](https://github.com/rust-lang/rust/issues/86656))\n\nTest if each element is greater than or equal to the corresponding element in `other`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#117-120)[§](#impl-Copy-for-Mask%3CT,+N%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[§](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[§](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[§](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[§](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[§](#method.from-22)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[§](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[§](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85)[§](#impl-ToOwned-for-T)\n\n[§](#associatedtype.Owned)\n\nThe resulting type after obtaining ownership.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88)[§](#method.to_owned)\n\nCreates owned data from borrowed data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#tymethod.to_owned)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92)[§](#method.clone_into)\n\nUses borrowed data to replace owned data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#method.clone_into)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[§](#impl-TryFrom%3CU%3E-for-T)\n\n[§](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[§](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[§](#impl-TryInto%3CU%3E-for-T)\n\n[§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[§](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A SIMD vector mask for `N` elements of width specified by `Element`.\"><title>Mask in std::simd::prelude - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../../\" data-static-root-path=\"../../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Mask</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Mask</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.all\">all</a></li><li><a href=\"#method.any\">any</a></li><li><a href=\"#method.cast\">cast</a></li><li><a href=\"#method.first_set\">first_set</a></li><li><a href=\"#method.from_array\">from_array</a></li><li><a href=\"#method.from_bitmask\">from_bitmask</a></li><li><a href=\"#method.from_bitmask_vector\">from_bitmask_vector</a></li><li><a href=\"#method.from_int\">from_int</a></li><li><a href=\"#method.from_int_unchecked\">from_int_unchecked</a></li><li><a href=\"#method.select\">select</a></li><li><a href=\"#method.select_mask\">select_mask</a></li><li><a href=\"#method.set\">set</a></li><li><a href=\"#method.set_unchecked\">set_unchecked</a></li><li><a href=\"#method.splat\">splat</a></li><li><a href=\"#method.test\">test</a></li><li><a href=\"#method.test_unchecked\">test_unchecked</a></li><li><a href=\"#method.to_array\">to_array</a></li><li><a href=\"#method.to_bitmask\">to_bitmask</a></li><li><a href=\"#method.to_bitmask_vector\">to_bitmask_vector</a></li><li><a href=\"#method.to_int\">to_int</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-BitAnd-for-Mask%3CT,+N%3E\">BitAnd</a></li><li><a href=\"#impl-BitAnd%3CMask%3CT,+N%3E%3E-for-bool\">BitAnd&lt;Mask&lt;T, N&gt;&gt;</a></li><li><a href=\"#impl-BitAnd%3Cbool%3E-for-Mask%3CT,+N%3E\">BitAnd&lt;bool&gt;</a></li><li><a href=\"#impl-BitAndAssign-for-Mask%3CT,+N%3E\">BitAndAssign</a></li><li><a href=\"#impl-BitAndAssign%3Cbool%3E-for-Mask%3CT,+N%3E\">BitAndAssign&lt;bool&gt;</a></li><li><a href=\"#impl-BitOr-for-Mask%3CT,+N%3E\">BitOr</a></li><li><a href=\"#impl-BitOr%3CMask%3CT,+N%3E%3E-for-bool\">BitOr&lt;Mask&lt;T, N&gt;&gt;</a></li><li><a href=\"#impl-BitOr%3Cbool%3E-for-Mask%3CT,+N%3E\">BitOr&lt;bool&gt;</a></li><li><a href=\"#impl-BitOrAssign-for-Mask%3CT,+N%3E\">BitOrAssign</a></li><li><a href=\"#impl-BitOrAssign%3Cbool%3E-for-Mask%3CT,+N%3E\">BitOrAssign&lt;bool&gt;</a></li><li><a href=\"#impl-BitXor-for-Mask%3CT,+N%3E\">BitXor</a></li><li><a href=\"#impl-BitXor%3CMask%3CT,+N%3E%3E-for-bool\">BitXor&lt;Mask&lt;T, N&gt;&gt;</a></li><li><a href=\"#impl-BitXor%3Cbool%3E-for-Mask%3CT,+N%3E\">BitXor&lt;bool&gt;</a></li><li><a href=\"#impl-BitXorAssign-for-Mask%3CT,+N%3E\">BitXorAssign</a></li><li><a href=\"#impl-BitXorAssign%3Cbool%3E-for-Mask%3CT,+N%3E\">BitXorAssign&lt;bool&gt;</a></li><li><a href=\"#impl-Clone-for-Mask%3CT,+N%3E\">Clone</a></li><li><a href=\"#impl-Copy-for-Mask%3CT,+N%3E\">Copy</a></li><li><a href=\"#impl-Debug-for-Mask%3CT,+N%3E\">Debug</a></li><li><a href=\"#impl-Default-for-Mask%3CT,+N%3E\">Default</a></li><li><a href=\"#impl-From%3CMask%3CT,+N%3E%3E-for-%5Bbool;+N%5D\">From&lt;Mask&lt;T, N&gt;&gt;</a></li><li><a href=\"#impl-From%3CMask%3Ci16,+N%3E%3E-for-Mask%3Ci32,+N%3E\">From&lt;Mask&lt;i16, N&gt;&gt;</a></li><li><a href=\"#impl-From%3CMask%3Ci16,+N%3E%3E-for-Mask%3Ci64,+N%3E\">From&lt;Mask&lt;i16, N&gt;&gt;</a></li><li><a href=\"#impl-From%3CMask%3Ci16,+N%3E%3E-for-Mask%3Ci8,+N%3E\">From&lt;Mask&lt;i16, N&gt;&gt;</a></li><li><a href=\"#impl-From%3CMask%3Ci16,+N%3E%3E-for-Mask%3Cisize,+N%3E\">From&lt;Mask&lt;i16, N&gt;&gt;</a></li><li><a href=\"#impl-From%3CMask%3Ci32,+N%3E%3E-for-Mask%3Ci16,+N%3E\">From&lt;Mask&lt;i32, N&gt;&gt;</a></li><li><a href=\"#impl-From%3CMask%3Ci32,+N%3E%3E-for-Mask%3Ci64,+N%3E\">From&lt;Mask&lt;i32, N&gt;&gt;</a></li><li><a href=\"#impl-From%3CMask%3Ci32,+N%3E%3E-for-Mask%3Ci8,+N%3E\">From&lt;Mask&lt;i32, N&gt;&gt;</a></li><li><a href=\"#impl-From%3CMask%3Ci32,+N%3E%3E-for-Mask%3Cisize,+N%3E\">From&lt;Mask&lt;i32, N&gt;&gt;</a></li><li><a href=\"#impl-From%3CMask%3Ci64,+N%3E%3E-for-Mask%3Ci16,+N%3E\">From&lt;Mask&lt;i64, N&gt;&gt;</a></li><li><a href=\"#impl-From%3CMask%3Ci64,+N%3E%3E-for-Mask%3Ci32,+N%3E\">From&lt;Mask&lt;i64, N&gt;&gt;</a></li><li><a href=\"#impl-From%3CMask%3Ci64,+N%3E%3E-for-Mask%3Ci8,+N%3E\">From&lt;Mask&lt;i64, N&gt;&gt;</a></li><li><a href=\"#impl-From%3CMask%3Ci64,+N%3E%3E-for-Mask%3Cisize,+N%3E\">From&lt;Mask&lt;i64, N&gt;&gt;</a></li><li><a href=\"#impl-From%3CMask%3Ci8,+N%3E%3E-for-Mask%3Ci16,+N%3E\">From&lt;Mask&lt;i8, N&gt;&gt;</a></li><li><a href=\"#impl-From%3CMask%3Ci8,+N%3E%3E-for-Mask%3Ci32,+N%3E\">From&lt;Mask&lt;i8, N&gt;&gt;</a></li><li><a href=\"#impl-From%3CMask%3Ci8,+N%3E%3E-for-Mask%3Ci64,+N%3E\">From&lt;Mask&lt;i8, N&gt;&gt;</a></li><li><a href=\"#impl-From%3CMask%3Ci8,+N%3E%3E-for-Mask%3Cisize,+N%3E\">From&lt;Mask&lt;i8, N&gt;&gt;</a></li><li><a href=\"#impl-From%3CMask%3Cisize,+N%3E%3E-for-Mask%3Ci16,+N%3E\">From&lt;Mask&lt;isize, N&gt;&gt;</a></li><li><a href=\"#impl-From%3CMask%3Cisize,+N%3E%3E-for-Mask%3Ci32,+N%3E\">From&lt;Mask&lt;isize, N&gt;&gt;</a></li><li><a href=\"#impl-From%3CMask%3Cisize,+N%3E%3E-for-Mask%3Ci64,+N%3E\">From&lt;Mask&lt;isize, N&gt;&gt;</a></li><li><a href=\"#impl-From%3CMask%3Cisize,+N%3E%3E-for-Mask%3Ci8,+N%3E\">From&lt;Mask&lt;isize, N&gt;&gt;</a></li><li><a href=\"#impl-From%3C%5Bbool;+N%5D%3E-for-Mask%3CT,+N%3E\">From&lt;[bool; N]&gt;</a></li><li><a href=\"#impl-Not-for-Mask%3CT,+N%3E\">Not</a></li><li><a href=\"#impl-PartialEq-for-Mask%3CT,+N%3E\">PartialEq</a></li><li><a href=\"#impl-PartialOrd-for-Mask%3CT,+N%3E\">PartialOrd</a></li><li><a href=\"#impl-SimdOrd-for-Mask%3Ci16,+N%3E\">SimdOrd</a></li><li><a href=\"#impl-SimdOrd-for-Mask%3Ci32,+N%3E\">SimdOrd</a></li><li><a href=\"#impl-SimdOrd-for-Mask%3Ci64,+N%3E\">SimdOrd</a></li><li><a href=\"#impl-SimdOrd-for-Mask%3Ci8,+N%3E\">SimdOrd</a></li><li><a href=\"#impl-SimdOrd-for-Mask%3Cisize,+N%3E\">SimdOrd</a></li><li><a href=\"#impl-SimdPartialEq-for-Mask%3Ci16,+N%3E\">SimdPartialEq</a></li><li><a href=\"#impl-SimdPartialEq-for-Mask%3Ci32,+N%3E\">SimdPartialEq</a></li><li><a href=\"#impl-SimdPartialEq-for-Mask%3Ci64,+N%3E\">SimdPartialEq</a></li><li><a href=\"#impl-SimdPartialEq-for-Mask%3Ci8,+N%3E\">SimdPartialEq</a></li><li><a href=\"#impl-SimdPartialEq-for-Mask%3Cisize,+N%3E\">SimdPartialEq</a></li><li><a href=\"#impl-SimdPartialOrd-for-Mask%3Ci16,+N%3E\">SimdPartialOrd</a></li><li><a href=\"#impl-SimdPartialOrd-for-Mask%3Ci32,+N%3E\">SimdPartialOrd</a></li><li><a href=\"#impl-SimdPartialOrd-for-Mask%3Ci64,+N%3E\">SimdPartialOrd</a></li><li><a href=\"#impl-SimdPartialOrd-for-Mask%3Ci8,+N%3E\">SimdPartialOrd</a></li><li><a href=\"#impl-SimdPartialOrd-for-Mask%3Cisize,+N%3E\">SimdPartialOrd</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-Mask%3CT,+N%3E\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-Mask%3CT,+N%3E\">RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-Mask%3CT,+N%3E\">Send</a></li><li><a href=\"#impl-Sync-for-Mask%3CT,+N%3E\">Sync</a></li><li><a href=\"#impl-Unpin-for-Mask%3CT,+N%3E\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-Mask%3CT,+N%3E\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-ToOwned-for-T\">ToOwned</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::simd::prelude</a></h2><h3><a href=\"index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"macro.simd_swizzle.html\">simd_swizzle</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Mask.html\">Mask</a></li><li><a href=\"struct.Simd.html\">Simd</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.SimdConstPtr.html\">SimdConstPtr</a></li><li><a href=\"trait.SimdFloat.html\">SimdFloat</a></li><li><a href=\"trait.SimdInt.html\">SimdInt</a></li><li><a href=\"trait.SimdMutPtr.html\">SimdMutPtr</a></li><li><a href=\"trait.SimdOrd.html\">SimdOrd</a></li><li><a href=\"trait.SimdPartialEq.html\">SimdPartialEq</a></li><li><a href=\"trait.SimdPartialOrd.html\">SimdPartialOrd</a></li><li><a href=\"trait.SimdUint.html\">SimdUint</a></li></ul><h3><a href=\"index.html#types\">Type Aliases</a></h3><ul class=\"block type\"><li><a href=\"type.f32x1.html\">f32x1</a></li><li><a href=\"type.f32x16.html\">f32x16</a></li><li><a href=\"type.f32x2.html\">f32x2</a></li><li><a href=\"type.f32x32.html\">f32x32</a></li><li><a href=\"type.f32x4.html\">f32x4</a></li><li><a href=\"type.f32x64.html\">f32x64</a></li><li><a href=\"type.f32x8.html\">f32x8</a></li><li><a href=\"type.f64x1.html\">f64x1</a></li><li><a href=\"type.f64x16.html\">f64x16</a></li><li><a href=\"type.f64x2.html\">f64x2</a></li><li><a href=\"type.f64x32.html\">f64x32</a></li><li><a href=\"type.f64x4.html\">f64x4</a></li><li><a href=\"type.f64x64.html\">f64x64</a></li><li><a href=\"type.f64x8.html\">f64x8</a></li><li><a href=\"type.i16x1.html\">i16x1</a></li><li><a href=\"type.i16x16.html\">i16x16</a></li><li><a href=\"type.i16x2.html\">i16x2</a></li><li><a href=\"type.i16x32.html\">i16x32</a></li><li><a href=\"type.i16x4.html\">i16x4</a></li><li><a href=\"type.i16x64.html\">i16x64</a></li><li><a href=\"type.i16x8.html\">i16x8</a></li><li><a href=\"type.i32x1.html\">i32x1</a></li><li><a href=\"type.i32x16.html\">i32x16</a></li><li><a href=\"type.i32x2.html\">i32x2</a></li><li><a href=\"type.i32x32.html\">i32x32</a></li><li><a href=\"type.i32x4.html\">i32x4</a></li><li><a href=\"type.i32x64.html\">i32x64</a></li><li><a href=\"type.i32x8.html\">i32x8</a></li><li><a href=\"type.i64x1.html\">i64x1</a></li><li><a href=\"type.i64x16.html\">i64x16</a></li><li><a href=\"type.i64x2.html\">i64x2</a></li><li><a href=\"type.i64x32.html\">i64x32</a></li><li><a href=\"type.i64x4.html\">i64x4</a></li><li><a href=\"type.i64x64.html\">i64x64</a></li><li><a href=\"type.i64x8.html\">i64x8</a></li><li><a href=\"type.i8x1.html\">i8x1</a></li><li><a href=\"type.i8x16.html\">i8x16</a></li><li><a href=\"type.i8x2.html\">i8x2</a></li><li><a href=\"type.i8x32.html\">i8x32</a></li><li><a href=\"type.i8x4.html\">i8x4</a></li><li><a href=\"type.i8x64.html\">i8x64</a></li><li><a href=\"type.i8x8.html\">i8x8</a></li><li><a href=\"type.isizex1.html\">isizex1</a></li><li><a href=\"type.isizex16.html\">isizex16</a></li><li><a href=\"type.isizex2.html\">isizex2</a></li><li><a href=\"type.isizex32.html\">isizex32</a></li><li><a href=\"type.isizex4.html\">isizex4</a></li><li><a href=\"type.isizex64.html\">isizex64</a></li><li><a href=\"type.isizex8.html\">isizex8</a></li><li><a href=\"type.mask16x1.html\">mask16x1</a></li><li><a href=\"type.mask16x16.html\">mask16x16</a></li><li><a href=\"type.mask16x2.html\">mask16x2</a></li><li><a href=\"type.mask16x32.html\">mask16x32</a></li><li><a href=\"type.mask16x4.html\">mask16x4</a></li><li><a href=\"type.mask16x64.html\">mask16x64</a></li><li><a href=\"type.mask16x8.html\">mask16x8</a></li><li><a href=\"type.mask32x1.html\">mask32x1</a></li><li><a href=\"type.mask32x16.html\">mask32x16</a></li><li><a href=\"type.mask32x2.html\">mask32x2</a></li><li><a href=\"type.mask32x32.html\">mask32x32</a></li><li><a href=\"type.mask32x4.html\">mask32x4</a></li><li><a href=\"type.mask32x64.html\">mask32x64</a></li><li><a href=\"type.mask32x8.html\">mask32x8</a></li><li><a href=\"type.mask64x1.html\">mask64x1</a></li><li><a href=\"type.mask64x16.html\">mask64x16</a></li><li><a href=\"type.mask64x2.html\">mask64x2</a></li><li><a href=\"type.mask64x32.html\">mask64x32</a></li><li><a href=\"type.mask64x4.html\">mask64x4</a></li><li><a href=\"type.mask64x64.html\">mask64x64</a></li><li><a href=\"type.mask64x8.html\">mask64x8</a></li><li><a href=\"type.mask8x1.html\">mask8x1</a></li><li><a href=\"type.mask8x16.html\">mask8x16</a></li><li><a href=\"type.mask8x2.html\">mask8x2</a></li><li><a href=\"type.mask8x32.html\">mask8x32</a></li><li><a href=\"type.mask8x4.html\">mask8x4</a></li><li><a href=\"type.mask8x64.html\">mask8x64</a></li><li><a href=\"type.mask8x8.html\">mask8x8</a></li><li><a href=\"type.masksizex1.html\">masksizex1</a></li><li><a href=\"type.masksizex16.html\">masksizex16</a></li><li><a href=\"type.masksizex2.html\">masksizex2</a></li><li><a href=\"type.masksizex32.html\">masksizex32</a></li><li><a href=\"type.masksizex4.html\">masksizex4</a></li><li><a href=\"type.masksizex64.html\">masksizex64</a></li><li><a href=\"type.masksizex8.html\">masksizex8</a></li><li><a href=\"type.u16x1.html\">u16x1</a></li><li><a href=\"type.u16x16.html\">u16x16</a></li><li><a href=\"type.u16x2.html\">u16x2</a></li><li><a href=\"type.u16x32.html\">u16x32</a></li><li><a href=\"type.u16x4.html\">u16x4</a></li><li><a href=\"type.u16x64.html\">u16x64</a></li><li><a href=\"type.u16x8.html\">u16x8</a></li><li><a href=\"type.u32x1.html\">u32x1</a></li><li><a href=\"type.u32x16.html\">u32x16</a></li><li><a href=\"type.u32x2.html\">u32x2</a></li><li><a href=\"type.u32x32.html\">u32x32</a></li><li><a href=\"type.u32x4.html\">u32x4</a></li><li><a href=\"type.u32x64.html\">u32x64</a></li><li><a href=\"type.u32x8.html\">u32x8</a></li><li><a href=\"type.u64x1.html\">u64x1</a></li><li><a href=\"type.u64x16.html\">u64x16</a></li><li><a href=\"type.u64x2.html\">u64x2</a></li><li><a href=\"type.u64x32.html\">u64x32</a></li><li><a href=\"type.u64x4.html\">u64x4</a></li><li><a href=\"type.u64x64.html\">u64x64</a></li><li><a href=\"type.u64x8.html\">u64x8</a></li><li><a href=\"type.u8x1.html\">u8x1</a></li><li><a href=\"type.u8x16.html\">u8x16</a></li><li><a href=\"type.u8x2.html\">u8x2</a></li><li><a href=\"type.u8x32.html\">u8x32</a></li><li><a href=\"type.u8x4.html\">u8x4</a></li><li><a href=\"type.u8x64.html\">u8x64</a></li><li><a href=\"type.u8x8.html\">u8x8</a></li><li><a href=\"type.usizex1.html\">usizex1</a></li><li><a href=\"type.usizex16.html\">usizex16</a></li><li><a href=\"type.usizex2.html\">usizex2</a></li><li><a href=\"type.usizex32.html\">usizex32</a></li><li><a href=\"type.usizex4.html\">usizex4</a></li><li><a href=\"type.usizex64.html\">usizex64</a></li><li><a href=\"type.usizex8.html\">usizex8</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../../index.html\">std</a>::<wbr><a href=\"../index.html\">simd</a>::<wbr><a href=\"index.html\">prelude</a>::<wbr><a class=\"struct\" href=\"#\">Mask</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#112\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct Mask&lt;T, const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt;(<span class=\"comment\">/* private fields */</span>)\n<span class=\"where\">where\n    T: <a class=\"trait\" href=\"../trait.MaskElement.html\" title=\"trait std::simd::MaskElement\">MaskElement</a>,\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a></span>;</code></pre><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A SIMD vector mask for <code>N</code> elements of width specified by <code>Element</code>.</p>\n<p>Masks represent boolean inclusion/exclusion on a per-element basis.</p>\n<p>The layout of this type is unspecified, and may change between platforms\nand/or Rust versions, and code should not assume that it is equivalent to\n<code>[T; N]</code>.</p>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Mask%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#135-138\">source</a><a href=\"#impl-Mask%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../trait.MaskElement.html\" title=\"trait std::simd::MaskElement\">MaskElement</a>,\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.splat\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#142\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.splat\" class=\"fn\">splat</a>(value: <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a>) -&gt; <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Construct a mask by setting all elements to the given value.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_array\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#148\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.from_array\" class=\"fn\">from_array</a>(array: [<a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a>; <a class=\"primitive\" href=\"../../primitive.array.html\">N</a>]) -&gt; <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Converts an array of bools to a SIMD mask.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_array\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#165\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.to_array\" class=\"fn\">to_array</a>(self) -&gt; [<a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a>; <a class=\"primitive\" href=\"../../primitive.array.html\">N</a>]</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Converts a SIMD mask to an array of bools.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_int_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#190\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.from_int_unchecked\" class=\"fn\">from_int_unchecked</a>(value: <a class=\"struct\" href=\"struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;) -&gt; <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Converts a vector of integers to a mask, where 0 represents <code>false</code> and -1\nrepresents <code>true</code>.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>All elements must be either 0 or -1.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_int\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#206\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.from_int\" class=\"fn\">from_int</a>(value: <a class=\"struct\" href=\"struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;) -&gt; <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Converts a vector of integers to a mask, where 0 represents <code>false</code> and -1\nrepresents <code>true</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if any element is not 0 or -1.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_int\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#216\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.to_int\" class=\"fn\">to_int</a>(self) -&gt; <a class=\"struct\" href=\"struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Converts the mask to a vector of integers, where 0 represents <code>false</code> and -1\nrepresents <code>true</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.cast\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#223\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.cast\" class=\"fn\">cast</a>&lt;U&gt;(self) -&gt; <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;U, N&gt;<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../trait.MaskElement.html\" title=\"trait std::simd::MaskElement\">MaskElement</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Converts the mask to a mask of any other element size.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.test_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#233\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.test_unchecked\" class=\"fn\">test_unchecked</a>(&amp;self, index: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Tests the value of the specified element.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p><code>index</code> must be less than <code>self.len()</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.test\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#245\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.test\" class=\"fn\">test</a>(&amp;self, index: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Tests the value of the specified element.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if <code>index</code> is greater than or equal to the number of elements in the vector.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.set_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#256\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"#method.set_unchecked\" class=\"fn\">set_unchecked</a>(&amp;mut self, index: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>, value: <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Sets the value of the specified element.</p>\n<h5 id=\"safety-2\"><a class=\"doc-anchor\" href=\"#safety-2\">§</a>Safety</h5>\n<p><code>index</code> must be less than <code>self.len()</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.set\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#269\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.set\" class=\"fn\">set</a>(&amp;mut self, index: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>, value: <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Sets the value of the specified element.</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h5>\n<p>Panics if <code>index</code> is greater than or equal to the number of elements in the vector.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.any\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#280\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.any\" class=\"fn\">any</a>(self) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns true if any element is set, or false otherwise.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.all\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#287\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.all\" class=\"fn\">all</a>(self) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns true if all elements are set, or false otherwise.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_bitmask\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#297\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.to_bitmask\" class=\"fn\">to_bitmask</a>(self) -&gt; <a class=\"primitive\" href=\"../../primitive.u64.html\">u64</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Create a bitmask from a mask.</p>\n<p>Each bit is set if the corresponding element in the mask is <code>true</code>.\nIf the mask contains more than 64 elements, the bitmask is truncated to the first 64.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_bitmask\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#307\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.from_bitmask\" class=\"fn\">from_bitmask</a>(bitmask: <a class=\"primitive\" href=\"../../primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Create a mask from a bitmask.</p>\n<p>For each bit, if it is set, the corresponding element in the mask is set to <code>true</code>.\nIf the mask contains more than 64 elements, the remainder are set to <code>false</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_bitmask_vector\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#327\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.to_bitmask_vector\" class=\"fn\">to_bitmask_vector</a>(self) -&gt; <a class=\"struct\" href=\"struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>, N&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Create a bitmask vector from a mask.</p>\n<p>Each bit is set if the corresponding element in the mask is <code>true</code>.\nThe remaining bits are unset.</p>\n<p>The bits are packed into the first N bits of the vector:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>mask = mask32x8::from_array([<span class=\"bool-val\">true</span>, <span class=\"bool-val\">false</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">false</span>, <span class=\"bool-val\">false</span>, <span class=\"bool-val\">false</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">false</span>]);\n<span class=\"macro\">assert_eq!</span>(mask.to_bitmask_vector()[<span class=\"number\">0</span>], <span class=\"number\">0b01000101</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::mask32x8;%0A++++let+mask+=+mask32x8::from_array(%5Btrue,+false,+true,+false,+false,+false,+true,+false%5D);%0A++++assert_eq!(mask.to_bitmask_vector()%5B0%5D,+0b01000101);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_bitmask_vector\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#349\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.from_bitmask_vector\" class=\"fn\">from_bitmask_vector</a>(bitmask: <a class=\"struct\" href=\"struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;<a class=\"primitive\" href=\"../../primitive.u8.html\">u8</a>, N&gt;) -&gt; <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Create a mask from a bitmask vector.</p>\n<p>For each bit, if it is set, the corresponding element in the mask is set to <code>true</code>.</p>\n<p>The bits are packed into the first N bits of the vector:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bitmask = u8x8::from_array([<span class=\"number\">0b01000101</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]);\n<span class=\"macro\">assert_eq!</span>(\n    mask32x8::from_bitmask_vector(bitmask),\n    mask32x8::from_array([<span class=\"bool-val\">true</span>, <span class=\"bool-val\">false</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">false</span>, <span class=\"bool-val\">false</span>, <span class=\"bool-val\">false</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">false</span>]),\n);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::%7Bmask32x8,+u8x8%7D;%0A++++let+bitmask+=+u8x8::from_array(%5B0b01000101,+0,+0,+0,+0,+0,+0,+0%5D);%0A++++assert_eq!(%0A++++++++mask32x8::from_bitmask_vector(bitmask),%0A++++++++mask32x8::from_array(%5Btrue,+false,+true,+false,+false,+false,+true,+false%5D),%0A++++);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.first_set\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#368\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.first_set\" class=\"fn\">first_set</a>(self) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Find the index of the first set element.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(mask32x8::splat(<span class=\"bool-val\">false</span>).first_set(), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(mask32x8::splat(<span class=\"bool-val\">true</span>).first_set(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>));\n\n<span class=\"kw\">let </span>mask = mask32x8::from_array([<span class=\"bool-val\">false</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">false</span>, <span class=\"bool-val\">false</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">false</span>, <span class=\"bool-val\">false</span>, <span class=\"bool-val\">true</span>]);\n<span class=\"macro\">assert_eq!</span>(mask.first_set(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++%23%5Bcfg(feature+=+%22as_crate%22)%5D+use+core_simd::simd;%0A++++%23%5Bcfg(not(feature+=+%22as_crate%22))%5D+use+core::simd;%0A++++use+simd::mask32x8;%0A++++assert_eq!(mask32x8::splat(false).first_set(),+None);%0A++++assert_eq!(mask32x8::splat(true).first_set(),+Some(0));%0A++++%0A++++let+mask+=+mask32x8::from_array(%5Bfalse,+true,+false,+false,+true,+false,+false,+true%5D);%0A++++assert_eq!(mask.first_set(),+Some(1));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Mask%3CT,+N%3E-1\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/select.rs.html#3-6\">source</a><a href=\"#impl-Mask%3CT,+N%3E-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../trait.MaskElement.html\" title=\"trait std::simd::MaskElement\">MaskElement</a>,\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.select\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/select.rs.html#25-27\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.select\" class=\"fn\">select</a>&lt;U&gt;(\n    self,\n    true_values: <a class=\"struct\" href=\"struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;U, N&gt;,\n    false_values: <a class=\"struct\" href=\"struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;U, N&gt;,\n) -&gt; <a class=\"struct\" href=\"struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;U, N&gt;<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a>&lt;Mask = T&gt;,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Choose elements from two vectors.</p>\n<p>For each element in the mask, choose the corresponding element from <code>true_values</code> if\nthat element mask is true, and <code>false_values</code> if that element mask is false.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = Simd::from_array([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);\n<span class=\"kw\">let </span>b = Simd::from_array([<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>]);\n<span class=\"kw\">let </span>mask = Mask::from_array([<span class=\"bool-val\">true</span>, <span class=\"bool-val\">false</span>, <span class=\"bool-val\">false</span>, <span class=\"bool-val\">true</span>]);\n<span class=\"kw\">let </span>c = mask.select(a, b);\n<span class=\"macro\">assert_eq!</span>(c.to_array(), [<span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++use+core::simd::%7BSimd,+Mask%7D;%0A++++let+a+=+Simd::from_array(%5B0,+1,+2,+3%5D);%0A++++let+b+=+Simd::from_array(%5B4,+5,+6,+7%5D);%0A++++let+mask+=+Mask::from_array(%5Btrue,+false,+false,+true%5D);%0A++++let+c+=+mask.select(a,+b);%0A++++assert_eq!(c.to_array(),+%5B0,+5,+6,+3%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.select_mask\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/select.rs.html#51\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.select_mask\" class=\"fn\">select_mask</a>(\n    self,\n    true_values: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;,\n    false_values: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;,\n) -&gt; <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span></summary><div class=\"docblock\"><p>Choose elements from two masks.</p>\n<p>For each element in the mask, choose the corresponding element from <code>true_values</code> if\nthat element mask is true, and <code>false_values</code> if that element mask is false.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a = Mask::&lt;i32, <span class=\"number\">4</span>&gt;::from_array([<span class=\"bool-val\">true</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">false</span>, <span class=\"bool-val\">false</span>]);\n<span class=\"kw\">let </span>b = Mask::&lt;i32, <span class=\"number\">4</span>&gt;::from_array([<span class=\"bool-val\">false</span>, <span class=\"bool-val\">false</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">true</span>]);\n<span class=\"kw\">let </span>mask = Mask::&lt;i32, <span class=\"number\">4</span>&gt;::from_array([<span class=\"bool-val\">true</span>, <span class=\"bool-val\">false</span>, <span class=\"bool-val\">false</span>, <span class=\"bool-val\">true</span>]);\n<span class=\"kw\">let </span>c = mask.select_mask(a, b);\n<span class=\"macro\">assert_eq!</span>(c.to_array(), [<span class=\"bool-val\">true</span>, <span class=\"bool-val\">false</span>, <span class=\"bool-val\">true</span>, <span class=\"bool-val\">false</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(portable_simd)%5D%0Afn+main()+%7B%0A++++use+core::simd::Mask;%0A++++let+a+=+Mask::%3Ci32,+4%3E::from_array(%5Btrue,+true,+false,+false%5D);%0A++++let+b+=+Mask::%3Ci32,+4%3E::from_array(%5Bfalse,+false,+true,+true%5D);%0A++++let+mask+=+Mask::%3Ci32,+4%3E::from_array(%5Btrue,+false,+false,+true%5D);%0A++++let+c+=+mask.select_mask(a,+b);%0A++++assert_eq!(c.to_array(),+%5Btrue,+false,+true,+false%5D);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitAnd%3CMask%3CT,+N%3E%3E-for-bool\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#515-518\">source</a><a href=\"#impl-BitAnd%3CMask%3CT,+N%3E%3E-for-bool\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;<a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;&gt; for <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"../trait.MaskElement.html\" title=\"trait std::simd::MaskElement\">MaskElement</a>,\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-3\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-3\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../ops/trait.BitAnd.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitand\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#523\">source</a><a href=\"#method.bitand\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../ops/trait.BitAnd.html#tymethod.bitand\" class=\"fn\">bitand</a>(self, rhs: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;) -&gt; <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">Performs the <code>&amp;</code> operation. <a href=\"../../ops/trait.BitAnd.html#tymethod.bitand\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitAnd%3Cbool%3E-for-Mask%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#502-505\">source</a><a href=\"#impl-BitAnd%3Cbool%3E-for-Mask%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a>&lt;<a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a>&gt; for <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../trait.MaskElement.html\" title=\"trait std::simd::MaskElement\">MaskElement</a>,\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-4\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-4\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../ops/trait.BitAnd.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitand-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#510\">source</a><a href=\"#method.bitand-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../ops/trait.BitAnd.html#tymethod.bitand\" class=\"fn\">bitand</a>(self, rhs: <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a>) -&gt; <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">Performs the <code>&amp;</code> operation. <a href=\"../../ops/trait.BitAnd.html#tymethod.bitand\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitAnd-for-Mask%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#489-492\">source</a><a href=\"#impl-BitAnd-for-Mask%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../ops/trait.BitAnd.html\" title=\"trait std::ops::BitAnd\">BitAnd</a> for <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../trait.MaskElement.html\" title=\"trait std::simd::MaskElement\">MaskElement</a>,\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-5\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-5\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../ops/trait.BitAnd.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitand-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#497\">source</a><a href=\"#method.bitand-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../ops/trait.BitAnd.html#tymethod.bitand\" class=\"fn\">bitand</a>(self, rhs: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;) -&gt; <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">Performs the <code>&amp;</code> operation. <a href=\"../../ops/trait.BitAnd.html#tymethod.bitand\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitAndAssign%3Cbool%3E-for-Mask%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#630-633\">source</a><a href=\"#impl-BitAndAssign%3Cbool%3E-for-Mask%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../ops/trait.BitAndAssign.html\" title=\"trait std::ops::BitAndAssign\">BitAndAssign</a>&lt;<a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a>&gt; for <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../trait.MaskElement.html\" title=\"trait std::simd::MaskElement\">MaskElement</a>,\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitand_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#636\">source</a><a href=\"#method.bitand_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../ops/trait.BitAndAssign.html#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, rhs: <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\">Performs the <code>&amp;=</code> operation. <a href=\"../../ops/trait.BitAndAssign.html#tymethod.bitand_assign\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitAndAssign-for-Mask%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#619-622\">source</a><a href=\"#impl-BitAndAssign-for-Mask%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../ops/trait.BitAndAssign.html\" title=\"trait std::ops::BitAndAssign\">BitAndAssign</a> for <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../trait.MaskElement.html\" title=\"trait std::simd::MaskElement\">MaskElement</a>,\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitand_assign-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#625\">source</a><a href=\"#method.bitand_assign-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../ops/trait.BitAndAssign.html#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, rhs: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;)</h4></section></summary><div class=\"docblock\">Performs the <code>&amp;=</code> operation. <a href=\"../../ops/trait.BitAndAssign.html#tymethod.bitand_assign\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitOr%3CMask%3CT,+N%3E%3E-for-bool\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#554-557\">source</a><a href=\"#impl-BitOr%3CMask%3CT,+N%3E%3E-for-bool\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;&gt; for <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"../trait.MaskElement.html\" title=\"trait std::simd::MaskElement\">MaskElement</a>,\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../ops/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#562\">source</a><a href=\"#method.bitor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../ops/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;) -&gt; <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">Performs the <code>|</code> operation. <a href=\"../../ops/trait.BitOr.html#tymethod.bitor\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitOr%3Cbool%3E-for-Mask%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#541-544\">source</a><a href=\"#impl-BitOr%3Cbool%3E-for-Mask%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a>&lt;<a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a>&gt; for <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../trait.MaskElement.html\" title=\"trait std::simd::MaskElement\">MaskElement</a>,\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-2\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../ops/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitor-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#549\">source</a><a href=\"#method.bitor-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../ops/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a>) -&gt; <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">Performs the <code>|</code> operation. <a href=\"../../ops/trait.BitOr.html#tymethod.bitor\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitOr-for-Mask%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#528-531\">source</a><a href=\"#impl-BitOr-for-Mask%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../ops/trait.BitOr.html\" title=\"trait std::ops::BitOr\">BitOr</a> for <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../trait.MaskElement.html\" title=\"trait std::simd::MaskElement\">MaskElement</a>,\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../ops/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitor-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#536\">source</a><a href=\"#method.bitor-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../ops/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;) -&gt; <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">Performs the <code>|</code> operation. <a href=\"../../ops/trait.BitOr.html#tymethod.bitor\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitOrAssign%3Cbool%3E-for-Mask%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#652-655\">source</a><a href=\"#impl-BitOrAssign%3Cbool%3E-for-Mask%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../ops/trait.BitOrAssign.html\" title=\"trait std::ops::BitOrAssign\">BitOrAssign</a>&lt;<a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a>&gt; for <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../trait.MaskElement.html\" title=\"trait std::simd::MaskElement\">MaskElement</a>,\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitor_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#658\">source</a><a href=\"#method.bitor_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../ops/trait.BitOrAssign.html#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, rhs: <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\">Performs the <code>|=</code> operation. <a href=\"../../ops/trait.BitOrAssign.html#tymethod.bitor_assign\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitOrAssign-for-Mask%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#641-644\">source</a><a href=\"#impl-BitOrAssign-for-Mask%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../ops/trait.BitOrAssign.html\" title=\"trait std::ops::BitOrAssign\">BitOrAssign</a> for <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../trait.MaskElement.html\" title=\"trait std::simd::MaskElement\">MaskElement</a>,\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitor_assign-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#647\">source</a><a href=\"#method.bitor_assign-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../ops/trait.BitOrAssign.html#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, rhs: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;)</h4></section></summary><div class=\"docblock\">Performs the <code>|=</code> operation. <a href=\"../../ops/trait.BitOrAssign.html#tymethod.bitor_assign\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitXor%3CMask%3CT,+N%3E%3E-for-bool\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#593-596\">source</a><a href=\"#impl-BitXor%3CMask%3CT,+N%3E%3E-for-bool\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;<a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;&gt; for <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"../trait.MaskElement.html\" title=\"trait std::simd::MaskElement\">MaskElement</a>,\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-8\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-8\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../ops/trait.BitXor.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitxor-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#601\">source</a><a href=\"#method.bitxor-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../ops/trait.BitXor.html#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, rhs: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;) -&gt; &lt;<a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a> as <a class=\"trait\" href=\"../../ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;<a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"../../ops/trait.BitXor.html#associatedtype.Output\" title=\"type std::ops::BitXor::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>^</code> operation. <a href=\"../../ops/trait.BitXor.html#tymethod.bitxor\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitXor%3Cbool%3E-for-Mask%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#580-583\">source</a><a href=\"#impl-BitXor%3Cbool%3E-for-Mask%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;<a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a>&gt; for <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../trait.MaskElement.html\" title=\"trait std::simd::MaskElement\">MaskElement</a>,\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-7\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-7\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../ops/trait.BitXor.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitxor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#588\">source</a><a href=\"#method.bitxor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../ops/trait.BitXor.html#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, rhs: <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a>) -&gt; &lt;<a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt; as <a class=\"trait\" href=\"../../ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&lt;<a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a>&gt;&gt;::<a class=\"associatedtype\" href=\"../../ops/trait.BitXor.html#associatedtype.Output\" title=\"type std::ops::BitXor::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>^</code> operation. <a href=\"../../ops/trait.BitXor.html#tymethod.bitxor\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitXor-for-Mask%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#567-570\">source</a><a href=\"#impl-BitXor-for-Mask%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a> for <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../trait.MaskElement.html\" title=\"trait std::simd::MaskElement\">MaskElement</a>,\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-9\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-9\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../ops/trait.BitXor.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitxor-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#575\">source</a><a href=\"#method.bitxor-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../ops/trait.BitXor.html#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, rhs: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt; as <a class=\"trait\" href=\"../../ops/trait.BitXor.html\" title=\"trait std::ops::BitXor\">BitXor</a>&gt;::<a class=\"associatedtype\" href=\"../../ops/trait.BitXor.html#associatedtype.Output\" title=\"type std::ops::BitXor::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the <code>^</code> operation. <a href=\"../../ops/trait.BitXor.html#tymethod.bitxor\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitXorAssign%3Cbool%3E-for-Mask%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#674-677\">source</a><a href=\"#impl-BitXorAssign%3Cbool%3E-for-Mask%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../ops/trait.BitXorAssign.html\" title=\"trait std::ops::BitXorAssign\">BitXorAssign</a>&lt;<a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a>&gt; for <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../trait.MaskElement.html\" title=\"trait std::simd::MaskElement\">MaskElement</a>,\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitxor_assign-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#680\">source</a><a href=\"#method.bitxor_assign-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../ops/trait.BitXorAssign.html#tymethod.bitxor_assign\" class=\"fn\">bitxor_assign</a>(&amp;mut self, rhs: <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\">Performs the <code>^=</code> operation. <a href=\"../../ops/trait.BitXorAssign.html#tymethod.bitxor_assign\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-BitXorAssign-for-Mask%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#663-666\">source</a><a href=\"#impl-BitXorAssign-for-Mask%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../ops/trait.BitXorAssign.html\" title=\"trait std::ops::BitXorAssign\">BitXorAssign</a> for <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../trait.MaskElement.html\" title=\"trait std::simd::MaskElement\">MaskElement</a>,\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bitxor_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#669\">source</a><a href=\"#method.bitxor_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../ops/trait.BitXorAssign.html#tymethod.bitxor_assign\" class=\"fn\">bitxor_assign</a>(&amp;mut self, rhs: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;)</h4></section></summary><div class=\"docblock\">Performs the <code>^=</code> operation. <a href=\"../../ops/trait.BitXorAssign.html#tymethod.bitxor_assign\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Clone-for-Mask%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#124-127\">source</a><a href=\"#impl-Clone-for-Mask%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../trait.MaskElement.html\" title=\"trait std::simd::MaskElement\">MaskElement</a>,\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#130\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">Returns a copy of the value. <a href=\"../../clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class=\"docblock\">Performs copy-assignment from <code>source</code>. <a href=\"../../clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-Mask%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#476-479\">source</a><a href=\"#impl-Debug-for-Mask%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../trait.MaskElement.html\" title=\"trait std::simd::MaskElement\">MaskElement</a> + <a class=\"trait\" href=\"../../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a>,\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#482\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../../fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-Mask%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#440-443\">source</a><a href=\"#impl-Default-for-Mask%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../trait.MaskElement.html\" title=\"trait std::simd::MaskElement\">MaskElement</a>,\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#447\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">Returns the “default value” for a type. <a href=\"../../default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3C%5Bbool;+N%5D%3E-for-Mask%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#418-421\">source</a><a href=\"#impl-From%3C%5Bbool;+N%5D%3E-for-Mask%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;[<a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a>; <a class=\"primitive\" href=\"../../primitive.array.html\">N</a>]&gt; for <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../trait.MaskElement.html\" title=\"trait std::simd::MaskElement\">MaskElement</a>,\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#424\">source</a><a href=\"#method.from-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(array: [<a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a>; <a class=\"primitive\" href=\"../../primitive.array.html\">N</a>]) -&gt; <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CMask%3CT,+N%3E%3E-for-%5Bbool;+N%5D\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#429-432\">source</a><a href=\"#impl-From%3CMask%3CT,+N%3E%3E-for-%5Bbool;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;&gt; for [<a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a>; <a class=\"primitive\" href=\"../../primitive.array.html\">N</a>]<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../trait.MaskElement.html\" title=\"trait std::simd::MaskElement\">MaskElement</a>,\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-9\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#435\">source</a><a href=\"#method.from-9\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(vector: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;) -&gt; [<a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a>; <a class=\"primitive\" href=\"../../primitive.array.html\">N</a>]</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CMask%3Ci16,+N%3E%3E-for-Mask%3Ci32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#701\">source</a><a href=\"#impl-From%3CMask%3Ci16,+N%3E%3E-for-Mask%3Ci32,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i16.html\">i16</a>, N&gt;&gt; for <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i32.html\">i32</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-18\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#701\">source</a><a href=\"#method.from-18\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i16.html\">i16</a>, N&gt;) -&gt; <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i32.html\">i32</a>, N&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CMask%3Ci16,+N%3E%3E-for-Mask%3Ci64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#701\">source</a><a href=\"#impl-From%3CMask%3Ci16,+N%3E%3E-for-Mask%3Ci64,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i16.html\">i16</a>, N&gt;&gt; for <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i64.html\">i64</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#701\">source</a><a href=\"#method.from-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i16.html\">i16</a>, N&gt;) -&gt; <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i64.html\">i64</a>, N&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CMask%3Ci16,+N%3E%3E-for-Mask%3Ci8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#701\">source</a><a href=\"#impl-From%3CMask%3Ci16,+N%3E%3E-for-Mask%3Ci8,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i16.html\">i16</a>, N&gt;&gt; for <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i8.html\">i8</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-5\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#701\">source</a><a href=\"#method.from-5\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i16.html\">i16</a>, N&gt;) -&gt; <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i8.html\">i8</a>, N&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CMask%3Ci16,+N%3E%3E-for-Mask%3Cisize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#701\">source</a><a href=\"#impl-From%3CMask%3Ci16,+N%3E%3E-for-Mask%3Cisize,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i16.html\">i16</a>, N&gt;&gt; for <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.isize.html\">isize</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#701\">source</a><a href=\"#method.from-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i16.html\">i16</a>, N&gt;) -&gt; <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.isize.html\">isize</a>, N&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CMask%3Ci32,+N%3E%3E-for-Mask%3Ci16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#702\">source</a><a href=\"#impl-From%3CMask%3Ci32,+N%3E%3E-for-Mask%3Ci16,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i32.html\">i32</a>, N&gt;&gt; for <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i16.html\">i16</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-11\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#702\">source</a><a href=\"#method.from-11\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i32.html\">i32</a>, N&gt;) -&gt; <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i16.html\">i16</a>, N&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CMask%3Ci32,+N%3E%3E-for-Mask%3Ci64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#702\">source</a><a href=\"#impl-From%3CMask%3Ci32,+N%3E%3E-for-Mask%3Ci64,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i32.html\">i32</a>, N&gt;&gt; for <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i64.html\">i64</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-19\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#702\">source</a><a href=\"#method.from-19\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i32.html\">i32</a>, N&gt;) -&gt; <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i64.html\">i64</a>, N&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CMask%3Ci32,+N%3E%3E-for-Mask%3Ci8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#702\">source</a><a href=\"#impl-From%3CMask%3Ci32,+N%3E%3E-for-Mask%3Ci8,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i32.html\">i32</a>, N&gt;&gt; for <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i8.html\">i8</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#702\">source</a><a href=\"#method.from-16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i32.html\">i32</a>, N&gt;) -&gt; <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i8.html\">i8</a>, N&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CMask%3Ci32,+N%3E%3E-for-Mask%3Cisize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#702\">source</a><a href=\"#impl-From%3CMask%3Ci32,+N%3E%3E-for-Mask%3Cisize,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i32.html\">i32</a>, N&gt;&gt; for <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.isize.html\">isize</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-12\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#702\">source</a><a href=\"#method.from-12\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i32.html\">i32</a>, N&gt;) -&gt; <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.isize.html\">isize</a>, N&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CMask%3Ci64,+N%3E%3E-for-Mask%3Ci16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#703\">source</a><a href=\"#impl-From%3CMask%3Ci64,+N%3E%3E-for-Mask%3Ci16,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i64.html\">i64</a>, N&gt;&gt; for <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i16.html\">i16</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-21\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#703\">source</a><a href=\"#method.from-21\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i64.html\">i64</a>, N&gt;) -&gt; <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i16.html\">i16</a>, N&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CMask%3Ci64,+N%3E%3E-for-Mask%3Ci32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#703\">source</a><a href=\"#impl-From%3CMask%3Ci64,+N%3E%3E-for-Mask%3Ci32,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i64.html\">i64</a>, N&gt;&gt; for <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i32.html\">i32</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-14\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#703\">source</a><a href=\"#method.from-14\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i64.html\">i64</a>, N&gt;) -&gt; <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i32.html\">i32</a>, N&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CMask%3Ci64,+N%3E%3E-for-Mask%3Ci8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#703\">source</a><a href=\"#impl-From%3CMask%3Ci64,+N%3E%3E-for-Mask%3Ci8,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i64.html\">i64</a>, N&gt;&gt; for <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i8.html\">i8</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#703\">source</a><a href=\"#method.from-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i64.html\">i64</a>, N&gt;) -&gt; <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i8.html\">i8</a>, N&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CMask%3Ci64,+N%3E%3E-for-Mask%3Cisize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#703\">source</a><a href=\"#impl-From%3CMask%3Ci64,+N%3E%3E-for-Mask%3Cisize,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i64.html\">i64</a>, N&gt;&gt; for <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.isize.html\">isize</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#703\">source</a><a href=\"#method.from-8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i64.html\">i64</a>, N&gt;) -&gt; <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.isize.html\">isize</a>, N&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CMask%3Ci8,+N%3E%3E-for-Mask%3Ci16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#700\">source</a><a href=\"#impl-From%3CMask%3Ci8,+N%3E%3E-for-Mask%3Ci16,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i8.html\">i8</a>, N&gt;&gt; for <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i16.html\">i16</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-17\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#700\">source</a><a href=\"#method.from-17\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i8.html\">i8</a>, N&gt;) -&gt; <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i16.html\">i16</a>, N&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CMask%3Ci8,+N%3E%3E-for-Mask%3Ci32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#700\">source</a><a href=\"#impl-From%3CMask%3Ci8,+N%3E%3E-for-Mask%3Ci32,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i8.html\">i8</a>, N&gt;&gt; for <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i32.html\">i32</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-10\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#700\">source</a><a href=\"#method.from-10\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i8.html\">i8</a>, N&gt;) -&gt; <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i32.html\">i32</a>, N&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CMask%3Ci8,+N%3E%3E-for-Mask%3Ci64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#700\">source</a><a href=\"#impl-From%3CMask%3Ci8,+N%3E%3E-for-Mask%3Ci64,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i8.html\">i8</a>, N&gt;&gt; for <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i64.html\">i64</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-15\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#700\">source</a><a href=\"#method.from-15\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i8.html\">i8</a>, N&gt;) -&gt; <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i64.html\">i64</a>, N&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CMask%3Ci8,+N%3E%3E-for-Mask%3Cisize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#700\">source</a><a href=\"#impl-From%3CMask%3Ci8,+N%3E%3E-for-Mask%3Cisize,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i8.html\">i8</a>, N&gt;&gt; for <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.isize.html\">isize</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#700\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i8.html\">i8</a>, N&gt;) -&gt; <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.isize.html\">isize</a>, N&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CMask%3Cisize,+N%3E%3E-for-Mask%3Ci16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#704\">source</a><a href=\"#impl-From%3CMask%3Cisize,+N%3E%3E-for-Mask%3Ci16,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.isize.html\">isize</a>, N&gt;&gt; for <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i16.html\">i16</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-13\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#704\">source</a><a href=\"#method.from-13\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.isize.html\">isize</a>, N&gt;) -&gt; <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i16.html\">i16</a>, N&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CMask%3Cisize,+N%3E%3E-for-Mask%3Ci32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#704\">source</a><a href=\"#impl-From%3CMask%3Cisize,+N%3E%3E-for-Mask%3Ci32,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.isize.html\">isize</a>, N&gt;&gt; for <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i32.html\">i32</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-6\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#704\">source</a><a href=\"#method.from-6\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.isize.html\">isize</a>, N&gt;) -&gt; <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i32.html\">i32</a>, N&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CMask%3Cisize,+N%3E%3E-for-Mask%3Ci64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#704\">source</a><a href=\"#impl-From%3CMask%3Cisize,+N%3E%3E-for-Mask%3Ci64,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.isize.html\">isize</a>, N&gt;&gt; for <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i64.html\">i64</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-20\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#704\">source</a><a href=\"#method.from-20\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.isize.html\">isize</a>, N&gt;) -&gt; <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i64.html\">i64</a>, N&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CMask%3Cisize,+N%3E%3E-for-Mask%3Ci8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#704\">source</a><a href=\"#impl-From%3CMask%3Cisize,+N%3E%3E-for-Mask%3Ci8,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.isize.html\">isize</a>, N&gt;&gt; for <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i8.html\">i8</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-7\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#704\">source</a><a href=\"#method.from-7\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.isize.html\">isize</a>, N&gt;) -&gt; <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i8.html\">i8</a>, N&gt;</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Not-for-Mask%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#606-609\">source</a><a href=\"#impl-Not-for-Mask%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../ops/trait.Not.html\" title=\"trait std::ops::Not\">Not</a> for <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../trait.MaskElement.html\" title=\"trait std::simd::MaskElement\">MaskElement</a>,\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Output-6\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output-6\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../ops/trait.Not.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;</h4></section></summary><div class=\"docblock\">The resulting type after applying the <code>!</code> operator.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.not\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#614\">source</a><a href=\"#method.not\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../ops/trait.Not.html#tymethod.not\" class=\"fn\">not</a>(self) -&gt; &lt;<a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt; as <a class=\"trait\" href=\"../../ops/trait.Not.html\" title=\"trait std::ops::Not\">Not</a>&gt;::<a class=\"associatedtype\" href=\"../../ops/trait.Not.html#associatedtype.Output\" title=\"type std::ops::Not::Output\">Output</a></h4></section></summary><div class=\"docblock\">Performs the unary <code>!</code> operation. <a href=\"../../ops/trait.Not.html#tymethod.not\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq-for-Mask%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#452-455\">source</a><a href=\"#impl-PartialEq-for-Mask%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../trait.MaskElement.html\" title=\"trait std::simd::MaskElement\">MaskElement</a> + <a class=\"trait\" href=\"../../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>,\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#459\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialOrd-for-Mask%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#464-467\">source</a><a href=\"#impl-PartialOrd-for-Mask%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../trait.MaskElement.html\" title=\"trait std::simd::MaskElement\">MaskElement</a> + <a class=\"trait\" href=\"../../cmp/trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>,\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#471\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"../../cmp/enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\">This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"../../cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"../../cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"../../cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"../../cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"../../cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdOrd-for-Mask%3Ci16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219\">source</a><a href=\"#impl-SimdOrd-for-Mask%3Ci16,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"trait.SimdOrd.html\" title=\"trait std::simd::prelude::SimdOrd\">SimdOrd</a> for <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i16.html\">i16</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_max-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219\">source</a><a href=\"#method.simd_max-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.SimdOrd.html#tymethod.simd_max\" class=\"fn\">simd_max</a>(self, other: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i16.html\">i16</a>, N&gt;) -&gt; <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i16.html\">i16</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the element-wise maximum with <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_min-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219\">source</a><a href=\"#method.simd_min-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.SimdOrd.html#tymethod.simd_min\" class=\"fn\">simd_min</a>(self, other: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i16.html\">i16</a>, N&gt;) -&gt; <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i16.html\">i16</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the element-wise minimum with <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_clamp-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219\">source</a><a href=\"#method.simd_clamp-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.SimdOrd.html#tymethod.simd_clamp\" class=\"fn\">simd_clamp</a>(self, min: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i16.html\">i16</a>, N&gt;, max: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i16.html\">i16</a>, N&gt;) -&gt; <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i16.html\">i16</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Restrict each element to a certain interval. <a href=\"trait.SimdOrd.html#tymethod.simd_clamp\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdOrd-for-Mask%3Ci32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219\">source</a><a href=\"#impl-SimdOrd-for-Mask%3Ci32,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"trait.SimdOrd.html\" title=\"trait std::simd::prelude::SimdOrd\">SimdOrd</a> for <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i32.html\">i32</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_max-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219\">source</a><a href=\"#method.simd_max-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.SimdOrd.html#tymethod.simd_max\" class=\"fn\">simd_max</a>(self, other: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i32.html\">i32</a>, N&gt;) -&gt; <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i32.html\">i32</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the element-wise maximum with <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_min-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219\">source</a><a href=\"#method.simd_min-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.SimdOrd.html#tymethod.simd_min\" class=\"fn\">simd_min</a>(self, other: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i32.html\">i32</a>, N&gt;) -&gt; <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i32.html\">i32</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the element-wise minimum with <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_clamp-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219\">source</a><a href=\"#method.simd_clamp-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.SimdOrd.html#tymethod.simd_clamp\" class=\"fn\">simd_clamp</a>(self, min: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i32.html\">i32</a>, N&gt;, max: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i32.html\">i32</a>, N&gt;) -&gt; <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i32.html\">i32</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Restrict each element to a certain interval. <a href=\"trait.SimdOrd.html#tymethod.simd_clamp\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdOrd-for-Mask%3Ci64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219\">source</a><a href=\"#impl-SimdOrd-for-Mask%3Ci64,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"trait.SimdOrd.html\" title=\"trait std::simd::prelude::SimdOrd\">SimdOrd</a> for <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i64.html\">i64</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_max-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219\">source</a><a href=\"#method.simd_max-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.SimdOrd.html#tymethod.simd_max\" class=\"fn\">simd_max</a>(self, other: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i64.html\">i64</a>, N&gt;) -&gt; <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i64.html\">i64</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the element-wise maximum with <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_min-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219\">source</a><a href=\"#method.simd_min-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.SimdOrd.html#tymethod.simd_min\" class=\"fn\">simd_min</a>(self, other: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i64.html\">i64</a>, N&gt;) -&gt; <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i64.html\">i64</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the element-wise minimum with <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_clamp-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219\">source</a><a href=\"#method.simd_clamp-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.SimdOrd.html#tymethod.simd_clamp\" class=\"fn\">simd_clamp</a>(self, min: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i64.html\">i64</a>, N&gt;, max: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i64.html\">i64</a>, N&gt;) -&gt; <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i64.html\">i64</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Restrict each element to a certain interval. <a href=\"trait.SimdOrd.html#tymethod.simd_clamp\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdOrd-for-Mask%3Ci8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219\">source</a><a href=\"#impl-SimdOrd-for-Mask%3Ci8,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"trait.SimdOrd.html\" title=\"trait std::simd::prelude::SimdOrd\">SimdOrd</a> for <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i8.html\">i8</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_max\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219\">source</a><a href=\"#method.simd_max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.SimdOrd.html#tymethod.simd_max\" class=\"fn\">simd_max</a>(self, other: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i8.html\">i8</a>, N&gt;) -&gt; <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i8.html\">i8</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the element-wise maximum with <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_min\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219\">source</a><a href=\"#method.simd_min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.SimdOrd.html#tymethod.simd_min\" class=\"fn\">simd_min</a>(self, other: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i8.html\">i8</a>, N&gt;) -&gt; <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i8.html\">i8</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the element-wise minimum with <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_clamp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219\">source</a><a href=\"#method.simd_clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.SimdOrd.html#tymethod.simd_clamp\" class=\"fn\">simd_clamp</a>(self, min: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i8.html\">i8</a>, N&gt;, max: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i8.html\">i8</a>, N&gt;) -&gt; <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i8.html\">i8</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Restrict each element to a certain interval. <a href=\"trait.SimdOrd.html#tymethod.simd_clamp\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdOrd-for-Mask%3Cisize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219\">source</a><a href=\"#impl-SimdOrd-for-Mask%3Cisize,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"trait.SimdOrd.html\" title=\"trait std::simd::prelude::SimdOrd\">SimdOrd</a> for <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.isize.html\">isize</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_max-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219\">source</a><a href=\"#method.simd_max-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.SimdOrd.html#tymethod.simd_max\" class=\"fn\">simd_max</a>(self, other: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.isize.html\">isize</a>, N&gt;) -&gt; <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.isize.html\">isize</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the element-wise maximum with <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_min-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219\">source</a><a href=\"#method.simd_min-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.SimdOrd.html#tymethod.simd_min\" class=\"fn\">simd_min</a>(self, other: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.isize.html\">isize</a>, N&gt;) -&gt; <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.isize.html\">isize</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Returns the element-wise minimum with <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_clamp-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219\">source</a><a href=\"#method.simd_clamp-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.SimdOrd.html#tymethod.simd_clamp\" class=\"fn\">simd_clamp</a>(self, min: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.isize.html\">isize</a>, N&gt;, max: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.isize.html\">isize</a>, N&gt;) -&gt; <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.isize.html\">isize</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Restrict each element to a certain interval. <a href=\"trait.SimdOrd.html#tymethod.simd_clamp\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdPartialEq-for-Mask%3Ci16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#76\">source</a><a href=\"#impl-SimdPartialEq-for-Mask%3Ci16,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a> for <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i16.html\">i16</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Mask-4\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Mask-4\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"trait.SimdPartialEq.html#associatedtype.Mask\" class=\"associatedtype\">Mask</a> = <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i16.html\">i16</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">The mask type returned by each comparison.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_eq-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#76\">source</a><a href=\"#method.simd_eq-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.SimdPartialEq.html#tymethod.simd_eq\" class=\"fn\">simd_eq</a>(self, other: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i16.html\">i16</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i16.html\">i16</a>, N&gt; as <a class=\"trait\" href=\"trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is equal to the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_ne-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#76\">source</a><a href=\"#method.simd_ne-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.SimdPartialEq.html#tymethod.simd_ne\" class=\"fn\">simd_ne</a>(self, other: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i16.html\">i16</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i16.html\">i16</a>, N&gt; as <a class=\"trait\" href=\"trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is equal to the corresponding element in <code>other</code>.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdPartialEq-for-Mask%3Ci32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#76\">source</a><a href=\"#impl-SimdPartialEq-for-Mask%3Ci32,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a> for <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i32.html\">i32</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Mask-3\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Mask-3\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"trait.SimdPartialEq.html#associatedtype.Mask\" class=\"associatedtype\">Mask</a> = <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i32.html\">i32</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">The mask type returned by each comparison.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_eq-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#76\">source</a><a href=\"#method.simd_eq-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.SimdPartialEq.html#tymethod.simd_eq\" class=\"fn\">simd_eq</a>(self, other: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i32.html\">i32</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i32.html\">i32</a>, N&gt; as <a class=\"trait\" href=\"trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is equal to the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_ne-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#76\">source</a><a href=\"#method.simd_ne-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.SimdPartialEq.html#tymethod.simd_ne\" class=\"fn\">simd_ne</a>(self, other: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i32.html\">i32</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i32.html\">i32</a>, N&gt; as <a class=\"trait\" href=\"trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is equal to the corresponding element in <code>other</code>.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdPartialEq-for-Mask%3Ci64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#76\">source</a><a href=\"#impl-SimdPartialEq-for-Mask%3Ci64,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a> for <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i64.html\">i64</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Mask-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Mask-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"trait.SimdPartialEq.html#associatedtype.Mask\" class=\"associatedtype\">Mask</a> = <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i64.html\">i64</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">The mask type returned by each comparison.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_eq-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#76\">source</a><a href=\"#method.simd_eq-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.SimdPartialEq.html#tymethod.simd_eq\" class=\"fn\">simd_eq</a>(self, other: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i64.html\">i64</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i64.html\">i64</a>, N&gt; as <a class=\"trait\" href=\"trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is equal to the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_ne-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#76\">source</a><a href=\"#method.simd_ne-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.SimdPartialEq.html#tymethod.simd_ne\" class=\"fn\">simd_ne</a>(self, other: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i64.html\">i64</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i64.html\">i64</a>, N&gt; as <a class=\"trait\" href=\"trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is equal to the corresponding element in <code>other</code>.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdPartialEq-for-Mask%3Ci8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#76\">source</a><a href=\"#impl-SimdPartialEq-for-Mask%3Ci8,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a> for <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i8.html\">i8</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Mask\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Mask\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"trait.SimdPartialEq.html#associatedtype.Mask\" class=\"associatedtype\">Mask</a> = <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i8.html\">i8</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">The mask type returned by each comparison.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#76\">source</a><a href=\"#method.simd_eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.SimdPartialEq.html#tymethod.simd_eq\" class=\"fn\">simd_eq</a>(self, other: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i8.html\">i8</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i8.html\">i8</a>, N&gt; as <a class=\"trait\" href=\"trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is equal to the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#76\">source</a><a href=\"#method.simd_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.SimdPartialEq.html#tymethod.simd_ne\" class=\"fn\">simd_ne</a>(self, other: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i8.html\">i8</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i8.html\">i8</a>, N&gt; as <a class=\"trait\" href=\"trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is equal to the corresponding element in <code>other</code>.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdPartialEq-for-Mask%3Cisize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#76\">source</a><a href=\"#impl-SimdPartialEq-for-Mask%3Cisize,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a> for <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.isize.html\">isize</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Mask-2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Mask-2\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"trait.SimdPartialEq.html#associatedtype.Mask\" class=\"associatedtype\">Mask</a> = <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.isize.html\">isize</a>, N&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">The mask type returned by each comparison.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_eq-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#76\">source</a><a href=\"#method.simd_eq-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.SimdPartialEq.html#tymethod.simd_eq\" class=\"fn\">simd_eq</a>(\n    self,\n    other: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.isize.html\">isize</a>, N&gt;,\n) -&gt; &lt;<a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.isize.html\">isize</a>, N&gt; as <a class=\"trait\" href=\"trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is equal to the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_ne-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html#76\">source</a><a href=\"#method.simd_ne-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.SimdPartialEq.html#tymethod.simd_ne\" class=\"fn\">simd_ne</a>(\n    self,\n    other: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.isize.html\">isize</a>, N&gt;,\n) -&gt; &lt;<a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.isize.html\">isize</a>, N&gt; as <a class=\"trait\" href=\"trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is equal to the corresponding element in <code>other</code>.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdPartialOrd-for-Mask%3Ci16,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219\">source</a><a href=\"#impl-SimdPartialOrd-for-Mask%3Ci16,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"trait.SimdPartialOrd.html\" title=\"trait std::simd::prelude::SimdPartialOrd\">SimdPartialOrd</a> for <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i16.html\">i16</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_lt-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219\">source</a><a href=\"#method.simd_lt-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.SimdPartialOrd.html#tymethod.simd_lt\" class=\"fn\">simd_lt</a>(self, other: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i16.html\">i16</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i16.html\">i16</a>, N&gt; as <a class=\"trait\" href=\"trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is less than the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_le-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219\">source</a><a href=\"#method.simd_le-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.SimdPartialOrd.html#tymethod.simd_le\" class=\"fn\">simd_le</a>(self, other: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i16.html\">i16</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i16.html\">i16</a>, N&gt; as <a class=\"trait\" href=\"trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is less than or equal to the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_gt-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219\">source</a><a href=\"#method.simd_gt-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.SimdPartialOrd.html#tymethod.simd_gt\" class=\"fn\">simd_gt</a>(self, other: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i16.html\">i16</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i16.html\">i16</a>, N&gt; as <a class=\"trait\" href=\"trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is greater than the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_ge-3\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219\">source</a><a href=\"#method.simd_ge-3\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.SimdPartialOrd.html#tymethod.simd_ge\" class=\"fn\">simd_ge</a>(self, other: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i16.html\">i16</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i16.html\">i16</a>, N&gt; as <a class=\"trait\" href=\"trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is greater than or equal to the corresponding element in <code>other</code>.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdPartialOrd-for-Mask%3Ci32,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219\">source</a><a href=\"#impl-SimdPartialOrd-for-Mask%3Ci32,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"trait.SimdPartialOrd.html\" title=\"trait std::simd::prelude::SimdPartialOrd\">SimdPartialOrd</a> for <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i32.html\">i32</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_lt-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219\">source</a><a href=\"#method.simd_lt-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.SimdPartialOrd.html#tymethod.simd_lt\" class=\"fn\">simd_lt</a>(self, other: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i32.html\">i32</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i32.html\">i32</a>, N&gt; as <a class=\"trait\" href=\"trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is less than the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_le-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219\">source</a><a href=\"#method.simd_le-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.SimdPartialOrd.html#tymethod.simd_le\" class=\"fn\">simd_le</a>(self, other: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i32.html\">i32</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i32.html\">i32</a>, N&gt; as <a class=\"trait\" href=\"trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is less than or equal to the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_gt-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219\">source</a><a href=\"#method.simd_gt-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.SimdPartialOrd.html#tymethod.simd_gt\" class=\"fn\">simd_gt</a>(self, other: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i32.html\">i32</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i32.html\">i32</a>, N&gt; as <a class=\"trait\" href=\"trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is greater than the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_ge-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219\">source</a><a href=\"#method.simd_ge-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.SimdPartialOrd.html#tymethod.simd_ge\" class=\"fn\">simd_ge</a>(self, other: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i32.html\">i32</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i32.html\">i32</a>, N&gt; as <a class=\"trait\" href=\"trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is greater than or equal to the corresponding element in <code>other</code>.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdPartialOrd-for-Mask%3Ci64,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219\">source</a><a href=\"#impl-SimdPartialOrd-for-Mask%3Ci64,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"trait.SimdPartialOrd.html\" title=\"trait std::simd::prelude::SimdPartialOrd\">SimdPartialOrd</a> for <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i64.html\">i64</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_lt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219\">source</a><a href=\"#method.simd_lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.SimdPartialOrd.html#tymethod.simd_lt\" class=\"fn\">simd_lt</a>(self, other: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i64.html\">i64</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i64.html\">i64</a>, N&gt; as <a class=\"trait\" href=\"trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is less than the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_le\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219\">source</a><a href=\"#method.simd_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.SimdPartialOrd.html#tymethod.simd_le\" class=\"fn\">simd_le</a>(self, other: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i64.html\">i64</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i64.html\">i64</a>, N&gt; as <a class=\"trait\" href=\"trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is less than or equal to the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_gt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219\">source</a><a href=\"#method.simd_gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.SimdPartialOrd.html#tymethod.simd_gt\" class=\"fn\">simd_gt</a>(self, other: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i64.html\">i64</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i64.html\">i64</a>, N&gt; as <a class=\"trait\" href=\"trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is greater than the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_ge\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219\">source</a><a href=\"#method.simd_ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.SimdPartialOrd.html#tymethod.simd_ge\" class=\"fn\">simd_ge</a>(self, other: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i64.html\">i64</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i64.html\">i64</a>, N&gt; as <a class=\"trait\" href=\"trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is greater than or equal to the corresponding element in <code>other</code>.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdPartialOrd-for-Mask%3Ci8,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219\">source</a><a href=\"#impl-SimdPartialOrd-for-Mask%3Ci8,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"trait.SimdPartialOrd.html\" title=\"trait std::simd::prelude::SimdPartialOrd\">SimdPartialOrd</a> for <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i8.html\">i8</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_lt-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219\">source</a><a href=\"#method.simd_lt-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.SimdPartialOrd.html#tymethod.simd_lt\" class=\"fn\">simd_lt</a>(self, other: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i8.html\">i8</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i8.html\">i8</a>, N&gt; as <a class=\"trait\" href=\"trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is less than the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_le-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219\">source</a><a href=\"#method.simd_le-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.SimdPartialOrd.html#tymethod.simd_le\" class=\"fn\">simd_le</a>(self, other: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i8.html\">i8</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i8.html\">i8</a>, N&gt; as <a class=\"trait\" href=\"trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is less than or equal to the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_gt-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219\">source</a><a href=\"#method.simd_gt-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.SimdPartialOrd.html#tymethod.simd_gt\" class=\"fn\">simd_gt</a>(self, other: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i8.html\">i8</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i8.html\">i8</a>, N&gt; as <a class=\"trait\" href=\"trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is greater than the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_ge-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219\">source</a><a href=\"#method.simd_ge-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.SimdPartialOrd.html#tymethod.simd_ge\" class=\"fn\">simd_ge</a>(self, other: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i8.html\">i8</a>, N&gt;) -&gt; &lt;<a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.i8.html\">i8</a>, N&gt; as <a class=\"trait\" href=\"trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is greater than or equal to the corresponding element in <code>other</code>.</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-SimdPartialOrd-for-Mask%3Cisize,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219\">source</a><a href=\"#impl-SimdPartialOrd-for-Mask%3Cisize,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"trait.SimdPartialOrd.html\" title=\"trait std::simd::prelude::SimdPartialOrd\">SimdPartialOrd</a> for <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.isize.html\">isize</a>, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_lt-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219\">source</a><a href=\"#method.simd_lt-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.SimdPartialOrd.html#tymethod.simd_lt\" class=\"fn\">simd_lt</a>(\n    self,\n    other: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.isize.html\">isize</a>, N&gt;,\n) -&gt; &lt;<a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.isize.html\">isize</a>, N&gt; as <a class=\"trait\" href=\"trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is less than the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_le-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219\">source</a><a href=\"#method.simd_le-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.SimdPartialOrd.html#tymethod.simd_le\" class=\"fn\">simd_le</a>(\n    self,\n    other: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.isize.html\">isize</a>, N&gt;,\n) -&gt; &lt;<a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.isize.html\">isize</a>, N&gt; as <a class=\"trait\" href=\"trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is less than or equal to the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_gt-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219\">source</a><a href=\"#method.simd_gt-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.SimdPartialOrd.html#tymethod.simd_gt\" class=\"fn\">simd_gt</a>(\n    self,\n    other: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.isize.html\">isize</a>, N&gt;,\n) -&gt; &lt;<a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.isize.html\">isize</a>, N&gt; as <a class=\"trait\" href=\"trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is greater than the corresponding element in <code>other</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.simd_ge-4\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html#219\">source</a><a href=\"#method.simd_ge-4\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.SimdPartialOrd.html#tymethod.simd_ge\" class=\"fn\">simd_ge</a>(\n    self,\n    other: <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.isize.html\">isize</a>, N&gt;,\n) -&gt; &lt;<a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;<a class=\"primitive\" href=\"../../primitive.isize.html\">isize</a>, N&gt; as <a class=\"trait\" href=\"trait.SimdPartialEq.html\" title=\"trait std::simd::prelude::SimdPartialEq\">SimdPartialEq</a>&gt;::<a class=\"associatedtype\" href=\"trait.SimdPartialEq.html#associatedtype.Mask\" title=\"type std::simd::prelude::SimdPartialEq::Mask\">Mask</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class=\"docblock\">Test if each element is greater than or equal to the corresponding element in <code>other</code>.</div></details></div></details><section id=\"impl-Copy-for-Mask%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/masks.rs.html#117-120\">source</a><a href=\"#impl-Copy-for-Mask%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a> for <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../trait.MaskElement.html\" title=\"trait std::simd::MaskElement\">MaskElement</a>,\n    <a class=\"struct\" href=\"../struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,</div></h3></section></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-Mask%3CT,+N%3E\" class=\"impl\"><a href=\"#impl-Freeze-for-Mask%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a>,</div></h3></section><section id=\"impl-RefUnwindSafe-for-Mask%3CT,+N%3E\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-Mask%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a>,</div></h3></section><section id=\"impl-Send-for-Mask%3CT,+N%3E\" class=\"impl\"><a href=\"#impl-Send-for-Mask%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a>,</div></h3></section><section id=\"impl-Sync-for-Mask%3CT,+N%3E\" class=\"impl\"><a href=\"#impl-Sync-for-Mask%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a>,</div></h3></section><section id=\"impl-Unpin-for-Mask%3CT,+N%3E\" class=\"impl\"><a href=\"#impl-Unpin-for-Mask%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a>,</div></h3></section><section id=\"impl-UnwindSafe-for-Mask%3CT,+N%3E\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-Mask%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"../../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.Mask.html\" title=\"struct std::simd::prelude::Mask\">Mask</a>&lt;T, N&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a>,</div></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-22\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from-22\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToOwned-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85\">source</a><a href=\"#impl-ToOwned-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../../borrow/trait.ToOwned.html\" title=\"trait std::borrow::ToOwned\">ToOwned</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Owned\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../borrow/trait.ToOwned.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = T</h4></section></summary><div class=\"docblock\">The resulting type after obtaining ownership.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88\">source</a><a href=\"#method.to_owned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../borrow/trait.ToOwned.html#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\">Creates owned data from borrowed data, usually by cloning. <a href=\"../../borrow/trait.ToOwned.html#tymethod.to_owned\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92\">source</a><a href=\"#method.clone_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../borrow/trait.ToOwned.html#method.clone_into\" class=\"fn\">clone_into</a>(&amp;self, target: <a class=\"primitive\" href=\"../../primitive.reference.html\">&amp;mut T</a>)</h4></section></summary><div class=\"docblock\">Uses borrowed data to replace owned data, usually by cloning. <a href=\"../../borrow/trait.ToOwned.html#method.clone_into\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:20:54.784Z"
}