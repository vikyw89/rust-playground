{
	"title": "mod.rs - source",
	"url": "https://doc.rust-lang.org/stable/src/core/mem/mod.rs.html",
	"markdown": "# mod.rs - source\n\n```features\n//! Basic functions for dealing with memory.\n//!\n//! This module contains functions for querying the size and alignment of\n//! types, initializing and manipulating memory.\n\n#![stable(feature = \"rust1\", since = \"1.0.0\")]\n\nuse crate::clone;\nuse crate::cmp;\nuse crate::fmt;\nuse crate::hash;\nuse crate::intrinsics;\nuse crate::marker::DiscriminantKind;\nuse crate::ptr;\n\nmod manually_drop;\n#[stable(feature = \"manually_drop\", since = \"1.20.0\")]\npub use manually_drop::ManuallyDrop;\n\nmod maybe_uninit;\n#[stable(feature = \"maybe_uninit\", since = \"1.36.0\")]\npub use maybe_uninit::MaybeUninit;\n\nmod transmutability;\n#[unstable(feature = \"transmutability\", issue = \"99571\")]\npub use transmutability::{Assume, BikeshedIntrinsicFrom};\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\n#[doc(inline)]\npub use crate::intrinsics::transmute;\n\n/// Takes ownership and \"forgets\" about the value **without running its destructor**.\n///\n/// Any resources the value manages, such as heap memory or a file handle, will linger\n/// forever in an unreachable state. However, it does not guarantee that pointers\n/// to this memory will remain valid.\n///\n/// * If you want to leak memory, see [`Box::leak`].\n/// * If you want to obtain a raw pointer to the memory, see [`Box::into_raw`].\n/// * If you want to dispose of a value properly, running its destructor, see\n/// [`mem::drop`].\n///\n/// # Safety\n///\n/// `forget` is not marked as `unsafe`, because Rust's safety guarantees\n/// do not include a guarantee that destructors will always run. For example,\n/// a program can create a reference cycle using [`Rc`][rc], or call\n/// [`process::exit`][exit] to exit without running destructors. Thus, allowing\n/// `mem::forget` from safe code does not fundamentally change Rust's safety\n/// guarantees.\n///\n/// That said, leaking resources such as memory or I/O objects is usually undesirable.\n/// The need comes up in some specialized use cases for FFI or unsafe code, but even\n/// then, [`ManuallyDrop`] is typically preferred.\n///\n/// Because forgetting a value is allowed, any `unsafe` code you write must\n/// allow for this possibility. You cannot return a value and expect that the\n/// caller will necessarily run the value's destructor.\n///\n/// [rc]: ../../std/rc/struct.Rc.html\n/// [exit]: ../../std/process/fn.exit.html\n///\n/// # Examples\n///\n/// The canonical safe use of `mem::forget` is to circumvent a value's destructor\n/// implemented by the `Drop` trait. For example, this will leak a `File`, i.e. reclaim\n/// the space taken by the variable but never close the underlying system resource:\n///\n/// ```no_run\n/// use std::mem;\n/// use std::fs::File;\n///\n/// let file = File::open(\"foo.txt\").unwrap();\n/// mem::forget(file);\n/// ```\n///\n/// This is useful when the ownership of the underlying resource was previously\n/// transferred to code outside of Rust, for example by transmitting the raw\n/// file descriptor to C code.\n///\n/// # Relationship with `ManuallyDrop`\n///\n/// While `mem::forget` can also be used to transfer *memory* ownership, doing so is error-prone.\n/// [`ManuallyDrop`] should be used instead. Consider, for example, this code:\n///\n/// ```\n/// use std::mem;\n///\n/// let mut v = vec![65, 122];\n/// // Build a `String` using the contents of `v`\n/// let s = unsafe { String::from_raw_parts(v.as_mut_ptr(), v.len(), v.capacity()) };\n/// // leak `v` because its memory is now managed by `s`\n/// mem::forget(v);  // ERROR - v is invalid and must not be passed to a function\n/// assert_eq!(s, \"Az\");\n/// // `s` is implicitly dropped and its memory deallocated.\n/// ```\n///\n/// There are two issues with the above example:\n///\n/// * If more code were added between the construction of `String` and the invocation of\n///   `mem::forget()`, a panic within it would cause a double free because the same memory\n///   is handled by both `v` and `s`.\n/// * After calling `v.as_mut_ptr()` and transmitting the ownership of the data to `s`,\n///   the `v` value is invalid. Even when a value is just moved to `mem::forget` (which won't\n///   inspect it), some types have strict requirements on their values that\n///   make them invalid when dangling or no longer owned. Using invalid values in any\n///   way, including passing them to or returning them from functions, constitutes\n///   undefined behavior and may break the assumptions made by the compiler.\n///\n/// Switching to `ManuallyDrop` avoids both issues:\n///\n/// ```\n/// use std::mem::ManuallyDrop;\n///\n/// let v = vec![65, 122];\n/// // Before we disassemble `v` into its raw parts, make sure it\n/// // does not get dropped!\n/// let mut v = ManuallyDrop::new(v);\n/// // Now disassemble `v`. These operations cannot panic, so there cannot be a leak.\n/// let (ptr, len, cap) = (v.as_mut_ptr(), v.len(), v.capacity());\n/// // Finally, build a `String`.\n/// let s = unsafe { String::from_raw_parts(ptr, len, cap) };\n/// assert_eq!(s, \"Az\");\n/// // `s` is implicitly dropped and its memory deallocated.\n/// ```\n///\n/// `ManuallyDrop` robustly prevents double-free because we disable `v`'s destructor\n/// before doing anything else. `mem::forget()` doesn't allow this because it consumes its\n/// argument, forcing us to call it only after extracting anything we need from `v`. Even\n/// if a panic were introduced between construction of `ManuallyDrop` and building the\n/// string (which cannot happen in the code as shown), it would result in a leak and not a\n/// double free. In other words, `ManuallyDrop` errs on the side of leaking instead of\n/// erring on the side of (double-)dropping.\n///\n/// Also, `ManuallyDrop` prevents us from having to \"touch\" `v` after transferring the\n/// ownership to `s` — the final step of interacting with `v` to dispose of it without\n/// running its destructor is entirely avoided.\n///\n/// [`Box`]: ../../std/boxed/struct.Box.html\n/// [`Box::leak`]: ../../std/boxed/struct.Box.html#method.leak\n/// [`Box::into_raw`]: ../../std/boxed/struct.Box.html#method.into_raw\n/// [`mem::drop`]: drop\n/// [ub]: ../../reference/behavior-considered-undefined.html\n#[inline]\n#[rustc_const_stable(feature = \"const_forget\", since = \"1.46.0\")]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\n#[cfg_attr(not(test), rustc_diagnostic_item = \"mem_forget\")]\npub const fn forget<T>(t: T) {\n    let _ = ManuallyDrop::new(t);\n}\n\n/// Like [`forget`], but also accepts unsized values.\n///\n/// This function is just a shim intended to be removed when the `unsized_locals` feature gets\n/// stabilized.\n#[inline]\n#[unstable(feature = \"forget_unsized\", issue = \"none\")]\npub fn forget_unsized<T: ?Sized>(t: T) {\n    intrinsics::forget(t)\n}\n\n/// Returns the size of a type in bytes.\n///\n/// More specifically, this is the offset in bytes between successive elements\n/// in an array with that item type including alignment padding. Thus, for any\n/// type `T` and length `n`, `[T; n]` has a size of `n * size_of::<T>()`.\n///\n/// In general, the size of a type is not stable across compilations, but\n/// specific types such as primitives are.\n///\n/// The following table gives the size for primitives.\n///\n/// Type | `size_of::<Type>()`\n/// ---- | ---------------\n/// () | 0\n/// bool | 1\n/// u8 | 1\n/// u16 | 2\n/// u32 | 4\n/// u64 | 8\n/// u128 | 16\n/// i8 | 1\n/// i16 | 2\n/// i32 | 4\n/// i64 | 8\n/// i128 | 16\n/// f32 | 4\n/// f64 | 8\n/// char | 4\n///\n/// Furthermore, `usize` and `isize` have the same size.\n///\n/// The types [`*const T`], `&T`, [`Box<T>`], [`Option<&T>`], and `Option<Box<T>>` all have\n/// the same size. If `T` is `Sized`, all of those types have the same size as `usize`.\n///\n/// The mutability of a pointer does not change its size. As such, `&T` and `&mut T`\n/// have the same size. Likewise for `*const T` and `*mut T`.\n///\n/// # Size of `#[repr(C)]` items\n///\n/// The `C` representation for items has a defined layout. With this layout,\n/// the size of items is also stable as long as all fields have a stable size.\n///\n/// ## Size of Structs\n///\n/// For `struct`s, the size is determined by the following algorithm.\n///\n/// For each field in the struct ordered by declaration order:\n///\n/// 1. Add the size of the field.\n/// 2. Round up the current size to the nearest multiple of the next field's [alignment].\n///\n/// Finally, round the size of the struct to the nearest multiple of its [alignment].\n/// The alignment of the struct is usually the largest alignment of all its\n/// fields; this can be changed with the use of `repr(align(N))`.\n///\n/// Unlike `C`, zero sized structs are not rounded up to one byte in size.\n///\n/// ## Size of Enums\n///\n/// Enums that carry no data other than the discriminant have the same size as C enums\n/// on the platform they are compiled for.\n///\n/// ## Size of Unions\n///\n/// The size of a union is the size of its largest field.\n///\n/// Unlike `C`, zero sized unions are not rounded up to one byte in size.\n///\n/// # Examples\n///\n/// ```\n/// use std::mem;\n///\n/// // Some primitives\n/// assert_eq!(4, mem::size_of::<i32>());\n/// assert_eq!(8, mem::size_of::<f64>());\n/// assert_eq!(0, mem::size_of::<()>());\n///\n/// // Some arrays\n/// assert_eq!(8, mem::size_of::<[i32; 2]>());\n/// assert_eq!(12, mem::size_of::<[i32; 3]>());\n/// assert_eq!(0, mem::size_of::<[i32; 0]>());\n///\n///\n/// // Pointer size equality\n/// assert_eq!(mem::size_of::<&i32>(), mem::size_of::<*const i32>());\n/// assert_eq!(mem::size_of::<&i32>(), mem::size_of::<Box<i32>>());\n/// assert_eq!(mem::size_of::<&i32>(), mem::size_of::<Option<&i32>>());\n/// assert_eq!(mem::size_of::<Box<i32>>(), mem::size_of::<Option<Box<i32>>>());\n/// ```\n///\n/// Using `#[repr(C)]`.\n///\n/// ```\n/// use std::mem;\n///\n/// #[repr(C)]\n/// struct FieldStruct {\n///     first: u8,\n///     second: u16,\n///     third: u8\n/// }\n///\n/// // The size of the first field is 1, so add 1 to the size. Size is 1.\n/// // The alignment of the second field is 2, so add 1 to the size for padding. Size is 2.\n/// // The size of the second field is 2, so add 2 to the size. Size is 4.\n/// // The alignment of the third field is 1, so add 0 to the size for padding. Size is 4.\n/// // The size of the third field is 1, so add 1 to the size. Size is 5.\n/// // Finally, the alignment of the struct is 2 (because the largest alignment amongst its\n/// // fields is 2), so add 1 to the size for padding. Size is 6.\n/// assert_eq!(6, mem::size_of::<FieldStruct>());\n///\n/// #[repr(C)]\n/// struct TupleStruct(u8, u16, u8);\n///\n/// // Tuple structs follow the same rules.\n/// assert_eq!(6, mem::size_of::<TupleStruct>());\n///\n/// // Note that reordering the fields can lower the size. We can remove both padding bytes\n/// // by putting `third` before `second`.\n/// #[repr(C)]\n/// struct FieldStructOptimized {\n///     first: u8,\n///     third: u8,\n///     second: u16\n/// }\n///\n/// assert_eq!(4, mem::size_of::<FieldStructOptimized>());\n///\n/// // Union size is the size of the largest field.\n/// #[repr(C)]\n/// union ExampleUnion {\n///     smaller: u8,\n///     larger: u16\n/// }\n///\n/// assert_eq!(2, mem::size_of::<ExampleUnion>());\n/// ```\n///\n/// [alignment]: align_of\n/// [`*const T`]: primitive@pointer\n/// [`Box<T>`]: ../../std/boxed/struct.Box.html\n/// [`Option<&T>`]: crate::option::Option\n///\n#[inline(always)]\n#[must_use]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\n#[rustc_promotable]\n#[rustc_const_stable(feature = \"const_mem_size_of\", since = \"1.24.0\")]\n#[cfg_attr(not(test), rustc_diagnostic_item = \"mem_size_of\")]\npub const fn size_of<T>() -> usize {\n    intrinsics::size_of::<T>()\n}\n\n/// Returns the size of the pointed-to value in bytes.\n///\n/// This is usually the same as [`size_of::<T>()`]. However, when `T` *has* no\n/// statically-known size, e.g., a slice [`[T]`][slice] or a [trait object],\n/// then `size_of_val` can be used to get the dynamically-known size.\n///\n/// [trait object]: ../../book/ch17-02-trait-objects.html\n///\n/// # Examples\n///\n/// ```\n/// use std::mem;\n///\n/// assert_eq!(4, mem::size_of_val(&5i32));\n///\n/// let x: [u8; 13] = [0; 13];\n/// let y: &[u8] = &x;\n/// assert_eq!(13, mem::size_of_val(y));\n/// ```\n///\n/// [`size_of::<T>()`]: size_of\n#[inline]\n#[must_use]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\n#[rustc_const_unstable(feature = \"const_size_of_val\", issue = \"46571\")]\n#[cfg_attr(not(test), rustc_diagnostic_item = \"mem_size_of_val\")]\npub const fn size_of_val<T: ?Sized>(val: &T) -> usize {\n    // SAFETY: `val` is a reference, so it's a valid raw pointer\n    unsafe { intrinsics::size_of_val(val) }\n}\n\n/// Returns the size of the pointed-to value in bytes.\n///\n/// This is usually the same as [`size_of::<T>()`]. However, when `T` *has* no\n/// statically-known size, e.g., a slice [`[T]`][slice] or a [trait object],\n/// then `size_of_val_raw` can be used to get the dynamically-known size.\n///\n/// # Safety\n///\n/// This function is only safe to call if the following conditions hold:\n///\n/// - If `T` is `Sized`, this function is always safe to call.\n/// - If the unsized tail of `T` is:\n///     - a [slice], then the length of the slice tail must be an initialized\n///       integer, and the size of the *entire value*\n///       (dynamic tail length + statically sized prefix) must fit in `isize`.\n///     - a [trait object], then the vtable part of the pointer must point\n///       to a valid vtable acquired by an unsizing coercion, and the size\n///       of the *entire value* (dynamic tail length + statically sized prefix)\n///       must fit in `isize`.\n///     - an (unstable) [extern type], then this function is always safe to\n///       call, but may panic or otherwise return the wrong value, as the\n///       extern type's layout is not known. This is the same behavior as\n///       [`size_of_val`] on a reference to a type with an extern type tail.\n///     - otherwise, it is conservatively not allowed to call this function.\n///\n/// [`size_of::<T>()`]: size_of\n/// [trait object]: ../../book/ch17-02-trait-objects.html\n/// [extern type]: ../../unstable-book/language-features/extern-types.html\n///\n/// # Examples\n///\n/// ```\n/// #![feature(layout_for_ptr)]\n/// use std::mem;\n///\n/// assert_eq!(4, mem::size_of_val(&5i32));\n///\n/// let x: [u8; 13] = [0; 13];\n/// let y: &[u8] = &x;\n/// assert_eq!(13, unsafe { mem::size_of_val_raw(y) });\n/// ```\n#[inline]\n#[must_use]\n#[unstable(feature = \"layout_for_ptr\", issue = \"69835\")]\n#[rustc_const_unstable(feature = \"const_size_of_val_raw\", issue = \"46571\")]\npub const unsafe fn size_of_val_raw<T: ?Sized>(val: *const T) -> usize {\n    // SAFETY: the caller must provide a valid raw pointer\n    unsafe { intrinsics::size_of_val(val) }\n}\n\n/// Returns the [ABI]-required minimum alignment of a type in bytes.\n///\n/// Every reference to a value of the type `T` must be a multiple of this number.\n///\n/// This is the alignment used for struct fields. It may be smaller than the preferred alignment.\n///\n/// [ABI]: https://en.wikipedia.org/wiki/Application_binary_interface\n///\n/// # Examples\n///\n/// ```\n/// # #![allow(deprecated)]\n/// use std::mem;\n///\n/// assert_eq!(4, mem::min_align_of::<i32>());\n/// ```\n#[inline]\n#[must_use]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\n#[deprecated(note = \"use `align_of` instead\", since = \"1.2.0\", suggestion = \"align_of\")]\npub fn min_align_of<T>() -> usize {\n    intrinsics::min_align_of::<T>()\n}\n\n/// Returns the [ABI]-required minimum alignment of the type of the value that `val` points to in\n/// bytes.\n///\n/// Every reference to a value of the type `T` must be a multiple of this number.\n///\n/// [ABI]: https://en.wikipedia.org/wiki/Application_binary_interface\n///\n/// # Examples\n///\n/// ```\n/// # #![allow(deprecated)]\n/// use std::mem;\n///\n/// assert_eq!(4, mem::min_align_of_val(&5i32));\n/// ```\n#[inline]\n#[must_use]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\n#[deprecated(note = \"use `align_of_val` instead\", since = \"1.2.0\", suggestion = \"align_of_val\")]\npub fn min_align_of_val<T: ?Sized>(val: &T) -> usize {\n    // SAFETY: val is a reference, so it's a valid raw pointer\n    unsafe { intrinsics::min_align_of_val(val) }\n}\n\n/// Returns the [ABI]-required minimum alignment of a type in bytes.\n///\n/// Every reference to a value of the type `T` must be a multiple of this number.\n///\n/// This is the alignment used for struct fields. It may be smaller than the preferred alignment.\n///\n/// [ABI]: https://en.wikipedia.org/wiki/Application_binary_interface\n///\n/// # Examples\n///\n/// ```\n/// use std::mem;\n///\n/// assert_eq!(4, mem::align_of::<i32>());\n/// ```\n#[inline(always)]\n#[must_use]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\n#[rustc_promotable]\n#[rustc_const_stable(feature = \"const_align_of\", since = \"1.24.0\")]\npub const fn align_of<T>() -> usize {\n    intrinsics::min_align_of::<T>()\n}\n\n/// Returns the [ABI]-required minimum alignment of the type of the value that `val` points to in\n/// bytes.\n///\n/// Every reference to a value of the type `T` must be a multiple of this number.\n///\n/// [ABI]: https://en.wikipedia.org/wiki/Application_binary_interface\n///\n/// # Examples\n///\n/// ```\n/// use std::mem;\n///\n/// assert_eq!(4, mem::align_of_val(&5i32));\n/// ```\n#[inline]\n#[must_use]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\n#[rustc_const_unstable(feature = \"const_align_of_val\", issue = \"46571\")]\n#[allow(deprecated)]\npub const fn align_of_val<T: ?Sized>(val: &T) -> usize {\n    // SAFETY: val is a reference, so it's a valid raw pointer\n    unsafe { intrinsics::min_align_of_val(val) }\n}\n\n/// Returns the [ABI]-required minimum alignment of the type of the value that `val` points to in\n/// bytes.\n///\n/// Every reference to a value of the type `T` must be a multiple of this number.\n///\n/// [ABI]: https://en.wikipedia.org/wiki/Application_binary_interface\n///\n/// # Safety\n///\n/// This function is only safe to call if the following conditions hold:\n///\n/// - If `T` is `Sized`, this function is always safe to call.\n/// - If the unsized tail of `T` is:\n///     - a [slice], then the length of the slice tail must be an initialized\n///       integer, and the size of the *entire value*\n///       (dynamic tail length + statically sized prefix) must fit in `isize`.\n///     - a [trait object], then the vtable part of the pointer must point\n///       to a valid vtable acquired by an unsizing coercion, and the size\n///       of the *entire value* (dynamic tail length + statically sized prefix)\n///       must fit in `isize`.\n///     - an (unstable) [extern type], then this function is always safe to\n///       call, but may panic or otherwise return the wrong value, as the\n///       extern type's layout is not known. This is the same behavior as\n///       [`align_of_val`] on a reference to a type with an extern type tail.\n///     - otherwise, it is conservatively not allowed to call this function.\n///\n/// [trait object]: ../../book/ch17-02-trait-objects.html\n/// [extern type]: ../../unstable-book/language-features/extern-types.html\n///\n/// # Examples\n///\n/// ```\n/// #![feature(layout_for_ptr)]\n/// use std::mem;\n///\n/// assert_eq!(4, unsafe { mem::align_of_val_raw(&5i32) });\n/// ```\n#[inline]\n#[must_use]\n#[unstable(feature = \"layout_for_ptr\", issue = \"69835\")]\n#[rustc_const_unstable(feature = \"const_align_of_val_raw\", issue = \"46571\")]\npub const unsafe fn align_of_val_raw<T: ?Sized>(val: *const T) -> usize {\n    // SAFETY: the caller must provide a valid raw pointer\n    unsafe { intrinsics::min_align_of_val(val) }\n}\n\n/// Returns `true` if dropping values of type `T` matters.\n///\n/// This is purely an optimization hint, and may be implemented conservatively:\n/// it may return `true` for types that don't actually need to be dropped.\n/// As such always returning `true` would be a valid implementation of\n/// this function. However if this function actually returns `false`, then you\n/// can be certain dropping `T` has no side effect.\n///\n/// Low level implementations of things like collections, which need to manually\n/// drop their data, should use this function to avoid unnecessarily\n/// trying to drop all their contents when they are destroyed. This might not\n/// make a difference in release builds (where a loop that has no side-effects\n/// is easily detected and eliminated), but is often a big win for debug builds.\n///\n/// Note that [`drop_in_place`] already performs this check, so if your workload\n/// can be reduced to some small number of [`drop_in_place`] calls, using this is\n/// unnecessary. In particular note that you can [`drop_in_place`] a slice, and that\n/// will do a single needs_drop check for all the values.\n///\n/// Types like Vec therefore just `drop_in_place(&mut self[..])` without using\n/// `needs_drop` explicitly. Types like [`HashMap`], on the other hand, have to drop\n/// values one at a time and should use this API.\n///\n/// [`drop_in_place`]: crate::ptr::drop_in_place\n/// [`HashMap`]: ../../std/collections/struct.HashMap.html\n///\n/// # Examples\n///\n/// Here's an example of how a collection might make use of `needs_drop`:\n///\n/// ```\n/// use std::{mem, ptr};\n///\n/// pub struct MyCollection<T> {\n/// #   data: [T; 1],\n///     /* ... */\n/// }\n/// # impl<T> MyCollection<T> {\n/// #   fn iter_mut(&mut self) -> &mut [T] { &mut self.data }\n/// #   fn free_buffer(&mut self) {}\n/// # }\n///\n/// impl<T> Drop for MyCollection<T> {\n///     fn drop(&mut self) {\n///         unsafe {\n///             // drop the data\n///             if mem::needs_drop::<T>() {\n///                 for x in self.iter_mut() {\n///                     ptr::drop_in_place(x);\n///                 }\n///             }\n///             self.free_buffer();\n///         }\n///     }\n/// }\n/// ```\n#[inline]\n#[must_use]\n#[stable(feature = \"needs_drop\", since = \"1.21.0\")]\n#[rustc_const_stable(feature = \"const_mem_needs_drop\", since = \"1.36.0\")]\n#[rustc_diagnostic_item = \"needs_drop\"]\npub const fn needs_drop<T: ?Sized>() -> bool {\n    intrinsics::needs_drop::<T>()\n}\n\n/// Returns the value of type `T` represented by the all-zero byte-pattern.\n///\n/// This means that, for example, the padding byte in `(u8, u16)` is not\n/// necessarily zeroed.\n///\n/// There is no guarantee that an all-zero byte-pattern represents a valid value\n/// of some type `T`. For example, the all-zero byte-pattern is not a valid value\n/// for reference types (`&T`, `&mut T`) and functions pointers. Using `zeroed`\n/// on such types causes immediate [undefined behavior][ub] because [the Rust\n/// compiler assumes][inv] that there always is a valid value in a variable it\n/// considers initialized.\n///\n/// This has the same effect as [`MaybeUninit::zeroed().assume_init()`][zeroed].\n/// It is useful for FFI sometimes, but should generally be avoided.\n///\n/// [zeroed]: MaybeUninit::zeroed\n/// [ub]: ../../reference/behavior-considered-undefined.html\n/// [inv]: MaybeUninit#initialization-invariant\n///\n/// # Examples\n///\n/// Correct usage of this function: initializing an integer with zero.\n///\n/// ```\n/// use std::mem;\n///\n/// let x: i32 = unsafe { mem::zeroed() };\n/// assert_eq!(0, x);\n/// ```\n///\n/// *Incorrect* usage of this function: initializing a reference with zero.\n///\n/// ```rust,no_run\n/// # #![allow(invalid_value)]\n/// use std::mem;\n///\n/// let _x: &i32 = unsafe { mem::zeroed() }; // Undefined behavior!\n/// let _y: fn() = unsafe { mem::zeroed() }; // And again!\n/// ```\n#[inline(always)]\n#[must_use]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\n#[allow(deprecated_in_future)]\n#[allow(deprecated)]\n#[rustc_diagnostic_item = \"mem_zeroed\"]\n#[track_caller]\n#[rustc_const_stable(feature = \"const_mem_zeroed\", since = \"1.75.0\")]\npub const unsafe fn zeroed<T>() -> T {\n    // SAFETY: the caller must guarantee that an all-zero value is valid for `T`.\n    unsafe {\n        intrinsics::assert_zero_valid::<T>();\n        MaybeUninit::zeroed().assume_init()\n    }\n}\n\n/// Bypasses Rust's normal memory-initialization checks by pretending to\n/// produce a value of type `T`, while doing nothing at all.\n///\n/// **This function is deprecated.** Use [`MaybeUninit<T>`] instead.\n/// It also might be slower than using `MaybeUninit<T>` due to mitigations that were put in place to\n/// limit the potential harm caused by incorrect use of this function in legacy code.\n///\n/// The reason for deprecation is that the function basically cannot be used\n/// correctly: it has the same effect as [`MaybeUninit::uninit().assume_init()`][uninit].\n/// As the [`assume_init` documentation][assume_init] explains,\n/// [the Rust compiler assumes][inv] that values are properly initialized.\n///\n/// Truly uninitialized memory like what gets returned here\n/// is special in that the compiler knows that it does not have a fixed value.\n/// This makes it undefined behavior to have uninitialized data in a variable even\n/// if that variable has an integer type.\n///\n/// Therefore, it is immediate undefined behavior to call this function on nearly all types,\n/// including integer types and arrays of integer types, and even if the result is unused.\n///\n/// [uninit]: MaybeUninit::uninit\n/// [assume_init]: MaybeUninit::assume_init\n/// [inv]: MaybeUninit#initialization-invariant\n#[inline(always)]\n#[must_use]\n#[deprecated(since = \"1.39.0\", note = \"use `mem::MaybeUninit` instead\")]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\n#[allow(deprecated_in_future)]\n#[allow(deprecated)]\n#[rustc_diagnostic_item = \"mem_uninitialized\"]\n#[track_caller]\npub unsafe fn uninitialized<T>() -> T {\n    // SAFETY: the caller must guarantee that an uninitialized value is valid for `T`.\n    unsafe {\n        intrinsics::assert_mem_uninitialized_valid::<T>();\n        let mut val = MaybeUninit::<T>::uninit();\n\n        // Fill memory with 0x01, as an imperfect mitigation for old code that uses this function on\n        // bool, nonnull, and noundef types. But don't do this if we actively want to detect UB.\n        if !cfg!(any(miri, sanitize = \"memory\")) {\n            val.as_mut_ptr().write_bytes(0x01, 1);\n        }\n\n        val.assume_init()\n    }\n}\n\n/// Swaps the values at two mutable locations, without deinitializing either one.\n///\n/// * If you want to swap with a default or dummy value, see [`take`].\n/// * If you want to swap with a passed value, returning the old value, see [`replace`].\n///\n/// # Examples\n///\n/// ```\n/// use std::mem;\n///\n/// let mut x = 5;\n/// let mut y = 42;\n///\n/// mem::swap(&mut x, &mut y);\n///\n/// assert_eq!(42, x);\n/// assert_eq!(5, y);\n/// ```\n#[inline]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\n#[rustc_const_unstable(feature = \"const_swap\", issue = \"83163\")]\n#[rustc_diagnostic_item = \"mem_swap\"]\npub const fn swap<T>(x: &mut T, y: &mut T) {\n    // SAFETY: `&mut` guarantees these are typed readable and writable\n    // as well as non-overlapping.\n    unsafe { intrinsics::typed_swap(x, y) }\n}\n\n/// Replaces `dest` with the default value of `T`, returning the previous `dest` value.\n///\n/// * If you want to replace the values of two variables, see [`swap`].\n/// * If you want to replace with a passed value instead of the default value, see [`replace`].\n///\n/// # Examples\n///\n/// A simple example:\n///\n/// ```\n/// use std::mem;\n///\n/// let mut v: Vec<i32> = vec![1, 2];\n///\n/// let old_v = mem::take(&mut v);\n/// assert_eq!(vec![1, 2], old_v);\n/// assert!(v.is_empty());\n/// ```\n///\n/// `take` allows taking ownership of a struct field by replacing it with an \"empty\" value.\n/// Without `take` you can run into issues like these:\n///\n/// ```compile_fail,E0507\n/// struct Buffer<T> { buf: Vec<T> }\n///\n/// impl<T> Buffer<T> {\n///     fn get_and_reset(&mut self) -> Vec<T> {\n///         // error: cannot move out of dereference of `&mut`-pointer\n///         let buf = self.buf;\n///         self.buf = Vec::new();\n///         buf\n///     }\n/// }\n/// ```\n///\n/// Note that `T` does not necessarily implement [`Clone`], so it can't even clone and reset\n/// `self.buf`. But `take` can be used to disassociate the original value of `self.buf` from\n/// `self`, allowing it to be returned:\n///\n/// ```\n/// use std::mem;\n///\n/// # struct Buffer<T> { buf: Vec<T> }\n/// impl<T> Buffer<T> {\n///     fn get_and_reset(&mut self) -> Vec<T> {\n///         mem::take(&mut self.buf)\n///     }\n/// }\n///\n/// let mut buffer = Buffer { buf: vec![0, 1] };\n/// assert_eq!(buffer.buf.len(), 2);\n///\n/// assert_eq!(buffer.get_and_reset(), vec![0, 1]);\n/// assert_eq!(buffer.buf.len(), 0);\n/// ```\n#[inline]\n#[stable(feature = \"mem_take\", since = \"1.40.0\")]\npub fn take<T: Default>(dest: &mut T) -> T {\n    replace(dest, T::default())\n}\n\n/// Moves `src` into the referenced `dest`, returning the previous `dest` value.\n///\n/// Neither value is dropped.\n///\n/// * If you want to replace the values of two variables, see [`swap`].\n/// * If you want to replace with a default value, see [`take`].\n///\n/// # Examples\n///\n/// A simple example:\n///\n/// ```\n/// use std::mem;\n///\n/// let mut v: Vec<i32> = vec![1, 2];\n///\n/// let old_v = mem::replace(&mut v, vec![3, 4, 5]);\n/// assert_eq!(vec![1, 2], old_v);\n/// assert_eq!(vec![3, 4, 5], v);\n/// ```\n///\n/// `replace` allows consumption of a struct field by replacing it with another value.\n/// Without `replace` you can run into issues like these:\n///\n/// ```compile_fail,E0507\n/// struct Buffer<T> { buf: Vec<T> }\n///\n/// impl<T> Buffer<T> {\n///     fn replace_index(&mut self, i: usize, v: T) -> T {\n///         // error: cannot move out of dereference of `&mut`-pointer\n///         let t = self.buf[i];\n///         self.buf[i] = v;\n///         t\n///     }\n/// }\n/// ```\n///\n/// Note that `T` does not necessarily implement [`Clone`], so we can't even clone `self.buf[i]` to\n/// avoid the move. But `replace` can be used to disassociate the original value at that index from\n/// `self`, allowing it to be returned:\n///\n/// ```\n/// # #![allow(dead_code)]\n/// use std::mem;\n///\n/// # struct Buffer<T> { buf: Vec<T> }\n/// impl<T> Buffer<T> {\n///     fn replace_index(&mut self, i: usize, v: T) -> T {\n///         mem::replace(&mut self.buf[i], v)\n///     }\n/// }\n///\n/// let mut buffer = Buffer { buf: vec![0, 1] };\n/// assert_eq!(buffer.buf[0], 0);\n///\n/// assert_eq!(buffer.replace_index(0, 2), 0);\n/// assert_eq!(buffer.buf[0], 2);\n/// ```\n#[inline]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\n#[must_use = \"if you don't need the old value, you can just assign the new value directly\"]\n#[rustc_const_unstable(feature = \"const_replace\", issue = \"83164\")]\n#[cfg_attr(not(test), rustc_diagnostic_item = \"mem_replace\")]\npub const fn replace<T>(dest: &mut T, src: T) -> T {\n    // It may be tempting to use `swap` to avoid `unsafe` here. Don't!\n    // The compiler optimizes the implementation below to two `memcpy`s\n    // while `swap` would require at least three. See PR#83022 for details.\n\n    // SAFETY: We read from `dest` but directly write `src` into it afterwards,\n    // such that the old value is not duplicated. Nothing is dropped and\n    // nothing here can panic.\n    unsafe {\n        let result = ptr::read(dest);\n        ptr::write(dest, src);\n        result\n    }\n}\n\n/// Disposes of a value.\n///\n/// This does so by calling the argument's implementation of [`Drop`][drop].\n///\n/// This effectively does nothing for types which implement `Copy`, e.g.\n/// integers. Such values are copied and _then_ moved into the function, so the\n/// value persists after this function call.\n///\n/// This function is not magic; it is literally defined as\n///\n/// ```\n/// pub fn drop<T>(_x: T) {}\n/// ```\n///\n/// Because `_x` is moved into the function, it is automatically dropped before\n/// the function returns.\n///\n/// [drop]: Drop\n///\n/// # Examples\n///\n/// Basic usage:\n///\n/// ```\n/// let v = vec![1, 2, 3];\n///\n/// drop(v); // explicitly drop the vector\n/// ```\n///\n/// Since [`RefCell`] enforces the borrow rules at runtime, `drop` can\n/// release a [`RefCell`] borrow:\n///\n/// ```\n/// use std::cell::RefCell;\n///\n/// let x = RefCell::new(1);\n///\n/// let mut mutable_borrow = x.borrow_mut();\n/// *mutable_borrow = 1;\n///\n/// drop(mutable_borrow); // relinquish the mutable borrow on this slot\n///\n/// let borrow = x.borrow();\n/// println!(\"{}\", *borrow);\n/// ```\n///\n/// Integers and other types implementing [`Copy`] are unaffected by `drop`.\n///\n/// ```\n/// # #![allow(dropping_copy_types)]\n/// #[derive(Copy, Clone)]\n/// struct Foo(u8);\n///\n/// let x = 1;\n/// let y = Foo(2);\n/// drop(x); // a copy of `x` is moved and dropped\n/// drop(y); // a copy of `y` is moved and dropped\n///\n/// println!(\"x: {}, y: {}\", x, y.0); // still available\n/// ```\n///\n/// [`RefCell`]: crate::cell::RefCell\n#[inline]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\n#[cfg_attr(not(test), rustc_diagnostic_item = \"mem_drop\")]\npub fn drop<T>(_x: T) {}\n\n/// Bitwise-copies a value.\n///\n/// This function is not magic; it is literally defined as\n/// ```\n/// pub fn copy<T: Copy>(x: &T) -> T { *x }\n/// ```\n///\n/// It is useful when you want to pass a function pointer to a combinator, rather than defining a new closure.\n///\n/// Example:\n/// ```\n/// #![feature(mem_copy_fn)]\n/// use core::mem::copy;\n/// let result_from_ffi_function: Result<(), &i32> = Err(&1);\n/// let result_copied: Result<(), i32> = result_from_ffi_function.map_err(copy);\n/// ```\n#[inline]\n#[unstable(feature = \"mem_copy_fn\", issue = \"98262\")]\npub const fn copy<T: Copy>(x: &T) -> T {\n    *x\n}\n\n/// Interprets `src` as having type `&Dst`, and then reads `src` without moving\n/// the contained value.\n///\n/// This function will unsafely assume the pointer `src` is valid for [`size_of::<Dst>`][size_of]\n/// bytes by transmuting `&Src` to `&Dst` and then reading the `&Dst` (except that this is done\n/// in a way that is correct even when `&Dst` has stricter alignment requirements than `&Src`).\n/// It will also unsafely create a copy of the contained value instead of moving out of `src`.\n///\n/// It is not a compile-time error if `Src` and `Dst` have different sizes, but it\n/// is highly encouraged to only invoke this function where `Src` and `Dst` have the\n/// same size. This function triggers [undefined behavior][ub] if `Dst` is larger than\n/// `Src`.\n///\n/// [ub]: ../../reference/behavior-considered-undefined.html\n///\n/// # Examples\n///\n/// ```\n/// use std::mem;\n///\n/// #[repr(packed)]\n/// struct Foo {\n///     bar: u8,\n/// }\n///\n/// let foo_array = [10u8];\n///\n/// unsafe {\n///     // Copy the data from 'foo_array' and treat it as a 'Foo'\n///     let mut foo_struct: Foo = mem::transmute_copy(&foo_array);\n///     assert_eq!(foo_struct.bar, 10);\n///\n///     // Modify the copied data\n///     foo_struct.bar = 20;\n///     assert_eq!(foo_struct.bar, 20);\n/// }\n///\n/// // The contents of 'foo_array' should not have changed\n/// assert_eq!(foo_array, [10]);\n/// ```\n#[inline]\n#[must_use]\n#[track_caller]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\n#[rustc_const_stable(feature = \"const_transmute_copy\", since = \"1.74.0\")]\npub const unsafe fn transmute_copy<Src, Dst>(src: &Src) -> Dst {\n    assert!(\n        size_of::<Src>() >= size_of::<Dst>(),\n        \"cannot transmute_copy if Dst is larger than Src\"\n    );\n\n    // If Dst has a higher alignment requirement, src might not be suitably aligned.\n    if align_of::<Dst>() > align_of::<Src>() {\n        // SAFETY: `src` is a reference which is guaranteed to be valid for reads.\n        // The caller must guarantee that the actual transmutation is safe.\n        unsafe { ptr::read_unaligned(src as *const Src as *const Dst) }\n    } else {\n        // SAFETY: `src` is a reference which is guaranteed to be valid for reads.\n        // We just checked that `src as *const Dst` was properly aligned.\n        // The caller must guarantee that the actual transmutation is safe.\n        unsafe { ptr::read(src as *const Src as *const Dst) }\n    }\n}\n\n/// Opaque type representing the discriminant of an enum.\n///\n/// See the [`discriminant`] function in this module for more information.\n#[stable(feature = \"discriminant_value\", since = \"1.21.0\")]\npub struct Discriminant<T>(<T as DiscriminantKind>::Discriminant);\n\n// N.B. These trait implementations cannot be derived because we don't want any bounds on T.\n\n#[stable(feature = \"discriminant_value\", since = \"1.21.0\")]\nimpl<T> Copy for Discriminant<T> {}\n\n#[stable(feature = \"discriminant_value\", since = \"1.21.0\")]\nimpl<T> clone::Clone for Discriminant<T> {\n    fn clone(&self) -> Self {\n        *self\n    }\n}\n\n#[stable(feature = \"discriminant_value\", since = \"1.21.0\")]\nimpl<T> cmp::PartialEq for Discriminant<T> {\n    fn eq(&self, rhs: &Self) -> bool {\n        self.0 == rhs.0\n    }\n}\n\n#[stable(feature = \"discriminant_value\", since = \"1.21.0\")]\nimpl<T> cmp::Eq for Discriminant<T> {}\n\n#[stable(feature = \"discriminant_value\", since = \"1.21.0\")]\nimpl<T> hash::Hash for Discriminant<T> {\n    fn hash<H: hash::Hasher>(&self, state: &mut H) {\n        self.0.hash(state);\n    }\n}\n\n#[stable(feature = \"discriminant_value\", since = \"1.21.0\")]\nimpl<T> fmt::Debug for Discriminant<T> {\n    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n        fmt.debug_tuple(\"Discriminant\").field(&self.0).finish()\n    }\n}\n\n/// Returns a value uniquely identifying the enum variant in `v`.\n///\n/// If `T` is not an enum, calling this function will not result in undefined behavior, but the\n/// return value is unspecified.\n///\n/// # Stability\n///\n/// The discriminant of an enum variant may change if the enum definition changes. A discriminant\n/// of some variant will not change between compilations with the same compiler. See the [Reference]\n/// for more information.\n///\n/// [Reference]: ../../reference/items/enumerations.html#custom-discriminant-values-for-fieldless-enumerations\n///\n/// The value of a [`Discriminant<T>`] is independent of any *free lifetimes* in `T`. As such,\n/// reading or writing a `Discriminant<Foo<'a>>` as a `Discriminant<Foo<'b>>` (whether via\n/// [`transmute`] or otherwise) is always sound. Note that this is **not** true for other kinds\n/// of generic parameters and for higher-ranked lifetimes; `Discriminant<Foo<A>>` and\n/// `Discriminant<Foo<B>>` as well as `Discriminant<Bar<dyn for<'a> Trait<'a>>>` and\n/// `Discriminant<Bar<dyn Trait<'static>>>` may be incompatible.\n///\n/// # Examples\n///\n/// This can be used to compare enums that carry data, while disregarding\n/// the actual data:\n///\n/// ```\n/// use std::mem;\n///\n/// enum Foo { A(&'static str), B(i32), C(i32) }\n///\n/// assert_eq!(mem::discriminant(&Foo::A(\"bar\")), mem::discriminant(&Foo::A(\"baz\")));\n/// assert_eq!(mem::discriminant(&Foo::B(1)), mem::discriminant(&Foo::B(2)));\n/// assert_ne!(mem::discriminant(&Foo::B(3)), mem::discriminant(&Foo::C(3)));\n/// ```\n///\n/// ## Accessing the numeric value of the discriminant\n///\n/// Note that it is *undefined behavior* to [`transmute`] from [`Discriminant`] to a primitive!\n///\n/// If an enum has only unit variants, then the numeric value of the discriminant can be accessed\n/// with an [`as`] cast:\n///\n/// ```\n/// enum Enum {\n///     Foo,\n///     Bar,\n///     Baz,\n/// }\n///\n/// assert_eq!(0, Enum::Foo as isize);\n/// assert_eq!(1, Enum::Bar as isize);\n/// assert_eq!(2, Enum::Baz as isize);\n/// ```\n///\n/// If an enum has opted-in to having a [primitive representation] for its discriminant,\n/// then it's possible to use pointers to read the memory location storing the discriminant.\n/// That **cannot** be done for enums using the [default representation], however, as it's\n/// undefined what layout the discriminant has and where it's stored — it might not even be\n/// stored at all!\n///\n/// [`as`]: ../../std/keyword.as.html\n/// [primitive representation]: ../../reference/type-layout.html#primitive-representations\n/// [default representation]: ../../reference/type-layout.html#the-default-representation\n/// ```\n/// #[repr(u8)]\n/// enum Enum {\n///     Unit,\n///     Tuple(bool),\n///     Struct { a: bool },\n/// }\n///\n/// impl Enum {\n///     fn discriminant(&self) -> u8 {\n///         // SAFETY: Because `Self` is marked `repr(u8)`, its layout is a `repr(C)` `union`\n///         // between `repr(C)` structs, each of which has the `u8` discriminant as its first\n///         // field, so we can read the discriminant without offsetting the pointer.\n///         unsafe { *<*const _>::from(self).cast::<u8>() }\n///     }\n/// }\n///\n/// let unit_like = Enum::Unit;\n/// let tuple_like = Enum::Tuple(true);\n/// let struct_like = Enum::Struct { a: false };\n/// assert_eq!(0, unit_like.discriminant());\n/// assert_eq!(1, tuple_like.discriminant());\n/// assert_eq!(2, struct_like.discriminant());\n///\n/// // ⚠️ This is undefined behavior. Don't do this. ⚠️\n/// // assert_eq!(0, unsafe { std::mem::transmute::<_, u8>(std::mem::discriminant(&unit_like)) });\n/// ```\n#[stable(feature = \"discriminant_value\", since = \"1.21.0\")]\n#[rustc_const_stable(feature = \"const_discriminant\", since = \"1.75.0\")]\n#[cfg_attr(not(test), rustc_diagnostic_item = \"mem_discriminant\")]\n#[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\npub const fn discriminant<T>(v: &T) -> Discriminant<T> {\n    Discriminant(intrinsics::discriminant_value(v))\n}\n\n/// Returns the number of variants in the enum type `T`.\n///\n/// If `T` is not an enum, calling this function will not result in undefined behavior, but the\n/// return value is unspecified. Equally, if `T` is an enum with more variants than `usize::MAX`\n/// the return value is unspecified. Uninhabited variants will be counted.\n///\n/// Note that an enum may be expanded with additional variants in the future\n/// as a non-breaking change, for example if it is marked `#[non_exhaustive]`,\n/// which will change the result of this function.\n///\n/// # Examples\n///\n/// ```\n/// # #![feature(never_type)]\n/// # #![feature(variant_count)]\n///\n/// use std::mem;\n///\n/// enum Void {}\n/// enum Foo { A(&'static str), B(i32), C(i32) }\n///\n/// assert_eq!(mem::variant_count::<Void>(), 0);\n/// assert_eq!(mem::variant_count::<Foo>(), 3);\n///\n/// assert_eq!(mem::variant_count::<Option<!>>(), 2);\n/// assert_eq!(mem::variant_count::<Result<!, !>>(), 2);\n/// ```\n#[inline(always)]\n#[must_use]\n#[unstable(feature = \"variant_count\", issue = \"73662\")]\n#[rustc_const_unstable(feature = \"variant_count\", issue = \"73662\")]\n#[rustc_diagnostic_item = \"mem_variant_count\"]\npub const fn variant_count<T>() -> usize {\n    intrinsics::variant_count::<T>()\n}\n\n/// Provides associated constants for various useful properties of types,\n/// to give them a canonical form in our code and make them easier to read.\n///\n/// This is here only to simplify all the ZST checks we need in the library.\n/// It's not on a stabilization track right now.\n#[doc(hidden)]\n#[unstable(feature = \"sized_type_properties\", issue = \"none\")]\npub trait SizedTypeProperties: Sized {\n    /// `true` if this type requires no storage.\n    /// `false` if its [size](size_of) is greater than zero.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// #![feature(sized_type_properties)]\n    /// use core::mem::SizedTypeProperties;\n    ///\n    /// fn do_something_with<T>() {\n    ///     if T::IS_ZST {\n    ///         // ... special approach ...\n    ///     } else {\n    ///         // ... the normal thing ...\n    ///     }\n    /// }\n    ///\n    /// struct MyUnit;\n    /// assert!(MyUnit::IS_ZST);\n    ///\n    /// // For negative checks, consider using UFCS to emphasize the negation\n    /// assert!(!<i32>::IS_ZST);\n    /// // As it can sometimes hide in the type otherwise\n    /// assert!(!String::IS_ZST);\n    /// ```\n    #[doc(hidden)]\n    #[unstable(feature = \"sized_type_properties\", issue = \"none\")]\n    const IS_ZST: bool = size_of::<Self>() == 0;\n}\n#[doc(hidden)]\n#[unstable(feature = \"sized_type_properties\", issue = \"none\")]\nimpl<T> SizedTypeProperties for T {}\n\n/// Expands to the offset in bytes of a field from the beginning of the given type.\n///\n/// Structs, enums, unions and tuples are supported.\n///\n/// Nested field accesses may be used, but not array indexes.\n///\n/// Enum variants may be traversed as if they were fields. Variants themselves do\n/// not have an offset.\n///\n/// However, on stable only a single field name is supported, which blocks the use of\n/// enum support.\n///\n/// Visibility is respected - all types and fields must be visible to the call site:\n///\n/// ```\n/// mod nested {\n///     #[repr(C)]\n///     pub struct Struct {\n///         private: u8,\n///     }\n/// }\n///\n/// // assert_eq!(mem::offset_of!(nested::Struct, private), 0);\n/// // ^^^ error[E0616]: field `private` of struct `Struct` is private\n/// ```\n///\n/// Note that type layout is, in general, [subject to change and\n/// platform-specific](https://doc.rust-lang.org/reference/type-layout.html). If\n/// layout stability is required, consider using an [explicit `repr` attribute].\n///\n/// Rust guarantees that the offset of a given field within a given type will not\n/// change over the lifetime of the program. However, two different compilations of\n/// the same program may result in different layouts. Also, even within a single\n/// program execution, no guarantees are made about types which are *similar* but\n/// not *identical*, e.g.:\n///\n/// ```\n/// struct Wrapper<T, U>(T, U);\n///\n/// type A = Wrapper<u8, u8>;\n/// type B = Wrapper<u8, i8>;\n///\n/// // Not necessarily identical even though `u8` and `i8` have the same layout!\n/// // assert_eq!(mem::offset_of!(A, 1), mem::offset_of!(B, 1));\n///\n/// #[repr(transparent)]\n/// struct U8(u8);\n///\n/// type C = Wrapper<u8, U8>;\n///\n/// // Not necessarily identical even though `u8` and `U8` have the same layout!\n/// // assert_eq!(mem::offset_of!(A, 1), mem::offset_of!(C, 1));\n///\n/// struct Empty<T>(core::marker::PhantomData<T>);\n///\n/// // Not necessarily identical even though `PhantomData` always has the same layout!\n/// // assert_eq!(mem::offset_of!(Empty<u8>, 0), mem::offset_of!(Empty<i8>, 0));\n/// ```\n///\n/// [explicit `repr` attribute]: https://doc.rust-lang.org/reference/type-layout.html#representations\n///\n/// # Examples\n///\n/// ```\n/// #![feature(offset_of_enum, offset_of_nested)]\n///\n/// use std::mem;\n/// #[repr(C)]\n/// struct FieldStruct {\n///     first: u8,\n///     second: u16,\n///     third: u8\n/// }\n///\n/// assert_eq!(mem::offset_of!(FieldStruct, first), 0);\n/// assert_eq!(mem::offset_of!(FieldStruct, second), 2);\n/// assert_eq!(mem::offset_of!(FieldStruct, third), 4);\n///\n/// #[repr(C)]\n/// struct NestedA {\n///     b: NestedB\n/// }\n///\n/// #[repr(C)]\n/// struct NestedB(u8);\n///\n/// assert_eq!(mem::offset_of!(NestedA, b.0), 0);\n///\n/// #[repr(u8)]\n/// enum Enum {\n///     A(u8, u16),\n///     B { one: u8, two: u16 },\n/// }\n///\n/// assert_eq!(mem::offset_of!(Enum, A.0), 1);\n/// assert_eq!(mem::offset_of!(Enum, B.two), 2);\n///\n/// assert_eq!(mem::offset_of!(Option<&u8>, Some.0), 0);\n/// ```\n#[stable(feature = \"offset_of\", since = \"1.77.0\")]\n#[allow_internal_unstable(builtin_syntax)]\npub macro offset_of($Container:ty, $($fields:expr)+ $(,)?) {\n    // The `{}` is for better error messages\n    {builtin # offset_of($Container, $($fields)+)}\n}\n\n```",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Source of the Rust file `library/core/src/mem/mod.rs`.\"><title>mod.rs - source</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../../\" data-static-root-path=\"../../../static.files/\" data-current-crate=\"core\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"../../../static.files/src-script-e66d777a5a92e9b2.js\"></script><script defer=\"\" src=\"../../../src-files1.80.0.js\"></script><script defer=\"\" src=\"../../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc src\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"sidebar\"><div class=\"src-sidebar-title\"><h2>Files</h2></div><div id=\"src-sidebar\"><details class=\"dir-entry\"><summary>alloc</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>boxed</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/alloc/boxed/thin.rs.html\">thin.rs</a></div></details><details class=\"dir-entry\"><summary>collections</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>binary_heap</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/alloc/collections/binary_heap/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>btree</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>map</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/alloc/collections/btree/map/entry.rs.html\">entry.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/alloc/collections/btree/append.rs.html\">append.rs</a><a href=\"../../../src/alloc/collections/btree/borrow.rs.html\">borrow.rs</a><a href=\"../../../src/alloc/collections/btree/dedup_sorted_iter.rs.html\">dedup_sorted_iter.rs</a><a href=\"../../../src/alloc/collections/btree/fix.rs.html\">fix.rs</a><a href=\"../../../src/alloc/collections/btree/map.rs.html\">map.rs</a><a href=\"../../../src/alloc/collections/btree/mem.rs.html\">mem.rs</a><a href=\"../../../src/alloc/collections/btree/merge_iter.rs.html\">merge_iter.rs</a><a href=\"../../../src/alloc/collections/btree/mod.rs.html\">mod.rs</a><a href=\"../../../src/alloc/collections/btree/navigate.rs.html\">navigate.rs</a><a href=\"../../../src/alloc/collections/btree/node.rs.html\">node.rs</a><a href=\"../../../src/alloc/collections/btree/remove.rs.html\">remove.rs</a><a href=\"../../../src/alloc/collections/btree/search.rs.html\">search.rs</a><a href=\"../../../src/alloc/collections/btree/set.rs.html\">set.rs</a><a href=\"../../../src/alloc/collections/btree/set_val.rs.html\">set_val.rs</a><a href=\"../../../src/alloc/collections/btree/split.rs.html\">split.rs</a></div></details><details class=\"dir-entry\"><summary>vec_deque</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/alloc/collections/vec_deque/drain.rs.html\">drain.rs</a><a href=\"../../../src/alloc/collections/vec_deque/into_iter.rs.html\">into_iter.rs</a><a href=\"../../../src/alloc/collections/vec_deque/iter.rs.html\">iter.rs</a><a href=\"../../../src/alloc/collections/vec_deque/iter_mut.rs.html\">iter_mut.rs</a><a href=\"../../../src/alloc/collections/vec_deque/macros.rs.html\">macros.rs</a><a href=\"../../../src/alloc/collections/vec_deque/mod.rs.html\">mod.rs</a><a href=\"../../../src/alloc/collections/vec_deque/spec_extend.rs.html\">spec_extend.rs</a><a href=\"../../../src/alloc/collections/vec_deque/spec_from_iter.rs.html\">spec_from_iter.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/alloc/collections/linked_list.rs.html\">linked_list.rs</a><a href=\"../../../src/alloc/collections/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>ffi</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/alloc/ffi/c_str.rs.html\">c_str.rs</a><a href=\"../../../src/alloc/ffi/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>vec</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/alloc/vec/cow.rs.html\">cow.rs</a><a href=\"../../../src/alloc/vec/drain.rs.html\">drain.rs</a><a href=\"../../../src/alloc/vec/extract_if.rs.html\">extract_if.rs</a><a href=\"../../../src/alloc/vec/in_place_collect.rs.html\">in_place_collect.rs</a><a href=\"../../../src/alloc/vec/in_place_drop.rs.html\">in_place_drop.rs</a><a href=\"../../../src/alloc/vec/into_iter.rs.html\">into_iter.rs</a><a href=\"../../../src/alloc/vec/is_zero.rs.html\">is_zero.rs</a><a href=\"../../../src/alloc/vec/mod.rs.html\">mod.rs</a><a href=\"../../../src/alloc/vec/partial_eq.rs.html\">partial_eq.rs</a><a href=\"../../../src/alloc/vec/set_len_on_drop.rs.html\">set_len_on_drop.rs</a><a href=\"../../../src/alloc/vec/spec_extend.rs.html\">spec_extend.rs</a><a href=\"../../../src/alloc/vec/spec_from_elem.rs.html\">spec_from_elem.rs</a><a href=\"../../../src/alloc/vec/spec_from_iter.rs.html\">spec_from_iter.rs</a><a href=\"../../../src/alloc/vec/spec_from_iter_nested.rs.html\">spec_from_iter_nested.rs</a><a href=\"../../../src/alloc/vec/splice.rs.html\">splice.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/alloc/alloc.rs.html\">alloc.rs</a><a href=\"../../../src/alloc/borrow.rs.html\">borrow.rs</a><a href=\"../../../src/alloc/boxed.rs.html\">boxed.rs</a><a href=\"../../../src/alloc/fmt.rs.html\">fmt.rs</a><a href=\"../../../src/alloc/lib.rs.html\">lib.rs</a><a href=\"../../../src/alloc/macros.rs.html\">macros.rs</a><a href=\"../../../src/alloc/raw_vec.rs.html\">raw_vec.rs</a><a href=\"../../../src/alloc/rc.rs.html\">rc.rs</a><a href=\"../../../src/alloc/slice.rs.html\">slice.rs</a><a href=\"../../../src/alloc/str.rs.html\">str.rs</a><a href=\"../../../src/alloc/string.rs.html\">string.rs</a><a href=\"../../../src/alloc/sync.rs.html\">sync.rs</a><a href=\"../../../src/alloc/task.rs.html\">task.rs</a></div></details><details class=\"dir-entry\" open=\"\"><summary>core</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>alloc</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/alloc/global.rs.html\">global.rs</a><a href=\"../../../src/core/alloc/layout.rs.html\">layout.rs</a><a href=\"../../../src/core/alloc/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>array</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/array/ascii.rs.html\">ascii.rs</a><a href=\"../../../src/core/array/drain.rs.html\">drain.rs</a><a href=\"../../../src/core/array/equality.rs.html\">equality.rs</a><a href=\"../../../src/core/array/iter.rs.html\">iter.rs</a><a href=\"../../../src/core/array/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>ascii</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/ascii/ascii_char.rs.html\">ascii_char.rs</a></div></details><details class=\"dir-entry\"><summary>async_iter</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/async_iter/async_iter.rs.html\">async_iter.rs</a><a href=\"../../../src/core/async_iter/from_iter.rs.html\">from_iter.rs</a><a href=\"../../../src/core/async_iter/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>cell</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/cell/lazy.rs.html\">lazy.rs</a><a href=\"../../../src/core/cell/once.rs.html\">once.rs</a></div></details><details class=\"dir-entry\"><summary>char</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/char/convert.rs.html\">convert.rs</a><a href=\"../../../src/core/char/decode.rs.html\">decode.rs</a><a href=\"../../../src/core/char/methods.rs.html\">methods.rs</a><a href=\"../../../src/core/char/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>cmp</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/cmp/bytewise.rs.html\">bytewise.rs</a></div></details><details class=\"dir-entry\"><summary>convert</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/convert/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/convert/num.rs.html\">num.rs</a></div></details><details class=\"dir-entry\"><summary>ffi</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/ffi/c_str.rs.html\">c_str.rs</a><a href=\"../../../src/core/ffi/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>fmt</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/fmt/builders.rs.html\">builders.rs</a><a href=\"../../../src/core/fmt/float.rs.html\">float.rs</a><a href=\"../../../src/core/fmt/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/fmt/num.rs.html\">num.rs</a><a href=\"../../../src/core/fmt/rt.rs.html\">rt.rs</a></div></details><details class=\"dir-entry\"><summary>future</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/future/async_drop.rs.html\">async_drop.rs</a><a href=\"../../../src/core/future/future.rs.html\">future.rs</a><a href=\"../../../src/core/future/into_future.rs.html\">into_future.rs</a><a href=\"../../../src/core/future/join.rs.html\">join.rs</a><a href=\"../../../src/core/future/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/future/pending.rs.html\">pending.rs</a><a href=\"../../../src/core/future/poll_fn.rs.html\">poll_fn.rs</a><a href=\"../../../src/core/future/ready.rs.html\">ready.rs</a></div></details><details class=\"dir-entry\"><summary>hash</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/hash/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/hash/sip.rs.html\">sip.rs</a></div></details><details class=\"dir-entry\"><summary>intrinsics</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/intrinsics/mir.rs.html\">mir.rs</a><a href=\"../../../src/core/intrinsics/simd.rs.html\">simd.rs</a></div></details><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/io/borrowed_buf.rs.html\">borrowed_buf.rs</a><a href=\"../../../src/core/io/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>iter</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>adapters</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/iter/adapters/array_chunks.rs.html\">array_chunks.rs</a><a href=\"../../../src/core/iter/adapters/by_ref_sized.rs.html\">by_ref_sized.rs</a><a href=\"../../../src/core/iter/adapters/chain.rs.html\">chain.rs</a><a href=\"../../../src/core/iter/adapters/cloned.rs.html\">cloned.rs</a><a href=\"../../../src/core/iter/adapters/copied.rs.html\">copied.rs</a><a href=\"../../../src/core/iter/adapters/cycle.rs.html\">cycle.rs</a><a href=\"../../../src/core/iter/adapters/enumerate.rs.html\">enumerate.rs</a><a href=\"../../../src/core/iter/adapters/filter.rs.html\">filter.rs</a><a href=\"../../../src/core/iter/adapters/filter_map.rs.html\">filter_map.rs</a><a href=\"../../../src/core/iter/adapters/flatten.rs.html\">flatten.rs</a><a href=\"../../../src/core/iter/adapters/fuse.rs.html\">fuse.rs</a><a href=\"../../../src/core/iter/adapters/inspect.rs.html\">inspect.rs</a><a href=\"../../../src/core/iter/adapters/intersperse.rs.html\">intersperse.rs</a><a href=\"../../../src/core/iter/adapters/map.rs.html\">map.rs</a><a href=\"../../../src/core/iter/adapters/map_while.rs.html\">map_while.rs</a><a href=\"../../../src/core/iter/adapters/map_windows.rs.html\">map_windows.rs</a><a href=\"../../../src/core/iter/adapters/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/iter/adapters/peekable.rs.html\">peekable.rs</a><a href=\"../../../src/core/iter/adapters/rev.rs.html\">rev.rs</a><a href=\"../../../src/core/iter/adapters/scan.rs.html\">scan.rs</a><a href=\"../../../src/core/iter/adapters/skip.rs.html\">skip.rs</a><a href=\"../../../src/core/iter/adapters/skip_while.rs.html\">skip_while.rs</a><a href=\"../../../src/core/iter/adapters/step_by.rs.html\">step_by.rs</a><a href=\"../../../src/core/iter/adapters/take.rs.html\">take.rs</a><a href=\"../../../src/core/iter/adapters/take_while.rs.html\">take_while.rs</a><a href=\"../../../src/core/iter/adapters/zip.rs.html\">zip.rs</a></div></details><details class=\"dir-entry\"><summary>sources</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/iter/sources/empty.rs.html\">empty.rs</a><a href=\"../../../src/core/iter/sources/from_coroutine.rs.html\">from_coroutine.rs</a><a href=\"../../../src/core/iter/sources/from_fn.rs.html\">from_fn.rs</a><a href=\"../../../src/core/iter/sources/once.rs.html\">once.rs</a><a href=\"../../../src/core/iter/sources/once_with.rs.html\">once_with.rs</a><a href=\"../../../src/core/iter/sources/repeat.rs.html\">repeat.rs</a><a href=\"../../../src/core/iter/sources/repeat_n.rs.html\">repeat_n.rs</a><a href=\"../../../src/core/iter/sources/repeat_with.rs.html\">repeat_with.rs</a><a href=\"../../../src/core/iter/sources/successors.rs.html\">successors.rs</a></div></details><details class=\"dir-entry\"><summary>traits</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/iter/traits/accum.rs.html\">accum.rs</a><a href=\"../../../src/core/iter/traits/collect.rs.html\">collect.rs</a><a href=\"../../../src/core/iter/traits/double_ended.rs.html\">double_ended.rs</a><a href=\"../../../src/core/iter/traits/exact_size.rs.html\">exact_size.rs</a><a href=\"../../../src/core/iter/traits/iterator.rs.html\">iterator.rs</a><a href=\"../../../src/core/iter/traits/marker.rs.html\">marker.rs</a><a href=\"../../../src/core/iter/traits/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/iter/traits/unchecked_iterator.rs.html\">unchecked_iterator.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/iter/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/iter/range.rs.html\">range.rs</a><a href=\"../../../src/core/iter/sources.rs.html\">sources.rs</a></div></details><details class=\"dir-entry\"><summary>macros</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/macros/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\" open=\"\"><summary>mem</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/mem/manually_drop.rs.html\">manually_drop.rs</a><a href=\"../../../src/core/mem/maybe_uninit.rs.html\">maybe_uninit.rs</a><a href=\"../../../src/core/mem/mod.rs.html\" class=\"selected\">mod.rs</a><a href=\"../../../src/core/mem/transmutability.rs.html\">transmutability.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/net/display_buffer.rs.html\">display_buffer.rs</a><a href=\"../../../src/core/net/ip_addr.rs.html\">ip_addr.rs</a><a href=\"../../../src/core/net/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/net/parser.rs.html\">parser.rs</a><a href=\"../../../src/core/net/socket_addr.rs.html\">socket_addr.rs</a></div></details><details class=\"dir-entry\"><summary>num</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>dec2flt</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/num/dec2flt/common.rs.html\">common.rs</a><a href=\"../../../src/core/num/dec2flt/decimal.rs.html\">decimal.rs</a><a href=\"../../../src/core/num/dec2flt/float.rs.html\">float.rs</a><a href=\"../../../src/core/num/dec2flt/fpu.rs.html\">fpu.rs</a><a href=\"../../../src/core/num/dec2flt/lemire.rs.html\">lemire.rs</a><a href=\"../../../src/core/num/dec2flt/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/num/dec2flt/number.rs.html\">number.rs</a><a href=\"../../../src/core/num/dec2flt/parse.rs.html\">parse.rs</a><a href=\"../../../src/core/num/dec2flt/slow.rs.html\">slow.rs</a><a href=\"../../../src/core/num/dec2flt/table.rs.html\">table.rs</a></div></details><details class=\"dir-entry\"><summary>flt2dec</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>strategy</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/num/flt2dec/strategy/dragon.rs.html\">dragon.rs</a><a href=\"../../../src/core/num/flt2dec/strategy/grisu.rs.html\">grisu.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/num/flt2dec/decoder.rs.html\">decoder.rs</a><a href=\"../../../src/core/num/flt2dec/estimator.rs.html\">estimator.rs</a><a href=\"../../../src/core/num/flt2dec/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>shells</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/num/shells/i128.rs.html\">i128.rs</a><a href=\"../../../src/core/num/shells/i16.rs.html\">i16.rs</a><a href=\"../../../src/core/num/shells/i32.rs.html\">i32.rs</a><a href=\"../../../src/core/num/shells/i64.rs.html\">i64.rs</a><a href=\"../../../src/core/num/shells/i8.rs.html\">i8.rs</a><a href=\"../../../src/core/num/shells/int_macros.rs.html\">int_macros.rs</a><a href=\"../../../src/core/num/shells/isize.rs.html\">isize.rs</a><a href=\"../../../src/core/num/shells/u128.rs.html\">u128.rs</a><a href=\"../../../src/core/num/shells/u16.rs.html\">u16.rs</a><a href=\"../../../src/core/num/shells/u32.rs.html\">u32.rs</a><a href=\"../../../src/core/num/shells/u64.rs.html\">u64.rs</a><a href=\"../../../src/core/num/shells/u8.rs.html\">u8.rs</a><a href=\"../../../src/core/num/shells/usize.rs.html\">usize.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/num/bignum.rs.html\">bignum.rs</a><a href=\"../../../src/core/num/diy_float.rs.html\">diy_float.rs</a><a href=\"../../../src/core/num/error.rs.html\">error.rs</a><a href=\"../../../src/core/num/f128.rs.html\">f128.rs</a><a href=\"../../../src/core/num/f16.rs.html\">f16.rs</a><a href=\"../../../src/core/num/f32.rs.html\">f32.rs</a><a href=\"../../../src/core/num/f64.rs.html\">f64.rs</a><a href=\"../../../src/core/num/fmt.rs.html\">fmt.rs</a><a href=\"../../../src/core/num/int_log10.rs.html\">int_log10.rs</a><a href=\"../../../src/core/num/int_macros.rs.html\">int_macros.rs</a><a href=\"../../../src/core/num/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/num/nonzero.rs.html\">nonzero.rs</a><a href=\"../../../src/core/num/overflow_panic.rs.html\">overflow_panic.rs</a><a href=\"../../../src/core/num/saturating.rs.html\">saturating.rs</a><a href=\"../../../src/core/num/uint_macros.rs.html\">uint_macros.rs</a><a href=\"../../../src/core/num/wrapping.rs.html\">wrapping.rs</a></div></details><details class=\"dir-entry\"><summary>ops</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/ops/arith.rs.html\">arith.rs</a><a href=\"../../../src/core/ops/async_function.rs.html\">async_function.rs</a><a href=\"../../../src/core/ops/bit.rs.html\">bit.rs</a><a href=\"../../../src/core/ops/control_flow.rs.html\">control_flow.rs</a><a href=\"../../../src/core/ops/coroutine.rs.html\">coroutine.rs</a><a href=\"../../../src/core/ops/deref.rs.html\">deref.rs</a><a href=\"../../../src/core/ops/drop.rs.html\">drop.rs</a><a href=\"../../../src/core/ops/function.rs.html\">function.rs</a><a href=\"../../../src/core/ops/index.rs.html\">index.rs</a><a href=\"../../../src/core/ops/index_range.rs.html\">index_range.rs</a><a href=\"../../../src/core/ops/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/ops/range.rs.html\">range.rs</a><a href=\"../../../src/core/ops/try_trait.rs.html\">try_trait.rs</a><a href=\"../../../src/core/ops/unsize.rs.html\">unsize.rs</a></div></details><details class=\"dir-entry\"><summary>panic</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/panic/location.rs.html\">location.rs</a><a href=\"../../../src/core/panic/panic_info.rs.html\">panic_info.rs</a><a href=\"../../../src/core/panic/unwind_safe.rs.html\">unwind_safe.rs</a></div></details><details class=\"dir-entry\"><summary>portable-simd</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>crates</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>core_simd</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>masks</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/masks/full_masks.rs.html\">full_masks.rs</a></div></details><details class=\"dir-entry\"><summary>ops</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html\">assign.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html\">deref.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html\">shift_scalar.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html\">unary.rs</a></div></details><details class=\"dir-entry\"><summary>simd</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>cmp</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html\">eq.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html\">ord.rs</a></div></details><details class=\"dir-entry\"><summary>num</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html\">float.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html\">int.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html\">uint.rs</a></div></details><details class=\"dir-entry\"><summary>ptr</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html\">const_ptr.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/ptr/mut_ptr.rs.html\">mut_ptr.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/cmp.rs.html\">cmp.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/num.rs.html\">num.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/prelude.rs.html\">prelude.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/ptr.rs.html\">ptr.rs</a></div></details><details class=\"dir-entry\"><summary>vendor</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html\">x86.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/alias.rs.html\">alias.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/cast.rs.html\">cast.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/fmt.rs.html\">fmt.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/iter.rs.html\">iter.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/lane_count.rs.html\">lane_count.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/masks.rs.html\">masks.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/ops.rs.html\">ops.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/select.rs.html\">select.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/swizzle.rs.html\">swizzle.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/swizzle_dyn.rs.html\">swizzle_dyn.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html\">to_bytes.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/vector.rs.html\">vector.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/vendor.rs.html\">vendor.rs</a></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>prelude</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/prelude/common.rs.html\">common.rs</a><a href=\"../../../src/core/prelude/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>ptr</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/ptr/alignment.rs.html\">alignment.rs</a><a href=\"../../../src/core/ptr/const_ptr.rs.html\">const_ptr.rs</a><a href=\"../../../src/core/ptr/metadata.rs.html\">metadata.rs</a><a href=\"../../../src/core/ptr/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/ptr/mut_ptr.rs.html\">mut_ptr.rs</a><a href=\"../../../src/core/ptr/non_null.rs.html\">non_null.rs</a><a href=\"../../../src/core/ptr/unique.rs.html\">unique.rs</a></div></details><details class=\"dir-entry\"><summary>slice</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>iter</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/slice/iter/macros.rs.html\">macros.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/slice/ascii.rs.html\">ascii.rs</a><a href=\"../../../src/core/slice/cmp.rs.html\">cmp.rs</a><a href=\"../../../src/core/slice/index.rs.html\">index.rs</a><a href=\"../../../src/core/slice/iter.rs.html\">iter.rs</a><a href=\"../../../src/core/slice/memchr.rs.html\">memchr.rs</a><a href=\"../../../src/core/slice/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/slice/raw.rs.html\">raw.rs</a><a href=\"../../../src/core/slice/rotate.rs.html\">rotate.rs</a><a href=\"../../../src/core/slice/select.rs.html\">select.rs</a><a href=\"../../../src/core/slice/sort.rs.html\">sort.rs</a><a href=\"../../../src/core/slice/specialize.rs.html\">specialize.rs</a></div></details><details class=\"dir-entry\"><summary>stdarch</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>crates</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>core_arch</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>aarch64</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>neon</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/aarch64/neon/generated.rs.html\">generated.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/aarch64/neon/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/aarch64/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/aarch64/prefetch.rs.html\">prefetch.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/aarch64/tme.rs.html\">tme.rs</a></div></details><details class=\"dir-entry\"><summary>arm</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm/dsp.rs.html\">dsp.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm/neon.rs.html\">neon.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm/sat.rs.html\">sat.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm/simd32.rs.html\">simd32.rs</a></div></details><details class=\"dir-entry\"><summary>arm_shared</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>barrier</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/barrier/cp15.rs.html\">cp15.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/barrier/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>neon</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/neon/generated.rs.html\">generated.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/neon/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/crc.rs.html\">crc.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/crypto.rs.html\">crypto.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/hints.rs.html\">hints.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>loongarch64</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>lasx</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/loongarch64/lasx/generated.rs.html\">generated.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/loongarch64/lasx/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/loongarch64/lasx/types.rs.html\">types.rs</a></div></details><details class=\"dir-entry\"><summary>lsx</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/loongarch64/lsx/generated.rs.html\">generated.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/loongarch64/lsx/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/loongarch64/lsx/types.rs.html\">types.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/loongarch64/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>mips</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/mips/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>nvptx</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/nvptx/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>powerpc</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/powerpc/altivec.rs.html\">altivec.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/powerpc/macros.rs.html\">macros.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/powerpc/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/powerpc/vsx.rs.html\">vsx.rs</a></div></details><details class=\"dir-entry\"><summary>powerpc64</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/powerpc64/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/powerpc64/vsx.rs.html\">vsx.rs</a></div></details><details class=\"dir-entry\"><summary>riscv32</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv32/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv32/zk.rs.html\">zk.rs</a></div></details><details class=\"dir-entry\"><summary>riscv64</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv64/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv64/zk.rs.html\">zk.rs</a></div></details><details class=\"dir-entry\"><summary>riscv_shared</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv_shared/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv_shared/p.rs.html\">p.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv_shared/zb.rs.html\">zb.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv_shared/zk.rs.html\">zk.rs</a></div></details><details class=\"dir-entry\"><summary>wasm32</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/wasm32/atomic.rs.html\">atomic.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/wasm32/memory.rs.html\">memory.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/wasm32/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/wasm32/relaxed_simd.rs.html\">relaxed_simd.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/wasm32/simd128.rs.html\">simd128.rs</a></div></details><details class=\"dir-entry\"><summary>x86</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/abm.rs.html\">abm.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/adx.rs.html\">adx.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/aes.rs.html\">aes.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx.rs.html\">avx.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx2.rs.html\">avx2.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512bf16.rs.html\">avx512bf16.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512bitalg.rs.html\">avx512bitalg.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512bw.rs.html\">avx512bw.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512cd.rs.html\">avx512cd.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512f.rs.html\">avx512f.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512ifma.rs.html\">avx512ifma.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512vbmi.rs.html\">avx512vbmi.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512vbmi2.rs.html\">avx512vbmi2.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512vnni.rs.html\">avx512vnni.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512vpopcntdq.rs.html\">avx512vpopcntdq.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/bmi1.rs.html\">bmi1.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/bmi2.rs.html\">bmi2.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/bswap.rs.html\">bswap.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/bt.rs.html\">bt.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/cpuid.rs.html\">cpuid.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/eflags.rs.html\">eflags.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/f16c.rs.html\">f16c.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/fma.rs.html\">fma.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/fxsr.rs.html\">fxsr.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/gfni.rs.html\">gfni.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/macros.rs.html\">macros.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/pclmulqdq.rs.html\">pclmulqdq.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/rdrand.rs.html\">rdrand.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/rdtsc.rs.html\">rdtsc.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/rtm.rs.html\">rtm.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/sha.rs.html\">sha.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/sse.rs.html\">sse.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/sse2.rs.html\">sse2.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/sse3.rs.html\">sse3.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/sse41.rs.html\">sse41.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/sse42.rs.html\">sse42.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/sse4a.rs.html\">sse4a.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/ssse3.rs.html\">ssse3.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/tbm.rs.html\">tbm.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/vaes.rs.html\">vaes.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/vpclmulqdq.rs.html\">vpclmulqdq.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/xsave.rs.html\">xsave.rs</a></div></details><details class=\"dir-entry\"><summary>x86_64</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/abm.rs.html\">abm.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/adx.rs.html\">adx.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/avx.rs.html\">avx.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/avx2.rs.html\">avx2.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/avx512f.rs.html\">avx512f.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/bmi.rs.html\">bmi.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/bmi2.rs.html\">bmi2.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/bswap.rs.html\">bswap.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/bt.rs.html\">bt.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/cmpxchg16b.rs.html\">cmpxchg16b.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/fxsr.rs.html\">fxsr.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/macros.rs.html\">macros.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/rdrand.rs.html\">rdrand.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/sse.rs.html\">sse.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/sse2.rs.html\">sse2.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/sse41.rs.html\">sse41.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/sse42.rs.html\">sse42.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/xsave.rs.html\">xsave.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/macros.rs.html\">macros.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/simd.rs.html\">simd.rs</a></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>str</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/str/converts.rs.html\">converts.rs</a><a href=\"../../../src/core/str/count.rs.html\">count.rs</a><a href=\"../../../src/core/str/error.rs.html\">error.rs</a><a href=\"../../../src/core/str/iter.rs.html\">iter.rs</a><a href=\"../../../src/core/str/lossy.rs.html\">lossy.rs</a><a href=\"../../../src/core/str/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/str/pattern.rs.html\">pattern.rs</a><a href=\"../../../src/core/str/traits.rs.html\">traits.rs</a><a href=\"../../../src/core/str/validations.rs.html\">validations.rs</a></div></details><details class=\"dir-entry\"><summary>sync</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/sync/atomic.rs.html\">atomic.rs</a><a href=\"../../../src/core/sync/exclusive.rs.html\">exclusive.rs</a><a href=\"../../../src/core/sync/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>task</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/task/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/task/poll.rs.html\">poll.rs</a><a href=\"../../../src/core/task/ready.rs.html\">ready.rs</a><a href=\"../../../src/core/task/wake.rs.html\">wake.rs</a></div></details><details class=\"dir-entry\"><summary>unicode</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/unicode/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/unicode/printable.rs.html\">printable.rs</a><a href=\"../../../src/core/unicode/unicode_data.rs.html\">unicode_data.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/any.rs.html\">any.rs</a><a href=\"../../../src/core/arch.rs.html\">arch.rs</a><a href=\"../../../src/core/ascii.rs.html\">ascii.rs</a><a href=\"../../../src/core/asserting.rs.html\">asserting.rs</a><a href=\"../../../src/core/bool.rs.html\">bool.rs</a><a href=\"../../../src/core/borrow.rs.html\">borrow.rs</a><a href=\"../../../src/core/cell.rs.html\">cell.rs</a><a href=\"../../../src/core/clone.rs.html\">clone.rs</a><a href=\"../../../src/core/cmp.rs.html\">cmp.rs</a><a href=\"../../../src/core/default.rs.html\">default.rs</a><a href=\"../../../src/core/error.rs.html\">error.rs</a><a href=\"../../../src/core/escape.rs.html\">escape.rs</a><a href=\"../../../src/core/hint.rs.html\">hint.rs</a><a href=\"../../../src/core/internal_macros.rs.html\">internal_macros.rs</a><a href=\"../../../src/core/intrinsics.rs.html\">intrinsics.rs</a><a href=\"../../../src/core/lib.rs.html\">lib.rs</a><a href=\"../../../src/core/marker.rs.html\">marker.rs</a><a href=\"../../../src/core/option.rs.html\">option.rs</a><a href=\"../../../src/core/panic.rs.html\">panic.rs</a><a href=\"../../../src/core/panicking.rs.html\">panicking.rs</a><a href=\"../../../src/core/pat.rs.html\">pat.rs</a><a href=\"../../../src/core/pin.rs.html\">pin.rs</a><a href=\"../../../src/core/primitive.rs.html\">primitive.rs</a><a href=\"../../../src/core/primitive_docs.rs.html\">primitive_docs.rs</a><a href=\"../../../src/core/result.rs.html\">result.rs</a><a href=\"../../../src/core/time.rs.html\">time.rs</a><a href=\"../../../src/core/tuple.rs.html\">tuple.rs</a><a href=\"../../../src/core/ub_checks.rs.html\">ub_checks.rs</a><a href=\"../../../src/core/unit.rs.html\">unit.rs</a></div></details><details class=\"dir-entry\"><summary>proc_macro</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>bridge</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/proc_macro/bridge/arena.rs.html\">arena.rs</a><a href=\"../../../src/proc_macro/bridge/buffer.rs.html\">buffer.rs</a><a href=\"../../../src/proc_macro/bridge/client.rs.html\">client.rs</a><a href=\"../../../src/proc_macro/bridge/closure.rs.html\">closure.rs</a><a href=\"../../../src/proc_macro/bridge/fxhash.rs.html\">fxhash.rs</a><a href=\"../../../src/proc_macro/bridge/handle.rs.html\">handle.rs</a><a href=\"../../../src/proc_macro/bridge/mod.rs.html\">mod.rs</a><a href=\"../../../src/proc_macro/bridge/rpc.rs.html\">rpc.rs</a><a href=\"../../../src/proc_macro/bridge/selfless_reify.rs.html\">selfless_reify.rs</a><a href=\"../../../src/proc_macro/bridge/server.rs.html\">server.rs</a><a href=\"../../../src/proc_macro/bridge/symbol.rs.html\">symbol.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/proc_macro/diagnostic.rs.html\">diagnostic.rs</a><a href=\"../../../src/proc_macro/lib.rs.html\">lib.rs</a><a href=\"../../../src/proc_macro/quote.rs.html\">quote.rs</a></div></details><details class=\"dir-entry\"><summary>std</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>backtrace</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>backtrace</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/backtrace/src/backtrace/libunwind.rs.html\">libunwind.rs</a><a href=\"../../../src/std/backtrace/src/backtrace/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>symbolize</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>gimli</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/backtrace/src/symbolize/gimli/elf.rs.html\">elf.rs</a><a href=\"../../../src/std/backtrace/src/symbolize/gimli/libs_dl_iterate_phdr.rs.html\">libs_dl_iterate_phdr.rs</a><a href=\"../../../src/std/backtrace/src/symbolize/gimli/mmap_unix.rs.html\">mmap_unix.rs</a><a href=\"../../../src/std/backtrace/src/symbolize/gimli/parse_running_mmaps_unix.rs.html\">parse_running_mmaps_unix.rs</a><a href=\"../../../src/std/backtrace/src/symbolize/gimli/stash.rs.html\">stash.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/backtrace/src/symbolize/gimli.rs.html\">gimli.rs</a><a href=\"../../../src/std/backtrace/src/symbolize/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/backtrace/src/lib.rs.html\">lib.rs</a><a href=\"../../../src/std/backtrace/src/print.rs.html\">print.rs</a><a href=\"../../../src/std/backtrace/src/types.rs.html\">types.rs</a></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>collections</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>hash</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/collections/hash/map.rs.html\">map.rs</a><a href=\"../../../src/std/collections/hash/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/collections/hash/set.rs.html\">set.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/collections/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>core</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/core/src/primitive_docs.rs.html\">primitive_docs.rs</a></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>ffi</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/ffi/c_str.rs.html\">c_str.rs</a><a href=\"../../../src/std/ffi/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/ffi/os_str.rs.html\">os_str.rs</a></div></details><details class=\"dir-entry\"><summary>hash</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/hash/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/hash/random.rs.html\">random.rs</a></div></details><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>buffered</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>bufreader</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/io/buffered/bufreader/buffer.rs.html\">buffer.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/io/buffered/bufreader.rs.html\">bufreader.rs</a><a href=\"../../../src/std/io/buffered/bufwriter.rs.html\">bufwriter.rs</a><a href=\"../../../src/std/io/buffered/linewriter.rs.html\">linewriter.rs</a><a href=\"../../../src/std/io/buffered/linewritershim.rs.html\">linewritershim.rs</a><a href=\"../../../src/std/io/buffered/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>error</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/io/error/repr_bitpacked.rs.html\">repr_bitpacked.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/io/copy.rs.html\">copy.rs</a><a href=\"../../../src/std/io/cursor.rs.html\">cursor.rs</a><a href=\"../../../src/std/io/error.rs.html\">error.rs</a><a href=\"../../../src/std/io/impls.rs.html\">impls.rs</a><a href=\"../../../src/std/io/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/io/prelude.rs.html\">prelude.rs</a><a href=\"../../../src/std/io/stdio.rs.html\">stdio.rs</a><a href=\"../../../src/std/io/util.rs.html\">util.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/net/ip_addr.rs.html\">ip_addr.rs</a><a href=\"../../../src/std/net/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/net/socket_addr.rs.html\">socket_addr.rs</a><a href=\"../../../src/std/net/tcp.rs.html\">tcp.rs</a><a href=\"../../../src/std/net/udp.rs.html\">udp.rs</a></div></details><details class=\"dir-entry\"><summary>os</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>fd</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/fd/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/fd/net.rs.html\">net.rs</a><a href=\"../../../src/std/os/fd/owned.rs.html\">owned.rs</a><a href=\"../../../src/std/os/fd/raw.rs.html\">raw.rs</a></div></details><details class=\"dir-entry\"><summary>linux</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/linux/fs.rs.html\">fs.rs</a><a href=\"../../../src/std/os/linux/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/linux/net.rs.html\">net.rs</a><a href=\"../../../src/std/os/linux/process.rs.html\">process.rs</a><a href=\"../../../src/std/os/linux/raw.rs.html\">raw.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>linux_ext</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/net/linux_ext/addr.rs.html\">addr.rs</a><a href=\"../../../src/std/os/net/linux_ext/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/net/linux_ext/socket.rs.html\">socket.rs</a><a href=\"../../../src/std/os/net/linux_ext/tcp.rs.html\">tcp.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/os/net/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>raw</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/raw/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>unix</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>ffi</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/unix/ffi/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/unix/ffi/os_str.rs.html\">os_str.rs</a></div></details><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/unix/io/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/unix/net/addr.rs.html\">addr.rs</a><a href=\"../../../src/std/os/unix/net/ancillary.rs.html\">ancillary.rs</a><a href=\"../../../src/std/os/unix/net/datagram.rs.html\">datagram.rs</a><a href=\"../../../src/std/os/unix/net/listener.rs.html\">listener.rs</a><a href=\"../../../src/std/os/unix/net/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/unix/net/stream.rs.html\">stream.rs</a><a href=\"../../../src/std/os/unix/net/ucred.rs.html\">ucred.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/os/unix/fs.rs.html\">fs.rs</a><a href=\"../../../src/std/os/unix/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/unix/process.rs.html\">process.rs</a><a href=\"../../../src/std/os/unix/raw.rs.html\">raw.rs</a><a href=\"../../../src/std/os/unix/thread.rs.html\">thread.rs</a></div></details><details class=\"dir-entry\"><summary>wasi</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/wasi/io/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/wasi/net/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/os/wasi/ffi.rs.html\">ffi.rs</a><a href=\"../../../src/std/os/wasi/fs.rs.html\">fs.rs</a><a href=\"../../../src/std/os/wasi/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>wasip2</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/wasip2/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>windows</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/windows/io/handle.rs.html\">handle.rs</a><a href=\"../../../src/std/os/windows/io/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/windows/io/raw.rs.html\">raw.rs</a><a href=\"../../../src/std/os/windows/io/socket.rs.html\">socket.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/os/windows/ffi.rs.html\">ffi.rs</a><a href=\"../../../src/std/os/windows/fs.rs.html\">fs.rs</a><a href=\"../../../src/std/os/windows/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/windows/process.rs.html\">process.rs</a><a href=\"../../../src/std/os/windows/raw.rs.html\">raw.rs</a><a href=\"../../../src/std/os/windows/thread.rs.html\">thread.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/os/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>portable-simd</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>crates</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>std_float</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/portable-simd/crates/std_float/src/lib.rs.html\">lib.rs</a></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>prelude</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/prelude/common.rs.html\">common.rs</a><a href=\"../../../src/std/prelude/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>sync</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>mpmc</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sync/mpmc/array.rs.html\">array.rs</a><a href=\"../../../src/std/sync/mpmc/context.rs.html\">context.rs</a><a href=\"../../../src/std/sync/mpmc/counter.rs.html\">counter.rs</a><a href=\"../../../src/std/sync/mpmc/error.rs.html\">error.rs</a><a href=\"../../../src/std/sync/mpmc/list.rs.html\">list.rs</a><a href=\"../../../src/std/sync/mpmc/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/sync/mpmc/select.rs.html\">select.rs</a><a href=\"../../../src/std/sync/mpmc/utils.rs.html\">utils.rs</a><a href=\"../../../src/std/sync/mpmc/waker.rs.html\">waker.rs</a><a href=\"../../../src/std/sync/mpmc/zero.rs.html\">zero.rs</a></div></details><details class=\"dir-entry\"><summary>mpsc</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sync/mpsc/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/sync/barrier.rs.html\">barrier.rs</a><a href=\"../../../src/std/sync/condvar.rs.html\">condvar.rs</a><a href=\"../../../src/std/sync/lazy_lock.rs.html\">lazy_lock.rs</a><a href=\"../../../src/std/sync/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/sync/mutex.rs.html\">mutex.rs</a><a href=\"../../../src/std/sync/once.rs.html\">once.rs</a><a href=\"../../../src/std/sync/once_lock.rs.html\">once_lock.rs</a><a href=\"../../../src/std/sync/poison.rs.html\">poison.rs</a><a href=\"../../../src/std/sync/reentrant_lock.rs.html\">reentrant_lock.rs</a><a href=\"../../../src/std/sync/rwlock.rs.html\">rwlock.rs</a></div></details><details class=\"dir-entry\"><summary>sys</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>os_str</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/os_str/bytes.rs.html\">bytes.rs</a><a href=\"../../../src/std/sys/os_str/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>pal</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>common</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/pal/common/alloc.rs.html\">alloc.rs</a><a href=\"../../../src/std/sys/pal/common/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/sys/pal/common/small_c_string.rs.html\">small_c_string.rs</a></div></details><details class=\"dir-entry\"><summary>unix</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>process</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/pal/unix/process/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/sys/pal/unix/process/process_common.rs.html\">process_common.rs</a><a href=\"../../../src/std/sys/pal/unix/process/process_unix.rs.html\">process_unix.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/sys/pal/unix/alloc.rs.html\">alloc.rs</a><a href=\"../../../src/std/sys/pal/unix/args.rs.html\">args.rs</a><a href=\"../../../src/std/sys/pal/unix/env.rs.html\">env.rs</a><a href=\"../../../src/std/sys/pal/unix/fd.rs.html\">fd.rs</a><a href=\"../../../src/std/sys/pal/unix/fs.rs.html\">fs.rs</a><a href=\"../../../src/std/sys/pal/unix/futex.rs.html\">futex.rs</a><a href=\"../../../src/std/sys/pal/unix/io.rs.html\">io.rs</a><a href=\"../../../src/std/sys/pal/unix/kernel_copy.rs.html\">kernel_copy.rs</a><a href=\"../../../src/std/sys/pal/unix/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/sys/pal/unix/net.rs.html\">net.rs</a><a href=\"../../../src/std/sys/pal/unix/os.rs.html\">os.rs</a><a href=\"../../../src/std/sys/pal/unix/pipe.rs.html\">pipe.rs</a><a href=\"../../../src/std/sys/pal/unix/rand.rs.html\">rand.rs</a><a href=\"../../../src/std/sys/pal/unix/stack_overflow.rs.html\">stack_overflow.rs</a><a href=\"../../../src/std/sys/pal/unix/stdio.rs.html\">stdio.rs</a><a href=\"../../../src/std/sys/pal/unix/thread.rs.html\">thread.rs</a><a href=\"../../../src/std/sys/pal/unix/thread_local_dtor.rs.html\">thread_local_dtor.rs</a><a href=\"../../../src/std/sys/pal/unix/thread_local_key.rs.html\">thread_local_key.rs</a><a href=\"../../../src/std/sys/pal/unix/time.rs.html\">time.rs</a><a href=\"../../../src/std/sys/pal/unix/weak.rs.html\">weak.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/sys/pal/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>path</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/path/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/sys/path/unix.rs.html\">unix.rs</a></div></details><details class=\"dir-entry\"><summary>personality</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>dwarf</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/personality/dwarf/eh.rs.html\">eh.rs</a><a href=\"../../../src/std/sys/personality/dwarf/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/sys/personality/gcc.rs.html\">gcc.rs</a><a href=\"../../../src/std/sys/personality/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>sync</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>condvar</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/sync/condvar/futex.rs.html\">futex.rs</a><a href=\"../../../src/std/sys/sync/condvar/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>mutex</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/sync/mutex/futex.rs.html\">futex.rs</a><a href=\"../../../src/std/sys/sync/mutex/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>once</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/sync/once/futex.rs.html\">futex.rs</a><a href=\"../../../src/std/sys/sync/once/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>rwlock</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/sync/rwlock/futex.rs.html\">futex.rs</a><a href=\"../../../src/std/sys/sync/rwlock/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>thread_parking</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/sync/thread_parking/futex.rs.html\">futex.rs</a><a href=\"../../../src/std/sys/sync/thread_parking/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/sys/sync/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>thread_local</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>fast_local</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/thread_local/fast_local/eager.rs.html\">eager.rs</a><a href=\"../../../src/std/sys/thread_local/fast_local/lazy.rs.html\">lazy.rs</a><a href=\"../../../src/std/sys/thread_local/fast_local/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/sys/thread_local/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/sys/cmath.rs.html\">cmath.rs</a><a href=\"../../../src/std/sys/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>sys_common</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys_common/backtrace.rs.html\">backtrace.rs</a><a href=\"../../../src/std/sys_common/fs.rs.html\">fs.rs</a><a href=\"../../../src/std/sys_common/io.rs.html\">io.rs</a><a href=\"../../../src/std/sys_common/lazy_box.rs.html\">lazy_box.rs</a><a href=\"../../../src/std/sys_common/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/sys_common/net.rs.html\">net.rs</a><a href=\"../../../src/std/sys_common/process.rs.html\">process.rs</a><a href=\"../../../src/std/sys_common/thread_local_dtor.rs.html\">thread_local_dtor.rs</a><a href=\"../../../src/std/sys_common/thread_local_key.rs.html\">thread_local_key.rs</a><a href=\"../../../src/std/sys_common/wstr.rs.html\">wstr.rs</a><a href=\"../../../src/std/sys_common/wtf8.rs.html\">wtf8.rs</a></div></details><details class=\"dir-entry\"><summary>thread</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/thread/local.rs.html\">local.rs</a><a href=\"../../../src/std/thread/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/thread/scoped.rs.html\">scoped.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/alloc.rs.html\">alloc.rs</a><a href=\"../../../src/std/ascii.rs.html\">ascii.rs</a><a href=\"../../../src/std/backtrace.rs.html\">backtrace.rs</a><a href=\"../../../src/std/env.rs.html\">env.rs</a><a href=\"../../../src/std/error.rs.html\">error.rs</a><a href=\"../../../src/std/f128.rs.html\">f128.rs</a><a href=\"../../../src/std/f16.rs.html\">f16.rs</a><a href=\"../../../src/std/f32.rs.html\">f32.rs</a><a href=\"../../../src/std/f64.rs.html\">f64.rs</a><a href=\"../../../src/std/fs.rs.html\">fs.rs</a><a href=\"../../../src/std/keyword_docs.rs.html\">keyword_docs.rs</a><a href=\"../../../src/std/lib.rs.html\">lib.rs</a><a href=\"../../../src/std/macros.rs.html\">macros.rs</a><a href=\"../../../src/std/num.rs.html\">num.rs</a><a href=\"../../../src/std/panic.rs.html\">panic.rs</a><a href=\"../../../src/std/panicking.rs.html\">panicking.rs</a><a href=\"../../../src/std/pat.rs.html\">pat.rs</a><a href=\"../../../src/std/path.rs.html\">path.rs</a><a href=\"../../../src/std/process.rs.html\">process.rs</a><a href=\"../../../src/std/rt.rs.html\">rt.rs</a><a href=\"../../../src/std/time.rs.html\">time.rs</a></div></details><details class=\"dir-entry\"><summary>test</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>formatters</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/test/formatters/json.rs.html\">json.rs</a><a href=\"../../../src/test/formatters/junit.rs.html\">junit.rs</a><a href=\"../../../src/test/formatters/mod.rs.html\">mod.rs</a><a href=\"../../../src/test/formatters/pretty.rs.html\">pretty.rs</a><a href=\"../../../src/test/formatters/terse.rs.html\">terse.rs</a></div></details><details class=\"dir-entry\"><summary>helpers</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/test/helpers/concurrency.rs.html\">concurrency.rs</a><a href=\"../../../src/test/helpers/metrics.rs.html\">metrics.rs</a><a href=\"../../../src/test/helpers/mod.rs.html\">mod.rs</a><a href=\"../../../src/test/helpers/shuffle.rs.html\">shuffle.rs</a></div></details><details class=\"dir-entry\"><summary>term</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>terminfo</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>parser</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/test/term/terminfo/parser/compiled.rs.html\">compiled.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/test/term/terminfo/mod.rs.html\">mod.rs</a><a href=\"../../../src/test/term/terminfo/parm.rs.html\">parm.rs</a><a href=\"../../../src/test/term/terminfo/searcher.rs.html\">searcher.rs</a></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"><a href=\"../../../src/test/bench.rs.html\">bench.rs</a><a href=\"../../../src/test/cli.rs.html\">cli.rs</a><a href=\"../../../src/test/console.rs.html\">console.rs</a><a href=\"../../../src/test/event.rs.html\">event.rs</a><a href=\"../../../src/test/lib.rs.html\">lib.rs</a><a href=\"../../../src/test/options.rs.html\">options.rs</a><a href=\"../../../src/test/stats.rs.html\">stats.rs</a><a href=\"../../../src/test/term.rs.html\">term.rs</a><a href=\"../../../src/test/test_result.rs.html\">test_result.rs</a><a href=\"../../../src/test/time.rs.html\">time.rs</a><a href=\"../../../src/test/types.rs.html\">types.rs</a></div></details></div></nav><div class=\"sidebar-resizer\"></div><main><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../../core/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"example-wrap\"><div data-nosnippet=\"\"><pre class=\"src-line-numbers\"><a href=\"#1\" id=\"1\">1</a>\n<a href=\"#2\" id=\"2\">2</a>\n<a href=\"#3\" id=\"3\">3</a>\n<a href=\"#4\" id=\"4\">4</a>\n<a href=\"#5\" id=\"5\">5</a>\n<a href=\"#6\" id=\"6\">6</a>\n<a href=\"#7\" id=\"7\">7</a>\n<a href=\"#8\" id=\"8\">8</a>\n<a href=\"#9\" id=\"9\">9</a>\n<a href=\"#10\" id=\"10\">10</a>\n<a href=\"#11\" id=\"11\">11</a>\n<a href=\"#12\" id=\"12\">12</a>\n<a href=\"#13\" id=\"13\">13</a>\n<a href=\"#14\" id=\"14\">14</a>\n<a href=\"#15\" id=\"15\">15</a>\n<a href=\"#16\" id=\"16\">16</a>\n<a href=\"#17\" id=\"17\">17</a>\n<a href=\"#18\" id=\"18\">18</a>\n<a href=\"#19\" id=\"19\">19</a>\n<a href=\"#20\" id=\"20\">20</a>\n<a href=\"#21\" id=\"21\">21</a>\n<a href=\"#22\" id=\"22\">22</a>\n<a href=\"#23\" id=\"23\">23</a>\n<a href=\"#24\" id=\"24\">24</a>\n<a href=\"#25\" id=\"25\">25</a>\n<a href=\"#26\" id=\"26\">26</a>\n<a href=\"#27\" id=\"27\">27</a>\n<a href=\"#28\" id=\"28\">28</a>\n<a href=\"#29\" id=\"29\">29</a>\n<a href=\"#30\" id=\"30\">30</a>\n<a href=\"#31\" id=\"31\">31</a>\n<a href=\"#32\" id=\"32\">32</a>\n<a href=\"#33\" id=\"33\">33</a>\n<a href=\"#34\" id=\"34\">34</a>\n<a href=\"#35\" id=\"35\">35</a>\n<a href=\"#36\" id=\"36\">36</a>\n<a href=\"#37\" id=\"37\">37</a>\n<a href=\"#38\" id=\"38\">38</a>\n<a href=\"#39\" id=\"39\">39</a>\n<a href=\"#40\" id=\"40\">40</a>\n<a href=\"#41\" id=\"41\">41</a>\n<a href=\"#42\" id=\"42\">42</a>\n<a href=\"#43\" id=\"43\">43</a>\n<a href=\"#44\" id=\"44\">44</a>\n<a href=\"#45\" id=\"45\">45</a>\n<a href=\"#46\" id=\"46\">46</a>\n<a href=\"#47\" id=\"47\">47</a>\n<a href=\"#48\" id=\"48\">48</a>\n<a href=\"#49\" id=\"49\">49</a>\n<a href=\"#50\" id=\"50\">50</a>\n<a href=\"#51\" id=\"51\">51</a>\n<a href=\"#52\" id=\"52\">52</a>\n<a href=\"#53\" id=\"53\">53</a>\n<a href=\"#54\" id=\"54\">54</a>\n<a href=\"#55\" id=\"55\">55</a>\n<a href=\"#56\" id=\"56\">56</a>\n<a href=\"#57\" id=\"57\">57</a>\n<a href=\"#58\" id=\"58\">58</a>\n<a href=\"#59\" id=\"59\">59</a>\n<a href=\"#60\" id=\"60\">60</a>\n<a href=\"#61\" id=\"61\">61</a>\n<a href=\"#62\" id=\"62\">62</a>\n<a href=\"#63\" id=\"63\">63</a>\n<a href=\"#64\" id=\"64\">64</a>\n<a href=\"#65\" id=\"65\">65</a>\n<a href=\"#66\" id=\"66\">66</a>\n<a href=\"#67\" id=\"67\">67</a>\n<a href=\"#68\" id=\"68\">68</a>\n<a href=\"#69\" id=\"69\">69</a>\n<a href=\"#70\" id=\"70\">70</a>\n<a href=\"#71\" id=\"71\">71</a>\n<a href=\"#72\" id=\"72\">72</a>\n<a href=\"#73\" id=\"73\">73</a>\n<a href=\"#74\" id=\"74\">74</a>\n<a href=\"#75\" id=\"75\">75</a>\n<a href=\"#76\" id=\"76\">76</a>\n<a href=\"#77\" id=\"77\">77</a>\n<a href=\"#78\" id=\"78\">78</a>\n<a href=\"#79\" id=\"79\">79</a>\n<a href=\"#80\" id=\"80\">80</a>\n<a href=\"#81\" id=\"81\">81</a>\n<a href=\"#82\" id=\"82\">82</a>\n<a href=\"#83\" id=\"83\">83</a>\n<a href=\"#84\" id=\"84\">84</a>\n<a href=\"#85\" id=\"85\">85</a>\n<a href=\"#86\" id=\"86\">86</a>\n<a href=\"#87\" id=\"87\">87</a>\n<a href=\"#88\" id=\"88\">88</a>\n<a href=\"#89\" id=\"89\">89</a>\n<a href=\"#90\" id=\"90\">90</a>\n<a href=\"#91\" id=\"91\">91</a>\n<a href=\"#92\" id=\"92\">92</a>\n<a href=\"#93\" id=\"93\">93</a>\n<a href=\"#94\" id=\"94\">94</a>\n<a href=\"#95\" id=\"95\">95</a>\n<a href=\"#96\" id=\"96\">96</a>\n<a href=\"#97\" id=\"97\">97</a>\n<a href=\"#98\" id=\"98\">98</a>\n<a href=\"#99\" id=\"99\">99</a>\n<a href=\"#100\" id=\"100\">100</a>\n<a href=\"#101\" id=\"101\">101</a>\n<a href=\"#102\" id=\"102\">102</a>\n<a href=\"#103\" id=\"103\">103</a>\n<a href=\"#104\" id=\"104\">104</a>\n<a href=\"#105\" id=\"105\">105</a>\n<a href=\"#106\" id=\"106\">106</a>\n<a href=\"#107\" id=\"107\">107</a>\n<a href=\"#108\" id=\"108\">108</a>\n<a href=\"#109\" id=\"109\">109</a>\n<a href=\"#110\" id=\"110\">110</a>\n<a href=\"#111\" id=\"111\">111</a>\n<a href=\"#112\" id=\"112\">112</a>\n<a href=\"#113\" id=\"113\">113</a>\n<a href=\"#114\" id=\"114\">114</a>\n<a href=\"#115\" id=\"115\">115</a>\n<a href=\"#116\" id=\"116\">116</a>\n<a href=\"#117\" id=\"117\">117</a>\n<a href=\"#118\" id=\"118\">118</a>\n<a href=\"#119\" id=\"119\">119</a>\n<a href=\"#120\" id=\"120\">120</a>\n<a href=\"#121\" id=\"121\">121</a>\n<a href=\"#122\" id=\"122\">122</a>\n<a href=\"#123\" id=\"123\">123</a>\n<a href=\"#124\" id=\"124\">124</a>\n<a href=\"#125\" id=\"125\">125</a>\n<a href=\"#126\" id=\"126\">126</a>\n<a href=\"#127\" id=\"127\">127</a>\n<a href=\"#128\" id=\"128\">128</a>\n<a href=\"#129\" id=\"129\">129</a>\n<a href=\"#130\" id=\"130\">130</a>\n<a href=\"#131\" id=\"131\">131</a>\n<a href=\"#132\" id=\"132\">132</a>\n<a href=\"#133\" id=\"133\">133</a>\n<a href=\"#134\" id=\"134\">134</a>\n<a href=\"#135\" id=\"135\">135</a>\n<a href=\"#136\" id=\"136\">136</a>\n<a href=\"#137\" id=\"137\">137</a>\n<a href=\"#138\" id=\"138\">138</a>\n<a href=\"#139\" id=\"139\">139</a>\n<a href=\"#140\" id=\"140\">140</a>\n<a href=\"#141\" id=\"141\">141</a>\n<a href=\"#142\" id=\"142\">142</a>\n<a href=\"#143\" id=\"143\">143</a>\n<a href=\"#144\" id=\"144\">144</a>\n<a href=\"#145\" id=\"145\">145</a>\n<a href=\"#146\" id=\"146\">146</a>\n<a href=\"#147\" id=\"147\">147</a>\n<a href=\"#148\" id=\"148\">148</a>\n<a href=\"#149\" id=\"149\">149</a>\n<a href=\"#150\" id=\"150\">150</a>\n<a href=\"#151\" id=\"151\">151</a>\n<a href=\"#152\" id=\"152\">152</a>\n<a href=\"#153\" id=\"153\">153</a>\n<a href=\"#154\" id=\"154\">154</a>\n<a href=\"#155\" id=\"155\">155</a>\n<a href=\"#156\" id=\"156\">156</a>\n<a href=\"#157\" id=\"157\">157</a>\n<a href=\"#158\" id=\"158\">158</a>\n<a href=\"#159\" id=\"159\">159</a>\n<a href=\"#160\" id=\"160\">160</a>\n<a href=\"#161\" id=\"161\">161</a>\n<a href=\"#162\" id=\"162\">162</a>\n<a href=\"#163\" id=\"163\">163</a>\n<a href=\"#164\" id=\"164\">164</a>\n<a href=\"#165\" id=\"165\">165</a>\n<a href=\"#166\" id=\"166\">166</a>\n<a href=\"#167\" id=\"167\">167</a>\n<a href=\"#168\" id=\"168\">168</a>\n<a href=\"#169\" id=\"169\">169</a>\n<a href=\"#170\" id=\"170\">170</a>\n<a href=\"#171\" id=\"171\">171</a>\n<a href=\"#172\" id=\"172\">172</a>\n<a href=\"#173\" id=\"173\">173</a>\n<a href=\"#174\" id=\"174\">174</a>\n<a href=\"#175\" id=\"175\">175</a>\n<a href=\"#176\" id=\"176\">176</a>\n<a href=\"#177\" id=\"177\">177</a>\n<a href=\"#178\" id=\"178\">178</a>\n<a href=\"#179\" id=\"179\">179</a>\n<a href=\"#180\" id=\"180\">180</a>\n<a href=\"#181\" id=\"181\">181</a>\n<a href=\"#182\" id=\"182\">182</a>\n<a href=\"#183\" id=\"183\">183</a>\n<a href=\"#184\" id=\"184\">184</a>\n<a href=\"#185\" id=\"185\">185</a>\n<a href=\"#186\" id=\"186\">186</a>\n<a href=\"#187\" id=\"187\">187</a>\n<a href=\"#188\" id=\"188\">188</a>\n<a href=\"#189\" id=\"189\">189</a>\n<a href=\"#190\" id=\"190\">190</a>\n<a href=\"#191\" id=\"191\">191</a>\n<a href=\"#192\" id=\"192\">192</a>\n<a href=\"#193\" id=\"193\">193</a>\n<a href=\"#194\" id=\"194\">194</a>\n<a href=\"#195\" id=\"195\">195</a>\n<a href=\"#196\" id=\"196\">196</a>\n<a href=\"#197\" id=\"197\">197</a>\n<a href=\"#198\" id=\"198\">198</a>\n<a href=\"#199\" id=\"199\">199</a>\n<a href=\"#200\" id=\"200\">200</a>\n<a href=\"#201\" id=\"201\">201</a>\n<a href=\"#202\" id=\"202\">202</a>\n<a href=\"#203\" id=\"203\">203</a>\n<a href=\"#204\" id=\"204\">204</a>\n<a href=\"#205\" id=\"205\">205</a>\n<a href=\"#206\" id=\"206\">206</a>\n<a href=\"#207\" id=\"207\">207</a>\n<a href=\"#208\" id=\"208\">208</a>\n<a href=\"#209\" id=\"209\">209</a>\n<a href=\"#210\" id=\"210\">210</a>\n<a href=\"#211\" id=\"211\">211</a>\n<a href=\"#212\" id=\"212\">212</a>\n<a href=\"#213\" id=\"213\">213</a>\n<a href=\"#214\" id=\"214\">214</a>\n<a href=\"#215\" id=\"215\">215</a>\n<a href=\"#216\" id=\"216\">216</a>\n<a href=\"#217\" id=\"217\">217</a>\n<a href=\"#218\" id=\"218\">218</a>\n<a href=\"#219\" id=\"219\">219</a>\n<a href=\"#220\" id=\"220\">220</a>\n<a href=\"#221\" id=\"221\">221</a>\n<a href=\"#222\" id=\"222\">222</a>\n<a href=\"#223\" id=\"223\">223</a>\n<a href=\"#224\" id=\"224\">224</a>\n<a href=\"#225\" id=\"225\">225</a>\n<a href=\"#226\" id=\"226\">226</a>\n<a href=\"#227\" id=\"227\">227</a>\n<a href=\"#228\" id=\"228\">228</a>\n<a href=\"#229\" id=\"229\">229</a>\n<a href=\"#230\" id=\"230\">230</a>\n<a href=\"#231\" id=\"231\">231</a>\n<a href=\"#232\" id=\"232\">232</a>\n<a href=\"#233\" id=\"233\">233</a>\n<a href=\"#234\" id=\"234\">234</a>\n<a href=\"#235\" id=\"235\">235</a>\n<a href=\"#236\" id=\"236\">236</a>\n<a href=\"#237\" id=\"237\">237</a>\n<a href=\"#238\" id=\"238\">238</a>\n<a href=\"#239\" id=\"239\">239</a>\n<a href=\"#240\" id=\"240\">240</a>\n<a href=\"#241\" id=\"241\">241</a>\n<a href=\"#242\" id=\"242\">242</a>\n<a href=\"#243\" id=\"243\">243</a>\n<a href=\"#244\" id=\"244\">244</a>\n<a href=\"#245\" id=\"245\">245</a>\n<a href=\"#246\" id=\"246\">246</a>\n<a href=\"#247\" id=\"247\">247</a>\n<a href=\"#248\" id=\"248\">248</a>\n<a href=\"#249\" id=\"249\">249</a>\n<a href=\"#250\" id=\"250\">250</a>\n<a href=\"#251\" id=\"251\">251</a>\n<a href=\"#252\" id=\"252\">252</a>\n<a href=\"#253\" id=\"253\">253</a>\n<a href=\"#254\" id=\"254\">254</a>\n<a href=\"#255\" id=\"255\">255</a>\n<a href=\"#256\" id=\"256\">256</a>\n<a href=\"#257\" id=\"257\">257</a>\n<a href=\"#258\" id=\"258\">258</a>\n<a href=\"#259\" id=\"259\">259</a>\n<a href=\"#260\" id=\"260\">260</a>\n<a href=\"#261\" id=\"261\">261</a>\n<a href=\"#262\" id=\"262\">262</a>\n<a href=\"#263\" id=\"263\">263</a>\n<a href=\"#264\" id=\"264\">264</a>\n<a href=\"#265\" id=\"265\">265</a>\n<a href=\"#266\" id=\"266\">266</a>\n<a href=\"#267\" id=\"267\">267</a>\n<a href=\"#268\" id=\"268\">268</a>\n<a href=\"#269\" id=\"269\">269</a>\n<a href=\"#270\" id=\"270\">270</a>\n<a href=\"#271\" id=\"271\">271</a>\n<a href=\"#272\" id=\"272\">272</a>\n<a href=\"#273\" id=\"273\">273</a>\n<a href=\"#274\" id=\"274\">274</a>\n<a href=\"#275\" id=\"275\">275</a>\n<a href=\"#276\" id=\"276\">276</a>\n<a href=\"#277\" id=\"277\">277</a>\n<a href=\"#278\" id=\"278\">278</a>\n<a href=\"#279\" id=\"279\">279</a>\n<a href=\"#280\" id=\"280\">280</a>\n<a href=\"#281\" id=\"281\">281</a>\n<a href=\"#282\" id=\"282\">282</a>\n<a href=\"#283\" id=\"283\">283</a>\n<a href=\"#284\" id=\"284\">284</a>\n<a href=\"#285\" id=\"285\">285</a>\n<a href=\"#286\" id=\"286\">286</a>\n<a href=\"#287\" id=\"287\">287</a>\n<a href=\"#288\" id=\"288\">288</a>\n<a href=\"#289\" id=\"289\">289</a>\n<a href=\"#290\" id=\"290\">290</a>\n<a href=\"#291\" id=\"291\">291</a>\n<a href=\"#292\" id=\"292\">292</a>\n<a href=\"#293\" id=\"293\">293</a>\n<a href=\"#294\" id=\"294\">294</a>\n<a href=\"#295\" id=\"295\">295</a>\n<a href=\"#296\" id=\"296\">296</a>\n<a href=\"#297\" id=\"297\">297</a>\n<a href=\"#298\" id=\"298\">298</a>\n<a href=\"#299\" id=\"299\">299</a>\n<a href=\"#300\" id=\"300\">300</a>\n<a href=\"#301\" id=\"301\">301</a>\n<a href=\"#302\" id=\"302\">302</a>\n<a href=\"#303\" id=\"303\">303</a>\n<a href=\"#304\" id=\"304\">304</a>\n<a href=\"#305\" id=\"305\">305</a>\n<a href=\"#306\" id=\"306\">306</a>\n<a href=\"#307\" id=\"307\">307</a>\n<a href=\"#308\" id=\"308\">308</a>\n<a href=\"#309\" id=\"309\">309</a>\n<a href=\"#310\" id=\"310\">310</a>\n<a href=\"#311\" id=\"311\">311</a>\n<a href=\"#312\" id=\"312\">312</a>\n<a href=\"#313\" id=\"313\">313</a>\n<a href=\"#314\" id=\"314\">314</a>\n<a href=\"#315\" id=\"315\">315</a>\n<a href=\"#316\" id=\"316\">316</a>\n<a href=\"#317\" id=\"317\">317</a>\n<a href=\"#318\" id=\"318\">318</a>\n<a href=\"#319\" id=\"319\">319</a>\n<a href=\"#320\" id=\"320\">320</a>\n<a href=\"#321\" id=\"321\">321</a>\n<a href=\"#322\" id=\"322\">322</a>\n<a href=\"#323\" id=\"323\">323</a>\n<a href=\"#324\" id=\"324\">324</a>\n<a href=\"#325\" id=\"325\">325</a>\n<a href=\"#326\" id=\"326\">326</a>\n<a href=\"#327\" id=\"327\">327</a>\n<a href=\"#328\" id=\"328\">328</a>\n<a href=\"#329\" id=\"329\">329</a>\n<a href=\"#330\" id=\"330\">330</a>\n<a href=\"#331\" id=\"331\">331</a>\n<a href=\"#332\" id=\"332\">332</a>\n<a href=\"#333\" id=\"333\">333</a>\n<a href=\"#334\" id=\"334\">334</a>\n<a href=\"#335\" id=\"335\">335</a>\n<a href=\"#336\" id=\"336\">336</a>\n<a href=\"#337\" id=\"337\">337</a>\n<a href=\"#338\" id=\"338\">338</a>\n<a href=\"#339\" id=\"339\">339</a>\n<a href=\"#340\" id=\"340\">340</a>\n<a href=\"#341\" id=\"341\">341</a>\n<a href=\"#342\" id=\"342\">342</a>\n<a href=\"#343\" id=\"343\">343</a>\n<a href=\"#344\" id=\"344\">344</a>\n<a href=\"#345\" id=\"345\">345</a>\n<a href=\"#346\" id=\"346\">346</a>\n<a href=\"#347\" id=\"347\">347</a>\n<a href=\"#348\" id=\"348\">348</a>\n<a href=\"#349\" id=\"349\">349</a>\n<a href=\"#350\" id=\"350\">350</a>\n<a href=\"#351\" id=\"351\">351</a>\n<a href=\"#352\" id=\"352\">352</a>\n<a href=\"#353\" id=\"353\">353</a>\n<a href=\"#354\" id=\"354\">354</a>\n<a href=\"#355\" id=\"355\">355</a>\n<a href=\"#356\" id=\"356\">356</a>\n<a href=\"#357\" id=\"357\">357</a>\n<a href=\"#358\" id=\"358\">358</a>\n<a href=\"#359\" id=\"359\">359</a>\n<a href=\"#360\" id=\"360\">360</a>\n<a href=\"#361\" id=\"361\">361</a>\n<a href=\"#362\" id=\"362\">362</a>\n<a href=\"#363\" id=\"363\">363</a>\n<a href=\"#364\" id=\"364\">364</a>\n<a href=\"#365\" id=\"365\">365</a>\n<a href=\"#366\" id=\"366\">366</a>\n<a href=\"#367\" id=\"367\">367</a>\n<a href=\"#368\" id=\"368\">368</a>\n<a href=\"#369\" id=\"369\">369</a>\n<a href=\"#370\" id=\"370\">370</a>\n<a href=\"#371\" id=\"371\">371</a>\n<a href=\"#372\" id=\"372\">372</a>\n<a href=\"#373\" id=\"373\">373</a>\n<a href=\"#374\" id=\"374\">374</a>\n<a href=\"#375\" id=\"375\">375</a>\n<a href=\"#376\" id=\"376\">376</a>\n<a href=\"#377\" id=\"377\">377</a>\n<a href=\"#378\" id=\"378\">378</a>\n<a href=\"#379\" id=\"379\">379</a>\n<a href=\"#380\" id=\"380\">380</a>\n<a href=\"#381\" id=\"381\">381</a>\n<a href=\"#382\" id=\"382\">382</a>\n<a href=\"#383\" id=\"383\">383</a>\n<a href=\"#384\" id=\"384\">384</a>\n<a href=\"#385\" id=\"385\">385</a>\n<a href=\"#386\" id=\"386\">386</a>\n<a href=\"#387\" id=\"387\">387</a>\n<a href=\"#388\" id=\"388\">388</a>\n<a href=\"#389\" id=\"389\">389</a>\n<a href=\"#390\" id=\"390\">390</a>\n<a href=\"#391\" id=\"391\">391</a>\n<a href=\"#392\" id=\"392\">392</a>\n<a href=\"#393\" id=\"393\">393</a>\n<a href=\"#394\" id=\"394\">394</a>\n<a href=\"#395\" id=\"395\">395</a>\n<a href=\"#396\" id=\"396\">396</a>\n<a href=\"#397\" id=\"397\">397</a>\n<a href=\"#398\" id=\"398\">398</a>\n<a href=\"#399\" id=\"399\">399</a>\n<a href=\"#400\" id=\"400\">400</a>\n<a href=\"#401\" id=\"401\">401</a>\n<a href=\"#402\" id=\"402\">402</a>\n<a href=\"#403\" id=\"403\">403</a>\n<a href=\"#404\" id=\"404\">404</a>\n<a href=\"#405\" id=\"405\">405</a>\n<a href=\"#406\" id=\"406\">406</a>\n<a href=\"#407\" id=\"407\">407</a>\n<a href=\"#408\" id=\"408\">408</a>\n<a href=\"#409\" id=\"409\">409</a>\n<a href=\"#410\" id=\"410\">410</a>\n<a href=\"#411\" id=\"411\">411</a>\n<a href=\"#412\" id=\"412\">412</a>\n<a href=\"#413\" id=\"413\">413</a>\n<a href=\"#414\" id=\"414\">414</a>\n<a href=\"#415\" id=\"415\">415</a>\n<a href=\"#416\" id=\"416\">416</a>\n<a href=\"#417\" id=\"417\">417</a>\n<a href=\"#418\" id=\"418\">418</a>\n<a href=\"#419\" id=\"419\">419</a>\n<a href=\"#420\" id=\"420\">420</a>\n<a href=\"#421\" id=\"421\">421</a>\n<a href=\"#422\" id=\"422\">422</a>\n<a href=\"#423\" id=\"423\">423</a>\n<a href=\"#424\" id=\"424\">424</a>\n<a href=\"#425\" id=\"425\">425</a>\n<a href=\"#426\" id=\"426\">426</a>\n<a href=\"#427\" id=\"427\">427</a>\n<a href=\"#428\" id=\"428\">428</a>\n<a href=\"#429\" id=\"429\">429</a>\n<a href=\"#430\" id=\"430\">430</a>\n<a href=\"#431\" id=\"431\">431</a>\n<a href=\"#432\" id=\"432\">432</a>\n<a href=\"#433\" id=\"433\">433</a>\n<a href=\"#434\" id=\"434\">434</a>\n<a href=\"#435\" id=\"435\">435</a>\n<a href=\"#436\" id=\"436\">436</a>\n<a href=\"#437\" id=\"437\">437</a>\n<a href=\"#438\" id=\"438\">438</a>\n<a href=\"#439\" id=\"439\">439</a>\n<a href=\"#440\" id=\"440\">440</a>\n<a href=\"#441\" id=\"441\">441</a>\n<a href=\"#442\" id=\"442\">442</a>\n<a href=\"#443\" id=\"443\">443</a>\n<a href=\"#444\" id=\"444\">444</a>\n<a href=\"#445\" id=\"445\">445</a>\n<a href=\"#446\" id=\"446\">446</a>\n<a href=\"#447\" id=\"447\">447</a>\n<a href=\"#448\" id=\"448\">448</a>\n<a href=\"#449\" id=\"449\">449</a>\n<a href=\"#450\" id=\"450\">450</a>\n<a href=\"#451\" id=\"451\">451</a>\n<a href=\"#452\" id=\"452\">452</a>\n<a href=\"#453\" id=\"453\">453</a>\n<a href=\"#454\" id=\"454\">454</a>\n<a href=\"#455\" id=\"455\">455</a>\n<a href=\"#456\" id=\"456\">456</a>\n<a href=\"#457\" id=\"457\">457</a>\n<a href=\"#458\" id=\"458\">458</a>\n<a href=\"#459\" id=\"459\">459</a>\n<a href=\"#460\" id=\"460\">460</a>\n<a href=\"#461\" id=\"461\">461</a>\n<a href=\"#462\" id=\"462\">462</a>\n<a href=\"#463\" id=\"463\">463</a>\n<a href=\"#464\" id=\"464\">464</a>\n<a href=\"#465\" id=\"465\">465</a>\n<a href=\"#466\" id=\"466\">466</a>\n<a href=\"#467\" id=\"467\">467</a>\n<a href=\"#468\" id=\"468\">468</a>\n<a href=\"#469\" id=\"469\">469</a>\n<a href=\"#470\" id=\"470\">470</a>\n<a href=\"#471\" id=\"471\">471</a>\n<a href=\"#472\" id=\"472\">472</a>\n<a href=\"#473\" id=\"473\">473</a>\n<a href=\"#474\" id=\"474\">474</a>\n<a href=\"#475\" id=\"475\">475</a>\n<a href=\"#476\" id=\"476\">476</a>\n<a href=\"#477\" id=\"477\">477</a>\n<a href=\"#478\" id=\"478\">478</a>\n<a href=\"#479\" id=\"479\">479</a>\n<a href=\"#480\" id=\"480\">480</a>\n<a href=\"#481\" id=\"481\">481</a>\n<a href=\"#482\" id=\"482\">482</a>\n<a href=\"#483\" id=\"483\">483</a>\n<a href=\"#484\" id=\"484\">484</a>\n<a href=\"#485\" id=\"485\">485</a>\n<a href=\"#486\" id=\"486\">486</a>\n<a href=\"#487\" id=\"487\">487</a>\n<a href=\"#488\" id=\"488\">488</a>\n<a href=\"#489\" id=\"489\">489</a>\n<a href=\"#490\" id=\"490\">490</a>\n<a href=\"#491\" id=\"491\">491</a>\n<a href=\"#492\" id=\"492\">492</a>\n<a href=\"#493\" id=\"493\">493</a>\n<a href=\"#494\" id=\"494\">494</a>\n<a href=\"#495\" id=\"495\">495</a>\n<a href=\"#496\" id=\"496\">496</a>\n<a href=\"#497\" id=\"497\">497</a>\n<a href=\"#498\" id=\"498\">498</a>\n<a href=\"#499\" id=\"499\">499</a>\n<a href=\"#500\" id=\"500\">500</a>\n<a href=\"#501\" id=\"501\">501</a>\n<a href=\"#502\" id=\"502\">502</a>\n<a href=\"#503\" id=\"503\">503</a>\n<a href=\"#504\" id=\"504\">504</a>\n<a href=\"#505\" id=\"505\">505</a>\n<a href=\"#506\" id=\"506\">506</a>\n<a href=\"#507\" id=\"507\">507</a>\n<a href=\"#508\" id=\"508\">508</a>\n<a href=\"#509\" id=\"509\">509</a>\n<a href=\"#510\" id=\"510\">510</a>\n<a href=\"#511\" id=\"511\">511</a>\n<a href=\"#512\" id=\"512\">512</a>\n<a href=\"#513\" id=\"513\">513</a>\n<a href=\"#514\" id=\"514\">514</a>\n<a href=\"#515\" id=\"515\">515</a>\n<a href=\"#516\" id=\"516\">516</a>\n<a href=\"#517\" id=\"517\">517</a>\n<a href=\"#518\" id=\"518\">518</a>\n<a href=\"#519\" id=\"519\">519</a>\n<a href=\"#520\" id=\"520\">520</a>\n<a href=\"#521\" id=\"521\">521</a>\n<a href=\"#522\" id=\"522\">522</a>\n<a href=\"#523\" id=\"523\">523</a>\n<a href=\"#524\" id=\"524\">524</a>\n<a href=\"#525\" id=\"525\">525</a>\n<a href=\"#526\" id=\"526\">526</a>\n<a href=\"#527\" id=\"527\">527</a>\n<a href=\"#528\" id=\"528\">528</a>\n<a href=\"#529\" id=\"529\">529</a>\n<a href=\"#530\" id=\"530\">530</a>\n<a href=\"#531\" id=\"531\">531</a>\n<a href=\"#532\" id=\"532\">532</a>\n<a href=\"#533\" id=\"533\">533</a>\n<a href=\"#534\" id=\"534\">534</a>\n<a href=\"#535\" id=\"535\">535</a>\n<a href=\"#536\" id=\"536\">536</a>\n<a href=\"#537\" id=\"537\">537</a>\n<a href=\"#538\" id=\"538\">538</a>\n<a href=\"#539\" id=\"539\">539</a>\n<a href=\"#540\" id=\"540\">540</a>\n<a href=\"#541\" id=\"541\">541</a>\n<a href=\"#542\" id=\"542\">542</a>\n<a href=\"#543\" id=\"543\">543</a>\n<a href=\"#544\" id=\"544\">544</a>\n<a href=\"#545\" id=\"545\">545</a>\n<a href=\"#546\" id=\"546\">546</a>\n<a href=\"#547\" id=\"547\">547</a>\n<a href=\"#548\" id=\"548\">548</a>\n<a href=\"#549\" id=\"549\">549</a>\n<a href=\"#550\" id=\"550\">550</a>\n<a href=\"#551\" id=\"551\">551</a>\n<a href=\"#552\" id=\"552\">552</a>\n<a href=\"#553\" id=\"553\">553</a>\n<a href=\"#554\" id=\"554\">554</a>\n<a href=\"#555\" id=\"555\">555</a>\n<a href=\"#556\" id=\"556\">556</a>\n<a href=\"#557\" id=\"557\">557</a>\n<a href=\"#558\" id=\"558\">558</a>\n<a href=\"#559\" id=\"559\">559</a>\n<a href=\"#560\" id=\"560\">560</a>\n<a href=\"#561\" id=\"561\">561</a>\n<a href=\"#562\" id=\"562\">562</a>\n<a href=\"#563\" id=\"563\">563</a>\n<a href=\"#564\" id=\"564\">564</a>\n<a href=\"#565\" id=\"565\">565</a>\n<a href=\"#566\" id=\"566\">566</a>\n<a href=\"#567\" id=\"567\">567</a>\n<a href=\"#568\" id=\"568\">568</a>\n<a href=\"#569\" id=\"569\">569</a>\n<a href=\"#570\" id=\"570\">570</a>\n<a href=\"#571\" id=\"571\">571</a>\n<a href=\"#572\" id=\"572\">572</a>\n<a href=\"#573\" id=\"573\">573</a>\n<a href=\"#574\" id=\"574\">574</a>\n<a href=\"#575\" id=\"575\">575</a>\n<a href=\"#576\" id=\"576\">576</a>\n<a href=\"#577\" id=\"577\">577</a>\n<a href=\"#578\" id=\"578\">578</a>\n<a href=\"#579\" id=\"579\">579</a>\n<a href=\"#580\" id=\"580\">580</a>\n<a href=\"#581\" id=\"581\">581</a>\n<a href=\"#582\" id=\"582\">582</a>\n<a href=\"#583\" id=\"583\">583</a>\n<a href=\"#584\" id=\"584\">584</a>\n<a href=\"#585\" id=\"585\">585</a>\n<a href=\"#586\" id=\"586\">586</a>\n<a href=\"#587\" id=\"587\">587</a>\n<a href=\"#588\" id=\"588\">588</a>\n<a href=\"#589\" id=\"589\">589</a>\n<a href=\"#590\" id=\"590\">590</a>\n<a href=\"#591\" id=\"591\">591</a>\n<a href=\"#592\" id=\"592\">592</a>\n<a href=\"#593\" id=\"593\">593</a>\n<a href=\"#594\" id=\"594\">594</a>\n<a href=\"#595\" id=\"595\">595</a>\n<a href=\"#596\" id=\"596\">596</a>\n<a href=\"#597\" id=\"597\">597</a>\n<a href=\"#598\" id=\"598\">598</a>\n<a href=\"#599\" id=\"599\">599</a>\n<a href=\"#600\" id=\"600\">600</a>\n<a href=\"#601\" id=\"601\">601</a>\n<a href=\"#602\" id=\"602\">602</a>\n<a href=\"#603\" id=\"603\">603</a>\n<a href=\"#604\" id=\"604\">604</a>\n<a href=\"#605\" id=\"605\">605</a>\n<a href=\"#606\" id=\"606\">606</a>\n<a href=\"#607\" id=\"607\">607</a>\n<a href=\"#608\" id=\"608\">608</a>\n<a href=\"#609\" id=\"609\">609</a>\n<a href=\"#610\" id=\"610\">610</a>\n<a href=\"#611\" id=\"611\">611</a>\n<a href=\"#612\" id=\"612\">612</a>\n<a href=\"#613\" id=\"613\">613</a>\n<a href=\"#614\" id=\"614\">614</a>\n<a href=\"#615\" id=\"615\">615</a>\n<a href=\"#616\" id=\"616\">616</a>\n<a href=\"#617\" id=\"617\">617</a>\n<a href=\"#618\" id=\"618\">618</a>\n<a href=\"#619\" id=\"619\">619</a>\n<a href=\"#620\" id=\"620\">620</a>\n<a href=\"#621\" id=\"621\">621</a>\n<a href=\"#622\" id=\"622\">622</a>\n<a href=\"#623\" id=\"623\">623</a>\n<a href=\"#624\" id=\"624\">624</a>\n<a href=\"#625\" id=\"625\">625</a>\n<a href=\"#626\" id=\"626\">626</a>\n<a href=\"#627\" id=\"627\">627</a>\n<a href=\"#628\" id=\"628\">628</a>\n<a href=\"#629\" id=\"629\">629</a>\n<a href=\"#630\" id=\"630\">630</a>\n<a href=\"#631\" id=\"631\">631</a>\n<a href=\"#632\" id=\"632\">632</a>\n<a href=\"#633\" id=\"633\">633</a>\n<a href=\"#634\" id=\"634\">634</a>\n<a href=\"#635\" id=\"635\">635</a>\n<a href=\"#636\" id=\"636\">636</a>\n<a href=\"#637\" id=\"637\">637</a>\n<a href=\"#638\" id=\"638\">638</a>\n<a href=\"#639\" id=\"639\">639</a>\n<a href=\"#640\" id=\"640\">640</a>\n<a href=\"#641\" id=\"641\">641</a>\n<a href=\"#642\" id=\"642\">642</a>\n<a href=\"#643\" id=\"643\">643</a>\n<a href=\"#644\" id=\"644\">644</a>\n<a href=\"#645\" id=\"645\">645</a>\n<a href=\"#646\" id=\"646\">646</a>\n<a href=\"#647\" id=\"647\">647</a>\n<a href=\"#648\" id=\"648\">648</a>\n<a href=\"#649\" id=\"649\">649</a>\n<a href=\"#650\" id=\"650\">650</a>\n<a href=\"#651\" id=\"651\">651</a>\n<a href=\"#652\" id=\"652\">652</a>\n<a href=\"#653\" id=\"653\">653</a>\n<a href=\"#654\" id=\"654\">654</a>\n<a href=\"#655\" id=\"655\">655</a>\n<a href=\"#656\" id=\"656\">656</a>\n<a href=\"#657\" id=\"657\">657</a>\n<a href=\"#658\" id=\"658\">658</a>\n<a href=\"#659\" id=\"659\">659</a>\n<a href=\"#660\" id=\"660\">660</a>\n<a href=\"#661\" id=\"661\">661</a>\n<a href=\"#662\" id=\"662\">662</a>\n<a href=\"#663\" id=\"663\">663</a>\n<a href=\"#664\" id=\"664\">664</a>\n<a href=\"#665\" id=\"665\">665</a>\n<a href=\"#666\" id=\"666\">666</a>\n<a href=\"#667\" id=\"667\">667</a>\n<a href=\"#668\" id=\"668\">668</a>\n<a href=\"#669\" id=\"669\">669</a>\n<a href=\"#670\" id=\"670\">670</a>\n<a href=\"#671\" id=\"671\">671</a>\n<a href=\"#672\" id=\"672\">672</a>\n<a href=\"#673\" id=\"673\">673</a>\n<a href=\"#674\" id=\"674\">674</a>\n<a href=\"#675\" id=\"675\">675</a>\n<a href=\"#676\" id=\"676\">676</a>\n<a href=\"#677\" id=\"677\">677</a>\n<a href=\"#678\" id=\"678\">678</a>\n<a href=\"#679\" id=\"679\">679</a>\n<a href=\"#680\" id=\"680\">680</a>\n<a href=\"#681\" id=\"681\">681</a>\n<a href=\"#682\" id=\"682\">682</a>\n<a href=\"#683\" id=\"683\">683</a>\n<a href=\"#684\" id=\"684\">684</a>\n<a href=\"#685\" id=\"685\">685</a>\n<a href=\"#686\" id=\"686\">686</a>\n<a href=\"#687\" id=\"687\">687</a>\n<a href=\"#688\" id=\"688\">688</a>\n<a href=\"#689\" id=\"689\">689</a>\n<a href=\"#690\" id=\"690\">690</a>\n<a href=\"#691\" id=\"691\">691</a>\n<a href=\"#692\" id=\"692\">692</a>\n<a href=\"#693\" id=\"693\">693</a>\n<a href=\"#694\" id=\"694\">694</a>\n<a href=\"#695\" id=\"695\">695</a>\n<a href=\"#696\" id=\"696\">696</a>\n<a href=\"#697\" id=\"697\">697</a>\n<a href=\"#698\" id=\"698\">698</a>\n<a href=\"#699\" id=\"699\">699</a>\n<a href=\"#700\" id=\"700\">700</a>\n<a href=\"#701\" id=\"701\">701</a>\n<a href=\"#702\" id=\"702\">702</a>\n<a href=\"#703\" id=\"703\">703</a>\n<a href=\"#704\" id=\"704\">704</a>\n<a href=\"#705\" id=\"705\">705</a>\n<a href=\"#706\" id=\"706\">706</a>\n<a href=\"#707\" id=\"707\">707</a>\n<a href=\"#708\" id=\"708\">708</a>\n<a href=\"#709\" id=\"709\">709</a>\n<a href=\"#710\" id=\"710\">710</a>\n<a href=\"#711\" id=\"711\">711</a>\n<a href=\"#712\" id=\"712\">712</a>\n<a href=\"#713\" id=\"713\">713</a>\n<a href=\"#714\" id=\"714\">714</a>\n<a href=\"#715\" id=\"715\">715</a>\n<a href=\"#716\" id=\"716\">716</a>\n<a href=\"#717\" id=\"717\">717</a>\n<a href=\"#718\" id=\"718\">718</a>\n<a href=\"#719\" id=\"719\">719</a>\n<a href=\"#720\" id=\"720\">720</a>\n<a href=\"#721\" id=\"721\">721</a>\n<a href=\"#722\" id=\"722\">722</a>\n<a href=\"#723\" id=\"723\">723</a>\n<a href=\"#724\" id=\"724\">724</a>\n<a href=\"#725\" id=\"725\">725</a>\n<a href=\"#726\" id=\"726\">726</a>\n<a href=\"#727\" id=\"727\">727</a>\n<a href=\"#728\" id=\"728\">728</a>\n<a href=\"#729\" id=\"729\">729</a>\n<a href=\"#730\" id=\"730\">730</a>\n<a href=\"#731\" id=\"731\">731</a>\n<a href=\"#732\" id=\"732\">732</a>\n<a href=\"#733\" id=\"733\">733</a>\n<a href=\"#734\" id=\"734\">734</a>\n<a href=\"#735\" id=\"735\">735</a>\n<a href=\"#736\" id=\"736\">736</a>\n<a href=\"#737\" id=\"737\">737</a>\n<a href=\"#738\" id=\"738\">738</a>\n<a href=\"#739\" id=\"739\">739</a>\n<a href=\"#740\" id=\"740\">740</a>\n<a href=\"#741\" id=\"741\">741</a>\n<a href=\"#742\" id=\"742\">742</a>\n<a href=\"#743\" id=\"743\">743</a>\n<a href=\"#744\" id=\"744\">744</a>\n<a href=\"#745\" id=\"745\">745</a>\n<a href=\"#746\" id=\"746\">746</a>\n<a href=\"#747\" id=\"747\">747</a>\n<a href=\"#748\" id=\"748\">748</a>\n<a href=\"#749\" id=\"749\">749</a>\n<a href=\"#750\" id=\"750\">750</a>\n<a href=\"#751\" id=\"751\">751</a>\n<a href=\"#752\" id=\"752\">752</a>\n<a href=\"#753\" id=\"753\">753</a>\n<a href=\"#754\" id=\"754\">754</a>\n<a href=\"#755\" id=\"755\">755</a>\n<a href=\"#756\" id=\"756\">756</a>\n<a href=\"#757\" id=\"757\">757</a>\n<a href=\"#758\" id=\"758\">758</a>\n<a href=\"#759\" id=\"759\">759</a>\n<a href=\"#760\" id=\"760\">760</a>\n<a href=\"#761\" id=\"761\">761</a>\n<a href=\"#762\" id=\"762\">762</a>\n<a href=\"#763\" id=\"763\">763</a>\n<a href=\"#764\" id=\"764\">764</a>\n<a href=\"#765\" id=\"765\">765</a>\n<a href=\"#766\" id=\"766\">766</a>\n<a href=\"#767\" id=\"767\">767</a>\n<a href=\"#768\" id=\"768\">768</a>\n<a href=\"#769\" id=\"769\">769</a>\n<a href=\"#770\" id=\"770\">770</a>\n<a href=\"#771\" id=\"771\">771</a>\n<a href=\"#772\" id=\"772\">772</a>\n<a href=\"#773\" id=\"773\">773</a>\n<a href=\"#774\" id=\"774\">774</a>\n<a href=\"#775\" id=\"775\">775</a>\n<a href=\"#776\" id=\"776\">776</a>\n<a href=\"#777\" id=\"777\">777</a>\n<a href=\"#778\" id=\"778\">778</a>\n<a href=\"#779\" id=\"779\">779</a>\n<a href=\"#780\" id=\"780\">780</a>\n<a href=\"#781\" id=\"781\">781</a>\n<a href=\"#782\" id=\"782\">782</a>\n<a href=\"#783\" id=\"783\">783</a>\n<a href=\"#784\" id=\"784\">784</a>\n<a href=\"#785\" id=\"785\">785</a>\n<a href=\"#786\" id=\"786\">786</a>\n<a href=\"#787\" id=\"787\">787</a>\n<a href=\"#788\" id=\"788\">788</a>\n<a href=\"#789\" id=\"789\">789</a>\n<a href=\"#790\" id=\"790\">790</a>\n<a href=\"#791\" id=\"791\">791</a>\n<a href=\"#792\" id=\"792\">792</a>\n<a href=\"#793\" id=\"793\">793</a>\n<a href=\"#794\" id=\"794\">794</a>\n<a href=\"#795\" id=\"795\">795</a>\n<a href=\"#796\" id=\"796\">796</a>\n<a href=\"#797\" id=\"797\">797</a>\n<a href=\"#798\" id=\"798\">798</a>\n<a href=\"#799\" id=\"799\">799</a>\n<a href=\"#800\" id=\"800\">800</a>\n<a href=\"#801\" id=\"801\">801</a>\n<a href=\"#802\" id=\"802\">802</a>\n<a href=\"#803\" id=\"803\">803</a>\n<a href=\"#804\" id=\"804\">804</a>\n<a href=\"#805\" id=\"805\">805</a>\n<a href=\"#806\" id=\"806\">806</a>\n<a href=\"#807\" id=\"807\">807</a>\n<a href=\"#808\" id=\"808\">808</a>\n<a href=\"#809\" id=\"809\">809</a>\n<a href=\"#810\" id=\"810\">810</a>\n<a href=\"#811\" id=\"811\">811</a>\n<a href=\"#812\" id=\"812\">812</a>\n<a href=\"#813\" id=\"813\">813</a>\n<a href=\"#814\" id=\"814\">814</a>\n<a href=\"#815\" id=\"815\">815</a>\n<a href=\"#816\" id=\"816\">816</a>\n<a href=\"#817\" id=\"817\">817</a>\n<a href=\"#818\" id=\"818\">818</a>\n<a href=\"#819\" id=\"819\">819</a>\n<a href=\"#820\" id=\"820\">820</a>\n<a href=\"#821\" id=\"821\">821</a>\n<a href=\"#822\" id=\"822\">822</a>\n<a href=\"#823\" id=\"823\">823</a>\n<a href=\"#824\" id=\"824\">824</a>\n<a href=\"#825\" id=\"825\">825</a>\n<a href=\"#826\" id=\"826\">826</a>\n<a href=\"#827\" id=\"827\">827</a>\n<a href=\"#828\" id=\"828\">828</a>\n<a href=\"#829\" id=\"829\">829</a>\n<a href=\"#830\" id=\"830\">830</a>\n<a href=\"#831\" id=\"831\">831</a>\n<a href=\"#832\" id=\"832\">832</a>\n<a href=\"#833\" id=\"833\">833</a>\n<a href=\"#834\" id=\"834\">834</a>\n<a href=\"#835\" id=\"835\">835</a>\n<a href=\"#836\" id=\"836\">836</a>\n<a href=\"#837\" id=\"837\">837</a>\n<a href=\"#838\" id=\"838\">838</a>\n<a href=\"#839\" id=\"839\">839</a>\n<a href=\"#840\" id=\"840\">840</a>\n<a href=\"#841\" id=\"841\">841</a>\n<a href=\"#842\" id=\"842\">842</a>\n<a href=\"#843\" id=\"843\">843</a>\n<a href=\"#844\" id=\"844\">844</a>\n<a href=\"#845\" id=\"845\">845</a>\n<a href=\"#846\" id=\"846\">846</a>\n<a href=\"#847\" id=\"847\">847</a>\n<a href=\"#848\" id=\"848\">848</a>\n<a href=\"#849\" id=\"849\">849</a>\n<a href=\"#850\" id=\"850\">850</a>\n<a href=\"#851\" id=\"851\">851</a>\n<a href=\"#852\" id=\"852\">852</a>\n<a href=\"#853\" id=\"853\">853</a>\n<a href=\"#854\" id=\"854\">854</a>\n<a href=\"#855\" id=\"855\">855</a>\n<a href=\"#856\" id=\"856\">856</a>\n<a href=\"#857\" id=\"857\">857</a>\n<a href=\"#858\" id=\"858\">858</a>\n<a href=\"#859\" id=\"859\">859</a>\n<a href=\"#860\" id=\"860\">860</a>\n<a href=\"#861\" id=\"861\">861</a>\n<a href=\"#862\" id=\"862\">862</a>\n<a href=\"#863\" id=\"863\">863</a>\n<a href=\"#864\" id=\"864\">864</a>\n<a href=\"#865\" id=\"865\">865</a>\n<a href=\"#866\" id=\"866\">866</a>\n<a href=\"#867\" id=\"867\">867</a>\n<a href=\"#868\" id=\"868\">868</a>\n<a href=\"#869\" id=\"869\">869</a>\n<a href=\"#870\" id=\"870\">870</a>\n<a href=\"#871\" id=\"871\">871</a>\n<a href=\"#872\" id=\"872\">872</a>\n<a href=\"#873\" id=\"873\">873</a>\n<a href=\"#874\" id=\"874\">874</a>\n<a href=\"#875\" id=\"875\">875</a>\n<a href=\"#876\" id=\"876\">876</a>\n<a href=\"#877\" id=\"877\">877</a>\n<a href=\"#878\" id=\"878\">878</a>\n<a href=\"#879\" id=\"879\">879</a>\n<a href=\"#880\" id=\"880\">880</a>\n<a href=\"#881\" id=\"881\">881</a>\n<a href=\"#882\" id=\"882\">882</a>\n<a href=\"#883\" id=\"883\">883</a>\n<a href=\"#884\" id=\"884\">884</a>\n<a href=\"#885\" id=\"885\">885</a>\n<a href=\"#886\" id=\"886\">886</a>\n<a href=\"#887\" id=\"887\">887</a>\n<a href=\"#888\" id=\"888\">888</a>\n<a href=\"#889\" id=\"889\">889</a>\n<a href=\"#890\" id=\"890\">890</a>\n<a href=\"#891\" id=\"891\">891</a>\n<a href=\"#892\" id=\"892\">892</a>\n<a href=\"#893\" id=\"893\">893</a>\n<a href=\"#894\" id=\"894\">894</a>\n<a href=\"#895\" id=\"895\">895</a>\n<a href=\"#896\" id=\"896\">896</a>\n<a href=\"#897\" id=\"897\">897</a>\n<a href=\"#898\" id=\"898\">898</a>\n<a href=\"#899\" id=\"899\">899</a>\n<a href=\"#900\" id=\"900\">900</a>\n<a href=\"#901\" id=\"901\">901</a>\n<a href=\"#902\" id=\"902\">902</a>\n<a href=\"#903\" id=\"903\">903</a>\n<a href=\"#904\" id=\"904\">904</a>\n<a href=\"#905\" id=\"905\">905</a>\n<a href=\"#906\" id=\"906\">906</a>\n<a href=\"#907\" id=\"907\">907</a>\n<a href=\"#908\" id=\"908\">908</a>\n<a href=\"#909\" id=\"909\">909</a>\n<a href=\"#910\" id=\"910\">910</a>\n<a href=\"#911\" id=\"911\">911</a>\n<a href=\"#912\" id=\"912\">912</a>\n<a href=\"#913\" id=\"913\">913</a>\n<a href=\"#914\" id=\"914\">914</a>\n<a href=\"#915\" id=\"915\">915</a>\n<a href=\"#916\" id=\"916\">916</a>\n<a href=\"#917\" id=\"917\">917</a>\n<a href=\"#918\" id=\"918\">918</a>\n<a href=\"#919\" id=\"919\">919</a>\n<a href=\"#920\" id=\"920\">920</a>\n<a href=\"#921\" id=\"921\">921</a>\n<a href=\"#922\" id=\"922\">922</a>\n<a href=\"#923\" id=\"923\">923</a>\n<a href=\"#924\" id=\"924\">924</a>\n<a href=\"#925\" id=\"925\">925</a>\n<a href=\"#926\" id=\"926\">926</a>\n<a href=\"#927\" id=\"927\">927</a>\n<a href=\"#928\" id=\"928\">928</a>\n<a href=\"#929\" id=\"929\">929</a>\n<a href=\"#930\" id=\"930\">930</a>\n<a href=\"#931\" id=\"931\">931</a>\n<a href=\"#932\" id=\"932\">932</a>\n<a href=\"#933\" id=\"933\">933</a>\n<a href=\"#934\" id=\"934\">934</a>\n<a href=\"#935\" id=\"935\">935</a>\n<a href=\"#936\" id=\"936\">936</a>\n<a href=\"#937\" id=\"937\">937</a>\n<a href=\"#938\" id=\"938\">938</a>\n<a href=\"#939\" id=\"939\">939</a>\n<a href=\"#940\" id=\"940\">940</a>\n<a href=\"#941\" id=\"941\">941</a>\n<a href=\"#942\" id=\"942\">942</a>\n<a href=\"#943\" id=\"943\">943</a>\n<a href=\"#944\" id=\"944\">944</a>\n<a href=\"#945\" id=\"945\">945</a>\n<a href=\"#946\" id=\"946\">946</a>\n<a href=\"#947\" id=\"947\">947</a>\n<a href=\"#948\" id=\"948\">948</a>\n<a href=\"#949\" id=\"949\">949</a>\n<a href=\"#950\" id=\"950\">950</a>\n<a href=\"#951\" id=\"951\">951</a>\n<a href=\"#952\" id=\"952\">952</a>\n<a href=\"#953\" id=\"953\">953</a>\n<a href=\"#954\" id=\"954\">954</a>\n<a href=\"#955\" id=\"955\">955</a>\n<a href=\"#956\" id=\"956\">956</a>\n<a href=\"#957\" id=\"957\">957</a>\n<a href=\"#958\" id=\"958\">958</a>\n<a href=\"#959\" id=\"959\">959</a>\n<a href=\"#960\" id=\"960\">960</a>\n<a href=\"#961\" id=\"961\">961</a>\n<a href=\"#962\" id=\"962\">962</a>\n<a href=\"#963\" id=\"963\">963</a>\n<a href=\"#964\" id=\"964\">964</a>\n<a href=\"#965\" id=\"965\">965</a>\n<a href=\"#966\" id=\"966\">966</a>\n<a href=\"#967\" id=\"967\">967</a>\n<a href=\"#968\" id=\"968\">968</a>\n<a href=\"#969\" id=\"969\">969</a>\n<a href=\"#970\" id=\"970\">970</a>\n<a href=\"#971\" id=\"971\">971</a>\n<a href=\"#972\" id=\"972\">972</a>\n<a href=\"#973\" id=\"973\">973</a>\n<a href=\"#974\" id=\"974\">974</a>\n<a href=\"#975\" id=\"975\">975</a>\n<a href=\"#976\" id=\"976\">976</a>\n<a href=\"#977\" id=\"977\">977</a>\n<a href=\"#978\" id=\"978\">978</a>\n<a href=\"#979\" id=\"979\">979</a>\n<a href=\"#980\" id=\"980\">980</a>\n<a href=\"#981\" id=\"981\">981</a>\n<a href=\"#982\" id=\"982\">982</a>\n<a href=\"#983\" id=\"983\">983</a>\n<a href=\"#984\" id=\"984\">984</a>\n<a href=\"#985\" id=\"985\">985</a>\n<a href=\"#986\" id=\"986\">986</a>\n<a href=\"#987\" id=\"987\">987</a>\n<a href=\"#988\" id=\"988\">988</a>\n<a href=\"#989\" id=\"989\">989</a>\n<a href=\"#990\" id=\"990\">990</a>\n<a href=\"#991\" id=\"991\">991</a>\n<a href=\"#992\" id=\"992\">992</a>\n<a href=\"#993\" id=\"993\">993</a>\n<a href=\"#994\" id=\"994\">994</a>\n<a href=\"#995\" id=\"995\">995</a>\n<a href=\"#996\" id=\"996\">996</a>\n<a href=\"#997\" id=\"997\">997</a>\n<a href=\"#998\" id=\"998\">998</a>\n<a href=\"#999\" id=\"999\">999</a>\n<a href=\"#1000\" id=\"1000\">1000</a>\n<a href=\"#1001\" id=\"1001\">1001</a>\n<a href=\"#1002\" id=\"1002\">1002</a>\n<a href=\"#1003\" id=\"1003\">1003</a>\n<a href=\"#1004\" id=\"1004\">1004</a>\n<a href=\"#1005\" id=\"1005\">1005</a>\n<a href=\"#1006\" id=\"1006\">1006</a>\n<a href=\"#1007\" id=\"1007\">1007</a>\n<a href=\"#1008\" id=\"1008\">1008</a>\n<a href=\"#1009\" id=\"1009\">1009</a>\n<a href=\"#1010\" id=\"1010\">1010</a>\n<a href=\"#1011\" id=\"1011\">1011</a>\n<a href=\"#1012\" id=\"1012\">1012</a>\n<a href=\"#1013\" id=\"1013\">1013</a>\n<a href=\"#1014\" id=\"1014\">1014</a>\n<a href=\"#1015\" id=\"1015\">1015</a>\n<a href=\"#1016\" id=\"1016\">1016</a>\n<a href=\"#1017\" id=\"1017\">1017</a>\n<a href=\"#1018\" id=\"1018\">1018</a>\n<a href=\"#1019\" id=\"1019\">1019</a>\n<a href=\"#1020\" id=\"1020\">1020</a>\n<a href=\"#1021\" id=\"1021\">1021</a>\n<a href=\"#1022\" id=\"1022\">1022</a>\n<a href=\"#1023\" id=\"1023\">1023</a>\n<a href=\"#1024\" id=\"1024\">1024</a>\n<a href=\"#1025\" id=\"1025\">1025</a>\n<a href=\"#1026\" id=\"1026\">1026</a>\n<a href=\"#1027\" id=\"1027\">1027</a>\n<a href=\"#1028\" id=\"1028\">1028</a>\n<a href=\"#1029\" id=\"1029\">1029</a>\n<a href=\"#1030\" id=\"1030\">1030</a>\n<a href=\"#1031\" id=\"1031\">1031</a>\n<a href=\"#1032\" id=\"1032\">1032</a>\n<a href=\"#1033\" id=\"1033\">1033</a>\n<a href=\"#1034\" id=\"1034\">1034</a>\n<a href=\"#1035\" id=\"1035\">1035</a>\n<a href=\"#1036\" id=\"1036\">1036</a>\n<a href=\"#1037\" id=\"1037\">1037</a>\n<a href=\"#1038\" id=\"1038\">1038</a>\n<a href=\"#1039\" id=\"1039\">1039</a>\n<a href=\"#1040\" id=\"1040\">1040</a>\n<a href=\"#1041\" id=\"1041\">1041</a>\n<a href=\"#1042\" id=\"1042\">1042</a>\n<a href=\"#1043\" id=\"1043\">1043</a>\n<a href=\"#1044\" id=\"1044\">1044</a>\n<a href=\"#1045\" id=\"1045\">1045</a>\n<a href=\"#1046\" id=\"1046\">1046</a>\n<a href=\"#1047\" id=\"1047\">1047</a>\n<a href=\"#1048\" id=\"1048\">1048</a>\n<a href=\"#1049\" id=\"1049\">1049</a>\n<a href=\"#1050\" id=\"1050\">1050</a>\n<a href=\"#1051\" id=\"1051\">1051</a>\n<a href=\"#1052\" id=\"1052\">1052</a>\n<a href=\"#1053\" id=\"1053\">1053</a>\n<a href=\"#1054\" id=\"1054\">1054</a>\n<a href=\"#1055\" id=\"1055\">1055</a>\n<a href=\"#1056\" id=\"1056\">1056</a>\n<a href=\"#1057\" id=\"1057\">1057</a>\n<a href=\"#1058\" id=\"1058\">1058</a>\n<a href=\"#1059\" id=\"1059\">1059</a>\n<a href=\"#1060\" id=\"1060\">1060</a>\n<a href=\"#1061\" id=\"1061\">1061</a>\n<a href=\"#1062\" id=\"1062\">1062</a>\n<a href=\"#1063\" id=\"1063\">1063</a>\n<a href=\"#1064\" id=\"1064\">1064</a>\n<a href=\"#1065\" id=\"1065\">1065</a>\n<a href=\"#1066\" id=\"1066\">1066</a>\n<a href=\"#1067\" id=\"1067\">1067</a>\n<a href=\"#1068\" id=\"1068\">1068</a>\n<a href=\"#1069\" id=\"1069\">1069</a>\n<a href=\"#1070\" id=\"1070\">1070</a>\n<a href=\"#1071\" id=\"1071\">1071</a>\n<a href=\"#1072\" id=\"1072\">1072</a>\n<a href=\"#1073\" id=\"1073\">1073</a>\n<a href=\"#1074\" id=\"1074\">1074</a>\n<a href=\"#1075\" id=\"1075\">1075</a>\n<a href=\"#1076\" id=\"1076\">1076</a>\n<a href=\"#1077\" id=\"1077\">1077</a>\n<a href=\"#1078\" id=\"1078\">1078</a>\n<a href=\"#1079\" id=\"1079\">1079</a>\n<a href=\"#1080\" id=\"1080\">1080</a>\n<a href=\"#1081\" id=\"1081\">1081</a>\n<a href=\"#1082\" id=\"1082\">1082</a>\n<a href=\"#1083\" id=\"1083\">1083</a>\n<a href=\"#1084\" id=\"1084\">1084</a>\n<a href=\"#1085\" id=\"1085\">1085</a>\n<a href=\"#1086\" id=\"1086\">1086</a>\n<a href=\"#1087\" id=\"1087\">1087</a>\n<a href=\"#1088\" id=\"1088\">1088</a>\n<a href=\"#1089\" id=\"1089\">1089</a>\n<a href=\"#1090\" id=\"1090\">1090</a>\n<a href=\"#1091\" id=\"1091\">1091</a>\n<a href=\"#1092\" id=\"1092\">1092</a>\n<a href=\"#1093\" id=\"1093\">1093</a>\n<a href=\"#1094\" id=\"1094\">1094</a>\n<a href=\"#1095\" id=\"1095\">1095</a>\n<a href=\"#1096\" id=\"1096\">1096</a>\n<a href=\"#1097\" id=\"1097\">1097</a>\n<a href=\"#1098\" id=\"1098\">1098</a>\n<a href=\"#1099\" id=\"1099\">1099</a>\n<a href=\"#1100\" id=\"1100\">1100</a>\n<a href=\"#1101\" id=\"1101\">1101</a>\n<a href=\"#1102\" id=\"1102\">1102</a>\n<a href=\"#1103\" id=\"1103\">1103</a>\n<a href=\"#1104\" id=\"1104\">1104</a>\n<a href=\"#1105\" id=\"1105\">1105</a>\n<a href=\"#1106\" id=\"1106\">1106</a>\n<a href=\"#1107\" id=\"1107\">1107</a>\n<a href=\"#1108\" id=\"1108\">1108</a>\n<a href=\"#1109\" id=\"1109\">1109</a>\n<a href=\"#1110\" id=\"1110\">1110</a>\n<a href=\"#1111\" id=\"1111\">1111</a>\n<a href=\"#1112\" id=\"1112\">1112</a>\n<a href=\"#1113\" id=\"1113\">1113</a>\n<a href=\"#1114\" id=\"1114\">1114</a>\n<a href=\"#1115\" id=\"1115\">1115</a>\n<a href=\"#1116\" id=\"1116\">1116</a>\n<a href=\"#1117\" id=\"1117\">1117</a>\n<a href=\"#1118\" id=\"1118\">1118</a>\n<a href=\"#1119\" id=\"1119\">1119</a>\n<a href=\"#1120\" id=\"1120\">1120</a>\n<a href=\"#1121\" id=\"1121\">1121</a>\n<a href=\"#1122\" id=\"1122\">1122</a>\n<a href=\"#1123\" id=\"1123\">1123</a>\n<a href=\"#1124\" id=\"1124\">1124</a>\n<a href=\"#1125\" id=\"1125\">1125</a>\n<a href=\"#1126\" id=\"1126\">1126</a>\n<a href=\"#1127\" id=\"1127\">1127</a>\n<a href=\"#1128\" id=\"1128\">1128</a>\n<a href=\"#1129\" id=\"1129\">1129</a>\n<a href=\"#1130\" id=\"1130\">1130</a>\n<a href=\"#1131\" id=\"1131\">1131</a>\n<a href=\"#1132\" id=\"1132\">1132</a>\n<a href=\"#1133\" id=\"1133\">1133</a>\n<a href=\"#1134\" id=\"1134\">1134</a>\n<a href=\"#1135\" id=\"1135\">1135</a>\n<a href=\"#1136\" id=\"1136\">1136</a>\n<a href=\"#1137\" id=\"1137\">1137</a>\n<a href=\"#1138\" id=\"1138\">1138</a>\n<a href=\"#1139\" id=\"1139\">1139</a>\n<a href=\"#1140\" id=\"1140\">1140</a>\n<a href=\"#1141\" id=\"1141\">1141</a>\n<a href=\"#1142\" id=\"1142\">1142</a>\n<a href=\"#1143\" id=\"1143\">1143</a>\n<a href=\"#1144\" id=\"1144\">1144</a>\n<a href=\"#1145\" id=\"1145\">1145</a>\n<a href=\"#1146\" id=\"1146\">1146</a>\n<a href=\"#1147\" id=\"1147\">1147</a>\n<a href=\"#1148\" id=\"1148\">1148</a>\n<a href=\"#1149\" id=\"1149\">1149</a>\n<a href=\"#1150\" id=\"1150\">1150</a>\n<a href=\"#1151\" id=\"1151\">1151</a>\n<a href=\"#1152\" id=\"1152\">1152</a>\n<a href=\"#1153\" id=\"1153\">1153</a>\n<a href=\"#1154\" id=\"1154\">1154</a>\n<a href=\"#1155\" id=\"1155\">1155</a>\n<a href=\"#1156\" id=\"1156\">1156</a>\n<a href=\"#1157\" id=\"1157\">1157</a>\n<a href=\"#1158\" id=\"1158\">1158</a>\n<a href=\"#1159\" id=\"1159\">1159</a>\n<a href=\"#1160\" id=\"1160\">1160</a>\n<a href=\"#1161\" id=\"1161\">1161</a>\n<a href=\"#1162\" id=\"1162\">1162</a>\n<a href=\"#1163\" id=\"1163\">1163</a>\n<a href=\"#1164\" id=\"1164\">1164</a>\n<a href=\"#1165\" id=\"1165\">1165</a>\n<a href=\"#1166\" id=\"1166\">1166</a>\n<a href=\"#1167\" id=\"1167\">1167</a>\n<a href=\"#1168\" id=\"1168\">1168</a>\n<a href=\"#1169\" id=\"1169\">1169</a>\n<a href=\"#1170\" id=\"1170\">1170</a>\n<a href=\"#1171\" id=\"1171\">1171</a>\n<a href=\"#1172\" id=\"1172\">1172</a>\n<a href=\"#1173\" id=\"1173\">1173</a>\n<a href=\"#1174\" id=\"1174\">1174</a>\n<a href=\"#1175\" id=\"1175\">1175</a>\n<a href=\"#1176\" id=\"1176\">1176</a>\n<a href=\"#1177\" id=\"1177\">1177</a>\n<a href=\"#1178\" id=\"1178\">1178</a>\n<a href=\"#1179\" id=\"1179\">1179</a>\n<a href=\"#1180\" id=\"1180\">1180</a>\n<a href=\"#1181\" id=\"1181\">1181</a>\n<a href=\"#1182\" id=\"1182\">1182</a>\n<a href=\"#1183\" id=\"1183\">1183</a>\n<a href=\"#1184\" id=\"1184\">1184</a>\n<a href=\"#1185\" id=\"1185\">1185</a>\n<a href=\"#1186\" id=\"1186\">1186</a>\n<a href=\"#1187\" id=\"1187\">1187</a>\n<a href=\"#1188\" id=\"1188\">1188</a>\n<a href=\"#1189\" id=\"1189\">1189</a>\n<a href=\"#1190\" id=\"1190\">1190</a>\n<a href=\"#1191\" id=\"1191\">1191</a>\n<a href=\"#1192\" id=\"1192\">1192</a>\n<a href=\"#1193\" id=\"1193\">1193</a>\n<a href=\"#1194\" id=\"1194\">1194</a>\n<a href=\"#1195\" id=\"1195\">1195</a>\n<a href=\"#1196\" id=\"1196\">1196</a>\n<a href=\"#1197\" id=\"1197\">1197</a>\n<a href=\"#1198\" id=\"1198\">1198</a>\n<a href=\"#1199\" id=\"1199\">1199</a>\n<a href=\"#1200\" id=\"1200\">1200</a>\n<a href=\"#1201\" id=\"1201\">1201</a>\n<a href=\"#1202\" id=\"1202\">1202</a>\n<a href=\"#1203\" id=\"1203\">1203</a>\n<a href=\"#1204\" id=\"1204\">1204</a>\n<a href=\"#1205\" id=\"1205\">1205</a>\n<a href=\"#1206\" id=\"1206\">1206</a>\n<a href=\"#1207\" id=\"1207\">1207</a>\n<a href=\"#1208\" id=\"1208\">1208</a>\n<a href=\"#1209\" id=\"1209\">1209</a>\n<a href=\"#1210\" id=\"1210\">1210</a>\n<a href=\"#1211\" id=\"1211\">1211</a>\n<a href=\"#1212\" id=\"1212\">1212</a>\n<a href=\"#1213\" id=\"1213\">1213</a>\n<a href=\"#1214\" id=\"1214\">1214</a>\n<a href=\"#1215\" id=\"1215\">1215</a>\n<a href=\"#1216\" id=\"1216\">1216</a>\n<a href=\"#1217\" id=\"1217\">1217</a>\n<a href=\"#1218\" id=\"1218\">1218</a>\n<a href=\"#1219\" id=\"1219\">1219</a>\n<a href=\"#1220\" id=\"1220\">1220</a>\n<a href=\"#1221\" id=\"1221\">1221</a>\n<a href=\"#1222\" id=\"1222\">1222</a>\n<a href=\"#1223\" id=\"1223\">1223</a>\n<a href=\"#1224\" id=\"1224\">1224</a>\n<a href=\"#1225\" id=\"1225\">1225</a>\n<a href=\"#1226\" id=\"1226\">1226</a>\n<a href=\"#1227\" id=\"1227\">1227</a>\n<a href=\"#1228\" id=\"1228\">1228</a>\n<a href=\"#1229\" id=\"1229\">1229</a>\n<a href=\"#1230\" id=\"1230\">1230</a>\n<a href=\"#1231\" id=\"1231\">1231</a>\n<a href=\"#1232\" id=\"1232\">1232</a>\n<a href=\"#1233\" id=\"1233\">1233</a>\n<a href=\"#1234\" id=\"1234\">1234</a>\n<a href=\"#1235\" id=\"1235\">1235</a>\n<a href=\"#1236\" id=\"1236\">1236</a>\n<a href=\"#1237\" id=\"1237\">1237</a>\n<a href=\"#1238\" id=\"1238\">1238</a>\n<a href=\"#1239\" id=\"1239\">1239</a>\n<a href=\"#1240\" id=\"1240\">1240</a>\n<a href=\"#1241\" id=\"1241\">1241</a>\n<a href=\"#1242\" id=\"1242\">1242</a>\n<a href=\"#1243\" id=\"1243\">1243</a>\n<a href=\"#1244\" id=\"1244\">1244</a>\n<a href=\"#1245\" id=\"1245\">1245</a>\n<a href=\"#1246\" id=\"1246\">1246</a>\n<a href=\"#1247\" id=\"1247\">1247</a>\n<a href=\"#1248\" id=\"1248\">1248</a>\n<a href=\"#1249\" id=\"1249\">1249</a>\n<a href=\"#1250\" id=\"1250\">1250</a>\n<a href=\"#1251\" id=\"1251\">1251</a>\n<a href=\"#1252\" id=\"1252\">1252</a>\n<a href=\"#1253\" id=\"1253\">1253</a>\n<a href=\"#1254\" id=\"1254\">1254</a>\n<a href=\"#1255\" id=\"1255\">1255</a>\n<a href=\"#1256\" id=\"1256\">1256</a>\n<a href=\"#1257\" id=\"1257\">1257</a>\n<a href=\"#1258\" id=\"1258\">1258</a>\n<a href=\"#1259\" id=\"1259\">1259</a>\n<a href=\"#1260\" id=\"1260\">1260</a>\n<a href=\"#1261\" id=\"1261\">1261</a>\n<a href=\"#1262\" id=\"1262\">1262</a>\n<a href=\"#1263\" id=\"1263\">1263</a>\n<a href=\"#1264\" id=\"1264\">1264</a>\n<a href=\"#1265\" id=\"1265\">1265</a>\n<a href=\"#1266\" id=\"1266\">1266</a>\n<a href=\"#1267\" id=\"1267\">1267</a>\n<a href=\"#1268\" id=\"1268\">1268</a>\n<a href=\"#1269\" id=\"1269\">1269</a>\n<a href=\"#1270\" id=\"1270\">1270</a>\n<a href=\"#1271\" id=\"1271\">1271</a>\n<a href=\"#1272\" id=\"1272\">1272</a>\n<a href=\"#1273\" id=\"1273\">1273</a>\n<a href=\"#1274\" id=\"1274\">1274</a>\n<a href=\"#1275\" id=\"1275\">1275</a>\n<a href=\"#1276\" id=\"1276\">1276</a>\n<a href=\"#1277\" id=\"1277\">1277</a>\n<a href=\"#1278\" id=\"1278\">1278</a>\n<a href=\"#1279\" id=\"1279\">1279</a>\n<a href=\"#1280\" id=\"1280\">1280</a>\n<a href=\"#1281\" id=\"1281\">1281</a>\n<a href=\"#1282\" id=\"1282\">1282</a>\n<a href=\"#1283\" id=\"1283\">1283</a>\n<a href=\"#1284\" id=\"1284\">1284</a>\n<a href=\"#1285\" id=\"1285\">1285</a>\n<a href=\"#1286\" id=\"1286\">1286</a>\n<a href=\"#1287\" id=\"1287\">1287</a>\n<a href=\"#1288\" id=\"1288\">1288</a>\n<a href=\"#1289\" id=\"1289\">1289</a>\n<a href=\"#1290\" id=\"1290\">1290</a>\n<a href=\"#1291\" id=\"1291\">1291</a>\n<a href=\"#1292\" id=\"1292\">1292</a>\n<a href=\"#1293\" id=\"1293\">1293</a>\n<a href=\"#1294\" id=\"1294\">1294</a>\n<a href=\"#1295\" id=\"1295\">1295</a>\n<a href=\"#1296\" id=\"1296\">1296</a>\n<a href=\"#1297\" id=\"1297\">1297</a>\n<a href=\"#1298\" id=\"1298\">1298</a>\n<a href=\"#1299\" id=\"1299\">1299</a>\n<a href=\"#1300\" id=\"1300\">1300</a>\n<a href=\"#1301\" id=\"1301\">1301</a>\n<a href=\"#1302\" id=\"1302\">1302</a>\n<a href=\"#1303\" id=\"1303\">1303</a>\n<a href=\"#1304\" id=\"1304\">1304</a>\n<a href=\"#1305\" id=\"1305\">1305</a>\n<a href=\"#1306\" id=\"1306\">1306</a>\n<a href=\"#1307\" id=\"1307\">1307</a>\n<a href=\"#1308\" id=\"1308\">1308</a>\n<a href=\"#1309\" id=\"1309\">1309</a>\n<a href=\"#1310\" id=\"1310\">1310</a>\n<a href=\"#1311\" id=\"1311\">1311</a>\n<a href=\"#1312\" id=\"1312\">1312</a>\n<a href=\"#1313\" id=\"1313\">1313</a>\n<a href=\"#1314\" id=\"1314\">1314</a>\n<a href=\"#1315\" id=\"1315\">1315</a>\n<a href=\"#1316\" id=\"1316\">1316</a>\n<a href=\"#1317\" id=\"1317\">1317</a>\n<a href=\"#1318\" id=\"1318\">1318</a>\n<a href=\"#1319\" id=\"1319\">1319</a>\n<a href=\"#1320\" id=\"1320\">1320</a>\n<a href=\"#1321\" id=\"1321\">1321</a>\n<a href=\"#1322\" id=\"1322\">1322</a>\n<a href=\"#1323\" id=\"1323\">1323</a>\n<a href=\"#1324\" id=\"1324\">1324</a>\n<a href=\"#1325\" id=\"1325\">1325</a>\n<a href=\"#1326\" id=\"1326\">1326</a>\n<a href=\"#1327\" id=\"1327\">1327</a>\n<a href=\"#1328\" id=\"1328\">1328</a>\n<a href=\"#1329\" id=\"1329\">1329</a>\n<a href=\"#1330\" id=\"1330\">1330</a>\n<a href=\"#1331\" id=\"1331\">1331</a>\n<a href=\"#1332\" id=\"1332\">1332</a>\n<a href=\"#1333\" id=\"1333\">1333</a>\n<a href=\"#1334\" id=\"1334\">1334</a>\n<a href=\"#1335\" id=\"1335\">1335</a>\n<a href=\"#1336\" id=\"1336\">1336</a>\n<a href=\"#1337\" id=\"1337\">1337</a>\n<a href=\"#1338\" id=\"1338\">1338</a>\n<a href=\"#1339\" id=\"1339\">1339</a>\n<a href=\"#1340\" id=\"1340\">1340</a>\n<a href=\"#1341\" id=\"1341\">1341</a>\n<a href=\"#1342\" id=\"1342\">1342</a>\n<a href=\"#1343\" id=\"1343\">1343</a>\n<a href=\"#1344\" id=\"1344\">1344</a>\n<a href=\"#1345\" id=\"1345\">1345</a>\n<a href=\"#1346\" id=\"1346\">1346</a>\n<a href=\"#1347\" id=\"1347\">1347</a>\n</pre></div><pre class=\"rust\"><code><span class=\"doccomment\">//! Basic functions for dealing with memory.\n//!\n//! This module contains functions for querying the size and alignment of\n//! types, initializing and manipulating memory.\n\n</span><span class=\"attr\">#![stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n\n</span><span class=\"kw\">use </span><span class=\"kw\">crate</span>::clone;\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::cmp;\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::fmt;\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::hash;\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::intrinsics;\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::marker::DiscriminantKind;\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::ptr;\n\n<span class=\"kw\">mod </span>manually_drop;\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"manually_drop\"</span>, since = <span class=\"string\">\"1.20.0\"</span>)]\n</span><span class=\"kw\">pub use </span>manually_drop::ManuallyDrop;\n\n<span class=\"kw\">mod </span>maybe_uninit;\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"maybe_uninit\"</span>, since = <span class=\"string\">\"1.36.0\"</span>)]\n</span><span class=\"kw\">pub use </span>maybe_uninit::MaybeUninit;\n\n<span class=\"kw\">mod </span>transmutability;\n<span class=\"attr\">#[unstable(feature = <span class=\"string\">\"transmutability\"</span>, issue = <span class=\"string\">\"99571\"</span>)]\n</span><span class=\"kw\">pub use </span>transmutability::{Assume, BikeshedIntrinsicFrom};\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n#[doc(inline)]\n</span><span class=\"kw\">pub use </span><span class=\"kw\">crate</span>::intrinsics::transmute;\n\n<span class=\"doccomment\">/// Takes ownership and \"forgets\" about the value **without running its destructor**.\n///\n/// Any resources the value manages, such as heap memory or a file handle, will linger\n/// forever in an unreachable state. However, it does not guarantee that pointers\n/// to this memory will remain valid.\n///\n/// * If you want to leak memory, see [`Box::leak`].\n/// * If you want to obtain a raw pointer to the memory, see [`Box::into_raw`].\n/// * If you want to dispose of a value properly, running its destructor, see\n/// [`mem::drop`].\n///\n/// # Safety\n///\n/// `forget` is not marked as `unsafe`, because Rust's safety guarantees\n/// do not include a guarantee that destructors will always run. For example,\n/// a program can create a reference cycle using [`Rc`][rc], or call\n/// [`process::exit`][exit] to exit without running destructors. Thus, allowing\n/// `mem::forget` from safe code does not fundamentally change Rust's safety\n/// guarantees.\n///\n/// That said, leaking resources such as memory or I/O objects is usually undesirable.\n/// The need comes up in some specialized use cases for FFI or unsafe code, but even\n/// then, [`ManuallyDrop`] is typically preferred.\n///\n/// Because forgetting a value is allowed, any `unsafe` code you write must\n/// allow for this possibility. You cannot return a value and expect that the\n/// caller will necessarily run the value's destructor.\n///\n/// [rc]: ../../std/rc/struct.Rc.html\n/// [exit]: ../../std/process/fn.exit.html\n///\n/// # Examples\n///\n/// The canonical safe use of `mem::forget` is to circumvent a value's destructor\n/// implemented by the `Drop` trait. For example, this will leak a `File`, i.e. reclaim\n/// the space taken by the variable but never close the underlying system resource:\n///\n/// ```no_run\n/// use std::mem;\n/// use std::fs::File;\n///\n/// let file = File::open(\"foo.txt\").unwrap();\n/// mem::forget(file);\n/// ```\n///\n/// This is useful when the ownership of the underlying resource was previously\n/// transferred to code outside of Rust, for example by transmitting the raw\n/// file descriptor to C code.\n///\n/// # Relationship with `ManuallyDrop`\n///\n/// While `mem::forget` can also be used to transfer *memory* ownership, doing so is error-prone.\n/// [`ManuallyDrop`] should be used instead. Consider, for example, this code:\n///\n/// ```\n/// use std::mem;\n///\n/// let mut v = vec![65, 122];\n/// // Build a `String` using the contents of `v`\n/// let s = unsafe { String::from_raw_parts(v.as_mut_ptr(), v.len(), v.capacity()) };\n/// // leak `v` because its memory is now managed by `s`\n/// mem::forget(v);  // ERROR - v is invalid and must not be passed to a function\n/// assert_eq!(s, \"Az\");\n/// // `s` is implicitly dropped and its memory deallocated.\n/// ```\n///\n/// There are two issues with the above example:\n///\n/// * If more code were added between the construction of `String` and the invocation of\n///   `mem::forget()`, a panic within it would cause a double free because the same memory\n///   is handled by both `v` and `s`.\n/// * After calling `v.as_mut_ptr()` and transmitting the ownership of the data to `s`,\n///   the `v` value is invalid. Even when a value is just moved to `mem::forget` (which won't\n///   inspect it), some types have strict requirements on their values that\n///   make them invalid when dangling or no longer owned. Using invalid values in any\n///   way, including passing them to or returning them from functions, constitutes\n///   undefined behavior and may break the assumptions made by the compiler.\n///\n/// Switching to `ManuallyDrop` avoids both issues:\n///\n/// ```\n/// use std::mem::ManuallyDrop;\n///\n/// let v = vec![65, 122];\n/// // Before we disassemble `v` into its raw parts, make sure it\n/// // does not get dropped!\n/// let mut v = ManuallyDrop::new(v);\n/// // Now disassemble `v`. These operations cannot panic, so there cannot be a leak.\n/// let (ptr, len, cap) = (v.as_mut_ptr(), v.len(), v.capacity());\n/// // Finally, build a `String`.\n/// let s = unsafe { String::from_raw_parts(ptr, len, cap) };\n/// assert_eq!(s, \"Az\");\n/// // `s` is implicitly dropped and its memory deallocated.\n/// ```\n///\n/// `ManuallyDrop` robustly prevents double-free because we disable `v`'s destructor\n/// before doing anything else. `mem::forget()` doesn't allow this because it consumes its\n/// argument, forcing us to call it only after extracting anything we need from `v`. Even\n/// if a panic were introduced between construction of `ManuallyDrop` and building the\n/// string (which cannot happen in the code as shown), it would result in a leak and not a\n/// double free. In other words, `ManuallyDrop` errs on the side of leaking instead of\n/// erring on the side of (double-)dropping.\n///\n/// Also, `ManuallyDrop` prevents us from having to \"touch\" `v` after transferring the\n/// ownership to `s` — the final step of interacting with `v` to dispose of it without\n/// running its destructor is entirely avoided.\n///\n/// [`Box`]: ../../std/boxed/struct.Box.html\n/// [`Box::leak`]: ../../std/boxed/struct.Box.html#method.leak\n/// [`Box::into_raw`]: ../../std/boxed/struct.Box.html#method.into_raw\n/// [`mem::drop`]: drop\n/// [ub]: ../../reference/behavior-considered-undefined.html\n</span><span class=\"attr\">#[inline]\n#[rustc_const_stable(feature = <span class=\"string\">\"const_forget\"</span>, since = <span class=\"string\">\"1.46.0\"</span>)]\n#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n#[cfg_attr(not(test), rustc_diagnostic_item = <span class=\"string\">\"mem_forget\"</span>)]\n</span><span class=\"kw\">pub const fn </span>forget&lt;T&gt;(t: T) {\n    <span class=\"kw\">let _ </span>= ManuallyDrop::new(t);\n}\n\n<span class=\"doccomment\">/// Like [`forget`], but also accepts unsized values.\n///\n/// This function is just a shim intended to be removed when the `unsized_locals` feature gets\n/// stabilized.\n</span><span class=\"attr\">#[inline]\n#[unstable(feature = <span class=\"string\">\"forget_unsized\"</span>, issue = <span class=\"string\">\"none\"</span>)]\n</span><span class=\"kw\">pub fn </span>forget_unsized&lt;T: <span class=\"question-mark\">?</span>Sized&gt;(t: T) {\n    intrinsics::forget(t)\n}\n\n<span class=\"doccomment\">/// Returns the size of a type in bytes.\n///\n/// More specifically, this is the offset in bytes between successive elements\n/// in an array with that item type including alignment padding. Thus, for any\n/// type `T` and length `n`, `[T; n]` has a size of `n * size_of::&lt;T&gt;()`.\n///\n/// In general, the size of a type is not stable across compilations, but\n/// specific types such as primitives are.\n///\n/// The following table gives the size for primitives.\n///\n/// Type | `size_of::&lt;Type&gt;()`\n/// ---- | ---------------\n/// () | 0\n/// bool | 1\n/// u8 | 1\n/// u16 | 2\n/// u32 | 4\n/// u64 | 8\n/// u128 | 16\n/// i8 | 1\n/// i16 | 2\n/// i32 | 4\n/// i64 | 8\n/// i128 | 16\n/// f32 | 4\n/// f64 | 8\n/// char | 4\n///\n/// Furthermore, `usize` and `isize` have the same size.\n///\n/// The types [`*const T`], `&amp;T`, [`Box&lt;T&gt;`], [`Option&lt;&amp;T&gt;`], and `Option&lt;Box&lt;T&gt;&gt;` all have\n/// the same size. If `T` is `Sized`, all of those types have the same size as `usize`.\n///\n/// The mutability of a pointer does not change its size. As such, `&amp;T` and `&amp;mut T`\n/// have the same size. Likewise for `*const T` and `*mut T`.\n///\n/// # Size of `#[repr(C)]` items\n///\n/// The `C` representation for items has a defined layout. With this layout,\n/// the size of items is also stable as long as all fields have a stable size.\n///\n/// ## Size of Structs\n///\n/// For `struct`s, the size is determined by the following algorithm.\n///\n/// For each field in the struct ordered by declaration order:\n///\n/// 1. Add the size of the field.\n/// 2. Round up the current size to the nearest multiple of the next field's [alignment].\n///\n/// Finally, round the size of the struct to the nearest multiple of its [alignment].\n/// The alignment of the struct is usually the largest alignment of all its\n/// fields; this can be changed with the use of `repr(align(N))`.\n///\n/// Unlike `C`, zero sized structs are not rounded up to one byte in size.\n///\n/// ## Size of Enums\n///\n/// Enums that carry no data other than the discriminant have the same size as C enums\n/// on the platform they are compiled for.\n///\n/// ## Size of Unions\n///\n/// The size of a union is the size of its largest field.\n///\n/// Unlike `C`, zero sized unions are not rounded up to one byte in size.\n///\n/// # Examples\n///\n/// ```\n/// use std::mem;\n///\n/// // Some primitives\n/// assert_eq!(4, mem::size_of::&lt;i32&gt;());\n/// assert_eq!(8, mem::size_of::&lt;f64&gt;());\n/// assert_eq!(0, mem::size_of::&lt;()&gt;());\n///\n/// // Some arrays\n/// assert_eq!(8, mem::size_of::&lt;[i32; 2]&gt;());\n/// assert_eq!(12, mem::size_of::&lt;[i32; 3]&gt;());\n/// assert_eq!(0, mem::size_of::&lt;[i32; 0]&gt;());\n///\n///\n/// // Pointer size equality\n/// assert_eq!(mem::size_of::&lt;&amp;i32&gt;(), mem::size_of::&lt;*const i32&gt;());\n/// assert_eq!(mem::size_of::&lt;&amp;i32&gt;(), mem::size_of::&lt;Box&lt;i32&gt;&gt;());\n/// assert_eq!(mem::size_of::&lt;&amp;i32&gt;(), mem::size_of::&lt;Option&lt;&amp;i32&gt;&gt;());\n/// assert_eq!(mem::size_of::&lt;Box&lt;i32&gt;&gt;(), mem::size_of::&lt;Option&lt;Box&lt;i32&gt;&gt;&gt;());\n/// ```\n///\n/// Using `#[repr(C)]`.\n///\n/// ```\n/// use std::mem;\n///\n/// #[repr(C)]\n/// struct FieldStruct {\n///     first: u8,\n///     second: u16,\n///     third: u8\n/// }\n///\n/// // The size of the first field is 1, so add 1 to the size. Size is 1.\n/// // The alignment of the second field is 2, so add 1 to the size for padding. Size is 2.\n/// // The size of the second field is 2, so add 2 to the size. Size is 4.\n/// // The alignment of the third field is 1, so add 0 to the size for padding. Size is 4.\n/// // The size of the third field is 1, so add 1 to the size. Size is 5.\n/// // Finally, the alignment of the struct is 2 (because the largest alignment amongst its\n/// // fields is 2), so add 1 to the size for padding. Size is 6.\n/// assert_eq!(6, mem::size_of::&lt;FieldStruct&gt;());\n///\n/// #[repr(C)]\n/// struct TupleStruct(u8, u16, u8);\n///\n/// // Tuple structs follow the same rules.\n/// assert_eq!(6, mem::size_of::&lt;TupleStruct&gt;());\n///\n/// // Note that reordering the fields can lower the size. We can remove both padding bytes\n/// // by putting `third` before `second`.\n/// #[repr(C)]\n/// struct FieldStructOptimized {\n///     first: u8,\n///     third: u8,\n///     second: u16\n/// }\n///\n/// assert_eq!(4, mem::size_of::&lt;FieldStructOptimized&gt;());\n///\n/// // Union size is the size of the largest field.\n/// #[repr(C)]\n/// union ExampleUnion {\n///     smaller: u8,\n///     larger: u16\n/// }\n///\n/// assert_eq!(2, mem::size_of::&lt;ExampleUnion&gt;());\n/// ```\n///\n/// [alignment]: align_of\n/// [`*const T`]: primitive@pointer\n/// [`Box&lt;T&gt;`]: ../../std/boxed/struct.Box.html\n/// [`Option&lt;&amp;T&gt;`]: crate::option::Option\n///\n</span><span class=\"attr\">#[inline(always)]\n#[must_use]\n#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n#[rustc_promotable]\n#[rustc_const_stable(feature = <span class=\"string\">\"const_mem_size_of\"</span>, since = <span class=\"string\">\"1.24.0\"</span>)]\n#[cfg_attr(not(test), rustc_diagnostic_item = <span class=\"string\">\"mem_size_of\"</span>)]\n</span><span class=\"kw\">pub const fn </span>size_of&lt;T&gt;() -&gt; usize {\n    intrinsics::size_of::&lt;T&gt;()\n}\n\n<span class=\"doccomment\">/// Returns the size of the pointed-to value in bytes.\n///\n/// This is usually the same as [`size_of::&lt;T&gt;()`]. However, when `T` *has* no\n/// statically-known size, e.g., a slice [`[T]`][slice] or a [trait object],\n/// then `size_of_val` can be used to get the dynamically-known size.\n///\n/// [trait object]: ../../book/ch17-02-trait-objects.html\n///\n/// # Examples\n///\n/// ```\n/// use std::mem;\n///\n/// assert_eq!(4, mem::size_of_val(&amp;5i32));\n///\n/// let x: [u8; 13] = [0; 13];\n/// let y: &amp;[u8] = &amp;x;\n/// assert_eq!(13, mem::size_of_val(y));\n/// ```\n///\n/// [`size_of::&lt;T&gt;()`]: size_of\n</span><span class=\"attr\">#[inline]\n#[must_use]\n#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n#[rustc_const_unstable(feature = <span class=\"string\">\"const_size_of_val\"</span>, issue = <span class=\"string\">\"46571\"</span>)]\n#[cfg_attr(not(test), rustc_diagnostic_item = <span class=\"string\">\"mem_size_of_val\"</span>)]\n</span><span class=\"kw\">pub const fn </span>size_of_val&lt;T: <span class=\"question-mark\">?</span>Sized&gt;(val: <span class=\"kw-2\">&amp;</span>T) -&gt; usize {\n    <span class=\"comment\">// SAFETY: `val` is a reference, so it's a valid raw pointer\n    </span><span class=\"kw\">unsafe </span>{ intrinsics::size_of_val(val) }\n}\n\n<span class=\"doccomment\">/// Returns the size of the pointed-to value in bytes.\n///\n/// This is usually the same as [`size_of::&lt;T&gt;()`]. However, when `T` *has* no\n/// statically-known size, e.g., a slice [`[T]`][slice] or a [trait object],\n/// then `size_of_val_raw` can be used to get the dynamically-known size.\n///\n/// # Safety\n///\n/// This function is only safe to call if the following conditions hold:\n///\n/// - If `T` is `Sized`, this function is always safe to call.\n/// - If the unsized tail of `T` is:\n///     - a [slice], then the length of the slice tail must be an initialized\n///       integer, and the size of the *entire value*\n///       (dynamic tail length + statically sized prefix) must fit in `isize`.\n///     - a [trait object], then the vtable part of the pointer must point\n///       to a valid vtable acquired by an unsizing coercion, and the size\n///       of the *entire value* (dynamic tail length + statically sized prefix)\n///       must fit in `isize`.\n///     - an (unstable) [extern type], then this function is always safe to\n///       call, but may panic or otherwise return the wrong value, as the\n///       extern type's layout is not known. This is the same behavior as\n///       [`size_of_val`] on a reference to a type with an extern type tail.\n///     - otherwise, it is conservatively not allowed to call this function.\n///\n/// [`size_of::&lt;T&gt;()`]: size_of\n/// [trait object]: ../../book/ch17-02-trait-objects.html\n/// [extern type]: ../../unstable-book/language-features/extern-types.html\n///\n/// # Examples\n///\n/// ```\n/// #![feature(layout_for_ptr)]\n/// use std::mem;\n///\n/// assert_eq!(4, mem::size_of_val(&amp;5i32));\n///\n/// let x: [u8; 13] = [0; 13];\n/// let y: &amp;[u8] = &amp;x;\n/// assert_eq!(13, unsafe { mem::size_of_val_raw(y) });\n/// ```\n</span><span class=\"attr\">#[inline]\n#[must_use]\n#[unstable(feature = <span class=\"string\">\"layout_for_ptr\"</span>, issue = <span class=\"string\">\"69835\"</span>)]\n#[rustc_const_unstable(feature = <span class=\"string\">\"const_size_of_val_raw\"</span>, issue = <span class=\"string\">\"46571\"</span>)]\n</span><span class=\"kw\">pub const unsafe fn </span>size_of_val_raw&lt;T: <span class=\"question-mark\">?</span>Sized&gt;(val: <span class=\"kw-2\">*const </span>T) -&gt; usize {\n    <span class=\"comment\">// SAFETY: the caller must provide a valid raw pointer\n    </span><span class=\"kw\">unsafe </span>{ intrinsics::size_of_val(val) }\n}\n\n<span class=\"doccomment\">/// Returns the [ABI]-required minimum alignment of a type in bytes.\n///\n/// Every reference to a value of the type `T` must be a multiple of this number.\n///\n/// This is the alignment used for struct fields. It may be smaller than the preferred alignment.\n///\n/// [ABI]: https://en.wikipedia.org/wiki/Application_binary_interface\n///\n/// # Examples\n///\n/// ```\n/// # #![allow(deprecated)]\n/// use std::mem;\n///\n/// assert_eq!(4, mem::min_align_of::&lt;i32&gt;());\n/// ```\n</span><span class=\"attr\">#[inline]\n#[must_use]\n#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n#[deprecated(note = <span class=\"string\">\"use `align_of` instead\"</span>, since = <span class=\"string\">\"1.2.0\"</span>, suggestion = <span class=\"string\">\"align_of\"</span>)]\n</span><span class=\"kw\">pub fn </span>min_align_of&lt;T&gt;() -&gt; usize {\n    intrinsics::min_align_of::&lt;T&gt;()\n}\n\n<span class=\"doccomment\">/// Returns the [ABI]-required minimum alignment of the type of the value that `val` points to in\n/// bytes.\n///\n/// Every reference to a value of the type `T` must be a multiple of this number.\n///\n/// [ABI]: https://en.wikipedia.org/wiki/Application_binary_interface\n///\n/// # Examples\n///\n/// ```\n/// # #![allow(deprecated)]\n/// use std::mem;\n///\n/// assert_eq!(4, mem::min_align_of_val(&amp;5i32));\n/// ```\n</span><span class=\"attr\">#[inline]\n#[must_use]\n#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n#[deprecated(note = <span class=\"string\">\"use `align_of_val` instead\"</span>, since = <span class=\"string\">\"1.2.0\"</span>, suggestion = <span class=\"string\">\"align_of_val\"</span>)]\n</span><span class=\"kw\">pub fn </span>min_align_of_val&lt;T: <span class=\"question-mark\">?</span>Sized&gt;(val: <span class=\"kw-2\">&amp;</span>T) -&gt; usize {\n    <span class=\"comment\">// SAFETY: val is a reference, so it's a valid raw pointer\n    </span><span class=\"kw\">unsafe </span>{ intrinsics::min_align_of_val(val) }\n}\n\n<span class=\"doccomment\">/// Returns the [ABI]-required minimum alignment of a type in bytes.\n///\n/// Every reference to a value of the type `T` must be a multiple of this number.\n///\n/// This is the alignment used for struct fields. It may be smaller than the preferred alignment.\n///\n/// [ABI]: https://en.wikipedia.org/wiki/Application_binary_interface\n///\n/// # Examples\n///\n/// ```\n/// use std::mem;\n///\n/// assert_eq!(4, mem::align_of::&lt;i32&gt;());\n/// ```\n</span><span class=\"attr\">#[inline(always)]\n#[must_use]\n#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n#[rustc_promotable]\n#[rustc_const_stable(feature = <span class=\"string\">\"const_align_of\"</span>, since = <span class=\"string\">\"1.24.0\"</span>)]\n</span><span class=\"kw\">pub const fn </span>align_of&lt;T&gt;() -&gt; usize {\n    intrinsics::min_align_of::&lt;T&gt;()\n}\n\n<span class=\"doccomment\">/// Returns the [ABI]-required minimum alignment of the type of the value that `val` points to in\n/// bytes.\n///\n/// Every reference to a value of the type `T` must be a multiple of this number.\n///\n/// [ABI]: https://en.wikipedia.org/wiki/Application_binary_interface\n///\n/// # Examples\n///\n/// ```\n/// use std::mem;\n///\n/// assert_eq!(4, mem::align_of_val(&amp;5i32));\n/// ```\n</span><span class=\"attr\">#[inline]\n#[must_use]\n#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n#[rustc_const_unstable(feature = <span class=\"string\">\"const_align_of_val\"</span>, issue = <span class=\"string\">\"46571\"</span>)]\n#[allow(deprecated)]\n</span><span class=\"kw\">pub const fn </span>align_of_val&lt;T: <span class=\"question-mark\">?</span>Sized&gt;(val: <span class=\"kw-2\">&amp;</span>T) -&gt; usize {\n    <span class=\"comment\">// SAFETY: val is a reference, so it's a valid raw pointer\n    </span><span class=\"kw\">unsafe </span>{ intrinsics::min_align_of_val(val) }\n}\n\n<span class=\"doccomment\">/// Returns the [ABI]-required minimum alignment of the type of the value that `val` points to in\n/// bytes.\n///\n/// Every reference to a value of the type `T` must be a multiple of this number.\n///\n/// [ABI]: https://en.wikipedia.org/wiki/Application_binary_interface\n///\n/// # Safety\n///\n/// This function is only safe to call if the following conditions hold:\n///\n/// - If `T` is `Sized`, this function is always safe to call.\n/// - If the unsized tail of `T` is:\n///     - a [slice], then the length of the slice tail must be an initialized\n///       integer, and the size of the *entire value*\n///       (dynamic tail length + statically sized prefix) must fit in `isize`.\n///     - a [trait object], then the vtable part of the pointer must point\n///       to a valid vtable acquired by an unsizing coercion, and the size\n///       of the *entire value* (dynamic tail length + statically sized prefix)\n///       must fit in `isize`.\n///     - an (unstable) [extern type], then this function is always safe to\n///       call, but may panic or otherwise return the wrong value, as the\n///       extern type's layout is not known. This is the same behavior as\n///       [`align_of_val`] on a reference to a type with an extern type tail.\n///     - otherwise, it is conservatively not allowed to call this function.\n///\n/// [trait object]: ../../book/ch17-02-trait-objects.html\n/// [extern type]: ../../unstable-book/language-features/extern-types.html\n///\n/// # Examples\n///\n/// ```\n/// #![feature(layout_for_ptr)]\n/// use std::mem;\n///\n/// assert_eq!(4, unsafe { mem::align_of_val_raw(&amp;5i32) });\n/// ```\n</span><span class=\"attr\">#[inline]\n#[must_use]\n#[unstable(feature = <span class=\"string\">\"layout_for_ptr\"</span>, issue = <span class=\"string\">\"69835\"</span>)]\n#[rustc_const_unstable(feature = <span class=\"string\">\"const_align_of_val_raw\"</span>, issue = <span class=\"string\">\"46571\"</span>)]\n</span><span class=\"kw\">pub const unsafe fn </span>align_of_val_raw&lt;T: <span class=\"question-mark\">?</span>Sized&gt;(val: <span class=\"kw-2\">*const </span>T) -&gt; usize {\n    <span class=\"comment\">// SAFETY: the caller must provide a valid raw pointer\n    </span><span class=\"kw\">unsafe </span>{ intrinsics::min_align_of_val(val) }\n}\n\n<span class=\"doccomment\">/// Returns `true` if dropping values of type `T` matters.\n///\n/// This is purely an optimization hint, and may be implemented conservatively:\n/// it may return `true` for types that don't actually need to be dropped.\n/// As such always returning `true` would be a valid implementation of\n/// this function. However if this function actually returns `false`, then you\n/// can be certain dropping `T` has no side effect.\n///\n/// Low level implementations of things like collections, which need to manually\n/// drop their data, should use this function to avoid unnecessarily\n/// trying to drop all their contents when they are destroyed. This might not\n/// make a difference in release builds (where a loop that has no side-effects\n/// is easily detected and eliminated), but is often a big win for debug builds.\n///\n/// Note that [`drop_in_place`] already performs this check, so if your workload\n/// can be reduced to some small number of [`drop_in_place`] calls, using this is\n/// unnecessary. In particular note that you can [`drop_in_place`] a slice, and that\n/// will do a single needs_drop check for all the values.\n///\n/// Types like Vec therefore just `drop_in_place(&amp;mut self[..])` without using\n/// `needs_drop` explicitly. Types like [`HashMap`], on the other hand, have to drop\n/// values one at a time and should use this API.\n///\n/// [`drop_in_place`]: crate::ptr::drop_in_place\n/// [`HashMap`]: ../../std/collections/struct.HashMap.html\n///\n/// # Examples\n///\n/// Here's an example of how a collection might make use of `needs_drop`:\n///\n/// ```\n/// use std::{mem, ptr};\n///\n/// pub struct MyCollection&lt;T&gt; {\n/// #   data: [T; 1],\n///     /* ... */\n/// }\n/// # impl&lt;T&gt; MyCollection&lt;T&gt; {\n/// #   fn iter_mut(&amp;mut self) -&gt; &amp;mut [T] { &amp;mut self.data }\n/// #   fn free_buffer(&amp;mut self) {}\n/// # }\n///\n/// impl&lt;T&gt; Drop for MyCollection&lt;T&gt; {\n///     fn drop(&amp;mut self) {\n///         unsafe {\n///             // drop the data\n///             if mem::needs_drop::&lt;T&gt;() {\n///                 for x in self.iter_mut() {\n///                     ptr::drop_in_place(x);\n///                 }\n///             }\n///             self.free_buffer();\n///         }\n///     }\n/// }\n/// ```\n</span><span class=\"attr\">#[inline]\n#[must_use]\n#[stable(feature = <span class=\"string\">\"needs_drop\"</span>, since = <span class=\"string\">\"1.21.0\"</span>)]\n#[rustc_const_stable(feature = <span class=\"string\">\"const_mem_needs_drop\"</span>, since = <span class=\"string\">\"1.36.0\"</span>)]\n#[rustc_diagnostic_item = <span class=\"string\">\"needs_drop\"</span>]\n</span><span class=\"kw\">pub const fn </span>needs_drop&lt;T: <span class=\"question-mark\">?</span>Sized&gt;() -&gt; bool {\n    intrinsics::needs_drop::&lt;T&gt;()\n}\n\n<span class=\"doccomment\">/// Returns the value of type `T` represented by the all-zero byte-pattern.\n///\n/// This means that, for example, the padding byte in `(u8, u16)` is not\n/// necessarily zeroed.\n///\n/// There is no guarantee that an all-zero byte-pattern represents a valid value\n/// of some type `T`. For example, the all-zero byte-pattern is not a valid value\n/// for reference types (`&amp;T`, `&amp;mut T`) and functions pointers. Using `zeroed`\n/// on such types causes immediate [undefined behavior][ub] because [the Rust\n/// compiler assumes][inv] that there always is a valid value in a variable it\n/// considers initialized.\n///\n/// This has the same effect as [`MaybeUninit::zeroed().assume_init()`][zeroed].\n/// It is useful for FFI sometimes, but should generally be avoided.\n///\n/// [zeroed]: MaybeUninit::zeroed\n/// [ub]: ../../reference/behavior-considered-undefined.html\n/// [inv]: MaybeUninit#initialization-invariant\n///\n/// # Examples\n///\n/// Correct usage of this function: initializing an integer with zero.\n///\n/// ```\n/// use std::mem;\n///\n/// let x: i32 = unsafe { mem::zeroed() };\n/// assert_eq!(0, x);\n/// ```\n///\n/// *Incorrect* usage of this function: initializing a reference with zero.\n///\n/// ```rust,no_run\n/// # #![allow(invalid_value)]\n/// use std::mem;\n///\n/// let _x: &amp;i32 = unsafe { mem::zeroed() }; // Undefined behavior!\n/// let _y: fn() = unsafe { mem::zeroed() }; // And again!\n/// ```\n</span><span class=\"attr\">#[inline(always)]\n#[must_use]\n#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n#[allow(deprecated_in_future)]\n#[allow(deprecated)]\n#[rustc_diagnostic_item = <span class=\"string\">\"mem_zeroed\"</span>]\n#[track_caller]\n#[rustc_const_stable(feature = <span class=\"string\">\"const_mem_zeroed\"</span>, since = <span class=\"string\">\"1.75.0\"</span>)]\n</span><span class=\"kw\">pub const unsafe fn </span>zeroed&lt;T&gt;() -&gt; T {\n    <span class=\"comment\">// SAFETY: the caller must guarantee that an all-zero value is valid for `T`.\n    </span><span class=\"kw\">unsafe </span>{\n        intrinsics::assert_zero_valid::&lt;T&gt;();\n        MaybeUninit::zeroed().assume_init()\n    }\n}\n\n<span class=\"doccomment\">/// Bypasses Rust's normal memory-initialization checks by pretending to\n/// produce a value of type `T`, while doing nothing at all.\n///\n/// **This function is deprecated.** Use [`MaybeUninit&lt;T&gt;`] instead.\n/// It also might be slower than using `MaybeUninit&lt;T&gt;` due to mitigations that were put in place to\n/// limit the potential harm caused by incorrect use of this function in legacy code.\n///\n/// The reason for deprecation is that the function basically cannot be used\n/// correctly: it has the same effect as [`MaybeUninit::uninit().assume_init()`][uninit].\n/// As the [`assume_init` documentation][assume_init] explains,\n/// [the Rust compiler assumes][inv] that values are properly initialized.\n///\n/// Truly uninitialized memory like what gets returned here\n/// is special in that the compiler knows that it does not have a fixed value.\n/// This makes it undefined behavior to have uninitialized data in a variable even\n/// if that variable has an integer type.\n///\n/// Therefore, it is immediate undefined behavior to call this function on nearly all types,\n/// including integer types and arrays of integer types, and even if the result is unused.\n///\n/// [uninit]: MaybeUninit::uninit\n/// [assume_init]: MaybeUninit::assume_init\n/// [inv]: MaybeUninit#initialization-invariant\n</span><span class=\"attr\">#[inline(always)]\n#[must_use]\n#[deprecated(since = <span class=\"string\">\"1.39.0\"</span>, note = <span class=\"string\">\"use `mem::MaybeUninit` instead\"</span>)]\n#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n#[allow(deprecated_in_future)]\n#[allow(deprecated)]\n#[rustc_diagnostic_item = <span class=\"string\">\"mem_uninitialized\"</span>]\n#[track_caller]\n</span><span class=\"kw\">pub unsafe fn </span>uninitialized&lt;T&gt;() -&gt; T {\n    <span class=\"comment\">// SAFETY: the caller must guarantee that an uninitialized value is valid for `T`.\n    </span><span class=\"kw\">unsafe </span>{\n        intrinsics::assert_mem_uninitialized_valid::&lt;T&gt;();\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>val = MaybeUninit::&lt;T&gt;::uninit();\n\n        <span class=\"comment\">// Fill memory with 0x01, as an imperfect mitigation for old code that uses this function on\n        // bool, nonnull, and noundef types. But don't do this if we actively want to detect UB.\n        </span><span class=\"kw\">if </span>!<span class=\"macro\">cfg!</span>(any(miri, sanitize = <span class=\"string\">\"memory\"</span>)) {\n            val.as_mut_ptr().write_bytes(<span class=\"number\">0x01</span>, <span class=\"number\">1</span>);\n        }\n\n        val.assume_init()\n    }\n}\n\n<span class=\"doccomment\">/// Swaps the values at two mutable locations, without deinitializing either one.\n///\n/// * If you want to swap with a default or dummy value, see [`take`].\n/// * If you want to swap with a passed value, returning the old value, see [`replace`].\n///\n/// # Examples\n///\n/// ```\n/// use std::mem;\n///\n/// let mut x = 5;\n/// let mut y = 42;\n///\n/// mem::swap(&amp;mut x, &amp;mut y);\n///\n/// assert_eq!(42, x);\n/// assert_eq!(5, y);\n/// ```\n</span><span class=\"attr\">#[inline]\n#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n#[rustc_const_unstable(feature = <span class=\"string\">\"const_swap\"</span>, issue = <span class=\"string\">\"83163\"</span>)]\n#[rustc_diagnostic_item = <span class=\"string\">\"mem_swap\"</span>]\n</span><span class=\"kw\">pub const fn </span>swap&lt;T&gt;(x: <span class=\"kw-2\">&amp;mut </span>T, y: <span class=\"kw-2\">&amp;mut </span>T) {\n    <span class=\"comment\">// SAFETY: `&amp;mut` guarantees these are typed readable and writable\n    // as well as non-overlapping.\n    </span><span class=\"kw\">unsafe </span>{ intrinsics::typed_swap(x, y) }\n}\n\n<span class=\"doccomment\">/// Replaces `dest` with the default value of `T`, returning the previous `dest` value.\n///\n/// * If you want to replace the values of two variables, see [`swap`].\n/// * If you want to replace with a passed value instead of the default value, see [`replace`].\n///\n/// # Examples\n///\n/// A simple example:\n///\n/// ```\n/// use std::mem;\n///\n/// let mut v: Vec&lt;i32&gt; = vec![1, 2];\n///\n/// let old_v = mem::take(&amp;mut v);\n/// assert_eq!(vec![1, 2], old_v);\n/// assert!(v.is_empty());\n/// ```\n///\n/// `take` allows taking ownership of a struct field by replacing it with an \"empty\" value.\n/// Without `take` you can run into issues like these:\n///\n/// ```compile_fail,E0507\n/// struct Buffer&lt;T&gt; { buf: Vec&lt;T&gt; }\n///\n/// impl&lt;T&gt; Buffer&lt;T&gt; {\n///     fn get_and_reset(&amp;mut self) -&gt; Vec&lt;T&gt; {\n///         // error: cannot move out of dereference of `&amp;mut`-pointer\n///         let buf = self.buf;\n///         self.buf = Vec::new();\n///         buf\n///     }\n/// }\n/// ```\n///\n/// Note that `T` does not necessarily implement [`Clone`], so it can't even clone and reset\n/// `self.buf`. But `take` can be used to disassociate the original value of `self.buf` from\n/// `self`, allowing it to be returned:\n///\n/// ```\n/// use std::mem;\n///\n/// # struct Buffer&lt;T&gt; { buf: Vec&lt;T&gt; }\n/// impl&lt;T&gt; Buffer&lt;T&gt; {\n///     fn get_and_reset(&amp;mut self) -&gt; Vec&lt;T&gt; {\n///         mem::take(&amp;mut self.buf)\n///     }\n/// }\n///\n/// let mut buffer = Buffer { buf: vec![0, 1] };\n/// assert_eq!(buffer.buf.len(), 2);\n///\n/// assert_eq!(buffer.get_and_reset(), vec![0, 1]);\n/// assert_eq!(buffer.buf.len(), 0);\n/// ```\n</span><span class=\"attr\">#[inline]\n#[stable(feature = <span class=\"string\">\"mem_take\"</span>, since = <span class=\"string\">\"1.40.0\"</span>)]\n</span><span class=\"kw\">pub fn </span>take&lt;T: Default&gt;(dest: <span class=\"kw-2\">&amp;mut </span>T) -&gt; T {\n    replace(dest, T::default())\n}\n\n<span class=\"doccomment\">/// Moves `src` into the referenced `dest`, returning the previous `dest` value.\n///\n/// Neither value is dropped.\n///\n/// * If you want to replace the values of two variables, see [`swap`].\n/// * If you want to replace with a default value, see [`take`].\n///\n/// # Examples\n///\n/// A simple example:\n///\n/// ```\n/// use std::mem;\n///\n/// let mut v: Vec&lt;i32&gt; = vec![1, 2];\n///\n/// let old_v = mem::replace(&amp;mut v, vec![3, 4, 5]);\n/// assert_eq!(vec![1, 2], old_v);\n/// assert_eq!(vec![3, 4, 5], v);\n/// ```\n///\n/// `replace` allows consumption of a struct field by replacing it with another value.\n/// Without `replace` you can run into issues like these:\n///\n/// ```compile_fail,E0507\n/// struct Buffer&lt;T&gt; { buf: Vec&lt;T&gt; }\n///\n/// impl&lt;T&gt; Buffer&lt;T&gt; {\n///     fn replace_index(&amp;mut self, i: usize, v: T) -&gt; T {\n///         // error: cannot move out of dereference of `&amp;mut`-pointer\n///         let t = self.buf[i];\n///         self.buf[i] = v;\n///         t\n///     }\n/// }\n/// ```\n///\n/// Note that `T` does not necessarily implement [`Clone`], so we can't even clone `self.buf[i]` to\n/// avoid the move. But `replace` can be used to disassociate the original value at that index from\n/// `self`, allowing it to be returned:\n///\n/// ```\n/// # #![allow(dead_code)]\n/// use std::mem;\n///\n/// # struct Buffer&lt;T&gt; { buf: Vec&lt;T&gt; }\n/// impl&lt;T&gt; Buffer&lt;T&gt; {\n///     fn replace_index(&amp;mut self, i: usize, v: T) -&gt; T {\n///         mem::replace(&amp;mut self.buf[i], v)\n///     }\n/// }\n///\n/// let mut buffer = Buffer { buf: vec![0, 1] };\n/// assert_eq!(buffer.buf[0], 0);\n///\n/// assert_eq!(buffer.replace_index(0, 2), 0);\n/// assert_eq!(buffer.buf[0], 2);\n/// ```\n</span><span class=\"attr\">#[inline]\n#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n#[must_use = <span class=\"string\">\"if you don't need the old value, you can just assign the new value directly\"</span>]\n#[rustc_const_unstable(feature = <span class=\"string\">\"const_replace\"</span>, issue = <span class=\"string\">\"83164\"</span>)]\n#[cfg_attr(not(test), rustc_diagnostic_item = <span class=\"string\">\"mem_replace\"</span>)]\n</span><span class=\"kw\">pub const fn </span>replace&lt;T&gt;(dest: <span class=\"kw-2\">&amp;mut </span>T, src: T) -&gt; T {\n    <span class=\"comment\">// It may be tempting to use `swap` to avoid `unsafe` here. Don't!\n    // The compiler optimizes the implementation below to two `memcpy`s\n    // while `swap` would require at least three. See PR#83022 for details.\n\n    // SAFETY: We read from `dest` but directly write `src` into it afterwards,\n    // such that the old value is not duplicated. Nothing is dropped and\n    // nothing here can panic.\n    </span><span class=\"kw\">unsafe </span>{\n        <span class=\"kw\">let </span>result = ptr::read(dest);\n        ptr::write(dest, src);\n        result\n    }\n}\n\n<span class=\"doccomment\">/// Disposes of a value.\n///\n/// This does so by calling the argument's implementation of [`Drop`][drop].\n///\n/// This effectively does nothing for types which implement `Copy`, e.g.\n/// integers. Such values are copied and _then_ moved into the function, so the\n/// value persists after this function call.\n///\n/// This function is not magic; it is literally defined as\n///\n/// ```\n/// pub fn drop&lt;T&gt;(_x: T) {}\n/// ```\n///\n/// Because `_x` is moved into the function, it is automatically dropped before\n/// the function returns.\n///\n/// [drop]: Drop\n///\n/// # Examples\n///\n/// Basic usage:\n///\n/// ```\n/// let v = vec![1, 2, 3];\n///\n/// drop(v); // explicitly drop the vector\n/// ```\n///\n/// Since [`RefCell`] enforces the borrow rules at runtime, `drop` can\n/// release a [`RefCell`] borrow:\n///\n/// ```\n/// use std::cell::RefCell;\n///\n/// let x = RefCell::new(1);\n///\n/// let mut mutable_borrow = x.borrow_mut();\n/// *mutable_borrow = 1;\n///\n/// drop(mutable_borrow); // relinquish the mutable borrow on this slot\n///\n/// let borrow = x.borrow();\n/// println!(\"{}\", *borrow);\n/// ```\n///\n/// Integers and other types implementing [`Copy`] are unaffected by `drop`.\n///\n/// ```\n/// # #![allow(dropping_copy_types)]\n/// #[derive(Copy, Clone)]\n/// struct Foo(u8);\n///\n/// let x = 1;\n/// let y = Foo(2);\n/// drop(x); // a copy of `x` is moved and dropped\n/// drop(y); // a copy of `y` is moved and dropped\n///\n/// println!(\"x: {}, y: {}\", x, y.0); // still available\n/// ```\n///\n/// [`RefCell`]: crate::cell::RefCell\n</span><span class=\"attr\">#[inline]\n#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n#[cfg_attr(not(test), rustc_diagnostic_item = <span class=\"string\">\"mem_drop\"</span>)]\n</span><span class=\"kw\">pub fn </span>drop&lt;T&gt;(_x: T) {}\n\n<span class=\"doccomment\">/// Bitwise-copies a value.\n///\n/// This function is not magic; it is literally defined as\n/// ```\n/// pub fn copy&lt;T: Copy&gt;(x: &amp;T) -&gt; T { *x }\n/// ```\n///\n/// It is useful when you want to pass a function pointer to a combinator, rather than defining a new closure.\n///\n/// Example:\n/// ```\n/// #![feature(mem_copy_fn)]\n/// use core::mem::copy;\n/// let result_from_ffi_function: Result&lt;(), &amp;i32&gt; = Err(&amp;1);\n/// let result_copied: Result&lt;(), i32&gt; = result_from_ffi_function.map_err(copy);\n/// ```\n</span><span class=\"attr\">#[inline]\n#[unstable(feature = <span class=\"string\">\"mem_copy_fn\"</span>, issue = <span class=\"string\">\"98262\"</span>)]\n</span><span class=\"kw\">pub const fn </span>copy&lt;T: Copy&gt;(x: <span class=\"kw-2\">&amp;</span>T) -&gt; T {\n    <span class=\"kw-2\">*</span>x\n}\n\n<span class=\"doccomment\">/// Interprets `src` as having type `&amp;Dst`, and then reads `src` without moving\n/// the contained value.\n///\n/// This function will unsafely assume the pointer `src` is valid for [`size_of::&lt;Dst&gt;`][size_of]\n/// bytes by transmuting `&amp;Src` to `&amp;Dst` and then reading the `&amp;Dst` (except that this is done\n/// in a way that is correct even when `&amp;Dst` has stricter alignment requirements than `&amp;Src`).\n/// It will also unsafely create a copy of the contained value instead of moving out of `src`.\n///\n/// It is not a compile-time error if `Src` and `Dst` have different sizes, but it\n/// is highly encouraged to only invoke this function where `Src` and `Dst` have the\n/// same size. This function triggers [undefined behavior][ub] if `Dst` is larger than\n/// `Src`.\n///\n/// [ub]: ../../reference/behavior-considered-undefined.html\n///\n/// # Examples\n///\n/// ```\n/// use std::mem;\n///\n/// #[repr(packed)]\n/// struct Foo {\n///     bar: u8,\n/// }\n///\n/// let foo_array = [10u8];\n///\n/// unsafe {\n///     // Copy the data from 'foo_array' and treat it as a 'Foo'\n///     let mut foo_struct: Foo = mem::transmute_copy(&amp;foo_array);\n///     assert_eq!(foo_struct.bar, 10);\n///\n///     // Modify the copied data\n///     foo_struct.bar = 20;\n///     assert_eq!(foo_struct.bar, 20);\n/// }\n///\n/// // The contents of 'foo_array' should not have changed\n/// assert_eq!(foo_array, [10]);\n/// ```\n</span><span class=\"attr\">#[inline]\n#[must_use]\n#[track_caller]\n#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n#[rustc_const_stable(feature = <span class=\"string\">\"const_transmute_copy\"</span>, since = <span class=\"string\">\"1.74.0\"</span>)]\n</span><span class=\"kw\">pub const unsafe fn </span>transmute_copy&lt;Src, Dst&gt;(src: <span class=\"kw-2\">&amp;</span>Src) -&gt; Dst {\n    <span class=\"macro\">assert!</span>(\n        size_of::&lt;Src&gt;() &gt;= size_of::&lt;Dst&gt;(),\n        <span class=\"string\">\"cannot transmute_copy if Dst is larger than Src\"\n    </span>);\n\n    <span class=\"comment\">// If Dst has a higher alignment requirement, src might not be suitably aligned.\n    </span><span class=\"kw\">if </span>align_of::&lt;Dst&gt;() &gt; align_of::&lt;Src&gt;() {\n        <span class=\"comment\">// SAFETY: `src` is a reference which is guaranteed to be valid for reads.\n        // The caller must guarantee that the actual transmutation is safe.\n        </span><span class=\"kw\">unsafe </span>{ ptr::read_unaligned(src <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>Src <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>Dst) }\n    } <span class=\"kw\">else </span>{\n        <span class=\"comment\">// SAFETY: `src` is a reference which is guaranteed to be valid for reads.\n        // We just checked that `src as *const Dst` was properly aligned.\n        // The caller must guarantee that the actual transmutation is safe.\n        </span><span class=\"kw\">unsafe </span>{ ptr::read(src <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>Src <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>Dst) }\n    }\n}\n\n<span class=\"doccomment\">/// Opaque type representing the discriminant of an enum.\n///\n/// See the [`discriminant`] function in this module for more information.\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"discriminant_value\"</span>, since = <span class=\"string\">\"1.21.0\"</span>)]\n</span><span class=\"kw\">pub struct </span>Discriminant&lt;T&gt;(&lt;T <span class=\"kw\">as </span>DiscriminantKind&gt;::Discriminant);\n\n<span class=\"comment\">// N.B. These trait implementations cannot be derived because we don't want any bounds on T.\n\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"discriminant_value\"</span>, since = <span class=\"string\">\"1.21.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T&gt; Copy <span class=\"kw\">for </span>Discriminant&lt;T&gt; {}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"discriminant_value\"</span>, since = <span class=\"string\">\"1.21.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T&gt; clone::Clone <span class=\"kw\">for </span>Discriminant&lt;T&gt; {\n    <span class=\"kw\">fn </span>clone(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"self\">Self </span>{\n        <span class=\"kw-2\">*</span><span class=\"self\">self\n    </span>}\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"discriminant_value\"</span>, since = <span class=\"string\">\"1.21.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T&gt; cmp::PartialEq <span class=\"kw\">for </span>Discriminant&lt;T&gt; {\n    <span class=\"kw\">fn </span>eq(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, rhs: <span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>) -&gt; bool {\n        <span class=\"self\">self</span>.<span class=\"number\">0 </span>== rhs.<span class=\"number\">0\n    </span>}\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"discriminant_value\"</span>, since = <span class=\"string\">\"1.21.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T&gt; cmp::Eq <span class=\"kw\">for </span>Discriminant&lt;T&gt; {}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"discriminant_value\"</span>, since = <span class=\"string\">\"1.21.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T&gt; hash::Hash <span class=\"kw\">for </span>Discriminant&lt;T&gt; {\n    <span class=\"kw\">fn </span>hash&lt;H: hash::Hasher&gt;(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, state: <span class=\"kw-2\">&amp;mut </span>H) {\n        <span class=\"self\">self</span>.<span class=\"number\">0</span>.hash(state);\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"discriminant_value\"</span>, since = <span class=\"string\">\"1.21.0\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T&gt; fmt::Debug <span class=\"kw\">for </span>Discriminant&lt;T&gt; {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, fmt: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n        fmt.debug_tuple(<span class=\"string\">\"Discriminant\"</span>).field(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.<span class=\"number\">0</span>).finish()\n    }\n}\n\n<span class=\"doccomment\">/// Returns a value uniquely identifying the enum variant in `v`.\n///\n/// If `T` is not an enum, calling this function will not result in undefined behavior, but the\n/// return value is unspecified.\n///\n/// # Stability\n///\n/// The discriminant of an enum variant may change if the enum definition changes. A discriminant\n/// of some variant will not change between compilations with the same compiler. See the [Reference]\n/// for more information.\n///\n/// [Reference]: ../../reference/items/enumerations.html#custom-discriminant-values-for-fieldless-enumerations\n///\n/// The value of a [`Discriminant&lt;T&gt;`] is independent of any *free lifetimes* in `T`. As such,\n/// reading or writing a `Discriminant&lt;Foo&lt;'a&gt;&gt;` as a `Discriminant&lt;Foo&lt;'b&gt;&gt;` (whether via\n/// [`transmute`] or otherwise) is always sound. Note that this is **not** true for other kinds\n/// of generic parameters and for higher-ranked lifetimes; `Discriminant&lt;Foo&lt;A&gt;&gt;` and\n/// `Discriminant&lt;Foo&lt;B&gt;&gt;` as well as `Discriminant&lt;Bar&lt;dyn for&lt;'a&gt; Trait&lt;'a&gt;&gt;&gt;` and\n/// `Discriminant&lt;Bar&lt;dyn Trait&lt;'static&gt;&gt;&gt;` may be incompatible.\n///\n/// # Examples\n///\n/// This can be used to compare enums that carry data, while disregarding\n/// the actual data:\n///\n/// ```\n/// use std::mem;\n///\n/// enum Foo { A(&amp;'static str), B(i32), C(i32) }\n///\n/// assert_eq!(mem::discriminant(&amp;Foo::A(\"bar\")), mem::discriminant(&amp;Foo::A(\"baz\")));\n/// assert_eq!(mem::discriminant(&amp;Foo::B(1)), mem::discriminant(&amp;Foo::B(2)));\n/// assert_ne!(mem::discriminant(&amp;Foo::B(3)), mem::discriminant(&amp;Foo::C(3)));\n/// ```\n///\n/// ## Accessing the numeric value of the discriminant\n///\n/// Note that it is *undefined behavior* to [`transmute`] from [`Discriminant`] to a primitive!\n///\n/// If an enum has only unit variants, then the numeric value of the discriminant can be accessed\n/// with an [`as`] cast:\n///\n/// ```\n/// enum Enum {\n///     Foo,\n///     Bar,\n///     Baz,\n/// }\n///\n/// assert_eq!(0, Enum::Foo as isize);\n/// assert_eq!(1, Enum::Bar as isize);\n/// assert_eq!(2, Enum::Baz as isize);\n/// ```\n///\n/// If an enum has opted-in to having a [primitive representation] for its discriminant,\n/// then it's possible to use pointers to read the memory location storing the discriminant.\n/// That **cannot** be done for enums using the [default representation], however, as it's\n/// undefined what layout the discriminant has and where it's stored — it might not even be\n/// stored at all!\n///\n/// [`as`]: ../../std/keyword.as.html\n/// [primitive representation]: ../../reference/type-layout.html#primitive-representations\n/// [default representation]: ../../reference/type-layout.html#the-default-representation\n/// ```\n/// #[repr(u8)]\n/// enum Enum {\n///     Unit,\n///     Tuple(bool),\n///     Struct { a: bool },\n/// }\n///\n/// impl Enum {\n///     fn discriminant(&amp;self) -&gt; u8 {\n///         // SAFETY: Because `Self` is marked `repr(u8)`, its layout is a `repr(C)` `union`\n///         // between `repr(C)` structs, each of which has the `u8` discriminant as its first\n///         // field, so we can read the discriminant without offsetting the pointer.\n///         unsafe { *&lt;*const _&gt;::from(self).cast::&lt;u8&gt;() }\n///     }\n/// }\n///\n/// let unit_like = Enum::Unit;\n/// let tuple_like = Enum::Tuple(true);\n/// let struct_like = Enum::Struct { a: false };\n/// assert_eq!(0, unit_like.discriminant());\n/// assert_eq!(1, tuple_like.discriminant());\n/// assert_eq!(2, struct_like.discriminant());\n///\n/// // ⚠️ This is undefined behavior. Don't do this. ⚠️\n/// // assert_eq!(0, unsafe { std::mem::transmute::&lt;_, u8&gt;(std::mem::discriminant(&amp;unit_like)) });\n/// ```\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"discriminant_value\"</span>, since = <span class=\"string\">\"1.21.0\"</span>)]\n#[rustc_const_stable(feature = <span class=\"string\">\"const_discriminant\"</span>, since = <span class=\"string\">\"1.75.0\"</span>)]\n#[cfg_attr(not(test), rustc_diagnostic_item = <span class=\"string\">\"mem_discriminant\"</span>)]\n#[cfg_attr(miri, track_caller)] </span><span class=\"comment\">// even without panics, this helps for Miri backtraces\n</span><span class=\"kw\">pub const fn </span>discriminant&lt;T&gt;(v: <span class=\"kw-2\">&amp;</span>T) -&gt; Discriminant&lt;T&gt; {\n    Discriminant(intrinsics::discriminant_value(v))\n}\n\n<span class=\"doccomment\">/// Returns the number of variants in the enum type `T`.\n///\n/// If `T` is not an enum, calling this function will not result in undefined behavior, but the\n/// return value is unspecified. Equally, if `T` is an enum with more variants than `usize::MAX`\n/// the return value is unspecified. Uninhabited variants will be counted.\n///\n/// Note that an enum may be expanded with additional variants in the future\n/// as a non-breaking change, for example if it is marked `#[non_exhaustive]`,\n/// which will change the result of this function.\n///\n/// # Examples\n///\n/// ```\n/// # #![feature(never_type)]\n/// # #![feature(variant_count)]\n///\n/// use std::mem;\n///\n/// enum Void {}\n/// enum Foo { A(&amp;'static str), B(i32), C(i32) }\n///\n/// assert_eq!(mem::variant_count::&lt;Void&gt;(), 0);\n/// assert_eq!(mem::variant_count::&lt;Foo&gt;(), 3);\n///\n/// assert_eq!(mem::variant_count::&lt;Option&lt;!&gt;&gt;(), 2);\n/// assert_eq!(mem::variant_count::&lt;Result&lt;!, !&gt;&gt;(), 2);\n/// ```\n</span><span class=\"attr\">#[inline(always)]\n#[must_use]\n#[unstable(feature = <span class=\"string\">\"variant_count\"</span>, issue = <span class=\"string\">\"73662\"</span>)]\n#[rustc_const_unstable(feature = <span class=\"string\">\"variant_count\"</span>, issue = <span class=\"string\">\"73662\"</span>)]\n#[rustc_diagnostic_item = <span class=\"string\">\"mem_variant_count\"</span>]\n</span><span class=\"kw\">pub const fn </span>variant_count&lt;T&gt;() -&gt; usize {\n    intrinsics::variant_count::&lt;T&gt;()\n}\n\n<span class=\"doccomment\">/// Provides associated constants for various useful properties of types,\n/// to give them a canonical form in our code and make them easier to read.\n///\n/// This is here only to simplify all the ZST checks we need in the library.\n/// It's not on a stabilization track right now.\n</span><span class=\"attr\">#[doc(hidden)]\n#[unstable(feature = <span class=\"string\">\"sized_type_properties\"</span>, issue = <span class=\"string\">\"none\"</span>)]\n</span><span class=\"kw\">pub trait </span>SizedTypeProperties: Sized {\n    <span class=\"doccomment\">/// `true` if this type requires no storage.\n    /// `false` if its [size](size_of) is greater than zero.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// #![feature(sized_type_properties)]\n    /// use core::mem::SizedTypeProperties;\n    ///\n    /// fn do_something_with&lt;T&gt;() {\n    ///     if T::IS_ZST {\n    ///         // ... special approach ...\n    ///     } else {\n    ///         // ... the normal thing ...\n    ///     }\n    /// }\n    ///\n    /// struct MyUnit;\n    /// assert!(MyUnit::IS_ZST);\n    ///\n    /// // For negative checks, consider using UFCS to emphasize the negation\n    /// assert!(!&lt;i32&gt;::IS_ZST);\n    /// // As it can sometimes hide in the type otherwise\n    /// assert!(!String::IS_ZST);\n    /// ```\n    </span><span class=\"attr\">#[doc(hidden)]\n    #[unstable(feature = <span class=\"string\">\"sized_type_properties\"</span>, issue = <span class=\"string\">\"none\"</span>)]\n    </span><span class=\"kw\">const </span>IS_ZST: bool = size_of::&lt;<span class=\"self\">Self</span>&gt;() == <span class=\"number\">0</span>;\n}\n<span class=\"attr\">#[doc(hidden)]\n#[unstable(feature = <span class=\"string\">\"sized_type_properties\"</span>, issue = <span class=\"string\">\"none\"</span>)]\n</span><span class=\"kw\">impl</span>&lt;T&gt; SizedTypeProperties <span class=\"kw\">for </span>T {}\n\n<span class=\"doccomment\">/// Expands to the offset in bytes of a field from the beginning of the given type.\n///\n/// Structs, enums, unions and tuples are supported.\n///\n/// Nested field accesses may be used, but not array indexes.\n///\n/// Enum variants may be traversed as if they were fields. Variants themselves do\n/// not have an offset.\n///\n/// However, on stable only a single field name is supported, which blocks the use of\n/// enum support.\n///\n/// Visibility is respected - all types and fields must be visible to the call site:\n///\n/// ```\n/// mod nested {\n///     #[repr(C)]\n///     pub struct Struct {\n///         private: u8,\n///     }\n/// }\n///\n/// // assert_eq!(mem::offset_of!(nested::Struct, private), 0);\n/// // ^^^ error[E0616]: field `private` of struct `Struct` is private\n/// ```\n///\n/// Note that type layout is, in general, [subject to change and\n/// platform-specific](https://doc.rust-lang.org/reference/type-layout.html). If\n/// layout stability is required, consider using an [explicit `repr` attribute].\n///\n/// Rust guarantees that the offset of a given field within a given type will not\n/// change over the lifetime of the program. However, two different compilations of\n/// the same program may result in different layouts. Also, even within a single\n/// program execution, no guarantees are made about types which are *similar* but\n/// not *identical*, e.g.:\n///\n/// ```\n/// struct Wrapper&lt;T, U&gt;(T, U);\n///\n/// type A = Wrapper&lt;u8, u8&gt;;\n/// type B = Wrapper&lt;u8, i8&gt;;\n///\n/// // Not necessarily identical even though `u8` and `i8` have the same layout!\n/// // assert_eq!(mem::offset_of!(A, 1), mem::offset_of!(B, 1));\n///\n/// #[repr(transparent)]\n/// struct U8(u8);\n///\n/// type C = Wrapper&lt;u8, U8&gt;;\n///\n/// // Not necessarily identical even though `u8` and `U8` have the same layout!\n/// // assert_eq!(mem::offset_of!(A, 1), mem::offset_of!(C, 1));\n///\n/// struct Empty&lt;T&gt;(core::marker::PhantomData&lt;T&gt;);\n///\n/// // Not necessarily identical even though `PhantomData` always has the same layout!\n/// // assert_eq!(mem::offset_of!(Empty&lt;u8&gt;, 0), mem::offset_of!(Empty&lt;i8&gt;, 0));\n/// ```\n///\n/// [explicit `repr` attribute]: https://doc.rust-lang.org/reference/type-layout.html#representations\n///\n/// # Examples\n///\n/// ```\n/// #![feature(offset_of_enum, offset_of_nested)]\n///\n/// use std::mem;\n/// #[repr(C)]\n/// struct FieldStruct {\n///     first: u8,\n///     second: u16,\n///     third: u8\n/// }\n///\n/// assert_eq!(mem::offset_of!(FieldStruct, first), 0);\n/// assert_eq!(mem::offset_of!(FieldStruct, second), 2);\n/// assert_eq!(mem::offset_of!(FieldStruct, third), 4);\n///\n/// #[repr(C)]\n/// struct NestedA {\n///     b: NestedB\n/// }\n///\n/// #[repr(C)]\n/// struct NestedB(u8);\n///\n/// assert_eq!(mem::offset_of!(NestedA, b.0), 0);\n///\n/// #[repr(u8)]\n/// enum Enum {\n///     A(u8, u16),\n///     B { one: u8, two: u16 },\n/// }\n///\n/// assert_eq!(mem::offset_of!(Enum, A.0), 1);\n/// assert_eq!(mem::offset_of!(Enum, B.two), 2);\n///\n/// assert_eq!(mem::offset_of!(Option&lt;&amp;u8&gt;, Some.0), 0);\n/// ```\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"offset_of\"</span>, since = <span class=\"string\">\"1.77.0\"</span>)]\n#[allow_internal_unstable(builtin_syntax)]\n</span><span class=\"kw\">pub macro </span>offset_of(<span class=\"macro-nonterminal\">$Container</span>:ty, $(<span class=\"macro-nonterminal\">$fields</span>:expr)+ $(,)<span class=\"question-mark\">?</span>) {\n    <span class=\"comment\">// The `{}` is for better error messages\n    </span>{builtin # offset_of(<span class=\"macro-nonterminal\">$Container</span>, $(<span class=\"macro-nonterminal\">$fields</span>)+)}\n}\n</code></pre></div></section></main></body></html>",
	"crawlDate": "2024-07-28T05:29:25.831Z"
}