{
	"title": "sort.rs - source",
	"url": "https://doc.rust-lang.org/stable/src/core/slice/sort.rs.html",
	"markdown": "# sort.rs - source\n\n```\n//! Slice sorting\n//!\n//! This module contains a sorting algorithm based on Orson Peters' pattern-defeating quicksort,\n//! published at: <https://github.com/orlp/pdqsort>\n//!\n//! Unstable sorting is compatible with core because it doesn't allocate memory, unlike our\n//! stable sorting implementation.\n//!\n//! In addition it also contains the core logic of the stable sort used by `slice::sort` based on\n//! TimSort.\n\nuse crate::cmp;\nuse crate::mem::{self, MaybeUninit, SizedTypeProperties};\nuse crate::ptr;\n\n// When dropped, copies from `src` into `dest`.\nstruct InsertionHole<T> {\n    src: *const T,\n    dest: *mut T,\n}\n\nimpl<T> Drop for InsertionHole<T> {\n    fn drop(&mut self) {\n        // SAFETY: This is a helper class. Please refer to its usage for correctness. Namely, one\n        // must be sure that `src` and `dst` does not overlap as required by\n        // `ptr::copy_nonoverlapping` and are both valid for writes.\n        unsafe {\n            ptr::copy_nonoverlapping(self.src, self.dest, 1);\n        }\n    }\n}\n\n/// Inserts `v[v.len() - 1]` into pre-sorted sequence `v[..v.len() - 1]` so that whole `v[..]`\n/// becomes sorted.\nunsafe fn insert_tail<T, F>(v: &mut [T], is_less: &mut F)\nwhere\n    F: FnMut(&T, &T) -> bool,\n{\n    debug_assert!(v.len() >= 2);\n\n    let arr_ptr = v.as_mut_ptr();\n    let i = v.len() - 1;\n\n    // SAFETY: caller must ensure v is at least len 2.\n    unsafe {\n        // See insert_head which talks about why this approach is beneficial.\n        let i_ptr = arr_ptr.add(i);\n\n        // It's important that we use i_ptr here. If this check is positive and we continue,\n        // We want to make sure that no other copy of the value was seen by is_less.\n        // Otherwise we would have to copy it back.\n        if is_less(&*i_ptr, &*i_ptr.sub(1)) {\n            // It's important, that we use tmp for comparison from now on. As it is the value that\n            // will be copied back. And notionally we could have created a divergence if we copy\n            // back the wrong value.\n            let tmp = mem::ManuallyDrop::new(ptr::read(i_ptr));\n            // Intermediate state of the insertion process is always tracked by `hole`, which\n            // serves two purposes:\n            // 1. Protects integrity of `v` from panics in `is_less`.\n            // 2. Fills the remaining hole in `v` in the end.\n            //\n            // Panic safety:\n            //\n            // If `is_less` panics at any point during the process, `hole` will get dropped and\n            // fill the hole in `v` with `tmp`, thus ensuring that `v` still holds every object it\n            // initially held exactly once.\n            let mut hole = InsertionHole { src: &*tmp, dest: i_ptr.sub(1) };\n            ptr::copy_nonoverlapping(hole.dest, i_ptr, 1);\n\n            // SAFETY: We know i is at least 1.\n            for j in (0..(i - 1)).rev() {\n                let j_ptr = arr_ptr.add(j);\n                if !is_less(&*tmp, &*j_ptr) {\n                    break;\n                }\n\n                ptr::copy_nonoverlapping(j_ptr, hole.dest, 1);\n                hole.dest = j_ptr;\n            }\n            // `hole` gets dropped and thus copies `tmp` into the remaining hole in `v`.\n        }\n    }\n}\n\n/// Inserts `v[0]` into pre-sorted sequence `v[1..]` so that whole `v[..]` becomes sorted.\n///\n/// This is the integral subroutine of insertion sort.\nunsafe fn insert_head<T, F>(v: &mut [T], is_less: &mut F)\nwhere\n    F: FnMut(&T, &T) -> bool,\n{\n    debug_assert!(v.len() >= 2);\n\n    // SAFETY: caller must ensure v is at least len 2.\n    unsafe {\n        if is_less(v.get_unchecked(1), v.get_unchecked(0)) {\n            let arr_ptr = v.as_mut_ptr();\n\n            // There are three ways to implement insertion here:\n            //\n            // 1. Swap adjacent elements until the first one gets to its final destination.\n            //    However, this way we copy data around more than is necessary. If elements are big\n            //    structures (costly to copy), this method will be slow.\n            //\n            // 2. Iterate until the right place for the first element is found. Then shift the\n            //    elements succeeding it to make room for it and finally place it into the\n            //    remaining hole. This is a good method.\n            //\n            // 3. Copy the first element into a temporary variable. Iterate until the right place\n            //    for it is found. As we go along, copy every traversed element into the slot\n            //    preceding it. Finally, copy data from the temporary variable into the remaining\n            //    hole. This method is very good. Benchmarks demonstrated slightly better\n            //    performance than with the 2nd method.\n            //\n            // All methods were benchmarked, and the 3rd showed best results. So we chose that one.\n            let tmp = mem::ManuallyDrop::new(ptr::read(arr_ptr));\n\n            // Intermediate state of the insertion process is always tracked by `hole`, which\n            // serves two purposes:\n            // 1. Protects integrity of `v` from panics in `is_less`.\n            // 2. Fills the remaining hole in `v` in the end.\n            //\n            // Panic safety:\n            //\n            // If `is_less` panics at any point during the process, `hole` will get dropped and\n            // fill the hole in `v` with `tmp`, thus ensuring that `v` still holds every object it\n            // initially held exactly once.\n            let mut hole = InsertionHole { src: &*tmp, dest: arr_ptr.add(1) };\n            ptr::copy_nonoverlapping(arr_ptr.add(1), arr_ptr.add(0), 1);\n\n            for i in 2..v.len() {\n                if !is_less(&v.get_unchecked(i), &*tmp) {\n                    break;\n                }\n                ptr::copy_nonoverlapping(arr_ptr.add(i), arr_ptr.add(i - 1), 1);\n                hole.dest = arr_ptr.add(i);\n            }\n            // `hole` gets dropped and thus copies `tmp` into the remaining hole in `v`.\n        }\n    }\n}\n\n/// Sort `v` assuming `v[..offset]` is already sorted.\n///\n/// Never inline this function to avoid code bloat. It still optimizes nicely and has practically no\n/// performance impact. Even improving performance in some cases.\n#[inline(never)]\npub(super) fn insertion_sort_shift_left<T, F>(v: &mut [T], offset: usize, is_less: &mut F)\nwhere\n    F: FnMut(&T, &T) -> bool,\n{\n    let len = v.len();\n\n    // Using assert here improves performance.\n    assert!(offset != 0 && offset <= len);\n\n    // Shift each element of the unsorted region v[i..] as far left as is needed to make v sorted.\n    for i in offset..len {\n        // SAFETY: we tested that `offset` must be at least 1, so this loop is only entered if len\n        // >= 2. The range is exclusive and we know `i` must be at least 1 so this slice has at\n        // >least len 2.\n        unsafe {\n            insert_tail(&mut v[..=i], is_less);\n        }\n    }\n}\n\n/// Sort `v` assuming `v[offset..]` is already sorted.\n///\n/// Never inline this function to avoid code bloat. It still optimizes nicely and has practically no\n/// performance impact. Even improving performance in some cases.\n#[inline(never)]\nfn insertion_sort_shift_right<T, F>(v: &mut [T], offset: usize, is_less: &mut F)\nwhere\n    F: FnMut(&T, &T) -> bool,\n{\n    let len = v.len();\n\n    // Using assert here improves performance.\n    assert!(offset != 0 && offset <= len && len >= 2);\n\n    // Shift each element of the unsorted region v[..i] as far left as is needed to make v sorted.\n    for i in (0..offset).rev() {\n        // SAFETY: we tested that `offset` must be at least 1, so this loop is only entered if len\n        // >= 2.We ensured that the slice length is always at least 2 long. We know that start_found\n        // will be at least one less than end, and the range is exclusive. Which gives us i always\n        // <= (end - 2).\n        unsafe {\n            insert_head(&mut v[i..len], is_less);\n        }\n    }\n}\n\n/// Partially sorts a slice by shifting several out-of-order elements around.\n///\n/// Returns `true` if the slice is sorted at the end. This function is *O*(*n*) worst-case.\n#[cold]\nfn partial_insertion_sort<T, F>(v: &mut [T], is_less: &mut F) -> bool\nwhere\n    F: FnMut(&T, &T) -> bool,\n{\n    // Maximum number of adjacent out-of-order pairs that will get shifted.\n    const MAX_STEPS: usize = 5;\n    // If the slice is shorter than this, don't shift any elements.\n    const SHORTEST_SHIFTING: usize = 50;\n\n    let len = v.len();\n    let mut i = 1;\n\n    for _ in 0..MAX_STEPS {\n        // SAFETY: We already explicitly did the bound checking with `i < len`.\n        // All our subsequent indexing is only in the range `0 <= index < len`\n        unsafe {\n            // Find the next pair of adjacent out-of-order elements.\n            while i < len && !is_less(v.get_unchecked(i), v.get_unchecked(i - 1)) {\n                i += 1;\n            }\n        }\n\n        // Are we done?\n        if i == len {\n            return true;\n        }\n\n        // Don't shift elements on short arrays, that has a performance cost.\n        if len < SHORTEST_SHIFTING {\n            return false;\n        }\n\n        // Swap the found pair of elements. This puts them in correct order.\n        v.swap(i - 1, i);\n\n        if i >= 2 {\n            // Shift the smaller element to the left.\n            insertion_sort_shift_left(&mut v[..i], i - 1, is_less);\n\n            // Shift the greater element to the right.\n            insertion_sort_shift_right(&mut v[..i], 1, is_less);\n        }\n    }\n\n    // Didn't manage to sort the slice in the limited number of steps.\n    false\n}\n\n/// Sorts `v` using heapsort, which guarantees *O*(*n* \\* log(*n*)) worst-case.\n#[cold]\n#[unstable(feature = \"sort_internals\", reason = \"internal to sort module\", issue = \"none\")]\npub fn heapsort<T, F>(v: &mut [T], mut is_less: F)\nwhere\n    F: FnMut(&T, &T) -> bool,\n{\n    // This binary heap respects the invariant `parent >= child`.\n    let mut sift_down = |v: &mut [T], mut node| {\n        loop {\n            // Children of `node`.\n            let mut child = 2 * node + 1;\n            if child >= v.len() {\n                break;\n            }\n\n            // Choose the greater child.\n            if child + 1 < v.len() {\n                // We need a branch to be sure not to out-of-bounds index,\n                // but it's highly predictable.  The comparison, however,\n                // is better done branchless, especially for primitives.\n                child += is_less(&v[child], &v[child + 1]) as usize;\n            }\n\n            // Stop if the invariant holds at `node`.\n            if !is_less(&v[node], &v[child]) {\n                break;\n            }\n\n            // Swap `node` with the greater child, move one step down, and continue sifting.\n            v.swap(node, child);\n            node = child;\n        }\n    };\n\n    // Build the heap in linear time.\n    for i in (0..v.len() / 2).rev() {\n        sift_down(v, i);\n    }\n\n    // Pop maximal elements from the heap.\n    for i in (1..v.len()).rev() {\n        v.swap(0, i);\n        sift_down(&mut v[..i], 0);\n    }\n}\n\n/// Partitions `v` into elements smaller than `pivot`, followed by elements greater than or equal\n/// to `pivot`.\n///\n/// Returns the number of elements smaller than `pivot`.\n///\n/// Partitioning is performed block-by-block in order to minimize the cost of branching operations.\n/// This idea is presented in the [BlockQuicksort][pdf] paper.\n///\n/// [pdf]: https://drops.dagstuhl.de/opus/volltexte/2016/6389/pdf/LIPIcs-ESA-2016-38.pdf\nfn partition_in_blocks<T, F>(v: &mut [T], pivot: &T, is_less: &mut F) -> usize\nwhere\n    F: FnMut(&T, &T) -> bool,\n{\n    // Number of elements in a typical block.\n    const BLOCK: usize = 128;\n\n    // The partitioning algorithm repeats the following steps until completion:\n    //\n    // 1. Trace a block from the left side to identify elements greater than or equal to the pivot.\n    // 2. Trace a block from the right side to identify elements smaller than the pivot.\n    // 3. Exchange the identified elements between the left and right side.\n    //\n    // We keep the following variables for a block of elements:\n    //\n    // 1. `block` - Number of elements in the block.\n    // 2. `start` - Start pointer into the `offsets` array.\n    // 3. `end` - End pointer into the `offsets` array.\n    // 4. `offsets` - Indices of out-of-order elements within the block.\n\n    // The current block on the left side (from `l` to `l.add(block_l)`).\n    let mut l = v.as_mut_ptr();\n    let mut block_l = BLOCK;\n    let mut start_l = ptr::null_mut();\n    let mut end_l = ptr::null_mut();\n    let mut offsets_l = [MaybeUninit::<u8>::uninit(); BLOCK];\n\n    // The current block on the right side (from `r.sub(block_r)` to `r`).\n    // SAFETY: The documentation for .add() specifically mention that `vec.as_ptr().add(vec.len())` is always safe\n    let mut r = unsafe { l.add(v.len()) };\n    let mut block_r = BLOCK;\n    let mut start_r = ptr::null_mut();\n    let mut end_r = ptr::null_mut();\n    let mut offsets_r = [MaybeUninit::<u8>::uninit(); BLOCK];\n\n    // FIXME: When we get VLAs, try creating one array of length `min(v.len(), 2 * BLOCK)` rather\n    // than two fixed-size arrays of length `BLOCK`. VLAs might be more cache-efficient.\n\n    // Returns the number of elements between pointers `l` (inclusive) and `r` (exclusive).\n    fn width<T>(l: *mut T, r: *mut T) -> usize {\n        assert!(mem::size_of::<T>() > 0);\n        // FIXME: this should *likely* use `offset_from`, but more\n        // investigation is needed (including running tests in miri).\n        (r.addr() - l.addr()) / mem::size_of::<T>()\n    }\n\n    loop {\n        // We are done with partitioning block-by-block when `l` and `r` get very close. Then we do\n        // some patch-up work in order to partition the remaining elements in between.\n        let is_done = width(l, r) <= 2 * BLOCK;\n\n        if is_done {\n            // Number of remaining elements (still not compared to the pivot).\n            let mut rem = width(l, r);\n            if start_l < end_l || start_r < end_r {\n                rem -= BLOCK;\n            }\n\n            // Adjust block sizes so that the left and right block don't overlap, but get perfectly\n            // aligned to cover the whole remaining gap.\n            if start_l < end_l {\n                block_r = rem;\n            } else if start_r < end_r {\n                block_l = rem;\n            } else {\n                // There were the same number of elements to switch on both blocks during the last\n                // iteration, so there are no remaining elements on either block. Cover the remaining\n                // items with roughly equally-sized blocks.\n                block_l = rem / 2;\n                block_r = rem - block_l;\n            }\n            debug_assert!(block_l <= BLOCK && block_r <= BLOCK);\n            debug_assert!(width(l, r) == block_l + block_r);\n        }\n\n        if start_l == end_l {\n            // Trace `block_l` elements from the left side.\n            start_l = MaybeUninit::slice_as_mut_ptr(&mut offsets_l);\n            end_l = start_l;\n            let mut elem = l;\n\n            for i in 0..block_l {\n                // SAFETY: The unsafety operations below involve the usage of the `offset`.\n                //         According to the conditions required by the function, we satisfy them because:\n                //         1. `offsets_l` is stack-allocated, and thus considered separate allocated object.\n                //         2. The function `is_less` returns a `bool`.\n                //            Casting a `bool` will never overflow `isize`.\n                //         3. We have guaranteed that `block_l` will be `<= BLOCK`.\n                //            Plus, `end_l` was initially set to the begin pointer of `offsets_` which was declared on the stack.\n                //            Thus, we know that even in the worst case (all invocations of `is_less` returns false) we will only be at most 1 byte pass the end.\n                //        Another unsafety operation here is dereferencing `elem`.\n                //        However, `elem` was initially the begin pointer to the slice which is always valid.\n                unsafe {\n                    // Branchless comparison.\n                    *end_l = i as u8;\n                    end_l = end_l.add(!is_less(&*elem, pivot) as usize);\n                    elem = elem.add(1);\n                }\n            }\n        }\n\n        if start_r == end_r {\n            // Trace `block_r` elements from the right side.\n            start_r = MaybeUninit::slice_as_mut_ptr(&mut offsets_r);\n            end_r = start_r;\n            let mut elem = r;\n\n            for i in 0..block_r {\n                // SAFETY: The unsafety operations below involve the usage of the `offset`.\n                //         According to the conditions required by the function, we satisfy them because:\n                //         1. `offsets_r` is stack-allocated, and thus considered separate allocated object.\n                //         2. The function `is_less` returns a `bool`.\n                //            Casting a `bool` will never overflow `isize`.\n                //         3. We have guaranteed that `block_r` will be `<= BLOCK`.\n                //            Plus, `end_r` was initially set to the begin pointer of `offsets_` which was declared on the stack.\n                //            Thus, we know that even in the worst case (all invocations of `is_less` returns true) we will only be at most 1 byte pass the end.\n                //        Another unsafety operation here is dereferencing `elem`.\n                //        However, `elem` was initially `1 * sizeof(T)` past the end and we decrement it by `1 * sizeof(T)` before accessing it.\n                //        Plus, `block_r` was asserted to be less than `BLOCK` and `elem` will therefore at most be pointing to the beginning of the slice.\n                unsafe {\n                    // Branchless comparison.\n                    elem = elem.sub(1);\n                    *end_r = i as u8;\n                    end_r = end_r.add(is_less(&*elem, pivot) as usize);\n                }\n            }\n        }\n\n        // Number of out-of-order elements to swap between the left and right side.\n        let count = cmp::min(width(start_l, end_l), width(start_r, end_r));\n\n        if count > 0 {\n            macro_rules! left {\n                () => {\n                    l.add(usize::from(*start_l))\n                };\n            }\n            macro_rules! right {\n                () => {\n                    r.sub(usize::from(*start_r) + 1)\n                };\n            }\n\n            // Instead of swapping one pair at the time, it is more efficient to perform a cyclic\n            // permutation. This is not strictly equivalent to swapping, but produces a similar\n            // result using fewer memory operations.\n\n            // SAFETY: The use of `ptr::read` is valid because there is at least one element in\n            // both `offsets_l` and `offsets_r`, so `left!` is a valid pointer to read from.\n            //\n            // The uses of `left!` involve calls to `offset` on `l`, which points to the\n            // beginning of `v`. All the offsets pointed-to by `start_l` are at most `block_l`, so\n            // these `offset` calls are safe as all reads are within the block. The same argument\n            // applies for the uses of `right!`.\n            //\n            // The calls to `start_l.offset` are valid because there are at most `count-1` of them,\n            // plus the final one at the end of the unsafe block, where `count` is the minimum number\n            // of collected offsets in `offsets_l` and `offsets_r`, so there is no risk of there not\n            // being enough elements. The same reasoning applies to the calls to `start_r.offset`.\n            //\n            // The calls to `copy_nonoverlapping` are safe because `left!` and `right!` are guaranteed\n            // not to overlap, and are valid because of the reasoning above.\n            unsafe {\n                let tmp = ptr::read(left!());\n                ptr::copy_nonoverlapping(right!(), left!(), 1);\n\n                for _ in 1..count {\n                    start_l = start_l.add(1);\n                    ptr::copy_nonoverlapping(left!(), right!(), 1);\n                    start_r = start_r.add(1);\n                    ptr::copy_nonoverlapping(right!(), left!(), 1);\n                }\n\n                ptr::copy_nonoverlapping(&tmp, right!(), 1);\n                mem::forget(tmp);\n                start_l = start_l.add(1);\n                start_r = start_r.add(1);\n            }\n        }\n\n        if start_l == end_l {\n            // All out-of-order elements in the left block were moved. Move to the next block.\n\n            // block-width-guarantee\n            // SAFETY: if `!is_done` then the slice width is guaranteed to be at least `2*BLOCK` wide. There\n            // are at most `BLOCK` elements in `offsets_l` because of its size, so the `offset` operation is\n            // safe. Otherwise, the debug assertions in the `is_done` case guarantee that\n            // `width(l, r) == block_l + block_r`, namely, that the block sizes have been adjusted to account\n            // for the smaller number of remaining elements.\n            l = unsafe { l.add(block_l) };\n        }\n\n        if start_r == end_r {\n            // All out-of-order elements in the right block were moved. Move to the previous block.\n\n            // SAFETY: Same argument as [block-width-guarantee]. Either this is a full block `2*BLOCK`-wide,\n            // or `block_r` has been adjusted for the last handful of elements.\n            r = unsafe { r.sub(block_r) };\n        }\n\n        if is_done {\n            break;\n        }\n    }\n\n    // All that remains now is at most one block (either the left or the right) with out-of-order\n    // elements that need to be moved. Such remaining elements can be simply shifted to the end\n    // within their block.\n\n    if start_l < end_l {\n        // The left block remains.\n        // Move its remaining out-of-order elements to the far right.\n        debug_assert_eq!(width(l, r), block_l);\n        while start_l < end_l {\n            // remaining-elements-safety\n            // SAFETY: while the loop condition holds there are still elements in `offsets_l`, so it\n            // is safe to point `end_l` to the previous element.\n            //\n            // The `ptr::swap` is safe if both its arguments are valid for reads and writes:\n            //  - Per the debug assert above, the distance between `l` and `r` is `block_l`\n            //    elements, so there can be at most `block_l` remaining offsets between `start_l`\n            //    and `end_l`. This means `r` will be moved at most `block_l` steps back, which\n            //    makes the `r.offset` calls valid (at that point `l == r`).\n            //  - `offsets_l` contains valid offsets into `v` collected during the partitioning of\n            //    the last block, so the `l.offset` calls are valid.\n            unsafe {\n                end_l = end_l.sub(1);\n                ptr::swap(l.add(usize::from(*end_l)), r.sub(1));\n                r = r.sub(1);\n            }\n        }\n        width(v.as_mut_ptr(), r)\n    } else if start_r < end_r {\n        // The right block remains.\n        // Move its remaining out-of-order elements to the far left.\n        debug_assert_eq!(width(l, r), block_r);\n        while start_r < end_r {\n            // SAFETY: See the reasoning in [remaining-elements-safety].\n            unsafe {\n                end_r = end_r.sub(1);\n                ptr::swap(l, r.sub(usize::from(*end_r) + 1));\n                l = l.add(1);\n            }\n        }\n        width(v.as_mut_ptr(), l)\n    } else {\n        // Nothing else to do, we're done.\n        width(v.as_mut_ptr(), l)\n    }\n}\n\n/// Partitions `v` into elements smaller than `v[pivot]`, followed by elements greater than or\n/// equal to `v[pivot]`.\n///\n/// Returns a tuple of:\n///\n/// 1. Number of elements smaller than `v[pivot]`.\n/// 2. True if `v` was already partitioned.\npub(super) fn partition<T, F>(v: &mut [T], pivot: usize, is_less: &mut F) -> (usize, bool)\nwhere\n    F: FnMut(&T, &T) -> bool,\n{\n    let (mid, was_partitioned) = {\n        // Place the pivot at the beginning of slice.\n        v.swap(0, pivot);\n        let (pivot, v) = v.split_at_mut(1);\n        let pivot = &mut pivot[0];\n\n        // Read the pivot into a stack-allocated variable for efficiency. If a following comparison\n        // operation panics, the pivot will be automatically written back into the slice.\n\n        // SAFETY: `pivot` is a reference to the first element of `v`, so `ptr::read` is safe.\n        let tmp = mem::ManuallyDrop::new(unsafe { ptr::read(pivot) });\n        let _pivot_guard = InsertionHole { src: &*tmp, dest: pivot };\n        let pivot = &*tmp;\n\n        // Find the first pair of out-of-order elements.\n        let mut l = 0;\n        let mut r = v.len();\n\n        // SAFETY: The unsafety below involves indexing an array.\n        // For the first one: We already do the bounds checking here with `l < r`.\n        // For the second one: We initially have `l == 0` and `r == v.len()` and we checked that `l < r` at every indexing operation.\n        //                     From here we know that `r` must be at least `r == l` which was shown to be valid from the first one.\n        unsafe {\n            // Find the first element greater than or equal to the pivot.\n            while l < r && is_less(v.get_unchecked(l), pivot) {\n                l += 1;\n            }\n\n            // Find the last element smaller that the pivot.\n            while l < r && !is_less(v.get_unchecked(r - 1), pivot) {\n                r -= 1;\n            }\n        }\n\n        (l + partition_in_blocks(&mut v[l..r], pivot, is_less), l >= r)\n\n        // `_pivot_guard` goes out of scope and writes the pivot (which is a stack-allocated\n        // variable) back into the slice where it originally was. This step is critical in ensuring\n        // safety!\n    };\n\n    // Place the pivot between the two partitions.\n    v.swap(0, mid);\n\n    (mid, was_partitioned)\n}\n\n/// Partitions `v` into elements equal to `v[pivot]` followed by elements greater than `v[pivot]`.\n///\n/// Returns the number of elements equal to the pivot. It is assumed that `v` does not contain\n/// elements smaller than the pivot.\npub(super) fn partition_equal<T, F>(v: &mut [T], pivot: usize, is_less: &mut F) -> usize\nwhere\n    F: FnMut(&T, &T) -> bool,\n{\n    // Place the pivot at the beginning of slice.\n    v.swap(0, pivot);\n    let (pivot, v) = v.split_at_mut(1);\n    let pivot = &mut pivot[0];\n\n    // Read the pivot into a stack-allocated variable for efficiency. If a following comparison\n    // operation panics, the pivot will be automatically written back into the slice.\n    // SAFETY: The pointer here is valid because it is obtained from a reference to a slice.\n    let tmp = mem::ManuallyDrop::new(unsafe { ptr::read(pivot) });\n    let _pivot_guard = InsertionHole { src: &*tmp, dest: pivot };\n    let pivot = &*tmp;\n\n    let len = v.len();\n    if len == 0 {\n        return 0;\n    }\n\n    // Now partition the slice.\n    let mut l = 0;\n    let mut r = len;\n    loop {\n        // SAFETY: The unsafety below involves indexing an array.\n        // For the first one: We already do the bounds checking here with `l < r`.\n        // For the second one: We initially have `l == 0` and `r == v.len()` and we checked that `l < r` at every indexing operation.\n        //                     From here we know that `r` must be at least `r == l` which was shown to be valid from the first one.\n        unsafe {\n            // Find the first element greater than the pivot.\n            while l < r && !is_less(pivot, v.get_unchecked(l)) {\n                l += 1;\n            }\n\n            // Find the last element equal to the pivot.\n            loop {\n                r -= 1;\n                if l >= r || !is_less(pivot, v.get_unchecked(r)) {\n                    break;\n                }\n            }\n\n            // Are we done?\n            if l >= r {\n                break;\n            }\n\n            // Swap the found pair of out-of-order elements.\n            let ptr = v.as_mut_ptr();\n            ptr::swap(ptr.add(l), ptr.add(r));\n            l += 1;\n        }\n    }\n\n    // We found `l` elements equal to the pivot. Add 1 to account for the pivot itself.\n    l + 1\n\n    // `_pivot_guard` goes out of scope and writes the pivot (which is a stack-allocated variable)\n    // back into the slice where it originally was. This step is critical in ensuring safety!\n}\n\n/// Scatters some elements around in an attempt to break patterns that might cause imbalanced\n/// partitions in quicksort.\n#[cold]\npub(super) fn break_patterns<T>(v: &mut [T]) {\n    let len = v.len();\n    if len >= 8 {\n        let mut seed = len;\n        let mut gen_usize = || {\n            // Pseudorandom number generator from the \"Xorshift RNGs\" paper by George Marsaglia.\n            if usize::BITS <= 32 {\n                let mut r = seed as u32;\n                r ^= r << 13;\n                r ^= r >> 17;\n                r ^= r << 5;\n                seed = r as usize;\n                seed\n            } else {\n                let mut r = seed as u64;\n                r ^= r << 13;\n                r ^= r >> 7;\n                r ^= r << 17;\n                seed = r as usize;\n                seed\n            }\n        };\n\n        // Take random numbers modulo this number.\n        // The number fits into `usize` because `len` is not greater than `isize::MAX`.\n        let modulus = len.next_power_of_two();\n\n        // Some pivot candidates will be in the nearby of this index. Let's randomize them.\n        let pos = len / 4 * 2;\n\n        for i in 0..3 {\n            // Generate a random number modulo `len`. However, in order to avoid costly operations\n            // we first take it modulo a power of two, and then decrease by `len` until it fits\n            // into the range `[0, len - 1]`.\n            let mut other = gen_usize() & (modulus - 1);\n\n            // `other` is guaranteed to be less than `2 * len`.\n            if other >= len {\n                other -= len;\n            }\n\n            v.swap(pos - 1 + i, other);\n        }\n    }\n}\n\n/// Chooses a pivot in `v` and returns the index and `true` if the slice is likely already sorted.\n///\n/// Elements in `v` might be reordered in the process.\npub(super) fn choose_pivot<T, F>(v: &mut [T], is_less: &mut F) -> (usize, bool)\nwhere\n    F: FnMut(&T, &T) -> bool,\n{\n    // Minimum length to choose the median-of-medians method.\n    // Shorter slices use the simple median-of-three method.\n    const SHORTEST_MEDIAN_OF_MEDIANS: usize = 50;\n    // Maximum number of swaps that can be performed in this function.\n    const MAX_SWAPS: usize = 4 * 3;\n\n    let len = v.len();\n\n    // Three indices near which we are going to choose a pivot.\n    let mut a = len / 4 * 1;\n    let mut b = len / 4 * 2;\n    let mut c = len / 4 * 3;\n\n    // Counts the total number of swaps we are about to perform while sorting indices.\n    let mut swaps = 0;\n\n    if len >= 8 {\n        // Swaps indices so that `v[a] <= v[b]`.\n        // SAFETY: `len >= 8` so there are at least two elements in the neighborhoods of\n        // `a`, `b` and `c`. This means the three calls to `sort_adjacent` result in\n        // corresponding calls to `sort3` with valid 3-item neighborhoods around each\n        // pointer, which in turn means the calls to `sort2` are done with valid\n        // references. Thus the `v.get_unchecked` calls are safe, as is the `ptr::swap`\n        // call.\n        let mut sort2 = |a: &mut usize, b: &mut usize| unsafe {\n            if is_less(v.get_unchecked(*b), v.get_unchecked(*a)) {\n                ptr::swap(a, b);\n                swaps += 1;\n            }\n        };\n\n        // Swaps indices so that `v[a] <= v[b] <= v[c]`.\n        let mut sort3 = |a: &mut usize, b: &mut usize, c: &mut usize| {\n            sort2(a, b);\n            sort2(b, c);\n            sort2(a, b);\n        };\n\n        if len >= SHORTEST_MEDIAN_OF_MEDIANS {\n            // Finds the median of `v[a - 1], v[a], v[a + 1]` and stores the index into `a`.\n            let mut sort_adjacent = |a: &mut usize| {\n                let tmp = *a;\n                sort3(&mut (tmp - 1), a, &mut (tmp + 1));\n            };\n\n            // Find medians in the neighborhoods of `a`, `b`, and `c`.\n            sort_adjacent(&mut a);\n            sort_adjacent(&mut b);\n            sort_adjacent(&mut c);\n        }\n\n        // Find the median among `a`, `b`, and `c`.\n        sort3(&mut a, &mut b, &mut c);\n    }\n\n    if swaps < MAX_SWAPS {\n        (b, swaps == 0)\n    } else {\n        // The maximum number of swaps was performed. Chances are the slice is descending or mostly\n        // descending, so reversing will probably help sort it faster.\n        v.reverse();\n        (len - 1 - b, true)\n    }\n}\n\n/// Sorts `v` recursively.\n///\n/// If the slice had a predecessor in the original array, it is specified as `pred`.\n///\n/// `limit` is the number of allowed imbalanced partitions before switching to `heapsort`. If zero,\n/// this function will immediately switch to heapsort.\nfn recurse<'a, T, F>(mut v: &'a mut [T], is_less: &mut F, mut pred: Option<&'a T>, mut limit: u32)\nwhere\n    F: FnMut(&T, &T) -> bool,\n{\n    // Slices of up to this length get sorted using insertion sort.\n    const MAX_INSERTION: usize = 20;\n\n    // True if the last partitioning was reasonably balanced.\n    let mut was_balanced = true;\n    // True if the last partitioning didn't shuffle elements (the slice was already partitioned).\n    let mut was_partitioned = true;\n\n    loop {\n        let len = v.len();\n\n        // Very short slices get sorted using insertion sort.\n        if len <= MAX_INSERTION {\n            if len >= 2 {\n                insertion_sort_shift_left(v, 1, is_less);\n            }\n            return;\n        }\n\n        // If too many bad pivot choices were made, simply fall back to heapsort in order to\n        // guarantee `O(n * log(n))` worst-case.\n        if limit == 0 {\n            heapsort(v, is_less);\n            return;\n        }\n\n        // If the last partitioning was imbalanced, try breaking patterns in the slice by shuffling\n        // some elements around. Hopefully we'll choose a better pivot this time.\n        if !was_balanced {\n            break_patterns(v);\n            limit -= 1;\n        }\n\n        // Choose a pivot and try guessing whether the slice is already sorted.\n        let (pivot, likely_sorted) = choose_pivot(v, is_less);\n\n        // If the last partitioning was decently balanced and didn't shuffle elements, and if pivot\n        // selection predicts the slice is likely already sorted...\n        if was_balanced && was_partitioned && likely_sorted {\n            // Try identifying several out-of-order elements and shifting them to correct\n            // positions. If the slice ends up being completely sorted, we're done.\n            if partial_insertion_sort(v, is_less) {\n                return;\n            }\n        }\n\n        // If the chosen pivot is equal to the predecessor, then it's the smallest element in the\n        // slice. Partition the slice into elements equal to and elements greater than the pivot.\n        // This case is usually hit when the slice contains many duplicate elements.\n        if let Some(p) = pred {\n            if !is_less(p, &v[pivot]) {\n                let mid = partition_equal(v, pivot, is_less);\n\n                // Continue sorting elements greater than the pivot.\n                v = &mut v[mid..];\n                continue;\n            }\n        }\n\n        // Partition the slice.\n        let (mid, was_p) = partition(v, pivot, is_less);\n        was_balanced = cmp::min(mid, len - mid) >= len / 8;\n        was_partitioned = was_p;\n\n        // Split the slice into `left`, `pivot`, and `right`.\n        let (left, right) = v.split_at_mut(mid);\n        let (pivot, right) = right.split_at_mut(1);\n        let pivot = &pivot[0];\n\n        // Recurse into the shorter side only in order to minimize the total number of recursive\n        // calls and consume less stack space. Then just continue with the longer side (this is\n        // akin to tail recursion).\n        if left.len() < right.len() {\n            recurse(left, is_less, pred, limit);\n            v = right;\n            pred = Some(pivot);\n        } else {\n            recurse(right, is_less, Some(pivot), limit);\n            v = left;\n        }\n    }\n}\n\n/// Sorts `v` using pattern-defeating quicksort, which is *O*(*n* \\* log(*n*)) worst-case.\npub fn quicksort<T, F>(v: &mut [T], mut is_less: F)\nwhere\n    F: FnMut(&T, &T) -> bool,\n{\n    // Sorting has no meaningful behavior on zero-sized types.\n    if T::IS_ZST {\n        return;\n    }\n\n    // Limit the number of imbalanced partitions to `floor(log2(len)) + 1`.\n    let limit = usize::BITS - v.len().leading_zeros();\n\n    recurse(v, &mut is_less, None, limit);\n}\n\n/// Merges non-decreasing runs `v[..mid]` and `v[mid..]` using `buf` as temporary storage, and\n/// stores the result into `v[..]`.\n///\n/// # Safety\n///\n/// The two slices must be non-empty and `mid` must be in bounds. Buffer `buf` must be long enough\n/// to hold a copy of the shorter slice. Also, `T` must not be a zero-sized type.\nunsafe fn merge<T, F>(v: &mut [T], mid: usize, buf: *mut T, is_less: &mut F)\nwhere\n    F: FnMut(&T, &T) -> bool,\n{\n    let len = v.len();\n    let v = v.as_mut_ptr();\n\n    // SAFETY: mid and len must be in-bounds of v.\n    let (v_mid, v_end) = unsafe { (v.add(mid), v.add(len)) };\n\n    // The merge process first copies the shorter run into `buf`. Then it traces the newly copied\n    // run and the longer run forwards (or backwards), comparing their next unconsumed elements and\n    // copying the lesser (or greater) one into `v`.\n    //\n    // As soon as the shorter run is fully consumed, the process is done. If the longer run gets\n    // consumed first, then we must copy whatever is left of the shorter run into the remaining\n    // hole in `v`.\n    //\n    // Intermediate state of the process is always tracked by `hole`, which serves two purposes:\n    // 1. Protects integrity of `v` from panics in `is_less`.\n    // 2. Fills the remaining hole in `v` if the longer run gets consumed first.\n    //\n    // Panic safety:\n    //\n    // If `is_less` panics at any point during the process, `hole` will get dropped and fill the\n    // hole in `v` with the unconsumed range in `buf`, thus ensuring that `v` still holds every\n    // object it initially held exactly once.\n    let mut hole;\n\n    if mid <= len - mid {\n        // The left run is shorter.\n\n        // SAFETY: buf must have enough capacity for `v[..mid]`.\n        unsafe {\n            ptr::copy_nonoverlapping(v, buf, mid);\n            hole = MergeHole { start: buf, end: buf.add(mid), dest: v };\n        }\n\n        // Initially, these pointers point to the beginnings of their arrays.\n        let left = &mut hole.start;\n        let mut right = v_mid;\n        let out = &mut hole.dest;\n\n        while *left < hole.end && right < v_end {\n            // Consume the lesser side.\n            // If equal, prefer the left run to maintain stability.\n\n            // SAFETY: left and right must be valid and part of v same for out.\n            unsafe {\n                let is_l = is_less(&*right, &**left);\n                let to_copy = if is_l { right } else { *left };\n                ptr::copy_nonoverlapping(to_copy, *out, 1);\n                *out = out.add(1);\n                right = right.add(is_l as usize);\n                *left = left.add(!is_l as usize);\n            }\n        }\n    } else {\n        // The right run is shorter.\n\n        // SAFETY: buf must have enough capacity for `v[mid..]`.\n        unsafe {\n            ptr::copy_nonoverlapping(v_mid, buf, len - mid);\n            hole = MergeHole { start: buf, end: buf.add(len - mid), dest: v_mid };\n        }\n\n        // Initially, these pointers point past the ends of their arrays.\n        let left = &mut hole.dest;\n        let right = &mut hole.end;\n        let mut out = v_end;\n\n        while v < *left && buf < *right {\n            // Consume the greater side.\n            // If equal, prefer the right run to maintain stability.\n\n            // SAFETY: left and right must be valid and part of v same for out.\n            unsafe {\n                let is_l = is_less(&*right.sub(1), &*left.sub(1));\n                *left = left.sub(is_l as usize);\n                *right = right.sub(!is_l as usize);\n                let to_copy = if is_l { *left } else { *right };\n                out = out.sub(1);\n                ptr::copy_nonoverlapping(to_copy, out, 1);\n            }\n        }\n    }\n    // Finally, `hole` gets dropped. If the shorter run was not fully consumed, whatever remains of\n    // it will now be copied into the hole in `v`.\n\n    // When dropped, copies the range `start..end` into `dest..`.\n    struct MergeHole<T> {\n        start: *mut T,\n        end: *mut T,\n        dest: *mut T,\n    }\n\n    impl<T> Drop for MergeHole<T> {\n        fn drop(&mut self) {\n            // SAFETY: `T` is not a zero-sized type, and these are pointers into a slice's elements.\n            unsafe {\n                let len = self.end.sub_ptr(self.start);\n                ptr::copy_nonoverlapping(self.start, self.dest, len);\n            }\n        }\n    }\n}\n\n/// This merge sort borrows some (but not all) ideas from TimSort, which used to be described in\n/// detail [here](https://github.com/python/cpython/blob/main/Objects/listsort.txt). However Python\n/// has switched to a Powersort based implementation.\n///\n/// The algorithm identifies strictly descending and non-descending subsequences, which are called\n/// natural runs. There is a stack of pending runs yet to be merged. Each newly found run is pushed\n/// onto the stack, and then some pairs of adjacent runs are merged until these two invariants are\n/// satisfied:\n///\n/// 1. for every `i` in `1..runs.len()`: `runs[i - 1].len > runs[i].len`\n/// 2. for every `i` in `2..runs.len()`: `runs[i - 2].len > runs[i - 1].len + runs[i].len`\n///\n/// The invariants ensure that the total running time is *O*(*n* \\* log(*n*)) worst-case.\npub fn merge_sort<T, CmpF, ElemAllocF, ElemDeallocF, RunAllocF, RunDeallocF>(\n    v: &mut [T],\n    is_less: &mut CmpF,\n    elem_alloc_fn: ElemAllocF,\n    elem_dealloc_fn: ElemDeallocF,\n    run_alloc_fn: RunAllocF,\n    run_dealloc_fn: RunDeallocF,\n) where\n    CmpF: FnMut(&T, &T) -> bool,\n    ElemAllocF: Fn(usize) -> *mut T,\n    ElemDeallocF: Fn(*mut T, usize),\n    RunAllocF: Fn(usize) -> *mut TimSortRun,\n    RunDeallocF: Fn(*mut TimSortRun, usize),\n{\n    // Slices of up to this length get sorted using insertion sort.\n    const MAX_INSERTION: usize = 20;\n\n    // The caller should have already checked that.\n    debug_assert!(!T::IS_ZST);\n\n    let len = v.len();\n\n    // Short arrays get sorted in-place via insertion sort to avoid allocations.\n    if len <= MAX_INSERTION {\n        if len >= 2 {\n            insertion_sort_shift_left(v, 1, is_less);\n        }\n        return;\n    }\n\n    // Allocate a buffer to use as scratch memory. We keep the length 0 so we can keep in it\n    // shallow copies of the contents of `v` without risking the dtors running on copies if\n    // `is_less` panics. When merging two sorted runs, this buffer holds a copy of the shorter run,\n    // which will always have length at most `len / 2`.\n    let buf = BufGuard::new(len / 2, elem_alloc_fn, elem_dealloc_fn);\n    let buf_ptr = buf.buf_ptr.as_ptr();\n\n    let mut runs = RunVec::new(run_alloc_fn, run_dealloc_fn);\n\n    let mut end = 0;\n    let mut start = 0;\n\n    // Scan forward. Memory pre-fetching prefers forward scanning vs backwards scanning, and the\n    // code-gen is usually better. For the most sensitive types such as integers, these are merged\n    // bidirectionally at once. So there is no benefit in scanning backwards.\n    while end < len {\n        let (streak_end, was_reversed) = find_streak(&v[start..], is_less);\n        end += streak_end;\n        if was_reversed {\n            v[start..end].reverse();\n        }\n\n        // Insert some more elements into the run if it's too short. Insertion sort is faster than\n        // merge sort on short sequences, so this significantly improves performance.\n        end = provide_sorted_batch(v, start, end, is_less);\n\n        // Push this run onto the stack.\n        runs.push(TimSortRun { start, len: end - start });\n        start = end;\n\n        // Merge some pairs of adjacent runs to satisfy the invariants.\n        while let Some(r) = collapse(runs.as_slice(), len) {\n            let left = runs[r];\n            let right = runs[r + 1];\n            let merge_slice = &mut v[left.start..right.start + right.len];\n            // SAFETY: `buf_ptr` must hold enough capacity for the shorter of the two sides, and\n            // neither side may be on length 0.\n            unsafe {\n                merge(merge_slice, left.len, buf_ptr, is_less);\n            }\n            runs[r + 1] = TimSortRun { start: left.start, len: left.len + right.len };\n            runs.remove(r);\n        }\n    }\n\n    // Finally, exactly one run must remain in the stack.\n    debug_assert!(runs.len() == 1 && runs[0].start == 0 && runs[0].len == len);\n\n    // Examines the stack of runs and identifies the next pair of runs to merge. More specifically,\n    // if `Some(r)` is returned, that means `runs[r]` and `runs[r + 1]` must be merged next. If the\n    // algorithm should continue building a new run instead, `None` is returned.\n    //\n    // TimSort is infamous for its buggy implementations, as described here:\n    // http://envisage-project.eu/timsort-specification-and-verification/\n    //\n    // The gist of the story is: we must enforce the invariants on the top four runs on the stack.\n    // Enforcing them on just top three is not sufficient to ensure that the invariants will still\n    // hold for *all* runs in the stack.\n    //\n    // This function correctly checks invariants for the top four runs. Additionally, if the top\n    // run starts at index 0, it will always demand a merge operation until the stack is fully\n    // collapsed, in order to complete the sort.\n    #[inline]\n    fn collapse(runs: &[TimSortRun], stop: usize) -> Option<usize> {\n        let n = runs.len();\n        if n >= 2\n            && (runs[n - 1].start + runs[n - 1].len == stop\n                || runs[n - 2].len <= runs[n - 1].len\n                || (n >= 3 && runs[n - 3].len <= runs[n - 2].len + runs[n - 1].len)\n                || (n >= 4 && runs[n - 4].len <= runs[n - 3].len + runs[n - 2].len))\n        {\n            if n >= 3 && runs[n - 3].len < runs[n - 1].len { Some(n - 3) } else { Some(n - 2) }\n        } else {\n            None\n        }\n    }\n\n    // Extremely basic versions of Vec.\n    // Their use is super limited and by having the code here, it allows reuse between the sort\n    // implementations.\n    struct BufGuard<T, ElemDeallocF>\n    where\n        ElemDeallocF: Fn(*mut T, usize),\n    {\n        buf_ptr: ptr::NonNull<T>,\n        capacity: usize,\n        elem_dealloc_fn: ElemDeallocF,\n    }\n\n    impl<T, ElemDeallocF> BufGuard<T, ElemDeallocF>\n    where\n        ElemDeallocF: Fn(*mut T, usize),\n    {\n        fn new<ElemAllocF>(\n            len: usize,\n            elem_alloc_fn: ElemAllocF,\n            elem_dealloc_fn: ElemDeallocF,\n        ) -> Self\n        where\n            ElemAllocF: Fn(usize) -> *mut T,\n        {\n            Self {\n                buf_ptr: ptr::NonNull::new(elem_alloc_fn(len)).unwrap(),\n                capacity: len,\n                elem_dealloc_fn,\n            }\n        }\n    }\n\n    impl<T, ElemDeallocF> Drop for BufGuard<T, ElemDeallocF>\n    where\n        ElemDeallocF: Fn(*mut T, usize),\n    {\n        fn drop(&mut self) {\n            (self.elem_dealloc_fn)(self.buf_ptr.as_ptr(), self.capacity);\n        }\n    }\n\n    struct RunVec<RunAllocF, RunDeallocF>\n    where\n        RunAllocF: Fn(usize) -> *mut TimSortRun,\n        RunDeallocF: Fn(*mut TimSortRun, usize),\n    {\n        buf_ptr: ptr::NonNull<TimSortRun>,\n        capacity: usize,\n        len: usize,\n        run_alloc_fn: RunAllocF,\n        run_dealloc_fn: RunDeallocF,\n    }\n\n    impl<RunAllocF, RunDeallocF> RunVec<RunAllocF, RunDeallocF>\n    where\n        RunAllocF: Fn(usize) -> *mut TimSortRun,\n        RunDeallocF: Fn(*mut TimSortRun, usize),\n    {\n        fn new(run_alloc_fn: RunAllocF, run_dealloc_fn: RunDeallocF) -> Self {\n            // Most slices can be sorted with at most 16 runs in-flight.\n            const START_RUN_CAPACITY: usize = 16;\n\n            Self {\n                buf_ptr: ptr::NonNull::new(run_alloc_fn(START_RUN_CAPACITY)).unwrap(),\n                capacity: START_RUN_CAPACITY,\n                len: 0,\n                run_alloc_fn,\n                run_dealloc_fn,\n            }\n        }\n\n        fn push(&mut self, val: TimSortRun) {\n            if self.len == self.capacity {\n                let old_capacity = self.capacity;\n                let old_buf_ptr = self.buf_ptr.as_ptr();\n\n                self.capacity = self.capacity * 2;\n                self.buf_ptr = ptr::NonNull::new((self.run_alloc_fn)(self.capacity)).unwrap();\n\n                // SAFETY: buf_ptr new and old were correctly allocated and old_buf_ptr has\n                // old_capacity valid elements.\n                unsafe {\n                    ptr::copy_nonoverlapping(old_buf_ptr, self.buf_ptr.as_ptr(), old_capacity);\n                }\n\n                (self.run_dealloc_fn)(old_buf_ptr, old_capacity);\n            }\n\n            // SAFETY: The invariant was just checked.\n            unsafe {\n                self.buf_ptr.as_ptr().add(self.len).write(val);\n            }\n            self.len += 1;\n        }\n\n        fn remove(&mut self, index: usize) {\n            if index >= self.len {\n                panic!(\"Index out of bounds\");\n            }\n\n            // SAFETY: buf_ptr needs to be valid and len invariant upheld.\n            unsafe {\n                // the place we are taking from.\n                let ptr = self.buf_ptr.as_ptr().add(index);\n\n                // Shift everything down to fill in that spot.\n                ptr::copy(ptr.add(1), ptr, self.len - index - 1);\n            }\n            self.len -= 1;\n        }\n\n        fn as_slice(&self) -> &[TimSortRun] {\n            // SAFETY: Safe as long as buf_ptr is valid and len invariant was upheld.\n            unsafe { &*ptr::slice_from_raw_parts(self.buf_ptr.as_ptr(), self.len) }\n        }\n\n        fn len(&self) -> usize {\n            self.len\n        }\n    }\n\n    impl<RunAllocF, RunDeallocF> core::ops::Index<usize> for RunVec<RunAllocF, RunDeallocF>\n    where\n        RunAllocF: Fn(usize) -> *mut TimSortRun,\n        RunDeallocF: Fn(*mut TimSortRun, usize),\n    {\n        type Output = TimSortRun;\n\n        fn index(&self, index: usize) -> &Self::Output {\n            if index < self.len {\n                // SAFETY: buf_ptr and len invariant must be upheld.\n                unsafe {\n                    return &*(self.buf_ptr.as_ptr().add(index));\n                }\n            }\n\n            panic!(\"Index out of bounds\");\n        }\n    }\n\n    impl<RunAllocF, RunDeallocF> core::ops::IndexMut<usize> for RunVec<RunAllocF, RunDeallocF>\n    where\n        RunAllocF: Fn(usize) -> *mut TimSortRun,\n        RunDeallocF: Fn(*mut TimSortRun, usize),\n    {\n        fn index_mut(&mut self, index: usize) -> &mut Self::Output {\n            if index < self.len {\n                // SAFETY: buf_ptr and len invariant must be upheld.\n                unsafe {\n                    return &mut *(self.buf_ptr.as_ptr().add(index));\n                }\n            }\n\n            panic!(\"Index out of bounds\");\n        }\n    }\n\n    impl<RunAllocF, RunDeallocF> Drop for RunVec<RunAllocF, RunDeallocF>\n    where\n        RunAllocF: Fn(usize) -> *mut TimSortRun,\n        RunDeallocF: Fn(*mut TimSortRun, usize),\n    {\n        fn drop(&mut self) {\n            // As long as TimSortRun is Copy we don't need to drop them individually but just the\n            // whole allocation.\n            (self.run_dealloc_fn)(self.buf_ptr.as_ptr(), self.capacity);\n        }\n    }\n}\n\n/// Internal type used by merge_sort.\n#[derive(Clone, Copy, Debug)]\npub struct TimSortRun {\n    len: usize,\n    start: usize,\n}\n\n/// Takes a range as denoted by start and end, that is already sorted and extends it to the right if\n/// necessary with sorts optimized for smaller ranges such as insertion sort.\nfn provide_sorted_batch<T, F>(v: &mut [T], start: usize, mut end: usize, is_less: &mut F) -> usize\nwhere\n    F: FnMut(&T, &T) -> bool,\n{\n    let len = v.len();\n    assert!(end >= start && end <= len);\n\n    // This value is a balance between least comparisons and best performance, as\n    // influenced by for example cache locality.\n    const MIN_INSERTION_RUN: usize = 10;\n\n    // Insert some more elements into the run if it's too short. Insertion sort is faster than\n    // merge sort on short sequences, so this significantly improves performance.\n    let start_end_diff = end - start;\n\n    if start_end_diff < MIN_INSERTION_RUN && end < len {\n        // v[start_found..end] are elements that are already sorted in the input. We want to extend\n        // the sorted region to the left, so we push up MIN_INSERTION_RUN - 1 to the right. Which is\n        // more efficient that trying to push those already sorted elements to the left.\n        end = cmp::min(start + MIN_INSERTION_RUN, len);\n        let presorted_start = cmp::max(start_end_diff, 1);\n\n        insertion_sort_shift_left(&mut v[start..end], presorted_start, is_less);\n    }\n\n    end\n}\n\n/// Finds a streak of presorted elements starting at the beginning of the slice. Returns the first\n/// value that is not part of said streak, and a bool denoting whether the streak was reversed.\n/// Streaks can be increasing or decreasing.\nfn find_streak<T, F>(v: &[T], is_less: &mut F) -> (usize, bool)\nwhere\n    F: FnMut(&T, &T) -> bool,\n{\n    let len = v.len();\n\n    if len < 2 {\n        return (len, false);\n    }\n\n    let mut end = 2;\n\n    // SAFETY: See below specific.\n    unsafe {\n        // SAFETY: We checked that len >= 2, so 0 and 1 are valid indices.\n        let assume_reverse = is_less(v.get_unchecked(1), v.get_unchecked(0));\n\n        // SAFETY: We know end >= 2 and check end < len.\n        // From that follows that accessing v at end and end - 1 is safe.\n        if assume_reverse {\n            while end < len && is_less(v.get_unchecked(end), v.get_unchecked(end - 1)) {\n                end += 1;\n            }\n\n            (end, true)\n        } else {\n            while end < len && !is_less(v.get_unchecked(end), v.get_unchecked(end - 1)) {\n                end += 1;\n            }\n            (end, false)\n        }\n    }\n}\n\n```",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Source of the Rust file `library/core/src/slice/sort.rs`.\"><title>sort.rs - source</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../../\" data-static-root-path=\"../../../static.files/\" data-current-crate=\"core\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"../../../static.files/src-script-e66d777a5a92e9b2.js\"></script><script defer=\"\" src=\"../../../src-files1.80.0.js\"></script><script defer=\"\" src=\"../../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc src\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"sidebar\"><div class=\"src-sidebar-title\"><h2>Files</h2></div><div id=\"src-sidebar\"><details class=\"dir-entry\"><summary>alloc</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>boxed</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/alloc/boxed/thin.rs.html\">thin.rs</a></div></details><details class=\"dir-entry\"><summary>collections</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>binary_heap</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/alloc/collections/binary_heap/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>btree</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>map</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/alloc/collections/btree/map/entry.rs.html\">entry.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/alloc/collections/btree/append.rs.html\">append.rs</a><a href=\"../../../src/alloc/collections/btree/borrow.rs.html\">borrow.rs</a><a href=\"../../../src/alloc/collections/btree/dedup_sorted_iter.rs.html\">dedup_sorted_iter.rs</a><a href=\"../../../src/alloc/collections/btree/fix.rs.html\">fix.rs</a><a href=\"../../../src/alloc/collections/btree/map.rs.html\">map.rs</a><a href=\"../../../src/alloc/collections/btree/mem.rs.html\">mem.rs</a><a href=\"../../../src/alloc/collections/btree/merge_iter.rs.html\">merge_iter.rs</a><a href=\"../../../src/alloc/collections/btree/mod.rs.html\">mod.rs</a><a href=\"../../../src/alloc/collections/btree/navigate.rs.html\">navigate.rs</a><a href=\"../../../src/alloc/collections/btree/node.rs.html\">node.rs</a><a href=\"../../../src/alloc/collections/btree/remove.rs.html\">remove.rs</a><a href=\"../../../src/alloc/collections/btree/search.rs.html\">search.rs</a><a href=\"../../../src/alloc/collections/btree/set.rs.html\">set.rs</a><a href=\"../../../src/alloc/collections/btree/set_val.rs.html\">set_val.rs</a><a href=\"../../../src/alloc/collections/btree/split.rs.html\">split.rs</a></div></details><details class=\"dir-entry\"><summary>vec_deque</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/alloc/collections/vec_deque/drain.rs.html\">drain.rs</a><a href=\"../../../src/alloc/collections/vec_deque/into_iter.rs.html\">into_iter.rs</a><a href=\"../../../src/alloc/collections/vec_deque/iter.rs.html\">iter.rs</a><a href=\"../../../src/alloc/collections/vec_deque/iter_mut.rs.html\">iter_mut.rs</a><a href=\"../../../src/alloc/collections/vec_deque/macros.rs.html\">macros.rs</a><a href=\"../../../src/alloc/collections/vec_deque/mod.rs.html\">mod.rs</a><a href=\"../../../src/alloc/collections/vec_deque/spec_extend.rs.html\">spec_extend.rs</a><a href=\"../../../src/alloc/collections/vec_deque/spec_from_iter.rs.html\">spec_from_iter.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/alloc/collections/linked_list.rs.html\">linked_list.rs</a><a href=\"../../../src/alloc/collections/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>ffi</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/alloc/ffi/c_str.rs.html\">c_str.rs</a><a href=\"../../../src/alloc/ffi/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>vec</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/alloc/vec/cow.rs.html\">cow.rs</a><a href=\"../../../src/alloc/vec/drain.rs.html\">drain.rs</a><a href=\"../../../src/alloc/vec/extract_if.rs.html\">extract_if.rs</a><a href=\"../../../src/alloc/vec/in_place_collect.rs.html\">in_place_collect.rs</a><a href=\"../../../src/alloc/vec/in_place_drop.rs.html\">in_place_drop.rs</a><a href=\"../../../src/alloc/vec/into_iter.rs.html\">into_iter.rs</a><a href=\"../../../src/alloc/vec/is_zero.rs.html\">is_zero.rs</a><a href=\"../../../src/alloc/vec/mod.rs.html\">mod.rs</a><a href=\"../../../src/alloc/vec/partial_eq.rs.html\">partial_eq.rs</a><a href=\"../../../src/alloc/vec/set_len_on_drop.rs.html\">set_len_on_drop.rs</a><a href=\"../../../src/alloc/vec/spec_extend.rs.html\">spec_extend.rs</a><a href=\"../../../src/alloc/vec/spec_from_elem.rs.html\">spec_from_elem.rs</a><a href=\"../../../src/alloc/vec/spec_from_iter.rs.html\">spec_from_iter.rs</a><a href=\"../../../src/alloc/vec/spec_from_iter_nested.rs.html\">spec_from_iter_nested.rs</a><a href=\"../../../src/alloc/vec/splice.rs.html\">splice.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/alloc/alloc.rs.html\">alloc.rs</a><a href=\"../../../src/alloc/borrow.rs.html\">borrow.rs</a><a href=\"../../../src/alloc/boxed.rs.html\">boxed.rs</a><a href=\"../../../src/alloc/fmt.rs.html\">fmt.rs</a><a href=\"../../../src/alloc/lib.rs.html\">lib.rs</a><a href=\"../../../src/alloc/macros.rs.html\">macros.rs</a><a href=\"../../../src/alloc/raw_vec.rs.html\">raw_vec.rs</a><a href=\"../../../src/alloc/rc.rs.html\">rc.rs</a><a href=\"../../../src/alloc/slice.rs.html\">slice.rs</a><a href=\"../../../src/alloc/str.rs.html\">str.rs</a><a href=\"../../../src/alloc/string.rs.html\">string.rs</a><a href=\"../../../src/alloc/sync.rs.html\">sync.rs</a><a href=\"../../../src/alloc/task.rs.html\">task.rs</a></div></details><details class=\"dir-entry\" open=\"\"><summary>core</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>alloc</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/alloc/global.rs.html\">global.rs</a><a href=\"../../../src/core/alloc/layout.rs.html\">layout.rs</a><a href=\"../../../src/core/alloc/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>array</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/array/ascii.rs.html\">ascii.rs</a><a href=\"../../../src/core/array/drain.rs.html\">drain.rs</a><a href=\"../../../src/core/array/equality.rs.html\">equality.rs</a><a href=\"../../../src/core/array/iter.rs.html\">iter.rs</a><a href=\"../../../src/core/array/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>ascii</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/ascii/ascii_char.rs.html\">ascii_char.rs</a></div></details><details class=\"dir-entry\"><summary>async_iter</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/async_iter/async_iter.rs.html\">async_iter.rs</a><a href=\"../../../src/core/async_iter/from_iter.rs.html\">from_iter.rs</a><a href=\"../../../src/core/async_iter/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>cell</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/cell/lazy.rs.html\">lazy.rs</a><a href=\"../../../src/core/cell/once.rs.html\">once.rs</a></div></details><details class=\"dir-entry\"><summary>char</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/char/convert.rs.html\">convert.rs</a><a href=\"../../../src/core/char/decode.rs.html\">decode.rs</a><a href=\"../../../src/core/char/methods.rs.html\">methods.rs</a><a href=\"../../../src/core/char/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>cmp</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/cmp/bytewise.rs.html\">bytewise.rs</a></div></details><details class=\"dir-entry\"><summary>convert</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/convert/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/convert/num.rs.html\">num.rs</a></div></details><details class=\"dir-entry\"><summary>ffi</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/ffi/c_str.rs.html\">c_str.rs</a><a href=\"../../../src/core/ffi/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>fmt</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/fmt/builders.rs.html\">builders.rs</a><a href=\"../../../src/core/fmt/float.rs.html\">float.rs</a><a href=\"../../../src/core/fmt/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/fmt/num.rs.html\">num.rs</a><a href=\"../../../src/core/fmt/rt.rs.html\">rt.rs</a></div></details><details class=\"dir-entry\"><summary>future</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/future/async_drop.rs.html\">async_drop.rs</a><a href=\"../../../src/core/future/future.rs.html\">future.rs</a><a href=\"../../../src/core/future/into_future.rs.html\">into_future.rs</a><a href=\"../../../src/core/future/join.rs.html\">join.rs</a><a href=\"../../../src/core/future/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/future/pending.rs.html\">pending.rs</a><a href=\"../../../src/core/future/poll_fn.rs.html\">poll_fn.rs</a><a href=\"../../../src/core/future/ready.rs.html\">ready.rs</a></div></details><details class=\"dir-entry\"><summary>hash</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/hash/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/hash/sip.rs.html\">sip.rs</a></div></details><details class=\"dir-entry\"><summary>intrinsics</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/intrinsics/mir.rs.html\">mir.rs</a><a href=\"../../../src/core/intrinsics/simd.rs.html\">simd.rs</a></div></details><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/io/borrowed_buf.rs.html\">borrowed_buf.rs</a><a href=\"../../../src/core/io/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>iter</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>adapters</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/iter/adapters/array_chunks.rs.html\">array_chunks.rs</a><a href=\"../../../src/core/iter/adapters/by_ref_sized.rs.html\">by_ref_sized.rs</a><a href=\"../../../src/core/iter/adapters/chain.rs.html\">chain.rs</a><a href=\"../../../src/core/iter/adapters/cloned.rs.html\">cloned.rs</a><a href=\"../../../src/core/iter/adapters/copied.rs.html\">copied.rs</a><a href=\"../../../src/core/iter/adapters/cycle.rs.html\">cycle.rs</a><a href=\"../../../src/core/iter/adapters/enumerate.rs.html\">enumerate.rs</a><a href=\"../../../src/core/iter/adapters/filter.rs.html\">filter.rs</a><a href=\"../../../src/core/iter/adapters/filter_map.rs.html\">filter_map.rs</a><a href=\"../../../src/core/iter/adapters/flatten.rs.html\">flatten.rs</a><a href=\"../../../src/core/iter/adapters/fuse.rs.html\">fuse.rs</a><a href=\"../../../src/core/iter/adapters/inspect.rs.html\">inspect.rs</a><a href=\"../../../src/core/iter/adapters/intersperse.rs.html\">intersperse.rs</a><a href=\"../../../src/core/iter/adapters/map.rs.html\">map.rs</a><a href=\"../../../src/core/iter/adapters/map_while.rs.html\">map_while.rs</a><a href=\"../../../src/core/iter/adapters/map_windows.rs.html\">map_windows.rs</a><a href=\"../../../src/core/iter/adapters/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/iter/adapters/peekable.rs.html\">peekable.rs</a><a href=\"../../../src/core/iter/adapters/rev.rs.html\">rev.rs</a><a href=\"../../../src/core/iter/adapters/scan.rs.html\">scan.rs</a><a href=\"../../../src/core/iter/adapters/skip.rs.html\">skip.rs</a><a href=\"../../../src/core/iter/adapters/skip_while.rs.html\">skip_while.rs</a><a href=\"../../../src/core/iter/adapters/step_by.rs.html\">step_by.rs</a><a href=\"../../../src/core/iter/adapters/take.rs.html\">take.rs</a><a href=\"../../../src/core/iter/adapters/take_while.rs.html\">take_while.rs</a><a href=\"../../../src/core/iter/adapters/zip.rs.html\">zip.rs</a></div></details><details class=\"dir-entry\"><summary>sources</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/iter/sources/empty.rs.html\">empty.rs</a><a href=\"../../../src/core/iter/sources/from_coroutine.rs.html\">from_coroutine.rs</a><a href=\"../../../src/core/iter/sources/from_fn.rs.html\">from_fn.rs</a><a href=\"../../../src/core/iter/sources/once.rs.html\">once.rs</a><a href=\"../../../src/core/iter/sources/once_with.rs.html\">once_with.rs</a><a href=\"../../../src/core/iter/sources/repeat.rs.html\">repeat.rs</a><a href=\"../../../src/core/iter/sources/repeat_n.rs.html\">repeat_n.rs</a><a href=\"../../../src/core/iter/sources/repeat_with.rs.html\">repeat_with.rs</a><a href=\"../../../src/core/iter/sources/successors.rs.html\">successors.rs</a></div></details><details class=\"dir-entry\"><summary>traits</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/iter/traits/accum.rs.html\">accum.rs</a><a href=\"../../../src/core/iter/traits/collect.rs.html\">collect.rs</a><a href=\"../../../src/core/iter/traits/double_ended.rs.html\">double_ended.rs</a><a href=\"../../../src/core/iter/traits/exact_size.rs.html\">exact_size.rs</a><a href=\"../../../src/core/iter/traits/iterator.rs.html\">iterator.rs</a><a href=\"../../../src/core/iter/traits/marker.rs.html\">marker.rs</a><a href=\"../../../src/core/iter/traits/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/iter/traits/unchecked_iterator.rs.html\">unchecked_iterator.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/iter/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/iter/range.rs.html\">range.rs</a><a href=\"../../../src/core/iter/sources.rs.html\">sources.rs</a></div></details><details class=\"dir-entry\"><summary>macros</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/macros/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>mem</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/mem/manually_drop.rs.html\">manually_drop.rs</a><a href=\"../../../src/core/mem/maybe_uninit.rs.html\">maybe_uninit.rs</a><a href=\"../../../src/core/mem/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/mem/transmutability.rs.html\">transmutability.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/net/display_buffer.rs.html\">display_buffer.rs</a><a href=\"../../../src/core/net/ip_addr.rs.html\">ip_addr.rs</a><a href=\"../../../src/core/net/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/net/parser.rs.html\">parser.rs</a><a href=\"../../../src/core/net/socket_addr.rs.html\">socket_addr.rs</a></div></details><details class=\"dir-entry\"><summary>num</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>dec2flt</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/num/dec2flt/common.rs.html\">common.rs</a><a href=\"../../../src/core/num/dec2flt/decimal.rs.html\">decimal.rs</a><a href=\"../../../src/core/num/dec2flt/float.rs.html\">float.rs</a><a href=\"../../../src/core/num/dec2flt/fpu.rs.html\">fpu.rs</a><a href=\"../../../src/core/num/dec2flt/lemire.rs.html\">lemire.rs</a><a href=\"../../../src/core/num/dec2flt/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/num/dec2flt/number.rs.html\">number.rs</a><a href=\"../../../src/core/num/dec2flt/parse.rs.html\">parse.rs</a><a href=\"../../../src/core/num/dec2flt/slow.rs.html\">slow.rs</a><a href=\"../../../src/core/num/dec2flt/table.rs.html\">table.rs</a></div></details><details class=\"dir-entry\"><summary>flt2dec</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>strategy</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/num/flt2dec/strategy/dragon.rs.html\">dragon.rs</a><a href=\"../../../src/core/num/flt2dec/strategy/grisu.rs.html\">grisu.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/num/flt2dec/decoder.rs.html\">decoder.rs</a><a href=\"../../../src/core/num/flt2dec/estimator.rs.html\">estimator.rs</a><a href=\"../../../src/core/num/flt2dec/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>shells</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/num/shells/i128.rs.html\">i128.rs</a><a href=\"../../../src/core/num/shells/i16.rs.html\">i16.rs</a><a href=\"../../../src/core/num/shells/i32.rs.html\">i32.rs</a><a href=\"../../../src/core/num/shells/i64.rs.html\">i64.rs</a><a href=\"../../../src/core/num/shells/i8.rs.html\">i8.rs</a><a href=\"../../../src/core/num/shells/int_macros.rs.html\">int_macros.rs</a><a href=\"../../../src/core/num/shells/isize.rs.html\">isize.rs</a><a href=\"../../../src/core/num/shells/u128.rs.html\">u128.rs</a><a href=\"../../../src/core/num/shells/u16.rs.html\">u16.rs</a><a href=\"../../../src/core/num/shells/u32.rs.html\">u32.rs</a><a href=\"../../../src/core/num/shells/u64.rs.html\">u64.rs</a><a href=\"../../../src/core/num/shells/u8.rs.html\">u8.rs</a><a href=\"../../../src/core/num/shells/usize.rs.html\">usize.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/num/bignum.rs.html\">bignum.rs</a><a href=\"../../../src/core/num/diy_float.rs.html\">diy_float.rs</a><a href=\"../../../src/core/num/error.rs.html\">error.rs</a><a href=\"../../../src/core/num/f128.rs.html\">f128.rs</a><a href=\"../../../src/core/num/f16.rs.html\">f16.rs</a><a href=\"../../../src/core/num/f32.rs.html\">f32.rs</a><a href=\"../../../src/core/num/f64.rs.html\">f64.rs</a><a href=\"../../../src/core/num/fmt.rs.html\">fmt.rs</a><a href=\"../../../src/core/num/int_log10.rs.html\">int_log10.rs</a><a href=\"../../../src/core/num/int_macros.rs.html\">int_macros.rs</a><a href=\"../../../src/core/num/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/num/nonzero.rs.html\">nonzero.rs</a><a href=\"../../../src/core/num/overflow_panic.rs.html\">overflow_panic.rs</a><a href=\"../../../src/core/num/saturating.rs.html\">saturating.rs</a><a href=\"../../../src/core/num/uint_macros.rs.html\">uint_macros.rs</a><a href=\"../../../src/core/num/wrapping.rs.html\">wrapping.rs</a></div></details><details class=\"dir-entry\"><summary>ops</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/ops/arith.rs.html\">arith.rs</a><a href=\"../../../src/core/ops/async_function.rs.html\">async_function.rs</a><a href=\"../../../src/core/ops/bit.rs.html\">bit.rs</a><a href=\"../../../src/core/ops/control_flow.rs.html\">control_flow.rs</a><a href=\"../../../src/core/ops/coroutine.rs.html\">coroutine.rs</a><a href=\"../../../src/core/ops/deref.rs.html\">deref.rs</a><a href=\"../../../src/core/ops/drop.rs.html\">drop.rs</a><a href=\"../../../src/core/ops/function.rs.html\">function.rs</a><a href=\"../../../src/core/ops/index.rs.html\">index.rs</a><a href=\"../../../src/core/ops/index_range.rs.html\">index_range.rs</a><a href=\"../../../src/core/ops/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/ops/range.rs.html\">range.rs</a><a href=\"../../../src/core/ops/try_trait.rs.html\">try_trait.rs</a><a href=\"../../../src/core/ops/unsize.rs.html\">unsize.rs</a></div></details><details class=\"dir-entry\"><summary>panic</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/panic/location.rs.html\">location.rs</a><a href=\"../../../src/core/panic/panic_info.rs.html\">panic_info.rs</a><a href=\"../../../src/core/panic/unwind_safe.rs.html\">unwind_safe.rs</a></div></details><details class=\"dir-entry\"><summary>portable-simd</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>crates</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>core_simd</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>masks</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/masks/full_masks.rs.html\">full_masks.rs</a></div></details><details class=\"dir-entry\"><summary>ops</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html\">assign.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html\">deref.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html\">shift_scalar.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html\">unary.rs</a></div></details><details class=\"dir-entry\"><summary>simd</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>cmp</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html\">eq.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html\">ord.rs</a></div></details><details class=\"dir-entry\"><summary>num</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html\">float.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html\">int.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html\">uint.rs</a></div></details><details class=\"dir-entry\"><summary>ptr</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html\">const_ptr.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/ptr/mut_ptr.rs.html\">mut_ptr.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/cmp.rs.html\">cmp.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/num.rs.html\">num.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/prelude.rs.html\">prelude.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/simd/ptr.rs.html\">ptr.rs</a></div></details><details class=\"dir-entry\"><summary>vendor</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html\">x86.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/portable-simd/crates/core_simd/src/alias.rs.html\">alias.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/cast.rs.html\">cast.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/fmt.rs.html\">fmt.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/iter.rs.html\">iter.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/lane_count.rs.html\">lane_count.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/masks.rs.html\">masks.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/ops.rs.html\">ops.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/select.rs.html\">select.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/swizzle.rs.html\">swizzle.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/swizzle_dyn.rs.html\">swizzle_dyn.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html\">to_bytes.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/vector.rs.html\">vector.rs</a><a href=\"../../../src/core/portable-simd/crates/core_simd/src/vendor.rs.html\">vendor.rs</a></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>prelude</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/prelude/common.rs.html\">common.rs</a><a href=\"../../../src/core/prelude/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>ptr</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/ptr/alignment.rs.html\">alignment.rs</a><a href=\"../../../src/core/ptr/const_ptr.rs.html\">const_ptr.rs</a><a href=\"../../../src/core/ptr/metadata.rs.html\">metadata.rs</a><a href=\"../../../src/core/ptr/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/ptr/mut_ptr.rs.html\">mut_ptr.rs</a><a href=\"../../../src/core/ptr/non_null.rs.html\">non_null.rs</a><a href=\"../../../src/core/ptr/unique.rs.html\">unique.rs</a></div></details><details class=\"dir-entry\" open=\"\"><summary>slice</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>iter</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/slice/iter/macros.rs.html\">macros.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/slice/ascii.rs.html\">ascii.rs</a><a href=\"../../../src/core/slice/cmp.rs.html\">cmp.rs</a><a href=\"../../../src/core/slice/index.rs.html\">index.rs</a><a href=\"../../../src/core/slice/iter.rs.html\">iter.rs</a><a href=\"../../../src/core/slice/memchr.rs.html\">memchr.rs</a><a href=\"../../../src/core/slice/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/slice/raw.rs.html\">raw.rs</a><a href=\"../../../src/core/slice/rotate.rs.html\">rotate.rs</a><a href=\"../../../src/core/slice/select.rs.html\">select.rs</a><a href=\"../../../src/core/slice/sort.rs.html\" class=\"selected\">sort.rs</a><a href=\"../../../src/core/slice/specialize.rs.html\">specialize.rs</a></div></details><details class=\"dir-entry\"><summary>stdarch</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>crates</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>core_arch</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>aarch64</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>neon</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/aarch64/neon/generated.rs.html\">generated.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/aarch64/neon/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/aarch64/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/aarch64/prefetch.rs.html\">prefetch.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/aarch64/tme.rs.html\">tme.rs</a></div></details><details class=\"dir-entry\"><summary>arm</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm/dsp.rs.html\">dsp.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm/neon.rs.html\">neon.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm/sat.rs.html\">sat.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm/simd32.rs.html\">simd32.rs</a></div></details><details class=\"dir-entry\"><summary>arm_shared</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>barrier</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/barrier/cp15.rs.html\">cp15.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/barrier/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>neon</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/neon/generated.rs.html\">generated.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/neon/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/crc.rs.html\">crc.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/crypto.rs.html\">crypto.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/hints.rs.html\">hints.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/arm_shared/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>loongarch64</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>lasx</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/loongarch64/lasx/generated.rs.html\">generated.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/loongarch64/lasx/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/loongarch64/lasx/types.rs.html\">types.rs</a></div></details><details class=\"dir-entry\"><summary>lsx</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/loongarch64/lsx/generated.rs.html\">generated.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/loongarch64/lsx/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/loongarch64/lsx/types.rs.html\">types.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/loongarch64/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>mips</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/mips/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>nvptx</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/nvptx/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>powerpc</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/powerpc/altivec.rs.html\">altivec.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/powerpc/macros.rs.html\">macros.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/powerpc/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/powerpc/vsx.rs.html\">vsx.rs</a></div></details><details class=\"dir-entry\"><summary>powerpc64</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/powerpc64/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/powerpc64/vsx.rs.html\">vsx.rs</a></div></details><details class=\"dir-entry\"><summary>riscv32</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv32/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv32/zk.rs.html\">zk.rs</a></div></details><details class=\"dir-entry\"><summary>riscv64</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv64/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv64/zk.rs.html\">zk.rs</a></div></details><details class=\"dir-entry\"><summary>riscv_shared</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv_shared/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv_shared/p.rs.html\">p.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv_shared/zb.rs.html\">zb.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/riscv_shared/zk.rs.html\">zk.rs</a></div></details><details class=\"dir-entry\"><summary>wasm32</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/wasm32/atomic.rs.html\">atomic.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/wasm32/memory.rs.html\">memory.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/wasm32/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/wasm32/relaxed_simd.rs.html\">relaxed_simd.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/wasm32/simd128.rs.html\">simd128.rs</a></div></details><details class=\"dir-entry\"><summary>x86</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/abm.rs.html\">abm.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/adx.rs.html\">adx.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/aes.rs.html\">aes.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx.rs.html\">avx.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx2.rs.html\">avx2.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512bf16.rs.html\">avx512bf16.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512bitalg.rs.html\">avx512bitalg.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512bw.rs.html\">avx512bw.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512cd.rs.html\">avx512cd.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512f.rs.html\">avx512f.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512ifma.rs.html\">avx512ifma.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512vbmi.rs.html\">avx512vbmi.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512vbmi2.rs.html\">avx512vbmi2.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512vnni.rs.html\">avx512vnni.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/avx512vpopcntdq.rs.html\">avx512vpopcntdq.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/bmi1.rs.html\">bmi1.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/bmi2.rs.html\">bmi2.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/bswap.rs.html\">bswap.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/bt.rs.html\">bt.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/cpuid.rs.html\">cpuid.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/eflags.rs.html\">eflags.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/f16c.rs.html\">f16c.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/fma.rs.html\">fma.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/fxsr.rs.html\">fxsr.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/gfni.rs.html\">gfni.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/macros.rs.html\">macros.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/pclmulqdq.rs.html\">pclmulqdq.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/rdrand.rs.html\">rdrand.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/rdtsc.rs.html\">rdtsc.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/rtm.rs.html\">rtm.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/sha.rs.html\">sha.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/sse.rs.html\">sse.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/sse2.rs.html\">sse2.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/sse3.rs.html\">sse3.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/sse41.rs.html\">sse41.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/sse42.rs.html\">sse42.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/sse4a.rs.html\">sse4a.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/ssse3.rs.html\">ssse3.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/tbm.rs.html\">tbm.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/vaes.rs.html\">vaes.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/vpclmulqdq.rs.html\">vpclmulqdq.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86/xsave.rs.html\">xsave.rs</a></div></details><details class=\"dir-entry\"><summary>x86_64</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/abm.rs.html\">abm.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/adx.rs.html\">adx.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/avx.rs.html\">avx.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/avx2.rs.html\">avx2.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/avx512f.rs.html\">avx512f.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/bmi.rs.html\">bmi.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/bmi2.rs.html\">bmi2.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/bswap.rs.html\">bswap.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/bt.rs.html\">bt.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/cmpxchg16b.rs.html\">cmpxchg16b.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/fxsr.rs.html\">fxsr.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/macros.rs.html\">macros.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/rdrand.rs.html\">rdrand.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/sse.rs.html\">sse.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/sse2.rs.html\">sse2.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/sse41.rs.html\">sse41.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/sse42.rs.html\">sse42.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/x86_64/xsave.rs.html\">xsave.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/stdarch/crates/core_arch/src/macros.rs.html\">macros.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/stdarch/crates/core_arch/src/simd.rs.html\">simd.rs</a></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>str</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/str/converts.rs.html\">converts.rs</a><a href=\"../../../src/core/str/count.rs.html\">count.rs</a><a href=\"../../../src/core/str/error.rs.html\">error.rs</a><a href=\"../../../src/core/str/iter.rs.html\">iter.rs</a><a href=\"../../../src/core/str/lossy.rs.html\">lossy.rs</a><a href=\"../../../src/core/str/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/str/pattern.rs.html\">pattern.rs</a><a href=\"../../../src/core/str/traits.rs.html\">traits.rs</a><a href=\"../../../src/core/str/validations.rs.html\">validations.rs</a></div></details><details class=\"dir-entry\"><summary>sync</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/sync/atomic.rs.html\">atomic.rs</a><a href=\"../../../src/core/sync/exclusive.rs.html\">exclusive.rs</a><a href=\"../../../src/core/sync/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>task</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/task/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/task/poll.rs.html\">poll.rs</a><a href=\"../../../src/core/task/ready.rs.html\">ready.rs</a><a href=\"../../../src/core/task/wake.rs.html\">wake.rs</a></div></details><details class=\"dir-entry\"><summary>unicode</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/core/unicode/mod.rs.html\">mod.rs</a><a href=\"../../../src/core/unicode/printable.rs.html\">printable.rs</a><a href=\"../../../src/core/unicode/unicode_data.rs.html\">unicode_data.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/core/any.rs.html\">any.rs</a><a href=\"../../../src/core/arch.rs.html\">arch.rs</a><a href=\"../../../src/core/ascii.rs.html\">ascii.rs</a><a href=\"../../../src/core/asserting.rs.html\">asserting.rs</a><a href=\"../../../src/core/bool.rs.html\">bool.rs</a><a href=\"../../../src/core/borrow.rs.html\">borrow.rs</a><a href=\"../../../src/core/cell.rs.html\">cell.rs</a><a href=\"../../../src/core/clone.rs.html\">clone.rs</a><a href=\"../../../src/core/cmp.rs.html\">cmp.rs</a><a href=\"../../../src/core/default.rs.html\">default.rs</a><a href=\"../../../src/core/error.rs.html\">error.rs</a><a href=\"../../../src/core/escape.rs.html\">escape.rs</a><a href=\"../../../src/core/hint.rs.html\">hint.rs</a><a href=\"../../../src/core/internal_macros.rs.html\">internal_macros.rs</a><a href=\"../../../src/core/intrinsics.rs.html\">intrinsics.rs</a><a href=\"../../../src/core/lib.rs.html\">lib.rs</a><a href=\"../../../src/core/marker.rs.html\">marker.rs</a><a href=\"../../../src/core/option.rs.html\">option.rs</a><a href=\"../../../src/core/panic.rs.html\">panic.rs</a><a href=\"../../../src/core/panicking.rs.html\">panicking.rs</a><a href=\"../../../src/core/pat.rs.html\">pat.rs</a><a href=\"../../../src/core/pin.rs.html\">pin.rs</a><a href=\"../../../src/core/primitive.rs.html\">primitive.rs</a><a href=\"../../../src/core/primitive_docs.rs.html\">primitive_docs.rs</a><a href=\"../../../src/core/result.rs.html\">result.rs</a><a href=\"../../../src/core/time.rs.html\">time.rs</a><a href=\"../../../src/core/tuple.rs.html\">tuple.rs</a><a href=\"../../../src/core/ub_checks.rs.html\">ub_checks.rs</a><a href=\"../../../src/core/unit.rs.html\">unit.rs</a></div></details><details class=\"dir-entry\"><summary>proc_macro</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>bridge</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/proc_macro/bridge/arena.rs.html\">arena.rs</a><a href=\"../../../src/proc_macro/bridge/buffer.rs.html\">buffer.rs</a><a href=\"../../../src/proc_macro/bridge/client.rs.html\">client.rs</a><a href=\"../../../src/proc_macro/bridge/closure.rs.html\">closure.rs</a><a href=\"../../../src/proc_macro/bridge/fxhash.rs.html\">fxhash.rs</a><a href=\"../../../src/proc_macro/bridge/handle.rs.html\">handle.rs</a><a href=\"../../../src/proc_macro/bridge/mod.rs.html\">mod.rs</a><a href=\"../../../src/proc_macro/bridge/rpc.rs.html\">rpc.rs</a><a href=\"../../../src/proc_macro/bridge/selfless_reify.rs.html\">selfless_reify.rs</a><a href=\"../../../src/proc_macro/bridge/server.rs.html\">server.rs</a><a href=\"../../../src/proc_macro/bridge/symbol.rs.html\">symbol.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/proc_macro/diagnostic.rs.html\">diagnostic.rs</a><a href=\"../../../src/proc_macro/lib.rs.html\">lib.rs</a><a href=\"../../../src/proc_macro/quote.rs.html\">quote.rs</a></div></details><details class=\"dir-entry\"><summary>std</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>backtrace</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>backtrace</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/backtrace/src/backtrace/libunwind.rs.html\">libunwind.rs</a><a href=\"../../../src/std/backtrace/src/backtrace/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>symbolize</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>gimli</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/backtrace/src/symbolize/gimli/elf.rs.html\">elf.rs</a><a href=\"../../../src/std/backtrace/src/symbolize/gimli/libs_dl_iterate_phdr.rs.html\">libs_dl_iterate_phdr.rs</a><a href=\"../../../src/std/backtrace/src/symbolize/gimli/mmap_unix.rs.html\">mmap_unix.rs</a><a href=\"../../../src/std/backtrace/src/symbolize/gimli/parse_running_mmaps_unix.rs.html\">parse_running_mmaps_unix.rs</a><a href=\"../../../src/std/backtrace/src/symbolize/gimli/stash.rs.html\">stash.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/backtrace/src/symbolize/gimli.rs.html\">gimli.rs</a><a href=\"../../../src/std/backtrace/src/symbolize/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/backtrace/src/lib.rs.html\">lib.rs</a><a href=\"../../../src/std/backtrace/src/print.rs.html\">print.rs</a><a href=\"../../../src/std/backtrace/src/types.rs.html\">types.rs</a></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>collections</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>hash</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/collections/hash/map.rs.html\">map.rs</a><a href=\"../../../src/std/collections/hash/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/collections/hash/set.rs.html\">set.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/collections/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>core</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/core/src/primitive_docs.rs.html\">primitive_docs.rs</a></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>ffi</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/ffi/c_str.rs.html\">c_str.rs</a><a href=\"../../../src/std/ffi/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/ffi/os_str.rs.html\">os_str.rs</a></div></details><details class=\"dir-entry\"><summary>hash</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/hash/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/hash/random.rs.html\">random.rs</a></div></details><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>buffered</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>bufreader</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/io/buffered/bufreader/buffer.rs.html\">buffer.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/io/buffered/bufreader.rs.html\">bufreader.rs</a><a href=\"../../../src/std/io/buffered/bufwriter.rs.html\">bufwriter.rs</a><a href=\"../../../src/std/io/buffered/linewriter.rs.html\">linewriter.rs</a><a href=\"../../../src/std/io/buffered/linewritershim.rs.html\">linewritershim.rs</a><a href=\"../../../src/std/io/buffered/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>error</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/io/error/repr_bitpacked.rs.html\">repr_bitpacked.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/io/copy.rs.html\">copy.rs</a><a href=\"../../../src/std/io/cursor.rs.html\">cursor.rs</a><a href=\"../../../src/std/io/error.rs.html\">error.rs</a><a href=\"../../../src/std/io/impls.rs.html\">impls.rs</a><a href=\"../../../src/std/io/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/io/prelude.rs.html\">prelude.rs</a><a href=\"../../../src/std/io/stdio.rs.html\">stdio.rs</a><a href=\"../../../src/std/io/util.rs.html\">util.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/net/ip_addr.rs.html\">ip_addr.rs</a><a href=\"../../../src/std/net/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/net/socket_addr.rs.html\">socket_addr.rs</a><a href=\"../../../src/std/net/tcp.rs.html\">tcp.rs</a><a href=\"../../../src/std/net/udp.rs.html\">udp.rs</a></div></details><details class=\"dir-entry\"><summary>os</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>fd</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/fd/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/fd/net.rs.html\">net.rs</a><a href=\"../../../src/std/os/fd/owned.rs.html\">owned.rs</a><a href=\"../../../src/std/os/fd/raw.rs.html\">raw.rs</a></div></details><details class=\"dir-entry\"><summary>linux</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/linux/fs.rs.html\">fs.rs</a><a href=\"../../../src/std/os/linux/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/linux/net.rs.html\">net.rs</a><a href=\"../../../src/std/os/linux/process.rs.html\">process.rs</a><a href=\"../../../src/std/os/linux/raw.rs.html\">raw.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>linux_ext</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/net/linux_ext/addr.rs.html\">addr.rs</a><a href=\"../../../src/std/os/net/linux_ext/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/net/linux_ext/socket.rs.html\">socket.rs</a><a href=\"../../../src/std/os/net/linux_ext/tcp.rs.html\">tcp.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/os/net/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>raw</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/raw/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>unix</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>ffi</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/unix/ffi/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/unix/ffi/os_str.rs.html\">os_str.rs</a></div></details><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/unix/io/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/unix/net/addr.rs.html\">addr.rs</a><a href=\"../../../src/std/os/unix/net/ancillary.rs.html\">ancillary.rs</a><a href=\"../../../src/std/os/unix/net/datagram.rs.html\">datagram.rs</a><a href=\"../../../src/std/os/unix/net/listener.rs.html\">listener.rs</a><a href=\"../../../src/std/os/unix/net/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/unix/net/stream.rs.html\">stream.rs</a><a href=\"../../../src/std/os/unix/net/ucred.rs.html\">ucred.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/os/unix/fs.rs.html\">fs.rs</a><a href=\"../../../src/std/os/unix/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/unix/process.rs.html\">process.rs</a><a href=\"../../../src/std/os/unix/raw.rs.html\">raw.rs</a><a href=\"../../../src/std/os/unix/thread.rs.html\">thread.rs</a></div></details><details class=\"dir-entry\"><summary>wasi</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/wasi/io/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/wasi/net/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/os/wasi/ffi.rs.html\">ffi.rs</a><a href=\"../../../src/std/os/wasi/fs.rs.html\">fs.rs</a><a href=\"../../../src/std/os/wasi/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>wasip2</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/wasip2/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>windows</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/os/windows/io/handle.rs.html\">handle.rs</a><a href=\"../../../src/std/os/windows/io/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/windows/io/raw.rs.html\">raw.rs</a><a href=\"../../../src/std/os/windows/io/socket.rs.html\">socket.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/os/windows/ffi.rs.html\">ffi.rs</a><a href=\"../../../src/std/os/windows/fs.rs.html\">fs.rs</a><a href=\"../../../src/std/os/windows/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/os/windows/process.rs.html\">process.rs</a><a href=\"../../../src/std/os/windows/raw.rs.html\">raw.rs</a><a href=\"../../../src/std/os/windows/thread.rs.html\">thread.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/os/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>portable-simd</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>crates</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>std_float</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/portable-simd/crates/std_float/src/lib.rs.html\">lib.rs</a></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>prelude</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/prelude/common.rs.html\">common.rs</a><a href=\"../../../src/std/prelude/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>sync</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>mpmc</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sync/mpmc/array.rs.html\">array.rs</a><a href=\"../../../src/std/sync/mpmc/context.rs.html\">context.rs</a><a href=\"../../../src/std/sync/mpmc/counter.rs.html\">counter.rs</a><a href=\"../../../src/std/sync/mpmc/error.rs.html\">error.rs</a><a href=\"../../../src/std/sync/mpmc/list.rs.html\">list.rs</a><a href=\"../../../src/std/sync/mpmc/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/sync/mpmc/select.rs.html\">select.rs</a><a href=\"../../../src/std/sync/mpmc/utils.rs.html\">utils.rs</a><a href=\"../../../src/std/sync/mpmc/waker.rs.html\">waker.rs</a><a href=\"../../../src/std/sync/mpmc/zero.rs.html\">zero.rs</a></div></details><details class=\"dir-entry\"><summary>mpsc</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sync/mpsc/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/sync/barrier.rs.html\">barrier.rs</a><a href=\"../../../src/std/sync/condvar.rs.html\">condvar.rs</a><a href=\"../../../src/std/sync/lazy_lock.rs.html\">lazy_lock.rs</a><a href=\"../../../src/std/sync/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/sync/mutex.rs.html\">mutex.rs</a><a href=\"../../../src/std/sync/once.rs.html\">once.rs</a><a href=\"../../../src/std/sync/once_lock.rs.html\">once_lock.rs</a><a href=\"../../../src/std/sync/poison.rs.html\">poison.rs</a><a href=\"../../../src/std/sync/reentrant_lock.rs.html\">reentrant_lock.rs</a><a href=\"../../../src/std/sync/rwlock.rs.html\">rwlock.rs</a></div></details><details class=\"dir-entry\"><summary>sys</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>os_str</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/os_str/bytes.rs.html\">bytes.rs</a><a href=\"../../../src/std/sys/os_str/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>pal</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>common</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/pal/common/alloc.rs.html\">alloc.rs</a><a href=\"../../../src/std/sys/pal/common/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/sys/pal/common/small_c_string.rs.html\">small_c_string.rs</a></div></details><details class=\"dir-entry\"><summary>unix</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>process</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/pal/unix/process/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/sys/pal/unix/process/process_common.rs.html\">process_common.rs</a><a href=\"../../../src/std/sys/pal/unix/process/process_unix.rs.html\">process_unix.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/sys/pal/unix/alloc.rs.html\">alloc.rs</a><a href=\"../../../src/std/sys/pal/unix/args.rs.html\">args.rs</a><a href=\"../../../src/std/sys/pal/unix/env.rs.html\">env.rs</a><a href=\"../../../src/std/sys/pal/unix/fd.rs.html\">fd.rs</a><a href=\"../../../src/std/sys/pal/unix/fs.rs.html\">fs.rs</a><a href=\"../../../src/std/sys/pal/unix/futex.rs.html\">futex.rs</a><a href=\"../../../src/std/sys/pal/unix/io.rs.html\">io.rs</a><a href=\"../../../src/std/sys/pal/unix/kernel_copy.rs.html\">kernel_copy.rs</a><a href=\"../../../src/std/sys/pal/unix/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/sys/pal/unix/net.rs.html\">net.rs</a><a href=\"../../../src/std/sys/pal/unix/os.rs.html\">os.rs</a><a href=\"../../../src/std/sys/pal/unix/pipe.rs.html\">pipe.rs</a><a href=\"../../../src/std/sys/pal/unix/rand.rs.html\">rand.rs</a><a href=\"../../../src/std/sys/pal/unix/stack_overflow.rs.html\">stack_overflow.rs</a><a href=\"../../../src/std/sys/pal/unix/stdio.rs.html\">stdio.rs</a><a href=\"../../../src/std/sys/pal/unix/thread.rs.html\">thread.rs</a><a href=\"../../../src/std/sys/pal/unix/thread_local_dtor.rs.html\">thread_local_dtor.rs</a><a href=\"../../../src/std/sys/pal/unix/thread_local_key.rs.html\">thread_local_key.rs</a><a href=\"../../../src/std/sys/pal/unix/time.rs.html\">time.rs</a><a href=\"../../../src/std/sys/pal/unix/weak.rs.html\">weak.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/sys/pal/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>path</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/path/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/sys/path/unix.rs.html\">unix.rs</a></div></details><details class=\"dir-entry\"><summary>personality</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>dwarf</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/personality/dwarf/eh.rs.html\">eh.rs</a><a href=\"../../../src/std/sys/personality/dwarf/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/sys/personality/gcc.rs.html\">gcc.rs</a><a href=\"../../../src/std/sys/personality/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>sync</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>condvar</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/sync/condvar/futex.rs.html\">futex.rs</a><a href=\"../../../src/std/sys/sync/condvar/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>mutex</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/sync/mutex/futex.rs.html\">futex.rs</a><a href=\"../../../src/std/sys/sync/mutex/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>once</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/sync/once/futex.rs.html\">futex.rs</a><a href=\"../../../src/std/sys/sync/once/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>rwlock</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/sync/rwlock/futex.rs.html\">futex.rs</a><a href=\"../../../src/std/sys/sync/rwlock/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>thread_parking</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/sync/thread_parking/futex.rs.html\">futex.rs</a><a href=\"../../../src/std/sys/sync/thread_parking/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/sys/sync/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>thread_local</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>fast_local</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys/thread_local/fast_local/eager.rs.html\">eager.rs</a><a href=\"../../../src/std/sys/thread_local/fast_local/lazy.rs.html\">lazy.rs</a><a href=\"../../../src/std/sys/thread_local/fast_local/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/sys/thread_local/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/sys/cmath.rs.html\">cmath.rs</a><a href=\"../../../src/std/sys/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>sys_common</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/sys_common/backtrace.rs.html\">backtrace.rs</a><a href=\"../../../src/std/sys_common/fs.rs.html\">fs.rs</a><a href=\"../../../src/std/sys_common/io.rs.html\">io.rs</a><a href=\"../../../src/std/sys_common/lazy_box.rs.html\">lazy_box.rs</a><a href=\"../../../src/std/sys_common/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/sys_common/net.rs.html\">net.rs</a><a href=\"../../../src/std/sys_common/process.rs.html\">process.rs</a><a href=\"../../../src/std/sys_common/thread_local_dtor.rs.html\">thread_local_dtor.rs</a><a href=\"../../../src/std/sys_common/thread_local_key.rs.html\">thread_local_key.rs</a><a href=\"../../../src/std/sys_common/wstr.rs.html\">wstr.rs</a><a href=\"../../../src/std/sys_common/wtf8.rs.html\">wtf8.rs</a></div></details><details class=\"dir-entry\"><summary>thread</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/std/thread/local.rs.html\">local.rs</a><a href=\"../../../src/std/thread/mod.rs.html\">mod.rs</a><a href=\"../../../src/std/thread/scoped.rs.html\">scoped.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/std/alloc.rs.html\">alloc.rs</a><a href=\"../../../src/std/ascii.rs.html\">ascii.rs</a><a href=\"../../../src/std/backtrace.rs.html\">backtrace.rs</a><a href=\"../../../src/std/env.rs.html\">env.rs</a><a href=\"../../../src/std/error.rs.html\">error.rs</a><a href=\"../../../src/std/f128.rs.html\">f128.rs</a><a href=\"../../../src/std/f16.rs.html\">f16.rs</a><a href=\"../../../src/std/f32.rs.html\">f32.rs</a><a href=\"../../../src/std/f64.rs.html\">f64.rs</a><a href=\"../../../src/std/fs.rs.html\">fs.rs</a><a href=\"../../../src/std/keyword_docs.rs.html\">keyword_docs.rs</a><a href=\"../../../src/std/lib.rs.html\">lib.rs</a><a href=\"../../../src/std/macros.rs.html\">macros.rs</a><a href=\"../../../src/std/num.rs.html\">num.rs</a><a href=\"../../../src/std/panic.rs.html\">panic.rs</a><a href=\"../../../src/std/panicking.rs.html\">panicking.rs</a><a href=\"../../../src/std/pat.rs.html\">pat.rs</a><a href=\"../../../src/std/path.rs.html\">path.rs</a><a href=\"../../../src/std/process.rs.html\">process.rs</a><a href=\"../../../src/std/rt.rs.html\">rt.rs</a><a href=\"../../../src/std/time.rs.html\">time.rs</a></div></details><details class=\"dir-entry\"><summary>test</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>formatters</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/test/formatters/json.rs.html\">json.rs</a><a href=\"../../../src/test/formatters/junit.rs.html\">junit.rs</a><a href=\"../../../src/test/formatters/mod.rs.html\">mod.rs</a><a href=\"../../../src/test/formatters/pretty.rs.html\">pretty.rs</a><a href=\"../../../src/test/formatters/terse.rs.html\">terse.rs</a></div></details><details class=\"dir-entry\"><summary>helpers</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/test/helpers/concurrency.rs.html\">concurrency.rs</a><a href=\"../../../src/test/helpers/metrics.rs.html\">metrics.rs</a><a href=\"../../../src/test/helpers/mod.rs.html\">mod.rs</a><a href=\"../../../src/test/helpers/shuffle.rs.html\">shuffle.rs</a></div></details><details class=\"dir-entry\"><summary>term</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>terminfo</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>parser</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../../src/test/term/terminfo/parser/compiled.rs.html\">compiled.rs</a></div></details></div><div class=\"files\"><a href=\"../../../src/test/term/terminfo/mod.rs.html\">mod.rs</a><a href=\"../../../src/test/term/terminfo/parm.rs.html\">parm.rs</a><a href=\"../../../src/test/term/terminfo/searcher.rs.html\">searcher.rs</a></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"><a href=\"../../../src/test/bench.rs.html\">bench.rs</a><a href=\"../../../src/test/cli.rs.html\">cli.rs</a><a href=\"../../../src/test/console.rs.html\">console.rs</a><a href=\"../../../src/test/event.rs.html\">event.rs</a><a href=\"../../../src/test/lib.rs.html\">lib.rs</a><a href=\"../../../src/test/options.rs.html\">options.rs</a><a href=\"../../../src/test/stats.rs.html\">stats.rs</a><a href=\"../../../src/test/term.rs.html\">term.rs</a><a href=\"../../../src/test/test_result.rs.html\">test_result.rs</a><a href=\"../../../src/test/time.rs.html\">time.rs</a><a href=\"../../../src/test/types.rs.html\">types.rs</a></div></details></div></nav><div class=\"sidebar-resizer\"></div><main><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../../core/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"example-wrap\"><div data-nosnippet=\"\"><pre class=\"src-line-numbers\"><a href=\"#1\" id=\"1\">1</a>\n<a href=\"#2\" id=\"2\">2</a>\n<a href=\"#3\" id=\"3\">3</a>\n<a href=\"#4\" id=\"4\">4</a>\n<a href=\"#5\" id=\"5\">5</a>\n<a href=\"#6\" id=\"6\">6</a>\n<a href=\"#7\" id=\"7\">7</a>\n<a href=\"#8\" id=\"8\">8</a>\n<a href=\"#9\" id=\"9\">9</a>\n<a href=\"#10\" id=\"10\">10</a>\n<a href=\"#11\" id=\"11\">11</a>\n<a href=\"#12\" id=\"12\">12</a>\n<a href=\"#13\" id=\"13\">13</a>\n<a href=\"#14\" id=\"14\">14</a>\n<a href=\"#15\" id=\"15\">15</a>\n<a href=\"#16\" id=\"16\">16</a>\n<a href=\"#17\" id=\"17\">17</a>\n<a href=\"#18\" id=\"18\">18</a>\n<a href=\"#19\" id=\"19\">19</a>\n<a href=\"#20\" id=\"20\">20</a>\n<a href=\"#21\" id=\"21\">21</a>\n<a href=\"#22\" id=\"22\">22</a>\n<a href=\"#23\" id=\"23\">23</a>\n<a href=\"#24\" id=\"24\">24</a>\n<a href=\"#25\" id=\"25\">25</a>\n<a href=\"#26\" id=\"26\">26</a>\n<a href=\"#27\" id=\"27\">27</a>\n<a href=\"#28\" id=\"28\">28</a>\n<a href=\"#29\" id=\"29\">29</a>\n<a href=\"#30\" id=\"30\">30</a>\n<a href=\"#31\" id=\"31\">31</a>\n<a href=\"#32\" id=\"32\">32</a>\n<a href=\"#33\" id=\"33\">33</a>\n<a href=\"#34\" id=\"34\">34</a>\n<a href=\"#35\" id=\"35\">35</a>\n<a href=\"#36\" id=\"36\">36</a>\n<a href=\"#37\" id=\"37\">37</a>\n<a href=\"#38\" id=\"38\">38</a>\n<a href=\"#39\" id=\"39\">39</a>\n<a href=\"#40\" id=\"40\">40</a>\n<a href=\"#41\" id=\"41\">41</a>\n<a href=\"#42\" id=\"42\">42</a>\n<a href=\"#43\" id=\"43\">43</a>\n<a href=\"#44\" id=\"44\">44</a>\n<a href=\"#45\" id=\"45\">45</a>\n<a href=\"#46\" id=\"46\">46</a>\n<a href=\"#47\" id=\"47\">47</a>\n<a href=\"#48\" id=\"48\">48</a>\n<a href=\"#49\" id=\"49\">49</a>\n<a href=\"#50\" id=\"50\">50</a>\n<a href=\"#51\" id=\"51\">51</a>\n<a href=\"#52\" id=\"52\">52</a>\n<a href=\"#53\" id=\"53\">53</a>\n<a href=\"#54\" id=\"54\">54</a>\n<a href=\"#55\" id=\"55\">55</a>\n<a href=\"#56\" id=\"56\">56</a>\n<a href=\"#57\" id=\"57\">57</a>\n<a href=\"#58\" id=\"58\">58</a>\n<a href=\"#59\" id=\"59\">59</a>\n<a href=\"#60\" id=\"60\">60</a>\n<a href=\"#61\" id=\"61\">61</a>\n<a href=\"#62\" id=\"62\">62</a>\n<a href=\"#63\" id=\"63\">63</a>\n<a href=\"#64\" id=\"64\">64</a>\n<a href=\"#65\" id=\"65\">65</a>\n<a href=\"#66\" id=\"66\">66</a>\n<a href=\"#67\" id=\"67\">67</a>\n<a href=\"#68\" id=\"68\">68</a>\n<a href=\"#69\" id=\"69\">69</a>\n<a href=\"#70\" id=\"70\">70</a>\n<a href=\"#71\" id=\"71\">71</a>\n<a href=\"#72\" id=\"72\">72</a>\n<a href=\"#73\" id=\"73\">73</a>\n<a href=\"#74\" id=\"74\">74</a>\n<a href=\"#75\" id=\"75\">75</a>\n<a href=\"#76\" id=\"76\">76</a>\n<a href=\"#77\" id=\"77\">77</a>\n<a href=\"#78\" id=\"78\">78</a>\n<a href=\"#79\" id=\"79\">79</a>\n<a href=\"#80\" id=\"80\">80</a>\n<a href=\"#81\" id=\"81\">81</a>\n<a href=\"#82\" id=\"82\">82</a>\n<a href=\"#83\" id=\"83\">83</a>\n<a href=\"#84\" id=\"84\">84</a>\n<a href=\"#85\" id=\"85\">85</a>\n<a href=\"#86\" id=\"86\">86</a>\n<a href=\"#87\" id=\"87\">87</a>\n<a href=\"#88\" id=\"88\">88</a>\n<a href=\"#89\" id=\"89\">89</a>\n<a href=\"#90\" id=\"90\">90</a>\n<a href=\"#91\" id=\"91\">91</a>\n<a href=\"#92\" id=\"92\">92</a>\n<a href=\"#93\" id=\"93\">93</a>\n<a href=\"#94\" id=\"94\">94</a>\n<a href=\"#95\" id=\"95\">95</a>\n<a href=\"#96\" id=\"96\">96</a>\n<a href=\"#97\" id=\"97\">97</a>\n<a href=\"#98\" id=\"98\">98</a>\n<a href=\"#99\" id=\"99\">99</a>\n<a href=\"#100\" id=\"100\">100</a>\n<a href=\"#101\" id=\"101\">101</a>\n<a href=\"#102\" id=\"102\">102</a>\n<a href=\"#103\" id=\"103\">103</a>\n<a href=\"#104\" id=\"104\">104</a>\n<a href=\"#105\" id=\"105\">105</a>\n<a href=\"#106\" id=\"106\">106</a>\n<a href=\"#107\" id=\"107\">107</a>\n<a href=\"#108\" id=\"108\">108</a>\n<a href=\"#109\" id=\"109\">109</a>\n<a href=\"#110\" id=\"110\">110</a>\n<a href=\"#111\" id=\"111\">111</a>\n<a href=\"#112\" id=\"112\">112</a>\n<a href=\"#113\" id=\"113\">113</a>\n<a href=\"#114\" id=\"114\">114</a>\n<a href=\"#115\" id=\"115\">115</a>\n<a href=\"#116\" id=\"116\">116</a>\n<a href=\"#117\" id=\"117\">117</a>\n<a href=\"#118\" id=\"118\">118</a>\n<a href=\"#119\" id=\"119\">119</a>\n<a href=\"#120\" id=\"120\">120</a>\n<a href=\"#121\" id=\"121\">121</a>\n<a href=\"#122\" id=\"122\">122</a>\n<a href=\"#123\" id=\"123\">123</a>\n<a href=\"#124\" id=\"124\">124</a>\n<a href=\"#125\" id=\"125\">125</a>\n<a href=\"#126\" id=\"126\">126</a>\n<a href=\"#127\" id=\"127\">127</a>\n<a href=\"#128\" id=\"128\">128</a>\n<a href=\"#129\" id=\"129\">129</a>\n<a href=\"#130\" id=\"130\">130</a>\n<a href=\"#131\" id=\"131\">131</a>\n<a href=\"#132\" id=\"132\">132</a>\n<a href=\"#133\" id=\"133\">133</a>\n<a href=\"#134\" id=\"134\">134</a>\n<a href=\"#135\" id=\"135\">135</a>\n<a href=\"#136\" id=\"136\">136</a>\n<a href=\"#137\" id=\"137\">137</a>\n<a href=\"#138\" id=\"138\">138</a>\n<a href=\"#139\" id=\"139\">139</a>\n<a href=\"#140\" id=\"140\">140</a>\n<a href=\"#141\" id=\"141\">141</a>\n<a href=\"#142\" id=\"142\">142</a>\n<a href=\"#143\" id=\"143\">143</a>\n<a href=\"#144\" id=\"144\">144</a>\n<a href=\"#145\" id=\"145\">145</a>\n<a href=\"#146\" id=\"146\">146</a>\n<a href=\"#147\" id=\"147\">147</a>\n<a href=\"#148\" id=\"148\">148</a>\n<a href=\"#149\" id=\"149\">149</a>\n<a href=\"#150\" id=\"150\">150</a>\n<a href=\"#151\" id=\"151\">151</a>\n<a href=\"#152\" id=\"152\">152</a>\n<a href=\"#153\" id=\"153\">153</a>\n<a href=\"#154\" id=\"154\">154</a>\n<a href=\"#155\" id=\"155\">155</a>\n<a href=\"#156\" id=\"156\">156</a>\n<a href=\"#157\" id=\"157\">157</a>\n<a href=\"#158\" id=\"158\">158</a>\n<a href=\"#159\" id=\"159\">159</a>\n<a href=\"#160\" id=\"160\">160</a>\n<a href=\"#161\" id=\"161\">161</a>\n<a href=\"#162\" id=\"162\">162</a>\n<a href=\"#163\" id=\"163\">163</a>\n<a href=\"#164\" id=\"164\">164</a>\n<a href=\"#165\" id=\"165\">165</a>\n<a href=\"#166\" id=\"166\">166</a>\n<a href=\"#167\" id=\"167\">167</a>\n<a href=\"#168\" id=\"168\">168</a>\n<a href=\"#169\" id=\"169\">169</a>\n<a href=\"#170\" id=\"170\">170</a>\n<a href=\"#171\" id=\"171\">171</a>\n<a href=\"#172\" id=\"172\">172</a>\n<a href=\"#173\" id=\"173\">173</a>\n<a href=\"#174\" id=\"174\">174</a>\n<a href=\"#175\" id=\"175\">175</a>\n<a href=\"#176\" id=\"176\">176</a>\n<a href=\"#177\" id=\"177\">177</a>\n<a href=\"#178\" id=\"178\">178</a>\n<a href=\"#179\" id=\"179\">179</a>\n<a href=\"#180\" id=\"180\">180</a>\n<a href=\"#181\" id=\"181\">181</a>\n<a href=\"#182\" id=\"182\">182</a>\n<a href=\"#183\" id=\"183\">183</a>\n<a href=\"#184\" id=\"184\">184</a>\n<a href=\"#185\" id=\"185\">185</a>\n<a href=\"#186\" id=\"186\">186</a>\n<a href=\"#187\" id=\"187\">187</a>\n<a href=\"#188\" id=\"188\">188</a>\n<a href=\"#189\" id=\"189\">189</a>\n<a href=\"#190\" id=\"190\">190</a>\n<a href=\"#191\" id=\"191\">191</a>\n<a href=\"#192\" id=\"192\">192</a>\n<a href=\"#193\" id=\"193\">193</a>\n<a href=\"#194\" id=\"194\">194</a>\n<a href=\"#195\" id=\"195\">195</a>\n<a href=\"#196\" id=\"196\">196</a>\n<a href=\"#197\" id=\"197\">197</a>\n<a href=\"#198\" id=\"198\">198</a>\n<a href=\"#199\" id=\"199\">199</a>\n<a href=\"#200\" id=\"200\">200</a>\n<a href=\"#201\" id=\"201\">201</a>\n<a href=\"#202\" id=\"202\">202</a>\n<a href=\"#203\" id=\"203\">203</a>\n<a href=\"#204\" id=\"204\">204</a>\n<a href=\"#205\" id=\"205\">205</a>\n<a href=\"#206\" id=\"206\">206</a>\n<a href=\"#207\" id=\"207\">207</a>\n<a href=\"#208\" id=\"208\">208</a>\n<a href=\"#209\" id=\"209\">209</a>\n<a href=\"#210\" id=\"210\">210</a>\n<a href=\"#211\" id=\"211\">211</a>\n<a href=\"#212\" id=\"212\">212</a>\n<a href=\"#213\" id=\"213\">213</a>\n<a href=\"#214\" id=\"214\">214</a>\n<a href=\"#215\" id=\"215\">215</a>\n<a href=\"#216\" id=\"216\">216</a>\n<a href=\"#217\" id=\"217\">217</a>\n<a href=\"#218\" id=\"218\">218</a>\n<a href=\"#219\" id=\"219\">219</a>\n<a href=\"#220\" id=\"220\">220</a>\n<a href=\"#221\" id=\"221\">221</a>\n<a href=\"#222\" id=\"222\">222</a>\n<a href=\"#223\" id=\"223\">223</a>\n<a href=\"#224\" id=\"224\">224</a>\n<a href=\"#225\" id=\"225\">225</a>\n<a href=\"#226\" id=\"226\">226</a>\n<a href=\"#227\" id=\"227\">227</a>\n<a href=\"#228\" id=\"228\">228</a>\n<a href=\"#229\" id=\"229\">229</a>\n<a href=\"#230\" id=\"230\">230</a>\n<a href=\"#231\" id=\"231\">231</a>\n<a href=\"#232\" id=\"232\">232</a>\n<a href=\"#233\" id=\"233\">233</a>\n<a href=\"#234\" id=\"234\">234</a>\n<a href=\"#235\" id=\"235\">235</a>\n<a href=\"#236\" id=\"236\">236</a>\n<a href=\"#237\" id=\"237\">237</a>\n<a href=\"#238\" id=\"238\">238</a>\n<a href=\"#239\" id=\"239\">239</a>\n<a href=\"#240\" id=\"240\">240</a>\n<a href=\"#241\" id=\"241\">241</a>\n<a href=\"#242\" id=\"242\">242</a>\n<a href=\"#243\" id=\"243\">243</a>\n<a href=\"#244\" id=\"244\">244</a>\n<a href=\"#245\" id=\"245\">245</a>\n<a href=\"#246\" id=\"246\">246</a>\n<a href=\"#247\" id=\"247\">247</a>\n<a href=\"#248\" id=\"248\">248</a>\n<a href=\"#249\" id=\"249\">249</a>\n<a href=\"#250\" id=\"250\">250</a>\n<a href=\"#251\" id=\"251\">251</a>\n<a href=\"#252\" id=\"252\">252</a>\n<a href=\"#253\" id=\"253\">253</a>\n<a href=\"#254\" id=\"254\">254</a>\n<a href=\"#255\" id=\"255\">255</a>\n<a href=\"#256\" id=\"256\">256</a>\n<a href=\"#257\" id=\"257\">257</a>\n<a href=\"#258\" id=\"258\">258</a>\n<a href=\"#259\" id=\"259\">259</a>\n<a href=\"#260\" id=\"260\">260</a>\n<a href=\"#261\" id=\"261\">261</a>\n<a href=\"#262\" id=\"262\">262</a>\n<a href=\"#263\" id=\"263\">263</a>\n<a href=\"#264\" id=\"264\">264</a>\n<a href=\"#265\" id=\"265\">265</a>\n<a href=\"#266\" id=\"266\">266</a>\n<a href=\"#267\" id=\"267\">267</a>\n<a href=\"#268\" id=\"268\">268</a>\n<a href=\"#269\" id=\"269\">269</a>\n<a href=\"#270\" id=\"270\">270</a>\n<a href=\"#271\" id=\"271\">271</a>\n<a href=\"#272\" id=\"272\">272</a>\n<a href=\"#273\" id=\"273\">273</a>\n<a href=\"#274\" id=\"274\">274</a>\n<a href=\"#275\" id=\"275\">275</a>\n<a href=\"#276\" id=\"276\">276</a>\n<a href=\"#277\" id=\"277\">277</a>\n<a href=\"#278\" id=\"278\">278</a>\n<a href=\"#279\" id=\"279\">279</a>\n<a href=\"#280\" id=\"280\">280</a>\n<a href=\"#281\" id=\"281\">281</a>\n<a href=\"#282\" id=\"282\">282</a>\n<a href=\"#283\" id=\"283\">283</a>\n<a href=\"#284\" id=\"284\">284</a>\n<a href=\"#285\" id=\"285\">285</a>\n<a href=\"#286\" id=\"286\">286</a>\n<a href=\"#287\" id=\"287\">287</a>\n<a href=\"#288\" id=\"288\">288</a>\n<a href=\"#289\" id=\"289\">289</a>\n<a href=\"#290\" id=\"290\">290</a>\n<a href=\"#291\" id=\"291\">291</a>\n<a href=\"#292\" id=\"292\">292</a>\n<a href=\"#293\" id=\"293\">293</a>\n<a href=\"#294\" id=\"294\">294</a>\n<a href=\"#295\" id=\"295\">295</a>\n<a href=\"#296\" id=\"296\">296</a>\n<a href=\"#297\" id=\"297\">297</a>\n<a href=\"#298\" id=\"298\">298</a>\n<a href=\"#299\" id=\"299\">299</a>\n<a href=\"#300\" id=\"300\">300</a>\n<a href=\"#301\" id=\"301\">301</a>\n<a href=\"#302\" id=\"302\">302</a>\n<a href=\"#303\" id=\"303\">303</a>\n<a href=\"#304\" id=\"304\">304</a>\n<a href=\"#305\" id=\"305\">305</a>\n<a href=\"#306\" id=\"306\">306</a>\n<a href=\"#307\" id=\"307\">307</a>\n<a href=\"#308\" id=\"308\">308</a>\n<a href=\"#309\" id=\"309\">309</a>\n<a href=\"#310\" id=\"310\">310</a>\n<a href=\"#311\" id=\"311\">311</a>\n<a href=\"#312\" id=\"312\">312</a>\n<a href=\"#313\" id=\"313\">313</a>\n<a href=\"#314\" id=\"314\">314</a>\n<a href=\"#315\" id=\"315\">315</a>\n<a href=\"#316\" id=\"316\">316</a>\n<a href=\"#317\" id=\"317\">317</a>\n<a href=\"#318\" id=\"318\">318</a>\n<a href=\"#319\" id=\"319\">319</a>\n<a href=\"#320\" id=\"320\">320</a>\n<a href=\"#321\" id=\"321\">321</a>\n<a href=\"#322\" id=\"322\">322</a>\n<a href=\"#323\" id=\"323\">323</a>\n<a href=\"#324\" id=\"324\">324</a>\n<a href=\"#325\" id=\"325\">325</a>\n<a href=\"#326\" id=\"326\">326</a>\n<a href=\"#327\" id=\"327\">327</a>\n<a href=\"#328\" id=\"328\">328</a>\n<a href=\"#329\" id=\"329\">329</a>\n<a href=\"#330\" id=\"330\">330</a>\n<a href=\"#331\" id=\"331\">331</a>\n<a href=\"#332\" id=\"332\">332</a>\n<a href=\"#333\" id=\"333\">333</a>\n<a href=\"#334\" id=\"334\">334</a>\n<a href=\"#335\" id=\"335\">335</a>\n<a href=\"#336\" id=\"336\">336</a>\n<a href=\"#337\" id=\"337\">337</a>\n<a href=\"#338\" id=\"338\">338</a>\n<a href=\"#339\" id=\"339\">339</a>\n<a href=\"#340\" id=\"340\">340</a>\n<a href=\"#341\" id=\"341\">341</a>\n<a href=\"#342\" id=\"342\">342</a>\n<a href=\"#343\" id=\"343\">343</a>\n<a href=\"#344\" id=\"344\">344</a>\n<a href=\"#345\" id=\"345\">345</a>\n<a href=\"#346\" id=\"346\">346</a>\n<a href=\"#347\" id=\"347\">347</a>\n<a href=\"#348\" id=\"348\">348</a>\n<a href=\"#349\" id=\"349\">349</a>\n<a href=\"#350\" id=\"350\">350</a>\n<a href=\"#351\" id=\"351\">351</a>\n<a href=\"#352\" id=\"352\">352</a>\n<a href=\"#353\" id=\"353\">353</a>\n<a href=\"#354\" id=\"354\">354</a>\n<a href=\"#355\" id=\"355\">355</a>\n<a href=\"#356\" id=\"356\">356</a>\n<a href=\"#357\" id=\"357\">357</a>\n<a href=\"#358\" id=\"358\">358</a>\n<a href=\"#359\" id=\"359\">359</a>\n<a href=\"#360\" id=\"360\">360</a>\n<a href=\"#361\" id=\"361\">361</a>\n<a href=\"#362\" id=\"362\">362</a>\n<a href=\"#363\" id=\"363\">363</a>\n<a href=\"#364\" id=\"364\">364</a>\n<a href=\"#365\" id=\"365\">365</a>\n<a href=\"#366\" id=\"366\">366</a>\n<a href=\"#367\" id=\"367\">367</a>\n<a href=\"#368\" id=\"368\">368</a>\n<a href=\"#369\" id=\"369\">369</a>\n<a href=\"#370\" id=\"370\">370</a>\n<a href=\"#371\" id=\"371\">371</a>\n<a href=\"#372\" id=\"372\">372</a>\n<a href=\"#373\" id=\"373\">373</a>\n<a href=\"#374\" id=\"374\">374</a>\n<a href=\"#375\" id=\"375\">375</a>\n<a href=\"#376\" id=\"376\">376</a>\n<a href=\"#377\" id=\"377\">377</a>\n<a href=\"#378\" id=\"378\">378</a>\n<a href=\"#379\" id=\"379\">379</a>\n<a href=\"#380\" id=\"380\">380</a>\n<a href=\"#381\" id=\"381\">381</a>\n<a href=\"#382\" id=\"382\">382</a>\n<a href=\"#383\" id=\"383\">383</a>\n<a href=\"#384\" id=\"384\">384</a>\n<a href=\"#385\" id=\"385\">385</a>\n<a href=\"#386\" id=\"386\">386</a>\n<a href=\"#387\" id=\"387\">387</a>\n<a href=\"#388\" id=\"388\">388</a>\n<a href=\"#389\" id=\"389\">389</a>\n<a href=\"#390\" id=\"390\">390</a>\n<a href=\"#391\" id=\"391\">391</a>\n<a href=\"#392\" id=\"392\">392</a>\n<a href=\"#393\" id=\"393\">393</a>\n<a href=\"#394\" id=\"394\">394</a>\n<a href=\"#395\" id=\"395\">395</a>\n<a href=\"#396\" id=\"396\">396</a>\n<a href=\"#397\" id=\"397\">397</a>\n<a href=\"#398\" id=\"398\">398</a>\n<a href=\"#399\" id=\"399\">399</a>\n<a href=\"#400\" id=\"400\">400</a>\n<a href=\"#401\" id=\"401\">401</a>\n<a href=\"#402\" id=\"402\">402</a>\n<a href=\"#403\" id=\"403\">403</a>\n<a href=\"#404\" id=\"404\">404</a>\n<a href=\"#405\" id=\"405\">405</a>\n<a href=\"#406\" id=\"406\">406</a>\n<a href=\"#407\" id=\"407\">407</a>\n<a href=\"#408\" id=\"408\">408</a>\n<a href=\"#409\" id=\"409\">409</a>\n<a href=\"#410\" id=\"410\">410</a>\n<a href=\"#411\" id=\"411\">411</a>\n<a href=\"#412\" id=\"412\">412</a>\n<a href=\"#413\" id=\"413\">413</a>\n<a href=\"#414\" id=\"414\">414</a>\n<a href=\"#415\" id=\"415\">415</a>\n<a href=\"#416\" id=\"416\">416</a>\n<a href=\"#417\" id=\"417\">417</a>\n<a href=\"#418\" id=\"418\">418</a>\n<a href=\"#419\" id=\"419\">419</a>\n<a href=\"#420\" id=\"420\">420</a>\n<a href=\"#421\" id=\"421\">421</a>\n<a href=\"#422\" id=\"422\">422</a>\n<a href=\"#423\" id=\"423\">423</a>\n<a href=\"#424\" id=\"424\">424</a>\n<a href=\"#425\" id=\"425\">425</a>\n<a href=\"#426\" id=\"426\">426</a>\n<a href=\"#427\" id=\"427\">427</a>\n<a href=\"#428\" id=\"428\">428</a>\n<a href=\"#429\" id=\"429\">429</a>\n<a href=\"#430\" id=\"430\">430</a>\n<a href=\"#431\" id=\"431\">431</a>\n<a href=\"#432\" id=\"432\">432</a>\n<a href=\"#433\" id=\"433\">433</a>\n<a href=\"#434\" id=\"434\">434</a>\n<a href=\"#435\" id=\"435\">435</a>\n<a href=\"#436\" id=\"436\">436</a>\n<a href=\"#437\" id=\"437\">437</a>\n<a href=\"#438\" id=\"438\">438</a>\n<a href=\"#439\" id=\"439\">439</a>\n<a href=\"#440\" id=\"440\">440</a>\n<a href=\"#441\" id=\"441\">441</a>\n<a href=\"#442\" id=\"442\">442</a>\n<a href=\"#443\" id=\"443\">443</a>\n<a href=\"#444\" id=\"444\">444</a>\n<a href=\"#445\" id=\"445\">445</a>\n<a href=\"#446\" id=\"446\">446</a>\n<a href=\"#447\" id=\"447\">447</a>\n<a href=\"#448\" id=\"448\">448</a>\n<a href=\"#449\" id=\"449\">449</a>\n<a href=\"#450\" id=\"450\">450</a>\n<a href=\"#451\" id=\"451\">451</a>\n<a href=\"#452\" id=\"452\">452</a>\n<a href=\"#453\" id=\"453\">453</a>\n<a href=\"#454\" id=\"454\">454</a>\n<a href=\"#455\" id=\"455\">455</a>\n<a href=\"#456\" id=\"456\">456</a>\n<a href=\"#457\" id=\"457\">457</a>\n<a href=\"#458\" id=\"458\">458</a>\n<a href=\"#459\" id=\"459\">459</a>\n<a href=\"#460\" id=\"460\">460</a>\n<a href=\"#461\" id=\"461\">461</a>\n<a href=\"#462\" id=\"462\">462</a>\n<a href=\"#463\" id=\"463\">463</a>\n<a href=\"#464\" id=\"464\">464</a>\n<a href=\"#465\" id=\"465\">465</a>\n<a href=\"#466\" id=\"466\">466</a>\n<a href=\"#467\" id=\"467\">467</a>\n<a href=\"#468\" id=\"468\">468</a>\n<a href=\"#469\" id=\"469\">469</a>\n<a href=\"#470\" id=\"470\">470</a>\n<a href=\"#471\" id=\"471\">471</a>\n<a href=\"#472\" id=\"472\">472</a>\n<a href=\"#473\" id=\"473\">473</a>\n<a href=\"#474\" id=\"474\">474</a>\n<a href=\"#475\" id=\"475\">475</a>\n<a href=\"#476\" id=\"476\">476</a>\n<a href=\"#477\" id=\"477\">477</a>\n<a href=\"#478\" id=\"478\">478</a>\n<a href=\"#479\" id=\"479\">479</a>\n<a href=\"#480\" id=\"480\">480</a>\n<a href=\"#481\" id=\"481\">481</a>\n<a href=\"#482\" id=\"482\">482</a>\n<a href=\"#483\" id=\"483\">483</a>\n<a href=\"#484\" id=\"484\">484</a>\n<a href=\"#485\" id=\"485\">485</a>\n<a href=\"#486\" id=\"486\">486</a>\n<a href=\"#487\" id=\"487\">487</a>\n<a href=\"#488\" id=\"488\">488</a>\n<a href=\"#489\" id=\"489\">489</a>\n<a href=\"#490\" id=\"490\">490</a>\n<a href=\"#491\" id=\"491\">491</a>\n<a href=\"#492\" id=\"492\">492</a>\n<a href=\"#493\" id=\"493\">493</a>\n<a href=\"#494\" id=\"494\">494</a>\n<a href=\"#495\" id=\"495\">495</a>\n<a href=\"#496\" id=\"496\">496</a>\n<a href=\"#497\" id=\"497\">497</a>\n<a href=\"#498\" id=\"498\">498</a>\n<a href=\"#499\" id=\"499\">499</a>\n<a href=\"#500\" id=\"500\">500</a>\n<a href=\"#501\" id=\"501\">501</a>\n<a href=\"#502\" id=\"502\">502</a>\n<a href=\"#503\" id=\"503\">503</a>\n<a href=\"#504\" id=\"504\">504</a>\n<a href=\"#505\" id=\"505\">505</a>\n<a href=\"#506\" id=\"506\">506</a>\n<a href=\"#507\" id=\"507\">507</a>\n<a href=\"#508\" id=\"508\">508</a>\n<a href=\"#509\" id=\"509\">509</a>\n<a href=\"#510\" id=\"510\">510</a>\n<a href=\"#511\" id=\"511\">511</a>\n<a href=\"#512\" id=\"512\">512</a>\n<a href=\"#513\" id=\"513\">513</a>\n<a href=\"#514\" id=\"514\">514</a>\n<a href=\"#515\" id=\"515\">515</a>\n<a href=\"#516\" id=\"516\">516</a>\n<a href=\"#517\" id=\"517\">517</a>\n<a href=\"#518\" id=\"518\">518</a>\n<a href=\"#519\" id=\"519\">519</a>\n<a href=\"#520\" id=\"520\">520</a>\n<a href=\"#521\" id=\"521\">521</a>\n<a href=\"#522\" id=\"522\">522</a>\n<a href=\"#523\" id=\"523\">523</a>\n<a href=\"#524\" id=\"524\">524</a>\n<a href=\"#525\" id=\"525\">525</a>\n<a href=\"#526\" id=\"526\">526</a>\n<a href=\"#527\" id=\"527\">527</a>\n<a href=\"#528\" id=\"528\">528</a>\n<a href=\"#529\" id=\"529\">529</a>\n<a href=\"#530\" id=\"530\">530</a>\n<a href=\"#531\" id=\"531\">531</a>\n<a href=\"#532\" id=\"532\">532</a>\n<a href=\"#533\" id=\"533\">533</a>\n<a href=\"#534\" id=\"534\">534</a>\n<a href=\"#535\" id=\"535\">535</a>\n<a href=\"#536\" id=\"536\">536</a>\n<a href=\"#537\" id=\"537\">537</a>\n<a href=\"#538\" id=\"538\">538</a>\n<a href=\"#539\" id=\"539\">539</a>\n<a href=\"#540\" id=\"540\">540</a>\n<a href=\"#541\" id=\"541\">541</a>\n<a href=\"#542\" id=\"542\">542</a>\n<a href=\"#543\" id=\"543\">543</a>\n<a href=\"#544\" id=\"544\">544</a>\n<a href=\"#545\" id=\"545\">545</a>\n<a href=\"#546\" id=\"546\">546</a>\n<a href=\"#547\" id=\"547\">547</a>\n<a href=\"#548\" id=\"548\">548</a>\n<a href=\"#549\" id=\"549\">549</a>\n<a href=\"#550\" id=\"550\">550</a>\n<a href=\"#551\" id=\"551\">551</a>\n<a href=\"#552\" id=\"552\">552</a>\n<a href=\"#553\" id=\"553\">553</a>\n<a href=\"#554\" id=\"554\">554</a>\n<a href=\"#555\" id=\"555\">555</a>\n<a href=\"#556\" id=\"556\">556</a>\n<a href=\"#557\" id=\"557\">557</a>\n<a href=\"#558\" id=\"558\">558</a>\n<a href=\"#559\" id=\"559\">559</a>\n<a href=\"#560\" id=\"560\">560</a>\n<a href=\"#561\" id=\"561\">561</a>\n<a href=\"#562\" id=\"562\">562</a>\n<a href=\"#563\" id=\"563\">563</a>\n<a href=\"#564\" id=\"564\">564</a>\n<a href=\"#565\" id=\"565\">565</a>\n<a href=\"#566\" id=\"566\">566</a>\n<a href=\"#567\" id=\"567\">567</a>\n<a href=\"#568\" id=\"568\">568</a>\n<a href=\"#569\" id=\"569\">569</a>\n<a href=\"#570\" id=\"570\">570</a>\n<a href=\"#571\" id=\"571\">571</a>\n<a href=\"#572\" id=\"572\">572</a>\n<a href=\"#573\" id=\"573\">573</a>\n<a href=\"#574\" id=\"574\">574</a>\n<a href=\"#575\" id=\"575\">575</a>\n<a href=\"#576\" id=\"576\">576</a>\n<a href=\"#577\" id=\"577\">577</a>\n<a href=\"#578\" id=\"578\">578</a>\n<a href=\"#579\" id=\"579\">579</a>\n<a href=\"#580\" id=\"580\">580</a>\n<a href=\"#581\" id=\"581\">581</a>\n<a href=\"#582\" id=\"582\">582</a>\n<a href=\"#583\" id=\"583\">583</a>\n<a href=\"#584\" id=\"584\">584</a>\n<a href=\"#585\" id=\"585\">585</a>\n<a href=\"#586\" id=\"586\">586</a>\n<a href=\"#587\" id=\"587\">587</a>\n<a href=\"#588\" id=\"588\">588</a>\n<a href=\"#589\" id=\"589\">589</a>\n<a href=\"#590\" id=\"590\">590</a>\n<a href=\"#591\" id=\"591\">591</a>\n<a href=\"#592\" id=\"592\">592</a>\n<a href=\"#593\" id=\"593\">593</a>\n<a href=\"#594\" id=\"594\">594</a>\n<a href=\"#595\" id=\"595\">595</a>\n<a href=\"#596\" id=\"596\">596</a>\n<a href=\"#597\" id=\"597\">597</a>\n<a href=\"#598\" id=\"598\">598</a>\n<a href=\"#599\" id=\"599\">599</a>\n<a href=\"#600\" id=\"600\">600</a>\n<a href=\"#601\" id=\"601\">601</a>\n<a href=\"#602\" id=\"602\">602</a>\n<a href=\"#603\" id=\"603\">603</a>\n<a href=\"#604\" id=\"604\">604</a>\n<a href=\"#605\" id=\"605\">605</a>\n<a href=\"#606\" id=\"606\">606</a>\n<a href=\"#607\" id=\"607\">607</a>\n<a href=\"#608\" id=\"608\">608</a>\n<a href=\"#609\" id=\"609\">609</a>\n<a href=\"#610\" id=\"610\">610</a>\n<a href=\"#611\" id=\"611\">611</a>\n<a href=\"#612\" id=\"612\">612</a>\n<a href=\"#613\" id=\"613\">613</a>\n<a href=\"#614\" id=\"614\">614</a>\n<a href=\"#615\" id=\"615\">615</a>\n<a href=\"#616\" id=\"616\">616</a>\n<a href=\"#617\" id=\"617\">617</a>\n<a href=\"#618\" id=\"618\">618</a>\n<a href=\"#619\" id=\"619\">619</a>\n<a href=\"#620\" id=\"620\">620</a>\n<a href=\"#621\" id=\"621\">621</a>\n<a href=\"#622\" id=\"622\">622</a>\n<a href=\"#623\" id=\"623\">623</a>\n<a href=\"#624\" id=\"624\">624</a>\n<a href=\"#625\" id=\"625\">625</a>\n<a href=\"#626\" id=\"626\">626</a>\n<a href=\"#627\" id=\"627\">627</a>\n<a href=\"#628\" id=\"628\">628</a>\n<a href=\"#629\" id=\"629\">629</a>\n<a href=\"#630\" id=\"630\">630</a>\n<a href=\"#631\" id=\"631\">631</a>\n<a href=\"#632\" id=\"632\">632</a>\n<a href=\"#633\" id=\"633\">633</a>\n<a href=\"#634\" id=\"634\">634</a>\n<a href=\"#635\" id=\"635\">635</a>\n<a href=\"#636\" id=\"636\">636</a>\n<a href=\"#637\" id=\"637\">637</a>\n<a href=\"#638\" id=\"638\">638</a>\n<a href=\"#639\" id=\"639\">639</a>\n<a href=\"#640\" id=\"640\">640</a>\n<a href=\"#641\" id=\"641\">641</a>\n<a href=\"#642\" id=\"642\">642</a>\n<a href=\"#643\" id=\"643\">643</a>\n<a href=\"#644\" id=\"644\">644</a>\n<a href=\"#645\" id=\"645\">645</a>\n<a href=\"#646\" id=\"646\">646</a>\n<a href=\"#647\" id=\"647\">647</a>\n<a href=\"#648\" id=\"648\">648</a>\n<a href=\"#649\" id=\"649\">649</a>\n<a href=\"#650\" id=\"650\">650</a>\n<a href=\"#651\" id=\"651\">651</a>\n<a href=\"#652\" id=\"652\">652</a>\n<a href=\"#653\" id=\"653\">653</a>\n<a href=\"#654\" id=\"654\">654</a>\n<a href=\"#655\" id=\"655\">655</a>\n<a href=\"#656\" id=\"656\">656</a>\n<a href=\"#657\" id=\"657\">657</a>\n<a href=\"#658\" id=\"658\">658</a>\n<a href=\"#659\" id=\"659\">659</a>\n<a href=\"#660\" id=\"660\">660</a>\n<a href=\"#661\" id=\"661\">661</a>\n<a href=\"#662\" id=\"662\">662</a>\n<a href=\"#663\" id=\"663\">663</a>\n<a href=\"#664\" id=\"664\">664</a>\n<a href=\"#665\" id=\"665\">665</a>\n<a href=\"#666\" id=\"666\">666</a>\n<a href=\"#667\" id=\"667\">667</a>\n<a href=\"#668\" id=\"668\">668</a>\n<a href=\"#669\" id=\"669\">669</a>\n<a href=\"#670\" id=\"670\">670</a>\n<a href=\"#671\" id=\"671\">671</a>\n<a href=\"#672\" id=\"672\">672</a>\n<a href=\"#673\" id=\"673\">673</a>\n<a href=\"#674\" id=\"674\">674</a>\n<a href=\"#675\" id=\"675\">675</a>\n<a href=\"#676\" id=\"676\">676</a>\n<a href=\"#677\" id=\"677\">677</a>\n<a href=\"#678\" id=\"678\">678</a>\n<a href=\"#679\" id=\"679\">679</a>\n<a href=\"#680\" id=\"680\">680</a>\n<a href=\"#681\" id=\"681\">681</a>\n<a href=\"#682\" id=\"682\">682</a>\n<a href=\"#683\" id=\"683\">683</a>\n<a href=\"#684\" id=\"684\">684</a>\n<a href=\"#685\" id=\"685\">685</a>\n<a href=\"#686\" id=\"686\">686</a>\n<a href=\"#687\" id=\"687\">687</a>\n<a href=\"#688\" id=\"688\">688</a>\n<a href=\"#689\" id=\"689\">689</a>\n<a href=\"#690\" id=\"690\">690</a>\n<a href=\"#691\" id=\"691\">691</a>\n<a href=\"#692\" id=\"692\">692</a>\n<a href=\"#693\" id=\"693\">693</a>\n<a href=\"#694\" id=\"694\">694</a>\n<a href=\"#695\" id=\"695\">695</a>\n<a href=\"#696\" id=\"696\">696</a>\n<a href=\"#697\" id=\"697\">697</a>\n<a href=\"#698\" id=\"698\">698</a>\n<a href=\"#699\" id=\"699\">699</a>\n<a href=\"#700\" id=\"700\">700</a>\n<a href=\"#701\" id=\"701\">701</a>\n<a href=\"#702\" id=\"702\">702</a>\n<a href=\"#703\" id=\"703\">703</a>\n<a href=\"#704\" id=\"704\">704</a>\n<a href=\"#705\" id=\"705\">705</a>\n<a href=\"#706\" id=\"706\">706</a>\n<a href=\"#707\" id=\"707\">707</a>\n<a href=\"#708\" id=\"708\">708</a>\n<a href=\"#709\" id=\"709\">709</a>\n<a href=\"#710\" id=\"710\">710</a>\n<a href=\"#711\" id=\"711\">711</a>\n<a href=\"#712\" id=\"712\">712</a>\n<a href=\"#713\" id=\"713\">713</a>\n<a href=\"#714\" id=\"714\">714</a>\n<a href=\"#715\" id=\"715\">715</a>\n<a href=\"#716\" id=\"716\">716</a>\n<a href=\"#717\" id=\"717\">717</a>\n<a href=\"#718\" id=\"718\">718</a>\n<a href=\"#719\" id=\"719\">719</a>\n<a href=\"#720\" id=\"720\">720</a>\n<a href=\"#721\" id=\"721\">721</a>\n<a href=\"#722\" id=\"722\">722</a>\n<a href=\"#723\" id=\"723\">723</a>\n<a href=\"#724\" id=\"724\">724</a>\n<a href=\"#725\" id=\"725\">725</a>\n<a href=\"#726\" id=\"726\">726</a>\n<a href=\"#727\" id=\"727\">727</a>\n<a href=\"#728\" id=\"728\">728</a>\n<a href=\"#729\" id=\"729\">729</a>\n<a href=\"#730\" id=\"730\">730</a>\n<a href=\"#731\" id=\"731\">731</a>\n<a href=\"#732\" id=\"732\">732</a>\n<a href=\"#733\" id=\"733\">733</a>\n<a href=\"#734\" id=\"734\">734</a>\n<a href=\"#735\" id=\"735\">735</a>\n<a href=\"#736\" id=\"736\">736</a>\n<a href=\"#737\" id=\"737\">737</a>\n<a href=\"#738\" id=\"738\">738</a>\n<a href=\"#739\" id=\"739\">739</a>\n<a href=\"#740\" id=\"740\">740</a>\n<a href=\"#741\" id=\"741\">741</a>\n<a href=\"#742\" id=\"742\">742</a>\n<a href=\"#743\" id=\"743\">743</a>\n<a href=\"#744\" id=\"744\">744</a>\n<a href=\"#745\" id=\"745\">745</a>\n<a href=\"#746\" id=\"746\">746</a>\n<a href=\"#747\" id=\"747\">747</a>\n<a href=\"#748\" id=\"748\">748</a>\n<a href=\"#749\" id=\"749\">749</a>\n<a href=\"#750\" id=\"750\">750</a>\n<a href=\"#751\" id=\"751\">751</a>\n<a href=\"#752\" id=\"752\">752</a>\n<a href=\"#753\" id=\"753\">753</a>\n<a href=\"#754\" id=\"754\">754</a>\n<a href=\"#755\" id=\"755\">755</a>\n<a href=\"#756\" id=\"756\">756</a>\n<a href=\"#757\" id=\"757\">757</a>\n<a href=\"#758\" id=\"758\">758</a>\n<a href=\"#759\" id=\"759\">759</a>\n<a href=\"#760\" id=\"760\">760</a>\n<a href=\"#761\" id=\"761\">761</a>\n<a href=\"#762\" id=\"762\">762</a>\n<a href=\"#763\" id=\"763\">763</a>\n<a href=\"#764\" id=\"764\">764</a>\n<a href=\"#765\" id=\"765\">765</a>\n<a href=\"#766\" id=\"766\">766</a>\n<a href=\"#767\" id=\"767\">767</a>\n<a href=\"#768\" id=\"768\">768</a>\n<a href=\"#769\" id=\"769\">769</a>\n<a href=\"#770\" id=\"770\">770</a>\n<a href=\"#771\" id=\"771\">771</a>\n<a href=\"#772\" id=\"772\">772</a>\n<a href=\"#773\" id=\"773\">773</a>\n<a href=\"#774\" id=\"774\">774</a>\n<a href=\"#775\" id=\"775\">775</a>\n<a href=\"#776\" id=\"776\">776</a>\n<a href=\"#777\" id=\"777\">777</a>\n<a href=\"#778\" id=\"778\">778</a>\n<a href=\"#779\" id=\"779\">779</a>\n<a href=\"#780\" id=\"780\">780</a>\n<a href=\"#781\" id=\"781\">781</a>\n<a href=\"#782\" id=\"782\">782</a>\n<a href=\"#783\" id=\"783\">783</a>\n<a href=\"#784\" id=\"784\">784</a>\n<a href=\"#785\" id=\"785\">785</a>\n<a href=\"#786\" id=\"786\">786</a>\n<a href=\"#787\" id=\"787\">787</a>\n<a href=\"#788\" id=\"788\">788</a>\n<a href=\"#789\" id=\"789\">789</a>\n<a href=\"#790\" id=\"790\">790</a>\n<a href=\"#791\" id=\"791\">791</a>\n<a href=\"#792\" id=\"792\">792</a>\n<a href=\"#793\" id=\"793\">793</a>\n<a href=\"#794\" id=\"794\">794</a>\n<a href=\"#795\" id=\"795\">795</a>\n<a href=\"#796\" id=\"796\">796</a>\n<a href=\"#797\" id=\"797\">797</a>\n<a href=\"#798\" id=\"798\">798</a>\n<a href=\"#799\" id=\"799\">799</a>\n<a href=\"#800\" id=\"800\">800</a>\n<a href=\"#801\" id=\"801\">801</a>\n<a href=\"#802\" id=\"802\">802</a>\n<a href=\"#803\" id=\"803\">803</a>\n<a href=\"#804\" id=\"804\">804</a>\n<a href=\"#805\" id=\"805\">805</a>\n<a href=\"#806\" id=\"806\">806</a>\n<a href=\"#807\" id=\"807\">807</a>\n<a href=\"#808\" id=\"808\">808</a>\n<a href=\"#809\" id=\"809\">809</a>\n<a href=\"#810\" id=\"810\">810</a>\n<a href=\"#811\" id=\"811\">811</a>\n<a href=\"#812\" id=\"812\">812</a>\n<a href=\"#813\" id=\"813\">813</a>\n<a href=\"#814\" id=\"814\">814</a>\n<a href=\"#815\" id=\"815\">815</a>\n<a href=\"#816\" id=\"816\">816</a>\n<a href=\"#817\" id=\"817\">817</a>\n<a href=\"#818\" id=\"818\">818</a>\n<a href=\"#819\" id=\"819\">819</a>\n<a href=\"#820\" id=\"820\">820</a>\n<a href=\"#821\" id=\"821\">821</a>\n<a href=\"#822\" id=\"822\">822</a>\n<a href=\"#823\" id=\"823\">823</a>\n<a href=\"#824\" id=\"824\">824</a>\n<a href=\"#825\" id=\"825\">825</a>\n<a href=\"#826\" id=\"826\">826</a>\n<a href=\"#827\" id=\"827\">827</a>\n<a href=\"#828\" id=\"828\">828</a>\n<a href=\"#829\" id=\"829\">829</a>\n<a href=\"#830\" id=\"830\">830</a>\n<a href=\"#831\" id=\"831\">831</a>\n<a href=\"#832\" id=\"832\">832</a>\n<a href=\"#833\" id=\"833\">833</a>\n<a href=\"#834\" id=\"834\">834</a>\n<a href=\"#835\" id=\"835\">835</a>\n<a href=\"#836\" id=\"836\">836</a>\n<a href=\"#837\" id=\"837\">837</a>\n<a href=\"#838\" id=\"838\">838</a>\n<a href=\"#839\" id=\"839\">839</a>\n<a href=\"#840\" id=\"840\">840</a>\n<a href=\"#841\" id=\"841\">841</a>\n<a href=\"#842\" id=\"842\">842</a>\n<a href=\"#843\" id=\"843\">843</a>\n<a href=\"#844\" id=\"844\">844</a>\n<a href=\"#845\" id=\"845\">845</a>\n<a href=\"#846\" id=\"846\">846</a>\n<a href=\"#847\" id=\"847\">847</a>\n<a href=\"#848\" id=\"848\">848</a>\n<a href=\"#849\" id=\"849\">849</a>\n<a href=\"#850\" id=\"850\">850</a>\n<a href=\"#851\" id=\"851\">851</a>\n<a href=\"#852\" id=\"852\">852</a>\n<a href=\"#853\" id=\"853\">853</a>\n<a href=\"#854\" id=\"854\">854</a>\n<a href=\"#855\" id=\"855\">855</a>\n<a href=\"#856\" id=\"856\">856</a>\n<a href=\"#857\" id=\"857\">857</a>\n<a href=\"#858\" id=\"858\">858</a>\n<a href=\"#859\" id=\"859\">859</a>\n<a href=\"#860\" id=\"860\">860</a>\n<a href=\"#861\" id=\"861\">861</a>\n<a href=\"#862\" id=\"862\">862</a>\n<a href=\"#863\" id=\"863\">863</a>\n<a href=\"#864\" id=\"864\">864</a>\n<a href=\"#865\" id=\"865\">865</a>\n<a href=\"#866\" id=\"866\">866</a>\n<a href=\"#867\" id=\"867\">867</a>\n<a href=\"#868\" id=\"868\">868</a>\n<a href=\"#869\" id=\"869\">869</a>\n<a href=\"#870\" id=\"870\">870</a>\n<a href=\"#871\" id=\"871\">871</a>\n<a href=\"#872\" id=\"872\">872</a>\n<a href=\"#873\" id=\"873\">873</a>\n<a href=\"#874\" id=\"874\">874</a>\n<a href=\"#875\" id=\"875\">875</a>\n<a href=\"#876\" id=\"876\">876</a>\n<a href=\"#877\" id=\"877\">877</a>\n<a href=\"#878\" id=\"878\">878</a>\n<a href=\"#879\" id=\"879\">879</a>\n<a href=\"#880\" id=\"880\">880</a>\n<a href=\"#881\" id=\"881\">881</a>\n<a href=\"#882\" id=\"882\">882</a>\n<a href=\"#883\" id=\"883\">883</a>\n<a href=\"#884\" id=\"884\">884</a>\n<a href=\"#885\" id=\"885\">885</a>\n<a href=\"#886\" id=\"886\">886</a>\n<a href=\"#887\" id=\"887\">887</a>\n<a href=\"#888\" id=\"888\">888</a>\n<a href=\"#889\" id=\"889\">889</a>\n<a href=\"#890\" id=\"890\">890</a>\n<a href=\"#891\" id=\"891\">891</a>\n<a href=\"#892\" id=\"892\">892</a>\n<a href=\"#893\" id=\"893\">893</a>\n<a href=\"#894\" id=\"894\">894</a>\n<a href=\"#895\" id=\"895\">895</a>\n<a href=\"#896\" id=\"896\">896</a>\n<a href=\"#897\" id=\"897\">897</a>\n<a href=\"#898\" id=\"898\">898</a>\n<a href=\"#899\" id=\"899\">899</a>\n<a href=\"#900\" id=\"900\">900</a>\n<a href=\"#901\" id=\"901\">901</a>\n<a href=\"#902\" id=\"902\">902</a>\n<a href=\"#903\" id=\"903\">903</a>\n<a href=\"#904\" id=\"904\">904</a>\n<a href=\"#905\" id=\"905\">905</a>\n<a href=\"#906\" id=\"906\">906</a>\n<a href=\"#907\" id=\"907\">907</a>\n<a href=\"#908\" id=\"908\">908</a>\n<a href=\"#909\" id=\"909\">909</a>\n<a href=\"#910\" id=\"910\">910</a>\n<a href=\"#911\" id=\"911\">911</a>\n<a href=\"#912\" id=\"912\">912</a>\n<a href=\"#913\" id=\"913\">913</a>\n<a href=\"#914\" id=\"914\">914</a>\n<a href=\"#915\" id=\"915\">915</a>\n<a href=\"#916\" id=\"916\">916</a>\n<a href=\"#917\" id=\"917\">917</a>\n<a href=\"#918\" id=\"918\">918</a>\n<a href=\"#919\" id=\"919\">919</a>\n<a href=\"#920\" id=\"920\">920</a>\n<a href=\"#921\" id=\"921\">921</a>\n<a href=\"#922\" id=\"922\">922</a>\n<a href=\"#923\" id=\"923\">923</a>\n<a href=\"#924\" id=\"924\">924</a>\n<a href=\"#925\" id=\"925\">925</a>\n<a href=\"#926\" id=\"926\">926</a>\n<a href=\"#927\" id=\"927\">927</a>\n<a href=\"#928\" id=\"928\">928</a>\n<a href=\"#929\" id=\"929\">929</a>\n<a href=\"#930\" id=\"930\">930</a>\n<a href=\"#931\" id=\"931\">931</a>\n<a href=\"#932\" id=\"932\">932</a>\n<a href=\"#933\" id=\"933\">933</a>\n<a href=\"#934\" id=\"934\">934</a>\n<a href=\"#935\" id=\"935\">935</a>\n<a href=\"#936\" id=\"936\">936</a>\n<a href=\"#937\" id=\"937\">937</a>\n<a href=\"#938\" id=\"938\">938</a>\n<a href=\"#939\" id=\"939\">939</a>\n<a href=\"#940\" id=\"940\">940</a>\n<a href=\"#941\" id=\"941\">941</a>\n<a href=\"#942\" id=\"942\">942</a>\n<a href=\"#943\" id=\"943\">943</a>\n<a href=\"#944\" id=\"944\">944</a>\n<a href=\"#945\" id=\"945\">945</a>\n<a href=\"#946\" id=\"946\">946</a>\n<a href=\"#947\" id=\"947\">947</a>\n<a href=\"#948\" id=\"948\">948</a>\n<a href=\"#949\" id=\"949\">949</a>\n<a href=\"#950\" id=\"950\">950</a>\n<a href=\"#951\" id=\"951\">951</a>\n<a href=\"#952\" id=\"952\">952</a>\n<a href=\"#953\" id=\"953\">953</a>\n<a href=\"#954\" id=\"954\">954</a>\n<a href=\"#955\" id=\"955\">955</a>\n<a href=\"#956\" id=\"956\">956</a>\n<a href=\"#957\" id=\"957\">957</a>\n<a href=\"#958\" id=\"958\">958</a>\n<a href=\"#959\" id=\"959\">959</a>\n<a href=\"#960\" id=\"960\">960</a>\n<a href=\"#961\" id=\"961\">961</a>\n<a href=\"#962\" id=\"962\">962</a>\n<a href=\"#963\" id=\"963\">963</a>\n<a href=\"#964\" id=\"964\">964</a>\n<a href=\"#965\" id=\"965\">965</a>\n<a href=\"#966\" id=\"966\">966</a>\n<a href=\"#967\" id=\"967\">967</a>\n<a href=\"#968\" id=\"968\">968</a>\n<a href=\"#969\" id=\"969\">969</a>\n<a href=\"#970\" id=\"970\">970</a>\n<a href=\"#971\" id=\"971\">971</a>\n<a href=\"#972\" id=\"972\">972</a>\n<a href=\"#973\" id=\"973\">973</a>\n<a href=\"#974\" id=\"974\">974</a>\n<a href=\"#975\" id=\"975\">975</a>\n<a href=\"#976\" id=\"976\">976</a>\n<a href=\"#977\" id=\"977\">977</a>\n<a href=\"#978\" id=\"978\">978</a>\n<a href=\"#979\" id=\"979\">979</a>\n<a href=\"#980\" id=\"980\">980</a>\n<a href=\"#981\" id=\"981\">981</a>\n<a href=\"#982\" id=\"982\">982</a>\n<a href=\"#983\" id=\"983\">983</a>\n<a href=\"#984\" id=\"984\">984</a>\n<a href=\"#985\" id=\"985\">985</a>\n<a href=\"#986\" id=\"986\">986</a>\n<a href=\"#987\" id=\"987\">987</a>\n<a href=\"#988\" id=\"988\">988</a>\n<a href=\"#989\" id=\"989\">989</a>\n<a href=\"#990\" id=\"990\">990</a>\n<a href=\"#991\" id=\"991\">991</a>\n<a href=\"#992\" id=\"992\">992</a>\n<a href=\"#993\" id=\"993\">993</a>\n<a href=\"#994\" id=\"994\">994</a>\n<a href=\"#995\" id=\"995\">995</a>\n<a href=\"#996\" id=\"996\">996</a>\n<a href=\"#997\" id=\"997\">997</a>\n<a href=\"#998\" id=\"998\">998</a>\n<a href=\"#999\" id=\"999\">999</a>\n<a href=\"#1000\" id=\"1000\">1000</a>\n<a href=\"#1001\" id=\"1001\">1001</a>\n<a href=\"#1002\" id=\"1002\">1002</a>\n<a href=\"#1003\" id=\"1003\">1003</a>\n<a href=\"#1004\" id=\"1004\">1004</a>\n<a href=\"#1005\" id=\"1005\">1005</a>\n<a href=\"#1006\" id=\"1006\">1006</a>\n<a href=\"#1007\" id=\"1007\">1007</a>\n<a href=\"#1008\" id=\"1008\">1008</a>\n<a href=\"#1009\" id=\"1009\">1009</a>\n<a href=\"#1010\" id=\"1010\">1010</a>\n<a href=\"#1011\" id=\"1011\">1011</a>\n<a href=\"#1012\" id=\"1012\">1012</a>\n<a href=\"#1013\" id=\"1013\">1013</a>\n<a href=\"#1014\" id=\"1014\">1014</a>\n<a href=\"#1015\" id=\"1015\">1015</a>\n<a href=\"#1016\" id=\"1016\">1016</a>\n<a href=\"#1017\" id=\"1017\">1017</a>\n<a href=\"#1018\" id=\"1018\">1018</a>\n<a href=\"#1019\" id=\"1019\">1019</a>\n<a href=\"#1020\" id=\"1020\">1020</a>\n<a href=\"#1021\" id=\"1021\">1021</a>\n<a href=\"#1022\" id=\"1022\">1022</a>\n<a href=\"#1023\" id=\"1023\">1023</a>\n<a href=\"#1024\" id=\"1024\">1024</a>\n<a href=\"#1025\" id=\"1025\">1025</a>\n<a href=\"#1026\" id=\"1026\">1026</a>\n<a href=\"#1027\" id=\"1027\">1027</a>\n<a href=\"#1028\" id=\"1028\">1028</a>\n<a href=\"#1029\" id=\"1029\">1029</a>\n<a href=\"#1030\" id=\"1030\">1030</a>\n<a href=\"#1031\" id=\"1031\">1031</a>\n<a href=\"#1032\" id=\"1032\">1032</a>\n<a href=\"#1033\" id=\"1033\">1033</a>\n<a href=\"#1034\" id=\"1034\">1034</a>\n<a href=\"#1035\" id=\"1035\">1035</a>\n<a href=\"#1036\" id=\"1036\">1036</a>\n<a href=\"#1037\" id=\"1037\">1037</a>\n<a href=\"#1038\" id=\"1038\">1038</a>\n<a href=\"#1039\" id=\"1039\">1039</a>\n<a href=\"#1040\" id=\"1040\">1040</a>\n<a href=\"#1041\" id=\"1041\">1041</a>\n<a href=\"#1042\" id=\"1042\">1042</a>\n<a href=\"#1043\" id=\"1043\">1043</a>\n<a href=\"#1044\" id=\"1044\">1044</a>\n<a href=\"#1045\" id=\"1045\">1045</a>\n<a href=\"#1046\" id=\"1046\">1046</a>\n<a href=\"#1047\" id=\"1047\">1047</a>\n<a href=\"#1048\" id=\"1048\">1048</a>\n<a href=\"#1049\" id=\"1049\">1049</a>\n<a href=\"#1050\" id=\"1050\">1050</a>\n<a href=\"#1051\" id=\"1051\">1051</a>\n<a href=\"#1052\" id=\"1052\">1052</a>\n<a href=\"#1053\" id=\"1053\">1053</a>\n<a href=\"#1054\" id=\"1054\">1054</a>\n<a href=\"#1055\" id=\"1055\">1055</a>\n<a href=\"#1056\" id=\"1056\">1056</a>\n<a href=\"#1057\" id=\"1057\">1057</a>\n<a href=\"#1058\" id=\"1058\">1058</a>\n<a href=\"#1059\" id=\"1059\">1059</a>\n<a href=\"#1060\" id=\"1060\">1060</a>\n<a href=\"#1061\" id=\"1061\">1061</a>\n<a href=\"#1062\" id=\"1062\">1062</a>\n<a href=\"#1063\" id=\"1063\">1063</a>\n<a href=\"#1064\" id=\"1064\">1064</a>\n<a href=\"#1065\" id=\"1065\">1065</a>\n<a href=\"#1066\" id=\"1066\">1066</a>\n<a href=\"#1067\" id=\"1067\">1067</a>\n<a href=\"#1068\" id=\"1068\">1068</a>\n<a href=\"#1069\" id=\"1069\">1069</a>\n<a href=\"#1070\" id=\"1070\">1070</a>\n<a href=\"#1071\" id=\"1071\">1071</a>\n<a href=\"#1072\" id=\"1072\">1072</a>\n<a href=\"#1073\" id=\"1073\">1073</a>\n<a href=\"#1074\" id=\"1074\">1074</a>\n<a href=\"#1075\" id=\"1075\">1075</a>\n<a href=\"#1076\" id=\"1076\">1076</a>\n<a href=\"#1077\" id=\"1077\">1077</a>\n<a href=\"#1078\" id=\"1078\">1078</a>\n<a href=\"#1079\" id=\"1079\">1079</a>\n<a href=\"#1080\" id=\"1080\">1080</a>\n<a href=\"#1081\" id=\"1081\">1081</a>\n<a href=\"#1082\" id=\"1082\">1082</a>\n<a href=\"#1083\" id=\"1083\">1083</a>\n<a href=\"#1084\" id=\"1084\">1084</a>\n<a href=\"#1085\" id=\"1085\">1085</a>\n<a href=\"#1086\" id=\"1086\">1086</a>\n<a href=\"#1087\" id=\"1087\">1087</a>\n<a href=\"#1088\" id=\"1088\">1088</a>\n<a href=\"#1089\" id=\"1089\">1089</a>\n<a href=\"#1090\" id=\"1090\">1090</a>\n<a href=\"#1091\" id=\"1091\">1091</a>\n<a href=\"#1092\" id=\"1092\">1092</a>\n<a href=\"#1093\" id=\"1093\">1093</a>\n<a href=\"#1094\" id=\"1094\">1094</a>\n<a href=\"#1095\" id=\"1095\">1095</a>\n<a href=\"#1096\" id=\"1096\">1096</a>\n<a href=\"#1097\" id=\"1097\">1097</a>\n<a href=\"#1098\" id=\"1098\">1098</a>\n<a href=\"#1099\" id=\"1099\">1099</a>\n<a href=\"#1100\" id=\"1100\">1100</a>\n<a href=\"#1101\" id=\"1101\">1101</a>\n<a href=\"#1102\" id=\"1102\">1102</a>\n<a href=\"#1103\" id=\"1103\">1103</a>\n<a href=\"#1104\" id=\"1104\">1104</a>\n<a href=\"#1105\" id=\"1105\">1105</a>\n<a href=\"#1106\" id=\"1106\">1106</a>\n<a href=\"#1107\" id=\"1107\">1107</a>\n<a href=\"#1108\" id=\"1108\">1108</a>\n<a href=\"#1109\" id=\"1109\">1109</a>\n<a href=\"#1110\" id=\"1110\">1110</a>\n<a href=\"#1111\" id=\"1111\">1111</a>\n<a href=\"#1112\" id=\"1112\">1112</a>\n<a href=\"#1113\" id=\"1113\">1113</a>\n<a href=\"#1114\" id=\"1114\">1114</a>\n<a href=\"#1115\" id=\"1115\">1115</a>\n<a href=\"#1116\" id=\"1116\">1116</a>\n<a href=\"#1117\" id=\"1117\">1117</a>\n<a href=\"#1118\" id=\"1118\">1118</a>\n<a href=\"#1119\" id=\"1119\">1119</a>\n<a href=\"#1120\" id=\"1120\">1120</a>\n<a href=\"#1121\" id=\"1121\">1121</a>\n<a href=\"#1122\" id=\"1122\">1122</a>\n<a href=\"#1123\" id=\"1123\">1123</a>\n<a href=\"#1124\" id=\"1124\">1124</a>\n<a href=\"#1125\" id=\"1125\">1125</a>\n<a href=\"#1126\" id=\"1126\">1126</a>\n<a href=\"#1127\" id=\"1127\">1127</a>\n<a href=\"#1128\" id=\"1128\">1128</a>\n<a href=\"#1129\" id=\"1129\">1129</a>\n<a href=\"#1130\" id=\"1130\">1130</a>\n<a href=\"#1131\" id=\"1131\">1131</a>\n<a href=\"#1132\" id=\"1132\">1132</a>\n<a href=\"#1133\" id=\"1133\">1133</a>\n<a href=\"#1134\" id=\"1134\">1134</a>\n<a href=\"#1135\" id=\"1135\">1135</a>\n<a href=\"#1136\" id=\"1136\">1136</a>\n<a href=\"#1137\" id=\"1137\">1137</a>\n<a href=\"#1138\" id=\"1138\">1138</a>\n<a href=\"#1139\" id=\"1139\">1139</a>\n<a href=\"#1140\" id=\"1140\">1140</a>\n<a href=\"#1141\" id=\"1141\">1141</a>\n<a href=\"#1142\" id=\"1142\">1142</a>\n<a href=\"#1143\" id=\"1143\">1143</a>\n<a href=\"#1144\" id=\"1144\">1144</a>\n<a href=\"#1145\" id=\"1145\">1145</a>\n<a href=\"#1146\" id=\"1146\">1146</a>\n<a href=\"#1147\" id=\"1147\">1147</a>\n<a href=\"#1148\" id=\"1148\">1148</a>\n<a href=\"#1149\" id=\"1149\">1149</a>\n<a href=\"#1150\" id=\"1150\">1150</a>\n<a href=\"#1151\" id=\"1151\">1151</a>\n<a href=\"#1152\" id=\"1152\">1152</a>\n<a href=\"#1153\" id=\"1153\">1153</a>\n<a href=\"#1154\" id=\"1154\">1154</a>\n<a href=\"#1155\" id=\"1155\">1155</a>\n<a href=\"#1156\" id=\"1156\">1156</a>\n<a href=\"#1157\" id=\"1157\">1157</a>\n<a href=\"#1158\" id=\"1158\">1158</a>\n<a href=\"#1159\" id=\"1159\">1159</a>\n<a href=\"#1160\" id=\"1160\">1160</a>\n<a href=\"#1161\" id=\"1161\">1161</a>\n<a href=\"#1162\" id=\"1162\">1162</a>\n<a href=\"#1163\" id=\"1163\">1163</a>\n<a href=\"#1164\" id=\"1164\">1164</a>\n<a href=\"#1165\" id=\"1165\">1165</a>\n<a href=\"#1166\" id=\"1166\">1166</a>\n<a href=\"#1167\" id=\"1167\">1167</a>\n<a href=\"#1168\" id=\"1168\">1168</a>\n<a href=\"#1169\" id=\"1169\">1169</a>\n<a href=\"#1170\" id=\"1170\">1170</a>\n<a href=\"#1171\" id=\"1171\">1171</a>\n<a href=\"#1172\" id=\"1172\">1172</a>\n<a href=\"#1173\" id=\"1173\">1173</a>\n<a href=\"#1174\" id=\"1174\">1174</a>\n<a href=\"#1175\" id=\"1175\">1175</a>\n<a href=\"#1176\" id=\"1176\">1176</a>\n<a href=\"#1177\" id=\"1177\">1177</a>\n<a href=\"#1178\" id=\"1178\">1178</a>\n<a href=\"#1179\" id=\"1179\">1179</a>\n<a href=\"#1180\" id=\"1180\">1180</a>\n<a href=\"#1181\" id=\"1181\">1181</a>\n<a href=\"#1182\" id=\"1182\">1182</a>\n<a href=\"#1183\" id=\"1183\">1183</a>\n<a href=\"#1184\" id=\"1184\">1184</a>\n<a href=\"#1185\" id=\"1185\">1185</a>\n<a href=\"#1186\" id=\"1186\">1186</a>\n<a href=\"#1187\" id=\"1187\">1187</a>\n<a href=\"#1188\" id=\"1188\">1188</a>\n<a href=\"#1189\" id=\"1189\">1189</a>\n<a href=\"#1190\" id=\"1190\">1190</a>\n<a href=\"#1191\" id=\"1191\">1191</a>\n<a href=\"#1192\" id=\"1192\">1192</a>\n<a href=\"#1193\" id=\"1193\">1193</a>\n<a href=\"#1194\" id=\"1194\">1194</a>\n<a href=\"#1195\" id=\"1195\">1195</a>\n<a href=\"#1196\" id=\"1196\">1196</a>\n<a href=\"#1197\" id=\"1197\">1197</a>\n<a href=\"#1198\" id=\"1198\">1198</a>\n<a href=\"#1199\" id=\"1199\">1199</a>\n<a href=\"#1200\" id=\"1200\">1200</a>\n<a href=\"#1201\" id=\"1201\">1201</a>\n<a href=\"#1202\" id=\"1202\">1202</a>\n<a href=\"#1203\" id=\"1203\">1203</a>\n<a href=\"#1204\" id=\"1204\">1204</a>\n<a href=\"#1205\" id=\"1205\">1205</a>\n<a href=\"#1206\" id=\"1206\">1206</a>\n<a href=\"#1207\" id=\"1207\">1207</a>\n<a href=\"#1208\" id=\"1208\">1208</a>\n<a href=\"#1209\" id=\"1209\">1209</a>\n<a href=\"#1210\" id=\"1210\">1210</a>\n<a href=\"#1211\" id=\"1211\">1211</a>\n<a href=\"#1212\" id=\"1212\">1212</a>\n<a href=\"#1213\" id=\"1213\">1213</a>\n<a href=\"#1214\" id=\"1214\">1214</a>\n<a href=\"#1215\" id=\"1215\">1215</a>\n<a href=\"#1216\" id=\"1216\">1216</a>\n<a href=\"#1217\" id=\"1217\">1217</a>\n<a href=\"#1218\" id=\"1218\">1218</a>\n<a href=\"#1219\" id=\"1219\">1219</a>\n<a href=\"#1220\" id=\"1220\">1220</a>\n<a href=\"#1221\" id=\"1221\">1221</a>\n<a href=\"#1222\" id=\"1222\">1222</a>\n<a href=\"#1223\" id=\"1223\">1223</a>\n<a href=\"#1224\" id=\"1224\">1224</a>\n<a href=\"#1225\" id=\"1225\">1225</a>\n<a href=\"#1226\" id=\"1226\">1226</a>\n<a href=\"#1227\" id=\"1227\">1227</a>\n<a href=\"#1228\" id=\"1228\">1228</a>\n<a href=\"#1229\" id=\"1229\">1229</a>\n<a href=\"#1230\" id=\"1230\">1230</a>\n<a href=\"#1231\" id=\"1231\">1231</a>\n<a href=\"#1232\" id=\"1232\">1232</a>\n<a href=\"#1233\" id=\"1233\">1233</a>\n<a href=\"#1234\" id=\"1234\">1234</a>\n<a href=\"#1235\" id=\"1235\">1235</a>\n<a href=\"#1236\" id=\"1236\">1236</a>\n<a href=\"#1237\" id=\"1237\">1237</a>\n<a href=\"#1238\" id=\"1238\">1238</a>\n<a href=\"#1239\" id=\"1239\">1239</a>\n<a href=\"#1240\" id=\"1240\">1240</a>\n<a href=\"#1241\" id=\"1241\">1241</a>\n<a href=\"#1242\" id=\"1242\">1242</a>\n<a href=\"#1243\" id=\"1243\">1243</a>\n<a href=\"#1244\" id=\"1244\">1244</a>\n<a href=\"#1245\" id=\"1245\">1245</a>\n<a href=\"#1246\" id=\"1246\">1246</a>\n<a href=\"#1247\" id=\"1247\">1247</a>\n<a href=\"#1248\" id=\"1248\">1248</a>\n<a href=\"#1249\" id=\"1249\">1249</a>\n<a href=\"#1250\" id=\"1250\">1250</a>\n<a href=\"#1251\" id=\"1251\">1251</a>\n<a href=\"#1252\" id=\"1252\">1252</a>\n<a href=\"#1253\" id=\"1253\">1253</a>\n<a href=\"#1254\" id=\"1254\">1254</a>\n<a href=\"#1255\" id=\"1255\">1255</a>\n<a href=\"#1256\" id=\"1256\">1256</a>\n<a href=\"#1257\" id=\"1257\">1257</a>\n<a href=\"#1258\" id=\"1258\">1258</a>\n<a href=\"#1259\" id=\"1259\">1259</a>\n<a href=\"#1260\" id=\"1260\">1260</a>\n<a href=\"#1261\" id=\"1261\">1261</a>\n<a href=\"#1262\" id=\"1262\">1262</a>\n<a href=\"#1263\" id=\"1263\">1263</a>\n<a href=\"#1264\" id=\"1264\">1264</a>\n<a href=\"#1265\" id=\"1265\">1265</a>\n<a href=\"#1266\" id=\"1266\">1266</a>\n<a href=\"#1267\" id=\"1267\">1267</a>\n<a href=\"#1268\" id=\"1268\">1268</a>\n<a href=\"#1269\" id=\"1269\">1269</a>\n<a href=\"#1270\" id=\"1270\">1270</a>\n<a href=\"#1271\" id=\"1271\">1271</a>\n<a href=\"#1272\" id=\"1272\">1272</a>\n<a href=\"#1273\" id=\"1273\">1273</a>\n<a href=\"#1274\" id=\"1274\">1274</a>\n<a href=\"#1275\" id=\"1275\">1275</a>\n<a href=\"#1276\" id=\"1276\">1276</a>\n<a href=\"#1277\" id=\"1277\">1277</a>\n<a href=\"#1278\" id=\"1278\">1278</a>\n<a href=\"#1279\" id=\"1279\">1279</a>\n<a href=\"#1280\" id=\"1280\">1280</a>\n<a href=\"#1281\" id=\"1281\">1281</a>\n<a href=\"#1282\" id=\"1282\">1282</a>\n<a href=\"#1283\" id=\"1283\">1283</a>\n<a href=\"#1284\" id=\"1284\">1284</a>\n<a href=\"#1285\" id=\"1285\">1285</a>\n<a href=\"#1286\" id=\"1286\">1286</a>\n<a href=\"#1287\" id=\"1287\">1287</a>\n<a href=\"#1288\" id=\"1288\">1288</a>\n<a href=\"#1289\" id=\"1289\">1289</a>\n<a href=\"#1290\" id=\"1290\">1290</a>\n<a href=\"#1291\" id=\"1291\">1291</a>\n<a href=\"#1292\" id=\"1292\">1292</a>\n<a href=\"#1293\" id=\"1293\">1293</a>\n<a href=\"#1294\" id=\"1294\">1294</a>\n<a href=\"#1295\" id=\"1295\">1295</a>\n<a href=\"#1296\" id=\"1296\">1296</a>\n<a href=\"#1297\" id=\"1297\">1297</a>\n<a href=\"#1298\" id=\"1298\">1298</a>\n<a href=\"#1299\" id=\"1299\">1299</a>\n<a href=\"#1300\" id=\"1300\">1300</a>\n<a href=\"#1301\" id=\"1301\">1301</a>\n<a href=\"#1302\" id=\"1302\">1302</a>\n<a href=\"#1303\" id=\"1303\">1303</a>\n<a href=\"#1304\" id=\"1304\">1304</a>\n<a href=\"#1305\" id=\"1305\">1305</a>\n<a href=\"#1306\" id=\"1306\">1306</a>\n<a href=\"#1307\" id=\"1307\">1307</a>\n<a href=\"#1308\" id=\"1308\">1308</a>\n<a href=\"#1309\" id=\"1309\">1309</a>\n<a href=\"#1310\" id=\"1310\">1310</a>\n<a href=\"#1311\" id=\"1311\">1311</a>\n<a href=\"#1312\" id=\"1312\">1312</a>\n<a href=\"#1313\" id=\"1313\">1313</a>\n<a href=\"#1314\" id=\"1314\">1314</a>\n<a href=\"#1315\" id=\"1315\">1315</a>\n<a href=\"#1316\" id=\"1316\">1316</a>\n<a href=\"#1317\" id=\"1317\">1317</a>\n<a href=\"#1318\" id=\"1318\">1318</a>\n<a href=\"#1319\" id=\"1319\">1319</a>\n<a href=\"#1320\" id=\"1320\">1320</a>\n<a href=\"#1321\" id=\"1321\">1321</a>\n<a href=\"#1322\" id=\"1322\">1322</a>\n<a href=\"#1323\" id=\"1323\">1323</a>\n<a href=\"#1324\" id=\"1324\">1324</a>\n<a href=\"#1325\" id=\"1325\">1325</a>\n<a href=\"#1326\" id=\"1326\">1326</a>\n<a href=\"#1327\" id=\"1327\">1327</a>\n<a href=\"#1328\" id=\"1328\">1328</a>\n<a href=\"#1329\" id=\"1329\">1329</a>\n<a href=\"#1330\" id=\"1330\">1330</a>\n<a href=\"#1331\" id=\"1331\">1331</a>\n<a href=\"#1332\" id=\"1332\">1332</a>\n<a href=\"#1333\" id=\"1333\">1333</a>\n<a href=\"#1334\" id=\"1334\">1334</a>\n<a href=\"#1335\" id=\"1335\">1335</a>\n<a href=\"#1336\" id=\"1336\">1336</a>\n<a href=\"#1337\" id=\"1337\">1337</a>\n<a href=\"#1338\" id=\"1338\">1338</a>\n<a href=\"#1339\" id=\"1339\">1339</a>\n<a href=\"#1340\" id=\"1340\">1340</a>\n<a href=\"#1341\" id=\"1341\">1341</a>\n<a href=\"#1342\" id=\"1342\">1342</a>\n<a href=\"#1343\" id=\"1343\">1343</a>\n<a href=\"#1344\" id=\"1344\">1344</a>\n<a href=\"#1345\" id=\"1345\">1345</a>\n<a href=\"#1346\" id=\"1346\">1346</a>\n<a href=\"#1347\" id=\"1347\">1347</a>\n<a href=\"#1348\" id=\"1348\">1348</a>\n<a href=\"#1349\" id=\"1349\">1349</a>\n<a href=\"#1350\" id=\"1350\">1350</a>\n<a href=\"#1351\" id=\"1351\">1351</a>\n<a href=\"#1352\" id=\"1352\">1352</a>\n<a href=\"#1353\" id=\"1353\">1353</a>\n<a href=\"#1354\" id=\"1354\">1354</a>\n<a href=\"#1355\" id=\"1355\">1355</a>\n<a href=\"#1356\" id=\"1356\">1356</a>\n<a href=\"#1357\" id=\"1357\">1357</a>\n<a href=\"#1358\" id=\"1358\">1358</a>\n<a href=\"#1359\" id=\"1359\">1359</a>\n<a href=\"#1360\" id=\"1360\">1360</a>\n<a href=\"#1361\" id=\"1361\">1361</a>\n<a href=\"#1362\" id=\"1362\">1362</a>\n<a href=\"#1363\" id=\"1363\">1363</a>\n<a href=\"#1364\" id=\"1364\">1364</a>\n<a href=\"#1365\" id=\"1365\">1365</a>\n<a href=\"#1366\" id=\"1366\">1366</a>\n<a href=\"#1367\" id=\"1367\">1367</a>\n<a href=\"#1368\" id=\"1368\">1368</a>\n<a href=\"#1369\" id=\"1369\">1369</a>\n<a href=\"#1370\" id=\"1370\">1370</a>\n<a href=\"#1371\" id=\"1371\">1371</a>\n<a href=\"#1372\" id=\"1372\">1372</a>\n<a href=\"#1373\" id=\"1373\">1373</a>\n<a href=\"#1374\" id=\"1374\">1374</a>\n<a href=\"#1375\" id=\"1375\">1375</a>\n<a href=\"#1376\" id=\"1376\">1376</a>\n<a href=\"#1377\" id=\"1377\">1377</a>\n<a href=\"#1378\" id=\"1378\">1378</a>\n<a href=\"#1379\" id=\"1379\">1379</a>\n<a href=\"#1380\" id=\"1380\">1380</a>\n<a href=\"#1381\" id=\"1381\">1381</a>\n<a href=\"#1382\" id=\"1382\">1382</a>\n<a href=\"#1383\" id=\"1383\">1383</a>\n</pre></div><pre class=\"rust\"><code><span class=\"doccomment\">//! Slice sorting\n//!\n//! This module contains a sorting algorithm based on Orson Peters' pattern-defeating quicksort,\n//! published at: &lt;https://github.com/orlp/pdqsort&gt;\n//!\n//! Unstable sorting is compatible with core because it doesn't allocate memory, unlike our\n//! stable sorting implementation.\n//!\n//! In addition it also contains the core logic of the stable sort used by `slice::sort` based on\n//! TimSort.\n\n</span><span class=\"kw\">use </span><span class=\"kw\">crate</span>::cmp;\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::mem::{<span class=\"self\">self</span>, MaybeUninit, SizedTypeProperties};\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::ptr;\n\n<span class=\"comment\">// When dropped, copies from `src` into `dest`.\n</span><span class=\"kw\">struct </span>InsertionHole&lt;T&gt; {\n    src: <span class=\"kw-2\">*const </span>T,\n    dest: <span class=\"kw-2\">*mut </span>T,\n}\n\n<span class=\"kw\">impl</span>&lt;T&gt; Drop <span class=\"kw\">for </span>InsertionHole&lt;T&gt; {\n    <span class=\"kw\">fn </span>drop(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) {\n        <span class=\"comment\">// SAFETY: This is a helper class. Please refer to its usage for correctness. Namely, one\n        // must be sure that `src` and `dst` does not overlap as required by\n        // `ptr::copy_nonoverlapping` and are both valid for writes.\n        </span><span class=\"kw\">unsafe </span>{\n            ptr::copy_nonoverlapping(<span class=\"self\">self</span>.src, <span class=\"self\">self</span>.dest, <span class=\"number\">1</span>);\n        }\n    }\n}\n\n<span class=\"doccomment\">/// Inserts `v[v.len() - 1]` into pre-sorted sequence `v[..v.len() - 1]` so that whole `v[..]`\n/// becomes sorted.\n</span><span class=\"kw\">unsafe fn </span>insert_tail&lt;T, F&gt;(v: <span class=\"kw-2\">&amp;mut </span>[T], is_less: <span class=\"kw-2\">&amp;mut </span>F)\n<span class=\"kw\">where\n    </span>F: FnMut(<span class=\"kw-2\">&amp;</span>T, <span class=\"kw-2\">&amp;</span>T) -&gt; bool,\n{\n    <span class=\"macro\">debug_assert!</span>(v.len() &gt;= <span class=\"number\">2</span>);\n\n    <span class=\"kw\">let </span>arr_ptr = v.as_mut_ptr();\n    <span class=\"kw\">let </span>i = v.len() - <span class=\"number\">1</span>;\n\n    <span class=\"comment\">// SAFETY: caller must ensure v is at least len 2.\n    </span><span class=\"kw\">unsafe </span>{\n        <span class=\"comment\">// See insert_head which talks about why this approach is beneficial.\n        </span><span class=\"kw\">let </span>i_ptr = arr_ptr.add(i);\n\n        <span class=\"comment\">// It's important that we use i_ptr here. If this check is positive and we continue,\n        // We want to make sure that no other copy of the value was seen by is_less.\n        // Otherwise we would have to copy it back.\n        </span><span class=\"kw\">if </span>is_less(<span class=\"kw-2\">&amp;*</span>i_ptr, <span class=\"kw-2\">&amp;*</span>i_ptr.sub(<span class=\"number\">1</span>)) {\n            <span class=\"comment\">// It's important, that we use tmp for comparison from now on. As it is the value that\n            // will be copied back. And notionally we could have created a divergence if we copy\n            // back the wrong value.\n            </span><span class=\"kw\">let </span>tmp = mem::ManuallyDrop::new(ptr::read(i_ptr));\n            <span class=\"comment\">// Intermediate state of the insertion process is always tracked by `hole`, which\n            // serves two purposes:\n            // 1. Protects integrity of `v` from panics in `is_less`.\n            // 2. Fills the remaining hole in `v` in the end.\n            //\n            // Panic safety:\n            //\n            // If `is_less` panics at any point during the process, `hole` will get dropped and\n            // fill the hole in `v` with `tmp`, thus ensuring that `v` still holds every object it\n            // initially held exactly once.\n            </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>hole = InsertionHole { src: <span class=\"kw-2\">&amp;*</span>tmp, dest: i_ptr.sub(<span class=\"number\">1</span>) };\n            ptr::copy_nonoverlapping(hole.dest, i_ptr, <span class=\"number\">1</span>);\n\n            <span class=\"comment\">// SAFETY: We know i is at least 1.\n            </span><span class=\"kw\">for </span>j <span class=\"kw\">in </span>(<span class=\"number\">0</span>..(i - <span class=\"number\">1</span>)).rev() {\n                <span class=\"kw\">let </span>j_ptr = arr_ptr.add(j);\n                <span class=\"kw\">if </span>!is_less(<span class=\"kw-2\">&amp;*</span>tmp, <span class=\"kw-2\">&amp;*</span>j_ptr) {\n                    <span class=\"kw\">break</span>;\n                }\n\n                ptr::copy_nonoverlapping(j_ptr, hole.dest, <span class=\"number\">1</span>);\n                hole.dest = j_ptr;\n            }\n            <span class=\"comment\">// `hole` gets dropped and thus copies `tmp` into the remaining hole in `v`.\n        </span>}\n    }\n}\n\n<span class=\"doccomment\">/// Inserts `v[0]` into pre-sorted sequence `v[1..]` so that whole `v[..]` becomes sorted.\n///\n/// This is the integral subroutine of insertion sort.\n</span><span class=\"kw\">unsafe fn </span>insert_head&lt;T, F&gt;(v: <span class=\"kw-2\">&amp;mut </span>[T], is_less: <span class=\"kw-2\">&amp;mut </span>F)\n<span class=\"kw\">where\n    </span>F: FnMut(<span class=\"kw-2\">&amp;</span>T, <span class=\"kw-2\">&amp;</span>T) -&gt; bool,\n{\n    <span class=\"macro\">debug_assert!</span>(v.len() &gt;= <span class=\"number\">2</span>);\n\n    <span class=\"comment\">// SAFETY: caller must ensure v is at least len 2.\n    </span><span class=\"kw\">unsafe </span>{\n        <span class=\"kw\">if </span>is_less(v.get_unchecked(<span class=\"number\">1</span>), v.get_unchecked(<span class=\"number\">0</span>)) {\n            <span class=\"kw\">let </span>arr_ptr = v.as_mut_ptr();\n\n            <span class=\"comment\">// There are three ways to implement insertion here:\n            //\n            // 1. Swap adjacent elements until the first one gets to its final destination.\n            //    However, this way we copy data around more than is necessary. If elements are big\n            //    structures (costly to copy), this method will be slow.\n            //\n            // 2. Iterate until the right place for the first element is found. Then shift the\n            //    elements succeeding it to make room for it and finally place it into the\n            //    remaining hole. This is a good method.\n            //\n            // 3. Copy the first element into a temporary variable. Iterate until the right place\n            //    for it is found. As we go along, copy every traversed element into the slot\n            //    preceding it. Finally, copy data from the temporary variable into the remaining\n            //    hole. This method is very good. Benchmarks demonstrated slightly better\n            //    performance than with the 2nd method.\n            //\n            // All methods were benchmarked, and the 3rd showed best results. So we chose that one.\n            </span><span class=\"kw\">let </span>tmp = mem::ManuallyDrop::new(ptr::read(arr_ptr));\n\n            <span class=\"comment\">// Intermediate state of the insertion process is always tracked by `hole`, which\n            // serves two purposes:\n            // 1. Protects integrity of `v` from panics in `is_less`.\n            // 2. Fills the remaining hole in `v` in the end.\n            //\n            // Panic safety:\n            //\n            // If `is_less` panics at any point during the process, `hole` will get dropped and\n            // fill the hole in `v` with `tmp`, thus ensuring that `v` still holds every object it\n            // initially held exactly once.\n            </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>hole = InsertionHole { src: <span class=\"kw-2\">&amp;*</span>tmp, dest: arr_ptr.add(<span class=\"number\">1</span>) };\n            ptr::copy_nonoverlapping(arr_ptr.add(<span class=\"number\">1</span>), arr_ptr.add(<span class=\"number\">0</span>), <span class=\"number\">1</span>);\n\n            <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">2</span>..v.len() {\n                <span class=\"kw\">if </span>!is_less(<span class=\"kw-2\">&amp;</span>v.get_unchecked(i), <span class=\"kw-2\">&amp;*</span>tmp) {\n                    <span class=\"kw\">break</span>;\n                }\n                ptr::copy_nonoverlapping(arr_ptr.add(i), arr_ptr.add(i - <span class=\"number\">1</span>), <span class=\"number\">1</span>);\n                hole.dest = arr_ptr.add(i);\n            }\n            <span class=\"comment\">// `hole` gets dropped and thus copies `tmp` into the remaining hole in `v`.\n        </span>}\n    }\n}\n\n<span class=\"doccomment\">/// Sort `v` assuming `v[..offset]` is already sorted.\n///\n/// Never inline this function to avoid code bloat. It still optimizes nicely and has practically no\n/// performance impact. Even improving performance in some cases.\n</span><span class=\"attr\">#[inline(never)]\n</span><span class=\"kw\">pub</span>(<span class=\"kw\">super</span>) <span class=\"kw\">fn </span>insertion_sort_shift_left&lt;T, F&gt;(v: <span class=\"kw-2\">&amp;mut </span>[T], offset: usize, is_less: <span class=\"kw-2\">&amp;mut </span>F)\n<span class=\"kw\">where\n    </span>F: FnMut(<span class=\"kw-2\">&amp;</span>T, <span class=\"kw-2\">&amp;</span>T) -&gt; bool,\n{\n    <span class=\"kw\">let </span>len = v.len();\n\n    <span class=\"comment\">// Using assert here improves performance.\n    </span><span class=\"macro\">assert!</span>(offset != <span class=\"number\">0 </span>&amp;&amp; offset &lt;= len);\n\n    <span class=\"comment\">// Shift each element of the unsorted region v[i..] as far left as is needed to make v sorted.\n    </span><span class=\"kw\">for </span>i <span class=\"kw\">in </span>offset..len {\n        <span class=\"comment\">// SAFETY: we tested that `offset` must be at least 1, so this loop is only entered if len\n        // &gt;= 2. The range is exclusive and we know `i` must be at least 1 so this slice has at\n        // &gt;least len 2.\n        </span><span class=\"kw\">unsafe </span>{\n            insert_tail(<span class=\"kw-2\">&amp;mut </span>v[..=i], is_less);\n        }\n    }\n}\n\n<span class=\"doccomment\">/// Sort `v` assuming `v[offset..]` is already sorted.\n///\n/// Never inline this function to avoid code bloat. It still optimizes nicely and has practically no\n/// performance impact. Even improving performance in some cases.\n</span><span class=\"attr\">#[inline(never)]\n</span><span class=\"kw\">fn </span>insertion_sort_shift_right&lt;T, F&gt;(v: <span class=\"kw-2\">&amp;mut </span>[T], offset: usize, is_less: <span class=\"kw-2\">&amp;mut </span>F)\n<span class=\"kw\">where\n    </span>F: FnMut(<span class=\"kw-2\">&amp;</span>T, <span class=\"kw-2\">&amp;</span>T) -&gt; bool,\n{\n    <span class=\"kw\">let </span>len = v.len();\n\n    <span class=\"comment\">// Using assert here improves performance.\n    </span><span class=\"macro\">assert!</span>(offset != <span class=\"number\">0 </span>&amp;&amp; offset &lt;= len &amp;&amp; len &gt;= <span class=\"number\">2</span>);\n\n    <span class=\"comment\">// Shift each element of the unsorted region v[..i] as far left as is needed to make v sorted.\n    </span><span class=\"kw\">for </span>i <span class=\"kw\">in </span>(<span class=\"number\">0</span>..offset).rev() {\n        <span class=\"comment\">// SAFETY: we tested that `offset` must be at least 1, so this loop is only entered if len\n        // &gt;= 2.We ensured that the slice length is always at least 2 long. We know that start_found\n        // will be at least one less than end, and the range is exclusive. Which gives us i always\n        // &lt;= (end - 2).\n        </span><span class=\"kw\">unsafe </span>{\n            insert_head(<span class=\"kw-2\">&amp;mut </span>v[i..len], is_less);\n        }\n    }\n}\n\n<span class=\"doccomment\">/// Partially sorts a slice by shifting several out-of-order elements around.\n///\n/// Returns `true` if the slice is sorted at the end. This function is *O*(*n*) worst-case.\n</span><span class=\"attr\">#[cold]\n</span><span class=\"kw\">fn </span>partial_insertion_sort&lt;T, F&gt;(v: <span class=\"kw-2\">&amp;mut </span>[T], is_less: <span class=\"kw-2\">&amp;mut </span>F) -&gt; bool\n<span class=\"kw\">where\n    </span>F: FnMut(<span class=\"kw-2\">&amp;</span>T, <span class=\"kw-2\">&amp;</span>T) -&gt; bool,\n{\n    <span class=\"comment\">// Maximum number of adjacent out-of-order pairs that will get shifted.\n    </span><span class=\"kw\">const </span>MAX_STEPS: usize = <span class=\"number\">5</span>;\n    <span class=\"comment\">// If the slice is shorter than this, don't shift any elements.\n    </span><span class=\"kw\">const </span>SHORTEST_SHIFTING: usize = <span class=\"number\">50</span>;\n\n    <span class=\"kw\">let </span>len = v.len();\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>i = <span class=\"number\">1</span>;\n\n    <span class=\"kw\">for _ in </span><span class=\"number\">0</span>..MAX_STEPS {\n        <span class=\"comment\">// SAFETY: We already explicitly did the bound checking with `i &lt; len`.\n        // All our subsequent indexing is only in the range `0 &lt;= index &lt; len`\n        </span><span class=\"kw\">unsafe </span>{\n            <span class=\"comment\">// Find the next pair of adjacent out-of-order elements.\n            </span><span class=\"kw\">while </span>i &lt; len &amp;&amp; !is_less(v.get_unchecked(i), v.get_unchecked(i - <span class=\"number\">1</span>)) {\n                i += <span class=\"number\">1</span>;\n            }\n        }\n\n        <span class=\"comment\">// Are we done?\n        </span><span class=\"kw\">if </span>i == len {\n            <span class=\"kw\">return </span><span class=\"bool-val\">true</span>;\n        }\n\n        <span class=\"comment\">// Don't shift elements on short arrays, that has a performance cost.\n        </span><span class=\"kw\">if </span>len &lt; SHORTEST_SHIFTING {\n            <span class=\"kw\">return </span><span class=\"bool-val\">false</span>;\n        }\n\n        <span class=\"comment\">// Swap the found pair of elements. This puts them in correct order.\n        </span>v.swap(i - <span class=\"number\">1</span>, i);\n\n        <span class=\"kw\">if </span>i &gt;= <span class=\"number\">2 </span>{\n            <span class=\"comment\">// Shift the smaller element to the left.\n            </span>insertion_sort_shift_left(<span class=\"kw-2\">&amp;mut </span>v[..i], i - <span class=\"number\">1</span>, is_less);\n\n            <span class=\"comment\">// Shift the greater element to the right.\n            </span>insertion_sort_shift_right(<span class=\"kw-2\">&amp;mut </span>v[..i], <span class=\"number\">1</span>, is_less);\n        }\n    }\n\n    <span class=\"comment\">// Didn't manage to sort the slice in the limited number of steps.\n    </span><span class=\"bool-val\">false\n</span>}\n\n<span class=\"doccomment\">/// Sorts `v` using heapsort, which guarantees *O*(*n* \\* log(*n*)) worst-case.\n</span><span class=\"attr\">#[cold]\n#[unstable(feature = <span class=\"string\">\"sort_internals\"</span>, reason = <span class=\"string\">\"internal to sort module\"</span>, issue = <span class=\"string\">\"none\"</span>)]\n</span><span class=\"kw\">pub fn </span>heapsort&lt;T, F&gt;(v: <span class=\"kw-2\">&amp;mut </span>[T], <span class=\"kw-2\">mut </span>is_less: F)\n<span class=\"kw\">where\n    </span>F: FnMut(<span class=\"kw-2\">&amp;</span>T, <span class=\"kw-2\">&amp;</span>T) -&gt; bool,\n{\n    <span class=\"comment\">// This binary heap respects the invariant `parent &gt;= child`.\n    </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>sift_down = |v: <span class=\"kw-2\">&amp;mut </span>[T], <span class=\"kw-2\">mut </span>node| {\n        <span class=\"kw\">loop </span>{\n            <span class=\"comment\">// Children of `node`.\n            </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>child = <span class=\"number\">2 </span>* node + <span class=\"number\">1</span>;\n            <span class=\"kw\">if </span>child &gt;= v.len() {\n                <span class=\"kw\">break</span>;\n            }\n\n            <span class=\"comment\">// Choose the greater child.\n            </span><span class=\"kw\">if </span>child + <span class=\"number\">1 </span>&lt; v.len() {\n                <span class=\"comment\">// We need a branch to be sure not to out-of-bounds index,\n                // but it's highly predictable.  The comparison, however,\n                // is better done branchless, especially for primitives.\n                </span>child += is_less(<span class=\"kw-2\">&amp;</span>v[child], <span class=\"kw-2\">&amp;</span>v[child + <span class=\"number\">1</span>]) <span class=\"kw\">as </span>usize;\n            }\n\n            <span class=\"comment\">// Stop if the invariant holds at `node`.\n            </span><span class=\"kw\">if </span>!is_less(<span class=\"kw-2\">&amp;</span>v[node], <span class=\"kw-2\">&amp;</span>v[child]) {\n                <span class=\"kw\">break</span>;\n            }\n\n            <span class=\"comment\">// Swap `node` with the greater child, move one step down, and continue sifting.\n            </span>v.swap(node, child);\n            node = child;\n        }\n    };\n\n    <span class=\"comment\">// Build the heap in linear time.\n    </span><span class=\"kw\">for </span>i <span class=\"kw\">in </span>(<span class=\"number\">0</span>..v.len() / <span class=\"number\">2</span>).rev() {\n        sift_down(v, i);\n    }\n\n    <span class=\"comment\">// Pop maximal elements from the heap.\n    </span><span class=\"kw\">for </span>i <span class=\"kw\">in </span>(<span class=\"number\">1</span>..v.len()).rev() {\n        v.swap(<span class=\"number\">0</span>, i);\n        sift_down(<span class=\"kw-2\">&amp;mut </span>v[..i], <span class=\"number\">0</span>);\n    }\n}\n\n<span class=\"doccomment\">/// Partitions `v` into elements smaller than `pivot`, followed by elements greater than or equal\n/// to `pivot`.\n///\n/// Returns the number of elements smaller than `pivot`.\n///\n/// Partitioning is performed block-by-block in order to minimize the cost of branching operations.\n/// This idea is presented in the [BlockQuicksort][pdf] paper.\n///\n/// [pdf]: https://drops.dagstuhl.de/opus/volltexte/2016/6389/pdf/LIPIcs-ESA-2016-38.pdf\n</span><span class=\"kw\">fn </span>partition_in_blocks&lt;T, F&gt;(v: <span class=\"kw-2\">&amp;mut </span>[T], pivot: <span class=\"kw-2\">&amp;</span>T, is_less: <span class=\"kw-2\">&amp;mut </span>F) -&gt; usize\n<span class=\"kw\">where\n    </span>F: FnMut(<span class=\"kw-2\">&amp;</span>T, <span class=\"kw-2\">&amp;</span>T) -&gt; bool,\n{\n    <span class=\"comment\">// Number of elements in a typical block.\n    </span><span class=\"kw\">const </span>BLOCK: usize = <span class=\"number\">128</span>;\n\n    <span class=\"comment\">// The partitioning algorithm repeats the following steps until completion:\n    //\n    // 1. Trace a block from the left side to identify elements greater than or equal to the pivot.\n    // 2. Trace a block from the right side to identify elements smaller than the pivot.\n    // 3. Exchange the identified elements between the left and right side.\n    //\n    // We keep the following variables for a block of elements:\n    //\n    // 1. `block` - Number of elements in the block.\n    // 2. `start` - Start pointer into the `offsets` array.\n    // 3. `end` - End pointer into the `offsets` array.\n    // 4. `offsets` - Indices of out-of-order elements within the block.\n\n    // The current block on the left side (from `l` to `l.add(block_l)`).\n    </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>l = v.as_mut_ptr();\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>block_l = BLOCK;\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>start_l = ptr::null_mut();\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>end_l = ptr::null_mut();\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>offsets_l = [MaybeUninit::&lt;u8&gt;::uninit(); BLOCK];\n\n    <span class=\"comment\">// The current block on the right side (from `r.sub(block_r)` to `r`).\n    // SAFETY: The documentation for .add() specifically mention that `vec.as_ptr().add(vec.len())` is always safe\n    </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>r = <span class=\"kw\">unsafe </span>{ l.add(v.len()) };\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>block_r = BLOCK;\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>start_r = ptr::null_mut();\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>end_r = ptr::null_mut();\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>offsets_r = [MaybeUninit::&lt;u8&gt;::uninit(); BLOCK];\n\n    <span class=\"comment\">// FIXME: When we get VLAs, try creating one array of length `min(v.len(), 2 * BLOCK)` rather\n    // than two fixed-size arrays of length `BLOCK`. VLAs might be more cache-efficient.\n\n    // Returns the number of elements between pointers `l` (inclusive) and `r` (exclusive).\n    </span><span class=\"kw\">fn </span>width&lt;T&gt;(l: <span class=\"kw-2\">*mut </span>T, r: <span class=\"kw-2\">*mut </span>T) -&gt; usize {\n        <span class=\"macro\">assert!</span>(mem::size_of::&lt;T&gt;() &gt; <span class=\"number\">0</span>);\n        <span class=\"comment\">// FIXME: this should *likely* use `offset_from`, but more\n        // investigation is needed (including running tests in miri).\n        </span>(r.addr() - l.addr()) / mem::size_of::&lt;T&gt;()\n    }\n\n    <span class=\"kw\">loop </span>{\n        <span class=\"comment\">// We are done with partitioning block-by-block when `l` and `r` get very close. Then we do\n        // some patch-up work in order to partition the remaining elements in between.\n        </span><span class=\"kw\">let </span>is_done = width(l, r) &lt;= <span class=\"number\">2 </span>* BLOCK;\n\n        <span class=\"kw\">if </span>is_done {\n            <span class=\"comment\">// Number of remaining elements (still not compared to the pivot).\n            </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rem = width(l, r);\n            <span class=\"kw\">if </span>start_l &lt; end_l || start_r &lt; end_r {\n                rem -= BLOCK;\n            }\n\n            <span class=\"comment\">// Adjust block sizes so that the left and right block don't overlap, but get perfectly\n            // aligned to cover the whole remaining gap.\n            </span><span class=\"kw\">if </span>start_l &lt; end_l {\n                block_r = rem;\n            } <span class=\"kw\">else if </span>start_r &lt; end_r {\n                block_l = rem;\n            } <span class=\"kw\">else </span>{\n                <span class=\"comment\">// There were the same number of elements to switch on both blocks during the last\n                // iteration, so there are no remaining elements on either block. Cover the remaining\n                // items with roughly equally-sized blocks.\n                </span>block_l = rem / <span class=\"number\">2</span>;\n                block_r = rem - block_l;\n            }\n            <span class=\"macro\">debug_assert!</span>(block_l &lt;= BLOCK &amp;&amp; block_r &lt;= BLOCK);\n            <span class=\"macro\">debug_assert!</span>(width(l, r) == block_l + block_r);\n        }\n\n        <span class=\"kw\">if </span>start_l == end_l {\n            <span class=\"comment\">// Trace `block_l` elements from the left side.\n            </span>start_l = MaybeUninit::slice_as_mut_ptr(<span class=\"kw-2\">&amp;mut </span>offsets_l);\n            end_l = start_l;\n            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>elem = l;\n\n            <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..block_l {\n                <span class=\"comment\">// SAFETY: The unsafety operations below involve the usage of the `offset`.\n                //         According to the conditions required by the function, we satisfy them because:\n                //         1. `offsets_l` is stack-allocated, and thus considered separate allocated object.\n                //         2. The function `is_less` returns a `bool`.\n                //            Casting a `bool` will never overflow `isize`.\n                //         3. We have guaranteed that `block_l` will be `&lt;= BLOCK`.\n                //            Plus, `end_l` was initially set to the begin pointer of `offsets_` which was declared on the stack.\n                //            Thus, we know that even in the worst case (all invocations of `is_less` returns false) we will only be at most 1 byte pass the end.\n                //        Another unsafety operation here is dereferencing `elem`.\n                //        However, `elem` was initially the begin pointer to the slice which is always valid.\n                </span><span class=\"kw\">unsafe </span>{\n                    <span class=\"comment\">// Branchless comparison.\n                    </span><span class=\"kw-2\">*</span>end_l = i <span class=\"kw\">as </span>u8;\n                    end_l = end_l.add(!is_less(<span class=\"kw-2\">&amp;*</span>elem, pivot) <span class=\"kw\">as </span>usize);\n                    elem = elem.add(<span class=\"number\">1</span>);\n                }\n            }\n        }\n\n        <span class=\"kw\">if </span>start_r == end_r {\n            <span class=\"comment\">// Trace `block_r` elements from the right side.\n            </span>start_r = MaybeUninit::slice_as_mut_ptr(<span class=\"kw-2\">&amp;mut </span>offsets_r);\n            end_r = start_r;\n            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>elem = r;\n\n            <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..block_r {\n                <span class=\"comment\">// SAFETY: The unsafety operations below involve the usage of the `offset`.\n                //         According to the conditions required by the function, we satisfy them because:\n                //         1. `offsets_r` is stack-allocated, and thus considered separate allocated object.\n                //         2. The function `is_less` returns a `bool`.\n                //            Casting a `bool` will never overflow `isize`.\n                //         3. We have guaranteed that `block_r` will be `&lt;= BLOCK`.\n                //            Plus, `end_r` was initially set to the begin pointer of `offsets_` which was declared on the stack.\n                //            Thus, we know that even in the worst case (all invocations of `is_less` returns true) we will only be at most 1 byte pass the end.\n                //        Another unsafety operation here is dereferencing `elem`.\n                //        However, `elem` was initially `1 * sizeof(T)` past the end and we decrement it by `1 * sizeof(T)` before accessing it.\n                //        Plus, `block_r` was asserted to be less than `BLOCK` and `elem` will therefore at most be pointing to the beginning of the slice.\n                </span><span class=\"kw\">unsafe </span>{\n                    <span class=\"comment\">// Branchless comparison.\n                    </span>elem = elem.sub(<span class=\"number\">1</span>);\n                    <span class=\"kw-2\">*</span>end_r = i <span class=\"kw\">as </span>u8;\n                    end_r = end_r.add(is_less(<span class=\"kw-2\">&amp;*</span>elem, pivot) <span class=\"kw\">as </span>usize);\n                }\n            }\n        }\n\n        <span class=\"comment\">// Number of out-of-order elements to swap between the left and right side.\n        </span><span class=\"kw\">let </span>count = cmp::min(width(start_l, end_l), width(start_r, end_r));\n\n        <span class=\"kw\">if </span>count &gt; <span class=\"number\">0 </span>{\n            <span class=\"macro\">macro_rules!</span> left {\n                () =&gt; {\n                    l.add(usize::from(<span class=\"kw-2\">*</span>start_l))\n                };\n            }\n            <span class=\"macro\">macro_rules!</span> right {\n                () =&gt; {\n                    r.sub(usize::from(<span class=\"kw-2\">*</span>start_r) + <span class=\"number\">1</span>)\n                };\n            }\n\n            <span class=\"comment\">// Instead of swapping one pair at the time, it is more efficient to perform a cyclic\n            // permutation. This is not strictly equivalent to swapping, but produces a similar\n            // result using fewer memory operations.\n\n            // SAFETY: The use of `ptr::read` is valid because there is at least one element in\n            // both `offsets_l` and `offsets_r`, so `left!` is a valid pointer to read from.\n            //\n            // The uses of `left!` involve calls to `offset` on `l`, which points to the\n            // beginning of `v`. All the offsets pointed-to by `start_l` are at most `block_l`, so\n            // these `offset` calls are safe as all reads are within the block. The same argument\n            // applies for the uses of `right!`.\n            //\n            // The calls to `start_l.offset` are valid because there are at most `count-1` of them,\n            // plus the final one at the end of the unsafe block, where `count` is the minimum number\n            // of collected offsets in `offsets_l` and `offsets_r`, so there is no risk of there not\n            // being enough elements. The same reasoning applies to the calls to `start_r.offset`.\n            //\n            // The calls to `copy_nonoverlapping` are safe because `left!` and `right!` are guaranteed\n            // not to overlap, and are valid because of the reasoning above.\n            </span><span class=\"kw\">unsafe </span>{\n                <span class=\"kw\">let </span>tmp = ptr::read(<span class=\"macro\">left!</span>());\n                ptr::copy_nonoverlapping(<span class=\"macro\">right!</span>(), <span class=\"macro\">left!</span>(), <span class=\"number\">1</span>);\n\n                <span class=\"kw\">for _ in </span><span class=\"number\">1</span>..count {\n                    start_l = start_l.add(<span class=\"number\">1</span>);\n                    ptr::copy_nonoverlapping(<span class=\"macro\">left!</span>(), <span class=\"macro\">right!</span>(), <span class=\"number\">1</span>);\n                    start_r = start_r.add(<span class=\"number\">1</span>);\n                    ptr::copy_nonoverlapping(<span class=\"macro\">right!</span>(), <span class=\"macro\">left!</span>(), <span class=\"number\">1</span>);\n                }\n\n                ptr::copy_nonoverlapping(<span class=\"kw-2\">&amp;</span>tmp, <span class=\"macro\">right!</span>(), <span class=\"number\">1</span>);\n                mem::forget(tmp);\n                start_l = start_l.add(<span class=\"number\">1</span>);\n                start_r = start_r.add(<span class=\"number\">1</span>);\n            }\n        }\n\n        <span class=\"kw\">if </span>start_l == end_l {\n            <span class=\"comment\">// All out-of-order elements in the left block were moved. Move to the next block.\n\n            // block-width-guarantee\n            // SAFETY: if `!is_done` then the slice width is guaranteed to be at least `2*BLOCK` wide. There\n            // are at most `BLOCK` elements in `offsets_l` because of its size, so the `offset` operation is\n            // safe. Otherwise, the debug assertions in the `is_done` case guarantee that\n            // `width(l, r) == block_l + block_r`, namely, that the block sizes have been adjusted to account\n            // for the smaller number of remaining elements.\n            </span>l = <span class=\"kw\">unsafe </span>{ l.add(block_l) };\n        }\n\n        <span class=\"kw\">if </span>start_r == end_r {\n            <span class=\"comment\">// All out-of-order elements in the right block were moved. Move to the previous block.\n\n            // SAFETY: Same argument as [block-width-guarantee]. Either this is a full block `2*BLOCK`-wide,\n            // or `block_r` has been adjusted for the last handful of elements.\n            </span>r = <span class=\"kw\">unsafe </span>{ r.sub(block_r) };\n        }\n\n        <span class=\"kw\">if </span>is_done {\n            <span class=\"kw\">break</span>;\n        }\n    }\n\n    <span class=\"comment\">// All that remains now is at most one block (either the left or the right) with out-of-order\n    // elements that need to be moved. Such remaining elements can be simply shifted to the end\n    // within their block.\n\n    </span><span class=\"kw\">if </span>start_l &lt; end_l {\n        <span class=\"comment\">// The left block remains.\n        // Move its remaining out-of-order elements to the far right.\n        </span><span class=\"macro\">debug_assert_eq!</span>(width(l, r), block_l);\n        <span class=\"kw\">while </span>start_l &lt; end_l {\n            <span class=\"comment\">// remaining-elements-safety\n            // SAFETY: while the loop condition holds there are still elements in `offsets_l`, so it\n            // is safe to point `end_l` to the previous element.\n            //\n            // The `ptr::swap` is safe if both its arguments are valid for reads and writes:\n            //  - Per the debug assert above, the distance between `l` and `r` is `block_l`\n            //    elements, so there can be at most `block_l` remaining offsets between `start_l`\n            //    and `end_l`. This means `r` will be moved at most `block_l` steps back, which\n            //    makes the `r.offset` calls valid (at that point `l == r`).\n            //  - `offsets_l` contains valid offsets into `v` collected during the partitioning of\n            //    the last block, so the `l.offset` calls are valid.\n            </span><span class=\"kw\">unsafe </span>{\n                end_l = end_l.sub(<span class=\"number\">1</span>);\n                ptr::swap(l.add(usize::from(<span class=\"kw-2\">*</span>end_l)), r.sub(<span class=\"number\">1</span>));\n                r = r.sub(<span class=\"number\">1</span>);\n            }\n        }\n        width(v.as_mut_ptr(), r)\n    } <span class=\"kw\">else if </span>start_r &lt; end_r {\n        <span class=\"comment\">// The right block remains.\n        // Move its remaining out-of-order elements to the far left.\n        </span><span class=\"macro\">debug_assert_eq!</span>(width(l, r), block_r);\n        <span class=\"kw\">while </span>start_r &lt; end_r {\n            <span class=\"comment\">// SAFETY: See the reasoning in [remaining-elements-safety].\n            </span><span class=\"kw\">unsafe </span>{\n                end_r = end_r.sub(<span class=\"number\">1</span>);\n                ptr::swap(l, r.sub(usize::from(<span class=\"kw-2\">*</span>end_r) + <span class=\"number\">1</span>));\n                l = l.add(<span class=\"number\">1</span>);\n            }\n        }\n        width(v.as_mut_ptr(), l)\n    } <span class=\"kw\">else </span>{\n        <span class=\"comment\">// Nothing else to do, we're done.\n        </span>width(v.as_mut_ptr(), l)\n    }\n}\n\n<span class=\"doccomment\">/// Partitions `v` into elements smaller than `v[pivot]`, followed by elements greater than or\n/// equal to `v[pivot]`.\n///\n/// Returns a tuple of:\n///\n/// 1. Number of elements smaller than `v[pivot]`.\n/// 2. True if `v` was already partitioned.\n</span><span class=\"kw\">pub</span>(<span class=\"kw\">super</span>) <span class=\"kw\">fn </span>partition&lt;T, F&gt;(v: <span class=\"kw-2\">&amp;mut </span>[T], pivot: usize, is_less: <span class=\"kw-2\">&amp;mut </span>F) -&gt; (usize, bool)\n<span class=\"kw\">where\n    </span>F: FnMut(<span class=\"kw-2\">&amp;</span>T, <span class=\"kw-2\">&amp;</span>T) -&gt; bool,\n{\n    <span class=\"kw\">let </span>(mid, was_partitioned) = {\n        <span class=\"comment\">// Place the pivot at the beginning of slice.\n        </span>v.swap(<span class=\"number\">0</span>, pivot);\n        <span class=\"kw\">let </span>(pivot, v) = v.split_at_mut(<span class=\"number\">1</span>);\n        <span class=\"kw\">let </span>pivot = <span class=\"kw-2\">&amp;mut </span>pivot[<span class=\"number\">0</span>];\n\n        <span class=\"comment\">// Read the pivot into a stack-allocated variable for efficiency. If a following comparison\n        // operation panics, the pivot will be automatically written back into the slice.\n\n        // SAFETY: `pivot` is a reference to the first element of `v`, so `ptr::read` is safe.\n        </span><span class=\"kw\">let </span>tmp = mem::ManuallyDrop::new(<span class=\"kw\">unsafe </span>{ ptr::read(pivot) });\n        <span class=\"kw\">let </span>_pivot_guard = InsertionHole { src: <span class=\"kw-2\">&amp;*</span>tmp, dest: pivot };\n        <span class=\"kw\">let </span>pivot = <span class=\"kw-2\">&amp;*</span>tmp;\n\n        <span class=\"comment\">// Find the first pair of out-of-order elements.\n        </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>l = <span class=\"number\">0</span>;\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>r = v.len();\n\n        <span class=\"comment\">// SAFETY: The unsafety below involves indexing an array.\n        // For the first one: We already do the bounds checking here with `l &lt; r`.\n        // For the second one: We initially have `l == 0` and `r == v.len()` and we checked that `l &lt; r` at every indexing operation.\n        //                     From here we know that `r` must be at least `r == l` which was shown to be valid from the first one.\n        </span><span class=\"kw\">unsafe </span>{\n            <span class=\"comment\">// Find the first element greater than or equal to the pivot.\n            </span><span class=\"kw\">while </span>l &lt; r &amp;&amp; is_less(v.get_unchecked(l), pivot) {\n                l += <span class=\"number\">1</span>;\n            }\n\n            <span class=\"comment\">// Find the last element smaller that the pivot.\n            </span><span class=\"kw\">while </span>l &lt; r &amp;&amp; !is_less(v.get_unchecked(r - <span class=\"number\">1</span>), pivot) {\n                r -= <span class=\"number\">1</span>;\n            }\n        }\n\n        (l + partition_in_blocks(<span class=\"kw-2\">&amp;mut </span>v[l..r], pivot, is_less), l &gt;= r)\n\n        <span class=\"comment\">// `_pivot_guard` goes out of scope and writes the pivot (which is a stack-allocated\n        // variable) back into the slice where it originally was. This step is critical in ensuring\n        // safety!\n    </span>};\n\n    <span class=\"comment\">// Place the pivot between the two partitions.\n    </span>v.swap(<span class=\"number\">0</span>, mid);\n\n    (mid, was_partitioned)\n}\n\n<span class=\"doccomment\">/// Partitions `v` into elements equal to `v[pivot]` followed by elements greater than `v[pivot]`.\n///\n/// Returns the number of elements equal to the pivot. It is assumed that `v` does not contain\n/// elements smaller than the pivot.\n</span><span class=\"kw\">pub</span>(<span class=\"kw\">super</span>) <span class=\"kw\">fn </span>partition_equal&lt;T, F&gt;(v: <span class=\"kw-2\">&amp;mut </span>[T], pivot: usize, is_less: <span class=\"kw-2\">&amp;mut </span>F) -&gt; usize\n<span class=\"kw\">where\n    </span>F: FnMut(<span class=\"kw-2\">&amp;</span>T, <span class=\"kw-2\">&amp;</span>T) -&gt; bool,\n{\n    <span class=\"comment\">// Place the pivot at the beginning of slice.\n    </span>v.swap(<span class=\"number\">0</span>, pivot);\n    <span class=\"kw\">let </span>(pivot, v) = v.split_at_mut(<span class=\"number\">1</span>);\n    <span class=\"kw\">let </span>pivot = <span class=\"kw-2\">&amp;mut </span>pivot[<span class=\"number\">0</span>];\n\n    <span class=\"comment\">// Read the pivot into a stack-allocated variable for efficiency. If a following comparison\n    // operation panics, the pivot will be automatically written back into the slice.\n    // SAFETY: The pointer here is valid because it is obtained from a reference to a slice.\n    </span><span class=\"kw\">let </span>tmp = mem::ManuallyDrop::new(<span class=\"kw\">unsafe </span>{ ptr::read(pivot) });\n    <span class=\"kw\">let </span>_pivot_guard = InsertionHole { src: <span class=\"kw-2\">&amp;*</span>tmp, dest: pivot };\n    <span class=\"kw\">let </span>pivot = <span class=\"kw-2\">&amp;*</span>tmp;\n\n    <span class=\"kw\">let </span>len = v.len();\n    <span class=\"kw\">if </span>len == <span class=\"number\">0 </span>{\n        <span class=\"kw\">return </span><span class=\"number\">0</span>;\n    }\n\n    <span class=\"comment\">// Now partition the slice.\n    </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>l = <span class=\"number\">0</span>;\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>r = len;\n    <span class=\"kw\">loop </span>{\n        <span class=\"comment\">// SAFETY: The unsafety below involves indexing an array.\n        // For the first one: We already do the bounds checking here with `l &lt; r`.\n        // For the second one: We initially have `l == 0` and `r == v.len()` and we checked that `l &lt; r` at every indexing operation.\n        //                     From here we know that `r` must be at least `r == l` which was shown to be valid from the first one.\n        </span><span class=\"kw\">unsafe </span>{\n            <span class=\"comment\">// Find the first element greater than the pivot.\n            </span><span class=\"kw\">while </span>l &lt; r &amp;&amp; !is_less(pivot, v.get_unchecked(l)) {\n                l += <span class=\"number\">1</span>;\n            }\n\n            <span class=\"comment\">// Find the last element equal to the pivot.\n            </span><span class=\"kw\">loop </span>{\n                r -= <span class=\"number\">1</span>;\n                <span class=\"kw\">if </span>l &gt;= r || !is_less(pivot, v.get_unchecked(r)) {\n                    <span class=\"kw\">break</span>;\n                }\n            }\n\n            <span class=\"comment\">// Are we done?\n            </span><span class=\"kw\">if </span>l &gt;= r {\n                <span class=\"kw\">break</span>;\n            }\n\n            <span class=\"comment\">// Swap the found pair of out-of-order elements.\n            </span><span class=\"kw\">let </span>ptr = v.as_mut_ptr();\n            ptr::swap(ptr.add(l), ptr.add(r));\n            l += <span class=\"number\">1</span>;\n        }\n    }\n\n    <span class=\"comment\">// We found `l` elements equal to the pivot. Add 1 to account for the pivot itself.\n    </span>l + <span class=\"number\">1\n\n    </span><span class=\"comment\">// `_pivot_guard` goes out of scope and writes the pivot (which is a stack-allocated variable)\n    // back into the slice where it originally was. This step is critical in ensuring safety!\n</span>}\n\n<span class=\"doccomment\">/// Scatters some elements around in an attempt to break patterns that might cause imbalanced\n/// partitions in quicksort.\n</span><span class=\"attr\">#[cold]\n</span><span class=\"kw\">pub</span>(<span class=\"kw\">super</span>) <span class=\"kw\">fn </span>break_patterns&lt;T&gt;(v: <span class=\"kw-2\">&amp;mut </span>[T]) {\n    <span class=\"kw\">let </span>len = v.len();\n    <span class=\"kw\">if </span>len &gt;= <span class=\"number\">8 </span>{\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>seed = len;\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>gen_usize = || {\n            <span class=\"comment\">// Pseudorandom number generator from the \"Xorshift RNGs\" paper by George Marsaglia.\n            </span><span class=\"kw\">if </span>usize::BITS &lt;= <span class=\"number\">32 </span>{\n                <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>r = seed <span class=\"kw\">as </span>u32;\n                r ^= r &lt;&lt; <span class=\"number\">13</span>;\n                r ^= r &gt;&gt; <span class=\"number\">17</span>;\n                r ^= r &lt;&lt; <span class=\"number\">5</span>;\n                seed = r <span class=\"kw\">as </span>usize;\n                seed\n            } <span class=\"kw\">else </span>{\n                <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>r = seed <span class=\"kw\">as </span>u64;\n                r ^= r &lt;&lt; <span class=\"number\">13</span>;\n                r ^= r &gt;&gt; <span class=\"number\">7</span>;\n                r ^= r &lt;&lt; <span class=\"number\">17</span>;\n                seed = r <span class=\"kw\">as </span>usize;\n                seed\n            }\n        };\n\n        <span class=\"comment\">// Take random numbers modulo this number.\n        // The number fits into `usize` because `len` is not greater than `isize::MAX`.\n        </span><span class=\"kw\">let </span>modulus = len.next_power_of_two();\n\n        <span class=\"comment\">// Some pivot candidates will be in the nearby of this index. Let's randomize them.\n        </span><span class=\"kw\">let </span>pos = len / <span class=\"number\">4 </span>* <span class=\"number\">2</span>;\n\n        <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..<span class=\"number\">3 </span>{\n            <span class=\"comment\">// Generate a random number modulo `len`. However, in order to avoid costly operations\n            // we first take it modulo a power of two, and then decrease by `len` until it fits\n            // into the range `[0, len - 1]`.\n            </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>other = gen_usize() &amp; (modulus - <span class=\"number\">1</span>);\n\n            <span class=\"comment\">// `other` is guaranteed to be less than `2 * len`.\n            </span><span class=\"kw\">if </span>other &gt;= len {\n                other -= len;\n            }\n\n            v.swap(pos - <span class=\"number\">1 </span>+ i, other);\n        }\n    }\n}\n\n<span class=\"doccomment\">/// Chooses a pivot in `v` and returns the index and `true` if the slice is likely already sorted.\n///\n/// Elements in `v` might be reordered in the process.\n</span><span class=\"kw\">pub</span>(<span class=\"kw\">super</span>) <span class=\"kw\">fn </span>choose_pivot&lt;T, F&gt;(v: <span class=\"kw-2\">&amp;mut </span>[T], is_less: <span class=\"kw-2\">&amp;mut </span>F) -&gt; (usize, bool)\n<span class=\"kw\">where\n    </span>F: FnMut(<span class=\"kw-2\">&amp;</span>T, <span class=\"kw-2\">&amp;</span>T) -&gt; bool,\n{\n    <span class=\"comment\">// Minimum length to choose the median-of-medians method.\n    // Shorter slices use the simple median-of-three method.\n    </span><span class=\"kw\">const </span>SHORTEST_MEDIAN_OF_MEDIANS: usize = <span class=\"number\">50</span>;\n    <span class=\"comment\">// Maximum number of swaps that can be performed in this function.\n    </span><span class=\"kw\">const </span>MAX_SWAPS: usize = <span class=\"number\">4 </span>* <span class=\"number\">3</span>;\n\n    <span class=\"kw\">let </span>len = v.len();\n\n    <span class=\"comment\">// Three indices near which we are going to choose a pivot.\n    </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>a = len / <span class=\"number\">4 </span>* <span class=\"number\">1</span>;\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>b = len / <span class=\"number\">4 </span>* <span class=\"number\">2</span>;\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = len / <span class=\"number\">4 </span>* <span class=\"number\">3</span>;\n\n    <span class=\"comment\">// Counts the total number of swaps we are about to perform while sorting indices.\n    </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>swaps = <span class=\"number\">0</span>;\n\n    <span class=\"kw\">if </span>len &gt;= <span class=\"number\">8 </span>{\n        <span class=\"comment\">// Swaps indices so that `v[a] &lt;= v[b]`.\n        // SAFETY: `len &gt;= 8` so there are at least two elements in the neighborhoods of\n        // `a`, `b` and `c`. This means the three calls to `sort_adjacent` result in\n        // corresponding calls to `sort3` with valid 3-item neighborhoods around each\n        // pointer, which in turn means the calls to `sort2` are done with valid\n        // references. Thus the `v.get_unchecked` calls are safe, as is the `ptr::swap`\n        // call.\n        </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>sort2 = |a: <span class=\"kw-2\">&amp;mut </span>usize, b: <span class=\"kw-2\">&amp;mut </span>usize| <span class=\"kw\">unsafe </span>{\n            <span class=\"kw\">if </span>is_less(v.get_unchecked(<span class=\"kw-2\">*</span>b), v.get_unchecked(<span class=\"kw-2\">*</span>a)) {\n                ptr::swap(a, b);\n                swaps += <span class=\"number\">1</span>;\n            }\n        };\n\n        <span class=\"comment\">// Swaps indices so that `v[a] &lt;= v[b] &lt;= v[c]`.\n        </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>sort3 = |a: <span class=\"kw-2\">&amp;mut </span>usize, b: <span class=\"kw-2\">&amp;mut </span>usize, c: <span class=\"kw-2\">&amp;mut </span>usize| {\n            sort2(a, b);\n            sort2(b, c);\n            sort2(a, b);\n        };\n\n        <span class=\"kw\">if </span>len &gt;= SHORTEST_MEDIAN_OF_MEDIANS {\n            <span class=\"comment\">// Finds the median of `v[a - 1], v[a], v[a + 1]` and stores the index into `a`.\n            </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>sort_adjacent = |a: <span class=\"kw-2\">&amp;mut </span>usize| {\n                <span class=\"kw\">let </span>tmp = <span class=\"kw-2\">*</span>a;\n                sort3(<span class=\"kw-2\">&amp;mut </span>(tmp - <span class=\"number\">1</span>), a, <span class=\"kw-2\">&amp;mut </span>(tmp + <span class=\"number\">1</span>));\n            };\n\n            <span class=\"comment\">// Find medians in the neighborhoods of `a`, `b`, and `c`.\n            </span>sort_adjacent(<span class=\"kw-2\">&amp;mut </span>a);\n            sort_adjacent(<span class=\"kw-2\">&amp;mut </span>b);\n            sort_adjacent(<span class=\"kw-2\">&amp;mut </span>c);\n        }\n\n        <span class=\"comment\">// Find the median among `a`, `b`, and `c`.\n        </span>sort3(<span class=\"kw-2\">&amp;mut </span>a, <span class=\"kw-2\">&amp;mut </span>b, <span class=\"kw-2\">&amp;mut </span>c);\n    }\n\n    <span class=\"kw\">if </span>swaps &lt; MAX_SWAPS {\n        (b, swaps == <span class=\"number\">0</span>)\n    } <span class=\"kw\">else </span>{\n        <span class=\"comment\">// The maximum number of swaps was performed. Chances are the slice is descending or mostly\n        // descending, so reversing will probably help sort it faster.\n        </span>v.reverse();\n        (len - <span class=\"number\">1 </span>- b, <span class=\"bool-val\">true</span>)\n    }\n}\n\n<span class=\"doccomment\">/// Sorts `v` recursively.\n///\n/// If the slice had a predecessor in the original array, it is specified as `pred`.\n///\n/// `limit` is the number of allowed imbalanced partitions before switching to `heapsort`. If zero,\n/// this function will immediately switch to heapsort.\n</span><span class=\"kw\">fn </span>recurse&lt;<span class=\"lifetime\">'a</span>, T, F&gt;(<span class=\"kw-2\">mut </span>v: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><span class=\"kw-2\">mut </span>[T], is_less: <span class=\"kw-2\">&amp;mut </span>F, <span class=\"kw-2\">mut </span>pred: <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>T&gt;, <span class=\"kw-2\">mut </span>limit: u32)\n<span class=\"kw\">where\n    </span>F: FnMut(<span class=\"kw-2\">&amp;</span>T, <span class=\"kw-2\">&amp;</span>T) -&gt; bool,\n{\n    <span class=\"comment\">// Slices of up to this length get sorted using insertion sort.\n    </span><span class=\"kw\">const </span>MAX_INSERTION: usize = <span class=\"number\">20</span>;\n\n    <span class=\"comment\">// True if the last partitioning was reasonably balanced.\n    </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>was_balanced = <span class=\"bool-val\">true</span>;\n    <span class=\"comment\">// True if the last partitioning didn't shuffle elements (the slice was already partitioned).\n    </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>was_partitioned = <span class=\"bool-val\">true</span>;\n\n    <span class=\"kw\">loop </span>{\n        <span class=\"kw\">let </span>len = v.len();\n\n        <span class=\"comment\">// Very short slices get sorted using insertion sort.\n        </span><span class=\"kw\">if </span>len &lt;= MAX_INSERTION {\n            <span class=\"kw\">if </span>len &gt;= <span class=\"number\">2 </span>{\n                insertion_sort_shift_left(v, <span class=\"number\">1</span>, is_less);\n            }\n            <span class=\"kw\">return</span>;\n        }\n\n        <span class=\"comment\">// If too many bad pivot choices were made, simply fall back to heapsort in order to\n        // guarantee `O(n * log(n))` worst-case.\n        </span><span class=\"kw\">if </span>limit == <span class=\"number\">0 </span>{\n            heapsort(v, is_less);\n            <span class=\"kw\">return</span>;\n        }\n\n        <span class=\"comment\">// If the last partitioning was imbalanced, try breaking patterns in the slice by shuffling\n        // some elements around. Hopefully we'll choose a better pivot this time.\n        </span><span class=\"kw\">if </span>!was_balanced {\n            break_patterns(v);\n            limit -= <span class=\"number\">1</span>;\n        }\n\n        <span class=\"comment\">// Choose a pivot and try guessing whether the slice is already sorted.\n        </span><span class=\"kw\">let </span>(pivot, likely_sorted) = choose_pivot(v, is_less);\n\n        <span class=\"comment\">// If the last partitioning was decently balanced and didn't shuffle elements, and if pivot\n        // selection predicts the slice is likely already sorted...\n        </span><span class=\"kw\">if </span>was_balanced &amp;&amp; was_partitioned &amp;&amp; likely_sorted {\n            <span class=\"comment\">// Try identifying several out-of-order elements and shifting them to correct\n            // positions. If the slice ends up being completely sorted, we're done.\n            </span><span class=\"kw\">if </span>partial_insertion_sort(v, is_less) {\n                <span class=\"kw\">return</span>;\n            }\n        }\n\n        <span class=\"comment\">// If the chosen pivot is equal to the predecessor, then it's the smallest element in the\n        // slice. Partition the slice into elements equal to and elements greater than the pivot.\n        // This case is usually hit when the slice contains many duplicate elements.\n        </span><span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(p) = pred {\n            <span class=\"kw\">if </span>!is_less(p, <span class=\"kw-2\">&amp;</span>v[pivot]) {\n                <span class=\"kw\">let </span>mid = partition_equal(v, pivot, is_less);\n\n                <span class=\"comment\">// Continue sorting elements greater than the pivot.\n                </span>v = <span class=\"kw-2\">&amp;mut </span>v[mid..];\n                <span class=\"kw\">continue</span>;\n            }\n        }\n\n        <span class=\"comment\">// Partition the slice.\n        </span><span class=\"kw\">let </span>(mid, was_p) = partition(v, pivot, is_less);\n        was_balanced = cmp::min(mid, len - mid) &gt;= len / <span class=\"number\">8</span>;\n        was_partitioned = was_p;\n\n        <span class=\"comment\">// Split the slice into `left`, `pivot`, and `right`.\n        </span><span class=\"kw\">let </span>(left, right) = v.split_at_mut(mid);\n        <span class=\"kw\">let </span>(pivot, right) = right.split_at_mut(<span class=\"number\">1</span>);\n        <span class=\"kw\">let </span>pivot = <span class=\"kw-2\">&amp;</span>pivot[<span class=\"number\">0</span>];\n\n        <span class=\"comment\">// Recurse into the shorter side only in order to minimize the total number of recursive\n        // calls and consume less stack space. Then just continue with the longer side (this is\n        // akin to tail recursion).\n        </span><span class=\"kw\">if </span>left.len() &lt; right.len() {\n            recurse(left, is_less, pred, limit);\n            v = right;\n            pred = <span class=\"prelude-val\">Some</span>(pivot);\n        } <span class=\"kw\">else </span>{\n            recurse(right, is_less, <span class=\"prelude-val\">Some</span>(pivot), limit);\n            v = left;\n        }\n    }\n}\n\n<span class=\"doccomment\">/// Sorts `v` using pattern-defeating quicksort, which is *O*(*n* \\* log(*n*)) worst-case.\n</span><span class=\"kw\">pub fn </span>quicksort&lt;T, F&gt;(v: <span class=\"kw-2\">&amp;mut </span>[T], <span class=\"kw-2\">mut </span>is_less: F)\n<span class=\"kw\">where\n    </span>F: FnMut(<span class=\"kw-2\">&amp;</span>T, <span class=\"kw-2\">&amp;</span>T) -&gt; bool,\n{\n    <span class=\"comment\">// Sorting has no meaningful behavior on zero-sized types.\n    </span><span class=\"kw\">if </span>T::IS_ZST {\n        <span class=\"kw\">return</span>;\n    }\n\n    <span class=\"comment\">// Limit the number of imbalanced partitions to `floor(log2(len)) + 1`.\n    </span><span class=\"kw\">let </span>limit = usize::BITS - v.len().leading_zeros();\n\n    recurse(v, <span class=\"kw-2\">&amp;mut </span>is_less, <span class=\"prelude-val\">None</span>, limit);\n}\n\n<span class=\"doccomment\">/// Merges non-decreasing runs `v[..mid]` and `v[mid..]` using `buf` as temporary storage, and\n/// stores the result into `v[..]`.\n///\n/// # Safety\n///\n/// The two slices must be non-empty and `mid` must be in bounds. Buffer `buf` must be long enough\n/// to hold a copy of the shorter slice. Also, `T` must not be a zero-sized type.\n</span><span class=\"kw\">unsafe fn </span>merge&lt;T, F&gt;(v: <span class=\"kw-2\">&amp;mut </span>[T], mid: usize, buf: <span class=\"kw-2\">*mut </span>T, is_less: <span class=\"kw-2\">&amp;mut </span>F)\n<span class=\"kw\">where\n    </span>F: FnMut(<span class=\"kw-2\">&amp;</span>T, <span class=\"kw-2\">&amp;</span>T) -&gt; bool,\n{\n    <span class=\"kw\">let </span>len = v.len();\n    <span class=\"kw\">let </span>v = v.as_mut_ptr();\n\n    <span class=\"comment\">// SAFETY: mid and len must be in-bounds of v.\n    </span><span class=\"kw\">let </span>(v_mid, v_end) = <span class=\"kw\">unsafe </span>{ (v.add(mid), v.add(len)) };\n\n    <span class=\"comment\">// The merge process first copies the shorter run into `buf`. Then it traces the newly copied\n    // run and the longer run forwards (or backwards), comparing their next unconsumed elements and\n    // copying the lesser (or greater) one into `v`.\n    //\n    // As soon as the shorter run is fully consumed, the process is done. If the longer run gets\n    // consumed first, then we must copy whatever is left of the shorter run into the remaining\n    // hole in `v`.\n    //\n    // Intermediate state of the process is always tracked by `hole`, which serves two purposes:\n    // 1. Protects integrity of `v` from panics in `is_less`.\n    // 2. Fills the remaining hole in `v` if the longer run gets consumed first.\n    //\n    // Panic safety:\n    //\n    // If `is_less` panics at any point during the process, `hole` will get dropped and fill the\n    // hole in `v` with the unconsumed range in `buf`, thus ensuring that `v` still holds every\n    // object it initially held exactly once.\n    </span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>hole;\n\n    <span class=\"kw\">if </span>mid &lt;= len - mid {\n        <span class=\"comment\">// The left run is shorter.\n\n        // SAFETY: buf must have enough capacity for `v[..mid]`.\n        </span><span class=\"kw\">unsafe </span>{\n            ptr::copy_nonoverlapping(v, buf, mid);\n            hole = MergeHole { start: buf, end: buf.add(mid), dest: v };\n        }\n\n        <span class=\"comment\">// Initially, these pointers point to the beginnings of their arrays.\n        </span><span class=\"kw\">let </span>left = <span class=\"kw-2\">&amp;mut </span>hole.start;\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>right = v_mid;\n        <span class=\"kw\">let </span>out = <span class=\"kw-2\">&amp;mut </span>hole.dest;\n\n        <span class=\"kw\">while </span><span class=\"kw-2\">*</span>left &lt; hole.end &amp;&amp; right &lt; v_end {\n            <span class=\"comment\">// Consume the lesser side.\n            // If equal, prefer the left run to maintain stability.\n\n            // SAFETY: left and right must be valid and part of v same for out.\n            </span><span class=\"kw\">unsafe </span>{\n                <span class=\"kw\">let </span>is_l = is_less(<span class=\"kw-2\">&amp;*</span>right, <span class=\"kw-2\">&amp;**</span>left);\n                <span class=\"kw\">let </span>to_copy = <span class=\"kw\">if </span>is_l { right } <span class=\"kw\">else </span>{ <span class=\"kw-2\">*</span>left };\n                ptr::copy_nonoverlapping(to_copy, <span class=\"kw-2\">*</span>out, <span class=\"number\">1</span>);\n                <span class=\"kw-2\">*</span>out = out.add(<span class=\"number\">1</span>);\n                right = right.add(is_l <span class=\"kw\">as </span>usize);\n                <span class=\"kw-2\">*</span>left = left.add(!is_l <span class=\"kw\">as </span>usize);\n            }\n        }\n    } <span class=\"kw\">else </span>{\n        <span class=\"comment\">// The right run is shorter.\n\n        // SAFETY: buf must have enough capacity for `v[mid..]`.\n        </span><span class=\"kw\">unsafe </span>{\n            ptr::copy_nonoverlapping(v_mid, buf, len - mid);\n            hole = MergeHole { start: buf, end: buf.add(len - mid), dest: v_mid };\n        }\n\n        <span class=\"comment\">// Initially, these pointers point past the ends of their arrays.\n        </span><span class=\"kw\">let </span>left = <span class=\"kw-2\">&amp;mut </span>hole.dest;\n        <span class=\"kw\">let </span>right = <span class=\"kw-2\">&amp;mut </span>hole.end;\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>out = v_end;\n\n        <span class=\"kw\">while </span>v &lt; <span class=\"kw-2\">*</span>left &amp;&amp; buf &lt; <span class=\"kw-2\">*</span>right {\n            <span class=\"comment\">// Consume the greater side.\n            // If equal, prefer the right run to maintain stability.\n\n            // SAFETY: left and right must be valid and part of v same for out.\n            </span><span class=\"kw\">unsafe </span>{\n                <span class=\"kw\">let </span>is_l = is_less(<span class=\"kw-2\">&amp;*</span>right.sub(<span class=\"number\">1</span>), <span class=\"kw-2\">&amp;*</span>left.sub(<span class=\"number\">1</span>));\n                <span class=\"kw-2\">*</span>left = left.sub(is_l <span class=\"kw\">as </span>usize);\n                <span class=\"kw-2\">*</span>right = right.sub(!is_l <span class=\"kw\">as </span>usize);\n                <span class=\"kw\">let </span>to_copy = <span class=\"kw\">if </span>is_l { <span class=\"kw-2\">*</span>left } <span class=\"kw\">else </span>{ <span class=\"kw-2\">*</span>right };\n                out = out.sub(<span class=\"number\">1</span>);\n                ptr::copy_nonoverlapping(to_copy, out, <span class=\"number\">1</span>);\n            }\n        }\n    }\n    <span class=\"comment\">// Finally, `hole` gets dropped. If the shorter run was not fully consumed, whatever remains of\n    // it will now be copied into the hole in `v`.\n\n    // When dropped, copies the range `start..end` into `dest..`.\n    </span><span class=\"kw\">struct </span>MergeHole&lt;T&gt; {\n        start: <span class=\"kw-2\">*mut </span>T,\n        end: <span class=\"kw-2\">*mut </span>T,\n        dest: <span class=\"kw-2\">*mut </span>T,\n    }\n\n    <span class=\"kw\">impl</span>&lt;T&gt; Drop <span class=\"kw\">for </span>MergeHole&lt;T&gt; {\n        <span class=\"kw\">fn </span>drop(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) {\n            <span class=\"comment\">// SAFETY: `T` is not a zero-sized type, and these are pointers into a slice's elements.\n            </span><span class=\"kw\">unsafe </span>{\n                <span class=\"kw\">let </span>len = <span class=\"self\">self</span>.end.sub_ptr(<span class=\"self\">self</span>.start);\n                ptr::copy_nonoverlapping(<span class=\"self\">self</span>.start, <span class=\"self\">self</span>.dest, len);\n            }\n        }\n    }\n}\n\n<span class=\"doccomment\">/// This merge sort borrows some (but not all) ideas from TimSort, which used to be described in\n/// detail [here](https://github.com/python/cpython/blob/main/Objects/listsort.txt). However Python\n/// has switched to a Powersort based implementation.\n///\n/// The algorithm identifies strictly descending and non-descending subsequences, which are called\n/// natural runs. There is a stack of pending runs yet to be merged. Each newly found run is pushed\n/// onto the stack, and then some pairs of adjacent runs are merged until these two invariants are\n/// satisfied:\n///\n/// 1. for every `i` in `1..runs.len()`: `runs[i - 1].len &gt; runs[i].len`\n/// 2. for every `i` in `2..runs.len()`: `runs[i - 2].len &gt; runs[i - 1].len + runs[i].len`\n///\n/// The invariants ensure that the total running time is *O*(*n* \\* log(*n*)) worst-case.\n</span><span class=\"kw\">pub fn </span>merge_sort&lt;T, CmpF, ElemAllocF, ElemDeallocF, RunAllocF, RunDeallocF&gt;(\n    v: <span class=\"kw-2\">&amp;mut </span>[T],\n    is_less: <span class=\"kw-2\">&amp;mut </span>CmpF,\n    elem_alloc_fn: ElemAllocF,\n    elem_dealloc_fn: ElemDeallocF,\n    run_alloc_fn: RunAllocF,\n    run_dealloc_fn: RunDeallocF,\n) <span class=\"kw\">where\n    </span>CmpF: FnMut(<span class=\"kw-2\">&amp;</span>T, <span class=\"kw-2\">&amp;</span>T) -&gt; bool,\n    ElemAllocF: Fn(usize) -&gt; <span class=\"kw-2\">*mut </span>T,\n    ElemDeallocF: Fn(<span class=\"kw-2\">*mut </span>T, usize),\n    RunAllocF: Fn(usize) -&gt; <span class=\"kw-2\">*mut </span>TimSortRun,\n    RunDeallocF: Fn(<span class=\"kw-2\">*mut </span>TimSortRun, usize),\n{\n    <span class=\"comment\">// Slices of up to this length get sorted using insertion sort.\n    </span><span class=\"kw\">const </span>MAX_INSERTION: usize = <span class=\"number\">20</span>;\n\n    <span class=\"comment\">// The caller should have already checked that.\n    </span><span class=\"macro\">debug_assert!</span>(!T::IS_ZST);\n\n    <span class=\"kw\">let </span>len = v.len();\n\n    <span class=\"comment\">// Short arrays get sorted in-place via insertion sort to avoid allocations.\n    </span><span class=\"kw\">if </span>len &lt;= MAX_INSERTION {\n        <span class=\"kw\">if </span>len &gt;= <span class=\"number\">2 </span>{\n            insertion_sort_shift_left(v, <span class=\"number\">1</span>, is_less);\n        }\n        <span class=\"kw\">return</span>;\n    }\n\n    <span class=\"comment\">// Allocate a buffer to use as scratch memory. We keep the length 0 so we can keep in it\n    // shallow copies of the contents of `v` without risking the dtors running on copies if\n    // `is_less` panics. When merging two sorted runs, this buffer holds a copy of the shorter run,\n    // which will always have length at most `len / 2`.\n    </span><span class=\"kw\">let </span>buf = BufGuard::new(len / <span class=\"number\">2</span>, elem_alloc_fn, elem_dealloc_fn);\n    <span class=\"kw\">let </span>buf_ptr = buf.buf_ptr.as_ptr();\n\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>runs = RunVec::new(run_alloc_fn, run_dealloc_fn);\n\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>end = <span class=\"number\">0</span>;\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>start = <span class=\"number\">0</span>;\n\n    <span class=\"comment\">// Scan forward. Memory pre-fetching prefers forward scanning vs backwards scanning, and the\n    // code-gen is usually better. For the most sensitive types such as integers, these are merged\n    // bidirectionally at once. So there is no benefit in scanning backwards.\n    </span><span class=\"kw\">while </span>end &lt; len {\n        <span class=\"kw\">let </span>(streak_end, was_reversed) = find_streak(<span class=\"kw-2\">&amp;</span>v[start..], is_less);\n        end += streak_end;\n        <span class=\"kw\">if </span>was_reversed {\n            v[start..end].reverse();\n        }\n\n        <span class=\"comment\">// Insert some more elements into the run if it's too short. Insertion sort is faster than\n        // merge sort on short sequences, so this significantly improves performance.\n        </span>end = provide_sorted_batch(v, start, end, is_less);\n\n        <span class=\"comment\">// Push this run onto the stack.\n        </span>runs.push(TimSortRun { start, len: end - start });\n        start = end;\n\n        <span class=\"comment\">// Merge some pairs of adjacent runs to satisfy the invariants.\n        </span><span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span>(r) = collapse(runs.as_slice(), len) {\n            <span class=\"kw\">let </span>left = runs[r];\n            <span class=\"kw\">let </span>right = runs[r + <span class=\"number\">1</span>];\n            <span class=\"kw\">let </span>merge_slice = <span class=\"kw-2\">&amp;mut </span>v[left.start..right.start + right.len];\n            <span class=\"comment\">// SAFETY: `buf_ptr` must hold enough capacity for the shorter of the two sides, and\n            // neither side may be on length 0.\n            </span><span class=\"kw\">unsafe </span>{\n                merge(merge_slice, left.len, buf_ptr, is_less);\n            }\n            runs[r + <span class=\"number\">1</span>] = TimSortRun { start: left.start, len: left.len + right.len };\n            runs.remove(r);\n        }\n    }\n\n    <span class=\"comment\">// Finally, exactly one run must remain in the stack.\n    </span><span class=\"macro\">debug_assert!</span>(runs.len() == <span class=\"number\">1 </span>&amp;&amp; runs[<span class=\"number\">0</span>].start == <span class=\"number\">0 </span>&amp;&amp; runs[<span class=\"number\">0</span>].len == len);\n\n    <span class=\"comment\">// Examines the stack of runs and identifies the next pair of runs to merge. More specifically,\n    // if `Some(r)` is returned, that means `runs[r]` and `runs[r + 1]` must be merged next. If the\n    // algorithm should continue building a new run instead, `None` is returned.\n    //\n    // TimSort is infamous for its buggy implementations, as described here:\n    // http://envisage-project.eu/timsort-specification-and-verification/\n    //\n    // The gist of the story is: we must enforce the invariants on the top four runs on the stack.\n    // Enforcing them on just top three is not sufficient to ensure that the invariants will still\n    // hold for *all* runs in the stack.\n    //\n    // This function correctly checks invariants for the top four runs. Additionally, if the top\n    // run starts at index 0, it will always demand a merge operation until the stack is fully\n    // collapsed, in order to complete the sort.\n    </span><span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>collapse(runs: <span class=\"kw-2\">&amp;</span>[TimSortRun], stop: usize) -&gt; <span class=\"prelude-ty\">Option</span>&lt;usize&gt; {\n        <span class=\"kw\">let </span>n = runs.len();\n        <span class=\"kw\">if </span>n &gt;= <span class=\"number\">2\n            </span>&amp;&amp; (runs[n - <span class=\"number\">1</span>].start + runs[n - <span class=\"number\">1</span>].len == stop\n                || runs[n - <span class=\"number\">2</span>].len &lt;= runs[n - <span class=\"number\">1</span>].len\n                || (n &gt;= <span class=\"number\">3 </span>&amp;&amp; runs[n - <span class=\"number\">3</span>].len &lt;= runs[n - <span class=\"number\">2</span>].len + runs[n - <span class=\"number\">1</span>].len)\n                || (n &gt;= <span class=\"number\">4 </span>&amp;&amp; runs[n - <span class=\"number\">4</span>].len &lt;= runs[n - <span class=\"number\">3</span>].len + runs[n - <span class=\"number\">2</span>].len))\n        {\n            <span class=\"kw\">if </span>n &gt;= <span class=\"number\">3 </span>&amp;&amp; runs[n - <span class=\"number\">3</span>].len &lt; runs[n - <span class=\"number\">1</span>].len { <span class=\"prelude-val\">Some</span>(n - <span class=\"number\">3</span>) } <span class=\"kw\">else </span>{ <span class=\"prelude-val\">Some</span>(n - <span class=\"number\">2</span>) }\n        } <span class=\"kw\">else </span>{\n            <span class=\"prelude-val\">None\n        </span>}\n    }\n\n    <span class=\"comment\">// Extremely basic versions of Vec.\n    // Their use is super limited and by having the code here, it allows reuse between the sort\n    // implementations.\n    </span><span class=\"kw\">struct </span>BufGuard&lt;T, ElemDeallocF&gt;\n    <span class=\"kw\">where\n        </span>ElemDeallocF: Fn(<span class=\"kw-2\">*mut </span>T, usize),\n    {\n        buf_ptr: ptr::NonNull&lt;T&gt;,\n        capacity: usize,\n        elem_dealloc_fn: ElemDeallocF,\n    }\n\n    <span class=\"kw\">impl</span>&lt;T, ElemDeallocF&gt; BufGuard&lt;T, ElemDeallocF&gt;\n    <span class=\"kw\">where\n        </span>ElemDeallocF: Fn(<span class=\"kw-2\">*mut </span>T, usize),\n    {\n        <span class=\"kw\">fn </span>new&lt;ElemAllocF&gt;(\n            len: usize,\n            elem_alloc_fn: ElemAllocF,\n            elem_dealloc_fn: ElemDeallocF,\n        ) -&gt; <span class=\"self\">Self\n        </span><span class=\"kw\">where\n            </span>ElemAllocF: Fn(usize) -&gt; <span class=\"kw-2\">*mut </span>T,\n        {\n            <span class=\"self\">Self </span>{\n                buf_ptr: ptr::NonNull::new(elem_alloc_fn(len)).unwrap(),\n                capacity: len,\n                elem_dealloc_fn,\n            }\n        }\n    }\n\n    <span class=\"kw\">impl</span>&lt;T, ElemDeallocF&gt; Drop <span class=\"kw\">for </span>BufGuard&lt;T, ElemDeallocF&gt;\n    <span class=\"kw\">where\n        </span>ElemDeallocF: Fn(<span class=\"kw-2\">*mut </span>T, usize),\n    {\n        <span class=\"kw\">fn </span>drop(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) {\n            (<span class=\"self\">self</span>.elem_dealloc_fn)(<span class=\"self\">self</span>.buf_ptr.as_ptr(), <span class=\"self\">self</span>.capacity);\n        }\n    }\n\n    <span class=\"kw\">struct </span>RunVec&lt;RunAllocF, RunDeallocF&gt;\n    <span class=\"kw\">where\n        </span>RunAllocF: Fn(usize) -&gt; <span class=\"kw-2\">*mut </span>TimSortRun,\n        RunDeallocF: Fn(<span class=\"kw-2\">*mut </span>TimSortRun, usize),\n    {\n        buf_ptr: ptr::NonNull&lt;TimSortRun&gt;,\n        capacity: usize,\n        len: usize,\n        run_alloc_fn: RunAllocF,\n        run_dealloc_fn: RunDeallocF,\n    }\n\n    <span class=\"kw\">impl</span>&lt;RunAllocF, RunDeallocF&gt; RunVec&lt;RunAllocF, RunDeallocF&gt;\n    <span class=\"kw\">where\n        </span>RunAllocF: Fn(usize) -&gt; <span class=\"kw-2\">*mut </span>TimSortRun,\n        RunDeallocF: Fn(<span class=\"kw-2\">*mut </span>TimSortRun, usize),\n    {\n        <span class=\"kw\">fn </span>new(run_alloc_fn: RunAllocF, run_dealloc_fn: RunDeallocF) -&gt; <span class=\"self\">Self </span>{\n            <span class=\"comment\">// Most slices can be sorted with at most 16 runs in-flight.\n            </span><span class=\"kw\">const </span>START_RUN_CAPACITY: usize = <span class=\"number\">16</span>;\n\n            <span class=\"self\">Self </span>{\n                buf_ptr: ptr::NonNull::new(run_alloc_fn(START_RUN_CAPACITY)).unwrap(),\n                capacity: START_RUN_CAPACITY,\n                len: <span class=\"number\">0</span>,\n                run_alloc_fn,\n                run_dealloc_fn,\n            }\n        }\n\n        <span class=\"kw\">fn </span>push(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, val: TimSortRun) {\n            <span class=\"kw\">if </span><span class=\"self\">self</span>.len == <span class=\"self\">self</span>.capacity {\n                <span class=\"kw\">let </span>old_capacity = <span class=\"self\">self</span>.capacity;\n                <span class=\"kw\">let </span>old_buf_ptr = <span class=\"self\">self</span>.buf_ptr.as_ptr();\n\n                <span class=\"self\">self</span>.capacity = <span class=\"self\">self</span>.capacity * <span class=\"number\">2</span>;\n                <span class=\"self\">self</span>.buf_ptr = ptr::NonNull::new((<span class=\"self\">self</span>.run_alloc_fn)(<span class=\"self\">self</span>.capacity)).unwrap();\n\n                <span class=\"comment\">// SAFETY: buf_ptr new and old were correctly allocated and old_buf_ptr has\n                // old_capacity valid elements.\n                </span><span class=\"kw\">unsafe </span>{\n                    ptr::copy_nonoverlapping(old_buf_ptr, <span class=\"self\">self</span>.buf_ptr.as_ptr(), old_capacity);\n                }\n\n                (<span class=\"self\">self</span>.run_dealloc_fn)(old_buf_ptr, old_capacity);\n            }\n\n            <span class=\"comment\">// SAFETY: The invariant was just checked.\n            </span><span class=\"kw\">unsafe </span>{\n                <span class=\"self\">self</span>.buf_ptr.as_ptr().add(<span class=\"self\">self</span>.len).write(val);\n            }\n            <span class=\"self\">self</span>.len += <span class=\"number\">1</span>;\n        }\n\n        <span class=\"kw\">fn </span>remove(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, index: usize) {\n            <span class=\"kw\">if </span>index &gt;= <span class=\"self\">self</span>.len {\n                <span class=\"macro\">panic!</span>(<span class=\"string\">\"Index out of bounds\"</span>);\n            }\n\n            <span class=\"comment\">// SAFETY: buf_ptr needs to be valid and len invariant upheld.\n            </span><span class=\"kw\">unsafe </span>{\n                <span class=\"comment\">// the place we are taking from.\n                </span><span class=\"kw\">let </span>ptr = <span class=\"self\">self</span>.buf_ptr.as_ptr().add(index);\n\n                <span class=\"comment\">// Shift everything down to fill in that spot.\n                </span>ptr::copy(ptr.add(<span class=\"number\">1</span>), ptr, <span class=\"self\">self</span>.len - index - <span class=\"number\">1</span>);\n            }\n            <span class=\"self\">self</span>.len -= <span class=\"number\">1</span>;\n        }\n\n        <span class=\"kw\">fn </span>as_slice(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;</span>[TimSortRun] {\n            <span class=\"comment\">// SAFETY: Safe as long as buf_ptr is valid and len invariant was upheld.\n            </span><span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">&amp;*</span>ptr::slice_from_raw_parts(<span class=\"self\">self</span>.buf_ptr.as_ptr(), <span class=\"self\">self</span>.len) }\n        }\n\n        <span class=\"kw\">fn </span>len(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; usize {\n            <span class=\"self\">self</span>.len\n        }\n    }\n\n    <span class=\"kw\">impl</span>&lt;RunAllocF, RunDeallocF&gt; core::ops::Index&lt;usize&gt; <span class=\"kw\">for </span>RunVec&lt;RunAllocF, RunDeallocF&gt;\n    <span class=\"kw\">where\n        </span>RunAllocF: Fn(usize) -&gt; <span class=\"kw-2\">*mut </span>TimSortRun,\n        RunDeallocF: Fn(<span class=\"kw-2\">*mut </span>TimSortRun, usize),\n    {\n        <span class=\"kw\">type </span>Output = TimSortRun;\n\n        <span class=\"kw\">fn </span>index(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, index: usize) -&gt; <span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>::Output {\n            <span class=\"kw\">if </span>index &lt; <span class=\"self\">self</span>.len {\n                <span class=\"comment\">// SAFETY: buf_ptr and len invariant must be upheld.\n                </span><span class=\"kw\">unsafe </span>{\n                    <span class=\"kw\">return </span><span class=\"kw-2\">&amp;*</span>(<span class=\"self\">self</span>.buf_ptr.as_ptr().add(index));\n                }\n            }\n\n            <span class=\"macro\">panic!</span>(<span class=\"string\">\"Index out of bounds\"</span>);\n        }\n    }\n\n    <span class=\"kw\">impl</span>&lt;RunAllocF, RunDeallocF&gt; core::ops::IndexMut&lt;usize&gt; <span class=\"kw\">for </span>RunVec&lt;RunAllocF, RunDeallocF&gt;\n    <span class=\"kw\">where\n        </span>RunAllocF: Fn(usize) -&gt; <span class=\"kw-2\">*mut </span>TimSortRun,\n        RunDeallocF: Fn(<span class=\"kw-2\">*mut </span>TimSortRun, usize),\n    {\n        <span class=\"kw\">fn </span>index_mut(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, index: usize) -&gt; <span class=\"kw-2\">&amp;mut </span><span class=\"self\">Self</span>::Output {\n            <span class=\"kw\">if </span>index &lt; <span class=\"self\">self</span>.len {\n                <span class=\"comment\">// SAFETY: buf_ptr and len invariant must be upheld.\n                </span><span class=\"kw\">unsafe </span>{\n                    <span class=\"kw\">return </span><span class=\"kw-2\">&amp;mut *</span>(<span class=\"self\">self</span>.buf_ptr.as_ptr().add(index));\n                }\n            }\n\n            <span class=\"macro\">panic!</span>(<span class=\"string\">\"Index out of bounds\"</span>);\n        }\n    }\n\n    <span class=\"kw\">impl</span>&lt;RunAllocF, RunDeallocF&gt; Drop <span class=\"kw\">for </span>RunVec&lt;RunAllocF, RunDeallocF&gt;\n    <span class=\"kw\">where\n        </span>RunAllocF: Fn(usize) -&gt; <span class=\"kw-2\">*mut </span>TimSortRun,\n        RunDeallocF: Fn(<span class=\"kw-2\">*mut </span>TimSortRun, usize),\n    {\n        <span class=\"kw\">fn </span>drop(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) {\n            <span class=\"comment\">// As long as TimSortRun is Copy we don't need to drop them individually but just the\n            // whole allocation.\n            </span>(<span class=\"self\">self</span>.run_dealloc_fn)(<span class=\"self\">self</span>.buf_ptr.as_ptr(), <span class=\"self\">self</span>.capacity);\n        }\n    }\n}\n\n<span class=\"doccomment\">/// Internal type used by merge_sort.\n</span><span class=\"attr\">#[derive(Clone, Copy, Debug)]\n</span><span class=\"kw\">pub struct </span>TimSortRun {\n    len: usize,\n    start: usize,\n}\n\n<span class=\"doccomment\">/// Takes a range as denoted by start and end, that is already sorted and extends it to the right if\n/// necessary with sorts optimized for smaller ranges such as insertion sort.\n</span><span class=\"kw\">fn </span>provide_sorted_batch&lt;T, F&gt;(v: <span class=\"kw-2\">&amp;mut </span>[T], start: usize, <span class=\"kw-2\">mut </span>end: usize, is_less: <span class=\"kw-2\">&amp;mut </span>F) -&gt; usize\n<span class=\"kw\">where\n    </span>F: FnMut(<span class=\"kw-2\">&amp;</span>T, <span class=\"kw-2\">&amp;</span>T) -&gt; bool,\n{\n    <span class=\"kw\">let </span>len = v.len();\n    <span class=\"macro\">assert!</span>(end &gt;= start &amp;&amp; end &lt;= len);\n\n    <span class=\"comment\">// This value is a balance between least comparisons and best performance, as\n    // influenced by for example cache locality.\n    </span><span class=\"kw\">const </span>MIN_INSERTION_RUN: usize = <span class=\"number\">10</span>;\n\n    <span class=\"comment\">// Insert some more elements into the run if it's too short. Insertion sort is faster than\n    // merge sort on short sequences, so this significantly improves performance.\n    </span><span class=\"kw\">let </span>start_end_diff = end - start;\n\n    <span class=\"kw\">if </span>start_end_diff &lt; MIN_INSERTION_RUN &amp;&amp; end &lt; len {\n        <span class=\"comment\">// v[start_found..end] are elements that are already sorted in the input. We want to extend\n        // the sorted region to the left, so we push up MIN_INSERTION_RUN - 1 to the right. Which is\n        // more efficient that trying to push those already sorted elements to the left.\n        </span>end = cmp::min(start + MIN_INSERTION_RUN, len);\n        <span class=\"kw\">let </span>presorted_start = cmp::max(start_end_diff, <span class=\"number\">1</span>);\n\n        insertion_sort_shift_left(<span class=\"kw-2\">&amp;mut </span>v[start..end], presorted_start, is_less);\n    }\n\n    end\n}\n\n<span class=\"doccomment\">/// Finds a streak of presorted elements starting at the beginning of the slice. Returns the first\n/// value that is not part of said streak, and a bool denoting whether the streak was reversed.\n/// Streaks can be increasing or decreasing.\n</span><span class=\"kw\">fn </span>find_streak&lt;T, F&gt;(v: <span class=\"kw-2\">&amp;</span>[T], is_less: <span class=\"kw-2\">&amp;mut </span>F) -&gt; (usize, bool)\n<span class=\"kw\">where\n    </span>F: FnMut(<span class=\"kw-2\">&amp;</span>T, <span class=\"kw-2\">&amp;</span>T) -&gt; bool,\n{\n    <span class=\"kw\">let </span>len = v.len();\n\n    <span class=\"kw\">if </span>len &lt; <span class=\"number\">2 </span>{\n        <span class=\"kw\">return </span>(len, <span class=\"bool-val\">false</span>);\n    }\n\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>end = <span class=\"number\">2</span>;\n\n    <span class=\"comment\">// SAFETY: See below specific.\n    </span><span class=\"kw\">unsafe </span>{\n        <span class=\"comment\">// SAFETY: We checked that len &gt;= 2, so 0 and 1 are valid indices.\n        </span><span class=\"kw\">let </span>assume_reverse = is_less(v.get_unchecked(<span class=\"number\">1</span>), v.get_unchecked(<span class=\"number\">0</span>));\n\n        <span class=\"comment\">// SAFETY: We know end &gt;= 2 and check end &lt; len.\n        // From that follows that accessing v at end and end - 1 is safe.\n        </span><span class=\"kw\">if </span>assume_reverse {\n            <span class=\"kw\">while </span>end &lt; len &amp;&amp; is_less(v.get_unchecked(end), v.get_unchecked(end - <span class=\"number\">1</span>)) {\n                end += <span class=\"number\">1</span>;\n            }\n\n            (end, <span class=\"bool-val\">true</span>)\n        } <span class=\"kw\">else </span>{\n            <span class=\"kw\">while </span>end &lt; len &amp;&amp; !is_less(v.get_unchecked(end), v.get_unchecked(end - <span class=\"number\">1</span>)) {\n                end += <span class=\"number\">1</span>;\n            }\n            (end, <span class=\"bool-val\">false</span>)\n        }\n    }\n}\n</code></pre></div></section></main></body></html>",
	"crawlDate": "2024-07-28T05:30:09.313Z"
}