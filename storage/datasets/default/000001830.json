{
	"title": "UnsafeCell in std::cell - Rust",
	"url": "https://doc.rust-lang.org/std/cell/struct.UnsafeCell.html#memory-layout",
	"markdown": "# UnsafeCell in std::cell - Rust\n\n```\npub struct UnsafeCell<T>where\n    T: ?Sized,{ /* private fields */ }\n```\n\nExpand description\n\nThe core primitive for interior mutability in Rust.\n\nIf you have a reference `&T`, then normally in Rust the compiler performs optimizations based on the knowledge that `&T` points to immutable data. Mutating that data, for example through an alias or by transmuting an `&T` into an `&mut T`, is considered undefined behavior. `UnsafeCell<T>` opts-out of the immutability guarantee for `&T`: a shared reference `&UnsafeCell<T>` may point to data that is being mutated. This is called “interior mutability”.\n\nAll other types that allow internal mutability, such as [`Cell<T>`](struct.Cell.html \"struct std::cell::Cell\") and [`RefCell<T>`](struct.RefCell.html \"struct std::cell::RefCell\"), internally use `UnsafeCell` to wrap their data.\n\nNote that only the immutability guarantee for shared references is affected by `UnsafeCell`. The uniqueness guarantee for mutable references is unaffected. There is _no_ legal way to obtain aliasing `&mut`, not even with `UnsafeCell<T>`.\n\nThe `UnsafeCell` API itself is technically very simple: [`.get()`](about:blank/struct.UnsafeCell.html#method.get \"method std::cell::UnsafeCell::get\") gives you a raw pointer `*mut T` to its contents. It is up to _you_ as the abstraction designer to use that raw pointer correctly.\n\nThe precise Rust aliasing rules are somewhat in flux, but the main points are not contentious:\n\n-   If you create a safe reference with lifetime `'a` (either a `&T` or `&mut T` reference), then you must not access the data in any way that contradicts that reference for the remainder of `'a`. For example, this means that if you take the `*mut T` from an `UnsafeCell<T>` and cast it to an `&T`, then the data in `T` must remain immutable (modulo any `UnsafeCell` data found within `T`, of course) until that reference’s lifetime expires. Similarly, if you create a `&mut T` reference that is released to safe code, then you must not access the data within the `UnsafeCell` until that reference expires.\n    \n-   For both `&T` without `UnsafeCell<_>` and `&mut T`, you must also not deallocate the data until the reference expires. As a special exception, given an `&T`, any part of it that is inside an `UnsafeCell<_>` may be deallocated during the lifetime of the reference, after the last time the reference is used (dereferenced or reborrowed). Since you cannot deallocate a part of what a reference points to, this means the memory an `&T` points to can be deallocated only if _every part of it_ (including padding) is inside an `UnsafeCell`.\n    \n    However, whenever a `&UnsafeCell<T>` is constructed or dereferenced, it must still point to live memory and the compiler is allowed to insert spurious reads if it can prove that this memory has not yet been deallocated.\n    \n-   At all times, you must avoid data races. If multiple threads have access to the same `UnsafeCell`, then any writes must have a proper happens-before relation to all other accesses (or use atomics).\n    \n\nTo assist with proper design, the following scenarios are explicitly declared legal for single-threaded code:\n\n1.  A `&T` reference can be released to safe code and there it can co-exist with other `&T` references, but not with a `&mut T`\n    \n2.  A `&mut T` reference may be released to safe code provided neither other `&mut T` nor `&T` co-exist with it. A `&mut T` must always be unique.\n    \n\nNote that whilst mutating the contents of an `&UnsafeCell<T>` (even while other `&UnsafeCell<T>` references alias the cell) is ok (provided you enforce the above invariants some other way), it is still undefined behavior to have multiple `&mut UnsafeCell<T>` aliases. That is, `UnsafeCell` is a wrapper designed to have a special interaction with _shared_ accesses (_i.e._, through an `&UnsafeCell<_>` reference); there is no magic whatsoever when dealing with _exclusive_ accesses (_e.g._, through an `&mut UnsafeCell<_>`): neither the cell nor the wrapped value may be aliased for the duration of that `&mut` borrow. This is showcased by the [`.get_mut()`](about:blank/struct.UnsafeCell.html#method.get_mut \"method std::cell::UnsafeCell::get_mut\") accessor, which is a _safe_ getter that yields a `&mut T`.\n\n## [§](#memory-layout)Memory layout\n\n`UnsafeCell<T>` has the same in-memory representation as its inner type `T`. A consequence of this guarantee is that it is possible to convert between `T` and `UnsafeCell<T>`. Special care has to be taken when converting a nested `T` inside of an `Outer<T>` type to an `Outer<UnsafeCell<T>>` type: this is not sound when the `Outer<T>` type enables [niche](https://rust-lang.github.io/unsafe-code-guidelines/glossary.html#niche) optimizations. For example, the type `Option<NonNull<u8>>` is typically 8 bytes large on 64-bit platforms, but the type `Option<UnsafeCell<NonNull<u8>>>` takes up 16 bytes of space. Therefore this is not a valid conversion, despite `NonNull<u8>` and `UnsafeCell<NonNull<u8>>>` having the same memory layout. This is because `UnsafeCell` disables niche optimizations in order to avoid its interior mutability property from spreading from `T` into the `Outer` type, thus this can cause distortions in the type size in these cases.\n\nNote that the only valid way to obtain a `*mut T` pointer to the contents of a _shared_ `UnsafeCell<T>` is through [`.get()`](about:blank/struct.UnsafeCell.html#method.get \"method std::cell::UnsafeCell::get\") or [`.raw_get()`](about:blank/struct.UnsafeCell.html#method.raw_get \"associated function std::cell::UnsafeCell::raw_get\"). A `&mut T` reference can be obtained by either dereferencing this pointer or by calling [`.get_mut()`](about:blank/struct.UnsafeCell.html#method.get_mut \"method std::cell::UnsafeCell::get_mut\") on an _exclusive_ `UnsafeCell<T>`. Even though `T` and `UnsafeCell<T>` have the same memory layout, the following is not allowed and undefined behavior:\n\n[ⓘ](# \"This example deliberately fails to compile\")\n\n```\nunsafe fn not_allowed<T>(ptr: &UnsafeCell<T>) -> &mut T {\n  let t = ptr as *const UnsafeCell<T> as *mut T;\n  // This is undefined behavior, because the `*mut T` pointer\n  // was not obtained through `.get()` nor `.raw_get()`:\n  unsafe { &mut *t }\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::UnsafeCell;%0A++++unsafe+fn+not_allowed%3CT%3E(ptr:+%26UnsafeCell%3CT%3E)+-%3E+%26mut+T+%7B%0A++++++let+t+=+ptr+as+*const+UnsafeCell%3CT%3E+as+*mut+T;%0A++++++//+This+is+undefined+behavior,+because+the+%60*mut+T%60+pointer%0A++++++//+was+not+obtained+through+%60.get()%60+nor+%60.raw_get()%60:%0A++++++unsafe+%7B+%26mut+*t+%7D%0A++++%7D%0A%7D&edition=2021)\n\nInstead, do this:\n\n```\n// Safety: the caller must ensure that there are no references that\n// point to the *contents* of the `UnsafeCell`.\nunsafe fn get_mut<T>(ptr: &UnsafeCell<T>) -> &mut T {\n  unsafe { &mut *ptr.get() }\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::UnsafeCell;%0A++++//+Safety:+the+caller+must+ensure+that+there+are+no+references+that%0A++++//+point+to+the+*contents*+of+the+%60UnsafeCell%60.%0A++++unsafe+fn+get_mut%3CT%3E(ptr:+%26UnsafeCell%3CT%3E)+-%3E+%26mut+T+%7B%0A++++++unsafe+%7B+%26mut+*ptr.get()+%7D%0A++++%7D%0A%7D&edition=2021)\n\nConverting in the other direction from a `&mut T` to an `&UnsafeCell<T>` is allowed:\n\n```\nfn get_shared<T>(ptr: &mut T) -> &UnsafeCell<T> {\n  let t = ptr as *mut T as *const UnsafeCell<T>;\n  // SAFETY: `T` and `UnsafeCell<T>` have the same memory layout\n  unsafe { &*t }\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::UnsafeCell;%0A++++fn+get_shared%3CT%3E(ptr:+%26mut+T)+-%3E+%26UnsafeCell%3CT%3E+%7B%0A++++++let+t+=+ptr+as+*mut+T+as+*const+UnsafeCell%3CT%3E;%0A++++++//+SAFETY:+%60T%60+and+%60UnsafeCell%3CT%3E%60+have+the+same+memory+layout%0A++++++unsafe+%7B+%26*t+%7D%0A++++%7D%0A%7D&edition=2021)\n\n## [§](#examples)Examples\n\nHere is an example showcasing how to soundly mutate the contents of an `UnsafeCell<_>` despite there being multiple references aliasing the cell:\n\n```\nuse std::cell::UnsafeCell;\n\nlet x: UnsafeCell<i32> = 42.into();\n// Get multiple / concurrent / shared references to the same `x`.\nlet (p1, p2): (&UnsafeCell<i32>, &UnsafeCell<i32>) = (&x, &x);\n\nunsafe {\n    // SAFETY: within this scope there are no other references to `x`'s contents,\n    // so ours is effectively unique.\n    let p1_exclusive: &mut i32 = &mut *p1.get(); // -- borrow --+\n    *p1_exclusive += 27; //                                     |\n} // <---------- cannot go beyond this point -------------------+\n\nunsafe {\n    // SAFETY: within this scope nobody expects to have exclusive access to `x`'s contents,\n    // so we can have multiple shared accesses concurrently.\n    let p2_shared: &i32 = &*p2.get();\n    assert_eq!(*p2_shared, 42 + 27);\n    let p1_shared: &i32 = &*p1.get();\n    assert_eq!(*p1_shared, *p2_shared);\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::UnsafeCell;%0A++++%0A++++let+x:+UnsafeCell%3Ci32%3E+=+42.into();%0A++++//+Get+multiple+/+concurrent+/+shared+references+to+the+same+%60x%60.%0A++++let+(p1,+p2):+(%26UnsafeCell%3Ci32%3E,+%26UnsafeCell%3Ci32%3E)+=+(%26x,+%26x);%0A++++%0A++++unsafe+%7B%0A++++++++//+SAFETY:+within+this+scope+there+are+no+other+references+to+%60x%60%27s+contents,%0A++++++++//+so+ours+is+effectively+unique.%0A++++++++let+p1_exclusive:+%26mut+i32+=+%26mut+*p1.get();+//+--+borrow+--%2B%0A++++++++*p1_exclusive+%2B=+27;+//+++++++++++++++++++++++++++++++++++++%7C%0A++++%7D+//+%3C----------+cannot+go+beyond+this+point+-------------------%2B%0A++++%0A++++unsafe+%7B%0A++++++++//+SAFETY:+within+this+scope+nobody+expects+to+have+exclusive+access+to+%60x%60%27s+contents,%0A++++++++//+so+we+can+have+multiple+shared+accesses+concurrently.%0A++++++++let+p2_shared:+%26i32+=+%26*p2.get();%0A++++++++assert_eq!(*p2_shared,+42+%2B+27);%0A++++++++let+p1_shared:+%26i32+=+%26*p1.get();%0A++++++++assert_eq!(*p1_shared,+*p2_shared);%0A++++%7D%0A%7D&edition=2021)\n\nThe following example showcases the fact that exclusive access to an `UnsafeCell<T>` implies exclusive access to its `T`:\n\n```\n#![forbid(unsafe_code)] // with exclusive accesses,\n                        // `UnsafeCell` is a transparent no-op wrapper,\n                        // so no need for `unsafe` here.\nuse std::cell::UnsafeCell;\n\nlet mut x: UnsafeCell<i32> = 42.into();\n\n// Get a compile-time-checked unique reference to `x`.\nlet p_unique: &mut UnsafeCell<i32> = &mut x;\n// With an exclusive reference, we can mutate the contents for free.\n*p_unique.get_mut() = 0;\n// Or, equivalently:\nx = UnsafeCell::new(0);\n\n// When we own the value, we can extract the contents for free.\nlet contents: i32 = x.into_inner();\nassert_eq!(contents, 0);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bforbid(unsafe_code)%5D+//+with+exclusive+accesses,%0A++++++++++++++++++++++++//+%60UnsafeCell%60+is+a+transparent+no-op+wrapper,%0A++++++++++++++++++++++++//+so+no+need+for+%60unsafe%60+here.%0Afn+main()+%7B%0A++++use+std::cell::UnsafeCell;%0A++++%0A++++let+mut+x:+UnsafeCell%3Ci32%3E+=+42.into();%0A++++%0A++++//+Get+a+compile-time-checked+unique+reference+to+%60x%60.%0A++++let+p_unique:+%26mut+UnsafeCell%3Ci32%3E+=+%26mut+x;%0A++++//+With+an+exclusive+reference,+we+can+mutate+the+contents+for+free.%0A++++*p_unique.get_mut()+=+0;%0A++++//+Or,+equivalently:%0A++++x+=+UnsafeCell::new(0);%0A++++%0A++++//+When+we+own+the+value,+we+can+extract+the+contents+for+free.%0A++++let+contents:+i32+=+x.into_inner();%0A++++assert_eq!(contents,+0);%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#2062)[§](#impl-UnsafeCell%3CT%3E)\n\n1.0.0 (const: 1.32.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#2078)\n\nConstructs a new instance of `UnsafeCell` which will wrap the specified value.\n\nAll access to the inner value through `&UnsafeCell<T>` requires `unsafe` code.\n\n##### [§](#examples-1)Examples\n\n```\nuse std::cell::UnsafeCell;\n\nlet uc = UnsafeCell::new(5);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::UnsafeCell;%0A++++%0A++++let+uc+=+UnsafeCell::new(5);%0A%7D&edition=2021)\n\n1.0.0 (const: [unstable](https://github.com/rust-lang/rust/issues/78729 \"Tracking issue for const_cell_into_inner\")) · [source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#2097)\n\nUnwraps the value, consuming the cell.\n\n##### [§](#examples-2)Examples\n\n```\nuse std::cell::UnsafeCell;\n\nlet uc = UnsafeCell::new(5);\n\nlet five = uc.into_inner();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::UnsafeCell;%0A++++%0A++++let+uc+=+UnsafeCell::new(5);%0A++++%0A++++let+five+=+uc.into_inner();%0A%7D&edition=2021)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#2102)[§](#impl-UnsafeCell%3CT%3E-1)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#2119)\n\n🔬This is a nightly-only experimental API. (`unsafe_cell_from_mut` [#111645](https://github.com/rust-lang/rust/issues/111645))\n\nConverts from `&mut T` to `&mut UnsafeCell<T>`.\n\n##### [§](#examples-3)Examples\n\n```\nuse std::cell::UnsafeCell;\n\nlet mut val = 42;\nlet uc = UnsafeCell::from_mut(&mut val);\n\n*uc.get_mut() -= 1;\nassert_eq!(*uc.get_mut(), 41);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(unsafe_cell_from_mut)%5D%0Afn+main()+%7B%0A++++use+std::cell::UnsafeCell;%0A++++%0A++++let+mut+val+=+42;%0A++++let+uc+=+UnsafeCell::from_mut(%26mut+val);%0A++++%0A++++*uc.get_mut()+-=+1;%0A++++assert_eq!(*uc.get_mut(),+41);%0A%7D&version=nightly&edition=2021)\n\n1.0.0 (const: 1.32.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#2144)\n\nGets a mutable pointer to the wrapped value.\n\nThis can be cast to a pointer of any kind. Ensure that the access is unique (no active references, mutable or not) when casting to `&mut T`, and ensure that there are no mutations or mutable aliases going on when casting to `&T`\n\n##### [§](#examples-4)Examples\n\n```\nuse std::cell::UnsafeCell;\n\nlet uc = UnsafeCell::new(5);\n\nlet five = uc.get();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::UnsafeCell;%0A++++%0A++++let+uc+=+UnsafeCell::new(5);%0A++++%0A++++let+five+=+uc.get();%0A%7D&edition=2021)\n\n1.50.0 (const: [unstable](https://github.com/rust-lang/rust/issues/88836 \"Tracking issue for const_unsafecell_get_mut\")) · [source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#2169)\n\nReturns a mutable reference to the underlying data.\n\nThis call borrows the `UnsafeCell` mutably (at compile-time) which guarantees that we possess the only reference.\n\n##### [§](#examples-5)Examples\n\n```\nuse std::cell::UnsafeCell;\n\nlet mut c = UnsafeCell::new(5);\n*c.get_mut() += 1;\n\nassert_eq!(*c.get_mut(), 6);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::UnsafeCell;%0A++++%0A++++let+mut+c+=+UnsafeCell::new(5);%0A++++*c.get_mut()+%2B=+1;%0A++++%0A++++assert_eq!(*c.get_mut(),+6);%0A%7D&edition=2021)\n\n1.56.0 (const: 1.56.0) · [source](https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#2205)\n\nGets a mutable pointer to the wrapped value. The difference from [`get`](about:blank/struct.UnsafeCell.html#method.get \"method std::cell::UnsafeCell::get\") is that this function accepts a raw pointer, which is useful to avoid the creation of temporary references.\n\nThe result can be cast to a pointer of any kind. Ensure that the access is unique (no active references, mutable or not) when casting to `&mut T`, and ensure that there are no mutations or mutable aliases going on when casting to `&T`.\n\n##### [§](#examples-6)Examples\n\nGradual initialization of an `UnsafeCell` requires `raw_get`, as calling `get` would require creating a reference to uninitialized data:\n\n```\nuse std::cell::UnsafeCell;\nuse std::mem::MaybeUninit;\n\nlet m = MaybeUninit::<UnsafeCell<i32>>::uninit();\nunsafe { UnsafeCell::raw_get(m.as_ptr()).write(5); }\n// avoid below which references to uninitialized data\n// unsafe { UnsafeCell::get(&*m.as_ptr()).write(5); }\nlet uc = unsafe { m.assume_init() };\n\nassert_eq!(uc.into_inner(), 5);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::UnsafeCell;%0A++++use+std::mem::MaybeUninit;%0A++++%0A++++let+m+=+MaybeUninit::%3CUnsafeCell%3Ci32%3E%3E::uninit();%0A++++unsafe+%7B+UnsafeCell::raw_get(m.as_ptr()).write(5);+%7D%0A++++//+avoid+below+which+references+to+uninitialized+data%0A++++//+unsafe+%7B+UnsafeCell::get(%26*m.as_ptr()).write(5);+%7D%0A++++let+uc+=+unsafe+%7B+m.assume_init()+%7D;%0A++++%0A++++assert_eq!(uc.into_inner(),+5);%0A%7D&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"The core primitive for interior mutability in Rust.\"><title>UnsafeCell in std::cell - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">UnsafeCell</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">UnsafeCell</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.from_mut\">from_mut</a></li><li><a href=\"#method.get\">get</a></li><li><a href=\"#method.get_mut\">get_mut</a></li><li><a href=\"#method.into_inner\">into_inner</a></li><li><a href=\"#method.new\">new</a></li><li><a href=\"#method.raw_get\">raw_get</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-Freeze-for-UnsafeCell%3CT%3E\">!Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-UnsafeCell%3CT%3E\">!RefUnwindSafe</a></li><li><a href=\"#impl-Sync-for-UnsafeCell%3CT%3E\">!Sync</a></li><li><a href=\"#impl-CoerceUnsized%3CUnsafeCell%3CU%3E%3E-for-UnsafeCell%3CT%3E\">CoerceUnsized&lt;UnsafeCell&lt;U&gt;&gt;</a></li><li><a href=\"#impl-Debug-for-UnsafeCell%3CT%3E\">Debug</a></li><li><a href=\"#impl-Default-for-UnsafeCell%3CT%3E\">Default</a></li><li><a href=\"#impl-DispatchFromDyn%3CUnsafeCell%3CU%3E%3E-for-UnsafeCell%3CT%3E\">DispatchFromDyn&lt;UnsafeCell&lt;U&gt;&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-UnsafeCell%3CT%3E\">From&lt;T&gt;</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Send-for-UnsafeCell%3CT%3E\">Send</a></li><li><a href=\"#impl-Unpin-for-UnsafeCell%3CT%3E\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-UnsafeCell%3CT%3E\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3C!%3E-for-T\">From&lt;!&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::cell</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.BorrowError.html\">BorrowError</a></li><li><a href=\"struct.BorrowMutError.html\">BorrowMutError</a></li><li><a href=\"struct.Cell.html\">Cell</a></li><li><a href=\"struct.LazyCell.html\">LazyCell</a></li><li><a href=\"struct.OnceCell.html\">OnceCell</a></li><li><a href=\"struct.Ref.html\">Ref</a></li><li><a href=\"struct.RefCell.html\">RefCell</a></li><li><a href=\"struct.RefMut.html\">RefMut</a></li><li><a href=\"struct.SyncUnsafeCell.html\">SyncUnsafeCell</a></li><li><a href=\"struct.UnsafeCell.html\">UnsafeCell</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">cell</a>::<wbr><a class=\"struct\" href=\"#\">UnsafeCell</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#2055\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct UnsafeCell&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div>{ <span class=\"comment\">/* private fields */</span> }</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>The core primitive for interior mutability in Rust.</p>\n<p>If you have a reference <code>&amp;T</code>, then normally in Rust the compiler performs optimizations based on\nthe knowledge that <code>&amp;T</code> points to immutable data. Mutating that data, for example through an\nalias or by transmuting an <code>&amp;T</code> into an <code>&amp;mut T</code>, is considered undefined behavior.\n<code>UnsafeCell&lt;T&gt;</code> opts-out of the immutability guarantee for <code>&amp;T</code>: a shared reference\n<code>&amp;UnsafeCell&lt;T&gt;</code> may point to data that is being mutated. This is called “interior mutability”.</p>\n<p>All other types that allow internal mutability, such as <a href=\"struct.Cell.html\" title=\"struct std::cell::Cell\"><code>Cell&lt;T&gt;</code></a> and <a href=\"struct.RefCell.html\" title=\"struct std::cell::RefCell\"><code>RefCell&lt;T&gt;</code></a>, internally\nuse <code>UnsafeCell</code> to wrap their data.</p>\n<p>Note that only the immutability guarantee for shared references is affected by <code>UnsafeCell</code>. The\nuniqueness guarantee for mutable references is unaffected. There is <em>no</em> legal way to obtain\naliasing <code>&amp;mut</code>, not even with <code>UnsafeCell&lt;T&gt;</code>.</p>\n<p>The <code>UnsafeCell</code> API itself is technically very simple: <a href=\"struct.UnsafeCell.html#method.get\" title=\"method std::cell::UnsafeCell::get\"><code>.get()</code></a> gives you a raw pointer\n<code>*mut T</code> to its contents. It is up to <em>you</em> as the abstraction designer to use that raw pointer\ncorrectly.</p>\n<p>The precise Rust aliasing rules are somewhat in flux, but the main points are not contentious:</p>\n<ul>\n<li>\n<p>If you create a safe reference with lifetime <code>'a</code> (either a <code>&amp;T</code> or <code>&amp;mut T</code> reference), then\nyou must not access the data in any way that contradicts that reference for the remainder of\n<code>'a</code>. For example, this means that if you take the <code>*mut T</code> from an <code>UnsafeCell&lt;T&gt;</code> and cast it\nto an <code>&amp;T</code>, then the data in <code>T</code> must remain immutable (modulo any <code>UnsafeCell</code> data found\nwithin <code>T</code>, of course) until that reference’s lifetime expires. Similarly, if you create a <code>&amp;mut T</code> reference that is released to safe code, then you must not access the data within the\n<code>UnsafeCell</code> until that reference expires.</p>\n</li>\n<li>\n<p>For both <code>&amp;T</code> without <code>UnsafeCell&lt;_&gt;</code> and <code>&amp;mut T</code>, you must also not deallocate the data\nuntil the reference expires. As a special exception, given an <code>&amp;T</code>, any part of it that is\ninside an <code>UnsafeCell&lt;_&gt;</code> may be deallocated during the lifetime of the reference, after the\nlast time the reference is used (dereferenced or reborrowed). Since you cannot deallocate a part\nof what a reference points to, this means the memory an <code>&amp;T</code> points to can be deallocated only if\n<em>every part of it</em> (including padding) is inside an <code>UnsafeCell</code>.</p>\n<p>However, whenever a <code>&amp;UnsafeCell&lt;T&gt;</code> is constructed or dereferenced, it must still point to\nlive memory and the compiler is allowed to insert spurious reads if it can prove that this\nmemory has not yet been deallocated.</p>\n</li>\n<li>\n<p>At all times, you must avoid data races. If multiple threads have access to\nthe same <code>UnsafeCell</code>, then any writes must have a proper happens-before relation to all other\naccesses (or use atomics).</p>\n</li>\n</ul>\n<p>To assist with proper design, the following scenarios are explicitly declared legal\nfor single-threaded code:</p>\n<ol>\n<li>\n<p>A <code>&amp;T</code> reference can be released to safe code and there it can co-exist with other <code>&amp;T</code>\nreferences, but not with a <code>&amp;mut T</code></p>\n</li>\n<li>\n<p>A <code>&amp;mut T</code> reference may be released to safe code provided neither other <code>&amp;mut T</code> nor <code>&amp;T</code>\nco-exist with it. A <code>&amp;mut T</code> must always be unique.</p>\n</li>\n</ol>\n<p>Note that whilst mutating the contents of an <code>&amp;UnsafeCell&lt;T&gt;</code> (even while other\n<code>&amp;UnsafeCell&lt;T&gt;</code> references alias the cell) is\nok (provided you enforce the above invariants some other way), it is still undefined behavior\nto have multiple <code>&amp;mut UnsafeCell&lt;T&gt;</code> aliases. That is, <code>UnsafeCell</code> is a wrapper\ndesigned to have a special interaction with <em>shared</em> accesses (<em>i.e.</em>, through an\n<code>&amp;UnsafeCell&lt;_&gt;</code> reference); there is no magic whatsoever when dealing with <em>exclusive</em>\naccesses (<em>e.g.</em>, through an <code>&amp;mut UnsafeCell&lt;_&gt;</code>): neither the cell nor the wrapped value\nmay be aliased for the duration of that <code>&amp;mut</code> borrow.\nThis is showcased by the <a href=\"struct.UnsafeCell.html#method.get_mut\" title=\"method std::cell::UnsafeCell::get_mut\"><code>.get_mut()</code></a> accessor, which is a <em>safe</em> getter that yields\na <code>&amp;mut T</code>.</p>\n<h2 id=\"memory-layout\"><a class=\"doc-anchor\" href=\"#memory-layout\">§</a>Memory layout</h2>\n<p><code>UnsafeCell&lt;T&gt;</code> has the same in-memory representation as its inner type <code>T</code>. A consequence\nof this guarantee is that it is possible to convert between <code>T</code> and <code>UnsafeCell&lt;T&gt;</code>.\nSpecial care has to be taken when converting a nested <code>T</code> inside of an <code>Outer&lt;T&gt;</code> type\nto an <code>Outer&lt;UnsafeCell&lt;T&gt;&gt;</code> type: this is not sound when the <code>Outer&lt;T&gt;</code> type enables <a href=\"https://rust-lang.github.io/unsafe-code-guidelines/glossary.html#niche\">niche</a>\noptimizations. For example, the type <code>Option&lt;NonNull&lt;u8&gt;&gt;</code> is typically 8 bytes large on\n64-bit platforms, but the type <code>Option&lt;UnsafeCell&lt;NonNull&lt;u8&gt;&gt;&gt;</code> takes up 16 bytes of space.\nTherefore this is not a valid conversion, despite <code>NonNull&lt;u8&gt;</code> and <code>UnsafeCell&lt;NonNull&lt;u8&gt;&gt;&gt;</code>\nhaving the same memory layout. This is because <code>UnsafeCell</code> disables niche optimizations in\norder to avoid its interior mutability property from spreading from <code>T</code> into the <code>Outer</code> type,\nthus this can cause distortions in the type size in these cases.</p>\n<p>Note that the only valid way to obtain a <code>*mut T</code> pointer to the contents of a\n<em>shared</em> <code>UnsafeCell&lt;T&gt;</code> is through <a href=\"struct.UnsafeCell.html#method.get\" title=\"method std::cell::UnsafeCell::get\"><code>.get()</code></a>  or <a href=\"struct.UnsafeCell.html#method.raw_get\" title=\"associated function std::cell::UnsafeCell::raw_get\"><code>.raw_get()</code></a>. A <code>&amp;mut T</code> reference\ncan be obtained by either dereferencing this pointer or by calling <a href=\"struct.UnsafeCell.html#method.get_mut\" title=\"method std::cell::UnsafeCell::get_mut\"><code>.get_mut()</code></a>\non an <em>exclusive</em> <code>UnsafeCell&lt;T&gt;</code>. Even though <code>T</code> and <code>UnsafeCell&lt;T&gt;</code> have the\nsame memory layout, the following is not allowed and undefined behavior:</p>\n\n<div class=\"example-wrap compile_fail\"><a href=\"#\" class=\"tooltip\" title=\"This example deliberately fails to compile\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">unsafe fn </span>not_allowed&lt;T&gt;(ptr: <span class=\"kw-2\">&amp;</span>UnsafeCell&lt;T&gt;) -&gt; <span class=\"kw-2\">&amp;mut </span>T {\n  <span class=\"kw\">let </span>t = ptr <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>UnsafeCell&lt;T&gt; <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span>T;\n  <span class=\"comment\">// This is undefined behavior, because the `*mut T` pointer\n  // was not obtained through `.get()` nor `.raw_get()`:\n  </span><span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">&amp;mut *</span>t }\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::UnsafeCell;%0A++++unsafe+fn+not_allowed%3CT%3E(ptr:+%26UnsafeCell%3CT%3E)+-%3E+%26mut+T+%7B%0A++++++let+t+=+ptr+as+*const+UnsafeCell%3CT%3E+as+*mut+T;%0A++++++//+This+is+undefined+behavior,+because+the+%60*mut+T%60+pointer%0A++++++//+was+not+obtained+through+%60.get()%60+nor+%60.raw_get()%60:%0A++++++unsafe+%7B+%26mut+*t+%7D%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Instead, do this:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// Safety: the caller must ensure that there are no references that\n// point to the *contents* of the `UnsafeCell`.\n</span><span class=\"kw\">unsafe fn </span>get_mut&lt;T&gt;(ptr: <span class=\"kw-2\">&amp;</span>UnsafeCell&lt;T&gt;) -&gt; <span class=\"kw-2\">&amp;mut </span>T {\n  <span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">&amp;mut *</span>ptr.get() }\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::UnsafeCell;%0A++++//+Safety:+the+caller+must+ensure+that+there+are+no+references+that%0A++++//+point+to+the+*contents*+of+the+%60UnsafeCell%60.%0A++++unsafe+fn+get_mut%3CT%3E(ptr:+%26UnsafeCell%3CT%3E)+-%3E+%26mut+T+%7B%0A++++++unsafe+%7B+%26mut+*ptr.get()+%7D%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Converting in the other direction from a <code>&amp;mut T</code>\nto an <code>&amp;UnsafeCell&lt;T&gt;</code> is allowed:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>get_shared&lt;T&gt;(ptr: <span class=\"kw-2\">&amp;mut </span>T) -&gt; <span class=\"kw-2\">&amp;</span>UnsafeCell&lt;T&gt; {\n  <span class=\"kw\">let </span>t = ptr <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span>T <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>UnsafeCell&lt;T&gt;;\n  <span class=\"comment\">// SAFETY: `T` and `UnsafeCell&lt;T&gt;` have the same memory layout\n  </span><span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">&amp;*</span>t }\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::UnsafeCell;%0A++++fn+get_shared%3CT%3E(ptr:+%26mut+T)+-%3E+%26UnsafeCell%3CT%3E+%7B%0A++++++let+t+=+ptr+as+*mut+T+as+*const+UnsafeCell%3CT%3E;%0A++++++//+SAFETY:+%60T%60+and+%60UnsafeCell%3CT%3E%60+have+the+same+memory+layout%0A++++++unsafe+%7B+%26*t+%7D%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<p>Here is an example showcasing how to soundly mutate the contents of an <code>UnsafeCell&lt;_&gt;</code> despite\nthere being multiple references aliasing the cell:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::UnsafeCell;\n\n<span class=\"kw\">let </span>x: UnsafeCell&lt;i32&gt; = <span class=\"number\">42</span>.into();\n<span class=\"comment\">// Get multiple / concurrent / shared references to the same `x`.\n</span><span class=\"kw\">let </span>(p1, p2): (<span class=\"kw-2\">&amp;</span>UnsafeCell&lt;i32&gt;, <span class=\"kw-2\">&amp;</span>UnsafeCell&lt;i32&gt;) = (<span class=\"kw-2\">&amp;</span>x, <span class=\"kw-2\">&amp;</span>x);\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// SAFETY: within this scope there are no other references to `x`'s contents,\n    // so ours is effectively unique.\n    </span><span class=\"kw\">let </span>p1_exclusive: <span class=\"kw-2\">&amp;mut </span>i32 = <span class=\"kw-2\">&amp;mut *</span>p1.get(); <span class=\"comment\">// -- borrow --+\n    </span><span class=\"kw-2\">*</span>p1_exclusive += <span class=\"number\">27</span>; <span class=\"comment\">//                                     |\n</span>} <span class=\"comment\">// &lt;---------- cannot go beyond this point -------------------+\n\n</span><span class=\"kw\">unsafe </span>{\n    <span class=\"comment\">// SAFETY: within this scope nobody expects to have exclusive access to `x`'s contents,\n    // so we can have multiple shared accesses concurrently.\n    </span><span class=\"kw\">let </span>p2_shared: <span class=\"kw-2\">&amp;</span>i32 = <span class=\"kw-2\">&amp;*</span>p2.get();\n    <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>p2_shared, <span class=\"number\">42 </span>+ <span class=\"number\">27</span>);\n    <span class=\"kw\">let </span>p1_shared: <span class=\"kw-2\">&amp;</span>i32 = <span class=\"kw-2\">&amp;*</span>p1.get();\n    <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>p1_shared, <span class=\"kw-2\">*</span>p2_shared);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::UnsafeCell;%0A++++%0A++++let+x:+UnsafeCell%3Ci32%3E+=+42.into();%0A++++//+Get+multiple+/+concurrent+/+shared+references+to+the+same+%60x%60.%0A++++let+(p1,+p2):+(%26UnsafeCell%3Ci32%3E,+%26UnsafeCell%3Ci32%3E)+=+(%26x,+%26x);%0A++++%0A++++unsafe+%7B%0A++++++++//+SAFETY:+within+this+scope+there+are+no+other+references+to+%60x%60's+contents,%0A++++++++//+so+ours+is+effectively+unique.%0A++++++++let+p1_exclusive:+%26mut+i32+=+%26mut+*p1.get();+//+--+borrow+--%2B%0A++++++++*p1_exclusive+%2B=+27;+//+++++++++++++++++++++++++++++++++++++%7C%0A++++%7D+//+%3C----------+cannot+go+beyond+this+point+-------------------%2B%0A++++%0A++++unsafe+%7B%0A++++++++//+SAFETY:+within+this+scope+nobody+expects+to+have+exclusive+access+to+%60x%60's+contents,%0A++++++++//+so+we+can+have+multiple+shared+accesses+concurrently.%0A++++++++let+p2_shared:+%26i32+=+%26*p2.get();%0A++++++++assert_eq!(*p2_shared,+42+%2B+27);%0A++++++++let+p1_shared:+%26i32+=+%26*p1.get();%0A++++++++assert_eq!(*p1_shared,+*p2_shared);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>The following example showcases the fact that exclusive access to an <code>UnsafeCell&lt;T&gt;</code>\nimplies exclusive access to its <code>T</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![forbid(unsafe_code)] </span><span class=\"comment\">// with exclusive accesses,\n                        // `UnsafeCell` is a transparent no-op wrapper,\n                        // so no need for `unsafe` here.\n</span><span class=\"kw\">use </span>std::cell::UnsafeCell;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x: UnsafeCell&lt;i32&gt; = <span class=\"number\">42</span>.into();\n\n<span class=\"comment\">// Get a compile-time-checked unique reference to `x`.\n</span><span class=\"kw\">let </span>p_unique: <span class=\"kw-2\">&amp;mut </span>UnsafeCell&lt;i32&gt; = <span class=\"kw-2\">&amp;mut </span>x;\n<span class=\"comment\">// With an exclusive reference, we can mutate the contents for free.\n</span><span class=\"kw-2\">*</span>p_unique.get_mut() = <span class=\"number\">0</span>;\n<span class=\"comment\">// Or, equivalently:\n</span>x = UnsafeCell::new(<span class=\"number\">0</span>);\n\n<span class=\"comment\">// When we own the value, we can extract the contents for free.\n</span><span class=\"kw\">let </span>contents: i32 = x.into_inner();\n<span class=\"macro\">assert_eq!</span>(contents, <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bforbid(unsafe_code)%5D+//+with+exclusive+accesses,%0A++++++++++++++++++++++++//+%60UnsafeCell%60+is+a+transparent+no-op+wrapper,%0A++++++++++++++++++++++++//+so+no+need+for+%60unsafe%60+here.%0Afn+main()+%7B%0A++++use+std::cell::UnsafeCell;%0A++++%0A++++let+mut+x:+UnsafeCell%3Ci32%3E+=+42.into();%0A++++%0A++++//+Get+a+compile-time-checked+unique+reference+to+%60x%60.%0A++++let+p_unique:+%26mut+UnsafeCell%3Ci32%3E+=+%26mut+x;%0A++++//+With+an+exclusive+reference,+we+can+mutate+the+contents+for+free.%0A++++*p_unique.get_mut()+=+0;%0A++++//+Or,+equivalently:%0A++++x+=+UnsafeCell::new(0);%0A++++%0A++++//+When+we+own+the+value,+we+can+extract+the+contents+for+free.%0A++++let+contents:+i32+=+x.into_inner();%0A++++assert_eq!(contents,+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-UnsafeCell%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#2062\">source</a><a href=\"#impl-UnsafeCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"struct.UnsafeCell.html\" title=\"struct std::cell::UnsafeCell\">UnsafeCell</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.new\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#2078\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.new\" class=\"fn\">new</a>(value: T) -&gt; <a class=\"struct\" href=\"struct.UnsafeCell.html\" title=\"struct std::cell::UnsafeCell\">UnsafeCell</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a new instance of <code>UnsafeCell</code> which will wrap the specified\nvalue.</p>\n<p>All access to the inner value through <code>&amp;UnsafeCell&lt;T&gt;</code> requires <code>unsafe</code> code.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::UnsafeCell;\n\n<span class=\"kw\">let </span>uc = UnsafeCell::new(<span class=\"number\">5</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::UnsafeCell;%0A++++%0A++++let+uc+=+UnsafeCell::new(5);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_inner\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/78729\" title=\"Tracking issue for const_cell_into_inner\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#2097\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.into_inner\" class=\"fn\">into_inner</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Unwraps the value, consuming the cell.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::UnsafeCell;\n\n<span class=\"kw\">let </span>uc = UnsafeCell::new(<span class=\"number\">5</span>);\n\n<span class=\"kw\">let </span>five = uc.into_inner();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::UnsafeCell;%0A++++%0A++++let+uc+=+UnsafeCell::new(5);%0A++++%0A++++let+five+=+uc.into_inner();%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-UnsafeCell%3CT%3E-1\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#2102\">source</a><a href=\"#impl-UnsafeCell%3CT%3E-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"struct.UnsafeCell.html\" title=\"struct std::cell::UnsafeCell\">UnsafeCell</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from_mut\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#2119\">source</a><h4 class=\"code-header\">pub const fn <a href=\"#method.from_mut\" class=\"fn\">from_mut</a>(value: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>) -&gt; &amp;mut <a class=\"struct\" href=\"struct.UnsafeCell.html\" title=\"struct std::cell::UnsafeCell\">UnsafeCell</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unsafe_cell_from_mut</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/111645\">#111645</a>)</span></div></span></summary><div class=\"docblock\"><p>Converts from <code>&amp;mut T</code> to <code>&amp;mut UnsafeCell&lt;T&gt;</code>.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::UnsafeCell;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>val = <span class=\"number\">42</span>;\n<span class=\"kw\">let </span>uc = UnsafeCell::from_mut(<span class=\"kw-2\">&amp;mut </span>val);\n\n<span class=\"kw-2\">*</span>uc.get_mut() -= <span class=\"number\">1</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>uc.get_mut(), <span class=\"number\">41</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(unsafe_cell_from_mut)%5D%0Afn+main()+%7B%0A++++use+std::cell::UnsafeCell;%0A++++%0A++++let+mut+val+=+42;%0A++++let+uc+=+UnsafeCell::from_mut(%26mut+val);%0A++++%0A++++*uc.get_mut()+-=+1;%0A++++assert_eq!(*uc.get_mut(),+41);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#2144\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.get\" class=\"fn\">get</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a></h4></section></summary><div class=\"docblock\"><p>Gets a mutable pointer to the wrapped value.</p>\n<p>This can be cast to a pointer of any kind.\nEnsure that the access is unique (no active references, mutable or not)\nwhen casting to <code>&amp;mut T</code>, and ensure that there are no mutations\nor mutable aliases going on when casting to <code>&amp;T</code></p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::UnsafeCell;\n\n<span class=\"kw\">let </span>uc = UnsafeCell::new(<span class=\"number\">5</span>);\n\n<span class=\"kw\">let </span>five = uc.get();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::UnsafeCell;%0A++++%0A++++let+uc+=+UnsafeCell::new(5);%0A++++%0A++++let+five+=+uc.get();%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0, const unstable\">1.50.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/88836\" title=\"Tracking issue for const_unsafecell_get_mut\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#2169\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.get_mut\" class=\"fn\">get_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\"><p>Returns a mutable reference to the underlying data.</p>\n<p>This call borrows the <code>UnsafeCell</code> mutably (at compile-time) which\nguarantees that we possess the only reference.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::UnsafeCell;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = UnsafeCell::new(<span class=\"number\">5</span>);\n<span class=\"kw-2\">*</span>c.get_mut() += <span class=\"number\">1</span>;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>c.get_mut(), <span class=\"number\">6</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::UnsafeCell;%0A++++%0A++++let+mut+c+=+UnsafeCell::new(5);%0A++++*c.get_mut()+%2B=+1;%0A++++%0A++++assert_eq!(*c.get_mut(),+6);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.raw_get\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.56.0, const since 1.56.0\">1.56.0 (const: 1.56.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#2205\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.raw_get\" class=\"fn\">raw_get</a>(this: <a class=\"primitive\" href=\"../primitive.pointer.html\">*const </a><a class=\"struct\" href=\"struct.UnsafeCell.html\" title=\"struct std::cell::UnsafeCell\">UnsafeCell</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a></h4></section></summary><div class=\"docblock\"><p>Gets a mutable pointer to the wrapped value.\nThe difference from <a href=\"struct.UnsafeCell.html#method.get\" title=\"method std::cell::UnsafeCell::get\"><code>get</code></a> is that this function accepts a raw pointer,\nwhich is useful to avoid the creation of temporary references.</p>\n<p>The result can be cast to a pointer of any kind.\nEnsure that the access is unique (no active references, mutable or not)\nwhen casting to <code>&amp;mut T</code>, and ensure that there are no mutations\nor mutable aliases going on when casting to <code>&amp;T</code>.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<p>Gradual initialization of an <code>UnsafeCell</code> requires <code>raw_get</code>, as\ncalling <code>get</code> would require creating a reference to uninitialized data:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::UnsafeCell;\n<span class=\"kw\">use </span>std::mem::MaybeUninit;\n\n<span class=\"kw\">let </span>m = MaybeUninit::&lt;UnsafeCell&lt;i32&gt;&gt;::uninit();\n<span class=\"kw\">unsafe </span>{ UnsafeCell::raw_get(m.as_ptr()).write(<span class=\"number\">5</span>); }\n<span class=\"comment\">// avoid below which references to uninitialized data\n// unsafe { UnsafeCell::get(&amp;*m.as_ptr()).write(5); }\n</span><span class=\"kw\">let </span>uc = <span class=\"kw\">unsafe </span>{ m.assume_init() };\n\n<span class=\"macro\">assert_eq!</span>(uc.into_inner(), <span class=\"number\">5</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cell::UnsafeCell;%0A++++use+std::mem::MaybeUninit;%0A++++%0A++++let+m+=+MaybeUninit::%3CUnsafeCell%3Ci32%3E%3E::uninit();%0A++++unsafe+%7B+UnsafeCell::raw_get(m.as_ptr()).write(5);+%7D%0A++++//+avoid+below+which+references+to+uninitialized+data%0A++++//+unsafe+%7B+UnsafeCell::get(%26*m.as_ptr()).write(5);+%7D%0A++++let+uc+=+unsafe+%7B+m.assume_init()+%7D;%0A++++%0A++++assert_eq!(uc.into_inner(),+5);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-UnsafeCell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2657\">source</a></span><a href=\"#impl-Debug-for-UnsafeCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.UnsafeCell.html\" title=\"struct std::cell::UnsafeCell\">UnsafeCell</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#2658\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"../fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-UnsafeCell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#2214\">source</a></span><a href=\"#impl-Default-for-UnsafeCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"struct\" href=\"struct.UnsafeCell.html\" title=\"struct std::cell::UnsafeCell\">UnsafeCell</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#2216\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"struct.UnsafeCell.html\" title=\"struct std::cell::UnsafeCell\">UnsafeCell</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates an <code>UnsafeCell</code>, with the <code>Default</code> value for T.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CT%3E-for-UnsafeCell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#2222\">source</a></span><a href=\"#impl-From%3CT%3E-for-UnsafeCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for <a class=\"struct\" href=\"struct.UnsafeCell.html\" title=\"struct std::cell::UnsafeCell\">UnsafeCell</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#2224\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; <a class=\"struct\" href=\"struct.UnsafeCell.html\" title=\"struct std::cell::UnsafeCell\">UnsafeCell</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new <code>UnsafeCell&lt;T&gt;</code> containing the given value.</p>\n</div></details></div></details><section id=\"impl-CoerceUnsized%3CUnsafeCell%3CU%3E%3E-for-UnsafeCell%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#2230\">source</a><a href=\"#impl-CoerceUnsized%3CUnsafeCell%3CU%3E%3E-for-UnsafeCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../ops/trait.CoerceUnsized.html\" title=\"trait std::ops::CoerceUnsized\">CoerceUnsized</a>&lt;<a class=\"struct\" href=\"struct.UnsafeCell.html\" title=\"struct std::cell::UnsafeCell\">UnsafeCell</a>&lt;U&gt;&gt; for <a class=\"struct\" href=\"struct.UnsafeCell.html\" title=\"struct std::cell::UnsafeCell\">UnsafeCell</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../ops/trait.CoerceUnsized.html\" title=\"trait std::ops::CoerceUnsized\">CoerceUnsized</a>&lt;U&gt;,</div></h3></section><section id=\"impl-DispatchFromDyn%3CUnsafeCell%3CU%3E%3E-for-UnsafeCell%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#2240\">source</a><a href=\"#impl-DispatchFromDyn%3CUnsafeCell%3CU%3E%3E-for-UnsafeCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../ops/trait.DispatchFromDyn.html\" title=\"trait std::ops::DispatchFromDyn\">DispatchFromDyn</a>&lt;<a class=\"struct\" href=\"struct.UnsafeCell.html\" title=\"struct std::cell::UnsafeCell\">UnsafeCell</a>&lt;U&gt;&gt; for <a class=\"struct\" href=\"struct.UnsafeCell.html\" title=\"struct std::cell::UnsafeCell\">UnsafeCell</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../ops/trait.DispatchFromDyn.html\" title=\"trait std::ops::DispatchFromDyn\">DispatchFromDyn</a>&lt;U&gt;,</div></h3></section><section id=\"impl-Freeze-for-UnsafeCell%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#832\">source</a><a href=\"#impl-Freeze-for-UnsafeCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; !<a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.UnsafeCell.html\" title=\"struct std::cell::UnsafeCell\">UnsafeCell</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-RefUnwindSafe-for-UnsafeCell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/panic/unwind_safe.rs.html#200\">source</a></span><a href=\"#impl-RefUnwindSafe-for-UnsafeCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; !<a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.UnsafeCell.html\" title=\"struct std::cell::UnsafeCell\">UnsafeCell</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Sync-for-UnsafeCell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#2060\">source</a></span><a href=\"#impl-Sync-for-UnsafeCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; !<a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.UnsafeCell.html\" title=\"struct std::cell::UnsafeCell\">UnsafeCell</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Send-for-UnsafeCell%3CT%3E\" class=\"impl\"><a href=\"#impl-Send-for-UnsafeCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.UnsafeCell.html\" title=\"struct std::cell::UnsafeCell\">UnsafeCell</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Unpin-for-UnsafeCell%3CT%3E\" class=\"impl\"><a href=\"#impl-Unpin-for-UnsafeCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.UnsafeCell.html\" title=\"struct std::cell::UnsafeCell\">UnsafeCell</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-UnwindSafe-for-UnsafeCell%3CT%3E\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-UnsafeCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.UnsafeCell.html\" title=\"struct std::cell::UnsafeCell\">UnsafeCell</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3C!%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#782\">source</a><a href=\"#impl-From%3C!%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"../primitive.never.html\">!</a>&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#783\">source</a><a href=\"#method.from-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: <a class=\"primitive\" href=\"../primitive.never.html\">!</a>) -&gt; T</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:20:42.101Z"
}