{
	"title": "write in std::fmt - Rust",
	"url": "https://doc.rust-lang.org/stable/std/fmt/fn.write.html",
	"markdown": "# write in std::fmt - Rust\n\n## Function [std](../index.html)::[fmt](index.html)::[write](#)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#1150) ·\n\n```\npub fn write(output: &mut dyn Write, args: Arguments<'_>) -> Result<(), Error>\n```\n\nExpand description\n\nThe `write` function takes an output stream, and an `Arguments` struct that can be precompiled with the `format_args!` macro.\n\nThe arguments will be formatted according to the specified format string into the output stream provided.\n\n## [§](#examples)Examples\n\nBasic usage:\n\n```\nuse std::fmt;\n\nlet mut output = String::new();\nfmt::write(&mut output, format_args!(\"Hello {}!\", \"world\"))\n    .expect(\"Error occurred while trying to write in String\");\nassert_eq!(output, \"Hello world!\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fmt;%0A++++%0A++++let+mut+output+=+String::new();%0A++++fmt::write(%26mut+output,+format_args!(%22Hello+%7B%7D!%22,+%22world%22))%0A++++++++.expect(%22Error+occurred+while+trying+to+write+in+String%22);%0A++++assert_eq!(output,+%22Hello+world!%22);%0A%7D&edition=2021)\n\nPlease note that using [`write!`](../macro.write.html \"macro std::write\") might be preferable. Example:\n\n```\nuse std::fmt::Write;\n\nlet mut output = String::new();\nwrite!(&mut output, \"Hello {}!\", \"world\")\n    .expect(\"Error occurred while trying to write in String\");\nassert_eq!(output, \"Hello world!\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fmt::Write;%0A++++%0A++++let+mut+output+=+String::new();%0A++++write!(%26mut+output,+%22Hello+%7B%7D!%22,+%22world%22)%0A++++++++.expect(%22Error+occurred+while+trying+to+write+in+String%22);%0A++++assert_eq!(output,+%22Hello+world!%22);%0A%7D&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"The `write` function takes an output stream, and an `Arguments` struct that can be precompiled with the `format_args!` macro.\"><title>write in std::fmt - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc fn\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h2><a href=\"index.html\">In std::fmt</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Arguments.html\">Arguments</a></li><li><a href=\"struct.DebugList.html\">DebugList</a></li><li><a href=\"struct.DebugMap.html\">DebugMap</a></li><li><a href=\"struct.DebugSet.html\">DebugSet</a></li><li><a href=\"struct.DebugStruct.html\">DebugStruct</a></li><li><a href=\"struct.DebugTuple.html\">DebugTuple</a></li><li><a href=\"struct.Error.html\">Error</a></li><li><a href=\"struct.Formatter.html\">Formatter</a></li><li><a href=\"struct.FormatterFn.html\">FormatterFn</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.Alignment.html\">Alignment</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.Binary.html\">Binary</a></li><li><a href=\"trait.Debug.html\">Debug</a></li><li><a href=\"trait.Display.html\">Display</a></li><li><a href=\"trait.LowerExp.html\">LowerExp</a></li><li><a href=\"trait.LowerHex.html\">LowerHex</a></li><li><a href=\"trait.Octal.html\">Octal</a></li><li><a href=\"trait.Pointer.html\">Pointer</a></li><li><a href=\"trait.UpperExp.html\">UpperExp</a></li><li><a href=\"trait.UpperHex.html\">UpperHex</a></li><li><a href=\"trait.Write.html\">Write</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.format.html\">format</a></li><li><a href=\"fn.write.html\">write</a></li></ul><h3><a href=\"index.html#types\">Type Aliases</a></h3><ul class=\"block type\"><li><a href=\"type.Result.html\">Result</a></li></ul><h3><a href=\"index.html#derives\">Derive Macros</a></h3><ul class=\"block derive\"><li><a href=\"derive.Debug.html\">Debug</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Function <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">fmt</a>::<wbr><a class=\"fn\" href=\"#\">write</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#1150\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub fn write(output: &amp;mut dyn <a class=\"trait\" href=\"trait.Write.html\" title=\"trait std::fmt::Write\">Write</a>, args: <a class=\"struct\" href=\"struct.Arguments.html\" title=\"struct std::fmt::Arguments\">Arguments</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, <a class=\"struct\" href=\"struct.Error.html\" title=\"struct std::fmt::Error\">Error</a>&gt;</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>The <code>write</code> function takes an output stream, and an <code>Arguments</code> struct\nthat can be precompiled with the <code>format_args!</code> macro.</p>\n<p>The arguments will be formatted according to the specified format string\ninto the output stream provided.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fmt;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>output = String::new();\nfmt::write(<span class=\"kw-2\">&amp;mut </span>output, <span class=\"macro\">format_args!</span>(<span class=\"string\">\"Hello {}!\"</span>, <span class=\"string\">\"world\"</span>))\n    .expect(<span class=\"string\">\"Error occurred while trying to write in String\"</span>);\n<span class=\"macro\">assert_eq!</span>(output, <span class=\"string\">\"Hello world!\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fmt;%0A++++%0A++++let+mut+output+=+String::new();%0A++++fmt::write(%26mut+output,+format_args!(%22Hello+%7B%7D!%22,+%22world%22))%0A++++++++.expect(%22Error+occurred+while+trying+to+write+in+String%22);%0A++++assert_eq!(output,+%22Hello+world!%22);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Please note that using <a href=\"../macro.write.html\" title=\"macro std::write\"><code>write!</code></a> might be preferable. Example:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fmt::Write;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>output = String::new();\n<span class=\"macro\">write!</span>(<span class=\"kw-2\">&amp;mut </span>output, <span class=\"string\">\"Hello {}!\"</span>, <span class=\"string\">\"world\"</span>)\n    .expect(<span class=\"string\">\"Error occurred while trying to write in String\"</span>);\n<span class=\"macro\">assert_eq!</span>(output, <span class=\"string\">\"Hello world!\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::fmt::Write;%0A++++%0A++++let+mut+output+=+String::new();%0A++++write!(%26mut+output,+%22Hello+%7B%7D!%22,+%22world%22)%0A++++++++.expect(%22Error+occurred+while+trying+to+write+in+String%22);%0A++++assert_eq!(output,+%22Hello+world!%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:23:09.028Z"
}