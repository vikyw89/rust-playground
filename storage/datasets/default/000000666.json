{
	"title": "External blocks - The Rust Reference",
	"url": "https://doc.rust-lang.org/stable/reference/items/external-blocks.html",
	"markdown": "# External blocks - The Rust Reference\n\n> **Syntax**  \n> _ExternBlock_ :  \n>    `unsafe`? `extern` [_Abi_](functions.html)? `{`  \n>       [_InnerAttribute_](../attributes.html)\\*  \n>       _ExternalItem_\\*  \n>    `}`\n> \n> _ExternalItem_ :  \n>    [_OuterAttribute_](../attributes.html)\\* (  \n>          [_MacroInvocationSemi_](about:blank/macros.html#macro-invocation)  \n>       | ( [_Visibility_](../visibility-and-privacy.html)? ( [_StaticItem_](static-items.html) | [_Function_](functions.html) ) )  \n>    )\n\nExternal blocks provide _declarations_ of items that are not _defined_ in the current crate and are the basis of Rust's foreign function interface. These are akin to unchecked imports.\n\nTwo kinds of item _declarations_ are allowed in external blocks: [functions](functions.html) and [statics](static-items.html). Calling functions or accessing statics that are declared in external blocks is only allowed in an `unsafe` context.\n\nThe `unsafe` keyword is syntactically allowed to appear before the `extern` keyword, but it is rejected at a semantic level. This allows macros to consume the syntax and make use of the `unsafe` keyword, before removing it from the token stream.\n\n## [Functions](#functions)\n\nFunctions within external blocks are declared in the same way as other Rust functions, with the exception that they must not have a body and are instead terminated by a semicolon. Patterns are not allowed in parameters, only [IDENTIFIER](../identifiers.html) or `_` may be used. Function qualifiers (`const`, `async`, `unsafe`, and `extern`) are not allowed.\n\nFunctions within external blocks may be called by Rust code, just like functions defined in Rust. The Rust compiler automatically translates between the Rust ABI and the foreign ABI.\n\nA function declared in an extern block is implicitly `unsafe`. When coerced to a function pointer, a function declared in an extern block has type `unsafe extern \"abi\" for<'l1, ..., 'lm> fn(A1, ..., An) -> R`, where `'l1`, ... `'lm` are its lifetime parameters, `A1`, ..., `An` are the declared types of its parameters and `R` is the declared return type.\n\n## [Statics](#statics)\n\nStatics within external blocks are declared in the same way as [statics](static-items.html) outside of external blocks, except that they do not have an expression initializing their value. It is `unsafe` to access a static item declared in an extern block, whether or not it's mutable, because there is nothing guaranteeing that the bit pattern at the static's memory is valid for the type it is declared with, since some arbitrary (e.g. C) code is in charge of initializing the static.\n\nExtern statics can be either immutable or mutable just like [statics](static-items.html) outside of external blocks. An immutable static _must_ be initialized before any Rust code is executed. It is not enough for the static to be initialized before Rust code reads from it.\n\n## [ABI](#abi)\n\nBy default external blocks assume that the library they are calling uses the standard C ABI on the specific platform. Other ABIs may be specified using an `abi` string, as shown here:\n\n```rust\n#![allow(unused)]\nfn main() {\n// Interface to the Windows API\nextern \"stdcall\" { }\n}\n```\n\nThere are three ABI strings which are cross-platform, and which all compilers are guaranteed to support:\n\n-   `extern \"Rust\"` -- The default ABI when you write a normal `fn foo()` in any Rust code.\n-   `extern \"C\"` -- This is the same as `extern fn foo()`; whatever the default your C compiler supports.\n-   `extern \"system\"` -- Usually the same as `extern \"C\"`, except on Win32, in which case it's `\"stdcall\"`, or what you should use to link to the Windows API itself\n\nThere are also some platform-specific ABI strings:\n\n-   `extern \"cdecl\"` -- The default for x86\\_32 C code.\n-   `extern \"stdcall\"` -- The default for the Win32 API on x86\\_32.\n-   `extern \"win64\"` -- The default for C code on x86\\_64 Windows.\n-   `extern \"sysv64\"` -- The default for C code on non-Windows x86\\_64.\n-   `extern \"aapcs\"` -- The default for ARM.\n-   `extern \"fastcall\"` -- The `fastcall` ABI -- corresponds to MSVC's `__fastcall` and GCC and clang's `__attribute__((fastcall))`\n-   `extern \"vectorcall\"` -- The `vectorcall` ABI -- corresponds to MSVC's `__vectorcall` and clang's `__attribute__((vectorcall))`\n-   `extern \"thiscall\"` -- The default for C++ member functions on MSVC -- corresponds to MSVC's `__thiscall` and GCC and clang's `__attribute__((thiscall))`\n-   `extern \"efiapi\"` -- The ABI used for [UEFI](https://uefi.org/specifications) functions.\n\n## [Variadic functions](#variadic-functions)\n\nFunctions within external blocks may be variadic by specifying `...` as the last argument. The variadic parameter may optionally be specified with an identifier.\n\n```rust\n#![allow(unused)]\nfn main() {\nextern \"C\" {\n    fn foo(...);\n    fn bar(x: i32, ...);\n    fn with_name(format: *const u8, args: ...);\n}\n}\n```\n\n## [Attributes on extern blocks](#attributes-on-extern-blocks)\n\nThe following [attributes](../attributes.html) control the behavior of external blocks.\n\n### [The `link` attribute](#the-link-attribute)\n\nThe _`link` attribute_ specifies the name of a native library that the compiler should link with for the items within an `extern` block. It uses the [_MetaListNameValueStr_](about:blank/attributes.html#meta-item-attribute-syntax) syntax to specify its inputs. The `name` key is the name of the native library to link. The `kind` key is an optional value which specifies the kind of library with the following possible values:\n\n-   `dylib` — Indicates a dynamic library. This is the default if `kind` is not specified.\n-   `static` — Indicates a static library.\n-   `framework` — Indicates a macOS framework. This is only valid for macOS targets.\n-   `raw-dylib` — Indicates a dynamic library where the compiler will generate an import library to link against (see [`dylib` versus `raw-dylib`](#dylib-versus-raw-dylib) below for details). This is only valid for Windows targets.\n\nThe `name` key must be included if `kind` is specified.\n\nThe optional `modifiers` argument is a way to specify linking modifiers for the library to link. Modifiers are specified as a comma-delimited string with each modifier prefixed with either a `+` or `-` to indicate that the modifier is enabled or disabled, respectively. Specifying multiple `modifiers` arguments in a single `link` attribute, or multiple identical modifiers in the same `modifiers` argument is not currently supported.  \nExample: `#[link(name = \"mylib\", kind = \"static\", modifiers = \"+whole-archive\")]`.\n\nThe `wasm_import_module` key may be used to specify the [WebAssembly module](https://webassembly.github.io/spec/core/syntax/modules.html) name for the items within an `extern` block when importing symbols from the host environment. The default module name is `env` if `wasm_import_module` is not specified.\n\n```rust\n#[link(name = \"crypto\")]\nextern {\n    // …\n}\n\n#[link(name = \"CoreFoundation\", kind = \"framework\")]\nextern {\n    // …\n}\n\n#[link(wasm_import_module = \"foo\")]\nextern {\n    // …\n}\n```\n\nIt is valid to add the `link` attribute on an empty extern block. You can use this to satisfy the linking requirements of extern blocks elsewhere in your code (including upstream crates) instead of adding the attribute to each extern block.\n\n#### [Linking modifiers: `bundle`](#linking-modifiers-bundle)\n\nThis modifier is only compatible with the `static` linking kind. Using any other kind will result in a compiler error.\n\nWhen building a rlib or staticlib `+bundle` means that the native static library will be packed into the rlib or staticlib archive, and then retrieved from there during linking of the final binary.\n\nWhen building a rlib `-bundle` means that the native static library is registered as a dependency of that rlib \"by name\", and object files from it are included only during linking of the final binary, the file search by that name is also performed during final linking.  \nWhen building a staticlib `-bundle` means that the native static library is simply not included into the archive and some higher level build system will need to add it later during linking of the final binary.\n\nThis modifier has no effect when building other targets like executables or dynamic libraries.\n\nThe default for this modifier is `+bundle`.\n\nMore implementation details about this modifier can be found in [`bundle` documentation for rustc](about:blank/rustc/command-line-arguments.html#linking-modifiers-bundle).\n\n#### [Linking modifiers: `whole-archive`](#linking-modifiers-whole-archive)\n\nThis modifier is only compatible with the `static` linking kind. Using any other kind will result in a compiler error.\n\n`+whole-archive` means that the static library is linked as a whole archive without throwing any object files away.\n\nThe default for this modifier is `-whole-archive`.\n\nMore implementation details about this modifier can be found in [`whole-archive` documentation for rustc](about:blank/rustc/command-line-arguments.html#linking-modifiers-whole-archive).\n\n### [Linking modifiers: `verbatim`](#linking-modifiers-verbatim)\n\nThis modifier is compatible with all linking kinds.\n\n`+verbatim` means that rustc itself won't add any target-specified library prefixes or suffixes (like `lib` or `.a`) to the library name, and will try its best to ask for the same thing from the linker.\n\n`-verbatim` means that rustc will either add a target-specific prefix and suffix to the library name before passing it to linker, or won't prevent linker from implicitly adding it.\n\nThe default for this modifier is `-verbatim`.\n\nMore implementation details about this modifier can be found in [`verbatim` documentation for rustc](about:blank/rustc/command-line-arguments.html#linking-modifiers-verbatim).\n\n#### [`dylib` versus `raw-dylib`](#dylib-versus-raw-dylib)\n\nOn Windows, linking against a dynamic library requires that an import library is provided to the linker: this is a special static library that declares all of the symbols exported by the dynamic library in such a way that the linker knows that they have to be dynamically loaded at runtime.\n\nSpecifying `kind = \"dylib\"` instructs the Rust compiler to link an import library based on the `name` key. The linker will then use its normal library resolution logic to find that import library. Alternatively, specifying `kind = \"raw-dylib\"` instructs the compiler to generate an import library during compilation and provide that to the linker instead.\n\n`raw-dylib` is only supported on Windows. Using it when targeting other platforms will result in a compiler error.\n\n#### [The `import_name_type` key](#the-import_name_type-key)\n\nOn x86 Windows, names of functions are \"decorated\" (i.e., have a specific prefix and/or suffix added) to indicate their calling convention. For example, a `stdcall` calling convention function with the name `fn1` that has no arguments would be decorated as `_fn1@0`. However, the [PE Format](https://learn.microsoft.com/windows/win32/debug/pe-format#import-name-type) does also permit names to have no prefix or be undecorated. Additionally, the MSVC and GNU toolchains use different decorations for the same calling conventions which means, by default, some Win32 functions cannot be called using the `raw-dylib` link kind via the GNU toolchain.\n\nTo allow for these differences, when using the `raw-dylib` link kind you may also specify the `import_name_type` key with one of the following values to change how functions are named in the generated import library:\n\n-   `decorated`: The function name will be fully-decorated using the MSVC toolchain format.\n-   `noprefix`: The function name will be decorated using the MSVC toolchain format, but skipping the leading `?`, `@`, or optionally `_`.\n-   `undecorated`: The function name will not be decorated.\n\nIf the `import_name_type` key is not specified, then the function name will be fully-decorated using the target toolchain's format.\n\nVariables are never decorated and so the `import_name_type` key has no effect on how they are named in the generated import library.\n\nThe `import_name_type` key is only supported on x86 Windows. Using it when targeting other platforms will result in a compiler error.\n\n### [The `link_name` attribute](#the-link_name-attribute)\n\nThe _`link_name` attribute_ may be specified on declarations inside an `extern` block to indicate the symbol to import for the given function or static. It uses the [_MetaNameValueStr_](about:blank/attributes.html#meta-item-attribute-syntax) syntax to specify the name of the symbol.\n\n```rust\n#![allow(unused)]\nfn main() {\nextern {\n    #[link_name = \"actual_symbol_name\"]\n    fn name_in_rust();\n}\n}\n```\n\nUsing this attribute with the `link_ordinal` attribute will result in a compiler error.\n\n### [The `link_ordinal` attribute](#the-link_ordinal-attribute)\n\nThe _`link_ordinal` attribute_ can be applied on declarations inside an `extern` block to indicate the numeric ordinal to use when generating the import library to link against. An ordinal is a unique number per symbol exported by a dynamic library on Windows and can be used when the library is being loaded to find that symbol rather than having to look it up by name.\n\nWarning: `link_ordinal` should only be used in cases where the ordinal of the symbol is known to be stable: if the ordinal of a symbol is not explicitly set when its containing binary is built then one will be automatically assigned to it, and that assigned ordinal may change between builds of the binary.\n\n```rust\n#[link(name = \"exporter\", kind = \"raw-dylib\")]\nextern \"stdcall\" {\n    #[link_ordinal(15)]\n    fn imported_function_stdcall(i: i32);\n}\n```\n\nThis attribute is only used with the `raw-dylib` linking kind. Using any other kind will result in a compiler error.\n\nUsing this attribute with the `link_name` attribute will result in a compiler error.\n\n### [Attributes on function parameters](#attributes-on-function-parameters)\n\nAttributes on extern function parameters follow the same rules and restrictions as [regular function parameters](about:blank/functions.html#attributes-on-function-parameters).",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>External blocks - The Rust Reference</title>\n\n\n        <!-- Custom HTML head -->\n        \n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"icon\" href=\"../favicon.svg\">\n        <link rel=\"shortcut icon\" href=\"../favicon.png\">\n        <link rel=\"stylesheet\" href=\"../css/variables.css\">\n        <link rel=\"stylesheet\" href=\"../css/general.css\">\n        <link rel=\"stylesheet\" href=\"../css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"../css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"../FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"../fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"../highlight.css\">\n        <link rel=\"stylesheet\" href=\"../tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"../ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n        <link rel=\"stylesheet\" href=\"../theme/reference.css\">\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"../\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"../introduction.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"../notation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> Notation</a></li><li class=\"chapter-item expanded \"><a href=\"../lexical-structure.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Lexical structure</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../input-format.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.1.</strong> Input format</a></li><li class=\"chapter-item expanded \"><a href=\"../keywords.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.2.</strong> Keywords</a></li><li class=\"chapter-item expanded \"><a href=\"../identifiers.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.3.</strong> Identifiers</a></li><li class=\"chapter-item expanded \"><a href=\"../comments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.4.</strong> Comments</a></li><li class=\"chapter-item expanded \"><a href=\"../whitespace.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.5.</strong> Whitespace</a></li><li class=\"chapter-item expanded \"><a href=\"../tokens.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.6.</strong> Tokens</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../macros.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Macros</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../macros-by-example.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> Macros By Example</a></li><li class=\"chapter-item expanded \"><a href=\"../procedural-macros.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> Procedural Macros</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../crates-and-source-files.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Crates and source files</a></li><li class=\"chapter-item expanded \"><a href=\"../conditional-compilation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> Conditional compilation</a></li><li class=\"chapter-item expanded \"><a href=\"../items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Items</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../items/modules.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.1.</strong> Modules</a></li><li class=\"chapter-item expanded \"><a href=\"../items/extern-crates.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.2.</strong> Extern crates</a></li><li class=\"chapter-item expanded \"><a href=\"../items/use-declarations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.3.</strong> Use declarations</a></li><li class=\"chapter-item expanded \"><a href=\"../items/functions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.4.</strong> Functions</a></li><li class=\"chapter-item expanded \"><a href=\"../items/type-aliases.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.5.</strong> Type aliases</a></li><li class=\"chapter-item expanded \"><a href=\"../items/structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.6.</strong> Structs</a></li><li class=\"chapter-item expanded \"><a href=\"../items/enumerations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.7.</strong> Enumerations</a></li><li class=\"chapter-item expanded \"><a href=\"../items/unions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.8.</strong> Unions</a></li><li class=\"chapter-item expanded \"><a href=\"../items/constant-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.9.</strong> Constant items</a></li><li class=\"chapter-item expanded \"><a href=\"../items/static-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.10.</strong> Static items</a></li><li class=\"chapter-item expanded \"><a href=\"../items/traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.11.</strong> Traits</a></li><li class=\"chapter-item expanded \"><a href=\"../items/implementations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.12.</strong> Implementations</a></li><li class=\"chapter-item expanded \"><a href=\"../items/external-blocks.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">6.13.</strong> External blocks</a></li><li class=\"chapter-item expanded \"><a href=\"../items/generics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.14.</strong> Generic parameters</a></li><li class=\"chapter-item expanded \"><a href=\"../items/associated-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.15.</strong> Associated Items</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../attributes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Attributes</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../attributes/testing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.1.</strong> Testing</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/derive.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.2.</strong> Derive</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/diagnostics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.3.</strong> Diagnostics</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/codegen.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.4.</strong> Code generation</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/limits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.5.</strong> Limits</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/type_system.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.6.</strong> Type System</a></li><li class=\"chapter-item expanded \"><a href=\"../attributes/debugger.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.7.</strong> Debugger</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../statements-and-expressions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.</strong> Statements and expressions</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../statements.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.1.</strong> Statements</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.</strong> Expressions</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../expressions/literal-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.1.</strong> Literal expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/path-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.2.</strong> Path expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/block-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.3.</strong> Block expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/operator-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.4.</strong> Operator expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/grouped-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.5.</strong> Grouped expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/array-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.6.</strong> Array and index expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/tuple-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.7.</strong> Tuple and index expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/struct-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.8.</strong> Struct expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/call-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.9.</strong> Call expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/method-call-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.10.</strong> Method call expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/field-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.11.</strong> Field access expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/closure-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.12.</strong> Closure expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/loop-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.13.</strong> Loop expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/range-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.14.</strong> Range expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/if-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.15.</strong> If and if let expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/match-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.16.</strong> Match expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/return-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.17.</strong> Return expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/await-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.18.</strong> Await expressions</a></li><li class=\"chapter-item expanded \"><a href=\"../expressions/underscore-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.19.</strong> Underscore expressions</a></li></ol></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.</strong> Patterns</a></li><li class=\"chapter-item expanded \"><a href=\"../type-system.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.</strong> Type system</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.</strong> Types</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../types/boolean.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.1.</strong> Boolean type</a></li><li class=\"chapter-item expanded \"><a href=\"../types/numeric.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.2.</strong> Numeric types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/textual.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.3.</strong> Textual types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/never.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.4.</strong> Never type</a></li><li class=\"chapter-item expanded \"><a href=\"../types/tuple.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.5.</strong> Tuple types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/array.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.6.</strong> Array types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/slice.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.7.</strong> Slice types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/struct.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.8.</strong> Struct types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/enum.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.9.</strong> Enumerated types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/union.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.10.</strong> Union types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/function-item.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.11.</strong> Function item types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/closure.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.12.</strong> Closure types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/pointer.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.13.</strong> Pointer types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/function-pointer.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.14.</strong> Function pointer types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/trait-object.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.15.</strong> Trait object types</a></li><li class=\"chapter-item expanded \"><a href=\"../types/impl-trait.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.16.</strong> Impl trait type</a></li><li class=\"chapter-item expanded \"><a href=\"../types/parameters.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.17.</strong> Type parameters</a></li><li class=\"chapter-item expanded \"><a href=\"../types/inferred.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.18.</strong> Inferred type</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../dynamically-sized-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.2.</strong> Dynamically Sized Types</a></li><li class=\"chapter-item expanded \"><a href=\"../type-layout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.3.</strong> Type layout</a></li><li class=\"chapter-item expanded \"><a href=\"../interior-mutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.4.</strong> Interior mutability</a></li><li class=\"chapter-item expanded \"><a href=\"../subtyping.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.5.</strong> Subtyping and Variance</a></li><li class=\"chapter-item expanded \"><a href=\"../trait-bounds.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.6.</strong> Trait and lifetime bounds</a></li><li class=\"chapter-item expanded \"><a href=\"../type-coercions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.7.</strong> Type coercions</a></li><li class=\"chapter-item expanded \"><a href=\"../destructors.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.8.</strong> Destructors</a></li><li class=\"chapter-item expanded \"><a href=\"../lifetime-elision.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.9.</strong> Lifetime elision</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../special-types-and-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.</strong> Special types and traits</a></li><li class=\"chapter-item expanded \"><a href=\"../names.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.</strong> Names</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../names/namespaces.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.1.</strong> Namespaces</a></li><li class=\"chapter-item expanded \"><a href=\"../names/scopes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.2.</strong> Scopes</a></li><li class=\"chapter-item expanded \"><a href=\"../names/preludes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.3.</strong> Preludes</a></li><li class=\"chapter-item expanded \"><a href=\"../paths.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.4.</strong> Paths</a></li><li class=\"chapter-item expanded \"><a href=\"../names/name-resolution.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.5.</strong> Name resolution</a></li><li class=\"chapter-item expanded \"><a href=\"../visibility-and-privacy.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.6.</strong> Visibility and privacy</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../memory-model.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.</strong> Memory model</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../memory-allocation-and-lifetime.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.1.</strong> Memory allocation and lifetime</a></li><li class=\"chapter-item expanded \"><a href=\"../variables.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.2.</strong> Variables</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../linkage.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.</strong> Linkage</a></li><li class=\"chapter-item expanded \"><a href=\"../inline-assembly.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.</strong> Inline assembly</a></li><li class=\"chapter-item expanded \"><a href=\"../unsafety.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.</strong> Unsafety</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../unsafe-keyword.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.1.</strong> The unsafe keyword</a></li><li class=\"chapter-item expanded \"><a href=\"../behavior-considered-undefined.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.2.</strong> Behavior considered undefined</a></li><li class=\"chapter-item expanded \"><a href=\"../behavior-not-considered-unsafe.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.3.</strong> Behavior not considered unsafe</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../const_eval.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.</strong> Constant Evaluation</a></li><li class=\"chapter-item expanded \"><a href=\"../abi.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.</strong> Application Binary Interface</a></li><li class=\"chapter-item expanded \"><a href=\"../runtime.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.</strong> The Rust runtime</a></li><li class=\"chapter-item expanded \"><a href=\"../appendices.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.</strong> Appendices</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../macro-ambiguity.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.1.</strong> Macro Follow-Set Ambiguity Formal Specification</a></li><li class=\"chapter-item expanded \"><a href=\"../influences.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.2.</strong> Influences</a></li><li class=\"chapter-item expanded \"><a href=\"../glossary.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.3.</strong> Glossary</a></li></ol></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Rust Reference</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"../print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/reference/\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/reference/edit/master/src/items/external-blocks.md\" title=\"Suggest an edit\" aria-label=\"Suggest an edit\">\n                            <i id=\"git-edit-button\" class=\"fa fa-edit\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h1 id=\"external-blocks\"><a class=\"header\" href=\"#external-blocks\">External blocks</a></h1>\n<blockquote>\n<p><strong><sup>Syntax</sup></strong><br>\n<em>ExternBlock</em> :<br>\n&nbsp;&nbsp; <code class=\"hljs\">unsafe</code><sup>?</sup> <code class=\"hljs\">extern</code> <a href=\"functions.html\"><em>Abi</em></a><sup>?</sup> <code class=\"hljs\">{</code><br>\n&nbsp;&nbsp; &nbsp;&nbsp; <a href=\"../attributes.html\"><em>InnerAttribute</em></a><sup>*</sup><br>\n&nbsp;&nbsp; &nbsp;&nbsp; <em>ExternalItem</em><sup>*</sup><br>\n&nbsp;&nbsp; <code class=\"hljs\">}</code></p>\n<p><em>ExternalItem</em> :<br>\n&nbsp;&nbsp; <a href=\"../attributes.html\"><em>OuterAttribute</em></a><sup>*</sup> (<br>\n&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; <a href=\"../macros.html#macro-invocation\"><em>MacroInvocationSemi</em></a><br>\n&nbsp;&nbsp; &nbsp;&nbsp; | ( <a href=\"../visibility-and-privacy.html\"><em>Visibility</em></a><sup>?</sup> ( <a href=\"static-items.html\"><em>StaticItem</em></a> | <a href=\"functions.html\"><em>Function</em></a> ) )<br>\n&nbsp;&nbsp; )</p>\n</blockquote>\n<p>External blocks provide <em>declarations</em> of items that are not <em>defined</em> in the\ncurrent crate and are the basis of Rust's foreign function interface. These are\nakin to unchecked imports.</p>\n<p>Two kinds of item <em>declarations</em> are allowed in external blocks: <a href=\"functions.html\">functions</a> and\n<a href=\"static-items.html\">statics</a>. Calling functions or accessing statics that are declared in external\nblocks is only allowed in an <code class=\"hljs\">unsafe</code> context.</p>\n<p>The <code class=\"hljs\">unsafe</code> keyword is syntactically allowed to appear before the <code class=\"hljs\">extern</code>\nkeyword, but it is rejected at a semantic level. This allows macros to consume\nthe syntax and make use of the <code class=\"hljs\">unsafe</code> keyword, before removing it from the\ntoken stream.</p>\n<h2 id=\"functions\"><a class=\"header\" href=\"#functions\">Functions</a></h2>\n<p>Functions within external blocks are declared in the same way as other Rust\nfunctions, with the exception that they must not have a body and are instead\nterminated by a semicolon. Patterns are not allowed in parameters, only\n<a href=\"../identifiers.html\">IDENTIFIER</a> or <code class=\"hljs\">_</code> may be used. Function qualifiers (<code class=\"hljs\">const</code>, <code class=\"hljs\">async</code>,\n<code class=\"hljs\">unsafe</code>, and <code class=\"hljs\">extern</code>) are not allowed.</p>\n<p>Functions within external blocks may be called by Rust code, just like\nfunctions defined in Rust. The Rust compiler automatically translates between\nthe Rust ABI and the foreign ABI.</p>\n<p>A function declared in an extern block is implicitly <code class=\"hljs\">unsafe</code>. When coerced to\na function pointer, a function declared in an extern block has type <code class=\"hljs\">unsafe extern \"abi\" for&lt;'l1, ..., 'lm&gt; fn(A1, ..., An) -&gt; R</code>, where <code class=\"hljs\">'l1</code>, ... <code class=\"hljs\">'lm</code>\nare its lifetime parameters, <code class=\"hljs\">A1</code>, ..., <code class=\"hljs\">An</code> are the declared types of its\nparameters and <code class=\"hljs\">R</code> is the declared return type.</p>\n<h2 id=\"statics\"><a class=\"header\" href=\"#statics\">Statics</a></h2>\n<p>Statics within external blocks are declared in the same way as <a href=\"static-items.html\">statics</a> outside of external blocks,\nexcept that they do not have an expression initializing their value.\nIt is <code class=\"hljs\">unsafe</code> to access a static item declared in an extern block, whether or\nnot it's mutable, because there is nothing guaranteeing that the bit pattern at the static's\nmemory is valid for the type it is declared with, since some arbitrary (e.g. C) code is in charge\nof initializing the static.</p>\n<p>Extern statics can be either immutable or mutable just like <a href=\"static-items.html\">statics</a> outside of external blocks.\nAn immutable static <em>must</em> be initialized before any Rust code is executed. It is not enough for\nthe static to be initialized before Rust code reads from it.</p>\n<h2 id=\"abi\"><a class=\"header\" href=\"#abi\">ABI</a></h2>\n<p>By default external blocks assume that the library they are calling uses the\nstandard C ABI on the specific platform. Other ABIs may be specified using an\n<code class=\"hljs\">abi</code> string, as shown here:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// Interface to the Windows API</span>\n<span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">\"stdcall\"</span> { }\n<span class=\"boring\">}</span></code></pre></pre>\n<p>There are three ABI strings which are cross-platform, and which all compilers\nare guaranteed to support:</p>\n<ul>\n<li><code class=\"hljs\">extern \"Rust\"</code> -- The default ABI when you write a normal <code class=\"hljs\">fn foo()</code> in any\nRust code.</li>\n<li><code class=\"hljs\">extern \"C\"</code> -- This is the same as <code class=\"hljs\">extern fn foo()</code>; whatever the default\nyour C compiler supports.</li>\n<li><code class=\"hljs\">extern \"system\"</code> -- Usually the same as <code class=\"hljs\">extern \"C\"</code>, except on Win32, in\nwhich case it's <code class=\"hljs\">\"stdcall\"</code>, or what you should use to link to the Windows\nAPI itself</li>\n</ul>\n<p>There are also some platform-specific ABI strings:</p>\n<ul>\n<li><code class=\"hljs\">extern \"cdecl\"</code> -- The default for x86_32 C code.</li>\n<li><code class=\"hljs\">extern \"stdcall\"</code> -- The default for the Win32 API on x86_32.</li>\n<li><code class=\"hljs\">extern \"win64\"</code> -- The default for C code on x86_64 Windows.</li>\n<li><code class=\"hljs\">extern \"sysv64\"</code> -- The default for C code on non-Windows x86_64.</li>\n<li><code class=\"hljs\">extern \"aapcs\"</code> -- The default for ARM.</li>\n<li><code class=\"hljs\">extern \"fastcall\"</code> -- The <code class=\"hljs\">fastcall</code> ABI -- corresponds to MSVC's\n<code class=\"hljs\">__fastcall</code> and GCC and clang's <code class=\"hljs\">__attribute__((fastcall))</code></li>\n<li><code class=\"hljs\">extern \"vectorcall\"</code> -- The <code class=\"hljs\">vectorcall</code> ABI -- corresponds to MSVC's\n<code class=\"hljs\">__vectorcall</code> and clang's <code class=\"hljs\">__attribute__((vectorcall))</code></li>\n<li><code class=\"hljs\">extern \"thiscall\"</code> -- The default for C++ member functions on MSVC -- corresponds to MSVC's\n<code class=\"hljs\">__thiscall</code> and GCC and clang's <code class=\"hljs\">__attribute__((thiscall))</code></li>\n<li><code class=\"hljs\">extern \"efiapi\"</code> -- The ABI used for <a href=\"https://uefi.org/specifications\">UEFI</a> functions.</li>\n</ul>\n<h2 id=\"variadic-functions\"><a class=\"header\" href=\"#variadic-functions\">Variadic functions</a></h2>\n<p>Functions within external blocks may be variadic by specifying <code class=\"hljs\">...</code> as the\nlast argument. The variadic parameter may optionally be specified with an\nidentifier.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">\"C\"</span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>(...);\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">bar</span></span>(x: <span class=\"hljs-built_in\">i32</span>, ...);\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">with_name</span></span>(format: *<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">u8</span>, args: ...);\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"attributes-on-extern-blocks\"><a class=\"header\" href=\"#attributes-on-extern-blocks\">Attributes on extern blocks</a></h2>\n<p>The following <a href=\"../attributes.html\">attributes</a> control the behavior of external blocks.</p>\n<h3 id=\"the-link-attribute\"><a class=\"header\" href=\"#the-link-attribute\">The <code>link</code> attribute</a></h3>\n<p>The <em><code class=\"hljs\">link</code> attribute</em> specifies the name of a native library that the\ncompiler should link with for the items within an <code class=\"hljs\">extern</code> block. It uses the\n<a href=\"../attributes.html#meta-item-attribute-syntax\"><em>MetaListNameValueStr</em></a> syntax to specify its inputs. The <code class=\"hljs\">name</code> key is the\nname of the native library to link. The <code class=\"hljs\">kind</code> key is an optional value which\nspecifies the kind of library with the following possible values:</p>\n<ul>\n<li><code class=\"hljs\">dylib</code> — Indicates a dynamic library. This is the default if <code class=\"hljs\">kind</code> is not\nspecified.</li>\n<li><code class=\"hljs\">static</code> — Indicates a static library.</li>\n<li><code class=\"hljs\">framework</code> — Indicates a macOS framework. This is only valid for macOS\ntargets.</li>\n<li><code class=\"hljs\">raw-dylib</code> — Indicates a dynamic library where the compiler will generate\nan import library to link against (see <a href=\"#dylib-versus-raw-dylib\"><code class=\"hljs\">dylib</code> versus <code class=\"hljs\">raw-dylib</code></a> below\nfor details). This is only valid for Windows targets.</li>\n</ul>\n<p>The <code class=\"hljs\">name</code> key must be included if <code class=\"hljs\">kind</code> is specified.</p>\n<p>The optional <code class=\"hljs\">modifiers</code> argument is a way to specify linking modifiers for the\nlibrary to link.\nModifiers are specified as a comma-delimited string with each modifier prefixed\nwith either a <code class=\"hljs\">+</code> or <code class=\"hljs\">-</code> to indicate that the modifier is enabled or disabled,\nrespectively.\nSpecifying multiple <code class=\"hljs\">modifiers</code> arguments in a single <code class=\"hljs\">link</code> attribute,\nor multiple identical modifiers in the same <code class=\"hljs\">modifiers</code> argument is not currently supported. <br>\nExample: <code class=\"hljs\">#[link(name = \"mylib\", kind = \"static\", modifiers = \"+whole-archive\")]</code>.</p>\n<p>The <code class=\"hljs\">wasm_import_module</code> key may be used to specify the <a href=\"https://webassembly.github.io/spec/core/syntax/modules.html\">WebAssembly module</a>\nname for the items within an <code class=\"hljs\">extern</code> block when importing symbols from the\nhost environment. The default module name is <code class=\"hljs\">env</code> if <code class=\"hljs\">wasm_import_module</code> is\nnot specified.</p>\n<!-- ignore: requires extern linking -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-meta\">#[link(name = <span class=\"hljs-meta-string\">\"crypto\"</span>)]</span>\n<span class=\"hljs-keyword\">extern</span> {\n    <span class=\"hljs-comment\">// …</span>\n}\n\n<span class=\"hljs-meta\">#[link(name = <span class=\"hljs-meta-string\">\"CoreFoundation\"</span>, kind = <span class=\"hljs-meta-string\">\"framework\"</span>)]</span>\n<span class=\"hljs-keyword\">extern</span> {\n    <span class=\"hljs-comment\">// …</span>\n}\n\n<span class=\"hljs-meta\">#[link(wasm_import_module = <span class=\"hljs-meta-string\">\"foo\"</span>)]</span>\n<span class=\"hljs-keyword\">extern</span> {\n    <span class=\"hljs-comment\">// …</span>\n}</code></pre>\n<p>It is valid to add the <code class=\"hljs\">link</code> attribute on an empty extern block. You can use\nthis to satisfy the linking requirements of extern blocks elsewhere in your\ncode (including upstream crates) instead of adding the attribute to each extern\nblock.</p>\n<h4 id=\"linking-modifiers-bundle\"><a class=\"header\" href=\"#linking-modifiers-bundle\">Linking modifiers: <code>bundle</code></a></h4>\n<p>This modifier is only compatible with the <code class=\"hljs\">static</code> linking kind.\nUsing any other kind will result in a compiler error.</p>\n<p>When building a rlib or staticlib <code class=\"hljs\">+bundle</code> means that the native static library\nwill be packed into the rlib or staticlib archive, and then retrieved from there\nduring linking of the final binary.</p>\n<p>When building a rlib <code class=\"hljs\">-bundle</code> means that the native static library is registered as a dependency\nof that rlib \"by name\", and object files from it are included only during linking of the final\nbinary, the file search by that name is also performed during final linking. <br>\nWhen building a staticlib <code class=\"hljs\">-bundle</code> means that the native static library is simply not included\ninto the archive and some higher level build system will need to add it later during linking of\nthe final binary.</p>\n<p>This modifier has no effect when building other targets like executables or dynamic libraries.</p>\n<p>The default for this modifier is <code class=\"hljs\">+bundle</code>.</p>\n<p>More implementation details about this modifier can be found in\n<a href=\"../../rustc/command-line-arguments.html#linking-modifiers-bundle\"><code class=\"hljs\">bundle</code> documentation for rustc</a>.</p>\n<h4 id=\"linking-modifiers-whole-archive\"><a class=\"header\" href=\"#linking-modifiers-whole-archive\">Linking modifiers: <code>whole-archive</code></a></h4>\n<p>This modifier is only compatible with the <code class=\"hljs\">static</code> linking kind.\nUsing any other kind will result in a compiler error.</p>\n<p><code class=\"hljs\">+whole-archive</code> means that the static library is linked as a whole archive\nwithout throwing any object files away.</p>\n<p>The default for this modifier is <code class=\"hljs\">-whole-archive</code>.</p>\n<p>More implementation details about this modifier can be found in\n<a href=\"../../rustc/command-line-arguments.html#linking-modifiers-whole-archive\"><code class=\"hljs\">whole-archive</code> documentation for rustc</a>.</p>\n<h3 id=\"linking-modifiers-verbatim\"><a class=\"header\" href=\"#linking-modifiers-verbatim\">Linking modifiers: <code>verbatim</code></a></h3>\n<p>This modifier is compatible with all linking kinds.</p>\n<p><code class=\"hljs\">+verbatim</code> means that rustc itself won't add any target-specified library prefixes or suffixes\n(like <code class=\"hljs\">lib</code> or <code class=\"hljs\">.a</code>) to the library name, and will try its best to ask for the same thing from the\nlinker.</p>\n<p><code class=\"hljs\">-verbatim</code> means that rustc will either add a target-specific prefix and suffix to the library\nname before passing it to linker, or won't prevent linker from implicitly adding it.</p>\n<p>The default for this modifier is <code class=\"hljs\">-verbatim</code>.</p>\n<p>More implementation details about this modifier can be found in\n<a href=\"../../rustc/command-line-arguments.html#linking-modifiers-verbatim\"><code class=\"hljs\">verbatim</code> documentation for rustc</a>.</p>\n<h4 id=\"dylib-versus-raw-dylib\"><a class=\"header\" href=\"#dylib-versus-raw-dylib\"><code>dylib</code> versus <code>raw-dylib</code></a></h4>\n<p>On Windows, linking against a dynamic library requires that an import library\nis provided to the linker: this is a special static library that declares all\nof the symbols exported by the dynamic library in such a way that the linker\nknows that they have to be dynamically loaded at runtime.</p>\n<p>Specifying <code class=\"hljs\">kind = \"dylib\"</code> instructs the Rust compiler to link an import\nlibrary based on the <code class=\"hljs\">name</code> key. The linker will then use its normal library\nresolution logic to find that import library. Alternatively, specifying\n<code class=\"hljs\">kind = \"raw-dylib\"</code> instructs the compiler to generate an import library\nduring compilation and provide that to the linker instead.</p>\n<p><code class=\"hljs\">raw-dylib</code> is only supported on Windows. Using it when targeting other\nplatforms will result in a compiler error.</p>\n<h4 id=\"the-import_name_type-key\"><a class=\"header\" href=\"#the-import_name_type-key\">The <code>import_name_type</code> key</a></h4>\n<p>On x86 Windows, names of functions are \"decorated\" (i.e., have a specific prefix\nand/or suffix added) to indicate their calling convention. For example, a\n<code class=\"hljs\">stdcall</code> calling convention function with the name <code class=\"hljs\">fn1</code> that has no arguments\nwould be decorated as <code class=\"hljs\">_fn1@0</code>. However, the <a href=\"https://learn.microsoft.com/windows/win32/debug/pe-format#import-name-type\">PE Format</a> does also permit names\nto have no prefix or be undecorated. Additionally, the MSVC and GNU toolchains\nuse different decorations for the same calling conventions which means, by\ndefault, some Win32 functions cannot be called using the <code class=\"hljs\">raw-dylib</code> link kind\nvia the GNU toolchain.</p>\n<p>To allow for these differences, when using the <code class=\"hljs\">raw-dylib</code> link kind you may\nalso specify the <code class=\"hljs\">import_name_type</code> key with one of the following values to\nchange how functions are named in the generated import library:</p>\n<ul>\n<li><code class=\"hljs\">decorated</code>: The function name will be fully-decorated using the MSVC\ntoolchain format.</li>\n<li><code class=\"hljs\">noprefix</code>: The function name will be decorated using the MSVC toolchain\nformat, but skipping the leading <code class=\"hljs\">?</code>, <code class=\"hljs\">@</code>, or optionally <code class=\"hljs\">_</code>.</li>\n<li><code class=\"hljs\">undecorated</code>: The function name will not be decorated.</li>\n</ul>\n<p>If the <code class=\"hljs\">import_name_type</code> key is not specified, then the function name will be\nfully-decorated using the target toolchain's format.</p>\n<p>Variables are never decorated and so the <code class=\"hljs\">import_name_type</code> key has no effect on\nhow they are named in the generated import library.</p>\n<p>The <code class=\"hljs\">import_name_type</code> key is only supported on x86 Windows. Using it when\ntargeting other platforms will result in a compiler error.</p>\n<h3 id=\"the-link_name-attribute\"><a class=\"header\" href=\"#the-link_name-attribute\">The <code>link_name</code> attribute</a></h3>\n<p>The <em><code class=\"hljs\">link_name</code> attribute</em> may be specified on declarations inside an <code class=\"hljs\">extern</code>\nblock to indicate the symbol to import for the given function or static. It\nuses the <a href=\"../attributes.html#meta-item-attribute-syntax\"><em>MetaNameValueStr</em></a> syntax to specify the name of the symbol.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">extern</span> {\n    <span class=\"hljs-meta\">#[link_name = <span class=\"hljs-meta-string\">\"actual_symbol_name\"</span>]</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">name_in_rust</span></span>();\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Using this attribute with the <code class=\"hljs\">link_ordinal</code> attribute will result in a\ncompiler error.</p>\n<h3 id=\"the-link_ordinal-attribute\"><a class=\"header\" href=\"#the-link_ordinal-attribute\">The <code>link_ordinal</code> attribute</a></h3>\n<p>The <em><code class=\"hljs\">link_ordinal</code> attribute</em> can be applied on declarations inside an <code class=\"hljs\">extern</code>\nblock to indicate the numeric ordinal to use when generating the import library\nto link against. An ordinal is a unique number per symbol exported by a dynamic\nlibrary on Windows and can be used when the library is being loaded to find\nthat symbol rather than having to look it up by name.</p>\n<div class=\"warning\">\n<p>Warning: <code class=\"hljs\">link_ordinal</code> should only be used in cases where the ordinal of the\nsymbol is known to be stable: if the ordinal of a symbol is not explicitly set\nwhen its containing binary is built then one will be automatically assigned to\nit, and that assigned ordinal may change between builds of the binary.</p>\n</div>\n<!-- ignore: Only works on x86 Windows -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-meta\">#[link(name = <span class=\"hljs-meta-string\">\"exporter\"</span>, kind = <span class=\"hljs-meta-string\">\"raw-dylib\"</span>)]</span>\n<span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">\"stdcall\"</span> {\n    <span class=\"hljs-meta\">#[link_ordinal(15)]</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">imported_function_stdcall</span></span>(i: <span class=\"hljs-built_in\">i32</span>);\n}</code></pre>\n<p>This attribute is only used with the <code class=\"hljs\">raw-dylib</code> linking kind.\nUsing any other kind will result in a compiler error.</p>\n<p>Using this attribute with the <code class=\"hljs\">link_name</code> attribute will result in a\ncompiler error.</p>\n<h3 id=\"attributes-on-function-parameters\"><a class=\"header\" href=\"#attributes-on-function-parameters\">Attributes on function parameters</a></h3>\n<p>Attributes on extern function parameters follow the same rules and\nrestrictions as <a href=\"functions.html#attributes-on-function-parameters\">regular function parameters</a>.</p>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"../items/implementations.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"../items/generics.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"../items/implementations.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"../items/generics.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"../elasticlunr.min.js\"></script>\n        <script src=\"../mark.min.js\"></script>\n        <script src=\"../searcher.js\"></script>\n\n        <script src=\"../clipboard.min.js\"></script>\n        <script src=\"../highlight.js\"></script>\n        <script src=\"../book.js\"></script>\n\n        <!-- Custom JS scripts -->\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:12:55.429Z"
}