{
	"title": "Tokens - The Rust Reference",
	"url": "https://doc.rust-lang.org/stable/reference/tokens.html",
	"markdown": "# Tokens - The Rust Reference\n\nTokens are primitive productions in the grammar defined by regular (non-recursive) languages. Rust source input can be broken down into the following kinds of tokens:\n\n-   [Keywords](keywords.html)\n-   [Identifiers](identifiers.html)\n-   [Literals](#literals)\n-   [Lifetimes](#lifetimes-and-loop-labels)\n-   [Punctuation](#punctuation)\n-   [Delimiters](#delimiters)\n\nWithin this documentation's grammar, \"simple\" tokens are given in [string table production](about:blank/notation.html#string-table-productions) form, and appear in `monospace` font.\n\n## [Literals](#literals)\n\nLiterals are tokens used in [literal expressions](expressions/literal-expr.html).\n\n### [Examples](#examples)\n\n#### [Characters and strings](#characters-and-strings)\n\n|  | Example | `#` sets[1](#nsets) | Characters | Escapes |\n| --- | --- | --- | --- | --- |\n| [Character](#character-literals) | `'H'` | 0 | All Unicode | [Quote](#quote-escapes) & [ASCII](#ascii-escapes) & [Unicode](#unicode-escapes) |\n| [String](#string-literals) | `\"hello\"` | 0 | All Unicode | [Quote](#quote-escapes) & [ASCII](#ascii-escapes) & [Unicode](#unicode-escapes) |\n| [Raw string](#raw-string-literals) | `r#\"hello\"#` | <256 | All Unicode | `N/A` |\n| [Byte](#byte-literals) | `b'H'` | 0 | All ASCII | [Quote](#quote-escapes) & [Byte](#byte-escapes) |\n| [Byte string](#byte-string-literals) | `b\"hello\"` | 0 | All ASCII | [Quote](#quote-escapes) & [Byte](#byte-escapes) |\n| [Raw byte string](#raw-byte-string-literals) | `br#\"hello\"#` | <256 | All ASCII | `N/A` |\n| [C string](#c-string-literals) | `c\"hello\"` | 0 | All Unicode | [Quote](#quote-escapes) & [Byte](#byte-escapes) & [Unicode](#unicode-escapes) |\n| [Raw C string](#raw-c-string-literals) | `cr#\"hello\"#` | <256 | All Unicode | `N/A` |\n\n> **Note**: Character and string literal tokens never include the sequence of `U+000D` (CR) immediately followed by `U+000A` (LF): this pair would have been previously transformed into a single `U+000A` (LF).\n\n#### [ASCII escapes](#ascii-escapes)\n\n|  | Name |\n| --- | --- |\n| `\\x41` | 7-bit character code (exactly 2 digits, up to 0x7F) |\n| `\\n` | Newline |\n| `\\r` | Carriage return |\n| `\\t` | Tab |\n| `\\\\` | Backslash |\n| `\\0` | Null |\n\n#### [Byte escapes](#byte-escapes)\n\n|  | Name |\n| --- | --- |\n| `\\x7F` | 8-bit character code (exactly 2 digits) |\n| `\\n` | Newline |\n| `\\r` | Carriage return |\n| `\\t` | Tab |\n| `\\\\` | Backslash |\n| `\\0` | Null |\n\n#### [Unicode escapes](#unicode-escapes)\n\n|  | Name |\n| --- | --- |\n| `\\u{7FFF}` | 24-bit Unicode character code (up to 6 digits) |\n\n#### [Quote escapes](#quote-escapes)\n\n|  | Name |\n| --- | --- |\n| `\\'` | Single quote |\n| `\\\"` | Double quote |\n\n#### [Numbers](#numbers)\n\n| [Number literals](#number-literals)[2](#nl) | Example | Exponentiation |\n| --- | --- | --- |\n| Decimal integer | `98_222` | `N/A` |\n| Hex integer | `0xff` | `N/A` |\n| Octal integer | `0o77` | `N/A` |\n| Binary integer | `0b1111_0000` | `N/A` |\n| Floating-point | `123.0E+77` | `Optional` |\n\n#### [Suffixes](#suffixes)\n\nA suffix is a sequence of characters following the primary part of a literal (without intervening whitespace), of the same form as a non-raw identifier or keyword.\n\n> **Lexer**  \n> SUFFIX : IDENTIFIER\\_OR\\_KEYWORD  \n> SUFFIX\\_NO\\_E : SUFFIX _not beginning with `e` or `E`_\n\nAny kind of literal (string, integer, etc) with any suffix is valid as a token.\n\nA literal token with any suffix can be passed to a macro without producing an error. The macro itself will decide how to interpret such a token and whether to produce an error or not. In particular, the `literal` fragment specifier for by-example macros matches literal tokens with arbitrary suffixes.\n\n```rust\n#![allow(unused)]\nfn main() {\nmacro_rules! blackhole { ($tt:tt) => () }\nmacro_rules! blackhole_lit { ($l:literal) => () }\n\nblackhole!(\"string\"suffix); // OK\nblackhole_lit!(1suffix); // OK\n}\n```\n\nHowever, suffixes on literal tokens which are interpreted as literal expressions or patterns are restricted. Any suffixes are rejected on non-numeric literal tokens, and numeric literal tokens are accepted only with suffixes from the list below.\n\n| Integer | Floating-point |\n| --- | --- |\n| `u8`, `i8`, `u16`, `i16`, `u32`, `i32`, `u64`, `i64`, `u128`, `i128`, `usize`, `isize` | `f32`, `f64` |\n\n### [Character and string literals](#character-and-string-literals)\n\n#### [Character literals](#character-literals)\n\n> **Lexer**  \n> CHAR\\_LITERAL :  \n>    `'` ( ~\\[`'` `\\` \\\\n \\\\r \\\\t\\] | QUOTE\\_ESCAPE | ASCII\\_ESCAPE | UNICODE\\_ESCAPE ) `'` SUFFIX?\n> \n> QUOTE\\_ESCAPE :  \n>    `\\'` | `\\\"`\n> \n> ASCII\\_ESCAPE :  \n>       `\\x` OCT\\_DIGIT HEX\\_DIGIT  \n>    | `\\n` | `\\r` | `\\t` | `\\\\` | `\\0`\n> \n> UNICODE\\_ESCAPE :  \n>    `\\u{` ( HEX\\_DIGIT `_`\\* )1..6 `}`\n\nA _character literal_ is a single Unicode character enclosed within two `U+0027` (single-quote) characters, with the exception of `U+0027` itself, which must be _escaped_ by a preceding `U+005C` character (`\\`).\n\n#### [String literals](#string-literals)\n\n> **Lexer**  \n> STRING\\_LITERAL :  \n>    `\"` (  \n>       ~\\[`\"` `\\` _IsolatedCR_\\]  \n>       | QUOTE\\_ESCAPE  \n>       | ASCII\\_ESCAPE  \n>       | UNICODE\\_ESCAPE  \n>       | STRING\\_CONTINUE  \n>    )\\* `\"` SUFFIX?\n> \n> STRING\\_CONTINUE :  \n>    `\\` _followed by_ \\\\n\n\nA _string literal_ is a sequence of any Unicode characters enclosed within two `U+0022` (double-quote) characters, with the exception of `U+0022` itself, which must be _escaped_ by a preceding `U+005C` character (`\\`).\n\nLine-breaks, represented by the character `U+000A` (LF), are allowed in string literals. When an unescaped `U+005C` character (`\\`) occurs immediately before a line break, the line break does not appear in the string represented by the token. See [String continuation escapes](about:blank/expressions/literal-expr.html#string-continuation-escapes) for details. The character `U+000D` (CR) may not appear in a string literal other than as part of such a string continuation escape.\n\n#### [Character escapes](#character-escapes)\n\nSome additional _escapes_ are available in either character or non-raw string literals. An escape starts with a `U+005C` (`\\`) and continues with one of the following forms:\n\n-   A _7-bit code point escape_ starts with `U+0078` (`x`) and is followed by exactly two _hex digits_ with value up to `0x7F`. It denotes the ASCII character with value equal to the provided hex value. Higher values are not permitted because it is ambiguous whether they mean Unicode code points or byte values.\n-   A _24-bit code point escape_ starts with `U+0075` (`u`) and is followed by up to six _hex digits_ surrounded by braces `U+007B` (`{`) and `U+007D` (`}`). It denotes the Unicode code point equal to the provided hex value.\n-   A _whitespace escape_ is one of the characters `U+006E` (`n`), `U+0072` (`r`), or `U+0074` (`t`), denoting the Unicode values `U+000A` (LF), `U+000D` (CR) or `U+0009` (HT) respectively.\n-   The _null escape_ is the character `U+0030` (`0`) and denotes the Unicode value `U+0000` (NUL).\n-   The _backslash escape_ is the character `U+005C` (`\\`) which must be escaped in order to denote itself.\n\n#### [Raw string literals](#raw-string-literals)\n\n> **Lexer**  \n> RAW\\_STRING\\_LITERAL :  \n>    `r` RAW\\_STRING\\_CONTENT SUFFIX?\n> \n> RAW\\_STRING\\_CONTENT :  \n>       `\"` ( ~ _IsolatedCR_ )\\* (non-greedy) `\"`  \n>    | `#` RAW\\_STRING\\_CONTENT `#`\n\nRaw string literals do not process any escapes. They start with the character `U+0072` (`r`), followed by fewer than 256 of the character `U+0023` (`#`) and a `U+0022` (double-quote) character.\n\nThe _raw string body_ can contain any sequence of Unicode characters other than `U+000D` (CR). It is terminated only by another `U+0022` (double-quote) character, followed by the same number of `U+0023` (`#`) characters that preceded the opening `U+0022` (double-quote) character.\n\nAll Unicode characters contained in the raw string body represent themselves, the characters `U+0022` (double-quote) (except when followed by at least as many `U+0023` (`#`) characters as were used to start the raw string literal) or `U+005C` (`\\`) do not have any special meaning.\n\nExamples for string literals:\n\n```rust\n#![allow(unused)]\nfn main() {\n\"foo\"; r\"foo\";                     // foo\n\"\\\"foo\\\"\"; r#\"\"foo\"\"#;             // \"foo\"\n\n\"foo #\\\"# bar\";\nr##\"foo #\"# bar\"##;                // foo #\"# bar\n\n\"\\x52\"; \"R\"; r\"R\";                 // R\n\"\\\\x52\"; r\"\\x52\";                  // \\x52\n}\n```\n\n### [Byte and byte string literals](#byte-and-byte-string-literals)\n\n#### [Byte literals](#byte-literals)\n\n> **Lexer**  \n> BYTE\\_LITERAL :  \n>    `b'` ( ASCII\\_FOR\\_CHAR | BYTE\\_ESCAPE ) `'` SUFFIX?\n> \n> ASCII\\_FOR\\_CHAR :  \n>    _any ASCII (i.e. 0x00 to 0x7F), except_ `'`, `\\`, \\\\n, \\\\r or \\\\t\n> \n> BYTE\\_ESCAPE :  \n>       `\\x` HEX\\_DIGIT HEX\\_DIGIT  \n>    | `\\n` | `\\r` | `\\t` | `\\\\` | `\\0` | `\\'` | `\\\"`\n\nA _byte literal_ is a single ASCII character (in the `U+0000` to `U+007F` range) or a single _escape_ preceded by the characters `U+0062` (`b`) and `U+0027` (single-quote), and followed by the character `U+0027`. If the character `U+0027` is present within the literal, it must be _escaped_ by a preceding `U+005C` (`\\`) character. It is equivalent to a `u8` unsigned 8-bit integer _number literal_.\n\n#### [Byte string literals](#byte-string-literals)\n\n> **Lexer**  \n> BYTE\\_STRING\\_LITERAL :  \n>    `b\"` ( ASCII\\_FOR\\_STRING | BYTE\\_ESCAPE | STRING\\_CONTINUE )\\* `\"` SUFFIX?\n> \n> ASCII\\_FOR\\_STRING :  \n>    _any ASCII (i.e 0x00 to 0x7F), except_ `\"`, `\\` _and IsolatedCR_\n\nA non-raw _byte string literal_ is a sequence of ASCII characters and _escapes_, preceded by the characters `U+0062` (`b`) and `U+0022` (double-quote), and followed by the character `U+0022`. If the character `U+0022` is present within the literal, it must be _escaped_ by a preceding `U+005C` (`\\`) character. Alternatively, a byte string literal can be a _raw byte string literal_, defined below.\n\nLine-breaks, represented by the character `U+000A` (LF), are allowed in byte string literals. When an unescaped `U+005C` character (`\\`) occurs immediately before a line break, the line break does not appear in the string represented by the token. See [String continuation escapes](about:blank/expressions/literal-expr.html#string-continuation-escapes) for details. The character `U+000D` (CR) may not appear in a byte string literal other than as part of such a string continuation escape.\n\nSome additional _escapes_ are available in either byte or non-raw byte string literals. An escape starts with a `U+005C` (`\\`) and continues with one of the following forms:\n\n-   A _byte escape_ escape starts with `U+0078` (`x`) and is followed by exactly two _hex digits_. It denotes the byte equal to the provided hex value.\n-   A _whitespace escape_ is one of the characters `U+006E` (`n`), `U+0072` (`r`), or `U+0074` (`t`), denoting the bytes values `0x0A` (ASCII LF), `0x0D` (ASCII CR) or `0x09` (ASCII HT) respectively.\n-   The _null escape_ is the character `U+0030` (`0`) and denotes the byte value `0x00` (ASCII NUL).\n-   The _backslash escape_ is the character `U+005C` (`\\`) which must be escaped in order to denote its ASCII encoding `0x5C`.\n\n#### [Raw byte string literals](#raw-byte-string-literals)\n\n> **Lexer**  \n> RAW\\_BYTE\\_STRING\\_LITERAL :  \n>    `br` RAW\\_BYTE\\_STRING\\_CONTENT SUFFIX?\n> \n> RAW\\_BYTE\\_STRING\\_CONTENT :  \n>       `\"` ASCII\\_FOR\\_RAW\\* (non-greedy) `\"`  \n>    | `#` RAW\\_BYTE\\_STRING\\_CONTENT `#`\n> \n> ASCII\\_FOR\\_RAW :  \n>    _any ASCII (i.e. 0x00 to 0x7F) except IsolatedCR_\n\nRaw byte string literals do not process any escapes. They start with the character `U+0062` (`b`), followed by `U+0072` (`r`), followed by fewer than 256 of the character `U+0023` (`#`), and a `U+0022` (double-quote) character.\n\nThe _raw string body_ can contain any sequence of ASCII characters other than `U+000D` (CR). It is terminated only by another `U+0022` (double-quote) character, followed by the same number of `U+0023` (`#`) characters that preceded the opening `U+0022` (double-quote) character. A raw byte string literal can not contain any non-ASCII byte.\n\nAll characters contained in the raw string body represent their ASCII encoding, the characters `U+0022` (double-quote) (except when followed by at least as many `U+0023` (`#`) characters as were used to start the raw string literal) or `U+005C` (`\\`) do not have any special meaning.\n\nExamples for byte string literals:\n\n```rust\n#![allow(unused)]\nfn main() {\nb\"foo\"; br\"foo\";                     // foo\nb\"\\\"foo\\\"\"; br#\"\"foo\"\"#;             // \"foo\"\n\nb\"foo #\\\"# bar\";\nbr##\"foo #\"# bar\"##;                 // foo #\"# bar\n\nb\"\\x52\"; b\"R\"; br\"R\";                // R\nb\"\\\\x52\"; br\"\\x52\";                  // \\x52\n}\n```\n\n### [C string and raw C string literals](#c-string-and-raw-c-string-literals)\n\n#### [C string literals](#c-string-literals)\n\n> **Lexer**  \n> C\\_STRING\\_LITERAL :  \n>    `c\"` (  \n>       ~\\[`\"` `\\` _IsolatedCR_ _NUL_\\]  \n>       | BYTE\\_ESCAPE _except `\\0` or `\\x00`_  \n>       | UNICODE\\_ESCAPE _except `\\u{0}`, `\\u{00}`, …, `\\u{000000}`_  \n>       | STRING\\_CONTINUE  \n>    )\\* `\"` SUFFIX?\n\nA _C string literal_ is a sequence of Unicode characters and _escapes_, preceded by the characters `U+0063` (`c`) and `U+0022` (double-quote), and followed by the character `U+0022`. If the character `U+0022` is present within the literal, it must be _escaped_ by a preceding `U+005C` (`\\`) character. Alternatively, a C string literal can be a _raw C string literal_, defined below.\n\nC strings are implicitly terminated by byte `0x00`, so the C string literal `c\"\"` is equivalent to manually constructing a `&CStr` from the byte string literal `b\"\\x00\"`. Other than the implicit terminator, byte `0x00` is not permitted within a C string.\n\nLine-breaks, represented by the character `U+000A` (LF), are allowed in C string literals. When an unescaped `U+005C` character (`\\`) occurs immediately before a line break, the line break does not appear in the string represented by the token. See [String continuation escapes](about:blank/expressions/literal-expr.html#string-continuation-escapes) for details. The character `U+000D` (CR) may not appear in a C string literal other than as part of such a string continuation escape.\n\nSome additional _escapes_ are available in non-raw C string literals. An escape starts with a `U+005C` (`\\`) and continues with one of the following forms:\n\n-   A _byte escape_ escape starts with `U+0078` (`x`) and is followed by exactly two _hex digits_. It denotes the byte equal to the provided hex value.\n-   A _24-bit code point escape_ starts with `U+0075` (`u`) and is followed by up to six _hex digits_ surrounded by braces `U+007B` (`{`) and `U+007D` (`}`). It denotes the Unicode code point equal to the provided hex value, encoded as UTF-8.\n-   A _whitespace escape_ is one of the characters `U+006E` (`n`), `U+0072` (`r`), or `U+0074` (`t`), denoting the bytes values `0x0A` (ASCII LF), `0x0D` (ASCII CR) or `0x09` (ASCII HT) respectively.\n-   The _backslash escape_ is the character `U+005C` (`\\`) which must be escaped in order to denote its ASCII encoding `0x5C`.\n\nA C string represents bytes with no defined encoding, but a C string literal may contain Unicode characters above `U+007F`. Such characters will be replaced with the bytes of that character's UTF-8 representation.\n\nThe following C string literals are equivalent:\n\n```rust\n#![allow(unused)]\nfn main() {\nc\"æ\";        // LATIN SMALL LETTER AE (U+00E6)\nc\"\\u{00E6}\";\nc\"\\xC3\\xA6\";\n}\n```\n\n> **Edition Differences**: C string literals are accepted in the 2021 edition or later. In earlier additions the token `c\"\"` is lexed as `c \"\"`.\n\n#### [Raw C string literals](#raw-c-string-literals)\n\n> **Lexer**  \n> RAW\\_C\\_STRING\\_LITERAL :  \n>    `cr` RAW\\_C\\_STRING\\_CONTENT SUFFIX?\n> \n> RAW\\_C\\_STRING\\_CONTENT :  \n>       `\"` ( ~ _IsolatedCR_ _NUL_ )\\* (non-greedy) `\"`  \n>    | `#` RAW\\_C\\_STRING\\_CONTENT `#`\n\nRaw C string literals do not process any escapes. They start with the character `U+0063` (`c`), followed by `U+0072` (`r`), followed by fewer than 256 of the character `U+0023` (`#`), and a `U+0022` (double-quote) character.\n\nThe _raw C string body_ can contain any sequence of Unicode characters other than `U+0000` (NUL) and `U+000D` (CR). It is terminated only by another `U+0022` (double-quote) character, followed by the same number of `U+0023` (`#`) characters that preceded the opening `U+0022` (double-quote) character.\n\nAll characters contained in the raw C string body represent themselves in UTF-8 encoding. The characters `U+0022` (double-quote) (except when followed by at least as many `U+0023` (`#`) characters as were used to start the raw C string literal) or `U+005C` (`\\`) do not have any special meaning.\n\n> **Edition Differences**: Raw C string literals are accepted in the 2021 edition or later. In earlier additions the token `cr\"\"` is lexed as `cr \"\"`, and `cr#\"\"#` is lexed as `cr #\"\"#` (which is non-grammatical).\n\n#### [Examples for C string and raw C string literals](#examples-for-c-string-and-raw-c-string-literals)\n\n```rust\n#![allow(unused)]\nfn main() {\nc\"foo\"; cr\"foo\";                     // foo\nc\"\\\"foo\\\"\"; cr#\"\"foo\"\"#;             // \"foo\"\n\nc\"foo #\\\"# bar\";\ncr##\"foo #\"# bar\"##;                 // foo #\"# bar\n\nc\"\\x52\"; c\"R\"; cr\"R\";                // R\nc\"\\\\x52\"; cr\"\\x52\";                  // \\x52\n}\n```\n\n### [Number literals](#number-literals)\n\nA _number literal_ is either an _integer literal_ or a _floating-point literal_. The grammar for recognizing the two kinds of literals is mixed.\n\n#### [Integer literals](#integer-literals)\n\n> **Lexer**  \n> INTEGER\\_LITERAL :  \n>    ( DEC\\_LITERAL | BIN\\_LITERAL | OCT\\_LITERAL | HEX\\_LITERAL ) SUFFIX\\_NO\\_E?\n> \n> DEC\\_LITERAL :  \n>    DEC\\_DIGIT (DEC\\_DIGIT|`_`)\\*\n> \n> BIN\\_LITERAL :  \n>    `0b` (BIN\\_DIGIT|`_`)\\* BIN\\_DIGIT (BIN\\_DIGIT|`_`)\\*\n> \n> OCT\\_LITERAL :  \n>    `0o` (OCT\\_DIGIT|`_`)\\* OCT\\_DIGIT (OCT\\_DIGIT|`_`)\\*\n> \n> HEX\\_LITERAL :  \n>    `0x` (HEX\\_DIGIT|`_`)\\* HEX\\_DIGIT (HEX\\_DIGIT|`_`)\\*\n> \n> BIN\\_DIGIT : \\[`0`\\-`1`\\]\n> \n> OCT\\_DIGIT : \\[`0`\\-`7`\\]\n> \n> DEC\\_DIGIT : \\[`0`\\-`9`\\]\n> \n> HEX\\_DIGIT : \\[`0`\\-`9` `a`\\-`f` `A`\\-`F`\\]\n\nAn _integer literal_ has one of four forms:\n\n-   A _decimal literal_ starts with a _decimal digit_ and continues with any mixture of _decimal digits_ and _underscores_.\n-   A _hex literal_ starts with the character sequence `U+0030` `U+0078` (`0x`) and continues as any mixture (with at least one digit) of hex digits and underscores.\n-   An _octal literal_ starts with the character sequence `U+0030` `U+006F` (`0o`) and continues as any mixture (with at least one digit) of octal digits and underscores.\n-   A _binary literal_ starts with the character sequence `U+0030` `U+0062` (`0b`) and continues as any mixture (with at least one digit) of binary digits and underscores.\n\nLike any literal, an integer literal may be followed (immediately, without any spaces) by a suffix as described above. The suffix may not begin with `e` or `E`, as that would be interpreted as the exponent of a floating-point literal. See [Integer literal expressions](about:blank/expressions/literal-expr.html#integer-literal-expressions) for the effect of these suffixes.\n\nExamples of integer literals which are accepted as literal expressions:\n\n```rust\n#![allow(unused)]\nfn main() {\n#![allow(overflowing_literals)]\n123;\n123i32;\n123u32;\n123_u32;\n\n0xff;\n0xff_u8;\n0x01_f32; // integer 7986, not floating-point 1.0\n0x01_e3;  // integer 483, not floating-point 1000.0\n\n0o70;\n0o70_i16;\n\n0b1111_1111_1001_0000;\n0b1111_1111_1001_0000i64;\n0b________1;\n\n0usize;\n\n// These are too big for their type, but are accepted as literal expressions.\n128_i8;\n256_u8;\n\n// This is an integer literal, accepted as a floating-point literal expression.\n5f32;\n}\n```\n\nNote that `-1i8`, for example, is analyzed as two tokens: `-` followed by `1i8`.\n\nExamples of integer literals which are not accepted as literal expressions:\n\n```rust\n#![allow(unused)]\nfn main() {\n#[cfg(FALSE)] {\n0invalidSuffix;\n123AFB43;\n0b010a;\n0xAB_CD_EF_GH;\n0b1111_f32;\n}\n}\n```\n\n#### [Tuple index](#tuple-index)\n\n> **Lexer**  \n> TUPLE\\_INDEX:  \n>    INTEGER\\_LITERAL\n\nA tuple index is used to refer to the fields of [tuples](types/tuple.html), [tuple structs](items/structs.html), and [tuple variants](items/enumerations.html).\n\nTuple indices are compared with the literal token directly. Tuple indices start with `0` and each successive index increments the value by `1` as a decimal value. Thus, only decimal values will match, and the value must not have any extra `0` prefix characters.\n\n```rust\n#![allow(unused)]\nfn main() {\nlet example = (\"dog\", \"cat\", \"horse\");\nlet dog = example.0;\nlet cat = example.1;\n// The following examples are invalid.\nlet cat = example.01;  // ERROR no field named `01`\nlet horse = example.0b10;  // ERROR no field named `0b10`\n}\n```\n\n> **Note**: Tuple indices may include certain suffixes, but this is not intended to be valid, and may be removed in a future version. See [https://github.com/rust-lang/rust/issues/60210](https://github.com/rust-lang/rust/issues/60210) for more information.\n\n#### [Floating-point literals](#floating-point-literals)\n\n> **Lexer**  \n> FLOAT\\_LITERAL :  \n>       DEC\\_LITERAL `.` _(not immediately followed by `.`, `_` or an XID\\_Start character)_  \n>    | DEC\\_LITERAL `.` DEC\\_LITERAL SUFFIX\\_NO\\_E?  \n>    | DEC\\_LITERAL (`.` DEC\\_LITERAL)? FLOAT\\_EXPONENT SUFFIX?\n> \n> FLOAT\\_EXPONENT :  \n>    (`e`|`E`) (`+`|`-`)? (DEC\\_DIGIT|`_`)\\* DEC\\_DIGIT (DEC\\_DIGIT|`_`)\\*\n\nA _floating-point literal_ has one of two forms:\n\n-   A _decimal literal_ followed by a period character `U+002E` (`.`). This is optionally followed by another decimal literal, with an optional _exponent_.\n-   A single _decimal literal_ followed by an _exponent_.\n\nLike integer literals, a floating-point literal may be followed by a suffix, so long as the pre-suffix part does not end with `U+002E` (`.`). The suffix may not begin with `e` or `E` if the literal does not include an exponent. See [Floating-point literal expressions](about:blank/expressions/literal-expr.html#floating-point-literal-expressions) for the effect of these suffixes.\n\nExamples of floating-point literals which are accepted as literal expressions:\n\n```rust\n#![allow(unused)]\nfn main() {\n123.0f64;\n0.1f64;\n0.1f32;\n12E+99_f64;\nlet x: f64 = 2.;\n}\n```\n\nThis last example is different because it is not possible to use the suffix syntax with a floating point literal ending in a period. `2.f64` would attempt to call a method named `f64` on `2`.\n\nNote that `-1.0`, for example, is analyzed as two tokens: `-` followed by `1.0`.\n\nExamples of floating-point literals which are not accepted as literal expressions:\n\n```rust\n#![allow(unused)]\nfn main() {\n#[cfg(FALSE)] {\n2.0f80;\n2e5f80;\n2e5e6;\n2.0e5e6;\n1.3e10u64;\n}\n}\n```\n\n#### [Reserved forms similar to number literals](#reserved-forms-similar-to-number-literals)\n\n> **Lexer**  \n> RESERVED\\_NUMBER :  \n>       BIN\\_LITERAL \\[`2`\\-`9`​\\]  \n>    | OCT\\_LITERAL \\[`8`\\-`9`​\\]  \n>    | ( BIN\\_LITERAL | OCT\\_LITERAL | HEX\\_LITERAL ) `.`  \n>          _(not immediately followed by `.`, `_` or an XID\\_Start character)_  \n>    | ( BIN\\_LITERAL | OCT\\_LITERAL ) (`e`|`E`)  \n>    | `0b` `_`\\* _end of input or not BIN\\_DIGIT_  \n>    | `0o` `_`\\* _end of input or not OCT\\_DIGIT_  \n>    | `0x` `_`\\* _end of input or not HEX\\_DIGIT_  \n>    | DEC\\_LITERAL ( . DEC\\_LITERAL)? (`e`|`E`) (`+`|`-`)? _end of input or not DEC\\_DIGIT_\n\nThe following lexical forms similar to number literals are _reserved forms_. Due to the possible ambiguity these raise, they are rejected by the tokenizer instead of being interpreted as separate tokens.\n\n-   An unsuffixed binary or octal literal followed, without intervening whitespace, by a decimal digit out of the range for its radix.\n    \n-   An unsuffixed binary, octal, or hexadecimal literal followed, without intervening whitespace, by a period character (with the same restrictions on what follows the period as for floating-point literals).\n    \n-   An unsuffixed binary or octal literal followed, without intervening whitespace, by the character `e` or `E`.\n    \n-   Input which begins with one of the radix prefixes but is not a valid binary, octal, or hexadecimal literal (because it contains no digits).\n    \n-   Input which has the form of a floating-point literal with no digits in the exponent.\n    \n\nExamples of reserved forms:\n\n```rust\n#![allow(unused)]\nfn main() {\n0b0102;  // this is not `0b010` followed by `2`\n0o1279;  // this is not `0o127` followed by `9`\n0x80.0;  // this is not `0x80` followed by `.` and `0`\n0b101e;  // this is not a suffixed literal, or `0b101` followed by `e`\n0b;      // this is not an integer literal, or `0` followed by `b`\n0b_;     // this is not an integer literal, or `0` followed by `b_`\n2e;      // this is not a floating-point literal, or `2` followed by `e`\n2.0e;    // this is not a floating-point literal, or `2.0` followed by `e`\n2em;     // this is not a suffixed literal, or `2` followed by `em`\n2.0em;   // this is not a suffixed literal, or `2.0` followed by `em`\n}\n```\n\n## [Lifetimes and loop labels](#lifetimes-and-loop-labels)\n\n> **Lexer**  \n> LIFETIME\\_TOKEN :  \n>       `'` [IDENTIFIER\\_OR\\_KEYWORD](identifiers.html) _(not immediately followed by `'`)_  \n>    | `'_` _(not immediately followed by `'`)_\n> \n> LIFETIME\\_OR\\_LABEL :  \n>       `'` [NON\\_KEYWORD\\_IDENTIFIER](identifiers.html) _(not immediately followed by `'`)_\n\nLifetime parameters and [loop labels](expressions/loop-expr.html) use LIFETIME\\_OR\\_LABEL tokens. Any LIFETIME\\_TOKEN will be accepted by the lexer, and for example, can be used in macros.\n\n## [Punctuation](#punctuation)\n\nPunctuation symbol tokens are listed here for completeness. Their individual usages and meanings are defined in the linked pages.\n\n| Symbol | Name | Usage |\n| --- | --- | --- |\n| `+` | Plus | [Addition](about:blank/expressions/operator-expr.html#arithmetic-and-logical-binary-operators), [Trait Bounds](trait-bounds.html), [Macro Kleene Matcher](macros-by-example.html) |\n| `-` | Minus | [Subtraction](about:blank/expressions/operator-expr.html#arithmetic-and-logical-binary-operators), [Negation](about:blank/expressions/operator-expr.html#negation-operators) |\n| `*` | Star | [Multiplication](about:blank/expressions/operator-expr.html#arithmetic-and-logical-binary-operators), [Dereference](about:blank/expressions/operator-expr.html#the-dereference-operator), [Raw Pointers](about:blank/types/pointer.html#raw-pointers-const-and-mut), [Macro Kleene Matcher](macros-by-example.html), [Use wildcards](items/use-declarations.html) |\n| `/` | Slash | [Division](about:blank/expressions/operator-expr.html#arithmetic-and-logical-binary-operators) |\n| `%` | Percent | [Remainder](about:blank/expressions/operator-expr.html#arithmetic-and-logical-binary-operators) |\n| `^` | Caret | [Bitwise and Logical XOR](about:blank/expressions/operator-expr.html#arithmetic-and-logical-binary-operators) |\n| `!` | Not | [Bitwise and Logical NOT](about:blank/expressions/operator-expr.html#negation-operators), [Macro Calls](macros-by-example.html), [Inner Attributes](attributes.html), [Never Type](types/never.html), [Negative impls](items/implementations.html) |\n| `&` | And | [Bitwise and Logical AND](about:blank/expressions/operator-expr.html#arithmetic-and-logical-binary-operators), [Borrow](about:blank/expressions/operator-expr.html#borrow-operators), [References](types/pointer.html), [Reference patterns](about:blank/patterns.html#reference-patterns) |\n| `|` | Or | [Bitwise and Logical OR](about:blank/expressions/operator-expr.html#arithmetic-and-logical-binary-operators), [Closures](expressions/closure-expr.html), Patterns in [match](expressions/match-expr.html), [if let](about:blank/expressions/if-expr.html#if-let-expressions), and [while let](about:blank/expressions/loop-expr.html#predicate-pattern-loops) |\n| `&&` | AndAnd | [Lazy AND](about:blank/expressions/operator-expr.html#lazy-boolean-operators), [Borrow](about:blank/expressions/operator-expr.html#borrow-operators), [References](types/pointer.html), [Reference patterns](about:blank/patterns.html#reference-patterns) |\n| `||` | OrOr | [Lazy OR](about:blank/expressions/operator-expr.html#lazy-boolean-operators), [Closures](expressions/closure-expr.html) |\n| `<<` | Shl | [Shift Left](about:blank/expressions/operator-expr.html#arithmetic-and-logical-binary-operators), [Nested Generics](items/generics.html) |\n| `>>` | Shr | [Shift Right](about:blank/expressions/operator-expr.html#arithmetic-and-logical-binary-operators), [Nested Generics](items/generics.html) |\n| `+=` | PlusEq | [Addition assignment](about:blank/expressions/operator-expr.html#compound-assignment-expressions) |\n| `-=` | MinusEq | [Subtraction assignment](about:blank/expressions/operator-expr.html#compound-assignment-expressions) |\n| `*=` | StarEq | [Multiplication assignment](about:blank/expressions/operator-expr.html#compound-assignment-expressions) |\n| `/=` | SlashEq | [Division assignment](about:blank/expressions/operator-expr.html#compound-assignment-expressions) |\n| `%=` | PercentEq | [Remainder assignment](about:blank/expressions/operator-expr.html#compound-assignment-expressions) |\n| `^=` | CaretEq | [Bitwise XOR assignment](about:blank/expressions/operator-expr.html#compound-assignment-expressions) |\n| `&=` | AndEq | [Bitwise And assignment](about:blank/expressions/operator-expr.html#compound-assignment-expressions) |\n| `|=` | OrEq | [Bitwise Or assignment](about:blank/expressions/operator-expr.html#compound-assignment-expressions) |\n| `<<=` | ShlEq | [Shift Left assignment](about:blank/expressions/operator-expr.html#compound-assignment-expressions) |\n| `>>=` | ShrEq | [Shift Right assignment](about:blank/expressions/operator-expr.html#compound-assignment-expressions), [Nested Generics](items/generics.html) |\n| `=` | Eq | [Assignment](about:blank/expressions/operator-expr.html#assignment-expressions), [Attributes](attributes.html), Various type definitions |\n| `==` | EqEq | [Equal](about:blank/expressions/operator-expr.html#comparison-operators) |\n| `!=` | Ne | [Not Equal](about:blank/expressions/operator-expr.html#comparison-operators) |\n| `>` | Gt | [Greater than](about:blank/expressions/operator-expr.html#comparison-operators), [Generics](items/generics.html), [Paths](paths.html) |\n| `<` | Lt | [Less than](about:blank/expressions/operator-expr.html#comparison-operators), [Generics](items/generics.html), [Paths](paths.html) |\n| `>=` | Ge | [Greater than or equal to](about:blank/expressions/operator-expr.html#comparison-operators), [Generics](items/generics.html) |\n| `<=` | Le | [Less than or equal to](about:blank/expressions/operator-expr.html#comparison-operators) |\n| `@` | At | [Subpattern binding](about:blank/patterns.html#identifier-patterns) |\n| `_` | Underscore | [Wildcard patterns](about:blank/patterns.html#wildcard-pattern), [Inferred types](types/inferred.html), Unnamed items in [constants](items/constant-items.html), [extern crates](items/extern-crates.html), [use declarations](items/use-declarations.html), and [destructuring assignment](expressions/underscore-expr.html) |\n| `.` | Dot | [Field access](expressions/field-expr.html), [Tuple index](about:blank/expressions/tuple-expr.html#tuple-indexing-expressions) |\n| `..` | DotDot | [Range](expressions/range-expr.html), [Struct expressions](expressions/struct-expr.html), [Patterns](patterns.html), [Range Patterns](about:blank/patterns.html#range-patterns) |\n| `...` | DotDotDot | [Variadic functions](items/external-blocks.html), [Range patterns](about:blank/patterns.html#range-patterns) |\n| `..=` | DotDotEq | [Inclusive Range](expressions/range-expr.html), [Range patterns](about:blank/patterns.html#range-patterns) |\n| `,` | Comma | Various separators |\n| `;` | Semi | Terminator for various items and statements, [Array types](types/array.html) |\n| `:` | Colon | Various separators |\n| `::` | PathSep | [Path separator](paths.html) |\n| `->` | RArrow | [Function return type](items/functions.html), [Closure return type](expressions/closure-expr.html), [Function pointer type](types/function-pointer.html) |\n| `=>` | FatArrow | [Match arms](expressions/match-expr.html), [Macros](macros-by-example.html) |\n| `<-` | LArrow | The left arrow symbol has been unused since before Rust 1.0, but it is still treated as a single token |\n| `#` | Pound | [Attributes](attributes.html) |\n| `$` | Dollar | [Macros](macros-by-example.html) |\n| `?` | Question | [Question mark operator](about:blank/expressions/operator-expr.html#the-question-mark-operator), [Questionably sized](about:blank/trait-bounds.html#sized), [Macro Kleene Matcher](macros-by-example.html) |\n| `~` | Tilde | The tilde operator has been unused since before Rust 1.0, but its token may still be used |\n\n## [Delimiters](#delimiters)\n\nBracket punctuation is used in various parts of the grammar. An open bracket must always be paired with a close bracket. Brackets and the tokens within them are referred to as \"token trees\" in [macros](macros-by-example.html). The three types of brackets are:\n\n| Bracket | Type |\n| --- | --- |\n| `{` `}` | Curly braces |\n| `[` `]` | Square brackets |\n| `(` `)` | Parentheses |\n\n## [Reserved prefixes](#reserved-prefixes)\n\n> **Lexer 2021+**  \n> RESERVED\\_TOKEN\\_DOUBLE\\_QUOTE : ( IDENTIFIER\\_OR\\_KEYWORD _Except `b` or `c` or `r` or `br` or `cr`_ | `_` ) `\"`  \n> RESERVED\\_TOKEN\\_SINGLE\\_QUOTE : ( IDENTIFIER\\_OR\\_KEYWORD _Except `b`_ | `_` ) `'`  \n> RESERVED\\_TOKEN\\_POUND : ( IDENTIFIER\\_OR\\_KEYWORD _Except `r` or `br` or `cr`_ | `_` ) `#`\n\nSome lexical forms known as _reserved prefixes_ are reserved for future use.\n\nSource input which would otherwise be lexically interpreted as a non-raw identifier (or a keyword or `_`) which is immediately followed by a `#`, `'`, or `\"` character (without intervening whitespace) is identified as a reserved prefix.\n\nNote that raw identifiers, raw string literals, and raw byte string literals may contain a `#` character but are not interpreted as containing a reserved prefix.\n\nSimilarly the `r`, `b`, `br`, `c`, and `cr` prefixes used in raw string literals, byte literals, byte string literals, raw byte string literals, C string literals, and raw C string literals are not interpreted as reserved prefixes.\n\n> **Edition Differences**: Starting with the 2021 edition, reserved prefixes are reported as an error by the lexer (in particular, they cannot be passed to macros).\n> \n> Before the 2021 edition, reserved prefixes are accepted by the lexer and interpreted as multiple tokens (for example, one token for the identifier or keyword, followed by a `#` token).\n> \n> Examples accepted in all editions:\n> \n> ```rust\n> #![allow(unused)]\n> fn main() {\n> macro_rules! lexes {($($_:tt)*) => {}}\n> lexes!{a #foo}\n> lexes!{continue 'foo}\n> lexes!{match \"...\" {}}\n> lexes!{r#let#foo}         // three tokens: r#let # foo\n> }\n> ```\n> \n> Examples accepted before the 2021 edition but rejected later:\n> \n> ```rust\n> #![allow(unused)]\n> fn main() {\n> macro_rules! lexes {($($_:tt)*) => {}}\n> lexes!{a#foo}\n> lexes!{continue'foo}\n> lexes!{match\"...\" {}}\n> }\n> ```",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>Tokens - The Rust Reference</title>\n\n\n        <!-- Custom HTML head -->\n        \n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"icon\" href=\"favicon.svg\">\n        <link rel=\"shortcut icon\" href=\"favicon.png\">\n        <link rel=\"stylesheet\" href=\"css/variables.css\">\n        <link rel=\"stylesheet\" href=\"css/general.css\">\n        <link rel=\"stylesheet\" href=\"css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"highlight.css\">\n        <link rel=\"stylesheet\" href=\"tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n        <link rel=\"stylesheet\" href=\"theme/reference.css\">\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"introduction.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"notation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> Notation</a></li><li class=\"chapter-item expanded \"><a href=\"lexical-structure.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Lexical structure</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"input-format.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.1.</strong> Input format</a></li><li class=\"chapter-item expanded \"><a href=\"keywords.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.2.</strong> Keywords</a></li><li class=\"chapter-item expanded \"><a href=\"identifiers.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.3.</strong> Identifiers</a></li><li class=\"chapter-item expanded \"><a href=\"comments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.4.</strong> Comments</a></li><li class=\"chapter-item expanded \"><a href=\"whitespace.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.5.</strong> Whitespace</a></li><li class=\"chapter-item expanded \"><a href=\"tokens.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">2.6.</strong> Tokens</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"macros.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Macros</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"macros-by-example.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> Macros By Example</a></li><li class=\"chapter-item expanded \"><a href=\"procedural-macros.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> Procedural Macros</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"crates-and-source-files.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Crates and source files</a></li><li class=\"chapter-item expanded \"><a href=\"conditional-compilation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> Conditional compilation</a></li><li class=\"chapter-item expanded \"><a href=\"items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Items</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"items/modules.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.1.</strong> Modules</a></li><li class=\"chapter-item expanded \"><a href=\"items/extern-crates.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.2.</strong> Extern crates</a></li><li class=\"chapter-item expanded \"><a href=\"items/use-declarations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.3.</strong> Use declarations</a></li><li class=\"chapter-item expanded \"><a href=\"items/functions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.4.</strong> Functions</a></li><li class=\"chapter-item expanded \"><a href=\"items/type-aliases.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.5.</strong> Type aliases</a></li><li class=\"chapter-item expanded \"><a href=\"items/structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.6.</strong> Structs</a></li><li class=\"chapter-item expanded \"><a href=\"items/enumerations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.7.</strong> Enumerations</a></li><li class=\"chapter-item expanded \"><a href=\"items/unions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.8.</strong> Unions</a></li><li class=\"chapter-item expanded \"><a href=\"items/constant-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.9.</strong> Constant items</a></li><li class=\"chapter-item expanded \"><a href=\"items/static-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.10.</strong> Static items</a></li><li class=\"chapter-item expanded \"><a href=\"items/traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.11.</strong> Traits</a></li><li class=\"chapter-item expanded \"><a href=\"items/implementations.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.12.</strong> Implementations</a></li><li class=\"chapter-item expanded \"><a href=\"items/external-blocks.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.13.</strong> External blocks</a></li><li class=\"chapter-item expanded \"><a href=\"items/generics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.14.</strong> Generic parameters</a></li><li class=\"chapter-item expanded \"><a href=\"items/associated-items.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.15.</strong> Associated Items</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"attributes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Attributes</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"attributes/testing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.1.</strong> Testing</a></li><li class=\"chapter-item expanded \"><a href=\"attributes/derive.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.2.</strong> Derive</a></li><li class=\"chapter-item expanded \"><a href=\"attributes/diagnostics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.3.</strong> Diagnostics</a></li><li class=\"chapter-item expanded \"><a href=\"attributes/codegen.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.4.</strong> Code generation</a></li><li class=\"chapter-item expanded \"><a href=\"attributes/limits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.5.</strong> Limits</a></li><li class=\"chapter-item expanded \"><a href=\"attributes/type_system.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.6.</strong> Type System</a></li><li class=\"chapter-item expanded \"><a href=\"attributes/debugger.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.7.</strong> Debugger</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"statements-and-expressions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.</strong> Statements and expressions</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"statements.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.1.</strong> Statements</a></li><li class=\"chapter-item expanded \"><a href=\"expressions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.</strong> Expressions</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"expressions/literal-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.1.</strong> Literal expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/path-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.2.</strong> Path expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/block-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.3.</strong> Block expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/operator-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.4.</strong> Operator expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/grouped-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.5.</strong> Grouped expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/array-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.6.</strong> Array and index expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/tuple-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.7.</strong> Tuple and index expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/struct-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.8.</strong> Struct expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/call-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.9.</strong> Call expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/method-call-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.10.</strong> Method call expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/field-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.11.</strong> Field access expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/closure-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.12.</strong> Closure expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/loop-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.13.</strong> Loop expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/range-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.14.</strong> Range expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/if-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.15.</strong> If and if let expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/match-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.16.</strong> Match expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/return-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.17.</strong> Return expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/await-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.18.</strong> Await expressions</a></li><li class=\"chapter-item expanded \"><a href=\"expressions/underscore-expr.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.19.</strong> Underscore expressions</a></li></ol></li></ol></li><li class=\"chapter-item expanded \"><a href=\"patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.</strong> Patterns</a></li><li class=\"chapter-item expanded \"><a href=\"type-system.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.</strong> Type system</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.</strong> Types</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"types/boolean.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.1.</strong> Boolean type</a></li><li class=\"chapter-item expanded \"><a href=\"types/numeric.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.2.</strong> Numeric types</a></li><li class=\"chapter-item expanded \"><a href=\"types/textual.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.3.</strong> Textual types</a></li><li class=\"chapter-item expanded \"><a href=\"types/never.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.4.</strong> Never type</a></li><li class=\"chapter-item expanded \"><a href=\"types/tuple.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.5.</strong> Tuple types</a></li><li class=\"chapter-item expanded \"><a href=\"types/array.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.6.</strong> Array types</a></li><li class=\"chapter-item expanded \"><a href=\"types/slice.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.7.</strong> Slice types</a></li><li class=\"chapter-item expanded \"><a href=\"types/struct.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.8.</strong> Struct types</a></li><li class=\"chapter-item expanded \"><a href=\"types/enum.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.9.</strong> Enumerated types</a></li><li class=\"chapter-item expanded \"><a href=\"types/union.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.10.</strong> Union types</a></li><li class=\"chapter-item expanded \"><a href=\"types/function-item.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.11.</strong> Function item types</a></li><li class=\"chapter-item expanded \"><a href=\"types/closure.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.12.</strong> Closure types</a></li><li class=\"chapter-item expanded \"><a href=\"types/pointer.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.13.</strong> Pointer types</a></li><li class=\"chapter-item expanded \"><a href=\"types/function-pointer.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.14.</strong> Function pointer types</a></li><li class=\"chapter-item expanded \"><a href=\"types/trait-object.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.15.</strong> Trait object types</a></li><li class=\"chapter-item expanded \"><a href=\"types/impl-trait.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.16.</strong> Impl trait type</a></li><li class=\"chapter-item expanded \"><a href=\"types/parameters.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.17.</strong> Type parameters</a></li><li class=\"chapter-item expanded \"><a href=\"types/inferred.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.18.</strong> Inferred type</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"dynamically-sized-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.2.</strong> Dynamically Sized Types</a></li><li class=\"chapter-item expanded \"><a href=\"type-layout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.3.</strong> Type layout</a></li><li class=\"chapter-item expanded \"><a href=\"interior-mutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.4.</strong> Interior mutability</a></li><li class=\"chapter-item expanded \"><a href=\"subtyping.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.5.</strong> Subtyping and Variance</a></li><li class=\"chapter-item expanded \"><a href=\"trait-bounds.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.6.</strong> Trait and lifetime bounds</a></li><li class=\"chapter-item expanded \"><a href=\"type-coercions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.7.</strong> Type coercions</a></li><li class=\"chapter-item expanded \"><a href=\"destructors.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.8.</strong> Destructors</a></li><li class=\"chapter-item expanded \"><a href=\"lifetime-elision.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.9.</strong> Lifetime elision</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"special-types-and-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.</strong> Special types and traits</a></li><li class=\"chapter-item expanded \"><a href=\"names.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.</strong> Names</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"names/namespaces.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.1.</strong> Namespaces</a></li><li class=\"chapter-item expanded \"><a href=\"names/scopes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.2.</strong> Scopes</a></li><li class=\"chapter-item expanded \"><a href=\"names/preludes.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.3.</strong> Preludes</a></li><li class=\"chapter-item expanded \"><a href=\"paths.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.4.</strong> Paths</a></li><li class=\"chapter-item expanded \"><a href=\"names/name-resolution.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.5.</strong> Name resolution</a></li><li class=\"chapter-item expanded \"><a href=\"visibility-and-privacy.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.6.</strong> Visibility and privacy</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"memory-model.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.</strong> Memory model</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"memory-allocation-and-lifetime.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.1.</strong> Memory allocation and lifetime</a></li><li class=\"chapter-item expanded \"><a href=\"variables.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.2.</strong> Variables</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"linkage.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.</strong> Linkage</a></li><li class=\"chapter-item expanded \"><a href=\"inline-assembly.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.</strong> Inline assembly</a></li><li class=\"chapter-item expanded \"><a href=\"unsafety.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.</strong> Unsafety</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"unsafe-keyword.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.1.</strong> The unsafe keyword</a></li><li class=\"chapter-item expanded \"><a href=\"behavior-considered-undefined.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.2.</strong> Behavior considered undefined</a></li><li class=\"chapter-item expanded \"><a href=\"behavior-not-considered-unsafe.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.3.</strong> Behavior not considered unsafe</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"const_eval.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.</strong> Constant Evaluation</a></li><li class=\"chapter-item expanded \"><a href=\"abi.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.</strong> Application Binary Interface</a></li><li class=\"chapter-item expanded \"><a href=\"runtime.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.</strong> The Rust runtime</a></li><li class=\"chapter-item expanded \"><a href=\"appendices.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.</strong> Appendices</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"macro-ambiguity.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.1.</strong> Macro Follow-Set Ambiguity Formal Specification</a></li><li class=\"chapter-item expanded \"><a href=\"influences.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.2.</strong> Influences</a></li><li class=\"chapter-item expanded \"><a href=\"glossary.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.3.</strong> Glossary</a></li></ol></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Rust Reference</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/reference/\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/reference/edit/master/src/tokens.md\" title=\"Suggest an edit\" aria-label=\"Suggest an edit\">\n                            <i id=\"git-edit-button\" class=\"fa fa-edit\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h1 id=\"tokens\"><a class=\"header\" href=\"#tokens\">Tokens</a></h1>\n<p>Tokens are primitive productions in the grammar defined by regular\n(non-recursive) languages.  Rust source input can be broken down\ninto the following kinds of tokens:</p>\n<ul>\n<li><a href=\"keywords.html\">Keywords</a></li>\n<li><a href=\"identifiers.html\">Identifiers</a></li>\n<li><a href=\"#literals\">Literals</a></li>\n<li><a href=\"#lifetimes-and-loop-labels\">Lifetimes</a></li>\n<li><a href=\"#punctuation\">Punctuation</a></li>\n<li><a href=\"#delimiters\">Delimiters</a></li>\n</ul>\n<p>Within this documentation's grammar, \"simple\" tokens are given in <a href=\"notation.html#string-table-productions\">string\ntable production</a> form, and appear in <code class=\"hljs\">monospace</code> font.</p>\n<h2 id=\"literals\"><a class=\"header\" href=\"#literals\">Literals</a></h2>\n<p>Literals are tokens used in <a href=\"expressions/literal-expr.html\">literal expressions</a>.</p>\n<h3 id=\"examples\"><a class=\"header\" href=\"#examples\">Examples</a></h3>\n<h4 id=\"characters-and-strings\"><a class=\"header\" href=\"#characters-and-strings\">Characters and strings</a></h4>\n<div class=\"table-wrapper\"><table><thead><tr><th></th><th>Example</th><th><code class=\"hljs\">#</code>&nbsp;sets<sup class=\"footnote-reference\"><a href=\"#nsets\">1</a></sup></th><th>Characters</th><th>Escapes</th></tr></thead><tbody>\n<tr><td><a href=\"#character-literals\">Character</a></td><td><code class=\"hljs\">'H'</code></td><td>0</td><td>All Unicode</td><td><a href=\"#quote-escapes\">Quote</a> &amp; <a href=\"#ascii-escapes\">ASCII</a> &amp; <a href=\"#unicode-escapes\">Unicode</a></td></tr>\n<tr><td><a href=\"#string-literals\">String</a></td><td><code class=\"hljs\">\"hello\"</code></td><td>0</td><td>All Unicode</td><td><a href=\"#quote-escapes\">Quote</a> &amp; <a href=\"#ascii-escapes\">ASCII</a> &amp; <a href=\"#unicode-escapes\">Unicode</a></td></tr>\n<tr><td><a href=\"#raw-string-literals\">Raw string</a></td><td><code class=\"hljs\">r#\"hello\"#</code></td><td>&lt;256</td><td>All Unicode</td><td><code class=\"hljs\">N/A</code></td></tr>\n<tr><td><a href=\"#byte-literals\">Byte</a></td><td><code class=\"hljs\">b'H'</code></td><td>0</td><td>All ASCII</td><td><a href=\"#quote-escapes\">Quote</a> &amp; <a href=\"#byte-escapes\">Byte</a></td></tr>\n<tr><td><a href=\"#byte-string-literals\">Byte string</a></td><td><code class=\"hljs\">b\"hello\"</code></td><td>0</td><td>All ASCII</td><td><a href=\"#quote-escapes\">Quote</a> &amp; <a href=\"#byte-escapes\">Byte</a></td></tr>\n<tr><td><a href=\"#raw-byte-string-literals\">Raw byte string</a></td><td><code class=\"hljs\">br#\"hello\"#</code></td><td>&lt;256</td><td>All ASCII</td><td><code class=\"hljs\">N/A</code></td></tr>\n<tr><td><a href=\"#c-string-literals\">C string</a></td><td><code class=\"hljs\">c\"hello\"</code></td><td>0</td><td>All Unicode</td><td><a href=\"#quote-escapes\">Quote</a> &amp; <a href=\"#byte-escapes\">Byte</a> &amp; <a href=\"#unicode-escapes\">Unicode</a></td></tr>\n<tr><td><a href=\"#raw-c-string-literals\">Raw C string</a></td><td><code class=\"hljs\">cr#\"hello\"#</code></td><td>&lt;256</td><td>All Unicode</td><td><code class=\"hljs\">N/A</code></td></tr>\n</tbody></table>\n</div>\n<div class=\"footnote-definition\" id=\"nsets\"><sup class=\"footnote-definition-label\">1</sup>\n<p>The number of <code class=\"hljs\">#</code>s on each side of the same literal must be equivalent.</p>\n</div>\n<blockquote>\n<p><strong>Note</strong>:  Character and string literal tokens never include the sequence of <code class=\"hljs\">U+000D</code> (CR) immediately followed by <code class=\"hljs\">U+000A</code> (LF): this pair would have been previously transformed into a single <code class=\"hljs\">U+000A</code> (LF).</p>\n</blockquote>\n<h4 id=\"ascii-escapes\"><a class=\"header\" href=\"#ascii-escapes\">ASCII escapes</a></h4>\n<div class=\"table-wrapper\"><table><thead><tr><th></th><th>Name</th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">\\x41</code></td><td>7-bit character code (exactly 2 digits, up to 0x7F)</td></tr>\n<tr><td><code class=\"hljs\">\\n</code></td><td>Newline</td></tr>\n<tr><td><code class=\"hljs\">\\r</code></td><td>Carriage return</td></tr>\n<tr><td><code class=\"hljs\">\\t</code></td><td>Tab</td></tr>\n<tr><td><code class=\"hljs\">\\\\</code></td><td>Backslash</td></tr>\n<tr><td><code class=\"hljs\">\\0</code></td><td>Null</td></tr>\n</tbody></table>\n</div>\n<h4 id=\"byte-escapes\"><a class=\"header\" href=\"#byte-escapes\">Byte escapes</a></h4>\n<div class=\"table-wrapper\"><table><thead><tr><th></th><th>Name</th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">\\x7F</code></td><td>8-bit character code (exactly 2 digits)</td></tr>\n<tr><td><code class=\"hljs\">\\n</code></td><td>Newline</td></tr>\n<tr><td><code class=\"hljs\">\\r</code></td><td>Carriage return</td></tr>\n<tr><td><code class=\"hljs\">\\t</code></td><td>Tab</td></tr>\n<tr><td><code class=\"hljs\">\\\\</code></td><td>Backslash</td></tr>\n<tr><td><code class=\"hljs\">\\0</code></td><td>Null</td></tr>\n</tbody></table>\n</div>\n<h4 id=\"unicode-escapes\"><a class=\"header\" href=\"#unicode-escapes\">Unicode escapes</a></h4>\n<div class=\"table-wrapper\"><table><thead><tr><th></th><th>Name</th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">\\u{7FFF}</code></td><td>24-bit Unicode character code (up to 6 digits)</td></tr>\n</tbody></table>\n</div>\n<h4 id=\"quote-escapes\"><a class=\"header\" href=\"#quote-escapes\">Quote escapes</a></h4>\n<div class=\"table-wrapper\"><table><thead><tr><th></th><th>Name</th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">\\'</code></td><td>Single quote</td></tr>\n<tr><td><code class=\"hljs\">\\\"</code></td><td>Double quote</td></tr>\n</tbody></table>\n</div>\n<h4 id=\"numbers\"><a class=\"header\" href=\"#numbers\">Numbers</a></h4>\n<div class=\"table-wrapper\"><table><thead><tr><th><a href=\"#number-literals\">Number literals</a><sup class=\"footnote-reference\"><a href=\"#nl\">2</a></sup></th><th>Example</th><th>Exponentiation</th></tr></thead><tbody>\n<tr><td>Decimal integer</td><td><code class=\"hljs\">98_222</code></td><td><code class=\"hljs\">N/A</code></td></tr>\n<tr><td>Hex integer</td><td><code class=\"hljs\">0xff</code></td><td><code class=\"hljs\">N/A</code></td></tr>\n<tr><td>Octal integer</td><td><code class=\"hljs\">0o77</code></td><td><code class=\"hljs\">N/A</code></td></tr>\n<tr><td>Binary integer</td><td><code class=\"hljs\">0b1111_0000</code></td><td><code class=\"hljs\">N/A</code></td></tr>\n<tr><td>Floating-point</td><td><code class=\"hljs\">123.0E+77</code></td><td><code class=\"hljs\">Optional</code></td></tr>\n</tbody></table>\n</div>\n<div class=\"footnote-definition\" id=\"nl\"><sup class=\"footnote-definition-label\">2</sup>\n<p>All number literals allow <code class=\"hljs\">_</code> as a visual separator: <code class=\"hljs\">1_234.0E+18f64</code></p>\n</div>\n<h4 id=\"suffixes\"><a class=\"header\" href=\"#suffixes\">Suffixes</a></h4>\n<p>A suffix is a sequence of characters following the primary part of a literal (without intervening whitespace), of the same form as a non-raw identifier or keyword.</p>\n<blockquote>\n<p><strong><sup>Lexer</sup></strong><br>\nSUFFIX : IDENTIFIER_OR_KEYWORD<br>\nSUFFIX_NO_E : SUFFIX <sub><em>not beginning with <code class=\"hljs\">e</code>&nbsp;or&nbsp;<code class=\"hljs\">E</code></em></sub></p>\n</blockquote>\n<p>Any kind of literal (string, integer, etc) with any suffix is valid as a token.</p>\n<p>A literal token with any suffix can be passed to a macro without producing an error.\nThe macro itself will decide how to interpret such a token and whether to produce an error or not.\nIn particular, the <code class=\"hljs\">literal</code> fragment specifier for by-example macros matches literal tokens with arbitrary suffixes.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-built_in\">macro_rules!</span> blackhole { ($tt:tt) =&gt; () }\n<span class=\"hljs-built_in\">macro_rules!</span> blackhole_lit { ($l:literal) =&gt; () }\n\nblackhole!(<span class=\"hljs-string\">\"string\"</span>suffix); <span class=\"hljs-comment\">// OK</span>\nblackhole_lit!(<span class=\"hljs-number\">1</span>suffix); <span class=\"hljs-comment\">// OK</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<p>However, suffixes on literal tokens which are interpreted as literal expressions or patterns are restricted.\nAny suffixes are rejected on non-numeric literal tokens,\nand numeric literal tokens are accepted only with suffixes from the list below.</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Integer</th><th>Floating-point</th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">u8</code>, <code class=\"hljs\">i8</code>, <code class=\"hljs\">u16</code>, <code class=\"hljs\">i16</code>, <code class=\"hljs\">u32</code>, <code class=\"hljs\">i32</code>, <code class=\"hljs\">u64</code>, <code class=\"hljs\">i64</code>, <code class=\"hljs\">u128</code>, <code class=\"hljs\">i128</code>, <code class=\"hljs\">usize</code>, <code class=\"hljs\">isize</code></td><td><code class=\"hljs\">f32</code>, <code class=\"hljs\">f64</code></td></tr>\n</tbody></table>\n</div>\n<h3 id=\"character-and-string-literals\"><a class=\"header\" href=\"#character-and-string-literals\">Character and string literals</a></h3>\n<h4 id=\"character-literals\"><a class=\"header\" href=\"#character-literals\">Character literals</a></h4>\n<blockquote>\n<p><strong><sup>Lexer</sup></strong><br>\nCHAR_LITERAL :<br>\n&nbsp;&nbsp; <code class=\"hljs\">'</code> ( ~[<code class=\"hljs\">'</code> <code class=\"hljs\">\\</code> \\n \\r \\t] | QUOTE_ESCAPE | ASCII_ESCAPE | UNICODE_ESCAPE ) <code class=\"hljs\">'</code> SUFFIX<sup>?</sup></p>\n<p>QUOTE_ESCAPE :<br>\n&nbsp;&nbsp; <code class=\"hljs\">\\'</code> | <code class=\"hljs\">\\\"</code></p>\n<p>ASCII_ESCAPE :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <code class=\"hljs\">\\x</code> OCT_DIGIT HEX_DIGIT<br>\n&nbsp;&nbsp; | <code class=\"hljs\">\\n</code> | <code class=\"hljs\">\\r</code> | <code class=\"hljs\">\\t</code> | <code class=\"hljs\">\\\\</code> | <code class=\"hljs\">\\0</code></p>\n<p>UNICODE_ESCAPE :<br>\n&nbsp;&nbsp; <code class=\"hljs\">\\u{</code> ( HEX_DIGIT <code class=\"hljs\">_</code><sup>*</sup> )<sup>1..6</sup> <code class=\"hljs\">}</code></p>\n</blockquote>\n<p>A <em>character literal</em> is a single Unicode character enclosed within two\n<code class=\"hljs\">U+0027</code> (single-quote) characters, with the exception of <code class=\"hljs\">U+0027</code> itself,\nwhich must be <em>escaped</em> by a preceding <code class=\"hljs\">U+005C</code> character (<code class=\"hljs\">\\</code>).</p>\n<h4 id=\"string-literals\"><a class=\"header\" href=\"#string-literals\">String literals</a></h4>\n<blockquote>\n<p><strong><sup>Lexer</sup></strong><br>\nSTRING_LITERAL :<br>\n&nbsp;&nbsp; <code class=\"hljs\">\"</code> (<br>\n&nbsp;&nbsp; &nbsp;&nbsp; ~[<code class=\"hljs\">\"</code> <code class=\"hljs\">\\</code> <em>IsolatedCR</em>]<br>\n&nbsp;&nbsp; &nbsp;&nbsp; | QUOTE_ESCAPE<br>\n&nbsp;&nbsp; &nbsp;&nbsp; | ASCII_ESCAPE<br>\n&nbsp;&nbsp; &nbsp;&nbsp; | UNICODE_ESCAPE<br>\n&nbsp;&nbsp; &nbsp;&nbsp; | STRING_CONTINUE<br>\n&nbsp;&nbsp; )<sup>*</sup> <code class=\"hljs\">\"</code> SUFFIX<sup>?</sup></p>\n<p>STRING_CONTINUE :<br>\n&nbsp;&nbsp; <code class=\"hljs\">\\</code> <em>followed by</em> \\n</p>\n</blockquote>\n<p>A <em>string literal</em> is a sequence of any Unicode characters enclosed within two\n<code class=\"hljs\">U+0022</code> (double-quote) characters, with the exception of <code class=\"hljs\">U+0022</code> itself,\nwhich must be <em>escaped</em> by a preceding <code class=\"hljs\">U+005C</code> character (<code class=\"hljs\">\\</code>).</p>\n<p>Line-breaks, represented by the  character <code class=\"hljs\">U+000A</code> (LF), are allowed in string literals.\nWhen an unescaped <code class=\"hljs\">U+005C</code> character (<code class=\"hljs\">\\</code>) occurs immediately before a line break, the line break does not appear in the string represented by the token.\nSee <a href=\"expressions/literal-expr.html#string-continuation-escapes\">String continuation escapes</a> for details.\nThe character <code class=\"hljs\">U+000D</code> (CR) may not appear in a string literal other than as part of such a string continuation escape.</p>\n<h4 id=\"character-escapes\"><a class=\"header\" href=\"#character-escapes\">Character escapes</a></h4>\n<p>Some additional <em>escapes</em> are available in either character or non-raw string\nliterals. An escape starts with a <code class=\"hljs\">U+005C</code> (<code class=\"hljs\">\\</code>) and continues with one of the\nfollowing forms:</p>\n<ul>\n<li>A <em>7-bit code point escape</em> starts with <code class=\"hljs\">U+0078</code> (<code class=\"hljs\">x</code>) and is\nfollowed by exactly two <em>hex digits</em> with value up to <code class=\"hljs\">0x7F</code>. It denotes the\nASCII character with value equal to the provided hex value. Higher values are\nnot permitted because it is ambiguous whether they mean Unicode code points or\nbyte values.</li>\n<li>A <em>24-bit code point escape</em> starts with <code class=\"hljs\">U+0075</code> (<code class=\"hljs\">u</code>) and is followed\nby up to six <em>hex digits</em> surrounded by braces <code class=\"hljs\">U+007B</code> (<code class=\"hljs\">{</code>) and <code class=\"hljs\">U+007D</code>\n(<code class=\"hljs\">}</code>). It denotes the Unicode code point equal to the provided hex value.</li>\n<li>A <em>whitespace escape</em> is one of the characters <code class=\"hljs\">U+006E</code> (<code class=\"hljs\">n</code>), <code class=\"hljs\">U+0072</code>\n(<code class=\"hljs\">r</code>), or <code class=\"hljs\">U+0074</code> (<code class=\"hljs\">t</code>), denoting the Unicode values <code class=\"hljs\">U+000A</code> (LF),\n<code class=\"hljs\">U+000D</code> (CR) or <code class=\"hljs\">U+0009</code> (HT) respectively.</li>\n<li>The <em>null escape</em> is the character <code class=\"hljs\">U+0030</code> (<code class=\"hljs\">0</code>) and denotes the Unicode\nvalue <code class=\"hljs\">U+0000</code> (NUL).</li>\n<li>The <em>backslash escape</em> is the character <code class=\"hljs\">U+005C</code> (<code class=\"hljs\">\\</code>) which must be\nescaped in order to denote itself.</li>\n</ul>\n<h4 id=\"raw-string-literals\"><a class=\"header\" href=\"#raw-string-literals\">Raw string literals</a></h4>\n<blockquote>\n<p><strong><sup>Lexer</sup></strong><br>\nRAW_STRING_LITERAL :<br>\n&nbsp;&nbsp; <code class=\"hljs\">r</code> RAW_STRING_CONTENT SUFFIX<sup>?</sup></p>\n<p>RAW_STRING_CONTENT :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <code class=\"hljs\">\"</code> ( ~ <em>IsolatedCR</em> )<sup>* (non-greedy)</sup> <code class=\"hljs\">\"</code><br>\n&nbsp;&nbsp; | <code class=\"hljs\">#</code> RAW_STRING_CONTENT <code class=\"hljs\">#</code></p>\n</blockquote>\n<p>Raw string literals do not process any escapes. They start with the character\n<code class=\"hljs\">U+0072</code> (<code class=\"hljs\">r</code>), followed by fewer than 256 of the character <code class=\"hljs\">U+0023</code> (<code class=\"hljs\">#</code>) and a\n<code class=\"hljs\">U+0022</code> (double-quote) character.</p>\n<p>The <em>raw string body</em> can contain any sequence of Unicode characters other than <code class=\"hljs\">U+000D</code> (CR).\nIt is terminated only by another <code class=\"hljs\">U+0022</code> (double-quote) character, followed by the same number of <code class=\"hljs\">U+0023</code> (<code class=\"hljs\">#</code>) characters that preceded the opening <code class=\"hljs\">U+0022</code> (double-quote) character.</p>\n<p>All Unicode characters contained in the raw string body represent themselves,\nthe characters <code class=\"hljs\">U+0022</code> (double-quote) (except when followed by at least as\nmany <code class=\"hljs\">U+0023</code> (<code class=\"hljs\">#</code>) characters as were used to start the raw string literal) or\n<code class=\"hljs\">U+005C</code> (<code class=\"hljs\">\\</code>) do not have any special meaning.</p>\n<p>Examples for string literals:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-string\">\"foo\"</span>; <span class=\"hljs-string\">r\"foo\"</span>;                     <span class=\"hljs-comment\">// foo</span>\n<span class=\"hljs-string\">\"\\\"foo\\\"\"</span>; <span class=\"hljs-string\">r#\"\"foo\"\"#</span>;             <span class=\"hljs-comment\">// \"foo\"</span>\n\n<span class=\"hljs-string\">\"foo #\\\"# bar\"</span>;\n<span class=\"hljs-string\">r##\"foo #\"# bar\"##</span>;                <span class=\"hljs-comment\">// foo #\"# bar</span>\n\n<span class=\"hljs-string\">\"\\x52\"</span>; <span class=\"hljs-string\">\"R\"</span>; <span class=\"hljs-string\">r\"R\"</span>;                 <span class=\"hljs-comment\">// R</span>\n<span class=\"hljs-string\">\"\\\\x52\"</span>; <span class=\"hljs-string\">r\"\\x52\"</span>;                  <span class=\"hljs-comment\">// \\x52</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<h3 id=\"byte-and-byte-string-literals\"><a class=\"header\" href=\"#byte-and-byte-string-literals\">Byte and byte string literals</a></h3>\n<h4 id=\"byte-literals\"><a class=\"header\" href=\"#byte-literals\">Byte literals</a></h4>\n<blockquote>\n<p><strong><sup>Lexer</sup></strong><br>\nBYTE_LITERAL :<br>\n&nbsp;&nbsp; <code class=\"hljs\">b'</code> ( ASCII_FOR_CHAR | BYTE_ESCAPE )  <code class=\"hljs\">'</code> SUFFIX<sup>?</sup></p>\n<p>ASCII_FOR_CHAR :<br>\n&nbsp;&nbsp; <em>any ASCII (i.e. 0x00 to 0x7F), except</em> <code class=\"hljs\">'</code>, <code class=\"hljs\">\\</code>, \\n, \\r or \\t</p>\n<p>BYTE_ESCAPE :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <code class=\"hljs\">\\x</code> HEX_DIGIT HEX_DIGIT<br>\n&nbsp;&nbsp; | <code class=\"hljs\">\\n</code> | <code class=\"hljs\">\\r</code> | <code class=\"hljs\">\\t</code> | <code class=\"hljs\">\\\\</code> | <code class=\"hljs\">\\0</code> | <code class=\"hljs\">\\'</code> | <code class=\"hljs\">\\\"</code></p>\n</blockquote>\n<p>A <em>byte literal</em> is a single ASCII character (in the <code class=\"hljs\">U+0000</code> to <code class=\"hljs\">U+007F</code>\nrange) or a single <em>escape</em> preceded by the characters <code class=\"hljs\">U+0062</code> (<code class=\"hljs\">b</code>) and\n<code class=\"hljs\">U+0027</code> (single-quote), and followed by the character <code class=\"hljs\">U+0027</code>. If the character\n<code class=\"hljs\">U+0027</code> is present within the literal, it must be <em>escaped</em> by a preceding\n<code class=\"hljs\">U+005C</code> (<code class=\"hljs\">\\</code>) character. It is equivalent to a <code class=\"hljs\">u8</code> unsigned 8-bit integer\n<em>number literal</em>.</p>\n<h4 id=\"byte-string-literals\"><a class=\"header\" href=\"#byte-string-literals\">Byte string literals</a></h4>\n<blockquote>\n<p><strong><sup>Lexer</sup></strong><br>\nBYTE_STRING_LITERAL :<br>\n&nbsp;&nbsp; <code class=\"hljs\">b\"</code> ( ASCII_FOR_STRING | BYTE_ESCAPE | STRING_CONTINUE )<sup>*</sup> <code class=\"hljs\">\"</code> SUFFIX<sup>?</sup></p>\n<p>ASCII_FOR_STRING :<br>\n&nbsp;&nbsp; <em>any ASCII (i.e 0x00 to 0x7F), except</em> <code class=\"hljs\">\"</code>, <code class=\"hljs\">\\</code> <em>and IsolatedCR</em></p>\n</blockquote>\n<p>A non-raw <em>byte string literal</em> is a sequence of ASCII characters and <em>escapes</em>,\npreceded by the characters <code class=\"hljs\">U+0062</code> (<code class=\"hljs\">b</code>) and <code class=\"hljs\">U+0022</code> (double-quote), and\nfollowed by the character <code class=\"hljs\">U+0022</code>. If the character <code class=\"hljs\">U+0022</code> is present within\nthe literal, it must be <em>escaped</em> by a preceding <code class=\"hljs\">U+005C</code> (<code class=\"hljs\">\\</code>) character.\nAlternatively, a byte string literal can be a <em>raw byte string literal</em>, defined\nbelow.</p>\n<p>Line-breaks, represented by the  character <code class=\"hljs\">U+000A</code> (LF), are allowed in byte string literals.\nWhen an unescaped <code class=\"hljs\">U+005C</code> character (<code class=\"hljs\">\\</code>) occurs immediately before a line break, the line break does not appear in the string represented by the token.\nSee <a href=\"expressions/literal-expr.html#string-continuation-escapes\">String continuation escapes</a> for details.\nThe character <code class=\"hljs\">U+000D</code> (CR) may not appear in a byte string literal other than as part of such a string continuation escape.</p>\n<p>Some additional <em>escapes</em> are available in either byte or non-raw byte string\nliterals. An escape starts with a <code class=\"hljs\">U+005C</code> (<code class=\"hljs\">\\</code>) and continues with one of the\nfollowing forms:</p>\n<ul>\n<li>A <em>byte escape</em> escape starts with <code class=\"hljs\">U+0078</code> (<code class=\"hljs\">x</code>) and is\nfollowed by exactly two <em>hex digits</em>. It denotes the byte\nequal to the provided hex value.</li>\n<li>A <em>whitespace escape</em> is one of the characters <code class=\"hljs\">U+006E</code> (<code class=\"hljs\">n</code>), <code class=\"hljs\">U+0072</code>\n(<code class=\"hljs\">r</code>), or <code class=\"hljs\">U+0074</code> (<code class=\"hljs\">t</code>), denoting the bytes values <code class=\"hljs\">0x0A</code> (ASCII LF),\n<code class=\"hljs\">0x0D</code> (ASCII CR) or <code class=\"hljs\">0x09</code> (ASCII HT) respectively.</li>\n<li>The <em>null escape</em> is the character <code class=\"hljs\">U+0030</code> (<code class=\"hljs\">0</code>) and denotes the byte\nvalue <code class=\"hljs\">0x00</code> (ASCII NUL).</li>\n<li>The <em>backslash escape</em> is the character <code class=\"hljs\">U+005C</code> (<code class=\"hljs\">\\</code>) which must be\nescaped in order to denote its ASCII encoding <code class=\"hljs\">0x5C</code>.</li>\n</ul>\n<h4 id=\"raw-byte-string-literals\"><a class=\"header\" href=\"#raw-byte-string-literals\">Raw byte string literals</a></h4>\n<blockquote>\n<p><strong><sup>Lexer</sup></strong><br>\nRAW_BYTE_STRING_LITERAL :<br>\n&nbsp;&nbsp; <code class=\"hljs\">br</code> RAW_BYTE_STRING_CONTENT SUFFIX<sup>?</sup></p>\n<p>RAW_BYTE_STRING_CONTENT :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <code class=\"hljs\">\"</code> ASCII_FOR_RAW<sup>* (non-greedy)</sup> <code class=\"hljs\">\"</code><br>\n&nbsp;&nbsp; | <code class=\"hljs\">#</code> RAW_BYTE_STRING_CONTENT <code class=\"hljs\">#</code></p>\n<p>ASCII_FOR_RAW :<br>\n&nbsp;&nbsp; <em>any ASCII (i.e. 0x00 to 0x7F) except IsolatedCR</em></p>\n</blockquote>\n<p>Raw byte string literals do not process any escapes. They start with the\ncharacter <code class=\"hljs\">U+0062</code> (<code class=\"hljs\">b</code>), followed by <code class=\"hljs\">U+0072</code> (<code class=\"hljs\">r</code>), followed by fewer than 256\nof the character <code class=\"hljs\">U+0023</code> (<code class=\"hljs\">#</code>), and a <code class=\"hljs\">U+0022</code> (double-quote) character.</p>\n<p>The <em>raw string body</em> can contain any sequence of ASCII characters other than <code class=\"hljs\">U+000D</code> (CR).\nIt is terminated only by another <code class=\"hljs\">U+0022</code> (double-quote) character, followed by the same number of <code class=\"hljs\">U+0023</code> (<code class=\"hljs\">#</code>) characters that preceded the opening <code class=\"hljs\">U+0022</code> (double-quote) character.\nA raw byte string literal can not contain any non-ASCII byte.</p>\n<p>All characters contained in the raw string body represent their ASCII encoding,\nthe characters <code class=\"hljs\">U+0022</code> (double-quote) (except when followed by at least as\nmany <code class=\"hljs\">U+0023</code> (<code class=\"hljs\">#</code>) characters as were used to start the raw string literal) or\n<code class=\"hljs\">U+005C</code> (<code class=\"hljs\">\\</code>) do not have any special meaning.</p>\n<p>Examples for byte string literals:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-string\">b\"foo\"</span>; b<span class=\"hljs-string\">r\"foo\"</span>;                     <span class=\"hljs-comment\">// foo</span>\n<span class=\"hljs-string\">b\"\\\"foo\\\"\"</span>; b<span class=\"hljs-string\">r#\"\"foo\"\"#</span>;             <span class=\"hljs-comment\">// \"foo\"</span>\n\n<span class=\"hljs-string\">b\"foo #\\\"# bar\"</span>;\nb<span class=\"hljs-string\">r##\"foo #\"# bar\"##</span>;                 <span class=\"hljs-comment\">// foo #\"# bar</span>\n\n<span class=\"hljs-string\">b\"\\x52\"</span>; <span class=\"hljs-string\">b\"R\"</span>; b<span class=\"hljs-string\">r\"R\"</span>;                <span class=\"hljs-comment\">// R</span>\n<span class=\"hljs-string\">b\"\\\\x52\"</span>; b<span class=\"hljs-string\">r\"\\x52\"</span>;                  <span class=\"hljs-comment\">// \\x52</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<h3 id=\"c-string-and-raw-c-string-literals\"><a class=\"header\" href=\"#c-string-and-raw-c-string-literals\">C string and raw C string literals</a></h3>\n<h4 id=\"c-string-literals\"><a class=\"header\" href=\"#c-string-literals\">C string literals</a></h4>\n<blockquote>\n<p><strong><sup>Lexer</sup></strong><br>\nC_STRING_LITERAL :<br>\n&nbsp;&nbsp; <code class=\"hljs\">c\"</code> (<br>\n&nbsp;&nbsp; &nbsp;&nbsp; ~[<code class=\"hljs\">\"</code> <code class=\"hljs\">\\</code> <em>IsolatedCR</em> <em>NUL</em>]<br>\n&nbsp;&nbsp; &nbsp;&nbsp; | BYTE_ESCAPE <em>except <code class=\"hljs\">\\0</code> or <code class=\"hljs\">\\x00</code></em><br>\n&nbsp;&nbsp; &nbsp;&nbsp; | UNICODE_ESCAPE <em>except <code class=\"hljs\">\\u{0}</code>, <code class=\"hljs\">\\u{00}</code>, …, <code class=\"hljs\">\\u{000000}</code></em><br>\n&nbsp;&nbsp; &nbsp;&nbsp; | STRING_CONTINUE<br>\n&nbsp;&nbsp; )<sup>*</sup> <code class=\"hljs\">\"</code> SUFFIX<sup>?</sup></p>\n</blockquote>\n<p>A <em>C string literal</em> is a sequence of Unicode characters and <em>escapes</em>,\npreceded by the characters <code class=\"hljs\">U+0063</code> (<code class=\"hljs\">c</code>) and <code class=\"hljs\">U+0022</code> (double-quote), and\nfollowed by the character <code class=\"hljs\">U+0022</code>. If the character <code class=\"hljs\">U+0022</code> is present within\nthe literal, it must be <em>escaped</em> by a preceding <code class=\"hljs\">U+005C</code> (<code class=\"hljs\">\\</code>) character.\nAlternatively, a C string literal can be a <em>raw C string literal</em>, defined below.</p>\n<p>C strings are implicitly terminated by byte <code class=\"hljs\">0x00</code>, so the C string literal\n<code class=\"hljs\">c\"\"</code> is equivalent to manually constructing a <code class=\"hljs\">&amp;CStr</code> from the byte string\nliteral <code class=\"hljs\">b\"\\x00\"</code>. Other than the implicit terminator, byte <code class=\"hljs\">0x00</code> is not\npermitted within a C string.</p>\n<p>Line-breaks, represented by the  character <code class=\"hljs\">U+000A</code> (LF), are allowed in C string literals.\nWhen an unescaped <code class=\"hljs\">U+005C</code> character (<code class=\"hljs\">\\</code>) occurs immediately before a line break, the line break does not appear in the string represented by the token.\nSee <a href=\"expressions/literal-expr.html#string-continuation-escapes\">String continuation escapes</a> for details.\nThe character <code class=\"hljs\">U+000D</code> (CR) may not appear in a C string literal other than as part of such a string continuation escape.</p>\n<p>Some additional <em>escapes</em> are available in non-raw C string literals. An escape\nstarts with a <code class=\"hljs\">U+005C</code> (<code class=\"hljs\">\\</code>) and continues with one of the following forms:</p>\n<ul>\n<li>A <em>byte escape</em> escape starts with <code class=\"hljs\">U+0078</code> (<code class=\"hljs\">x</code>) and is followed by exactly\ntwo <em>hex digits</em>. It denotes the byte equal to the provided hex value.</li>\n<li>A <em>24-bit code point escape</em> starts with <code class=\"hljs\">U+0075</code> (<code class=\"hljs\">u</code>) and is followed\nby up to six <em>hex digits</em> surrounded by braces <code class=\"hljs\">U+007B</code> (<code class=\"hljs\">{</code>) and <code class=\"hljs\">U+007D</code>\n(<code class=\"hljs\">}</code>). It denotes the Unicode code point equal to the provided hex value,\nencoded as UTF-8.</li>\n<li>A <em>whitespace escape</em> is one of the characters <code class=\"hljs\">U+006E</code> (<code class=\"hljs\">n</code>), <code class=\"hljs\">U+0072</code>\n(<code class=\"hljs\">r</code>), or <code class=\"hljs\">U+0074</code> (<code class=\"hljs\">t</code>), denoting the bytes values <code class=\"hljs\">0x0A</code> (ASCII LF),\n<code class=\"hljs\">0x0D</code> (ASCII CR) or <code class=\"hljs\">0x09</code> (ASCII HT) respectively.</li>\n<li>The <em>backslash escape</em> is the character <code class=\"hljs\">U+005C</code> (<code class=\"hljs\">\\</code>) which must be\nescaped in order to denote its ASCII encoding <code class=\"hljs\">0x5C</code>.</li>\n</ul>\n<p>A C string represents bytes with no defined encoding, but a C string literal\nmay contain Unicode characters above <code class=\"hljs\">U+007F</code>. Such characters will be replaced\nwith the bytes of that character's UTF-8 representation.</p>\n<p>The following C string literals are equivalent:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>c<span class=\"hljs-string\">\"æ\"</span>;        <span class=\"hljs-comment\">// LATIN SMALL LETTER AE (U+00E6)</span>\nc<span class=\"hljs-string\">\"\\u{00E6}\"</span>;\nc<span class=\"hljs-string\">\"\\xC3\\xA6\"</span>;\n<span class=\"boring\">}</span></code></pre></pre>\n<blockquote>\n<p><strong>Edition Differences</strong>: C string literals are accepted in the 2021 edition or\nlater. In earlier additions the token <code class=\"hljs\">c\"\"</code> is lexed as <code class=\"hljs\">c \"\"</code>.</p>\n</blockquote>\n<h4 id=\"raw-c-string-literals\"><a class=\"header\" href=\"#raw-c-string-literals\">Raw C string literals</a></h4>\n<blockquote>\n<p><strong><sup>Lexer</sup></strong><br>\nRAW_C_STRING_LITERAL :<br>\n&nbsp;&nbsp; <code class=\"hljs\">cr</code> RAW_C_STRING_CONTENT SUFFIX<sup>?</sup></p>\n<p>RAW_C_STRING_CONTENT :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <code class=\"hljs\">\"</code> ( ~ <em>IsolatedCR</em> <em>NUL</em> )<sup>* (non-greedy)</sup> <code class=\"hljs\">\"</code><br>\n&nbsp;&nbsp; | <code class=\"hljs\">#</code> RAW_C_STRING_CONTENT <code class=\"hljs\">#</code></p>\n</blockquote>\n<p>Raw C string literals do not process any escapes. They start with the\ncharacter <code class=\"hljs\">U+0063</code> (<code class=\"hljs\">c</code>), followed by <code class=\"hljs\">U+0072</code> (<code class=\"hljs\">r</code>), followed by fewer than 256\nof the character <code class=\"hljs\">U+0023</code> (<code class=\"hljs\">#</code>), and a <code class=\"hljs\">U+0022</code> (double-quote) character.</p>\n<p>The <em>raw C string body</em> can contain any sequence of Unicode characters other than <code class=\"hljs\">U+0000</code> (NUL) and <code class=\"hljs\">U+000D</code> (CR).\nIt is terminated only by another <code class=\"hljs\">U+0022</code> (double-quote) character, followed by the same number of <code class=\"hljs\">U+0023</code> (<code class=\"hljs\">#</code>) characters that preceded the opening <code class=\"hljs\">U+0022</code> (double-quote) character.</p>\n<p>All characters contained in the raw C string body represent themselves in UTF-8\nencoding. The characters <code class=\"hljs\">U+0022</code> (double-quote) (except when followed by at\nleast as many <code class=\"hljs\">U+0023</code> (<code class=\"hljs\">#</code>) characters as were used to start the raw C string\nliteral) or <code class=\"hljs\">U+005C</code> (<code class=\"hljs\">\\</code>) do not have any special meaning.</p>\n<blockquote>\n<p><strong>Edition Differences</strong>: Raw C string literals are accepted in the 2021\nedition or later. In earlier additions the token <code class=\"hljs\">cr\"\"</code> is lexed as <code class=\"hljs\">cr \"\"</code>,\nand <code class=\"hljs\">cr#\"\"#</code> is lexed as <code class=\"hljs\">cr #\"\"#</code> (which is non-grammatical).</p>\n</blockquote>\n<h4 id=\"examples-for-c-string-and-raw-c-string-literals\"><a class=\"header\" href=\"#examples-for-c-string-and-raw-c-string-literals\">Examples for C string and raw C string literals</a></h4>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>c<span class=\"hljs-string\">\"foo\"</span>; c<span class=\"hljs-string\">r\"foo\"</span>;                     <span class=\"hljs-comment\">// foo</span>\nc<span class=\"hljs-string\">\"\\\"foo\\\"\"</span>; c<span class=\"hljs-string\">r#\"\"foo\"\"#</span>;             <span class=\"hljs-comment\">// \"foo\"</span>\n\nc<span class=\"hljs-string\">\"foo #\\\"# bar\"</span>;\nc<span class=\"hljs-string\">r##\"foo #\"# bar\"##</span>;                 <span class=\"hljs-comment\">// foo #\"# bar</span>\n\nc<span class=\"hljs-string\">\"\\x52\"</span>; c<span class=\"hljs-string\">\"R\"</span>; c<span class=\"hljs-string\">r\"R\"</span>;                <span class=\"hljs-comment\">// R</span>\nc<span class=\"hljs-string\">\"\\\\x52\"</span>; c<span class=\"hljs-string\">r\"\\x52\"</span>;                  <span class=\"hljs-comment\">// \\x52</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<h3 id=\"number-literals\"><a class=\"header\" href=\"#number-literals\">Number literals</a></h3>\n<p>A <em>number literal</em> is either an <em>integer literal</em> or a <em>floating-point\nliteral</em>. The grammar for recognizing the two kinds of literals is mixed.</p>\n<h4 id=\"integer-literals\"><a class=\"header\" href=\"#integer-literals\">Integer literals</a></h4>\n<blockquote>\n<p><strong><sup>Lexer</sup></strong><br>\nINTEGER_LITERAL :<br>\n&nbsp;&nbsp; ( DEC_LITERAL | BIN_LITERAL | OCT_LITERAL | HEX_LITERAL )\nSUFFIX_NO_E<sup>?</sup></p>\n<p>DEC_LITERAL :<br>\n&nbsp;&nbsp; DEC_DIGIT (DEC_DIGIT|<code class=\"hljs\">_</code>)<sup>*</sup></p>\n<p>BIN_LITERAL :<br>\n&nbsp;&nbsp; <code class=\"hljs\">0b</code> (BIN_DIGIT|<code class=\"hljs\">_</code>)<sup>*</sup> BIN_DIGIT (BIN_DIGIT|<code class=\"hljs\">_</code>)<sup>*</sup></p>\n<p>OCT_LITERAL :<br>\n&nbsp;&nbsp; <code class=\"hljs\">0o</code> (OCT_DIGIT|<code class=\"hljs\">_</code>)<sup>*</sup> OCT_DIGIT (OCT_DIGIT|<code class=\"hljs\">_</code>)<sup>*</sup></p>\n<p>HEX_LITERAL :<br>\n&nbsp;&nbsp; <code class=\"hljs\">0x</code> (HEX_DIGIT|<code class=\"hljs\">_</code>)<sup>*</sup> HEX_DIGIT (HEX_DIGIT|<code class=\"hljs\">_</code>)<sup>*</sup></p>\n<p>BIN_DIGIT : [<code class=\"hljs\">0</code>-<code class=\"hljs\">1</code>]</p>\n<p>OCT_DIGIT : [<code class=\"hljs\">0</code>-<code class=\"hljs\">7</code>]</p>\n<p>DEC_DIGIT : [<code class=\"hljs\">0</code>-<code class=\"hljs\">9</code>]</p>\n<p>HEX_DIGIT : [<code class=\"hljs\">0</code>-<code class=\"hljs\">9</code> <code class=\"hljs\">a</code>-<code class=\"hljs\">f</code> <code class=\"hljs\">A</code>-<code class=\"hljs\">F</code>]</p>\n</blockquote>\n<p>An <em>integer literal</em> has one of four forms:</p>\n<ul>\n<li>A <em>decimal literal</em> starts with a <em>decimal digit</em> and continues with any\nmixture of <em>decimal digits</em> and <em>underscores</em>.</li>\n<li>A <em>hex literal</em> starts with the character sequence <code class=\"hljs\">U+0030</code> <code class=\"hljs\">U+0078</code>\n(<code class=\"hljs\">0x</code>) and continues as any mixture (with at least one digit) of hex digits\nand underscores.</li>\n<li>An <em>octal literal</em> starts with the character sequence <code class=\"hljs\">U+0030</code> <code class=\"hljs\">U+006F</code>\n(<code class=\"hljs\">0o</code>) and continues as any mixture (with at least one digit) of octal digits\nand underscores.</li>\n<li>A <em>binary literal</em> starts with the character sequence <code class=\"hljs\">U+0030</code> <code class=\"hljs\">U+0062</code>\n(<code class=\"hljs\">0b</code>) and continues as any mixture (with at least one digit) of binary digits\nand underscores.</li>\n</ul>\n<p>Like any literal, an integer literal may be followed (immediately, without any spaces) by a suffix as described above.\nThe suffix may not begin with <code class=\"hljs\">e</code> or <code class=\"hljs\">E</code>, as that would be interpreted as the exponent of a floating-point literal.\nSee <a href=\"expressions/literal-expr.html#integer-literal-expressions\">Integer literal expressions</a> for the effect of these suffixes.</p>\n<p>Examples of integer literals which are accepted as literal expressions:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-meta\">#![allow(overflowing_literals)]</span>\n</span><span class=\"hljs-number\">123</span>;\n<span class=\"hljs-number\">123i32</span>;\n<span class=\"hljs-number\">123u32</span>;\n<span class=\"hljs-number\">123_u32</span>;\n\n<span class=\"hljs-number\">0xff</span>;\n<span class=\"hljs-number\">0xff_u8</span>;\n<span class=\"hljs-number\">0x01_f32</span>; <span class=\"hljs-comment\">// integer 7986, not floating-point 1.0</span>\n<span class=\"hljs-number\">0x01_e3</span>;  <span class=\"hljs-comment\">// integer 483, not floating-point 1000.0</span>\n\n<span class=\"hljs-number\">0o70</span>;\n<span class=\"hljs-number\">0o70_i16</span>;\n\n<span class=\"hljs-number\">0b1111_1111_1001_0000</span>;\n<span class=\"hljs-number\">0b1111_1111_1001_0000i64</span>;\n<span class=\"hljs-number\">0b________1</span>;\n\n<span class=\"hljs-number\">0usize</span>;\n\n<span class=\"hljs-comment\">// These are too big for their type, but are accepted as literal expressions.</span>\n<span class=\"hljs-number\">128_i8</span>;\n<span class=\"hljs-number\">256_u8</span>;\n\n<span class=\"hljs-comment\">// This is an integer literal, accepted as a floating-point literal expression.</span>\n<span class=\"hljs-number\">5f32</span>;\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Note that <code class=\"hljs\">-1i8</code>, for example, is analyzed as two tokens: <code class=\"hljs\">-</code> followed by <code class=\"hljs\">1i8</code>.</p>\n<p>Examples of integer literals which are not accepted as literal expressions:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-meta\">#[cfg(FALSE)]</span> {\n</span><span class=\"hljs-number\">0</span>invalidSuffix;\n<span class=\"hljs-number\">123</span>AFB43;\n<span class=\"hljs-number\">0b010</span>a;\n<span class=\"hljs-number\">0xAB_CD_EF_</span>GH;\n<span class=\"hljs-number\">0b1111_f32</span>;\n<span class=\"boring\">}\n</span><span class=\"boring\">}</span></code></pre></pre>\n<h4 id=\"tuple-index\"><a class=\"header\" href=\"#tuple-index\">Tuple index</a></h4>\n<blockquote>\n<p><strong><sup>Lexer</sup></strong><br>\nTUPLE_INDEX: <br>\n&nbsp;&nbsp; INTEGER_LITERAL</p>\n</blockquote>\n<p>A tuple index is used to refer to the fields of <a href=\"types/tuple.html\">tuples</a>, <a href=\"items/structs.html\">tuple structs</a>, and\n<a href=\"items/enumerations.html\">tuple variants</a>.</p>\n<p>Tuple indices are compared with the literal token directly. Tuple indices\nstart with <code class=\"hljs\">0</code> and each successive index increments the value by <code class=\"hljs\">1</code> as a\ndecimal value. Thus, only decimal values will match, and the value must not\nhave any extra <code class=\"hljs\">0</code> prefix characters.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> example = (<span class=\"hljs-string\">\"dog\"</span>, <span class=\"hljs-string\">\"cat\"</span>, <span class=\"hljs-string\">\"horse\"</span>);\n<span class=\"hljs-keyword\">let</span> dog = example.<span class=\"hljs-number\">0</span>;\n<span class=\"hljs-keyword\">let</span> cat = example.<span class=\"hljs-number\">1</span>;\n<span class=\"hljs-comment\">// The following examples are invalid.</span>\n<span class=\"hljs-keyword\">let</span> cat = example.<span class=\"hljs-number\">01</span>;  <span class=\"hljs-comment\">// ERROR no field named `01`</span>\n<span class=\"hljs-keyword\">let</span> horse = example.<span class=\"hljs-number\">0b10</span>;  <span class=\"hljs-comment\">// ERROR no field named `0b10`</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<blockquote>\n<p><strong>Note</strong>: Tuple indices may include certain suffixes, but this is not intended to be valid, and may be removed in a future version.\nSee <a href=\"https://github.com/rust-lang/rust/issues/60210\">https://github.com/rust-lang/rust/issues/60210</a> for more information.</p>\n</blockquote>\n<h4 id=\"floating-point-literals\"><a class=\"header\" href=\"#floating-point-literals\">Floating-point literals</a></h4>\n<blockquote>\n<p><strong><sup>Lexer</sup></strong><br>\nFLOAT_LITERAL :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; DEC_LITERAL <code class=\"hljs\">.</code>\n<em>(not immediately followed by <code class=\"hljs\">.</code>, <code class=\"hljs\">_</code> or an XID_Start character)</em><br>\n&nbsp;&nbsp; | DEC_LITERAL <code class=\"hljs\">.</code> DEC_LITERAL SUFFIX_NO_E<sup>?</sup><br>\n&nbsp;&nbsp; | DEC_LITERAL (<code class=\"hljs\">.</code> DEC_LITERAL)<sup>?</sup> FLOAT_EXPONENT SUFFIX<sup>?</sup></p>\n<p>FLOAT_EXPONENT :<br>\n&nbsp;&nbsp; (<code class=\"hljs\">e</code>|<code class=\"hljs\">E</code>) (<code class=\"hljs\">+</code>|<code class=\"hljs\">-</code>)<sup>?</sup>\n(DEC_DIGIT|<code class=\"hljs\">_</code>)<sup>*</sup> DEC_DIGIT (DEC_DIGIT|<code class=\"hljs\">_</code>)<sup>*</sup></p>\n</blockquote>\n<p>A <em>floating-point literal</em> has one of two forms:</p>\n<ul>\n<li>A <em>decimal literal</em> followed by a period character <code class=\"hljs\">U+002E</code> (<code class=\"hljs\">.</code>). This is\noptionally followed by another decimal literal, with an optional <em>exponent</em>.</li>\n<li>A single <em>decimal literal</em> followed by an <em>exponent</em>.</li>\n</ul>\n<p>Like integer literals, a floating-point literal may be followed by a\nsuffix, so long as the pre-suffix part does not end with <code class=\"hljs\">U+002E</code> (<code class=\"hljs\">.</code>).\nThe suffix may not begin with <code class=\"hljs\">e</code> or <code class=\"hljs\">E</code> if the literal does not include an exponent.\nSee <a href=\"expressions/literal-expr.html#floating-point-literal-expressions\">Floating-point literal expressions</a> for the effect of these suffixes.</p>\n<p>Examples of floating-point literals which are accepted as literal expressions:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-number\">123.0f64</span>;\n<span class=\"hljs-number\">0.1f64</span>;\n<span class=\"hljs-number\">0.1f32</span>;\n<span class=\"hljs-number\">12E+99_f64</span>;\n<span class=\"hljs-keyword\">let</span> x: <span class=\"hljs-built_in\">f64</span> = <span class=\"hljs-number\">2</span>.;\n<span class=\"boring\">}</span></code></pre></pre>\n<p>This last example is different because it is not possible to use the suffix\nsyntax with a floating point literal ending in a period. <code class=\"hljs\">2.f64</code> would attempt\nto call a method named <code class=\"hljs\">f64</code> on <code class=\"hljs\">2</code>.</p>\n<p>Note that <code class=\"hljs\">-1.0</code>, for example, is analyzed as two tokens: <code class=\"hljs\">-</code> followed by <code class=\"hljs\">1.0</code>.</p>\n<p>Examples of floating-point literals which are not accepted as literal expressions:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-meta\">#[cfg(FALSE)]</span> {\n</span><span class=\"hljs-number\">2.0</span>f80;\n<span class=\"hljs-number\">2e5</span>f80;\n<span class=\"hljs-number\">2e5</span>e6;\n<span class=\"hljs-number\">2.0e5</span>e6;\n<span class=\"hljs-number\">1.3e10u64</span>;\n<span class=\"boring\">}\n</span><span class=\"boring\">}</span></code></pre></pre>\n<h4 id=\"reserved-forms-similar-to-number-literals\"><a class=\"header\" href=\"#reserved-forms-similar-to-number-literals\">Reserved forms similar to number literals</a></h4>\n<blockquote>\n<p><strong><sup>Lexer</sup></strong><br>\nRESERVED_NUMBER :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; BIN_LITERAL [<code class=\"hljs\">2</code>-<code class=\"hljs\">9</code>​]<br>\n&nbsp;&nbsp; | OCT_LITERAL [<code class=\"hljs\">8</code>-<code class=\"hljs\">9</code>​]<br>\n&nbsp;&nbsp; | ( BIN_LITERAL | OCT_LITERAL | HEX_LITERAL ) <code class=\"hljs\">.</code> <br>\n&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; <em>(not immediately followed by <code class=\"hljs\">.</code>, <code class=\"hljs\">_</code> or an XID_Start character)</em><br>\n&nbsp;&nbsp; | ( BIN_LITERAL | OCT_LITERAL ) (<code class=\"hljs\">e</code>|<code class=\"hljs\">E</code>)<br>\n&nbsp;&nbsp; | <code class=\"hljs\">0b</code> <code class=\"hljs\">_</code><sup>*</sup> <em>end of input or not BIN_DIGIT</em><br>\n&nbsp;&nbsp; | <code class=\"hljs\">0o</code> <code class=\"hljs\">_</code><sup>*</sup> <em>end of input or not OCT_DIGIT</em><br>\n&nbsp;&nbsp; | <code class=\"hljs\">0x</code> <code class=\"hljs\">_</code><sup>*</sup> <em>end of input or not HEX_DIGIT</em><br>\n&nbsp;&nbsp; | DEC_LITERAL ( . DEC_LITERAL)<sup>?</sup> (<code class=\"hljs\">e</code>|<code class=\"hljs\">E</code>) (<code class=\"hljs\">+</code>|<code class=\"hljs\">-</code>)<sup>?</sup> <em>end of input or not DEC_DIGIT</em></p>\n</blockquote>\n<p>The following lexical forms similar to number literals are <em>reserved forms</em>.\nDue to the possible ambiguity these raise, they are rejected by the tokenizer instead of being interpreted as separate tokens.</p>\n<ul>\n<li>\n<p>An unsuffixed binary or octal literal followed, without intervening whitespace, by a decimal digit out of the range for its radix.</p>\n</li>\n<li>\n<p>An unsuffixed binary, octal, or hexadecimal literal followed, without intervening whitespace, by a period character (with the same restrictions on what follows the period as for floating-point literals).</p>\n</li>\n<li>\n<p>An unsuffixed binary or octal literal followed, without intervening whitespace, by the character <code class=\"hljs\">e</code> or <code class=\"hljs\">E</code>.</p>\n</li>\n<li>\n<p>Input which begins with one of the radix prefixes but is not a valid binary, octal, or hexadecimal literal (because it contains no digits).</p>\n</li>\n<li>\n<p>Input which has the form of a floating-point literal with no digits in the exponent.</p>\n</li>\n</ul>\n<p>Examples of reserved forms:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust compile_fail edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-number\">0b010</span>2;  <span class=\"hljs-comment\">// this is not `0b010` followed by `2`</span>\n<span class=\"hljs-number\">0o127</span>9;  <span class=\"hljs-comment\">// this is not `0o127` followed by `9`</span>\n<span class=\"hljs-number\">0x80</span>.<span class=\"hljs-number\">0</span>;  <span class=\"hljs-comment\">// this is not `0x80` followed by `.` and `0`</span>\n<span class=\"hljs-number\">0b101</span>e;  <span class=\"hljs-comment\">// this is not a suffixed literal, or `0b101` followed by `e`</span>\n<span class=\"hljs-number\">0</span>b;      <span class=\"hljs-comment\">// this is not an integer literal, or `0` followed by `b`</span>\n<span class=\"hljs-number\">0b_</span>;     <span class=\"hljs-comment\">// this is not an integer literal, or `0` followed by `b_`</span>\n<span class=\"hljs-number\">2</span>e;      <span class=\"hljs-comment\">// this is not a floating-point literal, or `2` followed by `e`</span>\n<span class=\"hljs-number\">2.0</span>e;    <span class=\"hljs-comment\">// this is not a floating-point literal, or `2.0` followed by `e`</span>\n<span class=\"hljs-number\">2</span>em;     <span class=\"hljs-comment\">// this is not a suffixed literal, or `2` followed by `em`</span>\n<span class=\"hljs-number\">2.0</span>em;   <span class=\"hljs-comment\">// this is not a suffixed literal, or `2.0` followed by `em`</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<h2 id=\"lifetimes-and-loop-labels\"><a class=\"header\" href=\"#lifetimes-and-loop-labels\">Lifetimes and loop labels</a></h2>\n<blockquote>\n<p><strong><sup>Lexer</sup></strong><br>\nLIFETIME_TOKEN :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <code class=\"hljs\">'</code> <a href=\"identifiers.html\">IDENTIFIER_OR_KEYWORD</a>\n<em>(not immediately followed by <code class=\"hljs\">'</code>)</em><br>\n&nbsp;&nbsp; | <code class=\"hljs\">'_</code>\n<em>(not immediately followed by <code class=\"hljs\">'</code>)</em></p>\n<p>LIFETIME_OR_LABEL :<br>\n&nbsp;&nbsp; &nbsp;&nbsp; <code class=\"hljs\">'</code> <a href=\"identifiers.html\">NON_KEYWORD_IDENTIFIER</a>\n<em>(not immediately followed by <code class=\"hljs\">'</code>)</em></p>\n</blockquote>\n<p>Lifetime parameters and <a href=\"expressions/loop-expr.html\">loop labels</a> use LIFETIME_OR_LABEL tokens. Any\nLIFETIME_TOKEN will be accepted by the lexer, and for example, can be used in\nmacros.</p>\n<h2 id=\"punctuation\"><a class=\"header\" href=\"#punctuation\">Punctuation</a></h2>\n<p>Punctuation symbol tokens are listed here for completeness. Their individual\nusages and meanings are defined in the linked pages.</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Symbol</th><th>Name</th><th>Usage</th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">+</code></td><td>Plus</td><td><a href=\"expressions/operator-expr.html#arithmetic-and-logical-binary-operators\">Addition</a>, <a href=\"trait-bounds.html\">Trait Bounds</a>, <a href=\"macros-by-example.html\">Macro Kleene Matcher</a></td></tr>\n<tr><td><code class=\"hljs\">-</code></td><td>Minus</td><td><a href=\"expressions/operator-expr.html#arithmetic-and-logical-binary-operators\">Subtraction</a>, <a href=\"expressions/operator-expr.html#negation-operators\">Negation</a></td></tr>\n<tr><td><code class=\"hljs\">*</code></td><td>Star</td><td><a href=\"expressions/operator-expr.html#arithmetic-and-logical-binary-operators\">Multiplication</a>, <a href=\"expressions/operator-expr.html#the-dereference-operator\">Dereference</a>, <a href=\"types/pointer.html#raw-pointers-const-and-mut\">Raw Pointers</a>, <a href=\"macros-by-example.html\">Macro Kleene Matcher</a>, <a href=\"items/use-declarations.html\">Use wildcards</a></td></tr>\n<tr><td><code class=\"hljs\">/</code></td><td>Slash</td><td><a href=\"expressions/operator-expr.html#arithmetic-and-logical-binary-operators\">Division</a></td></tr>\n<tr><td><code class=\"hljs\">%</code></td><td>Percent</td><td><a href=\"expressions/operator-expr.html#arithmetic-and-logical-binary-operators\">Remainder</a></td></tr>\n<tr><td><code class=\"hljs\">^</code></td><td>Caret</td><td><a href=\"expressions/operator-expr.html#arithmetic-and-logical-binary-operators\">Bitwise and Logical XOR</a></td></tr>\n<tr><td><code class=\"hljs\">!</code></td><td>Not</td><td><a href=\"expressions/operator-expr.html#negation-operators\">Bitwise and Logical NOT</a>, <a href=\"macros-by-example.html\">Macro Calls</a>, <a href=\"attributes.html\">Inner Attributes</a>, <a href=\"types/never.html\">Never Type</a>, <a href=\"items/implementations.html\">Negative impls</a></td></tr>\n<tr><td><code class=\"hljs\">&amp;</code></td><td>And</td><td><a href=\"expressions/operator-expr.html#arithmetic-and-logical-binary-operators\">Bitwise and Logical AND</a>, <a href=\"expressions/operator-expr.html#borrow-operators\">Borrow</a>, <a href=\"types/pointer.html\">References</a>, <a href=\"patterns.html#reference-patterns\">Reference patterns</a></td></tr>\n<tr><td><code class=\"hljs\">|</code></td><td>Or</td><td><a href=\"expressions/operator-expr.html#arithmetic-and-logical-binary-operators\">Bitwise and Logical OR</a>, <a href=\"expressions/closure-expr.html\">Closures</a>, Patterns in <a href=\"expressions/match-expr.html\">match</a>, <a href=\"expressions/if-expr.html#if-let-expressions\">if let</a>, and <a href=\"expressions/loop-expr.html#predicate-pattern-loops\">while let</a></td></tr>\n<tr><td><code class=\"hljs\">&amp;&amp;</code></td><td>AndAnd</td><td><a href=\"expressions/operator-expr.html#lazy-boolean-operators\">Lazy AND</a>, <a href=\"expressions/operator-expr.html#borrow-operators\">Borrow</a>, <a href=\"types/pointer.html\">References</a>, <a href=\"patterns.html#reference-patterns\">Reference patterns</a></td></tr>\n<tr><td><code class=\"hljs\">||</code></td><td>OrOr</td><td><a href=\"expressions/operator-expr.html#lazy-boolean-operators\">Lazy OR</a>, <a href=\"expressions/closure-expr.html\">Closures</a></td></tr>\n<tr><td><code class=\"hljs\">&lt;&lt;</code></td><td>Shl</td><td><a href=\"expressions/operator-expr.html#arithmetic-and-logical-binary-operators\">Shift Left</a>, <a href=\"items/generics.html\">Nested Generics</a></td></tr>\n<tr><td><code class=\"hljs\">&gt;&gt;</code></td><td>Shr</td><td><a href=\"expressions/operator-expr.html#arithmetic-and-logical-binary-operators\">Shift Right</a>, <a href=\"items/generics.html\">Nested Generics</a></td></tr>\n<tr><td><code class=\"hljs\">+=</code></td><td>PlusEq</td><td><a href=\"expressions/operator-expr.html#compound-assignment-expressions\">Addition assignment</a></td></tr>\n<tr><td><code class=\"hljs\">-=</code></td><td>MinusEq</td><td><a href=\"expressions/operator-expr.html#compound-assignment-expressions\">Subtraction assignment</a></td></tr>\n<tr><td><code class=\"hljs\">*=</code></td><td>StarEq</td><td><a href=\"expressions/operator-expr.html#compound-assignment-expressions\">Multiplication assignment</a></td></tr>\n<tr><td><code class=\"hljs\">/=</code></td><td>SlashEq</td><td><a href=\"expressions/operator-expr.html#compound-assignment-expressions\">Division assignment</a></td></tr>\n<tr><td><code class=\"hljs\">%=</code></td><td>PercentEq</td><td><a href=\"expressions/operator-expr.html#compound-assignment-expressions\">Remainder assignment</a></td></tr>\n<tr><td><code class=\"hljs\">^=</code></td><td>CaretEq</td><td><a href=\"expressions/operator-expr.html#compound-assignment-expressions\">Bitwise XOR assignment</a></td></tr>\n<tr><td><code class=\"hljs\">&amp;=</code></td><td>AndEq</td><td><a href=\"expressions/operator-expr.html#compound-assignment-expressions\">Bitwise And assignment</a></td></tr>\n<tr><td><code class=\"hljs\">|=</code></td><td>OrEq</td><td><a href=\"expressions/operator-expr.html#compound-assignment-expressions\">Bitwise Or assignment</a></td></tr>\n<tr><td><code class=\"hljs\">&lt;&lt;=</code></td><td>ShlEq</td><td><a href=\"expressions/operator-expr.html#compound-assignment-expressions\">Shift Left assignment</a></td></tr>\n<tr><td><code class=\"hljs\">&gt;&gt;=</code></td><td>ShrEq</td><td><a href=\"expressions/operator-expr.html#compound-assignment-expressions\">Shift Right assignment</a>, <a href=\"items/generics.html\">Nested Generics</a></td></tr>\n<tr><td><code class=\"hljs\">=</code></td><td>Eq</td><td><a href=\"expressions/operator-expr.html#assignment-expressions\">Assignment</a>, <a href=\"attributes.html\">Attributes</a>, Various type definitions</td></tr>\n<tr><td><code class=\"hljs\">==</code></td><td>EqEq</td><td><a href=\"expressions/operator-expr.html#comparison-operators\">Equal</a></td></tr>\n<tr><td><code class=\"hljs\">!=</code></td><td>Ne</td><td><a href=\"expressions/operator-expr.html#comparison-operators\">Not Equal</a></td></tr>\n<tr><td><code class=\"hljs\">&gt;</code></td><td>Gt</td><td><a href=\"expressions/operator-expr.html#comparison-operators\">Greater than</a>, <a href=\"items/generics.html\">Generics</a>, <a href=\"paths.html\">Paths</a></td></tr>\n<tr><td><code class=\"hljs\">&lt;</code></td><td>Lt</td><td><a href=\"expressions/operator-expr.html#comparison-operators\">Less than</a>, <a href=\"items/generics.html\">Generics</a>, <a href=\"paths.html\">Paths</a></td></tr>\n<tr><td><code class=\"hljs\">&gt;=</code></td><td>Ge</td><td><a href=\"expressions/operator-expr.html#comparison-operators\">Greater than or equal to</a>, <a href=\"items/generics.html\">Generics</a></td></tr>\n<tr><td><code class=\"hljs\">&lt;=</code></td><td>Le</td><td><a href=\"expressions/operator-expr.html#comparison-operators\">Less than or equal to</a></td></tr>\n<tr><td><code class=\"hljs\">@</code></td><td>At</td><td><a href=\"patterns.html#identifier-patterns\">Subpattern binding</a></td></tr>\n<tr><td><code class=\"hljs\">_</code></td><td>Underscore</td><td><a href=\"patterns.html#wildcard-pattern\">Wildcard patterns</a>, <a href=\"types/inferred.html\">Inferred types</a>, Unnamed items in <a href=\"items/constant-items.html\">constants</a>, <a href=\"items/extern-crates.html\">extern crates</a>, <a href=\"items/use-declarations.html\">use declarations</a>, and <a href=\"expressions/underscore-expr.html\">destructuring assignment</a></td></tr>\n<tr><td><code class=\"hljs\">.</code></td><td>Dot</td><td><a href=\"expressions/field-expr.html\">Field access</a>, <a href=\"expressions/tuple-expr.html#tuple-indexing-expressions\">Tuple index</a></td></tr>\n<tr><td><code class=\"hljs\">..</code></td><td>DotDot</td><td><a href=\"expressions/range-expr.html\">Range</a>, <a href=\"expressions/struct-expr.html\">Struct expressions</a>, <a href=\"patterns.html\">Patterns</a>, <a href=\"patterns.html#range-patterns\">Range Patterns</a></td></tr>\n<tr><td><code class=\"hljs\">...</code></td><td>DotDotDot</td><td><a href=\"items/external-blocks.html\">Variadic functions</a>, <a href=\"patterns.html#range-patterns\">Range patterns</a></td></tr>\n<tr><td><code class=\"hljs\">..=</code></td><td>DotDotEq</td><td><a href=\"expressions/range-expr.html\">Inclusive Range</a>, <a href=\"patterns.html#range-patterns\">Range patterns</a></td></tr>\n<tr><td><code class=\"hljs\">,</code></td><td>Comma</td><td>Various separators</td></tr>\n<tr><td><code class=\"hljs\">;</code></td><td>Semi</td><td>Terminator for various items and statements, <a href=\"types/array.html\">Array types</a></td></tr>\n<tr><td><code class=\"hljs\">:</code></td><td>Colon</td><td>Various separators</td></tr>\n<tr><td><code class=\"hljs\">::</code></td><td>PathSep</td><td><a href=\"paths.html\">Path separator</a></td></tr>\n<tr><td><code class=\"hljs\">-&gt;</code></td><td>RArrow</td><td><a href=\"items/functions.html\">Function return type</a>, <a href=\"expressions/closure-expr.html\">Closure return type</a>, <a href=\"types/function-pointer.html\">Function pointer type</a></td></tr>\n<tr><td><code class=\"hljs\">=&gt;</code></td><td>FatArrow</td><td><a href=\"expressions/match-expr.html\">Match arms</a>, <a href=\"macros-by-example.html\">Macros</a></td></tr>\n<tr><td><code class=\"hljs\">&lt;-</code></td><td>LArrow</td><td>The left arrow symbol has been unused since before Rust 1.0, but it is still treated as a single token</td></tr>\n<tr><td><code class=\"hljs\">#</code></td><td>Pound</td><td><a href=\"attributes.html\">Attributes</a></td></tr>\n<tr><td><code class=\"hljs\">$</code></td><td>Dollar</td><td><a href=\"macros-by-example.html\">Macros</a></td></tr>\n<tr><td><code class=\"hljs\">?</code></td><td>Question</td><td><a href=\"expressions/operator-expr.html#the-question-mark-operator\">Question mark operator</a>, <a href=\"trait-bounds.html#sized\">Questionably sized</a>, <a href=\"macros-by-example.html\">Macro Kleene Matcher</a></td></tr>\n<tr><td><code class=\"hljs\">~</code></td><td>Tilde</td><td>The tilde operator has been unused since before Rust 1.0, but its token may still be used</td></tr>\n</tbody></table>\n</div>\n<h2 id=\"delimiters\"><a class=\"header\" href=\"#delimiters\">Delimiters</a></h2>\n<p>Bracket punctuation is used in various parts of the grammar. An open bracket\nmust always be paired with a close bracket. Brackets and the tokens within\nthem are referred to as \"token trees\" in <a href=\"macros-by-example.html\">macros</a>.  The three types of brackets are:</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Bracket</th><th>Type</th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">{</code> <code class=\"hljs\">}</code></td><td>Curly braces</td></tr>\n<tr><td><code class=\"hljs\">[</code> <code class=\"hljs\">]</code></td><td>Square brackets</td></tr>\n<tr><td><code class=\"hljs\">(</code> <code class=\"hljs\">)</code></td><td>Parentheses</td></tr>\n</tbody></table>\n</div>\n<h2 id=\"reserved-prefixes\"><a class=\"header\" href=\"#reserved-prefixes\">Reserved prefixes</a></h2>\n<blockquote>\n<p><strong><sup>Lexer 2021+</sup></strong><br>\nRESERVED_TOKEN_DOUBLE_QUOTE : ( IDENTIFIER_OR_KEYWORD <sub><em>Except <code class=\"hljs\">b</code> or <code class=\"hljs\">c</code> or <code class=\"hljs\">r</code> or <code class=\"hljs\">br</code> or <code class=\"hljs\">cr</code></em></sub> | <code class=\"hljs\">_</code> ) <code class=\"hljs\">\"</code><br>\nRESERVED_TOKEN_SINGLE_QUOTE : ( IDENTIFIER_OR_KEYWORD <sub><em>Except <code class=\"hljs\">b</code></em></sub> | <code class=\"hljs\">_</code> ) <code class=\"hljs\">'</code><br>\nRESERVED_TOKEN_POUND : ( IDENTIFIER_OR_KEYWORD <sub><em>Except <code class=\"hljs\">r</code> or <code class=\"hljs\">br</code> or <code class=\"hljs\">cr</code></em></sub> | <code class=\"hljs\">_</code> ) <code class=\"hljs\">#</code></p>\n</blockquote>\n<p>Some lexical forms known as <em>reserved prefixes</em> are reserved for future use.</p>\n<p>Source input which would otherwise be lexically interpreted as a non-raw identifier (or a keyword or <code class=\"hljs\">_</code>) which is immediately followed by a <code class=\"hljs\">#</code>, <code class=\"hljs\">'</code>, or <code class=\"hljs\">\"</code> character (without intervening whitespace) is identified as a reserved prefix.</p>\n<p>Note that raw identifiers, raw string literals, and raw byte string literals may contain a <code class=\"hljs\">#</code> character but are not interpreted as containing a reserved prefix.</p>\n<p>Similarly the <code class=\"hljs\">r</code>, <code class=\"hljs\">b</code>, <code class=\"hljs\">br</code>, <code class=\"hljs\">c</code>, and <code class=\"hljs\">cr</code> prefixes used in raw string literals, byte literals, byte string literals, raw byte string literals, C string literals, and raw C string literals are not interpreted as reserved prefixes.</p>\n<blockquote>\n<p><strong>Edition Differences</strong>: Starting with the 2021 edition, reserved prefixes are reported as an error by the lexer (in particular, they cannot be passed to macros).</p>\n<p>Before the 2021 edition, reserved prefixes are accepted by the lexer and interpreted as multiple tokens (for example, one token for the identifier or keyword, followed by a <code class=\"hljs\">#</code> token).</p>\n<p>Examples accepted in all editions:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-built_in\">macro_rules!</span> lexes {($($_:tt)*) =&gt; {}}\nlexes!{a #foo}\nlexes!{<span class=\"hljs-keyword\">continue</span> <span class=\"hljs-symbol\">'foo</span>}\nlexes!{<span class=\"hljs-keyword\">match</span> <span class=\"hljs-string\">\"...\"</span> {}}\nlexes!{r#<span class=\"hljs-keyword\">let</span>#foo}         <span class=\"hljs-comment\">// three tokens: r#let # foo</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Examples accepted before the 2021 edition but rejected later:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2018 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-built_in\">macro_rules!</span> lexes {($($_:tt)*) =&gt; {}}\nlexes!{a#foo}\nlexes!{<span class=\"hljs-keyword\">continue</span><span class=\"hljs-symbol\">'foo</span>}\nlexes!{<span class=\"hljs-keyword\">match</span><span class=\"hljs-string\">\"...\"</span> {}}\n<span class=\"boring\">}</span></code></pre></pre>\n</blockquote>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"whitespace.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"macros.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"whitespace.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"macros.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"elasticlunr.min.js\"></script>\n        <script src=\"mark.min.js\"></script>\n        <script src=\"searcher.js\"></script>\n\n        <script src=\"clipboard.min.js\"></script>\n        <script src=\"highlight.js\"></script>\n        <script src=\"book.js\"></script>\n\n        <!-- Custom JS scripts -->\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:12:48.413Z"
}