{
	"title": "abort in std::process - Rust",
	"url": "https://doc.rust-lang.org/stable/std/process/fn.abort.html",
	"markdown": "# abort in std::process - Rust\n\n## Function [std](../index.html)::[process](index.html)::[abort](#)\n\n1.17.0 · [source](about:blank/src/std/process.rs.html#2368-2370) ·\n\n```\npub fn abort() -> !\n```\n\nExpand description\n\nTerminates the process in an abnormal fashion.\n\nThe function will never return and will immediately terminate the current process in a platform specific “abnormal” manner.\n\nNote that because this function never returns, and that it terminates the process, no destructors on the current stack or any other thread’s stack will be run.\n\nRust IO buffers (eg, from `BufWriter`) will not be flushed. Likewise, C stdio buffers will (on most platforms) not be flushed.\n\nThis is in contrast to the default behaviour of [`panic!`](../macro.panic.html \"macro std::panic\") which unwinds the current thread’s stack and calls all destructors. When `panic=\"abort\"` is set, either as an argument to `rustc` or in a crate’s Cargo.toml, [`panic!`](../macro.panic.html \"macro std::panic\") and `abort` are similar. However, [`panic!`](../macro.panic.html \"macro std::panic\") will still call the [panic hook](../panic/fn.set_hook.html \"fn std::panic::set_hook\") while `abort` will not.\n\nIf a clean shutdown is needed it is recommended to only call this function at a known point where there are no more destructors left to run.\n\nThe process’s termination will be similar to that from the C `abort()` function. On Unix, the process will terminate with signal `SIGABRT`, which typically means that the shell prints “Aborted”.\n\n## [§](#examples)Examples\n\n```\nuse std::process;\n\nfn main() {\n    println!(\"aborting\");\n\n    process::abort();\n\n    // execution never gets here\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::process;%0A%0Afn+main()+%7B%0A++++println!(%22aborting%22);%0A%0A++++process::abort();%0A%0A++++//+execution+never+gets+here%0A%7D&edition=2021)\n\nThe `abort` function terminates the process, so the destructor will not get run on the example below:\n\n```\nuse std::process;\n\nstruct HasDrop;\n\nimpl Drop for HasDrop {\n    fn drop(&mut self) {\n        println!(\"This will never be printed!\");\n    }\n}\n\nfn main() {\n    let _x = HasDrop;\n    process::abort();\n    // the destructor implemented for HasDrop will never get run\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::process;%0A%0Astruct+HasDrop;%0A%0Aimpl+Drop+for+HasDrop+%7B%0A++++fn+drop(%26mut+self)+%7B%0A++++++++println!(%22This+will+never+be+printed!%22);%0A++++%7D%0A%7D%0A%0Afn+main()+%7B%0A++++let+_x+=+HasDrop;%0A++++process::abort();%0A++++//+the+destructor+implemented+for+HasDrop+will+never+get+run%0A%7D&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Terminates the process in an abnormal fashion.\"><title>abort in std::process - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc fn\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h2><a href=\"index.html\">In std::process</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Child.html\">Child</a></li><li><a href=\"struct.ChildStderr.html\">ChildStderr</a></li><li><a href=\"struct.ChildStdin.html\">ChildStdin</a></li><li><a href=\"struct.ChildStdout.html\">ChildStdout</a></li><li><a href=\"struct.Command.html\">Command</a></li><li><a href=\"struct.CommandArgs.html\">CommandArgs</a></li><li><a href=\"struct.CommandEnvs.html\">CommandEnvs</a></li><li><a href=\"struct.ExitCode.html\">ExitCode</a></li><li><a href=\"struct.ExitStatus.html\">ExitStatus</a></li><li><a href=\"struct.ExitStatusError.html\">ExitStatusError</a></li><li><a href=\"struct.Output.html\">Output</a></li><li><a href=\"struct.Stdio.html\">Stdio</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.Termination.html\">Termination</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.abort.html\">abort</a></li><li><a href=\"fn.exit.html\">exit</a></li><li><a href=\"fn.id.html\">id</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Function <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">process</a>::<wbr><a class=\"fn\" href=\"#\">abort</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.17.0\">1.17.0</span> · <a class=\"src\" href=\"../../src/std/process.rs.html#2368-2370\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub fn abort() -&gt; <a class=\"primitive\" href=\"../primitive.never.html\">!</a></code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Terminates the process in an abnormal fashion.</p>\n<p>The function will never return and will immediately terminate the current\nprocess in a platform specific “abnormal” manner.</p>\n<p>Note that because this function never returns, and that it terminates the\nprocess, no destructors on the current stack or any other thread’s stack\nwill be run.</p>\n<p>Rust IO buffers (eg, from <code>BufWriter</code>) will not be flushed.\nLikewise, C stdio buffers will (on most platforms) not be flushed.</p>\n<p>This is in contrast to the default behaviour of <a href=\"../macro.panic.html\" title=\"macro std::panic\"><code>panic!</code></a> which unwinds\nthe current thread’s stack and calls all destructors.\nWhen <code>panic=\"abort\"</code> is set, either as an argument to <code>rustc</code> or in a\ncrate’s Cargo.toml, <a href=\"../macro.panic.html\" title=\"macro std::panic\"><code>panic!</code></a> and <code>abort</code> are similar. However,\n<a href=\"../macro.panic.html\" title=\"macro std::panic\"><code>panic!</code></a> will still call the <a href=\"../panic/fn.set_hook.html\" title=\"fn std::panic::set_hook\">panic hook</a> while <code>abort</code> will not.</p>\n<p>If a clean shutdown is needed it is recommended to only call\nthis function at a known point where there are no more destructors left\nto run.</p>\n<p>The process’s termination will be similar to that from the C <code>abort()</code>\nfunction.  On Unix, the process will terminate with signal <code>SIGABRT</code>, which\ntypically means that the shell prints “Aborted”.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::process;\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"aborting\"</span>);\n\n    process::abort();\n\n    <span class=\"comment\">// execution never gets here\n</span>}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::process;%0A%0Afn+main()+%7B%0A++++println!(%22aborting%22);%0A%0A++++process::abort();%0A%0A++++//+execution+never+gets+here%0A%7D&amp;edition=2021\">Run</a></div>\n<p>The <code>abort</code> function terminates the process, so the destructor will not\nget run on the example below:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::process;\n\n<span class=\"kw\">struct </span>HasDrop;\n\n<span class=\"kw\">impl </span>Drop <span class=\"kw\">for </span>HasDrop {\n    <span class=\"kw\">fn </span>drop(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"This will never be printed!\"</span>);\n    }\n}\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"kw\">let </span>_x = HasDrop;\n    process::abort();\n    <span class=\"comment\">// the destructor implemented for HasDrop will never get run\n</span>}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::process;%0A%0Astruct+HasDrop;%0A%0Aimpl+Drop+for+HasDrop+%7B%0A++++fn+drop(%26mut+self)+%7B%0A++++++++println!(%22This+will+never+be+printed!%22);%0A++++%7D%0A%7D%0A%0Afn+main()+%7B%0A++++let+_x+=+HasDrop;%0A++++process::abort();%0A++++//+the+destructor+implemented+for+HasDrop+will+never+get+run%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:14:39.825Z"
}