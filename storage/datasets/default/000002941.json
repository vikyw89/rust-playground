{
	"title": "OpenOptionsExt in std::os::wasi::fs - Rust",
	"url": "https://doc.rust-lang.org/stable/std/os/wasi/fs/trait.OpenOptionsExt.html",
	"markdown": "# OpenOptionsExt in std::os::wasi::fs - Rust\n\n```\npub trait OpenOptionsExt {\n    // Required methods\n    fn lookup_flags(&mut self, flags: u32) -> &mut Self;\n    fn directory(&mut self, dir: bool) -> &mut Self;\n    fn dsync(&mut self, dsync: bool) -> &mut Self;\n    fn nonblock(&mut self, nonblock: bool) -> &mut Self;\n    fn rsync(&mut self, rsync: bool) -> &mut Self;\n    fn sync(&mut self, sync: bool) -> &mut Self;\n    fn fs_rights_base(&mut self, rights: u64) -> &mut Self;\n    fn fs_rights_inheriting(&mut self, rights: u64) -> &mut Self;\n    fn open_at<P: AsRef<Path>>(&self, file: &File, path: P) -> Result<File>;\n}\n```\n\nðŸ”¬This is a nightly-only experimental API. (`wasi_ext`Â [#71213](https://github.com/rust-lang/rust/issues/71213))\n\nAvailable on **WASI** only.\n\nExpand description\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#311)\n\nðŸ”¬This is a nightly-only experimental API. (`wasi_ext`Â [#71213](https://github.com/rust-lang/rust/issues/71213))\n\nPass custom `dirflags` argument to `path_open`.\n\nThis option configures the `dirflags` argument to the `path_open` syscall which `OpenOptions` will eventually call. The `dirflags` argument configures how the file is looked up, currently primarily affecting whether symlinks are followed or not.\n\nBy default this value is `__WASI_LOOKUP_SYMLINK_FOLLOW`, or symlinks are followed. You can call this method with 0 to disable following symlinks\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#320)\n\nðŸ”¬This is a nightly-only experimental API. (`wasi_ext`Â [#71213](https://github.com/rust-lang/rust/issues/71213))\n\nIndicates whether `OpenOptions` must open a directory or not.\n\nThis method will configure whether the `__WASI_O_DIRECTORY` flag is passed when opening a file. When passed it will require that the opened path is a directory.\n\nThis option is by default `false`\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#326)\n\nðŸ”¬This is a nightly-only experimental API. (`wasi_ext`Â [#71213](https://github.com/rust-lang/rust/issues/71213))\n\nIndicates whether `__WASI_FDFLAG_DSYNC` is passed in the `fs_flags` field of `path_open`.\n\nThis option is by default `false`\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#332)\n\nðŸ”¬This is a nightly-only experimental API. (`wasi_ext`Â [#71213](https://github.com/rust-lang/rust/issues/71213))\n\nIndicates whether `__WASI_FDFLAG_NONBLOCK` is passed in the `fs_flags` field of `path_open`.\n\nThis option is by default `false`\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#338)\n\nðŸ”¬This is a nightly-only experimental API. (`wasi_ext`Â [#71213](https://github.com/rust-lang/rust/issues/71213))\n\nIndicates whether `__WASI_FDFLAG_RSYNC` is passed in the `fs_flags` field of `path_open`.\n\nThis option is by default `false`\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#344)\n\nðŸ”¬This is a nightly-only experimental API. (`wasi_ext`Â [#71213](https://github.com/rust-lang/rust/issues/71213))\n\nIndicates whether `__WASI_FDFLAG_SYNC` is passed in the `fs_flags` field of `path_open`.\n\nThis option is by default `false`\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#352)\n\nðŸ”¬This is a nightly-only experimental API. (`wasi_ext`Â [#71213](https://github.com/rust-lang/rust/issues/71213))\n\nIndicates the value that should be passed in for the `fs_rights_base` parameter of `path_open`.\n\nThis option defaults based on the `read` and `write` configuration of this `OpenOptions` builder. If this method is called, however, the exact mask passed in will be used instead.\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#360)\n\nðŸ”¬This is a nightly-only experimental API. (`wasi_ext`Â [#71213](https://github.com/rust-lang/rust/issues/71213))\n\nIndicates the value that should be passed in for the `fs_rights_inheriting` parameter of `path_open`.\n\nThe default for this option is the same value as what will be passed for the `fs_rights_base` parameter but if this method is called then the specified value will be used instead.\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#366)\n\nðŸ”¬This is a nightly-only experimental API. (`wasi_ext`Â [#71213](https://github.com/rust-lang/rust/issues/71213))\n\nOpen a file or directory.\n\nThis corresponds to the `path_open` syscall.\n\n[source](about:blank/src/std/os/wasi/fs.rs.html#369-414)[Â§](#impl-OpenOptionsExt-for-OpenOptions)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"WASI-specific extensions to `fs::OpenOptions`.\"><title>OpenOptionsExt in std::os::wasi::fs - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../../../\" data-static-root-path=\"../../../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc trait\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">OpenOptionsExt</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">OpenOptionsExt</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#required-methods\">Required Methods</a></h3><ul class=\"block\"><li><a href=\"#tymethod.directory\">directory</a></li><li><a href=\"#tymethod.dsync\">dsync</a></li><li><a href=\"#tymethod.fs_rights_base\">fs_rights_base</a></li><li><a href=\"#tymethod.fs_rights_inheriting\">fs_rights_inheriting</a></li><li><a href=\"#tymethod.lookup_flags\">lookup_flags</a></li><li><a href=\"#tymethod.nonblock\">nonblock</a></li><li><a href=\"#tymethod.open_at\">open_at</a></li><li><a href=\"#tymethod.rsync\">rsync</a></li><li><a href=\"#tymethod.sync\">sync</a></li></ul><h3><a href=\"#object-safety\">Object Safety</a></h3><h3><a href=\"#implementors\">Implementors</a></h3></section><h2><a href=\"index.html\">In std::os::wasi::fs</a></h2><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.DirEntryExt.html\">DirEntryExt</a></li><li><a href=\"trait.FileExt.html\">FileExt</a></li><li><a href=\"trait.FileTypeExt.html\">FileTypeExt</a></li><li><a href=\"trait.MetadataExt.html\">MetadataExt</a></li><li><a href=\"trait.OpenOptionsExt.html\">OpenOptionsExt</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.link.html\">link</a></li><li><a href=\"fn.rename.html\">rename</a></li><li><a href=\"fn.symlink.html\">symlink</a></li><li><a href=\"fn.symlink_path.html\">symlink_path</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type â€˜Sâ€™ or â€˜/â€™ to search, â€˜?â€™ for more optionsâ€¦\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Trait <a href=\"../../../index.html\">std</a>::<wbr><a href=\"../../index.html\">os</a>::<wbr><a href=\"../index.html\">wasi</a>::<wbr><a href=\"index.html\">fs</a>::<wbr><a class=\"trait\" href=\"#\">OpenOptionsExt</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><a class=\"src\" href=\"../../../../src/std/os/wasi/fs.rs.html#301-367\">source</a> Â· <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>âˆ’</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub trait OpenOptionsExt {\n    // Required methods\n    fn <a href=\"#tymethod.lookup_flags\" class=\"fn\">lookup_flags</a>(&amp;mut self, flags: <a class=\"primitive\" href=\"../../../primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"../../../primitive.reference.html\">&amp;mut Self</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.directory\" class=\"fn\">directory</a>(&amp;mut self, dir: <a class=\"primitive\" href=\"../../../primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"../../../primitive.reference.html\">&amp;mut Self</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.dsync\" class=\"fn\">dsync</a>(&amp;mut self, dsync: <a class=\"primitive\" href=\"../../../primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"../../../primitive.reference.html\">&amp;mut Self</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.nonblock\" class=\"fn\">nonblock</a>(&amp;mut self, nonblock: <a class=\"primitive\" href=\"../../../primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"../../../primitive.reference.html\">&amp;mut Self</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.rsync\" class=\"fn\">rsync</a>(&amp;mut self, rsync: <a class=\"primitive\" href=\"../../../primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"../../../primitive.reference.html\">&amp;mut Self</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.sync\" class=\"fn\">sync</a>(&amp;mut self, sync: <a class=\"primitive\" href=\"../../../primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"../../../primitive.reference.html\">&amp;mut Self</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.fs_rights_base\" class=\"fn\">fs_rights_base</a>(&amp;mut self, rights: <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"../../../primitive.reference.html\">&amp;mut Self</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.fs_rights_inheriting\" class=\"fn\">fs_rights_inheriting</a>(&amp;mut self, rights: <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"../../../primitive.reference.html\">&amp;mut Self</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.open_at\" class=\"fn\">open_at</a>&lt;P: <a class=\"trait\" href=\"../../../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../../../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;&gt;(&amp;self, file: &amp;<a class=\"struct\" href=\"../../../fs/struct.File.html\" title=\"struct std::fs::File\">File</a>, path: P) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"struct\" href=\"../../../fs/struct.File.html\" title=\"struct std::fs::File\">File</a>&gt;;\n}</code></pre><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>wasi_ext</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/71213\">#71213</a>)</span></div><div class=\"stab portability\">Available on <strong>WASI</strong> only.</div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>WASI-specific extensions to <a href=\"../../../fs/struct.OpenOptions.html\" title=\"struct std::fs::OpenOptions\"><code>fs::OpenOptions</code></a>.</p>\n</div></details><h2 id=\"required-methods\" class=\"section-header\">Required Methods<a href=\"#required-methods\" class=\"anchor\">Â§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.lookup_flags\" class=\"method\"><a class=\"src rightside\" href=\"../../../../src/std/os/wasi/fs.rs.html#311\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.lookup_flags\" class=\"fn\">lookup_flags</a>(&amp;mut self, flags: <a class=\"primitive\" href=\"../../../primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"../../../primitive.reference.html\">&amp;mut Self</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>wasi_ext</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/71213\">#71213</a>)</span></div></span></summary><div class=\"docblock\"><p>Pass custom <code>dirflags</code> argument to <code>path_open</code>.</p>\n<p>This option configures the <code>dirflags</code> argument to the\n<code>path_open</code> syscall which <code>OpenOptions</code> will eventually call. The\n<code>dirflags</code> argument configures how the file is looked up, currently\nprimarily affecting whether symlinks are followed or not.</p>\n<p>By default this value is <code>__WASI_LOOKUP_SYMLINK_FOLLOW</code>, or symlinks are\nfollowed. You can call this method with 0 to disable following symlinks</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.directory\" class=\"method\"><a class=\"src rightside\" href=\"../../../../src/std/os/wasi/fs.rs.html#320\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.directory\" class=\"fn\">directory</a>(&amp;mut self, dir: <a class=\"primitive\" href=\"../../../primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"../../../primitive.reference.html\">&amp;mut Self</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>wasi_ext</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/71213\">#71213</a>)</span></div></span></summary><div class=\"docblock\"><p>Indicates whether <code>OpenOptions</code> must open a directory or not.</p>\n<p>This method will configure whether the <code>__WASI_O_DIRECTORY</code> flag is\npassed when opening a file. When passed it will require that the opened\npath is a directory.</p>\n<p>This option is by default <code>false</code></p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.dsync\" class=\"method\"><a class=\"src rightside\" href=\"../../../../src/std/os/wasi/fs.rs.html#326\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.dsync\" class=\"fn\">dsync</a>(&amp;mut self, dsync: <a class=\"primitive\" href=\"../../../primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"../../../primitive.reference.html\">&amp;mut Self</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>wasi_ext</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/71213\">#71213</a>)</span></div></span></summary><div class=\"docblock\"><p>Indicates whether <code>__WASI_FDFLAG_DSYNC</code> is passed in the <code>fs_flags</code>\nfield of <code>path_open</code>.</p>\n<p>This option is by default <code>false</code></p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.nonblock\" class=\"method\"><a class=\"src rightside\" href=\"../../../../src/std/os/wasi/fs.rs.html#332\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.nonblock\" class=\"fn\">nonblock</a>(&amp;mut self, nonblock: <a class=\"primitive\" href=\"../../../primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"../../../primitive.reference.html\">&amp;mut Self</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>wasi_ext</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/71213\">#71213</a>)</span></div></span></summary><div class=\"docblock\"><p>Indicates whether <code>__WASI_FDFLAG_NONBLOCK</code> is passed in the <code>fs_flags</code>\nfield of <code>path_open</code>.</p>\n<p>This option is by default <code>false</code></p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.rsync\" class=\"method\"><a class=\"src rightside\" href=\"../../../../src/std/os/wasi/fs.rs.html#338\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.rsync\" class=\"fn\">rsync</a>(&amp;mut self, rsync: <a class=\"primitive\" href=\"../../../primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"../../../primitive.reference.html\">&amp;mut Self</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>wasi_ext</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/71213\">#71213</a>)</span></div></span></summary><div class=\"docblock\"><p>Indicates whether <code>__WASI_FDFLAG_RSYNC</code> is passed in the <code>fs_flags</code>\nfield of <code>path_open</code>.</p>\n<p>This option is by default <code>false</code></p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.sync\" class=\"method\"><a class=\"src rightside\" href=\"../../../../src/std/os/wasi/fs.rs.html#344\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.sync\" class=\"fn\">sync</a>(&amp;mut self, sync: <a class=\"primitive\" href=\"../../../primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"../../../primitive.reference.html\">&amp;mut Self</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>wasi_ext</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/71213\">#71213</a>)</span></div></span></summary><div class=\"docblock\"><p>Indicates whether <code>__WASI_FDFLAG_SYNC</code> is passed in the <code>fs_flags</code>\nfield of <code>path_open</code>.</p>\n<p>This option is by default <code>false</code></p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.fs_rights_base\" class=\"method\"><a class=\"src rightside\" href=\"../../../../src/std/os/wasi/fs.rs.html#352\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fs_rights_base\" class=\"fn\">fs_rights_base</a>(&amp;mut self, rights: <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"../../../primitive.reference.html\">&amp;mut Self</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>wasi_ext</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/71213\">#71213</a>)</span></div></span></summary><div class=\"docblock\"><p>Indicates the value that should be passed in for the <code>fs_rights_base</code>\nparameter of <code>path_open</code>.</p>\n<p>This option defaults based on the <code>read</code> and <code>write</code> configuration of\nthis <code>OpenOptions</code> builder. If this method is called, however, the\nexact mask passed in will be used instead.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.fs_rights_inheriting\" class=\"method\"><a class=\"src rightside\" href=\"../../../../src/std/os/wasi/fs.rs.html#360\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.fs_rights_inheriting\" class=\"fn\">fs_rights_inheriting</a>(&amp;mut self, rights: <a class=\"primitive\" href=\"../../../primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"../../../primitive.reference.html\">&amp;mut Self</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>wasi_ext</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/71213\">#71213</a>)</span></div></span></summary><div class=\"docblock\"><p>Indicates the value that should be passed in for the\n<code>fs_rights_inheriting</code> parameter of <code>path_open</code>.</p>\n<p>The default for this option is the same value as what will be passed\nfor the <code>fs_rights_base</code> parameter but if this method is called then\nthe specified value will be used instead.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.open_at\" class=\"method\"><a class=\"src rightside\" href=\"../../../../src/std/os/wasi/fs.rs.html#366\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.open_at\" class=\"fn\">open_at</a>&lt;P: <a class=\"trait\" href=\"../../../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../../../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;&gt;(&amp;self, file: &amp;<a class=\"struct\" href=\"../../../fs/struct.File.html\" title=\"struct std::fs::File\">File</a>, path: P) -&gt; <a class=\"type\" href=\"../../../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"struct\" href=\"../../../fs/struct.File.html\" title=\"struct std::fs::File\">File</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>wasi_ext</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/71213\">#71213</a>)</span></div></span></summary><div class=\"docblock\"><p>Open a file or directory.</p>\n<p>This corresponds to the <code>path_open</code> syscall.</p>\n</div></details></div><h2 id=\"object-safety\" class=\"section-header\">Object Safety<a href=\"#object-safety\" class=\"anchor\">Â§</a></h2><div class=\"object-safety-info\">This trait is <b>not</b> <a href=\"https://doc.rust-lang.org/1.80.0/reference/items/traits.html#object-safety\">object safe</a>.</div><h2 id=\"implementors\" class=\"section-header\">Implementors<a href=\"#implementors\" class=\"anchor\">Â§</a></h2><div id=\"implementors-list\"><section id=\"impl-OpenOptionsExt-for-OpenOptions\" class=\"impl\"><a class=\"src rightside\" href=\"../../../../src/std/os/wasi/fs.rs.html#369-414\">source</a><a href=\"#impl-OpenOptionsExt-for-OpenOptions\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.OpenOptionsExt.html\" title=\"trait std::os::wasi::fs::OpenOptionsExt\">OpenOptionsExt</a> for <a class=\"struct\" href=\"../../../fs/struct.OpenOptions.html\" title=\"struct std::fs::OpenOptions\">OpenOptions</a></h3></section></div><script src=\"../../../../trait.impl/std/os/wasi/fs/trait.OpenOptionsExt.js\" async=\"\"></script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:26:27.743Z"
}