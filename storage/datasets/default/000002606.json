{
	"title": "slice_from_raw_parts_mut in std::ptr - Rust",
	"url": "https://doc.rust-lang.org/stable/std/ptr/fn.slice_from_raw_parts_mut.html",
	"markdown": "# slice\\_from\\_raw\\_parts\\_mut in std::ptr - Rust\n\n```\npub fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T]\n```\n\nExpand description\n\nForms a raw mutable slice from a pointer and a length.\n\nThe `len` argument is the number of **elements**, not the number of bytes.\n\nPerforms the same functionality as [`slice_from_raw_parts`](fn.slice_from_raw_parts.html \"fn std::ptr::slice_from_raw_parts\"), except that a raw mutable slice is returned, as opposed to a raw immutable slice.\n\nThis function is safe, but actually using the return value is unsafe. See the documentation of [`slice::from_raw_parts_mut`](../slice/fn.from_raw_parts_mut.html \"fn std::slice::from_raw_parts_mut\") for slice safety requirements.\n\n## [§](#examples)Examples\n\n```\nuse std::ptr;\n\nlet x = &mut [5, 6, 7];\nlet raw_pointer = x.as_mut_ptr();\nlet slice = ptr::slice_from_raw_parts_mut(raw_pointer, 3);\n\nunsafe {\n    (*slice)[2] = 99; // assign a value at an index in the slice\n};\n\nassert_eq!(unsafe { &*slice }[2], 99);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ptr;%0A++++%0A++++let+x+=+%26mut+%5B5,+6,+7%5D;%0A++++let+raw_pointer+=+x.as_mut_ptr();%0A++++let+slice+=+ptr::slice_from_raw_parts_mut(raw_pointer,+3);%0A++++%0A++++unsafe+%7B%0A++++++++(*slice)%5B2%5D+=+99;+//+assign+a+value+at+an+index+in+the+slice%0A++++%7D;%0A++++%0A++++assert_eq!(unsafe+%7B+%26*slice+%7D%5B2%5D,+99);%0A%7D&edition=2021)\n\nYou must ensure that the pointer is valid and not null before dereferencing the raw slice. A slice reference must never have a null pointer, even if it’s empty.\n\n[ⓘ](# \"This example panics\")\n\n```\nuse std::ptr;\nlet danger: *mut [u8] = ptr::slice_from_raw_parts_mut(ptr::null_mut(), 0);\nunsafe {\n    danger.as_mut().expect(\"references must not be null\");\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ptr;%0A++++let+danger:+*mut+%5Bu8%5D+=+ptr::slice_from_raw_parts_mut(ptr::null_mut(),+0);%0A++++unsafe+%7B%0A++++++++danger.as_mut().expect(%22references+must+not+be+null%22);%0A++++%7D%0A%7D&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Forms a raw mutable slice from a pointer and a length.\"><title>slice_from_raw_parts_mut in std::ptr - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc fn\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h2><a href=\"index.html\">In std::ptr</a></h2><h3><a href=\"index.html#macros\">Macros</a></h3><ul class=\"block macro\"><li><a href=\"macro.addr_of.html\">addr_of</a></li><li><a href=\"macro.addr_of_mut.html\">addr_of_mut</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Alignment.html\">Alignment</a></li><li><a href=\"struct.DynMetadata.html\">DynMetadata</a></li><li><a href=\"struct.NonNull.html\">NonNull</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.Pointee.html\">Pointee</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.addr_eq.html\">addr_eq</a></li><li><a href=\"fn.copy.html\">copy</a></li><li><a href=\"fn.copy_nonoverlapping.html\">copy_nonoverlapping</a></li><li><a href=\"fn.dangling.html\">dangling</a></li><li><a href=\"fn.dangling_mut.html\">dangling_mut</a></li><li><a href=\"fn.drop_in_place.html\">drop_in_place</a></li><li><a href=\"fn.eq.html\">eq</a></li><li><a href=\"fn.from_mut.html\">from_mut</a></li><li><a href=\"fn.from_raw_parts.html\">from_raw_parts</a></li><li><a href=\"fn.from_raw_parts_mut.html\">from_raw_parts_mut</a></li><li><a href=\"fn.from_ref.html\">from_ref</a></li><li><a href=\"fn.hash.html\">hash</a></li><li><a href=\"fn.metadata.html\">metadata</a></li><li><a href=\"fn.null.html\">null</a></li><li><a href=\"fn.null_mut.html\">null_mut</a></li><li><a href=\"fn.read.html\">read</a></li><li><a href=\"fn.read_unaligned.html\">read_unaligned</a></li><li><a href=\"fn.read_volatile.html\">read_volatile</a></li><li><a href=\"fn.replace.html\">replace</a></li><li><a href=\"fn.slice_from_raw_parts.html\">slice_from_raw_parts</a></li><li><a href=\"fn.slice_from_raw_parts_mut.html\">slice_from_raw_parts_mut</a></li><li><a href=\"fn.swap.html\">swap</a></li><li><a href=\"fn.swap_nonoverlapping.html\">swap_nonoverlapping</a></li><li><a href=\"fn.with_exposed_provenance.html\">with_exposed_provenance</a></li><li><a href=\"fn.with_exposed_provenance_mut.html\">with_exposed_provenance_mut</a></li><li><a href=\"fn.without_provenance.html\">without_provenance</a></li><li><a href=\"fn.without_provenance_mut.html\">without_provenance_mut</a></li><li><a href=\"fn.write.html\">write</a></li><li><a href=\"fn.write_bytes.html\">write_bytes</a></li><li><a href=\"fn.write_unaligned.html\">write_unaligned</a></li><li><a href=\"fn.write_volatile.html\">write_volatile</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Function <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">ptr</a>::<wbr><a class=\"fn\" href=\"#\">slice_from_raw_parts_mut</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.42.0, const unstable\">1.42.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/67456\" title=\"Tracking issue for const_slice_from_raw_parts_mut\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mod.rs.html#888\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub fn slice_from_raw_parts_mut&lt;T&gt;(data: <a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a>, len: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"../primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a></code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Forms a raw mutable slice from a pointer and a length.</p>\n<p>The <code>len</code> argument is the number of <strong>elements</strong>, not the number of bytes.</p>\n<p>Performs the same functionality as <a href=\"fn.slice_from_raw_parts.html\" title=\"fn std::ptr::slice_from_raw_parts\"><code>slice_from_raw_parts</code></a>, except that a\nraw mutable slice is returned, as opposed to a raw immutable slice.</p>\n<p>This function is safe, but actually using the return value is unsafe.\nSee the documentation of <a href=\"../slice/fn.from_raw_parts_mut.html\" title=\"fn std::slice::from_raw_parts_mut\"><code>slice::from_raw_parts_mut</code></a> for slice safety requirements.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr;\n\n<span class=\"kw\">let </span>x = <span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>];\n<span class=\"kw\">let </span>raw_pointer = x.as_mut_ptr();\n<span class=\"kw\">let </span>slice = ptr::slice_from_raw_parts_mut(raw_pointer, <span class=\"number\">3</span>);\n\n<span class=\"kw\">unsafe </span>{\n    (<span class=\"kw-2\">*</span>slice)[<span class=\"number\">2</span>] = <span class=\"number\">99</span>; <span class=\"comment\">// assign a value at an index in the slice\n</span>};\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">&amp;*</span>slice }[<span class=\"number\">2</span>], <span class=\"number\">99</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ptr;%0A++++%0A++++let+x+=+%26mut+%5B5,+6,+7%5D;%0A++++let+raw_pointer+=+x.as_mut_ptr();%0A++++let+slice+=+ptr::slice_from_raw_parts_mut(raw_pointer,+3);%0A++++%0A++++unsafe+%7B%0A++++++++(*slice)%5B2%5D+=+99;+//+assign+a+value+at+an+index+in+the+slice%0A++++%7D;%0A++++%0A++++assert_eq!(unsafe+%7B+%26*slice+%7D%5B2%5D,+99);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>You must ensure that the pointer is valid and not null before dereferencing\nthe raw slice. A slice reference must never have a null pointer, even if it’s empty.</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr;\n<span class=\"kw\">let </span>danger: <span class=\"kw-2\">*mut </span>[u8] = ptr::slice_from_raw_parts_mut(ptr::null_mut(), <span class=\"number\">0</span>);\n<span class=\"kw\">unsafe </span>{\n    danger.as_mut().expect(<span class=\"string\">\"references must not be null\"</span>);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ptr;%0A++++let+danger:+*mut+%5Bu8%5D+=+ptr::slice_from_raw_parts_mut(ptr::null_mut(),+0);%0A++++unsafe+%7B%0A++++++++danger.as_mut().expect(%22references+must+not+be+null%22);%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:24:14.280Z"
}