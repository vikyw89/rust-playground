{
	"title": "RwLock in std::sync - Rust",
	"url": "https://doc.rust-lang.org/stable/std/sync/struct.RwLock.html",
	"markdown": "# RwLock in std::sync - Rust\n\n## Struct [std](../index.html)::[sync](index.html)::[RwLock](#)\n\n1.0.0 · [source](about:blank/src/std/sync/rwlock.rs.html#83-87) ·\n\n```\npub struct RwLock<T: ?Sized> { /* private fields */ }\n```\n\nExpand description\n\nA reader-writer lock\n\nThis type of lock allows a number of readers or at most one writer at any point in time. The write portion of this lock typically allows modification of the underlying data (exclusive access) and the read portion of this lock typically allows for read-only access (shared access).\n\nIn comparison, a [`Mutex`](struct.Mutex.html \"struct std::sync::Mutex\") does not distinguish between readers or writers that acquire the lock, therefore blocking any threads waiting for the lock to become available. An `RwLock` will allow any number of readers to acquire the lock as long as a writer is not holding the lock.\n\nThe priority policy of the lock is dependent on the underlying operating system’s implementation, and this type does not guarantee that any particular policy will be used. In particular, a writer which is waiting to acquire the lock in `write` might or might not block concurrent calls to `read`, e.g.:\n\nPotential deadlock example\n\n```text\n// Thread 1              |  // Thread 2\nlet _rg1 = lock.read();  |\n                         |  // will block\n                         |  let _wg = lock.write();\n// may deadlock          |\nlet _rg2 = lock.read();  |\n\n``` \n\nThe type parameter `T` represents the data that this lock protects. It is required that `T` satisfies [`Send`](../marker/trait.Send.html \"trait std::marker::Send\") to be shared across threads and [`Sync`](../marker/trait.Sync.html \"trait std::marker::Sync\") to allow concurrent access through readers. The RAII guards returned from the locking methods implement [`Deref`](../ops/trait.Deref.html \"trait std::ops::Deref\") (and [`DerefMut`](../ops/trait.DerefMut.html \"trait std::ops::DerefMut\") for the `write` methods) to allow access to the content of the lock.\n\n## [§](#poisoning)Poisoning\n\nAn `RwLock`, like [`Mutex`](struct.Mutex.html \"struct std::sync::Mutex\"), will become poisoned on a panic. Note, however, that an `RwLock` may only be poisoned if a panic occurs while it is locked exclusively (write mode). If a panic occurs in any reader, then the lock will not be poisoned.\n\n## [§](#examples)Examples\n\n```\nuse std::sync::RwLock;\n\nlet lock = RwLock::new(5);\n\n// many reader locks can be held at once\n{\n    let r1 = lock.read().unwrap();\n    let r2 = lock.read().unwrap();\n    assert_eq!(*r1, 5);\n    assert_eq!(*r2, 5);\n} // read locks are dropped at this point\n\n// only one write lock may be held, however\n{\n    let mut w = lock.write().unwrap();\n    *w += 1;\n    assert_eq!(*w, 6);\n} // write lock is dropped here\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::RwLock;%0A++++%0A++++let+lock+=+RwLock::new(5);%0A++++%0A++++//+many+reader+locks+can+be+held+at+once%0A++++%7B%0A++++++++let+r1+=+lock.read().unwrap();%0A++++++++let+r2+=+lock.read().unwrap();%0A++++++++assert_eq!(*r1,+5);%0A++++++++assert_eq!(*r2,+5);%0A++++%7D+//+read+locks+are+dropped+at+this+point%0A++++%0A++++//+only+one+write+lock+may+be+held,+however%0A++++%7B%0A++++++++let+mut+w+=+lock.write().unwrap();%0A++++++++*w+%2B=+1;%0A++++++++assert_eq!(*w,+6);%0A++++%7D+//+write+lock+is+dropped+here%0A%7D&edition=2021)\n\n[source](about:blank/src/std/sync/rwlock.rs.html#211-227)[§](#impl-RwLock%3CT%3E)\n\n1.0.0 (const: 1.63.0) · [source](about:blank/src/std/sync/rwlock.rs.html#224-226)\n\nCreates a new instance of an `RwLock<T>` which is unlocked.\n\n##### [§](#examples-1)Examples\n\n```\nuse std::sync::RwLock;\n\nlet lock = RwLock::new(5);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::RwLock;%0A++++%0A++++let+lock+=+RwLock::new(5);%0A%7D&edition=2021)\n\n[source](about:blank/src/std/sync/rwlock.rs.html#229-536)[§](#impl-RwLock%3CT%3E-1)\n\n1.0.0 · [source](about:blank/src/std/sync/rwlock.rs.html#272-277)\n\nLocks this `RwLock` with shared read access, blocking the current thread until it can be acquired.\n\nThe calling thread will be blocked until there are no more writers which hold the lock. There may be other readers currently inside the lock when this method returns. This method does not provide any guarantees with respect to the ordering of whether contentious readers or writers will acquire the lock first.\n\nReturns an RAII guard which will release this thread’s shared access once it is dropped.\n\n##### [§](#errors)Errors\n\nThis function will return an error if the `RwLock` is poisoned. An `RwLock` is poisoned whenever a writer panics while holding an exclusive lock. The failure will occur immediately after the lock has been acquired.\n\n##### [§](#panics)Panics\n\nThis function might panic when called if the lock is already held by the current thread.\n\n##### [§](#examples-2)Examples\n\n```\nuse std::sync::{Arc, RwLock};\nuse std::thread;\n\nlet lock = Arc::new(RwLock::new(1));\nlet c_lock = Arc::clone(&lock);\n\nlet n = lock.read().unwrap();\nassert_eq!(*n, 1);\n\nthread::spawn(move || {\n    let r = c_lock.read();\n    assert!(r.is_ok());\n}).join().unwrap();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::%7BArc,+RwLock%7D;%0A++++use+std::thread;%0A++++%0A++++let+lock+=+Arc::new(RwLock::new(1));%0A++++let+c_lock+=+Arc::clone(%26lock);%0A++++%0A++++let+n+=+lock.read().unwrap();%0A++++assert_eq!(*n,+1);%0A++++%0A++++thread::spawn(move+%7C%7C+%7B%0A++++++++let+r+=+c_lock.read();%0A++++++++assert!(r.is_ok());%0A++++%7D).join().unwrap();%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/sync/rwlock.rs.html#317-325)\n\nAttempts to acquire this `RwLock` with shared read access.\n\nIf the access could not be granted at this time, then `Err` is returned. Otherwise, an RAII guard is returned which will release the shared access when it is dropped.\n\nThis function does not block.\n\nThis function does not provide any guarantees with respect to the ordering of whether contentious readers or writers will acquire the lock first.\n\n##### [§](#errors-1)Errors\n\nThis function will return the [`Poisoned`](about:blank/enum.TryLockError.html#variant.Poisoned \"variant std::sync::TryLockError::Poisoned\") error if the `RwLock` is poisoned. An `RwLock` is poisoned whenever a writer panics while holding an exclusive lock. `Poisoned` will only be returned if the lock would have otherwise been acquired.\n\nThis function will return the [`WouldBlock`](about:blank/enum.TryLockError.html#variant.WouldBlock \"variant std::sync::TryLockError::WouldBlock\") error if the `RwLock` could not be acquired because it was already locked exclusively.\n\n##### [§](#examples-3)Examples\n\n```\nuse std::sync::RwLock;\n\nlet lock = RwLock::new(1);\n\nmatch lock.try_read() {\n    Ok(n) => assert_eq!(*n, 1),\n    Err(_) => unreachable!(),\n};\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::RwLock;%0A++++%0A++++let+lock+=+RwLock::new(1);%0A++++%0A++++match+lock.try_read()+%7B%0A++++++++Ok(n)+=%3E+assert_eq!(*n,+1),%0A++++++++Err(_)+=%3E+unreachable!(),%0A++++%7D;%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/sync/rwlock.rs.html#360-365)\n\nLocks this `RwLock` with exclusive write access, blocking the current thread until it can be acquired.\n\nThis function will not return while other writers or other readers currently have access to the lock.\n\nReturns an RAII guard which will drop the write access of this `RwLock` when dropped.\n\n##### [§](#errors-2)Errors\n\nThis function will return an error if the `RwLock` is poisoned. An `RwLock` is poisoned whenever a writer panics while holding an exclusive lock. An error will be returned when the lock is acquired.\n\n##### [§](#panics-1)Panics\n\nThis function might panic when called if the lock is already held by the current thread.\n\n##### [§](#examples-4)Examples\n\n```\nuse std::sync::RwLock;\n\nlet lock = RwLock::new(1);\n\nlet mut n = lock.write().unwrap();\n*n = 2;\n\nassert!(lock.try_read().is_err());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::RwLock;%0A++++%0A++++let+lock+=+RwLock::new(1);%0A++++%0A++++let+mut+n+=+lock.write().unwrap();%0A++++*n+=+2;%0A++++%0A++++assert!(lock.try_read().is_err());%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/sync/rwlock.rs.html#406-414)\n\nAttempts to lock this `RwLock` with exclusive write access.\n\nIf the lock could not be acquired at this time, then `Err` is returned. Otherwise, an RAII guard is returned which will release the lock when it is dropped.\n\nThis function does not block.\n\nThis function does not provide any guarantees with respect to the ordering of whether contentious readers or writers will acquire the lock first.\n\n##### [§](#errors-3)Errors\n\nThis function will return the [`Poisoned`](about:blank/enum.TryLockError.html#variant.Poisoned \"variant std::sync::TryLockError::Poisoned\") error if the `RwLock` is poisoned. An `RwLock` is poisoned whenever a writer panics while holding an exclusive lock. `Poisoned` will only be returned if the lock would have otherwise been acquired.\n\nThis function will return the [`WouldBlock`](about:blank/enum.TryLockError.html#variant.WouldBlock \"variant std::sync::TryLockError::WouldBlock\") error if the `RwLock` could not be acquired because it was already locked exclusively.\n\n##### [§](#examples-5)Examples\n\n```\nuse std::sync::RwLock;\n\nlet lock = RwLock::new(1);\n\nlet n = lock.read().unwrap();\nassert_eq!(*n, 1);\n\nassert!(lock.try_write().is_err());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::RwLock;%0A++++%0A++++let+lock+=+RwLock::new(1);%0A++++%0A++++let+n+=+lock.read().unwrap();%0A++++assert_eq!(*n,+1);%0A++++%0A++++assert!(lock.try_write().is_err());%0A%7D&edition=2021)\n\n1.2.0 · [source](about:blank/src/std/sync/rwlock.rs.html#439-441)\n\nDetermines whether the lock is poisoned.\n\nIf another thread is active, the lock can still become poisoned at any time. You should not trust a `false` value for program correctness without additional synchronization.\n\n##### [§](#examples-6)Examples\n\n```\nuse std::sync::{Arc, RwLock};\nuse std::thread;\n\nlet lock = Arc::new(RwLock::new(0));\nlet c_lock = Arc::clone(&lock);\n\nlet _ = thread::spawn(move || {\n    let _lock = c_lock.write().unwrap();\n    panic!(); // the lock gets poisoned\n}).join();\nassert_eq!(lock.is_poisoned(), true);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::%7BArc,+RwLock%7D;%0A++++use+std::thread;%0A++++%0A++++let+lock+=+Arc::new(RwLock::new(0));%0A++++let+c_lock+=+Arc::clone(%26lock);%0A++++%0A++++let+_+=+thread::spawn(move+%7C%7C+%7B%0A++++++++let+_lock+=+c_lock.write().unwrap();%0A++++++++panic!();+//+the+lock+gets+poisoned%0A++++%7D).join();%0A++++assert_eq!(lock.is_poisoned(),+true);%0A%7D&edition=2021)\n\n1.77.0 · [source](about:blank/src/std/sync/rwlock.rs.html#476-478)\n\nClear the poisoned state from a lock.\n\nIf the lock is poisoned, it will remain poisoned until this function is called. This allows recovering from a poisoned state and marking that it has recovered. For example, if the value is overwritten by a known-good value, then the lock can be marked as un-poisoned. Or possibly, the value could be inspected to determine if it is in a consistent state, and if so the poison is removed.\n\n##### [§](#examples-7)Examples\n\n```\nuse std::sync::{Arc, RwLock};\nuse std::thread;\n\nlet lock = Arc::new(RwLock::new(0));\nlet c_lock = Arc::clone(&lock);\n\nlet _ = thread::spawn(move || {\n    let _lock = c_lock.write().unwrap();\n    panic!(); // the lock gets poisoned\n}).join();\n\nassert_eq!(lock.is_poisoned(), true);\nlet guard = lock.write().unwrap_or_else(|mut e| {\n    **e.get_mut() = 1;\n    lock.clear_poison();\n    e.into_inner()\n});\nassert_eq!(lock.is_poisoned(), false);\nassert_eq!(*guard, 1);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::%7BArc,+RwLock%7D;%0A++++use+std::thread;%0A++++%0A++++let+lock+=+Arc::new(RwLock::new(0));%0A++++let+c_lock+=+Arc::clone(%26lock);%0A++++%0A++++let+_+=+thread::spawn(move+%7C%7C+%7B%0A++++++++let+_lock+=+c_lock.write().unwrap();%0A++++++++panic!();+//+the+lock+gets+poisoned%0A++++%7D).join();%0A++++%0A++++assert_eq!(lock.is_poisoned(),+true);%0A++++let+guard+=+lock.write().unwrap_or_else(%7Cmut+e%7C+%7B%0A++++++++**e.get_mut()+=+1;%0A++++++++lock.clear_poison();%0A++++++++e.into_inner()%0A++++%7D);%0A++++assert_eq!(lock.is_poisoned(),+false);%0A++++assert_eq!(*guard,+1);%0A%7D&edition=2021)\n\n1.6.0 · [source](about:blank/src/std/sync/rwlock.rs.html#502-508)\n\nConsumes this `RwLock`, returning the underlying data.\n\n##### [§](#errors-4)Errors\n\nThis function will return an error if the `RwLock` is poisoned. An `RwLock` is poisoned whenever a writer panics while holding an exclusive lock. An error will only be returned if the lock would have otherwise been acquired.\n\n##### [§](#examples-8)Examples\n\n```\nuse std::sync::RwLock;\n\nlet lock = RwLock::new(String::new());\n{\n    let mut s = lock.write().unwrap();\n    *s = \"modified\".to_owned();\n}\nassert_eq!(lock.into_inner().unwrap(), \"modified\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::RwLock;%0A++++%0A++++let+lock+=+RwLock::new(String::new());%0A++++%7B%0A++++++++let+mut+s+=+lock.write().unwrap();%0A++++++++*s+=+%22modified%22.to_owned();%0A++++%7D%0A++++assert_eq!(lock.into_inner().unwrap(),+%22modified%22);%0A%7D&edition=2021)\n\n1.6.0 · [source](about:blank/src/std/sync/rwlock.rs.html#532-535)\n\nReturns a mutable reference to the underlying data.\n\nSince this call borrows the `RwLock` mutably, no actual locking needs to take place – the mutable borrow statically guarantees no locks exist.\n\n##### [§](#errors-5)Errors\n\nThis function will return an error if the `RwLock` is poisoned. An `RwLock` is poisoned whenever a writer panics while holding an exclusive lock. An error will only be returned if the lock would have otherwise been acquired.\n\n##### [§](#examples-9)Examples\n\n```\nuse std::sync::RwLock;\n\nlet mut lock = RwLock::new(0);\n*lock.get_mut().unwrap() = 10;\nassert_eq!(*lock.read().unwrap(), 10);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::RwLock;%0A++++%0A++++let+mut+lock+=+RwLock::new(0);%0A++++*lock.get_mut().unwrap()+=+10;%0A++++assert_eq!(*lock.read().unwrap(),+10);%0A%7D&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A reader-writer lock\"><title>RwLock in std::sync - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">RwLock</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">RwLock</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.clear_poison\">clear_poison</a></li><li><a href=\"#method.get_mut\">get_mut</a></li><li><a href=\"#method.into_inner\">into_inner</a></li><li><a href=\"#method.is_poisoned\">is_poisoned</a></li><li><a href=\"#method.new\">new</a></li><li><a href=\"#method.read\">read</a></li><li><a href=\"#method.try_read\">try_read</a></li><li><a href=\"#method.try_write\">try_write</a></li><li><a href=\"#method.write\">write</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-Debug-for-RwLock%3CT%3E\">Debug</a></li><li><a href=\"#impl-Default-for-RwLock%3CT%3E\">Default</a></li><li><a href=\"#impl-From%3CT%3E-for-RwLock%3CT%3E\">From&lt;T&gt;</a></li><li><a href=\"#impl-RefUnwindSafe-for-RwLock%3CT%3E\">RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-RwLock%3CT%3E\">Send</a></li><li><a href=\"#impl-Sync-for-RwLock%3CT%3E\">Sync</a></li><li><a href=\"#impl-UnwindSafe-for-RwLock%3CT%3E\">UnwindSafe</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-RwLock%3CT%3E\">!Freeze</a></li><li><a href=\"#impl-Unpin-for-RwLock%3CT%3E\">Unpin</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3C!%3E-for-T\">From&lt;!&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::sync</a></h2><h3><a href=\"index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"atomic/index.html\">atomic</a></li><li><a href=\"mpsc/index.html\">mpsc</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Arc.html\">Arc</a></li><li><a href=\"struct.Barrier.html\">Barrier</a></li><li><a href=\"struct.BarrierWaitResult.html\">BarrierWaitResult</a></li><li><a href=\"struct.Condvar.html\">Condvar</a></li><li><a href=\"struct.Exclusive.html\">Exclusive</a></li><li><a href=\"struct.LazyLock.html\">LazyLock</a></li><li><a href=\"struct.MappedMutexGuard.html\">MappedMutexGuard</a></li><li><a href=\"struct.MappedRwLockReadGuard.html\">MappedRwLockReadGuard</a></li><li><a href=\"struct.MappedRwLockWriteGuard.html\">MappedRwLockWriteGuard</a></li><li><a href=\"struct.Mutex.html\">Mutex</a></li><li><a href=\"struct.MutexGuard.html\">MutexGuard</a></li><li><a href=\"struct.Once.html\">Once</a></li><li><a href=\"struct.OnceLock.html\">OnceLock</a></li><li><a href=\"struct.OnceState.html\">OnceState</a></li><li><a href=\"struct.PoisonError.html\">PoisonError</a></li><li><a href=\"struct.ReentrantLock.html\">ReentrantLock</a></li><li><a href=\"struct.ReentrantLockGuard.html\">ReentrantLockGuard</a></li><li><a href=\"struct.RwLock.html\">RwLock</a></li><li><a href=\"struct.RwLockReadGuard.html\">RwLockReadGuard</a></li><li><a href=\"struct.RwLockWriteGuard.html\">RwLockWriteGuard</a></li><li><a href=\"struct.WaitTimeoutResult.html\">WaitTimeoutResult</a></li><li><a href=\"struct.Weak.html\">Weak</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.TryLockError.html\">TryLockError</a></li></ul><h3><a href=\"index.html#constants\">Constants</a></h3><ul class=\"block constant\"><li><a href=\"constant.ONCE_INIT.html\">ONCE_INIT</a></li></ul><h3><a href=\"index.html#types\">Type Aliases</a></h3><ul class=\"block type\"><li><a href=\"type.LockResult.html\">LockResult</a></li><li><a href=\"type.TryLockResult.html\">TryLockResult</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">sync</a>::<wbr><a class=\"struct\" href=\"#\">RwLock</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/sync/rwlock.rs.html#83-87\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct RwLock&lt;T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>&gt; { <span class=\"comment\">/* private fields */</span> }</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A reader-writer lock</p>\n<p>This type of lock allows a number of readers or at most one writer at any\npoint in time. The write portion of this lock typically allows modification\nof the underlying data (exclusive access) and the read portion of this lock\ntypically allows for read-only access (shared access).</p>\n<p>In comparison, a <a href=\"struct.Mutex.html\" title=\"struct std::sync::Mutex\"><code>Mutex</code></a> does not distinguish between readers or writers\nthat acquire the lock, therefore blocking any threads waiting for the lock to\nbecome available. An <code>RwLock</code> will allow any number of readers to acquire the\nlock as long as a writer is not holding the lock.</p>\n<p>The priority policy of the lock is dependent on the underlying operating\nsystem’s implementation, and this type does not guarantee that any\nparticular policy will be used. In particular, a writer which is waiting to\nacquire the lock in <code>write</code> might or might not block concurrent calls to\n<code>read</code>, e.g.:</p>\n<details><summary>Potential deadlock example</summary>\n<div class=\"example-wrap\"><pre class=\"language-text\"><code>// Thread 1              |  // Thread 2\nlet _rg1 = lock.read();  |\n                         |  // will block\n                         |  let _wg = lock.write();\n// may deadlock          |\nlet _rg2 = lock.read();  |\n</code></pre></div></details>\n<p>The type parameter <code>T</code> represents the data that this lock protects. It is\nrequired that <code>T</code> satisfies <a href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\"><code>Send</code></a> to be shared across threads and\n<a href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\"><code>Sync</code></a> to allow concurrent access through readers. The RAII guards\nreturned from the locking methods implement <a href=\"../ops/trait.Deref.html\" title=\"trait std::ops::Deref\"><code>Deref</code></a> (and <a href=\"../ops/trait.DerefMut.html\" title=\"trait std::ops::DerefMut\"><code>DerefMut</code></a>\nfor the <code>write</code> methods) to allow access to the content of the lock.</p>\n<h2 id=\"poisoning\"><a class=\"doc-anchor\" href=\"#poisoning\">§</a>Poisoning</h2>\n<p>An <code>RwLock</code>, like <a href=\"struct.Mutex.html\" title=\"struct std::sync::Mutex\"><code>Mutex</code></a>, will become poisoned on a panic. Note, however,\nthat an <code>RwLock</code> may only be poisoned if a panic occurs while it is locked\nexclusively (write mode). If a panic occurs in any reader, then the lock\nwill not be poisoned.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::RwLock;\n\n<span class=\"kw\">let </span>lock = RwLock::new(<span class=\"number\">5</span>);\n\n<span class=\"comment\">// many reader locks can be held at once\n</span>{\n    <span class=\"kw\">let </span>r1 = lock.read().unwrap();\n    <span class=\"kw\">let </span>r2 = lock.read().unwrap();\n    <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>r1, <span class=\"number\">5</span>);\n    <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>r2, <span class=\"number\">5</span>);\n} <span class=\"comment\">// read locks are dropped at this point\n\n// only one write lock may be held, however\n</span>{\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>w = lock.write().unwrap();\n    <span class=\"kw-2\">*</span>w += <span class=\"number\">1</span>;\n    <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>w, <span class=\"number\">6</span>);\n} <span class=\"comment\">// write lock is dropped here</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::RwLock;%0A++++%0A++++let+lock+=+RwLock::new(5);%0A++++%0A++++//+many+reader+locks+can+be+held+at+once%0A++++%7B%0A++++++++let+r1+=+lock.read().unwrap();%0A++++++++let+r2+=+lock.read().unwrap();%0A++++++++assert_eq!(*r1,+5);%0A++++++++assert_eq!(*r2,+5);%0A++++%7D+//+read+locks+are+dropped+at+this+point%0A++++%0A++++//+only+one+write+lock+may+be+held,+however%0A++++%7B%0A++++++++let+mut+w+=+lock.write().unwrap();%0A++++++++*w+%2B=+1;%0A++++++++assert_eq!(*w,+6);%0A++++%7D+//+write+lock+is+dropped+here%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-RwLock%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/sync/rwlock.rs.html#211-227\">source</a><a href=\"#impl-RwLock%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"struct.RwLock.html\" title=\"struct std::sync::RwLock\">RwLock</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.new\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.63.0\">1.0.0 (const: 1.63.0)</span> · <a class=\"src\" href=\"../../src/std/sync/rwlock.rs.html#224-226\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.new\" class=\"fn\">new</a>(t: T) -&gt; <a class=\"struct\" href=\"struct.RwLock.html\" title=\"struct std::sync::RwLock\">RwLock</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new instance of an <code>RwLock&lt;T&gt;</code> which is unlocked.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::RwLock;\n\n<span class=\"kw\">let </span>lock = RwLock::new(<span class=\"number\">5</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::RwLock;%0A++++%0A++++let+lock+=+RwLock::new(5);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-RwLock%3CT%3E-1\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/sync/rwlock.rs.html#229-536\">source</a><a href=\"#impl-RwLock%3CT%3E-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>&gt; <a class=\"struct\" href=\"struct.RwLock.html\" title=\"struct std::sync::RwLock\">RwLock</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/sync/rwlock.rs.html#272-277\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.read\" class=\"fn\">read</a>(&amp;self) -&gt; <a class=\"type\" href=\"type.LockResult.html\" title=\"type std::sync::LockResult\">LockResult</a>&lt;<a class=\"struct\" href=\"struct.RwLockReadGuard.html\" title=\"struct std::sync::RwLockReadGuard\">RwLockReadGuard</a>&lt;'_, T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Locks this <code>RwLock</code> with shared read access, blocking the current thread\nuntil it can be acquired.</p>\n<p>The calling thread will be blocked until there are no more writers which\nhold the lock. There may be other readers currently inside the lock when\nthis method returns. This method does not provide any guarantees with\nrespect to the ordering of whether contentious readers or writers will\nacquire the lock first.</p>\n<p>Returns an RAII guard which will release this thread’s shared access\nonce it is dropped.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>This function will return an error if the <code>RwLock</code> is poisoned. An\n<code>RwLock</code> is poisoned whenever a writer panics while holding an exclusive\nlock. The failure will occur immediately after the lock has been\nacquired.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>This function might panic when called if the lock is already held by the current thread.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::{Arc, RwLock};\n<span class=\"kw\">use </span>std::thread;\n\n<span class=\"kw\">let </span>lock = Arc::new(RwLock::new(<span class=\"number\">1</span>));\n<span class=\"kw\">let </span>c_lock = Arc::clone(<span class=\"kw-2\">&amp;</span>lock);\n\n<span class=\"kw\">let </span>n = lock.read().unwrap();\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>n, <span class=\"number\">1</span>);\n\nthread::spawn(<span class=\"kw\">move </span>|| {\n    <span class=\"kw\">let </span>r = c_lock.read();\n    <span class=\"macro\">assert!</span>(r.is_ok());\n}).join().unwrap();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::%7BArc,+RwLock%7D;%0A++++use+std::thread;%0A++++%0A++++let+lock+=+Arc::new(RwLock::new(1));%0A++++let+c_lock+=+Arc::clone(%26lock);%0A++++%0A++++let+n+=+lock.read().unwrap();%0A++++assert_eq!(*n,+1);%0A++++%0A++++thread::spawn(move+%7C%7C+%7B%0A++++++++let+r+=+c_lock.read();%0A++++++++assert!(r.is_ok());%0A++++%7D).join().unwrap();%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_read\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/sync/rwlock.rs.html#317-325\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.try_read\" class=\"fn\">try_read</a>(&amp;self) -&gt; <a class=\"type\" href=\"type.TryLockResult.html\" title=\"type std::sync::TryLockResult\">TryLockResult</a>&lt;<a class=\"struct\" href=\"struct.RwLockReadGuard.html\" title=\"struct std::sync::RwLockReadGuard\">RwLockReadGuard</a>&lt;'_, T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to acquire this <code>RwLock</code> with shared read access.</p>\n<p>If the access could not be granted at this time, then <code>Err</code> is returned.\nOtherwise, an RAII guard is returned which will release the shared access\nwhen it is dropped.</p>\n<p>This function does not block.</p>\n<p>This function does not provide any guarantees with respect to the ordering\nof whether contentious readers or writers will acquire the lock first.</p>\n<h5 id=\"errors-1\"><a class=\"doc-anchor\" href=\"#errors-1\">§</a>Errors</h5>\n<p>This function will return the <a href=\"enum.TryLockError.html#variant.Poisoned\" title=\"variant std::sync::TryLockError::Poisoned\"><code>Poisoned</code></a> error if the <code>RwLock</code> is\npoisoned. An <code>RwLock</code> is poisoned whenever a writer panics while holding\nan exclusive lock. <code>Poisoned</code> will only be returned if the lock would\nhave otherwise been acquired.</p>\n<p>This function will return the <a href=\"enum.TryLockError.html#variant.WouldBlock\" title=\"variant std::sync::TryLockError::WouldBlock\"><code>WouldBlock</code></a> error if the <code>RwLock</code> could\nnot be acquired because it was already locked exclusively.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::RwLock;\n\n<span class=\"kw\">let </span>lock = RwLock::new(<span class=\"number\">1</span>);\n\n<span class=\"kw\">match </span>lock.try_read() {\n    <span class=\"prelude-val\">Ok</span>(n) =&gt; <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>n, <span class=\"number\">1</span>),\n    <span class=\"prelude-val\">Err</span>(<span class=\"kw\">_</span>) =&gt; <span class=\"macro\">unreachable!</span>(),\n};</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::RwLock;%0A++++%0A++++let+lock+=+RwLock::new(1);%0A++++%0A++++match+lock.try_read()+%7B%0A++++++++Ok(n)+=%3E+assert_eq!(*n,+1),%0A++++++++Err(_)+=%3E+unreachable!(),%0A++++%7D;%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.write\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/sync/rwlock.rs.html#360-365\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.write\" class=\"fn\">write</a>(&amp;self) -&gt; <a class=\"type\" href=\"type.LockResult.html\" title=\"type std::sync::LockResult\">LockResult</a>&lt;<a class=\"struct\" href=\"struct.RwLockWriteGuard.html\" title=\"struct std::sync::RwLockWriteGuard\">RwLockWriteGuard</a>&lt;'_, T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Locks this <code>RwLock</code> with exclusive write access, blocking the current\nthread until it can be acquired.</p>\n<p>This function will not return while other writers or other readers\ncurrently have access to the lock.</p>\n<p>Returns an RAII guard which will drop the write access of this <code>RwLock</code>\nwhen dropped.</p>\n<h5 id=\"errors-2\"><a class=\"doc-anchor\" href=\"#errors-2\">§</a>Errors</h5>\n<p>This function will return an error if the <code>RwLock</code> is poisoned. An\n<code>RwLock</code> is poisoned whenever a writer panics while holding an exclusive\nlock. An error will be returned when the lock is acquired.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>This function might panic when called if the lock is already held by the current thread.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::RwLock;\n\n<span class=\"kw\">let </span>lock = RwLock::new(<span class=\"number\">1</span>);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>n = lock.write().unwrap();\n<span class=\"kw-2\">*</span>n = <span class=\"number\">2</span>;\n\n<span class=\"macro\">assert!</span>(lock.try_read().is_err());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::RwLock;%0A++++%0A++++let+lock+=+RwLock::new(1);%0A++++%0A++++let+mut+n+=+lock.write().unwrap();%0A++++*n+=+2;%0A++++%0A++++assert!(lock.try_read().is_err());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_write\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/sync/rwlock.rs.html#406-414\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.try_write\" class=\"fn\">try_write</a>(&amp;self) -&gt; <a class=\"type\" href=\"type.TryLockResult.html\" title=\"type std::sync::TryLockResult\">TryLockResult</a>&lt;<a class=\"struct\" href=\"struct.RwLockWriteGuard.html\" title=\"struct std::sync::RwLockWriteGuard\">RwLockWriteGuard</a>&lt;'_, T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to lock this <code>RwLock</code> with exclusive write access.</p>\n<p>If the lock could not be acquired at this time, then <code>Err</code> is returned.\nOtherwise, an RAII guard is returned which will release the lock when\nit is dropped.</p>\n<p>This function does not block.</p>\n<p>This function does not provide any guarantees with respect to the ordering\nof whether contentious readers or writers will acquire the lock first.</p>\n<h5 id=\"errors-3\"><a class=\"doc-anchor\" href=\"#errors-3\">§</a>Errors</h5>\n<p>This function will return the <a href=\"enum.TryLockError.html#variant.Poisoned\" title=\"variant std::sync::TryLockError::Poisoned\"><code>Poisoned</code></a> error if the <code>RwLock</code> is\npoisoned. An <code>RwLock</code> is poisoned whenever a writer panics while holding\nan exclusive lock. <code>Poisoned</code> will only be returned if the lock would\nhave otherwise been acquired.</p>\n<p>This function will return the <a href=\"enum.TryLockError.html#variant.WouldBlock\" title=\"variant std::sync::TryLockError::WouldBlock\"><code>WouldBlock</code></a> error if the <code>RwLock</code> could\nnot be acquired because it was already locked exclusively.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::RwLock;\n\n<span class=\"kw\">let </span>lock = RwLock::new(<span class=\"number\">1</span>);\n\n<span class=\"kw\">let </span>n = lock.read().unwrap();\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>n, <span class=\"number\">1</span>);\n\n<span class=\"macro\">assert!</span>(lock.try_write().is_err());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::RwLock;%0A++++%0A++++let+lock+=+RwLock::new(1);%0A++++%0A++++let+n+=+lock.read().unwrap();%0A++++assert_eq!(*n,+1);%0A++++%0A++++assert!(lock.try_write().is_err());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_poisoned\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0\">1.2.0</span> · <a class=\"src\" href=\"../../src/std/sync/rwlock.rs.html#439-441\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.is_poisoned\" class=\"fn\">is_poisoned</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Determines whether the lock is poisoned.</p>\n<p>If another thread is active, the lock can still become poisoned at any\ntime. You should not trust a <code>false</code> value for program correctness\nwithout additional synchronization.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::{Arc, RwLock};\n<span class=\"kw\">use </span>std::thread;\n\n<span class=\"kw\">let </span>lock = Arc::new(RwLock::new(<span class=\"number\">0</span>));\n<span class=\"kw\">let </span>c_lock = Arc::clone(<span class=\"kw-2\">&amp;</span>lock);\n\n<span class=\"kw\">let _ </span>= thread::spawn(<span class=\"kw\">move </span>|| {\n    <span class=\"kw\">let </span>_lock = c_lock.write().unwrap();\n    <span class=\"macro\">panic!</span>(); <span class=\"comment\">// the lock gets poisoned\n</span>}).join();\n<span class=\"macro\">assert_eq!</span>(lock.is_poisoned(), <span class=\"bool-val\">true</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::%7BArc,+RwLock%7D;%0A++++use+std::thread;%0A++++%0A++++let+lock+=+Arc::new(RwLock::new(0));%0A++++let+c_lock+=+Arc::clone(%26lock);%0A++++%0A++++let+_+=+thread::spawn(move+%7C%7C+%7B%0A++++++++let+_lock+=+c_lock.write().unwrap();%0A++++++++panic!();+//+the+lock+gets+poisoned%0A++++%7D).join();%0A++++assert_eq!(lock.is_poisoned(),+true);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clear_poison\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.77.0\">1.77.0</span> · <a class=\"src\" href=\"../../src/std/sync/rwlock.rs.html#476-478\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.clear_poison\" class=\"fn\">clear_poison</a>(&amp;self)</h4></section></summary><div class=\"docblock\"><p>Clear the poisoned state from a lock.</p>\n<p>If the lock is poisoned, it will remain poisoned until this function is called. This allows\nrecovering from a poisoned state and marking that it has recovered. For example, if the\nvalue is overwritten by a known-good value, then the lock can be marked as un-poisoned. Or\npossibly, the value could be inspected to determine if it is in a consistent state, and if\nso the poison is removed.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::{Arc, RwLock};\n<span class=\"kw\">use </span>std::thread;\n\n<span class=\"kw\">let </span>lock = Arc::new(RwLock::new(<span class=\"number\">0</span>));\n<span class=\"kw\">let </span>c_lock = Arc::clone(<span class=\"kw-2\">&amp;</span>lock);\n\n<span class=\"kw\">let _ </span>= thread::spawn(<span class=\"kw\">move </span>|| {\n    <span class=\"kw\">let </span>_lock = c_lock.write().unwrap();\n    <span class=\"macro\">panic!</span>(); <span class=\"comment\">// the lock gets poisoned\n</span>}).join();\n\n<span class=\"macro\">assert_eq!</span>(lock.is_poisoned(), <span class=\"bool-val\">true</span>);\n<span class=\"kw\">let </span>guard = lock.write().unwrap_or_else(|<span class=\"kw-2\">mut </span>e| {\n    <span class=\"kw-2\">**</span>e.get_mut() = <span class=\"number\">1</span>;\n    lock.clear_poison();\n    e.into_inner()\n});\n<span class=\"macro\">assert_eq!</span>(lock.is_poisoned(), <span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>guard, <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::%7BArc,+RwLock%7D;%0A++++use+std::thread;%0A++++%0A++++let+lock+=+Arc::new(RwLock::new(0));%0A++++let+c_lock+=+Arc::clone(%26lock);%0A++++%0A++++let+_+=+thread::spawn(move+%7C%7C+%7B%0A++++++++let+_lock+=+c_lock.write().unwrap();%0A++++++++panic!();+//+the+lock+gets+poisoned%0A++++%7D).join();%0A++++%0A++++assert_eq!(lock.is_poisoned(),+true);%0A++++let+guard+=+lock.write().unwrap_or_else(%7Cmut+e%7C+%7B%0A++++++++**e.get_mut()+=+1;%0A++++++++lock.clear_poison();%0A++++++++e.into_inner()%0A++++%7D);%0A++++assert_eq!(lock.is_poisoned(),+false);%0A++++assert_eq!(*guard,+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_inner\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"../../src/std/sync/rwlock.rs.html#502-508\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.into_inner\" class=\"fn\">into_inner</a>(self) -&gt; <a class=\"type\" href=\"type.LockResult.html\" title=\"type std::sync::LockResult\">LockResult</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Consumes this <code>RwLock</code>, returning the underlying data.</p>\n<h5 id=\"errors-4\"><a class=\"doc-anchor\" href=\"#errors-4\">§</a>Errors</h5>\n<p>This function will return an error if the <code>RwLock</code> is poisoned. An\n<code>RwLock</code> is poisoned whenever a writer panics while holding an exclusive\nlock. An error will only be returned if the lock would have otherwise\nbeen acquired.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::RwLock;\n\n<span class=\"kw\">let </span>lock = RwLock::new(String::new());\n{\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = lock.write().unwrap();\n    <span class=\"kw-2\">*</span>s = <span class=\"string\">\"modified\"</span>.to_owned();\n}\n<span class=\"macro\">assert_eq!</span>(lock.into_inner().unwrap(), <span class=\"string\">\"modified\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::RwLock;%0A++++%0A++++let+lock+=+RwLock::new(String::new());%0A++++%7B%0A++++++++let+mut+s+=+lock.write().unwrap();%0A++++++++*s+=+%22modified%22.to_owned();%0A++++%7D%0A++++assert_eq!(lock.into_inner().unwrap(),+%22modified%22);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"../../src/std/sync/rwlock.rs.html#532-535\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.get_mut\" class=\"fn\">get_mut</a>(&amp;mut self) -&gt; <a class=\"type\" href=\"type.LockResult.html\" title=\"type std::sync::LockResult\">LockResult</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a mutable reference to the underlying data.</p>\n<p>Since this call borrows the <code>RwLock</code> mutably, no actual locking needs to\ntake place – the mutable borrow statically guarantees no locks exist.</p>\n<h5 id=\"errors-5\"><a class=\"doc-anchor\" href=\"#errors-5\">§</a>Errors</h5>\n<p>This function will return an error if the <code>RwLock</code> is poisoned. An\n<code>RwLock</code> is poisoned whenever a writer panics while holding an exclusive\nlock. An error will only be returned if the lock would have otherwise\nbeen acquired.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::RwLock;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>lock = RwLock::new(<span class=\"number\">0</span>);\n<span class=\"kw-2\">*</span>lock.get_mut().unwrap() = <span class=\"number\">10</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>lock.read().unwrap(), <span class=\"number\">10</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::RwLock;%0A++++%0A++++let+mut+lock+=+RwLock::new(0);%0A++++*lock.get_mut().unwrap()+=+10;%0A++++assert_eq!(*lock.read().unwrap(),+10);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-RwLock%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/sync/rwlock.rs.html#539-556\">source</a></span><a href=\"#impl-Debug-for-RwLock%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a>&gt; <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.RwLock.html\" title=\"struct std::sync::RwLock\">RwLock</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/sync/rwlock.rs.html#540-555\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../fmt/type.Result.html\" title=\"type std::fmt::Result\">Result</a></h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-RwLock%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"../../src/std/sync/rwlock.rs.html#559-564\">source</a></span><a href=\"#impl-Default-for-RwLock%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a>&gt; <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"struct\" href=\"struct.RwLock.html\" title=\"struct std::sync::RwLock\">RwLock</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/sync/rwlock.rs.html#561-563\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"struct.RwLock.html\" title=\"struct std::sync::RwLock\">RwLock</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new <code>RwLock&lt;T&gt;</code>, with the <code>Default</code> value for T.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CT%3E-for-RwLock%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.24.0\">1.24.0</span> · <a class=\"src\" href=\"../../src/std/sync/rwlock.rs.html#567-573\">source</a></span><a href=\"#impl-From%3CT%3E-for-RwLock%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for <a class=\"struct\" href=\"struct.RwLock.html\" title=\"struct std::sync::RwLock\">RwLock</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/sync/rwlock.rs.html#570-572\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Creates a new instance of an <code>RwLock&lt;T&gt;</code> which is unlocked.\nThis is equivalent to <a href=\"struct.RwLock.html#method.new\" title=\"associated function std::sync::RwLock::new\"><code>RwLock::new</code></a>.</p>\n</div></details></div></details><section id=\"impl-RefUnwindSafe-for-RwLock%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"../../src/std/panic.rs.html#76\">source</a></span><a href=\"#impl-RefUnwindSafe-for-RwLock%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.RwLock.html\" title=\"struct std::sync::RwLock\">RwLock</a>&lt;T&gt;</h3></section><section id=\"impl-Send-for-RwLock%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/sync/rwlock.rs.html#90\">source</a></span><a href=\"#impl-Send-for-RwLock%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a>&gt; <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.RwLock.html\" title=\"struct std::sync::RwLock\">RwLock</a>&lt;T&gt;</h3></section><section id=\"impl-Sync-for-RwLock%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/sync/rwlock.rs.html#92\">source</a></span><a href=\"#impl-Sync-for-RwLock%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> + <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a>&gt; <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.RwLock.html\" title=\"struct std::sync::RwLock\">RwLock</a>&lt;T&gt;</h3></section><section id=\"impl-UnwindSafe-for-RwLock%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> · <a class=\"src\" href=\"../../src/std/panic.rs.html#69\">source</a></span><a href=\"#impl-UnwindSafe-for-RwLock%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.RwLock.html\" title=\"struct std::sync::RwLock\">RwLock</a>&lt;T&gt;</h3></section></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-RwLock%3CT%3E\" class=\"impl\"><a href=\"#impl-Freeze-for-RwLock%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; !<a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.RwLock.html\" title=\"struct std::sync::RwLock\">RwLock</a>&lt;T&gt;</h3></section><section id=\"impl-Unpin-for-RwLock%3CT%3E\" class=\"impl\"><a href=\"#impl-Unpin-for-RwLock%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.RwLock.html\" title=\"struct std::sync::RwLock\">RwLock</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3C!%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#782\">source</a><a href=\"#impl-From%3C!%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"../primitive.never.html\">!</a>&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#783\">source</a><a href=\"#method.from-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: <a class=\"primitive\" href=\"../primitive.never.html\">!</a>) -&gt; T</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from-2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:14:47.707Z"
}