{
	"title": "std::os::windows::io - Rust",
	"url": "https://doc.rust-lang.org/stable/std/os/windows/io/index.html",
	"markdown": "# std::os::windows::io - Rust\n\n## Module [std](../../../index.html)::[os](../../index.html)::[windows](../index.html)::[io](#)\n\n1.0.0 · [source](about:blank/src/std/os/windows/io/mod.rs.html#1-69) ·\n\nAvailable on **Windows** only.\n\nExpand description\n\nWindows-specific extensions to general I/O primitives.\n\nJust like raw pointers, raw Windows handles and sockets point to resources with dynamic lifetimes, and they can dangle if they outlive their resources or be forged if they’re created from invalid values.\n\nThis module provides three types for representing raw handles and sockets with different ownership properties: raw, borrowed, and owned, which are analogous to types used for representing pointers. These types reflect concepts of [I/O safety](about:blank/io/index.html#io-safety \"mod std::io\") on Windows.\n\nLike raw pointers, `RawHandle` and `RawSocket` values are primitive values. And in new code, they should be considered unsafe to do I/O on (analogous to dereferencing them). Rust did not always provide this guidance, so existing code in the Rust ecosystem often doesn’t mark `RawHandle` and `RawSocket` usage as unsafe. Libraries are encouraged to migrate, either by adding `unsafe` to APIs that dereference `RawHandle` and `RawSocket` values, or by using to `BorrowedHandle`, `BorrowedSocket`, `OwnedHandle`, or `OwnedSocket`.\n\nLike references, `BorrowedHandle` and `BorrowedSocket` values are tied to a lifetime, to ensure that they don’t outlive the resource they point to. These are safe to use. `BorrowedHandle` and `BorrowedSocket` values may be used in APIs which provide safe access to any system call except for `CloseHandle`, `closesocket`, or any other call that would end the dynamic lifetime of the resource without ending the lifetime of the handle or socket.\n\n`BorrowedHandle` and `BorrowedSocket` values may be used in APIs which provide safe access to `DuplicateHandle` and `WSADuplicateSocketW` and related functions, so types implementing `AsHandle`, `AsSocket`, `From<OwnedHandle>`, or `From<OwnedSocket>` should not assume they always have exclusive access to the underlying object.\n\nLike boxes, `OwnedHandle` and `OwnedSocket` values conceptually own the resource they point to, and free (close) it when they are dropped.\n\nSee the [`io` module docs](about:blank/io/index.html#io-safety \"mod std::io\") for a general explanation of I/O safety.\n\n-   A borrowed handle.\n    \n-   A borrowed socket.\n    \n-   FFI type for handles in return values or out parameters, where `INVALID_HANDLE_VALUE` is used as a sentry value to indicate errors, such as in the return value of `CreateFileW`. This uses `repr(transparent)` and has the representation of a host handle, so that it can be used in such FFI declarations.\n    \n-   FFI type for handles in return values or out parameters, where `NULL` is used as a sentry value to indicate errors, such as in the return value of `CreateThread`. This uses `repr(transparent)` and has the representation of a host handle, so that it can be used in such FFI declarations.\n    \n-   This is the error type used by [`HandleOrInvalid`](struct.HandleOrInvalid.html \"struct std::os::windows::io::HandleOrInvalid\") when attempting to convert into a handle, to indicate that the value is `INVALID_HANDLE_VALUE`.\n    \n-   This is the error type used by [`HandleOrNull`](struct.HandleOrNull.html \"struct std::os::windows::io::HandleOrNull\") when attempting to convert into a handle, to indicate that the value is null.\n    \n-   An owned handle.\n    \n-   An owned socket.\n    \n\n-   A trait to borrow the handle from an underlying object.\n    \n-   Extracts raw handles.\n    \n-   Extracts raw sockets.\n    \n-   A trait to borrow the socket from an underlying object.\n    \n-   Construct I/O objects from raw handles.\n    \n-   Creates I/O objects from raw sockets.\n    \n-   A trait to express the ability to consume an object and acquire ownership of its raw `HANDLE`.\n    \n-   A trait to express the ability to consume an object and acquire ownership of its raw `SOCKET`.\n    \n\n-   Raw HANDLEs.\n    \n-   Raw SOCKETs.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Windows-specific extensions to general I/O primitives.\"><title>std::os::windows::io - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../../../\" data-static-root-path=\"../../../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"../sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc mod\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Module io</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Module io</a></h2><div class=\"sidebar-elems\"><section><ul class=\"block\"><li><a href=\"#structs\">Structs</a></li><li><a href=\"#traits\">Traits</a></li><li><a href=\"#types\">Type Aliases</a></li></ul></section><h2><a href=\"../index.html\">In std::os::windows</a></h2><h3><a href=\"../index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"../ffi/index.html\">ffi</a></li><li><a href=\"../fs/index.html\">fs</a></li><li><a href=\"../io/index.html\">io</a></li><li><a href=\"../prelude/index.html\">prelude</a></li><li><a href=\"../process/index.html\">process</a></li><li><a href=\"../raw/index.html\">raw</a></li><li><a href=\"../thread/index.html\">thread</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Module <a href=\"../../../index.html\">std</a>::<wbr><a href=\"../../index.html\">os</a>::<wbr><a href=\"../index.html\">windows</a>::<wbr><a class=\"mod\" href=\"#\">io</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../../../src/std/os/windows/io/mod.rs.html#1-69\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Windows</strong> only.</div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Windows-specific extensions to general I/O primitives.</p>\n<p>Just like raw pointers, raw Windows handles and sockets point to resources\nwith dynamic lifetimes, and they can dangle if they outlive their resources\nor be forged if they’re created from invalid values.</p>\n<p>This module provides three types for representing raw handles and sockets\nwith different ownership properties: raw, borrowed, and owned, which are\nanalogous to types used for representing pointers. These types reflect concepts of <a href=\"../../../io/index.html#io-safety\" title=\"mod std::io\">I/O\nsafety</a> on Windows.</p>\n<div><table><thead><tr><th>Type</th><th>Analogous to</th></tr></thead><tbody>\n<tr><td><a href=\"type.RawHandle.html\" title=\"type std::os::windows::io::RawHandle\"><code>RawHandle</code></a></td><td><code>*const _</code></td></tr>\n<tr><td><a href=\"type.RawSocket.html\" title=\"type std::os::windows::io::RawSocket\"><code>RawSocket</code></a></td><td><code>*const _</code></td></tr>\n<tr><td></td><td></td></tr>\n<tr><td><a href=\"struct.BorrowedHandle.html\" title=\"struct std::os::windows::io::BorrowedHandle\"><code>BorrowedHandle&lt;'a&gt;</code></a></td><td><code>&amp;'a _</code></td></tr>\n<tr><td><a href=\"struct.BorrowedSocket.html\" title=\"struct std::os::windows::io::BorrowedSocket\"><code>BorrowedSocket&lt;'a&gt;</code></a></td><td><code>&amp;'a _</code></td></tr>\n<tr><td></td><td></td></tr>\n<tr><td><a href=\"struct.OwnedHandle.html\" title=\"struct std::os::windows::io::OwnedHandle\"><code>OwnedHandle</code></a></td><td><code>Box&lt;_&gt;</code></td></tr>\n<tr><td><a href=\"struct.OwnedSocket.html\" title=\"struct std::os::windows::io::OwnedSocket\"><code>OwnedSocket</code></a></td><td><code>Box&lt;_&gt;</code></td></tr>\n</tbody></table>\n</div>\n<p>Like raw pointers, <code>RawHandle</code> and <code>RawSocket</code> values are primitive values.\nAnd in new code, they should be considered unsafe to do I/O on (analogous\nto dereferencing them). Rust did not always provide this guidance, so\nexisting code in the Rust ecosystem often doesn’t mark <code>RawHandle</code> and\n<code>RawSocket</code> usage as unsafe.\nLibraries are encouraged to migrate, either by adding <code>unsafe</code> to APIs\nthat dereference <code>RawHandle</code> and <code>RawSocket</code> values, or by using to\n<code>BorrowedHandle</code>, <code>BorrowedSocket</code>, <code>OwnedHandle</code>, or <code>OwnedSocket</code>.</p>\n<p>Like references, <code>BorrowedHandle</code> and <code>BorrowedSocket</code> values are tied to a\nlifetime, to ensure that they don’t outlive the resource they point to.\nThese are safe to use. <code>BorrowedHandle</code> and <code>BorrowedSocket</code> values may be\nused in APIs which provide safe access to any system call except for\n<code>CloseHandle</code>, <code>closesocket</code>, or any other call that would end the\ndynamic lifetime of the resource without ending the lifetime of the\nhandle or socket.</p>\n<p><code>BorrowedHandle</code> and <code>BorrowedSocket</code> values may be used in APIs which\nprovide safe access to <code>DuplicateHandle</code> and <code>WSADuplicateSocketW</code> and\nrelated functions, so types implementing <code>AsHandle</code>, <code>AsSocket</code>,\n<code>From&lt;OwnedHandle&gt;</code>, or <code>From&lt;OwnedSocket&gt;</code> should not assume they always\nhave exclusive access to the underlying object.</p>\n<p>Like boxes, <code>OwnedHandle</code> and <code>OwnedSocket</code> values conceptually own the\nresource they point to, and free (close) it when they are dropped.</p>\n<p>See the <a href=\"../../../io/index.html#io-safety\" title=\"mod std::io\"><code>io</code> module docs</a> for a general explanation of I/O safety.</p>\n</div></details><h2 id=\"structs\" class=\"section-header\">Structs<a href=\"#structs\" class=\"anchor\">§</a></h2><ul class=\"item-table\"><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.BorrowedHandle.html\" title=\"struct std::os::windows::io::BorrowedHandle\">BorrowedHandle</a></div><div class=\"desc docblock-short\">A borrowed handle.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.BorrowedSocket.html\" title=\"struct std::os::windows::io::BorrowedSocket\">BorrowedSocket</a></div><div class=\"desc docblock-short\">A borrowed socket.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.HandleOrInvalid.html\" title=\"struct std::os::windows::io::HandleOrInvalid\">HandleOrInvalid</a></div><div class=\"desc docblock-short\">FFI type for handles in return values or out parameters, where <code>INVALID_HANDLE_VALUE</code> is used\nas a sentry value to indicate errors, such as in the return value of <code>CreateFileW</code>. This uses\n<code>repr(transparent)</code> and has the representation of a host handle, so that it can be used in such\nFFI declarations.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.HandleOrNull.html\" title=\"struct std::os::windows::io::HandleOrNull\">HandleOrNull</a></div><div class=\"desc docblock-short\">FFI type for handles in return values or out parameters, where <code>NULL</code> is used\nas a sentry value to indicate errors, such as in the return value of <code>CreateThread</code>. This uses\n<code>repr(transparent)</code> and has the representation of a host handle, so that it can be used in such\nFFI declarations.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.InvalidHandleError.html\" title=\"struct std::os::windows::io::InvalidHandleError\">InvalidHandleError</a></div><div class=\"desc docblock-short\">This is the error type used by <a href=\"struct.HandleOrInvalid.html\" title=\"struct std::os::windows::io::HandleOrInvalid\"><code>HandleOrInvalid</code></a> when attempting to\nconvert into a handle, to indicate that the value is\n<code>INVALID_HANDLE_VALUE</code>.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.NullHandleError.html\" title=\"struct std::os::windows::io::NullHandleError\">NullHandleError</a></div><div class=\"desc docblock-short\">This is the error type used by <a href=\"struct.HandleOrNull.html\" title=\"struct std::os::windows::io::HandleOrNull\"><code>HandleOrNull</code></a> when attempting to convert\ninto a handle, to indicate that the value is null.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.OwnedHandle.html\" title=\"struct std::os::windows::io::OwnedHandle\">OwnedHandle</a></div><div class=\"desc docblock-short\">An owned handle.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.OwnedSocket.html\" title=\"struct std::os::windows::io::OwnedSocket\">OwnedSocket</a></div><div class=\"desc docblock-short\">An owned socket.</div></li></ul><h2 id=\"traits\" class=\"section-header\">Traits<a href=\"#traits\" class=\"anchor\">§</a></h2><ul class=\"item-table\"><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.AsHandle.html\" title=\"trait std::os::windows::io::AsHandle\">AsHandle</a></div><div class=\"desc docblock-short\">A trait to borrow the handle from an underlying object.</div></li><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.AsRawHandle.html\" title=\"trait std::os::windows::io::AsRawHandle\">AsRawHandle</a></div><div class=\"desc docblock-short\">Extracts raw handles.</div></li><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.AsRawSocket.html\" title=\"trait std::os::windows::io::AsRawSocket\">AsRawSocket</a></div><div class=\"desc docblock-short\">Extracts raw sockets.</div></li><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.AsSocket.html\" title=\"trait std::os::windows::io::AsSocket\">AsSocket</a></div><div class=\"desc docblock-short\">A trait to borrow the socket from an underlying object.</div></li><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.FromRawHandle.html\" title=\"trait std::os::windows::io::FromRawHandle\">FromRawHandle</a></div><div class=\"desc docblock-short\">Construct I/O objects from raw handles.</div></li><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.FromRawSocket.html\" title=\"trait std::os::windows::io::FromRawSocket\">FromRawSocket</a></div><div class=\"desc docblock-short\">Creates I/O objects from raw sockets.</div></li><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.IntoRawHandle.html\" title=\"trait std::os::windows::io::IntoRawHandle\">IntoRawHandle</a></div><div class=\"desc docblock-short\">A trait to express the ability to consume an object and acquire ownership of\nits raw <code>HANDLE</code>.</div></li><li><div class=\"item-name\"><a class=\"trait\" href=\"trait.IntoRawSocket.html\" title=\"trait std::os::windows::io::IntoRawSocket\">IntoRawSocket</a></div><div class=\"desc docblock-short\">A trait to express the ability to consume an object and acquire ownership of\nits raw <code>SOCKET</code>.</div></li></ul><h2 id=\"types\" class=\"section-header\">Type Aliases<a href=\"#types\" class=\"anchor\">§</a></h2><ul class=\"item-table\"><li><div class=\"item-name\"><a class=\"type\" href=\"type.RawHandle.html\" title=\"type std::os::windows::io::RawHandle\">RawHandle</a></div><div class=\"desc docblock-short\">Raw HANDLEs.</div></li><li><div class=\"item-name\"><a class=\"type\" href=\"type.RawSocket.html\" title=\"type std::os::windows::io::RawSocket\">RawSocket</a></div><div class=\"desc docblock-short\">Raw SOCKETs.</div></li></ul></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:23:48.734Z"
}