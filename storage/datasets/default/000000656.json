{
	"title": "DispatchFromDyn in std::ops - Rust",
	"url": "https://doc.rust-lang.org/stable/std/ops/trait.DispatchFromDyn.html",
	"markdown": "# DispatchFromDyn in std::ops - Rust\n\n```\npub trait DispatchFromDyn<T> { }\n```\n\nðŸ”¬This is a nightly-only experimental API. (`dispatch_from_dyn`)\n\nExpand description\n\n`DispatchFromDyn` is used in the implementation of object safety checks (specifically allowing arbitrary self types), to guarantee that a methodâ€™s receiver type can be dispatched on.\n\nNote: `DispatchFromDyn` was briefly named `CoerceSized` (and had a slightly different interpretation).\n\nImagine we have a trait object `t` with type `&dyn Tr`, where `Tr` is some trait with a method `m` defined as `fn m(&self);`. When calling `t.m()`, the receiver `t` is a wide pointer, but an implementation of `m` will expect a narrow pointer as `&self` (a reference to the concrete type). The compiler must generate an implicit conversion from the trait object/wide pointer to the concrete reference/narrow pointer. Implementing `DispatchFromDyn` indicates that that conversion is allowed and thus that the type implementing `DispatchFromDyn` is safe to use as the self type in an object-safe method. (in the above example, the compiler will require `DispatchFromDyn` is implemented for `&'a U`).\n\n`DispatchFromDyn` does not specify the conversion from wide pointer to narrow pointer; the conversion is hard-wired into the compiler. For the conversion to work, the following properties must hold (i.e., it is only safe to implement `DispatchFromDyn` for types which have these properties, these are also checked by the compiler):\n\n-   EITHER `Self` and `T` are either both references or both raw pointers; in either case, with the same mutability.\n-   OR, all of the following hold\n    -   `Self` and `T` must have the same type constructor, and only vary in a single type parameter formal (the _coerced type_, e.g., `impl DispatchFromDyn<Rc<T>> for Rc<U>` is ok and the single type parameter (instantiated with `T` or `U`) is the coerced type, `impl DispatchFromDyn<Arc<T>> for Rc<U>` is not ok).\n    -   The definition for `Self` must be a struct.\n    -   The definition for `Self` must not be `#[repr(packed)]` or `#[repr(C)]`.\n    -   Other than one-aligned, zero-sized fields, the definition for `Self` must have exactly one field and that fieldâ€™s type must be the coerced type. Furthermore, `Self`â€™s field type must implement `DispatchFromDyn<F>` where `F` is the type of `T`â€™s field type.\n\nAn example implementation of the trait:\n\n```\nimpl<T: ?Sized, U: ?Sized> DispatchFromDyn<Rc<U>> for Rc<T>\nwhere\n    T: Unsize<U>,\n{}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(dispatch_from_dyn,+unsize)%5D%0Afn+main()+%7B%0A++++use+std::%7Bops::DispatchFromDyn,+marker::Unsize%7D;%0A++++struct+Rc%3CT:+?Sized%3E(std::rc::Rc%3CT%3E);%0A++++impl%3CT:+?Sized,+U:+?Sized%3E+DispatchFromDyn%3CRc%3CU%3E%3E+for+Rc%3CT%3E%0A++++where%0A++++++++T:+Unsize%3CU%3E,%0A++++%7B%7D%0A%7D&version=nightly&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"`DispatchFromDyn` is used in the implementation of object safety checks (specifically allowing arbitrary self types), to guarantee that a methodâ€™s receiver type can be dispatched on.\"><title>DispatchFromDyn in std::ops - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc trait\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">DispatchFromDyn</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">DispatchFromDyn</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementors\">Implementors</a></h3></section><h2><a href=\"index.html\">In std::ops</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Range.html\">Range</a></li><li><a href=\"struct.RangeFrom.html\">RangeFrom</a></li><li><a href=\"struct.RangeFull.html\">RangeFull</a></li><li><a href=\"struct.RangeInclusive.html\">RangeInclusive</a></li><li><a href=\"struct.RangeTo.html\">RangeTo</a></li><li><a href=\"struct.RangeToInclusive.html\">RangeToInclusive</a></li><li><a href=\"struct.Yeet.html\">Yeet</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.Bound.html\">Bound</a></li><li><a href=\"enum.ControlFlow.html\">ControlFlow</a></li><li><a href=\"enum.CoroutineState.html\">CoroutineState</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.Add.html\">Add</a></li><li><a href=\"trait.AddAssign.html\">AddAssign</a></li><li><a href=\"trait.AsyncFn.html\">AsyncFn</a></li><li><a href=\"trait.AsyncFnMut.html\">AsyncFnMut</a></li><li><a href=\"trait.AsyncFnOnce.html\">AsyncFnOnce</a></li><li><a href=\"trait.BitAnd.html\">BitAnd</a></li><li><a href=\"trait.BitAndAssign.html\">BitAndAssign</a></li><li><a href=\"trait.BitOr.html\">BitOr</a></li><li><a href=\"trait.BitOrAssign.html\">BitOrAssign</a></li><li><a href=\"trait.BitXor.html\">BitXor</a></li><li><a href=\"trait.BitXorAssign.html\">BitXorAssign</a></li><li><a href=\"trait.CoerceUnsized.html\">CoerceUnsized</a></li><li><a href=\"trait.Coroutine.html\">Coroutine</a></li><li><a href=\"trait.Deref.html\">Deref</a></li><li><a href=\"trait.DerefMut.html\">DerefMut</a></li><li><a href=\"trait.DerefPure.html\">DerefPure</a></li><li><a href=\"trait.DispatchFromDyn.html\">DispatchFromDyn</a></li><li><a href=\"trait.Div.html\">Div</a></li><li><a href=\"trait.DivAssign.html\">DivAssign</a></li><li><a href=\"trait.Drop.html\">Drop</a></li><li><a href=\"trait.Fn.html\">Fn</a></li><li><a href=\"trait.FnMut.html\">FnMut</a></li><li><a href=\"trait.FnOnce.html\">FnOnce</a></li><li><a href=\"trait.FromResidual.html\">FromResidual</a></li><li><a href=\"trait.Index.html\">Index</a></li><li><a href=\"trait.IndexMut.html\">IndexMut</a></li><li><a href=\"trait.Mul.html\">Mul</a></li><li><a href=\"trait.MulAssign.html\">MulAssign</a></li><li><a href=\"trait.Neg.html\">Neg</a></li><li><a href=\"trait.Not.html\">Not</a></li><li><a href=\"trait.OneSidedRange.html\">OneSidedRange</a></li><li><a href=\"trait.RangeBounds.html\">RangeBounds</a></li><li><a href=\"trait.Rem.html\">Rem</a></li><li><a href=\"trait.RemAssign.html\">RemAssign</a></li><li><a href=\"trait.Residual.html\">Residual</a></li><li><a href=\"trait.Shl.html\">Shl</a></li><li><a href=\"trait.ShlAssign.html\">ShlAssign</a></li><li><a href=\"trait.Shr.html\">Shr</a></li><li><a href=\"trait.ShrAssign.html\">ShrAssign</a></li><li><a href=\"trait.Sub.html\">Sub</a></li><li><a href=\"trait.SubAssign.html\">SubAssign</a></li><li><a href=\"trait.Try.html\">Try</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type â€˜Sâ€™ or â€˜/â€™ to search, â€˜?â€™ for more optionsâ€¦\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Trait <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">ops</a>::<wbr><a class=\"trait\" href=\"#\">DispatchFromDyn</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/unsize.rs.html#117\">source</a> Â· <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>âˆ’</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub trait DispatchFromDyn&lt;T&gt; { }</code></pre><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>dispatch_from_dyn</code>)</span></div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p><code>DispatchFromDyn</code> is used in the implementation of object safety checks (specifically allowing\narbitrary self types), to guarantee that a methodâ€™s receiver type can be dispatched on.</p>\n<p>Note: <code>DispatchFromDyn</code> was briefly named <code>CoerceSized</code> (and had a slightly different\ninterpretation).</p>\n<p>Imagine we have a trait object <code>t</code> with type <code>&amp;dyn Tr</code>, where <code>Tr</code> is some trait with a method\n<code>m</code> defined as <code>fn m(&amp;self);</code>. When calling <code>t.m()</code>, the receiver <code>t</code> is a wide pointer, but an\nimplementation of <code>m</code> will expect a narrow pointer as <code>&amp;self</code> (a reference to the concrete\ntype). The compiler must generate an implicit conversion from the trait object/wide pointer to\nthe concrete reference/narrow pointer. Implementing <code>DispatchFromDyn</code> indicates that that\nconversion is allowed and thus that the type implementing <code>DispatchFromDyn</code> is safe to use as\nthe self type in an object-safe method. (in the above example, the compiler will require\n<code>DispatchFromDyn</code> is implemented for <code>&amp;'a U</code>).</p>\n<p><code>DispatchFromDyn</code> does not specify the conversion from wide pointer to narrow pointer; the\nconversion is hard-wired into the compiler. For the conversion to work, the following\nproperties must hold (i.e., it is only safe to implement <code>DispatchFromDyn</code> for types which have\nthese properties, these are also checked by the compiler):</p>\n<ul>\n<li>EITHER <code>Self</code> and <code>T</code> are either both references or both raw pointers; in either case, with\nthe same mutability.</li>\n<li>OR, all of the following hold\n<ul>\n<li><code>Self</code> and <code>T</code> must have the same type constructor, and only vary in a single type parameter\nformal (the <em>coerced type</em>, e.g., <code>impl DispatchFromDyn&lt;Rc&lt;T&gt;&gt; for Rc&lt;U&gt;</code> is ok and the\nsingle type parameter (instantiated with <code>T</code> or <code>U</code>) is the coerced type,\n<code>impl DispatchFromDyn&lt;Arc&lt;T&gt;&gt; for Rc&lt;U&gt;</code> is not ok).</li>\n<li>The definition for <code>Self</code> must be a struct.</li>\n<li>The definition for <code>Self</code> must not be <code>#[repr(packed)]</code> or <code>#[repr(C)]</code>.</li>\n<li>Other than one-aligned, zero-sized fields, the definition for <code>Self</code> must have exactly one\nfield and that fieldâ€™s type must be the coerced type. Furthermore, <code>Self</code>â€™s field type must\nimplement <code>DispatchFromDyn&lt;F&gt;</code> where <code>F</code> is the type of <code>T</code>â€™s field type.</li>\n</ul>\n</li>\n</ul>\n<p>An example implementation of the trait:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">impl</span>&lt;T: <span class=\"question-mark\">?</span>Sized, U: <span class=\"question-mark\">?</span>Sized&gt; DispatchFromDyn&lt;Rc&lt;U&gt;&gt; <span class=\"kw\">for </span>Rc&lt;T&gt;\n<span class=\"kw\">where\n    </span>T: Unsize&lt;U&gt;,\n{}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(dispatch_from_dyn,+unsize)%5D%0Afn+main()+%7B%0A++++use+std::%7Bops::DispatchFromDyn,+marker::Unsize%7D;%0A++++struct+Rc%3CT:+?Sized%3E(std::rc::Rc%3CT%3E);%0A++++impl%3CT:+?Sized,+U:+?Sized%3E+DispatchFromDyn%3CRc%3CU%3E%3E+for+Rc%3CT%3E%0A++++where%0A++++++++T:+Unsize%3CU%3E,%0A++++%7B%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"implementors\" class=\"section-header\">Implementors<a href=\"#implementors\" class=\"anchor\">Â§</a></h2><div id=\"implementors-list\"><section id=\"impl-DispatchFromDyn%3C%26U%3E-for-%26T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/unsize.rs.html#123\">source</a><a href=\"#impl-DispatchFromDyn%3C%26U%3E-for-%26T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, T, U&gt; <a class=\"trait\" href=\"trait.DispatchFromDyn.html\" title=\"trait std::ops::DispatchFromDyn\">DispatchFromDyn</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a U</a>&gt; for <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Unsize.html\" title=\"trait std::marker::Unsize\">Unsize</a>&lt;U&gt; + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    U: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-DispatchFromDyn%3C%26mut+U%3E-for-%26mut+T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/unsize.rs.html#126\">source</a><a href=\"#impl-DispatchFromDyn%3C%26mut+U%3E-for-%26mut+T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, T, U&gt; <a class=\"trait\" href=\"trait.DispatchFromDyn.html\" title=\"trait std::ops::DispatchFromDyn\">DispatchFromDyn</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a mut U</a>&gt; for <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;'a mut T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Unsize.html\" title=\"trait std::marker::Unsize\">Unsize</a>&lt;U&gt; + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    U: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-DispatchFromDyn%3CPin%3CU%3E%3E-for-Pin%3CPtr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0\">1.33.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1723\">source</a></span><a href=\"#impl-DispatchFromDyn%3CPin%3CU%3E%3E-for-Pin%3CPtr%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;Ptr, U&gt; <a class=\"trait\" href=\"trait.DispatchFromDyn.html\" title=\"trait std::ops::DispatchFromDyn\">DispatchFromDyn</a>&lt;<a class=\"struct\" href=\"../pin/struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;U&gt;&gt; for <a class=\"struct\" href=\"../pin/struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;Ptr&gt;<div class=\"where\">where\n    Ptr: <a class=\"trait\" href=\"trait.DispatchFromDyn.html\" title=\"trait std::ops::DispatchFromDyn\">DispatchFromDyn</a>&lt;U&gt;,</div></h3></section><section id=\"impl-DispatchFromDyn%3C*const+U%3E-for-*const+T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/unsize.rs.html#129\">source</a><a href=\"#impl-DispatchFromDyn%3C*const+U%3E-for-*const+T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"trait.DispatchFromDyn.html\" title=\"trait std::ops::DispatchFromDyn\">DispatchFromDyn</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*const U</a>&gt; for <a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Unsize.html\" title=\"trait std::marker::Unsize\">Unsize</a>&lt;U&gt; + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    U: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-DispatchFromDyn%3C*mut+U%3E-for-*mut+T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/unsize.rs.html#132\">source</a><a href=\"#impl-DispatchFromDyn%3C*mut+U%3E-for-*mut+T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"trait.DispatchFromDyn.html\" title=\"trait std::ops::DispatchFromDyn\">DispatchFromDyn</a>&lt;<a class=\"primitive\" href=\"../primitive.pointer.html\">*mut U</a>&gt; for <a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Unsize.html\" title=\"trait std::marker::Unsize\">Unsize</a>&lt;U&gt; + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    U: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-DispatchFromDyn%3CBox%3CU%3E%3E-for-Box%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#2114\">source</a><a href=\"#impl-DispatchFromDyn%3CBox%3CU%3E%3E-for-Box%3CT%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"trait.DispatchFromDyn.html\" title=\"trait std::ops::DispatchFromDyn\">DispatchFromDyn</a>&lt;<a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;U&gt;&gt; for <a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Unsize.html\" title=\"trait std::marker::Unsize\">Unsize</a>&lt;U&gt; + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    U: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-DispatchFromDyn%3CCell%3CU%3E%3E-for-Cell%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#667\">source</a><a href=\"#impl-DispatchFromDyn%3CCell%3CU%3E%3E-for-Cell%3CT%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"trait.DispatchFromDyn.html\" title=\"trait std::ops::DispatchFromDyn\">DispatchFromDyn</a>&lt;<a class=\"struct\" href=\"../cell/struct.Cell.html\" title=\"struct std::cell::Cell\">Cell</a>&lt;U&gt;&gt; for <a class=\"struct\" href=\"../cell/struct.Cell.html\" title=\"struct std::cell::Cell\">Cell</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.DispatchFromDyn.html\" title=\"trait std::ops::DispatchFromDyn\">DispatchFromDyn</a>&lt;U&gt;,</div></h3></section><section id=\"impl-DispatchFromDyn%3CSyncUnsafeCell%3CU%3E%3E-for-SyncUnsafeCell%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#2383\">source</a><a href=\"#impl-DispatchFromDyn%3CSyncUnsafeCell%3CU%3E%3E-for-SyncUnsafeCell%3CT%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"trait.DispatchFromDyn.html\" title=\"trait std::ops::DispatchFromDyn\">DispatchFromDyn</a>&lt;<a class=\"struct\" href=\"../cell/struct.SyncUnsafeCell.html\" title=\"struct std::cell::SyncUnsafeCell\">SyncUnsafeCell</a>&lt;U&gt;&gt; for <a class=\"struct\" href=\"../cell/struct.SyncUnsafeCell.html\" title=\"struct std::cell::SyncUnsafeCell\">SyncUnsafeCell</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.DispatchFromDyn.html\" title=\"trait std::ops::DispatchFromDyn\">DispatchFromDyn</a>&lt;U&gt;,</div></h3></section><section id=\"impl-DispatchFromDyn%3CUnsafeCell%3CU%3E%3E-for-UnsafeCell%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#2240\">source</a><a href=\"#impl-DispatchFromDyn%3CUnsafeCell%3CU%3E%3E-for-UnsafeCell%3CT%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"trait.DispatchFromDyn.html\" title=\"trait std::ops::DispatchFromDyn\">DispatchFromDyn</a>&lt;<a class=\"struct\" href=\"../cell/struct.UnsafeCell.html\" title=\"struct std::cell::UnsafeCell\">UnsafeCell</a>&lt;U&gt;&gt; for <a class=\"struct\" href=\"../cell/struct.UnsafeCell.html\" title=\"struct std::cell::UnsafeCell\">UnsafeCell</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.DispatchFromDyn.html\" title=\"trait std::ops::DispatchFromDyn\">DispatchFromDyn</a>&lt;U&gt;,</div></h3></section><section id=\"impl-DispatchFromDyn%3CNonNull%3CU%3E%3E-for-NonNull%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1772\">source</a><a href=\"#impl-DispatchFromDyn%3CNonNull%3CU%3E%3E-for-NonNull%3CT%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"trait.DispatchFromDyn.html\" title=\"trait std::ops::DispatchFromDyn\">DispatchFromDyn</a>&lt;<a class=\"struct\" href=\"../ptr/struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;U&gt;&gt; for <a class=\"struct\" href=\"../ptr/struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Unsize.html\" title=\"trait std::marker::Unsize\">Unsize</a>&lt;U&gt; + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    U: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-DispatchFromDyn%3CRc%3CU%3E%3E-for-Rc%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/rc.rs.html#344\">source</a><a href=\"#impl-DispatchFromDyn%3CRc%3CU%3E%3E-for-Rc%3CT%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"trait.DispatchFromDyn.html\" title=\"trait std::ops::DispatchFromDyn\">DispatchFromDyn</a>&lt;<a class=\"struct\" href=\"../rc/struct.Rc.html\" title=\"struct std::rc::Rc\">Rc</a>&lt;U&gt;&gt; for <a class=\"struct\" href=\"../rc/struct.Rc.html\" title=\"struct std::rc::Rc\">Rc</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Unsize.html\" title=\"trait std::marker::Unsize\">Unsize</a>&lt;U&gt; + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    U: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-DispatchFromDyn%3CWeak%3CU%3E%3E-for-Weak%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/rc.rs.html#2856\">source</a><a href=\"#impl-DispatchFromDyn%3CWeak%3CU%3E%3E-for-Weak%3CT%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"trait.DispatchFromDyn.html\" title=\"trait std::ops::DispatchFromDyn\">DispatchFromDyn</a>&lt;<a class=\"struct\" href=\"../rc/struct.Weak.html\" title=\"struct std::rc::Weak\">Weak</a>&lt;U&gt;&gt; for std::rc::<a class=\"struct\" href=\"../rc/struct.Weak.html\" title=\"struct std::rc::Weak\">Weak</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Unsize.html\" title=\"trait std::marker::Unsize\">Unsize</a>&lt;U&gt; + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    U: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-DispatchFromDyn%3CArc%3CU%3E%3E-for-Arc%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#267\">source</a><a href=\"#impl-DispatchFromDyn%3CArc%3CU%3E%3E-for-Arc%3CT%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"trait.DispatchFromDyn.html\" title=\"trait std::ops::DispatchFromDyn\">DispatchFromDyn</a>&lt;<a class=\"struct\" href=\"../sync/struct.Arc.html\" title=\"struct std::sync::Arc\">Arc</a>&lt;U&gt;&gt; for <a class=\"struct\" href=\"../sync/struct.Arc.html\" title=\"struct std::sync::Arc\">Arc</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Unsize.html\" title=\"trait std::marker::Unsize\">Unsize</a>&lt;U&gt; + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    U: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-DispatchFromDyn%3CWeak%3CU%3E%3E-for-Weak%3CT%3E-1\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#341\">source</a><a href=\"#impl-DispatchFromDyn%3CWeak%3CU%3E%3E-for-Weak%3CT%3E-1\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"trait.DispatchFromDyn.html\" title=\"trait std::ops::DispatchFromDyn\">DispatchFromDyn</a>&lt;<a class=\"struct\" href=\"../sync/struct.Weak.html\" title=\"struct std::sync::Weak\">Weak</a>&lt;U&gt;&gt; for std::sync::<a class=\"struct\" href=\"../sync/struct.Weak.html\" title=\"struct std::sync::Weak\">Weak</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Unsize.html\" title=\"trait std::marker::Unsize\">Unsize</a>&lt;U&gt; + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    U: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></div><script src=\"../../trait.impl/core/ops/unsize/trait.DispatchFromDyn.js\" data-ignore-extern-crates=\"alloc,core\" async=\"\"></script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:12:52.706Z"
}