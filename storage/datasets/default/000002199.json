{
	"title": "fs.rs - source",
	"url": "https://doc.rust-lang.org/stable/src/std/fs.rs.html#1-2756",
	"markdown": "# fs.rs - source\n\n```\n//! Filesystem manipulation operations.\n//!\n//! This module contains basic methods to manipulate the contents of the local\n//! filesystem. All methods in this module represent cross-platform filesystem\n//! operations. Extra platform-specific functionality can be found in the\n//! extension traits of `std::os::$platform`.\n\n#![stable(feature = \"rust1\", since = \"1.0.0\")]\n#![deny(unsafe_op_in_unsafe_fn)]\n\n#[cfg(all(test, not(any(target_os = \"emscripten\", target_env = \"sgx\", target_os = \"xous\"))))]\nmod tests;\n\nuse crate::ffi::OsString;\nuse crate::fmt;\nuse crate::io::{self, BorrowedCursor, IoSlice, IoSliceMut, Read, Seek, SeekFrom, Write};\nuse crate::path::{Path, PathBuf};\nuse crate::sealed::Sealed;\nuse crate::sync::Arc;\nuse crate::sys::fs as fs_imp;\nuse crate::sys_common::{AsInner, AsInnerMut, FromInner, IntoInner};\nuse crate::time::SystemTime;\n\n/// An object providing access to an open file on the filesystem.\n///\n/// An instance of a `File` can be read and/or written depending on what options\n/// it was opened with. Files also implement [`Seek`] to alter the logical cursor\n/// that the file contains internally.\n///\n/// Files are automatically closed when they go out of scope.  Errors detected\n/// on closing are ignored by the implementation of `Drop`.  Use the method\n/// [`sync_all`] if these errors must be manually handled.\n///\n/// `File` does not buffer reads and writes. For efficiency, consider wrapping the\n/// file in a [`BufReader`] or [`BufWriter`] when performing many small [`read`]\n/// or [`write`] calls, unless unbuffered reads and writes are required.\n///\n/// # Examples\n///\n/// Creates a new file and write bytes to it (you can also use [`write`]):\n///\n/// ```no_run\n/// use std::fs::File;\n/// use std::io::prelude::*;\n///\n/// fn main() -> std::io::Result<()> {\n///     let mut file = File::create(\"foo.txt\")?;\n///     file.write_all(b\"Hello, world!\")?;\n///     Ok(())\n/// }\n/// ```\n///\n/// Read the contents of a file into a [`String`] (you can also use [`read`]):\n///\n/// ```no_run\n/// use std::fs::File;\n/// use std::io::prelude::*;\n///\n/// fn main() -> std::io::Result<()> {\n///     let mut file = File::open(\"foo.txt\")?;\n///     let mut contents = String::new();\n///     file.read_to_string(&mut contents)?;\n///     assert_eq!(contents, \"Hello, world!\");\n///     Ok(())\n/// }\n/// ```\n///\n/// Using a buffered [`Read`]er:\n///\n/// ```no_run\n/// use std::fs::File;\n/// use std::io::BufReader;\n/// use std::io::prelude::*;\n///\n/// fn main() -> std::io::Result<()> {\n///     let file = File::open(\"foo.txt\")?;\n///     let mut buf_reader = BufReader::new(file);\n///     let mut contents = String::new();\n///     buf_reader.read_to_string(&mut contents)?;\n///     assert_eq!(contents, \"Hello, world!\");\n///     Ok(())\n/// }\n/// ```\n///\n/// Note that, although read and write methods require a `&mut File`, because\n/// of the interfaces for [`Read`] and [`Write`], the holder of a `&File` can\n/// still modify the file, either through methods that take `&File` or by\n/// retrieving the underlying OS object and modifying the file that way.\n/// Additionally, many operating systems allow concurrent modification of files\n/// by different processes. Avoid assuming that holding a `&File` means that the\n/// file will not change.\n///\n/// # Platform-specific behavior\n///\n/// On Windows, the implementation of [`Read`] and [`Write`] traits for `File`\n/// perform synchronous I/O operations. Therefore the underlying file must not\n/// have been opened for asynchronous I/O (e.g. by using `FILE_FLAG_OVERLAPPED`).\n///\n/// [`BufReader`]: io::BufReader\n/// [`BufWriter`]: io::BufWriter\n/// [`sync_all`]: File::sync_all\n/// [`write`]: File::write\n/// [`read`]: File::read\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\n#[cfg_attr(not(test), rustc_diagnostic_item = \"File\")]\npub struct File {\n    inner: fs_imp::File,\n}\n\n/// Metadata information about a file.\n///\n/// This structure is returned from the [`metadata`] or\n/// [`symlink_metadata`] function or method and represents known\n/// metadata about a file such as its permissions, size, modification\n/// times, etc.\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\n#[derive(Clone)]\npub struct Metadata(fs_imp::FileAttr);\n\n/// Iterator over the entries in a directory.\n///\n/// This iterator is returned from the [`read_dir`] function of this module and\n/// will yield instances of <code>[io::Result]<[DirEntry]></code>. Through a [`DirEntry`]\n/// information like the entry's path and possibly other metadata can be\n/// learned.\n///\n/// The order in which this iterator returns entries is platform and filesystem\n/// dependent.\n///\n/// # Errors\n///\n/// This [`io::Result`] will be an [`Err`] if there's some sort of intermittent\n/// IO error during iteration.\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\n#[derive(Debug)]\npub struct ReadDir(fs_imp::ReadDir);\n\n/// Entries returned by the [`ReadDir`] iterator.\n///\n/// An instance of `DirEntry` represents an entry inside of a directory on the\n/// filesystem. Each entry can be inspected via methods to learn about the full\n/// path or possibly other metadata through per-platform extension traits.\n///\n/// # Platform-specific behavior\n///\n/// On Unix, the `DirEntry` struct contains an internal reference to the open\n/// directory. Holding `DirEntry` objects will consume a file handle even\n/// after the `ReadDir` iterator is dropped.\n///\n/// Note that this [may change in the future][changes].\n///\n/// [changes]: io#platform-specific-behavior\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\npub struct DirEntry(fs_imp::DirEntry);\n\n/// Options and flags which can be used to configure how a file is opened.\n///\n/// This builder exposes the ability to configure how a [`File`] is opened and\n/// what operations are permitted on the open file. The [`File::open`] and\n/// [`File::create`] methods are aliases for commonly used options using this\n/// builder.\n///\n/// Generally speaking, when using `OpenOptions`, you'll first call\n/// [`OpenOptions::new`], then chain calls to methods to set each option, then\n/// call [`OpenOptions::open`], passing the path of the file you're trying to\n/// open. This will give you a [`io::Result`] with a [`File`] inside that you\n/// can further operate on.\n///\n/// # Examples\n///\n/// Opening a file to read:\n///\n/// ```no_run\n/// use std::fs::OpenOptions;\n///\n/// let file = OpenOptions::new().read(true).open(\"foo.txt\");\n/// ```\n///\n/// Opening a file for both reading and writing, as well as creating it if it\n/// doesn't exist:\n///\n/// ```no_run\n/// use std::fs::OpenOptions;\n///\n/// let file = OpenOptions::new()\n///             .read(true)\n///             .write(true)\n///             .create(true)\n///             .open(\"foo.txt\");\n/// ```\n#[derive(Clone, Debug)]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\n#[cfg_attr(not(test), rustc_diagnostic_item = \"FsOpenOptions\")]\npub struct OpenOptions(fs_imp::OpenOptions);\n\n/// Representation of the various timestamps on a file.\n#[derive(Copy, Clone, Debug, Default)]\n#[stable(feature = \"file_set_times\", since = \"1.75.0\")]\npub struct FileTimes(fs_imp::FileTimes);\n\n/// Representation of the various permissions on a file.\n///\n/// This module only currently provides one bit of information,\n/// [`Permissions::readonly`], which is exposed on all currently supported\n/// platforms. Unix-specific functionality, such as mode bits, is available\n/// through the [`PermissionsExt`] trait.\n///\n/// [`PermissionsExt`]: crate::os::unix::fs::PermissionsExt\n#[derive(Clone, PartialEq, Eq, Debug)]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\n#[cfg_attr(not(test), rustc_diagnostic_item = \"FsPermissions\")]\npub struct Permissions(fs_imp::FilePermissions);\n\n/// A structure representing a type of file with accessors for each file type.\n/// It is returned by [`Metadata::file_type`] method.\n#[stable(feature = \"file_type\", since = \"1.1.0\")]\n#[derive(Copy, Clone, PartialEq, Eq, Hash)]\n#[cfg_attr(not(test), rustc_diagnostic_item = \"FileType\")]\npub struct FileType(fs_imp::FileType);\n\n/// A builder used to create directories in various manners.\n///\n/// This builder also supports platform-specific options.\n#[stable(feature = \"dir_builder\", since = \"1.6.0\")]\n#[cfg_attr(not(test), rustc_diagnostic_item = \"DirBuilder\")]\n#[derive(Debug)]\npub struct DirBuilder {\n    inner: fs_imp::DirBuilder,\n    recursive: bool,\n}\n\n/// Read the entire contents of a file into a bytes vector.\n///\n/// This is a convenience function for using [`File::open`] and [`read_to_end`]\n/// with fewer imports and without an intermediate variable.\n///\n/// [`read_to_end`]: Read::read_to_end\n///\n/// # Errors\n///\n/// This function will return an error if `path` does not already exist.\n/// Other errors may also be returned according to [`OpenOptions::open`].\n///\n/// While reading from the file, this function handles [`io::ErrorKind::Interrupted`]\n/// with automatic retries. See [io::Read] documentation for details.\n///\n/// # Examples\n///\n/// ```no_run\n/// use std::fs;\n///\n/// fn main() -> Result<(), Box<dyn std::error::Error + 'static>> {\n///     let data: Vec<u8> = fs::read(\"image.jpg\")?;\n///     assert_eq!(data[0..3], [0xFF, 0xD8, 0xFF]);\n///     Ok(())\n/// }\n/// ```\n#[stable(feature = \"fs_read_write_bytes\", since = \"1.26.0\")]\npub fn read<P: AsRef<Path>>(path: P) -> io::Result<Vec<u8>> {\n    fn inner(path: &Path) -> io::Result<Vec<u8>> {\n        let mut file = File::open(path)?;\n        let size = file.metadata().map(|m| m.len() as usize).ok();\n        let mut bytes = Vec::new();\n        bytes.try_reserve_exact(size.unwrap_or(0))?;\n        io::default_read_to_end(&mut file, &mut bytes, size)?;\n        Ok(bytes)\n    }\n    inner(path.as_ref())\n}\n\n/// Read the entire contents of a file into a string.\n///\n/// This is a convenience function for using [`File::open`] and [`read_to_string`]\n/// with fewer imports and without an intermediate variable.\n///\n/// [`read_to_string`]: Read::read_to_string\n///\n/// # Errors\n///\n/// This function will return an error if `path` does not already exist.\n/// Other errors may also be returned according to [`OpenOptions::open`].\n///\n/// If the contents of the file are not valid UTF-8, then an error will also be\n/// returned.\n///\n/// While reading from the file, this function handles [`io::ErrorKind::Interrupted`]\n/// with automatic retries. See [io::Read] documentation for details.\n///\n/// # Examples\n///\n/// ```no_run\n/// use std::fs;\n/// use std::error::Error;\n///\n/// fn main() -> Result<(), Box<dyn Error>> {\n///     let message: String = fs::read_to_string(\"message.txt\")?;\n///     println!(\"{}\", message);\n///     Ok(())\n/// }\n/// ```\n#[stable(feature = \"fs_read_write\", since = \"1.26.0\")]\npub fn read_to_string<P: AsRef<Path>>(path: P) -> io::Result<String> {\n    fn inner(path: &Path) -> io::Result<String> {\n        let mut file = File::open(path)?;\n        let size = file.metadata().map(|m| m.len() as usize).ok();\n        let mut string = String::new();\n        string.try_reserve_exact(size.unwrap_or(0))?;\n        io::default_read_to_string(&mut file, &mut string, size)?;\n        Ok(string)\n    }\n    inner(path.as_ref())\n}\n\n/// Write a slice as the entire contents of a file.\n///\n/// This function will create a file if it does not exist,\n/// and will entirely replace its contents if it does.\n///\n/// Depending on the platform, this function may fail if the\n/// full directory path does not exist.\n///\n/// This is a convenience function for using [`File::create`] and [`write_all`]\n/// with fewer imports.\n///\n/// [`write_all`]: Write::write_all\n///\n/// # Examples\n///\n/// ```no_run\n/// use std::fs;\n///\n/// fn main() -> std::io::Result<()> {\n///     fs::write(\"foo.txt\", b\"Lorem ipsum\")?;\n///     fs::write(\"bar.txt\", \"dolor sit\")?;\n///     Ok(())\n/// }\n/// ```\n#[stable(feature = \"fs_read_write_bytes\", since = \"1.26.0\")]\npub fn write<P: AsRef<Path>, C: AsRef<[u8]>>(path: P, contents: C) -> io::Result<()> {\n    fn inner(path: &Path, contents: &[u8]) -> io::Result<()> {\n        File::create(path)?.write_all(contents)\n    }\n    inner(path.as_ref(), contents.as_ref())\n}\n\nimpl File {\n    /// Attempts to open a file in read-only mode.\n    ///\n    /// See the [`OpenOptions::open`] method for more details.\n    ///\n    /// If you only need to read the entire file contents,\n    /// consider [`std::fs::read()`][self::read] or\n    /// [`std::fs::read_to_string()`][self::read_to_string] instead.\n    ///\n    /// # Errors\n    ///\n    /// This function will return an error if `path` does not already exist.\n    /// Other errors may also be returned according to [`OpenOptions::open`].\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// use std::fs::File;\n    /// use std::io::Read;\n    ///\n    /// fn main() -> std::io::Result<()> {\n    ///     let mut f = File::open(\"foo.txt\")?;\n    ///     let mut data = vec![];\n    ///     f.read_to_end(&mut data)?;\n    ///     Ok(())\n    /// }\n    /// ```\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    pub fn open<P: AsRef<Path>>(path: P) -> io::Result<File> {\n        OpenOptions::new().read(true).open(path.as_ref())\n    }\n\n    /// Opens a file in write-only mode.\n    ///\n    /// This function will create a file if it does not exist,\n    /// and will truncate it if it does.\n    ///\n    /// Depending on the platform, this function may fail if the\n    /// full directory path does not exist.\n    /// See the [`OpenOptions::open`] function for more details.\n    ///\n    /// See also [`std::fs::write()`][self::write] for a simple function to\n    /// create a file with some given data.\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// use std::fs::File;\n    /// use std::io::Write;\n    ///\n    /// fn main() -> std::io::Result<()> {\n    ///     let mut f = File::create(\"foo.txt\")?;\n    ///     f.write_all(&1234_u32.to_be_bytes())?;\n    ///     Ok(())\n    /// }\n    /// ```\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    pub fn create<P: AsRef<Path>>(path: P) -> io::Result<File> {\n        OpenOptions::new().write(true).create(true).truncate(true).open(path.as_ref())\n    }\n\n    /// Creates a new file in read-write mode; error if the file exists.\n    ///\n    /// This function will create a file if it does not exist, or return an error if it does. This\n    /// way, if the call succeeds, the file returned is guaranteed to be new.\n    /// If a file exists at the target location, creating a new file will fail with [`AlreadyExists`]\n    /// or another error based on the situation. See [`OpenOptions::open`] for a\n    /// non-exhaustive list of likely errors.\n    ///\n    /// This option is useful because it is atomic. Otherwise between checking whether a file\n    /// exists and creating a new one, the file may have been created by another process (a TOCTOU\n    /// race condition / attack).\n    ///\n    /// This can also be written using\n    /// `File::options().read(true).write(true).create_new(true).open(...)`.\n    ///\n    /// [`AlreadyExists`]: crate::io::ErrorKind::AlreadyExists\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// use std::fs::File;\n    /// use std::io::Write;\n    ///\n    /// fn main() -> std::io::Result<()> {\n    ///     let mut f = File::create_new(\"foo.txt\")?;\n    ///     f.write_all(\"Hello, world!\".as_bytes())?;\n    ///     Ok(())\n    /// }\n    /// ```\n    #[stable(feature = \"file_create_new\", since = \"1.77.0\")]\n    pub fn create_new<P: AsRef<Path>>(path: P) -> io::Result<File> {\n        OpenOptions::new().read(true).write(true).create_new(true).open(path.as_ref())\n    }\n\n    /// Returns a new OpenOptions object.\n    ///\n    /// This function returns a new OpenOptions object that you can use to\n    /// open or create a file with specific options if `open()` or `create()`\n    /// are not appropriate.\n    ///\n    /// It is equivalent to `OpenOptions::new()`, but allows you to write more\n    /// readable code. Instead of\n    /// `OpenOptions::new().append(true).open(\"example.log\")`,\n    /// you can write `File::options().append(true).open(\"example.log\")`. This\n    /// also avoids the need to import `OpenOptions`.\n    ///\n    /// See the [`OpenOptions::new`] function for more details.\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// use std::fs::File;\n    /// use std::io::Write;\n    ///\n    /// fn main() -> std::io::Result<()> {\n    ///     let mut f = File::options().append(true).open(\"example.log\")?;\n    ///     writeln!(&mut f, \"new line\")?;\n    ///     Ok(())\n    /// }\n    /// ```\n    #[must_use]\n    #[stable(feature = \"with_options\", since = \"1.58.0\")]\n    pub fn options() -> OpenOptions {\n        OpenOptions::new()\n    }\n\n    /// Attempts to sync all OS-internal file content and metadata to disk.\n    ///\n    /// This function will attempt to ensure that all in-memory data reaches the\n    /// filesystem before returning.\n    ///\n    /// This can be used to handle errors that would otherwise only be caught\n    /// when the `File` is closed, as dropping a `File` will ignore all errors.\n    /// Note, however, that `sync_all` is generally more expensive than closing\n    /// a file by dropping it, because the latter is not required to block until\n    /// the data has been written to the filesystem.\n    ///\n    /// If synchronizing the metadata is not required, use [`sync_data`] instead.\n    ///\n    /// [`sync_data`]: File::sync_data\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// use std::fs::File;\n    /// use std::io::prelude::*;\n    ///\n    /// fn main() -> std::io::Result<()> {\n    ///     let mut f = File::create(\"foo.txt\")?;\n    ///     f.write_all(b\"Hello, world!\")?;\n    ///\n    ///     f.sync_all()?;\n    ///     Ok(())\n    /// }\n    /// ```\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[doc(alias = \"fsync\")]\n    pub fn sync_all(&self) -> io::Result<()> {\n        self.inner.fsync()\n    }\n\n    /// This function is similar to [`sync_all`], except that it might not\n    /// synchronize file metadata to the filesystem.\n    ///\n    /// This is intended for use cases that must synchronize content, but don't\n    /// need the metadata on disk. The goal of this method is to reduce disk\n    /// operations.\n    ///\n    /// Note that some platforms may simply implement this in terms of\n    /// [`sync_all`].\n    ///\n    /// [`sync_all`]: File::sync_all\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// use std::fs::File;\n    /// use std::io::prelude::*;\n    ///\n    /// fn main() -> std::io::Result<()> {\n    ///     let mut f = File::create(\"foo.txt\")?;\n    ///     f.write_all(b\"Hello, world!\")?;\n    ///\n    ///     f.sync_data()?;\n    ///     Ok(())\n    /// }\n    /// ```\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[doc(alias = \"fdatasync\")]\n    pub fn sync_data(&self) -> io::Result<()> {\n        self.inner.datasync()\n    }\n\n    /// Truncates or extends the underlying file, updating the size of\n    /// this file to become `size`.\n    ///\n    /// If the `size` is less than the current file's size, then the file will\n    /// be shrunk. If it is greater than the current file's size, then the file\n    /// will be extended to `size` and have all of the intermediate data filled\n    /// in with 0s.\n    ///\n    /// The file's cursor isn't changed. In particular, if the cursor was at the\n    /// end and the file is shrunk using this operation, the cursor will now be\n    /// past the end.\n    ///\n    /// # Errors\n    ///\n    /// This function will return an error if the file is not opened for writing.\n    /// Also, [`std::io::ErrorKind::InvalidInput`](crate::io::ErrorKind::InvalidInput)\n    /// will be returned if the desired length would cause an overflow due to\n    /// the implementation specifics.\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// use std::fs::File;\n    ///\n    /// fn main() -> std::io::Result<()> {\n    ///     let mut f = File::create(\"foo.txt\")?;\n    ///     f.set_len(10)?;\n    ///     Ok(())\n    /// }\n    /// ```\n    ///\n    /// Note that this method alters the content of the underlying file, even\n    /// though it takes `&self` rather than `&mut self`.\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    pub fn set_len(&self, size: u64) -> io::Result<()> {\n        self.inner.truncate(size)\n    }\n\n    /// Queries metadata about the underlying file.\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// use std::fs::File;\n    ///\n    /// fn main() -> std::io::Result<()> {\n    ///     let mut f = File::open(\"foo.txt\")?;\n    ///     let metadata = f.metadata()?;\n    ///     Ok(())\n    /// }\n    /// ```\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    pub fn metadata(&self) -> io::Result<Metadata> {\n        self.inner.file_attr().map(Metadata)\n    }\n\n    /// Creates a new `File` instance that shares the same underlying file handle\n    /// as the existing `File` instance. Reads, writes, and seeks will affect\n    /// both `File` instances simultaneously.\n    ///\n    /// # Examples\n    ///\n    /// Creates two handles for a file named `foo.txt`:\n    ///\n    /// ```no_run\n    /// use std::fs::File;\n    ///\n    /// fn main() -> std::io::Result<()> {\n    ///     let mut file = File::open(\"foo.txt\")?;\n    ///     let file_copy = file.try_clone()?;\n    ///     Ok(())\n    /// }\n    /// ```\n    ///\n    /// Assuming there’s a file named `foo.txt` with contents `abcdef\\n`, create\n    /// two handles, seek one of them, and read the remaining bytes from the\n    /// other handle:\n    ///\n    /// ```no_run\n    /// use std::fs::File;\n    /// use std::io::SeekFrom;\n    /// use std::io::prelude::*;\n    ///\n    /// fn main() -> std::io::Result<()> {\n    ///     let mut file = File::open(\"foo.txt\")?;\n    ///     let mut file_copy = file.try_clone()?;\n    ///\n    ///     file.seek(SeekFrom::Start(3))?;\n    ///\n    ///     let mut contents = vec![];\n    ///     file_copy.read_to_end(&mut contents)?;\n    ///     assert_eq!(contents, b\"def\\n\");\n    ///     Ok(())\n    /// }\n    /// ```\n    #[stable(feature = \"file_try_clone\", since = \"1.9.0\")]\n    pub fn try_clone(&self) -> io::Result<File> {\n        Ok(File { inner: self.inner.duplicate()? })\n    }\n\n    /// Changes the permissions on the underlying file.\n    ///\n    /// # Platform-specific behavior\n    ///\n    /// This function currently corresponds to the `fchmod` function on Unix and\n    /// the `SetFileInformationByHandle` function on Windows. Note that, this\n    /// [may change in the future][changes].\n    ///\n    /// [changes]: io#platform-specific-behavior\n    ///\n    /// # Errors\n    ///\n    /// This function will return an error if the user lacks permission change\n    /// attributes on the underlying file. It may also return an error in other\n    /// os-specific unspecified cases.\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// fn main() -> std::io::Result<()> {\n    ///     use std::fs::File;\n    ///\n    ///     let file = File::open(\"foo.txt\")?;\n    ///     let mut perms = file.metadata()?.permissions();\n    ///     perms.set_readonly(true);\n    ///     file.set_permissions(perms)?;\n    ///     Ok(())\n    /// }\n    /// ```\n    ///\n    /// Note that this method alters the permissions of the underlying file,\n    /// even though it takes `&self` rather than `&mut self`.\n    #[doc(alias = \"fchmod\", alias = \"SetFileInformationByHandle\")]\n    #[stable(feature = \"set_permissions_atomic\", since = \"1.16.0\")]\n    pub fn set_permissions(&self, perm: Permissions) -> io::Result<()> {\n        self.inner.set_permissions(perm.0)\n    }\n\n    /// Changes the timestamps of the underlying file.\n    ///\n    /// # Platform-specific behavior\n    ///\n    /// This function currently corresponds to the `futimens` function on Unix (falling back to\n    /// `futimes` on macOS before 10.13) and the `SetFileTime` function on Windows. Note that this\n    /// [may change in the future][changes].\n    ///\n    /// [changes]: io#platform-specific-behavior\n    ///\n    /// # Errors\n    ///\n    /// This function will return an error if the user lacks permission to change timestamps on the\n    /// underlying file. It may also return an error in other os-specific unspecified cases.\n    ///\n    /// This function may return an error if the operating system lacks support to change one or\n    /// more of the timestamps set in the `FileTimes` structure.\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// fn main() -> std::io::Result<()> {\n    ///     use std::fs::{self, File, FileTimes};\n    ///\n    ///     let src = fs::metadata(\"src\")?;\n    ///     let dest = File::options().write(true).open(\"dest\")?;\n    ///     let times = FileTimes::new()\n    ///         .set_accessed(src.accessed()?)\n    ///         .set_modified(src.modified()?);\n    ///     dest.set_times(times)?;\n    ///     Ok(())\n    /// }\n    /// ```\n    #[stable(feature = \"file_set_times\", since = \"1.75.0\")]\n    #[doc(alias = \"futimens\")]\n    #[doc(alias = \"futimes\")]\n    #[doc(alias = \"SetFileTime\")]\n    pub fn set_times(&self, times: FileTimes) -> io::Result<()> {\n        self.inner.set_times(times.0)\n    }\n\n    /// Changes the modification time of the underlying file.\n    ///\n    /// This is an alias for `set_times(FileTimes::new().set_modified(time))`.\n    #[stable(feature = \"file_set_times\", since = \"1.75.0\")]\n    #[inline]\n    pub fn set_modified(&self, time: SystemTime) -> io::Result<()> {\n        self.set_times(FileTimes::new().set_modified(time))\n    }\n}\n\n// In addition to the `impl`s here, `File` also has `impl`s for\n// `AsFd`/`From<OwnedFd>`/`Into<OwnedFd>` and\n// `AsRawFd`/`IntoRawFd`/`FromRawFd`, on Unix and WASI, and\n// `AsHandle`/`From<OwnedHandle>`/`Into<OwnedHandle>` and\n// `AsRawHandle`/`IntoRawHandle`/`FromRawHandle` on Windows.\n\nimpl AsInner<fs_imp::File> for File {\n    #[inline]\n    fn as_inner(&self) -> &fs_imp::File {\n        &self.inner\n    }\n}\nimpl FromInner<fs_imp::File> for File {\n    fn from_inner(f: fs_imp::File) -> File {\n        File { inner: f }\n    }\n}\nimpl IntoInner<fs_imp::File> for File {\n    fn into_inner(self) -> fs_imp::File {\n        self.inner\n    }\n}\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl fmt::Debug for File {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        self.inner.fmt(f)\n    }\n}\n\n/// Indicates how much extra capacity is needed to read the rest of the file.\nfn buffer_capacity_required(mut file: &File) -> Option<usize> {\n    let size = file.metadata().map(|m| m.len()).ok()?;\n    let pos = file.stream_position().ok()?;\n    // Don't worry about `usize` overflow because reading will fail regardless\n    // in that case.\n    Some(size.saturating_sub(pos) as usize)\n}\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl Read for &File {\n    /// Read some bytes from the file.\n    ///\n    /// See [`Read::read`] docs for more info.\n    ///\n    /// # Platform-specific behavior\n    ///\n    /// This function currently corresponds to the `read` function on Unix and\n    /// the `NtReadFile` function on Windows. Note that this [may change in\n    /// the future][changes].\n    ///\n    /// [changes]: io#platform-specific-behavior\n    #[inline]\n    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n        self.inner.read(buf)\n    }\n\n    /// Like `read`, except that it reads into a slice of buffers.\n    ///\n    /// See [`Read::read_vectored`] docs for more info.\n    ///\n    /// # Platform-specific behavior\n    ///\n    /// This function currently corresponds to the `readv` function on Unix and\n    /// falls back to the `read` implementation on Windows. Note that this\n    /// [may change in the future][changes].\n    ///\n    /// [changes]: io#platform-specific-behavior\n    #[inline]\n    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n        self.inner.read_vectored(bufs)\n    }\n\n    #[inline]\n    fn read_buf(&mut self, cursor: BorrowedCursor<'_>) -> io::Result<()> {\n        self.inner.read_buf(cursor)\n    }\n\n    /// Determines if `File` has an efficient `read_vectored` implementation.\n    ///\n    /// See [`Read::is_read_vectored`] docs for more info.\n    ///\n    /// # Platform-specific behavior\n    ///\n    /// This function currently returns `true` on Unix an `false` on Windows.\n    /// Note that this [may change in the future][changes].\n    ///\n    /// [changes]: io#platform-specific-behavior\n    #[inline]\n    fn is_read_vectored(&self) -> bool {\n        self.inner.is_read_vectored()\n    }\n\n    // Reserves space in the buffer based on the file size when available.\n    fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {\n        let size = buffer_capacity_required(self);\n        buf.try_reserve(size.unwrap_or(0))?;\n        io::default_read_to_end(self, buf, size)\n    }\n\n    // Reserves space in the buffer based on the file size when available.\n    fn read_to_string(&mut self, buf: &mut String) -> io::Result<usize> {\n        let size = buffer_capacity_required(self);\n        buf.try_reserve(size.unwrap_or(0))?;\n        io::default_read_to_string(self, buf, size)\n    }\n}\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl Write for &File {\n    /// Write some bytes from the file.\n    ///\n    /// See [`Write::write`] docs for more info.\n    ///\n    /// # Platform-specific behavior\n    ///\n    /// This function currently corresponds to the `write` function on Unix and\n    /// the `NtWriteFile` function on Windows. Note that this [may change in\n    /// the future][changes].\n    ///\n    /// [changes]: io#platform-specific-behavior\n    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n        self.inner.write(buf)\n    }\n\n    /// Like `write`, except that it writes into a slice of buffers.\n    ///\n    /// See [`Write::write_vectored`] docs for more info.\n    ///\n    /// # Platform-specific behavior\n    ///\n    /// This function currently corresponds to the `writev` function on Unix\n    /// and falls back to the `write` implementation on Windows. Note that this\n    /// [may change in the future][changes].\n    ///\n    /// [changes]: io#platform-specific-behavior\n    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n        self.inner.write_vectored(bufs)\n    }\n\n    /// Determines if `File` has an efficient `write_vectored` implementation.\n    ///\n    /// See [`Write::is_write_vectored`] docs for more info.\n    ///\n    /// # Platform-specific behavior\n    ///\n    /// This function currently returns `true` on Unix an `false` on Windows.\n    /// Note that this [may change in the future][changes].\n    ///\n    /// [changes]: io#platform-specific-behavior\n    #[inline]\n    fn is_write_vectored(&self) -> bool {\n        self.inner.is_write_vectored()\n    }\n\n    /// Flushes the file, ensuring that all intermediately buffered contents\n    /// reach their destination.\n    ///\n    /// See [`Write::flush`] docs for more info.\n    ///\n    /// # Platform-specific behavior\n    ///\n    /// Since a `File` structure doesn't contain any buffers, this function is\n    /// currently a no-op on Unix and Windows. Note that this [may change in\n    /// the future][changes].\n    ///\n    /// [changes]: io#platform-specific-behavior\n    #[inline]\n    fn flush(&mut self) -> io::Result<()> {\n        self.inner.flush()\n    }\n}\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl Seek for &File {\n    fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> {\n        self.inner.seek(pos)\n    }\n}\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl Read for File {\n    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n        (&*self).read(buf)\n    }\n    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n        (&*self).read_vectored(bufs)\n    }\n    fn read_buf(&mut self, cursor: BorrowedCursor<'_>) -> io::Result<()> {\n        (&*self).read_buf(cursor)\n    }\n    #[inline]\n    fn is_read_vectored(&self) -> bool {\n        (&&*self).is_read_vectored()\n    }\n    fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {\n        (&*self).read_to_end(buf)\n    }\n    fn read_to_string(&mut self, buf: &mut String) -> io::Result<usize> {\n        (&*self).read_to_string(buf)\n    }\n}\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl Write for File {\n    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n        (&*self).write(buf)\n    }\n    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n        (&*self).write_vectored(bufs)\n    }\n    #[inline]\n    fn is_write_vectored(&self) -> bool {\n        (&&*self).is_write_vectored()\n    }\n    #[inline]\n    fn flush(&mut self) -> io::Result<()> {\n        (&*self).flush()\n    }\n}\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl Seek for File {\n    fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> {\n        (&*self).seek(pos)\n    }\n}\n\n#[stable(feature = \"io_traits_arc\", since = \"1.73.0\")]\nimpl Read for Arc<File> {\n    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n        (&**self).read(buf)\n    }\n    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n        (&**self).read_vectored(bufs)\n    }\n    fn read_buf(&mut self, cursor: BorrowedCursor<'_>) -> io::Result<()> {\n        (&**self).read_buf(cursor)\n    }\n    #[inline]\n    fn is_read_vectored(&self) -> bool {\n        (&**self).is_read_vectored()\n    }\n    fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {\n        (&**self).read_to_end(buf)\n    }\n    fn read_to_string(&mut self, buf: &mut String) -> io::Result<usize> {\n        (&**self).read_to_string(buf)\n    }\n}\n#[stable(feature = \"io_traits_arc\", since = \"1.73.0\")]\nimpl Write for Arc<File> {\n    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n        (&**self).write(buf)\n    }\n    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n        (&**self).write_vectored(bufs)\n    }\n    #[inline]\n    fn is_write_vectored(&self) -> bool {\n        (&**self).is_write_vectored()\n    }\n    #[inline]\n    fn flush(&mut self) -> io::Result<()> {\n        (&**self).flush()\n    }\n}\n#[stable(feature = \"io_traits_arc\", since = \"1.73.0\")]\nimpl Seek for Arc<File> {\n    fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> {\n        (&**self).seek(pos)\n    }\n}\n\nimpl OpenOptions {\n    /// Creates a blank new set of options ready for configuration.\n    ///\n    /// All options are initially set to `false`.\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// use std::fs::OpenOptions;\n    ///\n    /// let mut options = OpenOptions::new();\n    /// let file = options.read(true).open(\"foo.txt\");\n    /// ```\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    #[must_use]\n    pub fn new() -> Self {\n        OpenOptions(fs_imp::OpenOptions::new())\n    }\n\n    /// Sets the option for read access.\n    ///\n    /// This option, when true, will indicate that the file should be\n    /// `read`-able if opened.\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// use std::fs::OpenOptions;\n    ///\n    /// let file = OpenOptions::new().read(true).open(\"foo.txt\");\n    /// ```\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    pub fn read(&mut self, read: bool) -> &mut Self {\n        self.0.read(read);\n        self\n    }\n\n    /// Sets the option for write access.\n    ///\n    /// This option, when true, will indicate that the file should be\n    /// `write`-able if opened.\n    ///\n    /// If the file already exists, any write calls on it will overwrite its\n    /// contents, without truncating it.\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// use std::fs::OpenOptions;\n    ///\n    /// let file = OpenOptions::new().write(true).open(\"foo.txt\");\n    /// ```\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    pub fn write(&mut self, write: bool) -> &mut Self {\n        self.0.write(write);\n        self\n    }\n\n    /// Sets the option for the append mode.\n    ///\n    /// This option, when true, means that writes will append to a file instead\n    /// of overwriting previous contents.\n    /// Note that setting `.write(true).append(true)` has the same effect as\n    /// setting only `.append(true)`.\n    ///\n    /// Append mode guarantees that writes will be positioned at the current end of file,\n    /// even when there are other processes or threads appending to the same file. This is\n    /// unlike <code>[seek]\\([SeekFrom]::[End]\\(0))</code> followed by `write()`, which\n    /// has a race between seeking and writing during which another writer can write, with\n    /// our `write()` overwriting their data.\n    ///\n    /// Keep in mind that this does not necessarily guarantee that data appended by\n    /// different processes or threads does not interleave. The amount of data accepted a\n    /// single `write()` call depends on the operating system and file system. A\n    /// successful `write()` is allowed to write only part of the given data, so even if\n    /// you're careful to provide the whole message in a single call to `write()`, there\n    /// is no guarantee that it will be written out in full. If you rely on the filesystem\n    /// accepting the message in a single write, make sure that all data that belongs\n    /// together is written in one operation. This can be done by concatenating strings\n    /// before passing them to [`write()`].\n    ///\n    /// If a file is opened with both read and append access, beware that after\n    /// opening, and after every write, the position for reading may be set at the\n    /// end of the file. So, before writing, save the current position (using\n    /// <code>[Seek]::[stream_position]</code>), and restore it before the next read.\n    ///\n    /// ## Note\n    ///\n    /// This function doesn't create the file if it doesn't exist. Use the\n    /// [`OpenOptions::create`] method to do so.\n    ///\n    /// [`write()`]: Write::write \"io::Write::write\"\n    /// [`flush()`]: Write::flush \"io::Write::flush\"\n    /// [stream_position]: Seek::stream_position \"io::Seek::stream_position\"\n    /// [seek]: Seek::seek \"io::Seek::seek\"\n    /// [Current]: SeekFrom::Current \"io::SeekFrom::Current\"\n    /// [End]: SeekFrom::End \"io::SeekFrom::End\"\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// use std::fs::OpenOptions;\n    ///\n    /// let file = OpenOptions::new().append(true).open(\"foo.txt\");\n    /// ```\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    pub fn append(&mut self, append: bool) -> &mut Self {\n        self.0.append(append);\n        self\n    }\n\n    /// Sets the option for truncating a previous file.\n    ///\n    /// If a file is successfully opened with this option set it will truncate\n    /// the file to 0 length if it already exists.\n    ///\n    /// The file must be opened with write access for truncate to work.\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// use std::fs::OpenOptions;\n    ///\n    /// let file = OpenOptions::new().write(true).truncate(true).open(\"foo.txt\");\n    /// ```\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    pub fn truncate(&mut self, truncate: bool) -> &mut Self {\n        self.0.truncate(truncate);\n        self\n    }\n\n    /// Sets the option to create a new file, or open it if it already exists.\n    ///\n    /// In order for the file to be created, [`OpenOptions::write`] or\n    /// [`OpenOptions::append`] access must be used.\n    ///\n    /// See also [`std::fs::write()`][self::write] for a simple function to\n    /// create a file with some given data.\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// use std::fs::OpenOptions;\n    ///\n    /// let file = OpenOptions::new().write(true).create(true).open(\"foo.txt\");\n    /// ```\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    pub fn create(&mut self, create: bool) -> &mut Self {\n        self.0.create(create);\n        self\n    }\n\n    /// Sets the option to create a new file, failing if it already exists.\n    ///\n    /// No file is allowed to exist at the target location, also no (dangling) symlink. In this\n    /// way, if the call succeeds, the file returned is guaranteed to be new.\n    /// If a file exists at the target location, creating a new file will fail with [`AlreadyExists`]\n    /// or another error based on the situation. See [`OpenOptions::open`] for a\n    /// non-exhaustive list of likely errors.\n    ///\n    /// This option is useful because it is atomic. Otherwise between checking\n    /// whether a file exists and creating a new one, the file may have been\n    /// created by another process (a TOCTOU race condition / attack).\n    ///\n    /// If `.create_new(true)` is set, [`.create()`] and [`.truncate()`] are\n    /// ignored.\n    ///\n    /// The file must be opened with write or append access in order to create\n    /// a new file.\n    ///\n    /// [`.create()`]: OpenOptions::create\n    /// [`.truncate()`]: OpenOptions::truncate\n    /// [`AlreadyExists`]: io::ErrorKind::AlreadyExists\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// use std::fs::OpenOptions;\n    ///\n    /// let file = OpenOptions::new().write(true)\n    ///                              .create_new(true)\n    ///                              .open(\"foo.txt\");\n    /// ```\n    #[stable(feature = \"expand_open_options2\", since = \"1.9.0\")]\n    pub fn create_new(&mut self, create_new: bool) -> &mut Self {\n        self.0.create_new(create_new);\n        self\n    }\n\n    /// Opens a file at `path` with the options specified by `self`.\n    ///\n    /// # Errors\n    ///\n    /// This function will return an error under a number of different\n    /// circumstances. Some of these error conditions are listed here, together\n    /// with their [`io::ErrorKind`]. The mapping to [`io::ErrorKind`]s is not\n    /// part of the compatibility contract of the function.\n    ///\n    /// * [`NotFound`]: The specified file does not exist and neither `create`\n    ///   or `create_new` is set.\n    /// * [`NotFound`]: One of the directory components of the file path does\n    ///   not exist.\n    /// * [`PermissionDenied`]: The user lacks permission to get the specified\n    ///   access rights for the file.\n    /// * [`PermissionDenied`]: The user lacks permission to open one of the\n    ///   directory components of the specified path.\n    /// * [`AlreadyExists`]: `create_new` was specified and the file already\n    ///   exists.\n    /// * [`InvalidInput`]: Invalid combinations of open options (truncate\n    ///   without write access, no access mode set, etc.).\n    ///\n    /// The following errors don't match any existing [`io::ErrorKind`] at the moment:\n    /// * One of the directory components of the specified file path\n    ///   was not, in fact, a directory.\n    /// * Filesystem-level errors: full disk, write permission\n    ///   requested on a read-only file system, exceeded disk quota, too many\n    ///   open files, too long filename, too many symbolic links in the\n    ///   specified path (Unix-like systems only), etc.\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// use std::fs::OpenOptions;\n    ///\n    /// let file = OpenOptions::new().read(true).open(\"foo.txt\");\n    /// ```\n    ///\n    /// [`AlreadyExists`]: io::ErrorKind::AlreadyExists\n    /// [`InvalidInput`]: io::ErrorKind::InvalidInput\n    /// [`NotFound`]: io::ErrorKind::NotFound\n    /// [`PermissionDenied`]: io::ErrorKind::PermissionDenied\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    pub fn open<P: AsRef<Path>>(&self, path: P) -> io::Result<File> {\n        self._open(path.as_ref())\n    }\n\n    fn _open(&self, path: &Path) -> io::Result<File> {\n        fs_imp::File::open(path, &self.0).map(|inner| File { inner })\n    }\n}\n\nimpl AsInner<fs_imp::OpenOptions> for OpenOptions {\n    #[inline]\n    fn as_inner(&self) -> &fs_imp::OpenOptions {\n        &self.0\n    }\n}\n\nimpl AsInnerMut<fs_imp::OpenOptions> for OpenOptions {\n    #[inline]\n    fn as_inner_mut(&mut self) -> &mut fs_imp::OpenOptions {\n        &mut self.0\n    }\n}\n\nimpl Metadata {\n    /// Returns the file type for this metadata.\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// fn main() -> std::io::Result<()> {\n    ///     use std::fs;\n    ///\n    ///     let metadata = fs::metadata(\"foo.txt\")?;\n    ///\n    ///     println!(\"{:?}\", metadata.file_type());\n    ///     Ok(())\n    /// }\n    /// ```\n    #[must_use]\n    #[stable(feature = \"file_type\", since = \"1.1.0\")]\n    pub fn file_type(&self) -> FileType {\n        FileType(self.0.file_type())\n    }\n\n    /// Returns `true` if this metadata is for a directory. The\n    /// result is mutually exclusive to the result of\n    /// [`Metadata::is_file`], and will be false for symlink metadata\n    /// obtained from [`symlink_metadata`].\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// fn main() -> std::io::Result<()> {\n    ///     use std::fs;\n    ///\n    ///     let metadata = fs::metadata(\"foo.txt\")?;\n    ///\n    ///     assert!(!metadata.is_dir());\n    ///     Ok(())\n    /// }\n    /// ```\n    #[must_use]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    pub fn is_dir(&self) -> bool {\n        self.file_type().is_dir()\n    }\n\n    /// Returns `true` if this metadata is for a regular file. The\n    /// result is mutually exclusive to the result of\n    /// [`Metadata::is_dir`], and will be false for symlink metadata\n    /// obtained from [`symlink_metadata`].\n    ///\n    /// When the goal is simply to read from (or write to) the source, the most\n    /// reliable way to test the source can be read (or written to) is to open\n    /// it. Only using `is_file` can break workflows like `diff <( prog_a )` on\n    /// a Unix-like system for example. See [`File::open`] or\n    /// [`OpenOptions::open`] for more information.\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// use std::fs;\n    ///\n    /// fn main() -> std::io::Result<()> {\n    ///     let metadata = fs::metadata(\"foo.txt\")?;\n    ///\n    ///     assert!(metadata.is_file());\n    ///     Ok(())\n    /// }\n    /// ```\n    #[must_use]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    pub fn is_file(&self) -> bool {\n        self.file_type().is_file()\n    }\n\n    /// Returns `true` if this metadata is for a symbolic link.\n    ///\n    /// # Examples\n    ///\n    #[cfg_attr(unix, doc = \"```no_run\")]\n    #[cfg_attr(not(unix), doc = \"```ignore\")]\n    /// use std::fs;\n    /// use std::path::Path;\n    /// use std::os::unix::fs::symlink;\n    ///\n    /// fn main() -> std::io::Result<()> {\n    ///     let link_path = Path::new(\"link\");\n    ///     symlink(\"/origin_does_not_exist/\", link_path)?;\n    ///\n    ///     let metadata = fs::symlink_metadata(link_path)?;\n    ///\n    ///     assert!(metadata.is_symlink());\n    ///     Ok(())\n    /// }\n    /// ```\n    #[must_use]\n    #[stable(feature = \"is_symlink\", since = \"1.58.0\")]\n    pub fn is_symlink(&self) -> bool {\n        self.file_type().is_symlink()\n    }\n\n    /// Returns the size of the file, in bytes, this metadata is for.\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// use std::fs;\n    ///\n    /// fn main() -> std::io::Result<()> {\n    ///     let metadata = fs::metadata(\"foo.txt\")?;\n    ///\n    ///     assert_eq!(0, metadata.len());\n    ///     Ok(())\n    /// }\n    /// ```\n    #[must_use]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    pub fn len(&self) -> u64 {\n        self.0.size()\n    }\n\n    /// Returns the permissions of the file this metadata is for.\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// use std::fs;\n    ///\n    /// fn main() -> std::io::Result<()> {\n    ///     let metadata = fs::metadata(\"foo.txt\")?;\n    ///\n    ///     assert!(!metadata.permissions().readonly());\n    ///     Ok(())\n    /// }\n    /// ```\n    #[must_use]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    pub fn permissions(&self) -> Permissions {\n        Permissions(self.0.perm())\n    }\n\n    /// Returns the last modification time listed in this metadata.\n    ///\n    /// The returned value corresponds to the `mtime` field of `stat` on Unix\n    /// platforms and the `ftLastWriteTime` field on Windows platforms.\n    ///\n    /// # Errors\n    ///\n    /// This field might not be available on all platforms, and will return an\n    /// `Err` on platforms where it is not available.\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// use std::fs;\n    ///\n    /// fn main() -> std::io::Result<()> {\n    ///     let metadata = fs::metadata(\"foo.txt\")?;\n    ///\n    ///     if let Ok(time) = metadata.modified() {\n    ///         println!(\"{time:?}\");\n    ///     } else {\n    ///         println!(\"Not supported on this platform\");\n    ///     }\n    ///     Ok(())\n    /// }\n    /// ```\n    #[doc(alias = \"mtime\", alias = \"ftLastWriteTime\")]\n    #[stable(feature = \"fs_time\", since = \"1.10.0\")]\n    pub fn modified(&self) -> io::Result<SystemTime> {\n        self.0.modified().map(FromInner::from_inner)\n    }\n\n    /// Returns the last access time of this metadata.\n    ///\n    /// The returned value corresponds to the `atime` field of `stat` on Unix\n    /// platforms and the `ftLastAccessTime` field on Windows platforms.\n    ///\n    /// Note that not all platforms will keep this field update in a file's\n    /// metadata, for example Windows has an option to disable updating this\n    /// time when files are accessed and Linux similarly has `noatime`.\n    ///\n    /// # Errors\n    ///\n    /// This field might not be available on all platforms, and will return an\n    /// `Err` on platforms where it is not available.\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// use std::fs;\n    ///\n    /// fn main() -> std::io::Result<()> {\n    ///     let metadata = fs::metadata(\"foo.txt\")?;\n    ///\n    ///     if let Ok(time) = metadata.accessed() {\n    ///         println!(\"{time:?}\");\n    ///     } else {\n    ///         println!(\"Not supported on this platform\");\n    ///     }\n    ///     Ok(())\n    /// }\n    /// ```\n    #[doc(alias = \"atime\", alias = \"ftLastAccessTime\")]\n    #[stable(feature = \"fs_time\", since = \"1.10.0\")]\n    pub fn accessed(&self) -> io::Result<SystemTime> {\n        self.0.accessed().map(FromInner::from_inner)\n    }\n\n    /// Returns the creation time listed in this metadata.\n    ///\n    /// The returned value corresponds to the `btime` field of `statx` on\n    /// Linux kernel starting from to 4.11, the `birthtime` field of `stat` on other\n    /// Unix platforms, and the `ftCreationTime` field on Windows platforms.\n    ///\n    /// # Errors\n    ///\n    /// This field might not be available on all platforms, and will return an\n    /// `Err` on platforms or filesystems where it is not available.\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// use std::fs;\n    ///\n    /// fn main() -> std::io::Result<()> {\n    ///     let metadata = fs::metadata(\"foo.txt\")?;\n    ///\n    ///     if let Ok(time) = metadata.created() {\n    ///         println!(\"{time:?}\");\n    ///     } else {\n    ///         println!(\"Not supported on this platform or filesystem\");\n    ///     }\n    ///     Ok(())\n    /// }\n    /// ```\n    #[doc(alias = \"btime\", alias = \"birthtime\", alias = \"ftCreationTime\")]\n    #[stable(feature = \"fs_time\", since = \"1.10.0\")]\n    pub fn created(&self) -> io::Result<SystemTime> {\n        self.0.created().map(FromInner::from_inner)\n    }\n}\n\n#[stable(feature = \"std_debug\", since = \"1.16.0\")]\nimpl fmt::Debug for Metadata {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        let mut debug = f.debug_struct(\"Metadata\");\n        debug.field(\"file_type\", &self.file_type());\n        debug.field(\"permissions\", &self.permissions());\n        debug.field(\"len\", &self.len());\n        if let Ok(modified) = self.modified() {\n            debug.field(\"modified\", &modified);\n        }\n        if let Ok(accessed) = self.accessed() {\n            debug.field(\"accessed\", &accessed);\n        }\n        if let Ok(created) = self.created() {\n            debug.field(\"created\", &created);\n        }\n        debug.finish_non_exhaustive()\n    }\n}\n\nimpl AsInner<fs_imp::FileAttr> for Metadata {\n    #[inline]\n    fn as_inner(&self) -> &fs_imp::FileAttr {\n        &self.0\n    }\n}\n\nimpl FromInner<fs_imp::FileAttr> for Metadata {\n    fn from_inner(attr: fs_imp::FileAttr) -> Metadata {\n        Metadata(attr)\n    }\n}\n\nimpl FileTimes {\n    /// Create a new `FileTimes` with no times set.\n    ///\n    /// Using the resulting `FileTimes` in [`File::set_times`] will not modify any timestamps.\n    #[stable(feature = \"file_set_times\", since = \"1.75.0\")]\n    pub fn new() -> Self {\n        Self::default()\n    }\n\n    /// Set the last access time of a file.\n    #[stable(feature = \"file_set_times\", since = \"1.75.0\")]\n    pub fn set_accessed(mut self, t: SystemTime) -> Self {\n        self.0.set_accessed(t.into_inner());\n        self\n    }\n\n    /// Set the last modified time of a file.\n    #[stable(feature = \"file_set_times\", since = \"1.75.0\")]\n    pub fn set_modified(mut self, t: SystemTime) -> Self {\n        self.0.set_modified(t.into_inner());\n        self\n    }\n}\n\nimpl AsInnerMut<fs_imp::FileTimes> for FileTimes {\n    fn as_inner_mut(&mut self) -> &mut fs_imp::FileTimes {\n        &mut self.0\n    }\n}\n\n// For implementing OS extension traits in `std::os`\n#[stable(feature = \"file_set_times\", since = \"1.75.0\")]\nimpl Sealed for FileTimes {}\n\nimpl Permissions {\n    /// Returns `true` if these permissions describe a readonly (unwritable) file.\n    ///\n    /// # Note\n    ///\n    /// This function does not take Access Control Lists (ACLs) or Unix group\n    /// membership into account.\n    ///\n    /// # Windows\n    ///\n    /// On Windows this returns [`FILE_ATTRIBUTE_READONLY`](https://docs.microsoft.com/en-us/windows/win32/fileio/file-attribute-constants).\n    /// If `FILE_ATTRIBUTE_READONLY` is set then writes to the file will fail\n    /// but the user may still have permission to change this flag. If\n    /// `FILE_ATTRIBUTE_READONLY` is *not* set then writes may still fail due\n    /// to lack of write permission.\n    /// The behavior of this attribute for directories depends on the Windows\n    /// version.\n    ///\n    /// # Unix (including macOS)\n    ///\n    /// On Unix-based platforms this checks if *any* of the owner, group or others\n    /// write permission bits are set. It does not check if the current\n    /// user is in the file's assigned group. It also does not check ACLs.\n    /// Therefore the return value of this function cannot be relied upon\n    /// to predict whether attempts to read or write the file will actually succeed.\n    /// The [`PermissionsExt`] trait gives direct access to the permission bits but\n    /// also does not read ACLs.\n    ///\n    /// [`PermissionsExt`]: crate::os::unix::fs::PermissionsExt\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// use std::fs::File;\n    ///\n    /// fn main() -> std::io::Result<()> {\n    ///     let mut f = File::create(\"foo.txt\")?;\n    ///     let metadata = f.metadata()?;\n    ///\n    ///     assert_eq!(false, metadata.permissions().readonly());\n    ///     Ok(())\n    /// }\n    /// ```\n    #[must_use = \"call `set_readonly` to modify the readonly flag\"]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    pub fn readonly(&self) -> bool {\n        self.0.readonly()\n    }\n\n    /// Modifies the readonly flag for this set of permissions. If the\n    /// `readonly` argument is `true`, using the resulting `Permission` will\n    /// update file permissions to forbid writing. Conversely, if it's `false`,\n    /// using the resulting `Permission` will update file permissions to allow\n    /// writing.\n    ///\n    /// This operation does **not** modify the files attributes. This only\n    /// changes the in-memory value of these attributes for this `Permissions`\n    /// instance. To modify the files attributes use the [`set_permissions`]\n    /// function which commits these attribute changes to the file.\n    ///\n    /// # Note\n    ///\n    /// `set_readonly(false)` makes the file *world-writable* on Unix.\n    /// You can use the [`PermissionsExt`] trait on Unix to avoid this issue.\n    ///\n    /// It also does not take Access Control Lists (ACLs) or Unix group\n    /// membership into account.\n    ///\n    /// # Windows\n    ///\n    /// On Windows this sets or clears [`FILE_ATTRIBUTE_READONLY`](https://docs.microsoft.com/en-us/windows/win32/fileio/file-attribute-constants).\n    /// If `FILE_ATTRIBUTE_READONLY` is set then writes to the file will fail\n    /// but the user may still have permission to change this flag. If\n    /// `FILE_ATTRIBUTE_READONLY` is *not* set then the write may still fail if\n    /// the user does not have permission to write to the file.\n    ///\n    /// In Windows 7 and earlier this attribute prevents deleting empty\n    /// directories. It does not prevent modifying the directory contents.\n    /// On later versions of Windows this attribute is ignored for directories.\n    ///\n    /// # Unix (including macOS)\n    ///\n    /// On Unix-based platforms this sets or clears the write access bit for\n    /// the owner, group *and* others, equivalent to `chmod a+w <file>`\n    /// or `chmod a-w <file>` respectively. The latter will grant write access\n    /// to all users! You can use the [`PermissionsExt`] trait on Unix\n    /// to avoid this issue.\n    ///\n    /// [`PermissionsExt`]: crate::os::unix::fs::PermissionsExt\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// use std::fs::File;\n    ///\n    /// fn main() -> std::io::Result<()> {\n    ///     let f = File::create(\"foo.txt\")?;\n    ///     let metadata = f.metadata()?;\n    ///     let mut permissions = metadata.permissions();\n    ///\n    ///     permissions.set_readonly(true);\n    ///\n    ///     // filesystem doesn't change, only the in memory state of the\n    ///     // readonly permission\n    ///     assert_eq!(false, metadata.permissions().readonly());\n    ///\n    ///     // just this particular `permissions`.\n    ///     assert_eq!(true, permissions.readonly());\n    ///     Ok(())\n    /// }\n    /// ```\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    pub fn set_readonly(&mut self, readonly: bool) {\n        self.0.set_readonly(readonly)\n    }\n}\n\nimpl FileType {\n    /// Tests whether this file type represents a directory. The\n    /// result is mutually exclusive to the results of\n    /// [`is_file`] and [`is_symlink`]; only zero or one of these\n    /// tests may pass.\n    ///\n    /// [`is_file`]: FileType::is_file\n    /// [`is_symlink`]: FileType::is_symlink\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// fn main() -> std::io::Result<()> {\n    ///     use std::fs;\n    ///\n    ///     let metadata = fs::metadata(\"foo.txt\")?;\n    ///     let file_type = metadata.file_type();\n    ///\n    ///     assert_eq!(file_type.is_dir(), false);\n    ///     Ok(())\n    /// }\n    /// ```\n    #[must_use]\n    #[stable(feature = \"file_type\", since = \"1.1.0\")]\n    pub fn is_dir(&self) -> bool {\n        self.0.is_dir()\n    }\n\n    /// Tests whether this file type represents a regular file.\n    /// The result is mutually exclusive to the results of\n    /// [`is_dir`] and [`is_symlink`]; only zero or one of these\n    /// tests may pass.\n    ///\n    /// When the goal is simply to read from (or write to) the source, the most\n    /// reliable way to test the source can be read (or written to) is to open\n    /// it. Only using `is_file` can break workflows like `diff <( prog_a )` on\n    /// a Unix-like system for example. See [`File::open`] or\n    /// [`OpenOptions::open`] for more information.\n    ///\n    /// [`is_dir`]: FileType::is_dir\n    /// [`is_symlink`]: FileType::is_symlink\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// fn main() -> std::io::Result<()> {\n    ///     use std::fs;\n    ///\n    ///     let metadata = fs::metadata(\"foo.txt\")?;\n    ///     let file_type = metadata.file_type();\n    ///\n    ///     assert_eq!(file_type.is_file(), true);\n    ///     Ok(())\n    /// }\n    /// ```\n    #[must_use]\n    #[stable(feature = \"file_type\", since = \"1.1.0\")]\n    pub fn is_file(&self) -> bool {\n        self.0.is_file()\n    }\n\n    /// Tests whether this file type represents a symbolic link.\n    /// The result is mutually exclusive to the results of\n    /// [`is_dir`] and [`is_file`]; only zero or one of these\n    /// tests may pass.\n    ///\n    /// The underlying [`Metadata`] struct needs to be retrieved\n    /// with the [`fs::symlink_metadata`] function and not the\n    /// [`fs::metadata`] function. The [`fs::metadata`] function\n    /// follows symbolic links, so [`is_symlink`] would always\n    /// return `false` for the target file.\n    ///\n    /// [`fs::metadata`]: metadata\n    /// [`fs::symlink_metadata`]: symlink_metadata\n    /// [`is_dir`]: FileType::is_dir\n    /// [`is_file`]: FileType::is_file\n    /// [`is_symlink`]: FileType::is_symlink\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// use std::fs;\n    ///\n    /// fn main() -> std::io::Result<()> {\n    ///     let metadata = fs::symlink_metadata(\"foo.txt\")?;\n    ///     let file_type = metadata.file_type();\n    ///\n    ///     assert_eq!(file_type.is_symlink(), false);\n    ///     Ok(())\n    /// }\n    /// ```\n    #[must_use]\n    #[stable(feature = \"file_type\", since = \"1.1.0\")]\n    pub fn is_symlink(&self) -> bool {\n        self.0.is_symlink()\n    }\n}\n\n#[stable(feature = \"std_debug\", since = \"1.16.0\")]\nimpl fmt::Debug for FileType {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        f.debug_struct(\"FileType\")\n            .field(\"is_file\", &self.is_file())\n            .field(\"is_dir\", &self.is_dir())\n            .field(\"is_symlink\", &self.is_symlink())\n            .finish_non_exhaustive()\n    }\n}\n\nimpl AsInner<fs_imp::FileType> for FileType {\n    #[inline]\n    fn as_inner(&self) -> &fs_imp::FileType {\n        &self.0\n    }\n}\n\nimpl FromInner<fs_imp::FilePermissions> for Permissions {\n    fn from_inner(f: fs_imp::FilePermissions) -> Permissions {\n        Permissions(f)\n    }\n}\n\nimpl AsInner<fs_imp::FilePermissions> for Permissions {\n    #[inline]\n    fn as_inner(&self) -> &fs_imp::FilePermissions {\n        &self.0\n    }\n}\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl Iterator for ReadDir {\n    type Item = io::Result<DirEntry>;\n\n    fn next(&mut self) -> Option<io::Result<DirEntry>> {\n        self.0.next().map(|entry| entry.map(DirEntry))\n    }\n}\n\nimpl DirEntry {\n    /// Returns the full path to the file that this entry represents.\n    ///\n    /// The full path is created by joining the original path to `read_dir`\n    /// with the filename of this entry.\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// use std::fs;\n    ///\n    /// fn main() -> std::io::Result<()> {\n    ///     for entry in fs::read_dir(\".\")? {\n    ///         let dir = entry?;\n    ///         println!(\"{:?}\", dir.path());\n    ///     }\n    ///     Ok(())\n    /// }\n    /// ```\n    ///\n    /// This prints output like:\n    ///\n    /// ```text\n    /// \"./whatever.txt\"\n    /// \"./foo.html\"\n    /// \"./hello_world.rs\"\n    /// ```\n    ///\n    /// The exact text, of course, depends on what files you have in `.`.\n    #[must_use]\n    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n    pub fn path(&self) -> PathBuf {\n        self.0.path()\n    }\n\n    /// Returns the metadata for the file that this entry points at.\n    ///\n    /// This function will not traverse symlinks if this entry points at a\n    /// symlink. To traverse symlinks use [`fs::metadata`] or [`fs::File::metadata`].\n    ///\n    /// [`fs::metadata`]: metadata\n    /// [`fs::File::metadata`]: File::metadata\n    ///\n    /// # Platform-specific behavior\n    ///\n    /// On Windows this function is cheap to call (no extra system calls\n    /// needed), but on Unix platforms this function is the equivalent of\n    /// calling `symlink_metadata` on the path.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::fs;\n    ///\n    /// if let Ok(entries) = fs::read_dir(\".\") {\n    ///     for entry in entries {\n    ///         if let Ok(entry) = entry {\n    ///             // Here, `entry` is a `DirEntry`.\n    ///             if let Ok(metadata) = entry.metadata() {\n    ///                 // Now let's show our entry's permissions!\n    ///                 println!(\"{:?}: {:?}\", entry.path(), metadata.permissions());\n    ///             } else {\n    ///                 println!(\"Couldn't get metadata for {:?}\", entry.path());\n    ///             }\n    ///         }\n    ///     }\n    /// }\n    /// ```\n    #[stable(feature = \"dir_entry_ext\", since = \"1.1.0\")]\n    pub fn metadata(&self) -> io::Result<Metadata> {\n        self.0.metadata().map(Metadata)\n    }\n\n    /// Returns the file type for the file that this entry points at.\n    ///\n    /// This function will not traverse symlinks if this entry points at a\n    /// symlink.\n    ///\n    /// # Platform-specific behavior\n    ///\n    /// On Windows and most Unix platforms this function is free (no extra\n    /// system calls needed), but some Unix platforms may require the equivalent\n    /// call to `symlink_metadata` to learn about the target file type.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::fs;\n    ///\n    /// if let Ok(entries) = fs::read_dir(\".\") {\n    ///     for entry in entries {\n    ///         if let Ok(entry) = entry {\n    ///             // Here, `entry` is a `DirEntry`.\n    ///             if let Ok(file_type) = entry.file_type() {\n    ///                 // Now let's show our entry's file type!\n    ///                 println!(\"{:?}: {:?}\", entry.path(), file_type);\n    ///             } else {\n    ///                 println!(\"Couldn't get file type for {:?}\", entry.path());\n    ///             }\n    ///         }\n    ///     }\n    /// }\n    /// ```\n    #[stable(feature = \"dir_entry_ext\", since = \"1.1.0\")]\n    pub fn file_type(&self) -> io::Result<FileType> {\n        self.0.file_type().map(FileType)\n    }\n\n    /// Returns the file name of this directory entry without any\n    /// leading path component(s).\n    ///\n    /// As an example,\n    /// the output of the function will result in \"foo\" for all the following paths:\n    /// - \"./foo\"\n    /// - \"/the/foo\"\n    /// - \"../../foo\"\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::fs;\n    ///\n    /// if let Ok(entries) = fs::read_dir(\".\") {\n    ///     for entry in entries {\n    ///         if let Ok(entry) = entry {\n    ///             // Here, `entry` is a `DirEntry`.\n    ///             println!(\"{:?}\", entry.file_name());\n    ///         }\n    ///     }\n    /// }\n    /// ```\n    #[must_use]\n    #[stable(feature = \"dir_entry_ext\", since = \"1.1.0\")]\n    pub fn file_name(&self) -> OsString {\n        self.0.file_name()\n    }\n}\n\n#[stable(feature = \"dir_entry_debug\", since = \"1.13.0\")]\nimpl fmt::Debug for DirEntry {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        f.debug_tuple(\"DirEntry\").field(&self.path()).finish()\n    }\n}\n\nimpl AsInner<fs_imp::DirEntry> for DirEntry {\n    #[inline]\n    fn as_inner(&self) -> &fs_imp::DirEntry {\n        &self.0\n    }\n}\n\n/// Removes a file from the filesystem.\n///\n/// Note that there is no\n/// guarantee that the file is immediately deleted (e.g., depending on\n/// platform, other open file descriptors may prevent immediate removal).\n///\n/// # Platform-specific behavior\n///\n/// This function currently corresponds to the `unlink` function on Unix\n/// and the `DeleteFile` function on Windows.\n/// Note that, this [may change in the future][changes].\n///\n/// [changes]: io#platform-specific-behavior\n///\n/// # Errors\n///\n/// This function will return an error in the following situations, but is not\n/// limited to just these cases:\n///\n/// * `path` points to a directory.\n/// * The file doesn't exist.\n/// * The user lacks permissions to remove the file.\n///\n/// # Examples\n///\n/// ```no_run\n/// use std::fs;\n///\n/// fn main() -> std::io::Result<()> {\n///     fs::remove_file(\"a.txt\")?;\n///     Ok(())\n/// }\n/// ```\n#[doc(alias = \"rm\", alias = \"unlink\", alias = \"DeleteFile\")]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\npub fn remove_file<P: AsRef<Path>>(path: P) -> io::Result<()> {\n    fs_imp::unlink(path.as_ref())\n}\n\n/// Given a path, query the file system to get information about a file,\n/// directory, etc.\n///\n/// This function will traverse symbolic links to query information about the\n/// destination file.\n///\n/// # Platform-specific behavior\n///\n/// This function currently corresponds to the `stat` function on Unix\n/// and the `GetFileInformationByHandle` function on Windows.\n/// Note that, this [may change in the future][changes].\n///\n/// [changes]: io#platform-specific-behavior\n///\n/// # Errors\n///\n/// This function will return an error in the following situations, but is not\n/// limited to just these cases:\n///\n/// * The user lacks permissions to perform `metadata` call on `path`.\n/// * `path` does not exist.\n///\n/// # Examples\n///\n/// ```rust,no_run\n/// use std::fs;\n///\n/// fn main() -> std::io::Result<()> {\n///     let attr = fs::metadata(\"/some/file/path.txt\")?;\n///     // inspect attr ...\n///     Ok(())\n/// }\n/// ```\n#[doc(alias = \"stat\")]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\npub fn metadata<P: AsRef<Path>>(path: P) -> io::Result<Metadata> {\n    fs_imp::stat(path.as_ref()).map(Metadata)\n}\n\n/// Query the metadata about a file without following symlinks.\n///\n/// # Platform-specific behavior\n///\n/// This function currently corresponds to the `lstat` function on Unix\n/// and the `GetFileInformationByHandle` function on Windows.\n/// Note that, this [may change in the future][changes].\n///\n/// [changes]: io#platform-specific-behavior\n///\n/// # Errors\n///\n/// This function will return an error in the following situations, but is not\n/// limited to just these cases:\n///\n/// * The user lacks permissions to perform `metadata` call on `path`.\n/// * `path` does not exist.\n///\n/// # Examples\n///\n/// ```rust,no_run\n/// use std::fs;\n///\n/// fn main() -> std::io::Result<()> {\n///     let attr = fs::symlink_metadata(\"/some/file/path.txt\")?;\n///     // inspect attr ...\n///     Ok(())\n/// }\n/// ```\n#[doc(alias = \"lstat\")]\n#[stable(feature = \"symlink_metadata\", since = \"1.1.0\")]\npub fn symlink_metadata<P: AsRef<Path>>(path: P) -> io::Result<Metadata> {\n    fs_imp::lstat(path.as_ref()).map(Metadata)\n}\n\n/// Rename a file or directory to a new name, replacing the original file if\n/// `to` already exists.\n///\n/// This will not work if the new name is on a different mount point.\n///\n/// # Platform-specific behavior\n///\n/// This function currently corresponds to the `rename` function on Unix\n/// and the `MoveFileEx` function with the `MOVEFILE_REPLACE_EXISTING` flag on Windows.\n///\n/// Because of this, the behavior when both `from` and `to` exist differs. On\n/// Unix, if `from` is a directory, `to` must also be an (empty) directory. If\n/// `from` is not a directory, `to` must also be not a directory. In contrast,\n/// on Windows, `from` can be anything, but `to` must *not* be a directory.\n///\n/// Note that, this [may change in the future][changes].\n///\n/// [changes]: io#platform-specific-behavior\n///\n/// # Errors\n///\n/// This function will return an error in the following situations, but is not\n/// limited to just these cases:\n///\n/// * `from` does not exist.\n/// * The user lacks permissions to view contents.\n/// * `from` and `to` are on separate filesystems.\n///\n/// # Examples\n///\n/// ```no_run\n/// use std::fs;\n///\n/// fn main() -> std::io::Result<()> {\n///     fs::rename(\"a.txt\", \"b.txt\")?; // Rename a.txt to b.txt\n///     Ok(())\n/// }\n/// ```\n#[doc(alias = \"mv\", alias = \"MoveFile\", alias = \"MoveFileEx\")]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\npub fn rename<P: AsRef<Path>, Q: AsRef<Path>>(from: P, to: Q) -> io::Result<()> {\n    fs_imp::rename(from.as_ref(), to.as_ref())\n}\n\n/// Copies the contents of one file to another. This function will also\n/// copy the permission bits of the original file to the destination file.\n///\n/// This function will **overwrite** the contents of `to`.\n///\n/// Note that if `from` and `to` both point to the same file, then the file\n/// will likely get truncated by this operation.\n///\n/// On success, the total number of bytes copied is returned and it is equal to\n/// the length of the `to` file as reported by `metadata`.\n///\n/// If you want to copy the contents of one file to another and you’re\n/// working with [`File`]s, see the [`io::copy`](io::copy()) function.\n///\n/// # Platform-specific behavior\n///\n/// This function currently corresponds to the `open` function in Unix\n/// with `O_RDONLY` for `from` and `O_WRONLY`, `O_CREAT`, and `O_TRUNC` for `to`.\n/// `O_CLOEXEC` is set for returned file descriptors.\n///\n/// On Linux (including Android), this function attempts to use `copy_file_range(2)`,\n/// and falls back to reading and writing if that is not possible.\n///\n/// On Windows, this function currently corresponds to `CopyFileEx`. Alternate\n/// NTFS streams are copied but only the size of the main stream is returned by\n/// this function.\n///\n/// On MacOS, this function corresponds to `fclonefileat` and `fcopyfile`.\n///\n/// Note that platform-specific behavior [may change in the future][changes].\n///\n/// [changes]: io#platform-specific-behavior\n///\n/// # Errors\n///\n/// This function will return an error in the following situations, but is not\n/// limited to just these cases:\n///\n/// * `from` is neither a regular file nor a symlink to a regular file.\n/// * `from` does not exist.\n/// * The current process does not have the permission rights to read\n///   `from` or write `to`.\n///\n/// # Examples\n///\n/// ```no_run\n/// use std::fs;\n///\n/// fn main() -> std::io::Result<()> {\n///     fs::copy(\"foo.txt\", \"bar.txt\")?;  // Copy foo.txt to bar.txt\n///     Ok(())\n/// }\n/// ```\n#[doc(alias = \"cp\")]\n#[doc(alias = \"CopyFile\", alias = \"CopyFileEx\")]\n#[doc(alias = \"fclonefileat\", alias = \"fcopyfile\")]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\npub fn copy<P: AsRef<Path>, Q: AsRef<Path>>(from: P, to: Q) -> io::Result<u64> {\n    fs_imp::copy(from.as_ref(), to.as_ref())\n}\n\n/// Creates a new hard link on the filesystem.\n///\n/// The `link` path will be a link pointing to the `original` path. Note that\n/// systems often require these two paths to both be located on the same\n/// filesystem.\n///\n/// If `original` names a symbolic link, it is platform-specific whether the\n/// symbolic link is followed. On platforms where it's possible to not follow\n/// it, it is not followed, and the created hard link points to the symbolic\n/// link itself.\n///\n/// # Platform-specific behavior\n///\n/// This function currently corresponds the `CreateHardLink` function on Windows.\n/// On most Unix systems, it corresponds to the `linkat` function with no flags.\n/// On Android, VxWorks, and Redox, it instead corresponds to the `link` function.\n/// On MacOS, it uses the `linkat` function if it is available, but on very old\n/// systems where `linkat` is not available, `link` is selected at runtime instead.\n/// Note that, this [may change in the future][changes].\n///\n/// [changes]: io#platform-specific-behavior\n///\n/// # Errors\n///\n/// This function will return an error in the following situations, but is not\n/// limited to just these cases:\n///\n/// * The `original` path is not a file or doesn't exist.\n///\n/// # Examples\n///\n/// ```no_run\n/// use std::fs;\n///\n/// fn main() -> std::io::Result<()> {\n///     fs::hard_link(\"a.txt\", \"b.txt\")?; // Hard link a.txt to b.txt\n///     Ok(())\n/// }\n/// ```\n#[doc(alias = \"CreateHardLink\", alias = \"linkat\")]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\npub fn hard_link<P: AsRef<Path>, Q: AsRef<Path>>(original: P, link: Q) -> io::Result<()> {\n    fs_imp::link(original.as_ref(), link.as_ref())\n}\n\n/// Creates a new symbolic link on the filesystem.\n///\n/// The `link` path will be a symbolic link pointing to the `original` path.\n/// On Windows, this will be a file symlink, not a directory symlink;\n/// for this reason, the platform-specific [`std::os::unix::fs::symlink`]\n/// and [`std::os::windows::fs::symlink_file`] or [`symlink_dir`] should be\n/// used instead to make the intent explicit.\n///\n/// [`std::os::unix::fs::symlink`]: crate::os::unix::fs::symlink\n/// [`std::os::windows::fs::symlink_file`]: crate::os::windows::fs::symlink_file\n/// [`symlink_dir`]: crate::os::windows::fs::symlink_dir\n///\n/// # Examples\n///\n/// ```no_run\n/// use std::fs;\n///\n/// fn main() -> std::io::Result<()> {\n///     fs::soft_link(\"a.txt\", \"b.txt\")?;\n///     Ok(())\n/// }\n/// ```\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\n#[deprecated(\n    since = \"1.1.0\",\n    note = \"replaced with std::os::unix::fs::symlink and \\\n            std::os::windows::fs::{symlink_file, symlink_dir}\"\n)]\npub fn soft_link<P: AsRef<Path>, Q: AsRef<Path>>(original: P, link: Q) -> io::Result<()> {\n    fs_imp::symlink(original.as_ref(), link.as_ref())\n}\n\n/// Reads a symbolic link, returning the file that the link points to.\n///\n/// # Platform-specific behavior\n///\n/// This function currently corresponds to the `readlink` function on Unix\n/// and the `CreateFile` function with `FILE_FLAG_OPEN_REPARSE_POINT` and\n/// `FILE_FLAG_BACKUP_SEMANTICS` flags on Windows.\n/// Note that, this [may change in the future][changes].\n///\n/// [changes]: io#platform-specific-behavior\n///\n/// # Errors\n///\n/// This function will return an error in the following situations, but is not\n/// limited to just these cases:\n///\n/// * `path` is not a symbolic link.\n/// * `path` does not exist.\n///\n/// # Examples\n///\n/// ```no_run\n/// use std::fs;\n///\n/// fn main() -> std::io::Result<()> {\n///     let path = fs::read_link(\"a.txt\")?;\n///     Ok(())\n/// }\n/// ```\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\npub fn read_link<P: AsRef<Path>>(path: P) -> io::Result<PathBuf> {\n    fs_imp::readlink(path.as_ref())\n}\n\n/// Returns the canonical, absolute form of a path with all intermediate\n/// components normalized and symbolic links resolved.\n///\n/// # Platform-specific behavior\n///\n/// This function currently corresponds to the `realpath` function on Unix\n/// and the `CreateFile` and `GetFinalPathNameByHandle` functions on Windows.\n/// Note that, this [may change in the future][changes].\n///\n/// On Windows, this converts the path to use [extended length path][path]\n/// syntax, which allows your program to use longer path names, but means you\n/// can only join backslash-delimited paths to it, and it may be incompatible\n/// with other applications (if passed to the application on the command-line,\n/// or written to a file another application may read).\n///\n/// [changes]: io#platform-specific-behavior\n/// [path]: https://docs.microsoft.com/en-us/windows/win32/fileio/naming-a-file\n///\n/// # Errors\n///\n/// This function will return an error in the following situations, but is not\n/// limited to just these cases:\n///\n/// * `path` does not exist.\n/// * A non-final component in path is not a directory.\n///\n/// # Examples\n///\n/// ```no_run\n/// use std::fs;\n///\n/// fn main() -> std::io::Result<()> {\n///     let path = fs::canonicalize(\"../a/../foo.txt\")?;\n///     Ok(())\n/// }\n/// ```\n#[doc(alias = \"realpath\")]\n#[doc(alias = \"GetFinalPathNameByHandle\")]\n#[stable(feature = \"fs_canonicalize\", since = \"1.5.0\")]\npub fn canonicalize<P: AsRef<Path>>(path: P) -> io::Result<PathBuf> {\n    fs_imp::canonicalize(path.as_ref())\n}\n\n/// Creates a new, empty directory at the provided path\n///\n/// # Platform-specific behavior\n///\n/// This function currently corresponds to the `mkdir` function on Unix\n/// and the `CreateDirectoryW` function on Windows.\n/// Note that, this [may change in the future][changes].\n///\n/// [changes]: io#platform-specific-behavior\n///\n/// **NOTE**: If a parent of the given path doesn't exist, this function will\n/// return an error. To create a directory and all its missing parents at the\n/// same time, use the [`create_dir_all`] function.\n///\n/// # Errors\n///\n/// This function will return an error in the following situations, but is not\n/// limited to just these cases:\n///\n/// * User lacks permissions to create directory at `path`.\n/// * A parent of the given path doesn't exist. (To create a directory and all\n///   its missing parents at the same time, use the [`create_dir_all`]\n///   function.)\n/// * `path` already exists.\n///\n/// # Examples\n///\n/// ```no_run\n/// use std::fs;\n///\n/// fn main() -> std::io::Result<()> {\n///     fs::create_dir(\"/some/dir\")?;\n///     Ok(())\n/// }\n/// ```\n#[doc(alias = \"mkdir\", alias = \"CreateDirectory\")]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\n#[cfg_attr(not(test), rustc_diagnostic_item = \"fs_create_dir\")]\npub fn create_dir<P: AsRef<Path>>(path: P) -> io::Result<()> {\n    DirBuilder::new().create(path.as_ref())\n}\n\n/// Recursively create a directory and all of its parent components if they\n/// are missing.\n///\n/// If this function returns an error, some of the parent components might have\n/// been created already.\n///\n/// # Platform-specific behavior\n///\n/// This function currently corresponds to multiple calls to the `mkdir`\n/// function on Unix and the `CreateDirectoryW` function on Windows.\n///\n/// Note that, this [may change in the future][changes].\n///\n/// [changes]: io#platform-specific-behavior\n///\n/// # Errors\n///\n/// This function will return an error in the following situations, but is not\n/// limited to just these cases:\n///\n/// * If any directory in the path specified by `path`\n/// does not already exist and it could not be created otherwise. The specific\n/// error conditions for when a directory is being created (after it is\n/// determined to not exist) are outlined by [`fs::create_dir`].\n///\n/// Notable exception is made for situations where any of the directories\n/// specified in the `path` could not be created as it was being created concurrently.\n/// Such cases are considered to be successful. That is, calling `create_dir_all`\n/// concurrently from multiple threads or processes is guaranteed not to fail\n/// due to a race condition with itself.\n///\n/// [`fs::create_dir`]: create_dir\n///\n/// # Examples\n///\n/// ```no_run\n/// use std::fs;\n///\n/// fn main() -> std::io::Result<()> {\n///     fs::create_dir_all(\"/some/dir\")?;\n///     Ok(())\n/// }\n/// ```\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\npub fn create_dir_all<P: AsRef<Path>>(path: P) -> io::Result<()> {\n    DirBuilder::new().recursive(true).create(path.as_ref())\n}\n\n/// Removes an empty directory.\n///\n/// # Platform-specific behavior\n///\n/// This function currently corresponds to the `rmdir` function on Unix\n/// and the `RemoveDirectory` function on Windows.\n/// Note that, this [may change in the future][changes].\n///\n/// [changes]: io#platform-specific-behavior\n///\n/// # Errors\n///\n/// This function will return an error in the following situations, but is not\n/// limited to just these cases:\n///\n/// * `path` doesn't exist.\n/// * `path` isn't a directory.\n/// * The user lacks permissions to remove the directory at the provided `path`.\n/// * The directory isn't empty.\n///\n/// # Examples\n///\n/// ```no_run\n/// use std::fs;\n///\n/// fn main() -> std::io::Result<()> {\n///     fs::remove_dir(\"/some/dir\")?;\n///     Ok(())\n/// }\n/// ```\n#[doc(alias = \"rmdir\", alias = \"RemoveDirectory\")]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\npub fn remove_dir<P: AsRef<Path>>(path: P) -> io::Result<()> {\n    fs_imp::rmdir(path.as_ref())\n}\n\n/// Removes a directory at this path, after removing all its contents. Use\n/// carefully!\n///\n/// This function does **not** follow symbolic links and it will simply remove the\n/// symbolic link itself.\n///\n/// # Platform-specific behavior\n///\n/// This function currently corresponds to `openat`, `fdopendir`, `unlinkat` and `lstat` functions\n/// on Unix (except for macOS before version 10.10 and REDOX) and the `CreateFileW`,\n/// `GetFileInformationByHandleEx`, `SetFileInformationByHandle`, and `NtCreateFile` functions on\n/// Windows. Note that, this [may change in the future][changes].\n///\n/// [changes]: io#platform-specific-behavior\n///\n/// On macOS before version 10.10 and REDOX, as well as when running in Miri for any target, this\n/// function is not protected against time-of-check to time-of-use (TOCTOU) race conditions, and\n/// should not be used in security-sensitive code on those platforms. All other platforms are\n/// protected.\n///\n/// # Errors\n///\n/// See [`fs::remove_file`] and [`fs::remove_dir`].\n///\n/// `remove_dir_all` will fail if `remove_dir` or `remove_file` fail on any constituent paths, including the root path.\n/// As a result, the directory you are deleting must exist, meaning that this function is not idempotent.\n///\n/// Consider ignoring the error if validating the removal is not required for your use case.\n///\n/// [`fs::remove_file`]: remove_file\n/// [`fs::remove_dir`]: remove_dir\n///\n/// # Examples\n///\n/// ```no_run\n/// use std::fs;\n///\n/// fn main() -> std::io::Result<()> {\n///     fs::remove_dir_all(\"/some/dir\")?;\n///     Ok(())\n/// }\n/// ```\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\npub fn remove_dir_all<P: AsRef<Path>>(path: P) -> io::Result<()> {\n    fs_imp::remove_dir_all(path.as_ref())\n}\n\n/// Returns an iterator over the entries within a directory.\n///\n/// The iterator will yield instances of <code>[io::Result]<[DirEntry]></code>.\n/// New errors may be encountered after an iterator is initially constructed.\n/// Entries for the current and parent directories (typically `.` and `..`) are\n/// skipped.\n///\n/// # Platform-specific behavior\n///\n/// This function currently corresponds to the `opendir` function on Unix\n/// and the `FindFirstFile` function on Windows. Advancing the iterator\n/// currently corresponds to `readdir` on Unix and `FindNextFile` on Windows.\n/// Note that, this [may change in the future][changes].\n///\n/// [changes]: io#platform-specific-behavior\n///\n/// The order in which this iterator returns entries is platform and filesystem\n/// dependent.\n///\n/// # Errors\n///\n/// This function will return an error in the following situations, but is not\n/// limited to just these cases:\n///\n/// * The provided `path` doesn't exist.\n/// * The process lacks permissions to view the contents.\n/// * The `path` points at a non-directory file.\n///\n/// # Examples\n///\n/// ```\n/// use std::io;\n/// use std::fs::{self, DirEntry};\n/// use std::path::Path;\n///\n/// // one possible implementation of walking a directory only visiting files\n/// fn visit_dirs(dir: &Path, cb: &dyn Fn(&DirEntry)) -> io::Result<()> {\n///     if dir.is_dir() {\n///         for entry in fs::read_dir(dir)? {\n///             let entry = entry?;\n///             let path = entry.path();\n///             if path.is_dir() {\n///                 visit_dirs(&path, cb)?;\n///             } else {\n///                 cb(&entry);\n///             }\n///         }\n///     }\n///     Ok(())\n/// }\n/// ```\n///\n/// ```rust,no_run\n/// use std::{fs, io};\n///\n/// fn main() -> io::Result<()> {\n///     let mut entries = fs::read_dir(\".\")?\n///         .map(|res| res.map(|e| e.path()))\n///         .collect::<Result<Vec<_>, io::Error>>()?;\n///\n///     // The order in which `read_dir` returns entries is not guaranteed. If reproducible\n///     // ordering is required the entries should be explicitly sorted.\n///\n///     entries.sort();\n///\n///     // The entries have now been sorted by their path.\n///\n///     Ok(())\n/// }\n/// ```\n#[doc(alias = \"ls\", alias = \"opendir\", alias = \"FindFirstFile\", alias = \"FindNextFile\")]\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\npub fn read_dir<P: AsRef<Path>>(path: P) -> io::Result<ReadDir> {\n    fs_imp::readdir(path.as_ref()).map(ReadDir)\n}\n\n/// Changes the permissions found on a file or a directory.\n///\n/// # Platform-specific behavior\n///\n/// This function currently corresponds to the `chmod` function on Unix\n/// and the `SetFileAttributes` function on Windows.\n/// Note that, this [may change in the future][changes].\n///\n/// [changes]: io#platform-specific-behavior\n///\n/// # Errors\n///\n/// This function will return an error in the following situations, but is not\n/// limited to just these cases:\n///\n/// * `path` does not exist.\n/// * The user lacks the permission to change attributes of the file.\n///\n/// # Examples\n///\n/// ```no_run\n/// use std::fs;\n///\n/// fn main() -> std::io::Result<()> {\n///     let mut perms = fs::metadata(\"foo.txt\")?.permissions();\n///     perms.set_readonly(true);\n///     fs::set_permissions(\"foo.txt\", perms)?;\n///     Ok(())\n/// }\n/// ```\n#[doc(alias = \"chmod\", alias = \"SetFileAttributes\")]\n#[stable(feature = \"set_permissions\", since = \"1.1.0\")]\npub fn set_permissions<P: AsRef<Path>>(path: P, perm: Permissions) -> io::Result<()> {\n    fs_imp::set_perm(path.as_ref(), perm.0)\n}\n\nimpl DirBuilder {\n    /// Creates a new set of options with default mode/security settings for all\n    /// platforms and also non-recursive.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::fs::DirBuilder;\n    ///\n    /// let builder = DirBuilder::new();\n    /// ```\n    #[stable(feature = \"dir_builder\", since = \"1.6.0\")]\n    #[must_use]\n    pub fn new() -> DirBuilder {\n        DirBuilder { inner: fs_imp::DirBuilder::new(), recursive: false }\n    }\n\n    /// Indicates that directories should be created recursively, creating all\n    /// parent directories. Parents that do not exist are created with the same\n    /// security and permissions settings.\n    ///\n    /// This option defaults to `false`.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::fs::DirBuilder;\n    ///\n    /// let mut builder = DirBuilder::new();\n    /// builder.recursive(true);\n    /// ```\n    #[stable(feature = \"dir_builder\", since = \"1.6.0\")]\n    pub fn recursive(&mut self, recursive: bool) -> &mut Self {\n        self.recursive = recursive;\n        self\n    }\n\n    /// Creates the specified directory with the options configured in this\n    /// builder.\n    ///\n    /// It is considered an error if the directory already exists unless\n    /// recursive mode is enabled.\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// use std::fs::{self, DirBuilder};\n    ///\n    /// let path = \"/tmp/foo/bar/baz\";\n    /// DirBuilder::new()\n    ///     .recursive(true)\n    ///     .create(path).unwrap();\n    ///\n    /// assert!(fs::metadata(path).unwrap().is_dir());\n    /// ```\n    #[stable(feature = \"dir_builder\", since = \"1.6.0\")]\n    pub fn create<P: AsRef<Path>>(&self, path: P) -> io::Result<()> {\n        self._create(path.as_ref())\n    }\n\n    fn _create(&self, path: &Path) -> io::Result<()> {\n        if self.recursive { self.create_dir_all(path) } else { self.inner.mkdir(path) }\n    }\n\n    fn create_dir_all(&self, path: &Path) -> io::Result<()> {\n        if path == Path::new(\"\") {\n            return Ok(());\n        }\n\n        match self.inner.mkdir(path) {\n            Ok(()) => return Ok(()),\n            Err(ref e) if e.kind() == io::ErrorKind::NotFound => {}\n            Err(_) if path.is_dir() => return Ok(()),\n            Err(e) => return Err(e),\n        }\n        match path.parent() {\n            Some(p) => self.create_dir_all(p)?,\n            None => {\n                return Err(io::const_io_error!(\n                    io::ErrorKind::Uncategorized,\n                    \"failed to create whole tree\",\n                ));\n            }\n        }\n        match self.inner.mkdir(path) {\n            Ok(()) => Ok(()),\n            Err(_) if path.is_dir() => Ok(()),\n            Err(e) => Err(e),\n        }\n    }\n}\n\nimpl AsInnerMut<fs_imp::DirBuilder> for DirBuilder {\n    #[inline]\n    fn as_inner_mut(&mut self) -> &mut fs_imp::DirBuilder {\n        &mut self.inner\n    }\n}\n\n/// Returns `Ok(true)` if the path points at an existing entity.\n///\n/// This function will traverse symbolic links to query information about the\n/// destination file. In case of broken symbolic links this will return `Ok(false)`.\n///\n/// As opposed to the [`Path::exists`] method, this will only return `Ok(true)` or `Ok(false)`\n/// if the path was _verified_ to exist or not exist. If its existence can neither be confirmed\n/// nor denied, an `Err(_)` will be propagated instead. This can be the case if e.g. listing\n/// permission is denied on one of the parent directories.\n///\n/// Note that while this avoids some pitfalls of the `exists()` method, it still can not\n/// prevent time-of-check to time-of-use (TOCTOU) bugs. You should only use it in scenarios\n/// where those bugs are not an issue.\n///\n/// # Examples\n///\n/// ```no_run\n/// #![feature(fs_try_exists)]\n/// use std::fs;\n///\n/// assert!(!fs::try_exists(\"does_not_exist.txt\").expect(\"Can't check existence of file does_not_exist.txt\"));\n/// assert!(fs::try_exists(\"/root/secret_file.txt\").is_err());\n/// ```\n///\n/// [`Path::exists`]: crate::path::Path::exists\n// FIXME: stabilization should modify documentation of `exists()` to recommend this method\n// instead.\n#[unstable(feature = \"fs_try_exists\", issue = \"83186\")]\n#[inline]\npub fn try_exists<P: AsRef<Path>>(path: P) -> io::Result<bool> {\n    fs_imp::try_exists(path.as_ref())\n}\n\n```",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Source of the Rust file `library/std/src/fs.rs`.\"><title>fs.rs - source</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"../../static.files/src-script-e66d777a5a92e9b2.js\"></script><script defer=\"\" src=\"../../src-files1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc src\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"sidebar\"><div class=\"src-sidebar-title\"><h2>Files</h2></div><div id=\"src-sidebar\"><details class=\"dir-entry\"><summary>alloc</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>boxed</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/alloc/boxed/thin.rs.html\">thin.rs</a></div></details><details class=\"dir-entry\"><summary>collections</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>binary_heap</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/alloc/collections/binary_heap/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>btree</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>map</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/alloc/collections/btree/map/entry.rs.html\">entry.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/alloc/collections/btree/append.rs.html\">append.rs</a><a href=\"../../src/alloc/collections/btree/borrow.rs.html\">borrow.rs</a><a href=\"../../src/alloc/collections/btree/dedup_sorted_iter.rs.html\">dedup_sorted_iter.rs</a><a href=\"../../src/alloc/collections/btree/fix.rs.html\">fix.rs</a><a href=\"../../src/alloc/collections/btree/map.rs.html\">map.rs</a><a href=\"../../src/alloc/collections/btree/mem.rs.html\">mem.rs</a><a href=\"../../src/alloc/collections/btree/merge_iter.rs.html\">merge_iter.rs</a><a href=\"../../src/alloc/collections/btree/mod.rs.html\">mod.rs</a><a href=\"../../src/alloc/collections/btree/navigate.rs.html\">navigate.rs</a><a href=\"../../src/alloc/collections/btree/node.rs.html\">node.rs</a><a href=\"../../src/alloc/collections/btree/remove.rs.html\">remove.rs</a><a href=\"../../src/alloc/collections/btree/search.rs.html\">search.rs</a><a href=\"../../src/alloc/collections/btree/set.rs.html\">set.rs</a><a href=\"../../src/alloc/collections/btree/set_val.rs.html\">set_val.rs</a><a href=\"../../src/alloc/collections/btree/split.rs.html\">split.rs</a></div></details><details class=\"dir-entry\"><summary>vec_deque</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/alloc/collections/vec_deque/drain.rs.html\">drain.rs</a><a href=\"../../src/alloc/collections/vec_deque/into_iter.rs.html\">into_iter.rs</a><a href=\"../../src/alloc/collections/vec_deque/iter.rs.html\">iter.rs</a><a href=\"../../src/alloc/collections/vec_deque/iter_mut.rs.html\">iter_mut.rs</a><a href=\"../../src/alloc/collections/vec_deque/macros.rs.html\">macros.rs</a><a href=\"../../src/alloc/collections/vec_deque/mod.rs.html\">mod.rs</a><a href=\"../../src/alloc/collections/vec_deque/spec_extend.rs.html\">spec_extend.rs</a><a href=\"../../src/alloc/collections/vec_deque/spec_from_iter.rs.html\">spec_from_iter.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/alloc/collections/linked_list.rs.html\">linked_list.rs</a><a href=\"../../src/alloc/collections/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>ffi</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/alloc/ffi/c_str.rs.html\">c_str.rs</a><a href=\"../../src/alloc/ffi/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>vec</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/alloc/vec/cow.rs.html\">cow.rs</a><a href=\"../../src/alloc/vec/drain.rs.html\">drain.rs</a><a href=\"../../src/alloc/vec/extract_if.rs.html\">extract_if.rs</a><a href=\"../../src/alloc/vec/in_place_collect.rs.html\">in_place_collect.rs</a><a href=\"../../src/alloc/vec/in_place_drop.rs.html\">in_place_drop.rs</a><a href=\"../../src/alloc/vec/into_iter.rs.html\">into_iter.rs</a><a href=\"../../src/alloc/vec/is_zero.rs.html\">is_zero.rs</a><a href=\"../../src/alloc/vec/mod.rs.html\">mod.rs</a><a href=\"../../src/alloc/vec/partial_eq.rs.html\">partial_eq.rs</a><a href=\"../../src/alloc/vec/set_len_on_drop.rs.html\">set_len_on_drop.rs</a><a href=\"../../src/alloc/vec/spec_extend.rs.html\">spec_extend.rs</a><a href=\"../../src/alloc/vec/spec_from_elem.rs.html\">spec_from_elem.rs</a><a href=\"../../src/alloc/vec/spec_from_iter.rs.html\">spec_from_iter.rs</a><a href=\"../../src/alloc/vec/spec_from_iter_nested.rs.html\">spec_from_iter_nested.rs</a><a href=\"../../src/alloc/vec/splice.rs.html\">splice.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/alloc/alloc.rs.html\">alloc.rs</a><a href=\"../../src/alloc/borrow.rs.html\">borrow.rs</a><a href=\"../../src/alloc/boxed.rs.html\">boxed.rs</a><a href=\"../../src/alloc/fmt.rs.html\">fmt.rs</a><a href=\"../../src/alloc/lib.rs.html\">lib.rs</a><a href=\"../../src/alloc/macros.rs.html\">macros.rs</a><a href=\"../../src/alloc/raw_vec.rs.html\">raw_vec.rs</a><a href=\"../../src/alloc/rc.rs.html\">rc.rs</a><a href=\"../../src/alloc/slice.rs.html\">slice.rs</a><a href=\"../../src/alloc/str.rs.html\">str.rs</a><a href=\"../../src/alloc/string.rs.html\">string.rs</a><a href=\"../../src/alloc/sync.rs.html\">sync.rs</a><a href=\"../../src/alloc/task.rs.html\">task.rs</a></div></details><details class=\"dir-entry\"><summary>core</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>alloc</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/alloc/global.rs.html\">global.rs</a><a href=\"../../src/core/alloc/layout.rs.html\">layout.rs</a><a href=\"../../src/core/alloc/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>array</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/array/ascii.rs.html\">ascii.rs</a><a href=\"../../src/core/array/drain.rs.html\">drain.rs</a><a href=\"../../src/core/array/equality.rs.html\">equality.rs</a><a href=\"../../src/core/array/iter.rs.html\">iter.rs</a><a href=\"../../src/core/array/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>ascii</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/ascii/ascii_char.rs.html\">ascii_char.rs</a></div></details><details class=\"dir-entry\"><summary>async_iter</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/async_iter/async_iter.rs.html\">async_iter.rs</a><a href=\"../../src/core/async_iter/from_iter.rs.html\">from_iter.rs</a><a href=\"../../src/core/async_iter/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>cell</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/cell/lazy.rs.html\">lazy.rs</a><a href=\"../../src/core/cell/once.rs.html\">once.rs</a></div></details><details class=\"dir-entry\"><summary>char</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/char/convert.rs.html\">convert.rs</a><a href=\"../../src/core/char/decode.rs.html\">decode.rs</a><a href=\"../../src/core/char/methods.rs.html\">methods.rs</a><a href=\"../../src/core/char/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>cmp</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/cmp/bytewise.rs.html\">bytewise.rs</a></div></details><details class=\"dir-entry\"><summary>convert</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/convert/mod.rs.html\">mod.rs</a><a href=\"../../src/core/convert/num.rs.html\">num.rs</a></div></details><details class=\"dir-entry\"><summary>ffi</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/ffi/c_str.rs.html\">c_str.rs</a><a href=\"../../src/core/ffi/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>fmt</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/fmt/builders.rs.html\">builders.rs</a><a href=\"../../src/core/fmt/float.rs.html\">float.rs</a><a href=\"../../src/core/fmt/mod.rs.html\">mod.rs</a><a href=\"../../src/core/fmt/num.rs.html\">num.rs</a><a href=\"../../src/core/fmt/rt.rs.html\">rt.rs</a></div></details><details class=\"dir-entry\"><summary>future</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/future/async_drop.rs.html\">async_drop.rs</a><a href=\"../../src/core/future/future.rs.html\">future.rs</a><a href=\"../../src/core/future/into_future.rs.html\">into_future.rs</a><a href=\"../../src/core/future/join.rs.html\">join.rs</a><a href=\"../../src/core/future/mod.rs.html\">mod.rs</a><a href=\"../../src/core/future/pending.rs.html\">pending.rs</a><a href=\"../../src/core/future/poll_fn.rs.html\">poll_fn.rs</a><a href=\"../../src/core/future/ready.rs.html\">ready.rs</a></div></details><details class=\"dir-entry\"><summary>hash</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/hash/mod.rs.html\">mod.rs</a><a href=\"../../src/core/hash/sip.rs.html\">sip.rs</a></div></details><details class=\"dir-entry\"><summary>intrinsics</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/intrinsics/mir.rs.html\">mir.rs</a><a href=\"../../src/core/intrinsics/simd.rs.html\">simd.rs</a></div></details><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/io/borrowed_buf.rs.html\">borrowed_buf.rs</a><a href=\"../../src/core/io/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>iter</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>adapters</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/iter/adapters/array_chunks.rs.html\">array_chunks.rs</a><a href=\"../../src/core/iter/adapters/by_ref_sized.rs.html\">by_ref_sized.rs</a><a href=\"../../src/core/iter/adapters/chain.rs.html\">chain.rs</a><a href=\"../../src/core/iter/adapters/cloned.rs.html\">cloned.rs</a><a href=\"../../src/core/iter/adapters/copied.rs.html\">copied.rs</a><a href=\"../../src/core/iter/adapters/cycle.rs.html\">cycle.rs</a><a href=\"../../src/core/iter/adapters/enumerate.rs.html\">enumerate.rs</a><a href=\"../../src/core/iter/adapters/filter.rs.html\">filter.rs</a><a href=\"../../src/core/iter/adapters/filter_map.rs.html\">filter_map.rs</a><a href=\"../../src/core/iter/adapters/flatten.rs.html\">flatten.rs</a><a href=\"../../src/core/iter/adapters/fuse.rs.html\">fuse.rs</a><a href=\"../../src/core/iter/adapters/inspect.rs.html\">inspect.rs</a><a href=\"../../src/core/iter/adapters/intersperse.rs.html\">intersperse.rs</a><a href=\"../../src/core/iter/adapters/map.rs.html\">map.rs</a><a href=\"../../src/core/iter/adapters/map_while.rs.html\">map_while.rs</a><a href=\"../../src/core/iter/adapters/map_windows.rs.html\">map_windows.rs</a><a href=\"../../src/core/iter/adapters/mod.rs.html\">mod.rs</a><a href=\"../../src/core/iter/adapters/peekable.rs.html\">peekable.rs</a><a href=\"../../src/core/iter/adapters/rev.rs.html\">rev.rs</a><a href=\"../../src/core/iter/adapters/scan.rs.html\">scan.rs</a><a href=\"../../src/core/iter/adapters/skip.rs.html\">skip.rs</a><a href=\"../../src/core/iter/adapters/skip_while.rs.html\">skip_while.rs</a><a href=\"../../src/core/iter/adapters/step_by.rs.html\">step_by.rs</a><a href=\"../../src/core/iter/adapters/take.rs.html\">take.rs</a><a href=\"../../src/core/iter/adapters/take_while.rs.html\">take_while.rs</a><a href=\"../../src/core/iter/adapters/zip.rs.html\">zip.rs</a></div></details><details class=\"dir-entry\"><summary>sources</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/iter/sources/empty.rs.html\">empty.rs</a><a href=\"../../src/core/iter/sources/from_coroutine.rs.html\">from_coroutine.rs</a><a href=\"../../src/core/iter/sources/from_fn.rs.html\">from_fn.rs</a><a href=\"../../src/core/iter/sources/once.rs.html\">once.rs</a><a href=\"../../src/core/iter/sources/once_with.rs.html\">once_with.rs</a><a href=\"../../src/core/iter/sources/repeat.rs.html\">repeat.rs</a><a href=\"../../src/core/iter/sources/repeat_n.rs.html\">repeat_n.rs</a><a href=\"../../src/core/iter/sources/repeat_with.rs.html\">repeat_with.rs</a><a href=\"../../src/core/iter/sources/successors.rs.html\">successors.rs</a></div></details><details class=\"dir-entry\"><summary>traits</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/iter/traits/accum.rs.html\">accum.rs</a><a href=\"../../src/core/iter/traits/collect.rs.html\">collect.rs</a><a href=\"../../src/core/iter/traits/double_ended.rs.html\">double_ended.rs</a><a href=\"../../src/core/iter/traits/exact_size.rs.html\">exact_size.rs</a><a href=\"../../src/core/iter/traits/iterator.rs.html\">iterator.rs</a><a href=\"../../src/core/iter/traits/marker.rs.html\">marker.rs</a><a href=\"../../src/core/iter/traits/mod.rs.html\">mod.rs</a><a href=\"../../src/core/iter/traits/unchecked_iterator.rs.html\">unchecked_iterator.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/core/iter/mod.rs.html\">mod.rs</a><a href=\"../../src/core/iter/range.rs.html\">range.rs</a><a href=\"../../src/core/iter/sources.rs.html\">sources.rs</a></div></details><details class=\"dir-entry\"><summary>macros</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/macros/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>mem</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/mem/manually_drop.rs.html\">manually_drop.rs</a><a href=\"../../src/core/mem/maybe_uninit.rs.html\">maybe_uninit.rs</a><a href=\"../../src/core/mem/mod.rs.html\">mod.rs</a><a href=\"../../src/core/mem/transmutability.rs.html\">transmutability.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/net/display_buffer.rs.html\">display_buffer.rs</a><a href=\"../../src/core/net/ip_addr.rs.html\">ip_addr.rs</a><a href=\"../../src/core/net/mod.rs.html\">mod.rs</a><a href=\"../../src/core/net/parser.rs.html\">parser.rs</a><a href=\"../../src/core/net/socket_addr.rs.html\">socket_addr.rs</a></div></details><details class=\"dir-entry\"><summary>num</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>dec2flt</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/num/dec2flt/common.rs.html\">common.rs</a><a href=\"../../src/core/num/dec2flt/decimal.rs.html\">decimal.rs</a><a href=\"../../src/core/num/dec2flt/float.rs.html\">float.rs</a><a href=\"../../src/core/num/dec2flt/fpu.rs.html\">fpu.rs</a><a href=\"../../src/core/num/dec2flt/lemire.rs.html\">lemire.rs</a><a href=\"../../src/core/num/dec2flt/mod.rs.html\">mod.rs</a><a href=\"../../src/core/num/dec2flt/number.rs.html\">number.rs</a><a href=\"../../src/core/num/dec2flt/parse.rs.html\">parse.rs</a><a href=\"../../src/core/num/dec2flt/slow.rs.html\">slow.rs</a><a href=\"../../src/core/num/dec2flt/table.rs.html\">table.rs</a></div></details><details class=\"dir-entry\"><summary>flt2dec</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>strategy</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/num/flt2dec/strategy/dragon.rs.html\">dragon.rs</a><a href=\"../../src/core/num/flt2dec/strategy/grisu.rs.html\">grisu.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/core/num/flt2dec/decoder.rs.html\">decoder.rs</a><a href=\"../../src/core/num/flt2dec/estimator.rs.html\">estimator.rs</a><a href=\"../../src/core/num/flt2dec/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>shells</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/num/shells/i128.rs.html\">i128.rs</a><a href=\"../../src/core/num/shells/i16.rs.html\">i16.rs</a><a href=\"../../src/core/num/shells/i32.rs.html\">i32.rs</a><a href=\"../../src/core/num/shells/i64.rs.html\">i64.rs</a><a href=\"../../src/core/num/shells/i8.rs.html\">i8.rs</a><a href=\"../../src/core/num/shells/int_macros.rs.html\">int_macros.rs</a><a href=\"../../src/core/num/shells/isize.rs.html\">isize.rs</a><a href=\"../../src/core/num/shells/u128.rs.html\">u128.rs</a><a href=\"../../src/core/num/shells/u16.rs.html\">u16.rs</a><a href=\"../../src/core/num/shells/u32.rs.html\">u32.rs</a><a href=\"../../src/core/num/shells/u64.rs.html\">u64.rs</a><a href=\"../../src/core/num/shells/u8.rs.html\">u8.rs</a><a href=\"../../src/core/num/shells/usize.rs.html\">usize.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/core/num/bignum.rs.html\">bignum.rs</a><a href=\"../../src/core/num/diy_float.rs.html\">diy_float.rs</a><a href=\"../../src/core/num/error.rs.html\">error.rs</a><a href=\"../../src/core/num/f128.rs.html\">f128.rs</a><a href=\"../../src/core/num/f16.rs.html\">f16.rs</a><a href=\"../../src/core/num/f32.rs.html\">f32.rs</a><a href=\"../../src/core/num/f64.rs.html\">f64.rs</a><a href=\"../../src/core/num/fmt.rs.html\">fmt.rs</a><a href=\"../../src/core/num/int_log10.rs.html\">int_log10.rs</a><a href=\"../../src/core/num/int_macros.rs.html\">int_macros.rs</a><a href=\"../../src/core/num/mod.rs.html\">mod.rs</a><a href=\"../../src/core/num/nonzero.rs.html\">nonzero.rs</a><a href=\"../../src/core/num/overflow_panic.rs.html\">overflow_panic.rs</a><a href=\"../../src/core/num/saturating.rs.html\">saturating.rs</a><a href=\"../../src/core/num/uint_macros.rs.html\">uint_macros.rs</a><a href=\"../../src/core/num/wrapping.rs.html\">wrapping.rs</a></div></details><details class=\"dir-entry\"><summary>ops</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/ops/arith.rs.html\">arith.rs</a><a href=\"../../src/core/ops/async_function.rs.html\">async_function.rs</a><a href=\"../../src/core/ops/bit.rs.html\">bit.rs</a><a href=\"../../src/core/ops/control_flow.rs.html\">control_flow.rs</a><a href=\"../../src/core/ops/coroutine.rs.html\">coroutine.rs</a><a href=\"../../src/core/ops/deref.rs.html\">deref.rs</a><a href=\"../../src/core/ops/drop.rs.html\">drop.rs</a><a href=\"../../src/core/ops/function.rs.html\">function.rs</a><a href=\"../../src/core/ops/index.rs.html\">index.rs</a><a href=\"../../src/core/ops/index_range.rs.html\">index_range.rs</a><a href=\"../../src/core/ops/mod.rs.html\">mod.rs</a><a href=\"../../src/core/ops/range.rs.html\">range.rs</a><a href=\"../../src/core/ops/try_trait.rs.html\">try_trait.rs</a><a href=\"../../src/core/ops/unsize.rs.html\">unsize.rs</a></div></details><details class=\"dir-entry\"><summary>panic</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/panic/location.rs.html\">location.rs</a><a href=\"../../src/core/panic/panic_info.rs.html\">panic_info.rs</a><a href=\"../../src/core/panic/unwind_safe.rs.html\">unwind_safe.rs</a></div></details><details class=\"dir-entry\"><summary>portable-simd</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>crates</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>core_simd</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>masks</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/portable-simd/crates/core_simd/src/masks/full_masks.rs.html\">full_masks.rs</a></div></details><details class=\"dir-entry\"><summary>ops</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/portable-simd/crates/core_simd/src/ops/assign.rs.html\">assign.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/ops/deref.rs.html\">deref.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/ops/shift_scalar.rs.html\">shift_scalar.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/ops/unary.rs.html\">unary.rs</a></div></details><details class=\"dir-entry\"><summary>simd</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>cmp</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/portable-simd/crates/core_simd/src/simd/cmp/eq.rs.html\">eq.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/simd/cmp/ord.rs.html\">ord.rs</a></div></details><details class=\"dir-entry\"><summary>num</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/portable-simd/crates/core_simd/src/simd/num/float.rs.html\">float.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/simd/num/int.rs.html\">int.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/simd/num/uint.rs.html\">uint.rs</a></div></details><details class=\"dir-entry\"><summary>ptr</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/portable-simd/crates/core_simd/src/simd/ptr/const_ptr.rs.html\">const_ptr.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/simd/ptr/mut_ptr.rs.html\">mut_ptr.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/core/portable-simd/crates/core_simd/src/simd/cmp.rs.html\">cmp.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/simd/num.rs.html\">num.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/simd/prelude.rs.html\">prelude.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/simd/ptr.rs.html\">ptr.rs</a></div></details><details class=\"dir-entry\"><summary>vendor</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/portable-simd/crates/core_simd/src/vendor/x86.rs.html\">x86.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/core/portable-simd/crates/core_simd/src/alias.rs.html\">alias.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/cast.rs.html\">cast.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/fmt.rs.html\">fmt.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/iter.rs.html\">iter.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/lane_count.rs.html\">lane_count.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/masks.rs.html\">masks.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/mod.rs.html\">mod.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/ops.rs.html\">ops.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/select.rs.html\">select.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/swizzle.rs.html\">swizzle.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/swizzle_dyn.rs.html\">swizzle_dyn.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/to_bytes.rs.html\">to_bytes.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/vector.rs.html\">vector.rs</a><a href=\"../../src/core/portable-simd/crates/core_simd/src/vendor.rs.html\">vendor.rs</a></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>prelude</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/prelude/common.rs.html\">common.rs</a><a href=\"../../src/core/prelude/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>ptr</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/ptr/alignment.rs.html\">alignment.rs</a><a href=\"../../src/core/ptr/const_ptr.rs.html\">const_ptr.rs</a><a href=\"../../src/core/ptr/metadata.rs.html\">metadata.rs</a><a href=\"../../src/core/ptr/mod.rs.html\">mod.rs</a><a href=\"../../src/core/ptr/mut_ptr.rs.html\">mut_ptr.rs</a><a href=\"../../src/core/ptr/non_null.rs.html\">non_null.rs</a><a href=\"../../src/core/ptr/unique.rs.html\">unique.rs</a></div></details><details class=\"dir-entry\"><summary>slice</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>iter</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/slice/iter/macros.rs.html\">macros.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/core/slice/ascii.rs.html\">ascii.rs</a><a href=\"../../src/core/slice/cmp.rs.html\">cmp.rs</a><a href=\"../../src/core/slice/index.rs.html\">index.rs</a><a href=\"../../src/core/slice/iter.rs.html\">iter.rs</a><a href=\"../../src/core/slice/memchr.rs.html\">memchr.rs</a><a href=\"../../src/core/slice/mod.rs.html\">mod.rs</a><a href=\"../../src/core/slice/raw.rs.html\">raw.rs</a><a href=\"../../src/core/slice/rotate.rs.html\">rotate.rs</a><a href=\"../../src/core/slice/select.rs.html\">select.rs</a><a href=\"../../src/core/slice/sort.rs.html\">sort.rs</a><a href=\"../../src/core/slice/specialize.rs.html\">specialize.rs</a></div></details><details class=\"dir-entry\"><summary>stdarch</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>crates</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>core_arch</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>aarch64</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>neon</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/aarch64/neon/generated.rs.html\">generated.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/aarch64/neon/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/aarch64/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/aarch64/prefetch.rs.html\">prefetch.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/aarch64/tme.rs.html\">tme.rs</a></div></details><details class=\"dir-entry\"><summary>arm</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/arm/dsp.rs.html\">dsp.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/arm/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/arm/neon.rs.html\">neon.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/arm/sat.rs.html\">sat.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/arm/simd32.rs.html\">simd32.rs</a></div></details><details class=\"dir-entry\"><summary>arm_shared</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>barrier</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/arm_shared/barrier/cp15.rs.html\">cp15.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/arm_shared/barrier/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>neon</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/arm_shared/neon/generated.rs.html\">generated.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/arm_shared/neon/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/arm_shared/crc.rs.html\">crc.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/arm_shared/crypto.rs.html\">crypto.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/arm_shared/hints.rs.html\">hints.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/arm_shared/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>loongarch64</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>lasx</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/loongarch64/lasx/generated.rs.html\">generated.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/loongarch64/lasx/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/loongarch64/lasx/types.rs.html\">types.rs</a></div></details><details class=\"dir-entry\"><summary>lsx</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/loongarch64/lsx/generated.rs.html\">generated.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/loongarch64/lsx/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/loongarch64/lsx/types.rs.html\">types.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/loongarch64/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>mips</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/mips/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>nvptx</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/nvptx/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>powerpc</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/powerpc/altivec.rs.html\">altivec.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/powerpc/macros.rs.html\">macros.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/powerpc/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/powerpc/vsx.rs.html\">vsx.rs</a></div></details><details class=\"dir-entry\"><summary>powerpc64</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/powerpc64/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/powerpc64/vsx.rs.html\">vsx.rs</a></div></details><details class=\"dir-entry\"><summary>riscv32</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/riscv32/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/riscv32/zk.rs.html\">zk.rs</a></div></details><details class=\"dir-entry\"><summary>riscv64</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/riscv64/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/riscv64/zk.rs.html\">zk.rs</a></div></details><details class=\"dir-entry\"><summary>riscv_shared</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/riscv_shared/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/riscv_shared/p.rs.html\">p.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/riscv_shared/zb.rs.html\">zb.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/riscv_shared/zk.rs.html\">zk.rs</a></div></details><details class=\"dir-entry\"><summary>wasm32</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/wasm32/atomic.rs.html\">atomic.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/wasm32/memory.rs.html\">memory.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/wasm32/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/wasm32/relaxed_simd.rs.html\">relaxed_simd.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/wasm32/simd128.rs.html\">simd128.rs</a></div></details><details class=\"dir-entry\"><summary>x86</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/abm.rs.html\">abm.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/adx.rs.html\">adx.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/aes.rs.html\">aes.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/avx.rs.html\">avx.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/avx2.rs.html\">avx2.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/avx512bf16.rs.html\">avx512bf16.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/avx512bitalg.rs.html\">avx512bitalg.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/avx512bw.rs.html\">avx512bw.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/avx512cd.rs.html\">avx512cd.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/avx512f.rs.html\">avx512f.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/avx512ifma.rs.html\">avx512ifma.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/avx512vbmi.rs.html\">avx512vbmi.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/avx512vbmi2.rs.html\">avx512vbmi2.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/avx512vnni.rs.html\">avx512vnni.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/avx512vpopcntdq.rs.html\">avx512vpopcntdq.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/bmi1.rs.html\">bmi1.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/bmi2.rs.html\">bmi2.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/bswap.rs.html\">bswap.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/bt.rs.html\">bt.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/cpuid.rs.html\">cpuid.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/eflags.rs.html\">eflags.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/f16c.rs.html\">f16c.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/fma.rs.html\">fma.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/fxsr.rs.html\">fxsr.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/gfni.rs.html\">gfni.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/macros.rs.html\">macros.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/pclmulqdq.rs.html\">pclmulqdq.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/rdrand.rs.html\">rdrand.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/rdtsc.rs.html\">rdtsc.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/rtm.rs.html\">rtm.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/sha.rs.html\">sha.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/sse.rs.html\">sse.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/sse2.rs.html\">sse2.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/sse3.rs.html\">sse3.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/sse41.rs.html\">sse41.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/sse42.rs.html\">sse42.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/sse4a.rs.html\">sse4a.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/ssse3.rs.html\">ssse3.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/tbm.rs.html\">tbm.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/vaes.rs.html\">vaes.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/vpclmulqdq.rs.html\">vpclmulqdq.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86/xsave.rs.html\">xsave.rs</a></div></details><details class=\"dir-entry\"><summary>x86_64</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/abm.rs.html\">abm.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/adx.rs.html\">adx.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/avx.rs.html\">avx.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/avx2.rs.html\">avx2.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/avx512f.rs.html\">avx512f.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/bmi.rs.html\">bmi.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/bmi2.rs.html\">bmi2.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/bswap.rs.html\">bswap.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/bt.rs.html\">bt.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/cmpxchg16b.rs.html\">cmpxchg16b.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/fxsr.rs.html\">fxsr.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/macros.rs.html\">macros.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/rdrand.rs.html\">rdrand.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/sse.rs.html\">sse.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/sse2.rs.html\">sse2.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/sse41.rs.html\">sse41.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/sse42.rs.html\">sse42.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/x86_64/xsave.rs.html\">xsave.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/core/stdarch/crates/core_arch/src/macros.rs.html\">macros.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/mod.rs.html\">mod.rs</a><a href=\"../../src/core/stdarch/crates/core_arch/src/simd.rs.html\">simd.rs</a></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>str</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/str/converts.rs.html\">converts.rs</a><a href=\"../../src/core/str/count.rs.html\">count.rs</a><a href=\"../../src/core/str/error.rs.html\">error.rs</a><a href=\"../../src/core/str/iter.rs.html\">iter.rs</a><a href=\"../../src/core/str/lossy.rs.html\">lossy.rs</a><a href=\"../../src/core/str/mod.rs.html\">mod.rs</a><a href=\"../../src/core/str/pattern.rs.html\">pattern.rs</a><a href=\"../../src/core/str/traits.rs.html\">traits.rs</a><a href=\"../../src/core/str/validations.rs.html\">validations.rs</a></div></details><details class=\"dir-entry\"><summary>sync</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/sync/atomic.rs.html\">atomic.rs</a><a href=\"../../src/core/sync/exclusive.rs.html\">exclusive.rs</a><a href=\"../../src/core/sync/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>task</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/task/mod.rs.html\">mod.rs</a><a href=\"../../src/core/task/poll.rs.html\">poll.rs</a><a href=\"../../src/core/task/ready.rs.html\">ready.rs</a><a href=\"../../src/core/task/wake.rs.html\">wake.rs</a></div></details><details class=\"dir-entry\"><summary>unicode</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/core/unicode/mod.rs.html\">mod.rs</a><a href=\"../../src/core/unicode/printable.rs.html\">printable.rs</a><a href=\"../../src/core/unicode/unicode_data.rs.html\">unicode_data.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/core/any.rs.html\">any.rs</a><a href=\"../../src/core/arch.rs.html\">arch.rs</a><a href=\"../../src/core/ascii.rs.html\">ascii.rs</a><a href=\"../../src/core/asserting.rs.html\">asserting.rs</a><a href=\"../../src/core/bool.rs.html\">bool.rs</a><a href=\"../../src/core/borrow.rs.html\">borrow.rs</a><a href=\"../../src/core/cell.rs.html\">cell.rs</a><a href=\"../../src/core/clone.rs.html\">clone.rs</a><a href=\"../../src/core/cmp.rs.html\">cmp.rs</a><a href=\"../../src/core/default.rs.html\">default.rs</a><a href=\"../../src/core/error.rs.html\">error.rs</a><a href=\"../../src/core/escape.rs.html\">escape.rs</a><a href=\"../../src/core/hint.rs.html\">hint.rs</a><a href=\"../../src/core/internal_macros.rs.html\">internal_macros.rs</a><a href=\"../../src/core/intrinsics.rs.html\">intrinsics.rs</a><a href=\"../../src/core/lib.rs.html\">lib.rs</a><a href=\"../../src/core/marker.rs.html\">marker.rs</a><a href=\"../../src/core/option.rs.html\">option.rs</a><a href=\"../../src/core/panic.rs.html\">panic.rs</a><a href=\"../../src/core/panicking.rs.html\">panicking.rs</a><a href=\"../../src/core/pat.rs.html\">pat.rs</a><a href=\"../../src/core/pin.rs.html\">pin.rs</a><a href=\"../../src/core/primitive.rs.html\">primitive.rs</a><a href=\"../../src/core/primitive_docs.rs.html\">primitive_docs.rs</a><a href=\"../../src/core/result.rs.html\">result.rs</a><a href=\"../../src/core/time.rs.html\">time.rs</a><a href=\"../../src/core/tuple.rs.html\">tuple.rs</a><a href=\"../../src/core/ub_checks.rs.html\">ub_checks.rs</a><a href=\"../../src/core/unit.rs.html\">unit.rs</a></div></details><details class=\"dir-entry\"><summary>proc_macro</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>bridge</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/proc_macro/bridge/arena.rs.html\">arena.rs</a><a href=\"../../src/proc_macro/bridge/buffer.rs.html\">buffer.rs</a><a href=\"../../src/proc_macro/bridge/client.rs.html\">client.rs</a><a href=\"../../src/proc_macro/bridge/closure.rs.html\">closure.rs</a><a href=\"../../src/proc_macro/bridge/fxhash.rs.html\">fxhash.rs</a><a href=\"../../src/proc_macro/bridge/handle.rs.html\">handle.rs</a><a href=\"../../src/proc_macro/bridge/mod.rs.html\">mod.rs</a><a href=\"../../src/proc_macro/bridge/rpc.rs.html\">rpc.rs</a><a href=\"../../src/proc_macro/bridge/selfless_reify.rs.html\">selfless_reify.rs</a><a href=\"../../src/proc_macro/bridge/server.rs.html\">server.rs</a><a href=\"../../src/proc_macro/bridge/symbol.rs.html\">symbol.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/proc_macro/diagnostic.rs.html\">diagnostic.rs</a><a href=\"../../src/proc_macro/lib.rs.html\">lib.rs</a><a href=\"../../src/proc_macro/quote.rs.html\">quote.rs</a></div></details><details class=\"dir-entry\" open=\"\"><summary>std</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>backtrace</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>backtrace</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/backtrace/src/backtrace/libunwind.rs.html\">libunwind.rs</a><a href=\"../../src/std/backtrace/src/backtrace/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>symbolize</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>gimli</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/backtrace/src/symbolize/gimli/elf.rs.html\">elf.rs</a><a href=\"../../src/std/backtrace/src/symbolize/gimli/libs_dl_iterate_phdr.rs.html\">libs_dl_iterate_phdr.rs</a><a href=\"../../src/std/backtrace/src/symbolize/gimli/mmap_unix.rs.html\">mmap_unix.rs</a><a href=\"../../src/std/backtrace/src/symbolize/gimli/parse_running_mmaps_unix.rs.html\">parse_running_mmaps_unix.rs</a><a href=\"../../src/std/backtrace/src/symbolize/gimli/stash.rs.html\">stash.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/backtrace/src/symbolize/gimli.rs.html\">gimli.rs</a><a href=\"../../src/std/backtrace/src/symbolize/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/backtrace/src/lib.rs.html\">lib.rs</a><a href=\"../../src/std/backtrace/src/print.rs.html\">print.rs</a><a href=\"../../src/std/backtrace/src/types.rs.html\">types.rs</a></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>collections</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>hash</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/collections/hash/map.rs.html\">map.rs</a><a href=\"../../src/std/collections/hash/mod.rs.html\">mod.rs</a><a href=\"../../src/std/collections/hash/set.rs.html\">set.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/collections/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>core</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/core/src/primitive_docs.rs.html\">primitive_docs.rs</a></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>ffi</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/ffi/c_str.rs.html\">c_str.rs</a><a href=\"../../src/std/ffi/mod.rs.html\">mod.rs</a><a href=\"../../src/std/ffi/os_str.rs.html\">os_str.rs</a></div></details><details class=\"dir-entry\"><summary>hash</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/hash/mod.rs.html\">mod.rs</a><a href=\"../../src/std/hash/random.rs.html\">random.rs</a></div></details><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>buffered</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>bufreader</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/io/buffered/bufreader/buffer.rs.html\">buffer.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/io/buffered/bufreader.rs.html\">bufreader.rs</a><a href=\"../../src/std/io/buffered/bufwriter.rs.html\">bufwriter.rs</a><a href=\"../../src/std/io/buffered/linewriter.rs.html\">linewriter.rs</a><a href=\"../../src/std/io/buffered/linewritershim.rs.html\">linewritershim.rs</a><a href=\"../../src/std/io/buffered/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>error</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/io/error/repr_bitpacked.rs.html\">repr_bitpacked.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/io/copy.rs.html\">copy.rs</a><a href=\"../../src/std/io/cursor.rs.html\">cursor.rs</a><a href=\"../../src/std/io/error.rs.html\">error.rs</a><a href=\"../../src/std/io/impls.rs.html\">impls.rs</a><a href=\"../../src/std/io/mod.rs.html\">mod.rs</a><a href=\"../../src/std/io/prelude.rs.html\">prelude.rs</a><a href=\"../../src/std/io/stdio.rs.html\">stdio.rs</a><a href=\"../../src/std/io/util.rs.html\">util.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/net/ip_addr.rs.html\">ip_addr.rs</a><a href=\"../../src/std/net/mod.rs.html\">mod.rs</a><a href=\"../../src/std/net/socket_addr.rs.html\">socket_addr.rs</a><a href=\"../../src/std/net/tcp.rs.html\">tcp.rs</a><a href=\"../../src/std/net/udp.rs.html\">udp.rs</a></div></details><details class=\"dir-entry\"><summary>os</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>fd</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/os/fd/mod.rs.html\">mod.rs</a><a href=\"../../src/std/os/fd/net.rs.html\">net.rs</a><a href=\"../../src/std/os/fd/owned.rs.html\">owned.rs</a><a href=\"../../src/std/os/fd/raw.rs.html\">raw.rs</a></div></details><details class=\"dir-entry\"><summary>linux</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/os/linux/fs.rs.html\">fs.rs</a><a href=\"../../src/std/os/linux/mod.rs.html\">mod.rs</a><a href=\"../../src/std/os/linux/net.rs.html\">net.rs</a><a href=\"../../src/std/os/linux/process.rs.html\">process.rs</a><a href=\"../../src/std/os/linux/raw.rs.html\">raw.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>linux_ext</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/os/net/linux_ext/addr.rs.html\">addr.rs</a><a href=\"../../src/std/os/net/linux_ext/mod.rs.html\">mod.rs</a><a href=\"../../src/std/os/net/linux_ext/socket.rs.html\">socket.rs</a><a href=\"../../src/std/os/net/linux_ext/tcp.rs.html\">tcp.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/os/net/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>raw</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/os/raw/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>unix</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>ffi</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/os/unix/ffi/mod.rs.html\">mod.rs</a><a href=\"../../src/std/os/unix/ffi/os_str.rs.html\">os_str.rs</a></div></details><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/os/unix/io/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/os/unix/net/addr.rs.html\">addr.rs</a><a href=\"../../src/std/os/unix/net/ancillary.rs.html\">ancillary.rs</a><a href=\"../../src/std/os/unix/net/datagram.rs.html\">datagram.rs</a><a href=\"../../src/std/os/unix/net/listener.rs.html\">listener.rs</a><a href=\"../../src/std/os/unix/net/mod.rs.html\">mod.rs</a><a href=\"../../src/std/os/unix/net/stream.rs.html\">stream.rs</a><a href=\"../../src/std/os/unix/net/ucred.rs.html\">ucred.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/os/unix/fs.rs.html\">fs.rs</a><a href=\"../../src/std/os/unix/mod.rs.html\">mod.rs</a><a href=\"../../src/std/os/unix/process.rs.html\">process.rs</a><a href=\"../../src/std/os/unix/raw.rs.html\">raw.rs</a><a href=\"../../src/std/os/unix/thread.rs.html\">thread.rs</a></div></details><details class=\"dir-entry\"><summary>wasi</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/os/wasi/io/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>net</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/os/wasi/net/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/os/wasi/ffi.rs.html\">ffi.rs</a><a href=\"../../src/std/os/wasi/fs.rs.html\">fs.rs</a><a href=\"../../src/std/os/wasi/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>wasip2</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/os/wasip2/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>windows</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>io</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/os/windows/io/handle.rs.html\">handle.rs</a><a href=\"../../src/std/os/windows/io/mod.rs.html\">mod.rs</a><a href=\"../../src/std/os/windows/io/raw.rs.html\">raw.rs</a><a href=\"../../src/std/os/windows/io/socket.rs.html\">socket.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/os/windows/ffi.rs.html\">ffi.rs</a><a href=\"../../src/std/os/windows/fs.rs.html\">fs.rs</a><a href=\"../../src/std/os/windows/mod.rs.html\">mod.rs</a><a href=\"../../src/std/os/windows/process.rs.html\">process.rs</a><a href=\"../../src/std/os/windows/raw.rs.html\">raw.rs</a><a href=\"../../src/std/os/windows/thread.rs.html\">thread.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/os/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>portable-simd</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>crates</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>std_float</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>src</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/portable-simd/crates/std_float/src/lib.rs.html\">lib.rs</a></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"></div></details><details class=\"dir-entry\"><summary>prelude</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/prelude/common.rs.html\">common.rs</a><a href=\"../../src/std/prelude/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>sync</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>mpmc</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sync/mpmc/array.rs.html\">array.rs</a><a href=\"../../src/std/sync/mpmc/context.rs.html\">context.rs</a><a href=\"../../src/std/sync/mpmc/counter.rs.html\">counter.rs</a><a href=\"../../src/std/sync/mpmc/error.rs.html\">error.rs</a><a href=\"../../src/std/sync/mpmc/list.rs.html\">list.rs</a><a href=\"../../src/std/sync/mpmc/mod.rs.html\">mod.rs</a><a href=\"../../src/std/sync/mpmc/select.rs.html\">select.rs</a><a href=\"../../src/std/sync/mpmc/utils.rs.html\">utils.rs</a><a href=\"../../src/std/sync/mpmc/waker.rs.html\">waker.rs</a><a href=\"../../src/std/sync/mpmc/zero.rs.html\">zero.rs</a></div></details><details class=\"dir-entry\"><summary>mpsc</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sync/mpsc/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/sync/barrier.rs.html\">barrier.rs</a><a href=\"../../src/std/sync/condvar.rs.html\">condvar.rs</a><a href=\"../../src/std/sync/lazy_lock.rs.html\">lazy_lock.rs</a><a href=\"../../src/std/sync/mod.rs.html\">mod.rs</a><a href=\"../../src/std/sync/mutex.rs.html\">mutex.rs</a><a href=\"../../src/std/sync/once.rs.html\">once.rs</a><a href=\"../../src/std/sync/once_lock.rs.html\">once_lock.rs</a><a href=\"../../src/std/sync/poison.rs.html\">poison.rs</a><a href=\"../../src/std/sync/reentrant_lock.rs.html\">reentrant_lock.rs</a><a href=\"../../src/std/sync/rwlock.rs.html\">rwlock.rs</a></div></details><details class=\"dir-entry\"><summary>sys</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>os_str</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sys/os_str/bytes.rs.html\">bytes.rs</a><a href=\"../../src/std/sys/os_str/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>pal</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>common</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sys/pal/common/alloc.rs.html\">alloc.rs</a><a href=\"../../src/std/sys/pal/common/mod.rs.html\">mod.rs</a><a href=\"../../src/std/sys/pal/common/small_c_string.rs.html\">small_c_string.rs</a></div></details><details class=\"dir-entry\"><summary>unix</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>process</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sys/pal/unix/process/mod.rs.html\">mod.rs</a><a href=\"../../src/std/sys/pal/unix/process/process_common.rs.html\">process_common.rs</a><a href=\"../../src/std/sys/pal/unix/process/process_unix.rs.html\">process_unix.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/sys/pal/unix/alloc.rs.html\">alloc.rs</a><a href=\"../../src/std/sys/pal/unix/args.rs.html\">args.rs</a><a href=\"../../src/std/sys/pal/unix/env.rs.html\">env.rs</a><a href=\"../../src/std/sys/pal/unix/fd.rs.html\">fd.rs</a><a href=\"../../src/std/sys/pal/unix/fs.rs.html\">fs.rs</a><a href=\"../../src/std/sys/pal/unix/futex.rs.html\">futex.rs</a><a href=\"../../src/std/sys/pal/unix/io.rs.html\">io.rs</a><a href=\"../../src/std/sys/pal/unix/kernel_copy.rs.html\">kernel_copy.rs</a><a href=\"../../src/std/sys/pal/unix/mod.rs.html\">mod.rs</a><a href=\"../../src/std/sys/pal/unix/net.rs.html\">net.rs</a><a href=\"../../src/std/sys/pal/unix/os.rs.html\">os.rs</a><a href=\"../../src/std/sys/pal/unix/pipe.rs.html\">pipe.rs</a><a href=\"../../src/std/sys/pal/unix/rand.rs.html\">rand.rs</a><a href=\"../../src/std/sys/pal/unix/stack_overflow.rs.html\">stack_overflow.rs</a><a href=\"../../src/std/sys/pal/unix/stdio.rs.html\">stdio.rs</a><a href=\"../../src/std/sys/pal/unix/thread.rs.html\">thread.rs</a><a href=\"../../src/std/sys/pal/unix/thread_local_dtor.rs.html\">thread_local_dtor.rs</a><a href=\"../../src/std/sys/pal/unix/thread_local_key.rs.html\">thread_local_key.rs</a><a href=\"../../src/std/sys/pal/unix/time.rs.html\">time.rs</a><a href=\"../../src/std/sys/pal/unix/weak.rs.html\">weak.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/sys/pal/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>path</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sys/path/mod.rs.html\">mod.rs</a><a href=\"../../src/std/sys/path/unix.rs.html\">unix.rs</a></div></details><details class=\"dir-entry\"><summary>personality</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>dwarf</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sys/personality/dwarf/eh.rs.html\">eh.rs</a><a href=\"../../src/std/sys/personality/dwarf/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/sys/personality/gcc.rs.html\">gcc.rs</a><a href=\"../../src/std/sys/personality/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>sync</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>condvar</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sys/sync/condvar/futex.rs.html\">futex.rs</a><a href=\"../../src/std/sys/sync/condvar/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>mutex</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sys/sync/mutex/futex.rs.html\">futex.rs</a><a href=\"../../src/std/sys/sync/mutex/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>once</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sys/sync/once/futex.rs.html\">futex.rs</a><a href=\"../../src/std/sys/sync/once/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>rwlock</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sys/sync/rwlock/futex.rs.html\">futex.rs</a><a href=\"../../src/std/sys/sync/rwlock/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>thread_parking</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sys/sync/thread_parking/futex.rs.html\">futex.rs</a><a href=\"../../src/std/sys/sync/thread_parking/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/sys/sync/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>thread_local</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>fast_local</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sys/thread_local/fast_local/eager.rs.html\">eager.rs</a><a href=\"../../src/std/sys/thread_local/fast_local/lazy.rs.html\">lazy.rs</a><a href=\"../../src/std/sys/thread_local/fast_local/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/sys/thread_local/mod.rs.html\">mod.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/sys/cmath.rs.html\">cmath.rs</a><a href=\"../../src/std/sys/mod.rs.html\">mod.rs</a></div></details><details class=\"dir-entry\"><summary>sys_common</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/sys_common/backtrace.rs.html\">backtrace.rs</a><a href=\"../../src/std/sys_common/fs.rs.html\">fs.rs</a><a href=\"../../src/std/sys_common/io.rs.html\">io.rs</a><a href=\"../../src/std/sys_common/lazy_box.rs.html\">lazy_box.rs</a><a href=\"../../src/std/sys_common/mod.rs.html\">mod.rs</a><a href=\"../../src/std/sys_common/net.rs.html\">net.rs</a><a href=\"../../src/std/sys_common/process.rs.html\">process.rs</a><a href=\"../../src/std/sys_common/thread_local_dtor.rs.html\">thread_local_dtor.rs</a><a href=\"../../src/std/sys_common/thread_local_key.rs.html\">thread_local_key.rs</a><a href=\"../../src/std/sys_common/wstr.rs.html\">wstr.rs</a><a href=\"../../src/std/sys_common/wtf8.rs.html\">wtf8.rs</a></div></details><details class=\"dir-entry\"><summary>thread</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/std/thread/local.rs.html\">local.rs</a><a href=\"../../src/std/thread/mod.rs.html\">mod.rs</a><a href=\"../../src/std/thread/scoped.rs.html\">scoped.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/std/alloc.rs.html\">alloc.rs</a><a href=\"../../src/std/ascii.rs.html\">ascii.rs</a><a href=\"../../src/std/backtrace.rs.html\">backtrace.rs</a><a href=\"../../src/std/env.rs.html\">env.rs</a><a href=\"../../src/std/error.rs.html\">error.rs</a><a href=\"../../src/std/f128.rs.html\">f128.rs</a><a href=\"../../src/std/f16.rs.html\">f16.rs</a><a href=\"../../src/std/f32.rs.html\">f32.rs</a><a href=\"../../src/std/f64.rs.html\">f64.rs</a><a href=\"../../src/std/fs.rs.html\" class=\"selected\">fs.rs</a><a href=\"../../src/std/keyword_docs.rs.html\">keyword_docs.rs</a><a href=\"../../src/std/lib.rs.html\">lib.rs</a><a href=\"../../src/std/macros.rs.html\">macros.rs</a><a href=\"../../src/std/num.rs.html\">num.rs</a><a href=\"../../src/std/panic.rs.html\">panic.rs</a><a href=\"../../src/std/panicking.rs.html\">panicking.rs</a><a href=\"../../src/std/pat.rs.html\">pat.rs</a><a href=\"../../src/std/path.rs.html\">path.rs</a><a href=\"../../src/std/process.rs.html\">process.rs</a><a href=\"../../src/std/rt.rs.html\">rt.rs</a><a href=\"../../src/std/time.rs.html\">time.rs</a></div></details><details class=\"dir-entry\"><summary>test</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>formatters</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/test/formatters/json.rs.html\">json.rs</a><a href=\"../../src/test/formatters/junit.rs.html\">junit.rs</a><a href=\"../../src/test/formatters/mod.rs.html\">mod.rs</a><a href=\"../../src/test/formatters/pretty.rs.html\">pretty.rs</a><a href=\"../../src/test/formatters/terse.rs.html\">terse.rs</a></div></details><details class=\"dir-entry\"><summary>helpers</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/test/helpers/concurrency.rs.html\">concurrency.rs</a><a href=\"../../src/test/helpers/metrics.rs.html\">metrics.rs</a><a href=\"../../src/test/helpers/mod.rs.html\">mod.rs</a><a href=\"../../src/test/helpers/shuffle.rs.html\">shuffle.rs</a></div></details><details class=\"dir-entry\"><summary>term</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>terminfo</summary><div class=\"folders\"><details class=\"dir-entry\"><summary>parser</summary><div class=\"folders\"></div><div class=\"files\"><a href=\"../../src/test/term/terminfo/parser/compiled.rs.html\">compiled.rs</a></div></details></div><div class=\"files\"><a href=\"../../src/test/term/terminfo/mod.rs.html\">mod.rs</a><a href=\"../../src/test/term/terminfo/parm.rs.html\">parm.rs</a><a href=\"../../src/test/term/terminfo/searcher.rs.html\">searcher.rs</a></div></details></div><div class=\"files\"></div></details></div><div class=\"files\"><a href=\"../../src/test/bench.rs.html\">bench.rs</a><a href=\"../../src/test/cli.rs.html\">cli.rs</a><a href=\"../../src/test/console.rs.html\">console.rs</a><a href=\"../../src/test/event.rs.html\">event.rs</a><a href=\"../../src/test/lib.rs.html\">lib.rs</a><a href=\"../../src/test/options.rs.html\">options.rs</a><a href=\"../../src/test/stats.rs.html\">stats.rs</a><a href=\"../../src/test/term.rs.html\">term.rs</a><a href=\"../../src/test/test_result.rs.html\">test_result.rs</a><a href=\"../../src/test/time.rs.html\">time.rs</a><a href=\"../../src/test/types.rs.html\">types.rs</a></div></details></div></nav><div class=\"sidebar-resizer\"></div><main><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"example-wrap\"><div data-nosnippet=\"\"><pre class=\"src-line-numbers\"><a href=\"#1\" id=\"1\" class=\"line-highlighted\">1</a>\n<a href=\"#2\" id=\"2\" class=\"line-highlighted\">2</a>\n<a href=\"#3\" id=\"3\" class=\"line-highlighted\">3</a>\n<a href=\"#4\" id=\"4\" class=\"line-highlighted\">4</a>\n<a href=\"#5\" id=\"5\" class=\"line-highlighted\">5</a>\n<a href=\"#6\" id=\"6\" class=\"line-highlighted\">6</a>\n<a href=\"#7\" id=\"7\" class=\"line-highlighted\">7</a>\n<a href=\"#8\" id=\"8\" class=\"line-highlighted\">8</a>\n<a href=\"#9\" id=\"9\" class=\"line-highlighted\">9</a>\n<a href=\"#10\" id=\"10\" class=\"line-highlighted\">10</a>\n<a href=\"#11\" id=\"11\" class=\"line-highlighted\">11</a>\n<a href=\"#12\" id=\"12\" class=\"line-highlighted\">12</a>\n<a href=\"#13\" id=\"13\" class=\"line-highlighted\">13</a>\n<a href=\"#14\" id=\"14\" class=\"line-highlighted\">14</a>\n<a href=\"#15\" id=\"15\" class=\"line-highlighted\">15</a>\n<a href=\"#16\" id=\"16\" class=\"line-highlighted\">16</a>\n<a href=\"#17\" id=\"17\" class=\"line-highlighted\">17</a>\n<a href=\"#18\" id=\"18\" class=\"line-highlighted\">18</a>\n<a href=\"#19\" id=\"19\" class=\"line-highlighted\">19</a>\n<a href=\"#20\" id=\"20\" class=\"line-highlighted\">20</a>\n<a href=\"#21\" id=\"21\" class=\"line-highlighted\">21</a>\n<a href=\"#22\" id=\"22\" class=\"line-highlighted\">22</a>\n<a href=\"#23\" id=\"23\" class=\"line-highlighted\">23</a>\n<a href=\"#24\" id=\"24\" class=\"line-highlighted\">24</a>\n<a href=\"#25\" id=\"25\" class=\"line-highlighted\">25</a>\n<a href=\"#26\" id=\"26\" class=\"line-highlighted\">26</a>\n<a href=\"#27\" id=\"27\" class=\"line-highlighted\">27</a>\n<a href=\"#28\" id=\"28\" class=\"line-highlighted\">28</a>\n<a href=\"#29\" id=\"29\" class=\"line-highlighted\">29</a>\n<a href=\"#30\" id=\"30\" class=\"line-highlighted\">30</a>\n<a href=\"#31\" id=\"31\" class=\"line-highlighted\">31</a>\n<a href=\"#32\" id=\"32\" class=\"line-highlighted\">32</a>\n<a href=\"#33\" id=\"33\" class=\"line-highlighted\">33</a>\n<a href=\"#34\" id=\"34\" class=\"line-highlighted\">34</a>\n<a href=\"#35\" id=\"35\" class=\"line-highlighted\">35</a>\n<a href=\"#36\" id=\"36\" class=\"line-highlighted\">36</a>\n<a href=\"#37\" id=\"37\" class=\"line-highlighted\">37</a>\n<a href=\"#38\" id=\"38\" class=\"line-highlighted\">38</a>\n<a href=\"#39\" id=\"39\" class=\"line-highlighted\">39</a>\n<a href=\"#40\" id=\"40\" class=\"line-highlighted\">40</a>\n<a href=\"#41\" id=\"41\" class=\"line-highlighted\">41</a>\n<a href=\"#42\" id=\"42\" class=\"line-highlighted\">42</a>\n<a href=\"#43\" id=\"43\" class=\"line-highlighted\">43</a>\n<a href=\"#44\" id=\"44\" class=\"line-highlighted\">44</a>\n<a href=\"#45\" id=\"45\" class=\"line-highlighted\">45</a>\n<a href=\"#46\" id=\"46\" class=\"line-highlighted\">46</a>\n<a href=\"#47\" id=\"47\" class=\"line-highlighted\">47</a>\n<a href=\"#48\" id=\"48\" class=\"line-highlighted\">48</a>\n<a href=\"#49\" id=\"49\" class=\"line-highlighted\">49</a>\n<a href=\"#50\" id=\"50\" class=\"line-highlighted\">50</a>\n<a href=\"#51\" id=\"51\" class=\"line-highlighted\">51</a>\n<a href=\"#52\" id=\"52\" class=\"line-highlighted\">52</a>\n<a href=\"#53\" id=\"53\" class=\"line-highlighted\">53</a>\n<a href=\"#54\" id=\"54\" class=\"line-highlighted\">54</a>\n<a href=\"#55\" id=\"55\" class=\"line-highlighted\">55</a>\n<a href=\"#56\" id=\"56\" class=\"line-highlighted\">56</a>\n<a href=\"#57\" id=\"57\" class=\"line-highlighted\">57</a>\n<a href=\"#58\" id=\"58\" class=\"line-highlighted\">58</a>\n<a href=\"#59\" id=\"59\" class=\"line-highlighted\">59</a>\n<a href=\"#60\" id=\"60\" class=\"line-highlighted\">60</a>\n<a href=\"#61\" id=\"61\" class=\"line-highlighted\">61</a>\n<a href=\"#62\" id=\"62\" class=\"line-highlighted\">62</a>\n<a href=\"#63\" id=\"63\" class=\"line-highlighted\">63</a>\n<a href=\"#64\" id=\"64\" class=\"line-highlighted\">64</a>\n<a href=\"#65\" id=\"65\" class=\"line-highlighted\">65</a>\n<a href=\"#66\" id=\"66\" class=\"line-highlighted\">66</a>\n<a href=\"#67\" id=\"67\" class=\"line-highlighted\">67</a>\n<a href=\"#68\" id=\"68\" class=\"line-highlighted\">68</a>\n<a href=\"#69\" id=\"69\" class=\"line-highlighted\">69</a>\n<a href=\"#70\" id=\"70\" class=\"line-highlighted\">70</a>\n<a href=\"#71\" id=\"71\" class=\"line-highlighted\">71</a>\n<a href=\"#72\" id=\"72\" class=\"line-highlighted\">72</a>\n<a href=\"#73\" id=\"73\" class=\"line-highlighted\">73</a>\n<a href=\"#74\" id=\"74\" class=\"line-highlighted\">74</a>\n<a href=\"#75\" id=\"75\" class=\"line-highlighted\">75</a>\n<a href=\"#76\" id=\"76\" class=\"line-highlighted\">76</a>\n<a href=\"#77\" id=\"77\" class=\"line-highlighted\">77</a>\n<a href=\"#78\" id=\"78\" class=\"line-highlighted\">78</a>\n<a href=\"#79\" id=\"79\" class=\"line-highlighted\">79</a>\n<a href=\"#80\" id=\"80\" class=\"line-highlighted\">80</a>\n<a href=\"#81\" id=\"81\" class=\"line-highlighted\">81</a>\n<a href=\"#82\" id=\"82\" class=\"line-highlighted\">82</a>\n<a href=\"#83\" id=\"83\" class=\"line-highlighted\">83</a>\n<a href=\"#84\" id=\"84\" class=\"line-highlighted\">84</a>\n<a href=\"#85\" id=\"85\" class=\"line-highlighted\">85</a>\n<a href=\"#86\" id=\"86\" class=\"line-highlighted\">86</a>\n<a href=\"#87\" id=\"87\" class=\"line-highlighted\">87</a>\n<a href=\"#88\" id=\"88\" class=\"line-highlighted\">88</a>\n<a href=\"#89\" id=\"89\" class=\"line-highlighted\">89</a>\n<a href=\"#90\" id=\"90\" class=\"line-highlighted\">90</a>\n<a href=\"#91\" id=\"91\" class=\"line-highlighted\">91</a>\n<a href=\"#92\" id=\"92\" class=\"line-highlighted\">92</a>\n<a href=\"#93\" id=\"93\" class=\"line-highlighted\">93</a>\n<a href=\"#94\" id=\"94\" class=\"line-highlighted\">94</a>\n<a href=\"#95\" id=\"95\" class=\"line-highlighted\">95</a>\n<a href=\"#96\" id=\"96\" class=\"line-highlighted\">96</a>\n<a href=\"#97\" id=\"97\" class=\"line-highlighted\">97</a>\n<a href=\"#98\" id=\"98\" class=\"line-highlighted\">98</a>\n<a href=\"#99\" id=\"99\" class=\"line-highlighted\">99</a>\n<a href=\"#100\" id=\"100\" class=\"line-highlighted\">100</a>\n<a href=\"#101\" id=\"101\" class=\"line-highlighted\">101</a>\n<a href=\"#102\" id=\"102\" class=\"line-highlighted\">102</a>\n<a href=\"#103\" id=\"103\" class=\"line-highlighted\">103</a>\n<a href=\"#104\" id=\"104\" class=\"line-highlighted\">104</a>\n<a href=\"#105\" id=\"105\" class=\"line-highlighted\">105</a>\n<a href=\"#106\" id=\"106\" class=\"line-highlighted\">106</a>\n<a href=\"#107\" id=\"107\" class=\"line-highlighted\">107</a>\n<a href=\"#108\" id=\"108\" class=\"line-highlighted\">108</a>\n<a href=\"#109\" id=\"109\" class=\"line-highlighted\">109</a>\n<a href=\"#110\" id=\"110\" class=\"line-highlighted\">110</a>\n<a href=\"#111\" id=\"111\" class=\"line-highlighted\">111</a>\n<a href=\"#112\" id=\"112\" class=\"line-highlighted\">112</a>\n<a href=\"#113\" id=\"113\" class=\"line-highlighted\">113</a>\n<a href=\"#114\" id=\"114\" class=\"line-highlighted\">114</a>\n<a href=\"#115\" id=\"115\" class=\"line-highlighted\">115</a>\n<a href=\"#116\" id=\"116\" class=\"line-highlighted\">116</a>\n<a href=\"#117\" id=\"117\" class=\"line-highlighted\">117</a>\n<a href=\"#118\" id=\"118\" class=\"line-highlighted\">118</a>\n<a href=\"#119\" id=\"119\" class=\"line-highlighted\">119</a>\n<a href=\"#120\" id=\"120\" class=\"line-highlighted\">120</a>\n<a href=\"#121\" id=\"121\" class=\"line-highlighted\">121</a>\n<a href=\"#122\" id=\"122\" class=\"line-highlighted\">122</a>\n<a href=\"#123\" id=\"123\" class=\"line-highlighted\">123</a>\n<a href=\"#124\" id=\"124\" class=\"line-highlighted\">124</a>\n<a href=\"#125\" id=\"125\" class=\"line-highlighted\">125</a>\n<a href=\"#126\" id=\"126\" class=\"line-highlighted\">126</a>\n<a href=\"#127\" id=\"127\" class=\"line-highlighted\">127</a>\n<a href=\"#128\" id=\"128\" class=\"line-highlighted\">128</a>\n<a href=\"#129\" id=\"129\" class=\"line-highlighted\">129</a>\n<a href=\"#130\" id=\"130\" class=\"line-highlighted\">130</a>\n<a href=\"#131\" id=\"131\" class=\"line-highlighted\">131</a>\n<a href=\"#132\" id=\"132\" class=\"line-highlighted\">132</a>\n<a href=\"#133\" id=\"133\" class=\"line-highlighted\">133</a>\n<a href=\"#134\" id=\"134\" class=\"line-highlighted\">134</a>\n<a href=\"#135\" id=\"135\" class=\"line-highlighted\">135</a>\n<a href=\"#136\" id=\"136\" class=\"line-highlighted\">136</a>\n<a href=\"#137\" id=\"137\" class=\"line-highlighted\">137</a>\n<a href=\"#138\" id=\"138\" class=\"line-highlighted\">138</a>\n<a href=\"#139\" id=\"139\" class=\"line-highlighted\">139</a>\n<a href=\"#140\" id=\"140\" class=\"line-highlighted\">140</a>\n<a href=\"#141\" id=\"141\" class=\"line-highlighted\">141</a>\n<a href=\"#142\" id=\"142\" class=\"line-highlighted\">142</a>\n<a href=\"#143\" id=\"143\" class=\"line-highlighted\">143</a>\n<a href=\"#144\" id=\"144\" class=\"line-highlighted\">144</a>\n<a href=\"#145\" id=\"145\" class=\"line-highlighted\">145</a>\n<a href=\"#146\" id=\"146\" class=\"line-highlighted\">146</a>\n<a href=\"#147\" id=\"147\" class=\"line-highlighted\">147</a>\n<a href=\"#148\" id=\"148\" class=\"line-highlighted\">148</a>\n<a href=\"#149\" id=\"149\" class=\"line-highlighted\">149</a>\n<a href=\"#150\" id=\"150\" class=\"line-highlighted\">150</a>\n<a href=\"#151\" id=\"151\" class=\"line-highlighted\">151</a>\n<a href=\"#152\" id=\"152\" class=\"line-highlighted\">152</a>\n<a href=\"#153\" id=\"153\" class=\"line-highlighted\">153</a>\n<a href=\"#154\" id=\"154\" class=\"line-highlighted\">154</a>\n<a href=\"#155\" id=\"155\" class=\"line-highlighted\">155</a>\n<a href=\"#156\" id=\"156\" class=\"line-highlighted\">156</a>\n<a href=\"#157\" id=\"157\" class=\"line-highlighted\">157</a>\n<a href=\"#158\" id=\"158\" class=\"line-highlighted\">158</a>\n<a href=\"#159\" id=\"159\" class=\"line-highlighted\">159</a>\n<a href=\"#160\" id=\"160\" class=\"line-highlighted\">160</a>\n<a href=\"#161\" id=\"161\" class=\"line-highlighted\">161</a>\n<a href=\"#162\" id=\"162\" class=\"line-highlighted\">162</a>\n<a href=\"#163\" id=\"163\" class=\"line-highlighted\">163</a>\n<a href=\"#164\" id=\"164\" class=\"line-highlighted\">164</a>\n<a href=\"#165\" id=\"165\" class=\"line-highlighted\">165</a>\n<a href=\"#166\" id=\"166\" class=\"line-highlighted\">166</a>\n<a href=\"#167\" id=\"167\" class=\"line-highlighted\">167</a>\n<a href=\"#168\" id=\"168\" class=\"line-highlighted\">168</a>\n<a href=\"#169\" id=\"169\" class=\"line-highlighted\">169</a>\n<a href=\"#170\" id=\"170\" class=\"line-highlighted\">170</a>\n<a href=\"#171\" id=\"171\" class=\"line-highlighted\">171</a>\n<a href=\"#172\" id=\"172\" class=\"line-highlighted\">172</a>\n<a href=\"#173\" id=\"173\" class=\"line-highlighted\">173</a>\n<a href=\"#174\" id=\"174\" class=\"line-highlighted\">174</a>\n<a href=\"#175\" id=\"175\" class=\"line-highlighted\">175</a>\n<a href=\"#176\" id=\"176\" class=\"line-highlighted\">176</a>\n<a href=\"#177\" id=\"177\" class=\"line-highlighted\">177</a>\n<a href=\"#178\" id=\"178\" class=\"line-highlighted\">178</a>\n<a href=\"#179\" id=\"179\" class=\"line-highlighted\">179</a>\n<a href=\"#180\" id=\"180\" class=\"line-highlighted\">180</a>\n<a href=\"#181\" id=\"181\" class=\"line-highlighted\">181</a>\n<a href=\"#182\" id=\"182\" class=\"line-highlighted\">182</a>\n<a href=\"#183\" id=\"183\" class=\"line-highlighted\">183</a>\n<a href=\"#184\" id=\"184\" class=\"line-highlighted\">184</a>\n<a href=\"#185\" id=\"185\" class=\"line-highlighted\">185</a>\n<a href=\"#186\" id=\"186\" class=\"line-highlighted\">186</a>\n<a href=\"#187\" id=\"187\" class=\"line-highlighted\">187</a>\n<a href=\"#188\" id=\"188\" class=\"line-highlighted\">188</a>\n<a href=\"#189\" id=\"189\" class=\"line-highlighted\">189</a>\n<a href=\"#190\" id=\"190\" class=\"line-highlighted\">190</a>\n<a href=\"#191\" id=\"191\" class=\"line-highlighted\">191</a>\n<a href=\"#192\" id=\"192\" class=\"line-highlighted\">192</a>\n<a href=\"#193\" id=\"193\" class=\"line-highlighted\">193</a>\n<a href=\"#194\" id=\"194\" class=\"line-highlighted\">194</a>\n<a href=\"#195\" id=\"195\" class=\"line-highlighted\">195</a>\n<a href=\"#196\" id=\"196\" class=\"line-highlighted\">196</a>\n<a href=\"#197\" id=\"197\" class=\"line-highlighted\">197</a>\n<a href=\"#198\" id=\"198\" class=\"line-highlighted\">198</a>\n<a href=\"#199\" id=\"199\" class=\"line-highlighted\">199</a>\n<a href=\"#200\" id=\"200\" class=\"line-highlighted\">200</a>\n<a href=\"#201\" id=\"201\" class=\"line-highlighted\">201</a>\n<a href=\"#202\" id=\"202\" class=\"line-highlighted\">202</a>\n<a href=\"#203\" id=\"203\" class=\"line-highlighted\">203</a>\n<a href=\"#204\" id=\"204\" class=\"line-highlighted\">204</a>\n<a href=\"#205\" id=\"205\" class=\"line-highlighted\">205</a>\n<a href=\"#206\" id=\"206\" class=\"line-highlighted\">206</a>\n<a href=\"#207\" id=\"207\" class=\"line-highlighted\">207</a>\n<a href=\"#208\" id=\"208\" class=\"line-highlighted\">208</a>\n<a href=\"#209\" id=\"209\" class=\"line-highlighted\">209</a>\n<a href=\"#210\" id=\"210\" class=\"line-highlighted\">210</a>\n<a href=\"#211\" id=\"211\" class=\"line-highlighted\">211</a>\n<a href=\"#212\" id=\"212\" class=\"line-highlighted\">212</a>\n<a href=\"#213\" id=\"213\" class=\"line-highlighted\">213</a>\n<a href=\"#214\" id=\"214\" class=\"line-highlighted\">214</a>\n<a href=\"#215\" id=\"215\" class=\"line-highlighted\">215</a>\n<a href=\"#216\" id=\"216\" class=\"line-highlighted\">216</a>\n<a href=\"#217\" id=\"217\" class=\"line-highlighted\">217</a>\n<a href=\"#218\" id=\"218\" class=\"line-highlighted\">218</a>\n<a href=\"#219\" id=\"219\" class=\"line-highlighted\">219</a>\n<a href=\"#220\" id=\"220\" class=\"line-highlighted\">220</a>\n<a href=\"#221\" id=\"221\" class=\"line-highlighted\">221</a>\n<a href=\"#222\" id=\"222\" class=\"line-highlighted\">222</a>\n<a href=\"#223\" id=\"223\" class=\"line-highlighted\">223</a>\n<a href=\"#224\" id=\"224\" class=\"line-highlighted\">224</a>\n<a href=\"#225\" id=\"225\" class=\"line-highlighted\">225</a>\n<a href=\"#226\" id=\"226\" class=\"line-highlighted\">226</a>\n<a href=\"#227\" id=\"227\" class=\"line-highlighted\">227</a>\n<a href=\"#228\" id=\"228\" class=\"line-highlighted\">228</a>\n<a href=\"#229\" id=\"229\" class=\"line-highlighted\">229</a>\n<a href=\"#230\" id=\"230\" class=\"line-highlighted\">230</a>\n<a href=\"#231\" id=\"231\" class=\"line-highlighted\">231</a>\n<a href=\"#232\" id=\"232\" class=\"line-highlighted\">232</a>\n<a href=\"#233\" id=\"233\" class=\"line-highlighted\">233</a>\n<a href=\"#234\" id=\"234\" class=\"line-highlighted\">234</a>\n<a href=\"#235\" id=\"235\" class=\"line-highlighted\">235</a>\n<a href=\"#236\" id=\"236\" class=\"line-highlighted\">236</a>\n<a href=\"#237\" id=\"237\" class=\"line-highlighted\">237</a>\n<a href=\"#238\" id=\"238\" class=\"line-highlighted\">238</a>\n<a href=\"#239\" id=\"239\" class=\"line-highlighted\">239</a>\n<a href=\"#240\" id=\"240\" class=\"line-highlighted\">240</a>\n<a href=\"#241\" id=\"241\" class=\"line-highlighted\">241</a>\n<a href=\"#242\" id=\"242\" class=\"line-highlighted\">242</a>\n<a href=\"#243\" id=\"243\" class=\"line-highlighted\">243</a>\n<a href=\"#244\" id=\"244\" class=\"line-highlighted\">244</a>\n<a href=\"#245\" id=\"245\" class=\"line-highlighted\">245</a>\n<a href=\"#246\" id=\"246\" class=\"line-highlighted\">246</a>\n<a href=\"#247\" id=\"247\" class=\"line-highlighted\">247</a>\n<a href=\"#248\" id=\"248\" class=\"line-highlighted\">248</a>\n<a href=\"#249\" id=\"249\" class=\"line-highlighted\">249</a>\n<a href=\"#250\" id=\"250\" class=\"line-highlighted\">250</a>\n<a href=\"#251\" id=\"251\" class=\"line-highlighted\">251</a>\n<a href=\"#252\" id=\"252\" class=\"line-highlighted\">252</a>\n<a href=\"#253\" id=\"253\" class=\"line-highlighted\">253</a>\n<a href=\"#254\" id=\"254\" class=\"line-highlighted\">254</a>\n<a href=\"#255\" id=\"255\" class=\"line-highlighted\">255</a>\n<a href=\"#256\" id=\"256\" class=\"line-highlighted\">256</a>\n<a href=\"#257\" id=\"257\" class=\"line-highlighted\">257</a>\n<a href=\"#258\" id=\"258\" class=\"line-highlighted\">258</a>\n<a href=\"#259\" id=\"259\" class=\"line-highlighted\">259</a>\n<a href=\"#260\" id=\"260\" class=\"line-highlighted\">260</a>\n<a href=\"#261\" id=\"261\" class=\"line-highlighted\">261</a>\n<a href=\"#262\" id=\"262\" class=\"line-highlighted\">262</a>\n<a href=\"#263\" id=\"263\" class=\"line-highlighted\">263</a>\n<a href=\"#264\" id=\"264\" class=\"line-highlighted\">264</a>\n<a href=\"#265\" id=\"265\" class=\"line-highlighted\">265</a>\n<a href=\"#266\" id=\"266\" class=\"line-highlighted\">266</a>\n<a href=\"#267\" id=\"267\" class=\"line-highlighted\">267</a>\n<a href=\"#268\" id=\"268\" class=\"line-highlighted\">268</a>\n<a href=\"#269\" id=\"269\" class=\"line-highlighted\">269</a>\n<a href=\"#270\" id=\"270\" class=\"line-highlighted\">270</a>\n<a href=\"#271\" id=\"271\" class=\"line-highlighted\">271</a>\n<a href=\"#272\" id=\"272\" class=\"line-highlighted\">272</a>\n<a href=\"#273\" id=\"273\" class=\"line-highlighted\">273</a>\n<a href=\"#274\" id=\"274\" class=\"line-highlighted\">274</a>\n<a href=\"#275\" id=\"275\" class=\"line-highlighted\">275</a>\n<a href=\"#276\" id=\"276\" class=\"line-highlighted\">276</a>\n<a href=\"#277\" id=\"277\" class=\"line-highlighted\">277</a>\n<a href=\"#278\" id=\"278\" class=\"line-highlighted\">278</a>\n<a href=\"#279\" id=\"279\" class=\"line-highlighted\">279</a>\n<a href=\"#280\" id=\"280\" class=\"line-highlighted\">280</a>\n<a href=\"#281\" id=\"281\" class=\"line-highlighted\">281</a>\n<a href=\"#282\" id=\"282\" class=\"line-highlighted\">282</a>\n<a href=\"#283\" id=\"283\" class=\"line-highlighted\">283</a>\n<a href=\"#284\" id=\"284\" class=\"line-highlighted\">284</a>\n<a href=\"#285\" id=\"285\" class=\"line-highlighted\">285</a>\n<a href=\"#286\" id=\"286\" class=\"line-highlighted\">286</a>\n<a href=\"#287\" id=\"287\" class=\"line-highlighted\">287</a>\n<a href=\"#288\" id=\"288\" class=\"line-highlighted\">288</a>\n<a href=\"#289\" id=\"289\" class=\"line-highlighted\">289</a>\n<a href=\"#290\" id=\"290\" class=\"line-highlighted\">290</a>\n<a href=\"#291\" id=\"291\" class=\"line-highlighted\">291</a>\n<a href=\"#292\" id=\"292\" class=\"line-highlighted\">292</a>\n<a href=\"#293\" id=\"293\" class=\"line-highlighted\">293</a>\n<a href=\"#294\" id=\"294\" class=\"line-highlighted\">294</a>\n<a href=\"#295\" id=\"295\" class=\"line-highlighted\">295</a>\n<a href=\"#296\" id=\"296\" class=\"line-highlighted\">296</a>\n<a href=\"#297\" id=\"297\" class=\"line-highlighted\">297</a>\n<a href=\"#298\" id=\"298\" class=\"line-highlighted\">298</a>\n<a href=\"#299\" id=\"299\" class=\"line-highlighted\">299</a>\n<a href=\"#300\" id=\"300\" class=\"line-highlighted\">300</a>\n<a href=\"#301\" id=\"301\" class=\"line-highlighted\">301</a>\n<a href=\"#302\" id=\"302\" class=\"line-highlighted\">302</a>\n<a href=\"#303\" id=\"303\" class=\"line-highlighted\">303</a>\n<a href=\"#304\" id=\"304\" class=\"line-highlighted\">304</a>\n<a href=\"#305\" id=\"305\" class=\"line-highlighted\">305</a>\n<a href=\"#306\" id=\"306\" class=\"line-highlighted\">306</a>\n<a href=\"#307\" id=\"307\" class=\"line-highlighted\">307</a>\n<a href=\"#308\" id=\"308\" class=\"line-highlighted\">308</a>\n<a href=\"#309\" id=\"309\" class=\"line-highlighted\">309</a>\n<a href=\"#310\" id=\"310\" class=\"line-highlighted\">310</a>\n<a href=\"#311\" id=\"311\" class=\"line-highlighted\">311</a>\n<a href=\"#312\" id=\"312\" class=\"line-highlighted\">312</a>\n<a href=\"#313\" id=\"313\" class=\"line-highlighted\">313</a>\n<a href=\"#314\" id=\"314\" class=\"line-highlighted\">314</a>\n<a href=\"#315\" id=\"315\" class=\"line-highlighted\">315</a>\n<a href=\"#316\" id=\"316\" class=\"line-highlighted\">316</a>\n<a href=\"#317\" id=\"317\" class=\"line-highlighted\">317</a>\n<a href=\"#318\" id=\"318\" class=\"line-highlighted\">318</a>\n<a href=\"#319\" id=\"319\" class=\"line-highlighted\">319</a>\n<a href=\"#320\" id=\"320\" class=\"line-highlighted\">320</a>\n<a href=\"#321\" id=\"321\" class=\"line-highlighted\">321</a>\n<a href=\"#322\" id=\"322\" class=\"line-highlighted\">322</a>\n<a href=\"#323\" id=\"323\" class=\"line-highlighted\">323</a>\n<a href=\"#324\" id=\"324\" class=\"line-highlighted\">324</a>\n<a href=\"#325\" id=\"325\" class=\"line-highlighted\">325</a>\n<a href=\"#326\" id=\"326\" class=\"line-highlighted\">326</a>\n<a href=\"#327\" id=\"327\" class=\"line-highlighted\">327</a>\n<a href=\"#328\" id=\"328\" class=\"line-highlighted\">328</a>\n<a href=\"#329\" id=\"329\" class=\"line-highlighted\">329</a>\n<a href=\"#330\" id=\"330\" class=\"line-highlighted\">330</a>\n<a href=\"#331\" id=\"331\" class=\"line-highlighted\">331</a>\n<a href=\"#332\" id=\"332\" class=\"line-highlighted\">332</a>\n<a href=\"#333\" id=\"333\" class=\"line-highlighted\">333</a>\n<a href=\"#334\" id=\"334\" class=\"line-highlighted\">334</a>\n<a href=\"#335\" id=\"335\" class=\"line-highlighted\">335</a>\n<a href=\"#336\" id=\"336\" class=\"line-highlighted\">336</a>\n<a href=\"#337\" id=\"337\" class=\"line-highlighted\">337</a>\n<a href=\"#338\" id=\"338\" class=\"line-highlighted\">338</a>\n<a href=\"#339\" id=\"339\" class=\"line-highlighted\">339</a>\n<a href=\"#340\" id=\"340\" class=\"line-highlighted\">340</a>\n<a href=\"#341\" id=\"341\" class=\"line-highlighted\">341</a>\n<a href=\"#342\" id=\"342\" class=\"line-highlighted\">342</a>\n<a href=\"#343\" id=\"343\" class=\"line-highlighted\">343</a>\n<a href=\"#344\" id=\"344\" class=\"line-highlighted\">344</a>\n<a href=\"#345\" id=\"345\" class=\"line-highlighted\">345</a>\n<a href=\"#346\" id=\"346\" class=\"line-highlighted\">346</a>\n<a href=\"#347\" id=\"347\" class=\"line-highlighted\">347</a>\n<a href=\"#348\" id=\"348\" class=\"line-highlighted\">348</a>\n<a href=\"#349\" id=\"349\" class=\"line-highlighted\">349</a>\n<a href=\"#350\" id=\"350\" class=\"line-highlighted\">350</a>\n<a href=\"#351\" id=\"351\" class=\"line-highlighted\">351</a>\n<a href=\"#352\" id=\"352\" class=\"line-highlighted\">352</a>\n<a href=\"#353\" id=\"353\" class=\"line-highlighted\">353</a>\n<a href=\"#354\" id=\"354\" class=\"line-highlighted\">354</a>\n<a href=\"#355\" id=\"355\" class=\"line-highlighted\">355</a>\n<a href=\"#356\" id=\"356\" class=\"line-highlighted\">356</a>\n<a href=\"#357\" id=\"357\" class=\"line-highlighted\">357</a>\n<a href=\"#358\" id=\"358\" class=\"line-highlighted\">358</a>\n<a href=\"#359\" id=\"359\" class=\"line-highlighted\">359</a>\n<a href=\"#360\" id=\"360\" class=\"line-highlighted\">360</a>\n<a href=\"#361\" id=\"361\" class=\"line-highlighted\">361</a>\n<a href=\"#362\" id=\"362\" class=\"line-highlighted\">362</a>\n<a href=\"#363\" id=\"363\" class=\"line-highlighted\">363</a>\n<a href=\"#364\" id=\"364\" class=\"line-highlighted\">364</a>\n<a href=\"#365\" id=\"365\" class=\"line-highlighted\">365</a>\n<a href=\"#366\" id=\"366\" class=\"line-highlighted\">366</a>\n<a href=\"#367\" id=\"367\" class=\"line-highlighted\">367</a>\n<a href=\"#368\" id=\"368\" class=\"line-highlighted\">368</a>\n<a href=\"#369\" id=\"369\" class=\"line-highlighted\">369</a>\n<a href=\"#370\" id=\"370\" class=\"line-highlighted\">370</a>\n<a href=\"#371\" id=\"371\" class=\"line-highlighted\">371</a>\n<a href=\"#372\" id=\"372\" class=\"line-highlighted\">372</a>\n<a href=\"#373\" id=\"373\" class=\"line-highlighted\">373</a>\n<a href=\"#374\" id=\"374\" class=\"line-highlighted\">374</a>\n<a href=\"#375\" id=\"375\" class=\"line-highlighted\">375</a>\n<a href=\"#376\" id=\"376\" class=\"line-highlighted\">376</a>\n<a href=\"#377\" id=\"377\" class=\"line-highlighted\">377</a>\n<a href=\"#378\" id=\"378\" class=\"line-highlighted\">378</a>\n<a href=\"#379\" id=\"379\" class=\"line-highlighted\">379</a>\n<a href=\"#380\" id=\"380\" class=\"line-highlighted\">380</a>\n<a href=\"#381\" id=\"381\" class=\"line-highlighted\">381</a>\n<a href=\"#382\" id=\"382\" class=\"line-highlighted\">382</a>\n<a href=\"#383\" id=\"383\" class=\"line-highlighted\">383</a>\n<a href=\"#384\" id=\"384\" class=\"line-highlighted\">384</a>\n<a href=\"#385\" id=\"385\" class=\"line-highlighted\">385</a>\n<a href=\"#386\" id=\"386\" class=\"line-highlighted\">386</a>\n<a href=\"#387\" id=\"387\" class=\"line-highlighted\">387</a>\n<a href=\"#388\" id=\"388\" class=\"line-highlighted\">388</a>\n<a href=\"#389\" id=\"389\" class=\"line-highlighted\">389</a>\n<a href=\"#390\" id=\"390\" class=\"line-highlighted\">390</a>\n<a href=\"#391\" id=\"391\" class=\"line-highlighted\">391</a>\n<a href=\"#392\" id=\"392\" class=\"line-highlighted\">392</a>\n<a href=\"#393\" id=\"393\" class=\"line-highlighted\">393</a>\n<a href=\"#394\" id=\"394\" class=\"line-highlighted\">394</a>\n<a href=\"#395\" id=\"395\" class=\"line-highlighted\">395</a>\n<a href=\"#396\" id=\"396\" class=\"line-highlighted\">396</a>\n<a href=\"#397\" id=\"397\" class=\"line-highlighted\">397</a>\n<a href=\"#398\" id=\"398\" class=\"line-highlighted\">398</a>\n<a href=\"#399\" id=\"399\" class=\"line-highlighted\">399</a>\n<a href=\"#400\" id=\"400\" class=\"line-highlighted\">400</a>\n<a href=\"#401\" id=\"401\" class=\"line-highlighted\">401</a>\n<a href=\"#402\" id=\"402\" class=\"line-highlighted\">402</a>\n<a href=\"#403\" id=\"403\" class=\"line-highlighted\">403</a>\n<a href=\"#404\" id=\"404\" class=\"line-highlighted\">404</a>\n<a href=\"#405\" id=\"405\" class=\"line-highlighted\">405</a>\n<a href=\"#406\" id=\"406\" class=\"line-highlighted\">406</a>\n<a href=\"#407\" id=\"407\" class=\"line-highlighted\">407</a>\n<a href=\"#408\" id=\"408\" class=\"line-highlighted\">408</a>\n<a href=\"#409\" id=\"409\" class=\"line-highlighted\">409</a>\n<a href=\"#410\" id=\"410\" class=\"line-highlighted\">410</a>\n<a href=\"#411\" id=\"411\" class=\"line-highlighted\">411</a>\n<a href=\"#412\" id=\"412\" class=\"line-highlighted\">412</a>\n<a href=\"#413\" id=\"413\" class=\"line-highlighted\">413</a>\n<a href=\"#414\" id=\"414\" class=\"line-highlighted\">414</a>\n<a href=\"#415\" id=\"415\" class=\"line-highlighted\">415</a>\n<a href=\"#416\" id=\"416\" class=\"line-highlighted\">416</a>\n<a href=\"#417\" id=\"417\" class=\"line-highlighted\">417</a>\n<a href=\"#418\" id=\"418\" class=\"line-highlighted\">418</a>\n<a href=\"#419\" id=\"419\" class=\"line-highlighted\">419</a>\n<a href=\"#420\" id=\"420\" class=\"line-highlighted\">420</a>\n<a href=\"#421\" id=\"421\" class=\"line-highlighted\">421</a>\n<a href=\"#422\" id=\"422\" class=\"line-highlighted\">422</a>\n<a href=\"#423\" id=\"423\" class=\"line-highlighted\">423</a>\n<a href=\"#424\" id=\"424\" class=\"line-highlighted\">424</a>\n<a href=\"#425\" id=\"425\" class=\"line-highlighted\">425</a>\n<a href=\"#426\" id=\"426\" class=\"line-highlighted\">426</a>\n<a href=\"#427\" id=\"427\" class=\"line-highlighted\">427</a>\n<a href=\"#428\" id=\"428\" class=\"line-highlighted\">428</a>\n<a href=\"#429\" id=\"429\" class=\"line-highlighted\">429</a>\n<a href=\"#430\" id=\"430\" class=\"line-highlighted\">430</a>\n<a href=\"#431\" id=\"431\" class=\"line-highlighted\">431</a>\n<a href=\"#432\" id=\"432\" class=\"line-highlighted\">432</a>\n<a href=\"#433\" id=\"433\" class=\"line-highlighted\">433</a>\n<a href=\"#434\" id=\"434\" class=\"line-highlighted\">434</a>\n<a href=\"#435\" id=\"435\" class=\"line-highlighted\">435</a>\n<a href=\"#436\" id=\"436\" class=\"line-highlighted\">436</a>\n<a href=\"#437\" id=\"437\" class=\"line-highlighted\">437</a>\n<a href=\"#438\" id=\"438\" class=\"line-highlighted\">438</a>\n<a href=\"#439\" id=\"439\" class=\"line-highlighted\">439</a>\n<a href=\"#440\" id=\"440\" class=\"line-highlighted\">440</a>\n<a href=\"#441\" id=\"441\" class=\"line-highlighted\">441</a>\n<a href=\"#442\" id=\"442\" class=\"line-highlighted\">442</a>\n<a href=\"#443\" id=\"443\" class=\"line-highlighted\">443</a>\n<a href=\"#444\" id=\"444\" class=\"line-highlighted\">444</a>\n<a href=\"#445\" id=\"445\" class=\"line-highlighted\">445</a>\n<a href=\"#446\" id=\"446\" class=\"line-highlighted\">446</a>\n<a href=\"#447\" id=\"447\" class=\"line-highlighted\">447</a>\n<a href=\"#448\" id=\"448\" class=\"line-highlighted\">448</a>\n<a href=\"#449\" id=\"449\" class=\"line-highlighted\">449</a>\n<a href=\"#450\" id=\"450\" class=\"line-highlighted\">450</a>\n<a href=\"#451\" id=\"451\" class=\"line-highlighted\">451</a>\n<a href=\"#452\" id=\"452\" class=\"line-highlighted\">452</a>\n<a href=\"#453\" id=\"453\" class=\"line-highlighted\">453</a>\n<a href=\"#454\" id=\"454\" class=\"line-highlighted\">454</a>\n<a href=\"#455\" id=\"455\" class=\"line-highlighted\">455</a>\n<a href=\"#456\" id=\"456\" class=\"line-highlighted\">456</a>\n<a href=\"#457\" id=\"457\" class=\"line-highlighted\">457</a>\n<a href=\"#458\" id=\"458\" class=\"line-highlighted\">458</a>\n<a href=\"#459\" id=\"459\" class=\"line-highlighted\">459</a>\n<a href=\"#460\" id=\"460\" class=\"line-highlighted\">460</a>\n<a href=\"#461\" id=\"461\" class=\"line-highlighted\">461</a>\n<a href=\"#462\" id=\"462\" class=\"line-highlighted\">462</a>\n<a href=\"#463\" id=\"463\" class=\"line-highlighted\">463</a>\n<a href=\"#464\" id=\"464\" class=\"line-highlighted\">464</a>\n<a href=\"#465\" id=\"465\" class=\"line-highlighted\">465</a>\n<a href=\"#466\" id=\"466\" class=\"line-highlighted\">466</a>\n<a href=\"#467\" id=\"467\" class=\"line-highlighted\">467</a>\n<a href=\"#468\" id=\"468\" class=\"line-highlighted\">468</a>\n<a href=\"#469\" id=\"469\" class=\"line-highlighted\">469</a>\n<a href=\"#470\" id=\"470\" class=\"line-highlighted\">470</a>\n<a href=\"#471\" id=\"471\" class=\"line-highlighted\">471</a>\n<a href=\"#472\" id=\"472\" class=\"line-highlighted\">472</a>\n<a href=\"#473\" id=\"473\" class=\"line-highlighted\">473</a>\n<a href=\"#474\" id=\"474\" class=\"line-highlighted\">474</a>\n<a href=\"#475\" id=\"475\" class=\"line-highlighted\">475</a>\n<a href=\"#476\" id=\"476\" class=\"line-highlighted\">476</a>\n<a href=\"#477\" id=\"477\" class=\"line-highlighted\">477</a>\n<a href=\"#478\" id=\"478\" class=\"line-highlighted\">478</a>\n<a href=\"#479\" id=\"479\" class=\"line-highlighted\">479</a>\n<a href=\"#480\" id=\"480\" class=\"line-highlighted\">480</a>\n<a href=\"#481\" id=\"481\" class=\"line-highlighted\">481</a>\n<a href=\"#482\" id=\"482\" class=\"line-highlighted\">482</a>\n<a href=\"#483\" id=\"483\" class=\"line-highlighted\">483</a>\n<a href=\"#484\" id=\"484\" class=\"line-highlighted\">484</a>\n<a href=\"#485\" id=\"485\" class=\"line-highlighted\">485</a>\n<a href=\"#486\" id=\"486\" class=\"line-highlighted\">486</a>\n<a href=\"#487\" id=\"487\" class=\"line-highlighted\">487</a>\n<a href=\"#488\" id=\"488\" class=\"line-highlighted\">488</a>\n<a href=\"#489\" id=\"489\" class=\"line-highlighted\">489</a>\n<a href=\"#490\" id=\"490\" class=\"line-highlighted\">490</a>\n<a href=\"#491\" id=\"491\" class=\"line-highlighted\">491</a>\n<a href=\"#492\" id=\"492\" class=\"line-highlighted\">492</a>\n<a href=\"#493\" id=\"493\" class=\"line-highlighted\">493</a>\n<a href=\"#494\" id=\"494\" class=\"line-highlighted\">494</a>\n<a href=\"#495\" id=\"495\" class=\"line-highlighted\">495</a>\n<a href=\"#496\" id=\"496\" class=\"line-highlighted\">496</a>\n<a href=\"#497\" id=\"497\" class=\"line-highlighted\">497</a>\n<a href=\"#498\" id=\"498\" class=\"line-highlighted\">498</a>\n<a href=\"#499\" id=\"499\" class=\"line-highlighted\">499</a>\n<a href=\"#500\" id=\"500\" class=\"line-highlighted\">500</a>\n<a href=\"#501\" id=\"501\" class=\"line-highlighted\">501</a>\n<a href=\"#502\" id=\"502\" class=\"line-highlighted\">502</a>\n<a href=\"#503\" id=\"503\" class=\"line-highlighted\">503</a>\n<a href=\"#504\" id=\"504\" class=\"line-highlighted\">504</a>\n<a href=\"#505\" id=\"505\" class=\"line-highlighted\">505</a>\n<a href=\"#506\" id=\"506\" class=\"line-highlighted\">506</a>\n<a href=\"#507\" id=\"507\" class=\"line-highlighted\">507</a>\n<a href=\"#508\" id=\"508\" class=\"line-highlighted\">508</a>\n<a href=\"#509\" id=\"509\" class=\"line-highlighted\">509</a>\n<a href=\"#510\" id=\"510\" class=\"line-highlighted\">510</a>\n<a href=\"#511\" id=\"511\" class=\"line-highlighted\">511</a>\n<a href=\"#512\" id=\"512\" class=\"line-highlighted\">512</a>\n<a href=\"#513\" id=\"513\" class=\"line-highlighted\">513</a>\n<a href=\"#514\" id=\"514\" class=\"line-highlighted\">514</a>\n<a href=\"#515\" id=\"515\" class=\"line-highlighted\">515</a>\n<a href=\"#516\" id=\"516\" class=\"line-highlighted\">516</a>\n<a href=\"#517\" id=\"517\" class=\"line-highlighted\">517</a>\n<a href=\"#518\" id=\"518\" class=\"line-highlighted\">518</a>\n<a href=\"#519\" id=\"519\" class=\"line-highlighted\">519</a>\n<a href=\"#520\" id=\"520\" class=\"line-highlighted\">520</a>\n<a href=\"#521\" id=\"521\" class=\"line-highlighted\">521</a>\n<a href=\"#522\" id=\"522\" class=\"line-highlighted\">522</a>\n<a href=\"#523\" id=\"523\" class=\"line-highlighted\">523</a>\n<a href=\"#524\" id=\"524\" class=\"line-highlighted\">524</a>\n<a href=\"#525\" id=\"525\" class=\"line-highlighted\">525</a>\n<a href=\"#526\" id=\"526\" class=\"line-highlighted\">526</a>\n<a href=\"#527\" id=\"527\" class=\"line-highlighted\">527</a>\n<a href=\"#528\" id=\"528\" class=\"line-highlighted\">528</a>\n<a href=\"#529\" id=\"529\" class=\"line-highlighted\">529</a>\n<a href=\"#530\" id=\"530\" class=\"line-highlighted\">530</a>\n<a href=\"#531\" id=\"531\" class=\"line-highlighted\">531</a>\n<a href=\"#532\" id=\"532\" class=\"line-highlighted\">532</a>\n<a href=\"#533\" id=\"533\" class=\"line-highlighted\">533</a>\n<a href=\"#534\" id=\"534\" class=\"line-highlighted\">534</a>\n<a href=\"#535\" id=\"535\" class=\"line-highlighted\">535</a>\n<a href=\"#536\" id=\"536\" class=\"line-highlighted\">536</a>\n<a href=\"#537\" id=\"537\" class=\"line-highlighted\">537</a>\n<a href=\"#538\" id=\"538\" class=\"line-highlighted\">538</a>\n<a href=\"#539\" id=\"539\" class=\"line-highlighted\">539</a>\n<a href=\"#540\" id=\"540\" class=\"line-highlighted\">540</a>\n<a href=\"#541\" id=\"541\" class=\"line-highlighted\">541</a>\n<a href=\"#542\" id=\"542\" class=\"line-highlighted\">542</a>\n<a href=\"#543\" id=\"543\" class=\"line-highlighted\">543</a>\n<a href=\"#544\" id=\"544\" class=\"line-highlighted\">544</a>\n<a href=\"#545\" id=\"545\" class=\"line-highlighted\">545</a>\n<a href=\"#546\" id=\"546\" class=\"line-highlighted\">546</a>\n<a href=\"#547\" id=\"547\" class=\"line-highlighted\">547</a>\n<a href=\"#548\" id=\"548\" class=\"line-highlighted\">548</a>\n<a href=\"#549\" id=\"549\" class=\"line-highlighted\">549</a>\n<a href=\"#550\" id=\"550\" class=\"line-highlighted\">550</a>\n<a href=\"#551\" id=\"551\" class=\"line-highlighted\">551</a>\n<a href=\"#552\" id=\"552\" class=\"line-highlighted\">552</a>\n<a href=\"#553\" id=\"553\" class=\"line-highlighted\">553</a>\n<a href=\"#554\" id=\"554\" class=\"line-highlighted\">554</a>\n<a href=\"#555\" id=\"555\" class=\"line-highlighted\">555</a>\n<a href=\"#556\" id=\"556\" class=\"line-highlighted\">556</a>\n<a href=\"#557\" id=\"557\" class=\"line-highlighted\">557</a>\n<a href=\"#558\" id=\"558\" class=\"line-highlighted\">558</a>\n<a href=\"#559\" id=\"559\" class=\"line-highlighted\">559</a>\n<a href=\"#560\" id=\"560\" class=\"line-highlighted\">560</a>\n<a href=\"#561\" id=\"561\" class=\"line-highlighted\">561</a>\n<a href=\"#562\" id=\"562\" class=\"line-highlighted\">562</a>\n<a href=\"#563\" id=\"563\" class=\"line-highlighted\">563</a>\n<a href=\"#564\" id=\"564\" class=\"line-highlighted\">564</a>\n<a href=\"#565\" id=\"565\" class=\"line-highlighted\">565</a>\n<a href=\"#566\" id=\"566\" class=\"line-highlighted\">566</a>\n<a href=\"#567\" id=\"567\" class=\"line-highlighted\">567</a>\n<a href=\"#568\" id=\"568\" class=\"line-highlighted\">568</a>\n<a href=\"#569\" id=\"569\" class=\"line-highlighted\">569</a>\n<a href=\"#570\" id=\"570\" class=\"line-highlighted\">570</a>\n<a href=\"#571\" id=\"571\" class=\"line-highlighted\">571</a>\n<a href=\"#572\" id=\"572\" class=\"line-highlighted\">572</a>\n<a href=\"#573\" id=\"573\" class=\"line-highlighted\">573</a>\n<a href=\"#574\" id=\"574\" class=\"line-highlighted\">574</a>\n<a href=\"#575\" id=\"575\" class=\"line-highlighted\">575</a>\n<a href=\"#576\" id=\"576\" class=\"line-highlighted\">576</a>\n<a href=\"#577\" id=\"577\" class=\"line-highlighted\">577</a>\n<a href=\"#578\" id=\"578\" class=\"line-highlighted\">578</a>\n<a href=\"#579\" id=\"579\" class=\"line-highlighted\">579</a>\n<a href=\"#580\" id=\"580\" class=\"line-highlighted\">580</a>\n<a href=\"#581\" id=\"581\" class=\"line-highlighted\">581</a>\n<a href=\"#582\" id=\"582\" class=\"line-highlighted\">582</a>\n<a href=\"#583\" id=\"583\" class=\"line-highlighted\">583</a>\n<a href=\"#584\" id=\"584\" class=\"line-highlighted\">584</a>\n<a href=\"#585\" id=\"585\" class=\"line-highlighted\">585</a>\n<a href=\"#586\" id=\"586\" class=\"line-highlighted\">586</a>\n<a href=\"#587\" id=\"587\" class=\"line-highlighted\">587</a>\n<a href=\"#588\" id=\"588\" class=\"line-highlighted\">588</a>\n<a href=\"#589\" id=\"589\" class=\"line-highlighted\">589</a>\n<a href=\"#590\" id=\"590\" class=\"line-highlighted\">590</a>\n<a href=\"#591\" id=\"591\" class=\"line-highlighted\">591</a>\n<a href=\"#592\" id=\"592\" class=\"line-highlighted\">592</a>\n<a href=\"#593\" id=\"593\" class=\"line-highlighted\">593</a>\n<a href=\"#594\" id=\"594\" class=\"line-highlighted\">594</a>\n<a href=\"#595\" id=\"595\" class=\"line-highlighted\">595</a>\n<a href=\"#596\" id=\"596\" class=\"line-highlighted\">596</a>\n<a href=\"#597\" id=\"597\" class=\"line-highlighted\">597</a>\n<a href=\"#598\" id=\"598\" class=\"line-highlighted\">598</a>\n<a href=\"#599\" id=\"599\" class=\"line-highlighted\">599</a>\n<a href=\"#600\" id=\"600\" class=\"line-highlighted\">600</a>\n<a href=\"#601\" id=\"601\" class=\"line-highlighted\">601</a>\n<a href=\"#602\" id=\"602\" class=\"line-highlighted\">602</a>\n<a href=\"#603\" id=\"603\" class=\"line-highlighted\">603</a>\n<a href=\"#604\" id=\"604\" class=\"line-highlighted\">604</a>\n<a href=\"#605\" id=\"605\" class=\"line-highlighted\">605</a>\n<a href=\"#606\" id=\"606\" class=\"line-highlighted\">606</a>\n<a href=\"#607\" id=\"607\" class=\"line-highlighted\">607</a>\n<a href=\"#608\" id=\"608\" class=\"line-highlighted\">608</a>\n<a href=\"#609\" id=\"609\" class=\"line-highlighted\">609</a>\n<a href=\"#610\" id=\"610\" class=\"line-highlighted\">610</a>\n<a href=\"#611\" id=\"611\" class=\"line-highlighted\">611</a>\n<a href=\"#612\" id=\"612\" class=\"line-highlighted\">612</a>\n<a href=\"#613\" id=\"613\" class=\"line-highlighted\">613</a>\n<a href=\"#614\" id=\"614\" class=\"line-highlighted\">614</a>\n<a href=\"#615\" id=\"615\" class=\"line-highlighted\">615</a>\n<a href=\"#616\" id=\"616\" class=\"line-highlighted\">616</a>\n<a href=\"#617\" id=\"617\" class=\"line-highlighted\">617</a>\n<a href=\"#618\" id=\"618\" class=\"line-highlighted\">618</a>\n<a href=\"#619\" id=\"619\" class=\"line-highlighted\">619</a>\n<a href=\"#620\" id=\"620\" class=\"line-highlighted\">620</a>\n<a href=\"#621\" id=\"621\" class=\"line-highlighted\">621</a>\n<a href=\"#622\" id=\"622\" class=\"line-highlighted\">622</a>\n<a href=\"#623\" id=\"623\" class=\"line-highlighted\">623</a>\n<a href=\"#624\" id=\"624\" class=\"line-highlighted\">624</a>\n<a href=\"#625\" id=\"625\" class=\"line-highlighted\">625</a>\n<a href=\"#626\" id=\"626\" class=\"line-highlighted\">626</a>\n<a href=\"#627\" id=\"627\" class=\"line-highlighted\">627</a>\n<a href=\"#628\" id=\"628\" class=\"line-highlighted\">628</a>\n<a href=\"#629\" id=\"629\" class=\"line-highlighted\">629</a>\n<a href=\"#630\" id=\"630\" class=\"line-highlighted\">630</a>\n<a href=\"#631\" id=\"631\" class=\"line-highlighted\">631</a>\n<a href=\"#632\" id=\"632\" class=\"line-highlighted\">632</a>\n<a href=\"#633\" id=\"633\" class=\"line-highlighted\">633</a>\n<a href=\"#634\" id=\"634\" class=\"line-highlighted\">634</a>\n<a href=\"#635\" id=\"635\" class=\"line-highlighted\">635</a>\n<a href=\"#636\" id=\"636\" class=\"line-highlighted\">636</a>\n<a href=\"#637\" id=\"637\" class=\"line-highlighted\">637</a>\n<a href=\"#638\" id=\"638\" class=\"line-highlighted\">638</a>\n<a href=\"#639\" id=\"639\" class=\"line-highlighted\">639</a>\n<a href=\"#640\" id=\"640\" class=\"line-highlighted\">640</a>\n<a href=\"#641\" id=\"641\" class=\"line-highlighted\">641</a>\n<a href=\"#642\" id=\"642\" class=\"line-highlighted\">642</a>\n<a href=\"#643\" id=\"643\" class=\"line-highlighted\">643</a>\n<a href=\"#644\" id=\"644\" class=\"line-highlighted\">644</a>\n<a href=\"#645\" id=\"645\" class=\"line-highlighted\">645</a>\n<a href=\"#646\" id=\"646\" class=\"line-highlighted\">646</a>\n<a href=\"#647\" id=\"647\" class=\"line-highlighted\">647</a>\n<a href=\"#648\" id=\"648\" class=\"line-highlighted\">648</a>\n<a href=\"#649\" id=\"649\" class=\"line-highlighted\">649</a>\n<a href=\"#650\" id=\"650\" class=\"line-highlighted\">650</a>\n<a href=\"#651\" id=\"651\" class=\"line-highlighted\">651</a>\n<a href=\"#652\" id=\"652\" class=\"line-highlighted\">652</a>\n<a href=\"#653\" id=\"653\" class=\"line-highlighted\">653</a>\n<a href=\"#654\" id=\"654\" class=\"line-highlighted\">654</a>\n<a href=\"#655\" id=\"655\" class=\"line-highlighted\">655</a>\n<a href=\"#656\" id=\"656\" class=\"line-highlighted\">656</a>\n<a href=\"#657\" id=\"657\" class=\"line-highlighted\">657</a>\n<a href=\"#658\" id=\"658\" class=\"line-highlighted\">658</a>\n<a href=\"#659\" id=\"659\" class=\"line-highlighted\">659</a>\n<a href=\"#660\" id=\"660\" class=\"line-highlighted\">660</a>\n<a href=\"#661\" id=\"661\" class=\"line-highlighted\">661</a>\n<a href=\"#662\" id=\"662\" class=\"line-highlighted\">662</a>\n<a href=\"#663\" id=\"663\" class=\"line-highlighted\">663</a>\n<a href=\"#664\" id=\"664\" class=\"line-highlighted\">664</a>\n<a href=\"#665\" id=\"665\" class=\"line-highlighted\">665</a>\n<a href=\"#666\" id=\"666\" class=\"line-highlighted\">666</a>\n<a href=\"#667\" id=\"667\" class=\"line-highlighted\">667</a>\n<a href=\"#668\" id=\"668\" class=\"line-highlighted\">668</a>\n<a href=\"#669\" id=\"669\" class=\"line-highlighted\">669</a>\n<a href=\"#670\" id=\"670\" class=\"line-highlighted\">670</a>\n<a href=\"#671\" id=\"671\" class=\"line-highlighted\">671</a>\n<a href=\"#672\" id=\"672\" class=\"line-highlighted\">672</a>\n<a href=\"#673\" id=\"673\" class=\"line-highlighted\">673</a>\n<a href=\"#674\" id=\"674\" class=\"line-highlighted\">674</a>\n<a href=\"#675\" id=\"675\" class=\"line-highlighted\">675</a>\n<a href=\"#676\" id=\"676\" class=\"line-highlighted\">676</a>\n<a href=\"#677\" id=\"677\" class=\"line-highlighted\">677</a>\n<a href=\"#678\" id=\"678\" class=\"line-highlighted\">678</a>\n<a href=\"#679\" id=\"679\" class=\"line-highlighted\">679</a>\n<a href=\"#680\" id=\"680\" class=\"line-highlighted\">680</a>\n<a href=\"#681\" id=\"681\" class=\"line-highlighted\">681</a>\n<a href=\"#682\" id=\"682\" class=\"line-highlighted\">682</a>\n<a href=\"#683\" id=\"683\" class=\"line-highlighted\">683</a>\n<a href=\"#684\" id=\"684\" class=\"line-highlighted\">684</a>\n<a href=\"#685\" id=\"685\" class=\"line-highlighted\">685</a>\n<a href=\"#686\" id=\"686\" class=\"line-highlighted\">686</a>\n<a href=\"#687\" id=\"687\" class=\"line-highlighted\">687</a>\n<a href=\"#688\" id=\"688\" class=\"line-highlighted\">688</a>\n<a href=\"#689\" id=\"689\" class=\"line-highlighted\">689</a>\n<a href=\"#690\" id=\"690\" class=\"line-highlighted\">690</a>\n<a href=\"#691\" id=\"691\" class=\"line-highlighted\">691</a>\n<a href=\"#692\" id=\"692\" class=\"line-highlighted\">692</a>\n<a href=\"#693\" id=\"693\" class=\"line-highlighted\">693</a>\n<a href=\"#694\" id=\"694\" class=\"line-highlighted\">694</a>\n<a href=\"#695\" id=\"695\" class=\"line-highlighted\">695</a>\n<a href=\"#696\" id=\"696\" class=\"line-highlighted\">696</a>\n<a href=\"#697\" id=\"697\" class=\"line-highlighted\">697</a>\n<a href=\"#698\" id=\"698\" class=\"line-highlighted\">698</a>\n<a href=\"#699\" id=\"699\" class=\"line-highlighted\">699</a>\n<a href=\"#700\" id=\"700\" class=\"line-highlighted\">700</a>\n<a href=\"#701\" id=\"701\" class=\"line-highlighted\">701</a>\n<a href=\"#702\" id=\"702\" class=\"line-highlighted\">702</a>\n<a href=\"#703\" id=\"703\" class=\"line-highlighted\">703</a>\n<a href=\"#704\" id=\"704\" class=\"line-highlighted\">704</a>\n<a href=\"#705\" id=\"705\" class=\"line-highlighted\">705</a>\n<a href=\"#706\" id=\"706\" class=\"line-highlighted\">706</a>\n<a href=\"#707\" id=\"707\" class=\"line-highlighted\">707</a>\n<a href=\"#708\" id=\"708\" class=\"line-highlighted\">708</a>\n<a href=\"#709\" id=\"709\" class=\"line-highlighted\">709</a>\n<a href=\"#710\" id=\"710\" class=\"line-highlighted\">710</a>\n<a href=\"#711\" id=\"711\" class=\"line-highlighted\">711</a>\n<a href=\"#712\" id=\"712\" class=\"line-highlighted\">712</a>\n<a href=\"#713\" id=\"713\" class=\"line-highlighted\">713</a>\n<a href=\"#714\" id=\"714\" class=\"line-highlighted\">714</a>\n<a href=\"#715\" id=\"715\" class=\"line-highlighted\">715</a>\n<a href=\"#716\" id=\"716\" class=\"line-highlighted\">716</a>\n<a href=\"#717\" id=\"717\" class=\"line-highlighted\">717</a>\n<a href=\"#718\" id=\"718\" class=\"line-highlighted\">718</a>\n<a href=\"#719\" id=\"719\" class=\"line-highlighted\">719</a>\n<a href=\"#720\" id=\"720\" class=\"line-highlighted\">720</a>\n<a href=\"#721\" id=\"721\" class=\"line-highlighted\">721</a>\n<a href=\"#722\" id=\"722\" class=\"line-highlighted\">722</a>\n<a href=\"#723\" id=\"723\" class=\"line-highlighted\">723</a>\n<a href=\"#724\" id=\"724\" class=\"line-highlighted\">724</a>\n<a href=\"#725\" id=\"725\" class=\"line-highlighted\">725</a>\n<a href=\"#726\" id=\"726\" class=\"line-highlighted\">726</a>\n<a href=\"#727\" id=\"727\" class=\"line-highlighted\">727</a>\n<a href=\"#728\" id=\"728\" class=\"line-highlighted\">728</a>\n<a href=\"#729\" id=\"729\" class=\"line-highlighted\">729</a>\n<a href=\"#730\" id=\"730\" class=\"line-highlighted\">730</a>\n<a href=\"#731\" id=\"731\" class=\"line-highlighted\">731</a>\n<a href=\"#732\" id=\"732\" class=\"line-highlighted\">732</a>\n<a href=\"#733\" id=\"733\" class=\"line-highlighted\">733</a>\n<a href=\"#734\" id=\"734\" class=\"line-highlighted\">734</a>\n<a href=\"#735\" id=\"735\" class=\"line-highlighted\">735</a>\n<a href=\"#736\" id=\"736\" class=\"line-highlighted\">736</a>\n<a href=\"#737\" id=\"737\" class=\"line-highlighted\">737</a>\n<a href=\"#738\" id=\"738\" class=\"line-highlighted\">738</a>\n<a href=\"#739\" id=\"739\" class=\"line-highlighted\">739</a>\n<a href=\"#740\" id=\"740\" class=\"line-highlighted\">740</a>\n<a href=\"#741\" id=\"741\" class=\"line-highlighted\">741</a>\n<a href=\"#742\" id=\"742\" class=\"line-highlighted\">742</a>\n<a href=\"#743\" id=\"743\" class=\"line-highlighted\">743</a>\n<a href=\"#744\" id=\"744\" class=\"line-highlighted\">744</a>\n<a href=\"#745\" id=\"745\" class=\"line-highlighted\">745</a>\n<a href=\"#746\" id=\"746\" class=\"line-highlighted\">746</a>\n<a href=\"#747\" id=\"747\" class=\"line-highlighted\">747</a>\n<a href=\"#748\" id=\"748\" class=\"line-highlighted\">748</a>\n<a href=\"#749\" id=\"749\" class=\"line-highlighted\">749</a>\n<a href=\"#750\" id=\"750\" class=\"line-highlighted\">750</a>\n<a href=\"#751\" id=\"751\" class=\"line-highlighted\">751</a>\n<a href=\"#752\" id=\"752\" class=\"line-highlighted\">752</a>\n<a href=\"#753\" id=\"753\" class=\"line-highlighted\">753</a>\n<a href=\"#754\" id=\"754\" class=\"line-highlighted\">754</a>\n<a href=\"#755\" id=\"755\" class=\"line-highlighted\">755</a>\n<a href=\"#756\" id=\"756\" class=\"line-highlighted\">756</a>\n<a href=\"#757\" id=\"757\" class=\"line-highlighted\">757</a>\n<a href=\"#758\" id=\"758\" class=\"line-highlighted\">758</a>\n<a href=\"#759\" id=\"759\" class=\"line-highlighted\">759</a>\n<a href=\"#760\" id=\"760\" class=\"line-highlighted\">760</a>\n<a href=\"#761\" id=\"761\" class=\"line-highlighted\">761</a>\n<a href=\"#762\" id=\"762\" class=\"line-highlighted\">762</a>\n<a href=\"#763\" id=\"763\" class=\"line-highlighted\">763</a>\n<a href=\"#764\" id=\"764\" class=\"line-highlighted\">764</a>\n<a href=\"#765\" id=\"765\" class=\"line-highlighted\">765</a>\n<a href=\"#766\" id=\"766\" class=\"line-highlighted\">766</a>\n<a href=\"#767\" id=\"767\" class=\"line-highlighted\">767</a>\n<a href=\"#768\" id=\"768\" class=\"line-highlighted\">768</a>\n<a href=\"#769\" id=\"769\" class=\"line-highlighted\">769</a>\n<a href=\"#770\" id=\"770\" class=\"line-highlighted\">770</a>\n<a href=\"#771\" id=\"771\" class=\"line-highlighted\">771</a>\n<a href=\"#772\" id=\"772\" class=\"line-highlighted\">772</a>\n<a href=\"#773\" id=\"773\" class=\"line-highlighted\">773</a>\n<a href=\"#774\" id=\"774\" class=\"line-highlighted\">774</a>\n<a href=\"#775\" id=\"775\" class=\"line-highlighted\">775</a>\n<a href=\"#776\" id=\"776\" class=\"line-highlighted\">776</a>\n<a href=\"#777\" id=\"777\" class=\"line-highlighted\">777</a>\n<a href=\"#778\" id=\"778\" class=\"line-highlighted\">778</a>\n<a href=\"#779\" id=\"779\" class=\"line-highlighted\">779</a>\n<a href=\"#780\" id=\"780\" class=\"line-highlighted\">780</a>\n<a href=\"#781\" id=\"781\" class=\"line-highlighted\">781</a>\n<a href=\"#782\" id=\"782\" class=\"line-highlighted\">782</a>\n<a href=\"#783\" id=\"783\" class=\"line-highlighted\">783</a>\n<a href=\"#784\" id=\"784\" class=\"line-highlighted\">784</a>\n<a href=\"#785\" id=\"785\" class=\"line-highlighted\">785</a>\n<a href=\"#786\" id=\"786\" class=\"line-highlighted\">786</a>\n<a href=\"#787\" id=\"787\" class=\"line-highlighted\">787</a>\n<a href=\"#788\" id=\"788\" class=\"line-highlighted\">788</a>\n<a href=\"#789\" id=\"789\" class=\"line-highlighted\">789</a>\n<a href=\"#790\" id=\"790\" class=\"line-highlighted\">790</a>\n<a href=\"#791\" id=\"791\" class=\"line-highlighted\">791</a>\n<a href=\"#792\" id=\"792\" class=\"line-highlighted\">792</a>\n<a href=\"#793\" id=\"793\" class=\"line-highlighted\">793</a>\n<a href=\"#794\" id=\"794\" class=\"line-highlighted\">794</a>\n<a href=\"#795\" id=\"795\" class=\"line-highlighted\">795</a>\n<a href=\"#796\" id=\"796\" class=\"line-highlighted\">796</a>\n<a href=\"#797\" id=\"797\" class=\"line-highlighted\">797</a>\n<a href=\"#798\" id=\"798\" class=\"line-highlighted\">798</a>\n<a href=\"#799\" id=\"799\" class=\"line-highlighted\">799</a>\n<a href=\"#800\" id=\"800\" class=\"line-highlighted\">800</a>\n<a href=\"#801\" id=\"801\" class=\"line-highlighted\">801</a>\n<a href=\"#802\" id=\"802\" class=\"line-highlighted\">802</a>\n<a href=\"#803\" id=\"803\" class=\"line-highlighted\">803</a>\n<a href=\"#804\" id=\"804\" class=\"line-highlighted\">804</a>\n<a href=\"#805\" id=\"805\" class=\"line-highlighted\">805</a>\n<a href=\"#806\" id=\"806\" class=\"line-highlighted\">806</a>\n<a href=\"#807\" id=\"807\" class=\"line-highlighted\">807</a>\n<a href=\"#808\" id=\"808\" class=\"line-highlighted\">808</a>\n<a href=\"#809\" id=\"809\" class=\"line-highlighted\">809</a>\n<a href=\"#810\" id=\"810\" class=\"line-highlighted\">810</a>\n<a href=\"#811\" id=\"811\" class=\"line-highlighted\">811</a>\n<a href=\"#812\" id=\"812\" class=\"line-highlighted\">812</a>\n<a href=\"#813\" id=\"813\" class=\"line-highlighted\">813</a>\n<a href=\"#814\" id=\"814\" class=\"line-highlighted\">814</a>\n<a href=\"#815\" id=\"815\" class=\"line-highlighted\">815</a>\n<a href=\"#816\" id=\"816\" class=\"line-highlighted\">816</a>\n<a href=\"#817\" id=\"817\" class=\"line-highlighted\">817</a>\n<a href=\"#818\" id=\"818\" class=\"line-highlighted\">818</a>\n<a href=\"#819\" id=\"819\" class=\"line-highlighted\">819</a>\n<a href=\"#820\" id=\"820\" class=\"line-highlighted\">820</a>\n<a href=\"#821\" id=\"821\" class=\"line-highlighted\">821</a>\n<a href=\"#822\" id=\"822\" class=\"line-highlighted\">822</a>\n<a href=\"#823\" id=\"823\" class=\"line-highlighted\">823</a>\n<a href=\"#824\" id=\"824\" class=\"line-highlighted\">824</a>\n<a href=\"#825\" id=\"825\" class=\"line-highlighted\">825</a>\n<a href=\"#826\" id=\"826\" class=\"line-highlighted\">826</a>\n<a href=\"#827\" id=\"827\" class=\"line-highlighted\">827</a>\n<a href=\"#828\" id=\"828\" class=\"line-highlighted\">828</a>\n<a href=\"#829\" id=\"829\" class=\"line-highlighted\">829</a>\n<a href=\"#830\" id=\"830\" class=\"line-highlighted\">830</a>\n<a href=\"#831\" id=\"831\" class=\"line-highlighted\">831</a>\n<a href=\"#832\" id=\"832\" class=\"line-highlighted\">832</a>\n<a href=\"#833\" id=\"833\" class=\"line-highlighted\">833</a>\n<a href=\"#834\" id=\"834\" class=\"line-highlighted\">834</a>\n<a href=\"#835\" id=\"835\" class=\"line-highlighted\">835</a>\n<a href=\"#836\" id=\"836\" class=\"line-highlighted\">836</a>\n<a href=\"#837\" id=\"837\" class=\"line-highlighted\">837</a>\n<a href=\"#838\" id=\"838\" class=\"line-highlighted\">838</a>\n<a href=\"#839\" id=\"839\" class=\"line-highlighted\">839</a>\n<a href=\"#840\" id=\"840\" class=\"line-highlighted\">840</a>\n<a href=\"#841\" id=\"841\" class=\"line-highlighted\">841</a>\n<a href=\"#842\" id=\"842\" class=\"line-highlighted\">842</a>\n<a href=\"#843\" id=\"843\" class=\"line-highlighted\">843</a>\n<a href=\"#844\" id=\"844\" class=\"line-highlighted\">844</a>\n<a href=\"#845\" id=\"845\" class=\"line-highlighted\">845</a>\n<a href=\"#846\" id=\"846\" class=\"line-highlighted\">846</a>\n<a href=\"#847\" id=\"847\" class=\"line-highlighted\">847</a>\n<a href=\"#848\" id=\"848\" class=\"line-highlighted\">848</a>\n<a href=\"#849\" id=\"849\" class=\"line-highlighted\">849</a>\n<a href=\"#850\" id=\"850\" class=\"line-highlighted\">850</a>\n<a href=\"#851\" id=\"851\" class=\"line-highlighted\">851</a>\n<a href=\"#852\" id=\"852\" class=\"line-highlighted\">852</a>\n<a href=\"#853\" id=\"853\" class=\"line-highlighted\">853</a>\n<a href=\"#854\" id=\"854\" class=\"line-highlighted\">854</a>\n<a href=\"#855\" id=\"855\" class=\"line-highlighted\">855</a>\n<a href=\"#856\" id=\"856\" class=\"line-highlighted\">856</a>\n<a href=\"#857\" id=\"857\" class=\"line-highlighted\">857</a>\n<a href=\"#858\" id=\"858\" class=\"line-highlighted\">858</a>\n<a href=\"#859\" id=\"859\" class=\"line-highlighted\">859</a>\n<a href=\"#860\" id=\"860\" class=\"line-highlighted\">860</a>\n<a href=\"#861\" id=\"861\" class=\"line-highlighted\">861</a>\n<a href=\"#862\" id=\"862\" class=\"line-highlighted\">862</a>\n<a href=\"#863\" id=\"863\" class=\"line-highlighted\">863</a>\n<a href=\"#864\" id=\"864\" class=\"line-highlighted\">864</a>\n<a href=\"#865\" id=\"865\" class=\"line-highlighted\">865</a>\n<a href=\"#866\" id=\"866\" class=\"line-highlighted\">866</a>\n<a href=\"#867\" id=\"867\" class=\"line-highlighted\">867</a>\n<a href=\"#868\" id=\"868\" class=\"line-highlighted\">868</a>\n<a href=\"#869\" id=\"869\" class=\"line-highlighted\">869</a>\n<a href=\"#870\" id=\"870\" class=\"line-highlighted\">870</a>\n<a href=\"#871\" id=\"871\" class=\"line-highlighted\">871</a>\n<a href=\"#872\" id=\"872\" class=\"line-highlighted\">872</a>\n<a href=\"#873\" id=\"873\" class=\"line-highlighted\">873</a>\n<a href=\"#874\" id=\"874\" class=\"line-highlighted\">874</a>\n<a href=\"#875\" id=\"875\" class=\"line-highlighted\">875</a>\n<a href=\"#876\" id=\"876\" class=\"line-highlighted\">876</a>\n<a href=\"#877\" id=\"877\" class=\"line-highlighted\">877</a>\n<a href=\"#878\" id=\"878\" class=\"line-highlighted\">878</a>\n<a href=\"#879\" id=\"879\" class=\"line-highlighted\">879</a>\n<a href=\"#880\" id=\"880\" class=\"line-highlighted\">880</a>\n<a href=\"#881\" id=\"881\" class=\"line-highlighted\">881</a>\n<a href=\"#882\" id=\"882\" class=\"line-highlighted\">882</a>\n<a href=\"#883\" id=\"883\" class=\"line-highlighted\">883</a>\n<a href=\"#884\" id=\"884\" class=\"line-highlighted\">884</a>\n<a href=\"#885\" id=\"885\" class=\"line-highlighted\">885</a>\n<a href=\"#886\" id=\"886\" class=\"line-highlighted\">886</a>\n<a href=\"#887\" id=\"887\" class=\"line-highlighted\">887</a>\n<a href=\"#888\" id=\"888\" class=\"line-highlighted\">888</a>\n<a href=\"#889\" id=\"889\" class=\"line-highlighted\">889</a>\n<a href=\"#890\" id=\"890\" class=\"line-highlighted\">890</a>\n<a href=\"#891\" id=\"891\" class=\"line-highlighted\">891</a>\n<a href=\"#892\" id=\"892\" class=\"line-highlighted\">892</a>\n<a href=\"#893\" id=\"893\" class=\"line-highlighted\">893</a>\n<a href=\"#894\" id=\"894\" class=\"line-highlighted\">894</a>\n<a href=\"#895\" id=\"895\" class=\"line-highlighted\">895</a>\n<a href=\"#896\" id=\"896\" class=\"line-highlighted\">896</a>\n<a href=\"#897\" id=\"897\" class=\"line-highlighted\">897</a>\n<a href=\"#898\" id=\"898\" class=\"line-highlighted\">898</a>\n<a href=\"#899\" id=\"899\" class=\"line-highlighted\">899</a>\n<a href=\"#900\" id=\"900\" class=\"line-highlighted\">900</a>\n<a href=\"#901\" id=\"901\" class=\"line-highlighted\">901</a>\n<a href=\"#902\" id=\"902\" class=\"line-highlighted\">902</a>\n<a href=\"#903\" id=\"903\" class=\"line-highlighted\">903</a>\n<a href=\"#904\" id=\"904\" class=\"line-highlighted\">904</a>\n<a href=\"#905\" id=\"905\" class=\"line-highlighted\">905</a>\n<a href=\"#906\" id=\"906\" class=\"line-highlighted\">906</a>\n<a href=\"#907\" id=\"907\" class=\"line-highlighted\">907</a>\n<a href=\"#908\" id=\"908\" class=\"line-highlighted\">908</a>\n<a href=\"#909\" id=\"909\" class=\"line-highlighted\">909</a>\n<a href=\"#910\" id=\"910\" class=\"line-highlighted\">910</a>\n<a href=\"#911\" id=\"911\" class=\"line-highlighted\">911</a>\n<a href=\"#912\" id=\"912\" class=\"line-highlighted\">912</a>\n<a href=\"#913\" id=\"913\" class=\"line-highlighted\">913</a>\n<a href=\"#914\" id=\"914\" class=\"line-highlighted\">914</a>\n<a href=\"#915\" id=\"915\" class=\"line-highlighted\">915</a>\n<a href=\"#916\" id=\"916\" class=\"line-highlighted\">916</a>\n<a href=\"#917\" id=\"917\" class=\"line-highlighted\">917</a>\n<a href=\"#918\" id=\"918\" class=\"line-highlighted\">918</a>\n<a href=\"#919\" id=\"919\" class=\"line-highlighted\">919</a>\n<a href=\"#920\" id=\"920\" class=\"line-highlighted\">920</a>\n<a href=\"#921\" id=\"921\" class=\"line-highlighted\">921</a>\n<a href=\"#922\" id=\"922\" class=\"line-highlighted\">922</a>\n<a href=\"#923\" id=\"923\" class=\"line-highlighted\">923</a>\n<a href=\"#924\" id=\"924\" class=\"line-highlighted\">924</a>\n<a href=\"#925\" id=\"925\" class=\"line-highlighted\">925</a>\n<a href=\"#926\" id=\"926\" class=\"line-highlighted\">926</a>\n<a href=\"#927\" id=\"927\" class=\"line-highlighted\">927</a>\n<a href=\"#928\" id=\"928\" class=\"line-highlighted\">928</a>\n<a href=\"#929\" id=\"929\" class=\"line-highlighted\">929</a>\n<a href=\"#930\" id=\"930\" class=\"line-highlighted\">930</a>\n<a href=\"#931\" id=\"931\" class=\"line-highlighted\">931</a>\n<a href=\"#932\" id=\"932\" class=\"line-highlighted\">932</a>\n<a href=\"#933\" id=\"933\" class=\"line-highlighted\">933</a>\n<a href=\"#934\" id=\"934\" class=\"line-highlighted\">934</a>\n<a href=\"#935\" id=\"935\" class=\"line-highlighted\">935</a>\n<a href=\"#936\" id=\"936\" class=\"line-highlighted\">936</a>\n<a href=\"#937\" id=\"937\" class=\"line-highlighted\">937</a>\n<a href=\"#938\" id=\"938\" class=\"line-highlighted\">938</a>\n<a href=\"#939\" id=\"939\" class=\"line-highlighted\">939</a>\n<a href=\"#940\" id=\"940\" class=\"line-highlighted\">940</a>\n<a href=\"#941\" id=\"941\" class=\"line-highlighted\">941</a>\n<a href=\"#942\" id=\"942\" class=\"line-highlighted\">942</a>\n<a href=\"#943\" id=\"943\" class=\"line-highlighted\">943</a>\n<a href=\"#944\" id=\"944\" class=\"line-highlighted\">944</a>\n<a href=\"#945\" id=\"945\" class=\"line-highlighted\">945</a>\n<a href=\"#946\" id=\"946\" class=\"line-highlighted\">946</a>\n<a href=\"#947\" id=\"947\" class=\"line-highlighted\">947</a>\n<a href=\"#948\" id=\"948\" class=\"line-highlighted\">948</a>\n<a href=\"#949\" id=\"949\" class=\"line-highlighted\">949</a>\n<a href=\"#950\" id=\"950\" class=\"line-highlighted\">950</a>\n<a href=\"#951\" id=\"951\" class=\"line-highlighted\">951</a>\n<a href=\"#952\" id=\"952\" class=\"line-highlighted\">952</a>\n<a href=\"#953\" id=\"953\" class=\"line-highlighted\">953</a>\n<a href=\"#954\" id=\"954\" class=\"line-highlighted\">954</a>\n<a href=\"#955\" id=\"955\" class=\"line-highlighted\">955</a>\n<a href=\"#956\" id=\"956\" class=\"line-highlighted\">956</a>\n<a href=\"#957\" id=\"957\" class=\"line-highlighted\">957</a>\n<a href=\"#958\" id=\"958\" class=\"line-highlighted\">958</a>\n<a href=\"#959\" id=\"959\" class=\"line-highlighted\">959</a>\n<a href=\"#960\" id=\"960\" class=\"line-highlighted\">960</a>\n<a href=\"#961\" id=\"961\" class=\"line-highlighted\">961</a>\n<a href=\"#962\" id=\"962\" class=\"line-highlighted\">962</a>\n<a href=\"#963\" id=\"963\" class=\"line-highlighted\">963</a>\n<a href=\"#964\" id=\"964\" class=\"line-highlighted\">964</a>\n<a href=\"#965\" id=\"965\" class=\"line-highlighted\">965</a>\n<a href=\"#966\" id=\"966\" class=\"line-highlighted\">966</a>\n<a href=\"#967\" id=\"967\" class=\"line-highlighted\">967</a>\n<a href=\"#968\" id=\"968\" class=\"line-highlighted\">968</a>\n<a href=\"#969\" id=\"969\" class=\"line-highlighted\">969</a>\n<a href=\"#970\" id=\"970\" class=\"line-highlighted\">970</a>\n<a href=\"#971\" id=\"971\" class=\"line-highlighted\">971</a>\n<a href=\"#972\" id=\"972\" class=\"line-highlighted\">972</a>\n<a href=\"#973\" id=\"973\" class=\"line-highlighted\">973</a>\n<a href=\"#974\" id=\"974\" class=\"line-highlighted\">974</a>\n<a href=\"#975\" id=\"975\" class=\"line-highlighted\">975</a>\n<a href=\"#976\" id=\"976\" class=\"line-highlighted\">976</a>\n<a href=\"#977\" id=\"977\" class=\"line-highlighted\">977</a>\n<a href=\"#978\" id=\"978\" class=\"line-highlighted\">978</a>\n<a href=\"#979\" id=\"979\" class=\"line-highlighted\">979</a>\n<a href=\"#980\" id=\"980\" class=\"line-highlighted\">980</a>\n<a href=\"#981\" id=\"981\" class=\"line-highlighted\">981</a>\n<a href=\"#982\" id=\"982\" class=\"line-highlighted\">982</a>\n<a href=\"#983\" id=\"983\" class=\"line-highlighted\">983</a>\n<a href=\"#984\" id=\"984\" class=\"line-highlighted\">984</a>\n<a href=\"#985\" id=\"985\" class=\"line-highlighted\">985</a>\n<a href=\"#986\" id=\"986\" class=\"line-highlighted\">986</a>\n<a href=\"#987\" id=\"987\" class=\"line-highlighted\">987</a>\n<a href=\"#988\" id=\"988\" class=\"line-highlighted\">988</a>\n<a href=\"#989\" id=\"989\" class=\"line-highlighted\">989</a>\n<a href=\"#990\" id=\"990\" class=\"line-highlighted\">990</a>\n<a href=\"#991\" id=\"991\" class=\"line-highlighted\">991</a>\n<a href=\"#992\" id=\"992\" class=\"line-highlighted\">992</a>\n<a href=\"#993\" id=\"993\" class=\"line-highlighted\">993</a>\n<a href=\"#994\" id=\"994\" class=\"line-highlighted\">994</a>\n<a href=\"#995\" id=\"995\" class=\"line-highlighted\">995</a>\n<a href=\"#996\" id=\"996\" class=\"line-highlighted\">996</a>\n<a href=\"#997\" id=\"997\" class=\"line-highlighted\">997</a>\n<a href=\"#998\" id=\"998\" class=\"line-highlighted\">998</a>\n<a href=\"#999\" id=\"999\" class=\"line-highlighted\">999</a>\n<a href=\"#1000\" id=\"1000\" class=\"line-highlighted\">1000</a>\n<a href=\"#1001\" id=\"1001\" class=\"line-highlighted\">1001</a>\n<a href=\"#1002\" id=\"1002\" class=\"line-highlighted\">1002</a>\n<a href=\"#1003\" id=\"1003\" class=\"line-highlighted\">1003</a>\n<a href=\"#1004\" id=\"1004\" class=\"line-highlighted\">1004</a>\n<a href=\"#1005\" id=\"1005\" class=\"line-highlighted\">1005</a>\n<a href=\"#1006\" id=\"1006\" class=\"line-highlighted\">1006</a>\n<a href=\"#1007\" id=\"1007\" class=\"line-highlighted\">1007</a>\n<a href=\"#1008\" id=\"1008\" class=\"line-highlighted\">1008</a>\n<a href=\"#1009\" id=\"1009\" class=\"line-highlighted\">1009</a>\n<a href=\"#1010\" id=\"1010\" class=\"line-highlighted\">1010</a>\n<a href=\"#1011\" id=\"1011\" class=\"line-highlighted\">1011</a>\n<a href=\"#1012\" id=\"1012\" class=\"line-highlighted\">1012</a>\n<a href=\"#1013\" id=\"1013\" class=\"line-highlighted\">1013</a>\n<a href=\"#1014\" id=\"1014\" class=\"line-highlighted\">1014</a>\n<a href=\"#1015\" id=\"1015\" class=\"line-highlighted\">1015</a>\n<a href=\"#1016\" id=\"1016\" class=\"line-highlighted\">1016</a>\n<a href=\"#1017\" id=\"1017\" class=\"line-highlighted\">1017</a>\n<a href=\"#1018\" id=\"1018\" class=\"line-highlighted\">1018</a>\n<a href=\"#1019\" id=\"1019\" class=\"line-highlighted\">1019</a>\n<a href=\"#1020\" id=\"1020\" class=\"line-highlighted\">1020</a>\n<a href=\"#1021\" id=\"1021\" class=\"line-highlighted\">1021</a>\n<a href=\"#1022\" id=\"1022\" class=\"line-highlighted\">1022</a>\n<a href=\"#1023\" id=\"1023\" class=\"line-highlighted\">1023</a>\n<a href=\"#1024\" id=\"1024\" class=\"line-highlighted\">1024</a>\n<a href=\"#1025\" id=\"1025\" class=\"line-highlighted\">1025</a>\n<a href=\"#1026\" id=\"1026\" class=\"line-highlighted\">1026</a>\n<a href=\"#1027\" id=\"1027\" class=\"line-highlighted\">1027</a>\n<a href=\"#1028\" id=\"1028\" class=\"line-highlighted\">1028</a>\n<a href=\"#1029\" id=\"1029\" class=\"line-highlighted\">1029</a>\n<a href=\"#1030\" id=\"1030\" class=\"line-highlighted\">1030</a>\n<a href=\"#1031\" id=\"1031\" class=\"line-highlighted\">1031</a>\n<a href=\"#1032\" id=\"1032\" class=\"line-highlighted\">1032</a>\n<a href=\"#1033\" id=\"1033\" class=\"line-highlighted\">1033</a>\n<a href=\"#1034\" id=\"1034\" class=\"line-highlighted\">1034</a>\n<a href=\"#1035\" id=\"1035\" class=\"line-highlighted\">1035</a>\n<a href=\"#1036\" id=\"1036\" class=\"line-highlighted\">1036</a>\n<a href=\"#1037\" id=\"1037\" class=\"line-highlighted\">1037</a>\n<a href=\"#1038\" id=\"1038\" class=\"line-highlighted\">1038</a>\n<a href=\"#1039\" id=\"1039\" class=\"line-highlighted\">1039</a>\n<a href=\"#1040\" id=\"1040\" class=\"line-highlighted\">1040</a>\n<a href=\"#1041\" id=\"1041\" class=\"line-highlighted\">1041</a>\n<a href=\"#1042\" id=\"1042\" class=\"line-highlighted\">1042</a>\n<a href=\"#1043\" id=\"1043\" class=\"line-highlighted\">1043</a>\n<a href=\"#1044\" id=\"1044\" class=\"line-highlighted\">1044</a>\n<a href=\"#1045\" id=\"1045\" class=\"line-highlighted\">1045</a>\n<a href=\"#1046\" id=\"1046\" class=\"line-highlighted\">1046</a>\n<a href=\"#1047\" id=\"1047\" class=\"line-highlighted\">1047</a>\n<a href=\"#1048\" id=\"1048\" class=\"line-highlighted\">1048</a>\n<a href=\"#1049\" id=\"1049\" class=\"line-highlighted\">1049</a>\n<a href=\"#1050\" id=\"1050\" class=\"line-highlighted\">1050</a>\n<a href=\"#1051\" id=\"1051\" class=\"line-highlighted\">1051</a>\n<a href=\"#1052\" id=\"1052\" class=\"line-highlighted\">1052</a>\n<a href=\"#1053\" id=\"1053\" class=\"line-highlighted\">1053</a>\n<a href=\"#1054\" id=\"1054\" class=\"line-highlighted\">1054</a>\n<a href=\"#1055\" id=\"1055\" class=\"line-highlighted\">1055</a>\n<a href=\"#1056\" id=\"1056\" class=\"line-highlighted\">1056</a>\n<a href=\"#1057\" id=\"1057\" class=\"line-highlighted\">1057</a>\n<a href=\"#1058\" id=\"1058\" class=\"line-highlighted\">1058</a>\n<a href=\"#1059\" id=\"1059\" class=\"line-highlighted\">1059</a>\n<a href=\"#1060\" id=\"1060\" class=\"line-highlighted\">1060</a>\n<a href=\"#1061\" id=\"1061\" class=\"line-highlighted\">1061</a>\n<a href=\"#1062\" id=\"1062\" class=\"line-highlighted\">1062</a>\n<a href=\"#1063\" id=\"1063\" class=\"line-highlighted\">1063</a>\n<a href=\"#1064\" id=\"1064\" class=\"line-highlighted\">1064</a>\n<a href=\"#1065\" id=\"1065\" class=\"line-highlighted\">1065</a>\n<a href=\"#1066\" id=\"1066\" class=\"line-highlighted\">1066</a>\n<a href=\"#1067\" id=\"1067\" class=\"line-highlighted\">1067</a>\n<a href=\"#1068\" id=\"1068\" class=\"line-highlighted\">1068</a>\n<a href=\"#1069\" id=\"1069\" class=\"line-highlighted\">1069</a>\n<a href=\"#1070\" id=\"1070\" class=\"line-highlighted\">1070</a>\n<a href=\"#1071\" id=\"1071\" class=\"line-highlighted\">1071</a>\n<a href=\"#1072\" id=\"1072\" class=\"line-highlighted\">1072</a>\n<a href=\"#1073\" id=\"1073\" class=\"line-highlighted\">1073</a>\n<a href=\"#1074\" id=\"1074\" class=\"line-highlighted\">1074</a>\n<a href=\"#1075\" id=\"1075\" class=\"line-highlighted\">1075</a>\n<a href=\"#1076\" id=\"1076\" class=\"line-highlighted\">1076</a>\n<a href=\"#1077\" id=\"1077\" class=\"line-highlighted\">1077</a>\n<a href=\"#1078\" id=\"1078\" class=\"line-highlighted\">1078</a>\n<a href=\"#1079\" id=\"1079\" class=\"line-highlighted\">1079</a>\n<a href=\"#1080\" id=\"1080\" class=\"line-highlighted\">1080</a>\n<a href=\"#1081\" id=\"1081\" class=\"line-highlighted\">1081</a>\n<a href=\"#1082\" id=\"1082\" class=\"line-highlighted\">1082</a>\n<a href=\"#1083\" id=\"1083\" class=\"line-highlighted\">1083</a>\n<a href=\"#1084\" id=\"1084\" class=\"line-highlighted\">1084</a>\n<a href=\"#1085\" id=\"1085\" class=\"line-highlighted\">1085</a>\n<a href=\"#1086\" id=\"1086\" class=\"line-highlighted\">1086</a>\n<a href=\"#1087\" id=\"1087\" class=\"line-highlighted\">1087</a>\n<a href=\"#1088\" id=\"1088\" class=\"line-highlighted\">1088</a>\n<a href=\"#1089\" id=\"1089\" class=\"line-highlighted\">1089</a>\n<a href=\"#1090\" id=\"1090\" class=\"line-highlighted\">1090</a>\n<a href=\"#1091\" id=\"1091\" class=\"line-highlighted\">1091</a>\n<a href=\"#1092\" id=\"1092\" class=\"line-highlighted\">1092</a>\n<a href=\"#1093\" id=\"1093\" class=\"line-highlighted\">1093</a>\n<a href=\"#1094\" id=\"1094\" class=\"line-highlighted\">1094</a>\n<a href=\"#1095\" id=\"1095\" class=\"line-highlighted\">1095</a>\n<a href=\"#1096\" id=\"1096\" class=\"line-highlighted\">1096</a>\n<a href=\"#1097\" id=\"1097\" class=\"line-highlighted\">1097</a>\n<a href=\"#1098\" id=\"1098\" class=\"line-highlighted\">1098</a>\n<a href=\"#1099\" id=\"1099\" class=\"line-highlighted\">1099</a>\n<a href=\"#1100\" id=\"1100\" class=\"line-highlighted\">1100</a>\n<a href=\"#1101\" id=\"1101\" class=\"line-highlighted\">1101</a>\n<a href=\"#1102\" id=\"1102\" class=\"line-highlighted\">1102</a>\n<a href=\"#1103\" id=\"1103\" class=\"line-highlighted\">1103</a>\n<a href=\"#1104\" id=\"1104\" class=\"line-highlighted\">1104</a>\n<a href=\"#1105\" id=\"1105\" class=\"line-highlighted\">1105</a>\n<a href=\"#1106\" id=\"1106\" class=\"line-highlighted\">1106</a>\n<a href=\"#1107\" id=\"1107\" class=\"line-highlighted\">1107</a>\n<a href=\"#1108\" id=\"1108\" class=\"line-highlighted\">1108</a>\n<a href=\"#1109\" id=\"1109\" class=\"line-highlighted\">1109</a>\n<a href=\"#1110\" id=\"1110\" class=\"line-highlighted\">1110</a>\n<a href=\"#1111\" id=\"1111\" class=\"line-highlighted\">1111</a>\n<a href=\"#1112\" id=\"1112\" class=\"line-highlighted\">1112</a>\n<a href=\"#1113\" id=\"1113\" class=\"line-highlighted\">1113</a>\n<a href=\"#1114\" id=\"1114\" class=\"line-highlighted\">1114</a>\n<a href=\"#1115\" id=\"1115\" class=\"line-highlighted\">1115</a>\n<a href=\"#1116\" id=\"1116\" class=\"line-highlighted\">1116</a>\n<a href=\"#1117\" id=\"1117\" class=\"line-highlighted\">1117</a>\n<a href=\"#1118\" id=\"1118\" class=\"line-highlighted\">1118</a>\n<a href=\"#1119\" id=\"1119\" class=\"line-highlighted\">1119</a>\n<a href=\"#1120\" id=\"1120\" class=\"line-highlighted\">1120</a>\n<a href=\"#1121\" id=\"1121\" class=\"line-highlighted\">1121</a>\n<a href=\"#1122\" id=\"1122\" class=\"line-highlighted\">1122</a>\n<a href=\"#1123\" id=\"1123\" class=\"line-highlighted\">1123</a>\n<a href=\"#1124\" id=\"1124\" class=\"line-highlighted\">1124</a>\n<a href=\"#1125\" id=\"1125\" class=\"line-highlighted\">1125</a>\n<a href=\"#1126\" id=\"1126\" class=\"line-highlighted\">1126</a>\n<a href=\"#1127\" id=\"1127\" class=\"line-highlighted\">1127</a>\n<a href=\"#1128\" id=\"1128\" class=\"line-highlighted\">1128</a>\n<a href=\"#1129\" id=\"1129\" class=\"line-highlighted\">1129</a>\n<a href=\"#1130\" id=\"1130\" class=\"line-highlighted\">1130</a>\n<a href=\"#1131\" id=\"1131\" class=\"line-highlighted\">1131</a>\n<a href=\"#1132\" id=\"1132\" class=\"line-highlighted\">1132</a>\n<a href=\"#1133\" id=\"1133\" class=\"line-highlighted\">1133</a>\n<a href=\"#1134\" id=\"1134\" class=\"line-highlighted\">1134</a>\n<a href=\"#1135\" id=\"1135\" class=\"line-highlighted\">1135</a>\n<a href=\"#1136\" id=\"1136\" class=\"line-highlighted\">1136</a>\n<a href=\"#1137\" id=\"1137\" class=\"line-highlighted\">1137</a>\n<a href=\"#1138\" id=\"1138\" class=\"line-highlighted\">1138</a>\n<a href=\"#1139\" id=\"1139\" class=\"line-highlighted\">1139</a>\n<a href=\"#1140\" id=\"1140\" class=\"line-highlighted\">1140</a>\n<a href=\"#1141\" id=\"1141\" class=\"line-highlighted\">1141</a>\n<a href=\"#1142\" id=\"1142\" class=\"line-highlighted\">1142</a>\n<a href=\"#1143\" id=\"1143\" class=\"line-highlighted\">1143</a>\n<a href=\"#1144\" id=\"1144\" class=\"line-highlighted\">1144</a>\n<a href=\"#1145\" id=\"1145\" class=\"line-highlighted\">1145</a>\n<a href=\"#1146\" id=\"1146\" class=\"line-highlighted\">1146</a>\n<a href=\"#1147\" id=\"1147\" class=\"line-highlighted\">1147</a>\n<a href=\"#1148\" id=\"1148\" class=\"line-highlighted\">1148</a>\n<a href=\"#1149\" id=\"1149\" class=\"line-highlighted\">1149</a>\n<a href=\"#1150\" id=\"1150\" class=\"line-highlighted\">1150</a>\n<a href=\"#1151\" id=\"1151\" class=\"line-highlighted\">1151</a>\n<a href=\"#1152\" id=\"1152\" class=\"line-highlighted\">1152</a>\n<a href=\"#1153\" id=\"1153\" class=\"line-highlighted\">1153</a>\n<a href=\"#1154\" id=\"1154\" class=\"line-highlighted\">1154</a>\n<a href=\"#1155\" id=\"1155\" class=\"line-highlighted\">1155</a>\n<a href=\"#1156\" id=\"1156\" class=\"line-highlighted\">1156</a>\n<a href=\"#1157\" id=\"1157\" class=\"line-highlighted\">1157</a>\n<a href=\"#1158\" id=\"1158\" class=\"line-highlighted\">1158</a>\n<a href=\"#1159\" id=\"1159\" class=\"line-highlighted\">1159</a>\n<a href=\"#1160\" id=\"1160\" class=\"line-highlighted\">1160</a>\n<a href=\"#1161\" id=\"1161\" class=\"line-highlighted\">1161</a>\n<a href=\"#1162\" id=\"1162\" class=\"line-highlighted\">1162</a>\n<a href=\"#1163\" id=\"1163\" class=\"line-highlighted\">1163</a>\n<a href=\"#1164\" id=\"1164\" class=\"line-highlighted\">1164</a>\n<a href=\"#1165\" id=\"1165\" class=\"line-highlighted\">1165</a>\n<a href=\"#1166\" id=\"1166\" class=\"line-highlighted\">1166</a>\n<a href=\"#1167\" id=\"1167\" class=\"line-highlighted\">1167</a>\n<a href=\"#1168\" id=\"1168\" class=\"line-highlighted\">1168</a>\n<a href=\"#1169\" id=\"1169\" class=\"line-highlighted\">1169</a>\n<a href=\"#1170\" id=\"1170\" class=\"line-highlighted\">1170</a>\n<a href=\"#1171\" id=\"1171\" class=\"line-highlighted\">1171</a>\n<a href=\"#1172\" id=\"1172\" class=\"line-highlighted\">1172</a>\n<a href=\"#1173\" id=\"1173\" class=\"line-highlighted\">1173</a>\n<a href=\"#1174\" id=\"1174\" class=\"line-highlighted\">1174</a>\n<a href=\"#1175\" id=\"1175\" class=\"line-highlighted\">1175</a>\n<a href=\"#1176\" id=\"1176\" class=\"line-highlighted\">1176</a>\n<a href=\"#1177\" id=\"1177\" class=\"line-highlighted\">1177</a>\n<a href=\"#1178\" id=\"1178\" class=\"line-highlighted\">1178</a>\n<a href=\"#1179\" id=\"1179\" class=\"line-highlighted\">1179</a>\n<a href=\"#1180\" id=\"1180\" class=\"line-highlighted\">1180</a>\n<a href=\"#1181\" id=\"1181\" class=\"line-highlighted\">1181</a>\n<a href=\"#1182\" id=\"1182\" class=\"line-highlighted\">1182</a>\n<a href=\"#1183\" id=\"1183\" class=\"line-highlighted\">1183</a>\n<a href=\"#1184\" id=\"1184\" class=\"line-highlighted\">1184</a>\n<a href=\"#1185\" id=\"1185\" class=\"line-highlighted\">1185</a>\n<a href=\"#1186\" id=\"1186\" class=\"line-highlighted\">1186</a>\n<a href=\"#1187\" id=\"1187\" class=\"line-highlighted\">1187</a>\n<a href=\"#1188\" id=\"1188\" class=\"line-highlighted\">1188</a>\n<a href=\"#1189\" id=\"1189\" class=\"line-highlighted\">1189</a>\n<a href=\"#1190\" id=\"1190\" class=\"line-highlighted\">1190</a>\n<a href=\"#1191\" id=\"1191\" class=\"line-highlighted\">1191</a>\n<a href=\"#1192\" id=\"1192\" class=\"line-highlighted\">1192</a>\n<a href=\"#1193\" id=\"1193\" class=\"line-highlighted\">1193</a>\n<a href=\"#1194\" id=\"1194\" class=\"line-highlighted\">1194</a>\n<a href=\"#1195\" id=\"1195\" class=\"line-highlighted\">1195</a>\n<a href=\"#1196\" id=\"1196\" class=\"line-highlighted\">1196</a>\n<a href=\"#1197\" id=\"1197\" class=\"line-highlighted\">1197</a>\n<a href=\"#1198\" id=\"1198\" class=\"line-highlighted\">1198</a>\n<a href=\"#1199\" id=\"1199\" class=\"line-highlighted\">1199</a>\n<a href=\"#1200\" id=\"1200\" class=\"line-highlighted\">1200</a>\n<a href=\"#1201\" id=\"1201\" class=\"line-highlighted\">1201</a>\n<a href=\"#1202\" id=\"1202\" class=\"line-highlighted\">1202</a>\n<a href=\"#1203\" id=\"1203\" class=\"line-highlighted\">1203</a>\n<a href=\"#1204\" id=\"1204\" class=\"line-highlighted\">1204</a>\n<a href=\"#1205\" id=\"1205\" class=\"line-highlighted\">1205</a>\n<a href=\"#1206\" id=\"1206\" class=\"line-highlighted\">1206</a>\n<a href=\"#1207\" id=\"1207\" class=\"line-highlighted\">1207</a>\n<a href=\"#1208\" id=\"1208\" class=\"line-highlighted\">1208</a>\n<a href=\"#1209\" id=\"1209\" class=\"line-highlighted\">1209</a>\n<a href=\"#1210\" id=\"1210\" class=\"line-highlighted\">1210</a>\n<a href=\"#1211\" id=\"1211\" class=\"line-highlighted\">1211</a>\n<a href=\"#1212\" id=\"1212\" class=\"line-highlighted\">1212</a>\n<a href=\"#1213\" id=\"1213\" class=\"line-highlighted\">1213</a>\n<a href=\"#1214\" id=\"1214\" class=\"line-highlighted\">1214</a>\n<a href=\"#1215\" id=\"1215\" class=\"line-highlighted\">1215</a>\n<a href=\"#1216\" id=\"1216\" class=\"line-highlighted\">1216</a>\n<a href=\"#1217\" id=\"1217\" class=\"line-highlighted\">1217</a>\n<a href=\"#1218\" id=\"1218\" class=\"line-highlighted\">1218</a>\n<a href=\"#1219\" id=\"1219\" class=\"line-highlighted\">1219</a>\n<a href=\"#1220\" id=\"1220\" class=\"line-highlighted\">1220</a>\n<a href=\"#1221\" id=\"1221\" class=\"line-highlighted\">1221</a>\n<a href=\"#1222\" id=\"1222\" class=\"line-highlighted\">1222</a>\n<a href=\"#1223\" id=\"1223\" class=\"line-highlighted\">1223</a>\n<a href=\"#1224\" id=\"1224\" class=\"line-highlighted\">1224</a>\n<a href=\"#1225\" id=\"1225\" class=\"line-highlighted\">1225</a>\n<a href=\"#1226\" id=\"1226\" class=\"line-highlighted\">1226</a>\n<a href=\"#1227\" id=\"1227\" class=\"line-highlighted\">1227</a>\n<a href=\"#1228\" id=\"1228\" class=\"line-highlighted\">1228</a>\n<a href=\"#1229\" id=\"1229\" class=\"line-highlighted\">1229</a>\n<a href=\"#1230\" id=\"1230\" class=\"line-highlighted\">1230</a>\n<a href=\"#1231\" id=\"1231\" class=\"line-highlighted\">1231</a>\n<a href=\"#1232\" id=\"1232\" class=\"line-highlighted\">1232</a>\n<a href=\"#1233\" id=\"1233\" class=\"line-highlighted\">1233</a>\n<a href=\"#1234\" id=\"1234\" class=\"line-highlighted\">1234</a>\n<a href=\"#1235\" id=\"1235\" class=\"line-highlighted\">1235</a>\n<a href=\"#1236\" id=\"1236\" class=\"line-highlighted\">1236</a>\n<a href=\"#1237\" id=\"1237\" class=\"line-highlighted\">1237</a>\n<a href=\"#1238\" id=\"1238\" class=\"line-highlighted\">1238</a>\n<a href=\"#1239\" id=\"1239\" class=\"line-highlighted\">1239</a>\n<a href=\"#1240\" id=\"1240\" class=\"line-highlighted\">1240</a>\n<a href=\"#1241\" id=\"1241\" class=\"line-highlighted\">1241</a>\n<a href=\"#1242\" id=\"1242\" class=\"line-highlighted\">1242</a>\n<a href=\"#1243\" id=\"1243\" class=\"line-highlighted\">1243</a>\n<a href=\"#1244\" id=\"1244\" class=\"line-highlighted\">1244</a>\n<a href=\"#1245\" id=\"1245\" class=\"line-highlighted\">1245</a>\n<a href=\"#1246\" id=\"1246\" class=\"line-highlighted\">1246</a>\n<a href=\"#1247\" id=\"1247\" class=\"line-highlighted\">1247</a>\n<a href=\"#1248\" id=\"1248\" class=\"line-highlighted\">1248</a>\n<a href=\"#1249\" id=\"1249\" class=\"line-highlighted\">1249</a>\n<a href=\"#1250\" id=\"1250\" class=\"line-highlighted\">1250</a>\n<a href=\"#1251\" id=\"1251\" class=\"line-highlighted\">1251</a>\n<a href=\"#1252\" id=\"1252\" class=\"line-highlighted\">1252</a>\n<a href=\"#1253\" id=\"1253\" class=\"line-highlighted\">1253</a>\n<a href=\"#1254\" id=\"1254\" class=\"line-highlighted\">1254</a>\n<a href=\"#1255\" id=\"1255\" class=\"line-highlighted\">1255</a>\n<a href=\"#1256\" id=\"1256\" class=\"line-highlighted\">1256</a>\n<a href=\"#1257\" id=\"1257\" class=\"line-highlighted\">1257</a>\n<a href=\"#1258\" id=\"1258\" class=\"line-highlighted\">1258</a>\n<a href=\"#1259\" id=\"1259\" class=\"line-highlighted\">1259</a>\n<a href=\"#1260\" id=\"1260\" class=\"line-highlighted\">1260</a>\n<a href=\"#1261\" id=\"1261\" class=\"line-highlighted\">1261</a>\n<a href=\"#1262\" id=\"1262\" class=\"line-highlighted\">1262</a>\n<a href=\"#1263\" id=\"1263\" class=\"line-highlighted\">1263</a>\n<a href=\"#1264\" id=\"1264\" class=\"line-highlighted\">1264</a>\n<a href=\"#1265\" id=\"1265\" class=\"line-highlighted\">1265</a>\n<a href=\"#1266\" id=\"1266\" class=\"line-highlighted\">1266</a>\n<a href=\"#1267\" id=\"1267\" class=\"line-highlighted\">1267</a>\n<a href=\"#1268\" id=\"1268\" class=\"line-highlighted\">1268</a>\n<a href=\"#1269\" id=\"1269\" class=\"line-highlighted\">1269</a>\n<a href=\"#1270\" id=\"1270\" class=\"line-highlighted\">1270</a>\n<a href=\"#1271\" id=\"1271\" class=\"line-highlighted\">1271</a>\n<a href=\"#1272\" id=\"1272\" class=\"line-highlighted\">1272</a>\n<a href=\"#1273\" id=\"1273\" class=\"line-highlighted\">1273</a>\n<a href=\"#1274\" id=\"1274\" class=\"line-highlighted\">1274</a>\n<a href=\"#1275\" id=\"1275\" class=\"line-highlighted\">1275</a>\n<a href=\"#1276\" id=\"1276\" class=\"line-highlighted\">1276</a>\n<a href=\"#1277\" id=\"1277\" class=\"line-highlighted\">1277</a>\n<a href=\"#1278\" id=\"1278\" class=\"line-highlighted\">1278</a>\n<a href=\"#1279\" id=\"1279\" class=\"line-highlighted\">1279</a>\n<a href=\"#1280\" id=\"1280\" class=\"line-highlighted\">1280</a>\n<a href=\"#1281\" id=\"1281\" class=\"line-highlighted\">1281</a>\n<a href=\"#1282\" id=\"1282\" class=\"line-highlighted\">1282</a>\n<a href=\"#1283\" id=\"1283\" class=\"line-highlighted\">1283</a>\n<a href=\"#1284\" id=\"1284\" class=\"line-highlighted\">1284</a>\n<a href=\"#1285\" id=\"1285\" class=\"line-highlighted\">1285</a>\n<a href=\"#1286\" id=\"1286\" class=\"line-highlighted\">1286</a>\n<a href=\"#1287\" id=\"1287\" class=\"line-highlighted\">1287</a>\n<a href=\"#1288\" id=\"1288\" class=\"line-highlighted\">1288</a>\n<a href=\"#1289\" id=\"1289\" class=\"line-highlighted\">1289</a>\n<a href=\"#1290\" id=\"1290\" class=\"line-highlighted\">1290</a>\n<a href=\"#1291\" id=\"1291\" class=\"line-highlighted\">1291</a>\n<a href=\"#1292\" id=\"1292\" class=\"line-highlighted\">1292</a>\n<a href=\"#1293\" id=\"1293\" class=\"line-highlighted\">1293</a>\n<a href=\"#1294\" id=\"1294\" class=\"line-highlighted\">1294</a>\n<a href=\"#1295\" id=\"1295\" class=\"line-highlighted\">1295</a>\n<a href=\"#1296\" id=\"1296\" class=\"line-highlighted\">1296</a>\n<a href=\"#1297\" id=\"1297\" class=\"line-highlighted\">1297</a>\n<a href=\"#1298\" id=\"1298\" class=\"line-highlighted\">1298</a>\n<a href=\"#1299\" id=\"1299\" class=\"line-highlighted\">1299</a>\n<a href=\"#1300\" id=\"1300\" class=\"line-highlighted\">1300</a>\n<a href=\"#1301\" id=\"1301\" class=\"line-highlighted\">1301</a>\n<a href=\"#1302\" id=\"1302\" class=\"line-highlighted\">1302</a>\n<a href=\"#1303\" id=\"1303\" class=\"line-highlighted\">1303</a>\n<a href=\"#1304\" id=\"1304\" class=\"line-highlighted\">1304</a>\n<a href=\"#1305\" id=\"1305\" class=\"line-highlighted\">1305</a>\n<a href=\"#1306\" id=\"1306\" class=\"line-highlighted\">1306</a>\n<a href=\"#1307\" id=\"1307\" class=\"line-highlighted\">1307</a>\n<a href=\"#1308\" id=\"1308\" class=\"line-highlighted\">1308</a>\n<a href=\"#1309\" id=\"1309\" class=\"line-highlighted\">1309</a>\n<a href=\"#1310\" id=\"1310\" class=\"line-highlighted\">1310</a>\n<a href=\"#1311\" id=\"1311\" class=\"line-highlighted\">1311</a>\n<a href=\"#1312\" id=\"1312\" class=\"line-highlighted\">1312</a>\n<a href=\"#1313\" id=\"1313\" class=\"line-highlighted\">1313</a>\n<a href=\"#1314\" id=\"1314\" class=\"line-highlighted\">1314</a>\n<a href=\"#1315\" id=\"1315\" class=\"line-highlighted\">1315</a>\n<a href=\"#1316\" id=\"1316\" class=\"line-highlighted\">1316</a>\n<a href=\"#1317\" id=\"1317\" class=\"line-highlighted\">1317</a>\n<a href=\"#1318\" id=\"1318\" class=\"line-highlighted\">1318</a>\n<a href=\"#1319\" id=\"1319\" class=\"line-highlighted\">1319</a>\n<a href=\"#1320\" id=\"1320\" class=\"line-highlighted\">1320</a>\n<a href=\"#1321\" id=\"1321\" class=\"line-highlighted\">1321</a>\n<a href=\"#1322\" id=\"1322\" class=\"line-highlighted\">1322</a>\n<a href=\"#1323\" id=\"1323\" class=\"line-highlighted\">1323</a>\n<a href=\"#1324\" id=\"1324\" class=\"line-highlighted\">1324</a>\n<a href=\"#1325\" id=\"1325\" class=\"line-highlighted\">1325</a>\n<a href=\"#1326\" id=\"1326\" class=\"line-highlighted\">1326</a>\n<a href=\"#1327\" id=\"1327\" class=\"line-highlighted\">1327</a>\n<a href=\"#1328\" id=\"1328\" class=\"line-highlighted\">1328</a>\n<a href=\"#1329\" id=\"1329\" class=\"line-highlighted\">1329</a>\n<a href=\"#1330\" id=\"1330\" class=\"line-highlighted\">1330</a>\n<a href=\"#1331\" id=\"1331\" class=\"line-highlighted\">1331</a>\n<a href=\"#1332\" id=\"1332\" class=\"line-highlighted\">1332</a>\n<a href=\"#1333\" id=\"1333\" class=\"line-highlighted\">1333</a>\n<a href=\"#1334\" id=\"1334\" class=\"line-highlighted\">1334</a>\n<a href=\"#1335\" id=\"1335\" class=\"line-highlighted\">1335</a>\n<a href=\"#1336\" id=\"1336\" class=\"line-highlighted\">1336</a>\n<a href=\"#1337\" id=\"1337\" class=\"line-highlighted\">1337</a>\n<a href=\"#1338\" id=\"1338\" class=\"line-highlighted\">1338</a>\n<a href=\"#1339\" id=\"1339\" class=\"line-highlighted\">1339</a>\n<a href=\"#1340\" id=\"1340\" class=\"line-highlighted\">1340</a>\n<a href=\"#1341\" id=\"1341\" class=\"line-highlighted\">1341</a>\n<a href=\"#1342\" id=\"1342\" class=\"line-highlighted\">1342</a>\n<a href=\"#1343\" id=\"1343\" class=\"line-highlighted\">1343</a>\n<a href=\"#1344\" id=\"1344\" class=\"line-highlighted\">1344</a>\n<a href=\"#1345\" id=\"1345\" class=\"line-highlighted\">1345</a>\n<a href=\"#1346\" id=\"1346\" class=\"line-highlighted\">1346</a>\n<a href=\"#1347\" id=\"1347\" class=\"line-highlighted\">1347</a>\n<a href=\"#1348\" id=\"1348\" class=\"line-highlighted\">1348</a>\n<a href=\"#1349\" id=\"1349\" class=\"line-highlighted\">1349</a>\n<a href=\"#1350\" id=\"1350\" class=\"line-highlighted\">1350</a>\n<a href=\"#1351\" id=\"1351\" class=\"line-highlighted\">1351</a>\n<a href=\"#1352\" id=\"1352\" class=\"line-highlighted\">1352</a>\n<a href=\"#1353\" id=\"1353\" class=\"line-highlighted\">1353</a>\n<a href=\"#1354\" id=\"1354\" class=\"line-highlighted\">1354</a>\n<a href=\"#1355\" id=\"1355\" class=\"line-highlighted\">1355</a>\n<a href=\"#1356\" id=\"1356\" class=\"line-highlighted\">1356</a>\n<a href=\"#1357\" id=\"1357\" class=\"line-highlighted\">1357</a>\n<a href=\"#1358\" id=\"1358\" class=\"line-highlighted\">1358</a>\n<a href=\"#1359\" id=\"1359\" class=\"line-highlighted\">1359</a>\n<a href=\"#1360\" id=\"1360\" class=\"line-highlighted\">1360</a>\n<a href=\"#1361\" id=\"1361\" class=\"line-highlighted\">1361</a>\n<a href=\"#1362\" id=\"1362\" class=\"line-highlighted\">1362</a>\n<a href=\"#1363\" id=\"1363\" class=\"line-highlighted\">1363</a>\n<a href=\"#1364\" id=\"1364\" class=\"line-highlighted\">1364</a>\n<a href=\"#1365\" id=\"1365\" class=\"line-highlighted\">1365</a>\n<a href=\"#1366\" id=\"1366\" class=\"line-highlighted\">1366</a>\n<a href=\"#1367\" id=\"1367\" class=\"line-highlighted\">1367</a>\n<a href=\"#1368\" id=\"1368\" class=\"line-highlighted\">1368</a>\n<a href=\"#1369\" id=\"1369\" class=\"line-highlighted\">1369</a>\n<a href=\"#1370\" id=\"1370\" class=\"line-highlighted\">1370</a>\n<a href=\"#1371\" id=\"1371\" class=\"line-highlighted\">1371</a>\n<a href=\"#1372\" id=\"1372\" class=\"line-highlighted\">1372</a>\n<a href=\"#1373\" id=\"1373\" class=\"line-highlighted\">1373</a>\n<a href=\"#1374\" id=\"1374\" class=\"line-highlighted\">1374</a>\n<a href=\"#1375\" id=\"1375\" class=\"line-highlighted\">1375</a>\n<a href=\"#1376\" id=\"1376\" class=\"line-highlighted\">1376</a>\n<a href=\"#1377\" id=\"1377\" class=\"line-highlighted\">1377</a>\n<a href=\"#1378\" id=\"1378\" class=\"line-highlighted\">1378</a>\n<a href=\"#1379\" id=\"1379\" class=\"line-highlighted\">1379</a>\n<a href=\"#1380\" id=\"1380\" class=\"line-highlighted\">1380</a>\n<a href=\"#1381\" id=\"1381\" class=\"line-highlighted\">1381</a>\n<a href=\"#1382\" id=\"1382\" class=\"line-highlighted\">1382</a>\n<a href=\"#1383\" id=\"1383\" class=\"line-highlighted\">1383</a>\n<a href=\"#1384\" id=\"1384\" class=\"line-highlighted\">1384</a>\n<a href=\"#1385\" id=\"1385\" class=\"line-highlighted\">1385</a>\n<a href=\"#1386\" id=\"1386\" class=\"line-highlighted\">1386</a>\n<a href=\"#1387\" id=\"1387\" class=\"line-highlighted\">1387</a>\n<a href=\"#1388\" id=\"1388\" class=\"line-highlighted\">1388</a>\n<a href=\"#1389\" id=\"1389\" class=\"line-highlighted\">1389</a>\n<a href=\"#1390\" id=\"1390\" class=\"line-highlighted\">1390</a>\n<a href=\"#1391\" id=\"1391\" class=\"line-highlighted\">1391</a>\n<a href=\"#1392\" id=\"1392\" class=\"line-highlighted\">1392</a>\n<a href=\"#1393\" id=\"1393\" class=\"line-highlighted\">1393</a>\n<a href=\"#1394\" id=\"1394\" class=\"line-highlighted\">1394</a>\n<a href=\"#1395\" id=\"1395\" class=\"line-highlighted\">1395</a>\n<a href=\"#1396\" id=\"1396\" class=\"line-highlighted\">1396</a>\n<a href=\"#1397\" id=\"1397\" class=\"line-highlighted\">1397</a>\n<a href=\"#1398\" id=\"1398\" class=\"line-highlighted\">1398</a>\n<a href=\"#1399\" id=\"1399\" class=\"line-highlighted\">1399</a>\n<a href=\"#1400\" id=\"1400\" class=\"line-highlighted\">1400</a>\n<a href=\"#1401\" id=\"1401\" class=\"line-highlighted\">1401</a>\n<a href=\"#1402\" id=\"1402\" class=\"line-highlighted\">1402</a>\n<a href=\"#1403\" id=\"1403\" class=\"line-highlighted\">1403</a>\n<a href=\"#1404\" id=\"1404\" class=\"line-highlighted\">1404</a>\n<a href=\"#1405\" id=\"1405\" class=\"line-highlighted\">1405</a>\n<a href=\"#1406\" id=\"1406\" class=\"line-highlighted\">1406</a>\n<a href=\"#1407\" id=\"1407\" class=\"line-highlighted\">1407</a>\n<a href=\"#1408\" id=\"1408\" class=\"line-highlighted\">1408</a>\n<a href=\"#1409\" id=\"1409\" class=\"line-highlighted\">1409</a>\n<a href=\"#1410\" id=\"1410\" class=\"line-highlighted\">1410</a>\n<a href=\"#1411\" id=\"1411\" class=\"line-highlighted\">1411</a>\n<a href=\"#1412\" id=\"1412\" class=\"line-highlighted\">1412</a>\n<a href=\"#1413\" id=\"1413\" class=\"line-highlighted\">1413</a>\n<a href=\"#1414\" id=\"1414\" class=\"line-highlighted\">1414</a>\n<a href=\"#1415\" id=\"1415\" class=\"line-highlighted\">1415</a>\n<a href=\"#1416\" id=\"1416\" class=\"line-highlighted\">1416</a>\n<a href=\"#1417\" id=\"1417\" class=\"line-highlighted\">1417</a>\n<a href=\"#1418\" id=\"1418\" class=\"line-highlighted\">1418</a>\n<a href=\"#1419\" id=\"1419\" class=\"line-highlighted\">1419</a>\n<a href=\"#1420\" id=\"1420\" class=\"line-highlighted\">1420</a>\n<a href=\"#1421\" id=\"1421\" class=\"line-highlighted\">1421</a>\n<a href=\"#1422\" id=\"1422\" class=\"line-highlighted\">1422</a>\n<a href=\"#1423\" id=\"1423\" class=\"line-highlighted\">1423</a>\n<a href=\"#1424\" id=\"1424\" class=\"line-highlighted\">1424</a>\n<a href=\"#1425\" id=\"1425\" class=\"line-highlighted\">1425</a>\n<a href=\"#1426\" id=\"1426\" class=\"line-highlighted\">1426</a>\n<a href=\"#1427\" id=\"1427\" class=\"line-highlighted\">1427</a>\n<a href=\"#1428\" id=\"1428\" class=\"line-highlighted\">1428</a>\n<a href=\"#1429\" id=\"1429\" class=\"line-highlighted\">1429</a>\n<a href=\"#1430\" id=\"1430\" class=\"line-highlighted\">1430</a>\n<a href=\"#1431\" id=\"1431\" class=\"line-highlighted\">1431</a>\n<a href=\"#1432\" id=\"1432\" class=\"line-highlighted\">1432</a>\n<a href=\"#1433\" id=\"1433\" class=\"line-highlighted\">1433</a>\n<a href=\"#1434\" id=\"1434\" class=\"line-highlighted\">1434</a>\n<a href=\"#1435\" id=\"1435\" class=\"line-highlighted\">1435</a>\n<a href=\"#1436\" id=\"1436\" class=\"line-highlighted\">1436</a>\n<a href=\"#1437\" id=\"1437\" class=\"line-highlighted\">1437</a>\n<a href=\"#1438\" id=\"1438\" class=\"line-highlighted\">1438</a>\n<a href=\"#1439\" id=\"1439\" class=\"line-highlighted\">1439</a>\n<a href=\"#1440\" id=\"1440\" class=\"line-highlighted\">1440</a>\n<a href=\"#1441\" id=\"1441\" class=\"line-highlighted\">1441</a>\n<a href=\"#1442\" id=\"1442\" class=\"line-highlighted\">1442</a>\n<a href=\"#1443\" id=\"1443\" class=\"line-highlighted\">1443</a>\n<a href=\"#1444\" id=\"1444\" class=\"line-highlighted\">1444</a>\n<a href=\"#1445\" id=\"1445\" class=\"line-highlighted\">1445</a>\n<a href=\"#1446\" id=\"1446\" class=\"line-highlighted\">1446</a>\n<a href=\"#1447\" id=\"1447\" class=\"line-highlighted\">1447</a>\n<a href=\"#1448\" id=\"1448\" class=\"line-highlighted\">1448</a>\n<a href=\"#1449\" id=\"1449\" class=\"line-highlighted\">1449</a>\n<a href=\"#1450\" id=\"1450\" class=\"line-highlighted\">1450</a>\n<a href=\"#1451\" id=\"1451\" class=\"line-highlighted\">1451</a>\n<a href=\"#1452\" id=\"1452\" class=\"line-highlighted\">1452</a>\n<a href=\"#1453\" id=\"1453\" class=\"line-highlighted\">1453</a>\n<a href=\"#1454\" id=\"1454\" class=\"line-highlighted\">1454</a>\n<a href=\"#1455\" id=\"1455\" class=\"line-highlighted\">1455</a>\n<a href=\"#1456\" id=\"1456\" class=\"line-highlighted\">1456</a>\n<a href=\"#1457\" id=\"1457\" class=\"line-highlighted\">1457</a>\n<a href=\"#1458\" id=\"1458\" class=\"line-highlighted\">1458</a>\n<a href=\"#1459\" id=\"1459\" class=\"line-highlighted\">1459</a>\n<a href=\"#1460\" id=\"1460\" class=\"line-highlighted\">1460</a>\n<a href=\"#1461\" id=\"1461\" class=\"line-highlighted\">1461</a>\n<a href=\"#1462\" id=\"1462\" class=\"line-highlighted\">1462</a>\n<a href=\"#1463\" id=\"1463\" class=\"line-highlighted\">1463</a>\n<a href=\"#1464\" id=\"1464\" class=\"line-highlighted\">1464</a>\n<a href=\"#1465\" id=\"1465\" class=\"line-highlighted\">1465</a>\n<a href=\"#1466\" id=\"1466\" class=\"line-highlighted\">1466</a>\n<a href=\"#1467\" id=\"1467\" class=\"line-highlighted\">1467</a>\n<a href=\"#1468\" id=\"1468\" class=\"line-highlighted\">1468</a>\n<a href=\"#1469\" id=\"1469\" class=\"line-highlighted\">1469</a>\n<a href=\"#1470\" id=\"1470\" class=\"line-highlighted\">1470</a>\n<a href=\"#1471\" id=\"1471\" class=\"line-highlighted\">1471</a>\n<a href=\"#1472\" id=\"1472\" class=\"line-highlighted\">1472</a>\n<a href=\"#1473\" id=\"1473\" class=\"line-highlighted\">1473</a>\n<a href=\"#1474\" id=\"1474\" class=\"line-highlighted\">1474</a>\n<a href=\"#1475\" id=\"1475\" class=\"line-highlighted\">1475</a>\n<a href=\"#1476\" id=\"1476\" class=\"line-highlighted\">1476</a>\n<a href=\"#1477\" id=\"1477\" class=\"line-highlighted\">1477</a>\n<a href=\"#1478\" id=\"1478\" class=\"line-highlighted\">1478</a>\n<a href=\"#1479\" id=\"1479\" class=\"line-highlighted\">1479</a>\n<a href=\"#1480\" id=\"1480\" class=\"line-highlighted\">1480</a>\n<a href=\"#1481\" id=\"1481\" class=\"line-highlighted\">1481</a>\n<a href=\"#1482\" id=\"1482\" class=\"line-highlighted\">1482</a>\n<a href=\"#1483\" id=\"1483\" class=\"line-highlighted\">1483</a>\n<a href=\"#1484\" id=\"1484\" class=\"line-highlighted\">1484</a>\n<a href=\"#1485\" id=\"1485\" class=\"line-highlighted\">1485</a>\n<a href=\"#1486\" id=\"1486\" class=\"line-highlighted\">1486</a>\n<a href=\"#1487\" id=\"1487\" class=\"line-highlighted\">1487</a>\n<a href=\"#1488\" id=\"1488\" class=\"line-highlighted\">1488</a>\n<a href=\"#1489\" id=\"1489\" class=\"line-highlighted\">1489</a>\n<a href=\"#1490\" id=\"1490\" class=\"line-highlighted\">1490</a>\n<a href=\"#1491\" id=\"1491\" class=\"line-highlighted\">1491</a>\n<a href=\"#1492\" id=\"1492\" class=\"line-highlighted\">1492</a>\n<a href=\"#1493\" id=\"1493\" class=\"line-highlighted\">1493</a>\n<a href=\"#1494\" id=\"1494\" class=\"line-highlighted\">1494</a>\n<a href=\"#1495\" id=\"1495\" class=\"line-highlighted\">1495</a>\n<a href=\"#1496\" id=\"1496\" class=\"line-highlighted\">1496</a>\n<a href=\"#1497\" id=\"1497\" class=\"line-highlighted\">1497</a>\n<a href=\"#1498\" id=\"1498\" class=\"line-highlighted\">1498</a>\n<a href=\"#1499\" id=\"1499\" class=\"line-highlighted\">1499</a>\n<a href=\"#1500\" id=\"1500\" class=\"line-highlighted\">1500</a>\n<a href=\"#1501\" id=\"1501\" class=\"line-highlighted\">1501</a>\n<a href=\"#1502\" id=\"1502\" class=\"line-highlighted\">1502</a>\n<a href=\"#1503\" id=\"1503\" class=\"line-highlighted\">1503</a>\n<a href=\"#1504\" id=\"1504\" class=\"line-highlighted\">1504</a>\n<a href=\"#1505\" id=\"1505\" class=\"line-highlighted\">1505</a>\n<a href=\"#1506\" id=\"1506\" class=\"line-highlighted\">1506</a>\n<a href=\"#1507\" id=\"1507\" class=\"line-highlighted\">1507</a>\n<a href=\"#1508\" id=\"1508\" class=\"line-highlighted\">1508</a>\n<a href=\"#1509\" id=\"1509\" class=\"line-highlighted\">1509</a>\n<a href=\"#1510\" id=\"1510\" class=\"line-highlighted\">1510</a>\n<a href=\"#1511\" id=\"1511\" class=\"line-highlighted\">1511</a>\n<a href=\"#1512\" id=\"1512\" class=\"line-highlighted\">1512</a>\n<a href=\"#1513\" id=\"1513\" class=\"line-highlighted\">1513</a>\n<a href=\"#1514\" id=\"1514\" class=\"line-highlighted\">1514</a>\n<a href=\"#1515\" id=\"1515\" class=\"line-highlighted\">1515</a>\n<a href=\"#1516\" id=\"1516\" class=\"line-highlighted\">1516</a>\n<a href=\"#1517\" id=\"1517\" class=\"line-highlighted\">1517</a>\n<a href=\"#1518\" id=\"1518\" class=\"line-highlighted\">1518</a>\n<a href=\"#1519\" id=\"1519\" class=\"line-highlighted\">1519</a>\n<a href=\"#1520\" id=\"1520\" class=\"line-highlighted\">1520</a>\n<a href=\"#1521\" id=\"1521\" class=\"line-highlighted\">1521</a>\n<a href=\"#1522\" id=\"1522\" class=\"line-highlighted\">1522</a>\n<a href=\"#1523\" id=\"1523\" class=\"line-highlighted\">1523</a>\n<a href=\"#1524\" id=\"1524\" class=\"line-highlighted\">1524</a>\n<a href=\"#1525\" id=\"1525\" class=\"line-highlighted\">1525</a>\n<a href=\"#1526\" id=\"1526\" class=\"line-highlighted\">1526</a>\n<a href=\"#1527\" id=\"1527\" class=\"line-highlighted\">1527</a>\n<a href=\"#1528\" id=\"1528\" class=\"line-highlighted\">1528</a>\n<a href=\"#1529\" id=\"1529\" class=\"line-highlighted\">1529</a>\n<a href=\"#1530\" id=\"1530\" class=\"line-highlighted\">1530</a>\n<a href=\"#1531\" id=\"1531\" class=\"line-highlighted\">1531</a>\n<a href=\"#1532\" id=\"1532\" class=\"line-highlighted\">1532</a>\n<a href=\"#1533\" id=\"1533\" class=\"line-highlighted\">1533</a>\n<a href=\"#1534\" id=\"1534\" class=\"line-highlighted\">1534</a>\n<a href=\"#1535\" id=\"1535\" class=\"line-highlighted\">1535</a>\n<a href=\"#1536\" id=\"1536\" class=\"line-highlighted\">1536</a>\n<a href=\"#1537\" id=\"1537\" class=\"line-highlighted\">1537</a>\n<a href=\"#1538\" id=\"1538\" class=\"line-highlighted\">1538</a>\n<a href=\"#1539\" id=\"1539\" class=\"line-highlighted\">1539</a>\n<a href=\"#1540\" id=\"1540\" class=\"line-highlighted\">1540</a>\n<a href=\"#1541\" id=\"1541\" class=\"line-highlighted\">1541</a>\n<a href=\"#1542\" id=\"1542\" class=\"line-highlighted\">1542</a>\n<a href=\"#1543\" id=\"1543\" class=\"line-highlighted\">1543</a>\n<a href=\"#1544\" id=\"1544\" class=\"line-highlighted\">1544</a>\n<a href=\"#1545\" id=\"1545\" class=\"line-highlighted\">1545</a>\n<a href=\"#1546\" id=\"1546\" class=\"line-highlighted\">1546</a>\n<a href=\"#1547\" id=\"1547\" class=\"line-highlighted\">1547</a>\n<a href=\"#1548\" id=\"1548\" class=\"line-highlighted\">1548</a>\n<a href=\"#1549\" id=\"1549\" class=\"line-highlighted\">1549</a>\n<a href=\"#1550\" id=\"1550\" class=\"line-highlighted\">1550</a>\n<a href=\"#1551\" id=\"1551\" class=\"line-highlighted\">1551</a>\n<a href=\"#1552\" id=\"1552\" class=\"line-highlighted\">1552</a>\n<a href=\"#1553\" id=\"1553\" class=\"line-highlighted\">1553</a>\n<a href=\"#1554\" id=\"1554\" class=\"line-highlighted\">1554</a>\n<a href=\"#1555\" id=\"1555\" class=\"line-highlighted\">1555</a>\n<a href=\"#1556\" id=\"1556\" class=\"line-highlighted\">1556</a>\n<a href=\"#1557\" id=\"1557\" class=\"line-highlighted\">1557</a>\n<a href=\"#1558\" id=\"1558\" class=\"line-highlighted\">1558</a>\n<a href=\"#1559\" id=\"1559\" class=\"line-highlighted\">1559</a>\n<a href=\"#1560\" id=\"1560\" class=\"line-highlighted\">1560</a>\n<a href=\"#1561\" id=\"1561\" class=\"line-highlighted\">1561</a>\n<a href=\"#1562\" id=\"1562\" class=\"line-highlighted\">1562</a>\n<a href=\"#1563\" id=\"1563\" class=\"line-highlighted\">1563</a>\n<a href=\"#1564\" id=\"1564\" class=\"line-highlighted\">1564</a>\n<a href=\"#1565\" id=\"1565\" class=\"line-highlighted\">1565</a>\n<a href=\"#1566\" id=\"1566\" class=\"line-highlighted\">1566</a>\n<a href=\"#1567\" id=\"1567\" class=\"line-highlighted\">1567</a>\n<a href=\"#1568\" id=\"1568\" class=\"line-highlighted\">1568</a>\n<a href=\"#1569\" id=\"1569\" class=\"line-highlighted\">1569</a>\n<a href=\"#1570\" id=\"1570\" class=\"line-highlighted\">1570</a>\n<a href=\"#1571\" id=\"1571\" class=\"line-highlighted\">1571</a>\n<a href=\"#1572\" id=\"1572\" class=\"line-highlighted\">1572</a>\n<a href=\"#1573\" id=\"1573\" class=\"line-highlighted\">1573</a>\n<a href=\"#1574\" id=\"1574\" class=\"line-highlighted\">1574</a>\n<a href=\"#1575\" id=\"1575\" class=\"line-highlighted\">1575</a>\n<a href=\"#1576\" id=\"1576\" class=\"line-highlighted\">1576</a>\n<a href=\"#1577\" id=\"1577\" class=\"line-highlighted\">1577</a>\n<a href=\"#1578\" id=\"1578\" class=\"line-highlighted\">1578</a>\n<a href=\"#1579\" id=\"1579\" class=\"line-highlighted\">1579</a>\n<a href=\"#1580\" id=\"1580\" class=\"line-highlighted\">1580</a>\n<a href=\"#1581\" id=\"1581\" class=\"line-highlighted\">1581</a>\n<a href=\"#1582\" id=\"1582\" class=\"line-highlighted\">1582</a>\n<a href=\"#1583\" id=\"1583\" class=\"line-highlighted\">1583</a>\n<a href=\"#1584\" id=\"1584\" class=\"line-highlighted\">1584</a>\n<a href=\"#1585\" id=\"1585\" class=\"line-highlighted\">1585</a>\n<a href=\"#1586\" id=\"1586\" class=\"line-highlighted\">1586</a>\n<a href=\"#1587\" id=\"1587\" class=\"line-highlighted\">1587</a>\n<a href=\"#1588\" id=\"1588\" class=\"line-highlighted\">1588</a>\n<a href=\"#1589\" id=\"1589\" class=\"line-highlighted\">1589</a>\n<a href=\"#1590\" id=\"1590\" class=\"line-highlighted\">1590</a>\n<a href=\"#1591\" id=\"1591\" class=\"line-highlighted\">1591</a>\n<a href=\"#1592\" id=\"1592\" class=\"line-highlighted\">1592</a>\n<a href=\"#1593\" id=\"1593\" class=\"line-highlighted\">1593</a>\n<a href=\"#1594\" id=\"1594\" class=\"line-highlighted\">1594</a>\n<a href=\"#1595\" id=\"1595\" class=\"line-highlighted\">1595</a>\n<a href=\"#1596\" id=\"1596\" class=\"line-highlighted\">1596</a>\n<a href=\"#1597\" id=\"1597\" class=\"line-highlighted\">1597</a>\n<a href=\"#1598\" id=\"1598\" class=\"line-highlighted\">1598</a>\n<a href=\"#1599\" id=\"1599\" class=\"line-highlighted\">1599</a>\n<a href=\"#1600\" id=\"1600\" class=\"line-highlighted\">1600</a>\n<a href=\"#1601\" id=\"1601\" class=\"line-highlighted\">1601</a>\n<a href=\"#1602\" id=\"1602\" class=\"line-highlighted\">1602</a>\n<a href=\"#1603\" id=\"1603\" class=\"line-highlighted\">1603</a>\n<a href=\"#1604\" id=\"1604\" class=\"line-highlighted\">1604</a>\n<a href=\"#1605\" id=\"1605\" class=\"line-highlighted\">1605</a>\n<a href=\"#1606\" id=\"1606\" class=\"line-highlighted\">1606</a>\n<a href=\"#1607\" id=\"1607\" class=\"line-highlighted\">1607</a>\n<a href=\"#1608\" id=\"1608\" class=\"line-highlighted\">1608</a>\n<a href=\"#1609\" id=\"1609\" class=\"line-highlighted\">1609</a>\n<a href=\"#1610\" id=\"1610\" class=\"line-highlighted\">1610</a>\n<a href=\"#1611\" id=\"1611\" class=\"line-highlighted\">1611</a>\n<a href=\"#1612\" id=\"1612\" class=\"line-highlighted\">1612</a>\n<a href=\"#1613\" id=\"1613\" class=\"line-highlighted\">1613</a>\n<a href=\"#1614\" id=\"1614\" class=\"line-highlighted\">1614</a>\n<a href=\"#1615\" id=\"1615\" class=\"line-highlighted\">1615</a>\n<a href=\"#1616\" id=\"1616\" class=\"line-highlighted\">1616</a>\n<a href=\"#1617\" id=\"1617\" class=\"line-highlighted\">1617</a>\n<a href=\"#1618\" id=\"1618\" class=\"line-highlighted\">1618</a>\n<a href=\"#1619\" id=\"1619\" class=\"line-highlighted\">1619</a>\n<a href=\"#1620\" id=\"1620\" class=\"line-highlighted\">1620</a>\n<a href=\"#1621\" id=\"1621\" class=\"line-highlighted\">1621</a>\n<a href=\"#1622\" id=\"1622\" class=\"line-highlighted\">1622</a>\n<a href=\"#1623\" id=\"1623\" class=\"line-highlighted\">1623</a>\n<a href=\"#1624\" id=\"1624\" class=\"line-highlighted\">1624</a>\n<a href=\"#1625\" id=\"1625\" class=\"line-highlighted\">1625</a>\n<a href=\"#1626\" id=\"1626\" class=\"line-highlighted\">1626</a>\n<a href=\"#1627\" id=\"1627\" class=\"line-highlighted\">1627</a>\n<a href=\"#1628\" id=\"1628\" class=\"line-highlighted\">1628</a>\n<a href=\"#1629\" id=\"1629\" class=\"line-highlighted\">1629</a>\n<a href=\"#1630\" id=\"1630\" class=\"line-highlighted\">1630</a>\n<a href=\"#1631\" id=\"1631\" class=\"line-highlighted\">1631</a>\n<a href=\"#1632\" id=\"1632\" class=\"line-highlighted\">1632</a>\n<a href=\"#1633\" id=\"1633\" class=\"line-highlighted\">1633</a>\n<a href=\"#1634\" id=\"1634\" class=\"line-highlighted\">1634</a>\n<a href=\"#1635\" id=\"1635\" class=\"line-highlighted\">1635</a>\n<a href=\"#1636\" id=\"1636\" class=\"line-highlighted\">1636</a>\n<a href=\"#1637\" id=\"1637\" class=\"line-highlighted\">1637</a>\n<a href=\"#1638\" id=\"1638\" class=\"line-highlighted\">1638</a>\n<a href=\"#1639\" id=\"1639\" class=\"line-highlighted\">1639</a>\n<a href=\"#1640\" id=\"1640\" class=\"line-highlighted\">1640</a>\n<a href=\"#1641\" id=\"1641\" class=\"line-highlighted\">1641</a>\n<a href=\"#1642\" id=\"1642\" class=\"line-highlighted\">1642</a>\n<a href=\"#1643\" id=\"1643\" class=\"line-highlighted\">1643</a>\n<a href=\"#1644\" id=\"1644\" class=\"line-highlighted\">1644</a>\n<a href=\"#1645\" id=\"1645\" class=\"line-highlighted\">1645</a>\n<a href=\"#1646\" id=\"1646\" class=\"line-highlighted\">1646</a>\n<a href=\"#1647\" id=\"1647\" class=\"line-highlighted\">1647</a>\n<a href=\"#1648\" id=\"1648\" class=\"line-highlighted\">1648</a>\n<a href=\"#1649\" id=\"1649\" class=\"line-highlighted\">1649</a>\n<a href=\"#1650\" id=\"1650\" class=\"line-highlighted\">1650</a>\n<a href=\"#1651\" id=\"1651\" class=\"line-highlighted\">1651</a>\n<a href=\"#1652\" id=\"1652\" class=\"line-highlighted\">1652</a>\n<a href=\"#1653\" id=\"1653\" class=\"line-highlighted\">1653</a>\n<a href=\"#1654\" id=\"1654\" class=\"line-highlighted\">1654</a>\n<a href=\"#1655\" id=\"1655\" class=\"line-highlighted\">1655</a>\n<a href=\"#1656\" id=\"1656\" class=\"line-highlighted\">1656</a>\n<a href=\"#1657\" id=\"1657\" class=\"line-highlighted\">1657</a>\n<a href=\"#1658\" id=\"1658\" class=\"line-highlighted\">1658</a>\n<a href=\"#1659\" id=\"1659\" class=\"line-highlighted\">1659</a>\n<a href=\"#1660\" id=\"1660\" class=\"line-highlighted\">1660</a>\n<a href=\"#1661\" id=\"1661\" class=\"line-highlighted\">1661</a>\n<a href=\"#1662\" id=\"1662\" class=\"line-highlighted\">1662</a>\n<a href=\"#1663\" id=\"1663\" class=\"line-highlighted\">1663</a>\n<a href=\"#1664\" id=\"1664\" class=\"line-highlighted\">1664</a>\n<a href=\"#1665\" id=\"1665\" class=\"line-highlighted\">1665</a>\n<a href=\"#1666\" id=\"1666\" class=\"line-highlighted\">1666</a>\n<a href=\"#1667\" id=\"1667\" class=\"line-highlighted\">1667</a>\n<a href=\"#1668\" id=\"1668\" class=\"line-highlighted\">1668</a>\n<a href=\"#1669\" id=\"1669\" class=\"line-highlighted\">1669</a>\n<a href=\"#1670\" id=\"1670\" class=\"line-highlighted\">1670</a>\n<a href=\"#1671\" id=\"1671\" class=\"line-highlighted\">1671</a>\n<a href=\"#1672\" id=\"1672\" class=\"line-highlighted\">1672</a>\n<a href=\"#1673\" id=\"1673\" class=\"line-highlighted\">1673</a>\n<a href=\"#1674\" id=\"1674\" class=\"line-highlighted\">1674</a>\n<a href=\"#1675\" id=\"1675\" class=\"line-highlighted\">1675</a>\n<a href=\"#1676\" id=\"1676\" class=\"line-highlighted\">1676</a>\n<a href=\"#1677\" id=\"1677\" class=\"line-highlighted\">1677</a>\n<a href=\"#1678\" id=\"1678\" class=\"line-highlighted\">1678</a>\n<a href=\"#1679\" id=\"1679\" class=\"line-highlighted\">1679</a>\n<a href=\"#1680\" id=\"1680\" class=\"line-highlighted\">1680</a>\n<a href=\"#1681\" id=\"1681\" class=\"line-highlighted\">1681</a>\n<a href=\"#1682\" id=\"1682\" class=\"line-highlighted\">1682</a>\n<a href=\"#1683\" id=\"1683\" class=\"line-highlighted\">1683</a>\n<a href=\"#1684\" id=\"1684\" class=\"line-highlighted\">1684</a>\n<a href=\"#1685\" id=\"1685\" class=\"line-highlighted\">1685</a>\n<a href=\"#1686\" id=\"1686\" class=\"line-highlighted\">1686</a>\n<a href=\"#1687\" id=\"1687\" class=\"line-highlighted\">1687</a>\n<a href=\"#1688\" id=\"1688\" class=\"line-highlighted\">1688</a>\n<a href=\"#1689\" id=\"1689\" class=\"line-highlighted\">1689</a>\n<a href=\"#1690\" id=\"1690\" class=\"line-highlighted\">1690</a>\n<a href=\"#1691\" id=\"1691\" class=\"line-highlighted\">1691</a>\n<a href=\"#1692\" id=\"1692\" class=\"line-highlighted\">1692</a>\n<a href=\"#1693\" id=\"1693\" class=\"line-highlighted\">1693</a>\n<a href=\"#1694\" id=\"1694\" class=\"line-highlighted\">1694</a>\n<a href=\"#1695\" id=\"1695\" class=\"line-highlighted\">1695</a>\n<a href=\"#1696\" id=\"1696\" class=\"line-highlighted\">1696</a>\n<a href=\"#1697\" id=\"1697\" class=\"line-highlighted\">1697</a>\n<a href=\"#1698\" id=\"1698\" class=\"line-highlighted\">1698</a>\n<a href=\"#1699\" id=\"1699\" class=\"line-highlighted\">1699</a>\n<a href=\"#1700\" id=\"1700\" class=\"line-highlighted\">1700</a>\n<a href=\"#1701\" id=\"1701\" class=\"line-highlighted\">1701</a>\n<a href=\"#1702\" id=\"1702\" class=\"line-highlighted\">1702</a>\n<a href=\"#1703\" id=\"1703\" class=\"line-highlighted\">1703</a>\n<a href=\"#1704\" id=\"1704\" class=\"line-highlighted\">1704</a>\n<a href=\"#1705\" id=\"1705\" class=\"line-highlighted\">1705</a>\n<a href=\"#1706\" id=\"1706\" class=\"line-highlighted\">1706</a>\n<a href=\"#1707\" id=\"1707\" class=\"line-highlighted\">1707</a>\n<a href=\"#1708\" id=\"1708\" class=\"line-highlighted\">1708</a>\n<a href=\"#1709\" id=\"1709\" class=\"line-highlighted\">1709</a>\n<a href=\"#1710\" id=\"1710\" class=\"line-highlighted\">1710</a>\n<a href=\"#1711\" id=\"1711\" class=\"line-highlighted\">1711</a>\n<a href=\"#1712\" id=\"1712\" class=\"line-highlighted\">1712</a>\n<a href=\"#1713\" id=\"1713\" class=\"line-highlighted\">1713</a>\n<a href=\"#1714\" id=\"1714\" class=\"line-highlighted\">1714</a>\n<a href=\"#1715\" id=\"1715\" class=\"line-highlighted\">1715</a>\n<a href=\"#1716\" id=\"1716\" class=\"line-highlighted\">1716</a>\n<a href=\"#1717\" id=\"1717\" class=\"line-highlighted\">1717</a>\n<a href=\"#1718\" id=\"1718\" class=\"line-highlighted\">1718</a>\n<a href=\"#1719\" id=\"1719\" class=\"line-highlighted\">1719</a>\n<a href=\"#1720\" id=\"1720\" class=\"line-highlighted\">1720</a>\n<a href=\"#1721\" id=\"1721\" class=\"line-highlighted\">1721</a>\n<a href=\"#1722\" id=\"1722\" class=\"line-highlighted\">1722</a>\n<a href=\"#1723\" id=\"1723\" class=\"line-highlighted\">1723</a>\n<a href=\"#1724\" id=\"1724\" class=\"line-highlighted\">1724</a>\n<a href=\"#1725\" id=\"1725\" class=\"line-highlighted\">1725</a>\n<a href=\"#1726\" id=\"1726\" class=\"line-highlighted\">1726</a>\n<a href=\"#1727\" id=\"1727\" class=\"line-highlighted\">1727</a>\n<a href=\"#1728\" id=\"1728\" class=\"line-highlighted\">1728</a>\n<a href=\"#1729\" id=\"1729\" class=\"line-highlighted\">1729</a>\n<a href=\"#1730\" id=\"1730\" class=\"line-highlighted\">1730</a>\n<a href=\"#1731\" id=\"1731\" class=\"line-highlighted\">1731</a>\n<a href=\"#1732\" id=\"1732\" class=\"line-highlighted\">1732</a>\n<a href=\"#1733\" id=\"1733\" class=\"line-highlighted\">1733</a>\n<a href=\"#1734\" id=\"1734\" class=\"line-highlighted\">1734</a>\n<a href=\"#1735\" id=\"1735\" class=\"line-highlighted\">1735</a>\n<a href=\"#1736\" id=\"1736\" class=\"line-highlighted\">1736</a>\n<a href=\"#1737\" id=\"1737\" class=\"line-highlighted\">1737</a>\n<a href=\"#1738\" id=\"1738\" class=\"line-highlighted\">1738</a>\n<a href=\"#1739\" id=\"1739\" class=\"line-highlighted\">1739</a>\n<a href=\"#1740\" id=\"1740\" class=\"line-highlighted\">1740</a>\n<a href=\"#1741\" id=\"1741\" class=\"line-highlighted\">1741</a>\n<a href=\"#1742\" id=\"1742\" class=\"line-highlighted\">1742</a>\n<a href=\"#1743\" id=\"1743\" class=\"line-highlighted\">1743</a>\n<a href=\"#1744\" id=\"1744\" class=\"line-highlighted\">1744</a>\n<a href=\"#1745\" id=\"1745\" class=\"line-highlighted\">1745</a>\n<a href=\"#1746\" id=\"1746\" class=\"line-highlighted\">1746</a>\n<a href=\"#1747\" id=\"1747\" class=\"line-highlighted\">1747</a>\n<a href=\"#1748\" id=\"1748\" class=\"line-highlighted\">1748</a>\n<a href=\"#1749\" id=\"1749\" class=\"line-highlighted\">1749</a>\n<a href=\"#1750\" id=\"1750\" class=\"line-highlighted\">1750</a>\n<a href=\"#1751\" id=\"1751\" class=\"line-highlighted\">1751</a>\n<a href=\"#1752\" id=\"1752\" class=\"line-highlighted\">1752</a>\n<a href=\"#1753\" id=\"1753\" class=\"line-highlighted\">1753</a>\n<a href=\"#1754\" id=\"1754\" class=\"line-highlighted\">1754</a>\n<a href=\"#1755\" id=\"1755\" class=\"line-highlighted\">1755</a>\n<a href=\"#1756\" id=\"1756\" class=\"line-highlighted\">1756</a>\n<a href=\"#1757\" id=\"1757\" class=\"line-highlighted\">1757</a>\n<a href=\"#1758\" id=\"1758\" class=\"line-highlighted\">1758</a>\n<a href=\"#1759\" id=\"1759\" class=\"line-highlighted\">1759</a>\n<a href=\"#1760\" id=\"1760\" class=\"line-highlighted\">1760</a>\n<a href=\"#1761\" id=\"1761\" class=\"line-highlighted\">1761</a>\n<a href=\"#1762\" id=\"1762\" class=\"line-highlighted\">1762</a>\n<a href=\"#1763\" id=\"1763\" class=\"line-highlighted\">1763</a>\n<a href=\"#1764\" id=\"1764\" class=\"line-highlighted\">1764</a>\n<a href=\"#1765\" id=\"1765\" class=\"line-highlighted\">1765</a>\n<a href=\"#1766\" id=\"1766\" class=\"line-highlighted\">1766</a>\n<a href=\"#1767\" id=\"1767\" class=\"line-highlighted\">1767</a>\n<a href=\"#1768\" id=\"1768\" class=\"line-highlighted\">1768</a>\n<a href=\"#1769\" id=\"1769\" class=\"line-highlighted\">1769</a>\n<a href=\"#1770\" id=\"1770\" class=\"line-highlighted\">1770</a>\n<a href=\"#1771\" id=\"1771\" class=\"line-highlighted\">1771</a>\n<a href=\"#1772\" id=\"1772\" class=\"line-highlighted\">1772</a>\n<a href=\"#1773\" id=\"1773\" class=\"line-highlighted\">1773</a>\n<a href=\"#1774\" id=\"1774\" class=\"line-highlighted\">1774</a>\n<a href=\"#1775\" id=\"1775\" class=\"line-highlighted\">1775</a>\n<a href=\"#1776\" id=\"1776\" class=\"line-highlighted\">1776</a>\n<a href=\"#1777\" id=\"1777\" class=\"line-highlighted\">1777</a>\n<a href=\"#1778\" id=\"1778\" class=\"line-highlighted\">1778</a>\n<a href=\"#1779\" id=\"1779\" class=\"line-highlighted\">1779</a>\n<a href=\"#1780\" id=\"1780\" class=\"line-highlighted\">1780</a>\n<a href=\"#1781\" id=\"1781\" class=\"line-highlighted\">1781</a>\n<a href=\"#1782\" id=\"1782\" class=\"line-highlighted\">1782</a>\n<a href=\"#1783\" id=\"1783\" class=\"line-highlighted\">1783</a>\n<a href=\"#1784\" id=\"1784\" class=\"line-highlighted\">1784</a>\n<a href=\"#1785\" id=\"1785\" class=\"line-highlighted\">1785</a>\n<a href=\"#1786\" id=\"1786\" class=\"line-highlighted\">1786</a>\n<a href=\"#1787\" id=\"1787\" class=\"line-highlighted\">1787</a>\n<a href=\"#1788\" id=\"1788\" class=\"line-highlighted\">1788</a>\n<a href=\"#1789\" id=\"1789\" class=\"line-highlighted\">1789</a>\n<a href=\"#1790\" id=\"1790\" class=\"line-highlighted\">1790</a>\n<a href=\"#1791\" id=\"1791\" class=\"line-highlighted\">1791</a>\n<a href=\"#1792\" id=\"1792\" class=\"line-highlighted\">1792</a>\n<a href=\"#1793\" id=\"1793\" class=\"line-highlighted\">1793</a>\n<a href=\"#1794\" id=\"1794\" class=\"line-highlighted\">1794</a>\n<a href=\"#1795\" id=\"1795\" class=\"line-highlighted\">1795</a>\n<a href=\"#1796\" id=\"1796\" class=\"line-highlighted\">1796</a>\n<a href=\"#1797\" id=\"1797\" class=\"line-highlighted\">1797</a>\n<a href=\"#1798\" id=\"1798\" class=\"line-highlighted\">1798</a>\n<a href=\"#1799\" id=\"1799\" class=\"line-highlighted\">1799</a>\n<a href=\"#1800\" id=\"1800\" class=\"line-highlighted\">1800</a>\n<a href=\"#1801\" id=\"1801\" class=\"line-highlighted\">1801</a>\n<a href=\"#1802\" id=\"1802\" class=\"line-highlighted\">1802</a>\n<a href=\"#1803\" id=\"1803\" class=\"line-highlighted\">1803</a>\n<a href=\"#1804\" id=\"1804\" class=\"line-highlighted\">1804</a>\n<a href=\"#1805\" id=\"1805\" class=\"line-highlighted\">1805</a>\n<a href=\"#1806\" id=\"1806\" class=\"line-highlighted\">1806</a>\n<a href=\"#1807\" id=\"1807\" class=\"line-highlighted\">1807</a>\n<a href=\"#1808\" id=\"1808\" class=\"line-highlighted\">1808</a>\n<a href=\"#1809\" id=\"1809\" class=\"line-highlighted\">1809</a>\n<a href=\"#1810\" id=\"1810\" class=\"line-highlighted\">1810</a>\n<a href=\"#1811\" id=\"1811\" class=\"line-highlighted\">1811</a>\n<a href=\"#1812\" id=\"1812\" class=\"line-highlighted\">1812</a>\n<a href=\"#1813\" id=\"1813\" class=\"line-highlighted\">1813</a>\n<a href=\"#1814\" id=\"1814\" class=\"line-highlighted\">1814</a>\n<a href=\"#1815\" id=\"1815\" class=\"line-highlighted\">1815</a>\n<a href=\"#1816\" id=\"1816\" class=\"line-highlighted\">1816</a>\n<a href=\"#1817\" id=\"1817\" class=\"line-highlighted\">1817</a>\n<a href=\"#1818\" id=\"1818\" class=\"line-highlighted\">1818</a>\n<a href=\"#1819\" id=\"1819\" class=\"line-highlighted\">1819</a>\n<a href=\"#1820\" id=\"1820\" class=\"line-highlighted\">1820</a>\n<a href=\"#1821\" id=\"1821\" class=\"line-highlighted\">1821</a>\n<a href=\"#1822\" id=\"1822\" class=\"line-highlighted\">1822</a>\n<a href=\"#1823\" id=\"1823\" class=\"line-highlighted\">1823</a>\n<a href=\"#1824\" id=\"1824\" class=\"line-highlighted\">1824</a>\n<a href=\"#1825\" id=\"1825\" class=\"line-highlighted\">1825</a>\n<a href=\"#1826\" id=\"1826\" class=\"line-highlighted\">1826</a>\n<a href=\"#1827\" id=\"1827\" class=\"line-highlighted\">1827</a>\n<a href=\"#1828\" id=\"1828\" class=\"line-highlighted\">1828</a>\n<a href=\"#1829\" id=\"1829\" class=\"line-highlighted\">1829</a>\n<a href=\"#1830\" id=\"1830\" class=\"line-highlighted\">1830</a>\n<a href=\"#1831\" id=\"1831\" class=\"line-highlighted\">1831</a>\n<a href=\"#1832\" id=\"1832\" class=\"line-highlighted\">1832</a>\n<a href=\"#1833\" id=\"1833\" class=\"line-highlighted\">1833</a>\n<a href=\"#1834\" id=\"1834\" class=\"line-highlighted\">1834</a>\n<a href=\"#1835\" id=\"1835\" class=\"line-highlighted\">1835</a>\n<a href=\"#1836\" id=\"1836\" class=\"line-highlighted\">1836</a>\n<a href=\"#1837\" id=\"1837\" class=\"line-highlighted\">1837</a>\n<a href=\"#1838\" id=\"1838\" class=\"line-highlighted\">1838</a>\n<a href=\"#1839\" id=\"1839\" class=\"line-highlighted\">1839</a>\n<a href=\"#1840\" id=\"1840\" class=\"line-highlighted\">1840</a>\n<a href=\"#1841\" id=\"1841\" class=\"line-highlighted\">1841</a>\n<a href=\"#1842\" id=\"1842\" class=\"line-highlighted\">1842</a>\n<a href=\"#1843\" id=\"1843\" class=\"line-highlighted\">1843</a>\n<a href=\"#1844\" id=\"1844\" class=\"line-highlighted\">1844</a>\n<a href=\"#1845\" id=\"1845\" class=\"line-highlighted\">1845</a>\n<a href=\"#1846\" id=\"1846\" class=\"line-highlighted\">1846</a>\n<a href=\"#1847\" id=\"1847\" class=\"line-highlighted\">1847</a>\n<a href=\"#1848\" id=\"1848\" class=\"line-highlighted\">1848</a>\n<a href=\"#1849\" id=\"1849\" class=\"line-highlighted\">1849</a>\n<a href=\"#1850\" id=\"1850\" class=\"line-highlighted\">1850</a>\n<a href=\"#1851\" id=\"1851\" class=\"line-highlighted\">1851</a>\n<a href=\"#1852\" id=\"1852\" class=\"line-highlighted\">1852</a>\n<a href=\"#1853\" id=\"1853\" class=\"line-highlighted\">1853</a>\n<a href=\"#1854\" id=\"1854\" class=\"line-highlighted\">1854</a>\n<a href=\"#1855\" id=\"1855\" class=\"line-highlighted\">1855</a>\n<a href=\"#1856\" id=\"1856\" class=\"line-highlighted\">1856</a>\n<a href=\"#1857\" id=\"1857\" class=\"line-highlighted\">1857</a>\n<a href=\"#1858\" id=\"1858\" class=\"line-highlighted\">1858</a>\n<a href=\"#1859\" id=\"1859\" class=\"line-highlighted\">1859</a>\n<a href=\"#1860\" id=\"1860\" class=\"line-highlighted\">1860</a>\n<a href=\"#1861\" id=\"1861\" class=\"line-highlighted\">1861</a>\n<a href=\"#1862\" id=\"1862\" class=\"line-highlighted\">1862</a>\n<a href=\"#1863\" id=\"1863\" class=\"line-highlighted\">1863</a>\n<a href=\"#1864\" id=\"1864\" class=\"line-highlighted\">1864</a>\n<a href=\"#1865\" id=\"1865\" class=\"line-highlighted\">1865</a>\n<a href=\"#1866\" id=\"1866\" class=\"line-highlighted\">1866</a>\n<a href=\"#1867\" id=\"1867\" class=\"line-highlighted\">1867</a>\n<a href=\"#1868\" id=\"1868\" class=\"line-highlighted\">1868</a>\n<a href=\"#1869\" id=\"1869\" class=\"line-highlighted\">1869</a>\n<a href=\"#1870\" id=\"1870\" class=\"line-highlighted\">1870</a>\n<a href=\"#1871\" id=\"1871\" class=\"line-highlighted\">1871</a>\n<a href=\"#1872\" id=\"1872\" class=\"line-highlighted\">1872</a>\n<a href=\"#1873\" id=\"1873\" class=\"line-highlighted\">1873</a>\n<a href=\"#1874\" id=\"1874\" class=\"line-highlighted\">1874</a>\n<a href=\"#1875\" id=\"1875\" class=\"line-highlighted\">1875</a>\n<a href=\"#1876\" id=\"1876\" class=\"line-highlighted\">1876</a>\n<a href=\"#1877\" id=\"1877\" class=\"line-highlighted\">1877</a>\n<a href=\"#1878\" id=\"1878\" class=\"line-highlighted\">1878</a>\n<a href=\"#1879\" id=\"1879\" class=\"line-highlighted\">1879</a>\n<a href=\"#1880\" id=\"1880\" class=\"line-highlighted\">1880</a>\n<a href=\"#1881\" id=\"1881\" class=\"line-highlighted\">1881</a>\n<a href=\"#1882\" id=\"1882\" class=\"line-highlighted\">1882</a>\n<a href=\"#1883\" id=\"1883\" class=\"line-highlighted\">1883</a>\n<a href=\"#1884\" id=\"1884\" class=\"line-highlighted\">1884</a>\n<a href=\"#1885\" id=\"1885\" class=\"line-highlighted\">1885</a>\n<a href=\"#1886\" id=\"1886\" class=\"line-highlighted\">1886</a>\n<a href=\"#1887\" id=\"1887\" class=\"line-highlighted\">1887</a>\n<a href=\"#1888\" id=\"1888\" class=\"line-highlighted\">1888</a>\n<a href=\"#1889\" id=\"1889\" class=\"line-highlighted\">1889</a>\n<a href=\"#1890\" id=\"1890\" class=\"line-highlighted\">1890</a>\n<a href=\"#1891\" id=\"1891\" class=\"line-highlighted\">1891</a>\n<a href=\"#1892\" id=\"1892\" class=\"line-highlighted\">1892</a>\n<a href=\"#1893\" id=\"1893\" class=\"line-highlighted\">1893</a>\n<a href=\"#1894\" id=\"1894\" class=\"line-highlighted\">1894</a>\n<a href=\"#1895\" id=\"1895\" class=\"line-highlighted\">1895</a>\n<a href=\"#1896\" id=\"1896\" class=\"line-highlighted\">1896</a>\n<a href=\"#1897\" id=\"1897\" class=\"line-highlighted\">1897</a>\n<a href=\"#1898\" id=\"1898\" class=\"line-highlighted\">1898</a>\n<a href=\"#1899\" id=\"1899\" class=\"line-highlighted\">1899</a>\n<a href=\"#1900\" id=\"1900\" class=\"line-highlighted\">1900</a>\n<a href=\"#1901\" id=\"1901\" class=\"line-highlighted\">1901</a>\n<a href=\"#1902\" id=\"1902\" class=\"line-highlighted\">1902</a>\n<a href=\"#1903\" id=\"1903\" class=\"line-highlighted\">1903</a>\n<a href=\"#1904\" id=\"1904\" class=\"line-highlighted\">1904</a>\n<a href=\"#1905\" id=\"1905\" class=\"line-highlighted\">1905</a>\n<a href=\"#1906\" id=\"1906\" class=\"line-highlighted\">1906</a>\n<a href=\"#1907\" id=\"1907\" class=\"line-highlighted\">1907</a>\n<a href=\"#1908\" id=\"1908\" class=\"line-highlighted\">1908</a>\n<a href=\"#1909\" id=\"1909\" class=\"line-highlighted\">1909</a>\n<a href=\"#1910\" id=\"1910\" class=\"line-highlighted\">1910</a>\n<a href=\"#1911\" id=\"1911\" class=\"line-highlighted\">1911</a>\n<a href=\"#1912\" id=\"1912\" class=\"line-highlighted\">1912</a>\n<a href=\"#1913\" id=\"1913\" class=\"line-highlighted\">1913</a>\n<a href=\"#1914\" id=\"1914\" class=\"line-highlighted\">1914</a>\n<a href=\"#1915\" id=\"1915\" class=\"line-highlighted\">1915</a>\n<a href=\"#1916\" id=\"1916\" class=\"line-highlighted\">1916</a>\n<a href=\"#1917\" id=\"1917\" class=\"line-highlighted\">1917</a>\n<a href=\"#1918\" id=\"1918\" class=\"line-highlighted\">1918</a>\n<a href=\"#1919\" id=\"1919\" class=\"line-highlighted\">1919</a>\n<a href=\"#1920\" id=\"1920\" class=\"line-highlighted\">1920</a>\n<a href=\"#1921\" id=\"1921\" class=\"line-highlighted\">1921</a>\n<a href=\"#1922\" id=\"1922\" class=\"line-highlighted\">1922</a>\n<a href=\"#1923\" id=\"1923\" class=\"line-highlighted\">1923</a>\n<a href=\"#1924\" id=\"1924\" class=\"line-highlighted\">1924</a>\n<a href=\"#1925\" id=\"1925\" class=\"line-highlighted\">1925</a>\n<a href=\"#1926\" id=\"1926\" class=\"line-highlighted\">1926</a>\n<a href=\"#1927\" id=\"1927\" class=\"line-highlighted\">1927</a>\n<a href=\"#1928\" id=\"1928\" class=\"line-highlighted\">1928</a>\n<a href=\"#1929\" id=\"1929\" class=\"line-highlighted\">1929</a>\n<a href=\"#1930\" id=\"1930\" class=\"line-highlighted\">1930</a>\n<a href=\"#1931\" id=\"1931\" class=\"line-highlighted\">1931</a>\n<a href=\"#1932\" id=\"1932\" class=\"line-highlighted\">1932</a>\n<a href=\"#1933\" id=\"1933\" class=\"line-highlighted\">1933</a>\n<a href=\"#1934\" id=\"1934\" class=\"line-highlighted\">1934</a>\n<a href=\"#1935\" id=\"1935\" class=\"line-highlighted\">1935</a>\n<a href=\"#1936\" id=\"1936\" class=\"line-highlighted\">1936</a>\n<a href=\"#1937\" id=\"1937\" class=\"line-highlighted\">1937</a>\n<a href=\"#1938\" id=\"1938\" class=\"line-highlighted\">1938</a>\n<a href=\"#1939\" id=\"1939\" class=\"line-highlighted\">1939</a>\n<a href=\"#1940\" id=\"1940\" class=\"line-highlighted\">1940</a>\n<a href=\"#1941\" id=\"1941\" class=\"line-highlighted\">1941</a>\n<a href=\"#1942\" id=\"1942\" class=\"line-highlighted\">1942</a>\n<a href=\"#1943\" id=\"1943\" class=\"line-highlighted\">1943</a>\n<a href=\"#1944\" id=\"1944\" class=\"line-highlighted\">1944</a>\n<a href=\"#1945\" id=\"1945\" class=\"line-highlighted\">1945</a>\n<a href=\"#1946\" id=\"1946\" class=\"line-highlighted\">1946</a>\n<a href=\"#1947\" id=\"1947\" class=\"line-highlighted\">1947</a>\n<a href=\"#1948\" id=\"1948\" class=\"line-highlighted\">1948</a>\n<a href=\"#1949\" id=\"1949\" class=\"line-highlighted\">1949</a>\n<a href=\"#1950\" id=\"1950\" class=\"line-highlighted\">1950</a>\n<a href=\"#1951\" id=\"1951\" class=\"line-highlighted\">1951</a>\n<a href=\"#1952\" id=\"1952\" class=\"line-highlighted\">1952</a>\n<a href=\"#1953\" id=\"1953\" class=\"line-highlighted\">1953</a>\n<a href=\"#1954\" id=\"1954\" class=\"line-highlighted\">1954</a>\n<a href=\"#1955\" id=\"1955\" class=\"line-highlighted\">1955</a>\n<a href=\"#1956\" id=\"1956\" class=\"line-highlighted\">1956</a>\n<a href=\"#1957\" id=\"1957\" class=\"line-highlighted\">1957</a>\n<a href=\"#1958\" id=\"1958\" class=\"line-highlighted\">1958</a>\n<a href=\"#1959\" id=\"1959\" class=\"line-highlighted\">1959</a>\n<a href=\"#1960\" id=\"1960\" class=\"line-highlighted\">1960</a>\n<a href=\"#1961\" id=\"1961\" class=\"line-highlighted\">1961</a>\n<a href=\"#1962\" id=\"1962\" class=\"line-highlighted\">1962</a>\n<a href=\"#1963\" id=\"1963\" class=\"line-highlighted\">1963</a>\n<a href=\"#1964\" id=\"1964\" class=\"line-highlighted\">1964</a>\n<a href=\"#1965\" id=\"1965\" class=\"line-highlighted\">1965</a>\n<a href=\"#1966\" id=\"1966\" class=\"line-highlighted\">1966</a>\n<a href=\"#1967\" id=\"1967\" class=\"line-highlighted\">1967</a>\n<a href=\"#1968\" id=\"1968\" class=\"line-highlighted\">1968</a>\n<a href=\"#1969\" id=\"1969\" class=\"line-highlighted\">1969</a>\n<a href=\"#1970\" id=\"1970\" class=\"line-highlighted\">1970</a>\n<a href=\"#1971\" id=\"1971\" class=\"line-highlighted\">1971</a>\n<a href=\"#1972\" id=\"1972\" class=\"line-highlighted\">1972</a>\n<a href=\"#1973\" id=\"1973\" class=\"line-highlighted\">1973</a>\n<a href=\"#1974\" id=\"1974\" class=\"line-highlighted\">1974</a>\n<a href=\"#1975\" id=\"1975\" class=\"line-highlighted\">1975</a>\n<a href=\"#1976\" id=\"1976\" class=\"line-highlighted\">1976</a>\n<a href=\"#1977\" id=\"1977\" class=\"line-highlighted\">1977</a>\n<a href=\"#1978\" id=\"1978\" class=\"line-highlighted\">1978</a>\n<a href=\"#1979\" id=\"1979\" class=\"line-highlighted\">1979</a>\n<a href=\"#1980\" id=\"1980\" class=\"line-highlighted\">1980</a>\n<a href=\"#1981\" id=\"1981\" class=\"line-highlighted\">1981</a>\n<a href=\"#1982\" id=\"1982\" class=\"line-highlighted\">1982</a>\n<a href=\"#1983\" id=\"1983\" class=\"line-highlighted\">1983</a>\n<a href=\"#1984\" id=\"1984\" class=\"line-highlighted\">1984</a>\n<a href=\"#1985\" id=\"1985\" class=\"line-highlighted\">1985</a>\n<a href=\"#1986\" id=\"1986\" class=\"line-highlighted\">1986</a>\n<a href=\"#1987\" id=\"1987\" class=\"line-highlighted\">1987</a>\n<a href=\"#1988\" id=\"1988\" class=\"line-highlighted\">1988</a>\n<a href=\"#1989\" id=\"1989\" class=\"line-highlighted\">1989</a>\n<a href=\"#1990\" id=\"1990\" class=\"line-highlighted\">1990</a>\n<a href=\"#1991\" id=\"1991\" class=\"line-highlighted\">1991</a>\n<a href=\"#1992\" id=\"1992\" class=\"line-highlighted\">1992</a>\n<a href=\"#1993\" id=\"1993\" class=\"line-highlighted\">1993</a>\n<a href=\"#1994\" id=\"1994\" class=\"line-highlighted\">1994</a>\n<a href=\"#1995\" id=\"1995\" class=\"line-highlighted\">1995</a>\n<a href=\"#1996\" id=\"1996\" class=\"line-highlighted\">1996</a>\n<a href=\"#1997\" id=\"1997\" class=\"line-highlighted\">1997</a>\n<a href=\"#1998\" id=\"1998\" class=\"line-highlighted\">1998</a>\n<a href=\"#1999\" id=\"1999\" class=\"line-highlighted\">1999</a>\n<a href=\"#2000\" id=\"2000\" class=\"line-highlighted\">2000</a>\n<a href=\"#2001\" id=\"2001\" class=\"line-highlighted\">2001</a>\n<a href=\"#2002\" id=\"2002\" class=\"line-highlighted\">2002</a>\n<a href=\"#2003\" id=\"2003\" class=\"line-highlighted\">2003</a>\n<a href=\"#2004\" id=\"2004\" class=\"line-highlighted\">2004</a>\n<a href=\"#2005\" id=\"2005\" class=\"line-highlighted\">2005</a>\n<a href=\"#2006\" id=\"2006\" class=\"line-highlighted\">2006</a>\n<a href=\"#2007\" id=\"2007\" class=\"line-highlighted\">2007</a>\n<a href=\"#2008\" id=\"2008\" class=\"line-highlighted\">2008</a>\n<a href=\"#2009\" id=\"2009\" class=\"line-highlighted\">2009</a>\n<a href=\"#2010\" id=\"2010\" class=\"line-highlighted\">2010</a>\n<a href=\"#2011\" id=\"2011\" class=\"line-highlighted\">2011</a>\n<a href=\"#2012\" id=\"2012\" class=\"line-highlighted\">2012</a>\n<a href=\"#2013\" id=\"2013\" class=\"line-highlighted\">2013</a>\n<a href=\"#2014\" id=\"2014\" class=\"line-highlighted\">2014</a>\n<a href=\"#2015\" id=\"2015\" class=\"line-highlighted\">2015</a>\n<a href=\"#2016\" id=\"2016\" class=\"line-highlighted\">2016</a>\n<a href=\"#2017\" id=\"2017\" class=\"line-highlighted\">2017</a>\n<a href=\"#2018\" id=\"2018\" class=\"line-highlighted\">2018</a>\n<a href=\"#2019\" id=\"2019\" class=\"line-highlighted\">2019</a>\n<a href=\"#2020\" id=\"2020\" class=\"line-highlighted\">2020</a>\n<a href=\"#2021\" id=\"2021\" class=\"line-highlighted\">2021</a>\n<a href=\"#2022\" id=\"2022\" class=\"line-highlighted\">2022</a>\n<a href=\"#2023\" id=\"2023\" class=\"line-highlighted\">2023</a>\n<a href=\"#2024\" id=\"2024\" class=\"line-highlighted\">2024</a>\n<a href=\"#2025\" id=\"2025\" class=\"line-highlighted\">2025</a>\n<a href=\"#2026\" id=\"2026\" class=\"line-highlighted\">2026</a>\n<a href=\"#2027\" id=\"2027\" class=\"line-highlighted\">2027</a>\n<a href=\"#2028\" id=\"2028\" class=\"line-highlighted\">2028</a>\n<a href=\"#2029\" id=\"2029\" class=\"line-highlighted\">2029</a>\n<a href=\"#2030\" id=\"2030\" class=\"line-highlighted\">2030</a>\n<a href=\"#2031\" id=\"2031\" class=\"line-highlighted\">2031</a>\n<a href=\"#2032\" id=\"2032\" class=\"line-highlighted\">2032</a>\n<a href=\"#2033\" id=\"2033\" class=\"line-highlighted\">2033</a>\n<a href=\"#2034\" id=\"2034\" class=\"line-highlighted\">2034</a>\n<a href=\"#2035\" id=\"2035\" class=\"line-highlighted\">2035</a>\n<a href=\"#2036\" id=\"2036\" class=\"line-highlighted\">2036</a>\n<a href=\"#2037\" id=\"2037\" class=\"line-highlighted\">2037</a>\n<a href=\"#2038\" id=\"2038\" class=\"line-highlighted\">2038</a>\n<a href=\"#2039\" id=\"2039\" class=\"line-highlighted\">2039</a>\n<a href=\"#2040\" id=\"2040\" class=\"line-highlighted\">2040</a>\n<a href=\"#2041\" id=\"2041\" class=\"line-highlighted\">2041</a>\n<a href=\"#2042\" id=\"2042\" class=\"line-highlighted\">2042</a>\n<a href=\"#2043\" id=\"2043\" class=\"line-highlighted\">2043</a>\n<a href=\"#2044\" id=\"2044\" class=\"line-highlighted\">2044</a>\n<a href=\"#2045\" id=\"2045\" class=\"line-highlighted\">2045</a>\n<a href=\"#2046\" id=\"2046\" class=\"line-highlighted\">2046</a>\n<a href=\"#2047\" id=\"2047\" class=\"line-highlighted\">2047</a>\n<a href=\"#2048\" id=\"2048\" class=\"line-highlighted\">2048</a>\n<a href=\"#2049\" id=\"2049\" class=\"line-highlighted\">2049</a>\n<a href=\"#2050\" id=\"2050\" class=\"line-highlighted\">2050</a>\n<a href=\"#2051\" id=\"2051\" class=\"line-highlighted\">2051</a>\n<a href=\"#2052\" id=\"2052\" class=\"line-highlighted\">2052</a>\n<a href=\"#2053\" id=\"2053\" class=\"line-highlighted\">2053</a>\n<a href=\"#2054\" id=\"2054\" class=\"line-highlighted\">2054</a>\n<a href=\"#2055\" id=\"2055\" class=\"line-highlighted\">2055</a>\n<a href=\"#2056\" id=\"2056\" class=\"line-highlighted\">2056</a>\n<a href=\"#2057\" id=\"2057\" class=\"line-highlighted\">2057</a>\n<a href=\"#2058\" id=\"2058\" class=\"line-highlighted\">2058</a>\n<a href=\"#2059\" id=\"2059\" class=\"line-highlighted\">2059</a>\n<a href=\"#2060\" id=\"2060\" class=\"line-highlighted\">2060</a>\n<a href=\"#2061\" id=\"2061\" class=\"line-highlighted\">2061</a>\n<a href=\"#2062\" id=\"2062\" class=\"line-highlighted\">2062</a>\n<a href=\"#2063\" id=\"2063\" class=\"line-highlighted\">2063</a>\n<a href=\"#2064\" id=\"2064\" class=\"line-highlighted\">2064</a>\n<a href=\"#2065\" id=\"2065\" class=\"line-highlighted\">2065</a>\n<a href=\"#2066\" id=\"2066\" class=\"line-highlighted\">2066</a>\n<a href=\"#2067\" id=\"2067\" class=\"line-highlighted\">2067</a>\n<a href=\"#2068\" id=\"2068\" class=\"line-highlighted\">2068</a>\n<a href=\"#2069\" id=\"2069\" class=\"line-highlighted\">2069</a>\n<a href=\"#2070\" id=\"2070\" class=\"line-highlighted\">2070</a>\n<a href=\"#2071\" id=\"2071\" class=\"line-highlighted\">2071</a>\n<a href=\"#2072\" id=\"2072\" class=\"line-highlighted\">2072</a>\n<a href=\"#2073\" id=\"2073\" class=\"line-highlighted\">2073</a>\n<a href=\"#2074\" id=\"2074\" class=\"line-highlighted\">2074</a>\n<a href=\"#2075\" id=\"2075\" class=\"line-highlighted\">2075</a>\n<a href=\"#2076\" id=\"2076\" class=\"line-highlighted\">2076</a>\n<a href=\"#2077\" id=\"2077\" class=\"line-highlighted\">2077</a>\n<a href=\"#2078\" id=\"2078\" class=\"line-highlighted\">2078</a>\n<a href=\"#2079\" id=\"2079\" class=\"line-highlighted\">2079</a>\n<a href=\"#2080\" id=\"2080\" class=\"line-highlighted\">2080</a>\n<a href=\"#2081\" id=\"2081\" class=\"line-highlighted\">2081</a>\n<a href=\"#2082\" id=\"2082\" class=\"line-highlighted\">2082</a>\n<a href=\"#2083\" id=\"2083\" class=\"line-highlighted\">2083</a>\n<a href=\"#2084\" id=\"2084\" class=\"line-highlighted\">2084</a>\n<a href=\"#2085\" id=\"2085\" class=\"line-highlighted\">2085</a>\n<a href=\"#2086\" id=\"2086\" class=\"line-highlighted\">2086</a>\n<a href=\"#2087\" id=\"2087\" class=\"line-highlighted\">2087</a>\n<a href=\"#2088\" id=\"2088\" class=\"line-highlighted\">2088</a>\n<a href=\"#2089\" id=\"2089\" class=\"line-highlighted\">2089</a>\n<a href=\"#2090\" id=\"2090\" class=\"line-highlighted\">2090</a>\n<a href=\"#2091\" id=\"2091\" class=\"line-highlighted\">2091</a>\n<a href=\"#2092\" id=\"2092\" class=\"line-highlighted\">2092</a>\n<a href=\"#2093\" id=\"2093\" class=\"line-highlighted\">2093</a>\n<a href=\"#2094\" id=\"2094\" class=\"line-highlighted\">2094</a>\n<a href=\"#2095\" id=\"2095\" class=\"line-highlighted\">2095</a>\n<a href=\"#2096\" id=\"2096\" class=\"line-highlighted\">2096</a>\n<a href=\"#2097\" id=\"2097\" class=\"line-highlighted\">2097</a>\n<a href=\"#2098\" id=\"2098\" class=\"line-highlighted\">2098</a>\n<a href=\"#2099\" id=\"2099\" class=\"line-highlighted\">2099</a>\n<a href=\"#2100\" id=\"2100\" class=\"line-highlighted\">2100</a>\n<a href=\"#2101\" id=\"2101\" class=\"line-highlighted\">2101</a>\n<a href=\"#2102\" id=\"2102\" class=\"line-highlighted\">2102</a>\n<a href=\"#2103\" id=\"2103\" class=\"line-highlighted\">2103</a>\n<a href=\"#2104\" id=\"2104\" class=\"line-highlighted\">2104</a>\n<a href=\"#2105\" id=\"2105\" class=\"line-highlighted\">2105</a>\n<a href=\"#2106\" id=\"2106\" class=\"line-highlighted\">2106</a>\n<a href=\"#2107\" id=\"2107\" class=\"line-highlighted\">2107</a>\n<a href=\"#2108\" id=\"2108\" class=\"line-highlighted\">2108</a>\n<a href=\"#2109\" id=\"2109\" class=\"line-highlighted\">2109</a>\n<a href=\"#2110\" id=\"2110\" class=\"line-highlighted\">2110</a>\n<a href=\"#2111\" id=\"2111\" class=\"line-highlighted\">2111</a>\n<a href=\"#2112\" id=\"2112\" class=\"line-highlighted\">2112</a>\n<a href=\"#2113\" id=\"2113\" class=\"line-highlighted\">2113</a>\n<a href=\"#2114\" id=\"2114\" class=\"line-highlighted\">2114</a>\n<a href=\"#2115\" id=\"2115\" class=\"line-highlighted\">2115</a>\n<a href=\"#2116\" id=\"2116\" class=\"line-highlighted\">2116</a>\n<a href=\"#2117\" id=\"2117\" class=\"line-highlighted\">2117</a>\n<a href=\"#2118\" id=\"2118\" class=\"line-highlighted\">2118</a>\n<a href=\"#2119\" id=\"2119\" class=\"line-highlighted\">2119</a>\n<a href=\"#2120\" id=\"2120\" class=\"line-highlighted\">2120</a>\n<a href=\"#2121\" id=\"2121\" class=\"line-highlighted\">2121</a>\n<a href=\"#2122\" id=\"2122\" class=\"line-highlighted\">2122</a>\n<a href=\"#2123\" id=\"2123\" class=\"line-highlighted\">2123</a>\n<a href=\"#2124\" id=\"2124\" class=\"line-highlighted\">2124</a>\n<a href=\"#2125\" id=\"2125\" class=\"line-highlighted\">2125</a>\n<a href=\"#2126\" id=\"2126\" class=\"line-highlighted\">2126</a>\n<a href=\"#2127\" id=\"2127\" class=\"line-highlighted\">2127</a>\n<a href=\"#2128\" id=\"2128\" class=\"line-highlighted\">2128</a>\n<a href=\"#2129\" id=\"2129\" class=\"line-highlighted\">2129</a>\n<a href=\"#2130\" id=\"2130\" class=\"line-highlighted\">2130</a>\n<a href=\"#2131\" id=\"2131\" class=\"line-highlighted\">2131</a>\n<a href=\"#2132\" id=\"2132\" class=\"line-highlighted\">2132</a>\n<a href=\"#2133\" id=\"2133\" class=\"line-highlighted\">2133</a>\n<a href=\"#2134\" id=\"2134\" class=\"line-highlighted\">2134</a>\n<a href=\"#2135\" id=\"2135\" class=\"line-highlighted\">2135</a>\n<a href=\"#2136\" id=\"2136\" class=\"line-highlighted\">2136</a>\n<a href=\"#2137\" id=\"2137\" class=\"line-highlighted\">2137</a>\n<a href=\"#2138\" id=\"2138\" class=\"line-highlighted\">2138</a>\n<a href=\"#2139\" id=\"2139\" class=\"line-highlighted\">2139</a>\n<a href=\"#2140\" id=\"2140\" class=\"line-highlighted\">2140</a>\n<a href=\"#2141\" id=\"2141\" class=\"line-highlighted\">2141</a>\n<a href=\"#2142\" id=\"2142\" class=\"line-highlighted\">2142</a>\n<a href=\"#2143\" id=\"2143\" class=\"line-highlighted\">2143</a>\n<a href=\"#2144\" id=\"2144\" class=\"line-highlighted\">2144</a>\n<a href=\"#2145\" id=\"2145\" class=\"line-highlighted\">2145</a>\n<a href=\"#2146\" id=\"2146\" class=\"line-highlighted\">2146</a>\n<a href=\"#2147\" id=\"2147\" class=\"line-highlighted\">2147</a>\n<a href=\"#2148\" id=\"2148\" class=\"line-highlighted\">2148</a>\n<a href=\"#2149\" id=\"2149\" class=\"line-highlighted\">2149</a>\n<a href=\"#2150\" id=\"2150\" class=\"line-highlighted\">2150</a>\n<a href=\"#2151\" id=\"2151\" class=\"line-highlighted\">2151</a>\n<a href=\"#2152\" id=\"2152\" class=\"line-highlighted\">2152</a>\n<a href=\"#2153\" id=\"2153\" class=\"line-highlighted\">2153</a>\n<a href=\"#2154\" id=\"2154\" class=\"line-highlighted\">2154</a>\n<a href=\"#2155\" id=\"2155\" class=\"line-highlighted\">2155</a>\n<a href=\"#2156\" id=\"2156\" class=\"line-highlighted\">2156</a>\n<a href=\"#2157\" id=\"2157\" class=\"line-highlighted\">2157</a>\n<a href=\"#2158\" id=\"2158\" class=\"line-highlighted\">2158</a>\n<a href=\"#2159\" id=\"2159\" class=\"line-highlighted\">2159</a>\n<a href=\"#2160\" id=\"2160\" class=\"line-highlighted\">2160</a>\n<a href=\"#2161\" id=\"2161\" class=\"line-highlighted\">2161</a>\n<a href=\"#2162\" id=\"2162\" class=\"line-highlighted\">2162</a>\n<a href=\"#2163\" id=\"2163\" class=\"line-highlighted\">2163</a>\n<a href=\"#2164\" id=\"2164\" class=\"line-highlighted\">2164</a>\n<a href=\"#2165\" id=\"2165\" class=\"line-highlighted\">2165</a>\n<a href=\"#2166\" id=\"2166\" class=\"line-highlighted\">2166</a>\n<a href=\"#2167\" id=\"2167\" class=\"line-highlighted\">2167</a>\n<a href=\"#2168\" id=\"2168\" class=\"line-highlighted\">2168</a>\n<a href=\"#2169\" id=\"2169\" class=\"line-highlighted\">2169</a>\n<a href=\"#2170\" id=\"2170\" class=\"line-highlighted\">2170</a>\n<a href=\"#2171\" id=\"2171\" class=\"line-highlighted\">2171</a>\n<a href=\"#2172\" id=\"2172\" class=\"line-highlighted\">2172</a>\n<a href=\"#2173\" id=\"2173\" class=\"line-highlighted\">2173</a>\n<a href=\"#2174\" id=\"2174\" class=\"line-highlighted\">2174</a>\n<a href=\"#2175\" id=\"2175\" class=\"line-highlighted\">2175</a>\n<a href=\"#2176\" id=\"2176\" class=\"line-highlighted\">2176</a>\n<a href=\"#2177\" id=\"2177\" class=\"line-highlighted\">2177</a>\n<a href=\"#2178\" id=\"2178\" class=\"line-highlighted\">2178</a>\n<a href=\"#2179\" id=\"2179\" class=\"line-highlighted\">2179</a>\n<a href=\"#2180\" id=\"2180\" class=\"line-highlighted\">2180</a>\n<a href=\"#2181\" id=\"2181\" class=\"line-highlighted\">2181</a>\n<a href=\"#2182\" id=\"2182\" class=\"line-highlighted\">2182</a>\n<a href=\"#2183\" id=\"2183\" class=\"line-highlighted\">2183</a>\n<a href=\"#2184\" id=\"2184\" class=\"line-highlighted\">2184</a>\n<a href=\"#2185\" id=\"2185\" class=\"line-highlighted\">2185</a>\n<a href=\"#2186\" id=\"2186\" class=\"line-highlighted\">2186</a>\n<a href=\"#2187\" id=\"2187\" class=\"line-highlighted\">2187</a>\n<a href=\"#2188\" id=\"2188\" class=\"line-highlighted\">2188</a>\n<a href=\"#2189\" id=\"2189\" class=\"line-highlighted\">2189</a>\n<a href=\"#2190\" id=\"2190\" class=\"line-highlighted\">2190</a>\n<a href=\"#2191\" id=\"2191\" class=\"line-highlighted\">2191</a>\n<a href=\"#2192\" id=\"2192\" class=\"line-highlighted\">2192</a>\n<a href=\"#2193\" id=\"2193\" class=\"line-highlighted\">2193</a>\n<a href=\"#2194\" id=\"2194\" class=\"line-highlighted\">2194</a>\n<a href=\"#2195\" id=\"2195\" class=\"line-highlighted\">2195</a>\n<a href=\"#2196\" id=\"2196\" class=\"line-highlighted\">2196</a>\n<a href=\"#2197\" id=\"2197\" class=\"line-highlighted\">2197</a>\n<a href=\"#2198\" id=\"2198\" class=\"line-highlighted\">2198</a>\n<a href=\"#2199\" id=\"2199\" class=\"line-highlighted\">2199</a>\n<a href=\"#2200\" id=\"2200\" class=\"line-highlighted\">2200</a>\n<a href=\"#2201\" id=\"2201\" class=\"line-highlighted\">2201</a>\n<a href=\"#2202\" id=\"2202\" class=\"line-highlighted\">2202</a>\n<a href=\"#2203\" id=\"2203\" class=\"line-highlighted\">2203</a>\n<a href=\"#2204\" id=\"2204\" class=\"line-highlighted\">2204</a>\n<a href=\"#2205\" id=\"2205\" class=\"line-highlighted\">2205</a>\n<a href=\"#2206\" id=\"2206\" class=\"line-highlighted\">2206</a>\n<a href=\"#2207\" id=\"2207\" class=\"line-highlighted\">2207</a>\n<a href=\"#2208\" id=\"2208\" class=\"line-highlighted\">2208</a>\n<a href=\"#2209\" id=\"2209\" class=\"line-highlighted\">2209</a>\n<a href=\"#2210\" id=\"2210\" class=\"line-highlighted\">2210</a>\n<a href=\"#2211\" id=\"2211\" class=\"line-highlighted\">2211</a>\n<a href=\"#2212\" id=\"2212\" class=\"line-highlighted\">2212</a>\n<a href=\"#2213\" id=\"2213\" class=\"line-highlighted\">2213</a>\n<a href=\"#2214\" id=\"2214\" class=\"line-highlighted\">2214</a>\n<a href=\"#2215\" id=\"2215\" class=\"line-highlighted\">2215</a>\n<a href=\"#2216\" id=\"2216\" class=\"line-highlighted\">2216</a>\n<a href=\"#2217\" id=\"2217\" class=\"line-highlighted\">2217</a>\n<a href=\"#2218\" id=\"2218\" class=\"line-highlighted\">2218</a>\n<a href=\"#2219\" id=\"2219\" class=\"line-highlighted\">2219</a>\n<a href=\"#2220\" id=\"2220\" class=\"line-highlighted\">2220</a>\n<a href=\"#2221\" id=\"2221\" class=\"line-highlighted\">2221</a>\n<a href=\"#2222\" id=\"2222\" class=\"line-highlighted\">2222</a>\n<a href=\"#2223\" id=\"2223\" class=\"line-highlighted\">2223</a>\n<a href=\"#2224\" id=\"2224\" class=\"line-highlighted\">2224</a>\n<a href=\"#2225\" id=\"2225\" class=\"line-highlighted\">2225</a>\n<a href=\"#2226\" id=\"2226\" class=\"line-highlighted\">2226</a>\n<a href=\"#2227\" id=\"2227\" class=\"line-highlighted\">2227</a>\n<a href=\"#2228\" id=\"2228\" class=\"line-highlighted\">2228</a>\n<a href=\"#2229\" id=\"2229\" class=\"line-highlighted\">2229</a>\n<a href=\"#2230\" id=\"2230\" class=\"line-highlighted\">2230</a>\n<a href=\"#2231\" id=\"2231\" class=\"line-highlighted\">2231</a>\n<a href=\"#2232\" id=\"2232\" class=\"line-highlighted\">2232</a>\n<a href=\"#2233\" id=\"2233\" class=\"line-highlighted\">2233</a>\n<a href=\"#2234\" id=\"2234\" class=\"line-highlighted\">2234</a>\n<a href=\"#2235\" id=\"2235\" class=\"line-highlighted\">2235</a>\n<a href=\"#2236\" id=\"2236\" class=\"line-highlighted\">2236</a>\n<a href=\"#2237\" id=\"2237\" class=\"line-highlighted\">2237</a>\n<a href=\"#2238\" id=\"2238\" class=\"line-highlighted\">2238</a>\n<a href=\"#2239\" id=\"2239\" class=\"line-highlighted\">2239</a>\n<a href=\"#2240\" id=\"2240\" class=\"line-highlighted\">2240</a>\n<a href=\"#2241\" id=\"2241\" class=\"line-highlighted\">2241</a>\n<a href=\"#2242\" id=\"2242\" class=\"line-highlighted\">2242</a>\n<a href=\"#2243\" id=\"2243\" class=\"line-highlighted\">2243</a>\n<a href=\"#2244\" id=\"2244\" class=\"line-highlighted\">2244</a>\n<a href=\"#2245\" id=\"2245\" class=\"line-highlighted\">2245</a>\n<a href=\"#2246\" id=\"2246\" class=\"line-highlighted\">2246</a>\n<a href=\"#2247\" id=\"2247\" class=\"line-highlighted\">2247</a>\n<a href=\"#2248\" id=\"2248\" class=\"line-highlighted\">2248</a>\n<a href=\"#2249\" id=\"2249\" class=\"line-highlighted\">2249</a>\n<a href=\"#2250\" id=\"2250\" class=\"line-highlighted\">2250</a>\n<a href=\"#2251\" id=\"2251\" class=\"line-highlighted\">2251</a>\n<a href=\"#2252\" id=\"2252\" class=\"line-highlighted\">2252</a>\n<a href=\"#2253\" id=\"2253\" class=\"line-highlighted\">2253</a>\n<a href=\"#2254\" id=\"2254\" class=\"line-highlighted\">2254</a>\n<a href=\"#2255\" id=\"2255\" class=\"line-highlighted\">2255</a>\n<a href=\"#2256\" id=\"2256\" class=\"line-highlighted\">2256</a>\n<a href=\"#2257\" id=\"2257\" class=\"line-highlighted\">2257</a>\n<a href=\"#2258\" id=\"2258\" class=\"line-highlighted\">2258</a>\n<a href=\"#2259\" id=\"2259\" class=\"line-highlighted\">2259</a>\n<a href=\"#2260\" id=\"2260\" class=\"line-highlighted\">2260</a>\n<a href=\"#2261\" id=\"2261\" class=\"line-highlighted\">2261</a>\n<a href=\"#2262\" id=\"2262\" class=\"line-highlighted\">2262</a>\n<a href=\"#2263\" id=\"2263\" class=\"line-highlighted\">2263</a>\n<a href=\"#2264\" id=\"2264\" class=\"line-highlighted\">2264</a>\n<a href=\"#2265\" id=\"2265\" class=\"line-highlighted\">2265</a>\n<a href=\"#2266\" id=\"2266\" class=\"line-highlighted\">2266</a>\n<a href=\"#2267\" id=\"2267\" class=\"line-highlighted\">2267</a>\n<a href=\"#2268\" id=\"2268\" class=\"line-highlighted\">2268</a>\n<a href=\"#2269\" id=\"2269\" class=\"line-highlighted\">2269</a>\n<a href=\"#2270\" id=\"2270\" class=\"line-highlighted\">2270</a>\n<a href=\"#2271\" id=\"2271\" class=\"line-highlighted\">2271</a>\n<a href=\"#2272\" id=\"2272\" class=\"line-highlighted\">2272</a>\n<a href=\"#2273\" id=\"2273\" class=\"line-highlighted\">2273</a>\n<a href=\"#2274\" id=\"2274\" class=\"line-highlighted\">2274</a>\n<a href=\"#2275\" id=\"2275\" class=\"line-highlighted\">2275</a>\n<a href=\"#2276\" id=\"2276\" class=\"line-highlighted\">2276</a>\n<a href=\"#2277\" id=\"2277\" class=\"line-highlighted\">2277</a>\n<a href=\"#2278\" id=\"2278\" class=\"line-highlighted\">2278</a>\n<a href=\"#2279\" id=\"2279\" class=\"line-highlighted\">2279</a>\n<a href=\"#2280\" id=\"2280\" class=\"line-highlighted\">2280</a>\n<a href=\"#2281\" id=\"2281\" class=\"line-highlighted\">2281</a>\n<a href=\"#2282\" id=\"2282\" class=\"line-highlighted\">2282</a>\n<a href=\"#2283\" id=\"2283\" class=\"line-highlighted\">2283</a>\n<a href=\"#2284\" id=\"2284\" class=\"line-highlighted\">2284</a>\n<a href=\"#2285\" id=\"2285\" class=\"line-highlighted\">2285</a>\n<a href=\"#2286\" id=\"2286\" class=\"line-highlighted\">2286</a>\n<a href=\"#2287\" id=\"2287\" class=\"line-highlighted\">2287</a>\n<a href=\"#2288\" id=\"2288\" class=\"line-highlighted\">2288</a>\n<a href=\"#2289\" id=\"2289\" class=\"line-highlighted\">2289</a>\n<a href=\"#2290\" id=\"2290\" class=\"line-highlighted\">2290</a>\n<a href=\"#2291\" id=\"2291\" class=\"line-highlighted\">2291</a>\n<a href=\"#2292\" id=\"2292\" class=\"line-highlighted\">2292</a>\n<a href=\"#2293\" id=\"2293\" class=\"line-highlighted\">2293</a>\n<a href=\"#2294\" id=\"2294\" class=\"line-highlighted\">2294</a>\n<a href=\"#2295\" id=\"2295\" class=\"line-highlighted\">2295</a>\n<a href=\"#2296\" id=\"2296\" class=\"line-highlighted\">2296</a>\n<a href=\"#2297\" id=\"2297\" class=\"line-highlighted\">2297</a>\n<a href=\"#2298\" id=\"2298\" class=\"line-highlighted\">2298</a>\n<a href=\"#2299\" id=\"2299\" class=\"line-highlighted\">2299</a>\n<a href=\"#2300\" id=\"2300\" class=\"line-highlighted\">2300</a>\n<a href=\"#2301\" id=\"2301\" class=\"line-highlighted\">2301</a>\n<a href=\"#2302\" id=\"2302\" class=\"line-highlighted\">2302</a>\n<a href=\"#2303\" id=\"2303\" class=\"line-highlighted\">2303</a>\n<a href=\"#2304\" id=\"2304\" class=\"line-highlighted\">2304</a>\n<a href=\"#2305\" id=\"2305\" class=\"line-highlighted\">2305</a>\n<a href=\"#2306\" id=\"2306\" class=\"line-highlighted\">2306</a>\n<a href=\"#2307\" id=\"2307\" class=\"line-highlighted\">2307</a>\n<a href=\"#2308\" id=\"2308\" class=\"line-highlighted\">2308</a>\n<a href=\"#2309\" id=\"2309\" class=\"line-highlighted\">2309</a>\n<a href=\"#2310\" id=\"2310\" class=\"line-highlighted\">2310</a>\n<a href=\"#2311\" id=\"2311\" class=\"line-highlighted\">2311</a>\n<a href=\"#2312\" id=\"2312\" class=\"line-highlighted\">2312</a>\n<a href=\"#2313\" id=\"2313\" class=\"line-highlighted\">2313</a>\n<a href=\"#2314\" id=\"2314\" class=\"line-highlighted\">2314</a>\n<a href=\"#2315\" id=\"2315\" class=\"line-highlighted\">2315</a>\n<a href=\"#2316\" id=\"2316\" class=\"line-highlighted\">2316</a>\n<a href=\"#2317\" id=\"2317\" class=\"line-highlighted\">2317</a>\n<a href=\"#2318\" id=\"2318\" class=\"line-highlighted\">2318</a>\n<a href=\"#2319\" id=\"2319\" class=\"line-highlighted\">2319</a>\n<a href=\"#2320\" id=\"2320\" class=\"line-highlighted\">2320</a>\n<a href=\"#2321\" id=\"2321\" class=\"line-highlighted\">2321</a>\n<a href=\"#2322\" id=\"2322\" class=\"line-highlighted\">2322</a>\n<a href=\"#2323\" id=\"2323\" class=\"line-highlighted\">2323</a>\n<a href=\"#2324\" id=\"2324\" class=\"line-highlighted\">2324</a>\n<a href=\"#2325\" id=\"2325\" class=\"line-highlighted\">2325</a>\n<a href=\"#2326\" id=\"2326\" class=\"line-highlighted\">2326</a>\n<a href=\"#2327\" id=\"2327\" class=\"line-highlighted\">2327</a>\n<a href=\"#2328\" id=\"2328\" class=\"line-highlighted\">2328</a>\n<a href=\"#2329\" id=\"2329\" class=\"line-highlighted\">2329</a>\n<a href=\"#2330\" id=\"2330\" class=\"line-highlighted\">2330</a>\n<a href=\"#2331\" id=\"2331\" class=\"line-highlighted\">2331</a>\n<a href=\"#2332\" id=\"2332\" class=\"line-highlighted\">2332</a>\n<a href=\"#2333\" id=\"2333\" class=\"line-highlighted\">2333</a>\n<a href=\"#2334\" id=\"2334\" class=\"line-highlighted\">2334</a>\n<a href=\"#2335\" id=\"2335\" class=\"line-highlighted\">2335</a>\n<a href=\"#2336\" id=\"2336\" class=\"line-highlighted\">2336</a>\n<a href=\"#2337\" id=\"2337\" class=\"line-highlighted\">2337</a>\n<a href=\"#2338\" id=\"2338\" class=\"line-highlighted\">2338</a>\n<a href=\"#2339\" id=\"2339\" class=\"line-highlighted\">2339</a>\n<a href=\"#2340\" id=\"2340\" class=\"line-highlighted\">2340</a>\n<a href=\"#2341\" id=\"2341\" class=\"line-highlighted\">2341</a>\n<a href=\"#2342\" id=\"2342\" class=\"line-highlighted\">2342</a>\n<a href=\"#2343\" id=\"2343\" class=\"line-highlighted\">2343</a>\n<a href=\"#2344\" id=\"2344\" class=\"line-highlighted\">2344</a>\n<a href=\"#2345\" id=\"2345\" class=\"line-highlighted\">2345</a>\n<a href=\"#2346\" id=\"2346\" class=\"line-highlighted\">2346</a>\n<a href=\"#2347\" id=\"2347\" class=\"line-highlighted\">2347</a>\n<a href=\"#2348\" id=\"2348\" class=\"line-highlighted\">2348</a>\n<a href=\"#2349\" id=\"2349\" class=\"line-highlighted\">2349</a>\n<a href=\"#2350\" id=\"2350\" class=\"line-highlighted\">2350</a>\n<a href=\"#2351\" id=\"2351\" class=\"line-highlighted\">2351</a>\n<a href=\"#2352\" id=\"2352\" class=\"line-highlighted\">2352</a>\n<a href=\"#2353\" id=\"2353\" class=\"line-highlighted\">2353</a>\n<a href=\"#2354\" id=\"2354\" class=\"line-highlighted\">2354</a>\n<a href=\"#2355\" id=\"2355\" class=\"line-highlighted\">2355</a>\n<a href=\"#2356\" id=\"2356\" class=\"line-highlighted\">2356</a>\n<a href=\"#2357\" id=\"2357\" class=\"line-highlighted\">2357</a>\n<a href=\"#2358\" id=\"2358\" class=\"line-highlighted\">2358</a>\n<a href=\"#2359\" id=\"2359\" class=\"line-highlighted\">2359</a>\n<a href=\"#2360\" id=\"2360\" class=\"line-highlighted\">2360</a>\n<a href=\"#2361\" id=\"2361\" class=\"line-highlighted\">2361</a>\n<a href=\"#2362\" id=\"2362\" class=\"line-highlighted\">2362</a>\n<a href=\"#2363\" id=\"2363\" class=\"line-highlighted\">2363</a>\n<a href=\"#2364\" id=\"2364\" class=\"line-highlighted\">2364</a>\n<a href=\"#2365\" id=\"2365\" class=\"line-highlighted\">2365</a>\n<a href=\"#2366\" id=\"2366\" class=\"line-highlighted\">2366</a>\n<a href=\"#2367\" id=\"2367\" class=\"line-highlighted\">2367</a>\n<a href=\"#2368\" id=\"2368\" class=\"line-highlighted\">2368</a>\n<a href=\"#2369\" id=\"2369\" class=\"line-highlighted\">2369</a>\n<a href=\"#2370\" id=\"2370\" class=\"line-highlighted\">2370</a>\n<a href=\"#2371\" id=\"2371\" class=\"line-highlighted\">2371</a>\n<a href=\"#2372\" id=\"2372\" class=\"line-highlighted\">2372</a>\n<a href=\"#2373\" id=\"2373\" class=\"line-highlighted\">2373</a>\n<a href=\"#2374\" id=\"2374\" class=\"line-highlighted\">2374</a>\n<a href=\"#2375\" id=\"2375\" class=\"line-highlighted\">2375</a>\n<a href=\"#2376\" id=\"2376\" class=\"line-highlighted\">2376</a>\n<a href=\"#2377\" id=\"2377\" class=\"line-highlighted\">2377</a>\n<a href=\"#2378\" id=\"2378\" class=\"line-highlighted\">2378</a>\n<a href=\"#2379\" id=\"2379\" class=\"line-highlighted\">2379</a>\n<a href=\"#2380\" id=\"2380\" class=\"line-highlighted\">2380</a>\n<a href=\"#2381\" id=\"2381\" class=\"line-highlighted\">2381</a>\n<a href=\"#2382\" id=\"2382\" class=\"line-highlighted\">2382</a>\n<a href=\"#2383\" id=\"2383\" class=\"line-highlighted\">2383</a>\n<a href=\"#2384\" id=\"2384\" class=\"line-highlighted\">2384</a>\n<a href=\"#2385\" id=\"2385\" class=\"line-highlighted\">2385</a>\n<a href=\"#2386\" id=\"2386\" class=\"line-highlighted\">2386</a>\n<a href=\"#2387\" id=\"2387\" class=\"line-highlighted\">2387</a>\n<a href=\"#2388\" id=\"2388\" class=\"line-highlighted\">2388</a>\n<a href=\"#2389\" id=\"2389\" class=\"line-highlighted\">2389</a>\n<a href=\"#2390\" id=\"2390\" class=\"line-highlighted\">2390</a>\n<a href=\"#2391\" id=\"2391\" class=\"line-highlighted\">2391</a>\n<a href=\"#2392\" id=\"2392\" class=\"line-highlighted\">2392</a>\n<a href=\"#2393\" id=\"2393\" class=\"line-highlighted\">2393</a>\n<a href=\"#2394\" id=\"2394\" class=\"line-highlighted\">2394</a>\n<a href=\"#2395\" id=\"2395\" class=\"line-highlighted\">2395</a>\n<a href=\"#2396\" id=\"2396\" class=\"line-highlighted\">2396</a>\n<a href=\"#2397\" id=\"2397\" class=\"line-highlighted\">2397</a>\n<a href=\"#2398\" id=\"2398\" class=\"line-highlighted\">2398</a>\n<a href=\"#2399\" id=\"2399\" class=\"line-highlighted\">2399</a>\n<a href=\"#2400\" id=\"2400\" class=\"line-highlighted\">2400</a>\n<a href=\"#2401\" id=\"2401\" class=\"line-highlighted\">2401</a>\n<a href=\"#2402\" id=\"2402\" class=\"line-highlighted\">2402</a>\n<a href=\"#2403\" id=\"2403\" class=\"line-highlighted\">2403</a>\n<a href=\"#2404\" id=\"2404\" class=\"line-highlighted\">2404</a>\n<a href=\"#2405\" id=\"2405\" class=\"line-highlighted\">2405</a>\n<a href=\"#2406\" id=\"2406\" class=\"line-highlighted\">2406</a>\n<a href=\"#2407\" id=\"2407\" class=\"line-highlighted\">2407</a>\n<a href=\"#2408\" id=\"2408\" class=\"line-highlighted\">2408</a>\n<a href=\"#2409\" id=\"2409\" class=\"line-highlighted\">2409</a>\n<a href=\"#2410\" id=\"2410\" class=\"line-highlighted\">2410</a>\n<a href=\"#2411\" id=\"2411\" class=\"line-highlighted\">2411</a>\n<a href=\"#2412\" id=\"2412\" class=\"line-highlighted\">2412</a>\n<a href=\"#2413\" id=\"2413\" class=\"line-highlighted\">2413</a>\n<a href=\"#2414\" id=\"2414\" class=\"line-highlighted\">2414</a>\n<a href=\"#2415\" id=\"2415\" class=\"line-highlighted\">2415</a>\n<a href=\"#2416\" id=\"2416\" class=\"line-highlighted\">2416</a>\n<a href=\"#2417\" id=\"2417\" class=\"line-highlighted\">2417</a>\n<a href=\"#2418\" id=\"2418\" class=\"line-highlighted\">2418</a>\n<a href=\"#2419\" id=\"2419\" class=\"line-highlighted\">2419</a>\n<a href=\"#2420\" id=\"2420\" class=\"line-highlighted\">2420</a>\n<a href=\"#2421\" id=\"2421\" class=\"line-highlighted\">2421</a>\n<a href=\"#2422\" id=\"2422\" class=\"line-highlighted\">2422</a>\n<a href=\"#2423\" id=\"2423\" class=\"line-highlighted\">2423</a>\n<a href=\"#2424\" id=\"2424\" class=\"line-highlighted\">2424</a>\n<a href=\"#2425\" id=\"2425\" class=\"line-highlighted\">2425</a>\n<a href=\"#2426\" id=\"2426\" class=\"line-highlighted\">2426</a>\n<a href=\"#2427\" id=\"2427\" class=\"line-highlighted\">2427</a>\n<a href=\"#2428\" id=\"2428\" class=\"line-highlighted\">2428</a>\n<a href=\"#2429\" id=\"2429\" class=\"line-highlighted\">2429</a>\n<a href=\"#2430\" id=\"2430\" class=\"line-highlighted\">2430</a>\n<a href=\"#2431\" id=\"2431\" class=\"line-highlighted\">2431</a>\n<a href=\"#2432\" id=\"2432\" class=\"line-highlighted\">2432</a>\n<a href=\"#2433\" id=\"2433\" class=\"line-highlighted\">2433</a>\n<a href=\"#2434\" id=\"2434\" class=\"line-highlighted\">2434</a>\n<a href=\"#2435\" id=\"2435\" class=\"line-highlighted\">2435</a>\n<a href=\"#2436\" id=\"2436\" class=\"line-highlighted\">2436</a>\n<a href=\"#2437\" id=\"2437\" class=\"line-highlighted\">2437</a>\n<a href=\"#2438\" id=\"2438\" class=\"line-highlighted\">2438</a>\n<a href=\"#2439\" id=\"2439\" class=\"line-highlighted\">2439</a>\n<a href=\"#2440\" id=\"2440\" class=\"line-highlighted\">2440</a>\n<a href=\"#2441\" id=\"2441\" class=\"line-highlighted\">2441</a>\n<a href=\"#2442\" id=\"2442\" class=\"line-highlighted\">2442</a>\n<a href=\"#2443\" id=\"2443\" class=\"line-highlighted\">2443</a>\n<a href=\"#2444\" id=\"2444\" class=\"line-highlighted\">2444</a>\n<a href=\"#2445\" id=\"2445\" class=\"line-highlighted\">2445</a>\n<a href=\"#2446\" id=\"2446\" class=\"line-highlighted\">2446</a>\n<a href=\"#2447\" id=\"2447\" class=\"line-highlighted\">2447</a>\n<a href=\"#2448\" id=\"2448\" class=\"line-highlighted\">2448</a>\n<a href=\"#2449\" id=\"2449\" class=\"line-highlighted\">2449</a>\n<a href=\"#2450\" id=\"2450\" class=\"line-highlighted\">2450</a>\n<a href=\"#2451\" id=\"2451\" class=\"line-highlighted\">2451</a>\n<a href=\"#2452\" id=\"2452\" class=\"line-highlighted\">2452</a>\n<a href=\"#2453\" id=\"2453\" class=\"line-highlighted\">2453</a>\n<a href=\"#2454\" id=\"2454\" class=\"line-highlighted\">2454</a>\n<a href=\"#2455\" id=\"2455\" class=\"line-highlighted\">2455</a>\n<a href=\"#2456\" id=\"2456\" class=\"line-highlighted\">2456</a>\n<a href=\"#2457\" id=\"2457\" class=\"line-highlighted\">2457</a>\n<a href=\"#2458\" id=\"2458\" class=\"line-highlighted\">2458</a>\n<a href=\"#2459\" id=\"2459\" class=\"line-highlighted\">2459</a>\n<a href=\"#2460\" id=\"2460\" class=\"line-highlighted\">2460</a>\n<a href=\"#2461\" id=\"2461\" class=\"line-highlighted\">2461</a>\n<a href=\"#2462\" id=\"2462\" class=\"line-highlighted\">2462</a>\n<a href=\"#2463\" id=\"2463\" class=\"line-highlighted\">2463</a>\n<a href=\"#2464\" id=\"2464\" class=\"line-highlighted\">2464</a>\n<a href=\"#2465\" id=\"2465\" class=\"line-highlighted\">2465</a>\n<a href=\"#2466\" id=\"2466\" class=\"line-highlighted\">2466</a>\n<a href=\"#2467\" id=\"2467\" class=\"line-highlighted\">2467</a>\n<a href=\"#2468\" id=\"2468\" class=\"line-highlighted\">2468</a>\n<a href=\"#2469\" id=\"2469\" class=\"line-highlighted\">2469</a>\n<a href=\"#2470\" id=\"2470\" class=\"line-highlighted\">2470</a>\n<a href=\"#2471\" id=\"2471\" class=\"line-highlighted\">2471</a>\n<a href=\"#2472\" id=\"2472\" class=\"line-highlighted\">2472</a>\n<a href=\"#2473\" id=\"2473\" class=\"line-highlighted\">2473</a>\n<a href=\"#2474\" id=\"2474\" class=\"line-highlighted\">2474</a>\n<a href=\"#2475\" id=\"2475\" class=\"line-highlighted\">2475</a>\n<a href=\"#2476\" id=\"2476\" class=\"line-highlighted\">2476</a>\n<a href=\"#2477\" id=\"2477\" class=\"line-highlighted\">2477</a>\n<a href=\"#2478\" id=\"2478\" class=\"line-highlighted\">2478</a>\n<a href=\"#2479\" id=\"2479\" class=\"line-highlighted\">2479</a>\n<a href=\"#2480\" id=\"2480\" class=\"line-highlighted\">2480</a>\n<a href=\"#2481\" id=\"2481\" class=\"line-highlighted\">2481</a>\n<a href=\"#2482\" id=\"2482\" class=\"line-highlighted\">2482</a>\n<a href=\"#2483\" id=\"2483\" class=\"line-highlighted\">2483</a>\n<a href=\"#2484\" id=\"2484\" class=\"line-highlighted\">2484</a>\n<a href=\"#2485\" id=\"2485\" class=\"line-highlighted\">2485</a>\n<a href=\"#2486\" id=\"2486\" class=\"line-highlighted\">2486</a>\n<a href=\"#2487\" id=\"2487\" class=\"line-highlighted\">2487</a>\n<a href=\"#2488\" id=\"2488\" class=\"line-highlighted\">2488</a>\n<a href=\"#2489\" id=\"2489\" class=\"line-highlighted\">2489</a>\n<a href=\"#2490\" id=\"2490\" class=\"line-highlighted\">2490</a>\n<a href=\"#2491\" id=\"2491\" class=\"line-highlighted\">2491</a>\n<a href=\"#2492\" id=\"2492\" class=\"line-highlighted\">2492</a>\n<a href=\"#2493\" id=\"2493\" class=\"line-highlighted\">2493</a>\n<a href=\"#2494\" id=\"2494\" class=\"line-highlighted\">2494</a>\n<a href=\"#2495\" id=\"2495\" class=\"line-highlighted\">2495</a>\n<a href=\"#2496\" id=\"2496\" class=\"line-highlighted\">2496</a>\n<a href=\"#2497\" id=\"2497\" class=\"line-highlighted\">2497</a>\n<a href=\"#2498\" id=\"2498\" class=\"line-highlighted\">2498</a>\n<a href=\"#2499\" id=\"2499\" class=\"line-highlighted\">2499</a>\n<a href=\"#2500\" id=\"2500\" class=\"line-highlighted\">2500</a>\n<a href=\"#2501\" id=\"2501\" class=\"line-highlighted\">2501</a>\n<a href=\"#2502\" id=\"2502\" class=\"line-highlighted\">2502</a>\n<a href=\"#2503\" id=\"2503\" class=\"line-highlighted\">2503</a>\n<a href=\"#2504\" id=\"2504\" class=\"line-highlighted\">2504</a>\n<a href=\"#2505\" id=\"2505\" class=\"line-highlighted\">2505</a>\n<a href=\"#2506\" id=\"2506\" class=\"line-highlighted\">2506</a>\n<a href=\"#2507\" id=\"2507\" class=\"line-highlighted\">2507</a>\n<a href=\"#2508\" id=\"2508\" class=\"line-highlighted\">2508</a>\n<a href=\"#2509\" id=\"2509\" class=\"line-highlighted\">2509</a>\n<a href=\"#2510\" id=\"2510\" class=\"line-highlighted\">2510</a>\n<a href=\"#2511\" id=\"2511\" class=\"line-highlighted\">2511</a>\n<a href=\"#2512\" id=\"2512\" class=\"line-highlighted\">2512</a>\n<a href=\"#2513\" id=\"2513\" class=\"line-highlighted\">2513</a>\n<a href=\"#2514\" id=\"2514\" class=\"line-highlighted\">2514</a>\n<a href=\"#2515\" id=\"2515\" class=\"line-highlighted\">2515</a>\n<a href=\"#2516\" id=\"2516\" class=\"line-highlighted\">2516</a>\n<a href=\"#2517\" id=\"2517\" class=\"line-highlighted\">2517</a>\n<a href=\"#2518\" id=\"2518\" class=\"line-highlighted\">2518</a>\n<a href=\"#2519\" id=\"2519\" class=\"line-highlighted\">2519</a>\n<a href=\"#2520\" id=\"2520\" class=\"line-highlighted\">2520</a>\n<a href=\"#2521\" id=\"2521\" class=\"line-highlighted\">2521</a>\n<a href=\"#2522\" id=\"2522\" class=\"line-highlighted\">2522</a>\n<a href=\"#2523\" id=\"2523\" class=\"line-highlighted\">2523</a>\n<a href=\"#2524\" id=\"2524\" class=\"line-highlighted\">2524</a>\n<a href=\"#2525\" id=\"2525\" class=\"line-highlighted\">2525</a>\n<a href=\"#2526\" id=\"2526\" class=\"line-highlighted\">2526</a>\n<a href=\"#2527\" id=\"2527\" class=\"line-highlighted\">2527</a>\n<a href=\"#2528\" id=\"2528\" class=\"line-highlighted\">2528</a>\n<a href=\"#2529\" id=\"2529\" class=\"line-highlighted\">2529</a>\n<a href=\"#2530\" id=\"2530\" class=\"line-highlighted\">2530</a>\n<a href=\"#2531\" id=\"2531\" class=\"line-highlighted\">2531</a>\n<a href=\"#2532\" id=\"2532\" class=\"line-highlighted\">2532</a>\n<a href=\"#2533\" id=\"2533\" class=\"line-highlighted\">2533</a>\n<a href=\"#2534\" id=\"2534\" class=\"line-highlighted\">2534</a>\n<a href=\"#2535\" id=\"2535\" class=\"line-highlighted\">2535</a>\n<a href=\"#2536\" id=\"2536\" class=\"line-highlighted\">2536</a>\n<a href=\"#2537\" id=\"2537\" class=\"line-highlighted\">2537</a>\n<a href=\"#2538\" id=\"2538\" class=\"line-highlighted\">2538</a>\n<a href=\"#2539\" id=\"2539\" class=\"line-highlighted\">2539</a>\n<a href=\"#2540\" id=\"2540\" class=\"line-highlighted\">2540</a>\n<a href=\"#2541\" id=\"2541\" class=\"line-highlighted\">2541</a>\n<a href=\"#2542\" id=\"2542\" class=\"line-highlighted\">2542</a>\n<a href=\"#2543\" id=\"2543\" class=\"line-highlighted\">2543</a>\n<a href=\"#2544\" id=\"2544\" class=\"line-highlighted\">2544</a>\n<a href=\"#2545\" id=\"2545\" class=\"line-highlighted\">2545</a>\n<a href=\"#2546\" id=\"2546\" class=\"line-highlighted\">2546</a>\n<a href=\"#2547\" id=\"2547\" class=\"line-highlighted\">2547</a>\n<a href=\"#2548\" id=\"2548\" class=\"line-highlighted\">2548</a>\n<a href=\"#2549\" id=\"2549\" class=\"line-highlighted\">2549</a>\n<a href=\"#2550\" id=\"2550\" class=\"line-highlighted\">2550</a>\n<a href=\"#2551\" id=\"2551\" class=\"line-highlighted\">2551</a>\n<a href=\"#2552\" id=\"2552\" class=\"line-highlighted\">2552</a>\n<a href=\"#2553\" id=\"2553\" class=\"line-highlighted\">2553</a>\n<a href=\"#2554\" id=\"2554\" class=\"line-highlighted\">2554</a>\n<a href=\"#2555\" id=\"2555\" class=\"line-highlighted\">2555</a>\n<a href=\"#2556\" id=\"2556\" class=\"line-highlighted\">2556</a>\n<a href=\"#2557\" id=\"2557\" class=\"line-highlighted\">2557</a>\n<a href=\"#2558\" id=\"2558\" class=\"line-highlighted\">2558</a>\n<a href=\"#2559\" id=\"2559\" class=\"line-highlighted\">2559</a>\n<a href=\"#2560\" id=\"2560\" class=\"line-highlighted\">2560</a>\n<a href=\"#2561\" id=\"2561\" class=\"line-highlighted\">2561</a>\n<a href=\"#2562\" id=\"2562\" class=\"line-highlighted\">2562</a>\n<a href=\"#2563\" id=\"2563\" class=\"line-highlighted\">2563</a>\n<a href=\"#2564\" id=\"2564\" class=\"line-highlighted\">2564</a>\n<a href=\"#2565\" id=\"2565\" class=\"line-highlighted\">2565</a>\n<a href=\"#2566\" id=\"2566\" class=\"line-highlighted\">2566</a>\n<a href=\"#2567\" id=\"2567\" class=\"line-highlighted\">2567</a>\n<a href=\"#2568\" id=\"2568\" class=\"line-highlighted\">2568</a>\n<a href=\"#2569\" id=\"2569\" class=\"line-highlighted\">2569</a>\n<a href=\"#2570\" id=\"2570\" class=\"line-highlighted\">2570</a>\n<a href=\"#2571\" id=\"2571\" class=\"line-highlighted\">2571</a>\n<a href=\"#2572\" id=\"2572\" class=\"line-highlighted\">2572</a>\n<a href=\"#2573\" id=\"2573\" class=\"line-highlighted\">2573</a>\n<a href=\"#2574\" id=\"2574\" class=\"line-highlighted\">2574</a>\n<a href=\"#2575\" id=\"2575\" class=\"line-highlighted\">2575</a>\n<a href=\"#2576\" id=\"2576\" class=\"line-highlighted\">2576</a>\n<a href=\"#2577\" id=\"2577\" class=\"line-highlighted\">2577</a>\n<a href=\"#2578\" id=\"2578\" class=\"line-highlighted\">2578</a>\n<a href=\"#2579\" id=\"2579\" class=\"line-highlighted\">2579</a>\n<a href=\"#2580\" id=\"2580\" class=\"line-highlighted\">2580</a>\n<a href=\"#2581\" id=\"2581\" class=\"line-highlighted\">2581</a>\n<a href=\"#2582\" id=\"2582\" class=\"line-highlighted\">2582</a>\n<a href=\"#2583\" id=\"2583\" class=\"line-highlighted\">2583</a>\n<a href=\"#2584\" id=\"2584\" class=\"line-highlighted\">2584</a>\n<a href=\"#2585\" id=\"2585\" class=\"line-highlighted\">2585</a>\n<a href=\"#2586\" id=\"2586\" class=\"line-highlighted\">2586</a>\n<a href=\"#2587\" id=\"2587\" class=\"line-highlighted\">2587</a>\n<a href=\"#2588\" id=\"2588\" class=\"line-highlighted\">2588</a>\n<a href=\"#2589\" id=\"2589\" class=\"line-highlighted\">2589</a>\n<a href=\"#2590\" id=\"2590\" class=\"line-highlighted\">2590</a>\n<a href=\"#2591\" id=\"2591\" class=\"line-highlighted\">2591</a>\n<a href=\"#2592\" id=\"2592\" class=\"line-highlighted\">2592</a>\n<a href=\"#2593\" id=\"2593\" class=\"line-highlighted\">2593</a>\n<a href=\"#2594\" id=\"2594\" class=\"line-highlighted\">2594</a>\n<a href=\"#2595\" id=\"2595\" class=\"line-highlighted\">2595</a>\n<a href=\"#2596\" id=\"2596\" class=\"line-highlighted\">2596</a>\n<a href=\"#2597\" id=\"2597\" class=\"line-highlighted\">2597</a>\n<a href=\"#2598\" id=\"2598\" class=\"line-highlighted\">2598</a>\n<a href=\"#2599\" id=\"2599\" class=\"line-highlighted\">2599</a>\n<a href=\"#2600\" id=\"2600\" class=\"line-highlighted\">2600</a>\n<a href=\"#2601\" id=\"2601\" class=\"line-highlighted\">2601</a>\n<a href=\"#2602\" id=\"2602\" class=\"line-highlighted\">2602</a>\n<a href=\"#2603\" id=\"2603\" class=\"line-highlighted\">2603</a>\n<a href=\"#2604\" id=\"2604\" class=\"line-highlighted\">2604</a>\n<a href=\"#2605\" id=\"2605\" class=\"line-highlighted\">2605</a>\n<a href=\"#2606\" id=\"2606\" class=\"line-highlighted\">2606</a>\n<a href=\"#2607\" id=\"2607\" class=\"line-highlighted\">2607</a>\n<a href=\"#2608\" id=\"2608\" class=\"line-highlighted\">2608</a>\n<a href=\"#2609\" id=\"2609\" class=\"line-highlighted\">2609</a>\n<a href=\"#2610\" id=\"2610\" class=\"line-highlighted\">2610</a>\n<a href=\"#2611\" id=\"2611\" class=\"line-highlighted\">2611</a>\n<a href=\"#2612\" id=\"2612\" class=\"line-highlighted\">2612</a>\n<a href=\"#2613\" id=\"2613\" class=\"line-highlighted\">2613</a>\n<a href=\"#2614\" id=\"2614\" class=\"line-highlighted\">2614</a>\n<a href=\"#2615\" id=\"2615\" class=\"line-highlighted\">2615</a>\n<a href=\"#2616\" id=\"2616\" class=\"line-highlighted\">2616</a>\n<a href=\"#2617\" id=\"2617\" class=\"line-highlighted\">2617</a>\n<a href=\"#2618\" id=\"2618\" class=\"line-highlighted\">2618</a>\n<a href=\"#2619\" id=\"2619\" class=\"line-highlighted\">2619</a>\n<a href=\"#2620\" id=\"2620\" class=\"line-highlighted\">2620</a>\n<a href=\"#2621\" id=\"2621\" class=\"line-highlighted\">2621</a>\n<a href=\"#2622\" id=\"2622\" class=\"line-highlighted\">2622</a>\n<a href=\"#2623\" id=\"2623\" class=\"line-highlighted\">2623</a>\n<a href=\"#2624\" id=\"2624\" class=\"line-highlighted\">2624</a>\n<a href=\"#2625\" id=\"2625\" class=\"line-highlighted\">2625</a>\n<a href=\"#2626\" id=\"2626\" class=\"line-highlighted\">2626</a>\n<a href=\"#2627\" id=\"2627\" class=\"line-highlighted\">2627</a>\n<a href=\"#2628\" id=\"2628\" class=\"line-highlighted\">2628</a>\n<a href=\"#2629\" id=\"2629\" class=\"line-highlighted\">2629</a>\n<a href=\"#2630\" id=\"2630\" class=\"line-highlighted\">2630</a>\n<a href=\"#2631\" id=\"2631\" class=\"line-highlighted\">2631</a>\n<a href=\"#2632\" id=\"2632\" class=\"line-highlighted\">2632</a>\n<a href=\"#2633\" id=\"2633\" class=\"line-highlighted\">2633</a>\n<a href=\"#2634\" id=\"2634\" class=\"line-highlighted\">2634</a>\n<a href=\"#2635\" id=\"2635\" class=\"line-highlighted\">2635</a>\n<a href=\"#2636\" id=\"2636\" class=\"line-highlighted\">2636</a>\n<a href=\"#2637\" id=\"2637\" class=\"line-highlighted\">2637</a>\n<a href=\"#2638\" id=\"2638\" class=\"line-highlighted\">2638</a>\n<a href=\"#2639\" id=\"2639\" class=\"line-highlighted\">2639</a>\n<a href=\"#2640\" id=\"2640\" class=\"line-highlighted\">2640</a>\n<a href=\"#2641\" id=\"2641\" class=\"line-highlighted\">2641</a>\n<a href=\"#2642\" id=\"2642\" class=\"line-highlighted\">2642</a>\n<a href=\"#2643\" id=\"2643\" class=\"line-highlighted\">2643</a>\n<a href=\"#2644\" id=\"2644\" class=\"line-highlighted\">2644</a>\n<a href=\"#2645\" id=\"2645\" class=\"line-highlighted\">2645</a>\n<a href=\"#2646\" id=\"2646\" class=\"line-highlighted\">2646</a>\n<a href=\"#2647\" id=\"2647\" class=\"line-highlighted\">2647</a>\n<a href=\"#2648\" id=\"2648\" class=\"line-highlighted\">2648</a>\n<a href=\"#2649\" id=\"2649\" class=\"line-highlighted\">2649</a>\n<a href=\"#2650\" id=\"2650\" class=\"line-highlighted\">2650</a>\n<a href=\"#2651\" id=\"2651\" class=\"line-highlighted\">2651</a>\n<a href=\"#2652\" id=\"2652\" class=\"line-highlighted\">2652</a>\n<a href=\"#2653\" id=\"2653\" class=\"line-highlighted\">2653</a>\n<a href=\"#2654\" id=\"2654\" class=\"line-highlighted\">2654</a>\n<a href=\"#2655\" id=\"2655\" class=\"line-highlighted\">2655</a>\n<a href=\"#2656\" id=\"2656\" class=\"line-highlighted\">2656</a>\n<a href=\"#2657\" id=\"2657\" class=\"line-highlighted\">2657</a>\n<a href=\"#2658\" id=\"2658\" class=\"line-highlighted\">2658</a>\n<a href=\"#2659\" id=\"2659\" class=\"line-highlighted\">2659</a>\n<a href=\"#2660\" id=\"2660\" class=\"line-highlighted\">2660</a>\n<a href=\"#2661\" id=\"2661\" class=\"line-highlighted\">2661</a>\n<a href=\"#2662\" id=\"2662\" class=\"line-highlighted\">2662</a>\n<a href=\"#2663\" id=\"2663\" class=\"line-highlighted\">2663</a>\n<a href=\"#2664\" id=\"2664\" class=\"line-highlighted\">2664</a>\n<a href=\"#2665\" id=\"2665\" class=\"line-highlighted\">2665</a>\n<a href=\"#2666\" id=\"2666\" class=\"line-highlighted\">2666</a>\n<a href=\"#2667\" id=\"2667\" class=\"line-highlighted\">2667</a>\n<a href=\"#2668\" id=\"2668\" class=\"line-highlighted\">2668</a>\n<a href=\"#2669\" id=\"2669\" class=\"line-highlighted\">2669</a>\n<a href=\"#2670\" id=\"2670\" class=\"line-highlighted\">2670</a>\n<a href=\"#2671\" id=\"2671\" class=\"line-highlighted\">2671</a>\n<a href=\"#2672\" id=\"2672\" class=\"line-highlighted\">2672</a>\n<a href=\"#2673\" id=\"2673\" class=\"line-highlighted\">2673</a>\n<a href=\"#2674\" id=\"2674\" class=\"line-highlighted\">2674</a>\n<a href=\"#2675\" id=\"2675\" class=\"line-highlighted\">2675</a>\n<a href=\"#2676\" id=\"2676\" class=\"line-highlighted\">2676</a>\n<a href=\"#2677\" id=\"2677\" class=\"line-highlighted\">2677</a>\n<a href=\"#2678\" id=\"2678\" class=\"line-highlighted\">2678</a>\n<a href=\"#2679\" id=\"2679\" class=\"line-highlighted\">2679</a>\n<a href=\"#2680\" id=\"2680\" class=\"line-highlighted\">2680</a>\n<a href=\"#2681\" id=\"2681\" class=\"line-highlighted\">2681</a>\n<a href=\"#2682\" id=\"2682\" class=\"line-highlighted\">2682</a>\n<a href=\"#2683\" id=\"2683\" class=\"line-highlighted\">2683</a>\n<a href=\"#2684\" id=\"2684\" class=\"line-highlighted\">2684</a>\n<a href=\"#2685\" id=\"2685\" class=\"line-highlighted\">2685</a>\n<a href=\"#2686\" id=\"2686\" class=\"line-highlighted\">2686</a>\n<a href=\"#2687\" id=\"2687\" class=\"line-highlighted\">2687</a>\n<a href=\"#2688\" id=\"2688\" class=\"line-highlighted\">2688</a>\n<a href=\"#2689\" id=\"2689\" class=\"line-highlighted\">2689</a>\n<a href=\"#2690\" id=\"2690\" class=\"line-highlighted\">2690</a>\n<a href=\"#2691\" id=\"2691\" class=\"line-highlighted\">2691</a>\n<a href=\"#2692\" id=\"2692\" class=\"line-highlighted\">2692</a>\n<a href=\"#2693\" id=\"2693\" class=\"line-highlighted\">2693</a>\n<a href=\"#2694\" id=\"2694\" class=\"line-highlighted\">2694</a>\n<a href=\"#2695\" id=\"2695\" class=\"line-highlighted\">2695</a>\n<a href=\"#2696\" id=\"2696\" class=\"line-highlighted\">2696</a>\n<a href=\"#2697\" id=\"2697\" class=\"line-highlighted\">2697</a>\n<a href=\"#2698\" id=\"2698\" class=\"line-highlighted\">2698</a>\n<a href=\"#2699\" id=\"2699\" class=\"line-highlighted\">2699</a>\n<a href=\"#2700\" id=\"2700\" class=\"line-highlighted\">2700</a>\n<a href=\"#2701\" id=\"2701\" class=\"line-highlighted\">2701</a>\n<a href=\"#2702\" id=\"2702\" class=\"line-highlighted\">2702</a>\n<a href=\"#2703\" id=\"2703\" class=\"line-highlighted\">2703</a>\n<a href=\"#2704\" id=\"2704\" class=\"line-highlighted\">2704</a>\n<a href=\"#2705\" id=\"2705\" class=\"line-highlighted\">2705</a>\n<a href=\"#2706\" id=\"2706\" class=\"line-highlighted\">2706</a>\n<a href=\"#2707\" id=\"2707\" class=\"line-highlighted\">2707</a>\n<a href=\"#2708\" id=\"2708\" class=\"line-highlighted\">2708</a>\n<a href=\"#2709\" id=\"2709\" class=\"line-highlighted\">2709</a>\n<a href=\"#2710\" id=\"2710\" class=\"line-highlighted\">2710</a>\n<a href=\"#2711\" id=\"2711\" class=\"line-highlighted\">2711</a>\n<a href=\"#2712\" id=\"2712\" class=\"line-highlighted\">2712</a>\n<a href=\"#2713\" id=\"2713\" class=\"line-highlighted\">2713</a>\n<a href=\"#2714\" id=\"2714\" class=\"line-highlighted\">2714</a>\n<a href=\"#2715\" id=\"2715\" class=\"line-highlighted\">2715</a>\n<a href=\"#2716\" id=\"2716\" class=\"line-highlighted\">2716</a>\n<a href=\"#2717\" id=\"2717\" class=\"line-highlighted\">2717</a>\n<a href=\"#2718\" id=\"2718\" class=\"line-highlighted\">2718</a>\n<a href=\"#2719\" id=\"2719\" class=\"line-highlighted\">2719</a>\n<a href=\"#2720\" id=\"2720\" class=\"line-highlighted\">2720</a>\n<a href=\"#2721\" id=\"2721\" class=\"line-highlighted\">2721</a>\n<a href=\"#2722\" id=\"2722\" class=\"line-highlighted\">2722</a>\n<a href=\"#2723\" id=\"2723\" class=\"line-highlighted\">2723</a>\n<a href=\"#2724\" id=\"2724\" class=\"line-highlighted\">2724</a>\n<a href=\"#2725\" id=\"2725\" class=\"line-highlighted\">2725</a>\n<a href=\"#2726\" id=\"2726\" class=\"line-highlighted\">2726</a>\n<a href=\"#2727\" id=\"2727\" class=\"line-highlighted\">2727</a>\n<a href=\"#2728\" id=\"2728\" class=\"line-highlighted\">2728</a>\n<a href=\"#2729\" id=\"2729\" class=\"line-highlighted\">2729</a>\n<a href=\"#2730\" id=\"2730\" class=\"line-highlighted\">2730</a>\n<a href=\"#2731\" id=\"2731\" class=\"line-highlighted\">2731</a>\n<a href=\"#2732\" id=\"2732\" class=\"line-highlighted\">2732</a>\n<a href=\"#2733\" id=\"2733\" class=\"line-highlighted\">2733</a>\n<a href=\"#2734\" id=\"2734\" class=\"line-highlighted\">2734</a>\n<a href=\"#2735\" id=\"2735\" class=\"line-highlighted\">2735</a>\n<a href=\"#2736\" id=\"2736\" class=\"line-highlighted\">2736</a>\n<a href=\"#2737\" id=\"2737\" class=\"line-highlighted\">2737</a>\n<a href=\"#2738\" id=\"2738\" class=\"line-highlighted\">2738</a>\n<a href=\"#2739\" id=\"2739\" class=\"line-highlighted\">2739</a>\n<a href=\"#2740\" id=\"2740\" class=\"line-highlighted\">2740</a>\n<a href=\"#2741\" id=\"2741\" class=\"line-highlighted\">2741</a>\n<a href=\"#2742\" id=\"2742\" class=\"line-highlighted\">2742</a>\n<a href=\"#2743\" id=\"2743\" class=\"line-highlighted\">2743</a>\n<a href=\"#2744\" id=\"2744\" class=\"line-highlighted\">2744</a>\n<a href=\"#2745\" id=\"2745\" class=\"line-highlighted\">2745</a>\n<a href=\"#2746\" id=\"2746\" class=\"line-highlighted\">2746</a>\n<a href=\"#2747\" id=\"2747\" class=\"line-highlighted\">2747</a>\n<a href=\"#2748\" id=\"2748\" class=\"line-highlighted\">2748</a>\n<a href=\"#2749\" id=\"2749\" class=\"line-highlighted\">2749</a>\n<a href=\"#2750\" id=\"2750\" class=\"line-highlighted\">2750</a>\n<a href=\"#2751\" id=\"2751\" class=\"line-highlighted\">2751</a>\n<a href=\"#2752\" id=\"2752\" class=\"line-highlighted\">2752</a>\n<a href=\"#2753\" id=\"2753\" class=\"line-highlighted\">2753</a>\n<a href=\"#2754\" id=\"2754\" class=\"line-highlighted\">2754</a>\n<a href=\"#2755\" id=\"2755\" class=\"line-highlighted\">2755</a>\n<a href=\"#2756\" id=\"2756\" class=\"line-highlighted\">2756</a>\n</pre></div><pre class=\"rust\"><code><span class=\"doccomment\">//! Filesystem manipulation operations.\n//!\n//! This module contains basic methods to manipulate the contents of the local\n//! filesystem. All methods in this module represent cross-platform filesystem\n//! operations. Extra platform-specific functionality can be found in the\n//! extension traits of `std::os::$platform`.\n\n</span><span class=\"attr\">#![stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n#![deny(unsafe_op_in_unsafe_fn)]\n\n#[cfg(all(test, not(any(target_os = <span class=\"string\">\"emscripten\"</span>, target_env = <span class=\"string\">\"sgx\"</span>, target_os = <span class=\"string\">\"xous\"</span>))))]\n</span><span class=\"kw\">mod </span>tests;\n\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::ffi::OsString;\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::fmt;\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::io::{<span class=\"self\">self</span>, BorrowedCursor, IoSlice, IoSliceMut, Read, Seek, SeekFrom, Write};\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::path::{Path, PathBuf};\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::sealed::Sealed;\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::sync::Arc;\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::sys::fs <span class=\"kw\">as </span>fs_imp;\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::sys_common::{AsInner, AsInnerMut, FromInner, IntoInner};\n<span class=\"kw\">use </span><span class=\"kw\">crate</span>::time::SystemTime;\n\n<span class=\"doccomment\">/// An object providing access to an open file on the filesystem.\n///\n/// An instance of a `File` can be read and/or written depending on what options\n/// it was opened with. Files also implement [`Seek`] to alter the logical cursor\n/// that the file contains internally.\n///\n/// Files are automatically closed when they go out of scope.  Errors detected\n/// on closing are ignored by the implementation of `Drop`.  Use the method\n/// [`sync_all`] if these errors must be manually handled.\n///\n/// `File` does not buffer reads and writes. For efficiency, consider wrapping the\n/// file in a [`BufReader`] or [`BufWriter`] when performing many small [`read`]\n/// or [`write`] calls, unless unbuffered reads and writes are required.\n///\n/// # Examples\n///\n/// Creates a new file and write bytes to it (you can also use [`write`]):\n///\n/// ```no_run\n/// use std::fs::File;\n/// use std::io::prelude::*;\n///\n/// fn main() -&gt; std::io::Result&lt;()&gt; {\n///     let mut file = File::create(\"foo.txt\")?;\n///     file.write_all(b\"Hello, world!\")?;\n///     Ok(())\n/// }\n/// ```\n///\n/// Read the contents of a file into a [`String`] (you can also use [`read`]):\n///\n/// ```no_run\n/// use std::fs::File;\n/// use std::io::prelude::*;\n///\n/// fn main() -&gt; std::io::Result&lt;()&gt; {\n///     let mut file = File::open(\"foo.txt\")?;\n///     let mut contents = String::new();\n///     file.read_to_string(&amp;mut contents)?;\n///     assert_eq!(contents, \"Hello, world!\");\n///     Ok(())\n/// }\n/// ```\n///\n/// Using a buffered [`Read`]er:\n///\n/// ```no_run\n/// use std::fs::File;\n/// use std::io::BufReader;\n/// use std::io::prelude::*;\n///\n/// fn main() -&gt; std::io::Result&lt;()&gt; {\n///     let file = File::open(\"foo.txt\")?;\n///     let mut buf_reader = BufReader::new(file);\n///     let mut contents = String::new();\n///     buf_reader.read_to_string(&amp;mut contents)?;\n///     assert_eq!(contents, \"Hello, world!\");\n///     Ok(())\n/// }\n/// ```\n///\n/// Note that, although read and write methods require a `&amp;mut File`, because\n/// of the interfaces for [`Read`] and [`Write`], the holder of a `&amp;File` can\n/// still modify the file, either through methods that take `&amp;File` or by\n/// retrieving the underlying OS object and modifying the file that way.\n/// Additionally, many operating systems allow concurrent modification of files\n/// by different processes. Avoid assuming that holding a `&amp;File` means that the\n/// file will not change.\n///\n/// # Platform-specific behavior\n///\n/// On Windows, the implementation of [`Read`] and [`Write`] traits for `File`\n/// perform synchronous I/O operations. Therefore the underlying file must not\n/// have been opened for asynchronous I/O (e.g. by using `FILE_FLAG_OVERLAPPED`).\n///\n/// [`BufReader`]: io::BufReader\n/// [`BufWriter`]: io::BufWriter\n/// [`sync_all`]: File::sync_all\n/// [`write`]: File::write\n/// [`read`]: File::read\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n#[cfg_attr(not(test), rustc_diagnostic_item = <span class=\"string\">\"File\"</span>)]\n</span><span class=\"kw\">pub struct </span>File {\n    inner: fs_imp::File,\n}\n\n<span class=\"doccomment\">/// Metadata information about a file.\n///\n/// This structure is returned from the [`metadata`] or\n/// [`symlink_metadata`] function or method and represents known\n/// metadata about a file such as its permissions, size, modification\n/// times, etc.\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n#[derive(Clone)]\n</span><span class=\"kw\">pub struct </span>Metadata(fs_imp::FileAttr);\n\n<span class=\"doccomment\">/// Iterator over the entries in a directory.\n///\n/// This iterator is returned from the [`read_dir`] function of this module and\n/// will yield instances of &lt;code&gt;[io::Result]&lt;[DirEntry]&gt;&lt;/code&gt;. Through a [`DirEntry`]\n/// information like the entry's path and possibly other metadata can be\n/// learned.\n///\n/// The order in which this iterator returns entries is platform and filesystem\n/// dependent.\n///\n/// # Errors\n///\n/// This [`io::Result`] will be an [`Err`] if there's some sort of intermittent\n/// IO error during iteration.\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n#[derive(Debug)]\n</span><span class=\"kw\">pub struct </span>ReadDir(fs_imp::ReadDir);\n\n<span class=\"doccomment\">/// Entries returned by the [`ReadDir`] iterator.\n///\n/// An instance of `DirEntry` represents an entry inside of a directory on the\n/// filesystem. Each entry can be inspected via methods to learn about the full\n/// path or possibly other metadata through per-platform extension traits.\n///\n/// # Platform-specific behavior\n///\n/// On Unix, the `DirEntry` struct contains an internal reference to the open\n/// directory. Holding `DirEntry` objects will consume a file handle even\n/// after the `ReadDir` iterator is dropped.\n///\n/// Note that this [may change in the future][changes].\n///\n/// [changes]: io#platform-specific-behavior\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">pub struct </span>DirEntry(fs_imp::DirEntry);\n\n<span class=\"doccomment\">/// Options and flags which can be used to configure how a file is opened.\n///\n/// This builder exposes the ability to configure how a [`File`] is opened and\n/// what operations are permitted on the open file. The [`File::open`] and\n/// [`File::create`] methods are aliases for commonly used options using this\n/// builder.\n///\n/// Generally speaking, when using `OpenOptions`, you'll first call\n/// [`OpenOptions::new`], then chain calls to methods to set each option, then\n/// call [`OpenOptions::open`], passing the path of the file you're trying to\n/// open. This will give you a [`io::Result`] with a [`File`] inside that you\n/// can further operate on.\n///\n/// # Examples\n///\n/// Opening a file to read:\n///\n/// ```no_run\n/// use std::fs::OpenOptions;\n///\n/// let file = OpenOptions::new().read(true).open(\"foo.txt\");\n/// ```\n///\n/// Opening a file for both reading and writing, as well as creating it if it\n/// doesn't exist:\n///\n/// ```no_run\n/// use std::fs::OpenOptions;\n///\n/// let file = OpenOptions::new()\n///             .read(true)\n///             .write(true)\n///             .create(true)\n///             .open(\"foo.txt\");\n/// ```\n</span><span class=\"attr\">#[derive(Clone, Debug)]\n#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n#[cfg_attr(not(test), rustc_diagnostic_item = <span class=\"string\">\"FsOpenOptions\"</span>)]\n</span><span class=\"kw\">pub struct </span>OpenOptions(fs_imp::OpenOptions);\n\n<span class=\"doccomment\">/// Representation of the various timestamps on a file.\n</span><span class=\"attr\">#[derive(Copy, Clone, Debug, Default)]\n#[stable(feature = <span class=\"string\">\"file_set_times\"</span>, since = <span class=\"string\">\"1.75.0\"</span>)]\n</span><span class=\"kw\">pub struct </span>FileTimes(fs_imp::FileTimes);\n\n<span class=\"doccomment\">/// Representation of the various permissions on a file.\n///\n/// This module only currently provides one bit of information,\n/// [`Permissions::readonly`], which is exposed on all currently supported\n/// platforms. Unix-specific functionality, such as mode bits, is available\n/// through the [`PermissionsExt`] trait.\n///\n/// [`PermissionsExt`]: crate::os::unix::fs::PermissionsExt\n</span><span class=\"attr\">#[derive(Clone, PartialEq, Eq, Debug)]\n#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n#[cfg_attr(not(test), rustc_diagnostic_item = <span class=\"string\">\"FsPermissions\"</span>)]\n</span><span class=\"kw\">pub struct </span>Permissions(fs_imp::FilePermissions);\n\n<span class=\"doccomment\">/// A structure representing a type of file with accessors for each file type.\n/// It is returned by [`Metadata::file_type`] method.\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"file_type\"</span>, since = <span class=\"string\">\"1.1.0\"</span>)]\n#[derive(Copy, Clone, PartialEq, Eq, Hash)]\n#[cfg_attr(not(test), rustc_diagnostic_item = <span class=\"string\">\"FileType\"</span>)]\n</span><span class=\"kw\">pub struct </span>FileType(fs_imp::FileType);\n\n<span class=\"doccomment\">/// A builder used to create directories in various manners.\n///\n/// This builder also supports platform-specific options.\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"dir_builder\"</span>, since = <span class=\"string\">\"1.6.0\"</span>)]\n#[cfg_attr(not(test), rustc_diagnostic_item = <span class=\"string\">\"DirBuilder\"</span>)]\n#[derive(Debug)]\n</span><span class=\"kw\">pub struct </span>DirBuilder {\n    inner: fs_imp::DirBuilder,\n    recursive: bool,\n}\n\n<span class=\"doccomment\">/// Read the entire contents of a file into a bytes vector.\n///\n/// This is a convenience function for using [`File::open`] and [`read_to_end`]\n/// with fewer imports and without an intermediate variable.\n///\n/// [`read_to_end`]: Read::read_to_end\n///\n/// # Errors\n///\n/// This function will return an error if `path` does not already exist.\n/// Other errors may also be returned according to [`OpenOptions::open`].\n///\n/// While reading from the file, this function handles [`io::ErrorKind::Interrupted`]\n/// with automatic retries. See [io::Read] documentation for details.\n///\n/// # Examples\n///\n/// ```no_run\n/// use std::fs;\n///\n/// fn main() -&gt; Result&lt;(), Box&lt;dyn std::error::Error + 'static&gt;&gt; {\n///     let data: Vec&lt;u8&gt; = fs::read(\"image.jpg\")?;\n///     assert_eq!(data[0..3], [0xFF, 0xD8, 0xFF]);\n///     Ok(())\n/// }\n/// ```\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"fs_read_write_bytes\"</span>, since = <span class=\"string\">\"1.26.0\"</span>)]\n</span><span class=\"kw\">pub fn </span>read&lt;P: AsRef&lt;Path&gt;&gt;(path: P) -&gt; io::Result&lt;Vec&lt;u8&gt;&gt; {\n    <span class=\"kw\">fn </span>inner(path: <span class=\"kw-2\">&amp;</span>Path) -&gt; io::Result&lt;Vec&lt;u8&gt;&gt; {\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>file = File::open(path)<span class=\"question-mark\">?</span>;\n        <span class=\"kw\">let </span>size = file.metadata().map(|m| m.len() <span class=\"kw\">as </span>usize).ok();\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bytes = Vec::new();\n        bytes.try_reserve_exact(size.unwrap_or(<span class=\"number\">0</span>))<span class=\"question-mark\">?</span>;\n        io::default_read_to_end(<span class=\"kw-2\">&amp;mut </span>file, <span class=\"kw-2\">&amp;mut </span>bytes, size)<span class=\"question-mark\">?</span>;\n        <span class=\"prelude-val\">Ok</span>(bytes)\n    }\n    inner(path.as_ref())\n}\n\n<span class=\"doccomment\">/// Read the entire contents of a file into a string.\n///\n/// This is a convenience function for using [`File::open`] and [`read_to_string`]\n/// with fewer imports and without an intermediate variable.\n///\n/// [`read_to_string`]: Read::read_to_string\n///\n/// # Errors\n///\n/// This function will return an error if `path` does not already exist.\n/// Other errors may also be returned according to [`OpenOptions::open`].\n///\n/// If the contents of the file are not valid UTF-8, then an error will also be\n/// returned.\n///\n/// While reading from the file, this function handles [`io::ErrorKind::Interrupted`]\n/// with automatic retries. See [io::Read] documentation for details.\n///\n/// # Examples\n///\n/// ```no_run\n/// use std::fs;\n/// use std::error::Error;\n///\n/// fn main() -&gt; Result&lt;(), Box&lt;dyn Error&gt;&gt; {\n///     let message: String = fs::read_to_string(\"message.txt\")?;\n///     println!(\"{}\", message);\n///     Ok(())\n/// }\n/// ```\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"fs_read_write\"</span>, since = <span class=\"string\">\"1.26.0\"</span>)]\n</span><span class=\"kw\">pub fn </span>read_to_string&lt;P: AsRef&lt;Path&gt;&gt;(path: P) -&gt; io::Result&lt;String&gt; {\n    <span class=\"kw\">fn </span>inner(path: <span class=\"kw-2\">&amp;</span>Path) -&gt; io::Result&lt;String&gt; {\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>file = File::open(path)<span class=\"question-mark\">?</span>;\n        <span class=\"kw\">let </span>size = file.metadata().map(|m| m.len() <span class=\"kw\">as </span>usize).ok();\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>string = String::new();\n        string.try_reserve_exact(size.unwrap_or(<span class=\"number\">0</span>))<span class=\"question-mark\">?</span>;\n        io::default_read_to_string(<span class=\"kw-2\">&amp;mut </span>file, <span class=\"kw-2\">&amp;mut </span>string, size)<span class=\"question-mark\">?</span>;\n        <span class=\"prelude-val\">Ok</span>(string)\n    }\n    inner(path.as_ref())\n}\n\n<span class=\"doccomment\">/// Write a slice as the entire contents of a file.\n///\n/// This function will create a file if it does not exist,\n/// and will entirely replace its contents if it does.\n///\n/// Depending on the platform, this function may fail if the\n/// full directory path does not exist.\n///\n/// This is a convenience function for using [`File::create`] and [`write_all`]\n/// with fewer imports.\n///\n/// [`write_all`]: Write::write_all\n///\n/// # Examples\n///\n/// ```no_run\n/// use std::fs;\n///\n/// fn main() -&gt; std::io::Result&lt;()&gt; {\n///     fs::write(\"foo.txt\", b\"Lorem ipsum\")?;\n///     fs::write(\"bar.txt\", \"dolor sit\")?;\n///     Ok(())\n/// }\n/// ```\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"fs_read_write_bytes\"</span>, since = <span class=\"string\">\"1.26.0\"</span>)]\n</span><span class=\"kw\">pub fn </span>write&lt;P: AsRef&lt;Path&gt;, C: AsRef&lt;[u8]&gt;&gt;(path: P, contents: C) -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">fn </span>inner(path: <span class=\"kw-2\">&amp;</span>Path, contents: <span class=\"kw-2\">&amp;</span>[u8]) -&gt; io::Result&lt;()&gt; {\n        File::create(path)<span class=\"question-mark\">?</span>.write_all(contents)\n    }\n    inner(path.as_ref(), contents.as_ref())\n}\n\n<span class=\"kw\">impl </span>File {\n    <span class=\"doccomment\">/// Attempts to open a file in read-only mode.\n    ///\n    /// See the [`OpenOptions::open`] method for more details.\n    ///\n    /// If you only need to read the entire file contents,\n    /// consider [`std::fs::read()`][self::read] or\n    /// [`std::fs::read_to_string()`][self::read_to_string] instead.\n    ///\n    /// # Errors\n    ///\n    /// This function will return an error if `path` does not already exist.\n    /// Other errors may also be returned according to [`OpenOptions::open`].\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// use std::fs::File;\n    /// use std::io::Read;\n    ///\n    /// fn main() -&gt; std::io::Result&lt;()&gt; {\n    ///     let mut f = File::open(\"foo.txt\")?;\n    ///     let mut data = vec![];\n    ///     f.read_to_end(&amp;mut data)?;\n    ///     Ok(())\n    /// }\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>open&lt;P: AsRef&lt;Path&gt;&gt;(path: P) -&gt; io::Result&lt;File&gt; {\n        OpenOptions::new().read(<span class=\"bool-val\">true</span>).open(path.as_ref())\n    }\n\n    <span class=\"doccomment\">/// Opens a file in write-only mode.\n    ///\n    /// This function will create a file if it does not exist,\n    /// and will truncate it if it does.\n    ///\n    /// Depending on the platform, this function may fail if the\n    /// full directory path does not exist.\n    /// See the [`OpenOptions::open`] function for more details.\n    ///\n    /// See also [`std::fs::write()`][self::write] for a simple function to\n    /// create a file with some given data.\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// use std::fs::File;\n    /// use std::io::Write;\n    ///\n    /// fn main() -&gt; std::io::Result&lt;()&gt; {\n    ///     let mut f = File::create(\"foo.txt\")?;\n    ///     f.write_all(&amp;1234_u32.to_be_bytes())?;\n    ///     Ok(())\n    /// }\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>create&lt;P: AsRef&lt;Path&gt;&gt;(path: P) -&gt; io::Result&lt;File&gt; {\n        OpenOptions::new().write(<span class=\"bool-val\">true</span>).create(<span class=\"bool-val\">true</span>).truncate(<span class=\"bool-val\">true</span>).open(path.as_ref())\n    }\n\n    <span class=\"doccomment\">/// Creates a new file in read-write mode; error if the file exists.\n    ///\n    /// This function will create a file if it does not exist, or return an error if it does. This\n    /// way, if the call succeeds, the file returned is guaranteed to be new.\n    /// If a file exists at the target location, creating a new file will fail with [`AlreadyExists`]\n    /// or another error based on the situation. See [`OpenOptions::open`] for a\n    /// non-exhaustive list of likely errors.\n    ///\n    /// This option is useful because it is atomic. Otherwise between checking whether a file\n    /// exists and creating a new one, the file may have been created by another process (a TOCTOU\n    /// race condition / attack).\n    ///\n    /// This can also be written using\n    /// `File::options().read(true).write(true).create_new(true).open(...)`.\n    ///\n    /// [`AlreadyExists`]: crate::io::ErrorKind::AlreadyExists\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// use std::fs::File;\n    /// use std::io::Write;\n    ///\n    /// fn main() -&gt; std::io::Result&lt;()&gt; {\n    ///     let mut f = File::create_new(\"foo.txt\")?;\n    ///     f.write_all(\"Hello, world!\".as_bytes())?;\n    ///     Ok(())\n    /// }\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"file_create_new\"</span>, since = <span class=\"string\">\"1.77.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>create_new&lt;P: AsRef&lt;Path&gt;&gt;(path: P) -&gt; io::Result&lt;File&gt; {\n        OpenOptions::new().read(<span class=\"bool-val\">true</span>).write(<span class=\"bool-val\">true</span>).create_new(<span class=\"bool-val\">true</span>).open(path.as_ref())\n    }\n\n    <span class=\"doccomment\">/// Returns a new OpenOptions object.\n    ///\n    /// This function returns a new OpenOptions object that you can use to\n    /// open or create a file with specific options if `open()` or `create()`\n    /// are not appropriate.\n    ///\n    /// It is equivalent to `OpenOptions::new()`, but allows you to write more\n    /// readable code. Instead of\n    /// `OpenOptions::new().append(true).open(\"example.log\")`,\n    /// you can write `File::options().append(true).open(\"example.log\")`. This\n    /// also avoids the need to import `OpenOptions`.\n    ///\n    /// See the [`OpenOptions::new`] function for more details.\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// use std::fs::File;\n    /// use std::io::Write;\n    ///\n    /// fn main() -&gt; std::io::Result&lt;()&gt; {\n    ///     let mut f = File::options().append(true).open(\"example.log\")?;\n    ///     writeln!(&amp;mut f, \"new line\")?;\n    ///     Ok(())\n    /// }\n    /// ```\n    </span><span class=\"attr\">#[must_use]\n    #[stable(feature = <span class=\"string\">\"with_options\"</span>, since = <span class=\"string\">\"1.58.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>options() -&gt; OpenOptions {\n        OpenOptions::new()\n    }\n\n    <span class=\"doccomment\">/// Attempts to sync all OS-internal file content and metadata to disk.\n    ///\n    /// This function will attempt to ensure that all in-memory data reaches the\n    /// filesystem before returning.\n    ///\n    /// This can be used to handle errors that would otherwise only be caught\n    /// when the `File` is closed, as dropping a `File` will ignore all errors.\n    /// Note, however, that `sync_all` is generally more expensive than closing\n    /// a file by dropping it, because the latter is not required to block until\n    /// the data has been written to the filesystem.\n    ///\n    /// If synchronizing the metadata is not required, use [`sync_data`] instead.\n    ///\n    /// [`sync_data`]: File::sync_data\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// use std::fs::File;\n    /// use std::io::prelude::*;\n    ///\n    /// fn main() -&gt; std::io::Result&lt;()&gt; {\n    ///     let mut f = File::create(\"foo.txt\")?;\n    ///     f.write_all(b\"Hello, world!\")?;\n    ///\n    ///     f.sync_all()?;\n    ///     Ok(())\n    /// }\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    #[doc(alias = <span class=\"string\">\"fsync\"</span>)]\n    </span><span class=\"kw\">pub fn </span>sync_all(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; io::Result&lt;()&gt; {\n        <span class=\"self\">self</span>.inner.fsync()\n    }\n\n    <span class=\"doccomment\">/// This function is similar to [`sync_all`], except that it might not\n    /// synchronize file metadata to the filesystem.\n    ///\n    /// This is intended for use cases that must synchronize content, but don't\n    /// need the metadata on disk. The goal of this method is to reduce disk\n    /// operations.\n    ///\n    /// Note that some platforms may simply implement this in terms of\n    /// [`sync_all`].\n    ///\n    /// [`sync_all`]: File::sync_all\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// use std::fs::File;\n    /// use std::io::prelude::*;\n    ///\n    /// fn main() -&gt; std::io::Result&lt;()&gt; {\n    ///     let mut f = File::create(\"foo.txt\")?;\n    ///     f.write_all(b\"Hello, world!\")?;\n    ///\n    ///     f.sync_data()?;\n    ///     Ok(())\n    /// }\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    #[doc(alias = <span class=\"string\">\"fdatasync\"</span>)]\n    </span><span class=\"kw\">pub fn </span>sync_data(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; io::Result&lt;()&gt; {\n        <span class=\"self\">self</span>.inner.datasync()\n    }\n\n    <span class=\"doccomment\">/// Truncates or extends the underlying file, updating the size of\n    /// this file to become `size`.\n    ///\n    /// If the `size` is less than the current file's size, then the file will\n    /// be shrunk. If it is greater than the current file's size, then the file\n    /// will be extended to `size` and have all of the intermediate data filled\n    /// in with 0s.\n    ///\n    /// The file's cursor isn't changed. In particular, if the cursor was at the\n    /// end and the file is shrunk using this operation, the cursor will now be\n    /// past the end.\n    ///\n    /// # Errors\n    ///\n    /// This function will return an error if the file is not opened for writing.\n    /// Also, [`std::io::ErrorKind::InvalidInput`](crate::io::ErrorKind::InvalidInput)\n    /// will be returned if the desired length would cause an overflow due to\n    /// the implementation specifics.\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// use std::fs::File;\n    ///\n    /// fn main() -&gt; std::io::Result&lt;()&gt; {\n    ///     let mut f = File::create(\"foo.txt\")?;\n    ///     f.set_len(10)?;\n    ///     Ok(())\n    /// }\n    /// ```\n    ///\n    /// Note that this method alters the content of the underlying file, even\n    /// though it takes `&amp;self` rather than `&amp;mut self`.\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>set_len(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, size: u64) -&gt; io::Result&lt;()&gt; {\n        <span class=\"self\">self</span>.inner.truncate(size)\n    }\n\n    <span class=\"doccomment\">/// Queries metadata about the underlying file.\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// use std::fs::File;\n    ///\n    /// fn main() -&gt; std::io::Result&lt;()&gt; {\n    ///     let mut f = File::open(\"foo.txt\")?;\n    ///     let metadata = f.metadata()?;\n    ///     Ok(())\n    /// }\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>metadata(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; io::Result&lt;Metadata&gt; {\n        <span class=\"self\">self</span>.inner.file_attr().map(Metadata)\n    }\n\n    <span class=\"doccomment\">/// Creates a new `File` instance that shares the same underlying file handle\n    /// as the existing `File` instance. Reads, writes, and seeks will affect\n    /// both `File` instances simultaneously.\n    ///\n    /// # Examples\n    ///\n    /// Creates two handles for a file named `foo.txt`:\n    ///\n    /// ```no_run\n    /// use std::fs::File;\n    ///\n    /// fn main() -&gt; std::io::Result&lt;()&gt; {\n    ///     let mut file = File::open(\"foo.txt\")?;\n    ///     let file_copy = file.try_clone()?;\n    ///     Ok(())\n    /// }\n    /// ```\n    ///\n    /// Assuming there’s a file named `foo.txt` with contents `abcdef\\n`, create\n    /// two handles, seek one of them, and read the remaining bytes from the\n    /// other handle:\n    ///\n    /// ```no_run\n    /// use std::fs::File;\n    /// use std::io::SeekFrom;\n    /// use std::io::prelude::*;\n    ///\n    /// fn main() -&gt; std::io::Result&lt;()&gt; {\n    ///     let mut file = File::open(\"foo.txt\")?;\n    ///     let mut file_copy = file.try_clone()?;\n    ///\n    ///     file.seek(SeekFrom::Start(3))?;\n    ///\n    ///     let mut contents = vec![];\n    ///     file_copy.read_to_end(&amp;mut contents)?;\n    ///     assert_eq!(contents, b\"def\\n\");\n    ///     Ok(())\n    /// }\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"file_try_clone\"</span>, since = <span class=\"string\">\"1.9.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>try_clone(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; io::Result&lt;File&gt; {\n        <span class=\"prelude-val\">Ok</span>(File { inner: <span class=\"self\">self</span>.inner.duplicate()<span class=\"question-mark\">? </span>})\n    }\n\n    <span class=\"doccomment\">/// Changes the permissions on the underlying file.\n    ///\n    /// # Platform-specific behavior\n    ///\n    /// This function currently corresponds to the `fchmod` function on Unix and\n    /// the `SetFileInformationByHandle` function on Windows. Note that, this\n    /// [may change in the future][changes].\n    ///\n    /// [changes]: io#platform-specific-behavior\n    ///\n    /// # Errors\n    ///\n    /// This function will return an error if the user lacks permission change\n    /// attributes on the underlying file. It may also return an error in other\n    /// os-specific unspecified cases.\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// fn main() -&gt; std::io::Result&lt;()&gt; {\n    ///     use std::fs::File;\n    ///\n    ///     let file = File::open(\"foo.txt\")?;\n    ///     let mut perms = file.metadata()?.permissions();\n    ///     perms.set_readonly(true);\n    ///     file.set_permissions(perms)?;\n    ///     Ok(())\n    /// }\n    /// ```\n    ///\n    /// Note that this method alters the permissions of the underlying file,\n    /// even though it takes `&amp;self` rather than `&amp;mut self`.\n    </span><span class=\"attr\">#[doc(alias = <span class=\"string\">\"fchmod\"</span>, alias = <span class=\"string\">\"SetFileInformationByHandle\"</span>)]\n    #[stable(feature = <span class=\"string\">\"set_permissions_atomic\"</span>, since = <span class=\"string\">\"1.16.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>set_permissions(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, perm: Permissions) -&gt; io::Result&lt;()&gt; {\n        <span class=\"self\">self</span>.inner.set_permissions(perm.<span class=\"number\">0</span>)\n    }\n\n    <span class=\"doccomment\">/// Changes the timestamps of the underlying file.\n    ///\n    /// # Platform-specific behavior\n    ///\n    /// This function currently corresponds to the `futimens` function on Unix (falling back to\n    /// `futimes` on macOS before 10.13) and the `SetFileTime` function on Windows. Note that this\n    /// [may change in the future][changes].\n    ///\n    /// [changes]: io#platform-specific-behavior\n    ///\n    /// # Errors\n    ///\n    /// This function will return an error if the user lacks permission to change timestamps on the\n    /// underlying file. It may also return an error in other os-specific unspecified cases.\n    ///\n    /// This function may return an error if the operating system lacks support to change one or\n    /// more of the timestamps set in the `FileTimes` structure.\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// fn main() -&gt; std::io::Result&lt;()&gt; {\n    ///     use std::fs::{self, File, FileTimes};\n    ///\n    ///     let src = fs::metadata(\"src\")?;\n    ///     let dest = File::options().write(true).open(\"dest\")?;\n    ///     let times = FileTimes::new()\n    ///         .set_accessed(src.accessed()?)\n    ///         .set_modified(src.modified()?);\n    ///     dest.set_times(times)?;\n    ///     Ok(())\n    /// }\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"file_set_times\"</span>, since = <span class=\"string\">\"1.75.0\"</span>)]\n    #[doc(alias = <span class=\"string\">\"futimens\"</span>)]\n    #[doc(alias = <span class=\"string\">\"futimes\"</span>)]\n    #[doc(alias = <span class=\"string\">\"SetFileTime\"</span>)]\n    </span><span class=\"kw\">pub fn </span>set_times(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, times: FileTimes) -&gt; io::Result&lt;()&gt; {\n        <span class=\"self\">self</span>.inner.set_times(times.<span class=\"number\">0</span>)\n    }\n\n    <span class=\"doccomment\">/// Changes the modification time of the underlying file.\n    ///\n    /// This is an alias for `set_times(FileTimes::new().set_modified(time))`.\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"file_set_times\"</span>, since = <span class=\"string\">\"1.75.0\"</span>)]\n    #[inline]\n    </span><span class=\"kw\">pub fn </span>set_modified(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, time: SystemTime) -&gt; io::Result&lt;()&gt; {\n        <span class=\"self\">self</span>.set_times(FileTimes::new().set_modified(time))\n    }\n}\n\n<span class=\"comment\">// In addition to the `impl`s here, `File` also has `impl`s for\n// `AsFd`/`From&lt;OwnedFd&gt;`/`Into&lt;OwnedFd&gt;` and\n// `AsRawFd`/`IntoRawFd`/`FromRawFd`, on Unix and WASI, and\n// `AsHandle`/`From&lt;OwnedHandle&gt;`/`Into&lt;OwnedHandle&gt;` and\n// `AsRawHandle`/`IntoRawHandle`/`FromRawHandle` on Windows.\n\n</span><span class=\"kw\">impl </span>AsInner&lt;fs_imp::File&gt; <span class=\"kw\">for </span>File {\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>as_inner(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;</span>fs_imp::File {\n        <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.inner\n    }\n}\n<span class=\"kw\">impl </span>FromInner&lt;fs_imp::File&gt; <span class=\"kw\">for </span>File {\n    <span class=\"kw\">fn </span>from_inner(f: fs_imp::File) -&gt; File {\n        File { inner: f }\n    }\n}\n<span class=\"kw\">impl </span>IntoInner&lt;fs_imp::File&gt; <span class=\"kw\">for </span>File {\n    <span class=\"kw\">fn </span>into_inner(<span class=\"self\">self</span>) -&gt; fs_imp::File {\n        <span class=\"self\">self</span>.inner\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl </span>fmt::Debug <span class=\"kw\">for </span>File {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n        <span class=\"self\">self</span>.inner.fmt(f)\n    }\n}\n\n<span class=\"doccomment\">/// Indicates how much extra capacity is needed to read the rest of the file.\n</span><span class=\"kw\">fn </span>buffer_capacity_required(<span class=\"kw-2\">mut </span>file: <span class=\"kw-2\">&amp;</span>File) -&gt; <span class=\"prelude-ty\">Option</span>&lt;usize&gt; {\n    <span class=\"kw\">let </span>size = file.metadata().map(|m| m.len()).ok()<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>pos = file.stream_position().ok()<span class=\"question-mark\">?</span>;\n    <span class=\"comment\">// Don't worry about `usize` overflow because reading will fail regardless\n    // in that case.\n    </span><span class=\"prelude-val\">Some</span>(size.saturating_sub(pos) <span class=\"kw\">as </span>usize)\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl </span>Read <span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span>File {\n    <span class=\"doccomment\">/// Read some bytes from the file.\n    ///\n    /// See [`Read::read`] docs for more info.\n    ///\n    /// # Platform-specific behavior\n    ///\n    /// This function currently corresponds to the `read` function on Unix and\n    /// the `NtReadFile` function on Windows. Note that this [may change in\n    /// the future][changes].\n    ///\n    /// [changes]: io#platform-specific-behavior\n    </span><span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>read(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, buf: <span class=\"kw-2\">&amp;mut </span>[u8]) -&gt; io::Result&lt;usize&gt; {\n        <span class=\"self\">self</span>.inner.read(buf)\n    }\n\n    <span class=\"doccomment\">/// Like `read`, except that it reads into a slice of buffers.\n    ///\n    /// See [`Read::read_vectored`] docs for more info.\n    ///\n    /// # Platform-specific behavior\n    ///\n    /// This function currently corresponds to the `readv` function on Unix and\n    /// falls back to the `read` implementation on Windows. Note that this\n    /// [may change in the future][changes].\n    ///\n    /// [changes]: io#platform-specific-behavior\n    </span><span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>read_vectored(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, bufs: <span class=\"kw-2\">&amp;mut </span>[IoSliceMut&lt;<span class=\"lifetime\">'_</span>&gt;]) -&gt; io::Result&lt;usize&gt; {\n        <span class=\"self\">self</span>.inner.read_vectored(bufs)\n    }\n\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>read_buf(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, cursor: BorrowedCursor&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; io::Result&lt;()&gt; {\n        <span class=\"self\">self</span>.inner.read_buf(cursor)\n    }\n\n    <span class=\"doccomment\">/// Determines if `File` has an efficient `read_vectored` implementation.\n    ///\n    /// See [`Read::is_read_vectored`] docs for more info.\n    ///\n    /// # Platform-specific behavior\n    ///\n    /// This function currently returns `true` on Unix an `false` on Windows.\n    /// Note that this [may change in the future][changes].\n    ///\n    /// [changes]: io#platform-specific-behavior\n    </span><span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>is_read_vectored(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; bool {\n        <span class=\"self\">self</span>.inner.is_read_vectored()\n    }\n\n    <span class=\"comment\">// Reserves space in the buffer based on the file size when available.\n    </span><span class=\"kw\">fn </span>read_to_end(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, buf: <span class=\"kw-2\">&amp;mut </span>Vec&lt;u8&gt;) -&gt; io::Result&lt;usize&gt; {\n        <span class=\"kw\">let </span>size = buffer_capacity_required(<span class=\"self\">self</span>);\n        buf.try_reserve(size.unwrap_or(<span class=\"number\">0</span>))<span class=\"question-mark\">?</span>;\n        io::default_read_to_end(<span class=\"self\">self</span>, buf, size)\n    }\n\n    <span class=\"comment\">// Reserves space in the buffer based on the file size when available.\n    </span><span class=\"kw\">fn </span>read_to_string(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, buf: <span class=\"kw-2\">&amp;mut </span>String) -&gt; io::Result&lt;usize&gt; {\n        <span class=\"kw\">let </span>size = buffer_capacity_required(<span class=\"self\">self</span>);\n        buf.try_reserve(size.unwrap_or(<span class=\"number\">0</span>))<span class=\"question-mark\">?</span>;\n        io::default_read_to_string(<span class=\"self\">self</span>, buf, size)\n    }\n}\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl </span>Write <span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span>File {\n    <span class=\"doccomment\">/// Write some bytes from the file.\n    ///\n    /// See [`Write::write`] docs for more info.\n    ///\n    /// # Platform-specific behavior\n    ///\n    /// This function currently corresponds to the `write` function on Unix and\n    /// the `NtWriteFile` function on Windows. Note that this [may change in\n    /// the future][changes].\n    ///\n    /// [changes]: io#platform-specific-behavior\n    </span><span class=\"kw\">fn </span>write(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, buf: <span class=\"kw-2\">&amp;</span>[u8]) -&gt; io::Result&lt;usize&gt; {\n        <span class=\"self\">self</span>.inner.write(buf)\n    }\n\n    <span class=\"doccomment\">/// Like `write`, except that it writes into a slice of buffers.\n    ///\n    /// See [`Write::write_vectored`] docs for more info.\n    ///\n    /// # Platform-specific behavior\n    ///\n    /// This function currently corresponds to the `writev` function on Unix\n    /// and falls back to the `write` implementation on Windows. Note that this\n    /// [may change in the future][changes].\n    ///\n    /// [changes]: io#platform-specific-behavior\n    </span><span class=\"kw\">fn </span>write_vectored(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, bufs: <span class=\"kw-2\">&amp;</span>[IoSlice&lt;<span class=\"lifetime\">'_</span>&gt;]) -&gt; io::Result&lt;usize&gt; {\n        <span class=\"self\">self</span>.inner.write_vectored(bufs)\n    }\n\n    <span class=\"doccomment\">/// Determines if `File` has an efficient `write_vectored` implementation.\n    ///\n    /// See [`Write::is_write_vectored`] docs for more info.\n    ///\n    /// # Platform-specific behavior\n    ///\n    /// This function currently returns `true` on Unix an `false` on Windows.\n    /// Note that this [may change in the future][changes].\n    ///\n    /// [changes]: io#platform-specific-behavior\n    </span><span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>is_write_vectored(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; bool {\n        <span class=\"self\">self</span>.inner.is_write_vectored()\n    }\n\n    <span class=\"doccomment\">/// Flushes the file, ensuring that all intermediately buffered contents\n    /// reach their destination.\n    ///\n    /// See [`Write::flush`] docs for more info.\n    ///\n    /// # Platform-specific behavior\n    ///\n    /// Since a `File` structure doesn't contain any buffers, this function is\n    /// currently a no-op on Unix and Windows. Note that this [may change in\n    /// the future][changes].\n    ///\n    /// [changes]: io#platform-specific-behavior\n    </span><span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>flush(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; io::Result&lt;()&gt; {\n        <span class=\"self\">self</span>.inner.flush()\n    }\n}\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl </span>Seek <span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span>File {\n    <span class=\"kw\">fn </span>seek(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, pos: SeekFrom) -&gt; io::Result&lt;u64&gt; {\n        <span class=\"self\">self</span>.inner.seek(pos)\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl </span>Read <span class=\"kw\">for </span>File {\n    <span class=\"kw\">fn </span>read(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, buf: <span class=\"kw-2\">&amp;mut </span>[u8]) -&gt; io::Result&lt;usize&gt; {\n        (<span class=\"kw-2\">&amp;*</span><span class=\"self\">self</span>).read(buf)\n    }\n    <span class=\"kw\">fn </span>read_vectored(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, bufs: <span class=\"kw-2\">&amp;mut </span>[IoSliceMut&lt;<span class=\"lifetime\">'_</span>&gt;]) -&gt; io::Result&lt;usize&gt; {\n        (<span class=\"kw-2\">&amp;*</span><span class=\"self\">self</span>).read_vectored(bufs)\n    }\n    <span class=\"kw\">fn </span>read_buf(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, cursor: BorrowedCursor&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; io::Result&lt;()&gt; {\n        (<span class=\"kw-2\">&amp;*</span><span class=\"self\">self</span>).read_buf(cursor)\n    }\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>is_read_vectored(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; bool {\n        (&amp;&amp;<span class=\"kw-2\">*</span><span class=\"self\">self</span>).is_read_vectored()\n    }\n    <span class=\"kw\">fn </span>read_to_end(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, buf: <span class=\"kw-2\">&amp;mut </span>Vec&lt;u8&gt;) -&gt; io::Result&lt;usize&gt; {\n        (<span class=\"kw-2\">&amp;*</span><span class=\"self\">self</span>).read_to_end(buf)\n    }\n    <span class=\"kw\">fn </span>read_to_string(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, buf: <span class=\"kw-2\">&amp;mut </span>String) -&gt; io::Result&lt;usize&gt; {\n        (<span class=\"kw-2\">&amp;*</span><span class=\"self\">self</span>).read_to_string(buf)\n    }\n}\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl </span>Write <span class=\"kw\">for </span>File {\n    <span class=\"kw\">fn </span>write(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, buf: <span class=\"kw-2\">&amp;</span>[u8]) -&gt; io::Result&lt;usize&gt; {\n        (<span class=\"kw-2\">&amp;*</span><span class=\"self\">self</span>).write(buf)\n    }\n    <span class=\"kw\">fn </span>write_vectored(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, bufs: <span class=\"kw-2\">&amp;</span>[IoSlice&lt;<span class=\"lifetime\">'_</span>&gt;]) -&gt; io::Result&lt;usize&gt; {\n        (<span class=\"kw-2\">&amp;*</span><span class=\"self\">self</span>).write_vectored(bufs)\n    }\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>is_write_vectored(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; bool {\n        (&amp;&amp;<span class=\"kw-2\">*</span><span class=\"self\">self</span>).is_write_vectored()\n    }\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>flush(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; io::Result&lt;()&gt; {\n        (<span class=\"kw-2\">&amp;*</span><span class=\"self\">self</span>).flush()\n    }\n}\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl </span>Seek <span class=\"kw\">for </span>File {\n    <span class=\"kw\">fn </span>seek(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, pos: SeekFrom) -&gt; io::Result&lt;u64&gt; {\n        (<span class=\"kw-2\">&amp;*</span><span class=\"self\">self</span>).seek(pos)\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"io_traits_arc\"</span>, since = <span class=\"string\">\"1.73.0\"</span>)]\n</span><span class=\"kw\">impl </span>Read <span class=\"kw\">for </span>Arc&lt;File&gt; {\n    <span class=\"kw\">fn </span>read(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, buf: <span class=\"kw-2\">&amp;mut </span>[u8]) -&gt; io::Result&lt;usize&gt; {\n        (<span class=\"kw-2\">&amp;**</span><span class=\"self\">self</span>).read(buf)\n    }\n    <span class=\"kw\">fn </span>read_vectored(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, bufs: <span class=\"kw-2\">&amp;mut </span>[IoSliceMut&lt;<span class=\"lifetime\">'_</span>&gt;]) -&gt; io::Result&lt;usize&gt; {\n        (<span class=\"kw-2\">&amp;**</span><span class=\"self\">self</span>).read_vectored(bufs)\n    }\n    <span class=\"kw\">fn </span>read_buf(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, cursor: BorrowedCursor&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; io::Result&lt;()&gt; {\n        (<span class=\"kw-2\">&amp;**</span><span class=\"self\">self</span>).read_buf(cursor)\n    }\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>is_read_vectored(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; bool {\n        (<span class=\"kw-2\">&amp;**</span><span class=\"self\">self</span>).is_read_vectored()\n    }\n    <span class=\"kw\">fn </span>read_to_end(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, buf: <span class=\"kw-2\">&amp;mut </span>Vec&lt;u8&gt;) -&gt; io::Result&lt;usize&gt; {\n        (<span class=\"kw-2\">&amp;**</span><span class=\"self\">self</span>).read_to_end(buf)\n    }\n    <span class=\"kw\">fn </span>read_to_string(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, buf: <span class=\"kw-2\">&amp;mut </span>String) -&gt; io::Result&lt;usize&gt; {\n        (<span class=\"kw-2\">&amp;**</span><span class=\"self\">self</span>).read_to_string(buf)\n    }\n}\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"io_traits_arc\"</span>, since = <span class=\"string\">\"1.73.0\"</span>)]\n</span><span class=\"kw\">impl </span>Write <span class=\"kw\">for </span>Arc&lt;File&gt; {\n    <span class=\"kw\">fn </span>write(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, buf: <span class=\"kw-2\">&amp;</span>[u8]) -&gt; io::Result&lt;usize&gt; {\n        (<span class=\"kw-2\">&amp;**</span><span class=\"self\">self</span>).write(buf)\n    }\n    <span class=\"kw\">fn </span>write_vectored(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, bufs: <span class=\"kw-2\">&amp;</span>[IoSlice&lt;<span class=\"lifetime\">'_</span>&gt;]) -&gt; io::Result&lt;usize&gt; {\n        (<span class=\"kw-2\">&amp;**</span><span class=\"self\">self</span>).write_vectored(bufs)\n    }\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>is_write_vectored(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; bool {\n        (<span class=\"kw-2\">&amp;**</span><span class=\"self\">self</span>).is_write_vectored()\n    }\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>flush(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; io::Result&lt;()&gt; {\n        (<span class=\"kw-2\">&amp;**</span><span class=\"self\">self</span>).flush()\n    }\n}\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"io_traits_arc\"</span>, since = <span class=\"string\">\"1.73.0\"</span>)]\n</span><span class=\"kw\">impl </span>Seek <span class=\"kw\">for </span>Arc&lt;File&gt; {\n    <span class=\"kw\">fn </span>seek(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, pos: SeekFrom) -&gt; io::Result&lt;u64&gt; {\n        (<span class=\"kw-2\">&amp;**</span><span class=\"self\">self</span>).seek(pos)\n    }\n}\n\n<span class=\"kw\">impl </span>OpenOptions {\n    <span class=\"doccomment\">/// Creates a blank new set of options ready for configuration.\n    ///\n    /// All options are initially set to `false`.\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// use std::fs::OpenOptions;\n    ///\n    /// let mut options = OpenOptions::new();\n    /// let file = options.read(true).open(\"foo.txt\");\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    #[must_use]\n    </span><span class=\"kw\">pub fn </span>new() -&gt; <span class=\"self\">Self </span>{\n        OpenOptions(fs_imp::OpenOptions::new())\n    }\n\n    <span class=\"doccomment\">/// Sets the option for read access.\n    ///\n    /// This option, when true, will indicate that the file should be\n    /// `read`-able if opened.\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// use std::fs::OpenOptions;\n    ///\n    /// let file = OpenOptions::new().read(true).open(\"foo.txt\");\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>read(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, read: bool) -&gt; <span class=\"kw-2\">&amp;mut </span><span class=\"self\">Self </span>{\n        <span class=\"self\">self</span>.<span class=\"number\">0</span>.read(read);\n        <span class=\"self\">self\n    </span>}\n\n    <span class=\"doccomment\">/// Sets the option for write access.\n    ///\n    /// This option, when true, will indicate that the file should be\n    /// `write`-able if opened.\n    ///\n    /// If the file already exists, any write calls on it will overwrite its\n    /// contents, without truncating it.\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// use std::fs::OpenOptions;\n    ///\n    /// let file = OpenOptions::new().write(true).open(\"foo.txt\");\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>write(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, write: bool) -&gt; <span class=\"kw-2\">&amp;mut </span><span class=\"self\">Self </span>{\n        <span class=\"self\">self</span>.<span class=\"number\">0</span>.write(write);\n        <span class=\"self\">self\n    </span>}\n\n    <span class=\"doccomment\">/// Sets the option for the append mode.\n    ///\n    /// This option, when true, means that writes will append to a file instead\n    /// of overwriting previous contents.\n    /// Note that setting `.write(true).append(true)` has the same effect as\n    /// setting only `.append(true)`.\n    ///\n    /// Append mode guarantees that writes will be positioned at the current end of file,\n    /// even when there are other processes or threads appending to the same file. This is\n    /// unlike &lt;code&gt;[seek]\\([SeekFrom]::[End]\\(0))&lt;/code&gt; followed by `write()`, which\n    /// has a race between seeking and writing during which another writer can write, with\n    /// our `write()` overwriting their data.\n    ///\n    /// Keep in mind that this does not necessarily guarantee that data appended by\n    /// different processes or threads does not interleave. The amount of data accepted a\n    /// single `write()` call depends on the operating system and file system. A\n    /// successful `write()` is allowed to write only part of the given data, so even if\n    /// you're careful to provide the whole message in a single call to `write()`, there\n    /// is no guarantee that it will be written out in full. If you rely on the filesystem\n    /// accepting the message in a single write, make sure that all data that belongs\n    /// together is written in one operation. This can be done by concatenating strings\n    /// before passing them to [`write()`].\n    ///\n    /// If a file is opened with both read and append access, beware that after\n    /// opening, and after every write, the position for reading may be set at the\n    /// end of the file. So, before writing, save the current position (using\n    /// &lt;code&gt;[Seek]::[stream_position]&lt;/code&gt;), and restore it before the next read.\n    ///\n    /// ## Note\n    ///\n    /// This function doesn't create the file if it doesn't exist. Use the\n    /// [`OpenOptions::create`] method to do so.\n    ///\n    /// [`write()`]: Write::write \"io::Write::write\"\n    /// [`flush()`]: Write::flush \"io::Write::flush\"\n    /// [stream_position]: Seek::stream_position \"io::Seek::stream_position\"\n    /// [seek]: Seek::seek \"io::Seek::seek\"\n    /// [Current]: SeekFrom::Current \"io::SeekFrom::Current\"\n    /// [End]: SeekFrom::End \"io::SeekFrom::End\"\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// use std::fs::OpenOptions;\n    ///\n    /// let file = OpenOptions::new().append(true).open(\"foo.txt\");\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>append(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, append: bool) -&gt; <span class=\"kw-2\">&amp;mut </span><span class=\"self\">Self </span>{\n        <span class=\"self\">self</span>.<span class=\"number\">0</span>.append(append);\n        <span class=\"self\">self\n    </span>}\n\n    <span class=\"doccomment\">/// Sets the option for truncating a previous file.\n    ///\n    /// If a file is successfully opened with this option set it will truncate\n    /// the file to 0 length if it already exists.\n    ///\n    /// The file must be opened with write access for truncate to work.\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// use std::fs::OpenOptions;\n    ///\n    /// let file = OpenOptions::new().write(true).truncate(true).open(\"foo.txt\");\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>truncate(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, truncate: bool) -&gt; <span class=\"kw-2\">&amp;mut </span><span class=\"self\">Self </span>{\n        <span class=\"self\">self</span>.<span class=\"number\">0</span>.truncate(truncate);\n        <span class=\"self\">self\n    </span>}\n\n    <span class=\"doccomment\">/// Sets the option to create a new file, or open it if it already exists.\n    ///\n    /// In order for the file to be created, [`OpenOptions::write`] or\n    /// [`OpenOptions::append`] access must be used.\n    ///\n    /// See also [`std::fs::write()`][self::write] for a simple function to\n    /// create a file with some given data.\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// use std::fs::OpenOptions;\n    ///\n    /// let file = OpenOptions::new().write(true).create(true).open(\"foo.txt\");\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>create(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, create: bool) -&gt; <span class=\"kw-2\">&amp;mut </span><span class=\"self\">Self </span>{\n        <span class=\"self\">self</span>.<span class=\"number\">0</span>.create(create);\n        <span class=\"self\">self\n    </span>}\n\n    <span class=\"doccomment\">/// Sets the option to create a new file, failing if it already exists.\n    ///\n    /// No file is allowed to exist at the target location, also no (dangling) symlink. In this\n    /// way, if the call succeeds, the file returned is guaranteed to be new.\n    /// If a file exists at the target location, creating a new file will fail with [`AlreadyExists`]\n    /// or another error based on the situation. See [`OpenOptions::open`] for a\n    /// non-exhaustive list of likely errors.\n    ///\n    /// This option is useful because it is atomic. Otherwise between checking\n    /// whether a file exists and creating a new one, the file may have been\n    /// created by another process (a TOCTOU race condition / attack).\n    ///\n    /// If `.create_new(true)` is set, [`.create()`] and [`.truncate()`] are\n    /// ignored.\n    ///\n    /// The file must be opened with write or append access in order to create\n    /// a new file.\n    ///\n    /// [`.create()`]: OpenOptions::create\n    /// [`.truncate()`]: OpenOptions::truncate\n    /// [`AlreadyExists`]: io::ErrorKind::AlreadyExists\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// use std::fs::OpenOptions;\n    ///\n    /// let file = OpenOptions::new().write(true)\n    ///                              .create_new(true)\n    ///                              .open(\"foo.txt\");\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"expand_open_options2\"</span>, since = <span class=\"string\">\"1.9.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>create_new(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, create_new: bool) -&gt; <span class=\"kw-2\">&amp;mut </span><span class=\"self\">Self </span>{\n        <span class=\"self\">self</span>.<span class=\"number\">0</span>.create_new(create_new);\n        <span class=\"self\">self\n    </span>}\n\n    <span class=\"doccomment\">/// Opens a file at `path` with the options specified by `self`.\n    ///\n    /// # Errors\n    ///\n    /// This function will return an error under a number of different\n    /// circumstances. Some of these error conditions are listed here, together\n    /// with their [`io::ErrorKind`]. The mapping to [`io::ErrorKind`]s is not\n    /// part of the compatibility contract of the function.\n    ///\n    /// * [`NotFound`]: The specified file does not exist and neither `create`\n    ///   or `create_new` is set.\n    /// * [`NotFound`]: One of the directory components of the file path does\n    ///   not exist.\n    /// * [`PermissionDenied`]: The user lacks permission to get the specified\n    ///   access rights for the file.\n    /// * [`PermissionDenied`]: The user lacks permission to open one of the\n    ///   directory components of the specified path.\n    /// * [`AlreadyExists`]: `create_new` was specified and the file already\n    ///   exists.\n    /// * [`InvalidInput`]: Invalid combinations of open options (truncate\n    ///   without write access, no access mode set, etc.).\n    ///\n    /// The following errors don't match any existing [`io::ErrorKind`] at the moment:\n    /// * One of the directory components of the specified file path\n    ///   was not, in fact, a directory.\n    /// * Filesystem-level errors: full disk, write permission\n    ///   requested on a read-only file system, exceeded disk quota, too many\n    ///   open files, too long filename, too many symbolic links in the\n    ///   specified path (Unix-like systems only), etc.\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// use std::fs::OpenOptions;\n    ///\n    /// let file = OpenOptions::new().read(true).open(\"foo.txt\");\n    /// ```\n    ///\n    /// [`AlreadyExists`]: io::ErrorKind::AlreadyExists\n    /// [`InvalidInput`]: io::ErrorKind::InvalidInput\n    /// [`NotFound`]: io::ErrorKind::NotFound\n    /// [`PermissionDenied`]: io::ErrorKind::PermissionDenied\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>open&lt;P: AsRef&lt;Path&gt;&gt;(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, path: P) -&gt; io::Result&lt;File&gt; {\n        <span class=\"self\">self</span>._open(path.as_ref())\n    }\n\n    <span class=\"kw\">fn </span>_open(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, path: <span class=\"kw-2\">&amp;</span>Path) -&gt; io::Result&lt;File&gt; {\n        fs_imp::File::open(path, <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.<span class=\"number\">0</span>).map(|inner| File { inner })\n    }\n}\n\n<span class=\"kw\">impl </span>AsInner&lt;fs_imp::OpenOptions&gt; <span class=\"kw\">for </span>OpenOptions {\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>as_inner(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;</span>fs_imp::OpenOptions {\n        <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.<span class=\"number\">0\n    </span>}\n}\n\n<span class=\"kw\">impl </span>AsInnerMut&lt;fs_imp::OpenOptions&gt; <span class=\"kw\">for </span>OpenOptions {\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>as_inner_mut(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;mut </span>fs_imp::OpenOptions {\n        <span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>.<span class=\"number\">0\n    </span>}\n}\n\n<span class=\"kw\">impl </span>Metadata {\n    <span class=\"doccomment\">/// Returns the file type for this metadata.\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// fn main() -&gt; std::io::Result&lt;()&gt; {\n    ///     use std::fs;\n    ///\n    ///     let metadata = fs::metadata(\"foo.txt\")?;\n    ///\n    ///     println!(\"{:?}\", metadata.file_type());\n    ///     Ok(())\n    /// }\n    /// ```\n    </span><span class=\"attr\">#[must_use]\n    #[stable(feature = <span class=\"string\">\"file_type\"</span>, since = <span class=\"string\">\"1.1.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>file_type(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; FileType {\n        FileType(<span class=\"self\">self</span>.<span class=\"number\">0</span>.file_type())\n    }\n\n    <span class=\"doccomment\">/// Returns `true` if this metadata is for a directory. The\n    /// result is mutually exclusive to the result of\n    /// [`Metadata::is_file`], and will be false for symlink metadata\n    /// obtained from [`symlink_metadata`].\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// fn main() -&gt; std::io::Result&lt;()&gt; {\n    ///     use std::fs;\n    ///\n    ///     let metadata = fs::metadata(\"foo.txt\")?;\n    ///\n    ///     assert!(!metadata.is_dir());\n    ///     Ok(())\n    /// }\n    /// ```\n    </span><span class=\"attr\">#[must_use]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>is_dir(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; bool {\n        <span class=\"self\">self</span>.file_type().is_dir()\n    }\n\n    <span class=\"doccomment\">/// Returns `true` if this metadata is for a regular file. The\n    /// result is mutually exclusive to the result of\n    /// [`Metadata::is_dir`], and will be false for symlink metadata\n    /// obtained from [`symlink_metadata`].\n    ///\n    /// When the goal is simply to read from (or write to) the source, the most\n    /// reliable way to test the source can be read (or written to) is to open\n    /// it. Only using `is_file` can break workflows like `diff &lt;( prog_a )` on\n    /// a Unix-like system for example. See [`File::open`] or\n    /// [`OpenOptions::open`] for more information.\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// use std::fs;\n    ///\n    /// fn main() -&gt; std::io::Result&lt;()&gt; {\n    ///     let metadata = fs::metadata(\"foo.txt\")?;\n    ///\n    ///     assert!(metadata.is_file());\n    ///     Ok(())\n    /// }\n    /// ```\n    </span><span class=\"attr\">#[must_use]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>is_file(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; bool {\n        <span class=\"self\">self</span>.file_type().is_file()\n    }\n\n    <span class=\"doccomment\">/// Returns `true` if this metadata is for a symbolic link.\n    ///\n    /// # Examples\n    ///\n    </span><span class=\"attr\">#[cfg_attr(unix, doc = <span class=\"string\">\"```no_run\"</span>)]\n    #[cfg_attr(not(unix), doc = <span class=\"string\">\"```ignore\"</span>)]\n    </span><span class=\"doccomment\">/// use std::fs;\n    /// use std::path::Path;\n    /// use std::os::unix::fs::symlink;\n    ///\n    /// fn main() -&gt; std::io::Result&lt;()&gt; {\n    ///     let link_path = Path::new(\"link\");\n    ///     symlink(\"/origin_does_not_exist/\", link_path)?;\n    ///\n    ///     let metadata = fs::symlink_metadata(link_path)?;\n    ///\n    ///     assert!(metadata.is_symlink());\n    ///     Ok(())\n    /// }\n    /// ```\n    </span><span class=\"attr\">#[must_use]\n    #[stable(feature = <span class=\"string\">\"is_symlink\"</span>, since = <span class=\"string\">\"1.58.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>is_symlink(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; bool {\n        <span class=\"self\">self</span>.file_type().is_symlink()\n    }\n\n    <span class=\"doccomment\">/// Returns the size of the file, in bytes, this metadata is for.\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// use std::fs;\n    ///\n    /// fn main() -&gt; std::io::Result&lt;()&gt; {\n    ///     let metadata = fs::metadata(\"foo.txt\")?;\n    ///\n    ///     assert_eq!(0, metadata.len());\n    ///     Ok(())\n    /// }\n    /// ```\n    </span><span class=\"attr\">#[must_use]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>len(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; u64 {\n        <span class=\"self\">self</span>.<span class=\"number\">0</span>.size()\n    }\n\n    <span class=\"doccomment\">/// Returns the permissions of the file this metadata is for.\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// use std::fs;\n    ///\n    /// fn main() -&gt; std::io::Result&lt;()&gt; {\n    ///     let metadata = fs::metadata(\"foo.txt\")?;\n    ///\n    ///     assert!(!metadata.permissions().readonly());\n    ///     Ok(())\n    /// }\n    /// ```\n    </span><span class=\"attr\">#[must_use]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>permissions(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; Permissions {\n        Permissions(<span class=\"self\">self</span>.<span class=\"number\">0</span>.perm())\n    }\n\n    <span class=\"doccomment\">/// Returns the last modification time listed in this metadata.\n    ///\n    /// The returned value corresponds to the `mtime` field of `stat` on Unix\n    /// platforms and the `ftLastWriteTime` field on Windows platforms.\n    ///\n    /// # Errors\n    ///\n    /// This field might not be available on all platforms, and will return an\n    /// `Err` on platforms where it is not available.\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// use std::fs;\n    ///\n    /// fn main() -&gt; std::io::Result&lt;()&gt; {\n    ///     let metadata = fs::metadata(\"foo.txt\")?;\n    ///\n    ///     if let Ok(time) = metadata.modified() {\n    ///         println!(\"{time:?}\");\n    ///     } else {\n    ///         println!(\"Not supported on this platform\");\n    ///     }\n    ///     Ok(())\n    /// }\n    /// ```\n    </span><span class=\"attr\">#[doc(alias = <span class=\"string\">\"mtime\"</span>, alias = <span class=\"string\">\"ftLastWriteTime\"</span>)]\n    #[stable(feature = <span class=\"string\">\"fs_time\"</span>, since = <span class=\"string\">\"1.10.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>modified(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; io::Result&lt;SystemTime&gt; {\n        <span class=\"self\">self</span>.<span class=\"number\">0</span>.modified().map(FromInner::from_inner)\n    }\n\n    <span class=\"doccomment\">/// Returns the last access time of this metadata.\n    ///\n    /// The returned value corresponds to the `atime` field of `stat` on Unix\n    /// platforms and the `ftLastAccessTime` field on Windows platforms.\n    ///\n    /// Note that not all platforms will keep this field update in a file's\n    /// metadata, for example Windows has an option to disable updating this\n    /// time when files are accessed and Linux similarly has `noatime`.\n    ///\n    /// # Errors\n    ///\n    /// This field might not be available on all platforms, and will return an\n    /// `Err` on platforms where it is not available.\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// use std::fs;\n    ///\n    /// fn main() -&gt; std::io::Result&lt;()&gt; {\n    ///     let metadata = fs::metadata(\"foo.txt\")?;\n    ///\n    ///     if let Ok(time) = metadata.accessed() {\n    ///         println!(\"{time:?}\");\n    ///     } else {\n    ///         println!(\"Not supported on this platform\");\n    ///     }\n    ///     Ok(())\n    /// }\n    /// ```\n    </span><span class=\"attr\">#[doc(alias = <span class=\"string\">\"atime\"</span>, alias = <span class=\"string\">\"ftLastAccessTime\"</span>)]\n    #[stable(feature = <span class=\"string\">\"fs_time\"</span>, since = <span class=\"string\">\"1.10.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>accessed(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; io::Result&lt;SystemTime&gt; {\n        <span class=\"self\">self</span>.<span class=\"number\">0</span>.accessed().map(FromInner::from_inner)\n    }\n\n    <span class=\"doccomment\">/// Returns the creation time listed in this metadata.\n    ///\n    /// The returned value corresponds to the `btime` field of `statx` on\n    /// Linux kernel starting from to 4.11, the `birthtime` field of `stat` on other\n    /// Unix platforms, and the `ftCreationTime` field on Windows platforms.\n    ///\n    /// # Errors\n    ///\n    /// This field might not be available on all platforms, and will return an\n    /// `Err` on platforms or filesystems where it is not available.\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// use std::fs;\n    ///\n    /// fn main() -&gt; std::io::Result&lt;()&gt; {\n    ///     let metadata = fs::metadata(\"foo.txt\")?;\n    ///\n    ///     if let Ok(time) = metadata.created() {\n    ///         println!(\"{time:?}\");\n    ///     } else {\n    ///         println!(\"Not supported on this platform or filesystem\");\n    ///     }\n    ///     Ok(())\n    /// }\n    /// ```\n    </span><span class=\"attr\">#[doc(alias = <span class=\"string\">\"btime\"</span>, alias = <span class=\"string\">\"birthtime\"</span>, alias = <span class=\"string\">\"ftCreationTime\"</span>)]\n    #[stable(feature = <span class=\"string\">\"fs_time\"</span>, since = <span class=\"string\">\"1.10.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>created(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; io::Result&lt;SystemTime&gt; {\n        <span class=\"self\">self</span>.<span class=\"number\">0</span>.created().map(FromInner::from_inner)\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"std_debug\"</span>, since = <span class=\"string\">\"1.16.0\"</span>)]\n</span><span class=\"kw\">impl </span>fmt::Debug <span class=\"kw\">for </span>Metadata {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>debug = f.debug_struct(<span class=\"string\">\"Metadata\"</span>);\n        debug.field(<span class=\"string\">\"file_type\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.file_type());\n        debug.field(<span class=\"string\">\"permissions\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.permissions());\n        debug.field(<span class=\"string\">\"len\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.len());\n        <span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span>(modified) = <span class=\"self\">self</span>.modified() {\n            debug.field(<span class=\"string\">\"modified\"</span>, <span class=\"kw-2\">&amp;</span>modified);\n        }\n        <span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span>(accessed) = <span class=\"self\">self</span>.accessed() {\n            debug.field(<span class=\"string\">\"accessed\"</span>, <span class=\"kw-2\">&amp;</span>accessed);\n        }\n        <span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span>(created) = <span class=\"self\">self</span>.created() {\n            debug.field(<span class=\"string\">\"created\"</span>, <span class=\"kw-2\">&amp;</span>created);\n        }\n        debug.finish_non_exhaustive()\n    }\n}\n\n<span class=\"kw\">impl </span>AsInner&lt;fs_imp::FileAttr&gt; <span class=\"kw\">for </span>Metadata {\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>as_inner(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;</span>fs_imp::FileAttr {\n        <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.<span class=\"number\">0\n    </span>}\n}\n\n<span class=\"kw\">impl </span>FromInner&lt;fs_imp::FileAttr&gt; <span class=\"kw\">for </span>Metadata {\n    <span class=\"kw\">fn </span>from_inner(attr: fs_imp::FileAttr) -&gt; Metadata {\n        Metadata(attr)\n    }\n}\n\n<span class=\"kw\">impl </span>FileTimes {\n    <span class=\"doccomment\">/// Create a new `FileTimes` with no times set.\n    ///\n    /// Using the resulting `FileTimes` in [`File::set_times`] will not modify any timestamps.\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"file_set_times\"</span>, since = <span class=\"string\">\"1.75.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>new() -&gt; <span class=\"self\">Self </span>{\n        <span class=\"self\">Self</span>::default()\n    }\n\n    <span class=\"doccomment\">/// Set the last access time of a file.\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"file_set_times\"</span>, since = <span class=\"string\">\"1.75.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>set_accessed(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>, t: SystemTime) -&gt; <span class=\"self\">Self </span>{\n        <span class=\"self\">self</span>.<span class=\"number\">0</span>.set_accessed(t.into_inner());\n        <span class=\"self\">self\n    </span>}\n\n    <span class=\"doccomment\">/// Set the last modified time of a file.\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"file_set_times\"</span>, since = <span class=\"string\">\"1.75.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>set_modified(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>, t: SystemTime) -&gt; <span class=\"self\">Self </span>{\n        <span class=\"self\">self</span>.<span class=\"number\">0</span>.set_modified(t.into_inner());\n        <span class=\"self\">self\n    </span>}\n}\n\n<span class=\"kw\">impl </span>AsInnerMut&lt;fs_imp::FileTimes&gt; <span class=\"kw\">for </span>FileTimes {\n    <span class=\"kw\">fn </span>as_inner_mut(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;mut </span>fs_imp::FileTimes {\n        <span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>.<span class=\"number\">0\n    </span>}\n}\n\n<span class=\"comment\">// For implementing OS extension traits in `std::os`\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"file_set_times\"</span>, since = <span class=\"string\">\"1.75.0\"</span>)]\n</span><span class=\"kw\">impl </span>Sealed <span class=\"kw\">for </span>FileTimes {}\n\n<span class=\"kw\">impl </span>Permissions {\n    <span class=\"doccomment\">/// Returns `true` if these permissions describe a readonly (unwritable) file.\n    ///\n    /// # Note\n    ///\n    /// This function does not take Access Control Lists (ACLs) or Unix group\n    /// membership into account.\n    ///\n    /// # Windows\n    ///\n    /// On Windows this returns [`FILE_ATTRIBUTE_READONLY`](https://docs.microsoft.com/en-us/windows/win32/fileio/file-attribute-constants).\n    /// If `FILE_ATTRIBUTE_READONLY` is set then writes to the file will fail\n    /// but the user may still have permission to change this flag. If\n    /// `FILE_ATTRIBUTE_READONLY` is *not* set then writes may still fail due\n    /// to lack of write permission.\n    /// The behavior of this attribute for directories depends on the Windows\n    /// version.\n    ///\n    /// # Unix (including macOS)\n    ///\n    /// On Unix-based platforms this checks if *any* of the owner, group or others\n    /// write permission bits are set. It does not check if the current\n    /// user is in the file's assigned group. It also does not check ACLs.\n    /// Therefore the return value of this function cannot be relied upon\n    /// to predict whether attempts to read or write the file will actually succeed.\n    /// The [`PermissionsExt`] trait gives direct access to the permission bits but\n    /// also does not read ACLs.\n    ///\n    /// [`PermissionsExt`]: crate::os::unix::fs::PermissionsExt\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// use std::fs::File;\n    ///\n    /// fn main() -&gt; std::io::Result&lt;()&gt; {\n    ///     let mut f = File::create(\"foo.txt\")?;\n    ///     let metadata = f.metadata()?;\n    ///\n    ///     assert_eq!(false, metadata.permissions().readonly());\n    ///     Ok(())\n    /// }\n    /// ```\n    </span><span class=\"attr\">#[must_use = <span class=\"string\">\"call `set_readonly` to modify the readonly flag\"</span>]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>readonly(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; bool {\n        <span class=\"self\">self</span>.<span class=\"number\">0</span>.readonly()\n    }\n\n    <span class=\"doccomment\">/// Modifies the readonly flag for this set of permissions. If the\n    /// `readonly` argument is `true`, using the resulting `Permission` will\n    /// update file permissions to forbid writing. Conversely, if it's `false`,\n    /// using the resulting `Permission` will update file permissions to allow\n    /// writing.\n    ///\n    /// This operation does **not** modify the files attributes. This only\n    /// changes the in-memory value of these attributes for this `Permissions`\n    /// instance. To modify the files attributes use the [`set_permissions`]\n    /// function which commits these attribute changes to the file.\n    ///\n    /// # Note\n    ///\n    /// `set_readonly(false)` makes the file *world-writable* on Unix.\n    /// You can use the [`PermissionsExt`] trait on Unix to avoid this issue.\n    ///\n    /// It also does not take Access Control Lists (ACLs) or Unix group\n    /// membership into account.\n    ///\n    /// # Windows\n    ///\n    /// On Windows this sets or clears [`FILE_ATTRIBUTE_READONLY`](https://docs.microsoft.com/en-us/windows/win32/fileio/file-attribute-constants).\n    /// If `FILE_ATTRIBUTE_READONLY` is set then writes to the file will fail\n    /// but the user may still have permission to change this flag. If\n    /// `FILE_ATTRIBUTE_READONLY` is *not* set then the write may still fail if\n    /// the user does not have permission to write to the file.\n    ///\n    /// In Windows 7 and earlier this attribute prevents deleting empty\n    /// directories. It does not prevent modifying the directory contents.\n    /// On later versions of Windows this attribute is ignored for directories.\n    ///\n    /// # Unix (including macOS)\n    ///\n    /// On Unix-based platforms this sets or clears the write access bit for\n    /// the owner, group *and* others, equivalent to `chmod a+w &lt;file&gt;`\n    /// or `chmod a-w &lt;file&gt;` respectively. The latter will grant write access\n    /// to all users! You can use the [`PermissionsExt`] trait on Unix\n    /// to avoid this issue.\n    ///\n    /// [`PermissionsExt`]: crate::os::unix::fs::PermissionsExt\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// use std::fs::File;\n    ///\n    /// fn main() -&gt; std::io::Result&lt;()&gt; {\n    ///     let f = File::create(\"foo.txt\")?;\n    ///     let metadata = f.metadata()?;\n    ///     let mut permissions = metadata.permissions();\n    ///\n    ///     permissions.set_readonly(true);\n    ///\n    ///     // filesystem doesn't change, only the in memory state of the\n    ///     // readonly permission\n    ///     assert_eq!(false, metadata.permissions().readonly());\n    ///\n    ///     // just this particular `permissions`.\n    ///     assert_eq!(true, permissions.readonly());\n    ///     Ok(())\n    /// }\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>set_readonly(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, readonly: bool) {\n        <span class=\"self\">self</span>.<span class=\"number\">0</span>.set_readonly(readonly)\n    }\n}\n\n<span class=\"kw\">impl </span>FileType {\n    <span class=\"doccomment\">/// Tests whether this file type represents a directory. The\n    /// result is mutually exclusive to the results of\n    /// [`is_file`] and [`is_symlink`]; only zero or one of these\n    /// tests may pass.\n    ///\n    /// [`is_file`]: FileType::is_file\n    /// [`is_symlink`]: FileType::is_symlink\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// fn main() -&gt; std::io::Result&lt;()&gt; {\n    ///     use std::fs;\n    ///\n    ///     let metadata = fs::metadata(\"foo.txt\")?;\n    ///     let file_type = metadata.file_type();\n    ///\n    ///     assert_eq!(file_type.is_dir(), false);\n    ///     Ok(())\n    /// }\n    /// ```\n    </span><span class=\"attr\">#[must_use]\n    #[stable(feature = <span class=\"string\">\"file_type\"</span>, since = <span class=\"string\">\"1.1.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>is_dir(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; bool {\n        <span class=\"self\">self</span>.<span class=\"number\">0</span>.is_dir()\n    }\n\n    <span class=\"doccomment\">/// Tests whether this file type represents a regular file.\n    /// The result is mutually exclusive to the results of\n    /// [`is_dir`] and [`is_symlink`]; only zero or one of these\n    /// tests may pass.\n    ///\n    /// When the goal is simply to read from (or write to) the source, the most\n    /// reliable way to test the source can be read (or written to) is to open\n    /// it. Only using `is_file` can break workflows like `diff &lt;( prog_a )` on\n    /// a Unix-like system for example. See [`File::open`] or\n    /// [`OpenOptions::open`] for more information.\n    ///\n    /// [`is_dir`]: FileType::is_dir\n    /// [`is_symlink`]: FileType::is_symlink\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// fn main() -&gt; std::io::Result&lt;()&gt; {\n    ///     use std::fs;\n    ///\n    ///     let metadata = fs::metadata(\"foo.txt\")?;\n    ///     let file_type = metadata.file_type();\n    ///\n    ///     assert_eq!(file_type.is_file(), true);\n    ///     Ok(())\n    /// }\n    /// ```\n    </span><span class=\"attr\">#[must_use]\n    #[stable(feature = <span class=\"string\">\"file_type\"</span>, since = <span class=\"string\">\"1.1.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>is_file(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; bool {\n        <span class=\"self\">self</span>.<span class=\"number\">0</span>.is_file()\n    }\n\n    <span class=\"doccomment\">/// Tests whether this file type represents a symbolic link.\n    /// The result is mutually exclusive to the results of\n    /// [`is_dir`] and [`is_file`]; only zero or one of these\n    /// tests may pass.\n    ///\n    /// The underlying [`Metadata`] struct needs to be retrieved\n    /// with the [`fs::symlink_metadata`] function and not the\n    /// [`fs::metadata`] function. The [`fs::metadata`] function\n    /// follows symbolic links, so [`is_symlink`] would always\n    /// return `false` for the target file.\n    ///\n    /// [`fs::metadata`]: metadata\n    /// [`fs::symlink_metadata`]: symlink_metadata\n    /// [`is_dir`]: FileType::is_dir\n    /// [`is_file`]: FileType::is_file\n    /// [`is_symlink`]: FileType::is_symlink\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// use std::fs;\n    ///\n    /// fn main() -&gt; std::io::Result&lt;()&gt; {\n    ///     let metadata = fs::symlink_metadata(\"foo.txt\")?;\n    ///     let file_type = metadata.file_type();\n    ///\n    ///     assert_eq!(file_type.is_symlink(), false);\n    ///     Ok(())\n    /// }\n    /// ```\n    </span><span class=\"attr\">#[must_use]\n    #[stable(feature = <span class=\"string\">\"file_type\"</span>, since = <span class=\"string\">\"1.1.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>is_symlink(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; bool {\n        <span class=\"self\">self</span>.<span class=\"number\">0</span>.is_symlink()\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"std_debug\"</span>, since = <span class=\"string\">\"1.16.0\"</span>)]\n</span><span class=\"kw\">impl </span>fmt::Debug <span class=\"kw\">for </span>FileType {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n        f.debug_struct(<span class=\"string\">\"FileType\"</span>)\n            .field(<span class=\"string\">\"is_file\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.is_file())\n            .field(<span class=\"string\">\"is_dir\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.is_dir())\n            .field(<span class=\"string\">\"is_symlink\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.is_symlink())\n            .finish_non_exhaustive()\n    }\n}\n\n<span class=\"kw\">impl </span>AsInner&lt;fs_imp::FileType&gt; <span class=\"kw\">for </span>FileType {\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>as_inner(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;</span>fs_imp::FileType {\n        <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.<span class=\"number\">0\n    </span>}\n}\n\n<span class=\"kw\">impl </span>FromInner&lt;fs_imp::FilePermissions&gt; <span class=\"kw\">for </span>Permissions {\n    <span class=\"kw\">fn </span>from_inner(f: fs_imp::FilePermissions) -&gt; Permissions {\n        Permissions(f)\n    }\n}\n\n<span class=\"kw\">impl </span>AsInner&lt;fs_imp::FilePermissions&gt; <span class=\"kw\">for </span>Permissions {\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>as_inner(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;</span>fs_imp::FilePermissions {\n        <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.<span class=\"number\">0\n    </span>}\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">impl </span>Iterator <span class=\"kw\">for </span>ReadDir {\n    <span class=\"kw\">type </span>Item = io::Result&lt;DirEntry&gt;;\n\n    <span class=\"kw\">fn </span>next(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;io::Result&lt;DirEntry&gt;&gt; {\n        <span class=\"self\">self</span>.<span class=\"number\">0</span>.next().map(|entry| entry.map(DirEntry))\n    }\n}\n\n<span class=\"kw\">impl </span>DirEntry {\n    <span class=\"doccomment\">/// Returns the full path to the file that this entry represents.\n    ///\n    /// The full path is created by joining the original path to `read_dir`\n    /// with the filename of this entry.\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// use std::fs;\n    ///\n    /// fn main() -&gt; std::io::Result&lt;()&gt; {\n    ///     for entry in fs::read_dir(\".\")? {\n    ///         let dir = entry?;\n    ///         println!(\"{:?}\", dir.path());\n    ///     }\n    ///     Ok(())\n    /// }\n    /// ```\n    ///\n    /// This prints output like:\n    ///\n    /// ```text\n    /// \"./whatever.txt\"\n    /// \"./foo.html\"\n    /// \"./hello_world.rs\"\n    /// ```\n    ///\n    /// The exact text, of course, depends on what files you have in `.`.\n    </span><span class=\"attr\">#[must_use]\n    #[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>path(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; PathBuf {\n        <span class=\"self\">self</span>.<span class=\"number\">0</span>.path()\n    }\n\n    <span class=\"doccomment\">/// Returns the metadata for the file that this entry points at.\n    ///\n    /// This function will not traverse symlinks if this entry points at a\n    /// symlink. To traverse symlinks use [`fs::metadata`] or [`fs::File::metadata`].\n    ///\n    /// [`fs::metadata`]: metadata\n    /// [`fs::File::metadata`]: File::metadata\n    ///\n    /// # Platform-specific behavior\n    ///\n    /// On Windows this function is cheap to call (no extra system calls\n    /// needed), but on Unix platforms this function is the equivalent of\n    /// calling `symlink_metadata` on the path.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::fs;\n    ///\n    /// if let Ok(entries) = fs::read_dir(\".\") {\n    ///     for entry in entries {\n    ///         if let Ok(entry) = entry {\n    ///             // Here, `entry` is a `DirEntry`.\n    ///             if let Ok(metadata) = entry.metadata() {\n    ///                 // Now let's show our entry's permissions!\n    ///                 println!(\"{:?}: {:?}\", entry.path(), metadata.permissions());\n    ///             } else {\n    ///                 println!(\"Couldn't get metadata for {:?}\", entry.path());\n    ///             }\n    ///         }\n    ///     }\n    /// }\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"dir_entry_ext\"</span>, since = <span class=\"string\">\"1.1.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>metadata(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; io::Result&lt;Metadata&gt; {\n        <span class=\"self\">self</span>.<span class=\"number\">0</span>.metadata().map(Metadata)\n    }\n\n    <span class=\"doccomment\">/// Returns the file type for the file that this entry points at.\n    ///\n    /// This function will not traverse symlinks if this entry points at a\n    /// symlink.\n    ///\n    /// # Platform-specific behavior\n    ///\n    /// On Windows and most Unix platforms this function is free (no extra\n    /// system calls needed), but some Unix platforms may require the equivalent\n    /// call to `symlink_metadata` to learn about the target file type.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::fs;\n    ///\n    /// if let Ok(entries) = fs::read_dir(\".\") {\n    ///     for entry in entries {\n    ///         if let Ok(entry) = entry {\n    ///             // Here, `entry` is a `DirEntry`.\n    ///             if let Ok(file_type) = entry.file_type() {\n    ///                 // Now let's show our entry's file type!\n    ///                 println!(\"{:?}: {:?}\", entry.path(), file_type);\n    ///             } else {\n    ///                 println!(\"Couldn't get file type for {:?}\", entry.path());\n    ///             }\n    ///         }\n    ///     }\n    /// }\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"dir_entry_ext\"</span>, since = <span class=\"string\">\"1.1.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>file_type(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; io::Result&lt;FileType&gt; {\n        <span class=\"self\">self</span>.<span class=\"number\">0</span>.file_type().map(FileType)\n    }\n\n    <span class=\"doccomment\">/// Returns the file name of this directory entry without any\n    /// leading path component(s).\n    ///\n    /// As an example,\n    /// the output of the function will result in \"foo\" for all the following paths:\n    /// - \"./foo\"\n    /// - \"/the/foo\"\n    /// - \"../../foo\"\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::fs;\n    ///\n    /// if let Ok(entries) = fs::read_dir(\".\") {\n    ///     for entry in entries {\n    ///         if let Ok(entry) = entry {\n    ///             // Here, `entry` is a `DirEntry`.\n    ///             println!(\"{:?}\", entry.file_name());\n    ///         }\n    ///     }\n    /// }\n    /// ```\n    </span><span class=\"attr\">#[must_use]\n    #[stable(feature = <span class=\"string\">\"dir_entry_ext\"</span>, since = <span class=\"string\">\"1.1.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>file_name(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; OsString {\n        <span class=\"self\">self</span>.<span class=\"number\">0</span>.file_name()\n    }\n}\n\n<span class=\"attr\">#[stable(feature = <span class=\"string\">\"dir_entry_debug\"</span>, since = <span class=\"string\">\"1.13.0\"</span>)]\n</span><span class=\"kw\">impl </span>fmt::Debug <span class=\"kw\">for </span>DirEntry {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n        f.debug_tuple(<span class=\"string\">\"DirEntry\"</span>).field(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.path()).finish()\n    }\n}\n\n<span class=\"kw\">impl </span>AsInner&lt;fs_imp::DirEntry&gt; <span class=\"kw\">for </span>DirEntry {\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>as_inner(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;</span>fs_imp::DirEntry {\n        <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.<span class=\"number\">0\n    </span>}\n}\n\n<span class=\"doccomment\">/// Removes a file from the filesystem.\n///\n/// Note that there is no\n/// guarantee that the file is immediately deleted (e.g., depending on\n/// platform, other open file descriptors may prevent immediate removal).\n///\n/// # Platform-specific behavior\n///\n/// This function currently corresponds to the `unlink` function on Unix\n/// and the `DeleteFile` function on Windows.\n/// Note that, this [may change in the future][changes].\n///\n/// [changes]: io#platform-specific-behavior\n///\n/// # Errors\n///\n/// This function will return an error in the following situations, but is not\n/// limited to just these cases:\n///\n/// * `path` points to a directory.\n/// * The file doesn't exist.\n/// * The user lacks permissions to remove the file.\n///\n/// # Examples\n///\n/// ```no_run\n/// use std::fs;\n///\n/// fn main() -&gt; std::io::Result&lt;()&gt; {\n///     fs::remove_file(\"a.txt\")?;\n///     Ok(())\n/// }\n/// ```\n</span><span class=\"attr\">#[doc(alias = <span class=\"string\">\"rm\"</span>, alias = <span class=\"string\">\"unlink\"</span>, alias = <span class=\"string\">\"DeleteFile\"</span>)]\n#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">pub fn </span>remove_file&lt;P: AsRef&lt;Path&gt;&gt;(path: P) -&gt; io::Result&lt;()&gt; {\n    fs_imp::unlink(path.as_ref())\n}\n\n<span class=\"doccomment\">/// Given a path, query the file system to get information about a file,\n/// directory, etc.\n///\n/// This function will traverse symbolic links to query information about the\n/// destination file.\n///\n/// # Platform-specific behavior\n///\n/// This function currently corresponds to the `stat` function on Unix\n/// and the `GetFileInformationByHandle` function on Windows.\n/// Note that, this [may change in the future][changes].\n///\n/// [changes]: io#platform-specific-behavior\n///\n/// # Errors\n///\n/// This function will return an error in the following situations, but is not\n/// limited to just these cases:\n///\n/// * The user lacks permissions to perform `metadata` call on `path`.\n/// * `path` does not exist.\n///\n/// # Examples\n///\n/// ```rust,no_run\n/// use std::fs;\n///\n/// fn main() -&gt; std::io::Result&lt;()&gt; {\n///     let attr = fs::metadata(\"/some/file/path.txt\")?;\n///     // inspect attr ...\n///     Ok(())\n/// }\n/// ```\n</span><span class=\"attr\">#[doc(alias = <span class=\"string\">\"stat\"</span>)]\n#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">pub fn </span>metadata&lt;P: AsRef&lt;Path&gt;&gt;(path: P) -&gt; io::Result&lt;Metadata&gt; {\n    fs_imp::stat(path.as_ref()).map(Metadata)\n}\n\n<span class=\"doccomment\">/// Query the metadata about a file without following symlinks.\n///\n/// # Platform-specific behavior\n///\n/// This function currently corresponds to the `lstat` function on Unix\n/// and the `GetFileInformationByHandle` function on Windows.\n/// Note that, this [may change in the future][changes].\n///\n/// [changes]: io#platform-specific-behavior\n///\n/// # Errors\n///\n/// This function will return an error in the following situations, but is not\n/// limited to just these cases:\n///\n/// * The user lacks permissions to perform `metadata` call on `path`.\n/// * `path` does not exist.\n///\n/// # Examples\n///\n/// ```rust,no_run\n/// use std::fs;\n///\n/// fn main() -&gt; std::io::Result&lt;()&gt; {\n///     let attr = fs::symlink_metadata(\"/some/file/path.txt\")?;\n///     // inspect attr ...\n///     Ok(())\n/// }\n/// ```\n</span><span class=\"attr\">#[doc(alias = <span class=\"string\">\"lstat\"</span>)]\n#[stable(feature = <span class=\"string\">\"symlink_metadata\"</span>, since = <span class=\"string\">\"1.1.0\"</span>)]\n</span><span class=\"kw\">pub fn </span>symlink_metadata&lt;P: AsRef&lt;Path&gt;&gt;(path: P) -&gt; io::Result&lt;Metadata&gt; {\n    fs_imp::lstat(path.as_ref()).map(Metadata)\n}\n\n<span class=\"doccomment\">/// Rename a file or directory to a new name, replacing the original file if\n/// `to` already exists.\n///\n/// This will not work if the new name is on a different mount point.\n///\n/// # Platform-specific behavior\n///\n/// This function currently corresponds to the `rename` function on Unix\n/// and the `MoveFileEx` function with the `MOVEFILE_REPLACE_EXISTING` flag on Windows.\n///\n/// Because of this, the behavior when both `from` and `to` exist differs. On\n/// Unix, if `from` is a directory, `to` must also be an (empty) directory. If\n/// `from` is not a directory, `to` must also be not a directory. In contrast,\n/// on Windows, `from` can be anything, but `to` must *not* be a directory.\n///\n/// Note that, this [may change in the future][changes].\n///\n/// [changes]: io#platform-specific-behavior\n///\n/// # Errors\n///\n/// This function will return an error in the following situations, but is not\n/// limited to just these cases:\n///\n/// * `from` does not exist.\n/// * The user lacks permissions to view contents.\n/// * `from` and `to` are on separate filesystems.\n///\n/// # Examples\n///\n/// ```no_run\n/// use std::fs;\n///\n/// fn main() -&gt; std::io::Result&lt;()&gt; {\n///     fs::rename(\"a.txt\", \"b.txt\")?; // Rename a.txt to b.txt\n///     Ok(())\n/// }\n/// ```\n</span><span class=\"attr\">#[doc(alias = <span class=\"string\">\"mv\"</span>, alias = <span class=\"string\">\"MoveFile\"</span>, alias = <span class=\"string\">\"MoveFileEx\"</span>)]\n#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">pub fn </span>rename&lt;P: AsRef&lt;Path&gt;, Q: AsRef&lt;Path&gt;&gt;(from: P, to: Q) -&gt; io::Result&lt;()&gt; {\n    fs_imp::rename(from.as_ref(), to.as_ref())\n}\n\n<span class=\"doccomment\">/// Copies the contents of one file to another. This function will also\n/// copy the permission bits of the original file to the destination file.\n///\n/// This function will **overwrite** the contents of `to`.\n///\n/// Note that if `from` and `to` both point to the same file, then the file\n/// will likely get truncated by this operation.\n///\n/// On success, the total number of bytes copied is returned and it is equal to\n/// the length of the `to` file as reported by `metadata`.\n///\n/// If you want to copy the contents of one file to another and you’re\n/// working with [`File`]s, see the [`io::copy`](io::copy()) function.\n///\n/// # Platform-specific behavior\n///\n/// This function currently corresponds to the `open` function in Unix\n/// with `O_RDONLY` for `from` and `O_WRONLY`, `O_CREAT`, and `O_TRUNC` for `to`.\n/// `O_CLOEXEC` is set for returned file descriptors.\n///\n/// On Linux (including Android), this function attempts to use `copy_file_range(2)`,\n/// and falls back to reading and writing if that is not possible.\n///\n/// On Windows, this function currently corresponds to `CopyFileEx`. Alternate\n/// NTFS streams are copied but only the size of the main stream is returned by\n/// this function.\n///\n/// On MacOS, this function corresponds to `fclonefileat` and `fcopyfile`.\n///\n/// Note that platform-specific behavior [may change in the future][changes].\n///\n/// [changes]: io#platform-specific-behavior\n///\n/// # Errors\n///\n/// This function will return an error in the following situations, but is not\n/// limited to just these cases:\n///\n/// * `from` is neither a regular file nor a symlink to a regular file.\n/// * `from` does not exist.\n/// * The current process does not have the permission rights to read\n///   `from` or write `to`.\n///\n/// # Examples\n///\n/// ```no_run\n/// use std::fs;\n///\n/// fn main() -&gt; std::io::Result&lt;()&gt; {\n///     fs::copy(\"foo.txt\", \"bar.txt\")?;  // Copy foo.txt to bar.txt\n///     Ok(())\n/// }\n/// ```\n</span><span class=\"attr\">#[doc(alias = <span class=\"string\">\"cp\"</span>)]\n#[doc(alias = <span class=\"string\">\"CopyFile\"</span>, alias = <span class=\"string\">\"CopyFileEx\"</span>)]\n#[doc(alias = <span class=\"string\">\"fclonefileat\"</span>, alias = <span class=\"string\">\"fcopyfile\"</span>)]\n#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">pub fn </span>copy&lt;P: AsRef&lt;Path&gt;, Q: AsRef&lt;Path&gt;&gt;(from: P, to: Q) -&gt; io::Result&lt;u64&gt; {\n    fs_imp::copy(from.as_ref(), to.as_ref())\n}\n\n<span class=\"doccomment\">/// Creates a new hard link on the filesystem.\n///\n/// The `link` path will be a link pointing to the `original` path. Note that\n/// systems often require these two paths to both be located on the same\n/// filesystem.\n///\n/// If `original` names a symbolic link, it is platform-specific whether the\n/// symbolic link is followed. On platforms where it's possible to not follow\n/// it, it is not followed, and the created hard link points to the symbolic\n/// link itself.\n///\n/// # Platform-specific behavior\n///\n/// This function currently corresponds the `CreateHardLink` function on Windows.\n/// On most Unix systems, it corresponds to the `linkat` function with no flags.\n/// On Android, VxWorks, and Redox, it instead corresponds to the `link` function.\n/// On MacOS, it uses the `linkat` function if it is available, but on very old\n/// systems where `linkat` is not available, `link` is selected at runtime instead.\n/// Note that, this [may change in the future][changes].\n///\n/// [changes]: io#platform-specific-behavior\n///\n/// # Errors\n///\n/// This function will return an error in the following situations, but is not\n/// limited to just these cases:\n///\n/// * The `original` path is not a file or doesn't exist.\n///\n/// # Examples\n///\n/// ```no_run\n/// use std::fs;\n///\n/// fn main() -&gt; std::io::Result&lt;()&gt; {\n///     fs::hard_link(\"a.txt\", \"b.txt\")?; // Hard link a.txt to b.txt\n///     Ok(())\n/// }\n/// ```\n</span><span class=\"attr\">#[doc(alias = <span class=\"string\">\"CreateHardLink\"</span>, alias = <span class=\"string\">\"linkat\"</span>)]\n#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">pub fn </span>hard_link&lt;P: AsRef&lt;Path&gt;, Q: AsRef&lt;Path&gt;&gt;(original: P, link: Q) -&gt; io::Result&lt;()&gt; {\n    fs_imp::link(original.as_ref(), link.as_ref())\n}\n\n<span class=\"doccomment\">/// Creates a new symbolic link on the filesystem.\n///\n/// The `link` path will be a symbolic link pointing to the `original` path.\n/// On Windows, this will be a file symlink, not a directory symlink;\n/// for this reason, the platform-specific [`std::os::unix::fs::symlink`]\n/// and [`std::os::windows::fs::symlink_file`] or [`symlink_dir`] should be\n/// used instead to make the intent explicit.\n///\n/// [`std::os::unix::fs::symlink`]: crate::os::unix::fs::symlink\n/// [`std::os::windows::fs::symlink_file`]: crate::os::windows::fs::symlink_file\n/// [`symlink_dir`]: crate::os::windows::fs::symlink_dir\n///\n/// # Examples\n///\n/// ```no_run\n/// use std::fs;\n///\n/// fn main() -&gt; std::io::Result&lt;()&gt; {\n///     fs::soft_link(\"a.txt\", \"b.txt\")?;\n///     Ok(())\n/// }\n/// ```\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n#[deprecated(\n    since = <span class=\"string\">\"1.1.0\"</span>,\n    note = <span class=\"string\">\"replaced with std::os::unix::fs::symlink and \\\n            std::os::windows::fs::{symlink_file, symlink_dir}\"\n</span>)]\n</span><span class=\"kw\">pub fn </span>soft_link&lt;P: AsRef&lt;Path&gt;, Q: AsRef&lt;Path&gt;&gt;(original: P, link: Q) -&gt; io::Result&lt;()&gt; {\n    fs_imp::symlink(original.as_ref(), link.as_ref())\n}\n\n<span class=\"doccomment\">/// Reads a symbolic link, returning the file that the link points to.\n///\n/// # Platform-specific behavior\n///\n/// This function currently corresponds to the `readlink` function on Unix\n/// and the `CreateFile` function with `FILE_FLAG_OPEN_REPARSE_POINT` and\n/// `FILE_FLAG_BACKUP_SEMANTICS` flags on Windows.\n/// Note that, this [may change in the future][changes].\n///\n/// [changes]: io#platform-specific-behavior\n///\n/// # Errors\n///\n/// This function will return an error in the following situations, but is not\n/// limited to just these cases:\n///\n/// * `path` is not a symbolic link.\n/// * `path` does not exist.\n///\n/// # Examples\n///\n/// ```no_run\n/// use std::fs;\n///\n/// fn main() -&gt; std::io::Result&lt;()&gt; {\n///     let path = fs::read_link(\"a.txt\")?;\n///     Ok(())\n/// }\n/// ```\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">pub fn </span>read_link&lt;P: AsRef&lt;Path&gt;&gt;(path: P) -&gt; io::Result&lt;PathBuf&gt; {\n    fs_imp::readlink(path.as_ref())\n}\n\n<span class=\"doccomment\">/// Returns the canonical, absolute form of a path with all intermediate\n/// components normalized and symbolic links resolved.\n///\n/// # Platform-specific behavior\n///\n/// This function currently corresponds to the `realpath` function on Unix\n/// and the `CreateFile` and `GetFinalPathNameByHandle` functions on Windows.\n/// Note that, this [may change in the future][changes].\n///\n/// On Windows, this converts the path to use [extended length path][path]\n/// syntax, which allows your program to use longer path names, but means you\n/// can only join backslash-delimited paths to it, and it may be incompatible\n/// with other applications (if passed to the application on the command-line,\n/// or written to a file another application may read).\n///\n/// [changes]: io#platform-specific-behavior\n/// [path]: https://docs.microsoft.com/en-us/windows/win32/fileio/naming-a-file\n///\n/// # Errors\n///\n/// This function will return an error in the following situations, but is not\n/// limited to just these cases:\n///\n/// * `path` does not exist.\n/// * A non-final component in path is not a directory.\n///\n/// # Examples\n///\n/// ```no_run\n/// use std::fs;\n///\n/// fn main() -&gt; std::io::Result&lt;()&gt; {\n///     let path = fs::canonicalize(\"../a/../foo.txt\")?;\n///     Ok(())\n/// }\n/// ```\n</span><span class=\"attr\">#[doc(alias = <span class=\"string\">\"realpath\"</span>)]\n#[doc(alias = <span class=\"string\">\"GetFinalPathNameByHandle\"</span>)]\n#[stable(feature = <span class=\"string\">\"fs_canonicalize\"</span>, since = <span class=\"string\">\"1.5.0\"</span>)]\n</span><span class=\"kw\">pub fn </span>canonicalize&lt;P: AsRef&lt;Path&gt;&gt;(path: P) -&gt; io::Result&lt;PathBuf&gt; {\n    fs_imp::canonicalize(path.as_ref())\n}\n\n<span class=\"doccomment\">/// Creates a new, empty directory at the provided path\n///\n/// # Platform-specific behavior\n///\n/// This function currently corresponds to the `mkdir` function on Unix\n/// and the `CreateDirectoryW` function on Windows.\n/// Note that, this [may change in the future][changes].\n///\n/// [changes]: io#platform-specific-behavior\n///\n/// **NOTE**: If a parent of the given path doesn't exist, this function will\n/// return an error. To create a directory and all its missing parents at the\n/// same time, use the [`create_dir_all`] function.\n///\n/// # Errors\n///\n/// This function will return an error in the following situations, but is not\n/// limited to just these cases:\n///\n/// * User lacks permissions to create directory at `path`.\n/// * A parent of the given path doesn't exist. (To create a directory and all\n///   its missing parents at the same time, use the [`create_dir_all`]\n///   function.)\n/// * `path` already exists.\n///\n/// # Examples\n///\n/// ```no_run\n/// use std::fs;\n///\n/// fn main() -&gt; std::io::Result&lt;()&gt; {\n///     fs::create_dir(\"/some/dir\")?;\n///     Ok(())\n/// }\n/// ```\n</span><span class=\"attr\">#[doc(alias = <span class=\"string\">\"mkdir\"</span>, alias = <span class=\"string\">\"CreateDirectory\"</span>)]\n#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n#[cfg_attr(not(test), rustc_diagnostic_item = <span class=\"string\">\"fs_create_dir\"</span>)]\n</span><span class=\"kw\">pub fn </span>create_dir&lt;P: AsRef&lt;Path&gt;&gt;(path: P) -&gt; io::Result&lt;()&gt; {\n    DirBuilder::new().create(path.as_ref())\n}\n\n<span class=\"doccomment\">/// Recursively create a directory and all of its parent components if they\n/// are missing.\n///\n/// If this function returns an error, some of the parent components might have\n/// been created already.\n///\n/// # Platform-specific behavior\n///\n/// This function currently corresponds to multiple calls to the `mkdir`\n/// function on Unix and the `CreateDirectoryW` function on Windows.\n///\n/// Note that, this [may change in the future][changes].\n///\n/// [changes]: io#platform-specific-behavior\n///\n/// # Errors\n///\n/// This function will return an error in the following situations, but is not\n/// limited to just these cases:\n///\n/// * If any directory in the path specified by `path`\n/// does not already exist and it could not be created otherwise. The specific\n/// error conditions for when a directory is being created (after it is\n/// determined to not exist) are outlined by [`fs::create_dir`].\n///\n/// Notable exception is made for situations where any of the directories\n/// specified in the `path` could not be created as it was being created concurrently.\n/// Such cases are considered to be successful. That is, calling `create_dir_all`\n/// concurrently from multiple threads or processes is guaranteed not to fail\n/// due to a race condition with itself.\n///\n/// [`fs::create_dir`]: create_dir\n///\n/// # Examples\n///\n/// ```no_run\n/// use std::fs;\n///\n/// fn main() -&gt; std::io::Result&lt;()&gt; {\n///     fs::create_dir_all(\"/some/dir\")?;\n///     Ok(())\n/// }\n/// ```\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">pub fn </span>create_dir_all&lt;P: AsRef&lt;Path&gt;&gt;(path: P) -&gt; io::Result&lt;()&gt; {\n    DirBuilder::new().recursive(<span class=\"bool-val\">true</span>).create(path.as_ref())\n}\n\n<span class=\"doccomment\">/// Removes an empty directory.\n///\n/// # Platform-specific behavior\n///\n/// This function currently corresponds to the `rmdir` function on Unix\n/// and the `RemoveDirectory` function on Windows.\n/// Note that, this [may change in the future][changes].\n///\n/// [changes]: io#platform-specific-behavior\n///\n/// # Errors\n///\n/// This function will return an error in the following situations, but is not\n/// limited to just these cases:\n///\n/// * `path` doesn't exist.\n/// * `path` isn't a directory.\n/// * The user lacks permissions to remove the directory at the provided `path`.\n/// * The directory isn't empty.\n///\n/// # Examples\n///\n/// ```no_run\n/// use std::fs;\n///\n/// fn main() -&gt; std::io::Result&lt;()&gt; {\n///     fs::remove_dir(\"/some/dir\")?;\n///     Ok(())\n/// }\n/// ```\n</span><span class=\"attr\">#[doc(alias = <span class=\"string\">\"rmdir\"</span>, alias = <span class=\"string\">\"RemoveDirectory\"</span>)]\n#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">pub fn </span>remove_dir&lt;P: AsRef&lt;Path&gt;&gt;(path: P) -&gt; io::Result&lt;()&gt; {\n    fs_imp::rmdir(path.as_ref())\n}\n\n<span class=\"doccomment\">/// Removes a directory at this path, after removing all its contents. Use\n/// carefully!\n///\n/// This function does **not** follow symbolic links and it will simply remove the\n/// symbolic link itself.\n///\n/// # Platform-specific behavior\n///\n/// This function currently corresponds to `openat`, `fdopendir`, `unlinkat` and `lstat` functions\n/// on Unix (except for macOS before version 10.10 and REDOX) and the `CreateFileW`,\n/// `GetFileInformationByHandleEx`, `SetFileInformationByHandle`, and `NtCreateFile` functions on\n/// Windows. Note that, this [may change in the future][changes].\n///\n/// [changes]: io#platform-specific-behavior\n///\n/// On macOS before version 10.10 and REDOX, as well as when running in Miri for any target, this\n/// function is not protected against time-of-check to time-of-use (TOCTOU) race conditions, and\n/// should not be used in security-sensitive code on those platforms. All other platforms are\n/// protected.\n///\n/// # Errors\n///\n/// See [`fs::remove_file`] and [`fs::remove_dir`].\n///\n/// `remove_dir_all` will fail if `remove_dir` or `remove_file` fail on any constituent paths, including the root path.\n/// As a result, the directory you are deleting must exist, meaning that this function is not idempotent.\n///\n/// Consider ignoring the error if validating the removal is not required for your use case.\n///\n/// [`fs::remove_file`]: remove_file\n/// [`fs::remove_dir`]: remove_dir\n///\n/// # Examples\n///\n/// ```no_run\n/// use std::fs;\n///\n/// fn main() -&gt; std::io::Result&lt;()&gt; {\n///     fs::remove_dir_all(\"/some/dir\")?;\n///     Ok(())\n/// }\n/// ```\n</span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">pub fn </span>remove_dir_all&lt;P: AsRef&lt;Path&gt;&gt;(path: P) -&gt; io::Result&lt;()&gt; {\n    fs_imp::remove_dir_all(path.as_ref())\n}\n\n<span class=\"doccomment\">/// Returns an iterator over the entries within a directory.\n///\n/// The iterator will yield instances of &lt;code&gt;[io::Result]&lt;[DirEntry]&gt;&lt;/code&gt;.\n/// New errors may be encountered after an iterator is initially constructed.\n/// Entries for the current and parent directories (typically `.` and `..`) are\n/// skipped.\n///\n/// # Platform-specific behavior\n///\n/// This function currently corresponds to the `opendir` function on Unix\n/// and the `FindFirstFile` function on Windows. Advancing the iterator\n/// currently corresponds to `readdir` on Unix and `FindNextFile` on Windows.\n/// Note that, this [may change in the future][changes].\n///\n/// [changes]: io#platform-specific-behavior\n///\n/// The order in which this iterator returns entries is platform and filesystem\n/// dependent.\n///\n/// # Errors\n///\n/// This function will return an error in the following situations, but is not\n/// limited to just these cases:\n///\n/// * The provided `path` doesn't exist.\n/// * The process lacks permissions to view the contents.\n/// * The `path` points at a non-directory file.\n///\n/// # Examples\n///\n/// ```\n/// use std::io;\n/// use std::fs::{self, DirEntry};\n/// use std::path::Path;\n///\n/// // one possible implementation of walking a directory only visiting files\n/// fn visit_dirs(dir: &amp;Path, cb: &amp;dyn Fn(&amp;DirEntry)) -&gt; io::Result&lt;()&gt; {\n///     if dir.is_dir() {\n///         for entry in fs::read_dir(dir)? {\n///             let entry = entry?;\n///             let path = entry.path();\n///             if path.is_dir() {\n///                 visit_dirs(&amp;path, cb)?;\n///             } else {\n///                 cb(&amp;entry);\n///             }\n///         }\n///     }\n///     Ok(())\n/// }\n/// ```\n///\n/// ```rust,no_run\n/// use std::{fs, io};\n///\n/// fn main() -&gt; io::Result&lt;()&gt; {\n///     let mut entries = fs::read_dir(\".\")?\n///         .map(|res| res.map(|e| e.path()))\n///         .collect::&lt;Result&lt;Vec&lt;_&gt;, io::Error&gt;&gt;()?;\n///\n///     // The order in which `read_dir` returns entries is not guaranteed. If reproducible\n///     // ordering is required the entries should be explicitly sorted.\n///\n///     entries.sort();\n///\n///     // The entries have now been sorted by their path.\n///\n///     Ok(())\n/// }\n/// ```\n</span><span class=\"attr\">#[doc(alias = <span class=\"string\">\"ls\"</span>, alias = <span class=\"string\">\"opendir\"</span>, alias = <span class=\"string\">\"FindFirstFile\"</span>, alias = <span class=\"string\">\"FindNextFile\"</span>)]\n#[stable(feature = <span class=\"string\">\"rust1\"</span>, since = <span class=\"string\">\"1.0.0\"</span>)]\n</span><span class=\"kw\">pub fn </span>read_dir&lt;P: AsRef&lt;Path&gt;&gt;(path: P) -&gt; io::Result&lt;ReadDir&gt; {\n    fs_imp::readdir(path.as_ref()).map(ReadDir)\n}\n\n<span class=\"doccomment\">/// Changes the permissions found on a file or a directory.\n///\n/// # Platform-specific behavior\n///\n/// This function currently corresponds to the `chmod` function on Unix\n/// and the `SetFileAttributes` function on Windows.\n/// Note that, this [may change in the future][changes].\n///\n/// [changes]: io#platform-specific-behavior\n///\n/// # Errors\n///\n/// This function will return an error in the following situations, but is not\n/// limited to just these cases:\n///\n/// * `path` does not exist.\n/// * The user lacks the permission to change attributes of the file.\n///\n/// # Examples\n///\n/// ```no_run\n/// use std::fs;\n///\n/// fn main() -&gt; std::io::Result&lt;()&gt; {\n///     let mut perms = fs::metadata(\"foo.txt\")?.permissions();\n///     perms.set_readonly(true);\n///     fs::set_permissions(\"foo.txt\", perms)?;\n///     Ok(())\n/// }\n/// ```\n</span><span class=\"attr\">#[doc(alias = <span class=\"string\">\"chmod\"</span>, alias = <span class=\"string\">\"SetFileAttributes\"</span>)]\n#[stable(feature = <span class=\"string\">\"set_permissions\"</span>, since = <span class=\"string\">\"1.1.0\"</span>)]\n</span><span class=\"kw\">pub fn </span>set_permissions&lt;P: AsRef&lt;Path&gt;&gt;(path: P, perm: Permissions) -&gt; io::Result&lt;()&gt; {\n    fs_imp::set_perm(path.as_ref(), perm.<span class=\"number\">0</span>)\n}\n\n<span class=\"kw\">impl </span>DirBuilder {\n    <span class=\"doccomment\">/// Creates a new set of options with default mode/security settings for all\n    /// platforms and also non-recursive.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::fs::DirBuilder;\n    ///\n    /// let builder = DirBuilder::new();\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"dir_builder\"</span>, since = <span class=\"string\">\"1.6.0\"</span>)]\n    #[must_use]\n    </span><span class=\"kw\">pub fn </span>new() -&gt; DirBuilder {\n        DirBuilder { inner: fs_imp::DirBuilder::new(), recursive: <span class=\"bool-val\">false </span>}\n    }\n\n    <span class=\"doccomment\">/// Indicates that directories should be created recursively, creating all\n    /// parent directories. Parents that do not exist are created with the same\n    /// security and permissions settings.\n    ///\n    /// This option defaults to `false`.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use std::fs::DirBuilder;\n    ///\n    /// let mut builder = DirBuilder::new();\n    /// builder.recursive(true);\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"dir_builder\"</span>, since = <span class=\"string\">\"1.6.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>recursive(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, recursive: bool) -&gt; <span class=\"kw-2\">&amp;mut </span><span class=\"self\">Self </span>{\n        <span class=\"self\">self</span>.recursive = recursive;\n        <span class=\"self\">self\n    </span>}\n\n    <span class=\"doccomment\">/// Creates the specified directory with the options configured in this\n    /// builder.\n    ///\n    /// It is considered an error if the directory already exists unless\n    /// recursive mode is enabled.\n    ///\n    /// # Examples\n    ///\n    /// ```no_run\n    /// use std::fs::{self, DirBuilder};\n    ///\n    /// let path = \"/tmp/foo/bar/baz\";\n    /// DirBuilder::new()\n    ///     .recursive(true)\n    ///     .create(path).unwrap();\n    ///\n    /// assert!(fs::metadata(path).unwrap().is_dir());\n    /// ```\n    </span><span class=\"attr\">#[stable(feature = <span class=\"string\">\"dir_builder\"</span>, since = <span class=\"string\">\"1.6.0\"</span>)]\n    </span><span class=\"kw\">pub fn </span>create&lt;P: AsRef&lt;Path&gt;&gt;(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, path: P) -&gt; io::Result&lt;()&gt; {\n        <span class=\"self\">self</span>._create(path.as_ref())\n    }\n\n    <span class=\"kw\">fn </span>_create(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, path: <span class=\"kw-2\">&amp;</span>Path) -&gt; io::Result&lt;()&gt; {\n        <span class=\"kw\">if </span><span class=\"self\">self</span>.recursive { <span class=\"self\">self</span>.create_dir_all(path) } <span class=\"kw\">else </span>{ <span class=\"self\">self</span>.inner.mkdir(path) }\n    }\n\n    <span class=\"kw\">fn </span>create_dir_all(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, path: <span class=\"kw-2\">&amp;</span>Path) -&gt; io::Result&lt;()&gt; {\n        <span class=\"kw\">if </span>path == Path::new(<span class=\"string\">\"\"</span>) {\n            <span class=\"kw\">return </span><span class=\"prelude-val\">Ok</span>(());\n        }\n\n        <span class=\"kw\">match </span><span class=\"self\">self</span>.inner.mkdir(path) {\n            <span class=\"prelude-val\">Ok</span>(()) =&gt; <span class=\"kw\">return </span><span class=\"prelude-val\">Ok</span>(()),\n            <span class=\"prelude-val\">Err</span>(<span class=\"kw-2\">ref </span>e) <span class=\"kw\">if </span>e.kind() == io::ErrorKind::NotFound =&gt; {}\n            <span class=\"prelude-val\">Err</span>(<span class=\"kw\">_</span>) <span class=\"kw\">if </span>path.is_dir() =&gt; <span class=\"kw\">return </span><span class=\"prelude-val\">Ok</span>(()),\n            <span class=\"prelude-val\">Err</span>(e) =&gt; <span class=\"kw\">return </span><span class=\"prelude-val\">Err</span>(e),\n        }\n        <span class=\"kw\">match </span>path.parent() {\n            <span class=\"prelude-val\">Some</span>(p) =&gt; <span class=\"self\">self</span>.create_dir_all(p)<span class=\"question-mark\">?</span>,\n            <span class=\"prelude-val\">None </span>=&gt; {\n                <span class=\"kw\">return </span><span class=\"prelude-val\">Err</span>(<span class=\"macro\">io::const_io_error!</span>(\n                    io::ErrorKind::Uncategorized,\n                    <span class=\"string\">\"failed to create whole tree\"</span>,\n                ));\n            }\n        }\n        <span class=\"kw\">match </span><span class=\"self\">self</span>.inner.mkdir(path) {\n            <span class=\"prelude-val\">Ok</span>(()) =&gt; <span class=\"prelude-val\">Ok</span>(()),\n            <span class=\"prelude-val\">Err</span>(<span class=\"kw\">_</span>) <span class=\"kw\">if </span>path.is_dir() =&gt; <span class=\"prelude-val\">Ok</span>(()),\n            <span class=\"prelude-val\">Err</span>(e) =&gt; <span class=\"prelude-val\">Err</span>(e),\n        }\n    }\n}\n\n<span class=\"kw\">impl </span>AsInnerMut&lt;fs_imp::DirBuilder&gt; <span class=\"kw\">for </span>DirBuilder {\n    <span class=\"attr\">#[inline]\n    </span><span class=\"kw\">fn </span>as_inner_mut(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;mut </span>fs_imp::DirBuilder {\n        <span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>.inner\n    }\n}\n\n<span class=\"doccomment\">/// Returns `Ok(true)` if the path points at an existing entity.\n///\n/// This function will traverse symbolic links to query information about the\n/// destination file. In case of broken symbolic links this will return `Ok(false)`.\n///\n/// As opposed to the [`Path::exists`] method, this will only return `Ok(true)` or `Ok(false)`\n/// if the path was _verified_ to exist or not exist. If its existence can neither be confirmed\n/// nor denied, an `Err(_)` will be propagated instead. This can be the case if e.g. listing\n/// permission is denied on one of the parent directories.\n///\n/// Note that while this avoids some pitfalls of the `exists()` method, it still can not\n/// prevent time-of-check to time-of-use (TOCTOU) bugs. You should only use it in scenarios\n/// where those bugs are not an issue.\n///\n/// # Examples\n///\n/// ```no_run\n/// #![feature(fs_try_exists)]\n/// use std::fs;\n///\n/// assert!(!fs::try_exists(\"does_not_exist.txt\").expect(\"Can't check existence of file does_not_exist.txt\"));\n/// assert!(fs::try_exists(\"/root/secret_file.txt\").is_err());\n/// ```\n///\n/// [`Path::exists`]: crate::path::Path::exists\n</span><span class=\"comment\">// FIXME: stabilization should modify documentation of `exists()` to recommend this method\n// instead.\n</span><span class=\"attr\">#[unstable(feature = <span class=\"string\">\"fs_try_exists\"</span>, issue = <span class=\"string\">\"83186\"</span>)]\n#[inline]\n</span><span class=\"kw\">pub fn </span>try_exists&lt;P: AsRef&lt;Path&gt;&gt;(path: P) -&gt; io::Result&lt;bool&gt; {\n    fs_imp::try_exists(path.as_ref())\n}\n</code></pre></div></section></main></body></html>",
	"crawlDate": "2024-07-28T05:23:12.313Z"
}