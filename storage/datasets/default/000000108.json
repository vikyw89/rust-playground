{
	"title": "Stdin in std::io - Rust",
	"url": "https://doc.rust-lang.org/stable/std/io/struct.Stdin.html",
	"markdown": "# Stdin in std::io - Rust\n\n## Struct [std](../index.html)::[io](index.html)::[Stdin](#)\n\n1.0.0 · [source](about:blank/src/std/io/stdio.rs.html#243-245) ·\n\n```\npub struct Stdin { /* private fields */ }\n```\n\nExpand description\n\nA handle to the standard input stream of a process.\n\nEach handle is a shared reference to a global buffer of input data to this process. A handle can be `lock`’d to gain full access to [`BufRead`](trait.BufRead.html \"trait std::io::BufRead\") methods (e.g., `.lines()`). Reads to this handle are otherwise locked with respect to other reads.\n\nThis handle implements the `Read` trait, but beware that concurrent reads of `Stdin` must be executed with care.\n\nCreated by the [`io::stdin`](fn.stdin.html \"fn std::io::stdin\") method.\n\n#### [§](#note-windows-portability-considerations)Note: Windows Portability Considerations\n\nWhen operating in a console, the Windows implementation of this stream does not support non-UTF-8 byte sequences. Attempting to read bytes that are not valid UTF-8 will return an error.\n\nIn a process with a detached console, such as one using `#![windows_subsystem = \"windows\"]`, or in a child process spawned from such a process, the contained handle will be null. In such cases, the standard library’s `Read` and `Write` will do nothing and silently succeed. All other I/O operations, via the standard library or via raw Windows API calls, will fail.\n\n## [§](#examples)Examples\n\n```\nuse std::io;\n\nfn main() -> io::Result<()> {\n    let mut buffer = String::new();\n    let stdin = io::stdin(); // We get `Stdin` here.\n    stdin.read_line(&mut buffer)?;\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+mut+buffer+=+String::new();%0A++++let+stdin+=+io::stdin();+//+We+get+%60Stdin%60+here.%0A++++stdin.read_line(%26mut+buffer)?;%0A++++Ok(())%0A%7D&edition=2021)\n\n[source](about:blank/src/std/io/stdio.rs.html#342-422)[§](#impl-Stdin)\n\n1.0.0 · [source](about:blank/src/std/io/stdio.rs.html#365-369)\n\nLocks this handle to the standard input stream, returning a readable guard.\n\nThe lock is released when the returned lock goes out of scope. The returned guard also implements the [`Read`](trait.Read.html \"trait std::io::Read\") and [`BufRead`](trait.BufRead.html \"trait std::io::BufRead\") traits for accessing the underlying data.\n\n##### [§](#examples-1)Examples\n\n```\nuse std::io::{self, BufRead};\n\nfn main() -> io::Result<()> {\n    let mut buffer = String::new();\n    let stdin = io::stdin();\n    let mut handle = stdin.lock();\n\n    handle.read_line(&mut buffer)?;\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io::%7Bself,+BufRead%7D;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+mut+buffer+=+String::new();%0A++++let+stdin+=+io::stdin();%0A++++let+mut+handle+=+stdin.lock();%0A%0A++++handle.read_line(%26mut+buffer)?;%0A++++Ok(())%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/io/stdio.rs.html#398-400)\n\nLocks this handle and reads a line of input, appending it to the specified buffer.\n\nFor detailed semantics of this method, see the documentation on [`BufRead::read_line`](about:blank/trait.BufRead.html#method.read_line \"method std::io::BufRead::read_line\").\n\n##### [§](#examples-2)Examples\n\n```\nuse std::io;\n\nlet mut input = String::new();\nmatch io::stdin().read_line(&mut input) {\n    Ok(n) => {\n        println!(\"{n} bytes read\");\n        println!(\"{input}\");\n    }\n    Err(error) => println!(\"error: {error}\"),\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io;%0A++++%0A++++let+mut+input+=+String::new();%0A++++match+io::stdin().read_line(%26mut+input)+%7B%0A++++++++Ok(n)+=%3E+%7B%0A++++++++++++println!(%22%7Bn%7D+bytes+read%22);%0A++++++++++++println!(%22%7Binput%7D%22);%0A++++++++%7D%0A++++++++Err(error)+=%3E+println!(%22error:+%7Berror%7D%22),%0A++++%7D%0A%7D&edition=2021)\n\nYou can run the example one of two ways:\n\n-   Pipe some text to it, e.g., `printf foo | path/to/executable`\n-   Give it text interactively by running the executable directly, in which case it will wait for the Enter key to be pressed before continuing\n\n1.62.0 · [source](about:blank/src/std/io/stdio.rs.html#419-421)\n\nConsumes this handle and returns an iterator over input lines.\n\nFor detailed semantics of this method, see the documentation on [`BufRead::lines`](about:blank/trait.BufRead.html#method.lines \"method std::io::BufRead::lines\").\n\n##### [§](#examples-3)Examples\n\n```\nuse std::io;\n\nlet lines = io::stdin().lines();\nfor line in lines {\n    println!(\"got a line: {}\", line.unwrap());\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io;%0A++++%0A++++let+lines+=+io::stdin().lines();%0A++++for+line+in+lines+%7B%0A++++++++println!(%22got+a+line:+%7B%7D%22,+line.unwrap());%0A++++%7D%0A%7D&edition=2021)\n\n1.63.0 · [source](about:blank/src/std/os/fd/owned.rs.html#431-436)[§](#impl-AsFd-for-Stdin)\n\n1.63.0 · [source](about:blank/src/std/os/windows/io/handle.rs.html#548-553)[§](#impl-AsHandle-for-Stdin)\n\nAvailable on **Windows** only.\n\n1.21.0 · [source](about:blank/src/std/os/fd/raw.rs.html#190-195)[§](#impl-AsRawFd-for-Stdin)\n\n1.21.0 · [source](about:blank/src/std/os/windows/io/raw.rs.html#105-109)[§](#impl-AsRawHandle-for-Stdin)\n\nAvailable on **Windows** only.\n\n1.16.0 · [source](about:blank/src/std/io/stdio.rs.html#425-429)[§](#impl-Debug-for-Stdin)\n\n1.70.0 · [source](about:blank/src/std/io/stdio.rs.html#1217)[§](#impl-IsTerminal-for-Stdin)\n\n[source](about:blank/src/std/io/stdio.rs.html#1217)[§](#method.is_terminal)\n\nReturns `true` if the descriptor/handle refers to a terminal/tty. [Read more](about:blank/trait.IsTerminal.html#tymethod.is_terminal)\n\n1.78.0 · [source](about:blank/src/std/io/stdio.rs.html#461-487)[§](#impl-Read-for-%26Stdin)\n\n[source](about:blank/src/std/io/stdio.rs.html#462-464)[§](#method.read)\n\nPull some bytes from this source into the specified buffer, returning how many bytes were read. [Read more](about:blank/trait.Read.html#tymethod.read)\n\n[source](about:blank/src/std/io/stdio.rs.html#465-467)[§](#method.read_buf)\n\n🔬This is a nightly-only experimental API. (`read_buf` [#78485](https://github.com/rust-lang/rust/issues/78485))\n\nPull some bytes from this source into the specified buffer. [Read more](about:blank/trait.Read.html#method.read_buf)\n\n[source](about:blank/src/std/io/stdio.rs.html#468-470)[§](#method.read_vectored)\n\nLike `read`, except that it reads into a slice of buffers. [Read more](about:blank/trait.Read.html#method.read_vectored)\n\n[source](about:blank/src/std/io/stdio.rs.html#472-474)[§](#method.is_read_vectored)\n\n🔬This is a nightly-only experimental API. (`can_vector` [#69941](https://github.com/rust-lang/rust/issues/69941))\n\nDetermines if this `Read`er has an efficient `read_vectored` implementation. [Read more](about:blank/trait.Read.html#method.is_read_vectored)\n\n[source](about:blank/src/std/io/stdio.rs.html#475-477)[§](#method.read_to_end)\n\nRead all bytes until EOF in this source, placing them into `buf`. [Read more](about:blank/trait.Read.html#method.read_to_end)\n\n[source](about:blank/src/std/io/stdio.rs.html#478-480)[§](#method.read_to_string)\n\nRead all bytes until EOF in this source, appending them to `buf`. [Read more](about:blank/trait.Read.html#method.read_to_string)\n\n[source](about:blank/src/std/io/stdio.rs.html#481-483)[§](#method.read_exact)\n\nRead the exact number of bytes required to fill `buf`. [Read more](about:blank/trait.Read.html#method.read_exact)\n\n[source](about:blank/src/std/io/stdio.rs.html#484-486)[§](#method.read_buf_exact)\n\n🔬This is a nightly-only experimental API. (`read_buf` [#78485](https://github.com/rust-lang/rust/issues/78485))\n\nRead the exact number of bytes required to fill `cursor`. [Read more](about:blank/trait.Read.html#method.read_buf_exact)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1034-1039)[§](#method.by_ref)\n\nCreates a “by reference” adaptor for this instance of `Read`. [Read more](about:blank/trait.Read.html#method.by_ref)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1077-1082)[§](#method.bytes)\n\nTransforms this `Read` instance to an [`Iterator`](../iter/trait.Iterator.html \"trait std::iter::Iterator\") over its bytes. [Read more](about:blank/trait.Read.html#method.bytes)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1115-1120)[§](#method.chain)\n\nCreates an adapter which will chain this stream with another. [Read more](about:blank/trait.Read.html#method.chain)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1154-1159)[§](#method.take)\n\nCreates an adapter which will read at most `limit` bytes from it. [Read more](about:blank/trait.Read.html#method.take)\n\n1.0.0 · [source](about:blank/src/std/io/stdio.rs.html#432-458)[§](#impl-Read-for-Stdin)\n\n[source](about:blank/src/std/io/stdio.rs.html#433-435)[§](#method.read-1)\n\nPull some bytes from this source into the specified buffer, returning how many bytes were read. [Read more](about:blank/trait.Read.html#tymethod.read)\n\n[source](about:blank/src/std/io/stdio.rs.html#436-438)[§](#method.read_buf-1)\n\n🔬This is a nightly-only experimental API. (`read_buf` [#78485](https://github.com/rust-lang/rust/issues/78485))\n\nPull some bytes from this source into the specified buffer. [Read more](about:blank/trait.Read.html#method.read_buf)\n\n[source](about:blank/src/std/io/stdio.rs.html#439-441)[§](#method.read_vectored-1)\n\nLike `read`, except that it reads into a slice of buffers. [Read more](about:blank/trait.Read.html#method.read_vectored)\n\n[source](about:blank/src/std/io/stdio.rs.html#443-445)[§](#method.is_read_vectored-1)\n\n🔬This is a nightly-only experimental API. (`can_vector` [#69941](https://github.com/rust-lang/rust/issues/69941))\n\nDetermines if this `Read`er has an efficient `read_vectored` implementation. [Read more](about:blank/trait.Read.html#method.is_read_vectored)\n\n[source](about:blank/src/std/io/stdio.rs.html#446-448)[§](#method.read_to_end-1)\n\nRead all bytes until EOF in this source, placing them into `buf`. [Read more](about:blank/trait.Read.html#method.read_to_end)\n\n[source](about:blank/src/std/io/stdio.rs.html#449-451)[§](#method.read_to_string-1)\n\nRead all bytes until EOF in this source, appending them to `buf`. [Read more](about:blank/trait.Read.html#method.read_to_string)\n\n[source](about:blank/src/std/io/stdio.rs.html#452-454)[§](#method.read_exact-1)\n\nRead the exact number of bytes required to fill `buf`. [Read more](about:blank/trait.Read.html#method.read_exact)\n\n[source](about:blank/src/std/io/stdio.rs.html#455-457)[§](#method.read_buf_exact-1)\n\n🔬This is a nightly-only experimental API. (`read_buf` [#78485](https://github.com/rust-lang/rust/issues/78485))\n\nRead the exact number of bytes required to fill `cursor`. [Read more](about:blank/trait.Read.html#method.read_buf_exact)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1034-1039)[§](#method.by_ref-1)\n\nCreates a “by reference” adaptor for this instance of `Read`. [Read more](about:blank/trait.Read.html#method.by_ref)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1077-1082)[§](#method.bytes-1)\n\nTransforms this `Read` instance to an [`Iterator`](../iter/trait.Iterator.html \"trait std::iter::Iterator\") over its bytes. [Read more](about:blank/trait.Read.html#method.bytes)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1115-1120)[§](#method.chain-1)\n\nCreates an adapter which will chain this stream with another. [Read more](about:blank/trait.Read.html#method.chain)\n\n1.0.0 · [source](about:blank/src/std/io/mod.rs.html#1154-1159)[§](#method.take-1)\n\nCreates an adapter which will read at most `limit` bytes from it. [Read more](about:blank/trait.Read.html#method.take)\n\n[§](#impl-Freeze-for-Stdin)\n\n[§](#impl-RefUnwindSafe-for-Stdin)\n\n[§](#impl-Send-for-Stdin)\n\n[§](#impl-Sync-for-Stdin)\n\n[§](#impl-Unpin-for-Stdin)\n\n[§](#impl-UnwindSafe-for-Stdin)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[§](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[§](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[§](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[§](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[§](#method.from)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[§](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[§](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[§](#impl-TryFrom%3CU%3E-for-T)\n\n[§](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[§](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[§](#impl-TryInto%3CU%3E-for-T)\n\n[§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[§](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A handle to the standard input stream of a process.\"><title>Stdin in std::io - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Stdin</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Stdin</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.lines\">lines</a></li><li><a href=\"#method.lock\">lock</a></li><li><a href=\"#method.read_line\">read_line</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-AsFd-for-Stdin\">AsFd</a></li><li><a href=\"#impl-AsHandle-for-Stdin\">AsHandle</a></li><li><a href=\"#impl-AsRawFd-for-Stdin\">AsRawFd</a></li><li><a href=\"#impl-AsRawHandle-for-Stdin\">AsRawHandle</a></li><li><a href=\"#impl-Debug-for-Stdin\">Debug</a></li><li><a href=\"#impl-IsTerminal-for-Stdin\">IsTerminal</a></li><li><a href=\"#impl-Read-for-%26Stdin\">Read</a></li><li><a href=\"#impl-Read-for-Stdin\">Read</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-Stdin\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-Stdin\">RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-Stdin\">Send</a></li><li><a href=\"#impl-Sync-for-Stdin\">Sync</a></li><li><a href=\"#impl-Unpin-for-Stdin\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-Stdin\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::io</a></h2><h3><a href=\"index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"prelude/index.html\">prelude</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.BorrowedBuf.html\">BorrowedBuf</a></li><li><a href=\"struct.BorrowedCursor.html\">BorrowedCursor</a></li><li><a href=\"struct.BufReader.html\">BufReader</a></li><li><a href=\"struct.BufWriter.html\">BufWriter</a></li><li><a href=\"struct.Bytes.html\">Bytes</a></li><li><a href=\"struct.Chain.html\">Chain</a></li><li><a href=\"struct.Cursor.html\">Cursor</a></li><li><a href=\"struct.Empty.html\">Empty</a></li><li><a href=\"struct.Error.html\">Error</a></li><li><a href=\"struct.IntoInnerError.html\">IntoInnerError</a></li><li><a href=\"struct.IoSlice.html\">IoSlice</a></li><li><a href=\"struct.IoSliceMut.html\">IoSliceMut</a></li><li><a href=\"struct.LineWriter.html\">LineWriter</a></li><li><a href=\"struct.Lines.html\">Lines</a></li><li><a href=\"struct.Repeat.html\">Repeat</a></li><li><a href=\"struct.Sink.html\">Sink</a></li><li><a href=\"struct.Split.html\">Split</a></li><li><a href=\"struct.Stderr.html\">Stderr</a></li><li><a href=\"struct.StderrLock.html\">StderrLock</a></li><li><a href=\"struct.Stdin.html\">Stdin</a></li><li><a href=\"struct.StdinLock.html\">StdinLock</a></li><li><a href=\"struct.Stdout.html\">Stdout</a></li><li><a href=\"struct.StdoutLock.html\">StdoutLock</a></li><li><a href=\"struct.Take.html\">Take</a></li><li><a href=\"struct.WriterPanicked.html\">WriterPanicked</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.ErrorKind.html\">ErrorKind</a></li><li><a href=\"enum.SeekFrom.html\">SeekFrom</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.BufRead.html\">BufRead</a></li><li><a href=\"trait.IsTerminal.html\">IsTerminal</a></li><li><a href=\"trait.Read.html\">Read</a></li><li><a href=\"trait.Seek.html\">Seek</a></li><li><a href=\"trait.Write.html\">Write</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.copy.html\">copy</a></li><li><a href=\"fn.empty.html\">empty</a></li><li><a href=\"fn.read_to_string.html\">read_to_string</a></li><li><a href=\"fn.repeat.html\">repeat</a></li><li><a href=\"fn.sink.html\">sink</a></li><li><a href=\"fn.stderr.html\">stderr</a></li><li><a href=\"fn.stdin.html\">stdin</a></li><li><a href=\"fn.stdout.html\">stdout</a></li></ul><h3><a href=\"index.html#types\">Type Aliases</a></h3><ul class=\"block type\"><li><a href=\"type.RawOsError.html\">RawOsError</a></li><li><a href=\"type.Result.html\">Result</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">io</a>::<wbr><a class=\"struct\" href=\"#\">Stdin</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/stdio.rs.html#243-245\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct Stdin { <span class=\"comment\">/* private fields */</span> }</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A handle to the standard input stream of a process.</p>\n<p>Each handle is a shared reference to a global buffer of input data to this\nprocess. A handle can be <code>lock</code>’d to gain full access to <a href=\"trait.BufRead.html\" title=\"trait std::io::BufRead\"><code>BufRead</code></a> methods\n(e.g., <code>.lines()</code>). Reads to this handle are otherwise locked with respect\nto other reads.</p>\n<p>This handle implements the <code>Read</code> trait, but beware that concurrent reads\nof <code>Stdin</code> must be executed with care.</p>\n<p>Created by the <a href=\"fn.stdin.html\" title=\"fn std::io::stdin\"><code>io::stdin</code></a> method.</p>\n<h4 id=\"note-windows-portability-considerations\"><a class=\"doc-anchor\" href=\"#note-windows-portability-considerations\">§</a>Note: Windows Portability Considerations</h4>\n<p>When operating in a console, the Windows implementation of this stream does not support\nnon-UTF-8 byte sequences. Attempting to read bytes that are not valid UTF-8 will return\nan error.</p>\n<p>In a process with a detached console, such as one using\n<code>#![windows_subsystem = \"windows\"]</code>, or in a child process spawned from such a process,\nthe contained handle will be null. In such cases, the standard library’s <code>Read</code> and\n<code>Write</code> will do nothing and silently succeed. All other I/O operations, via the\nstandard library or via raw Windows API calls, will fail.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io;\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buffer = String::new();\n    <span class=\"kw\">let </span>stdin = io::stdin(); <span class=\"comment\">// We get `Stdin` here.\n    </span>stdin.read_line(<span class=\"kw-2\">&amp;mut </span>buffer)<span class=\"question-mark\">?</span>;\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+mut+buffer+=+String::new();%0A++++let+stdin+=+io::stdin();+//+We+get+%60Stdin%60+here.%0A++++stdin.read_line(%26mut+buffer)?;%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Stdin\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/io/stdio.rs.html#342-422\">source</a><a href=\"#impl-Stdin\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"struct.Stdin.html\" title=\"struct std::io::Stdin\">Stdin</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lock\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/stdio.rs.html#365-369\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.lock\" class=\"fn\">lock</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.StdinLock.html\" title=\"struct std::io::StdinLock\">StdinLock</a>&lt;'static&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"StdinLock<'static>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Locks this handle to the standard input stream, returning a readable\nguard.</p>\n<p>The lock is released when the returned lock goes out of scope. The\nreturned guard also implements the <a href=\"trait.Read.html\" title=\"trait std::io::Read\"><code>Read</code></a> and <a href=\"trait.BufRead.html\" title=\"trait std::io::BufRead\"><code>BufRead</code></a> traits for\naccessing the underlying data.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::{<span class=\"self\">self</span>, BufRead};\n\n<span class=\"kw\">fn </span>main() -&gt; io::Result&lt;()&gt; {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>buffer = String::new();\n    <span class=\"kw\">let </span>stdin = io::stdin();\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>handle = stdin.lock();\n\n    handle.read_line(<span class=\"kw-2\">&amp;mut </span>buffer)<span class=\"question-mark\">?</span>;\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::io::%7Bself,+BufRead%7D;%0A%0Afn+main()+-%3E+io::Result%3C()%3E+%7B%0A++++let+mut+buffer+=+String::new();%0A++++let+stdin+=+io::stdin();%0A++++let+mut+handle+=+stdin.lock();%0A%0A++++handle.read_line(%26mut+buffer)?;%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_line\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/stdio.rs.html#398-400\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.read_line\" class=\"fn\">read_line</a>(&amp;self, buf: &amp;mut <a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a>) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Locks this handle and reads a line of input, appending it to the specified buffer.</p>\n<p>For detailed semantics of this method, see the documentation on\n<a href=\"trait.BufRead.html#method.read_line\" title=\"method std::io::BufRead::read_line\"><code>BufRead::read_line</code></a>.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>input = String::new();\n<span class=\"kw\">match </span>io::stdin().read_line(<span class=\"kw-2\">&amp;mut </span>input) {\n    <span class=\"prelude-val\">Ok</span>(n) =&gt; {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"{n} bytes read\"</span>);\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"{input}\"</span>);\n    }\n    <span class=\"prelude-val\">Err</span>(error) =&gt; <span class=\"macro\">println!</span>(<span class=\"string\">\"error: {error}\"</span>),\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io;%0A++++%0A++++let+mut+input+=+String::new();%0A++++match+io::stdin().read_line(%26mut+input)+%7B%0A++++++++Ok(n)+=%3E+%7B%0A++++++++++++println!(%22%7Bn%7D+bytes+read%22);%0A++++++++++++println!(%22%7Binput%7D%22);%0A++++++++%7D%0A++++++++Err(error)+=%3E+println!(%22error:+%7Berror%7D%22),%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<p>You can run the example one of two ways:</p>\n<ul>\n<li>Pipe some text to it, e.g., <code>printf foo | path/to/executable</code></li>\n<li>Give it text interactively by running the executable directly,\nin which case it will wait for the Enter key to be pressed before\ncontinuing</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.lines\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.62.0\">1.62.0</span> · <a class=\"src\" href=\"../../src/std/io/stdio.rs.html#419-421\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.lines\" class=\"fn\">lines</a>(self) -&gt; <a class=\"struct\" href=\"struct.Lines.html\" title=\"struct std::io::Lines\">Lines</a>&lt;<a class=\"struct\" href=\"struct.StdinLock.html\" title=\"struct std::io::StdinLock\">StdinLock</a>&lt;'static&gt;&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Lines<StdinLock<'static>>\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Consumes this handle and returns an iterator over input lines.</p>\n<p>For detailed semantics of this method, see the documentation on\n<a href=\"trait.BufRead.html#method.lines\" title=\"method std::io::BufRead::lines\"><code>BufRead::lines</code></a>.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io;\n\n<span class=\"kw\">let </span>lines = io::stdin().lines();\n<span class=\"kw\">for </span>line <span class=\"kw\">in </span>lines {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"got a line: {}\"</span>, line.unwrap());\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io;%0A++++%0A++++let+lines+=+io::stdin().lines();%0A++++for+line+in+lines+%7B%0A++++++++println!(%22got+a+line:+%7B%7D%22,+line.unwrap());%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsFd-for-Stdin\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.63.0\">1.63.0</span> · <a class=\"src\" href=\"../../src/std/os/fd/owned.rs.html#431-436\">source</a></span><a href=\"#impl-AsFd-for-Stdin\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../os/fd/trait.AsFd.html\" title=\"trait std::os::fd::AsFd\">AsFd</a> for <a class=\"struct\" href=\"struct.Stdin.html\" title=\"struct std::io::Stdin\">Stdin</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_fd\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/fd/owned.rs.html#433-435\">source</a><a href=\"#method.as_fd\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/fd/trait.AsFd.html#tymethod.as_fd\" class=\"fn\">as_fd</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../os/fd/struct.BorrowedFd.html\" title=\"struct std::os::fd::BorrowedFd\">BorrowedFd</a>&lt;'_&gt;</h4></section></summary><div class=\"docblock\">Borrows the file descriptor. <a href=\"../os/fd/trait.AsFd.html#tymethod.as_fd\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsHandle-for-Stdin\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.63.0\">1.63.0</span> · <a class=\"src\" href=\"../../src/std/os/windows/io/handle.rs.html#548-553\">source</a></span><a href=\"#impl-AsHandle-for-Stdin\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../os/windows/io/trait.AsHandle.html\" title=\"trait std::os::windows::io::AsHandle\">AsHandle</a> for <a class=\"struct\" href=\"struct.Stdin.html\" title=\"struct std::io::Stdin\">Stdin</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Windows</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_handle\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/windows/io/handle.rs.html#550-552\">source</a><a href=\"#method.as_handle\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/windows/io/trait.AsHandle.html#tymethod.as_handle\" class=\"fn\">as_handle</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../os/windows/io/struct.BorrowedHandle.html\" title=\"struct std::os::windows::io::BorrowedHandle\">BorrowedHandle</a>&lt;'_&gt;</h4></section></summary><div class=\"docblock\">Borrows the handle. <a href=\"../os/windows/io/trait.AsHandle.html#tymethod.as_handle\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsRawFd-for-Stdin\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"../../src/std/os/fd/raw.rs.html#190-195\">source</a></span><a href=\"#impl-AsRawFd-for-Stdin\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../os/fd/trait.AsRawFd.html\" title=\"trait std::os::fd::AsRawFd\">AsRawFd</a> for <a class=\"struct\" href=\"struct.Stdin.html\" title=\"struct std::io::Stdin\">Stdin</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_raw_fd\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/fd/raw.rs.html#192-194\">source</a><a href=\"#method.as_raw_fd\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/fd/trait.AsRawFd.html#tymethod.as_raw_fd\" class=\"fn\">as_raw_fd</a>(&amp;self) -&gt; <a class=\"type\" href=\"../os/fd/type.RawFd.html\" title=\"type std::os::fd::RawFd\">RawFd</a></h4></section></summary><div class=\"docblock\">Extracts the raw file descriptor. <a href=\"../os/fd/trait.AsRawFd.html#tymethod.as_raw_fd\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-AsRawHandle-for-Stdin\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"../../src/std/os/windows/io/raw.rs.html#105-109\">source</a></span><a href=\"#impl-AsRawHandle-for-Stdin\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../os/windows/io/trait.AsRawHandle.html\" title=\"trait std::os::windows::io::AsRawHandle\">AsRawHandle</a> for <a class=\"struct\" href=\"struct.Stdin.html\" title=\"struct std::io::Stdin\">Stdin</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Windows</strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.as_raw_handle\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/os/windows/io/raw.rs.html#106-108\">source</a><a href=\"#method.as_raw_handle\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../os/windows/io/trait.AsRawHandle.html#tymethod.as_raw_handle\" class=\"fn\">as_raw_handle</a>(&amp;self) -&gt; <a class=\"type\" href=\"../os/windows/io/type.RawHandle.html\" title=\"type std::os::windows::io::RawHandle\">RawHandle</a></h4></section></summary><div class=\"docblock\">Extracts the raw handle. <a href=\"../os/windows/io/trait.AsRawHandle.html#tymethod.as_raw_handle\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-Stdin\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0\">1.16.0</span> · <a class=\"src\" href=\"../../src/std/io/stdio.rs.html#425-429\">source</a></span><a href=\"#impl-Debug-for-Stdin\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.Stdin.html\" title=\"struct std::io::Stdin\">Stdin</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/stdio.rs.html#426-428\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../fmt/type.Result.html\" title=\"type std::fmt::Result\">Result</a></h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-IsTerminal-for-Stdin\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"../../src/std/io/stdio.rs.html#1217\">source</a></span><a href=\"#impl-IsTerminal-for-Stdin\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.IsTerminal.html\" title=\"trait std::io::IsTerminal\">IsTerminal</a> for <a class=\"struct\" href=\"struct.Stdin.html\" title=\"struct std::io::Stdin\">Stdin</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_terminal\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/stdio.rs.html#1217\">source</a><a href=\"#method.is_terminal\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.IsTerminal.html#tymethod.is_terminal\" class=\"fn\">is_terminal</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">Returns <code>true</code> if the descriptor/handle refers to a terminal/tty. <a href=\"trait.IsTerminal.html#tymethod.is_terminal\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Read-for-%26Stdin\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.78.0\">1.78.0</span> · <a class=\"src\" href=\"../../src/std/io/stdio.rs.html#461-487\">source</a></span><a href=\"#impl-Read-for-%26Stdin\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Read.html\" title=\"trait std::io::Read\">Read</a> for &amp;<a class=\"struct\" href=\"struct.Stdin.html\" title=\"struct std::io::Stdin\">Stdin</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/stdio.rs.html#462-464\">source</a><a href=\"#method.read\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Read.html#tymethod.read\" class=\"fn\">read</a>(&amp;mut self, buf: &amp;mut [<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Pull some bytes from this source into the specified buffer, returning\nhow many bytes were read. <a href=\"trait.Read.html#tymethod.read\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_buf\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/stdio.rs.html#465-467\">source</a><a href=\"#method.read_buf\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Read.html#method.read_buf\" class=\"fn\">read_buf</a>(&amp;mut self, buf: <a class=\"struct\" href=\"struct.BorrowedCursor.html\" title=\"struct std::io::BorrowedCursor\">BorrowedCursor</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>read_buf</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/78485\">#78485</a>)</span></div></span><div class=\"docblock\">Pull some bytes from this source into the specified buffer. <a href=\"trait.Read.html#method.read_buf\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/stdio.rs.html#468-470\">source</a><a href=\"#method.read_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Read.html#method.read_vectored\" class=\"fn\">read_vectored</a>(&amp;mut self, bufs: &amp;mut [<a class=\"struct\" href=\"struct.IoSliceMut.html\" title=\"struct std::io::IoSliceMut\">IoSliceMut</a>&lt;'_&gt;]) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Like <code>read</code>, except that it reads into a slice of buffers. <a href=\"trait.Read.html#method.read_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_read_vectored\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/stdio.rs.html#472-474\">source</a><a href=\"#method.is_read_vectored\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Read.html#method.is_read_vectored\" class=\"fn\">is_read_vectored</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>can_vector</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/69941\">#69941</a>)</span></div></span><div class=\"docblock\">Determines if this <code>Read</code>er has an efficient <code>read_vectored</code>\nimplementation. <a href=\"trait.Read.html#method.is_read_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_to_end\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/stdio.rs.html#475-477\">source</a><a href=\"#method.read_to_end\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Read.html#method.read_to_end\" class=\"fn\">read_to_end</a>(&amp;mut self, buf: &amp;mut <a class=\"struct\" href=\"../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Read all bytes until EOF in this source, placing them into <code>buf</code>. <a href=\"trait.Read.html#method.read_to_end\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_to_string\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/stdio.rs.html#478-480\">source</a><a href=\"#method.read_to_string\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Read.html#method.read_to_string\" class=\"fn\">read_to_string</a>(&amp;mut self, buf: &amp;mut <a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a>) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Read all bytes until EOF in this source, appending them to <code>buf</code>. <a href=\"trait.Read.html#method.read_to_string\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_exact\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/stdio.rs.html#481-483\">source</a><a href=\"#method.read_exact\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Read.html#method.read_exact\" class=\"fn\">read_exact</a>(&amp;mut self, buf: &amp;mut [<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\">Read the exact number of bytes required to fill <code>buf</code>. <a href=\"trait.Read.html#method.read_exact\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_buf_exact\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/stdio.rs.html#484-486\">source</a><a href=\"#method.read_buf_exact\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Read.html#method.read_buf_exact\" class=\"fn\">read_buf_exact</a>(&amp;mut self, cursor: <a class=\"struct\" href=\"struct.BorrowedCursor.html\" title=\"struct std::io::BorrowedCursor\">BorrowedCursor</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>read_buf</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/78485\">#78485</a>)</span></div></span><div class=\"docblock\">Read the exact number of bytes required to fill <code>cursor</code>. <a href=\"trait.Read.html#method.read_buf_exact\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.by_ref\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1034-1039\">source</a></span><a href=\"#method.by_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Read.html#method.by_ref\" class=\"fn\">by_ref</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut Self</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates a “by reference” adaptor for this instance of <code>Read</code>. <a href=\"trait.Read.html#method.by_ref\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bytes\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1077-1082\">source</a></span><a href=\"#method.bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Read.html#method.bytes\" class=\"fn\">bytes</a>(self) -&gt; <a class=\"struct\" href=\"struct.Bytes.html\" title=\"struct std::io::Bytes\">Bytes</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Bytes<Self>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Transforms this <code>Read</code> instance to an <a href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\"><code>Iterator</code></a> over its bytes. <a href=\"trait.Read.html#method.bytes\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.chain\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1115-1120\">source</a></span><a href=\"#method.chain\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Read.html#method.chain\" class=\"fn\">chain</a>&lt;R: <a class=\"trait\" href=\"trait.Read.html\" title=\"trait std::io::Read\">Read</a>&gt;(self, next: R) -&gt; <a class=\"struct\" href=\"struct.Chain.html\" title=\"struct std::io::Chain\">Chain</a>&lt;Self, R&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Chain<Self, R>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates an adapter which will chain this stream with another. <a href=\"trait.Read.html#method.chain\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.take\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1154-1159\">source</a></span><a href=\"#method.take\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Read.html#method.take\" class=\"fn\">take</a>(self, limit: <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"struct.Take.html\" title=\"struct std::io::Take\">Take</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Take<Self>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates an adapter which will read at most <code>limit</code> bytes from it. <a href=\"trait.Read.html#method.take\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Read-for-Stdin\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/stdio.rs.html#432-458\">source</a></span><a href=\"#impl-Read-for-Stdin\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Read.html\" title=\"trait std::io::Read\">Read</a> for <a class=\"struct\" href=\"struct.Stdin.html\" title=\"struct std::io::Stdin\">Stdin</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/stdio.rs.html#433-435\">source</a><a href=\"#method.read-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Read.html#tymethod.read\" class=\"fn\">read</a>(&amp;mut self, buf: &amp;mut [<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Pull some bytes from this source into the specified buffer, returning\nhow many bytes were read. <a href=\"trait.Read.html#tymethod.read\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_buf-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/stdio.rs.html#436-438\">source</a><a href=\"#method.read_buf-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Read.html#method.read_buf\" class=\"fn\">read_buf</a>(&amp;mut self, buf: <a class=\"struct\" href=\"struct.BorrowedCursor.html\" title=\"struct std::io::BorrowedCursor\">BorrowedCursor</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>read_buf</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/78485\">#78485</a>)</span></div></span><div class=\"docblock\">Pull some bytes from this source into the specified buffer. <a href=\"trait.Read.html#method.read_buf\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_vectored-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/stdio.rs.html#439-441\">source</a><a href=\"#method.read_vectored-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Read.html#method.read_vectored\" class=\"fn\">read_vectored</a>(&amp;mut self, bufs: &amp;mut [<a class=\"struct\" href=\"struct.IoSliceMut.html\" title=\"struct std::io::IoSliceMut\">IoSliceMut</a>&lt;'_&gt;]) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Like <code>read</code>, except that it reads into a slice of buffers. <a href=\"trait.Read.html#method.read_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_read_vectored-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/stdio.rs.html#443-445\">source</a><a href=\"#method.is_read_vectored-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Read.html#method.is_read_vectored\" class=\"fn\">is_read_vectored</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>can_vector</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/69941\">#69941</a>)</span></div></span><div class=\"docblock\">Determines if this <code>Read</code>er has an efficient <code>read_vectored</code>\nimplementation. <a href=\"trait.Read.html#method.is_read_vectored\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_to_end-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/stdio.rs.html#446-448\">source</a><a href=\"#method.read_to_end-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Read.html#method.read_to_end\" class=\"fn\">read_to_end</a>(&amp;mut self, buf: &amp;mut <a class=\"struct\" href=\"../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Read all bytes until EOF in this source, placing them into <code>buf</code>. <a href=\"trait.Read.html#method.read_to_end\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_to_string-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/stdio.rs.html#449-451\">source</a><a href=\"#method.read_to_string-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Read.html#method.read_to_string\" class=\"fn\">read_to_string</a>(&amp;mut self, buf: &amp;mut <a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a>) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\">Read all bytes until EOF in this source, appending them to <code>buf</code>. <a href=\"trait.Read.html#method.read_to_string\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_exact-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/stdio.rs.html#452-454\">source</a><a href=\"#method.read_exact-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Read.html#method.read_exact\" class=\"fn\">read_exact</a>(&amp;mut self, buf: &amp;mut [<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\">Read the exact number of bytes required to fill <code>buf</code>. <a href=\"trait.Read.html#method.read_exact\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.read_buf_exact-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/io/stdio.rs.html#455-457\">source</a><a href=\"#method.read_buf_exact-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Read.html#method.read_buf_exact\" class=\"fn\">read_buf_exact</a>(&amp;mut self, cursor: <a class=\"struct\" href=\"struct.BorrowedCursor.html\" title=\"struct std::io::BorrowedCursor\">BorrowedCursor</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>read_buf</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/78485\">#78485</a>)</span></div></span><div class=\"docblock\">Read the exact number of bytes required to fill <code>cursor</code>. <a href=\"trait.Read.html#method.read_buf_exact\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.by_ref-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1034-1039\">source</a></span><a href=\"#method.by_ref-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Read.html#method.by_ref\" class=\"fn\">by_ref</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut Self</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates a “by reference” adaptor for this instance of <code>Read</code>. <a href=\"trait.Read.html#method.by_ref\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.bytes-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1077-1082\">source</a></span><a href=\"#method.bytes-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Read.html#method.bytes\" class=\"fn\">bytes</a>(self) -&gt; <a class=\"struct\" href=\"struct.Bytes.html\" title=\"struct std::io::Bytes\">Bytes</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Bytes<Self>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Transforms this <code>Read</code> instance to an <a href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\"><code>Iterator</code></a> over its bytes. <a href=\"trait.Read.html#method.bytes\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.chain-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1115-1120\">source</a></span><a href=\"#method.chain-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Read.html#method.chain\" class=\"fn\">chain</a>&lt;R: <a class=\"trait\" href=\"trait.Read.html\" title=\"trait std::io::Read\">Read</a>&gt;(self, next: R) -&gt; <a class=\"struct\" href=\"struct.Chain.html\" title=\"struct std::io::Chain\">Chain</a>&lt;Self, R&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Chain<Self, R>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates an adapter which will chain this stream with another. <a href=\"trait.Read.html#method.chain\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.take-1\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/mod.rs.html#1154-1159\">source</a></span><a href=\"#method.take-1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"trait.Read.html#method.take\" class=\"fn\">take</a>(self, limit: <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"struct.Take.html\" title=\"struct std::io::Take\">Take</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Take<Self>\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\">Creates an adapter which will read at most <code>limit</code> bytes from it. <a href=\"trait.Read.html#method.take\">Read more</a></div></details></div></details></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-Stdin\" class=\"impl\"><a href=\"#impl-Freeze-for-Stdin\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.Stdin.html\" title=\"struct std::io::Stdin\">Stdin</a></h3></section><section id=\"impl-RefUnwindSafe-for-Stdin\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-Stdin\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.Stdin.html\" title=\"struct std::io::Stdin\">Stdin</a></h3></section><section id=\"impl-Send-for-Stdin\" class=\"impl\"><a href=\"#impl-Send-for-Stdin\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.Stdin.html\" title=\"struct std::io::Stdin\">Stdin</a></h3></section><section id=\"impl-Sync-for-Stdin\" class=\"impl\"><a href=\"#impl-Sync-for-Stdin\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.Stdin.html\" title=\"struct std::io::Stdin\">Stdin</a></h3></section><section id=\"impl-Unpin-for-Stdin\" class=\"impl\"><a href=\"#impl-Unpin-for-Stdin\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.Stdin.html\" title=\"struct std::io::Stdin\">Stdin</a></h3></section><section id=\"impl-UnwindSafe-for-Stdin\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-Stdin\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.Stdin.html\" title=\"struct std::io::Stdin\">Stdin</a></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div><script type=\"text/json\" id=\"notable-traits-data\">{\"Bytes<Self>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"struct.Bytes.html\\\" title=\\\"struct std::io::Bytes\\\">Bytes</a>&lt;R&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;R: <a class=\\\"trait\\\" href=\\\"trait.Read.html\\\" title=\\\"trait std::io::Read\\\">Read</a>&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"struct.Bytes.html\\\" title=\\\"struct std::io::Bytes\\\">Bytes</a>&lt;R&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"type\\\" href=\\\"type.Result.html\\\" title=\\\"type std::io::Result\\\">Result</a>&lt;<a class=\\\"primitive\\\" href=\\\"../primitive.u8.html\\\">u8</a>&gt;;</div>\",\"Chain<Self, R>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"struct.Chain.html\\\" title=\\\"struct std::io::Chain\\\">Chain</a>&lt;T, U&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;T: <a class=\\\"trait\\\" href=\\\"trait.Read.html\\\" title=\\\"trait std::io::Read\\\">Read</a>, U: <a class=\\\"trait\\\" href=\\\"trait.Read.html\\\" title=\\\"trait std::io::Read\\\">Read</a>&gt; <a class=\\\"trait\\\" href=\\\"trait.Read.html\\\" title=\\\"trait std::io::Read\\\">Read</a> for <a class=\\\"struct\\\" href=\\\"struct.Chain.html\\\" title=\\\"struct std::io::Chain\\\">Chain</a>&lt;T, U&gt;</div>\",\"Lines<StdinLock<'static>>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"struct.Lines.html\\\" title=\\\"struct std::io::Lines\\\">Lines</a>&lt;B&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;B: <a class=\\\"trait\\\" href=\\\"trait.BufRead.html\\\" title=\\\"trait std::io::BufRead\\\">BufRead</a>&gt; <a class=\\\"trait\\\" href=\\\"../iter/trait.Iterator.html\\\" title=\\\"trait std::iter::Iterator\\\">Iterator</a> for <a class=\\\"struct\\\" href=\\\"struct.Lines.html\\\" title=\\\"struct std::io::Lines\\\">Lines</a>&lt;B&gt;</div><div class=\\\"where\\\">    type <a href=\\\"../iter/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\">Item</a> = <a class=\\\"type\\\" href=\\\"type.Result.html\\\" title=\\\"type std::io::Result\\\">Result</a>&lt;<a class=\\\"struct\\\" href=\\\"../string/struct.String.html\\\" title=\\\"struct std::string::String\\\">String</a>&gt;;</div>\",\"StdinLock<'static>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"struct.StdinLock.html\\\" title=\\\"struct std::io::StdinLock\\\">StdinLock</a>&lt;'_&gt;</code></h3><pre><code><div class=\\\"where\\\">impl <a class=\\\"trait\\\" href=\\\"trait.Read.html\\\" title=\\\"trait std::io::Read\\\">Read</a> for <a class=\\\"struct\\\" href=\\\"struct.StdinLock.html\\\" title=\\\"struct std::io::StdinLock\\\">StdinLock</a>&lt;'_&gt;</div>\",\"Take<Self>\":\"<h3>Notable traits for <code><a class=\\\"struct\\\" href=\\\"struct.Take.html\\\" title=\\\"struct std::io::Take\\\">Take</a>&lt;T&gt;</code></h3><pre><code><div class=\\\"where\\\">impl&lt;T: <a class=\\\"trait\\\" href=\\\"trait.Read.html\\\" title=\\\"trait std::io::Read\\\">Read</a>&gt; <a class=\\\"trait\\\" href=\\\"trait.Read.html\\\" title=\\\"trait std::io::Read\\\">Read</a> for <a class=\\\"struct\\\" href=\\\"struct.Take.html\\\" title=\\\"struct std::io::Take\\\">Take</a>&lt;T&gt;</div>\"}</script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:08:38.117Z"
}