{
	"title": "Ord in std::cmp - Rust",
	"url": "https://doc.rust-lang.org/stable/std/cmp/trait.Ord.html",
	"markdown": "# Ord in std::cmp - Rust\n\n## Trait [std](../index.html)::[cmp](index.html)::[Ord](#)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#822) ·\n\n```\npub trait Ord: Eq + PartialOrd {\n    // Required method\n    fn cmp(&self, other: &Self) -> Ordering;\n\n    // Provided methods\n    fn max(self, other: Self) -> Self\n       where Self: Sized { ... }\n    fn min(self, other: Self) -> Self\n       where Self: Sized { ... }\n    fn clamp(self, min: Self, max: Self) -> Self\n       where Self: Sized + PartialOrd { ... }\n}\n```\n\nExpand description\n\nTrait for types that form a [total order](https://en.wikipedia.org/wiki/Total_order).\n\nImplementations must be consistent with the [`PartialOrd`](trait.PartialOrd.html \"trait std::cmp::PartialOrd\") implementation, and ensure `max`, `min`, and `clamp` are consistent with `cmp`:\n\n-   `partial_cmp(a, b) == Some(cmp(a, b))`.\n-   `max(a, b) == max_by(a, b, cmp)` (ensured by the default implementation).\n-   `min(a, b) == min_by(a, b, cmp)` (ensured by the default implementation).\n-   For `a.clamp(min, max)`, see the [method docs](#method.clamp) (ensured by the default implementation).\n\nIt’s easy to accidentally make `cmp` and `partial_cmp` disagree by deriving some of the traits and manually implementing others.\n\nViolating these requirements is a logic error. The behavior resulting from a logic error is not specified, but users of the trait must ensure that such logic errors do _not_ result in undefined behavior. This means that `unsafe` code **must not** rely on the correctness of these methods.\n\n### [§](#corollaries)Corollaries\n\nFrom the above and the requirements of `PartialOrd`, it follows that for all `a`, `b` and `c`:\n\n-   exactly one of `a < b`, `a == b` or `a > b` is true; and\n-   `<` is transitive: `a < b` and `b < c` implies `a < c`. The same must hold for both `==` and `>`.\n\nMathematically speaking, the `<` operator defines a strict [weak order](https://en.wikipedia.org/wiki/Weak_ordering). In cases where `==` conforms to mathematical equality, it also defines a strict [total order](https://en.wikipedia.org/wiki/Total_order).\n\n### [§](#derivable)Derivable\n\nThis trait can be used with `#[derive]`.\n\nWhen `derive`d on structs, it will produce a [lexicographic](https://en.wikipedia.org/wiki/Lexicographic_order) ordering based on the top-to-bottom declaration order of the struct’s members.\n\nWhen `derive`d on enums, variants are ordered primarily by their discriminants. Secondarily, they are ordered by their fields. By default, the discriminant is smallest for variants at the top, and largest for variants at the bottom. Here’s an example:\n\n```\n#[derive(PartialEq, Eq, PartialOrd, Ord)]\nenum E {\n    Top,\n    Bottom,\n}\n\nassert!(E::Top < E::Bottom);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++%23%5Bderive(PartialEq,+Eq,+PartialOrd,+Ord)%5D%0A++++enum+E+%7B%0A++++++++Top,%0A++++++++Bottom,%0A++++%7D%0A++++%0A++++assert!(E::Top+%3C+E::Bottom);%0A%7D&edition=2021)\n\nHowever, manually setting the discriminants can override this default behavior:\n\n```\n#[derive(PartialEq, Eq, PartialOrd, Ord)]\nenum E {\n    Top = 2,\n    Bottom = 1,\n}\n\nassert!(E::Bottom < E::Top);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++%23%5Bderive(PartialEq,+Eq,+PartialOrd,+Ord)%5D%0A++++enum+E+%7B%0A++++++++Top+=+2,%0A++++++++Bottom+=+1,%0A++++%7D%0A++++%0A++++assert!(E::Bottom+%3C+E::Top);%0A%7D&edition=2021)\n\n### [§](#lexicographical-comparison)Lexicographical comparison\n\nLexicographical comparison is an operation with the following properties:\n\n-   Two sequences are compared element by element.\n-   The first mismatching element defines which sequence is lexicographically less or greater than the other.\n-   If one sequence is a prefix of another, the shorter sequence is lexicographically less than the other.\n-   If two sequences have equivalent elements and are of the same length, then the sequences are lexicographically equal.\n-   An empty sequence is lexicographically less than any non-empty sequence.\n-   Two empty sequences are lexicographically equal.\n\n### [§](#how-can-i-implement-ord)How can I implement `Ord`?\n\n`Ord` requires that the type also be [`PartialOrd`](trait.PartialOrd.html \"trait std::cmp::PartialOrd\") and [`Eq`](trait.Eq.html \"trait std::cmp::Eq\") (which requires [`PartialEq`](trait.PartialEq.html \"trait std::cmp::PartialEq\")).\n\nThen you must define an implementation for [`cmp`](about:blank/trait.Ord.html#tymethod.cmp \"method std::cmp::Ord::cmp\"). You may find it useful to use [`cmp`](about:blank/trait.Ord.html#tymethod.cmp \"method std::cmp::Ord::cmp\") on your type’s fields.\n\nHere’s an example where you want to sort people by height only, disregarding `id` and `name`:\n\n```\nuse std::cmp::Ordering;\n\n#[derive(Eq)]\nstruct Person {\n    id: u32,\n    name: String,\n    height: u32,\n}\n\nimpl Ord for Person {\n    fn cmp(&self, other: &Self) -> Ordering {\n        self.height.cmp(&other.height)\n    }\n}\n\nimpl PartialOrd for Person {\n    fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n        Some(self.cmp(other))\n    }\n}\n\nimpl PartialEq for Person {\n    fn eq(&self, other: &Self) -> bool {\n        self.height == other.height\n    }\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cmp::Ordering;%0A++++%0A++++%23%5Bderive(Eq)%5D%0A++++struct+Person+%7B%0A++++++++id:+u32,%0A++++++++name:+String,%0A++++++++height:+u32,%0A++++%7D%0A++++%0A++++impl+Ord+for+Person+%7B%0A++++++++fn+cmp(%26self,+other:+%26Self)+-%3E+Ordering+%7B%0A++++++++++++self.height.cmp(%26other.height)%0A++++++++%7D%0A++++%7D%0A++++%0A++++impl+PartialOrd+for+Person+%7B%0A++++++++fn+partial_cmp(%26self,+other:+%26Self)+-%3E+Option%3COrdering%3E+%7B%0A++++++++++++Some(self.cmp(other))%0A++++++++%7D%0A++++%7D%0A++++%0A++++impl+PartialEq+for+Person+%7B%0A++++++++fn+eq(%26self,+other:+%26Self)+-%3E+bool+%7B%0A++++++++++++self.height+==+other.height%0A++++++++%7D%0A++++%7D%0A%7D&edition=2021)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#840)\n\nThis method returns an [`Ordering`](enum.Ordering.html \"enum std::cmp::Ordering\") between `self` and `other`.\n\nBy convention, `self.cmp(&other)` returns the ordering matching the expression `self <operator> other` if true.\n\n##### [§](#examples)Examples\n\n```\nuse std::cmp::Ordering;\n\nassert_eq!(5.cmp(&10), Ordering::Less);\nassert_eq!(10.cmp(&5), Ordering::Greater);\nassert_eq!(5.cmp(&5), Ordering::Equal);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cmp::Ordering;%0A++++%0A++++assert_eq!(5.cmp(%2610),+Ordering::Less);%0A++++assert_eq!(10.cmp(%265),+Ordering::Greater);%0A++++assert_eq!(5.cmp(%265),+Ordering::Equal);%0A%7D&edition=2021)\n\n1.21.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#856-858)\n\nCompares and returns the maximum of two values.\n\nReturns the second argument if the comparison determines them to be equal.\n\n##### [§](#examples-1)Examples\n\n```\nassert_eq!(1.max(2), 2);\nassert_eq!(2.max(2), 2);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(1.max(2),+2);%0A++++assert_eq!(2.max(2),+2);%0A%7D&edition=2021)\n\n1.21.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#877-879)\n\nCompares and returns the minimum of two values.\n\nReturns the first argument if the comparison determines them to be equal.\n\n##### [§](#examples-2)Examples\n\n```\nassert_eq!(1.min(2), 1);\nassert_eq!(2.min(2), 2);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(1.min(2),+1);%0A++++assert_eq!(2.min(2),+2);%0A%7D&edition=2021)\n\n1.50.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#903-906)\n\nRestrict a value to a certain interval.\n\nReturns `max` if `self` is greater than `max`, and `min` if `self` is less than `min`. Otherwise this returns `self`.\n\n##### [§](#panics)Panics\n\nPanics if `min > max`.\n\n##### [§](#examples-3)Examples\n\n```\nassert_eq!((-3).clamp(-2, 1), -2);\nassert_eq!(0.clamp(-2, 1), 0);\nassert_eq!(2.clamp(-2, 1), 1);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!((-3).clamp(-2,+1),+-2);%0A++++assert_eq!(0.clamp(-2,+1),+0);%0A++++assert_eq!(2.clamp(-2,+1),+1);%0A%7D&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Trait for types that form a total order.\"><title>Ord in std::cmp - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc trait\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Ord</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Ord</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#required-methods\">Required Methods</a></h3><ul class=\"block\"><li><a href=\"#tymethod.cmp\">cmp</a></li></ul><h3><a href=\"#provided-methods\">Provided Methods</a></h3><ul class=\"block\"><li><a href=\"#method.clamp\">clamp</a></li><li><a href=\"#method.max\">max</a></li><li><a href=\"#method.min\">min</a></li></ul><h3><a href=\"#object-safety\">Object Safety</a></h3><h3><a href=\"#implementors\">Implementors</a></h3></section><h2><a href=\"index.html\">In std::cmp</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Reverse.html\">Reverse</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.Ordering.html\">Ordering</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.Eq.html\">Eq</a></li><li><a href=\"trait.Ord.html\">Ord</a></li><li><a href=\"trait.PartialEq.html\">PartialEq</a></li><li><a href=\"trait.PartialOrd.html\">PartialOrd</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.max.html\">max</a></li><li><a href=\"fn.max_by.html\">max_by</a></li><li><a href=\"fn.max_by_key.html\">max_by_key</a></li><li><a href=\"fn.min.html\">min</a></li><li><a href=\"fn.min_by.html\">min_by</a></li><li><a href=\"fn.min_by_key.html\">min_by_key</a></li><li><a href=\"fn.minmax.html\">minmax</a></li><li><a href=\"fn.minmax_by.html\">minmax_by</a></li><li><a href=\"fn.minmax_by_key.html\">minmax_by_key</a></li></ul><h3><a href=\"index.html#derives\">Derive Macros</a></h3><ul class=\"block derive\"><li><a href=\"derive.Eq.html\">Eq</a></li><li><a href=\"derive.Ord.html\">Ord</a></li><li><a href=\"derive.PartialEq.html\">PartialEq</a></li><li><a href=\"derive.PartialOrd.html\">PartialOrd</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Trait <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">cmp</a>::<wbr><a class=\"trait\" href=\"#\">Ord</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#822\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub trait Ord: <a class=\"trait\" href=\"trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a> {\n    // Required method\n    fn <a href=\"#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Self</a>) -&gt; <a class=\"enum\" href=\"enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a>;\n\n    // Provided methods\n    fn <a href=\"#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self\n       <span class=\"where\">where Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a></span> { ... }\n<span class=\"item-spacer\"></span>    fn <a href=\"#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self\n       <span class=\"where\">where Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a></span> { ... }\n<span class=\"item-spacer\"></span>    fn <a href=\"#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self\n       <span class=\"where\">where Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a></span> { ... }\n}</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Trait for types that form a <a href=\"https://en.wikipedia.org/wiki/Total_order\">total order</a>.</p>\n<p>Implementations must be consistent with the <a href=\"trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\"><code>PartialOrd</code></a> implementation, and ensure\n<code>max</code>, <code>min</code>, and <code>clamp</code> are consistent with <code>cmp</code>:</p>\n<ul>\n<li><code>partial_cmp(a, b) == Some(cmp(a, b))</code>.</li>\n<li><code>max(a, b) == max_by(a, b, cmp)</code> (ensured by the default implementation).</li>\n<li><code>min(a, b) == min_by(a, b, cmp)</code> (ensured by the default implementation).</li>\n<li>For <code>a.clamp(min, max)</code>, see the <a href=\"#method.clamp\">method docs</a>\n(ensured by the default implementation).</li>\n</ul>\n<p>It’s easy to accidentally make <code>cmp</code> and <code>partial_cmp</code> disagree by\nderiving some of the traits and manually implementing others.</p>\n<p>Violating these requirements is a logic error. The behavior resulting from a logic error is not\nspecified, but users of the trait must ensure that such logic errors do <em>not</em> result in\nundefined behavior. This means that <code>unsafe</code> code <strong>must not</strong> rely on the correctness of these\nmethods.</p>\n<h3 id=\"corollaries\"><a class=\"doc-anchor\" href=\"#corollaries\">§</a>Corollaries</h3>\n<p>From the above and the requirements of <code>PartialOrd</code>, it follows that for\nall <code>a</code>, <code>b</code> and <code>c</code>:</p>\n<ul>\n<li>exactly one of <code>a &lt; b</code>, <code>a == b</code> or <code>a &gt; b</code> is true; and</li>\n<li><code>&lt;</code> is transitive: <code>a &lt; b</code> and <code>b &lt; c</code> implies <code>a &lt; c</code>. The same must hold for both <code>==</code> and <code>&gt;</code>.</li>\n</ul>\n<p>Mathematically speaking, the <code>&lt;</code> operator defines a strict <a href=\"https://en.wikipedia.org/wiki/Weak_ordering\">weak order</a>. In\ncases where <code>==</code> conforms to mathematical equality, it also defines a\nstrict <a href=\"https://en.wikipedia.org/wiki/Total_order\">total order</a>.</p>\n<h3 id=\"derivable\"><a class=\"doc-anchor\" href=\"#derivable\">§</a>Derivable</h3>\n<p>This trait can be used with <code>#[derive]</code>.</p>\n<p>When <code>derive</code>d on structs, it will produce a\n<a href=\"https://en.wikipedia.org/wiki/Lexicographic_order\">lexicographic</a> ordering\nbased on the top-to-bottom declaration order of the struct’s members.</p>\n<p>When <code>derive</code>d on enums, variants are ordered primarily by their discriminants.\nSecondarily, they are ordered by their fields.\nBy default, the discriminant is smallest for variants at the top, and\nlargest for variants at the bottom. Here’s an example:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#[derive(PartialEq, Eq, PartialOrd, Ord)]\n</span><span class=\"kw\">enum </span>E {\n    Top,\n    Bottom,\n}\n\n<span class=\"macro\">assert!</span>(E::Top &lt; E::Bottom);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++%23%5Bderive(PartialEq,+Eq,+PartialOrd,+Ord)%5D%0A++++enum+E+%7B%0A++++++++Top,%0A++++++++Bottom,%0A++++%7D%0A++++%0A++++assert!(E::Top+%3C+E::Bottom);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>However, manually setting the discriminants can override this default\nbehavior:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#[derive(PartialEq, Eq, PartialOrd, Ord)]\n</span><span class=\"kw\">enum </span>E {\n    Top = <span class=\"number\">2</span>,\n    Bottom = <span class=\"number\">1</span>,\n}\n\n<span class=\"macro\">assert!</span>(E::Bottom &lt; E::Top);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++%23%5Bderive(PartialEq,+Eq,+PartialOrd,+Ord)%5D%0A++++enum+E+%7B%0A++++++++Top+=+2,%0A++++++++Bottom+=+1,%0A++++%7D%0A++++%0A++++assert!(E::Bottom+%3C+E::Top);%0A%7D&amp;edition=2021\">Run</a></div>\n<h3 id=\"lexicographical-comparison\"><a class=\"doc-anchor\" href=\"#lexicographical-comparison\">§</a>Lexicographical comparison</h3>\n<p>Lexicographical comparison is an operation with the following properties:</p>\n<ul>\n<li>Two sequences are compared element by element.</li>\n<li>The first mismatching element defines which sequence is lexicographically less or greater than the other.</li>\n<li>If one sequence is a prefix of another, the shorter sequence is lexicographically less than the other.</li>\n<li>If two sequences have equivalent elements and are of the same length, then the sequences are lexicographically equal.</li>\n<li>An empty sequence is lexicographically less than any non-empty sequence.</li>\n<li>Two empty sequences are lexicographically equal.</li>\n</ul>\n<h3 id=\"how-can-i-implement-ord\"><a class=\"doc-anchor\" href=\"#how-can-i-implement-ord\">§</a>How can I implement <code>Ord</code>?</h3>\n<p><code>Ord</code> requires that the type also be <a href=\"trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\"><code>PartialOrd</code></a> and <a href=\"trait.Eq.html\" title=\"trait std::cmp::Eq\"><code>Eq</code></a> (which requires <a href=\"trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\"><code>PartialEq</code></a>).</p>\n<p>Then you must define an implementation for <a href=\"trait.Ord.html#tymethod.cmp\" title=\"method std::cmp::Ord::cmp\"><code>cmp</code></a>. You may find it useful to use\n<a href=\"trait.Ord.html#tymethod.cmp\" title=\"method std::cmp::Ord::cmp\"><code>cmp</code></a> on your type’s fields.</p>\n<p>Here’s an example where you want to sort people by height only, disregarding <code>id</code>\nand <code>name</code>:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cmp::Ordering;\n\n<span class=\"attr\">#[derive(Eq)]\n</span><span class=\"kw\">struct </span>Person {\n    id: u32,\n    name: String,\n    height: u32,\n}\n\n<span class=\"kw\">impl </span>Ord <span class=\"kw\">for </span>Person {\n    <span class=\"kw\">fn </span>cmp(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, other: <span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>) -&gt; Ordering {\n        <span class=\"self\">self</span>.height.cmp(<span class=\"kw-2\">&amp;</span>other.height)\n    }\n}\n\n<span class=\"kw\">impl </span>PartialOrd <span class=\"kw\">for </span>Person {\n    <span class=\"kw\">fn </span>partial_cmp(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, other: <span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;Ordering&gt; {\n        <span class=\"prelude-val\">Some</span>(<span class=\"self\">self</span>.cmp(other))\n    }\n}\n\n<span class=\"kw\">impl </span>PartialEq <span class=\"kw\">for </span>Person {\n    <span class=\"kw\">fn </span>eq(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, other: <span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>) -&gt; bool {\n        <span class=\"self\">self</span>.height == other.height\n    }\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cmp::Ordering;%0A++++%0A++++%23%5Bderive(Eq)%5D%0A++++struct+Person+%7B%0A++++++++id:+u32,%0A++++++++name:+String,%0A++++++++height:+u32,%0A++++%7D%0A++++%0A++++impl+Ord+for+Person+%7B%0A++++++++fn+cmp(%26self,+other:+%26Self)+-%3E+Ordering+%7B%0A++++++++++++self.height.cmp(%26other.height)%0A++++++++%7D%0A++++%7D%0A++++%0A++++impl+PartialOrd+for+Person+%7B%0A++++++++fn+partial_cmp(%26self,+other:+%26Self)+-%3E+Option%3COrdering%3E+%7B%0A++++++++++++Some(self.cmp(other))%0A++++++++%7D%0A++++%7D%0A++++%0A++++impl+PartialEq+for+Person+%7B%0A++++++++fn+eq(%26self,+other:+%26Self)+-%3E+bool+%7B%0A++++++++++++self.height+==+other.height%0A++++++++%7D%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"required-methods\" class=\"section-header\">Required Methods<a href=\"#required-methods\" class=\"anchor\">§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.cmp\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#840\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Self</a>) -&gt; <a class=\"enum\" href=\"enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\"><p>This method returns an <a href=\"enum.Ordering.html\" title=\"enum std::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>.</p>\n<p>By convention, <code>self.cmp(&amp;other)</code> returns the ordering matching the expression\n<code>self &lt;operator&gt; other</code> if true.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cmp::Ordering;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">5</span>.cmp(<span class=\"kw-2\">&amp;</span><span class=\"number\">10</span>), Ordering::Less);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">10</span>.cmp(<span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>), Ordering::Greater);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">5</span>.cmp(<span class=\"kw-2\">&amp;</span><span class=\"number\">5</span>), Ordering::Equal);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::cmp::Ordering;%0A++++%0A++++assert_eq!(5.cmp(%2610),+Ordering::Less);%0A++++assert_eq!(10.cmp(%265),+Ordering::Greater);%0A++++assert_eq!(5.cmp(%265),+Ordering::Equal);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div><h2 id=\"provided-methods\" class=\"section-header\">Provided Methods<a href=\"#provided-methods\" class=\"anchor\">§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.max\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#856-858\">source</a></span><h4 class=\"code-header\">fn <a href=\"#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Compares and returns the maximum of two values.</p>\n<p>Returns the second argument if the comparison determines them to be equal.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1</span>.max(<span class=\"number\">2</span>), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">2</span>.max(<span class=\"number\">2</span>), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(1.max(2),+2);%0A++++assert_eq!(2.max(2),+2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.min\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#877-879\">source</a></span><h4 class=\"code-header\">fn <a href=\"#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Compares and returns the minimum of two values.</p>\n<p>Returns the first argument if the comparison determines them to be equal.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1</span>.min(<span class=\"number\">2</span>), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">2</span>.min(<span class=\"number\">2</span>), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!(1.min(2),+1);%0A++++assert_eq!(2.min(2),+2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clamp\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#903-906\">source</a></span><h4 class=\"code-header\">fn <a href=\"#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"trait.PartialOrd.html\" title=\"trait std::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class=\"docblock\"><p>Restrict a value to a certain interval.</p>\n<p>Returns <code>max</code> if <code>self</code> is greater than <code>max</code>, and <code>min</code> if <code>self</code> is\nless than <code>min</code>. Otherwise this returns <code>self</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>min &gt; max</code>.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((-<span class=\"number\">3</span>).clamp(-<span class=\"number\">2</span>, <span class=\"number\">1</span>), -<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0</span>.clamp(-<span class=\"number\">2</span>, <span class=\"number\">1</span>), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">2</span>.clamp(-<span class=\"number\">2</span>, <span class=\"number\">1</span>), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++assert_eq!((-3).clamp(-2,+1),+-2);%0A++++assert_eq!(0.clamp(-2,+1),+0);%0A++++assert_eq!(2.clamp(-2,+1),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div><h2 id=\"object-safety\" class=\"section-header\">Object Safety<a href=\"#object-safety\" class=\"anchor\">§</a></h2><div class=\"object-safety-info\">This trait is <b>not</b> <a href=\"https://doc.rust-lang.org/1.80.0/reference/items/traits.html#object-safety\">object safe</a>.</div><h2 id=\"implementors\" class=\"section-header\">Implementors<a href=\"#implementors\" class=\"anchor\">§</a></h2><div id=\"implementors-list\"><section id=\"impl-Ord-for-Char\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ascii/ascii_char.rs.html#57\">source</a><a href=\"#impl-Ord-for-Char\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"enum\" href=\"../ascii/enum.Char.html\" title=\"enum std::ascii::Char\">AsciiChar</a></h3></section><section id=\"impl-Ord-for-Infallible\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#952\">source</a></span><a href=\"#impl-Ord-for-Infallible\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h3></section><section id=\"impl-Ord-for-ErrorKind\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/error.rs.html#211\">source</a></span><a href=\"#impl-Ord-for-ErrorKind\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"enum\" href=\"../io/enum.ErrorKind.html\" title=\"enum std::io::ErrorKind\">ErrorKind</a></h3></section><section id=\"impl-Ord-for-IpAddr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0\">1.7.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#30\">source</a></span><a href=\"#impl-Ord-for-IpAddr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"enum\" href=\"../net/enum.IpAddr.html\" title=\"enum std::net::IpAddr\">IpAddr</a></h3></section><section id=\"impl-Ord-for-SocketAddr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/socket_addr.rs.html#28\">source</a></span><a href=\"#impl-Ord-for-SocketAddr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"enum\" href=\"../net/enum.SocketAddr.html\" title=\"enum std::net::SocketAddr\">SocketAddr</a></h3></section><section id=\"impl-Ord-for-Ordering\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#377\">source</a></span><a href=\"#impl-Ord-for-Ordering\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"enum\" href=\"enum.Ordering.html\" title=\"enum std::cmp::Ordering\">Ordering</a></h3></section><section id=\"impl-Ord-for-bool\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1593\">source</a></span><a href=\"#impl-Ord-for-bool\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h3></section><section id=\"impl-Ord-for-char\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1625\">source</a></span><a href=\"#impl-Ord-for-char\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"primitive\" href=\"../primitive.char.html\">char</a></h3></section><section id=\"impl-Ord-for-i8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1625\">source</a></span><a href=\"#impl-Ord-for-i8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"primitive\" href=\"../primitive.i8.html\">i8</a></h3></section><section id=\"impl-Ord-for-i16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1625\">source</a></span><a href=\"#impl-Ord-for-i16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"primitive\" href=\"../primitive.i16.html\">i16</a></h3></section><section id=\"impl-Ord-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1625\">source</a></span><a href=\"#impl-Ord-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"primitive\" href=\"../primitive.i32.html\">i32</a></h3></section><section id=\"impl-Ord-for-i64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1625\">source</a></span><a href=\"#impl-Ord-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"primitive\" href=\"../primitive.i64.html\">i64</a></h3></section><section id=\"impl-Ord-for-i128\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1625\">source</a></span><a href=\"#impl-Ord-for-i128\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"primitive\" href=\"../primitive.i128.html\">i128</a></h3></section><section id=\"impl-Ord-for-isize\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1625\">source</a></span><a href=\"#impl-Ord-for-isize\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"primitive\" href=\"../primitive.isize.html\">isize</a></h3></section><section id=\"impl-Ord-for-!\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1647\">source</a><a href=\"#impl-Ord-for-!\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"primitive\" href=\"../primitive.never.html\">!</a></h3></section><section id=\"impl-Ord-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/traits.rs.html#20\">source</a></span><a href=\"#impl-Ord-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"primitive\" href=\"../primitive.str.html\">str</a></h3></section><div class=\"docblock\"><p>Implements ordering of strings.</p>\n<p>Strings are ordered  <a href=\"trait.Ord.html#lexicographical-comparison\" title=\"trait std::cmp::Ord\">lexicographically</a> by their byte values. This orders Unicode code\npoints based on their positions in the code charts. This is not necessarily the same as\n“alphabetical” order, which varies by language and locale. Sorting strings according to\nculturally-accepted standards requires locale-specific data that is outside the scope of\nthe <code>str</code> type.</p>\n</div><section id=\"impl-Ord-for-u8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1625\">source</a></span><a href=\"#impl-Ord-for-u8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a></h3></section><section id=\"impl-Ord-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1625\">source</a></span><a href=\"#impl-Ord-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"primitive\" href=\"../primitive.u16.html\">u16</a></h3></section><section id=\"impl-Ord-for-u32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1625\">source</a></span><a href=\"#impl-Ord-for-u32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"primitive\" href=\"../primitive.u32.html\">u32</a></h3></section><section id=\"impl-Ord-for-u64\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1625\">source</a></span><a href=\"#impl-Ord-for-u64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"primitive\" href=\"../primitive.u64.html\">u64</a></h3></section><section id=\"impl-Ord-for-u128\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1625\">source</a></span><a href=\"#impl-Ord-for-u128\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"primitive\" href=\"../primitive.u128.html\">u128</a></h3></section><section id=\"impl-Ord-for-()\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1585\">source</a></span><a href=\"#impl-Ord-for-()\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"primitive\" href=\"../primitive.unit.html\">()</a></h3></section><section id=\"impl-Ord-for-usize\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1625\">source</a></span><a href=\"#impl-Ord-for-usize\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a></h3></section><section id=\"impl-Ord-for-TypeId\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#605\">source</a></span><a href=\"#impl-Ord-for-TypeId\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h3></section><section id=\"impl-Ord-for-CStr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ffi/c_str.rs.html#697\">source</a></span><a href=\"#impl-Ord-for-CStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"../ffi/struct.CStr.html\" title=\"struct std::ffi::CStr\">CStr</a></h3></section><section id=\"impl-Ord-for-CString\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.64.0\">1.64.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#112\">source</a></span><a href=\"#impl-Ord-for-CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"../ffi/struct.CString.html\" title=\"struct std::ffi::CString\">CString</a></h3></section><section id=\"impl-Ord-for-OsStr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/ffi/os_str.rs.html#1418-1423\">source</a></span><a href=\"#impl-Ord-for-OsStr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"../ffi/struct.OsStr.html\" title=\"struct std::ffi::OsStr\">OsStr</a></h3></section><section id=\"impl-Ord-for-OsString\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/ffi/os_str.rs.html#708-713\">source</a></span><a href=\"#impl-Ord-for-OsString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"../ffi/struct.OsString.html\" title=\"struct std::ffi::OsString\">OsString</a></h3></section><section id=\"impl-Ord-for-Error\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/fmt/mod.rs.html#106\">source</a></span><a href=\"#impl-Ord-for-Error\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"../fmt/struct.Error.html\" title=\"struct std::fmt::Error\">Error</a></h3></section><section id=\"impl-Ord-for-PhantomPinned\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.33.0\">1.33.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#919\">source</a></span><a href=\"#impl-Ord-for-PhantomPinned\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"../marker/struct.PhantomPinned.html\" title=\"struct std::marker::PhantomPinned\">PhantomPinned</a></h3></section><section id=\"impl-Ord-for-Ipv4Addr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#1137\">source</a></span><a href=\"#impl-Ord-for-Ipv4Addr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"../net/struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a></h3></section><section id=\"impl-Ord-for-Ipv6Addr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/ip_addr.rs.html#2058\">source</a></span><a href=\"#impl-Ord-for-Ipv6Addr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"../net/struct.Ipv6Addr.html\" title=\"struct std::net::Ipv6Addr\">Ipv6Addr</a></h3></section><section id=\"impl-Ord-for-SocketAddrV4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/socket_addr.rs.html#64\">source</a></span><a href=\"#impl-Ord-for-SocketAddrV4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"../net/struct.SocketAddrV4.html\" title=\"struct std::net::SocketAddrV4\">SocketAddrV4</a></h3></section><section id=\"impl-Ord-for-SocketAddrV6\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/net/socket_addr.rs.html#97\">source</a></span><a href=\"#impl-Ord-for-SocketAddrV6\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"../net/struct.SocketAddrV6.html\" title=\"struct std::net::SocketAddrV6\">SocketAddrV6</a></h3></section><section id=\"impl-Ord-for-Components%3C'_%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#1028-1033\">source</a></span><a href=\"#impl-Ord-for-Components%3C'_%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"../path/struct.Components.html\" title=\"struct std::path::Components\">Components</a>&lt;'_&gt;</h3></section><section id=\"impl-Ord-for-Path\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#3134-3139\">source</a></span><a href=\"#impl-Ord-for-Path\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a></h3></section><section id=\"impl-Ord-for-PathBuf\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#1949-1954\">source</a></span><a href=\"#impl-Ord-for-PathBuf\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"../path/struct.PathBuf.html\" title=\"struct std::path::PathBuf\">PathBuf</a></h3></section><section id=\"impl-Ord-for-PrefixComponent%3C'_%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#465-470\">source</a></span><a href=\"#impl-Ord-for-PrefixComponent%3C'_%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"../path/struct.PrefixComponent.html\" title=\"struct std::path::PrefixComponent\">PrefixComponent</a>&lt;'_&gt;</h3></section><section id=\"impl-Ord-for-Alignment\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/alignment.rs.html#206\">source</a><a href=\"#impl-Ord-for-Alignment\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"../ptr/struct.Alignment.html\" title=\"struct std::ptr::Alignment\">Alignment</a></h3></section><section id=\"impl-Ord-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#362\">source</a></span><a href=\"#impl-Ord-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a></h3></section><section id=\"impl-Ord-for-Duration\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/time.rs.html#96\">source</a></span><a href=\"#impl-Ord-for-Duration\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"../time/struct.Duration.html\" title=\"struct std::time::Duration\">Duration</a></h3></section><section id=\"impl-Ord-for-Instant\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../src/std/time.rs.html#153\">source</a></span><a href=\"#impl-Ord-for-Instant\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"../time/struct.Instant.html\" title=\"struct std::time::Instant\">Instant</a></h3></section><section id=\"impl-Ord-for-SystemTime\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../src/std/time.rs.html#246\">source</a></span><a href=\"#impl-Ord-for-SystemTime\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"../time/struct.SystemTime.html\" title=\"struct std::time::SystemTime\">SystemTime</a></h3></section><section id=\"impl-Ord-for-CpuidResult\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0\">1.27.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/stdarch/crates/core_arch/src/x86/cpuid.rs.html#11\">source</a></span><a href=\"#impl-Ord-for-CpuidResult\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/core_arch/x86/cpuid/struct.CpuidResult.html\" title=\"struct core::core_arch::x86::cpuid::CpuidResult\">CpuidResult</a></h3></section><section id=\"impl-Ord-for-Component%3C'a%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#501\">source</a></span><a href=\"#impl-Ord-for-Component%3C'a%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"enum\" href=\"../path/enum.Component.html\" title=\"enum std::path::Component\">Component</a>&lt;'a&gt;</h3></section><section id=\"impl-Ord-for-Prefix%3C'a%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/path.rs.html#141\">source</a></span><a href=\"#impl-Ord-for-Prefix%3C'a%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"enum\" href=\"../path/enum.Prefix.html\" title=\"enum std::path::Prefix\">Prefix</a>&lt;'a&gt;</h3></section><section id=\"impl-Ord-for-Location%3C'a%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/panic/location.rs.html#31\">source</a></span><a href=\"#impl-Ord-for-Location%3C'a%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"../panic/struct.Location.html\" title=\"struct std::panic::Location\">Location</a>&lt;'a&gt;</h3></section><section id=\"impl-Ord-for-%26A\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1697-1699\">source</a></span><a href=\"#impl-Ord-for-%26A\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;A</a><div class=\"where\">where\n    A: <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Ord-for-%26mut+A\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#1752-1754\">source</a></span><a href=\"#impl-Ord-for-%26mut+A\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut A</a><div class=\"where\">where\n    A: <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Ord-for-Cow%3C'_,+B%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#353-355\">source</a></span><a href=\"#impl-Ord-for-Cow%3C'_,+B%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;B&gt; <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"enum\" href=\"../borrow/enum.Cow.html\" title=\"enum std::borrow::Cow\">Cow</a>&lt;'_, B&gt;<div class=\"where\">where\n    B: <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> + <a class=\"trait\" href=\"../borrow/trait.ToOwned.html\" title=\"trait std::borrow::ToOwned\">ToOwned</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Ord-for-DynMetadata%3CDyn%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/metadata.rs.html#275\">source</a><a href=\"#impl-Ord-for-DynMetadata%3CDyn%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Dyn&gt; <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"../ptr/struct.DynMetadata.html\" title=\"struct std::ptr::DynMetadata\">DynMetadata</a>&lt;Dyn&gt;<div class=\"where\">where\n    Dyn: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Ord-for-F\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mod.rs.html#2109\">source</a></span><a href=\"#impl-Ord-for-F\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F&gt; <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for F<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../marker/trait.FnPtr.html\" title=\"trait std::marker::FnPtr\">FnPtr</a>,</div></h3></section><section id=\"impl-Ord-for-BTreeMap%3CK,+V,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#2304\">source</a></span><a href=\"#impl-Ord-for-BTreeMap%3CK,+V,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, A&gt; <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"../collections/struct.BTreeMap.html\" title=\"struct std::collections::BTreeMap\">BTreeMap</a>&lt;K, V, A&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,\n    V: <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section><section id=\"impl-Ord-for-Pin%3CPtr%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.41.0\">1.41.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/pin.rs.html#1157\">source</a></span><a href=\"#impl-Ord-for-Pin%3CPtr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Ptr&gt; <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"../pin/struct.Pin.html\" title=\"struct std::pin::Pin\">Pin</a>&lt;Ptr&gt;<div class=\"where\">where\n    Ptr: <a class=\"trait\" href=\"../ops/trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a>,\n    &lt;Ptr as <a class=\"trait\" href=\"../ops/trait.Deref.html\" title=\"trait std::ops::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"../ops/trait.Deref.html#associatedtype.Target\" title=\"type std::ops::Deref::Target\">Target</a>: <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,</div></h3></section><section id=\"impl-Ord-for-Option%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/option.rs.html#2186\">source</a></span><a href=\"#impl-Ord-for-Option%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,</div></h3></section><section id=\"impl-Ord-for-Poll%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/poll.rs.html#9\">source</a></span><a href=\"#impl-Ord-for-Poll%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"enum\" href=\"../task/enum.Poll.html\" title=\"enum std::task::Poll\">Poll</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,</div></h3></section><section id=\"impl-Ord-for-*const+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/const_ptr.rs.html#1886\">source</a></span><a href=\"#impl-Ord-for-*const+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"primitive\" href=\"../primitive.pointer.html\">*const T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Ord-for-*mut+T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/mut_ptr.rs.html#2359\">source</a></span><a href=\"#impl-Ord-for-*mut+T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"primitive\" href=\"../primitive.pointer.html\">*mut T</a><div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Ord-for-%5BT%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/slice/cmp.rs.html#29\">source</a></span><a href=\"#impl-Ord-for-%5BT%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"primitive\" href=\"../primitive.slice.html\">[T]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,</div></h3></section><div class=\"docblock\"><p>Implements comparison of slices <a href=\"trait.Ord.html#lexicographical-comparison\" title=\"trait std::cmp::Ord\">lexicographically</a>.</p>\n</div><section id=\"impl-Ord-for-(T,)\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/tuple.rs.html#201\">source</a></span><a href=\"#impl-Ord-for-(T,)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"primitive\" href=\"../primitive.tuple.html#trait-implementations-1\">(T₁, T₂, …, Tₙ)</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><div class=\"docblock\"><p>This trait is implemented for tuples up to twelve items long.</p>\n</div><section id=\"impl-Ord-for-Cell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#380\">source</a></span><a href=\"#impl-Ord-for-Cell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"../cell/struct.Cell.html\" title=\"struct std::cell::Cell\">Cell</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> + <a class=\"trait\" href=\"../marker/trait.Copy.html\" title=\"trait std::marker::Copy\">Copy</a>,</div></h3></section><section id=\"impl-Ord-for-RefCell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cell.rs.html#1370\">source</a></span><a href=\"#impl-Ord-for-RefCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"../cell/struct.RefCell.html\" title=\"struct std::cell::RefCell\">RefCell</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Ord-for-PhantomData%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/marker.rs.html#766\">source</a></span><a href=\"#impl-Ord-for-PhantomData%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"../marker/struct.PhantomData.html\" title=\"struct std::marker::PhantomData\">PhantomData</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Ord-for-ManuallyDrop%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.20.0\">1.20.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/mem/manually_drop.rs.html#48\">source</a></span><a href=\"#impl-Ord-for-ManuallyDrop%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"../mem/struct.ManuallyDrop.html\" title=\"struct std::mem::ManuallyDrop\">ManuallyDrop</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Ord-for-NonZero%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/nonzero.rs.html#228-230\">source</a></span><a href=\"#impl-Ord-for-NonZero%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"../num/struct.NonZero.html\" title=\"struct std::num::NonZero\">NonZero</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../num/trait.ZeroablePrimitive.html\" title=\"trait std::num::ZeroablePrimitive\">ZeroablePrimitive</a> + <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,</div></h3></section><section id=\"impl-Ord-for-Saturating%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.74.0\">1.74.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/saturating.rs.html#35\">source</a></span><a href=\"#impl-Ord-for-Saturating%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"../num/struct.Saturating.html\" title=\"struct std::num::Saturating\">Saturating</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,</div></h3></section><section id=\"impl-Ord-for-Wrapping%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/num/wrapping.rs.html#40\">source</a></span><a href=\"#impl-Ord-for-Wrapping%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"../num/struct.Wrapping.html\" title=\"struct std::num::Wrapping\">Wrapping</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,</div></h3></section><section id=\"impl-Ord-for-NonNull%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0\">1.25.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ptr/non_null.rs.html#1801\">source</a></span><a href=\"#impl-Ord-for-NonNull%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"../ptr/struct.NonNull.html\" title=\"struct std::ptr::NonNull\">NonNull</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Ord-for-Reverse%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.19.0\">1.19.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#676\">source</a></span><a href=\"#impl-Ord-for-Reverse%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"struct.Reverse.html\" title=\"struct std::cmp::Reverse\">Reverse</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,</div></h3></section><section id=\"impl-Ord-for-Box%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1423\">source</a></span><a href=\"#impl-Ord-for-Box%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section><section id=\"impl-Ord-for-BTreeSet%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/set.rs.html#107\">source</a></span><a href=\"#impl-Ord-for-BTreeSet%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"../collections/struct.BTreeSet.html\" title=\"struct std::collections::BTreeSet\">BTreeSet</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section><section id=\"impl-Ord-for-LinkedList%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#2114\">source</a></span><a href=\"#impl-Ord-for-LinkedList%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"../collections/struct.LinkedList.html\" title=\"struct std::collections::LinkedList\">LinkedList</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section><section id=\"impl-Ord-for-VecDeque%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#2821\">source</a></span><a href=\"#impl-Ord-for-VecDeque%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"../collections/struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section><section id=\"impl-Ord-for-Rc%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/rc.rs.html#2468\">source</a></span><a href=\"#impl-Ord-for-Rc%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"../rc/struct.Rc.html\" title=\"struct std::rc::Rc\">Rc</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section><section id=\"impl-Ord-for-Arc%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#3324\">source</a></span><a href=\"#impl-Ord-for-Arc%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"../sync/struct.Arc.html\" title=\"struct std::sync::Arc\">Arc</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section><section id=\"impl-Ord-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3267\">source</a></span><a href=\"#impl-Ord-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section><div class=\"docblock\"><p>Implements ordering of vectors, <a href=\"trait.Ord.html#lexicographical-comparison\" title=\"trait std::cmp::Ord\">lexicographically</a>.</p>\n</div><section id=\"impl-Ord-for-Result%3CT,+E%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/result.rs.html#523\">source</a></span><a href=\"#impl-Ord-for-Result%3CT,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, E&gt; <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, E&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,\n    E: <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,</div></h3></section><section id=\"impl-Ord-for-%5BT;+N%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/mod.rs.html#390\">source</a></span><a href=\"#impl-Ord-for-%5BT;+N%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"primitive\" href=\"../primitive.array.html\">[T; N]</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,</div></h3></section><div class=\"docblock\"><p>Implements comparison of arrays <a href=\"trait.Ord.html#lexicographical-comparison\" title=\"trait std::cmp::Ord\">lexicographically</a>.</p>\n</div><section id=\"impl-Ord-for-Simd%3CT,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/portable-simd/crates/core_simd/src/vector.rs.html#946-949\">source</a><a href=\"#impl-Ord-for-Simd%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"../simd/prelude/struct.Simd.html\" title=\"struct std::simd::prelude::Simd\">Simd</a>&lt;T, N&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"../simd/struct.LaneCount.html\" title=\"struct std::simd::LaneCount\">LaneCount</a>&lt;N&gt;: <a class=\"trait\" href=\"../simd/trait.SupportedLaneCount.html\" title=\"trait std::simd::SupportedLaneCount\">SupportedLaneCount</a>,\n    T: <a class=\"trait\" href=\"../simd/trait.SimdElement.html\" title=\"trait std::simd::SimdElement\">SimdElement</a> + <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,</div></h3></section><section id=\"impl-Ord-for-CoroutineState%3CY,+R%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/coroutine.rs.html#8\">source</a><a href=\"#impl-Ord-for-CoroutineState%3CY,+R%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Y, R&gt; <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a> for <a class=\"enum\" href=\"../ops/enum.CoroutineState.html\" title=\"enum std::ops::CoroutineState\">CoroutineState</a>&lt;Y, R&gt;<div class=\"where\">where\n    Y: <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,\n    R: <a class=\"trait\" href=\"trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,</div></h3></section></div><script src=\"../../trait.impl/core/cmp/trait.Ord.js\" data-ignore-extern-crates=\"alloc,core\" async=\"\"></script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:11:52.493Z"
}