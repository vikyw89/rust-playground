{
	"title": "ToSocketAddrs in std::net - Rust",
	"url": "https://doc.rust-lang.org/stable/std/net/trait.ToSocketAddrs.html",
	"markdown": "# ToSocketAddrs in std::net - Rust\n\n```\npub trait ToSocketAddrs {\n    type Iter: Iterator<Item = SocketAddr>;\n\n    // Required method\n    fn to_socket_addrs(&self) -> Result<Self::Iter>;\n}\n```\n\nExpand description\n\nA trait for objects which can be converted or resolved to one or more [`SocketAddr`](enum.SocketAddr.html \"enum std::net::SocketAddr\") values.\n\nThis trait is used for generic address resolution when constructing network objects. By default it is implemented for the following types:\n\n-   [`SocketAddr`](enum.SocketAddr.html \"enum std::net::SocketAddr\"): [`to_socket_addrs`](about:blank/trait.ToSocketAddrs.html#tymethod.to_socket_addrs \"method std::net::ToSocketAddrs::to_socket_addrs\") is the identity function.\n    \n-   [`SocketAddrV4`](struct.SocketAddrV4.html \"struct std::net::SocketAddrV4\"), [`SocketAddrV6`](struct.SocketAddrV6.html \"struct std::net::SocketAddrV6\"), `([IpAddr](enum.IpAddr.html \"enum std::net::IpAddr\"), [u16](../primitive.u16.html \"primitive u16\"))`, `([Ipv4Addr](struct.Ipv4Addr.html \"struct std::net::Ipv4Addr\"), [u16](../primitive.u16.html \"primitive u16\"))`, `([Ipv6Addr](struct.Ipv6Addr.html \"struct std::net::Ipv6Addr\"), [u16](../primitive.u16.html \"primitive u16\"))`: [`to_socket_addrs`](about:blank/trait.ToSocketAddrs.html#tymethod.to_socket_addrs \"method std::net::ToSocketAddrs::to_socket_addrs\") constructs a [`SocketAddr`](enum.SocketAddr.html \"enum std::net::SocketAddr\") trivially.\n    \n-   `(&[str](../primitive.str.html \"primitive str\"), [u16](../primitive.u16.html \"primitive u16\"))`: `&[str](../primitive.str.html \"primitive str\")` should be either a string representation of an [`IpAddr`](enum.IpAddr.html \"enum std::net::IpAddr\") address as expected by [`FromStr`](../str/trait.FromStr.html \"std::str::FromStr\") implementation or a host name. [`u16`](../primitive.u16.html \"primitive u16\") is the port number.\n    \n-   `&[str](../primitive.str.html \"primitive str\")`: the string should be either a string representation of a [`SocketAddr`](enum.SocketAddr.html \"enum std::net::SocketAddr\") as expected by its [`FromStr`](../str/trait.FromStr.html \"std::str::FromStr\") implementation or a string like `<host_name>:<port>` pair where `<port>` is a [`u16`](../primitive.u16.html \"primitive u16\") value.\n    \n\nThis trait allows constructing network objects like [`TcpStream`](struct.TcpStream.html \"net::TcpStream\") or [`UdpSocket`](struct.UdpSocket.html \"net::UdpSocket\") easily with values of various types for the bind/connection address. It is needed because sometimes one type is more appropriate than the other: for simple uses a string like `\"localhost:12345\"` is much nicer than manual construction of the corresponding [`SocketAddr`](enum.SocketAddr.html \"enum std::net::SocketAddr\"), but sometimes [`SocketAddr`](enum.SocketAddr.html \"enum std::net::SocketAddr\") value is _the_ main source of the address, and converting it to some other type (e.g., a string) just for it to be converted back to [`SocketAddr`](enum.SocketAddr.html \"enum std::net::SocketAddr\") in constructor methods is pointless.\n\nAddresses returned by the operating system that are not IP addresses are silently ignored.\n\n## [§](#examples)Examples\n\nCreating a [`SocketAddr`](enum.SocketAddr.html \"enum std::net::SocketAddr\") iterator that yields one item:\n\n```\nuse std::net::{ToSocketAddrs, SocketAddr};\n\nlet addr = SocketAddr::from(([127, 0, 0, 1], 443));\nlet mut addrs_iter = addr.to_socket_addrs().unwrap();\n\nassert_eq!(Some(addr), addrs_iter.next());\nassert!(addrs_iter.next().is_none());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::%7BToSocketAddrs,+SocketAddr%7D;%0A++++%0A++++let+addr+=+SocketAddr::from((%5B127,+0,+0,+1%5D,+443));%0A++++let+mut+addrs_iter+=+addr.to_socket_addrs().unwrap();%0A++++%0A++++assert_eq!(Some(addr),+addrs_iter.next());%0A++++assert!(addrs_iter.next().is_none());%0A%7D&edition=2021)\n\nCreating a [`SocketAddr`](enum.SocketAddr.html \"enum std::net::SocketAddr\") iterator from a hostname:\n\n```\nuse std::net::{SocketAddr, ToSocketAddrs};\n\n// assuming 'localhost' resolves to 127.0.0.1\nlet mut addrs_iter = \"localhost:443\".to_socket_addrs().unwrap();\nassert_eq!(addrs_iter.next(), Some(SocketAddr::from(([127, 0, 0, 1], 443))));\nassert!(addrs_iter.next().is_none());\n\n// assuming 'foo' does not resolve\nassert!(\"foo:443\".to_socket_addrs().is_err());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::%7BSocketAddr,+ToSocketAddrs%7D;%0A++++%0A++++//+assuming+%27localhost%27+resolves+to+127.0.0.1%0A++++let+mut+addrs_iter+=+%22localhost:443%22.to_socket_addrs().unwrap();%0A++++assert_eq!(addrs_iter.next(),+Some(SocketAddr::from((%5B127,+0,+0,+1%5D,+443))));%0A++++assert!(addrs_iter.next().is_none());%0A++++%0A++++//+assuming+%27foo%27+does+not+resolve%0A++++assert!(%22foo:443%22.to_socket_addrs().is_err());%0A%7D&edition=2021)\n\nCreating a [`SocketAddr`](enum.SocketAddr.html \"enum std::net::SocketAddr\") iterator that yields multiple items:\n\n```\nuse std::net::{SocketAddr, ToSocketAddrs};\n\nlet addr1 = SocketAddr::from(([0, 0, 0, 0], 80));\nlet addr2 = SocketAddr::from(([127, 0, 0, 1], 443));\nlet addrs = vec![addr1, addr2];\n\nlet mut addrs_iter = (&addrs[..]).to_socket_addrs().unwrap();\n\nassert_eq!(Some(addr1), addrs_iter.next());\nassert_eq!(Some(addr2), addrs_iter.next());\nassert!(addrs_iter.next().is_none());\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::%7BSocketAddr,+ToSocketAddrs%7D;%0A++++%0A++++let+addr1+=+SocketAddr::from((%5B0,+0,+0,+0%5D,+80));%0A++++let+addr2+=+SocketAddr::from((%5B127,+0,+0,+1%5D,+443));%0A++++let+addrs+=+vec!%5Baddr1,+addr2%5D;%0A++++%0A++++let+mut+addrs_iter+=+(%26addrs%5B..%5D).to_socket_addrs().unwrap();%0A++++%0A++++assert_eq!(Some(addr1),+addrs_iter.next());%0A++++assert_eq!(Some(addr2),+addrs_iter.next());%0A++++assert!(addrs_iter.next().is_none());%0A%7D&edition=2021)\n\nAttempting to create a [`SocketAddr`](enum.SocketAddr.html \"enum std::net::SocketAddr\") iterator from an improperly formatted socket address `&str` (missing the port):\n\n```\nuse std::io;\nuse std::net::ToSocketAddrs;\n\nlet err = \"127.0.0.1\".to_socket_addrs().unwrap_err();\nassert_eq!(err.kind(), io::ErrorKind::InvalidInput);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io;%0A++++use+std::net::ToSocketAddrs;%0A++++%0A++++let+err+=+%22127.0.0.1%22.to_socket_addrs().unwrap_err();%0A++++assert_eq!(err.kind(),+io::ErrorKind::InvalidInput);%0A%7D&edition=2021)\n\n[`TcpStream::connect`](about:blank/struct.TcpStream.html#method.connect \"associated function std::net::TcpStream::connect\") is an example of an function that utilizes `ToSocketAddrs` as a trait bound on its parameter in order to accept different types:\n\n```\nuse std::net::{TcpStream, Ipv4Addr};\n\nlet stream = TcpStream::connect((\"127.0.0.1\", 443));\n// or\nlet stream = TcpStream::connect(\"127.0.0.1:443\");\n// or\nlet stream = TcpStream::connect((Ipv4Addr::new(127, 0, 0, 1), 443));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::%7BTcpStream,+Ipv4Addr%7D;%0A++++%0A++++let+stream+=+TcpStream::connect((%22127.0.0.1%22,+443));%0A++++//+or%0A++++let+stream+=+TcpStream::connect(%22127.0.0.1:443%22);%0A++++//+or%0A++++let+stream+=+TcpStream::connect((Ipv4Addr::new(127,+0,+0,+1),+443));%0A%7D&edition=2021)\n\n1.0.0 · [source](about:blank/src/std/net/socket_addr.rs.html#172)\n\nReturned iterator over socket addresses which this type may correspond to.\n\n1.0.0 · [source](about:blank/src/std/net/socket_addr.rs.html#182)\n\nConverts this object to an iterator of resolved [`SocketAddr`](enum.SocketAddr.html \"enum std::net::SocketAddr\")s.\n\nThe returned iterator might not actually yield any values depending on the outcome of any resolution performed.\n\nNote that this function may block the current thread while resolution is performed.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A trait for objects which can be converted or resolved to one or more `SocketAddr` values.\"><title>ToSocketAddrs in std::net - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc trait\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">ToSocketAddrs</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">ToSocketAddrs</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#required-associated-types\">Required Associated Types</a></h3><ul class=\"block\"><li><a href=\"#associatedtype.Iter\">Iter</a></li></ul><h3><a href=\"#required-methods\">Required Methods</a></h3><ul class=\"block\"><li><a href=\"#tymethod.to_socket_addrs\">to_socket_addrs</a></li></ul><h3><a href=\"#implementors\">Implementors</a></h3></section><h2><a href=\"index.html\">In std::net</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.AddrParseError.html\">AddrParseError</a></li><li><a href=\"struct.Incoming.html\">Incoming</a></li><li><a href=\"struct.IntoIncoming.html\">IntoIncoming</a></li><li><a href=\"struct.Ipv4Addr.html\">Ipv4Addr</a></li><li><a href=\"struct.Ipv6Addr.html\">Ipv6Addr</a></li><li><a href=\"struct.SocketAddrV4.html\">SocketAddrV4</a></li><li><a href=\"struct.SocketAddrV6.html\">SocketAddrV6</a></li><li><a href=\"struct.TcpListener.html\">TcpListener</a></li><li><a href=\"struct.TcpStream.html\">TcpStream</a></li><li><a href=\"struct.UdpSocket.html\">UdpSocket</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.IpAddr.html\">IpAddr</a></li><li><a href=\"enum.Ipv6MulticastScope.html\">Ipv6MulticastScope</a></li><li><a href=\"enum.Shutdown.html\">Shutdown</a></li><li><a href=\"enum.SocketAddr.html\">SocketAddr</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.ToSocketAddrs.html\">ToSocketAddrs</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Trait <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">net</a>::<wbr><a class=\"trait\" href=\"#\">ToSocketAddrs</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/net/socket_addr.rs.html#168-183\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub trait ToSocketAddrs {\n    type <a href=\"#associatedtype.Iter\" class=\"associatedtype\">Iter</a>: <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"enum\" href=\"enum.SocketAddr.html\" title=\"enum std::net::SocketAddr\">SocketAddr</a>&gt;;\n\n    // Required method\n    fn <a href=\"#tymethod.to_socket_addrs\" class=\"fn\">to_socket_addrs</a>(&amp;self) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"trait.ToSocketAddrs.html#associatedtype.Iter\" title=\"type std::net::ToSocketAddrs::Iter\">Iter</a>&gt;;\n}</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A trait for objects which can be converted or resolved to one or more\n<a href=\"enum.SocketAddr.html\" title=\"enum std::net::SocketAddr\"><code>SocketAddr</code></a> values.</p>\n<p>This trait is used for generic address resolution when constructing network\nobjects. By default it is implemented for the following types:</p>\n<ul>\n<li>\n<p><a href=\"enum.SocketAddr.html\" title=\"enum std::net::SocketAddr\"><code>SocketAddr</code></a>: <a href=\"trait.ToSocketAddrs.html#tymethod.to_socket_addrs\" title=\"method std::net::ToSocketAddrs::to_socket_addrs\"><code>to_socket_addrs</code></a> is the identity function.</p>\n</li>\n<li>\n<p><a href=\"struct.SocketAddrV4.html\" title=\"struct std::net::SocketAddrV4\"><code>SocketAddrV4</code></a>, <a href=\"struct.SocketAddrV6.html\" title=\"struct std::net::SocketAddrV6\"><code>SocketAddrV6</code></a>, <code>(<a href=\"enum.IpAddr.html\" title=\"enum std::net::IpAddr\">IpAddr</a>, <a href=\"../primitive.u16.html\" title=\"primitive u16\">u16</a>)</code>,\n<code>(<a href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a>, <a href=\"../primitive.u16.html\" title=\"primitive u16\">u16</a>)</code>, <code>(<a href=\"struct.Ipv6Addr.html\" title=\"struct std::net::Ipv6Addr\">Ipv6Addr</a>, <a href=\"../primitive.u16.html\" title=\"primitive u16\">u16</a>)</code>:\n<a href=\"trait.ToSocketAddrs.html#tymethod.to_socket_addrs\" title=\"method std::net::ToSocketAddrs::to_socket_addrs\"><code>to_socket_addrs</code></a> constructs a <a href=\"enum.SocketAddr.html\" title=\"enum std::net::SocketAddr\"><code>SocketAddr</code></a> trivially.</p>\n</li>\n<li>\n<p><code>(&amp;<a href=\"../primitive.str.html\" title=\"primitive str\">str</a>, <a href=\"../primitive.u16.html\" title=\"primitive u16\">u16</a>)</code>: <code>&amp;<a href=\"../primitive.str.html\" title=\"primitive str\">str</a></code> should be either a string representation\nof an <a href=\"enum.IpAddr.html\" title=\"enum std::net::IpAddr\"><code>IpAddr</code></a> address as expected by <a href=\"../str/trait.FromStr.html\" title=\"std::str::FromStr\"><code>FromStr</code></a> implementation or a host\nname. <a href=\"../primitive.u16.html\" title=\"primitive u16\"><code>u16</code></a> is the port number.</p>\n</li>\n<li>\n<p><code>&amp;<a href=\"../primitive.str.html\" title=\"primitive str\">str</a></code>: the string should be either a string representation of a\n<a href=\"enum.SocketAddr.html\" title=\"enum std::net::SocketAddr\"><code>SocketAddr</code></a> as expected by its <a href=\"../str/trait.FromStr.html\" title=\"std::str::FromStr\"><code>FromStr</code></a> implementation or a string like\n<code>&lt;host_name&gt;:&lt;port&gt;</code> pair where <code>&lt;port&gt;</code> is a <a href=\"../primitive.u16.html\" title=\"primitive u16\"><code>u16</code></a> value.</p>\n</li>\n</ul>\n<p>This trait allows constructing network objects like <a href=\"struct.TcpStream.html\" title=\"net::TcpStream\"><code>TcpStream</code></a> or\n<a href=\"struct.UdpSocket.html\" title=\"net::UdpSocket\"><code>UdpSocket</code></a> easily with values of various types for the bind/connection\naddress. It is needed because sometimes one type is more appropriate than\nthe other: for simple uses a string like <code>\"localhost:12345\"</code> is much nicer\nthan manual construction of the corresponding <a href=\"enum.SocketAddr.html\" title=\"enum std::net::SocketAddr\"><code>SocketAddr</code></a>, but sometimes\n<a href=\"enum.SocketAddr.html\" title=\"enum std::net::SocketAddr\"><code>SocketAddr</code></a> value is <em>the</em> main source of the address, and converting it to\nsome other type (e.g., a string) just for it to be converted back to\n<a href=\"enum.SocketAddr.html\" title=\"enum std::net::SocketAddr\"><code>SocketAddr</code></a> in constructor methods is pointless.</p>\n<p>Addresses returned by the operating system that are not IP addresses are\nsilently ignored.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<p>Creating a <a href=\"enum.SocketAddr.html\" title=\"enum std::net::SocketAddr\"><code>SocketAddr</code></a> iterator that yields one item:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::{ToSocketAddrs, SocketAddr};\n\n<span class=\"kw\">let </span>addr = SocketAddr::from(([<span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>], <span class=\"number\">443</span>));\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>addrs_iter = addr.to_socket_addrs().unwrap();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(addr), addrs_iter.next());\n<span class=\"macro\">assert!</span>(addrs_iter.next().is_none());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::%7BToSocketAddrs,+SocketAddr%7D;%0A++++%0A++++let+addr+=+SocketAddr::from((%5B127,+0,+0,+1%5D,+443));%0A++++let+mut+addrs_iter+=+addr.to_socket_addrs().unwrap();%0A++++%0A++++assert_eq!(Some(addr),+addrs_iter.next());%0A++++assert!(addrs_iter.next().is_none());%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Creating a <a href=\"enum.SocketAddr.html\" title=\"enum std::net::SocketAddr\"><code>SocketAddr</code></a> iterator from a hostname:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::{SocketAddr, ToSocketAddrs};\n\n<span class=\"comment\">// assuming 'localhost' resolves to 127.0.0.1\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>addrs_iter = <span class=\"string\">\"localhost:443\"</span>.to_socket_addrs().unwrap();\n<span class=\"macro\">assert_eq!</span>(addrs_iter.next(), <span class=\"prelude-val\">Some</span>(SocketAddr::from(([<span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>], <span class=\"number\">443</span>))));\n<span class=\"macro\">assert!</span>(addrs_iter.next().is_none());\n\n<span class=\"comment\">// assuming 'foo' does not resolve\n</span><span class=\"macro\">assert!</span>(<span class=\"string\">\"foo:443\"</span>.to_socket_addrs().is_err());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::%7BSocketAddr,+ToSocketAddrs%7D;%0A++++%0A++++//+assuming+'localhost'+resolves+to+127.0.0.1%0A++++let+mut+addrs_iter+=+%22localhost:443%22.to_socket_addrs().unwrap();%0A++++assert_eq!(addrs_iter.next(),+Some(SocketAddr::from((%5B127,+0,+0,+1%5D,+443))));%0A++++assert!(addrs_iter.next().is_none());%0A++++%0A++++//+assuming+'foo'+does+not+resolve%0A++++assert!(%22foo:443%22.to_socket_addrs().is_err());%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Creating a <a href=\"enum.SocketAddr.html\" title=\"enum std::net::SocketAddr\"><code>SocketAddr</code></a> iterator that yields multiple items:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::{SocketAddr, ToSocketAddrs};\n\n<span class=\"kw\">let </span>addr1 = SocketAddr::from(([<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>], <span class=\"number\">80</span>));\n<span class=\"kw\">let </span>addr2 = SocketAddr::from(([<span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>], <span class=\"number\">443</span>));\n<span class=\"kw\">let </span>addrs = <span class=\"macro\">vec!</span>[addr1, addr2];\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>addrs_iter = (<span class=\"kw-2\">&amp;</span>addrs[..]).to_socket_addrs().unwrap();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(addr1), addrs_iter.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(addr2), addrs_iter.next());\n<span class=\"macro\">assert!</span>(addrs_iter.next().is_none());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::%7BSocketAddr,+ToSocketAddrs%7D;%0A++++%0A++++let+addr1+=+SocketAddr::from((%5B0,+0,+0,+0%5D,+80));%0A++++let+addr2+=+SocketAddr::from((%5B127,+0,+0,+1%5D,+443));%0A++++let+addrs+=+vec!%5Baddr1,+addr2%5D;%0A++++%0A++++let+mut+addrs_iter+=+(%26addrs%5B..%5D).to_socket_addrs().unwrap();%0A++++%0A++++assert_eq!(Some(addr1),+addrs_iter.next());%0A++++assert_eq!(Some(addr2),+addrs_iter.next());%0A++++assert!(addrs_iter.next().is_none());%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Attempting to create a <a href=\"enum.SocketAddr.html\" title=\"enum std::net::SocketAddr\"><code>SocketAddr</code></a> iterator from an improperly formatted\nsocket address <code>&amp;str</code> (missing the port):</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io;\n<span class=\"kw\">use </span>std::net::ToSocketAddrs;\n\n<span class=\"kw\">let </span>err = <span class=\"string\">\"127.0.0.1\"</span>.to_socket_addrs().unwrap_err();\n<span class=\"macro\">assert_eq!</span>(err.kind(), io::ErrorKind::InvalidInput);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::io;%0A++++use+std::net::ToSocketAddrs;%0A++++%0A++++let+err+=+%22127.0.0.1%22.to_socket_addrs().unwrap_err();%0A++++assert_eq!(err.kind(),+io::ErrorKind::InvalidInput);%0A%7D&amp;edition=2021\">Run</a></div>\n<p><a href=\"struct.TcpStream.html#method.connect\" title=\"associated function std::net::TcpStream::connect\"><code>TcpStream::connect</code></a> is an example of an function that utilizes\n<code>ToSocketAddrs</code> as a trait bound on its parameter in order to accept\ndifferent types:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::net::{TcpStream, Ipv4Addr};\n\n<span class=\"kw\">let </span>stream = TcpStream::connect((<span class=\"string\">\"127.0.0.1\"</span>, <span class=\"number\">443</span>));\n<span class=\"comment\">// or\n</span><span class=\"kw\">let </span>stream = TcpStream::connect(<span class=\"string\">\"127.0.0.1:443\"</span>);\n<span class=\"comment\">// or\n</span><span class=\"kw\">let </span>stream = TcpStream::connect((Ipv4Addr::new(<span class=\"number\">127</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>), <span class=\"number\">443</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::net::%7BTcpStream,+Ipv4Addr%7D;%0A++++%0A++++let+stream+=+TcpStream::connect((%22127.0.0.1%22,+443));%0A++++//+or%0A++++let+stream+=+TcpStream::connect(%22127.0.0.1:443%22);%0A++++//+or%0A++++let+stream+=+TcpStream::connect((Ipv4Addr::new(127,+0,+0,+1),+443));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"required-associated-types\" class=\"section-header\">Required Associated Types<a href=\"#required-associated-types\" class=\"anchor\">§</a></h2><div class=\"methods\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Iter\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/net/socket_addr.rs.html#172\">source</a></span><h4 class=\"code-header\">type <a href=\"#associatedtype.Iter\" class=\"associatedtype\">Iter</a>: <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"enum\" href=\"enum.SocketAddr.html\" title=\"enum std::net::SocketAddr\">SocketAddr</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returned iterator over socket addresses which this type may correspond\nto.</p>\n</div></details></div><h2 id=\"required-methods\" class=\"section-header\">Required Methods<a href=\"#required-methods\" class=\"anchor\">§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.to_socket_addrs\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/net/socket_addr.rs.html#182\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.to_socket_addrs\" class=\"fn\">to_socket_addrs</a>(&amp;self) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"trait.ToSocketAddrs.html#associatedtype.Iter\" title=\"type std::net::ToSocketAddrs::Iter\">Iter</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts this object to an iterator of resolved <a href=\"enum.SocketAddr.html\" title=\"enum std::net::SocketAddr\"><code>SocketAddr</code></a>s.</p>\n<p>The returned iterator might not actually yield any values depending on the\noutcome of any resolution performed.</p>\n<p>Note that this function may block the current thread while resolution is\nperformed.</p>\n</div></details></div><h2 id=\"implementors\" class=\"section-header\">Implementors<a href=\"#implementors\" class=\"anchor\">§</a></h2><div id=\"implementors-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToSocketAddrs-for-(%26str,+u16)\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/net/socket_addr.rs.html#251-268\">source</a></span><a href=\"#impl-ToSocketAddrs-for-(%26str,+u16)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToSocketAddrs.html\" title=\"trait std::net::ToSocketAddrs\">ToSocketAddrs</a> for (&amp;<a class=\"primitive\" href=\"../primitive.str.html\">str</a>, <a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>)</h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Iter-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Iter-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Iter\" class=\"associatedtype\">Iter</a> = <a class=\"struct\" href=\"../vec/struct.IntoIter.html\" title=\"struct std::vec::IntoIter\">IntoIter</a>&lt;<a class=\"enum\" href=\"enum.SocketAddr.html\" title=\"enum std::net::SocketAddr\">SocketAddr</a>&gt;</h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToSocketAddrs-for-(IpAddr,+u16)\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/net/socket_addr.rs.html#210-219\">source</a></span><a href=\"#impl-ToSocketAddrs-for-(IpAddr,+u16)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToSocketAddrs.html\" title=\"trait std::net::ToSocketAddrs\">ToSocketAddrs</a> for (<a class=\"enum\" href=\"enum.IpAddr.html\" title=\"enum std::net::IpAddr\">IpAddr</a>, <a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>)</h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Iter-2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Iter-2\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Iter\" class=\"associatedtype\">Iter</a> = <a class=\"struct\" href=\"../option/struct.IntoIter.html\" title=\"struct std::option::IntoIter\">IntoIter</a>&lt;<a class=\"enum\" href=\"enum.SocketAddr.html\" title=\"enum std::net::SocketAddr\">SocketAddr</a>&gt;</h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToSocketAddrs-for-(String,+u16)\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0\">1.46.0</span> · <a class=\"src\" href=\"../../src/std/net/socket_addr.rs.html#271-276\">source</a></span><a href=\"#impl-ToSocketAddrs-for-(String,+u16)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToSocketAddrs.html\" title=\"trait std::net::ToSocketAddrs\">ToSocketAddrs</a> for (<a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a>, <a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>)</h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Iter-3\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Iter-3\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Iter\" class=\"associatedtype\">Iter</a> = <a class=\"struct\" href=\"../vec/struct.IntoIter.html\" title=\"struct std::vec::IntoIter\">IntoIter</a>&lt;<a class=\"enum\" href=\"enum.SocketAddr.html\" title=\"enum std::net::SocketAddr\">SocketAddr</a>&gt;</h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToSocketAddrs-for-(Ipv4Addr,+u16)\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/net/socket_addr.rs.html#222-228\">source</a></span><a href=\"#impl-ToSocketAddrs-for-(Ipv4Addr,+u16)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToSocketAddrs.html\" title=\"trait std::net::ToSocketAddrs\">ToSocketAddrs</a> for (<a class=\"struct\" href=\"struct.Ipv4Addr.html\" title=\"struct std::net::Ipv4Addr\">Ipv4Addr</a>, <a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>)</h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Iter-4\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Iter-4\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Iter\" class=\"associatedtype\">Iter</a> = <a class=\"struct\" href=\"../option/struct.IntoIter.html\" title=\"struct std::option::IntoIter\">IntoIter</a>&lt;<a class=\"enum\" href=\"enum.SocketAddr.html\" title=\"enum std::net::SocketAddr\">SocketAddr</a>&gt;</h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToSocketAddrs-for-(Ipv6Addr,+u16)\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/net/socket_addr.rs.html#231-237\">source</a></span><a href=\"#impl-ToSocketAddrs-for-(Ipv6Addr,+u16)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToSocketAddrs.html\" title=\"trait std::net::ToSocketAddrs\">ToSocketAddrs</a> for (<a class=\"struct\" href=\"struct.Ipv6Addr.html\" title=\"struct std::net::Ipv6Addr\">Ipv6Addr</a>, <a class=\"primitive\" href=\"../primitive.u16.html\">u16</a>)</h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Iter-5\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Iter-5\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Iter\" class=\"associatedtype\">Iter</a> = <a class=\"struct\" href=\"../option/struct.IntoIter.html\" title=\"struct std::option::IntoIter\">IntoIter</a>&lt;<a class=\"enum\" href=\"enum.SocketAddr.html\" title=\"enum std::net::SocketAddr\">SocketAddr</a>&gt;</h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToSocketAddrs-for-SocketAddr\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/net/socket_addr.rs.html#186-191\">source</a></span><a href=\"#impl-ToSocketAddrs-for-SocketAddr\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToSocketAddrs.html\" title=\"trait std::net::ToSocketAddrs\">ToSocketAddrs</a> for <a class=\"enum\" href=\"enum.SocketAddr.html\" title=\"enum std::net::SocketAddr\">SocketAddr</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Iter-6\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Iter-6\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Iter\" class=\"associatedtype\">Iter</a> = <a class=\"struct\" href=\"../option/struct.IntoIter.html\" title=\"struct std::option::IntoIter\">IntoIter</a>&lt;<a class=\"enum\" href=\"enum.SocketAddr.html\" title=\"enum std::net::SocketAddr\">SocketAddr</a>&gt;</h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToSocketAddrs-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/net/socket_addr.rs.html#280-290\">source</a></span><a href=\"#impl-ToSocketAddrs-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToSocketAddrs.html\" title=\"trait std::net::ToSocketAddrs\">ToSocketAddrs</a> for <a class=\"primitive\" href=\"../primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Iter-7\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Iter-7\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Iter\" class=\"associatedtype\">Iter</a> = <a class=\"struct\" href=\"../vec/struct.IntoIter.html\" title=\"struct std::vec::IntoIter\">IntoIter</a>&lt;<a class=\"enum\" href=\"enum.SocketAddr.html\" title=\"enum std::net::SocketAddr\">SocketAddr</a>&gt;</h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToSocketAddrs-for-String\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0\">1.16.0</span> · <a class=\"src\" href=\"../../src/std/net/socket_addr.rs.html#310-315\">source</a></span><a href=\"#impl-ToSocketAddrs-for-String\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToSocketAddrs.html\" title=\"trait std::net::ToSocketAddrs\">ToSocketAddrs</a> for <a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Iter-8\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Iter-8\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Iter\" class=\"associatedtype\">Iter</a> = <a class=\"struct\" href=\"../vec/struct.IntoIter.html\" title=\"struct std::vec::IntoIter\">IntoIter</a>&lt;<a class=\"enum\" href=\"enum.SocketAddr.html\" title=\"enum std::net::SocketAddr\">SocketAddr</a>&gt;</h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToSocketAddrs-for-SocketAddrV4\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/net/socket_addr.rs.html#194-199\">source</a></span><a href=\"#impl-ToSocketAddrs-for-SocketAddrV4\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToSocketAddrs.html\" title=\"trait std::net::ToSocketAddrs\">ToSocketAddrs</a> for <a class=\"struct\" href=\"struct.SocketAddrV4.html\" title=\"struct std::net::SocketAddrV4\">SocketAddrV4</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Iter-9\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Iter-9\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Iter\" class=\"associatedtype\">Iter</a> = <a class=\"struct\" href=\"../option/struct.IntoIter.html\" title=\"struct std::option::IntoIter\">IntoIter</a>&lt;<a class=\"enum\" href=\"enum.SocketAddr.html\" title=\"enum std::net::SocketAddr\">SocketAddr</a>&gt;</h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToSocketAddrs-for-SocketAddrV6\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/net/socket_addr.rs.html#202-207\">source</a></span><a href=\"#impl-ToSocketAddrs-for-SocketAddrV6\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.ToSocketAddrs.html\" title=\"trait std::net::ToSocketAddrs\">ToSocketAddrs</a> for <a class=\"struct\" href=\"struct.SocketAddrV6.html\" title=\"struct std::net::SocketAddrV6\">SocketAddrV6</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Iter-10\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Iter-10\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Iter\" class=\"associatedtype\">Iter</a> = <a class=\"struct\" href=\"../option/struct.IntoIter.html\" title=\"struct std::option::IntoIter\">IntoIter</a>&lt;<a class=\"enum\" href=\"enum.SocketAddr.html\" title=\"enum std::net::SocketAddr\">SocketAddr</a>&gt;</h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToSocketAddrs-for-%26%5BSocketAddr%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"../../src/std/net/socket_addr.rs.html#293-299\">source</a></span><a href=\"#impl-ToSocketAddrs-for-%26%5BSocketAddr%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"trait.ToSocketAddrs.html\" title=\"trait std::net::ToSocketAddrs\">ToSocketAddrs</a> for &amp;'a [<a class=\"enum\" href=\"enum.SocketAddr.html\" title=\"enum std::net::SocketAddr\">SocketAddr</a>]</h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Iter-11\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Iter-11\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Iter\" class=\"associatedtype\">Iter</a> = <a class=\"struct\" href=\"../iter/struct.Cloned.html\" title=\"struct std::iter::Cloned\">Cloned</a>&lt;<a class=\"struct\" href=\"../slice/struct.Iter.html\" title=\"struct std::slice::Iter\">Iter</a>&lt;'a, <a class=\"enum\" href=\"enum.SocketAddr.html\" title=\"enum std::net::SocketAddr\">SocketAddr</a>&gt;&gt;</h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToSocketAddrs-for-%26T\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/net/socket_addr.rs.html#302-307\">source</a></span><a href=\"#impl-ToSocketAddrs-for-%26T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"trait.ToSocketAddrs.html\" title=\"trait std::net::ToSocketAddrs\">ToSocketAddrs</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"trait.ToSocketAddrs.html\" title=\"trait std::net::ToSocketAddrs\">ToSocketAddrs</a> for <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Iter-12\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Iter-12\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Iter\" class=\"associatedtype\">Iter</a> = &lt;T as <a class=\"trait\" href=\"trait.ToSocketAddrs.html\" title=\"trait std::net::ToSocketAddrs\">ToSocketAddrs</a>&gt;::<a class=\"associatedtype\" href=\"trait.ToSocketAddrs.html#associatedtype.Iter\" title=\"type std::net::ToSocketAddrs::Iter\">Iter</a></h4></section></div></details></div><script src=\"../../trait.impl/std/net/socket_addr/trait.ToSocketAddrs.js\" data-ignore-extern-crates=\"alloc,core\" async=\"\"></script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:12:31.811Z"
}