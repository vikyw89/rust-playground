{
	"title": "Drop in std::ops - Rust",
	"url": "https://doc.rust-lang.org/stable/std/ops/trait.Drop.html#tymethod.drop",
	"markdown": "# Drop in std::ops - Rust\n\n## Trait [std](../index.html)::[ops](index.html)::[Drop](#)\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ops/drop.rs.html#206) ·\n\n```\npub trait Drop {\n    // Required method\n    fn drop(&mut self);\n}\n```\n\nExpand description\n\nCustom code within the destructor.\n\nWhen a value is no longer needed, Rust will run a “destructor” on that value. The most common way that a value is no longer needed is when it goes out of scope. Destructors may still run in other circumstances, but we’re going to focus on scope for the examples here. To learn about some of those other cases, please see [the reference](https://doc.rust-lang.org/reference/destructors.html) section on destructors.\n\nThis destructor consists of two components:\n\n-   A call to `Drop::drop` for that value, if this special `Drop` trait is implemented for its type.\n-   The automatically generated “drop glue” which recursively calls the destructors of all the fields of this value.\n\nAs Rust automatically calls the destructors of all contained fields, you don’t have to implement `Drop` in most cases. But there are some cases where it is useful, for example for types which directly manage a resource. That resource may be memory, it may be a file descriptor, it may be a network socket. Once a value of that type is no longer going to be used, it should “clean up” its resource by freeing the memory or closing the file or socket. This is the job of a destructor, and therefore the job of `Drop::drop`.\n\n### [§](#examples)Examples\n\nTo see destructors in action, let’s take a look at the following program:\n\n```\nstruct HasDrop;\n\nimpl Drop for HasDrop {\n    fn drop(&mut self) {\n        println!(\"Dropping HasDrop!\");\n    }\n}\n\nstruct HasTwoDrops {\n    one: HasDrop,\n    two: HasDrop,\n}\n\nimpl Drop for HasTwoDrops {\n    fn drop(&mut self) {\n        println!(\"Dropping HasTwoDrops!\");\n    }\n}\n\nfn main() {\n    let _x = HasTwoDrops { one: HasDrop, two: HasDrop };\n    println!(\"Running!\");\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Astruct+HasDrop;%0A%0Aimpl+Drop+for+HasDrop+%7B%0A++++fn+drop(%26mut+self)+%7B%0A++++++++println!(%22Dropping+HasDrop!%22);%0A++++%7D%0A%7D%0A%0Astruct+HasTwoDrops+%7B%0A++++one:+HasDrop,%0A++++two:+HasDrop,%0A%7D%0A%0Aimpl+Drop+for+HasTwoDrops+%7B%0A++++fn+drop(%26mut+self)+%7B%0A++++++++println!(%22Dropping+HasTwoDrops!%22);%0A++++%7D%0A%7D%0A%0Afn+main()+%7B%0A++++let+_x+=+HasTwoDrops+%7B+one:+HasDrop,+two:+HasDrop+%7D;%0A++++println!(%22Running!%22);%0A%7D&edition=2021)\n\nRust will first call `Drop::drop` for `_x` and then for both `_x.one` and `_x.two`, meaning that running this will print\n\n```text\nRunning!\nDropping HasTwoDrops!\nDropping HasDrop!\nDropping HasDrop!\n\n```\n\nEven if we remove the implementation of `Drop` for `HasTwoDrop`, the destructors of its fields are still called. This would result in\n\n```test\nRunning!\nDropping HasDrop!\nDropping HasDrop!\n\n```\n\n### [§](#you-cannot-call-dropdrop-yourself)You cannot call `Drop::drop` yourself\n\nBecause `Drop::drop` is used to clean up a value, it may be dangerous to use this value after the method has been called. As `Drop::drop` does not take ownership of its input, Rust prevents misuse by not allowing you to call `Drop::drop` directly.\n\nIn other words, if you tried to explicitly call `Drop::drop` in the above example, you’d get a compiler error.\n\nIf you’d like to explicitly call the destructor of a value, [`mem::drop`](../mem/fn.drop.html \"fn std::mem::drop\") can be used instead.\n\n### [§](#drop-order)Drop order\n\nWhich of our two `HasDrop` drops first, though? For structs, it’s the same order that they’re declared: first `one`, then `two`. If you’d like to try this yourself, you can modify `HasDrop` above to contain some data, like an integer, and then use it in the `println!` inside of `Drop`. This behavior is guaranteed by the language.\n\nUnlike for structs, local variables are dropped in reverse order:\n\n```\nstruct Foo;\n\nimpl Drop for Foo {\n    fn drop(&mut self) {\n        println!(\"Dropping Foo!\")\n    }\n}\n\nstruct Bar;\n\nimpl Drop for Bar {\n    fn drop(&mut self) {\n        println!(\"Dropping Bar!\")\n    }\n}\n\nfn main() {\n    let _foo = Foo;\n    let _bar = Bar;\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Astruct+Foo;%0A%0Aimpl+Drop+for+Foo+%7B%0A++++fn+drop(%26mut+self)+%7B%0A++++++++println!(%22Dropping+Foo!%22)%0A++++%7D%0A%7D%0A%0Astruct+Bar;%0A%0Aimpl+Drop+for+Bar+%7B%0A++++fn+drop(%26mut+self)+%7B%0A++++++++println!(%22Dropping+Bar!%22)%0A++++%7D%0A%7D%0A%0Afn+main()+%7B%0A++++let+_foo+=+Foo;%0A++++let+_bar+=+Bar;%0A%7D&edition=2021)\n\nThis will print\n\n```text\nDropping Bar!\nDropping Foo!\n\n```\n\nPlease see [the reference](https://doc.rust-lang.org/reference/destructors.html) for the full rules.\n\n### [§](#copy-and-drop-are-exclusive)`Copy` and `Drop` are exclusive\n\nYou cannot implement both [`Copy`](../marker/trait.Copy.html \"trait std::marker::Copy\") and `Drop` on the same type. Types that are `Copy` get implicitly duplicated by the compiler, making it very hard to predict when, and how often destructors will be executed. As such, these types cannot have destructors.\n\n### [§](#drop-check)Drop check\n\nDropping interacts with the borrow checker in subtle ways: when a type `T` is being implicitly dropped as some variable of this type goes out of scope, the borrow checker needs to ensure that calling `T`’s destructor at this moment is safe. In particular, it also needs to be safe to recursively drop all the fields of `T`. For example, it is crucial that code like the following is being rejected:\n\n[ⓘ](# \"This example deliberately fails to compile\")\n\n```\nuse std::cell::Cell;\n\nstruct S<'a>(Cell<Option<&'a S<'a>>>, Box<i32>);\nimpl Drop for S<'_> {\n    fn drop(&mut self) {\n        if let Some(r) = self.0.get() {\n            // Print the contents of the `Box` in `r`.\n            println!(\"{}\", r.1);\n        }\n    }\n}\n\nfn main() {\n    // Set up two `S` that point to each other.\n    let s1 = S(Cell::new(None), Box::new(42));\n    let s2 = S(Cell::new(Some(&s1)), Box::new(42));\n    s1.0.set(Some(&s2));\n    // Now they both get dropped. But whichever is the 2nd one\n    // to be dropped will access the `Box` in the first one,\n    // which is a use-after-free!\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::cell::Cell;%0A%0Astruct+S%3C%27a%3E(Cell%3COption%3C%26%27a+S%3C%27a%3E%3E%3E,+Box%3Ci32%3E);%0Aimpl+Drop+for+S%3C%27_%3E+%7B%0A++++fn+drop(%26mut+self)+%7B%0A++++++++if+let+Some(r)+=+self.0.get()+%7B%0A++++++++++++//+Print+the+contents+of+the+%60Box%60+in+%60r%60.%0A++++++++++++println!(%22%7B%7D%22,+r.1);%0A++++++++%7D%0A++++%7D%0A%7D%0A%0Afn+main()+%7B%0A++++//+Set+up+two+%60S%60+that+point+to+each+other.%0A++++let+s1+=+S(Cell::new(None),+Box::new(42));%0A++++let+s2+=+S(Cell::new(Some(%26s1)),+Box::new(42));%0A++++s1.0.set(Some(%26s2));%0A++++//+Now+they+both+get+dropped.+But+whichever+is+the+2nd+one%0A++++//+to+be+dropped+will+access+the+%60Box%60+in+the+first+one,%0A++++//+which+is+a+use-after-free!%0A%7D&edition=2021)\n\nThe Nomicon discusses the need for [drop check in more detail](../../nomicon/dropck.html).\n\nTo reject such code, the “drop check” analysis determines which types and lifetimes need to still be live when `T` gets dropped. The exact details of this analysis are not yet stably guaranteed and **subject to change**. Currently, the analysis works as follows:\n\n-   If `T` has no drop glue, then trivially nothing is required to be live. This is the case if neither `T` nor any of its (recursive) fields have a destructor (`impl Drop`). [`PhantomData`](../marker/struct.PhantomData.html \"struct std::marker::PhantomData\") and [`ManuallyDrop`](../mem/struct.ManuallyDrop.html \"struct std::mem::ManuallyDrop\") are considered to never have a destructor, no matter their field type.\n-   If `T` has drop glue, then, for all types `U` that are _owned_ by any field of `T`, recursively add the types and lifetimes that need to be live when `U` gets dropped. The set of owned types is determined by recursively traversing `T`:\n    -   Recursively descend through `PhantomData`, `Box`, tuples, and arrays (including arrays of length 0).\n    -   Stop at reference and raw pointer types as well as function pointers and function items; they do not own anything.\n    -   Stop at non-composite types (type parameters that remain generic in the current context and base types such as integers and `bool`); these types are owned.\n    -   When hitting an ADT with `impl Drop`, stop there; this type is owned.\n    -   When hitting an ADT without `impl Drop`, recursively descend to its fields. (For an `enum`, consider all fields of all variants.)\n-   Furthermore, if `T` implements `Drop`, then all generic (lifetime and type) parameters of `T` must be live.\n\nIn the above example, the last clause implies that `'a` must be live when `S<'a>` is dropped, and hence the example is rejected. If we remove the `impl Drop`, the liveness requirement disappears and the example is accepted.\n\nThere exists an unstable way for a type to opt-out of the last clause; this is called “drop check eyepatch” or `may_dangle`. For more details on this nightly-only feature, see the [discussion in the Nomicon](about:blank/nomicon/phantom-data.html#an-exception-the-special-case-of-the-standard-library-and-its-unstable-may_dangle).\n\n1.0.0 · [source](https://doc.rust-lang.org/1.80.0/src/core/ops/drop.rs.html#239)\n\nExecutes the destructor for this type.\n\nThis method is called implicitly when the value goes out of scope, and cannot be called explicitly (this is compiler error [E0040](../../error_codes/E0040.html)). However, the [`mem::drop`](../mem/fn.drop.html \"fn std::mem::drop\") function in the prelude can be used to call the argument’s `Drop` implementation.\n\nWhen this method has been called, `self` has not yet been deallocated. That only happens after the method is over. If this wasn’t the case, `self` would be a dangling reference.\n\n##### [§](#panics)Panics\n\nImplementations should generally avoid [`panic!`](https://doc.rust-lang.org/1.80.0/core/macro.panic.html \"macro core::panic\")ing, because `drop()` may itself be called during unwinding due to a panic, and if the `drop()` panics in that situation (a “double panic”), this will likely abort the program. It is possible to check [`panicking()`](../../std/thread/fn.panicking.html) first, which may be desirable for a `Drop` implementation that is reporting a bug of the kind “you didn’t finish using this before it was dropped”; but most types should simply clean up their owned allocations or other resources and return normally from `drop()`, regardless of what state they are in.\n\nNote that even if this panics, the value is considered to be dropped; you must not cause `drop` to be called again. This is normally automatically handled by the compiler, but when using unsafe code, can sometimes occur unintentionally, particularly when using [`ptr::drop_in_place`](../ptr/fn.drop_in_place.html \"fn std::ptr::drop_in_place\").",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Custom code within the destructor.\"><title>Drop in std::ops - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc trait\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Drop</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Drop</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#required-methods\">Required Methods</a></h3><ul class=\"block\"><li><a href=\"#tymethod.drop\">drop</a></li></ul><h3><a href=\"#implementors\">Implementors</a></h3></section><h2><a href=\"index.html\">In std::ops</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Range.html\">Range</a></li><li><a href=\"struct.RangeFrom.html\">RangeFrom</a></li><li><a href=\"struct.RangeFull.html\">RangeFull</a></li><li><a href=\"struct.RangeInclusive.html\">RangeInclusive</a></li><li><a href=\"struct.RangeTo.html\">RangeTo</a></li><li><a href=\"struct.RangeToInclusive.html\">RangeToInclusive</a></li><li><a href=\"struct.Yeet.html\">Yeet</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.Bound.html\">Bound</a></li><li><a href=\"enum.ControlFlow.html\">ControlFlow</a></li><li><a href=\"enum.CoroutineState.html\">CoroutineState</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.Add.html\">Add</a></li><li><a href=\"trait.AddAssign.html\">AddAssign</a></li><li><a href=\"trait.AsyncFn.html\">AsyncFn</a></li><li><a href=\"trait.AsyncFnMut.html\">AsyncFnMut</a></li><li><a href=\"trait.AsyncFnOnce.html\">AsyncFnOnce</a></li><li><a href=\"trait.BitAnd.html\">BitAnd</a></li><li><a href=\"trait.BitAndAssign.html\">BitAndAssign</a></li><li><a href=\"trait.BitOr.html\">BitOr</a></li><li><a href=\"trait.BitOrAssign.html\">BitOrAssign</a></li><li><a href=\"trait.BitXor.html\">BitXor</a></li><li><a href=\"trait.BitXorAssign.html\">BitXorAssign</a></li><li><a href=\"trait.CoerceUnsized.html\">CoerceUnsized</a></li><li><a href=\"trait.Coroutine.html\">Coroutine</a></li><li><a href=\"trait.Deref.html\">Deref</a></li><li><a href=\"trait.DerefMut.html\">DerefMut</a></li><li><a href=\"trait.DerefPure.html\">DerefPure</a></li><li><a href=\"trait.DispatchFromDyn.html\">DispatchFromDyn</a></li><li><a href=\"trait.Div.html\">Div</a></li><li><a href=\"trait.DivAssign.html\">DivAssign</a></li><li><a href=\"trait.Drop.html\">Drop</a></li><li><a href=\"trait.Fn.html\">Fn</a></li><li><a href=\"trait.FnMut.html\">FnMut</a></li><li><a href=\"trait.FnOnce.html\">FnOnce</a></li><li><a href=\"trait.FromResidual.html\">FromResidual</a></li><li><a href=\"trait.Index.html\">Index</a></li><li><a href=\"trait.IndexMut.html\">IndexMut</a></li><li><a href=\"trait.Mul.html\">Mul</a></li><li><a href=\"trait.MulAssign.html\">MulAssign</a></li><li><a href=\"trait.Neg.html\">Neg</a></li><li><a href=\"trait.Not.html\">Not</a></li><li><a href=\"trait.OneSidedRange.html\">OneSidedRange</a></li><li><a href=\"trait.RangeBounds.html\">RangeBounds</a></li><li><a href=\"trait.Rem.html\">Rem</a></li><li><a href=\"trait.RemAssign.html\">RemAssign</a></li><li><a href=\"trait.Residual.html\">Residual</a></li><li><a href=\"trait.Shl.html\">Shl</a></li><li><a href=\"trait.ShlAssign.html\">ShlAssign</a></li><li><a href=\"trait.Shr.html\">Shr</a></li><li><a href=\"trait.ShrAssign.html\">ShrAssign</a></li><li><a href=\"trait.Sub.html\">Sub</a></li><li><a href=\"trait.SubAssign.html\">SubAssign</a></li><li><a href=\"trait.Try.html\">Try</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Trait <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">ops</a>::<wbr><a class=\"trait\" href=\"#\">Drop</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/drop.rs.html#206\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub trait Drop {\n    // Required method\n    fn <a href=\"#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self);\n}</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Custom code within the destructor.</p>\n<p>When a value is no longer needed, Rust will run a “destructor” on that value.\nThe most common way that a value is no longer needed is when it goes out of\nscope. Destructors may still run in other circumstances, but we’re going to\nfocus on scope for the examples here. To learn about some of those other cases,\nplease see <a href=\"https://doc.rust-lang.org/reference/destructors.html\">the reference</a> section on destructors.</p>\n<p>This destructor consists of two components:</p>\n<ul>\n<li>A call to <code>Drop::drop</code> for that value, if this special <code>Drop</code> trait is implemented for its type.</li>\n<li>The automatically generated “drop glue” which recursively calls the destructors\nof all the fields of this value.</li>\n</ul>\n<p>As Rust automatically calls the destructors of all contained fields,\nyou don’t have to implement <code>Drop</code> in most cases. But there are some cases where\nit is useful, for example for types which directly manage a resource.\nThat resource may be memory, it may be a file descriptor, it may be a network socket.\nOnce a value of that type is no longer going to be used, it should “clean up” its\nresource by freeing the memory or closing the file or socket. This is\nthe job of a destructor, and therefore the job of <code>Drop::drop</code>.</p>\n<h3 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h3>\n<p>To see destructors in action, let’s take a look at the following program:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">struct </span>HasDrop;\n\n<span class=\"kw\">impl </span>Drop <span class=\"kw\">for </span>HasDrop {\n    <span class=\"kw\">fn </span>drop(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"Dropping HasDrop!\"</span>);\n    }\n}\n\n<span class=\"kw\">struct </span>HasTwoDrops {\n    one: HasDrop,\n    two: HasDrop,\n}\n\n<span class=\"kw\">impl </span>Drop <span class=\"kw\">for </span>HasTwoDrops {\n    <span class=\"kw\">fn </span>drop(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"Dropping HasTwoDrops!\"</span>);\n    }\n}\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"kw\">let </span>_x = HasTwoDrops { one: HasDrop, two: HasDrop };\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"Running!\"</span>);\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Astruct+HasDrop;%0A%0Aimpl+Drop+for+HasDrop+%7B%0A++++fn+drop(%26mut+self)+%7B%0A++++++++println!(%22Dropping+HasDrop!%22);%0A++++%7D%0A%7D%0A%0Astruct+HasTwoDrops+%7B%0A++++one:+HasDrop,%0A++++two:+HasDrop,%0A%7D%0A%0Aimpl+Drop+for+HasTwoDrops+%7B%0A++++fn+drop(%26mut+self)+%7B%0A++++++++println!(%22Dropping+HasTwoDrops!%22);%0A++++%7D%0A%7D%0A%0Afn+main()+%7B%0A++++let+_x+=+HasTwoDrops+%7B+one:+HasDrop,+two:+HasDrop+%7D;%0A++++println!(%22Running!%22);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>Rust will first call <code>Drop::drop</code> for <code>_x</code> and then for both <code>_x.one</code> and <code>_x.two</code>,\nmeaning that running this will print</p>\n<div class=\"example-wrap\"><pre class=\"language-text\"><code>Running!\nDropping HasTwoDrops!\nDropping HasDrop!\nDropping HasDrop!\n</code></pre></div>\n<p>Even if we remove the implementation of <code>Drop</code> for <code>HasTwoDrop</code>, the destructors of its fields are still called.\nThis would result in</p>\n<div class=\"example-wrap\"><pre class=\"language-test\"><code>Running!\nDropping HasDrop!\nDropping HasDrop!\n</code></pre></div><h3 id=\"you-cannot-call-dropdrop-yourself\"><a class=\"doc-anchor\" href=\"#you-cannot-call-dropdrop-yourself\">§</a>You cannot call <code>Drop::drop</code> yourself</h3>\n<p>Because <code>Drop::drop</code> is used to clean up a value, it may be dangerous to use this value after\nthe method has been called. As <code>Drop::drop</code> does not take ownership of its input,\nRust prevents misuse by not allowing you to call <code>Drop::drop</code> directly.</p>\n<p>In other words, if you tried to explicitly call <code>Drop::drop</code> in the above example, you’d get a compiler error.</p>\n<p>If you’d like to explicitly call the destructor of a value, <a href=\"../mem/fn.drop.html\" title=\"fn std::mem::drop\"><code>mem::drop</code></a> can be used instead.</p>\n<h3 id=\"drop-order\"><a class=\"doc-anchor\" href=\"#drop-order\">§</a>Drop order</h3>\n<p>Which of our two <code>HasDrop</code> drops first, though? For structs, it’s the same\norder that they’re declared: first <code>one</code>, then <code>two</code>. If you’d like to try\nthis yourself, you can modify <code>HasDrop</code> above to contain some data, like an\ninteger, and then use it in the <code>println!</code> inside of <code>Drop</code>. This behavior is\nguaranteed by the language.</p>\n<p>Unlike for structs, local variables are dropped in reverse order:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">struct </span>Foo;\n\n<span class=\"kw\">impl </span>Drop <span class=\"kw\">for </span>Foo {\n    <span class=\"kw\">fn </span>drop(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"Dropping Foo!\"</span>)\n    }\n}\n\n<span class=\"kw\">struct </span>Bar;\n\n<span class=\"kw\">impl </span>Drop <span class=\"kw\">for </span>Bar {\n    <span class=\"kw\">fn </span>drop(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"Dropping Bar!\"</span>)\n    }\n}\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"kw\">let </span>_foo = Foo;\n    <span class=\"kw\">let </span>_bar = Bar;\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Astruct+Foo;%0A%0Aimpl+Drop+for+Foo+%7B%0A++++fn+drop(%26mut+self)+%7B%0A++++++++println!(%22Dropping+Foo!%22)%0A++++%7D%0A%7D%0A%0Astruct+Bar;%0A%0Aimpl+Drop+for+Bar+%7B%0A++++fn+drop(%26mut+self)+%7B%0A++++++++println!(%22Dropping+Bar!%22)%0A++++%7D%0A%7D%0A%0Afn+main()+%7B%0A++++let+_foo+=+Foo;%0A++++let+_bar+=+Bar;%0A%7D&amp;edition=2021\">Run</a></div>\n<p>This will print</p>\n<div class=\"example-wrap\"><pre class=\"language-text\"><code>Dropping Bar!\nDropping Foo!\n</code></pre></div>\n<p>Please see <a href=\"https://doc.rust-lang.org/reference/destructors.html\">the reference</a> for the full rules.</p>\n<h3 id=\"copy-and-drop-are-exclusive\"><a class=\"doc-anchor\" href=\"#copy-and-drop-are-exclusive\">§</a><code>Copy</code> and <code>Drop</code> are exclusive</h3>\n<p>You cannot implement both <a href=\"../marker/trait.Copy.html\" title=\"trait std::marker::Copy\"><code>Copy</code></a> and <code>Drop</code> on the same type. Types that\nare <code>Copy</code> get implicitly duplicated by the compiler, making it very\nhard to predict when, and how often destructors will be executed. As such,\nthese types cannot have destructors.</p>\n<h3 id=\"drop-check\"><a class=\"doc-anchor\" href=\"#drop-check\">§</a>Drop check</h3>\n<p>Dropping interacts with the borrow checker in subtle ways: when a type <code>T</code> is being implicitly\ndropped as some variable of this type goes out of scope, the borrow checker needs to ensure that\ncalling <code>T</code>’s destructor at this moment is safe. In particular, it also needs to be safe to\nrecursively drop all the fields of <code>T</code>. For example, it is crucial that code like the following\nis being rejected:</p>\n\n<div class=\"example-wrap compile_fail\"><a href=\"#\" class=\"tooltip\" title=\"This example deliberately fails to compile\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::Cell;\n\n<span class=\"kw\">struct </span>S&lt;<span class=\"lifetime\">'a</span>&gt;(Cell&lt;<span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>S&lt;<span class=\"lifetime\">'a</span>&gt;&gt;&gt;, Box&lt;i32&gt;);\n<span class=\"kw\">impl </span>Drop <span class=\"kw\">for </span>S&lt;<span class=\"lifetime\">'_</span>&gt; {\n    <span class=\"kw\">fn </span>drop(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) {\n        <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(r) = <span class=\"self\">self</span>.<span class=\"number\">0</span>.get() {\n            <span class=\"comment\">// Print the contents of the `Box` in `r`.\n            </span><span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, r.<span class=\"number\">1</span>);\n        }\n    }\n}\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"comment\">// Set up two `S` that point to each other.\n    </span><span class=\"kw\">let </span>s1 = S(Cell::new(<span class=\"prelude-val\">None</span>), Box::new(<span class=\"number\">42</span>));\n    <span class=\"kw\">let </span>s2 = S(Cell::new(<span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span>s1)), Box::new(<span class=\"number\">42</span>));\n    s1.<span class=\"number\">0</span>.set(<span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span>s2));\n    <span class=\"comment\">// Now they both get dropped. But whichever is the 2nd one\n    // to be dropped will access the `Box` in the first one,\n    // which is a use-after-free!\n</span>}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::cell::Cell;%0A%0Astruct+S%3C'a%3E(Cell%3COption%3C%26'a+S%3C'a%3E%3E%3E,+Box%3Ci32%3E);%0Aimpl+Drop+for+S%3C'_%3E+%7B%0A++++fn+drop(%26mut+self)+%7B%0A++++++++if+let+Some(r)+=+self.0.get()+%7B%0A++++++++++++//+Print+the+contents+of+the+%60Box%60+in+%60r%60.%0A++++++++++++println!(%22%7B%7D%22,+r.1);%0A++++++++%7D%0A++++%7D%0A%7D%0A%0Afn+main()+%7B%0A++++//+Set+up+two+%60S%60+that+point+to+each+other.%0A++++let+s1+=+S(Cell::new(None),+Box::new(42));%0A++++let+s2+=+S(Cell::new(Some(%26s1)),+Box::new(42));%0A++++s1.0.set(Some(%26s2));%0A++++//+Now+they+both+get+dropped.+But+whichever+is+the+2nd+one%0A++++//+to+be+dropped+will+access+the+%60Box%60+in+the+first+one,%0A++++//+which+is+a+use-after-free!%0A%7D&amp;edition=2021\">Run</a></div>\n<p>The Nomicon discusses the need for <a href=\"../../nomicon/dropck.html\">drop check in more detail</a>.</p>\n<p>To reject such code, the “drop check” analysis determines which types and lifetimes need to\nstill be live when <code>T</code> gets dropped. The exact details of this analysis are not yet\nstably guaranteed and <strong>subject to change</strong>. Currently, the analysis works as follows:</p>\n<ul>\n<li>If <code>T</code> has no drop glue, then trivially nothing is required to be live. This is the case if\nneither <code>T</code> nor any of its (recursive) fields have a destructor (<code>impl Drop</code>). <a href=\"../marker/struct.PhantomData.html\" title=\"struct std::marker::PhantomData\"><code>PhantomData</code></a>\nand <a href=\"../mem/struct.ManuallyDrop.html\" title=\"struct std::mem::ManuallyDrop\"><code>ManuallyDrop</code></a> are considered to never have a destructor, no matter their field type.</li>\n<li>If <code>T</code> has drop glue, then, for all types <code>U</code> that are <em>owned</em> by any field of <code>T</code>,\nrecursively add the types and lifetimes that need to be live when <code>U</code> gets dropped. The set of\nowned types is determined by recursively traversing <code>T</code>:\n<ul>\n<li>Recursively descend through <code>PhantomData</code>, <code>Box</code>, tuples, and arrays (including arrays of\nlength 0).</li>\n<li>Stop at reference and raw pointer types as well as function pointers and function items;\nthey do not own anything.</li>\n<li>Stop at non-composite types (type parameters that remain generic in the current context and\nbase types such as integers and <code>bool</code>); these types are owned.</li>\n<li>When hitting an ADT with <code>impl Drop</code>, stop there; this type is owned.</li>\n<li>When hitting an ADT without <code>impl Drop</code>, recursively descend to its fields. (For an <code>enum</code>,\nconsider all fields of all variants.)</li>\n</ul>\n</li>\n<li>Furthermore, if <code>T</code> implements <code>Drop</code>, then all generic (lifetime and type) parameters of <code>T</code>\nmust be live.</li>\n</ul>\n<p>In the above example, the last clause implies that <code>'a</code> must be live when <code>S&lt;'a&gt;</code> is dropped,\nand hence the example is rejected. If we remove the <code>impl Drop</code>, the liveness requirement\ndisappears and the example is accepted.</p>\n<p>There exists an unstable way for a type to opt-out of the last clause; this is called “drop\ncheck eyepatch” or <code>may_dangle</code>. For more details on this nightly-only feature, see the\n<a href=\"../../nomicon/phantom-data.html#an-exception-the-special-case-of-the-standard-library-and-its-unstable-may_dangle\">discussion in the Nomicon</a>.</p>\n</div></details><h2 id=\"required-methods\" class=\"section-header\">Required Methods<a href=\"#required-methods\" class=\"anchor\">§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.drop\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ops/drop.rs.html#239\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Executes the destructor for this type.</p>\n<p>This method is called implicitly when the value goes out of scope,\nand cannot be called explicitly (this is compiler error <a href=\"../../error_codes/E0040.html\">E0040</a>).\nHowever, the <a href=\"../mem/fn.drop.html\" title=\"fn std::mem::drop\"><code>mem::drop</code></a> function in the prelude can be\nused to call the argument’s <code>Drop</code> implementation.</p>\n<p>When this method has been called, <code>self</code> has not yet been deallocated.\nThat only happens after the method is over.\nIf this wasn’t the case, <code>self</code> would be a dangling reference.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Implementations should generally avoid <a href=\"https://doc.rust-lang.org/1.80.0/core/macro.panic.html\" title=\"macro core::panic\"><code>panic!</code></a>ing, because <code>drop()</code> may itself be called\nduring unwinding due to a panic, and if the <code>drop()</code> panics in that situation (a “double\npanic”), this will likely abort the program. It is possible to check <a href=\"../../std/thread/fn.panicking.html\"><code>panicking()</code></a> first,\nwhich may be desirable for a <code>Drop</code> implementation that is reporting a bug of the kind\n“you didn’t finish using this before it was dropped”; but most types should simply clean up\ntheir owned allocations or other resources and return normally from <code>drop()</code>, regardless of\nwhat state they are in.</p>\n<p>Note that even if this panics, the value is considered to be dropped;\nyou must not cause <code>drop</code> to be called again. This is normally automatically\nhandled by the compiler, but when using unsafe code, can sometimes occur\nunintentionally, particularly when using <a href=\"../ptr/fn.drop_in_place.html\" title=\"fn std::ptr::drop_in_place\"><code>ptr::drop_in_place</code></a>.</p>\n</div></details></div><h2 id=\"implementors\" class=\"section-header\">Implementors<a href=\"#implementors\" class=\"anchor\">§</a></h2><div id=\"implementors-list\"><section id=\"impl-Drop-for-CString\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.13.0\">1.13.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/ffi/c_str.rs.html#702\">source</a></span><a href=\"#impl-Drop-for-CString\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Drop.html\" title=\"trait std::ops::Drop\">Drop</a> for <a class=\"struct\" href=\"../ffi/struct.CString.html\" title=\"struct std::ffi::CString\">CString</a></h3></section><section id=\"impl-Drop-for-OwnedFd\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.63.0\">1.63.0</span> · <a class=\"src\" href=\"../../src/std/os/fd/owned.rs.html#169-189\">source</a></span><a href=\"#impl-Drop-for-OwnedFd\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Drop.html\" title=\"trait std::ops::Drop\">Drop</a> for <a class=\"struct\" href=\"../os/fd/struct.OwnedFd.html\" title=\"struct std::os::fd::OwnedFd\">OwnedFd</a></h3></section><section id=\"impl-Drop-for-HandleOrInvalid\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.63.0\">1.63.0</span> · <a class=\"src\" href=\"../../src/std/os/windows/io/handle.rs.html#255-264\">source</a></span><a href=\"#impl-Drop-for-HandleOrInvalid\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Drop.html\" title=\"trait std::ops::Drop\">Drop</a> for <a class=\"struct\" href=\"../os/windows/io/struct.HandleOrInvalid.html\" title=\"struct std::os::windows::io::HandleOrInvalid\">HandleOrInvalid</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Windows</strong> only.</div></span></section><section id=\"impl-Drop-for-HandleOrNull\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.63.0\">1.63.0</span> · <a class=\"src\" href=\"../../src/std/os/windows/io/handle.rs.html#177-186\">source</a></span><a href=\"#impl-Drop-for-HandleOrNull\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Drop.html\" title=\"trait std::ops::Drop\">Drop</a> for <a class=\"struct\" href=\"../os/windows/io/struct.HandleOrNull.html\" title=\"struct std::os::windows::io::HandleOrNull\">HandleOrNull</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Windows</strong> only.</div></span></section><section id=\"impl-Drop-for-OwnedHandle\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.63.0\">1.63.0</span> · <a class=\"src\" href=\"../../src/std/os/windows/io/handle.rs.html#390-397\">source</a></span><a href=\"#impl-Drop-for-OwnedHandle\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Drop.html\" title=\"trait std::ops::Drop\">Drop</a> for <a class=\"struct\" href=\"../os/windows/io/struct.OwnedHandle.html\" title=\"struct std::os::windows::io::OwnedHandle\">OwnedHandle</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Windows</strong> only.</div></span></section><section id=\"impl-Drop-for-OwnedSocket\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.63.0\">1.63.0</span> · <a class=\"src\" href=\"../../src/std/os/windows/io/socket.rs.html#210-217\">source</a></span><a href=\"#impl-Drop-for-OwnedSocket\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Drop.html\" title=\"trait std::ops::Drop\">Drop</a> for <a class=\"struct\" href=\"../os/windows/io/struct.OwnedSocket.html\" title=\"struct std::os::windows::io::OwnedSocket\">OwnedSocket</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>Windows</strong> only.</div></span></section><section id=\"impl-Drop-for-Drain%3C'_%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2963\">source</a></span><a href=\"#impl-Drop-for-Drain%3C'_%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Drop.html\" title=\"trait std::ops::Drop\">Drop</a> for std::string::<a class=\"struct\" href=\"../string/struct.Drain.html\" title=\"struct std::string::Drain\">Drain</a>&lt;'_&gt;</h3></section><section id=\"impl-Drop-for-LocalWaker\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#852\">source</a><a href=\"#impl-Drop-for-LocalWaker\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Drop.html\" title=\"trait std::ops::Drop\">Drop</a> for <a class=\"struct\" href=\"../task/struct.LocalWaker.html\" title=\"struct std::task::LocalWaker\">LocalWaker</a></h3></section><section id=\"impl-Drop-for-Waker\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.36.0\">1.36.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/task/wake.rs.html#627\">source</a></span><a href=\"#impl-Drop-for-Waker\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.Drop.html\" title=\"trait std::ops::Drop\">Drop</a> for <a class=\"struct\" href=\"../task/struct.Waker.html\" title=\"struct std::task::Waker\">Waker</a></h3></section><section id=\"impl-Drop-for-DrainSorted%3C'a,+T,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/binary_heap/mod.rs.html#1723\">source</a><a href=\"#impl-Drop-for-DrainSorted%3C'a,+T,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, A&gt; <a class=\"trait\" href=\"trait.Drop.html\" title=\"trait std::ops::Drop\">Drop</a> for <a class=\"struct\" href=\"../collections/binary_heap/struct.DrainSorted.html\" title=\"struct std::collections::binary_heap::DrainSorted\">DrainSorted</a>&lt;'a, T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section><section id=\"impl-Drop-for-VaListImpl%3C'f%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/ffi/mod.rs.html#574\">source</a><a href=\"#impl-Drop-for-VaListImpl%3C'f%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'f&gt; <a class=\"trait\" href=\"trait.Drop.html\" title=\"trait std::ops::Drop\">Drop</a> for <a class=\"struct\" href=\"../ffi/struct.VaListImpl.html\" title=\"struct std::ffi::VaListImpl\">VaListImpl</a>&lt;'f&gt;</h3></section><section id=\"impl-Drop-for-RepeatN%3CA%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/sources/repeat_n.rs.html#105\">source</a><a href=\"#impl-Drop-for-RepeatN%3CA%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A&gt; <a class=\"trait\" href=\"trait.Drop.html\" title=\"trait std::ops::Drop\">Drop</a> for <a class=\"struct\" href=\"../iter/struct.RepeatN.html\" title=\"struct std::iter::RepeatN\">RepeatN</a>&lt;A&gt;</h3></section><section id=\"impl-Drop-for-Splice%3C'_,+I,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/splice.rs.html#54\">source</a></span><a href=\"#impl-Drop-for-Splice%3C'_,+I,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;I, A&gt; <a class=\"trait\" href=\"trait.Drop.html\" title=\"trait std::ops::Drop\">Drop</a> for <a class=\"struct\" href=\"../vec/struct.Splice.html\" title=\"struct std::vec::Splice\">Splice</a>&lt;'_, I, A&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"../iter/trait.Iterator.html\" title=\"trait std::iter::Iterator\">Iterator</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section><section id=\"impl-Drop-for-IntoIter%3CK,+V,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0\">1.7.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#1662\">source</a></span><a href=\"#impl-Drop-for-IntoIter%3CK,+V,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, A&gt; <a class=\"trait\" href=\"trait.Drop.html\" title=\"trait std::ops::Drop\">Drop</a> for std::collections::btree_map::<a class=\"struct\" href=\"../collections/btree_map/struct.IntoIter.html\" title=\"struct std::collections::btree_map::IntoIter\">IntoIter</a>&lt;K, V, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section><section id=\"impl-Drop-for-BTreeMap%3CK,+V,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0\">1.7.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/btree/map.rs.html#187\">source</a></span><a href=\"#impl-Drop-for-BTreeMap%3CK,+V,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, A&gt; <a class=\"trait\" href=\"trait.Drop.html\" title=\"trait std::ops::Drop\">Drop</a> for <a class=\"struct\" href=\"../collections/struct.BTreeMap.html\" title=\"struct std::collections::BTreeMap\">BTreeMap</a>&lt;K, V, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a> + <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section><section id=\"impl-Drop-for-ThinBox%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed/thin.rs.html#164\">source</a><a href=\"#impl-Drop-for-ThinBox%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.Drop.html\" title=\"trait std::ops::Drop\">Drop</a> for <a class=\"struct\" href=\"../boxed/struct.ThinBox.html\" title=\"struct std::boxed::ThinBox\">ThinBox</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Drop-for-UniqueRc%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/rc.rs.html#3639\">source</a><a href=\"#impl-Drop-for-UniqueRc%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.Drop.html\" title=\"trait std::ops::Drop\">Drop</a> for <a class=\"struct\" href=\"../rc/struct.UniqueRc.html\" title=\"struct std::rc::UniqueRc\">UniqueRc</a>&lt;T&gt;</h3></section><section id=\"impl-Drop-for-OnceLock%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> · <a class=\"src\" href=\"../../src/std/sync/once_lock.rs.html#611-621\">source</a></span><a href=\"#impl-Drop-for-OnceLock%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"trait.Drop.html\" title=\"trait std::ops::Drop\">Drop</a> for <a class=\"struct\" href=\"../sync/struct.OnceLock.html\" title=\"struct std::sync::OnceLock\">OnceLock</a>&lt;T&gt;</h3></section><section id=\"impl-Drop-for-Box%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/boxed.rs.html#1278\">source</a></span><a href=\"#impl-Drop-for-Box%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"trait.Drop.html\" title=\"trait std::ops::Drop\">Drop</a> for <a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Drop-for-PeekMut%3C'_,+T,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/binary_heap/mod.rs.html#310\">source</a></span><a href=\"#impl-Drop-for-PeekMut%3C'_,+T,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"trait.Drop.html\" title=\"trait std::ops::Drop\">Drop</a> for <a class=\"struct\" href=\"../collections/binary_heap/struct.PeekMut.html\" title=\"struct std::collections::binary_heap::PeekMut\">PeekMut</a>&lt;'_, T, A&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../cmp/trait.Ord.html\" title=\"trait std::cmp::Ord\">Ord</a>,\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section><section id=\"impl-Drop-for-LinkedList%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/linked_list.rs.html#1170\">source</a></span><a href=\"#impl-Drop-for-LinkedList%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"trait.Drop.html\" title=\"trait std::ops::Drop\">Drop</a> for <a class=\"struct\" href=\"../collections/struct.LinkedList.html\" title=\"struct std::collections::LinkedList\">LinkedList</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section><section id=\"impl-Drop-for-VecDeque%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/mod.rs.html#127\">source</a></span><a href=\"#impl-Drop-for-VecDeque%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"trait.Drop.html\" title=\"trait std::ops::Drop\">Drop</a> for <a class=\"struct\" href=\"../collections/struct.VecDeque.html\" title=\"struct std::collections::VecDeque\">VecDeque</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section><section id=\"impl-Drop-for-Drain%3C'_,+T,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/collections/vec_deque/drain.rs.html#94\">source</a></span><a href=\"#impl-Drop-for-Drain%3C'_,+T,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"trait.Drop.html\" title=\"trait std::ops::Drop\">Drop</a> for std::collections::vec_deque::<a class=\"struct\" href=\"../collections/vec_deque/struct.Drain.html\" title=\"struct std::collections::vec_deque::Drain\">Drain</a>&lt;'_, T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section><section id=\"impl-Drop-for-Rc%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/rc.rs.html#2162\">source</a></span><a href=\"#impl-Drop-for-Rc%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"trait.Drop.html\" title=\"trait std::ops::Drop\">Drop</a> for <a class=\"struct\" href=\"../rc/struct.Rc.html\" title=\"struct std::rc::Rc\">Rc</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Drop-for-Weak%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/rc.rs.html#3287\">source</a></span><a href=\"#impl-Drop-for-Weak%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"trait.Drop.html\" title=\"trait std::ops::Drop\">Drop</a> for std::rc::<a class=\"struct\" href=\"../rc/struct.Weak.html\" title=\"struct std::rc::Weak\">Weak</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Drop-for-Arc%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#2432\">source</a></span><a href=\"#impl-Drop-for-Arc%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"trait.Drop.html\" title=\"trait std::ops::Drop\">Drop</a> for <a class=\"struct\" href=\"../sync/struct.Arc.html\" title=\"struct std::sync::Arc\">Arc</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Drop-for-Weak%3CT,+A%3E-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.4.0\">1.4.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/sync.rs.html#3097\">source</a></span><a href=\"#impl-Drop-for-Weak%3CT,+A%3E-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"trait.Drop.html\" title=\"trait std::ops::Drop\">Drop</a> for std::sync::<a class=\"struct\" href=\"../sync/struct.Weak.html\" title=\"struct std::sync::Weak\">Weak</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section><section id=\"impl-Drop-for-Drain%3C'_,+T,+A%3E-1\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.6.0\">1.6.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/drain.rs.html#174\">source</a></span><a href=\"#impl-Drop-for-Drain%3C'_,+T,+A%3E-1\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"trait.Drop.html\" title=\"trait std::ops::Drop\">Drop</a> for std::vec::<a class=\"struct\" href=\"../vec/struct.Drain.html\" title=\"struct std::vec::Drain\">Drain</a>&lt;'_, T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section><section id=\"impl-Drop-for-IntoIter%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/into_iter.rs.html#480\">source</a></span><a href=\"#impl-Drop-for-IntoIter%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"trait.Drop.html\" title=\"trait std::ops::Drop\">Drop</a> for std::vec::<a class=\"struct\" href=\"../vec/struct.IntoIter.html\" title=\"struct std::vec::IntoIter\">IntoIter</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section><section id=\"impl-Drop-for-Vec%3CT,+A%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/mod.rs.html#3275\">source</a></span><a href=\"#impl-Drop-for-Vec%3CT,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, A&gt; <a class=\"trait\" href=\"trait.Drop.html\" title=\"trait std::ops::Drop\">Drop</a> for <a class=\"struct\" href=\"../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;T, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,</div></h3></section><section id=\"impl-Drop-for-LazyLock%3CT,+F%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.80.0\">1.80.0</span> · <a class=\"src\" href=\"../../src/std/sync/lazy_lock.rs.html#192-202\">source</a></span><a href=\"#impl-Drop-for-LazyLock%3CT,+F%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, F&gt; <a class=\"trait\" href=\"trait.Drop.html\" title=\"trait std::ops::Drop\">Drop</a> for <a class=\"struct\" href=\"../sync/struct.LazyLock.html\" title=\"struct std::sync::LazyLock\">LazyLock</a>&lt;T, F&gt;</h3></section><section id=\"impl-Drop-for-ExtractIf%3C'_,+T,+F,+A%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/vec/extract_if.rs.html#91-93\">source</a><a href=\"#impl-Drop-for-ExtractIf%3C'_,+T,+F,+A%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, F, A&gt; <a class=\"trait\" href=\"trait.Drop.html\" title=\"trait std::ops::Drop\">Drop</a> for <a class=\"struct\" href=\"../vec/struct.ExtractIf.html\" title=\"struct std::vec::ExtractIf\">ExtractIf</a>&lt;'_, T, F, A&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"../alloc/trait.Allocator.html\" title=\"trait std::alloc::Allocator\">Allocator</a>,\n    F: <a class=\"trait\" href=\"trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>,</div></h3></section><section id=\"impl-Drop-for-IntoIter%3CT,+N%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.40.0\">1.40.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/array/iter.rs.html#355\">source</a></span><a href=\"#impl-Drop-for-IntoIter%3CT,+N%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, const N: <a class=\"primitive\" href=\"../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"trait.Drop.html\" title=\"trait std::ops::Drop\">Drop</a> for std::array::<a class=\"struct\" href=\"../array/struct.IntoIter.html\" title=\"struct std::array::IntoIter\">IntoIter</a>&lt;T, N&gt;</h3></section><section id=\"impl-Drop-for-MappedMutexGuard%3C'_,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/sync/mutex.rs.html#662-670\">source</a><a href=\"#impl-Drop-for-MappedMutexGuard%3C'_,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"trait.Drop.html\" title=\"trait std::ops::Drop\">Drop</a> for <a class=\"struct\" href=\"../sync/struct.MappedMutexGuard.html\" title=\"struct std::sync::MappedMutexGuard\">MappedMutexGuard</a>&lt;'_, T&gt;</h3></section><section id=\"impl-Drop-for-MappedRwLockReadGuard%3C'_,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/sync/rwlock.rs.html#733-741\">source</a><a href=\"#impl-Drop-for-MappedRwLockReadGuard%3C'_,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"trait.Drop.html\" title=\"trait std::ops::Drop\">Drop</a> for <a class=\"struct\" href=\"../sync/struct.MappedRwLockReadGuard.html\" title=\"struct std::sync::MappedRwLockReadGuard\">MappedRwLockReadGuard</a>&lt;'_, T&gt;</h3></section><section id=\"impl-Drop-for-MappedRwLockWriteGuard%3C'_,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/sync/rwlock.rs.html#744-753\">source</a><a href=\"#impl-Drop-for-MappedRwLockWriteGuard%3C'_,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"trait.Drop.html\" title=\"trait std::ops::Drop\">Drop</a> for <a class=\"struct\" href=\"../sync/struct.MappedRwLockWriteGuard.html\" title=\"struct std::sync::MappedRwLockWriteGuard\">MappedRwLockWriteGuard</a>&lt;'_, T&gt;</h3></section><section id=\"impl-Drop-for-MutexGuard%3C'_,+T%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/sync/mutex.rs.html#546-554\">source</a></span><a href=\"#impl-Drop-for-MutexGuard%3C'_,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"trait.Drop.html\" title=\"trait std::ops::Drop\">Drop</a> for <a class=\"struct\" href=\"../sync/struct.MutexGuard.html\" title=\"struct std::sync::MutexGuard\">MutexGuard</a>&lt;'_, T&gt;</h3></section><section id=\"impl-Drop-for-ReentrantLockGuard%3C'_,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/sync/reentrant_lock.rs.html#302-314\">source</a><a href=\"#impl-Drop-for-ReentrantLockGuard%3C'_,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"trait.Drop.html\" title=\"trait std::ops::Drop\">Drop</a> for <a class=\"struct\" href=\"../sync/struct.ReentrantLockGuard.html\" title=\"struct std::sync::ReentrantLockGuard\">ReentrantLockGuard</a>&lt;'_, T&gt;</h3></section><section id=\"impl-Drop-for-RwLockReadGuard%3C'_,+T%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/sync/rwlock.rs.html#712-719\">source</a></span><a href=\"#impl-Drop-for-RwLockReadGuard%3C'_,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"trait.Drop.html\" title=\"trait std::ops::Drop\">Drop</a> for <a class=\"struct\" href=\"../sync/struct.RwLockReadGuard.html\" title=\"struct std::sync::RwLockReadGuard\">RwLockReadGuard</a>&lt;'_, T&gt;</h3></section><section id=\"impl-Drop-for-RwLockWriteGuard%3C'_,+T%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/sync/rwlock.rs.html#722-730\">source</a></span><a href=\"#impl-Drop-for-RwLockWriteGuard%3C'_,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"trait.Drop.html\" title=\"trait std::ops::Drop\">Drop</a> for <a class=\"struct\" href=\"../sync/struct.RwLockWriteGuard.html\" title=\"struct std::sync::RwLockWriteGuard\">RwLockWriteGuard</a>&lt;'_, T&gt;</h3></section><section id=\"impl-Drop-for-BufWriter%3CW%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/io/buffered/bufwriter.rs.html#671-678\">source</a></span><a href=\"#impl-Drop-for-BufWriter%3CW%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;W: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"../io/trait.Write.html\" title=\"trait std::io::Write\">Write</a>&gt; <a class=\"trait\" href=\"trait.Drop.html\" title=\"trait std::ops::Drop\">Drop</a> for <a class=\"struct\" href=\"../io/struct.BufWriter.html\" title=\"struct std::io::BufWriter\">BufWriter</a>&lt;W&gt;</h3></section></div><script src=\"../../trait.impl/core/ops/drop/trait.Drop.js\" data-ignore-extern-crates=\"alloc,core\" async=\"\"></script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:09:09.805Z"
}