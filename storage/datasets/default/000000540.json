{
	"title": "ReverseSearcher in std::str::pattern - Rust",
	"url": "https://doc.rust-lang.org/stable/std/str/pattern/trait.ReverseSearcher.html",
	"markdown": "# ReverseSearcher in std::str::pattern - Rust\n\n```\npub unsafe trait ReverseSearcher<'a>: Searcher<'a> {\n    // Required method\n    fn next_back(&mut self) -> SearchStep;\n\n    // Provided methods\n    fn next_match_back(&mut self) -> Option<(usize, usize)> { ... }\n    fn next_reject_back(&mut self) -> Option<(usize, usize)> { ... }\n}\n```\n\nðŸ”¬This is a nightly-only experimental API. (`pattern`Â [#27721](https://github.com/rust-lang/rust/issues/27721))\n\nExpand description\n\nA reverse searcher for a string pattern.\n\nThis trait provides methods for searching for non-overlapping matches of a pattern starting from the back (right) of a string.\n\nIt will be implemented by associated [`Searcher`](trait.Searcher.html \"trait std::str::pattern::Searcher\") types of the [`Pattern`](trait.Pattern.html \"trait std::str::pattern::Pattern\") trait if the pattern supports searching for it from the back.\n\nThe index ranges returned by this trait are not required to exactly match those of the forward search in reverse.\n\nFor the reason why this trait is marked unsafe, see the parent trait [`Searcher`](trait.Searcher.html \"trait std::str::pattern::Searcher\").\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#296)\n\nðŸ”¬This is a nightly-only experimental API. (`pattern`Â [#27721](https://github.com/rust-lang/rust/issues/27721))\n\nPerforms the next search step starting from the back.\n\n-   Returns [`Match(a, b)`](about:blank/enum.SearchStep.html#variant.Match \"variant std::str::pattern::SearchStep::Match\") if `haystack[a..b]` matches the pattern.\n-   Returns [`Reject(a, b)`](about:blank/enum.SearchStep.html#variant.Reject \"variant std::str::pattern::SearchStep::Reject\") if `haystack[a..b]` can not match the pattern, even partially.\n-   Returns [`Done`](about:blank/enum.SearchStep.html#variant.Done \"variant std::str::pattern::SearchStep::Done\") if every byte of the haystack has been visited\n\nThe stream of [`Match`](about:blank/enum.SearchStep.html#variant.Match \"variant std::str::pattern::SearchStep::Match\") and [`Reject`](about:blank/enum.SearchStep.html#variant.Reject \"variant std::str::pattern::SearchStep::Reject\") values up to a [`Done`](about:blank/enum.SearchStep.html#variant.Done \"variant std::str::pattern::SearchStep::Done\") will contain index ranges that are adjacent, non-overlapping, covering the whole haystack, and laying on utf8 boundaries.\n\nA [`Match`](about:blank/enum.SearchStep.html#variant.Match \"variant std::str::pattern::SearchStep::Match\") result needs to contain the whole matched pattern, however [`Reject`](about:blank/enum.SearchStep.html#variant.Reject \"variant std::str::pattern::SearchStep::Reject\") results may be split up into arbitrary many adjacent fragments. Both ranges may have zero length.\n\nAs an example, the pattern `\"aaa\"` and the haystack `\"cbaaaaab\"` might produce the stream `[Reject(7, 8), Match(4, 7), Reject(1, 4), Reject(0, 1)]`.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#301)\n\nðŸ”¬This is a nightly-only experimental API. (`pattern`Â [#27721](https://github.com/rust-lang/rust/issues/27721))\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#314)\n\nðŸ”¬This is a nightly-only experimental API. (`pattern`Â [#27721](https://github.com/rust-lang/rust/issues/27721))",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A reverse searcher for a string pattern.\"><title>ReverseSearcher in std::str::pattern - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../../\" data-static-root-path=\"../../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc trait\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">ReverseSearcher</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../../std/index.html\"><img class=\"rust-logo\" src=\"../../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">ReverseSearcher</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#required-methods\">Required Methods</a></h3><ul class=\"block\"><li><a href=\"#tymethod.next_back\">next_back</a></li></ul><h3><a href=\"#provided-methods\">Provided Methods</a></h3><ul class=\"block\"><li><a href=\"#method.next_match_back\">next_match_back</a></li><li><a href=\"#method.next_reject_back\">next_reject_back</a></li></ul><h3><a href=\"#implementors\">Implementors</a></h3></section><h2><a href=\"index.html\">In std::str::pattern</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.CharArrayRefSearcher.html\">CharArrayRefSearcher</a></li><li><a href=\"struct.CharArraySearcher.html\">CharArraySearcher</a></li><li><a href=\"struct.CharPredicateSearcher.html\">CharPredicateSearcher</a></li><li><a href=\"struct.CharSearcher.html\">CharSearcher</a></li><li><a href=\"struct.CharSliceSearcher.html\">CharSliceSearcher</a></li><li><a href=\"struct.StrSearcher.html\">StrSearcher</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.SearchStep.html\">SearchStep</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.DoubleEndedSearcher.html\">DoubleEndedSearcher</a></li><li><a href=\"trait.Pattern.html\">Pattern</a></li><li><a href=\"trait.ReverseSearcher.html\">ReverseSearcher</a></li><li><a href=\"trait.Searcher.html\">Searcher</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type â€˜Sâ€™ or â€˜/â€™ to search, â€˜?â€™ for more optionsâ€¦\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Trait <a href=\"../../index.html\">std</a>::<wbr><a href=\"../index.html\">str</a>::<wbr><a href=\"index.html\">pattern</a>::<wbr><a class=\"trait\" href=\"#\">ReverseSearcher</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#274\">source</a> Â· <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>âˆ’</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub unsafe trait ReverseSearcher&lt;'a&gt;: <a class=\"trait\" href=\"trait.Searcher.html\" title=\"trait std::str::pattern::Searcher\">Searcher</a>&lt;'a&gt; {\n    // Required method\n    fn <a href=\"#tymethod.next_back\" class=\"fn\">next_back</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"enum.SearchStep.html\" title=\"enum std::str::pattern::SearchStep\">SearchStep</a>;\n\n    // Provided methods\n    fn <a href=\"#method.next_match_back\" class=\"fn\">next_match_back</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;(<a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>)&gt; { ... }\n<span class=\"item-spacer\"></span>    fn <a href=\"#method.next_reject_back\" class=\"fn\">next_reject_back</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;(<a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>)&gt; { ... }\n}</code></pre><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27721\">#27721</a>)</span></div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A reverse searcher for a string pattern.</p>\n<p>This trait provides methods for searching for non-overlapping\nmatches of a pattern starting from the back (right) of a string.</p>\n<p>It will be implemented by associated <a href=\"trait.Searcher.html\" title=\"trait std::str::pattern::Searcher\"><code>Searcher</code></a>\ntypes of the <a href=\"trait.Pattern.html\" title=\"trait std::str::pattern::Pattern\"><code>Pattern</code></a> trait if the pattern supports searching\nfor it from the back.</p>\n<p>The index ranges returned by this trait are not required\nto exactly match those of the forward search in reverse.</p>\n<p>For the reason why this trait is marked unsafe, see the\nparent trait <a href=\"trait.Searcher.html\" title=\"trait std::str::pattern::Searcher\"><code>Searcher</code></a>.</p>\n</div></details><h2 id=\"required-methods\" class=\"section-header\">Required Methods<a href=\"#required-methods\" class=\"anchor\">Â§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.next_back\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#296\">source</a><h4 class=\"code-header\">fn <a href=\"#tymethod.next_back\" class=\"fn\">next_back</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"enum.SearchStep.html\" title=\"enum std::str::pattern::SearchStep\">SearchStep</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27721\">#27721</a>)</span></div></span></summary><div class=\"docblock\"><p>Performs the next search step starting from the back.</p>\n<ul>\n<li>Returns <a href=\"enum.SearchStep.html#variant.Match\" title=\"variant std::str::pattern::SearchStep::Match\"><code>Match(a, b)</code></a> if <code>haystack[a..b]</code>\nmatches the pattern.</li>\n<li>Returns <a href=\"enum.SearchStep.html#variant.Reject\" title=\"variant std::str::pattern::SearchStep::Reject\"><code>Reject(a, b)</code></a> if <code>haystack[a..b]</code>\ncan not match the pattern, even partially.</li>\n<li>Returns <a href=\"enum.SearchStep.html#variant.Done\" title=\"variant std::str::pattern::SearchStep::Done\"><code>Done</code></a> if every byte of the haystack\nhas been visited</li>\n</ul>\n<p>The stream of <a href=\"enum.SearchStep.html#variant.Match\" title=\"variant std::str::pattern::SearchStep::Match\"><code>Match</code></a> and\n<a href=\"enum.SearchStep.html#variant.Reject\" title=\"variant std::str::pattern::SearchStep::Reject\"><code>Reject</code></a> values up to a <a href=\"enum.SearchStep.html#variant.Done\" title=\"variant std::str::pattern::SearchStep::Done\"><code>Done</code></a>\nwill contain index ranges that are adjacent, non-overlapping,\ncovering the whole haystack, and laying on utf8 boundaries.</p>\n<p>A <a href=\"enum.SearchStep.html#variant.Match\" title=\"variant std::str::pattern::SearchStep::Match\"><code>Match</code></a> result needs to contain the whole matched\npattern, however <a href=\"enum.SearchStep.html#variant.Reject\" title=\"variant std::str::pattern::SearchStep::Reject\"><code>Reject</code></a> results may be split up\ninto arbitrary many adjacent fragments. Both ranges may have zero length.</p>\n<p>As an example, the pattern <code>\"aaa\"</code> and the haystack <code>\"cbaaaaab\"</code>\nmight produce the stream\n<code>[Reject(7, 8), Match(4, 7), Reject(1, 4), Reject(0, 1)]</code>.</p>\n</div></details></div><h2 id=\"provided-methods\" class=\"section-header\">Provided Methods<a href=\"#provided-methods\" class=\"anchor\">Â§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.next_match_back\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#301\">source</a><h4 class=\"code-header\">fn <a href=\"#method.next_match_back\" class=\"fn\">next_match_back</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;(<a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>)&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27721\">#27721</a>)</span></div></span></summary><div class=\"docblock\"><p>Finds the next <a href=\"enum.SearchStep.html#variant.Match\" title=\"variant std::str::pattern::SearchStep::Match\"><code>Match</code></a> result.\nSee <a href=\"trait.ReverseSearcher.html#tymethod.next_back\" title=\"method std::str::pattern::ReverseSearcher::next_back\"><code>next_back()</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.next_reject_back\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#314\">source</a><h4 class=\"code-header\">fn <a href=\"#method.next_reject_back\" class=\"fn\">next_reject_back</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"../../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;(<a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>)&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>pattern</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/27721\">#27721</a>)</span></div></span></summary><div class=\"docblock\"><p>Finds the next <a href=\"enum.SearchStep.html#variant.Reject\" title=\"variant std::str::pattern::SearchStep::Reject\"><code>Reject</code></a> result.\nSee <a href=\"trait.ReverseSearcher.html#tymethod.next_back\" title=\"method std::str::pattern::ReverseSearcher::next_back\"><code>next_back()</code></a>.</p>\n</div></details></div><h2 id=\"implementors\" class=\"section-header\">Implementors<a href=\"#implementors\" class=\"anchor\">Â§</a></h2><div id=\"implementors-list\"><section id=\"impl-ReverseSearcher%3C'a%3E-for-CharSearcher%3C'a%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#463\">source</a><a href=\"#impl-ReverseSearcher%3C'a%3E-for-CharSearcher%3C'a%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"trait.ReverseSearcher.html\" title=\"trait std::str::pattern::ReverseSearcher\">ReverseSearcher</a>&lt;'a&gt; for <a class=\"struct\" href=\"struct.CharSearcher.html\" title=\"struct std::str::pattern::CharSearcher\">CharSearcher</a>&lt;'a&gt;</h3></section><section id=\"impl-ReverseSearcher%3C'a%3E-for-CharSliceSearcher%3C'a,+'b%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#859\">source</a><a href=\"#impl-ReverseSearcher%3C'a%3E-for-CharSliceSearcher%3C'a,+'b%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"trait.ReverseSearcher.html\" title=\"trait std::str::pattern::ReverseSearcher\">ReverseSearcher</a>&lt;'a&gt; for <a class=\"struct\" href=\"struct.CharSliceSearcher.html\" title=\"struct std::str::pattern::CharSliceSearcher\">CharSliceSearcher</a>&lt;'a, 'b&gt;</h3></section><section id=\"impl-ReverseSearcher%3C'a%3E-for-StrSearcher%3C'a,+'b%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#1168\">source</a><a href=\"#impl-ReverseSearcher%3C'a%3E-for-StrSearcher%3C'a,+'b%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, 'b&gt; <a class=\"trait\" href=\"trait.ReverseSearcher.html\" title=\"trait std::str::pattern::ReverseSearcher\">ReverseSearcher</a>&lt;'a&gt; for <a class=\"struct\" href=\"struct.StrSearcher.html\" title=\"struct std::str::pattern::StrSearcher\">StrSearcher</a>&lt;'a, 'b&gt;</h3></section><section id=\"impl-ReverseSearcher%3C'a%3E-for-CharArrayRefSearcher%3C'a,+'b,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#839\">source</a><a href=\"#impl-ReverseSearcher%3C'a%3E-for-CharArrayRefSearcher%3C'a,+'b,+N%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, 'b, const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"trait.ReverseSearcher.html\" title=\"trait std::str::pattern::ReverseSearcher\">ReverseSearcher</a>&lt;'a&gt; for <a class=\"struct\" href=\"struct.CharArrayRefSearcher.html\" title=\"struct std::str::pattern::CharArrayRefSearcher\">CharArrayRefSearcher</a>&lt;'a, 'b, N&gt;</h3></section><section id=\"impl-ReverseSearcher%3C'a%3E-for-CharPredicateSearcher%3C'a,+F%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#905-907\">source</a><a href=\"#impl-ReverseSearcher%3C'a%3E-for-CharPredicateSearcher%3C'a,+F%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, F&gt; <a class=\"trait\" href=\"trait.ReverseSearcher.html\" title=\"trait std::str::pattern::ReverseSearcher\">ReverseSearcher</a>&lt;'a&gt; for <a class=\"struct\" href=\"struct.CharPredicateSearcher.html\" title=\"struct std::str::pattern::CharPredicateSearcher\">CharPredicateSearcher</a>&lt;'a, F&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../../ops/trait.FnMut.html\" title=\"trait std::ops::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"../../primitive.char.html\">char</a>) -&gt; <a class=\"primitive\" href=\"../../primitive.bool.html\">bool</a>,</div></h3></section><section id=\"impl-ReverseSearcher%3C'a%3E-for-CharArraySearcher%3C'a,+N%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/str/pattern.rs.html#817\">source</a><a href=\"#impl-ReverseSearcher%3C'a%3E-for-CharArraySearcher%3C'a,+N%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a, const N: <a class=\"primitive\" href=\"../../primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"trait.ReverseSearcher.html\" title=\"trait std::str::pattern::ReverseSearcher\">ReverseSearcher</a>&lt;'a&gt; for <a class=\"struct\" href=\"struct.CharArraySearcher.html\" title=\"struct std::str::pattern::CharArraySearcher\">CharArraySearcher</a>&lt;'a, N&gt;</h3></section></div><script src=\"../../../trait.impl/core/str/pattern/trait.ReverseSearcher.js\" data-ignore-extern-crates=\"core\" async=\"\"></script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:12:09.367Z"
}