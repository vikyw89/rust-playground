{
	"title": "Once in std::sync - Rust",
	"url": "https://doc.rust-lang.org/stable/std/sync/struct.Once.html",
	"markdown": "# Once in std::sync - Rust\n\n## Struct [std](../index.html)::[sync](index.html)::[Once](#)\n\n1.0.0 · [source](about:blank/src/std/sync/once.rs.html#29-31) ·\n\n```\npub struct Once { /* private fields */ }\n```\n\nExpand description\n\nA synchronization primitive which can be used to run a one-time global initialization. Useful for one-time initialization for FFI or related functionality. This type can only be constructed with [`Once::new()`](about:blank/struct.Once.html#method.new \"associated function std::sync::Once::new\").\n\n## [§](#examples)Examples\n\n```\nuse std::sync::Once;\n\nstatic START: Once = Once::new();\n\nSTART.call_once(|| {\n    // run initialization here\n});\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::Once;%0A++++%0A++++static+START:+Once+=+Once::new();%0A++++%0A++++START.call_once(%7C%7C+%7B%0A++++++++//+run+initialization+here%0A++++%7D);%0A%7D&edition=2021)\n\n[source](about:blank/src/std/sync/once.rs.html#69-267)[§](#impl-Once)\n\n1.2.0 (const: 1.32.0) · [source](about:blank/src/std/sync/once.rs.html#75-77)\n\nCreates a new `Once` value.\n\n1.0.0 · [source](about:blank/src/std/sync/once.rs.html#139-150)\n\nPerforms an initialization routine once and only once. The given closure will be executed if this is the first time `call_once` has been called, and otherwise the routine will _not_ be invoked.\n\nThis method will block the calling thread if another initialization routine is currently running.\n\nWhen this function returns, it is guaranteed that some initialization has run and completed (it might not be the closure specified). It is also guaranteed that any memory writes performed by the executed closure can be reliably observed by other threads at this point (there is a happens-before relation between the closure and code executing after the return).\n\nIf the given closure recursively invokes `call_once` on the same [`Once`](struct.Once.html \"struct std::sync::Once\") instance, the exact behavior is not specified: allowed outcomes are a panic or a deadlock.\n\n##### [§](#examples-1)Examples\n\n```\nuse std::sync::Once;\n\nstatic mut VAL: usize = 0;\nstatic INIT: Once = Once::new();\n\n// Accessing a `static mut` is unsafe much of the time, but if we do so\n// in a synchronized fashion (e.g., write once or read all) then we're\n// good to go!\n//\n// This function will only call `expensive_computation` once, and will\n// otherwise always return the value returned from the first invocation.\nfn get_cached_val() -> usize {\n    unsafe {\n        INIT.call_once(|| {\n            VAL = expensive_computation();\n        });\n        VAL\n    }\n}\n\nfn expensive_computation() -> usize {\n    // ...\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::Once;%0A++++%0A++++static+mut+VAL:+usize+=+0;%0A++++static+INIT:+Once+=+Once::new();%0A++++%0A++++//+Accessing+a+%60static+mut%60+is+unsafe+much+of+the+time,+but+if+we+do+so%0A++++//+in+a+synchronized+fashion+(e.g.,+write+once+or+read+all)+then+we%27re%0A++++//+good+to+go!%0A++++//%0A++++//+This+function+will+only+call+%60expensive_computation%60+once,+and+will%0A++++//+otherwise+always+return+the+value+returned+from+the+first+invocation.%0A++++fn+get_cached_val()+-%3E+usize+%7B%0A++++++++unsafe+%7B%0A++++++++++++INIT.call_once(%7C%7C+%7B%0A++++++++++++++++VAL+=+expensive_computation();%0A++++++++++++%7D);%0A++++++++++++VAL%0A++++++++%7D%0A++++%7D%0A++++%0A++++fn+expensive_computation()+-%3E+usize+%7B%0A++++++++//+...%0A++++2%0A++++%7D%0A%7D&edition=2021)\n\n##### [§](#panics)Panics\n\nThe closure `f` will only be executed once even if this is called concurrently amongst many threads. If that closure panics, however, then it will _poison_ this [`Once`](struct.Once.html \"struct std::sync::Once\") instance, causing all future invocations of `call_once` to also panic.\n\nThis is similar to [poisoning with mutexes](about:blank/struct.Mutex.html#poisoning).\n\n1.51.0 · [source](about:blank/src/std/sync/once.rs.html#198-209)\n\nPerforms the same function as [`call_once()`](about:blank/struct.Once.html#method.call_once \"method std::sync::Once::call_once\") except ignores poisoning.\n\nUnlike [`call_once()`](about:blank/struct.Once.html#method.call_once \"method std::sync::Once::call_once\"), if this [`Once`](struct.Once.html \"struct std::sync::Once\") has been poisoned (i.e., a previous call to [`call_once()`](about:blank/struct.Once.html#method.call_once \"method std::sync::Once::call_once\") or [`call_once_force()`](about:blank/struct.Once.html#method.call_once_force \"method std::sync::Once::call_once_force\") caused a panic), calling [`call_once_force()`](about:blank/struct.Once.html#method.call_once_force \"method std::sync::Once::call_once_force\") will still invoke the closure `f` and will _not_ result in an immediate panic. If `f` panics, the [`Once`](struct.Once.html \"struct std::sync::Once\") will remain in a poison state. If `f` does _not_ panic, the [`Once`](struct.Once.html \"struct std::sync::Once\") will no longer be in a poison state and all future calls to [`call_once()`](about:blank/struct.Once.html#method.call_once \"method std::sync::Once::call_once\") or [`call_once_force()`](about:blank/struct.Once.html#method.call_once_force \"method std::sync::Once::call_once_force\") will be no-ops.\n\nThe closure `f` is yielded a [`OnceState`](struct.OnceState.html \"struct std::sync::OnceState\") structure which can be used to query the poison status of the [`Once`](struct.Once.html \"struct std::sync::Once\").\n\n##### [§](#examples-2)Examples\n\n```\nuse std::sync::Once;\nuse std::thread;\n\nstatic INIT: Once = Once::new();\n\n// poison the once\nlet handle = thread::spawn(|| {\n    INIT.call_once(|| panic!());\n});\nassert!(handle.join().is_err());\n\n// poisoning propagates\nlet handle = thread::spawn(|| {\n    INIT.call_once(|| {});\n});\nassert!(handle.join().is_err());\n\n// call_once_force will still run and reset the poisoned state\nINIT.call_once_force(|state| {\n    assert!(state.is_poisoned());\n});\n\n// once any success happens, we stop propagating the poison\nINIT.call_once(|| {});\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::Once;%0A++++use+std::thread;%0A++++%0A++++static+INIT:+Once+=+Once::new();%0A++++%0A++++//+poison+the+once%0A++++let+handle+=+thread::spawn(%7C%7C+%7B%0A++++++++INIT.call_once(%7C%7C+panic!());%0A++++%7D);%0A++++assert!(handle.join().is_err());%0A++++%0A++++//+poisoning+propagates%0A++++let+handle+=+thread::spawn(%7C%7C+%7B%0A++++++++INIT.call_once(%7C%7C+%7B%7D);%0A++++%7D);%0A++++assert!(handle.join().is_err());%0A++++%0A++++//+call_once_force+will+still+run+and+reset+the+poisoned+state%0A++++INIT.call_once_force(%7Cstate%7C+%7B%0A++++++++assert!(state.is_poisoned());%0A++++%7D);%0A++++%0A++++//+once+any+success+happens,+we+stop+propagating+the+poison%0A++++INIT.call_once(%7C%7C+%7B%7D);%0A%7D&edition=2021)\n\n1.43.0 · [source](about:blank/src/std/sync/once.rs.html#254-256)\n\nReturns `true` if some [`call_once()`](about:blank/struct.Once.html#method.call_once \"method std::sync::Once::call_once\") call has completed successfully. Specifically, `is_completed` will return false in the following situations:\n\n-   [`call_once()`](about:blank/struct.Once.html#method.call_once \"method std::sync::Once::call_once\") was not called at all,\n-   [`call_once()`](about:blank/struct.Once.html#method.call_once \"method std::sync::Once::call_once\") was called, but has not yet completed,\n-   the [`Once`](struct.Once.html \"struct std::sync::Once\") instance is poisoned\n\nThis function returning `false` does not mean that [`Once`](struct.Once.html \"struct std::sync::Once\") has not been executed. For example, it may have been executed in the time between when `is_completed` starts executing and when it returns, in which case the `false` return value would be stale (but still permissible).\n\n##### [§](#examples-3)Examples\n\n```\nuse std::sync::Once;\n\nstatic INIT: Once = Once::new();\n\nassert_eq!(INIT.is_completed(), false);\nINIT.call_once(|| {\n    assert_eq!(INIT.is_completed(), false);\n});\nassert_eq!(INIT.is_completed(), true);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::Once;%0A++++%0A++++static+INIT:+Once+=+Once::new();%0A++++%0A++++assert_eq!(INIT.is_completed(),+false);%0A++++INIT.call_once(%7C%7C+%7B%0A++++++++assert_eq!(INIT.is_completed(),+false);%0A++++%7D);%0A++++assert_eq!(INIT.is_completed(),+true);%0A%7D&edition=2021)\n\n```\nuse std::sync::Once;\nuse std::thread;\n\nstatic INIT: Once = Once::new();\n\nassert_eq!(INIT.is_completed(), false);\nlet handle = thread::spawn(|| {\n    INIT.call_once(|| panic!());\n});\nassert!(handle.join().is_err());\nassert_eq!(INIT.is_completed(), false);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::Once;%0A++++use+std::thread;%0A++++%0A++++static+INIT:+Once+=+Once::new();%0A++++%0A++++assert_eq!(INIT.is_completed(),+false);%0A++++let+handle+=+thread::spawn(%7C%7C+%7B%0A++++++++INIT.call_once(%7C%7C+panic!());%0A++++%7D);%0A++++assert!(handle.join().is_err());%0A++++assert_eq!(INIT.is_completed(),+false);%0A%7D&edition=2021)\n\n[§](#impl-Freeze-for-Once)\n\n[§](#impl-Send-for-Once)\n\n[§](#impl-Sync-for-Once)\n\n[§](#impl-Unpin-for-Once)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[§](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[§](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[§](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[§](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[§](#method.from)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[§](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[§](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[§](#impl-TryFrom%3CU%3E-for-T)\n\n[§](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[§](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[§](#impl-TryInto%3CU%3E-for-T)\n\n[§](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[§](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A synchronization primitive which can be used to run a one-time global initialization. Useful for one-time initialization for FFI or related functionality. This type can only be constructed with `Once::new()`.\"><title>Once in std::sync - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Once</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Once</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.call_once\">call_once</a></li><li><a href=\"#method.call_once_force\">call_once_force</a></li><li><a href=\"#method.is_completed\">is_completed</a></li><li><a href=\"#method.new\">new</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-Debug-for-Once\">Debug</a></li><li><a href=\"#impl-RefUnwindSafe-for-Once\">RefUnwindSafe</a></li><li><a href=\"#impl-UnwindSafe-for-Once\">UnwindSafe</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-Once\">!Freeze</a></li><li><a href=\"#impl-Send-for-Once\">Send</a></li><li><a href=\"#impl-Sync-for-Once\">Sync</a></li><li><a href=\"#impl-Unpin-for-Once\">Unpin</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::sync</a></h2><h3><a href=\"index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"atomic/index.html\">atomic</a></li><li><a href=\"mpsc/index.html\">mpsc</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Arc.html\">Arc</a></li><li><a href=\"struct.Barrier.html\">Barrier</a></li><li><a href=\"struct.BarrierWaitResult.html\">BarrierWaitResult</a></li><li><a href=\"struct.Condvar.html\">Condvar</a></li><li><a href=\"struct.Exclusive.html\">Exclusive</a></li><li><a href=\"struct.LazyLock.html\">LazyLock</a></li><li><a href=\"struct.MappedMutexGuard.html\">MappedMutexGuard</a></li><li><a href=\"struct.MappedRwLockReadGuard.html\">MappedRwLockReadGuard</a></li><li><a href=\"struct.MappedRwLockWriteGuard.html\">MappedRwLockWriteGuard</a></li><li><a href=\"struct.Mutex.html\">Mutex</a></li><li><a href=\"struct.MutexGuard.html\">MutexGuard</a></li><li><a href=\"struct.Once.html\">Once</a></li><li><a href=\"struct.OnceLock.html\">OnceLock</a></li><li><a href=\"struct.OnceState.html\">OnceState</a></li><li><a href=\"struct.PoisonError.html\">PoisonError</a></li><li><a href=\"struct.ReentrantLock.html\">ReentrantLock</a></li><li><a href=\"struct.ReentrantLockGuard.html\">ReentrantLockGuard</a></li><li><a href=\"struct.RwLock.html\">RwLock</a></li><li><a href=\"struct.RwLockReadGuard.html\">RwLockReadGuard</a></li><li><a href=\"struct.RwLockWriteGuard.html\">RwLockWriteGuard</a></li><li><a href=\"struct.WaitTimeoutResult.html\">WaitTimeoutResult</a></li><li><a href=\"struct.Weak.html\">Weak</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.TryLockError.html\">TryLockError</a></li></ul><h3><a href=\"index.html#constants\">Constants</a></h3><ul class=\"block constant\"><li><a href=\"constant.ONCE_INIT.html\">ONCE_INIT</a></li></ul><h3><a href=\"index.html#types\">Type Aliases</a></h3><ul class=\"block type\"><li><a href=\"type.LockResult.html\">LockResult</a></li><li><a href=\"type.TryLockResult.html\">TryLockResult</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">sync</a>::<wbr><a class=\"struct\" href=\"#\">Once</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/sync/once.rs.html#29-31\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct Once { <span class=\"comment\">/* private fields */</span> }</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A synchronization primitive which can be used to run a one-time global\ninitialization. Useful for one-time initialization for FFI or related\nfunctionality. This type can only be constructed with <a href=\"struct.Once.html#method.new\" title=\"associated function std::sync::Once::new\"><code>Once::new()</code></a>.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::Once;\n\n<span class=\"kw\">static </span>START: Once = Once::new();\n\nSTART.call_once(|| {\n    <span class=\"comment\">// run initialization here\n</span>});</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::Once;%0A++++%0A++++static+START:+Once+=+Once::new();%0A++++%0A++++START.call_once(%7C%7C+%7B%0A++++++++//+run+initialization+here%0A++++%7D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Once\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/sync/once.rs.html#69-267\">source</a><a href=\"#impl-Once\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"struct.Once.html\" title=\"struct std::sync::Once\">Once</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.new\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.32.0\">1.2.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"../../src/std/sync/once.rs.html#75-77\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.new\" class=\"fn\">new</a>() -&gt; <a class=\"struct\" href=\"struct.Once.html\" title=\"struct std::sync::Once\">Once</a></h4></section></summary><div class=\"docblock\"><p>Creates a new <code>Once</code> value.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.call_once\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/sync/once.rs.html#139-150\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.call_once\" class=\"fn\">call_once</a>&lt;F&gt;(&amp;self, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>(),</div></h4></section></summary><div class=\"docblock\"><p>Performs an initialization routine once and only once. The given closure\nwill be executed if this is the first time <code>call_once</code> has been called,\nand otherwise the routine will <em>not</em> be invoked.</p>\n<p>This method will block the calling thread if another initialization\nroutine is currently running.</p>\n<p>When this function returns, it is guaranteed that some initialization\nhas run and completed (it might not be the closure specified). It is also\nguaranteed that any memory writes performed by the executed closure can\nbe reliably observed by other threads at this point (there is a\nhappens-before relation between the closure and code executing after the\nreturn).</p>\n<p>If the given closure recursively invokes <code>call_once</code> on the same <a href=\"struct.Once.html\" title=\"struct std::sync::Once\"><code>Once</code></a>\ninstance, the exact behavior is not specified: allowed outcomes are\na panic or a deadlock.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::Once;\n\n<span class=\"kw\">static </span><span class=\"kw-2\">mut </span>VAL: usize = <span class=\"number\">0</span>;\n<span class=\"kw\">static </span>INIT: Once = Once::new();\n\n<span class=\"comment\">// Accessing a `static mut` is unsafe much of the time, but if we do so\n// in a synchronized fashion (e.g., write once or read all) then we're\n// good to go!\n//\n// This function will only call `expensive_computation` once, and will\n// otherwise always return the value returned from the first invocation.\n</span><span class=\"kw\">fn </span>get_cached_val() -&gt; usize {\n    <span class=\"kw\">unsafe </span>{\n        INIT.call_once(|| {\n            VAL = expensive_computation();\n        });\n        VAL\n    }\n}\n\n<span class=\"kw\">fn </span>expensive_computation() -&gt; usize {\n    <span class=\"comment\">// ...\n</span>}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::Once;%0A++++%0A++++static+mut+VAL:+usize+=+0;%0A++++static+INIT:+Once+=+Once::new();%0A++++%0A++++//+Accessing+a+%60static+mut%60+is+unsafe+much+of+the+time,+but+if+we+do+so%0A++++//+in+a+synchronized+fashion+(e.g.,+write+once+or+read+all)+then+we're%0A++++//+good+to+go!%0A++++//%0A++++//+This+function+will+only+call+%60expensive_computation%60+once,+and+will%0A++++//+otherwise+always+return+the+value+returned+from+the+first+invocation.%0A++++fn+get_cached_val()+-%3E+usize+%7B%0A++++++++unsafe+%7B%0A++++++++++++INIT.call_once(%7C%7C+%7B%0A++++++++++++++++VAL+=+expensive_computation();%0A++++++++++++%7D);%0A++++++++++++VAL%0A++++++++%7D%0A++++%7D%0A++++%0A++++fn+expensive_computation()+-%3E+usize+%7B%0A++++++++//+...%0A++++2%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>The closure <code>f</code> will only be executed once even if this is called\nconcurrently amongst many threads. If that closure panics, however, then\nit will <em>poison</em> this <a href=\"struct.Once.html\" title=\"struct std::sync::Once\"><code>Once</code></a> instance, causing all future invocations of\n<code>call_once</code> to also panic.</p>\n<p>This is similar to <a href=\"struct.Mutex.html#poisoning\">poisoning with mutexes</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.call_once_force\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> · <a class=\"src\" href=\"../../src/std/sync/once.rs.html#198-209\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.call_once_force\" class=\"fn\">call_once_force</a>&lt;F&gt;(&amp;self, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>(&amp;<a class=\"struct\" href=\"struct.OnceState.html\" title=\"struct std::sync::OnceState\">OnceState</a>),</div></h4></section></summary><div class=\"docblock\"><p>Performs the same function as <a href=\"struct.Once.html#method.call_once\" title=\"method std::sync::Once::call_once\"><code>call_once()</code></a> except ignores poisoning.</p>\n<p>Unlike <a href=\"struct.Once.html#method.call_once\" title=\"method std::sync::Once::call_once\"><code>call_once()</code></a>, if this <a href=\"struct.Once.html\" title=\"struct std::sync::Once\"><code>Once</code></a> has been poisoned (i.e., a previous\ncall to <a href=\"struct.Once.html#method.call_once\" title=\"method std::sync::Once::call_once\"><code>call_once()</code></a> or <a href=\"struct.Once.html#method.call_once_force\" title=\"method std::sync::Once::call_once_force\"><code>call_once_force()</code></a> caused a panic), calling\n<a href=\"struct.Once.html#method.call_once_force\" title=\"method std::sync::Once::call_once_force\"><code>call_once_force()</code></a> will still invoke the closure <code>f</code> and will <em>not</em>\nresult in an immediate panic. If <code>f</code> panics, the <a href=\"struct.Once.html\" title=\"struct std::sync::Once\"><code>Once</code></a> will remain\nin a poison state. If <code>f</code> does <em>not</em> panic, the <a href=\"struct.Once.html\" title=\"struct std::sync::Once\"><code>Once</code></a> will no\nlonger be in a poison state and all future calls to <a href=\"struct.Once.html#method.call_once\" title=\"method std::sync::Once::call_once\"><code>call_once()</code></a> or\n<a href=\"struct.Once.html#method.call_once_force\" title=\"method std::sync::Once::call_once_force\"><code>call_once_force()</code></a> will be no-ops.</p>\n<p>The closure <code>f</code> is yielded a <a href=\"struct.OnceState.html\" title=\"struct std::sync::OnceState\"><code>OnceState</code></a> structure which can be used\nto query the poison status of the <a href=\"struct.Once.html\" title=\"struct std::sync::Once\"><code>Once</code></a>.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::Once;\n<span class=\"kw\">use </span>std::thread;\n\n<span class=\"kw\">static </span>INIT: Once = Once::new();\n\n<span class=\"comment\">// poison the once\n</span><span class=\"kw\">let </span>handle = thread::spawn(|| {\n    INIT.call_once(|| <span class=\"macro\">panic!</span>());\n});\n<span class=\"macro\">assert!</span>(handle.join().is_err());\n\n<span class=\"comment\">// poisoning propagates\n</span><span class=\"kw\">let </span>handle = thread::spawn(|| {\n    INIT.call_once(|| {});\n});\n<span class=\"macro\">assert!</span>(handle.join().is_err());\n\n<span class=\"comment\">// call_once_force will still run and reset the poisoned state\n</span>INIT.call_once_force(|state| {\n    <span class=\"macro\">assert!</span>(state.is_poisoned());\n});\n\n<span class=\"comment\">// once any success happens, we stop propagating the poison\n</span>INIT.call_once(|| {});</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::Once;%0A++++use+std::thread;%0A++++%0A++++static+INIT:+Once+=+Once::new();%0A++++%0A++++//+poison+the+once%0A++++let+handle+=+thread::spawn(%7C%7C+%7B%0A++++++++INIT.call_once(%7C%7C+panic!());%0A++++%7D);%0A++++assert!(handle.join().is_err());%0A++++%0A++++//+poisoning+propagates%0A++++let+handle+=+thread::spawn(%7C%7C+%7B%0A++++++++INIT.call_once(%7C%7C+%7B%7D);%0A++++%7D);%0A++++assert!(handle.join().is_err());%0A++++%0A++++//+call_once_force+will+still+run+and+reset+the+poisoned+state%0A++++INIT.call_once_force(%7Cstate%7C+%7B%0A++++++++assert!(state.is_poisoned());%0A++++%7D);%0A++++%0A++++//+once+any+success+happens,+we+stop+propagating+the+poison%0A++++INIT.call_once(%7C%7C+%7B%7D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.is_completed\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.43.0\">1.43.0</span> · <a class=\"src\" href=\"../../src/std/sync/once.rs.html#254-256\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.is_completed\" class=\"fn\">is_completed</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if some <a href=\"struct.Once.html#method.call_once\" title=\"method std::sync::Once::call_once\"><code>call_once()</code></a> call has completed\nsuccessfully. Specifically, <code>is_completed</code> will return false in\nthe following situations:</p>\n<ul>\n<li><a href=\"struct.Once.html#method.call_once\" title=\"method std::sync::Once::call_once\"><code>call_once()</code></a> was not called at all,</li>\n<li><a href=\"struct.Once.html#method.call_once\" title=\"method std::sync::Once::call_once\"><code>call_once()</code></a> was called, but has not yet completed,</li>\n<li>the <a href=\"struct.Once.html\" title=\"struct std::sync::Once\"><code>Once</code></a> instance is poisoned</li>\n</ul>\n<p>This function returning <code>false</code> does not mean that <a href=\"struct.Once.html\" title=\"struct std::sync::Once\"><code>Once</code></a> has not been\nexecuted. For example, it may have been executed in the time between\nwhen <code>is_completed</code> starts executing and when it returns, in which case\nthe <code>false</code> return value would be stale (but still permissible).</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::Once;\n\n<span class=\"kw\">static </span>INIT: Once = Once::new();\n\n<span class=\"macro\">assert_eq!</span>(INIT.is_completed(), <span class=\"bool-val\">false</span>);\nINIT.call_once(|| {\n    <span class=\"macro\">assert_eq!</span>(INIT.is_completed(), <span class=\"bool-val\">false</span>);\n});\n<span class=\"macro\">assert_eq!</span>(INIT.is_completed(), <span class=\"bool-val\">true</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::Once;%0A++++%0A++++static+INIT:+Once+=+Once::new();%0A++++%0A++++assert_eq!(INIT.is_completed(),+false);%0A++++INIT.call_once(%7C%7C+%7B%0A++++++++assert_eq!(INIT.is_completed(),+false);%0A++++%7D);%0A++++assert_eq!(INIT.is_completed(),+true);%0A%7D&amp;edition=2021\">Run</a></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::Once;\n<span class=\"kw\">use </span>std::thread;\n\n<span class=\"kw\">static </span>INIT: Once = Once::new();\n\n<span class=\"macro\">assert_eq!</span>(INIT.is_completed(), <span class=\"bool-val\">false</span>);\n<span class=\"kw\">let </span>handle = thread::spawn(|| {\n    INIT.call_once(|| <span class=\"macro\">panic!</span>());\n});\n<span class=\"macro\">assert!</span>(handle.join().is_err());\n<span class=\"macro\">assert_eq!</span>(INIT.is_completed(), <span class=\"bool-val\">false</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::Once;%0A++++use+std::thread;%0A++++%0A++++static+INIT:+Once+=+Once::new();%0A++++%0A++++assert_eq!(INIT.is_completed(),+false);%0A++++let+handle+=+thread::spawn(%7C%7C+%7B%0A++++++++INIT.call_once(%7C%7C+panic!());%0A++++%7D);%0A++++assert!(handle.join().is_err());%0A++++assert_eq!(INIT.is_completed(),+false);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-Once\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.16.0\">1.16.0</span> · <a class=\"src\" href=\"../../src/std/sync/once.rs.html#270-274\">source</a></span><a href=\"#impl-Debug-for-Once\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.Once.html\" title=\"struct std::sync::Once\">Once</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/sync/once.rs.html#271-273\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../fmt/type.Result.html\" title=\"type std::fmt::Result\">Result</a></h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><section id=\"impl-RefUnwindSafe-for-Once\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.59.0\">1.59.0</span> · <a class=\"src\" href=\"../../src/std/sync/once.rs.html#37\">source</a></span><a href=\"#impl-RefUnwindSafe-for-Once\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.Once.html\" title=\"struct std::sync::Once\">Once</a></h3></section><section id=\"impl-UnwindSafe-for-Once\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.59.0\">1.59.0</span> · <a class=\"src\" href=\"../../src/std/sync/once.rs.html#34\">source</a></span><a href=\"#impl-UnwindSafe-for-Once\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.Once.html\" title=\"struct std::sync::Once\">Once</a></h3></section></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-Once\" class=\"impl\"><a href=\"#impl-Freeze-for-Once\" class=\"anchor\">§</a><h3 class=\"code-header\">impl !<a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.Once.html\" title=\"struct std::sync::Once\">Once</a></h3></section><section id=\"impl-Send-for-Once\" class=\"impl\"><a href=\"#impl-Send-for-Once\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.Once.html\" title=\"struct std::sync::Once\">Once</a></h3></section><section id=\"impl-Sync-for-Once\" class=\"impl\"><a href=\"#impl-Sync-for-Once\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.Once.html\" title=\"struct std::sync::Once\">Once</a></h3></section><section id=\"impl-Unpin-for-Once\" class=\"impl\"><a href=\"#impl-Unpin-for-Once\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.Once.html\" title=\"struct std::sync::Once\">Once</a></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:14:47.199Z"
}