{
	"title": "Report in std::error - Rust",
	"url": "https://doc.rust-lang.org/stable/std/error/struct.Report.html",
	"markdown": "# Report in std::error - Rust\n\n```\npub struct Report<E = Box<dyn Error>> { /* private fields */ }\n```\n\nðŸ”¬This is a nightly-only experimental API. (`error_reporter`Â [#90172](https://github.com/rust-lang/rust/issues/90172))\n\nExpand description\n\nAn error reporter that prints an error and its sources.\n\nReport also exposes configuration options for formatting the error sources, either entirely on a single line, or in multi-line format with each source on a new line.\n\n`Report` only requires that the wrapped error implement `Error`. It doesnâ€™t require that the wrapped error be `Send`, `Sync`, or `'static`.\n\n## [Â§](#examples)Examples\n\n```\n#![feature(error_reporter)]\nuse std::error::{Error, Report};\nuse std::fmt;\n\n#[derive(Debug)]\nstruct SuperError {\n    source: SuperErrorSideKick,\n}\n\nimpl fmt::Display for SuperError {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        write!(f, \"SuperError is here!\")\n    }\n}\n\nimpl Error for SuperError {\n    fn source(&self) -> Option<&(dyn Error + 'static)> {\n        Some(&self.source)\n    }\n}\n\n#[derive(Debug)]\nstruct SuperErrorSideKick;\n\nimpl fmt::Display for SuperErrorSideKick {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        write!(f, \"SuperErrorSideKick is here!\")\n    }\n}\n\nimpl Error for SuperErrorSideKick {}\n\nfn get_super_error() -> Result<(), SuperError> {\n    Err(SuperError { source: SuperErrorSideKick })\n}\n\nfn main() {\n    match get_super_error() {\n        Err(e) => println!(\"Error: {}\", Report::new(e)),\n        _ => println!(\"No error\"),\n    }\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(error_reporter)%5D%0Ause+std::error::%7BError,+Report%7D;%0Ause+std::fmt;%0A%0A%23%5Bderive(Debug)%5D%0Astruct+SuperError+%7B%0A++++source:+SuperErrorSideKick,%0A%7D%0A%0Aimpl+fmt::Display+for+SuperError+%7B%0A++++fn+fmt(%26self,+f:+%26mut+fmt::Formatter%3C%27_%3E)+-%3E+fmt::Result+%7B%0A++++++++write!(f,+%22SuperError+is+here!%22)%0A++++%7D%0A%7D%0A%0Aimpl+Error+for+SuperError+%7B%0A++++fn+source(%26self)+-%3E+Option%3C%26(dyn+Error+%2B+%27static)%3E+%7B%0A++++++++Some(%26self.source)%0A++++%7D%0A%7D%0A%0A%23%5Bderive(Debug)%5D%0Astruct+SuperErrorSideKick;%0A%0Aimpl+fmt::Display+for+SuperErrorSideKick+%7B%0A++++fn+fmt(%26self,+f:+%26mut+fmt::Formatter%3C%27_%3E)+-%3E+fmt::Result+%7B%0A++++++++write!(f,+%22SuperErrorSideKick+is+here!%22)%0A++++%7D%0A%7D%0A%0Aimpl+Error+for+SuperErrorSideKick+%7B%7D%0A%0Afn+get_super_error()+-%3E+Result%3C(),+SuperError%3E+%7B%0A++++Err(SuperError+%7B+source:+SuperErrorSideKick+%7D)%0A%7D%0A%0Afn+main()+%7B%0A++++match+get_super_error()+%7B%0A++++++++Err(e)+=%3E+println!(%22Error:+%7B%7D%22,+Report::new(e)),%0A++++++++_+=%3E+println!(%22No+error%22),%0A++++%7D%0A%7D&version=nightly&edition=2021)\n\nThis example produces the following output:\n\n```console\nError: SuperError is here!: SuperErrorSideKick is here!\n\n```\n\n### [Â§](#output-consistency)Output consistency\n\nReport prints the same output via `Display` and `Debug`, so it works well with [`Result::unwrap`](about:blank/result/enum.Result.html#method.unwrap \"method std::result::Result::unwrap\")/[`Result::expect`](about:blank/result/enum.Result.html#method.expect \"method std::result::Result::expect\") which print their `Err` variant via `Debug`:\n\n[â“˜](# \"This example panics\")\n\n```\n#![feature(error_reporter)]\nuse std::error::Report;\n\nget_super_error().map_err(Report::new).unwrap();\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(error_reporter)%5D%0Afn+main()+%7B%0A++++use+std::error::Report;%0A++++use+std::error::Error;%0A++++use+std::fmt;%0A++++%23%5Bderive(Debug)%5D%0A++++struct+SuperError+%7B%0A++++++++source:+SuperErrorSideKick,%0A++++%7D%0A++++impl+fmt::Display+for+SuperError+%7B%0A++++++++fn+fmt(%26self,+f:+%26mut+fmt::Formatter%3C%27_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++write!(f,+%22SuperError+is+here!%22)%0A++++++++%7D%0A++++%7D%0A++++impl+Error+for+SuperError+%7B%0A++++++++fn+source(%26self)+-%3E+Option%3C%26(dyn+Error+%2B+%27static)%3E+%7B%0A++++++++++++Some(%26self.source)%0A++++++++%7D%0A++++%7D%0A++++%23%5Bderive(Debug)%5D%0A++++struct+SuperErrorSideKick;%0A++++impl+fmt::Display+for+SuperErrorSideKick+%7B%0A++++++++fn+fmt(%26self,+f:+%26mut+fmt::Formatter%3C%27_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++write!(f,+%22SuperErrorSideKick+is+here!%22)%0A++++++++%7D%0A++++%7D%0A++++impl+Error+for+SuperErrorSideKick+%7B%7D%0A++++fn+get_super_error()+-%3E+Result%3C(),+SuperError%3E+%7B%0A++++++++Err(SuperError+%7B+source:+SuperErrorSideKick+%7D)%0A++++%7D%0A++++%0A++++get_super_error().map_err(Report::new).unwrap();%0A%7D&version=nightly&edition=2021)\n\nThis example produces the following output:\n\n```console\nthread 'main' panicked at src/error.rs:34:40:\ncalled `Result::unwrap()` on an `Err` value: SuperError is here!: SuperErrorSideKick is here!\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\n```\n\n### [Â§](#return-from-main)Return from `main`\n\n`Report` also implements `From` for all types that implement [`Error`](trait.Error.html \"trait std::error::Error\"); this when combined with the `Debug` output means `Report` is an ideal starting place for formatting errors returned from `main`.\n\n[â“˜](# \"This example panics\")\n\n```\n#![feature(error_reporter)]\nuse std::error::Report;\n\nfn main() -> Result<(), Report<SuperError>> {\n    get_super_error()?;\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(error_reporter)%5D%0Ause+std::error::Report;%0Ause+std::error::Error;%0Ause+std::fmt;%0A%23%5Bderive(Debug)%5D%0Astruct+SuperError+%7B%0A++++source:+SuperErrorSideKick,%0A%7D%0Aimpl+fmt::Display+for+SuperError+%7B%0A++++fn+fmt(%26self,+f:+%26mut+fmt::Formatter%3C%27_%3E)+-%3E+fmt::Result+%7B%0A++++++++write!(f,+%22SuperError+is+here!%22)%0A++++%7D%0A%7D%0Aimpl+Error+for+SuperError+%7B%0A++++fn+source(%26self)+-%3E+Option%3C%26(dyn+Error+%2B+%27static)%3E+%7B%0A++++++++Some(%26self.source)%0A++++%7D%0A%7D%0A%23%5Bderive(Debug)%5D%0Astruct+SuperErrorSideKick;%0Aimpl+fmt::Display+for+SuperErrorSideKick+%7B%0A++++fn+fmt(%26self,+f:+%26mut+fmt::Formatter%3C%27_%3E)+-%3E+fmt::Result+%7B%0A++++++++write!(f,+%22SuperErrorSideKick+is+here!%22)%0A++++%7D%0A%7D%0Aimpl+Error+for+SuperErrorSideKick+%7B%7D%0Afn+get_super_error()+-%3E+Result%3C(),+SuperError%3E+%7B%0A++++Err(SuperError+%7B+source:+SuperErrorSideKick+%7D)%0A%7D%0A%0Afn+main()+-%3E+Result%3C(),+Report%3CSuperError%3E%3E+%7B%0A++++get_super_error()?;%0A++++Ok(())%0A%7D&version=nightly&edition=2021)\n\nThis example produces the following output:\n\n```console\nError: SuperError is here!: SuperErrorSideKick is here!\n\n```\n\n**Note**: `Report`s constructed via `?` and `From` will be configured to use the single line output format. If you want to make sure your `Report`s are pretty printed and include backtrace you will need to manually convert and enable those flags.\n\n[â“˜](# \"This example panics\")\n\n```\n#![feature(error_reporter)]\nuse std::error::Report;\n\nfn main() -> Result<(), Report<SuperError>> {\n    get_super_error()\n        .map_err(Report::from)\n        .map_err(|r| r.pretty(true).show_backtrace(true))?;\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(error_reporter)%5D%0Ause+std::error::Report;%0Ause+std::error::Error;%0Ause+std::fmt;%0A%23%5Bderive(Debug)%5D%0Astruct+SuperError+%7B%0A++++source:+SuperErrorSideKick,%0A%7D%0Aimpl+fmt::Display+for+SuperError+%7B%0A++++fn+fmt(%26self,+f:+%26mut+fmt::Formatter%3C%27_%3E)+-%3E+fmt::Result+%7B%0A++++++++write!(f,+%22SuperError+is+here!%22)%0A++++%7D%0A%7D%0Aimpl+Error+for+SuperError+%7B%0A++++fn+source(%26self)+-%3E+Option%3C%26(dyn+Error+%2B+%27static)%3E+%7B%0A++++++++Some(%26self.source)%0A++++%7D%0A%7D%0A%23%5Bderive(Debug)%5D%0Astruct+SuperErrorSideKick;%0Aimpl+fmt::Display+for+SuperErrorSideKick+%7B%0A++++fn+fmt(%26self,+f:+%26mut+fmt::Formatter%3C%27_%3E)+-%3E+fmt::Result+%7B%0A++++++++write!(f,+%22SuperErrorSideKick+is+here!%22)%0A++++%7D%0A%7D%0Aimpl+Error+for+SuperErrorSideKick+%7B%7D%0Afn+get_super_error()+-%3E+Result%3C(),+SuperError%3E+%7B%0A++++Err(SuperError+%7B+source:+SuperErrorSideKick+%7D)%0A%7D%0A%0Afn+main()+-%3E+Result%3C(),+Report%3CSuperError%3E%3E+%7B%0A++++get_super_error()%0A++++++++.map_err(Report::from)%0A++++++++.map_err(%7Cr%7C+r.pretty(true).show_backtrace(true))?;%0A++++Ok(())%0A%7D&version=nightly&edition=2021)\n\nThis example produces the following output:\n\n```console\nError: SuperError is here!\n\nCaused by:\n      SuperErrorSideKick is here!\n\n``` \n\n[source](about:blank/src/std/error.rs.html#233-242)[Â§](#impl-Report%3CE%3E)\n\n[source](about:blank/src/std/error.rs.html#239-241)\n\nðŸ”¬This is a nightly-only experimental API. (`error_reporter`Â [#90172](https://github.com/rust-lang/rust/issues/90172))\n\nCreate a new `Report` from an input error.\n\n[source](about:blank/src/std/error.rs.html#244-446)[Â§](#impl-Report%3CE%3E-1)\n\n[source](about:blank/src/std/error.rs.html#353-356)\n\nðŸ”¬This is a nightly-only experimental API. (`error_reporter`Â [#90172](https://github.com/rust-lang/rust/issues/90172))\n\nEnable pretty-printing the report across multiple lines.\n\n##### [Â§](#examples-1)Examples\n\n```\n#![feature(error_reporter)]\nuse std::error::Report;\n\nlet error = SuperError { source: SuperErrorSideKick };\nlet report = Report::new(error).pretty(true);\neprintln!(\"Error: {report:?}\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(error_reporter)%5D%0Afn+main()+%7B%0A++++use+std::error::Report;%0A++++use+std::error::Error;%0A++++use+std::fmt;%0A++++%23%5Bderive(Debug)%5D%0A++++struct+SuperError+%7B%0A++++++++source:+SuperErrorSideKick,%0A++++%7D%0A++++impl+fmt::Display+for+SuperError+%7B%0A++++++++fn+fmt(%26self,+f:+%26mut+fmt::Formatter%3C%27_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++write!(f,+%22SuperError+is+here!%22)%0A++++++++%7D%0A++++%7D%0A++++impl+Error+for+SuperError+%7B%0A++++++++fn+source(%26self)+-%3E+Option%3C%26(dyn+Error+%2B+%27static)%3E+%7B%0A++++++++++++Some(%26self.source)%0A++++++++%7D%0A++++%7D%0A++++%23%5Bderive(Debug)%5D%0A++++struct+SuperErrorSideKick;%0A++++impl+fmt::Display+for+SuperErrorSideKick+%7B%0A++++++++fn+fmt(%26self,+f:+%26mut+fmt::Formatter%3C%27_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++write!(f,+%22SuperErrorSideKick+is+here!%22)%0A++++++++%7D%0A++++%7D%0A++++impl+Error+for+SuperErrorSideKick+%7B%7D%0A++++%0A++++let+error+=+SuperError+%7B+source:+SuperErrorSideKick+%7D;%0A++++let+report+=+Report::new(error).pretty(true);%0A++++eprintln!(%22Error:+%7Breport:?%7D%22);%0A%7D&version=nightly&edition=2021)\n\nThis example produces the following output:\n\n```console\nError: SuperError is here!\n\nCaused by:\n      SuperErrorSideKick is here!\n\n```\n\nWhen there are multiple source errors the causes will be numbered in order of iteration starting from the outermost error.\n\n```\n#![feature(error_reporter)]\nuse std::error::Report;\n\nlet source = SuperErrorSideKickSideKick;\nlet source = SuperErrorSideKick { source };\nlet error = SuperError { source };\nlet report = Report::new(error).pretty(true);\neprintln!(\"Error: {report:?}\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(error_reporter)%5D%0Afn+main()+%7B%0A++++use+std::error::Report;%0A++++use+std::error::Error;%0A++++use+std::fmt;%0A++++%23%5Bderive(Debug)%5D%0A++++struct+SuperError+%7B%0A++++++++source:+SuperErrorSideKick,%0A++++%7D%0A++++impl+fmt::Display+for+SuperError+%7B%0A++++++++fn+fmt(%26self,+f:+%26mut+fmt::Formatter%3C%27_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++write!(f,+%22SuperError+is+here!%22)%0A++++++++%7D%0A++++%7D%0A++++impl+Error+for+SuperError+%7B%0A++++++++fn+source(%26self)+-%3E+Option%3C%26(dyn+Error+%2B+%27static)%3E+%7B%0A++++++++++++Some(%26self.source)%0A++++++++%7D%0A++++%7D%0A++++%23%5Bderive(Debug)%5D%0A++++struct+SuperErrorSideKick+%7B%0A++++++++source:+SuperErrorSideKickSideKick,%0A++++%7D%0A++++impl+fmt::Display+for+SuperErrorSideKick+%7B%0A++++++++fn+fmt(%26self,+f:+%26mut+fmt::Formatter%3C%27_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++write!(f,+%22SuperErrorSideKick+is+here!%22)%0A++++++++%7D%0A++++%7D%0A++++impl+Error+for+SuperErrorSideKick+%7B%0A++++++++fn+source(%26self)+-%3E+Option%3C%26(dyn+Error+%2B+%27static)%3E+%7B%0A++++++++++++Some(%26self.source)%0A++++++++%7D%0A++++%7D%0A++++%23%5Bderive(Debug)%5D%0A++++struct+SuperErrorSideKickSideKick;%0A++++impl+fmt::Display+for+SuperErrorSideKickSideKick+%7B%0A++++++++fn+fmt(%26self,+f:+%26mut+fmt::Formatter%3C%27_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++write!(f,+%22SuperErrorSideKickSideKick+is+here!%22)%0A++++++++%7D%0A++++%7D%0A++++impl+Error+for+SuperErrorSideKickSideKick+%7B+%7D%0A++++%0A++++let+source+=+SuperErrorSideKickSideKick;%0A++++let+source+=+SuperErrorSideKick+%7B+source+%7D;%0A++++let+error+=+SuperError+%7B+source+%7D;%0A++++let+report+=+Report::new(error).pretty(true);%0A++++eprintln!(%22Error:+%7Breport:?%7D%22);%0A%7D&version=nightly&edition=2021)\n\nThis example produces the following output:\n\n```console\nError: SuperError is here!\n\nCaused by:\n   0: SuperErrorSideKick is here!\n   1: SuperErrorSideKickSideKick is here!\n\n``` [source](about:blank/src/std/error.rs.html#442-445)\n\nðŸ”¬This is a nightly-only experimental API. (`error_reporter`Â [#90172](https://github.com/rust-lang/rust/issues/90172))\n\nDisplay backtrace if available when using pretty output format.\n\n##### [Â§](#examples-2)Examples\n\n**Note**: Report will search for the first `Backtrace` it can find starting from the outermost error. In this example it will display the backtrace from the second error in the sources, `SuperErrorSideKick`.\n\n```\n#![feature(error_reporter)]\n#![feature(error_generic_member_access)]\nuse std::error::Request;\nuse std::error::Report;\nuse std::backtrace::Backtrace;\n\n#[derive(Debug)]\nstruct SuperErrorSideKick {\n    backtrace: Backtrace,\n}\n\nimpl SuperErrorSideKick {\n    fn new() -> SuperErrorSideKick {\n        SuperErrorSideKick { backtrace: Backtrace::force_capture() }\n    }\n}\n\nimpl Error for SuperErrorSideKick {\n    fn provide<'a>(&'a self, request: &mut Request<'a>) {\n        request.provide_ref::<Backtrace>(&self.backtrace);\n    }\n}\n\n// The rest of the example is unchanged ...\n\nlet source = SuperErrorSideKick::new();\nlet error = SuperError { source };\nlet report = Report::new(error).pretty(true).show_backtrace(true);\neprintln!(\"Error: {report:?}\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(error_reporter)%5D%0A%23!%5Bfeature(error_generic_member_access)%5D%0Afn+main()+%7B%0A++++use+std::error::Error;%0A++++use+std::fmt;%0A++++use+std::error::Request;%0A++++use+std::error::Report;%0A++++use+std::backtrace::Backtrace;%0A++++%0A++++%23%5Bderive(Debug)%5D%0A++++struct+SuperError+%7B%0A++++++++source:+SuperErrorSideKick,%0A++++%7D%0A++++impl+fmt::Display+for+SuperError+%7B%0A++++++++fn+fmt(%26self,+f:+%26mut+fmt::Formatter%3C%27_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++write!(f,+%22SuperError+is+here!%22)%0A++++++++%7D%0A++++%7D%0A++++impl+Error+for+SuperError+%7B%0A++++++++fn+source(%26self)+-%3E+Option%3C%26(dyn+Error+%2B+%27static)%3E+%7B%0A++++++++++++Some(%26self.source)%0A++++++++%7D%0A++++%7D%0A++++%23%5Bderive(Debug)%5D%0A++++struct+SuperErrorSideKick+%7B%0A++++++++backtrace:+Backtrace,%0A++++%7D%0A++++%0A++++impl+SuperErrorSideKick+%7B%0A++++++++fn+new()+-%3E+SuperErrorSideKick+%7B%0A++++++++++++SuperErrorSideKick+%7B+backtrace:+Backtrace::force_capture()+%7D%0A++++++++%7D%0A++++%7D%0A++++%0A++++impl+Error+for+SuperErrorSideKick+%7B%0A++++++++fn+provide%3C%27a%3E(%26%27a+self,+request:+%26mut+Request%3C%27a%3E)+%7B%0A++++++++++++request.provide_ref::%3CBacktrace%3E(%26self.backtrace);%0A++++++++%7D%0A++++%7D%0A++++%0A++++//+The+rest+of+the+example+is+unchanged+...%0A++++impl+fmt::Display+for+SuperErrorSideKick+%7B%0A++++++++fn+fmt(%26self,+f:+%26mut+fmt::Formatter%3C%27_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++write!(f,+%22SuperErrorSideKick+is+here!%22)%0A++++++++%7D%0A++++%7D%0A++++%0A++++let+source+=+SuperErrorSideKick::new();%0A++++let+error+=+SuperError+%7B+source+%7D;%0A++++let+report+=+Report::new(error).pretty(true).show_backtrace(true);%0A++++eprintln!(%22Error:+%7Breport:?%7D%22);%0A%7D&version=nightly&edition=2021)\n\nThis example produces something similar to the following output:\n\n```console\nError: SuperError is here!\n\nCaused by:\n      SuperErrorSideKick is here!\n\nStack backtrace:\n   0: rust_out::main::_doctest_main_src_error_rs_1158_0::SuperErrorSideKick::new\n   1: rust_out::main::_doctest_main_src_error_rs_1158_0\n   2: rust_out::main\n   3: core::ops::function::FnOnce::call_once\n   4: std::sys_common::backtrace::__rust_begin_short_backtrace\n   5: std::rt::lang_start::{{closure}}\n   6: std::panicking::try\n   7: std::rt::lang_start_internal\n   8: std::rt::lang_start\n   9: main\n  10: __libc_start_main\n  11: _start\n\n```",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"An error reporter that prints an error and its sources.\"><title>Report in std::error - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">Report</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">Report</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.new\">new</a></li><li><a href=\"#method.pretty\">pretty</a></li><li><a href=\"#method.show_backtrace\">show_backtrace</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-Debug-for-Report%3CE%3E\">Debug</a></li><li><a href=\"#impl-Display-for-Report%3CE%3E\">Display</a></li><li><a href=\"#impl-From%3CE%3E-for-Report%3CE%3E\">From&lt;E&gt;</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-Report%3CE%3E\">Freeze</a></li><li><a href=\"#impl-RefUnwindSafe-for-Report%3CE%3E\">RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-Report%3CE%3E\">Send</a></li><li><a href=\"#impl-Sync-for-Report%3CE%3E\">Sync</a></li><li><a href=\"#impl-Unpin-for-Report%3CE%3E\">Unpin</a></li><li><a href=\"#impl-UnwindSafe-for-Report%3CE%3E\">UnwindSafe</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3C!%3E-for-T\">From&lt;!&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-ToString-for-T\">ToString</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::error</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Report.html\">Report</a></li><li><a href=\"struct.Request.html\">Request</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.Error.html\">Error</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.request_ref.html\">request_ref</a></li><li><a href=\"fn.request_value.html\">request_value</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type â€˜Sâ€™ or â€˜/â€™ to search, â€˜?â€™ for more optionsâ€¦\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">error</a>::<wbr><a class=\"struct\" href=\"#\">Report</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><a class=\"src\" href=\"../../src/std/error.rs.html#224-231\">source</a> Â· <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>âˆ’</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct Report&lt;E = <a class=\"struct\" href=\"../boxed/struct.Box.html\" title=\"struct std::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"trait.Error.html\" title=\"trait std::error::Error\">Error</a>&gt;&gt; { <span class=\"comment\">/* private fields */</span> }</code></pre><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>error_reporter</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/90172\">#90172</a>)</span></div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>An error reporter that prints an error and its sources.</p>\n<p>Report also exposes configuration options for formatting the error sources, either entirely on a\nsingle line, or in multi-line format with each source on a new line.</p>\n<p><code>Report</code> only requires that the wrapped error implement <code>Error</code>. It doesnâ€™t require that the\nwrapped error be <code>Send</code>, <code>Sync</code>, or <code>'static</code>.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">Â§</a>Examples</h2>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(error_reporter)]\n</span><span class=\"kw\">use </span>std::error::{Error, Report};\n<span class=\"kw\">use </span>std::fmt;\n\n<span class=\"attr\">#[derive(Debug)]\n</span><span class=\"kw\">struct </span>SuperError {\n    source: SuperErrorSideKick,\n}\n\n<span class=\"kw\">impl </span>fmt::Display <span class=\"kw\">for </span>SuperError {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n        <span class=\"macro\">write!</span>(f, <span class=\"string\">\"SuperError is here!\"</span>)\n    }\n}\n\n<span class=\"kw\">impl </span>Error <span class=\"kw\">for </span>SuperError {\n    <span class=\"kw\">fn </span>source(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;</span>(<span class=\"kw\">dyn </span>Error + <span class=\"lifetime\">'static</span>)&gt; {\n        <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.source)\n    }\n}\n\n<span class=\"attr\">#[derive(Debug)]\n</span><span class=\"kw\">struct </span>SuperErrorSideKick;\n\n<span class=\"kw\">impl </span>fmt::Display <span class=\"kw\">for </span>SuperErrorSideKick {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n        <span class=\"macro\">write!</span>(f, <span class=\"string\">\"SuperErrorSideKick is here!\"</span>)\n    }\n}\n\n<span class=\"kw\">impl </span>Error <span class=\"kw\">for </span>SuperErrorSideKick {}\n\n<span class=\"kw\">fn </span>get_super_error() -&gt; <span class=\"prelude-ty\">Result</span>&lt;(), SuperError&gt; {\n    <span class=\"prelude-val\">Err</span>(SuperError { source: SuperErrorSideKick })\n}\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"kw\">match </span>get_super_error() {\n        <span class=\"prelude-val\">Err</span>(e) =&gt; <span class=\"macro\">println!</span>(<span class=\"string\">\"Error: {}\"</span>, Report::new(e)),\n        <span class=\"kw\">_ </span>=&gt; <span class=\"macro\">println!</span>(<span class=\"string\">\"No error\"</span>),\n    }\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(error_reporter)%5D%0Ause+std::error::%7BError,+Report%7D;%0Ause+std::fmt;%0A%0A%23%5Bderive(Debug)%5D%0Astruct+SuperError+%7B%0A++++source:+SuperErrorSideKick,%0A%7D%0A%0Aimpl+fmt::Display+for+SuperError+%7B%0A++++fn+fmt(%26self,+f:+%26mut+fmt::Formatter%3C'_%3E)+-%3E+fmt::Result+%7B%0A++++++++write!(f,+%22SuperError+is+here!%22)%0A++++%7D%0A%7D%0A%0Aimpl+Error+for+SuperError+%7B%0A++++fn+source(%26self)+-%3E+Option%3C%26(dyn+Error+%2B+'static)%3E+%7B%0A++++++++Some(%26self.source)%0A++++%7D%0A%7D%0A%0A%23%5Bderive(Debug)%5D%0Astruct+SuperErrorSideKick;%0A%0Aimpl+fmt::Display+for+SuperErrorSideKick+%7B%0A++++fn+fmt(%26self,+f:+%26mut+fmt::Formatter%3C'_%3E)+-%3E+fmt::Result+%7B%0A++++++++write!(f,+%22SuperErrorSideKick+is+here!%22)%0A++++%7D%0A%7D%0A%0Aimpl+Error+for+SuperErrorSideKick+%7B%7D%0A%0Afn+get_super_error()+-%3E+Result%3C(),+SuperError%3E+%7B%0A++++Err(SuperError+%7B+source:+SuperErrorSideKick+%7D)%0A%7D%0A%0Afn+main()+%7B%0A++++match+get_super_error()+%7B%0A++++++++Err(e)+=%3E+println!(%22Error:+%7B%7D%22,+Report::new(e)),%0A++++++++_+=%3E+println!(%22No+error%22),%0A++++%7D%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p>This example produces the following output:</p>\n<div class=\"example-wrap\"><pre class=\"language-console\"><code>Error: SuperError is here!: SuperErrorSideKick is here!\n</code></pre></div><h3 id=\"output-consistency\"><a class=\"doc-anchor\" href=\"#output-consistency\">Â§</a>Output consistency</h3>\n<p>Report prints the same output via <code>Display</code> and <code>Debug</code>, so it works well with\n<a href=\"../result/enum.Result.html#method.unwrap\" title=\"method std::result::Result::unwrap\"><code>Result::unwrap</code></a>/<a href=\"../result/enum.Result.html#method.expect\" title=\"method std::result::Result::expect\"><code>Result::expect</code></a> which print their <code>Err</code> variant via <code>Debug</code>:</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">â“˜</a><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(error_reporter)]\n</span><span class=\"kw\">use </span>std::error::Report;\n\nget_super_error().map_err(Report::new).unwrap();</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(error_reporter)%5D%0Afn+main()+%7B%0A++++use+std::error::Report;%0A++++use+std::error::Error;%0A++++use+std::fmt;%0A++++%23%5Bderive(Debug)%5D%0A++++struct+SuperError+%7B%0A++++++++source:+SuperErrorSideKick,%0A++++%7D%0A++++impl+fmt::Display+for+SuperError+%7B%0A++++++++fn+fmt(%26self,+f:+%26mut+fmt::Formatter%3C'_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++write!(f,+%22SuperError+is+here!%22)%0A++++++++%7D%0A++++%7D%0A++++impl+Error+for+SuperError+%7B%0A++++++++fn+source(%26self)+-%3E+Option%3C%26(dyn+Error+%2B+'static)%3E+%7B%0A++++++++++++Some(%26self.source)%0A++++++++%7D%0A++++%7D%0A++++%23%5Bderive(Debug)%5D%0A++++struct+SuperErrorSideKick;%0A++++impl+fmt::Display+for+SuperErrorSideKick+%7B%0A++++++++fn+fmt(%26self,+f:+%26mut+fmt::Formatter%3C'_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++write!(f,+%22SuperErrorSideKick+is+here!%22)%0A++++++++%7D%0A++++%7D%0A++++impl+Error+for+SuperErrorSideKick+%7B%7D%0A++++fn+get_super_error()+-%3E+Result%3C(),+SuperError%3E+%7B%0A++++++++Err(SuperError+%7B+source:+SuperErrorSideKick+%7D)%0A++++%7D%0A++++%0A++++get_super_error().map_err(Report::new).unwrap();%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p>This example produces the following output:</p>\n<div class=\"example-wrap\"><pre class=\"language-console\"><code>thread 'main' panicked at src/error.rs:34:40:\ncalled `Result::unwrap()` on an `Err` value: SuperError is here!: SuperErrorSideKick is here!\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div><h3 id=\"return-from-main\"><a class=\"doc-anchor\" href=\"#return-from-main\">Â§</a>Return from <code>main</code></h3>\n<p><code>Report</code> also implements <code>From</code> for all types that implement <a href=\"trait.Error.html\" title=\"trait std::error::Error\"><code>Error</code></a>; this when combined with\nthe <code>Debug</code> output means <code>Report</code> is an ideal starting place for formatting errors returned\nfrom <code>main</code>.</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">â“˜</a><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(error_reporter)]\n</span><span class=\"kw\">use </span>std::error::Report;\n\n<span class=\"kw\">fn </span>main() -&gt; <span class=\"prelude-ty\">Result</span>&lt;(), Report&lt;SuperError&gt;&gt; {\n    get_super_error()<span class=\"question-mark\">?</span>;\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(error_reporter)%5D%0Ause+std::error::Report;%0Ause+std::error::Error;%0Ause+std::fmt;%0A%23%5Bderive(Debug)%5D%0Astruct+SuperError+%7B%0A++++source:+SuperErrorSideKick,%0A%7D%0Aimpl+fmt::Display+for+SuperError+%7B%0A++++fn+fmt(%26self,+f:+%26mut+fmt::Formatter%3C'_%3E)+-%3E+fmt::Result+%7B%0A++++++++write!(f,+%22SuperError+is+here!%22)%0A++++%7D%0A%7D%0Aimpl+Error+for+SuperError+%7B%0A++++fn+source(%26self)+-%3E+Option%3C%26(dyn+Error+%2B+'static)%3E+%7B%0A++++++++Some(%26self.source)%0A++++%7D%0A%7D%0A%23%5Bderive(Debug)%5D%0Astruct+SuperErrorSideKick;%0Aimpl+fmt::Display+for+SuperErrorSideKick+%7B%0A++++fn+fmt(%26self,+f:+%26mut+fmt::Formatter%3C'_%3E)+-%3E+fmt::Result+%7B%0A++++++++write!(f,+%22SuperErrorSideKick+is+here!%22)%0A++++%7D%0A%7D%0Aimpl+Error+for+SuperErrorSideKick+%7B%7D%0Afn+get_super_error()+-%3E+Result%3C(),+SuperError%3E+%7B%0A++++Err(SuperError+%7B+source:+SuperErrorSideKick+%7D)%0A%7D%0A%0Afn+main()+-%3E+Result%3C(),+Report%3CSuperError%3E%3E+%7B%0A++++get_super_error()?;%0A++++Ok(())%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p>This example produces the following output:</p>\n<div class=\"example-wrap\"><pre class=\"language-console\"><code>Error: SuperError is here!: SuperErrorSideKick is here!\n</code></pre></div>\n<p><strong>Note</strong>: <code>Report</code>s constructed via <code>?</code> and <code>From</code> will be configured to use the single line\noutput format. If you want to make sure your <code>Report</code>s are pretty printed and include backtrace\nyou will need to manually convert and enable those flags.</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">â“˜</a><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(error_reporter)]\n</span><span class=\"kw\">use </span>std::error::Report;\n\n<span class=\"kw\">fn </span>main() -&gt; <span class=\"prelude-ty\">Result</span>&lt;(), Report&lt;SuperError&gt;&gt; {\n    get_super_error()\n        .map_err(Report::from)\n        .map_err(|r| r.pretty(<span class=\"bool-val\">true</span>).show_backtrace(<span class=\"bool-val\">true</span>))<span class=\"question-mark\">?</span>;\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(error_reporter)%5D%0Ause+std::error::Report;%0Ause+std::error::Error;%0Ause+std::fmt;%0A%23%5Bderive(Debug)%5D%0Astruct+SuperError+%7B%0A++++source:+SuperErrorSideKick,%0A%7D%0Aimpl+fmt::Display+for+SuperError+%7B%0A++++fn+fmt(%26self,+f:+%26mut+fmt::Formatter%3C'_%3E)+-%3E+fmt::Result+%7B%0A++++++++write!(f,+%22SuperError+is+here!%22)%0A++++%7D%0A%7D%0Aimpl+Error+for+SuperError+%7B%0A++++fn+source(%26self)+-%3E+Option%3C%26(dyn+Error+%2B+'static)%3E+%7B%0A++++++++Some(%26self.source)%0A++++%7D%0A%7D%0A%23%5Bderive(Debug)%5D%0Astruct+SuperErrorSideKick;%0Aimpl+fmt::Display+for+SuperErrorSideKick+%7B%0A++++fn+fmt(%26self,+f:+%26mut+fmt::Formatter%3C'_%3E)+-%3E+fmt::Result+%7B%0A++++++++write!(f,+%22SuperErrorSideKick+is+here!%22)%0A++++%7D%0A%7D%0Aimpl+Error+for+SuperErrorSideKick+%7B%7D%0Afn+get_super_error()+-%3E+Result%3C(),+SuperError%3E+%7B%0A++++Err(SuperError+%7B+source:+SuperErrorSideKick+%7D)%0A%7D%0A%0Afn+main()+-%3E+Result%3C(),+Report%3CSuperError%3E%3E+%7B%0A++++get_super_error()%0A++++++++.map_err(Report::from)%0A++++++++.map_err(%7Cr%7C+r.pretty(true).show_backtrace(true))?;%0A++++Ok(())%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p>This example produces the following output:</p>\n<div class=\"example-wrap\"><pre class=\"language-console\"><code>Error: SuperError is here!\n\nCaused by:\n      SuperErrorSideKick is here!\n</code></pre></div></div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">Â§</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Report%3CE%3E\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/error.rs.html#233-242\">source</a><a href=\"#impl-Report%3CE%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;E&gt; <a class=\"struct\" href=\"struct.Report.html\" title=\"struct std::error::Report\">Report</a>&lt;E&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.Report.html\" title=\"struct std::error::Report\">Report</a>&lt;E&gt;: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;E&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"../../src/std/error.rs.html#239-241\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.new\" class=\"fn\">new</a>(error: E) -&gt; <a class=\"struct\" href=\"struct.Report.html\" title=\"struct std::error::Report\">Report</a>&lt;E&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>error_reporter</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/90172\">#90172</a>)</span></div></span></summary><div class=\"docblock\"><p>Create a new <code>Report</code> from an input error.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Report%3CE%3E-1\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/error.rs.html#244-446\">source</a><a href=\"#impl-Report%3CE%3E-1\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;E&gt; <a class=\"struct\" href=\"struct.Report.html\" title=\"struct std::error::Report\">Report</a>&lt;E&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.pretty\" class=\"method\"><a class=\"src rightside\" href=\"../../src/std/error.rs.html#353-356\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.pretty\" class=\"fn\">pretty</a>(self, pretty: <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>error_reporter</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/90172\">#90172</a>)</span></div></span></summary><div class=\"docblock\"><p>Enable pretty-printing the report across multiple lines.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(error_reporter)]\n</span><span class=\"kw\">use </span>std::error::Report;\n\n<span class=\"kw\">let </span>error = SuperError { source: SuperErrorSideKick };\n<span class=\"kw\">let </span>report = Report::new(error).pretty(<span class=\"bool-val\">true</span>);\n<span class=\"macro\">eprintln!</span>(<span class=\"string\">\"Error: {report:?}\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(error_reporter)%5D%0Afn+main()+%7B%0A++++use+std::error::Report;%0A++++use+std::error::Error;%0A++++use+std::fmt;%0A++++%23%5Bderive(Debug)%5D%0A++++struct+SuperError+%7B%0A++++++++source:+SuperErrorSideKick,%0A++++%7D%0A++++impl+fmt::Display+for+SuperError+%7B%0A++++++++fn+fmt(%26self,+f:+%26mut+fmt::Formatter%3C'_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++write!(f,+%22SuperError+is+here!%22)%0A++++++++%7D%0A++++%7D%0A++++impl+Error+for+SuperError+%7B%0A++++++++fn+source(%26self)+-%3E+Option%3C%26(dyn+Error+%2B+'static)%3E+%7B%0A++++++++++++Some(%26self.source)%0A++++++++%7D%0A++++%7D%0A++++%23%5Bderive(Debug)%5D%0A++++struct+SuperErrorSideKick;%0A++++impl+fmt::Display+for+SuperErrorSideKick+%7B%0A++++++++fn+fmt(%26self,+f:+%26mut+fmt::Formatter%3C'_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++write!(f,+%22SuperErrorSideKick+is+here!%22)%0A++++++++%7D%0A++++%7D%0A++++impl+Error+for+SuperErrorSideKick+%7B%7D%0A++++%0A++++let+error+=+SuperError+%7B+source:+SuperErrorSideKick+%7D;%0A++++let+report+=+Report::new(error).pretty(true);%0A++++eprintln!(%22Error:+%7Breport:?%7D%22);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p>This example produces the following output:</p>\n<div class=\"example-wrap\"><pre class=\"language-console\"><code>Error: SuperError is here!\n\nCaused by:\n      SuperErrorSideKick is here!\n</code></pre></div>\n<p>When there are multiple source errors the causes will be numbered in order of iteration\nstarting from the outermost error.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(error_reporter)]\n</span><span class=\"kw\">use </span>std::error::Report;\n\n<span class=\"kw\">let </span>source = SuperErrorSideKickSideKick;\n<span class=\"kw\">let </span>source = SuperErrorSideKick { source };\n<span class=\"kw\">let </span>error = SuperError { source };\n<span class=\"kw\">let </span>report = Report::new(error).pretty(<span class=\"bool-val\">true</span>);\n<span class=\"macro\">eprintln!</span>(<span class=\"string\">\"Error: {report:?}\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(error_reporter)%5D%0Afn+main()+%7B%0A++++use+std::error::Report;%0A++++use+std::error::Error;%0A++++use+std::fmt;%0A++++%23%5Bderive(Debug)%5D%0A++++struct+SuperError+%7B%0A++++++++source:+SuperErrorSideKick,%0A++++%7D%0A++++impl+fmt::Display+for+SuperError+%7B%0A++++++++fn+fmt(%26self,+f:+%26mut+fmt::Formatter%3C'_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++write!(f,+%22SuperError+is+here!%22)%0A++++++++%7D%0A++++%7D%0A++++impl+Error+for+SuperError+%7B%0A++++++++fn+source(%26self)+-%3E+Option%3C%26(dyn+Error+%2B+'static)%3E+%7B%0A++++++++++++Some(%26self.source)%0A++++++++%7D%0A++++%7D%0A++++%23%5Bderive(Debug)%5D%0A++++struct+SuperErrorSideKick+%7B%0A++++++++source:+SuperErrorSideKickSideKick,%0A++++%7D%0A++++impl+fmt::Display+for+SuperErrorSideKick+%7B%0A++++++++fn+fmt(%26self,+f:+%26mut+fmt::Formatter%3C'_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++write!(f,+%22SuperErrorSideKick+is+here!%22)%0A++++++++%7D%0A++++%7D%0A++++impl+Error+for+SuperErrorSideKick+%7B%0A++++++++fn+source(%26self)+-%3E+Option%3C%26(dyn+Error+%2B+'static)%3E+%7B%0A++++++++++++Some(%26self.source)%0A++++++++%7D%0A++++%7D%0A++++%23%5Bderive(Debug)%5D%0A++++struct+SuperErrorSideKickSideKick;%0A++++impl+fmt::Display+for+SuperErrorSideKickSideKick+%7B%0A++++++++fn+fmt(%26self,+f:+%26mut+fmt::Formatter%3C'_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++write!(f,+%22SuperErrorSideKickSideKick+is+here!%22)%0A++++++++%7D%0A++++%7D%0A++++impl+Error+for+SuperErrorSideKickSideKick+%7B+%7D%0A++++%0A++++let+source+=+SuperErrorSideKickSideKick;%0A++++let+source+=+SuperErrorSideKick+%7B+source+%7D;%0A++++let+error+=+SuperError+%7B+source+%7D;%0A++++let+report+=+Report::new(error).pretty(true);%0A++++eprintln!(%22Error:+%7Breport:?%7D%22);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p>This example produces the following output:</p>\n<div class=\"example-wrap\"><pre class=\"language-console\"><code>Error: SuperError is here!\n\nCaused by:\n   0: SuperErrorSideKick is here!\n   1: SuperErrorSideKickSideKick is here!\n</code></pre></div></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.show_backtrace\" class=\"method\"><a class=\"src rightside\" href=\"../../src/std/error.rs.html#442-445\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.show_backtrace\" class=\"fn\">show_backtrace</a>(self, show_backtrace: <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>error_reporter</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/90172\">#90172</a>)</span></div></span></summary><div class=\"docblock\"><p>Display backtrace if available when using pretty output format.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">Â§</a>Examples</h5>\n<p><strong>Note</strong>: Report will search for the first <code>Backtrace</code> it can find starting from the\noutermost error. In this example it will display the backtrace from the second error in the\nsources, <code>SuperErrorSideKick</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(error_reporter)]\n#![feature(error_generic_member_access)]\n</span><span class=\"kw\">use </span>std::error::Request;\n<span class=\"kw\">use </span>std::error::Report;\n<span class=\"kw\">use </span>std::backtrace::Backtrace;\n\n<span class=\"attr\">#[derive(Debug)]\n</span><span class=\"kw\">struct </span>SuperErrorSideKick {\n    backtrace: Backtrace,\n}\n\n<span class=\"kw\">impl </span>SuperErrorSideKick {\n    <span class=\"kw\">fn </span>new() -&gt; SuperErrorSideKick {\n        SuperErrorSideKick { backtrace: Backtrace::force_capture() }\n    }\n}\n\n<span class=\"kw\">impl </span>Error <span class=\"kw\">for </span>SuperErrorSideKick {\n    <span class=\"kw\">fn </span>provide&lt;<span class=\"lifetime\">'a</span>&gt;(<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><span class=\"self\">self</span>, request: <span class=\"kw-2\">&amp;mut </span>Request&lt;<span class=\"lifetime\">'a</span>&gt;) {\n        request.provide_ref::&lt;Backtrace&gt;(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.backtrace);\n    }\n}\n\n<span class=\"comment\">// The rest of the example is unchanged ...\n\n</span><span class=\"kw\">let </span>source = SuperErrorSideKick::new();\n<span class=\"kw\">let </span>error = SuperError { source };\n<span class=\"kw\">let </span>report = Report::new(error).pretty(<span class=\"bool-val\">true</span>).show_backtrace(<span class=\"bool-val\">true</span>);\n<span class=\"macro\">eprintln!</span>(<span class=\"string\">\"Error: {report:?}\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(error_reporter)%5D%0A%23!%5Bfeature(error_generic_member_access)%5D%0Afn+main()+%7B%0A++++use+std::error::Error;%0A++++use+std::fmt;%0A++++use+std::error::Request;%0A++++use+std::error::Report;%0A++++use+std::backtrace::Backtrace;%0A++++%0A++++%23%5Bderive(Debug)%5D%0A++++struct+SuperError+%7B%0A++++++++source:+SuperErrorSideKick,%0A++++%7D%0A++++impl+fmt::Display+for+SuperError+%7B%0A++++++++fn+fmt(%26self,+f:+%26mut+fmt::Formatter%3C'_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++write!(f,+%22SuperError+is+here!%22)%0A++++++++%7D%0A++++%7D%0A++++impl+Error+for+SuperError+%7B%0A++++++++fn+source(%26self)+-%3E+Option%3C%26(dyn+Error+%2B+'static)%3E+%7B%0A++++++++++++Some(%26self.source)%0A++++++++%7D%0A++++%7D%0A++++%23%5Bderive(Debug)%5D%0A++++struct+SuperErrorSideKick+%7B%0A++++++++backtrace:+Backtrace,%0A++++%7D%0A++++%0A++++impl+SuperErrorSideKick+%7B%0A++++++++fn+new()+-%3E+SuperErrorSideKick+%7B%0A++++++++++++SuperErrorSideKick+%7B+backtrace:+Backtrace::force_capture()+%7D%0A++++++++%7D%0A++++%7D%0A++++%0A++++impl+Error+for+SuperErrorSideKick+%7B%0A++++++++fn+provide%3C'a%3E(%26'a+self,+request:+%26mut+Request%3C'a%3E)+%7B%0A++++++++++++request.provide_ref::%3CBacktrace%3E(%26self.backtrace);%0A++++++++%7D%0A++++%7D%0A++++%0A++++//+The+rest+of+the+example+is+unchanged+...%0A++++impl+fmt::Display+for+SuperErrorSideKick+%7B%0A++++++++fn+fmt(%26self,+f:+%26mut+fmt::Formatter%3C'_%3E)+-%3E+fmt::Result+%7B%0A++++++++++++write!(f,+%22SuperErrorSideKick+is+here!%22)%0A++++++++%7D%0A++++%7D%0A++++%0A++++let+source+=+SuperErrorSideKick::new();%0A++++let+error+=+SuperError+%7B+source+%7D;%0A++++let+report+=+Report::new(error).pretty(true).show_backtrace(true);%0A++++eprintln!(%22Error:+%7Breport:?%7D%22);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n<p>This example produces something similar to the following output:</p>\n<div class=\"example-wrap\"><pre class=\"language-console\"><code>Error: SuperError is here!\n\nCaused by:\n      SuperErrorSideKick is here!\n\nStack backtrace:\n   0: rust_out::main::_doctest_main_src_error_rs_1158_0::SuperErrorSideKick::new\n   1: rust_out::main::_doctest_main_src_error_rs_1158_0\n   2: rust_out::main\n   3: core::ops::function::FnOnce::call_once\n   4: std::sys_common::backtrace::__rust_begin_short_backtrace\n   5: std::rt::lang_start::{{closure}}\n   6: std::panicking::try\n   7: std::rt::lang_start_internal\n   8: std::rt::lang_start\n   9: main\n  10: __libc_start_main\n  11: _start\n</code></pre></div></div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">Â§</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-Report%3CE%3E\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/error.rs.html#540-547\">source</a><a href=\"#impl-Debug-for-Report%3CE%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;E&gt; <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.Report.html\" title=\"struct std::error::Report\">Report</a>&lt;E&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"struct.Report.html\" title=\"struct std::error::Report\">Report</a>&lt;E&gt;: <a class=\"trait\" href=\"../fmt/trait.Display.html\" title=\"trait std::fmt::Display\">Display</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/error.rs.html#544-546\">source</a><a href=\"#method.fmt\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../fmt/type.Result.html\" title=\"type std::fmt::Result\">Result</a></h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Display-for-Report%3CE%3E\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/error.rs.html#528-535\">source</a><a href=\"#impl-Display-for-Report%3CE%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;E&gt; <a class=\"trait\" href=\"../fmt/trait.Display.html\" title=\"trait std::fmt::Display\">Display</a> for <a class=\"struct\" href=\"struct.Report.html\" title=\"struct std::error::Report\">Report</a>&lt;E&gt;<div class=\"where\">where\n    E: <a class=\"trait\" href=\"trait.Error.html\" title=\"trait std::error::Error\">Error</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/error.rs.html#532-534\">source</a><a href=\"#method.fmt-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../fmt/type.Result.html\" title=\"type std::fmt::Result\">Result</a></h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CE%3E-for-Report%3CE%3E\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/error.rs.html#518-525\">source</a><a href=\"#impl-From%3CE%3E-for-Report%3CE%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;E&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;E&gt; for <a class=\"struct\" href=\"struct.Report.html\" title=\"struct std::error::Report\">Report</a>&lt;E&gt;<div class=\"where\">where\n    E: <a class=\"trait\" href=\"trait.Error.html\" title=\"trait std::error::Error\">Error</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/error.rs.html#522-524\">source</a><a href=\"#method.from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(error: E) -&gt; Self</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">Â§</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-Report%3CE%3E\" class=\"impl\"><a href=\"#impl-Freeze-for-Report%3CE%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;E&gt; <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.Report.html\" title=\"struct std::error::Report\">Report</a>&lt;E&gt;<div class=\"where\">where\n    E: <a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a>,</div></h3></section><section id=\"impl-RefUnwindSafe-for-Report%3CE%3E\" class=\"impl\"><a href=\"#impl-RefUnwindSafe-for-Report%3CE%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;E&gt; <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.Report.html\" title=\"struct std::error::Report\">Report</a>&lt;E&gt;<div class=\"where\">where\n    E: <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a>,</div></h3></section><section id=\"impl-Send-for-Report%3CE%3E\" class=\"impl\"><a href=\"#impl-Send-for-Report%3CE%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;E&gt; <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.Report.html\" title=\"struct std::error::Report\">Report</a>&lt;E&gt;<div class=\"where\">where\n    E: <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a>,</div></h3></section><section id=\"impl-Sync-for-Report%3CE%3E\" class=\"impl\"><a href=\"#impl-Sync-for-Report%3CE%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;E&gt; <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.Report.html\" title=\"struct std::error::Report\">Report</a>&lt;E&gt;<div class=\"where\">where\n    E: <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a>,</div></h3></section><section id=\"impl-Unpin-for-Report%3CE%3E\" class=\"impl\"><a href=\"#impl-Unpin-for-Report%3CE%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;E&gt; <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.Report.html\" title=\"struct std::error::Report\">Report</a>&lt;E&gt;<div class=\"where\">where\n    E: <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a>,</div></h3></section><section id=\"impl-UnwindSafe-for-Report%3CE%3E\" class=\"impl\"><a href=\"#impl-UnwindSafe-for-Report%3CE%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;E&gt; <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.Report.html\" title=\"struct std::error::Report\">Report</a>&lt;E&gt;<div class=\"where\">where\n    E: <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a>,</div></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">Â§</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3C!%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#782\">source</a><a href=\"#impl-From%3C!%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"../primitive.never.html\">!</a>&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#783\">source</a><a href=\"#method.from-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: <a class=\"primitive\" href=\"../primitive.never.html\">!</a>) -&gt; T</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from-2\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToString-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2552\">source</a><a href=\"#impl-ToString-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../string/trait.ToString.html\" title=\"trait std::string::ToString\">ToString</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../fmt/trait.Display.html\" title=\"trait std::fmt::Display\">Display</a> + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_string\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/string.rs.html#2558\">source</a><a href=\"#method.to_string\" class=\"anchor\">Â§</a><h4 class=\"code-header\">default fn <a href=\"../string/trait.ToString.html#tymethod.to_string\" class=\"fn\">to_string</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a></h4></section></summary><div class=\"docblock\">Converts the given value to a <code>String</code>. <a href=\"../string/trait.ToString.html#tymethod.to_string\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:22:59.798Z"
}