{
	"title": "test - Rust",
	"url": "https://doc.rust-lang.org/stable/test/index.html",
	"markdown": "# test - Rust\n\nðŸ”¬This is a nightly-only experimental API. (`test`)\n\nExpand description\n\nSupport code for rustcâ€™s built in unit-test and micro-benchmarking framework.\n\nAlmost all user code will only be interested in `Bencher` and `black_box`. All other interactions (such as writing tests and benchmarks themselves) should be done via the `#[test]` and `#[bench]` attributes.\n\nSee the [Testing Chapter](../book/ch11-00-testing.html) of the book for more details.\n\n-   Experimental\n    \n-   `pub use self::bench::[Bencher](bench/struct.Bencher.html \"struct test::bench::Bencher\");`\n    \n    Experimental\n    \n-   `pub use self::types::[TestName](test/enum.TestName.html \"enum test::test::TestName\")::*;`\n    \n    Experimental\n    \n-   Experimental\n    \n-   Experimental\n    \n-   Experimental\n    \n-   Experimental\n    \n\n-   Benchmarking module.\n    \n\n-   Options for the test run defined by the caller (instead of CLI arguments). In case we want to add other options as well, just add them in this struct.\n    \n\n-   Whether should console output be colored or not\n    \n\n-   Format of the test results output\n    \n-   Whether ignored test should be run or not\n    \n-   Whether test is expected to panic or not\n    \n\n-   Type of the test according to the [Rust book](https://doc.rust-lang.org/cargo/guide/tests.html) conventions.\n    \n\n-   Invoked when unit tests terminate. Returns `Result::Err` if the test is considered a failure. By default, invokes `report()` and checks for a `0` result.\n    \n\n-   A simple console test runner. Runs provided tests reporting process and results to the stdout.\n    \n\n-   A variant optimized for invocation with a static test vector. This will panic (intentionally) when fed any dynamic tests.\n    \n-   A variant optimized for invocation with a static test vector. This will panic (intentionally) when fed any dynamic tests.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Support code for rustcâ€™s built in unit-test and micro-benchmarking framework.\"><title>test - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../\" data-static-root-path=\"../static.files/\" data-current-crate=\"test\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"../crates1.80.0.js\"></script><script defer=\"\" src=\"../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc mod crate\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../test/index.html\"><img class=\"rust-logo\" src=\"../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\">Crate <a href=\"#\">test</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../test/index.html\"><img class=\"rust-logo\" src=\"../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../test/index.html\">test</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><ul class=\"block\"><li><a id=\"all-types\" href=\"all.html\">All Items</a></li></ul><section><ul class=\"block\"><li><a href=\"#reexports\">Re-exports</a></li><li><a href=\"#modules\">Modules</a></li><li><a href=\"#structs\">Structs</a></li><li><a href=\"#enums\">Enums</a></li><li><a href=\"#functions\">Functions</a></li></ul></section><h3>Crates</h3><ul class=\"block crate\"><li><a href=\"../alloc/index.html\">alloc</a></li><li><a href=\"../core/index.html\">core</a></li><li><a href=\"../proc_macro/index.html\">proc_macro</a></li><li><a href=\"../std/index.html\">std</a></li><li class=\"current\"><a href=\"../test/index.html\">test</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../test/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type â€˜Sâ€™ or â€˜/â€™ to search, â€˜?â€™ for more optionsâ€¦\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Crate <a class=\"mod\" href=\"#\">test</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><a class=\"src\" href=\"../src/test/lib.rs.html#1-758\">source</a> Â· <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>âˆ’</span>]</button></span></div><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>test</code>)</span></div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Support code for rustcâ€™s built in unit-test and micro-benchmarking\nframework.</p>\n<p>Almost all user code will only be interested in <code>Bencher</code> and\n<code>black_box</code>. All other interactions (such as writing tests and\nbenchmarks themselves) should be done via the <code>#[test]</code> and\n<code>#[bench]</code> attributes.</p>\n<p>See the <a href=\"../book/ch11-00-testing.html\">Testing Chapter</a> of the book for more\ndetails.</p>\n</div></details><h2 id=\"reexports\" class=\"section-header\">Re-exports<a href=\"#reexports\" class=\"anchor\">Â§</a></h2><ul class=\"item-table\"><li><div class=\"item-name\" id=\"reexport.black_box\"><code>pub use self::bench::<a class=\"fn\" href=\"bench/fn.black_box.html\" title=\"fn test::bench::black_box\">black_box</a>;</code></div><div class=\"desc docblock-short\"><span class=\"stab unstable\" title=\"\">Experimental</span></div></li><li><div class=\"item-name\" id=\"reexport.Bencher\"><code>pub use self::bench::<a class=\"struct\" href=\"bench/struct.Bencher.html\" title=\"struct test::bench::Bencher\">Bencher</a>;</code></div><div class=\"desc docblock-short\"><span class=\"stab unstable\" title=\"\">Experimental</span></div></li><li><div class=\"item-name\"><code>pub use self::types::<a class=\"enum\" href=\"test/enum.TestName.html\" title=\"enum test::test::TestName\">TestName</a>::*;</code></div><div class=\"desc docblock-short\"><span class=\"stab unstable\" title=\"\">Experimental</span></div></li><li><div class=\"item-name\"><code>pub use <a class=\"enum\" href=\"enum.NamePadding.html\" title=\"enum test::NamePadding\">NamePadding</a>::*;</code></div><div class=\"desc docblock-short\"><span class=\"stab unstable\" title=\"\">Experimental</span></div></li><li><div class=\"item-name\"><code>pub use <a class=\"enum\" href=\"enum.TestFn.html\" title=\"enum test::TestFn\">TestFn</a>::*;</code></div><div class=\"desc docblock-short\"><span class=\"stab unstable\" title=\"\">Experimental</span></div></li><li><div class=\"item-name\"><code>pub use <a class=\"enum\" href=\"test/enum.TestName.html\" title=\"enum test::test::TestName\">TestName</a>::*;</code></div><div class=\"desc docblock-short\"><span class=\"stab unstable\" title=\"\">Experimental</span></div></li><li><div class=\"item-name\"><code>pub use self::<a class=\"enum\" href=\"enum.ColorConfig.html\" title=\"enum test::ColorConfig\">ColorConfig</a>::*;</code></div><div class=\"desc docblock-short\"><span class=\"stab unstable\" title=\"\">Experimental</span></div></li></ul><h2 id=\"modules\" class=\"section-header\">Modules<a href=\"#modules\" class=\"anchor\">Â§</a></h2><ul class=\"item-table\"><li><div class=\"item-name\"><a class=\"mod\" href=\"bench/index.html\" title=\"mod test::bench\">bench</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Benchmarking module.</div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"stats/index.html\" title=\"mod test::stats\">stats</a><span class=\"stab unstable\" title=\"\">Experimental</span></div></li><li><div class=\"item-name\"><a class=\"mod\" href=\"test/index.html\" title=\"mod test::test\">test</a><span class=\"stab unstable\" title=\"\">Experimental</span></div></li></ul><h2 id=\"structs\" class=\"section-header\">Structs<a href=\"#structs\" class=\"anchor\">Â§</a></h2><ul class=\"item-table\"><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.Options.html\" title=\"struct test::Options\">Options</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Options for the test run defined by the caller (instead of CLI arguments).\nIn case we want to add other options as well, just add them in this struct.</div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.TestDesc.html\" title=\"struct test::TestDesc\">TestDesc</a><span class=\"stab unstable\" title=\"\">Experimental</span></div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.TestDescAndFn.html\" title=\"struct test::TestDescAndFn\">TestDescAndFn</a><span class=\"stab unstable\" title=\"\">Experimental</span></div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.TestId.html\" title=\"struct test::TestId\">TestId</a><span class=\"stab unstable\" title=\"\">Experimental</span></div></li><li><div class=\"item-name\"><a class=\"struct\" href=\"struct.TestOpts.html\" title=\"struct test::TestOpts\">TestOpts</a><span class=\"stab unstable\" title=\"\">Experimental</span></div></li></ul><h2 id=\"enums\" class=\"section-header\">Enums<a href=\"#enums\" class=\"anchor\">Â§</a></h2><ul class=\"item-table\"><li><div class=\"item-name\"><a class=\"enum\" href=\"enum.ColorConfig.html\" title=\"enum test::ColorConfig\">ColorConfig</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Whether should console output be colored or not</div></li><li><div class=\"item-name\"><a class=\"enum\" href=\"enum.NamePadding.html\" title=\"enum test::NamePadding\">NamePadding</a><span class=\"stab unstable\" title=\"\">Experimental</span></div></li><li><div class=\"item-name\"><a class=\"enum\" href=\"enum.OutputFormat.html\" title=\"enum test::OutputFormat\">OutputFormat</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Format of the test results output</div></li><li><div class=\"item-name\"><a class=\"enum\" href=\"enum.RunIgnored.html\" title=\"enum test::RunIgnored\">RunIgnored</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Whether ignored test should be run or not</div></li><li><div class=\"item-name\"><a class=\"enum\" href=\"enum.ShouldPanic.html\" title=\"enum test::ShouldPanic\">ShouldPanic</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Whether test is expected to panic or not</div></li><li><div class=\"item-name\"><a class=\"enum\" href=\"enum.TestFn.html\" title=\"enum test::TestFn\">TestFn</a><span class=\"stab unstable\" title=\"\">Experimental</span></div></li><li><div class=\"item-name\"><a class=\"enum\" href=\"enum.TestName.html\" title=\"enum test::TestName\">TestName</a><span class=\"stab unstable\" title=\"\">Experimental</span></div></li><li><div class=\"item-name\"><a class=\"enum\" href=\"enum.TestType.html\" title=\"enum test::TestType\">TestType</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Type of the test according to the <a href=\"https://doc.rust-lang.org/cargo/guide/tests.html\">Rust book</a>\nconventions.</div></li></ul><h2 id=\"functions\" class=\"section-header\">Functions<a href=\"#functions\" class=\"anchor\">Â§</a></h2><ul class=\"item-table\"><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.assert_test_result.html\" title=\"fn test::assert_test_result\">assert_test_result</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">Invoked when unit tests terminate. Returns <code>Result::Err</code> if the test is\nconsidered a failure. By default, invokes <code>report()</code> and checks for a <code>0</code>\nresult.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.convert_benchmarks_to_tests.html\" title=\"fn test::convert_benchmarks_to_tests\">convert_benchmarks_to_tests</a><span class=\"stab unstable\" title=\"\">Experimental</span></div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.filter_tests.html\" title=\"fn test::filter_tests\">filter_tests</a><span class=\"stab unstable\" title=\"\">Experimental</span></div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.run_test.html\" title=\"fn test::run_test\">run_test</a><span class=\"stab unstable\" title=\"\">Experimental</span></div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.run_tests.html\" title=\"fn test::run_tests\">run_tests</a><span class=\"stab unstable\" title=\"\">Experimental</span></div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.run_tests_console.html\" title=\"fn test::run_tests_console\">run_tests_console</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">A simple console test runner.\nRuns provided tests reporting process and results to the stdout.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.test_main.html\" title=\"fn test::test_main\">test_main</a><span class=\"stab unstable\" title=\"\">Experimental</span></div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.test_main_static.html\" title=\"fn test::test_main_static\">test_main_static</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">A variant optimized for invocation with a static test vector.\nThis will panic (intentionally) when fed any dynamic tests.</div></li><li><div class=\"item-name\"><a class=\"fn\" href=\"fn.test_main_static_abort.html\" title=\"fn test::test_main_static_abort\">test_main_static_abort</a><span class=\"stab unstable\" title=\"\">Experimental</span></div><div class=\"desc docblock-short\">A variant optimized for invocation with a static test vector.\nThis will panic (intentionally) when fed any dynamic tests.</div></li></ul></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:20:24.110Z"
}