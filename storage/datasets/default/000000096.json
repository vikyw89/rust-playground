{
	"title": "Turning Our Single-Threaded Server into a Multithreaded Server - The Rust Programming Language",
	"url": "https://doc.rust-lang.org/stable/book/ch20-02-multithreaded.html",
	"markdown": "# Turning Our Single-Threaded Server into a Multithreaded Server\n\nRight now, the server will process each request in turn, meaning it won’t process a second connection until the first is finished processing. If the server received more and more requests, this serial execution would be less and less optimal. If the server receives a request that takes a long time to process, subsequent requests will have to wait until the long request is finished, even if the new requests can be processed quickly. We’ll need to fix this, but first, we’ll look at the problem in action.\n\n### [Simulating a Slow Request in the Current Server Implementation](#simulating-a-slow-request-in-the-current-server-implementation)\n\nWe’ll look at how a slow-processing request can affect other requests made to our current server implementation. Listing 20-10 implements handling a request to _/sleep_ with a simulated slow response that will cause the server to sleep for 5 seconds before responding.\n\nFilename: src/main.rs\n\n```rust\nuse std::{\n    fs,\n    io::{prelude::*, BufReader},\n    net::{TcpListener, TcpStream},\n    thread,\n    time::Duration,\n};\n// --snip--\n\nfn main() {\n    let listener = TcpListener::bind(\"127.0.0.1:7878\").unwrap();\n\n    for stream in listener.incoming() {\n        let stream = stream.unwrap();\n\n        handle_connection(stream);\n    }\n}\n\nfn handle_connection(mut stream: TcpStream) {\n    // --snip--\n\n    let buf_reader = BufReader::new(&mut stream);\n    let request_line = buf_reader.lines().next().unwrap().unwrap();\n\n    let (status_line, filename) = match &request_line[..] {\n        \"GET / HTTP/1.1\" => (\"HTTP/1.1 200 OK\", \"hello.html\"),\n        \"GET /sleep HTTP/1.1\" => {\n            thread::sleep(Duration::from_secs(5));\n            (\"HTTP/1.1 200 OK\", \"hello.html\")\n        }\n        _ => (\"HTTP/1.1 404 NOT FOUND\", \"404.html\"),\n    };\n\n    // --snip--\n\n    let contents = fs::read_to_string(filename).unwrap();\n    let length = contents.len();\n\n    let response =\n        format!(\"{status_line}\\r\\nContent-Length: {length}\\r\\n\\r\\n{contents}\");\n\n    stream.write_all(response.as_bytes()).unwrap();\n}\n```\n\nListing 20-10: Simulating a slow request by sleeping for 5 seconds\n\nWe switched from `if` to `match` now that we have three cases. We need to explicitly match on a slice of `request_line` to pattern match against the string literal values; `match` doesn’t do automatic referencing and dereferencing like the equality method does.\n\nThe first arm is the same as the `if` block from Listing 20-9. The second arm matches a request to _/sleep_. When that request is received, the server will sleep for 5 seconds before rendering the successful HTML page. The third arm is the same as the `else` block from Listing 20-9.\n\nYou can see how primitive our server is: real libraries would handle the recognition of multiple requests in a much less verbose way!\n\nStart the server using `cargo run`. Then open two browser windows: one for _http://127.0.0.1:7878/_ and the other for _http://127.0.0.1:7878/sleep_. If you enter the _/_ URI a few times, as before, you’ll see it respond quickly. But if you enter _/sleep_ and then load _/_, you’ll see that _/_ waits until `sleep` has slept for its full 5 seconds before loading.\n\nThere are multiple techniques we could use to avoid requests backing up behind a slow request; the one we’ll implement is a thread pool.\n\n### [Improving Throughput with a Thread Pool](#improving-throughput-with-a-thread-pool)\n\nA _thread pool_ is a group of spawned threads that are waiting and ready to handle a task. When the program receives a new task, it assigns one of the threads in the pool to the task, and that thread will process the task. The remaining threads in the pool are available to handle any other tasks that come in while the first thread is processing. When the first thread is done processing its task, it’s returned to the pool of idle threads, ready to handle a new task. A thread pool allows you to process connections concurrently, increasing the throughput of your server.\n\nWe’ll limit the number of threads in the pool to a small number to protect us from Denial of Service (DoS) attacks; if we had our program create a new thread for each request as it came in, someone making 10 million requests to our server could create havoc by using up all our server’s resources and grinding the processing of requests to a halt.\n\nRather than spawning unlimited threads, then, we’ll have a fixed number of threads waiting in the pool. Requests that come in are sent to the pool for processing. The pool will maintain a queue of incoming requests. Each of the threads in the pool will pop off a request from this queue, handle the request, and then ask the queue for another request. With this design, we can process up to `N` requests concurrently, where `N` is the number of threads. If each thread is responding to a long-running request, subsequent requests can still back up in the queue, but we’ve increased the number of long-running requests we can handle before reaching that point.\n\nThis technique is just one of many ways to improve the throughput of a web server. Other options you might explore are the _fork/join model_, the _single-threaded async I/O model_, or the _multi-threaded async I/O model_. If you’re interested in this topic, you can read more about other solutions and try to implement them; with a low-level language like Rust, all of these options are possible.\n\nBefore we begin implementing a thread pool, let’s talk about what using the pool should look like. When you’re trying to design code, writing the client interface first can help guide your design. Write the API of the code so it’s structured in the way you want to call it; then implement the functionality within that structure rather than implementing the functionality and then designing the public API.\n\nSimilar to how we used test-driven development in the project in Chapter 12, we’ll use compiler-driven development here. We’ll write the code that calls the functions we want, and then we’ll look at errors from the compiler to determine what we should change next to get the code to work. Before we do that, however, we’ll explore the technique we’re not going to use as a starting point.\n\n#### [Spawning a Thread for Each Request](#spawning-a-thread-for-each-request)\n\nFirst, let’s explore how our code might look if it did create a new thread for every connection. As mentioned earlier, this isn’t our final plan due to the problems with potentially spawning an unlimited number of threads, but it is a starting point to get a working multithreaded server first. Then we’ll add the thread pool as an improvement, and contrasting the two solutions will be easier. Listing 20-11 shows the changes to make to `main` to spawn a new thread to handle each stream within the `for` loop.\n\nFilename: src/main.rs\n\n```rust\nuse std::{\n    fs,\n    io::{prelude::*, BufReader},\n    net::{TcpListener, TcpStream},\n    thread,\n    time::Duration,\n};\n\nfn main() {\n    let listener = TcpListener::bind(\"127.0.0.1:7878\").unwrap();\n\n    for stream in listener.incoming() {\n        let stream = stream.unwrap();\n\n        thread::spawn(|| {\n            handle_connection(stream);\n        });\n    }\n}\n\nfn handle_connection(mut stream: TcpStream) {\n    let buf_reader = BufReader::new(&mut stream);\n    let request_line = buf_reader.lines().next().unwrap().unwrap();\n\n    let (status_line, filename) = match &request_line[..] {\n        \"GET / HTTP/1.1\" => (\"HTTP/1.1 200 OK\", \"hello.html\"),\n        \"GET /sleep HTTP/1.1\" => {\n            thread::sleep(Duration::from_secs(5));\n            (\"HTTP/1.1 200 OK\", \"hello.html\")\n        }\n        _ => (\"HTTP/1.1 404 NOT FOUND\", \"404.html\"),\n    };\n\n    let contents = fs::read_to_string(filename).unwrap();\n    let length = contents.len();\n\n    let response =\n        format!(\"{status_line}\\r\\nContent-Length: {length}\\r\\n\\r\\n{contents}\");\n\n    stream.write_all(response.as_bytes()).unwrap();\n}\n```\n\nListing 20-11: Spawning a new thread for each stream\n\nAs you learned in Chapter 16, `thread::spawn` will create a new thread and then run the code in the closure in the new thread. If you run this code and load _/sleep_ in your browser, then _/_ in two more browser tabs, you’ll indeed see that the requests to _/_ don’t have to wait for _/sleep_ to finish. However, as we mentioned, this will eventually overwhelm the system because you’d be making new threads without any limit.\n\n#### [Creating a Finite Number of Threads](#creating-a-finite-number-of-threads)\n\nWe want our thread pool to work in a similar, familiar way so switching from threads to a thread pool doesn’t require large changes to the code that uses our API. Listing 20-12 shows the hypothetical interface for a `ThreadPool` struct we want to use instead of `thread::spawn`.\n\nFilename: src/main.rs\n\n```rust\nuse std::{\n    fs,\n    io::{prelude::*, BufReader},\n    net::{TcpListener, TcpStream},\n    thread,\n    time::Duration,\n};\n\nfn main() {\n    let listener = TcpListener::bind(\"127.0.0.1:7878\").unwrap();\n    let pool = ThreadPool::new(4);\n\n    for stream in listener.incoming() {\n        let stream = stream.unwrap();\n\n        pool.execute(|| {\n            handle_connection(stream);\n        });\n    }\n}\n\nfn handle_connection(mut stream: TcpStream) {\n    let buf_reader = BufReader::new(&mut stream);\n    let request_line = buf_reader.lines().next().unwrap().unwrap();\n\n    let (status_line, filename) = match &request_line[..] {\n        \"GET / HTTP/1.1\" => (\"HTTP/1.1 200 OK\", \"hello.html\"),\n        \"GET /sleep HTTP/1.1\" => {\n            thread::sleep(Duration::from_secs(5));\n            (\"HTTP/1.1 200 OK\", \"hello.html\")\n        }\n        _ => (\"HTTP/1.1 404 NOT FOUND\", \"404.html\"),\n    };\n\n    let contents = fs::read_to_string(filename).unwrap();\n    let length = contents.len();\n\n    let response =\n        format!(\"{status_line}\\r\\nContent-Length: {length}\\r\\n\\r\\n{contents}\");\n\n    stream.write_all(response.as_bytes()).unwrap();\n}\n```\n\nListing 20-12: Our ideal `ThreadPool` interface\n\nWe use `ThreadPool::new` to create a new thread pool with a configurable number of threads, in this case four. Then, in the `for` loop, `pool.execute` has a similar interface as `thread::spawn` in that it takes a closure the pool should run for each stream. We need to implement `pool.execute` so it takes the closure and gives it to a thread in the pool to run. This code won’t yet compile, but we’ll try so the compiler can guide us in how to fix it.\n\n#### [Building `ThreadPool` Using Compiler Driven Development](#building-threadpool-using-compiler-driven-development)\n\nMake the changes in Listing 20-12 to _src/main.rs_, and then let’s use the compiler errors from `cargo check` to drive our development. Here is the first error we get:\n\n```console\n$ cargo check\n    Checking hello v0.1.0 (file:///projects/hello)\nerror[E0433]: failed to resolve: use of undeclared type `ThreadPool`\n  --> src/main.rs:11:16\n   |\n11 |     let pool = ThreadPool::new(4);\n   |                ^^^^^^^^^^ use of undeclared type `ThreadPool`\n\nFor more information about this error, try `rustc --explain E0433`.\nerror: could not compile `hello` (bin \"hello\") due to 1 previous error\n\n```\n\nGreat! This error tells us we need a `ThreadPool` type or module, so we’ll build one now. Our `ThreadPool` implementation will be independent of the kind of work our web server is doing. So, let’s switch the `hello` crate from a binary crate to a library crate to hold our `ThreadPool` implementation. After we change to a library crate, we could also use the separate thread pool library for any work we want to do using a thread pool, not just for serving web requests.\n\nCreate a _src/lib.rs_ that contains the following, which is the simplest definition of a `ThreadPool` struct that we can have for now:\n\nFilename: src/lib.rs\n\n```rust\npub struct ThreadPool;\n```\n\nThen edit _main.rs_ file to bring `ThreadPool` into scope from the library crate by adding the following code to the top of _src/main.rs_:\n\nFilename: src/main.rs\n\n```rust\nuse hello::ThreadPool;\nuse std::{\n    fs,\n    io::{prelude::*, BufReader},\n    net::{TcpListener, TcpStream},\n    thread,\n    time::Duration,\n};\n\nfn main() {\n    let listener = TcpListener::bind(\"127.0.0.1:7878\").unwrap();\n    let pool = ThreadPool::new(4);\n\n    for stream in listener.incoming() {\n        let stream = stream.unwrap();\n\n        pool.execute(|| {\n            handle_connection(stream);\n        });\n    }\n}\n\nfn handle_connection(mut stream: TcpStream) {\n    let buf_reader = BufReader::new(&mut stream);\n    let request_line = buf_reader.lines().next().unwrap().unwrap();\n\n    let (status_line, filename) = match &request_line[..] {\n        \"GET / HTTP/1.1\" => (\"HTTP/1.1 200 OK\", \"hello.html\"),\n        \"GET /sleep HTTP/1.1\" => {\n            thread::sleep(Duration::from_secs(5));\n            (\"HTTP/1.1 200 OK\", \"hello.html\")\n        }\n        _ => (\"HTTP/1.1 404 NOT FOUND\", \"404.html\"),\n    };\n\n    let contents = fs::read_to_string(filename).unwrap();\n    let length = contents.len();\n\n    let response =\n        format!(\"{status_line}\\r\\nContent-Length: {length}\\r\\n\\r\\n{contents}\");\n\n    stream.write_all(response.as_bytes()).unwrap();\n}\n```\n\nThis code still won’t work, but let’s check it again to get the next error that we need to address:\n\n```console\n$ cargo check\n    Checking hello v0.1.0 (file:///projects/hello)\nerror[E0599]: no function or associated item named `new` found for struct `ThreadPool` in the current scope\n  --> src/main.rs:12:28\n   |\n12 |     let pool = ThreadPool::new(4);\n   |                            ^^^ function or associated item not found in `ThreadPool`\n\nFor more information about this error, try `rustc --explain E0599`.\nerror: could not compile `hello` (bin \"hello\") due to 1 previous error\n\n```\n\nThis error indicates that next we need to create an associated function named `new` for `ThreadPool`. We also know that `new` needs to have one parameter that can accept `4` as an argument and should return a `ThreadPool` instance. Let’s implement the simplest `new` function that will have those characteristics:\n\nFilename: src/lib.rs\n\n```rust\npub struct ThreadPool;\n\nimpl ThreadPool {\n    pub fn new(size: usize) -> ThreadPool {\n        ThreadPool\n    }\n}\n```\n\nWe chose `usize` as the type of the `size` parameter, because we know that a negative number of threads doesn’t make any sense. We also know we’ll use this 4 as the number of elements in a collection of threads, which is what the `usize` type is for, as discussed in the [“Integer Types”](about:blank/ch03-02-data-types.html#integer-types) section of Chapter 3.\n\nLet’s check the code again:\n\n```console\n$ cargo check\n    Checking hello v0.1.0 (file:///projects/hello)\nerror[E0599]: no method named `execute` found for struct `ThreadPool` in the current scope\n  --> src/main.rs:17:14\n   |\n17 |         pool.execute(|| {\n   |         -----^^^^^^^ method not found in `ThreadPool`\n\nFor more information about this error, try `rustc --explain E0599`.\nerror: could not compile `hello` (bin \"hello\") due to 1 previous error\n\n```\n\nNow the error occurs because we don’t have an `execute` method on `ThreadPool`. Recall from the [“Creating a Finite Number of Threads”](#creating-a-finite-number-of-threads) section that we decided our thread pool should have an interface similar to `thread::spawn`. In addition, we’ll implement the `execute` function so it takes the closure it’s given and gives it to an idle thread in the pool to run.\n\nWe’ll define the `execute` method on `ThreadPool` to take a closure as a parameter. Recall from the [“Moving Captured Values Out of the Closure and the `Fn` Traits”](about:blank/ch13-01-closures.html#moving-captured-values-out-of-the-closure-and-the-fn-traits) section in Chapter 13 that we can take closures as parameters with three different traits: `Fn`, `FnMut`, and `FnOnce`. We need to decide which kind of closure to use here. We know we’ll end up doing something similar to the standard library `thread::spawn` implementation, so we can look at what bounds the signature of `thread::spawn` has on its parameter. The documentation shows us the following:\n\n```rust\npub fn spawn<F, T>(f: F) -> JoinHandle<T>\n    where\n        F: FnOnce() -> T,\n        F: Send + 'static,\n        T: Send + 'static,\n```\n\nThe `F` type parameter is the one we’re concerned with here; the `T` type parameter is related to the return value, and we’re not concerned with that. We can see that `spawn` uses `FnOnce` as the trait bound on `F`. This is probably what we want as well, because we’ll eventually pass the argument we get in `execute` to `spawn`. We can be further confident that `FnOnce` is the trait we want to use because the thread for running a request will only execute that request’s closure one time, which matches the `Once` in `FnOnce`.\n\nThe `F` type parameter also has the trait bound `Send` and the lifetime bound `'static`, which are useful in our situation: we need `Send` to transfer the closure from one thread to another and `'static` because we don’t know how long the thread will take to execute. Let’s create an `execute` method on `ThreadPool` that will take a generic parameter of type `F` with these bounds:\n\nFilename: src/lib.rs\n\n```rust\npub struct ThreadPool;\n\nimpl ThreadPool {\n    // --snip--\n    pub fn new(size: usize) -> ThreadPool {\n        ThreadPool\n    }\n\n    pub fn execute<F>(&self, f: F)\n    where\n        F: FnOnce() + Send + 'static,\n    {\n    }\n}\n```\n\nWe still use the `()` after `FnOnce` because this `FnOnce` represents a closure that takes no parameters and returns the unit type `()`. Just like function definitions, the return type can be omitted from the signature, but even if we have no parameters, we still need the parentheses.\n\nAgain, this is the simplest implementation of the `execute` method: it does nothing, but we’re trying only to make our code compile. Let’s check it again:\n\n```console\n$ cargo check\n    Checking hello v0.1.0 (file:///projects/hello)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.24s\n\n```\n\nIt compiles! But note that if you try `cargo run` and make a request in the browser, you’ll see the errors in the browser that we saw at the beginning of the chapter. Our library isn’t actually calling the closure passed to `execute` yet!\n\nNote: A saying you might hear about languages with strict compilers, such as Haskell and Rust, is “if the code compiles, it works.” But this saying is not universally true. Our project compiles, but it does absolutely nothing! If we were building a real, complete project, this would be a good time to start writing unit tests to check that the code compiles _and_ has the behavior we want.\n\n#### [Validating the Number of Threads in `new`](#validating-the-number-of-threads-in-new)\n\nWe aren’t doing anything with the parameters to `new` and `execute`. Let’s implement the bodies of these functions with the behavior we want. To start, let’s think about `new`. Earlier we chose an unsigned type for the `size` parameter, because a pool with a negative number of threads makes no sense. However, a pool with zero threads also makes no sense, yet zero is a perfectly valid `usize`. We’ll add code to check that `size` is greater than zero before we return a `ThreadPool` instance and have the program panic if it receives a zero by using the `assert!` macro, as shown in Listing 20-13.\n\nFilename: src/lib.rs\n\n```rust\npub struct ThreadPool;\n\nimpl ThreadPool {\n    /// Create a new ThreadPool.\n    ///\n    /// The size is the number of threads in the pool.\n    ///\n    /// # Panics\n    ///\n    /// The `new` function will panic if the size is zero.\n    pub fn new(size: usize) -> ThreadPool {\n        assert!(size > 0);\n\n        ThreadPool\n    }\n\n    // --snip--\n    pub fn execute<F>(&self, f: F)\n    where\n        F: FnOnce() + Send + 'static,\n    {\n    }\n}\n```\n\nListing 20-13: Implementing `ThreadPool::new` to panic if `size` is zero\n\nWe’ve also added some documentation for our `ThreadPool` with doc comments. Note that we followed good documentation practices by adding a section that calls out the situations in which our function can panic, as discussed in Chapter 14. Try running `cargo doc --open` and clicking the `ThreadPool` struct to see what the generated docs for `new` look like!\n\nInstead of adding the `assert!` macro as we’ve done here, we could change `new` into `build` and return a `Result` like we did with `Config::build` in the I/O project in Listing 12-9. But we’ve decided in this case that trying to create a thread pool without any threads should be an unrecoverable error. If you’re feeling ambitious, try to write a function named `build` with the following signature to compare with the `new` function:\n\n```rust\npub fn build(size: usize) -> Result<ThreadPool, PoolCreationError> {\n```\n\n#### [Creating Space to Store the Threads](#creating-space-to-store-the-threads)\n\nNow that we have a way to know we have a valid number of threads to store in the pool, we can create those threads and store them in the `ThreadPool` struct before returning the struct. But how do we “store” a thread? Let’s take another look at the `thread::spawn` signature:\n\n```rust\npub fn spawn<F, T>(f: F) -> JoinHandle<T>\n    where\n        F: FnOnce() -> T,\n        F: Send + 'static,\n        T: Send + 'static,\n```\n\nThe `spawn` function returns a `JoinHandle<T>`, where `T` is the type that the closure returns. Let’s try using `JoinHandle` too and see what happens. In our case, the closures we’re passing to the thread pool will handle the connection and not return anything, so `T` will be the unit type `()`.\n\nThe code in Listing 20-14 will compile but doesn’t create any threads yet. We’ve changed the definition of `ThreadPool` to hold a vector of `thread::JoinHandle<()>` instances, initialized the vector with a capacity of `size`, set up a `for` loop that will run some code to create the threads, and returned a `ThreadPool` instance containing them.\n\nFilename: src/lib.rs\n\n```rust\nuse std::thread;\n\npub struct ThreadPool {\n    threads: Vec<thread::JoinHandle<()>>,\n}\n\nimpl ThreadPool {\n    // --snip--\n    /// Create a new ThreadPool.\n    ///\n    /// The size is the number of threads in the pool.\n    ///\n    /// # Panics\n    ///\n    /// The `new` function will panic if the size is zero.\n    pub fn new(size: usize) -> ThreadPool {\n        assert!(size > 0);\n\n        let mut threads = Vec::with_capacity(size);\n\n        for _ in 0..size {\n            // create some threads and store them in the vector\n        }\n\n        ThreadPool { threads }\n    }\n    // --snip--\n\n    pub fn execute<F>(&self, f: F)\n    where\n        F: FnOnce() + Send + 'static,\n    {\n    }\n}\n```\n\nListing 20-14: Creating a vector for `ThreadPool` to hold the threads\n\nWe’ve brought `std::thread` into scope in the library crate, because we’re using `thread::JoinHandle` as the type of the items in the vector in `ThreadPool`.\n\nOnce a valid size is received, our `ThreadPool` creates a new vector that can hold `size` items. The `with_capacity` function performs the same task as `Vec::new` but with an important difference: it preallocates space in the vector. Because we know we need to store `size` elements in the vector, doing this allocation up front is slightly more efficient than using `Vec::new`, which resizes itself as elements are inserted.\n\nWhen you run `cargo check` again, it should succeed.\n\n#### [A `Worker` Struct Responsible for Sending Code from the `ThreadPool` to a Thread](#a-worker-struct-responsible-for-sending-code-from-the-threadpool-to-a-thread)\n\nWe left a comment in the `for` loop in Listing 20-14 regarding the creation of threads. Here, we’ll look at how we actually create threads. The standard library provides `thread::spawn` as a way to create threads, and `thread::spawn` expects to get some code the thread should run as soon as the thread is created. However, in our case, we want to create the threads and have them _wait_ for code that we’ll send later. The standard library’s implementation of threads doesn’t include any way to do that; we have to implement it manually.\n\nWe’ll implement this behavior by introducing a new data structure between the `ThreadPool` and the threads that will manage this new behavior. We’ll call this data structure _Worker_, which is a common term in pooling implementations. The Worker picks up code that needs to be run and runs the code in the Worker’s thread. Think of people working in the kitchen at a restaurant: the workers wait until orders come in from customers, and then they’re responsible for taking those orders and fulfilling them.\n\nInstead of storing a vector of `JoinHandle<()>` instances in the thread pool, we’ll store instances of the `Worker` struct. Each `Worker` will store a single `JoinHandle<()>` instance. Then we’ll implement a method on `Worker` that will take a closure of code to run and send it to the already running thread for execution. We’ll also give each worker an `id` so we can distinguish between the different workers in the pool when logging or debugging.\n\nHere is the new process that will happen when we create a `ThreadPool`. We’ll implement the code that sends the closure to the thread after we have `Worker` set up in this way:\n\n1.  Define a `Worker` struct that holds an `id` and a `JoinHandle<()>`.\n2.  Change `ThreadPool` to hold a vector of `Worker` instances.\n3.  Define a `Worker::new` function that takes an `id` number and returns a `Worker` instance that holds the `id` and a thread spawned with an empty closure.\n4.  In `ThreadPool::new`, use the `for` loop counter to generate an `id`, create a new `Worker` with that `id`, and store the worker in the vector.\n\nIf you’re up for a challenge, try implementing these changes on your own before looking at the code in Listing 20-15.\n\nReady? Here is Listing 20-15 with one way to make the preceding modifications.\n\nFilename: src/lib.rs\n\n```rust\nuse std::thread;\n\npub struct ThreadPool {\n    workers: Vec<Worker>,\n}\n\nimpl ThreadPool {\n    // --snip--\n    /// Create a new ThreadPool.\n    ///\n    /// The size is the number of threads in the pool.\n    ///\n    /// # Panics\n    ///\n    /// The `new` function will panic if the size is zero.\n    pub fn new(size: usize) -> ThreadPool {\n        assert!(size > 0);\n\n        let mut workers = Vec::with_capacity(size);\n\n        for id in 0..size {\n            workers.push(Worker::new(id));\n        }\n\n        ThreadPool { workers }\n    }\n    // --snip--\n\n    pub fn execute<F>(&self, f: F)\n    where\n        F: FnOnce() + Send + 'static,\n    {\n    }\n}\n\nstruct Worker {\n    id: usize,\n    thread: thread::JoinHandle<()>,\n}\n\nimpl Worker {\n    fn new(id: usize) -> Worker {\n        let thread = thread::spawn(|| {});\n\n        Worker { id, thread }\n    }\n}\n```\n\nListing 20-15: Modifying `ThreadPool` to hold `Worker` instances instead of holding threads directly\n\nWe’ve changed the name of the field on `ThreadPool` from `threads` to `workers` because it’s now holding `Worker` instances instead of `JoinHandle<()>` instances. We use the counter in the `for` loop as an argument to `Worker::new`, and we store each new `Worker` in the vector named `workers`.\n\nExternal code (like our server in _src/main.rs_) doesn’t need to know the implementation details regarding using a `Worker` struct within `ThreadPool`, so we make the `Worker` struct and its `new` function private. The `Worker::new` function uses the `id` we give it and stores a `JoinHandle<()>` instance that is created by spawning a new thread using an empty closure.\n\nNote: If the operating system can’t create a thread because there aren’t enough system resources, `thread::spawn` will panic. That will cause our whole server to panic, even though the creation of some threads might succeed. For simplicity’s sake, this behavior is fine, but in a production thread pool implementation, you’d likely want to use [`std::thread::Builder`](../std/thread/struct.Builder.html) and its [`spawn`](about:blank/std/thread/struct.Builder.html#method.spawn) method that returns `Result` instead.\n\nThis code will compile and will store the number of `Worker` instances we specified as an argument to `ThreadPool::new`. But we’re _still_ not processing the closure that we get in `execute`. Let’s look at how to do that next.\n\n#### [Sending Requests to Threads via Channels](#sending-requests-to-threads-via-channels)\n\nThe next problem we’ll tackle is that the closures given to `thread::spawn` do absolutely nothing. Currently, we get the closure we want to execute in the `execute` method. But we need to give `thread::spawn` a closure to run when we create each `Worker` during the creation of the `ThreadPool`.\n\nWe want the `Worker` structs that we just created to fetch the code to run from a queue held in the `ThreadPool` and send that code to its thread to run.\n\nThe channels we learned about in Chapter 16—a simple way to communicate between two threads—would be perfect for this use case. We’ll use a channel to function as the queue of jobs, and `execute` will send a job from the `ThreadPool` to the `Worker` instances, which will send the job to its thread. Here is the plan:\n\n1.  The `ThreadPool` will create a channel and hold on to the sender.\n2.  Each `Worker` will hold on to the receiver.\n3.  We’ll create a new `Job` struct that will hold the closures we want to send down the channel.\n4.  The `execute` method will send the job it wants to execute through the sender.\n5.  In its thread, the `Worker` will loop over its receiver and execute the closures of any jobs it receives.\n\nLet’s start by creating a channel in `ThreadPool::new` and holding the sender in the `ThreadPool` instance, as shown in Listing 20-16. The `Job` struct doesn’t hold anything for now but will be the type of item we’re sending down the channel.\n\nFilename: src/lib.rs\n\n```rust\nuse std::{sync::mpsc, thread};\n\npub struct ThreadPool {\n    workers: Vec<Worker>,\n    sender: mpsc::Sender<Job>,\n}\n\nstruct Job;\n\nimpl ThreadPool {\n    // --snip--\n    /// Create a new ThreadPool.\n    ///\n    /// The size is the number of threads in the pool.\n    ///\n    /// # Panics\n    ///\n    /// The `new` function will panic if the size is zero.\n    pub fn new(size: usize) -> ThreadPool {\n        assert!(size > 0);\n\n        let (sender, receiver) = mpsc::channel();\n\n        let mut workers = Vec::with_capacity(size);\n\n        for id in 0..size {\n            workers.push(Worker::new(id));\n        }\n\n        ThreadPool { workers, sender }\n    }\n    // --snip--\n\n    pub fn execute<F>(&self, f: F)\n    where\n        F: FnOnce() + Send + 'static,\n    {\n    }\n}\n\nstruct Worker {\n    id: usize,\n    thread: thread::JoinHandle<()>,\n}\n\nimpl Worker {\n    fn new(id: usize) -> Worker {\n        let thread = thread::spawn(|| {});\n\n        Worker { id, thread }\n    }\n}\n```\n\nListing 20-16: Modifying `ThreadPool` to store the sender of a channel that transmits `Job` instances\n\nIn `ThreadPool::new`, we create our new channel and have the pool hold the sender. This will successfully compile.\n\nLet’s try passing a receiver of the channel into each worker as the thread pool creates the channel. We know we want to use the receiver in the thread that the workers spawn, so we’ll reference the `receiver` parameter in the closure. The code in Listing 20-17 won’t quite compile yet.\n\nFilename: src/lib.rs\n\n```rust\nuse std::{sync::mpsc, thread};\n\npub struct ThreadPool {\n    workers: Vec<Worker>,\n    sender: mpsc::Sender<Job>,\n}\n\nstruct Job;\n\nimpl ThreadPool {\n    // --snip--\n    /// Create a new ThreadPool.\n    ///\n    /// The size is the number of threads in the pool.\n    ///\n    /// # Panics\n    ///\n    /// The `new` function will panic if the size is zero.\n    pub fn new(size: usize) -> ThreadPool {\n        assert!(size > 0);\n\n        let (sender, receiver) = mpsc::channel();\n\n        let mut workers = Vec::with_capacity(size);\n\n        for id in 0..size {\n            workers.push(Worker::new(id, receiver));\n        }\n\n        ThreadPool { workers, sender }\n    }\n    // --snip--\n\n    pub fn execute<F>(&self, f: F)\n    where\n        F: FnOnce() + Send + 'static,\n    {\n    }\n}\n\n// --snip--\n\n\nstruct Worker {\n    id: usize,\n    thread: thread::JoinHandle<()>,\n}\n\nimpl Worker {\n    fn new(id: usize, receiver: mpsc::Receiver<Job>) -> Worker {\n        let thread = thread::spawn(|| {\n            receiver;\n        });\n\n        Worker { id, thread }\n    }\n}\n```\n\nListing 20-17: Passing the receiver to the workers\n\nWe’ve made some small and straightforward changes: we pass the receiver into `Worker::new`, and then we use it inside the closure.\n\nWhen we try to check this code, we get this error:\n\n```console\n$ cargo check\n    Checking hello v0.1.0 (file:///projects/hello)\nerror[E0382]: use of moved value: `receiver`\n  --> src/lib.rs:26:42\n   |\n21 |         let (sender, receiver) = mpsc::channel();\n   |                      -------- move occurs because `receiver` has type `std::sync::mpsc::Receiver<Job>`, which does not implement the `Copy` trait\n...\n25 |         for id in 0..size {\n   |         ----------------- inside of this loop\n26 |             workers.push(Worker::new(id, receiver));\n   |                                          ^^^^^^^^ value moved here, in previous iteration of loop\n   |\nnote: consider changing this parameter type in method `new` to borrow instead if owning the value isn't necessary\n  --> src/lib.rs:47:33\n   |\n47 |     fn new(id: usize, receiver: mpsc::Receiver<Job>) -> Worker {\n   |        --- in this method       ^^^^^^^^^^^^^^^^^^^ this parameter takes ownership of the value\n\nFor more information about this error, try `rustc --explain E0382`.\nerror: could not compile `hello` (lib) due to 1 previous error\n\n```\n\nThe code is trying to pass `receiver` to multiple `Worker` instances. This won’t work, as you’ll recall from Chapter 16: the channel implementation that Rust provides is multiple _producer_, single _consumer_. This means we can’t just clone the consuming end of the channel to fix this code. We also don’t want to send a message multiple times to multiple consumers; we want one list of messages with multiple workers such that each message gets processed once.\n\nAdditionally, taking a job off the channel queue involves mutating the `receiver`, so the threads need a safe way to share and modify `receiver`; otherwise, we might get race conditions (as covered in Chapter 16).\n\nRecall the thread-safe smart pointers discussed in Chapter 16: to share ownership across multiple threads and allow the threads to mutate the value, we need to use `Arc<Mutex<T>>`. The `Arc` type will let multiple workers own the receiver, and `Mutex` will ensure that only one worker gets a job from the receiver at a time. Listing 20-18 shows the changes we need to make.\n\nFilename: src/lib.rs\n\n```rust\nuse std::{\n    sync::{mpsc, Arc, Mutex},\n    thread,\n};\n// --snip--\n\npub struct ThreadPool {\n    workers: Vec<Worker>,\n    sender: mpsc::Sender<Job>,\n}\n\nstruct Job;\n\nimpl ThreadPool {\n    // --snip--\n    /// Create a new ThreadPool.\n    ///\n    /// The size is the number of threads in the pool.\n    ///\n    /// # Panics\n    ///\n    /// The `new` function will panic if the size is zero.\n    pub fn new(size: usize) -> ThreadPool {\n        assert!(size > 0);\n\n        let (sender, receiver) = mpsc::channel();\n\n        let receiver = Arc::new(Mutex::new(receiver));\n\n        let mut workers = Vec::with_capacity(size);\n\n        for id in 0..size {\n            workers.push(Worker::new(id, Arc::clone(&receiver)));\n        }\n\n        ThreadPool { workers, sender }\n    }\n\n    // --snip--\n\n    pub fn execute<F>(&self, f: F)\n    where\n        F: FnOnce() + Send + 'static,\n    {\n    }\n}\n\n// --snip--\n\nstruct Worker {\n    id: usize,\n    thread: thread::JoinHandle<()>,\n}\n\nimpl Worker {\n    fn new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Job>>>) -> Worker {\n        // --snip--\n        let thread = thread::spawn(|| {\n            receiver;\n        });\n\n        Worker { id, thread }\n    }\n}\n```\n\nListing 20-18: Sharing the receiver among the workers using `Arc` and `Mutex`\n\nIn `ThreadPool::new`, we put the receiver in an `Arc` and a `Mutex`. For each new worker, we clone the `Arc` to bump the reference count so the workers can share ownership of the receiver.\n\nWith these changes, the code compiles! We’re getting there!\n\n#### [Implementing the `execute` Method](#implementing-the-execute-method)\n\nLet’s finally implement the `execute` method on `ThreadPool`. We’ll also change `Job` from a struct to a type alias for a trait object that holds the type of closure that `execute` receives. As discussed in the [“Creating Type Synonyms with Type Aliases”](about:blank/ch19-04-advanced-types.html#creating-type-synonyms-with-type-aliases) section of Chapter 19, type aliases allow us to make long types shorter for ease of use. Look at Listing 20-19.\n\nFilename: src/lib.rs\n\n```rust\nuse std::{\n    sync::{mpsc, Arc, Mutex},\n    thread,\n};\n\npub struct ThreadPool {\n    workers: Vec<Worker>,\n    sender: mpsc::Sender<Job>,\n}\n\n// --snip--\n\ntype Job = Box<dyn FnOnce() + Send + 'static>;\n\nimpl ThreadPool {\n    // --snip--\n    /// Create a new ThreadPool.\n    ///\n    /// The size is the number of threads in the pool.\n    ///\n    /// # Panics\n    ///\n    /// The `new` function will panic if the size is zero.\n    pub fn new(size: usize) -> ThreadPool {\n        assert!(size > 0);\n\n        let (sender, receiver) = mpsc::channel();\n\n        let receiver = Arc::new(Mutex::new(receiver));\n\n        let mut workers = Vec::with_capacity(size);\n\n        for id in 0..size {\n            workers.push(Worker::new(id, Arc::clone(&receiver)));\n        }\n\n        ThreadPool { workers, sender }\n    }\n\n    pub fn execute<F>(&self, f: F)\n    where\n        F: FnOnce() + Send + 'static,\n    {\n        let job = Box::new(f);\n\n        self.sender.send(job).unwrap();\n    }\n}\n\n// --snip--\n\nstruct Worker {\n    id: usize,\n    thread: thread::JoinHandle<()>,\n}\n\nimpl Worker {\n    fn new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Job>>>) -> Worker {\n        let thread = thread::spawn(|| {\n            receiver;\n        });\n\n        Worker { id, thread }\n    }\n}\n```\n\nListing 20-19: Creating a `Job` type alias for a `Box` that holds each closure and then sending the job down the channel\n\nAfter creating a new `Job` instance using the closure we get in `execute`, we send that job down the sending end of the channel. We’re calling `unwrap` on `send` for the case that sending fails. This might happen if, for example, we stop all our threads from executing, meaning the receiving end has stopped receiving new messages. At the moment, we can’t stop our threads from executing: our threads continue executing as long as the pool exists. The reason we use `unwrap` is that we know the failure case won’t happen, but the compiler doesn’t know that.\n\nBut we’re not quite done yet! In the worker, our closure being passed to `thread::spawn` still only _references_ the receiving end of the channel. Instead, we need the closure to loop forever, asking the receiving end of the channel for a job and running the job when it gets one. Let’s make the change shown in Listing 20-20 to `Worker::new`.\n\nFilename: src/lib.rs\n\n```rust\nuse std::{\n    sync::{mpsc, Arc, Mutex},\n    thread,\n};\n\npub struct ThreadPool {\n    workers: Vec<Worker>,\n    sender: mpsc::Sender<Job>,\n}\n\ntype Job = Box<dyn FnOnce() + Send + 'static>;\n\nimpl ThreadPool {\n    /// Create a new ThreadPool.\n    ///\n    /// The size is the number of threads in the pool.\n    ///\n    /// # Panics\n    ///\n    /// The `new` function will panic if the size is zero.\n    pub fn new(size: usize) -> ThreadPool {\n        assert!(size > 0);\n\n        let (sender, receiver) = mpsc::channel();\n\n        let receiver = Arc::new(Mutex::new(receiver));\n\n        let mut workers = Vec::with_capacity(size);\n\n        for id in 0..size {\n            workers.push(Worker::new(id, Arc::clone(&receiver)));\n        }\n\n        ThreadPool { workers, sender }\n    }\n\n    pub fn execute<F>(&self, f: F)\n    where\n        F: FnOnce() + Send + 'static,\n    {\n        let job = Box::new(f);\n\n        self.sender.send(job).unwrap();\n    }\n}\n\nstruct Worker {\n    id: usize,\n    thread: thread::JoinHandle<()>,\n}\n\n// --snip--\n\nimpl Worker {\n    fn new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Job>>>) -> Worker {\n        let thread = thread::spawn(move || loop {\n            let job = receiver.lock().unwrap().recv().unwrap();\n\n            println!(\"Worker {id} got a job; executing.\");\n\n            job();\n        });\n\n        Worker { id, thread }\n    }\n}\n```\n\nListing 20-20: Receiving and executing the jobs in the worker’s thread\n\nHere, we first call `lock` on the `receiver` to acquire the mutex, and then we call `unwrap` to panic on any errors. Acquiring a lock might fail if the mutex is in a _poisoned_ state, which can happen if some other thread panicked while holding the lock rather than releasing the lock. In this situation, calling `unwrap` to have this thread panic is the correct action to take. Feel free to change this `unwrap` to an `expect` with an error message that is meaningful to you.\n\nIf we get the lock on the mutex, we call `recv` to receive a `Job` from the channel. A final `unwrap` moves past any errors here as well, which might occur if the thread holding the sender has shut down, similar to how the `send` method returns `Err` if the receiver shuts down.\n\nThe call to `recv` blocks, so if there is no job yet, the current thread will wait until a job becomes available. The `Mutex<T>` ensures that only one `Worker` thread at a time is trying to request a job.\n\nOur thread pool is now in a working state! Give it a `cargo run` and make some requests:\n\n```console\n$ cargo run\n   Compiling hello v0.1.0 (file:///projects/hello)\nwarning: field is never read: `workers`\n --> src/lib.rs:7:5\n  |\n7 |     workers: Vec<Worker>,\n  |     ^^^^^^^^^^^^^^^^^^^^\n  |\n  = note: `#[warn(dead_code)]` on by default\n\nwarning: field is never read: `id`\n  --> src/lib.rs:48:5\n   |\n48 |     id: usize,\n   |     ^^^^^^^^^\n\nwarning: field is never read: `thread`\n  --> src/lib.rs:49:5\n   |\n49 |     thread: thread::JoinHandle<()>,\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning: `hello` (lib) generated 3 warnings\n    Finished dev [unoptimized + debuginfo] target(s) in 1.40s\n     Running `target/debug/hello`\nWorker 0 got a job; executing.\nWorker 2 got a job; executing.\nWorker 1 got a job; executing.\nWorker 3 got a job; executing.\nWorker 0 got a job; executing.\nWorker 2 got a job; executing.\nWorker 1 got a job; executing.\nWorker 3 got a job; executing.\nWorker 0 got a job; executing.\nWorker 2 got a job; executing.\n\n```\n\nSuccess! We now have a thread pool that executes connections asynchronously. There are never more than four threads created, so our system won’t get overloaded if the server receives a lot of requests. If we make a request to _/sleep_, the server will be able to serve other requests by having another thread run them.\n\nNote: If you open _/sleep_ in multiple browser windows simultaneously, they might load one at a time in 5 second intervals. Some web browsers execute multiple instances of the same request sequentially for caching reasons. This limitation is not caused by our web server.\n\nAfter learning about the `while let` loop in Chapter 18, you might be wondering why we didn’t write the worker thread code as shown in Listing 20-21.\n\nFilename: src/lib.rs\n\n```rust\nuse std::{\n    sync::{mpsc, Arc, Mutex},\n    thread,\n};\n\npub struct ThreadPool {\n    workers: Vec<Worker>,\n    sender: mpsc::Sender<Job>,\n}\n\ntype Job = Box<dyn FnOnce() + Send + 'static>;\n\nimpl ThreadPool {\n    /// Create a new ThreadPool.\n    ///\n    /// The size is the number of threads in the pool.\n    ///\n    /// # Panics\n    ///\n    /// The `new` function will panic if the size is zero.\n    pub fn new(size: usize) -> ThreadPool {\n        assert!(size > 0);\n\n        let (sender, receiver) = mpsc::channel();\n\n        let receiver = Arc::new(Mutex::new(receiver));\n\n        let mut workers = Vec::with_capacity(size);\n\n        for id in 0..size {\n            workers.push(Worker::new(id, Arc::clone(&receiver)));\n        }\n\n        ThreadPool { workers, sender }\n    }\n\n    pub fn execute<F>(&self, f: F)\n    where\n        F: FnOnce() + Send + 'static,\n    {\n        let job = Box::new(f);\n\n        self.sender.send(job).unwrap();\n    }\n}\n\nstruct Worker {\n    id: usize,\n    thread: thread::JoinHandle<()>,\n}\n// --snip--\n\nimpl Worker {\n    fn new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Job>>>) -> Worker {\n        let thread = thread::spawn(move || {\n            while let Ok(job) = receiver.lock().unwrap().recv() {\n                println!(\"Worker {id} got a job; executing.\");\n\n                job();\n            }\n        });\n\n        Worker { id, thread }\n    }\n}\n```\n\nListing 20-21: An alternative implementation of `Worker::new` using `while let`\n\nThis code compiles and runs but doesn’t result in the desired threading behavior: a slow request will still cause other requests to wait to be processed. The reason is somewhat subtle: the `Mutex` struct has no public `unlock` method because the ownership of the lock is based on the lifetime of the `MutexGuard<T>` within the `LockResult<MutexGuard<T>>` that the `lock` method returns. At compile time, the borrow checker can then enforce the rule that a resource guarded by a `Mutex` cannot be accessed unless we hold the lock. However, this implementation can also result in the lock being held longer than intended if we aren’t mindful of the lifetime of the `MutexGuard<T>`.\n\nThe code in Listing 20-20 that uses `let job = receiver.lock().unwrap().recv().unwrap();` works because with `let`, any temporary values used in the expression on the right hand side of the equals sign are immediately dropped when the `let` statement ends. However, `while let` (and `if let` and `match`) does not drop temporary values until the end of the associated block. In Listing 20-21, the lock remains held for the duration of the call to `job()`, meaning other workers cannot receive jobs.",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>Turning Our Single-Threaded Server into a Multithreaded Server - The Rust Programming Language</title>\n\n\n        <!-- Custom HTML head -->\n        \n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"icon\" href=\"favicon.svg\">\n        <link rel=\"shortcut icon\" href=\"favicon.png\">\n        <link rel=\"stylesheet\" href=\"css/variables.css\">\n        <link rel=\"stylesheet\" href=\"css/general.css\">\n        <link rel=\"stylesheet\" href=\"css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"highlight.css\">\n        <link rel=\"stylesheet\" href=\"tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n        <link rel=\"stylesheet\" href=\"ferris.css\">\n        <link rel=\"stylesheet\" href=\"theme/2018-edition.css\">\n        <link rel=\"stylesheet\" href=\"theme/semantic-notes.css\">\n        <link rel=\"stylesheet\" href=\"theme/listing.css\">\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"title-page.html\" tabindex=\"0\">The Rust Programming Language</a></li><li class=\"chapter-item expanded affix \"><a href=\"foreword.html\" tabindex=\"0\">Foreword</a></li><li class=\"chapter-item expanded affix \"><a href=\"ch00-00-introduction.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"ch01-00-getting-started.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> Getting Started</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch01-01-installation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.1.</strong> Installation</a></li><li class=\"chapter-item expanded \"><a href=\"ch01-02-hello-world.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.2.</strong> Hello, World!</a></li><li class=\"chapter-item expanded \"><a href=\"ch01-03-hello-cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.3.</strong> Hello, Cargo!</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch02-00-guessing-game-tutorial.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Programming a Guessing Game</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-00-common-programming-concepts.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Common Programming Concepts</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch03-01-variables-and-mutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> Variables and Mutability</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-02-data-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> Data Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-03-how-functions-work.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.3.</strong> Functions</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-04-comments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.4.</strong> Comments</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-05-control-flow.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.5.</strong> Control Flow</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch04-00-understanding-ownership.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Understanding Ownership</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch04-01-what-is-ownership.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.</strong> What is Ownership?</a></li><li class=\"chapter-item expanded \"><a href=\"ch04-02-references-and-borrowing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.</strong> References and Borrowing</a></li><li class=\"chapter-item expanded \"><a href=\"ch04-03-slices.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.</strong> The Slice Type</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch05-00-structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> Using Structs to Structure Related Data</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch05-01-defining-structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.1.</strong> Defining and Instantiating Structs</a></li><li class=\"chapter-item expanded \"><a href=\"ch05-02-example-structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.2.</strong> An Example Program Using Structs</a></li><li class=\"chapter-item expanded \"><a href=\"ch05-03-method-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.3.</strong> Method Syntax</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch06-00-enums.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Enums and Pattern Matching</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch06-01-defining-an-enum.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.1.</strong> Defining an Enum</a></li><li class=\"chapter-item expanded \"><a href=\"ch06-02-match.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.2.</strong> The match Control Flow Construct</a></li><li class=\"chapter-item expanded \"><a href=\"ch06-03-if-let.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.3.</strong> Concise Control Flow with if let</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch07-00-managing-growing-projects-with-packages-crates-and-modules.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Managing Growing Projects with Packages, Crates, and Modules</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch07-01-packages-and-crates.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.1.</strong> Packages and Crates</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-02-defining-modules-to-control-scope-and-privacy.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.2.</strong> Defining Modules to Control Scope and Privacy</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.3.</strong> Paths for Referring to an Item in the Module Tree</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-04-bringing-paths-into-scope-with-the-use-keyword.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.4.</strong> Bringing Paths Into Scope with the use Keyword</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-05-separating-modules-into-different-files.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.5.</strong> Separating Modules into Different Files</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch08-00-common-collections.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.</strong> Common Collections</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch08-01-vectors.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.1.</strong> Storing Lists of Values with Vectors</a></li><li class=\"chapter-item expanded \"><a href=\"ch08-02-strings.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.</strong> Storing UTF-8 Encoded Text with Strings</a></li><li class=\"chapter-item expanded \"><a href=\"ch08-03-hash-maps.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.3.</strong> Storing Keys with Associated Values in Hash Maps</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch09-00-error-handling.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.</strong> Error Handling</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch09-01-unrecoverable-errors-with-panic.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.1.</strong> Unrecoverable Errors with panic!</a></li><li class=\"chapter-item expanded \"><a href=\"ch09-02-recoverable-errors-with-result.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.2.</strong> Recoverable Errors with Result</a></li><li class=\"chapter-item expanded \"><a href=\"ch09-03-to-panic-or-not-to-panic.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.3.</strong> To panic! or Not to panic!</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch10-00-generics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.</strong> Generic Types, Traits, and Lifetimes</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch10-01-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.</strong> Generic Data Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch10-02-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.2.</strong> Traits: Defining Shared Behavior</a></li><li class=\"chapter-item expanded \"><a href=\"ch10-03-lifetime-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.3.</strong> Validating References with Lifetimes</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch11-00-testing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.</strong> Writing Automated Tests</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch11-01-writing-tests.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.1.</strong> How to Write Tests</a></li><li class=\"chapter-item expanded \"><a href=\"ch11-02-running-tests.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.2.</strong> Controlling How Tests Are Run</a></li><li class=\"chapter-item expanded \"><a href=\"ch11-03-test-organization.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.3.</strong> Test Organization</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch12-00-an-io-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.</strong> An I/O Project: Building a Command Line Program</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch12-01-accepting-command-line-arguments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.1.</strong> Accepting Command Line Arguments</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-02-reading-a-file.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.2.</strong> Reading a File</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-03-improving-error-handling-and-modularity.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.3.</strong> Refactoring to Improve Modularity and Error Handling</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-04-testing-the-librarys-functionality.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.4.</strong> Developing the Library’s Functionality with Test Driven Development</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-05-working-with-environment-variables.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.5.</strong> Working with Environment Variables</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-06-writing-to-stderr-instead-of-stdout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.6.</strong> Writing Error Messages to Standard Error Instead of Standard Output</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch13-00-functional-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.</strong> Functional Language Features: Iterators and Closures</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch13-01-closures.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.1.</strong> Closures: Anonymous Functions that Capture Their Environment</a></li><li class=\"chapter-item expanded \"><a href=\"ch13-02-iterators.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.2.</strong> Processing a Series of Items with Iterators</a></li><li class=\"chapter-item expanded \"><a href=\"ch13-03-improving-our-io-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.3.</strong> Improving Our I/O Project</a></li><li class=\"chapter-item expanded \"><a href=\"ch13-04-performance.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.4.</strong> Comparing Performance: Loops vs. Iterators</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch14-00-more-about-cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.</strong> More about Cargo and Crates.io</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch14-01-release-profiles.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.1.</strong> Customizing Builds with Release Profiles</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-02-publishing-to-crates-io.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.2.</strong> Publishing a Crate to Crates.io</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-03-cargo-workspaces.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.3.</strong> Cargo Workspaces</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-04-installing-binaries.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.4.</strong> Installing Binaries from Crates.io with cargo install</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-05-extending-cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.5.</strong> Extending Cargo with Custom Commands</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch15-00-smart-pointers.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.</strong> Smart Pointers</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch15-01-box.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.1.</strong> Using Box&lt;T&gt; to Point to Data on the Heap</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-02-deref.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.2.</strong> Treating Smart Pointers Like Regular References with the Deref Trait</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-03-drop.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.3.</strong> Running Code on Cleanup with the Drop Trait</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-04-rc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.4.</strong> Rc&lt;T&gt;, the Reference Counted Smart Pointer</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-05-interior-mutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.5.</strong> RefCell&lt;T&gt; and the Interior Mutability Pattern</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-06-reference-cycles.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.6.</strong> Reference Cycles Can Leak Memory</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch16-00-concurrency.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.</strong> Fearless Concurrency</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch16-01-threads.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.1.</strong> Using Threads to Run Code Simultaneously</a></li><li class=\"chapter-item expanded \"><a href=\"ch16-02-message-passing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.2.</strong> Using Message Passing to Transfer Data Between Threads</a></li><li class=\"chapter-item expanded \"><a href=\"ch16-03-shared-state.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.3.</strong> Shared-State Concurrency</a></li><li class=\"chapter-item expanded \"><a href=\"ch16-04-extensible-concurrency-sync-and-send.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.4.</strong> Extensible Concurrency with the Sync and Send Traits</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch17-00-oop.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.</strong> Object Oriented Programming Features of Rust</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch17-01-what-is-oo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.1.</strong> Characteristics of Object-Oriented Languages</a></li><li class=\"chapter-item expanded \"><a href=\"ch17-02-trait-objects.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.2.</strong> Using Trait Objects That Allow for Values of Different Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch17-03-oo-design-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.3.</strong> Implementing an Object-Oriented Design Pattern</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch18-00-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.</strong> Patterns and Matching</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch18-01-all-the-places-for-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.1.</strong> All the Places Patterns Can Be Used</a></li><li class=\"chapter-item expanded \"><a href=\"ch18-02-refutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.2.</strong> Refutability: Whether a Pattern Might Fail to Match</a></li><li class=\"chapter-item expanded \"><a href=\"ch18-03-pattern-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.3.</strong> Pattern Syntax</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch19-00-advanced-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.</strong> Advanced Features</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch19-01-unsafe-rust.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.1.</strong> Unsafe Rust</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-03-advanced-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.2.</strong> Advanced Traits</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-04-advanced-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.3.</strong> Advanced Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-05-advanced-functions-and-closures.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.4.</strong> Advanced Functions and Closures</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-06-macros.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.5.</strong> Macros</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch20-00-final-project-a-web-server.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.</strong> Final Project: Building a Multithreaded Web Server</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch20-01-single-threaded.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.1.</strong> Building a Single-Threaded Web Server</a></li><li class=\"chapter-item expanded \"><a href=\"ch20-02-multithreaded.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">20.2.</strong> Turning Our Single-Threaded Server into a Multithreaded Server</a></li><li class=\"chapter-item expanded \"><a href=\"ch20-03-graceful-shutdown-and-cleanup.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.3.</strong> Graceful Shutdown and Cleanup</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"appendix-00.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.</strong> Appendix</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"appendix-01-keywords.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.1.</strong> A - Keywords</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-02-operators.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.2.</strong> B - Operators and Symbols</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-03-derivable-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.3.</strong> C - Derivable Traits</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-04-useful-development-tools.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.4.</strong> D - Useful Development Tools</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-05-editions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.5.</strong> E - Editions</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-06-translation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.6.</strong> F - Translations of the Book</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-07-nightly-rust.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.7.</strong> G - How Rust is Made and “Nightly Rust”</a></li></ol></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Rust Programming Language</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/book\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h2 id=\"turning-our-single-threaded-server-into-a-multithreaded-server\"><a class=\"header\" href=\"#turning-our-single-threaded-server-into-a-multithreaded-server\">Turning Our Single-Threaded Server into a Multithreaded Server</a></h2>\n<p>Right now, the server will process each request in turn, meaning it won’t\nprocess a second connection until the first is finished processing. If the\nserver received more and more requests, this serial execution would be less and\nless optimal. If the server receives a request that takes a long time to\nprocess, subsequent requests will have to wait until the long request is\nfinished, even if the new requests can be processed quickly. We’ll need to fix\nthis, but first, we’ll look at the problem in action.</p>\n<h3 id=\"simulating-a-slow-request-in-the-current-server-implementation\"><a class=\"header\" href=\"#simulating-a-slow-request-in-the-current-server-implementation\">Simulating a Slow Request in the Current Server Implementation</a></h3>\n<p>We’ll look at how a slow-processing request can affect other requests made to\nour current server implementation. Listing 20-10 implements handling a request\nto <em>/sleep</em> with a simulated slow response that will cause the server to sleep\nfor 5 seconds before responding.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust no_run hljs hide-boring\"><span class=\"hljs-keyword\">use</span> std::{\n    fs,\n    io::{prelude::*, BufReader},\n    net::{TcpListener, TcpStream},\n    thread,\n    time::Duration,\n};\n<span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> listener = TcpListener::bind(<span class=\"hljs-string\">\"127.0.0.1:7878\"</span>).unwrap();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">for</span> stream <span class=\"hljs-keyword\">in</span> listener.incoming() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> stream = stream.unwrap();\n</span><span class=\"boring\">\n</span><span class=\"boring\">        handle_connection(stream);\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">handle_connection</span></span>(<span class=\"hljs-keyword\">mut</span> stream: TcpStream) {\n    <span class=\"hljs-comment\">// --snip--</span>\n\n<span class=\"boring\">    <span class=\"hljs-keyword\">let</span> buf_reader = BufReader::new(&amp;<span class=\"hljs-keyword\">mut</span> stream);\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> request_line = buf_reader.lines().next().unwrap().unwrap();\n</span><span class=\"boring\">\n</span>    <span class=\"hljs-keyword\">let</span> (status_line, filename) = <span class=\"hljs-keyword\">match</span> &amp;request_line[..] {\n        <span class=\"hljs-string\">\"GET / HTTP/1.1\"</span> =&gt; (<span class=\"hljs-string\">\"HTTP/1.1 200 OK\"</span>, <span class=\"hljs-string\">\"hello.html\"</span>),\n        <span class=\"hljs-string\">\"GET /sleep HTTP/1.1\"</span> =&gt; {\n            thread::sleep(Duration::from_secs(<span class=\"hljs-number\">5</span>));\n            (<span class=\"hljs-string\">\"HTTP/1.1 200 OK\"</span>, <span class=\"hljs-string\">\"hello.html\"</span>)\n        }\n        _ =&gt; (<span class=\"hljs-string\">\"HTTP/1.1 404 NOT FOUND\"</span>, <span class=\"hljs-string\">\"404.html\"</span>),\n    };\n\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> contents = fs::read_to_string(filename).unwrap();\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> length = contents.len();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> response =\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">format!</span>(<span class=\"hljs-string\">\"{status_line}\\r\\nContent-Length: {length}\\r\\n\\r\\n{contents}\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    stream.write_all(response.as_bytes()).unwrap();\n</span>}</code></pre></pre>\n<p><span class=\"caption\">Listing 20-10: Simulating a slow request by sleeping for\n5 seconds</span></p>\n<p>We switched from <code class=\"hljs\">if</code> to <code class=\"hljs\">match</code> now that we have three cases. We need to\nexplicitly match on a slice of <code class=\"hljs\">request_line</code> to pattern match against the\nstring literal values; <code class=\"hljs\">match</code> doesn’t do automatic referencing and\ndereferencing like the equality method does.</p>\n<p>The first arm is the same as the <code class=\"hljs\">if</code> block from Listing 20-9. The second arm\nmatches a request to <em>/sleep</em>. When that request is received, the server will\nsleep for 5 seconds before rendering the successful HTML page. The third arm is\nthe same as the <code class=\"hljs\">else</code> block from Listing 20-9.</p>\n<p>You can see how primitive our server is: real libraries would handle the\nrecognition of multiple requests in a much less verbose way!</p>\n<p>Start the server using <code class=\"hljs\">cargo run</code>. Then open two browser windows: one for\n<em>http://127.0.0.1:7878/</em> and the other for <em>http://127.0.0.1:7878/sleep</em>. If\nyou enter the <em>/</em> URI a few times, as before, you’ll see it respond quickly.\nBut if you enter <em>/sleep</em> and then load <em>/</em>, you’ll see that <em>/</em> waits until\n<code class=\"hljs\">sleep</code> has slept for its full 5 seconds before loading.</p>\n<p>There are multiple techniques we could use to avoid requests backing up behind\na slow request; the one we’ll implement is a thread pool.</p>\n<h3 id=\"improving-throughput-with-a-thread-pool\"><a class=\"header\" href=\"#improving-throughput-with-a-thread-pool\">Improving Throughput with a Thread Pool</a></h3>\n<p>A <em>thread pool</em> is a group of spawned threads that are waiting and ready to\nhandle a task. When the program receives a new task, it assigns one of the\nthreads in the pool to the task, and that thread will process the task. The\nremaining threads in the pool are available to handle any other tasks that come\nin while the first thread is processing. When the first thread is done\nprocessing its task, it’s returned to the pool of idle threads, ready to handle\na new task. A thread pool allows you to process connections concurrently,\nincreasing the throughput of your server.</p>\n<p>We’ll limit the number of threads in the pool to a small number to protect us\nfrom Denial of Service (DoS) attacks; if we had our program create a new thread\nfor each request as it came in, someone making 10 million requests to our\nserver could create havoc by using up all our server’s resources and grinding\nthe processing of requests to a halt.</p>\n<p>Rather than spawning unlimited threads, then, we’ll have a fixed number of\nthreads waiting in the pool. Requests that come in are sent to the pool for\nprocessing. The pool will maintain a queue of incoming requests. Each of the\nthreads in the pool will pop off a request from this queue, handle the request,\nand then ask the queue for another request. With this design, we can process up\nto <code class=\"hljs\">N</code> requests concurrently, where <code class=\"hljs\">N</code> is the number of threads. If each\nthread is responding to a long-running request, subsequent requests can still\nback up in the queue, but we’ve increased the number of long-running requests\nwe can handle before reaching that point.</p>\n<p>This technique is just one of many ways to improve the throughput of a web\nserver. Other options you might explore are the <em>fork/join model</em>, the\n<em>single-threaded async I/O model</em>, or the <em>multi-threaded async I/O model</em>. If\nyou’re interested in this topic, you can read more about other solutions and\ntry to implement them; with a low-level language like Rust, all of these\noptions are possible.</p>\n<p>Before we begin implementing a thread pool, let’s talk about what using the\npool should look like. When you’re trying to design code, writing the client\ninterface first can help guide your design. Write the API of the code so it’s\nstructured in the way you want to call it; then implement the functionality\nwithin that structure rather than implementing the functionality and then\ndesigning the public API.</p>\n<p>Similar to how we used test-driven development in the project in Chapter 12,\nwe’ll use compiler-driven development here. We’ll write the code that calls the\nfunctions we want, and then we’ll look at errors from the compiler to determine\nwhat we should change next to get the code to work. Before we do that, however,\nwe’ll explore the technique we’re not going to use as a starting point.</p>\n<!-- Old headings. Do not remove or links may break. -->\n<p><a id=\"code-structure-if-we-could-spawn-a-thread-for-each-request\"></a></p>\n<h4 id=\"spawning-a-thread-for-each-request\"><a class=\"header\" href=\"#spawning-a-thread-for-each-request\">Spawning a Thread for Each Request</a></h4>\n<p>First, let’s explore how our code might look if it did create a new thread for\nevery connection. As mentioned earlier, this isn’t our final plan due to the\nproblems with potentially spawning an unlimited number of threads, but it is a\nstarting point to get a working multithreaded server first. Then we’ll add the\nthread pool as an improvement, and contrasting the two solutions will be\neasier. Listing 20-11 shows the changes to make to <code class=\"hljs\">main</code> to spawn a new thread\nto handle each stream within the <code class=\"hljs\">for</code> loop.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust no_run hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::{\n</span><span class=\"boring\">    fs,\n</span><span class=\"boring\">    io::{prelude::*, BufReader},\n</span><span class=\"boring\">    net::{TcpListener, TcpStream},\n</span><span class=\"boring\">    thread,\n</span><span class=\"boring\">    time::Duration,\n</span><span class=\"boring\">};\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> listener = TcpListener::bind(<span class=\"hljs-string\">\"127.0.0.1:7878\"</span>).unwrap();\n\n    <span class=\"hljs-keyword\">for</span> stream <span class=\"hljs-keyword\">in</span> listener.incoming() {\n        <span class=\"hljs-keyword\">let</span> stream = stream.unwrap();\n\n        thread::spawn(|| {\n            handle_connection(stream);\n        });\n    }\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">handle_connection</span></span>(<span class=\"hljs-keyword\">mut</span> stream: TcpStream) {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> buf_reader = BufReader::new(&amp;<span class=\"hljs-keyword\">mut</span> stream);\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> request_line = buf_reader.lines().next().unwrap().unwrap();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> (status_line, filename) = <span class=\"hljs-keyword\">match</span> &amp;request_line[..] {\n</span><span class=\"boring\">        <span class=\"hljs-string\">\"GET / HTTP/1.1\"</span> =&gt; (<span class=\"hljs-string\">\"HTTP/1.1 200 OK\"</span>, <span class=\"hljs-string\">\"hello.html\"</span>),\n</span><span class=\"boring\">        <span class=\"hljs-string\">\"GET /sleep HTTP/1.1\"</span> =&gt; {\n</span><span class=\"boring\">            thread::sleep(Duration::from_secs(<span class=\"hljs-number\">5</span>));\n</span><span class=\"boring\">            (<span class=\"hljs-string\">\"HTTP/1.1 200 OK\"</span>, <span class=\"hljs-string\">\"hello.html\"</span>)\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">        _ =&gt; (<span class=\"hljs-string\">\"HTTP/1.1 404 NOT FOUND\"</span>, <span class=\"hljs-string\">\"404.html\"</span>),\n</span><span class=\"boring\">    };\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> contents = fs::read_to_string(filename).unwrap();\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> length = contents.len();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> response =\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">format!</span>(<span class=\"hljs-string\">\"{status_line}\\r\\nContent-Length: {length}\\r\\n\\r\\n{contents}\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    stream.write_all(response.as_bytes()).unwrap();\n</span><span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 20-11: Spawning a new thread for each\nstream</span></p>\n<p>As you learned in Chapter 16, <code class=\"hljs\">thread::spawn</code> will create a new thread and then\nrun the code in the closure in the new thread. If you run this code and load\n<em>/sleep</em> in your browser, then <em>/</em> in two more browser tabs, you’ll indeed see\nthat the requests to <em>/</em> don’t have to wait for <em>/sleep</em> to finish. However, as\nwe mentioned, this will eventually overwhelm the system because you’d be making\nnew threads without any limit.</p>\n<!-- Old headings. Do not remove or links may break. -->\n<p><a id=\"creating-a-similar-interface-for-a-finite-number-of-threads\"></a></p>\n<h4 id=\"creating-a-finite-number-of-threads\"><a class=\"header\" href=\"#creating-a-finite-number-of-threads\">Creating a Finite Number of Threads</a></h4>\n<p>We want our thread pool to work in a similar, familiar way so switching from\nthreads to a thread pool doesn’t require large changes to the code that uses\nour API. Listing 20-12 shows the hypothetical interface for a <code class=\"hljs\">ThreadPool</code>\nstruct we want to use instead of <code class=\"hljs\">thread::spawn</code>.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::{\n</span><span class=\"boring\">    fs,\n</span><span class=\"boring\">    io::{prelude::*, BufReader},\n</span><span class=\"boring\">    net::{TcpListener, TcpStream},\n</span><span class=\"boring\">    thread,\n</span><span class=\"boring\">    time::Duration,\n</span><span class=\"boring\">};\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> listener = TcpListener::bind(<span class=\"hljs-string\">\"127.0.0.1:7878\"</span>).unwrap();\n    <span class=\"hljs-keyword\">let</span> pool = ThreadPool::new(<span class=\"hljs-number\">4</span>);\n\n    <span class=\"hljs-keyword\">for</span> stream <span class=\"hljs-keyword\">in</span> listener.incoming() {\n        <span class=\"hljs-keyword\">let</span> stream = stream.unwrap();\n\n        pool.execute(|| {\n            handle_connection(stream);\n        });\n    }\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">handle_connection</span></span>(<span class=\"hljs-keyword\">mut</span> stream: TcpStream) {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> buf_reader = BufReader::new(&amp;<span class=\"hljs-keyword\">mut</span> stream);\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> request_line = buf_reader.lines().next().unwrap().unwrap();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> (status_line, filename) = <span class=\"hljs-keyword\">match</span> &amp;request_line[..] {\n</span><span class=\"boring\">        <span class=\"hljs-string\">\"GET / HTTP/1.1\"</span> =&gt; (<span class=\"hljs-string\">\"HTTP/1.1 200 OK\"</span>, <span class=\"hljs-string\">\"hello.html\"</span>),\n</span><span class=\"boring\">        <span class=\"hljs-string\">\"GET /sleep HTTP/1.1\"</span> =&gt; {\n</span><span class=\"boring\">            thread::sleep(Duration::from_secs(<span class=\"hljs-number\">5</span>));\n</span><span class=\"boring\">            (<span class=\"hljs-string\">\"HTTP/1.1 200 OK\"</span>, <span class=\"hljs-string\">\"hello.html\"</span>)\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">        _ =&gt; (<span class=\"hljs-string\">\"HTTP/1.1 404 NOT FOUND\"</span>, <span class=\"hljs-string\">\"404.html\"</span>),\n</span><span class=\"boring\">    };\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> contents = fs::read_to_string(filename).unwrap();\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> length = contents.len();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> response =\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">format!</span>(<span class=\"hljs-string\">\"{status_line}\\r\\nContent-Length: {length}\\r\\n\\r\\n{contents}\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    stream.write_all(response.as_bytes()).unwrap();\n</span><span class=\"boring\">}</span></code></pre>\n<p><span class=\"caption\">Listing 20-12: Our ideal <code class=\"hljs\">ThreadPool</code> interface</span></p>\n<p>We use <code class=\"hljs\">ThreadPool::new</code> to create a new thread pool with a configurable number\nof threads, in this case four. Then, in the <code class=\"hljs\">for</code> loop, <code class=\"hljs\">pool.execute</code> has a\nsimilar interface as <code class=\"hljs\">thread::spawn</code> in that it takes a closure the pool should\nrun for each stream. We need to implement <code class=\"hljs\">pool.execute</code> so it takes the\nclosure and gives it to a thread in the pool to run. This code won’t yet\ncompile, but we’ll try so the compiler can guide us in how to fix it.</p>\n<!-- Old headings. Do not remove or links may break. -->\n<p><a id=\"building-the-threadpool-struct-using-compiler-driven-development\"></a></p>\n<h4 id=\"building-threadpool-using-compiler-driven-development\"><a class=\"header\" href=\"#building-threadpool-using-compiler-driven-development\">Building <code>ThreadPool</code> Using Compiler Driven Development</a></h4>\n<p>Make the changes in Listing 20-12 to <em>src/main.rs</em>, and then let’s use the\ncompiler errors from <code class=\"hljs\">cargo check</code> to drive our development. Here is the first\nerror we get:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo check</span>\n    Checking hello v0.1.0 (file:///projects/hello)\nerror[E0433]: failed to resolve: use of undeclared type `ThreadPool`\n<span class=\"hljs-meta\">  --&gt;</span><span class=\"bash\"> src/main.rs:11:16</span>\n   |\n11 |     let pool = ThreadPool::new(4);\n   |                ^^^^^^^^^^ use of undeclared type `ThreadPool`\n\nFor more information about this error, try `rustc --explain E0433`.\nerror: could not compile `hello` (bin \"hello\") due to 1 previous error\n</code></pre>\n<p>Great! This error tells us we need a <code class=\"hljs\">ThreadPool</code> type or module, so we’ll\nbuild one now. Our <code class=\"hljs\">ThreadPool</code> implementation will be independent of the kind\nof work our web server is doing. So, let’s switch the <code class=\"hljs\">hello</code> crate from a\nbinary crate to a library crate to hold our <code class=\"hljs\">ThreadPool</code> implementation. After\nwe change to a library crate, we could also use the separate thread pool\nlibrary for any work we want to do using a thread pool, not just for serving\nweb requests.</p>\n<p>Create a <em>src/lib.rs</em> that contains the following, which is the simplest\ndefinition of a <code class=\"hljs\">ThreadPool</code> struct that we can have for now:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust noplayground hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ThreadPool</span></span>;</code></pre>\n<p>Then edit <em>main.rs</em> file to bring <code class=\"hljs\">ThreadPool</code> into scope from the library\ncrate by adding the following code to the top of <em>src/main.rs</em>:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"hljs-keyword\">use</span> hello::ThreadPool;\n<span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::{\n</span><span class=\"boring\">    fs,\n</span><span class=\"boring\">    io::{prelude::*, BufReader},\n</span><span class=\"boring\">    net::{TcpListener, TcpStream},\n</span><span class=\"boring\">    thread,\n</span><span class=\"boring\">    time::Duration,\n</span><span class=\"boring\">};\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> listener = TcpListener::bind(<span class=\"hljs-string\">\"127.0.0.1:7878\"</span>).unwrap();\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> pool = ThreadPool::new(<span class=\"hljs-number\">4</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">for</span> stream <span class=\"hljs-keyword\">in</span> listener.incoming() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> stream = stream.unwrap();\n</span><span class=\"boring\">\n</span><span class=\"boring\">        pool.execute(|| {\n</span><span class=\"boring\">            handle_connection(stream);\n</span><span class=\"boring\">        });\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">handle_connection</span></span>(<span class=\"hljs-keyword\">mut</span> stream: TcpStream) {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> buf_reader = BufReader::new(&amp;<span class=\"hljs-keyword\">mut</span> stream);\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> request_line = buf_reader.lines().next().unwrap().unwrap();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> (status_line, filename) = <span class=\"hljs-keyword\">match</span> &amp;request_line[..] {\n</span><span class=\"boring\">        <span class=\"hljs-string\">\"GET / HTTP/1.1\"</span> =&gt; (<span class=\"hljs-string\">\"HTTP/1.1 200 OK\"</span>, <span class=\"hljs-string\">\"hello.html\"</span>),\n</span><span class=\"boring\">        <span class=\"hljs-string\">\"GET /sleep HTTP/1.1\"</span> =&gt; {\n</span><span class=\"boring\">            thread::sleep(Duration::from_secs(<span class=\"hljs-number\">5</span>));\n</span><span class=\"boring\">            (<span class=\"hljs-string\">\"HTTP/1.1 200 OK\"</span>, <span class=\"hljs-string\">\"hello.html\"</span>)\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">        _ =&gt; (<span class=\"hljs-string\">\"HTTP/1.1 404 NOT FOUND\"</span>, <span class=\"hljs-string\">\"404.html\"</span>),\n</span><span class=\"boring\">    };\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> contents = fs::read_to_string(filename).unwrap();\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> length = contents.len();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> response =\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">format!</span>(<span class=\"hljs-string\">\"{status_line}\\r\\nContent-Length: {length}\\r\\n\\r\\n{contents}\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    stream.write_all(response.as_bytes()).unwrap();\n</span><span class=\"boring\">}</span></code></pre>\n<p>This code still won’t work, but let’s check it again to get the next error that\nwe need to address:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo check</span>\n    Checking hello v0.1.0 (file:///projects/hello)\nerror[E0599]: no function or associated item named `new` found for struct `ThreadPool` in the current scope\n<span class=\"hljs-meta\">  --&gt;</span><span class=\"bash\"> src/main.rs:12:28</span>\n   |\n12 |     let pool = ThreadPool::new(4);\n   |                            ^^^ function or associated item not found in `ThreadPool`\n\nFor more information about this error, try `rustc --explain E0599`.\nerror: could not compile `hello` (bin \"hello\") due to 1 previous error\n</code></pre>\n<p>This error indicates that next we need to create an associated function named\n<code class=\"hljs\">new</code> for <code class=\"hljs\">ThreadPool</code>. We also know that <code class=\"hljs\">new</code> needs to have one parameter\nthat can accept <code class=\"hljs\">4</code> as an argument and should return a <code class=\"hljs\">ThreadPool</code> instance.\nLet’s implement the simplest <code class=\"hljs\">new</code> function that will have those\ncharacteristics:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust noplayground hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ThreadPool</span></span>;\n\n<span class=\"hljs-keyword\">impl</span> ThreadPool {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(size: <span class=\"hljs-built_in\">usize</span>) -&gt; ThreadPool {\n        ThreadPool\n    }\n}</code></pre>\n<p>We chose <code class=\"hljs\">usize</code> as the type of the <code class=\"hljs\">size</code> parameter, because we know that a\nnegative number of threads doesn’t make any sense. We also know we’ll use this\n4 as the number of elements in a collection of threads, which is what the\n<code class=\"hljs\">usize</code> type is for, as discussed in the <a href=\"ch03-02-data-types.html#integer-types\">“Integer Types”</a><!--\nignore --> section of Chapter 3.</p>\n<p>Let’s check the code again:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo check</span>\n    Checking hello v0.1.0 (file:///projects/hello)\nerror[E0599]: no method named `execute` found for struct `ThreadPool` in the current scope\n<span class=\"hljs-meta\">  --&gt;</span><span class=\"bash\"> src/main.rs:17:14</span>\n   |\n17 |         pool.execute(|| {\n   |         -----^^^^^^^ method not found in `ThreadPool`\n\nFor more information about this error, try `rustc --explain E0599`.\nerror: could not compile `hello` (bin \"hello\") due to 1 previous error\n</code></pre>\n<p>Now the error occurs because we don’t have an <code class=\"hljs\">execute</code> method on <code class=\"hljs\">ThreadPool</code>.\nRecall from the <a href=\"#creating-a-finite-number-of-threads\">“Creating a Finite Number of\nThreads”</a><!-- ignore --> section that we\ndecided our thread pool should have an interface similar to <code class=\"hljs\">thread::spawn</code>. In\naddition, we’ll implement the <code class=\"hljs\">execute</code> function so it takes the closure it’s\ngiven and gives it to an idle thread in the pool to run.</p>\n<p>We’ll define the <code class=\"hljs\">execute</code> method on <code class=\"hljs\">ThreadPool</code> to take a closure as a\nparameter. Recall from the <a href=\"ch13-01-closures.html#moving-captured-values-out-of-the-closure-and-the-fn-traits\">“Moving Captured Values Out of the Closure and the\n<code class=\"hljs\">Fn</code> Traits”</a><!-- ignore --> section in Chapter 13 that we can take\nclosures as parameters with three different traits: <code class=\"hljs\">Fn</code>, <code class=\"hljs\">FnMut</code>, and\n<code class=\"hljs\">FnOnce</code>. We need to decide which kind of closure to use here. We know we’ll\nend up doing something similar to the standard library <code class=\"hljs\">thread::spawn</code>\nimplementation, so we can look at what bounds the signature of <code class=\"hljs\">thread::spawn</code>\nhas on its parameter. The documentation shows us the following:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">spawn</span></span>&lt;F, T&gt;(f: F) -&gt; JoinHandle&lt;T&gt;\n    <span class=\"hljs-keyword\">where</span>\n        F: <span class=\"hljs-built_in\">FnOnce</span>() -&gt; T,\n        F: <span class=\"hljs-built_in\">Send</span> + <span class=\"hljs-symbol\">'static</span>,\n        T: <span class=\"hljs-built_in\">Send</span> + <span class=\"hljs-symbol\">'static</span>,</code></pre>\n<p>The <code class=\"hljs\">F</code> type parameter is the one we’re concerned with here; the <code class=\"hljs\">T</code> type\nparameter is related to the return value, and we’re not concerned with that. We\ncan see that <code class=\"hljs\">spawn</code> uses <code class=\"hljs\">FnOnce</code> as the trait bound on <code class=\"hljs\">F</code>. This is probably\nwhat we want as well, because we’ll eventually pass the argument we get in\n<code class=\"hljs\">execute</code> to <code class=\"hljs\">spawn</code>. We can be further confident that <code class=\"hljs\">FnOnce</code> is the trait we\nwant to use because the thread for running a request will only execute that\nrequest’s closure one time, which matches the <code class=\"hljs\">Once</code> in <code class=\"hljs\">FnOnce</code>.</p>\n<p>The <code class=\"hljs\">F</code> type parameter also has the trait bound <code class=\"hljs\">Send</code> and the lifetime bound\n<code class=\"hljs\">'static</code>, which are useful in our situation: we need <code class=\"hljs\">Send</code> to transfer the\nclosure from one thread to another and <code class=\"hljs\">'static</code> because we don’t know how long\nthe thread will take to execute. Let’s create an <code class=\"hljs\">execute</code> method on\n<code class=\"hljs\">ThreadPool</code> that will take a generic parameter of type <code class=\"hljs\">F</code> with these bounds:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ThreadPool</span></span>;\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">impl</span> ThreadPool {\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(size: <span class=\"hljs-built_in\">usize</span>) -&gt; ThreadPool {\n</span><span class=\"boring\">        ThreadPool\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span>    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">execute</span></span>&lt;F&gt;(&amp;<span class=\"hljs-keyword\">self</span>, f: F)\n    <span class=\"hljs-keyword\">where</span>\n        F: <span class=\"hljs-built_in\">FnOnce</span>() + <span class=\"hljs-built_in\">Send</span> + <span class=\"hljs-symbol\">'static</span>,\n    {\n    }\n}</code></pre>\n<p>We still use the <code class=\"hljs\">()</code> after <code class=\"hljs\">FnOnce</code> because this <code class=\"hljs\">FnOnce</code> represents a closure\nthat takes no parameters and returns the unit type <code class=\"hljs\">()</code>. Just like function\ndefinitions, the return type can be omitted from the signature, but even if we\nhave no parameters, we still need the parentheses.</p>\n<p>Again, this is the simplest implementation of the <code class=\"hljs\">execute</code> method: it does\nnothing, but we’re trying only to make our code compile. Let’s check it again:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo check</span>\n    Checking hello v0.1.0 (file:///projects/hello)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.24s\n</code></pre>\n<p>It compiles! But note that if you try <code class=\"hljs\">cargo run</code> and make a request in the\nbrowser, you’ll see the errors in the browser that we saw at the beginning of\nthe chapter. Our library isn’t actually calling the closure passed to <code class=\"hljs\">execute</code>\nyet!</p>\n<section class=\"note\" aria-role=\"note\">\n<p>Note: A saying you might hear about languages with strict compilers, such as\nHaskell and Rust, is “if the code compiles, it works.” But this saying is not\nuniversally true. Our project compiles, but it does absolutely nothing! If we\nwere building a real, complete project, this would be a good time to start\nwriting unit tests to check that the code compiles <em>and</em> has the behavior we\nwant.</p>\n</section>\n<h4 id=\"validating-the-number-of-threads-in-new\"><a class=\"header\" href=\"#validating-the-number-of-threads-in-new\">Validating the Number of Threads in <code>new</code></a></h4>\n<p>We aren’t doing anything with the parameters to <code class=\"hljs\">new</code> and <code class=\"hljs\">execute</code>. Let’s\nimplement the bodies of these functions with the behavior we want. To start,\nlet’s think about <code class=\"hljs\">new</code>. Earlier we chose an unsigned type for the <code class=\"hljs\">size</code>\nparameter, because a pool with a negative number of threads makes no sense.\nHowever, a pool with zero threads also makes no sense, yet zero is a perfectly\nvalid <code class=\"hljs\">usize</code>. We’ll add code to check that <code class=\"hljs\">size</code> is greater than zero before\nwe return a <code class=\"hljs\">ThreadPool</code> instance and have the program panic if it receives a\nzero by using the <code class=\"hljs\">assert!</code> macro, as shown in Listing 20-13.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ThreadPool</span></span>;\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">impl</span> ThreadPool {\n    <span class=\"hljs-comment\">/// Create a new ThreadPool.</span>\n    <span class=\"hljs-comment\">///</span>\n    <span class=\"hljs-comment\">/// The size is the number of threads in the pool.</span>\n    <span class=\"hljs-comment\">///</span>\n    <span class=\"hljs-comment\">/// # Panics</span>\n    <span class=\"hljs-comment\">///</span>\n    <span class=\"hljs-comment\">/// The `new` function will panic if the size is zero.</span>\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(size: <span class=\"hljs-built_in\">usize</span>) -&gt; ThreadPool {\n        <span class=\"hljs-built_in\">assert!</span>(size &gt; <span class=\"hljs-number\">0</span>);\n\n        ThreadPool\n    }\n\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">execute</span></span>&lt;F&gt;(&amp;<span class=\"hljs-keyword\">self</span>, f: F)\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">where</span>\n</span><span class=\"boring\">        F: <span class=\"hljs-built_in\">FnOnce</span>() + <span class=\"hljs-built_in\">Send</span> + <span class=\"hljs-symbol\">'static</span>,\n</span><span class=\"boring\">    {\n</span><span class=\"boring\">    }\n</span>}</code></pre>\n<p><span class=\"caption\">Listing 20-13: Implementing <code class=\"hljs\">ThreadPool::new</code> to panic if\n<code class=\"hljs\">size</code> is zero</span></p>\n<p>We’ve also added some documentation for our <code class=\"hljs\">ThreadPool</code> with doc comments.\nNote that we followed good documentation practices by adding a section that\ncalls out the situations in which our function can panic, as discussed in\nChapter 14. Try running <code class=\"hljs\">cargo doc --open</code> and clicking the <code class=\"hljs\">ThreadPool</code> struct\nto see what the generated docs for <code class=\"hljs\">new</code> look like!</p>\n<p>Instead of adding the <code class=\"hljs\">assert!</code> macro as we’ve done here, we could change <code class=\"hljs\">new</code>\ninto <code class=\"hljs\">build</code> and return a <code class=\"hljs\">Result</code> like we did with <code class=\"hljs\">Config::build</code> in the I/O\nproject in Listing 12-9. But we’ve decided in this case that trying to create a\nthread pool without any threads should be an unrecoverable error. If you’re\nfeeling ambitious, try to write a function named <code class=\"hljs\">build</code> with the following\nsignature to compare with the <code class=\"hljs\">new</code> function:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">build</span></span>(size: <span class=\"hljs-built_in\">usize</span>) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;ThreadPool, PoolCreationError&gt; {</code></pre>\n<h4 id=\"creating-space-to-store-the-threads\"><a class=\"header\" href=\"#creating-space-to-store-the-threads\">Creating Space to Store the Threads</a></h4>\n<p>Now that we have a way to know we have a valid number of threads to store in\nthe pool, we can create those threads and store them in the <code class=\"hljs\">ThreadPool</code> struct\nbefore returning the struct. But how do we “store” a thread? Let’s take another\nlook at the <code class=\"hljs\">thread::spawn</code> signature:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">spawn</span></span>&lt;F, T&gt;(f: F) -&gt; JoinHandle&lt;T&gt;\n    <span class=\"hljs-keyword\">where</span>\n        F: <span class=\"hljs-built_in\">FnOnce</span>() -&gt; T,\n        F: <span class=\"hljs-built_in\">Send</span> + <span class=\"hljs-symbol\">'static</span>,\n        T: <span class=\"hljs-built_in\">Send</span> + <span class=\"hljs-symbol\">'static</span>,</code></pre>\n<p>The <code class=\"hljs\">spawn</code> function returns a <code class=\"hljs\">JoinHandle&lt;T&gt;</code>, where <code class=\"hljs\">T</code> is the type that the\nclosure returns. Let’s try using <code class=\"hljs\">JoinHandle</code> too and see what happens. In our\ncase, the closures we’re passing to the thread pool will handle the connection\nand not return anything, so <code class=\"hljs\">T</code> will be the unit type <code class=\"hljs\">()</code>.</p>\n<p>The code in Listing 20-14 will compile but doesn’t create any threads yet.\nWe’ve changed the definition of <code class=\"hljs\">ThreadPool</code> to hold a vector of\n<code class=\"hljs\">thread::JoinHandle&lt;()&gt;</code> instances, initialized the vector with a capacity of\n<code class=\"hljs\">size</code>, set up a <code class=\"hljs\">for</code> loop that will run some code to create the threads, and\nreturned a <code class=\"hljs\">ThreadPool</code> instance containing them.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/not_desired_behavior.svg\" title=\"This code does not produce the desired behavior.\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore not_desired_behavior hljs hide-boring\"><span class=\"hljs-keyword\">use</span> std::thread;\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ThreadPool</span></span> {\n    threads: <span class=\"hljs-built_in\">Vec</span>&lt;thread::JoinHandle&lt;()&gt;&gt;,\n}\n\n<span class=\"hljs-keyword\">impl</span> ThreadPool {\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">    <span class=\"hljs-comment\">/// Create a new ThreadPool.</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// The size is the number of threads in the pool.</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// # Panics</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// The `new` function will panic if the size is zero.</span>\n</span>    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(size: <span class=\"hljs-built_in\">usize</span>) -&gt; ThreadPool {\n        <span class=\"hljs-built_in\">assert!</span>(size &gt; <span class=\"hljs-number\">0</span>);\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> threads = <span class=\"hljs-built_in\">Vec</span>::with_capacity(size);\n\n        <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..size {\n            <span class=\"hljs-comment\">// create some threads and store them in the vector</span>\n        }\n\n        ThreadPool { threads }\n    }\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">execute</span></span>&lt;F&gt;(&amp;<span class=\"hljs-keyword\">self</span>, f: F)\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">where</span>\n</span><span class=\"boring\">        F: <span class=\"hljs-built_in\">FnOnce</span>() + <span class=\"hljs-built_in\">Send</span> + <span class=\"hljs-symbol\">'static</span>,\n</span><span class=\"boring\">    {\n</span><span class=\"boring\">    }\n</span>}</code></pre>\n<p><span class=\"caption\">Listing 20-14: Creating a vector for <code class=\"hljs\">ThreadPool</code> to hold\nthe threads</span></p>\n<p>We’ve brought <code class=\"hljs\">std::thread</code> into scope in the library crate, because we’re\nusing <code class=\"hljs\">thread::JoinHandle</code> as the type of the items in the vector in\n<code class=\"hljs\">ThreadPool</code>.</p>\n<p>Once a valid size is received, our <code class=\"hljs\">ThreadPool</code> creates a new vector that can\nhold <code class=\"hljs\">size</code> items. The <code class=\"hljs\">with_capacity</code> function performs the same task as\n<code class=\"hljs\">Vec::new</code> but with an important difference: it preallocates space in the\nvector. Because we know we need to store <code class=\"hljs\">size</code> elements in the vector, doing\nthis allocation up front is slightly more efficient than using <code class=\"hljs\">Vec::new</code>,\nwhich resizes itself as elements are inserted.</p>\n<p>When you run <code class=\"hljs\">cargo check</code> again, it should succeed.</p>\n<h4 id=\"a-worker-struct-responsible-for-sending-code-from-the-threadpool-to-a-thread\"><a class=\"header\" href=\"#a-worker-struct-responsible-for-sending-code-from-the-threadpool-to-a-thread\">A <code>Worker</code> Struct Responsible for Sending Code from the <code>ThreadPool</code> to a Thread</a></h4>\n<p>We left a comment in the <code class=\"hljs\">for</code> loop in Listing 20-14 regarding the creation of\nthreads. Here, we’ll look at how we actually create threads. The standard\nlibrary provides <code class=\"hljs\">thread::spawn</code> as a way to create threads, and\n<code class=\"hljs\">thread::spawn</code> expects to get some code the thread should run as soon as the\nthread is created. However, in our case, we want to create the threads and have\nthem <em>wait</em> for code that we’ll send later. The standard library’s\nimplementation of threads doesn’t include any way to do that; we have to\nimplement it manually.</p>\n<p>We’ll implement this behavior by introducing a new data structure between the\n<code class=\"hljs\">ThreadPool</code> and the threads that will manage this new behavior. We’ll call\nthis data structure <em>Worker</em>, which is a common term in pooling\nimplementations. The Worker picks up code that needs to be run and runs the\ncode in the Worker’s thread. Think of people working in the kitchen at a\nrestaurant: the workers wait until orders come in from customers, and then\nthey’re responsible for taking those orders and fulfilling them.</p>\n<p>Instead of storing a vector of <code class=\"hljs\">JoinHandle&lt;()&gt;</code> instances in the thread pool,\nwe’ll store instances of the <code class=\"hljs\">Worker</code> struct. Each <code class=\"hljs\">Worker</code> will store a single\n<code class=\"hljs\">JoinHandle&lt;()&gt;</code> instance. Then we’ll implement a method on <code class=\"hljs\">Worker</code> that will\ntake a closure of code to run and send it to the already running thread for\nexecution. We’ll also give each worker an <code class=\"hljs\">id</code> so we can distinguish between\nthe different workers in the pool when logging or debugging.</p>\n<p>Here is the new process that will happen when we create a <code class=\"hljs\">ThreadPool</code>. We’ll\nimplement the code that sends the closure to the thread after we have <code class=\"hljs\">Worker</code>\nset up in this way:</p>\n<ol>\n<li>Define a <code class=\"hljs\">Worker</code> struct that holds an <code class=\"hljs\">id</code> and a <code class=\"hljs\">JoinHandle&lt;()&gt;</code>.</li>\n<li>Change <code class=\"hljs\">ThreadPool</code> to hold a vector of <code class=\"hljs\">Worker</code> instances.</li>\n<li>Define a <code class=\"hljs\">Worker::new</code> function that takes an <code class=\"hljs\">id</code> number and returns a\n<code class=\"hljs\">Worker</code> instance that holds the <code class=\"hljs\">id</code> and a thread spawned with an empty\nclosure.</li>\n<li>In <code class=\"hljs\">ThreadPool::new</code>, use the <code class=\"hljs\">for</code> loop counter to generate an <code class=\"hljs\">id</code>, create\na new <code class=\"hljs\">Worker</code> with that <code class=\"hljs\">id</code>, and store the worker in the vector.</li>\n</ol>\n<p>If you’re up for a challenge, try implementing these changes on your own before\nlooking at the code in Listing 20-15.</p>\n<p>Ready? Here is Listing 20-15 with one way to make the preceding modifications.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground hljs hide-boring\"><span class=\"hljs-keyword\">use</span> std::thread;\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ThreadPool</span></span> {\n    workers: <span class=\"hljs-built_in\">Vec</span>&lt;Worker&gt;,\n}\n\n<span class=\"hljs-keyword\">impl</span> ThreadPool {\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">    <span class=\"hljs-comment\">/// Create a new ThreadPool.</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// The size is the number of threads in the pool.</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// # Panics</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// The `new` function will panic if the size is zero.</span>\n</span>    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(size: <span class=\"hljs-built_in\">usize</span>) -&gt; ThreadPool {\n        <span class=\"hljs-built_in\">assert!</span>(size &gt; <span class=\"hljs-number\">0</span>);\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> workers = <span class=\"hljs-built_in\">Vec</span>::with_capacity(size);\n\n        <span class=\"hljs-keyword\">for</span> id <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..size {\n            workers.push(Worker::new(id));\n        }\n\n        ThreadPool { workers }\n    }\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">execute</span></span>&lt;F&gt;(&amp;<span class=\"hljs-keyword\">self</span>, f: F)\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">where</span>\n</span><span class=\"boring\">        F: <span class=\"hljs-built_in\">FnOnce</span>() + <span class=\"hljs-built_in\">Send</span> + <span class=\"hljs-symbol\">'static</span>,\n</span><span class=\"boring\">    {\n</span><span class=\"boring\">    }\n</span>}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Worker</span></span> {\n    id: <span class=\"hljs-built_in\">usize</span>,\n    thread: thread::JoinHandle&lt;()&gt;,\n}\n\n<span class=\"hljs-keyword\">impl</span> Worker {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(id: <span class=\"hljs-built_in\">usize</span>) -&gt; Worker {\n        <span class=\"hljs-keyword\">let</span> thread = thread::spawn(|| {});\n\n        Worker { id, thread }\n    }\n}</code></pre>\n<p><span class=\"caption\">Listing 20-15: Modifying <code class=\"hljs\">ThreadPool</code> to hold <code class=\"hljs\">Worker</code>\ninstances instead of holding threads directly</span></p>\n<p>We’ve changed the name of the field on <code class=\"hljs\">ThreadPool</code> from <code class=\"hljs\">threads</code> to <code class=\"hljs\">workers</code>\nbecause it’s now holding <code class=\"hljs\">Worker</code> instances instead of <code class=\"hljs\">JoinHandle&lt;()&gt;</code>\ninstances. We use the counter in the <code class=\"hljs\">for</code> loop as an argument to\n<code class=\"hljs\">Worker::new</code>, and we store each new <code class=\"hljs\">Worker</code> in the vector named <code class=\"hljs\">workers</code>.</p>\n<p>External code (like our server in <em>src/main.rs</em>) doesn’t need to know the\nimplementation details regarding using a <code class=\"hljs\">Worker</code> struct within <code class=\"hljs\">ThreadPool</code>,\nso we make the <code class=\"hljs\">Worker</code> struct and its <code class=\"hljs\">new</code> function private. The\n<code class=\"hljs\">Worker::new</code> function uses the <code class=\"hljs\">id</code> we give it and stores a <code class=\"hljs\">JoinHandle&lt;()&gt;</code>\ninstance that is created by spawning a new thread using an empty closure.</p>\n<section class=\"note\" aria-role=\"note\">\n<p>Note: If the operating system can’t create a thread because there aren’t\nenough system resources, <code class=\"hljs\">thread::spawn</code> will panic. That will cause our\nwhole server to panic, even though the creation of some threads might\nsucceed. For simplicity’s sake, this behavior is fine, but in a production\nthread pool implementation, you’d likely want to use\n<a href=\"../std/thread/struct.Builder.html\"><code class=\"hljs\">std::thread::Builder</code></a><!-- ignore --> and its\n<a href=\"../std/thread/struct.Builder.html#method.spawn\"><code class=\"hljs\">spawn</code></a><!-- ignore --> method that returns <code class=\"hljs\">Result</code> instead.</p>\n</section>\n<p>This code will compile and will store the number of <code class=\"hljs\">Worker</code> instances we\nspecified as an argument to <code class=\"hljs\">ThreadPool::new</code>. But we’re <em>still</em> not processing\nthe closure that we get in <code class=\"hljs\">execute</code>. Let’s look at how to do that next.</p>\n<h4 id=\"sending-requests-to-threads-via-channels\"><a class=\"header\" href=\"#sending-requests-to-threads-via-channels\">Sending Requests to Threads via Channels</a></h4>\n<p>The next problem we’ll tackle is that the closures given to <code class=\"hljs\">thread::spawn</code> do\nabsolutely nothing. Currently, we get the closure we want to execute in the\n<code class=\"hljs\">execute</code> method. But we need to give <code class=\"hljs\">thread::spawn</code> a closure to run when we\ncreate each <code class=\"hljs\">Worker</code> during the creation of the <code class=\"hljs\">ThreadPool</code>.</p>\n<p>We want the <code class=\"hljs\">Worker</code> structs that we just created to fetch the code to run from\na queue held in the <code class=\"hljs\">ThreadPool</code> and send that code to its thread to run.</p>\n<p>The channels we learned about in Chapter 16—a simple way to communicate between\ntwo threads—would be perfect for this use case. We’ll use a channel to function\nas the queue of jobs, and <code class=\"hljs\">execute</code> will send a job from the <code class=\"hljs\">ThreadPool</code> to\nthe <code class=\"hljs\">Worker</code> instances, which will send the job to its thread. Here is the plan:</p>\n<ol>\n<li>The <code class=\"hljs\">ThreadPool</code> will create a channel and hold on to the sender.</li>\n<li>Each <code class=\"hljs\">Worker</code> will hold on to the receiver.</li>\n<li>We’ll create a new <code class=\"hljs\">Job</code> struct that will hold the closures we want to send\ndown the channel.</li>\n<li>The <code class=\"hljs\">execute</code> method will send the job it wants to execute through the\nsender.</li>\n<li>In its thread, the <code class=\"hljs\">Worker</code> will loop over its receiver and execute the\nclosures of any jobs it receives.</li>\n</ol>\n<p>Let’s start by creating a channel in <code class=\"hljs\">ThreadPool::new</code> and holding the sender\nin the <code class=\"hljs\">ThreadPool</code> instance, as shown in Listing 20-16. The <code class=\"hljs\">Job</code> struct\ndoesn’t hold anything for now but will be the type of item we’re sending down\nthe channel.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground hljs hide-boring\"><span class=\"hljs-keyword\">use</span> std::{sync::mpsc, thread};\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ThreadPool</span></span> {\n    workers: <span class=\"hljs-built_in\">Vec</span>&lt;Worker&gt;,\n    sender: mpsc::Sender&lt;Job&gt;,\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Job</span></span>;\n\n<span class=\"hljs-keyword\">impl</span> ThreadPool {\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">    <span class=\"hljs-comment\">/// Create a new ThreadPool.</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// The size is the number of threads in the pool.</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// # Panics</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// The `new` function will panic if the size is zero.</span>\n</span>    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(size: <span class=\"hljs-built_in\">usize</span>) -&gt; ThreadPool {\n        <span class=\"hljs-built_in\">assert!</span>(size &gt; <span class=\"hljs-number\">0</span>);\n\n        <span class=\"hljs-keyword\">let</span> (sender, receiver) = mpsc::channel();\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> workers = <span class=\"hljs-built_in\">Vec</span>::with_capacity(size);\n\n        <span class=\"hljs-keyword\">for</span> id <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..size {\n            workers.push(Worker::new(id));\n        }\n\n        ThreadPool { workers, sender }\n    }\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">execute</span></span>&lt;F&gt;(&amp;<span class=\"hljs-keyword\">self</span>, f: F)\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">where</span>\n</span><span class=\"boring\">        F: <span class=\"hljs-built_in\">FnOnce</span>() + <span class=\"hljs-built_in\">Send</span> + <span class=\"hljs-symbol\">'static</span>,\n</span><span class=\"boring\">    {\n</span><span class=\"boring\">    }\n</span>}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Worker</span></span> {\n</span><span class=\"boring\">    id: <span class=\"hljs-built_in\">usize</span>,\n</span><span class=\"boring\">    thread: thread::JoinHandle&lt;()&gt;,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Worker {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(id: <span class=\"hljs-built_in\">usize</span>) -&gt; Worker {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> thread = thread::spawn(|| {});\n</span><span class=\"boring\">\n</span><span class=\"boring\">        Worker { id, thread }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre>\n<p><span class=\"caption\">Listing 20-16: Modifying <code class=\"hljs\">ThreadPool</code> to store the\nsender of a channel that transmits <code class=\"hljs\">Job</code> instances</span></p>\n<p>In <code class=\"hljs\">ThreadPool::new</code>, we create our new channel and have the pool hold the\nsender. This will successfully compile.</p>\n<p>Let’s try passing a receiver of the channel into each worker as the thread pool\ncreates the channel. We know we want to use the receiver in the thread that the\nworkers spawn, so we’ll reference the <code class=\"hljs\">receiver</code> parameter in the closure. The\ncode in Listing 20-17 won’t quite compile yet.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::{sync::mpsc, thread};\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ThreadPool</span></span> {\n</span><span class=\"boring\">    workers: <span class=\"hljs-built_in\">Vec</span>&lt;Worker&gt;,\n</span><span class=\"boring\">    sender: mpsc::Sender&lt;Job&gt;,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Job</span></span>;\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">impl</span> ThreadPool {\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">    <span class=\"hljs-comment\">/// Create a new ThreadPool.</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// The size is the number of threads in the pool.</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// # Panics</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// The `new` function will panic if the size is zero.</span>\n</span>    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(size: <span class=\"hljs-built_in\">usize</span>) -&gt; ThreadPool {\n        <span class=\"hljs-built_in\">assert!</span>(size &gt; <span class=\"hljs-number\">0</span>);\n\n        <span class=\"hljs-keyword\">let</span> (sender, receiver) = mpsc::channel();\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> workers = <span class=\"hljs-built_in\">Vec</span>::with_capacity(size);\n\n        <span class=\"hljs-keyword\">for</span> id <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..size {\n            workers.push(Worker::new(id, receiver));\n        }\n\n        ThreadPool { workers, sender }\n    }\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">execute</span></span>&lt;F&gt;(&amp;<span class=\"hljs-keyword\">self</span>, f: F)\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">where</span>\n</span><span class=\"boring\">        F: <span class=\"hljs-built_in\">FnOnce</span>() + <span class=\"hljs-built_in\">Send</span> + <span class=\"hljs-symbol\">'static</span>,\n</span><span class=\"boring\">    {\n</span><span class=\"boring\">    }\n</span>}\n\n<span class=\"hljs-comment\">// --snip--</span>\n\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Worker</span></span> {\n</span><span class=\"boring\">    id: <span class=\"hljs-built_in\">usize</span>,\n</span><span class=\"boring\">    thread: thread::JoinHandle&lt;()&gt;,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">impl</span> Worker {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(id: <span class=\"hljs-built_in\">usize</span>, receiver: mpsc::Receiver&lt;Job&gt;) -&gt; Worker {\n        <span class=\"hljs-keyword\">let</span> thread = thread::spawn(|| {\n            receiver;\n        });\n\n        Worker { id, thread }\n    }\n}</code></pre>\n<p><span class=\"caption\">Listing 20-17: Passing the receiver to the workers</span></p>\n<p>We’ve made some small and straightforward changes: we pass the receiver into\n<code class=\"hljs\">Worker::new</code>, and then we use it inside the closure.</p>\n<p>When we try to check this code, we get this error:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo check</span>\n    Checking hello v0.1.0 (file:///projects/hello)\nerror[E0382]: use of moved value: `receiver`\n<span class=\"hljs-meta\">  --&gt;</span><span class=\"bash\"> src/lib.rs:26:42</span>\n   |\n21 |         let (sender, receiver) = mpsc::channel();\n   |                      -------- move occurs because `receiver` has type `std::sync::mpsc::Receiver&lt;Job&gt;`, which does not implement the `Copy` trait\n...\n25 |         for id in 0..size {\n   |         ----------------- inside of this loop\n26 |             workers.push(Worker::new(id, receiver));\n   |                                          ^^^^^^^^ value moved here, in previous iteration of loop\n   |\nnote: consider changing this parameter type in method `new` to borrow instead if owning the value isn't necessary\n<span class=\"hljs-meta\">  --&gt;</span><span class=\"bash\"> src/lib.rs:47:33</span>\n   |\n47 |     fn new(id: usize, receiver: mpsc::Receiver&lt;Job&gt;) -&gt; Worker {\n   |        --- in this method       ^^^^^^^^^^^^^^^^^^^ this parameter takes ownership of the value\n\nFor more information about this error, try `rustc --explain E0382`.\nerror: could not compile `hello` (lib) due to 1 previous error\n</code></pre>\n<p>The code is trying to pass <code class=\"hljs\">receiver</code> to multiple <code class=\"hljs\">Worker</code> instances. This\nwon’t work, as you’ll recall from Chapter 16: the channel implementation that\nRust provides is multiple <em>producer</em>, single <em>consumer</em>. This means we can’t\njust clone the consuming end of the channel to fix this code. We also don’t\nwant to send a message multiple times to multiple consumers; we want one list\nof messages with multiple workers such that each message gets processed once.</p>\n<p>Additionally, taking a job off the channel queue involves mutating the\n<code class=\"hljs\">receiver</code>, so the threads need a safe way to share and modify <code class=\"hljs\">receiver</code>;\notherwise, we might get race conditions (as covered in Chapter 16).</p>\n<p>Recall the thread-safe smart pointers discussed in Chapter 16: to share\nownership across multiple threads and allow the threads to mutate the value, we\nneed to use <code class=\"hljs\">Arc&lt;Mutex&lt;T&gt;&gt;</code>. The <code class=\"hljs\">Arc</code> type will let multiple workers own the\nreceiver, and <code class=\"hljs\">Mutex</code> will ensure that only one worker gets a job from the\nreceiver at a time. Listing 20-18 shows the changes we need to make.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground hljs hide-boring\"><span class=\"hljs-keyword\">use</span> std::{\n    sync::{mpsc, Arc, Mutex},\n    thread,\n};\n<span class=\"hljs-comment\">// --snip--</span>\n\n<span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ThreadPool</span></span> {\n</span><span class=\"boring\">    workers: <span class=\"hljs-built_in\">Vec</span>&lt;Worker&gt;,\n</span><span class=\"boring\">    sender: mpsc::Sender&lt;Job&gt;,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Job</span></span>;\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">impl</span> ThreadPool {\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">    <span class=\"hljs-comment\">/// Create a new ThreadPool.</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// The size is the number of threads in the pool.</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// # Panics</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// The `new` function will panic if the size is zero.</span>\n</span>    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(size: <span class=\"hljs-built_in\">usize</span>) -&gt; ThreadPool {\n        <span class=\"hljs-built_in\">assert!</span>(size &gt; <span class=\"hljs-number\">0</span>);\n\n        <span class=\"hljs-keyword\">let</span> (sender, receiver) = mpsc::channel();\n\n        <span class=\"hljs-keyword\">let</span> receiver = Arc::new(Mutex::new(receiver));\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> workers = <span class=\"hljs-built_in\">Vec</span>::with_capacity(size);\n\n        <span class=\"hljs-keyword\">for</span> id <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..size {\n            workers.push(Worker::new(id, Arc::clone(&amp;receiver)));\n        }\n\n        ThreadPool { workers, sender }\n    }\n\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">execute</span></span>&lt;F&gt;(&amp;<span class=\"hljs-keyword\">self</span>, f: F)\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">where</span>\n</span><span class=\"boring\">        F: <span class=\"hljs-built_in\">FnOnce</span>() + <span class=\"hljs-built_in\">Send</span> + <span class=\"hljs-symbol\">'static</span>,\n</span><span class=\"boring\">    {\n</span><span class=\"boring\">    }\n</span>}\n\n<span class=\"hljs-comment\">// --snip--</span>\n\n<span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Worker</span></span> {\n</span><span class=\"boring\">    id: <span class=\"hljs-built_in\">usize</span>,\n</span><span class=\"boring\">    thread: thread::JoinHandle&lt;()&gt;,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">impl</span> Worker {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(id: <span class=\"hljs-built_in\">usize</span>, receiver: Arc&lt;Mutex&lt;mpsc::Receiver&lt;Job&gt;&gt;&gt;) -&gt; Worker {\n        <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">        <span class=\"hljs-keyword\">let</span> thread = thread::spawn(|| {\n</span><span class=\"boring\">            receiver;\n</span><span class=\"boring\">        });\n</span><span class=\"boring\">\n</span><span class=\"boring\">        Worker { id, thread }\n</span>    }\n}</code></pre>\n<p><span class=\"caption\">Listing 20-18: Sharing the receiver among the workers\nusing <code class=\"hljs\">Arc</code> and <code class=\"hljs\">Mutex</code></span></p>\n<p>In <code class=\"hljs\">ThreadPool::new</code>, we put the receiver in an <code class=\"hljs\">Arc</code> and a <code class=\"hljs\">Mutex</code>. For each\nnew worker, we clone the <code class=\"hljs\">Arc</code> to bump the reference count so the workers can\nshare ownership of the receiver.</p>\n<p>With these changes, the code compiles! We’re getting there!</p>\n<h4 id=\"implementing-the-execute-method\"><a class=\"header\" href=\"#implementing-the-execute-method\">Implementing the <code>execute</code> Method</a></h4>\n<p>Let’s finally implement the <code class=\"hljs\">execute</code> method on <code class=\"hljs\">ThreadPool</code>. We’ll also change\n<code class=\"hljs\">Job</code> from a struct to a type alias for a trait object that holds the type of\nclosure that <code class=\"hljs\">execute</code> receives. As discussed in the <a href=\"ch19-04-advanced-types.html#creating-type-synonyms-with-type-aliases\">“Creating Type Synonyms\nwith Type Aliases”</a><!-- ignore -->\nsection of Chapter 19, type aliases allow us to make long types shorter for\nease of use. Look at Listing 20-19.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::{\n</span><span class=\"boring\">    sync::{mpsc, Arc, Mutex},\n</span><span class=\"boring\">    thread,\n</span><span class=\"boring\">};\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ThreadPool</span></span> {\n</span><span class=\"boring\">    workers: <span class=\"hljs-built_in\">Vec</span>&lt;Worker&gt;,\n</span><span class=\"boring\">    sender: mpsc::Sender&lt;Job&gt;,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-comment\">// --snip--</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Job</span></span> = <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> <span class=\"hljs-built_in\">FnOnce</span>() + <span class=\"hljs-built_in\">Send</span> + <span class=\"hljs-symbol\">'static</span>&gt;;\n\n<span class=\"hljs-keyword\">impl</span> ThreadPool {\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">    <span class=\"hljs-comment\">/// Create a new ThreadPool.</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// The size is the number of threads in the pool.</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// # Panics</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// The `new` function will panic if the size is zero.</span>\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(size: <span class=\"hljs-built_in\">usize</span>) -&gt; ThreadPool {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert!</span>(size &gt; <span class=\"hljs-number\">0</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> (sender, receiver) = mpsc::channel();\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> receiver = Arc::new(Mutex::new(receiver));\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> workers = <span class=\"hljs-built_in\">Vec</span>::with_capacity(size);\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">for</span> id <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..size {\n</span><span class=\"boring\">            workers.push(Worker::new(id, Arc::clone(&amp;receiver)));\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">\n</span><span class=\"boring\">        ThreadPool { workers, sender }\n</span><span class=\"boring\">    }\n</span>\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">execute</span></span>&lt;F&gt;(&amp;<span class=\"hljs-keyword\">self</span>, f: F)\n    <span class=\"hljs-keyword\">where</span>\n        F: <span class=\"hljs-built_in\">FnOnce</span>() + <span class=\"hljs-built_in\">Send</span> + <span class=\"hljs-symbol\">'static</span>,\n    {\n        <span class=\"hljs-keyword\">let</span> job = <span class=\"hljs-built_in\">Box</span>::new(f);\n\n        <span class=\"hljs-keyword\">self</span>.sender.send(job).unwrap();\n    }\n}\n\n<span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Worker</span></span> {\n</span><span class=\"boring\">    id: <span class=\"hljs-built_in\">usize</span>,\n</span><span class=\"boring\">    thread: thread::JoinHandle&lt;()&gt;,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Worker {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(id: <span class=\"hljs-built_in\">usize</span>, receiver: Arc&lt;Mutex&lt;mpsc::Receiver&lt;Job&gt;&gt;&gt;) -&gt; Worker {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> thread = thread::spawn(|| {\n</span><span class=\"boring\">            receiver;\n</span><span class=\"boring\">        });\n</span><span class=\"boring\">\n</span><span class=\"boring\">        Worker { id, thread }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre>\n<p><span class=\"caption\">Listing 20-19: Creating a <code class=\"hljs\">Job</code> type alias for a <code class=\"hljs\">Box</code>\nthat holds each closure and then sending the job down the channel</span></p>\n<p>After creating a new <code class=\"hljs\">Job</code> instance using the closure we get in <code class=\"hljs\">execute</code>, we\nsend that job down the sending end of the channel. We’re calling <code class=\"hljs\">unwrap</code> on\n<code class=\"hljs\">send</code> for the case that sending fails. This might happen if, for example, we\nstop all our threads from executing, meaning the receiving end has stopped\nreceiving new messages. At the moment, we can’t stop our threads from\nexecuting: our threads continue executing as long as the pool exists. The\nreason we use <code class=\"hljs\">unwrap</code> is that we know the failure case won’t happen, but the\ncompiler doesn’t know that.</p>\n<p>But we’re not quite done yet! In the worker, our closure being passed to\n<code class=\"hljs\">thread::spawn</code> still only <em>references</em> the receiving end of the channel.\nInstead, we need the closure to loop forever, asking the receiving end of the\nchannel for a job and running the job when it gets one. Let’s make the change\nshown in Listing 20-20 to <code class=\"hljs\">Worker::new</code>.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::{\n</span><span class=\"boring\">    sync::{mpsc, Arc, Mutex},\n</span><span class=\"boring\">    thread,\n</span><span class=\"boring\">};\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ThreadPool</span></span> {\n</span><span class=\"boring\">    workers: <span class=\"hljs-built_in\">Vec</span>&lt;Worker&gt;,\n</span><span class=\"boring\">    sender: mpsc::Sender&lt;Job&gt;,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Job</span></span> = <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> <span class=\"hljs-built_in\">FnOnce</span>() + <span class=\"hljs-built_in\">Send</span> + <span class=\"hljs-symbol\">'static</span>&gt;;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> ThreadPool {\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// Create a new ThreadPool.</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// The size is the number of threads in the pool.</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// # Panics</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// The `new` function will panic if the size is zero.</span>\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(size: <span class=\"hljs-built_in\">usize</span>) -&gt; ThreadPool {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert!</span>(size &gt; <span class=\"hljs-number\">0</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> (sender, receiver) = mpsc::channel();\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> receiver = Arc::new(Mutex::new(receiver));\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> workers = <span class=\"hljs-built_in\">Vec</span>::with_capacity(size);\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">for</span> id <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..size {\n</span><span class=\"boring\">            workers.push(Worker::new(id, Arc::clone(&amp;receiver)));\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">\n</span><span class=\"boring\">        ThreadPool { workers, sender }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">execute</span></span>&lt;F&gt;(&amp;<span class=\"hljs-keyword\">self</span>, f: F)\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">where</span>\n</span><span class=\"boring\">        F: <span class=\"hljs-built_in\">FnOnce</span>() + <span class=\"hljs-built_in\">Send</span> + <span class=\"hljs-symbol\">'static</span>,\n</span><span class=\"boring\">    {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> job = <span class=\"hljs-built_in\">Box</span>::new(f);\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">self</span>.sender.send(job).unwrap();\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Worker</span></span> {\n</span><span class=\"boring\">    id: <span class=\"hljs-built_in\">usize</span>,\n</span><span class=\"boring\">    thread: thread::JoinHandle&lt;()&gt;,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-comment\">// --snip--</span>\n\n<span class=\"hljs-keyword\">impl</span> Worker {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(id: <span class=\"hljs-built_in\">usize</span>, receiver: Arc&lt;Mutex&lt;mpsc::Receiver&lt;Job&gt;&gt;&gt;) -&gt; Worker {\n        <span class=\"hljs-keyword\">let</span> thread = thread::spawn(<span class=\"hljs-keyword\">move</span> || <span class=\"hljs-keyword\">loop</span> {\n            <span class=\"hljs-keyword\">let</span> job = receiver.lock().unwrap().recv().unwrap();\n\n            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Worker {id} got a job; executing.\"</span>);\n\n            job();\n        });\n\n        Worker { id, thread }\n    }\n}</code></pre>\n<p><span class=\"caption\">Listing 20-20: Receiving and executing the jobs in the\nworker’s thread</span></p>\n<p>Here, we first call <code class=\"hljs\">lock</code> on the <code class=\"hljs\">receiver</code> to acquire the mutex, and then we\ncall <code class=\"hljs\">unwrap</code> to panic on any errors. Acquiring a lock might fail if the mutex\nis in a <em>poisoned</em> state, which can happen if some other thread panicked while\nholding the lock rather than releasing the lock. In this situation, calling\n<code class=\"hljs\">unwrap</code> to have this thread panic is the correct action to take. Feel free to\nchange this <code class=\"hljs\">unwrap</code> to an <code class=\"hljs\">expect</code> with an error message that is meaningful to\nyou.</p>\n<p>If we get the lock on the mutex, we call <code class=\"hljs\">recv</code> to receive a <code class=\"hljs\">Job</code> from the\nchannel. A final <code class=\"hljs\">unwrap</code> moves past any errors here as well, which might occur\nif the thread holding the sender has shut down, similar to how the <code class=\"hljs\">send</code>\nmethod returns <code class=\"hljs\">Err</code> if the receiver shuts down.</p>\n<p>The call to <code class=\"hljs\">recv</code> blocks, so if there is no job yet, the current thread will\nwait until a job becomes available. The <code class=\"hljs\">Mutex&lt;T&gt;</code> ensures that only one\n<code class=\"hljs\">Worker</code> thread at a time is trying to request a job.</p>\n<p>Our thread pool is now in a working state! Give it a <code class=\"hljs\">cargo run</code> and make some\nrequests:</p>\n<!-- manual-regeneration\ncd listings/ch20-web-server/listing-20-20\ncargo run\nmake some requests to 127.0.0.1:7878\nCan't automate because the output depends on making requests\n-->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling hello v0.1.0 (file:///projects/hello)\nwarning: field is never read: `workers`\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/lib.rs:7:5</span>\n  |\n7 |     workers: Vec&lt;Worker&gt;,\n  |     ^^^^^^^^^^^^^^^^^^^^\n  |\n  = note: `#[warn(dead_code)]` on by default\n\nwarning: field is never read: `id`\n<span class=\"hljs-meta\">  --&gt;</span><span class=\"bash\"> src/lib.rs:48:5</span>\n   |\n48 |     id: usize,\n   |     ^^^^^^^^^\n\nwarning: field is never read: `thread`\n<span class=\"hljs-meta\">  --&gt;</span><span class=\"bash\"> src/lib.rs:49:5</span>\n   |\n49 |     thread: thread::JoinHandle&lt;()&gt;,\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning: `hello` (lib) generated 3 warnings\n    Finished dev [unoptimized + debuginfo] target(s) in 1.40s\n     Running `target/debug/hello`\nWorker 0 got a job; executing.\nWorker 2 got a job; executing.\nWorker 1 got a job; executing.\nWorker 3 got a job; executing.\nWorker 0 got a job; executing.\nWorker 2 got a job; executing.\nWorker 1 got a job; executing.\nWorker 3 got a job; executing.\nWorker 0 got a job; executing.\nWorker 2 got a job; executing.\n</code></pre>\n<p>Success! We now have a thread pool that executes connections asynchronously.\nThere are never more than four threads created, so our system won’t get\noverloaded if the server receives a lot of requests. If we make a request to\n<em>/sleep</em>, the server will be able to serve other requests by having another\nthread run them.</p>\n<section class=\"note\" aria-role=\"note\">\n<p>Note: If you open <em>/sleep</em> in multiple browser windows simultaneously, they\nmight load one at a time in 5 second intervals. Some web browsers execute\nmultiple instances of the same request sequentially for caching reasons. This\nlimitation is not caused by our web server.</p>\n</section>\n<p>After learning about the <code class=\"hljs\">while let</code> loop in Chapter 18, you might be wondering\nwhy we didn’t write the worker thread code as shown in Listing 20-21.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/not_desired_behavior.svg\" title=\"This code does not produce the desired behavior.\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore not_desired_behavior hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::{\n</span><span class=\"boring\">    sync::{mpsc, Arc, Mutex},\n</span><span class=\"boring\">    thread,\n</span><span class=\"boring\">};\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ThreadPool</span></span> {\n</span><span class=\"boring\">    workers: <span class=\"hljs-built_in\">Vec</span>&lt;Worker&gt;,\n</span><span class=\"boring\">    sender: mpsc::Sender&lt;Job&gt;,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Job</span></span> = <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> <span class=\"hljs-built_in\">FnOnce</span>() + <span class=\"hljs-built_in\">Send</span> + <span class=\"hljs-symbol\">'static</span>&gt;;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> ThreadPool {\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// Create a new ThreadPool.</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// The size is the number of threads in the pool.</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// # Panics</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// The `new` function will panic if the size is zero.</span>\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(size: <span class=\"hljs-built_in\">usize</span>) -&gt; ThreadPool {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert!</span>(size &gt; <span class=\"hljs-number\">0</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> (sender, receiver) = mpsc::channel();\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> receiver = Arc::new(Mutex::new(receiver));\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> workers = <span class=\"hljs-built_in\">Vec</span>::with_capacity(size);\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">for</span> id <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..size {\n</span><span class=\"boring\">            workers.push(Worker::new(id, Arc::clone(&amp;receiver)));\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">\n</span><span class=\"boring\">        ThreadPool { workers, sender }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">execute</span></span>&lt;F&gt;(&amp;<span class=\"hljs-keyword\">self</span>, f: F)\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">where</span>\n</span><span class=\"boring\">        F: <span class=\"hljs-built_in\">FnOnce</span>() + <span class=\"hljs-built_in\">Send</span> + <span class=\"hljs-symbol\">'static</span>,\n</span><span class=\"boring\">    {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> job = <span class=\"hljs-built_in\">Box</span>::new(f);\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">self</span>.sender.send(job).unwrap();\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Worker</span></span> {\n</span><span class=\"boring\">    id: <span class=\"hljs-built_in\">usize</span>,\n</span><span class=\"boring\">    thread: thread::JoinHandle&lt;()&gt;,\n</span><span class=\"boring\">}\n</span><span class=\"hljs-comment\">// --snip--</span>\n\n<span class=\"hljs-keyword\">impl</span> Worker {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(id: <span class=\"hljs-built_in\">usize</span>, receiver: Arc&lt;Mutex&lt;mpsc::Receiver&lt;Job&gt;&gt;&gt;) -&gt; Worker {\n        <span class=\"hljs-keyword\">let</span> thread = thread::spawn(<span class=\"hljs-keyword\">move</span> || {\n            <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-literal\">Ok</span>(job) = receiver.lock().unwrap().recv() {\n                <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Worker {id} got a job; executing.\"</span>);\n\n                job();\n            }\n        });\n\n        Worker { id, thread }\n    }\n}</code></pre>\n<p><span class=\"caption\">Listing 20-21: An alternative implementation of\n<code class=\"hljs\">Worker::new</code> using <code class=\"hljs\">while let</code></span></p>\n<p>This code compiles and runs but doesn’t result in the desired threading\nbehavior: a slow request will still cause other requests to wait to be\nprocessed. The reason is somewhat subtle: the <code class=\"hljs\">Mutex</code> struct has no public\n<code class=\"hljs\">unlock</code> method because the ownership of the lock is based on the lifetime of\nthe <code class=\"hljs\">MutexGuard&lt;T&gt;</code> within the <code class=\"hljs\">LockResult&lt;MutexGuard&lt;T&gt;&gt;</code> that the <code class=\"hljs\">lock</code>\nmethod returns. At compile time, the borrow checker can then enforce the rule\nthat a resource guarded by a <code class=\"hljs\">Mutex</code> cannot be accessed unless we hold the\nlock. However, this implementation can also result in the lock being held\nlonger than intended if we aren’t mindful of the lifetime of the\n<code class=\"hljs\">MutexGuard&lt;T&gt;</code>.</p>\n<p>The code in Listing 20-20 that uses <code class=\"hljs\">let job = receiver.lock().unwrap().recv().unwrap();</code> works because with <code class=\"hljs\">let</code>, any\ntemporary values used in the expression on the right hand side of the equals\nsign are immediately dropped when the <code class=\"hljs\">let</code> statement ends. However, <code class=\"hljs\">while let</code> (and <code class=\"hljs\">if let</code> and <code class=\"hljs\">match</code>) does not drop temporary values until the end of\nthe associated block. In Listing 20-21, the lock remains held for the duration\nof the call to <code class=\"hljs\">job()</code>, meaning other workers cannot receive jobs.</p>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"ch20-01-single-threaded.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"ch20-03-graceful-shutdown-and-cleanup.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"ch20-01-single-threaded.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"ch20-03-graceful-shutdown-and-cleanup.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"elasticlunr.min.js\"></script>\n        <script src=\"mark.min.js\"></script>\n        <script src=\"searcher.js\"></script>\n\n        <script src=\"clipboard.min.js\"></script>\n        <script src=\"highlight.js\"></script>\n        <script src=\"book.js\"></script>\n\n        <!-- Custom JS scripts -->\n        <script src=\"ferris.js\"></script>\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:08:34.885Z"
}