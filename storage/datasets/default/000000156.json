{
	"title": "Features - The Cargo Book",
	"url": "https://doc.rust-lang.org/cargo/reference/features.html",
	"markdown": "# Features - The Cargo Book\n\nCargo “features” provide a mechanism to express [conditional compilation](../../reference/conditional-compilation.html) and [optional dependencies](#optional-dependencies). A package defines a set of named features in the `[features]` table of `Cargo.toml`, and each feature can either be enabled or disabled. Features for the package being built can be enabled on the command-line with flags such as `--features`. Features for dependencies can be enabled in the dependency declaration in `Cargo.toml`.\n\n> **Note**: New crates or versions published on crates.io are now limited to a maximum of 300 features. Exceptions are granted on a case-by-case basis. See this [blog post](https://blog.rust-lang.org/2023/10/26/broken-badges-and-23k-keywords.html) for details. Participation in solution discussions is encouraged via the crates.io Zulip stream.\n\nSee also the [Features Examples](features-examples.html) chapter for some examples of how features can be used.\n\n## [The `[features]` section](#the-features-section)\n\nFeatures are defined in the `[features]` table in `Cargo.toml`. Each feature specifies an array of other features or optional dependencies that it enables. The following examples illustrate how features could be used for a 2D image processing library where support for different image formats can be optionally included:\n\n```toml\n[features]\n# Defines a feature named `webp` that does not enable any other features.\nwebp = []\n\n```\n\nWith this feature defined, [`cfg` expressions](../../reference/conditional-compilation.html) can be used to conditionally include code to support the requested feature at compile time. For example, inside `lib.rs` of the package could include this:\n\n```rust\n#![allow(unused)]\nfn main() {\n// This conditionally includes a module which implements WEBP support.\n#[cfg(feature = \"webp\")]\npub mod webp;\n}\n```\n\nCargo sets features in the package using the `rustc` [`--cfg` flag](about:blank/rustc/command-line-arguments.html#option-cfg), and code can test for their presence with the [`cfg` attribute](about:blank/reference/conditional-compilation.html#the-cfg-attribute) or the [`cfg` macro](../../std/macro.cfg.html).\n\nFeatures can list other features to enable. For example, the ICO image format can contain BMP and PNG images, so when it is enabled, it should make sure those other features are enabled, too:\n\n```toml\n[features]\nbmp = []\npng = []\nico = [\"bmp\", \"png\"]\nwebp = []\n\n```\n\nFeature names may include characters from the [Unicode XID standard](https://unicode.org/reports/tr31/) (which includes most letters), and additionally allows starting with `_` or digits `0` through `9`, and after the first character may also contain `-`, `+`, or `.`.\n\n> **Note**: [crates.io](https://crates.io/) imposes additional constraints on feature name syntax that they must only be [ASCII alphanumeric](about:blank/std/primitive.char.html#method.is_ascii_alphanumeric) characters or `_`, `-`, or `+`.\n\n## [The `default` feature](#the-default-feature)\n\nBy default, all features are disabled unless explicitly enabled. This can be changed by specifying the `default` feature:\n\n```toml\n[features]\ndefault = [\"ico\", \"webp\"]\nbmp = []\npng = []\nico = [\"bmp\", \"png\"]\nwebp = []\n\n```\n\nWhen the package is built, the `default` feature is enabled which in turn enables the listed features. This behavior can be changed by:\n\n-   The `--no-default-features` [command-line flag](#command-line-feature-options) disables the default features of the package.\n-   The `default-features = false` option can be specified in a [dependency declaration](#dependency-features).\n\n> **Note**: Be careful about choosing the default feature set. The default features are a convenience that make it easier to use a package without forcing the user to carefully select which features to enable for common use, but there are some drawbacks. Dependencies automatically enable default features unless `default-features = false` is specified. This can make it difficult to ensure that the default features are not enabled, especially for a dependency that appears multiple times in the dependency graph. Every package must ensure that `default-features = false` is specified to avoid enabling them.\n> \n> Another issue is that it can be a [SemVer incompatible change](#semver-compatibility) to remove a feature from the default set, so you should be confident that you will keep those features.\n\n## [Optional dependencies](#optional-dependencies)\n\nDependencies can be marked “optional”, which means they will not be compiled by default. For example, let’s say that our 2D image processing library uses an external package to handle GIF images. This can be expressed like this:\n\n```toml\n[dependencies]\ngif = { version = \"0.11.1\", optional = true }\n\n```\n\nBy default, this optional dependency implicitly defines a feature that looks like this:\n\n```toml\n[features]\ngif = [\"dep:gif\"]\n\n```\n\nThis means that this dependency will only be included if the `gif` feature is enabled. The same `cfg(feature = \"gif\")` syntax can be used in the code, and the dependency can be enabled just like any feature such as `--features gif` (see [Command-line feature options](#command-line-feature-options) below).\n\nIn some cases, you may not want to expose a feature that has the same name as the optional dependency. For example, perhaps the optional dependency is an internal detail, or you want to group multiple optional dependencies together, or you just want to use a better name. If you specify the optional dependency with the `dep:` prefix anywhere in the `[features]` table, that disables the implicit feature.\n\n> **Note**: The `dep:` syntax is only available starting with Rust 1.60. Previous versions can only use the implicit feature name.\n\nFor example, let’s say in order to support the AVIF image format, our library needs two other dependencies to be enabled:\n\n```toml\n[dependencies]\nravif = { version = \"0.6.3\", optional = true }\nrgb = { version = \"0.8.25\", optional = true }\n\n[features]\navif = [\"dep:ravif\", \"dep:rgb\"]\n\n```\n\nIn this example, the `avif` feature will enable the two listed dependencies. This also avoids creating the implicit `ravif` and `rgb` features, since we don’t want users to enable those individually as they are internal details to our crate.\n\n> **Note**: Another way to optionally include a dependency is to use [platform-specific dependencies](about:blank/specifying-dependencies.html#platform-specific-dependencies). Instead of using features, these are conditional based on the target platform.\n\n## [Dependency features](#dependency-features)\n\nFeatures of dependencies can be enabled within the dependency declaration. The `features` key indicates which features to enable:\n\n```toml\n[dependencies]\n# Enables the `derive` feature of serde.\nserde = { version = \"1.0.118\", features = [\"derive\"] }\n\n```\n\nThe [`default` features](#the-default-feature) can be disabled using `default-features = false`:\n\n```toml\n[dependencies]\nflate2 = { version = \"1.0.3\", default-features = false, features = [\"zlib\"] }\n\n```\n\n> **Note**: This may not ensure the default features are disabled. If another dependency includes `flate2` without specifying `default-features = false`, then the default features will be enabled. See [feature unification](#feature-unification) below for more details.\n\nFeatures of dependencies can also be enabled in the `[features]` table. The syntax is `\"package-name/feature-name\"`. For example:\n\n```toml\n[dependencies]\njpeg-decoder = { version = \"0.1.20\", default-features = false }\n\n[features]\n# Enables parallel processing support by enabling the \"rayon\" feature of jpeg-decoder.\nparallel = [\"jpeg-decoder/rayon\"]\n\n```\n\nThe `\"package-name/feature-name\"` syntax will also enable `package-name` if it is an optional dependency. Often this is not what you want. You can add a `?` as in `\"package-name?/feature-name\"` which will only enable the given feature if something else enables the optional dependency.\n\n> **Note**: The `?` syntax is only available starting with Rust 1.60.\n\nFor example, let’s say we have added some serialization support to our library, and it requires enabling a corresponding feature in some optional dependencies. That can be done like this:\n\n```toml\n[dependencies]\nserde = { version = \"1.0.133\", optional = true }\nrgb = { version = \"0.8.25\", optional = true }\n\n[features]\nserde = [\"dep:serde\", \"rgb?/serde\"]\n\n```\n\nIn this example, enabling the `serde` feature will enable the serde dependency. It will also enable the `serde` feature for the `rgb` dependency, but only if something else has enabled the `rgb` dependency.\n\n## [Command-line feature options](#command-line-feature-options)\n\nThe following command-line flags can be used to control which features are enabled:\n\n-   `--features` _FEATURES_: Enables the listed features. Multiple features may be separated with commas or spaces. If using spaces, be sure to use quotes around all the features if running Cargo from a shell (such as `--features \"foo bar\"`). If building multiple packages in a [workspace](workspaces.html), the `package-name/feature-name` syntax can be used to specify features for specific workspace members.\n    \n-   `--all-features`: Activates all features of all packages selected on the command-line.\n    \n-   `--no-default-features`: Does not activate the [`default` feature](#the-default-feature) of the selected packages.\n    \n\n## [Feature unification](#feature-unification)\n\nFeatures are unique to the package that defines them. Enabling a feature on a package does not enable a feature of the same name on other packages.\n\nWhen a dependency is used by multiple packages, Cargo will use the union of all features enabled on that dependency when building it. This helps ensure that only a single copy of the dependency is used. See the [features section](about:blank/resolver.html#features) of the resolver documentation for more details.\n\nFor example, let’s look at the [`winapi`](https://crates.io/crates/winapi) package which uses a [large number](https://github.com/retep998/winapi-rs/blob/0.3.9/Cargo.toml#L25-L431) of features. If your package depends on a package `foo` which enables the “fileapi” and “handleapi” features of `winapi`, and another dependency `bar` which enables the “std” and “winnt” features of `winapi`, then `winapi` will be built with all four of those features enabled.\n\n![winapi features example](../images/winapi-features.svg)\n\nA consequence of this is that features should be _additive_. That is, enabling a feature should not disable functionality, and it should usually be safe to enable any combination of features. A feature should not introduce a [SemVer-incompatible change](#semver-compatibility).\n\nFor example, if you want to optionally support [`no_std`](about:blank/reference/names/preludes.html#the-no_std-attribute) environments, **do not** use a `no_std` feature. Instead, use a `std` feature that _enables_ `std`. For example:\n\n```rust\n#![allow(unused)]\n#![no_std]\n\nfn main() {\n#[cfg(feature = \"std\")]\nextern crate std;\n\n#[cfg(feature = \"std\")]\npub fn function_that_requires_std() {\n    // ...\n}\n}\n```\n\n### [Mutually exclusive features](#mutually-exclusive-features)\n\nThere are rare cases where features may be mutually incompatible with one another. This should be avoided if at all possible, because it requires coordinating all uses of the package in the dependency graph to cooperate to avoid enabling them together. If it is not possible, consider adding a compile error to detect this scenario. For example:\n\n```rust\n#[cfg(all(feature = \"foo\", feature = \"bar\"))]\ncompile_error!(\"feature \\\"foo\\\" and feature \\\"bar\\\" cannot be enabled at the same time\");\n```\n\nInstead of using mutually exclusive features, consider some other options:\n\n-   Split the functionality into separate packages.\n-   When there is a conflict, [choose one feature over another](about:blank/features-examples.html#feature-precedence). The [`cfg-if`](https://crates.io/crates/cfg-if) package can help with writing more complex `cfg` expressions.\n-   Architect the code to allow the features to be enabled concurrently, and use runtime options to control which is used. For example, use a config file, command-line argument, or environment variable to choose which behavior to enable.\n\n### [Inspecting resolved features](#inspecting-resolved-features)\n\nIn complex dependency graphs, it can sometimes be difficult to understand how different features get enabled on various packages. The [`cargo tree`](../commands/cargo-tree.html) command offers several options to help inspect and visualize which features are enabled. Some options to try:\n\n-   `cargo tree -e features`: This will show features in the dependency graph. Each feature will appear showing which package enabled it.\n-   `cargo tree -f \"{p} {f}\"`: This is a more compact view that shows a comma-separated list of features enabled on each package.\n-   `cargo tree -e features -i foo`: This will invert the tree, showing how features flow into the given package “foo”. This can be useful because viewing the entire graph can be quite large and overwhelming. Use this when you are trying to figure out which features are enabled on a specific package and why. See the example at the bottom of the [`cargo tree`](../commands/cargo-tree.html) page on how to read this.\n\n## [Feature resolver version 2](#feature-resolver-version-2)\n\nA different feature resolver can be specified with the `resolver` field in `Cargo.toml`, like this:\n\n```toml\n[package]\nname = \"my-package\"\nversion = \"1.0.0\"\nresolver = \"2\"\n\n```\n\nSee the [resolver versions](about:blank/resolver.html#resolver-versions) section for more detail on specifying resolver versions.\n\nThe version `\"2\"` resolver avoids unifying features in a few situations where that unification can be unwanted. The exact situations are described in the [resolver chapter](about:blank/resolver.html#feature-resolver-version-2), but in short, it avoids unifying in these situations:\n\n-   Features enabled on [platform-specific dependencies](about:blank/specifying-dependencies.html#platform-specific-dependencies) for targets not currently being built are ignored.\n-   [Build-dependencies](about:blank/specifying-dependencies.html#build-dependencies) and proc-macros do not share features with normal dependencies.\n-   [Dev-dependencies](about:blank/specifying-dependencies.html#development-dependencies) do not activate features unless building a target that needs them (like tests or examples).\n\nAvoiding the unification is necessary for some situations. For example, if a build-dependency enables a `std` feature, and the same dependency is used as a normal dependency for a `no_std` environment, enabling `std` would break the build.\n\nHowever, one drawback is that this can increase build times because the dependency is built multiple times (each with different features). When using the version `\"2\"` resolver, it is recommended to check for dependencies that are built multiple times to reduce overall build time. If it is not _required_ to build those duplicated packages with separate features, consider adding features to the `features` list in the [dependency declaration](#dependency-features) so that the duplicates end up with the same features (and thus Cargo will build it only once). You can detect these duplicate dependencies with the [`cargo tree --duplicates`](../commands/cargo-tree.html) command. It will show which packages are built multiple times; look for any entries listed with the same version. See [Inspecting resolved features](#inspecting-resolved-features) for more on fetching information on the resolved features. For build dependencies, this is not necessary if you are cross-compiling with the `--target` flag because build dependencies are always built separately from normal dependencies in that scenario.\n\n### [Resolver version 2 command-line flags](#resolver-version-2-command-line-flags)\n\nThe `resolver = \"2\"` setting also changes the behavior of the `--features` and `--no-default-features` [command-line options](#command-line-feature-options).\n\nWith version `\"1\"`, you can only enable features for the package in the current working directory. For example, in a workspace with packages `foo` and `bar`, and you are in the directory for package `foo`, and ran the command `cargo build -p bar --features bar-feat`, this would fail because the `--features` flag only allowed enabling features on `foo`.\n\nWith `resolver = \"2\"`, the features flags allow enabling features for any of the packages selected on the command-line with `-p` and `--workspace` flags. For example:\n\n```sh\n# This command is allowed with resolver = \"2\", regardless of which directory\n# you are in.\ncargo build -p foo -p bar --features foo-feat,bar-feat\n\n# This explicit equivalent works with any resolver version:\ncargo build -p foo -p bar --features foo/foo-feat,bar/bar-feat\n\n```\n\nAdditionally, with `resolver = \"1\"`, the `--no-default-features` flag only disables the default feature for the package in the current directory. With version “2”, it will disable the default features for all workspace members.\n\n## [Build scripts](#build-scripts)\n\n[Build scripts](build-scripts.html) can detect which features are enabled on the package by inspecting the `CARGO_FEATURE_<name>` environment variable, where `<name>` is the feature name converted to uppercase and `-` converted to `_`.\n\n## [Required features](#required-features)\n\nThe [`required-features` field](about:blank/cargo-targets.html#the-required-features-field) can be used to disable specific [Cargo targets](cargo-targets.html) if a feature is not enabled. See the linked documentation for more details.\n\n## [SemVer compatibility](#semver-compatibility)\n\nEnabling a feature should not introduce a SemVer-incompatible change. For example, the feature shouldn’t change an existing API in a way that could break existing uses. More details about what changes are compatible can be found in the [SemVer Compatibility chapter](semver.html).\n\nCare should be taken when adding and removing feature definitions and optional dependencies, as these can sometimes be backwards-incompatible changes. More details can be found in the [Cargo section](about:blank/semver.html#cargo) of the SemVer Compatibility chapter. In short, follow these rules:\n\n-   The following is usually safe to do in a minor release:\n    -   Add a [new feature](about:blank/semver.html#cargo-feature-add) or [optional dependency](about:blank/semver.html#cargo-dep-add).\n    -   [Change the features used on a dependency](about:blank/semver.html#cargo-change-dep-feature).\n-   The following should usually **not** be done in a minor release:\n    -   [Remove a feature](about:blank/semver.html#cargo-feature-remove) or [optional dependency](about:blank/semver.html#cargo-remove-opt-dep).\n    -   [Moving existing public code behind a feature](about:blank/semver.html#item-remove).\n    -   [Remove a feature from a feature list](about:blank/semver.html#cargo-feature-remove-another).\n\nSee the links for caveats and examples.\n\n## [Feature documentation and discovery](#feature-documentation-and-discovery)\n\nYou are encouraged to document which features are available in your package. This can be done by adding [doc comments](../../rustdoc/how-to-write-documentation.html) at the top of `lib.rs`. As an example, see the [regex crate source](https://github.com/rust-lang/regex/blob/1.4.2/src/lib.rs#L488-L583), which when rendered can be viewed on [docs.rs](https://docs.rs/regex/1.4.2/regex/#crate-features). If you have other documentation, such as a user guide, consider adding the documentation there (for example, see [serde.rs](https://serde.rs/feature-flags.html)). If you have a binary project, consider documenting the features in the README or other documentation for the project (for example, see [sccache](https://github.com/mozilla/sccache/blob/0.2.13/README.md#build-requirements)).\n\nClearly documenting the features can set expectations about features that are considered “unstable” or otherwise shouldn’t be used. For example, if there is an optional dependency, but you don’t want users to explicitly list that optional dependency as a feature, exclude it from the documented list.\n\nDocumentation published on [docs.rs](https://docs.rs/) can use metadata in `Cargo.toml` to control which features are enabled when the documentation is built. See [docs.rs metadata documentation](https://docs.rs/about/metadata) for more details.\n\n> **Note**: Rustdoc has experimental support for annotating the documentation to indicate which features are required to use certain APIs. See the [`doc_cfg`](../../unstable-book/language-features/doc-cfg.html) documentation for more details. An example is the [`syn` documentation](https://docs.rs/syn/1.0.54/syn/#modules), where you can see colored boxes which note which features are required to use it.\n\n### [Discovering features](#discovering-features)\n\nWhen features are documented in the library API, this can make it easier for your users to discover which features are available and what they do. If the feature documentation for a package isn’t readily available, you can look at the `Cargo.toml` file, but sometimes it can be hard to track it down. The crate page on [crates.io](https://crates.io/) has a link to the source repository if available. Tools like [`cargo vendor`](../commands/cargo-vendor.html) or [cargo-clone-crate](https://crates.io/crates/cargo-clone-crate) can be used to download the source and inspect it.\n\n## [Feature combinations](#feature-combinations)\n\nBecause features are a form of conditional compilation, they require an exponential number of configurations and test cases to be 100% covered. By default, tests, docs, and other tooling such as [Clippy](https://github.com/rust-lang/rust-clippy) will only run with the default set of features.\n\nWe encourage you to consider your strategy and tooling in regards to different feature combinations — Every project will have different requirements in conjunction with time, resources, and the cost-benefit of covering specific scenarios. Common configurations may be with / without default features, specific combinations of features, or all combinations of features.",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>Features - The Cargo Book</title>\n\n\n        <!-- Custom HTML head -->\n        <style>\n            dd {\n                margin-bottom: 1em;\n            }\n        </style>\n\n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"shortcut icon\" href=\"../favicon.png\">\n        <link rel=\"stylesheet\" href=\"../css/variables.css\">\n        <link rel=\"stylesheet\" href=\"../css/general.css\">\n        <link rel=\"stylesheet\" href=\"../css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"../css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"../FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"../fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"../highlight.css\">\n        <link rel=\"stylesheet\" href=\"../tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"../ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"../\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"../index.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"../getting-started/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> Getting Started</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../getting-started/installation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.1.</strong> Installation</a></li><li class=\"chapter-item expanded \"><a href=\"../getting-started/first-steps.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.2.</strong> First Steps with Cargo</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../guide/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Cargo Guide</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../guide/why-cargo-exists.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.1.</strong> Why Cargo Exists</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/creating-a-new-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.2.</strong> Creating a New Package</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/working-on-an-existing-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.3.</strong> Working on an Existing Package</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/dependencies.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.4.</strong> Dependencies</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/project-layout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.5.</strong> Package Layout</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/cargo-toml-vs-cargo-lock.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.6.</strong> Cargo.toml vs Cargo.lock</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/tests.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.7.</strong> Tests</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/continuous-integration.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.8.</strong> Continuous Integration</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/cargo-home.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.9.</strong> Cargo Home</a></li><li class=\"chapter-item expanded \"><a href=\"../guide/build-cache.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.10.</strong> Build Cache</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Cargo Reference</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/specifying-dependencies.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> Specifying Dependencies</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/overriding-dependencies.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.1.</strong> Overriding Dependencies</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/manifest.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> The Manifest Format</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/cargo-targets.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.1.</strong> Cargo Targets</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/workspaces.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.3.</strong> Workspaces</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/features.html\" class=\"active\" tabindex=\"0\"><strong aria-hidden=\"true\">3.4.</strong> Features</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/features-examples.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.4.1.</strong> Features Examples</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/profiles.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.5.</strong> Profiles</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/config.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.6.</strong> Configuration</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/environment-variables.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.7.</strong> Environment Variables</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/build-scripts.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.8.</strong> Build Scripts</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/build-script-examples.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.8.1.</strong> Build Script Examples</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/publishing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.9.</strong> Publishing on crates.io</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/pkgid-spec.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.10.</strong> Package ID Specifications</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/source-replacement.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.11.</strong> Source Replacement</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/external-tools.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.12.</strong> External Tools</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/registries.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.</strong> Registries</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/registry-authentication.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.1.</strong> Registry Authentication</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/credential-provider-protocol.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.1.1.</strong> Credential Provider Protocol</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/running-a-registry.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.2.</strong> Running a Registry</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../reference/registry-index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.2.1.</strong> Registry Index</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/registry-web-api.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.13.2.2.</strong> Registry Web API</a></li></ol></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../reference/resolver.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.14.</strong> Dependency Resolution</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/semver.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.15.</strong> SemVer Compatibility</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/future-incompat-report.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.16.</strong> Future incompat report</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/timings.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.17.</strong> Reporting build timings</a></li><li class=\"chapter-item expanded \"><a href=\"../reference/unstable.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.18.</strong> Unstable Features</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/index.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Cargo Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/general-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.</strong> General Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.1.</strong> cargo</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-help.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.2.</strong> cargo help</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-version.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.3.</strong> cargo version</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/build-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.</strong> Build Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-bench.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.1.</strong> cargo bench</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-build.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.2.</strong> cargo build</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-check.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.3.</strong> cargo check</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-clean.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.4.</strong> cargo clean</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-doc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.5.</strong> cargo doc</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-fetch.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.6.</strong> cargo fetch</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-fix.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.7.</strong> cargo fix</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-run.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.8.</strong> cargo run</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-rustc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.9.</strong> cargo rustc</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-rustdoc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.10.</strong> cargo rustdoc</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-test.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.11.</strong> cargo test</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-report.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.12.</strong> cargo report</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/manifest-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.</strong> Manifest Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-add.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.1.</strong> cargo add</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-generate-lockfile.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.2.</strong> cargo generate-lockfile</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-locate-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.3.</strong> cargo locate-project</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-metadata.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.4.</strong> cargo metadata</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-pkgid.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.5.</strong> cargo pkgid</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-remove.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.6.</strong> cargo remove</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-tree.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.7.</strong> cargo tree</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-update.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.8.</strong> cargo update</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-vendor.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.9.</strong> cargo vendor</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-verify-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.10.</strong> cargo verify-project</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/package-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.</strong> Package Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-init.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.1.</strong> cargo init</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-install.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.2.</strong> cargo install</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-new.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.3.</strong> cargo new</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-search.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.4.</strong> cargo search</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-uninstall.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.4.5.</strong> cargo uninstall</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../commands/publishing-commands.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.</strong> Publishing Commands</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-login.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.1.</strong> cargo login</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-logout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.2.</strong> cargo logout</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-owner.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.3.</strong> cargo owner</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-package.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.4.</strong> cargo package</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-publish.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.5.</strong> cargo publish</a></li><li class=\"chapter-item expanded \"><a href=\"../commands/cargo-yank.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.5.6.</strong> cargo yank</a></li></ol></li></ol></li><li class=\"chapter-item expanded \"><a href=\"../faq.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> FAQ</a></li><li class=\"chapter-item expanded \"><a href=\"../appendix/glossary.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Appendix: Glossary</a></li><li class=\"chapter-item expanded \"><a href=\"../appendix/git-authentication.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Appendix: Git Authentication</a></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Cargo Book</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"../print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/cargo/tree/master/src/doc/src\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/cargo/edit/master/src/doc/src/reference/features.md\" title=\"Suggest an edit\" aria-label=\"Suggest an edit\">\n                            <i id=\"git-edit-button\" class=\"fa fa-edit\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h1 id=\"features\"><a class=\"header\" href=\"#features\">Features</a></h1>\n<p>Cargo “features” provide a mechanism to express <a href=\"../../reference/conditional-compilation.html\">conditional compilation</a> and\n<a href=\"#optional-dependencies\">optional dependencies</a>. A package defines a set of\nnamed features in the <code class=\"hljs\">[features]</code> table of <code class=\"hljs\">Cargo.toml</code>, and each feature can\neither be enabled or disabled. Features for the package being built can be\nenabled on the command-line with flags such as <code class=\"hljs\">--features</code>. Features for\ndependencies can be enabled in the dependency declaration in <code class=\"hljs\">Cargo.toml</code>.</p>\n<blockquote>\n<p><strong>Note</strong>: New crates or versions published on crates.io are now limited to\na maximum of 300 features. Exceptions are granted on a case-by-case basis.\nSee this <a href=\"https://blog.rust-lang.org/2023/10/26/broken-badges-and-23k-keywords.html\">blog post</a> for details. Participation in solution discussions is\nencouraged via the crates.io Zulip stream.</p>\n</blockquote>\n<p>See also the <a href=\"features-examples.html\">Features Examples</a> chapter for some examples of how features can\nbe used.</p>\n<h2 id=\"the-features-section\"><a class=\"header\" href=\"#the-features-section\">The <code>[features]</code> section</a></h2>\n<p>Features are defined in the <code class=\"hljs\">[features]</code> table in <code class=\"hljs\">Cargo.toml</code>. Each feature\nspecifies an array of other features or optional dependencies that it enables.\nThe following examples illustrate how features could be used for a 2D image\nprocessing library where support for different image formats can be optionally\nincluded:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[features]</span>\n<span class=\"hljs-comment\"># Defines a feature named `webp` that does not enable any other features.</span>\n<span class=\"hljs-attr\">webp</span> = []\n</code></pre>\n<p>With this feature defined, <a href=\"../../reference/conditional-compilation.html\"><code class=\"hljs\">cfg</code> expressions</a> can be used to conditionally\ninclude code to support the requested feature at compile time. For example,\ninside <code class=\"hljs\">lib.rs</code> of the package could include this:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// This conditionally includes a module which implements WEBP support.</span>\n<span class=\"hljs-meta\">#[cfg(feature = <span class=\"hljs-meta-string\">\"webp\"</span>)]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">mod</span> webp;\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Cargo sets features in the package using the <code class=\"hljs\">rustc</code> <a href=\"../../rustc/command-line-arguments.html#option-cfg\"><code class=\"hljs\">--cfg</code> flag</a>, and code\ncan test for their presence with the <a href=\"../../reference/conditional-compilation.html#the-cfg-attribute\"><code class=\"hljs\">cfg</code> attribute</a> or the <a href=\"../../std/macro.cfg.html\"><code class=\"hljs\">cfg</code> macro</a>.</p>\n<p>Features can list other features to enable. For example, the ICO image format\ncan contain BMP and PNG images, so when it is enabled, it should make sure\nthose other features are enabled, too:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[features]</span>\n<span class=\"hljs-attr\">bmp</span> = []\n<span class=\"hljs-attr\">png</span> = []\n<span class=\"hljs-attr\">ico</span> = [<span class=\"hljs-string\">\"bmp\"</span>, <span class=\"hljs-string\">\"png\"</span>]\n<span class=\"hljs-attr\">webp</span> = []\n</code></pre>\n<p>Feature names may include characters from the <a href=\"https://unicode.org/reports/tr31/\">Unicode XID standard</a> (which\nincludes most letters), and additionally allows starting with <code class=\"hljs\">_</code> or digits\n<code class=\"hljs\">0</code> through <code class=\"hljs\">9</code>, and after the first character may also contain <code class=\"hljs\">-</code>, <code class=\"hljs\">+</code>, or\n<code class=\"hljs\">.</code>.</p>\n<blockquote>\n<p><strong>Note</strong>: <a href=\"https://crates.io/\">crates.io</a> imposes additional constraints on feature name syntax\nthat they must only be <a href=\"../../std/primitive.char.html#method.is_ascii_alphanumeric\">ASCII alphanumeric</a> characters or <code class=\"hljs\">_</code>, <code class=\"hljs\">-</code>, or <code class=\"hljs\">+</code>.</p>\n</blockquote>\n<h2 id=\"the-default-feature\"><a class=\"header\" href=\"#the-default-feature\">The <code>default</code> feature</a></h2>\n<p>By default, all features are disabled unless explicitly enabled. This can be\nchanged by specifying the <code class=\"hljs\">default</code> feature:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[features]</span>\n<span class=\"hljs-attr\">default</span> = [<span class=\"hljs-string\">\"ico\"</span>, <span class=\"hljs-string\">\"webp\"</span>]\n<span class=\"hljs-attr\">bmp</span> = []\n<span class=\"hljs-attr\">png</span> = []\n<span class=\"hljs-attr\">ico</span> = [<span class=\"hljs-string\">\"bmp\"</span>, <span class=\"hljs-string\">\"png\"</span>]\n<span class=\"hljs-attr\">webp</span> = []\n</code></pre>\n<p>When the package is built, the <code class=\"hljs\">default</code> feature is enabled which in turn\nenables the listed features. This behavior can be changed by:</p>\n<ul>\n<li>The <code class=\"hljs\">--no-default-features</code> <a href=\"#command-line-feature-options\">command-line\nflag</a> disables the default features of the\npackage.</li>\n<li>The <code class=\"hljs\">default-features = false</code> option can be specified in a <a href=\"#dependency-features\">dependency\ndeclaration</a>.</li>\n</ul>\n<blockquote>\n<p><strong>Note</strong>: Be careful about choosing the default feature set. The default\nfeatures are a convenience that make it easier to use a package without\nforcing the user to carefully select which features to enable for common\nuse, but there are some drawbacks. Dependencies automatically enable default\nfeatures unless <code class=\"hljs\">default-features = false</code> is specified. This can make it\ndifficult to ensure that the default features are not enabled, especially\nfor a dependency that appears multiple times in the dependency graph. Every\npackage must ensure that <code class=\"hljs\">default-features = false</code> is specified to avoid\nenabling them.</p>\n<p>Another issue is that it can be a <a href=\"#semver-compatibility\">SemVer incompatible\nchange</a> to remove a feature from the default set, so\nyou should be confident that you will keep those features.</p>\n</blockquote>\n<h2 id=\"optional-dependencies\"><a class=\"header\" href=\"#optional-dependencies\">Optional dependencies</a></h2>\n<p>Dependencies can be marked “optional”, which means they will not be compiled\nby default. For example, let’s say that our 2D image processing library uses\nan external package to handle GIF images. This can be expressed like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">gif</span> = { version = <span class=\"hljs-string\">\"0.11.1\"</span>, optional = <span class=\"hljs-literal\">true</span> }\n</code></pre>\n<p>By default, this optional dependency implicitly defines a feature that looks\nlike this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[features]</span>\n<span class=\"hljs-attr\">gif</span> = [<span class=\"hljs-string\">\"dep:gif\"</span>]\n</code></pre>\n<p>This means that this dependency will only be included if the <code class=\"hljs\">gif</code>\nfeature is enabled.\nThe same <code class=\"hljs\">cfg(feature = \"gif\")</code> syntax can be used in the code, and the\ndependency can be enabled just like any feature such as <code class=\"hljs\">--features gif</code> (see\n<a href=\"#command-line-feature-options\">Command-line feature options</a> below).</p>\n<p>In some cases, you may not want to expose a feature that has the same name\nas the optional dependency.\nFor example, perhaps the optional dependency is an internal detail, or you\nwant to group multiple optional dependencies together, or you just want to use\na better name.\nIf you specify the optional dependency with the <code class=\"hljs\">dep:</code> prefix anywhere\nin the <code class=\"hljs\">[features]</code> table, that disables the implicit feature.</p>\n<blockquote>\n<p><strong>Note</strong>: The <code class=\"hljs\">dep:</code> syntax is only available starting with Rust 1.60.\nPrevious versions can only use the implicit feature name.</p>\n</blockquote>\n<p>For example, let’s say in order to support the AVIF image format, our library\nneeds two other dependencies to be enabled:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">ravif</span> = { version = <span class=\"hljs-string\">\"0.6.3\"</span>, optional = <span class=\"hljs-literal\">true</span> }\n<span class=\"hljs-attr\">rgb</span> = { version = <span class=\"hljs-string\">\"0.8.25\"</span>, optional = <span class=\"hljs-literal\">true</span> }\n\n<span class=\"hljs-section\">[features]</span>\n<span class=\"hljs-attr\">avif</span> = [<span class=\"hljs-string\">\"dep:ravif\"</span>, <span class=\"hljs-string\">\"dep:rgb\"</span>]\n</code></pre>\n<p>In this example, the <code class=\"hljs\">avif</code> feature will enable the two listed dependencies.\nThis also avoids creating the implicit <code class=\"hljs\">ravif</code> and <code class=\"hljs\">rgb</code> features, since we\ndon’t want users to enable those individually as they are internal details to\nour crate.</p>\n<blockquote>\n<p><strong>Note</strong>: Another way to optionally include a dependency is to use\n<a href=\"specifying-dependencies.html#platform-specific-dependencies\">platform-specific dependencies</a>. Instead of using features, these are\nconditional based on the target platform.</p>\n</blockquote>\n<h2 id=\"dependency-features\"><a class=\"header\" href=\"#dependency-features\">Dependency features</a></h2>\n<p>Features of dependencies can be enabled within the dependency declaration. The\n<code class=\"hljs\">features</code> key indicates which features to enable:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-comment\"># Enables the `derive` feature of serde.</span>\n<span class=\"hljs-attr\">serde</span> = { version = <span class=\"hljs-string\">\"1.0.118\"</span>, features = [<span class=\"hljs-string\">\"derive\"</span>] }\n</code></pre>\n<p>The <a href=\"#the-default-feature\"><code class=\"hljs\">default</code> features</a> can be disabled using\n<code class=\"hljs\">default-features = false</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">flate2</span> = { version = <span class=\"hljs-string\">\"1.0.3\"</span>, default-features = <span class=\"hljs-literal\">false</span>, features = [<span class=\"hljs-string\">\"zlib\"</span>] }\n</code></pre>\n<blockquote>\n<p><strong>Note</strong>: This may not ensure the default features are disabled. If another\ndependency includes <code class=\"hljs\">flate2</code> without specifying <code class=\"hljs\">default-features = false</code>,\nthen the default features will be enabled. See <a href=\"#feature-unification\">feature\nunification</a> below for more details.</p>\n</blockquote>\n<p>Features of dependencies can also be enabled in the <code class=\"hljs\">[features]</code> table. The\nsyntax is <code class=\"hljs\">\"package-name/feature-name\"</code>. For example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">jpeg-decoder</span> = { version = <span class=\"hljs-string\">\"0.1.20\"</span>, default-features = <span class=\"hljs-literal\">false</span> }\n\n<span class=\"hljs-section\">[features]</span>\n<span class=\"hljs-comment\"># Enables parallel processing support by enabling the \"rayon\" feature of jpeg-decoder.</span>\n<span class=\"hljs-attr\">parallel</span> = [<span class=\"hljs-string\">\"jpeg-decoder/rayon\"</span>]\n</code></pre>\n<p>The <code class=\"hljs\">\"package-name/feature-name\"</code> syntax will also enable <code class=\"hljs\">package-name</code>\nif it is an optional dependency. Often this is not what you want.\nYou can add a <code class=\"hljs\">?</code> as in <code class=\"hljs\">\"package-name?/feature-name\"</code> which will only enable\nthe given feature if something else enables the optional dependency.</p>\n<blockquote>\n<p><strong>Note</strong>: The <code class=\"hljs\">?</code> syntax is only available starting with Rust 1.60.</p>\n</blockquote>\n<p>For example, let’s say we have added some serialization support to our\nlibrary, and it requires enabling a corresponding feature in some optional\ndependencies.\nThat can be done like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">serde</span> = { version = <span class=\"hljs-string\">\"1.0.133\"</span>, optional = <span class=\"hljs-literal\">true</span> }\n<span class=\"hljs-attr\">rgb</span> = { version = <span class=\"hljs-string\">\"0.8.25\"</span>, optional = <span class=\"hljs-literal\">true</span> }\n\n<span class=\"hljs-section\">[features]</span>\n<span class=\"hljs-attr\">serde</span> = [<span class=\"hljs-string\">\"dep:serde\"</span>, <span class=\"hljs-string\">\"rgb?/serde\"</span>]\n</code></pre>\n<p>In this example, enabling the <code class=\"hljs\">serde</code> feature will enable the serde\ndependency.\nIt will also enable the <code class=\"hljs\">serde</code> feature for the <code class=\"hljs\">rgb</code> dependency, but only if\nsomething else has enabled the <code class=\"hljs\">rgb</code> dependency.</p>\n<h2 id=\"command-line-feature-options\"><a class=\"header\" href=\"#command-line-feature-options\">Command-line feature options</a></h2>\n<p>The following command-line flags can be used to control which features are\nenabled:</p>\n<ul>\n<li>\n<p><code class=\"hljs\">--features</code> <em>FEATURES</em>: Enables the listed features. Multiple features may\nbe separated with commas or spaces. If using spaces, be sure to use quotes\naround all the features if running Cargo from a shell (such as <code class=\"hljs\">--features \"foo bar\"</code>). If building multiple packages in a <a href=\"workspaces.html\">workspace</a>, the\n<code class=\"hljs\">package-name/feature-name</code> syntax can be used to specify features for\nspecific workspace members.</p>\n</li>\n<li>\n<p><code class=\"hljs\">--all-features</code>: Activates all features of all packages selected on the\ncommand-line.</p>\n</li>\n<li>\n<p><code class=\"hljs\">--no-default-features</code>: Does not activate the <a href=\"#the-default-feature\"><code class=\"hljs\">default</code>\nfeature</a> of the selected packages.</p>\n</li>\n</ul>\n<h2 id=\"feature-unification\"><a class=\"header\" href=\"#feature-unification\">Feature unification</a></h2>\n<p>Features are unique to the package that defines them. Enabling a feature on a\npackage does not enable a feature of the same name on other packages.</p>\n<p>When a dependency is used by multiple packages, Cargo will use the union of\nall features enabled on that dependency when building it. This helps ensure\nthat only a single copy of the dependency is used. See the <a href=\"resolver.html#features\">features section</a>\nof the resolver documentation for more details.</p>\n<p>For example, let’s look at the <a href=\"https://crates.io/crates/winapi\"><code class=\"hljs\">winapi</code></a> package which uses a <a href=\"https://github.com/retep998/winapi-rs/blob/0.3.9/Cargo.toml#L25-L431\">large\nnumber</a> of features. If your package depends on a package\n<code class=\"hljs\">foo</code> which enables the “fileapi” and “handleapi” features of <code class=\"hljs\">winapi</code>, and\nanother dependency <code class=\"hljs\">bar</code> which enables the “std” and “winnt” features of\n<code class=\"hljs\">winapi</code>, then <code class=\"hljs\">winapi</code> will be built with all four of those features enabled.</p>\n<p><img src=\"../images/winapi-features.svg\" alt=\"winapi features example\"></p>\n<p>A consequence of this is that features should be <em>additive</em>. That is, enabling\na feature should not disable functionality, and it should usually be safe to\nenable any combination of features. A feature should not introduce a\n<a href=\"#semver-compatibility\">SemVer-incompatible change</a>.</p>\n<p>For example, if you want to optionally support <a href=\"../../reference/names/preludes.html#the-no_std-attribute\"><code class=\"hljs\">no_std</code></a> environments, <strong>do\nnot</strong> use a <code class=\"hljs\">no_std</code> feature. Instead, use a <code class=\"hljs\">std</code> feature that <em>enables</em>\n<code class=\"hljs\">std</code>. For example:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"hljs-meta\">#![no_std]</span>\n\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-meta\">#[cfg(feature = <span class=\"hljs-meta-string\">\"std\"</span>)]</span>\n<span class=\"hljs-keyword\">extern</span> <span class=\"hljs-keyword\">crate</span> std;\n\n<span class=\"hljs-meta\">#[cfg(feature = <span class=\"hljs-meta-string\">\"std\"</span>)]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">function_that_requires_std</span></span>() {\n    <span class=\"hljs-comment\">// ...</span>\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<h3 id=\"mutually-exclusive-features\"><a class=\"header\" href=\"#mutually-exclusive-features\">Mutually exclusive features</a></h3>\n<p>There are rare cases where features may be mutually incompatible with one\nanother. This should be avoided if at all possible, because it requires\ncoordinating all uses of the package in the dependency graph to cooperate to\navoid enabling them together. If it is not possible, consider adding a compile\nerror to detect this scenario. For example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-meta\">#[cfg(all(feature = <span class=\"hljs-meta-string\">\"foo\"</span>, feature = <span class=\"hljs-meta-string\">\"bar\"</span>))]</span>\ncompile_error!(<span class=\"hljs-string\">\"feature \\\"foo\\\" and feature \\\"bar\\\" cannot be enabled at the same time\"</span>);</code></pre>\n<p>Instead of using mutually exclusive features, consider some other options:</p>\n<ul>\n<li>Split the functionality into separate packages.</li>\n<li>When there is a conflict, <a href=\"features-examples.html#feature-precedence\">choose one feature over\nanother</a>. The <a href=\"https://crates.io/crates/cfg-if\"><code class=\"hljs\">cfg-if</code></a> package can help with writing\nmore complex <code class=\"hljs\">cfg</code> expressions.</li>\n<li>Architect the code to allow the features to be enabled concurrently, and use\nruntime options to control which is used. For example, use a config file,\ncommand-line argument, or environment variable to choose which behavior to\nenable.</li>\n</ul>\n<h3 id=\"inspecting-resolved-features\"><a class=\"header\" href=\"#inspecting-resolved-features\">Inspecting resolved features</a></h3>\n<p>In complex dependency graphs, it can sometimes be difficult to understand how\ndifferent features get enabled on various packages. The <a href=\"../commands/cargo-tree.html\"><code class=\"hljs\">cargo tree</code></a> command\noffers several options to help inspect and visualize which features are\nenabled. Some options to try:</p>\n<ul>\n<li><code class=\"hljs\">cargo tree -e features</code>: This will show features in the dependency graph.\nEach feature will appear showing which package enabled it.</li>\n<li><code class=\"hljs\">cargo tree -f \"{p} {f}\"</code>: This is a more compact view that shows a\ncomma-separated list of features enabled on each package.</li>\n<li><code class=\"hljs\">cargo tree -e features -i foo</code>: This will invert the tree, showing how\nfeatures flow into the given package “foo”. This can be useful because\nviewing the entire graph can be quite large and overwhelming. Use this when\nyou are trying to figure out which features are enabled on a specific\npackage and why. See the example at the bottom of the <a href=\"../commands/cargo-tree.html\"><code class=\"hljs\">cargo tree</code></a> page on\nhow to read this.</li>\n</ul>\n<h2 id=\"feature-resolver-version-2\"><a class=\"header\" href=\"#feature-resolver-version-2\">Feature resolver version 2</a></h2>\n<p>A different feature resolver can be specified with the <code class=\"hljs\">resolver</code> field in\n<code class=\"hljs\">Cargo.toml</code>, like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"my-package\"</span>\n<span class=\"hljs-attr\">version</span> = <span class=\"hljs-string\">\"1.0.0\"</span>\n<span class=\"hljs-attr\">resolver</span> = <span class=\"hljs-string\">\"2\"</span>\n</code></pre>\n<p>See the <a href=\"resolver.html#resolver-versions\">resolver versions</a> section for more detail on specifying resolver\nversions.</p>\n<p>The version <code class=\"hljs\">\"2\"</code> resolver avoids unifying features in a few situations where\nthat unification can be unwanted. The exact situations are described in the\n<a href=\"resolver.html#feature-resolver-version-2\">resolver chapter</a>, but in short, it avoids unifying in these\nsituations:</p>\n<ul>\n<li>Features enabled on <a href=\"specifying-dependencies.html#platform-specific-dependencies\">platform-specific dependencies</a> for targets not\ncurrently being built are ignored.</li>\n<li><a href=\"specifying-dependencies.html#build-dependencies\">Build-dependencies</a> and proc-macros do not share features with normal\ndependencies.</li>\n<li><a href=\"specifying-dependencies.html#development-dependencies\">Dev-dependencies</a> do not activate features unless building a target that\nneeds them (like tests or examples).</li>\n</ul>\n<p>Avoiding the unification is necessary for some situations. For example, if a\nbuild-dependency enables a <code class=\"hljs\">std</code> feature, and the same dependency is used as a\nnormal dependency for a <code class=\"hljs\">no_std</code> environment, enabling <code class=\"hljs\">std</code> would break the\nbuild.</p>\n<p>However, one drawback is that this can increase build times because the\ndependency is built multiple times (each with different features). When using\nthe version <code class=\"hljs\">\"2\"</code> resolver, it is recommended to check for dependencies that\nare built multiple times to reduce overall build time. If it is not <em>required</em>\nto build those duplicated packages with separate features, consider adding\nfeatures to the <code class=\"hljs\">features</code> list in the <a href=\"#dependency-features\">dependency\ndeclaration</a> so that the duplicates end up with the same\nfeatures (and thus Cargo will build it only once). You can detect these\nduplicate dependencies with the <a href=\"../commands/cargo-tree.html\"><code class=\"hljs\">cargo tree --duplicates</code></a>\ncommand. It will show which packages are built multiple times; look for any\nentries listed with the same version. See <a href=\"#inspecting-resolved-features\">Inspecting resolved\nfeatures</a> for more on fetching information on\nthe resolved features. For build dependencies, this is not necessary if you\nare cross-compiling with the <code class=\"hljs\">--target</code> flag because build dependencies are\nalways built separately from normal dependencies in that scenario.</p>\n<h3 id=\"resolver-version-2-command-line-flags\"><a class=\"header\" href=\"#resolver-version-2-command-line-flags\">Resolver version 2 command-line flags</a></h3>\n<p>The <code class=\"hljs\">resolver = \"2\"</code> setting also changes the behavior of the <code class=\"hljs\">--features</code> and\n<code class=\"hljs\">--no-default-features</code> <a href=\"#command-line-feature-options\">command-line options</a>.</p>\n<p>With version <code class=\"hljs\">\"1\"</code>, you can only enable features for the package in the\ncurrent working directory. For example, in a workspace with packages <code class=\"hljs\">foo</code> and\n<code class=\"hljs\">bar</code>, and you are in the directory for package <code class=\"hljs\">foo</code>, and ran the command\n<code class=\"hljs\">cargo build -p bar --features bar-feat</code>, this would fail because the\n<code class=\"hljs\">--features</code> flag only allowed enabling features on <code class=\"hljs\">foo</code>.</p>\n<p>With <code class=\"hljs\">resolver = \"2\"</code>, the features flags allow enabling features for any of\nthe packages selected on the command-line with <code class=\"hljs\">-p</code> and <code class=\"hljs\">--workspace</code> flags.\nFor example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-sh hljs bash\"><span class=\"hljs-comment\"># This command is allowed with resolver = \"2\", regardless of which directory</span>\n<span class=\"hljs-comment\"># you are in.</span>\ncargo build -p foo -p bar --features foo-feat,bar-feat\n\n<span class=\"hljs-comment\"># This explicit equivalent works with any resolver version:</span>\ncargo build -p foo -p bar --features foo/foo-feat,bar/bar-feat\n</code></pre>\n<p>Additionally, with <code class=\"hljs\">resolver = \"1\"</code>, the <code class=\"hljs\">--no-default-features</code> flag only\ndisables the default feature for the package in the current directory. With\nversion “2”, it will disable the default features for all workspace members.</p>\n<h2 id=\"build-scripts\"><a class=\"header\" href=\"#build-scripts\">Build scripts</a></h2>\n<p><a href=\"build-scripts.html\">Build scripts</a> can detect which features are enabled on the package by\ninspecting the <code class=\"hljs\">CARGO_FEATURE_&lt;name&gt;</code> environment variable, where <code class=\"hljs\">&lt;name&gt;</code> is\nthe feature name converted to uppercase and <code class=\"hljs\">-</code> converted to <code class=\"hljs\">_</code>.</p>\n<h2 id=\"required-features\"><a class=\"header\" href=\"#required-features\">Required features</a></h2>\n<p>The <a href=\"cargo-targets.html#the-required-features-field\"><code class=\"hljs\">required-features</code> field</a> can be used to disable specific <a href=\"cargo-targets.html\">Cargo\ntargets</a> if a feature is not enabled. See the linked documentation for more\ndetails.</p>\n<h2 id=\"semver-compatibility\"><a class=\"header\" href=\"#semver-compatibility\">SemVer compatibility</a></h2>\n<p>Enabling a feature should not introduce a SemVer-incompatible change. For\nexample, the feature shouldn’t change an existing API in a way that could\nbreak existing uses. More details about what changes are compatible can be\nfound in the <a href=\"semver.html\">SemVer Compatibility chapter</a>.</p>\n<p>Care should be taken when adding and removing feature definitions and optional\ndependencies, as these can sometimes be backwards-incompatible changes. More\ndetails can be found in the <a href=\"semver.html#cargo\">Cargo section</a> of the SemVer\nCompatibility chapter. In short, follow these rules:</p>\n<ul>\n<li>The following is usually safe to do in a minor release:\n<ul>\n<li>Add a <a href=\"semver.html#cargo-feature-add\">new feature</a> or <a href=\"semver.html#cargo-dep-add\">optional dependency</a>.</li>\n<li><a href=\"semver.html#cargo-change-dep-feature\">Change the features used on a dependency</a>.</li>\n</ul>\n</li>\n<li>The following should usually <strong>not</strong> be done in a minor release:\n<ul>\n<li><a href=\"semver.html#cargo-feature-remove\">Remove a feature</a> or <a href=\"semver.html#cargo-remove-opt-dep\">optional dependency</a>.</li>\n<li><a href=\"semver.html#item-remove\">Moving existing public code behind a feature</a>.</li>\n<li><a href=\"semver.html#cargo-feature-remove-another\">Remove a feature from a feature list</a>.</li>\n</ul>\n</li>\n</ul>\n<p>See the links for caveats and examples.</p>\n<h2 id=\"feature-documentation-and-discovery\"><a class=\"header\" href=\"#feature-documentation-and-discovery\">Feature documentation and discovery</a></h2>\n<p>You are encouraged to document which features are available in your package.\nThis can be done by adding <a href=\"../../rustdoc/how-to-write-documentation.html\">doc comments</a> at the top of <code class=\"hljs\">lib.rs</code>. As an\nexample, see the <a href=\"https://github.com/rust-lang/regex/blob/1.4.2/src/lib.rs#L488-L583\">regex crate source</a>, which when rendered can be viewed on\n<a href=\"https://docs.rs/regex/1.4.2/regex/#crate-features\">docs.rs</a>. If you have other documentation, such as a user\nguide, consider adding the documentation there (for example, see <a href=\"https://serde.rs/feature-flags.html\">serde.rs</a>).\nIf you have a binary project, consider documenting the features in the README\nor other documentation for the project (for example, see <a href=\"https://github.com/mozilla/sccache/blob/0.2.13/README.md#build-requirements\">sccache</a>).</p>\n<p>Clearly documenting the features can set expectations about features that are\nconsidered “unstable” or otherwise shouldn’t be used. For example, if there is\nan optional dependency, but you don’t want users to explicitly list that\noptional dependency as a feature, exclude it from the documented list.</p>\n<p>Documentation published on <a href=\"https://docs.rs/\">docs.rs</a> can use metadata in <code class=\"hljs\">Cargo.toml</code> to\ncontrol which features are enabled when the documentation is built. See\n<a href=\"https://docs.rs/about/metadata\">docs.rs metadata documentation</a> for more details.</p>\n<blockquote>\n<p><strong>Note</strong>: Rustdoc has experimental support for annotating the documentation\nto indicate which features are required to use certain APIs. See the\n<a href=\"../../unstable-book/language-features/doc-cfg.html\"><code class=\"hljs\">doc_cfg</code></a> documentation for more details. An example is the <a href=\"https://docs.rs/syn/1.0.54/syn/#modules\"><code class=\"hljs\">syn</code>\ndocumentation</a>, where you can see colored boxes which note which features\nare required to use it.</p>\n</blockquote>\n<h3 id=\"discovering-features\"><a class=\"header\" href=\"#discovering-features\">Discovering features</a></h3>\n<p>When features are documented in the library API, this can make it easier for\nyour users to discover which features are available and what they do. If the\nfeature documentation for a package isn’t readily available, you can look at\nthe <code class=\"hljs\">Cargo.toml</code> file, but sometimes it can be hard to track it down. The\ncrate page on <a href=\"https://crates.io/\">crates.io</a> has a link to the source repository if available.\nTools like <a href=\"../commands/cargo-vendor.html\"><code class=\"hljs\">cargo vendor</code></a> or <a href=\"https://crates.io/crates/cargo-clone-crate\">cargo-clone-crate</a> can be used to download the\nsource and inspect it.</p>\n<h2 id=\"feature-combinations\"><a class=\"header\" href=\"#feature-combinations\">Feature combinations</a></h2>\n<p>Because features are a form of conditional compilation, they require an exponential number of configurations and test cases to be 100% covered. By default, tests, docs, and other tooling such as <a href=\"https://github.com/rust-lang/rust-clippy\">Clippy</a> will only run with the default set of features.</p>\n<p>We encourage you to consider your strategy and tooling in regards to different feature combinations — Every project will have different requirements in conjunction with time, resources, and the cost-benefit of covering specific scenarios. Common configurations may be with / without default features, specific combinations of features, or all combinations of features.</p>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n                            <a rel=\"prev\" href=\"../reference/workspaces.html\" class=\"mobile-nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                                <i class=\"fa fa-angle-left\"></i>\n                            </a>\n\n                            <a rel=\"next prefetch\" href=\"../reference/features-examples.html\" class=\"mobile-nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                                <i class=\"fa fa-angle-right\"></i>\n                            </a>\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n                    <a rel=\"prev\" href=\"../reference/workspaces.html\" class=\"nav-chapters previous\" title=\"Previous chapter\" aria-label=\"Previous chapter\" aria-keyshortcuts=\"Left\">\n                        <i class=\"fa fa-angle-left\"></i>\n                    </a>\n\n                    <a rel=\"next prefetch\" href=\"../reference/features-examples.html\" class=\"nav-chapters next\" title=\"Next chapter\" aria-label=\"Next chapter\" aria-keyshortcuts=\"Right\">\n                        <i class=\"fa fa-angle-right\"></i>\n                    </a>\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"../elasticlunr.min.js\"></script>\n        <script src=\"../mark.min.js\"></script>\n        <script src=\"../searcher.js\"></script>\n\n        <script src=\"../clipboard.min.js\"></script>\n        <script src=\"../highlight.js\"></script>\n        <script src=\"../book.js\"></script>\n\n        <!-- Custom JS scripts -->\n\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:09:21.548Z"
}