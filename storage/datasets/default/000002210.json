{
	"title": "read in std::fs - Rust",
	"url": "https://doc.rust-lang.org/stable/std/fs/fn.read.html",
	"markdown": "# read in std::fs - Rust\n\n## Function [std](../index.html)::[fs](index.html)::[read](#)\n\n1.26.0 · [source](about:blank/src/std/fs.rs.html#259-269) ·\n\n```\npub fn read<P: AsRef<Path>>(path: P) -> Result<Vec<u8>>\n```\n\nExpand description\n\nRead the entire contents of a file into a bytes vector.\n\nThis is a convenience function for using [`File::open`](about:blank/struct.File.html#method.open \"associated function std::fs::File::open\") and [`read_to_end`](about:blank/io/trait.Read.html#method.read_to_end \"method std::io::Read::read_to_end\") with fewer imports and without an intermediate variable.\n\n## [§](#errors)Errors\n\nThis function will return an error if `path` does not already exist. Other errors may also be returned according to [`OpenOptions::open`](about:blank/struct.OpenOptions.html#method.open \"method std::fs::OpenOptions::open\").\n\nWhile reading from the file, this function handles [`io::ErrorKind::Interrupted`](about:blank/io/enum.ErrorKind.html#variant.Interrupted \"variant std::io::ErrorKind::Interrupted\") with automatic retries. See [io::Read](../io/trait.Read.html \"trait std::io::Read\") documentation for details.\n\n## [§](#examples)Examples\n\n```\nuse std::fs;\n\nfn main() -> Result<(), Box<dyn std::error::Error + 'static>> {\n    let data: Vec<u8> = fs::read(\"image.jpg\")?;\n    assert_eq!(data[0..3], [0xFF, 0xD8, 0xFF]);\n    Ok(())\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0A%0Afn+main()+-%3E+Result%3C(),+Box%3Cdyn+std::error::Error+%2B+%27static%3E%3E+%7B%0A++++let+data:+Vec%3Cu8%3E+=+fs::read(%22image.jpg%22)?;%0A++++assert_eq!(data%5B0..3%5D,+%5B0xFF,+0xD8,+0xFF%5D);%0A++++Ok(())%0A%7D&edition=2021)",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Read the entire contents of a file into a bytes vector.\"><title>read in std::fs - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc fn\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><div class=\"sidebar-elems\"><h2><a href=\"index.html\">In std::fs</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.DirBuilder.html\">DirBuilder</a></li><li><a href=\"struct.DirEntry.html\">DirEntry</a></li><li><a href=\"struct.File.html\">File</a></li><li><a href=\"struct.FileTimes.html\">FileTimes</a></li><li><a href=\"struct.FileType.html\">FileType</a></li><li><a href=\"struct.Metadata.html\">Metadata</a></li><li><a href=\"struct.OpenOptions.html\">OpenOptions</a></li><li><a href=\"struct.Permissions.html\">Permissions</a></li><li><a href=\"struct.ReadDir.html\">ReadDir</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.canonicalize.html\">canonicalize</a></li><li><a href=\"fn.copy.html\">copy</a></li><li><a href=\"fn.create_dir.html\">create_dir</a></li><li><a href=\"fn.create_dir_all.html\">create_dir_all</a></li><li><a href=\"fn.hard_link.html\">hard_link</a></li><li><a href=\"fn.metadata.html\">metadata</a></li><li><a href=\"fn.read.html\">read</a></li><li><a href=\"fn.read_dir.html\">read_dir</a></li><li><a href=\"fn.read_link.html\">read_link</a></li><li><a href=\"fn.read_to_string.html\">read_to_string</a></li><li><a href=\"fn.remove_dir.html\">remove_dir</a></li><li><a href=\"fn.remove_dir_all.html\">remove_dir_all</a></li><li><a href=\"fn.remove_file.html\">remove_file</a></li><li><a href=\"fn.rename.html\">rename</a></li><li><a href=\"fn.set_permissions.html\">set_permissions</a></li><li><a href=\"fn.soft_link.html\">soft_link</a></li><li><a href=\"fn.symlink_metadata.html\">symlink_metadata</a></li><li><a href=\"fn.try_exists.html\">try_exists</a></li><li><a href=\"fn.write.html\">write</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Function <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">fs</a>::<wbr><a class=\"fn\" href=\"#\">read</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.26.0\">1.26.0</span> · <a class=\"src\" href=\"../../src/std/fs.rs.html#259-269\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub fn read&lt;P: <a class=\"trait\" href=\"../convert/trait.AsRef.html\" title=\"trait std::convert::AsRef\">AsRef</a>&lt;<a class=\"struct\" href=\"../path/struct.Path.html\" title=\"struct std::path::Path\">Path</a>&gt;&gt;(path: P) -&gt; <a class=\"type\" href=\"../io/type.Result.html\" title=\"type std::io::Result\">Result</a>&lt;<a class=\"struct\" href=\"../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;&gt;</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Read the entire contents of a file into a bytes vector.</p>\n<p>This is a convenience function for using <a href=\"struct.File.html#method.open\" title=\"associated function std::fs::File::open\"><code>File::open</code></a> and <a href=\"../io/trait.Read.html#method.read_to_end\" title=\"method std::io::Read::read_to_end\"><code>read_to_end</code></a>\nwith fewer imports and without an intermediate variable.</p>\n<h2 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h2>\n<p>This function will return an error if <code>path</code> does not already exist.\nOther errors may also be returned according to <a href=\"struct.OpenOptions.html#method.open\" title=\"method std::fs::OpenOptions::open\"><code>OpenOptions::open</code></a>.</p>\n<p>While reading from the file, this function handles <a href=\"../io/enum.ErrorKind.html#variant.Interrupted\" title=\"variant std::io::ErrorKind::Interrupted\"><code>io::ErrorKind::Interrupted</code></a>\nwith automatic retries. See <a href=\"../io/trait.Read.html\" title=\"trait std::io::Read\">io::Read</a> documentation for details.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h2>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fs;\n\n<span class=\"kw\">fn </span>main() -&gt; <span class=\"prelude-ty\">Result</span>&lt;(), Box&lt;<span class=\"kw\">dyn </span>std::error::Error + <span class=\"lifetime\">'static</span>&gt;&gt; {\n    <span class=\"kw\">let </span>data: Vec&lt;u8&gt; = fs::read(<span class=\"string\">\"image.jpg\"</span>)<span class=\"question-mark\">?</span>;\n    <span class=\"macro\">assert_eq!</span>(data[<span class=\"number\">0</span>..<span class=\"number\">3</span>], [<span class=\"number\">0xFF</span>, <span class=\"number\">0xD8</span>, <span class=\"number\">0xFF</span>]);\n    <span class=\"prelude-val\">Ok</span>(())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::fs;%0A%0Afn+main()+-%3E+Result%3C(),+Box%3Cdyn+std::error::Error+%2B+'static%3E%3E+%7B%0A++++let+data:+Vec%3Cu8%3E+=+fs::read(%22image.jpg%22)?;%0A++++assert_eq!(data%5B0..3%5D,+%5B0xFF,+0xD8,+0xFF%5D);%0A++++Ok(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:23:13.858Z"
}