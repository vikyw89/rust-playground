{
	"title": "OnceLock in std::sync - Rust",
	"url": "https://doc.rust-lang.org/stable/std/sync/struct.OnceLock.html",
	"markdown": "# OnceLock in std::sync - Rust\n\n## Struct [std](../index.html)::[sync](index.html)::[OnceLock](#)\n\n1.70.0 ¬∑ [source](about:blank/src/std/sync/once_lock.rs.html#96-118) ¬∑\n\n```\npub struct OnceLock<T> { /* private fields */ }\n```\n\nExpand description\n\nA synchronization primitive which can nominally be written to only once.\n\nThis type is a thread-safe [`OnceCell`](../cell/struct.OnceCell.html \"struct std::cell::OnceCell\"), and can be used in statics. In many simple cases, you can use [`LazyLock<T, F>`](struct.LazyLock.html \"struct std::sync::LazyLock\") instead to get the benefits of this type with less effort: `LazyLock<T, F>` ‚Äúlooks like‚Äù `&T` because it initializes with `F` on deref! Where OnceLock shines is when LazyLock is too simple to support a given case, as LazyLock doesn‚Äôt allow additional inputs to its function after you call [`LazyLock::new(|| ...)`](about:blank/struct.LazyLock.html#method.new \"associated function std::sync::LazyLock::new\").\n\n## [¬ß](#examples)Examples\n\nWriting to a `OnceLock` from a separate thread:\n\n```\nuse std::sync::OnceLock;\n\nstatic CELL: OnceLock<usize> = OnceLock::new();\n\n// `OnceLock` has not been written to yet.\nassert!(CELL.get().is_none());\n\n// Spawn a thread and write to `OnceLock`.\nstd::thread::spawn(|| {\n    let value = CELL.get_or_init(|| 12345);\n    assert_eq!(value, &12345);\n})\n.join()\n.unwrap();\n\n// `OnceLock` now contains the value.\nassert_eq!(\n    CELL.get(),\n    Some(&12345),\n);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::OnceLock;%0A++++%0A++++static+CELL:+OnceLock%3Cusize%3E+=+OnceLock::new();%0A++++%0A++++//+%60OnceLock%60+has+not+been+written+to+yet.%0A++++assert!(CELL.get().is_none());%0A++++%0A++++//+Spawn+a+thread+and+write+to+%60OnceLock%60.%0A++++std::thread::spawn(%7C%7C+%7B%0A++++++++let+value+=+CELL.get_or_init(%7C%7C+12345);%0A++++++++assert_eq!(value,+%2612345);%0A++++%7D)%0A++++.join()%0A++++.unwrap();%0A++++%0A++++//+%60OnceLock%60+now+contains+the+value.%0A++++assert_eq!(%0A++++++++CELL.get(),%0A++++++++Some(%2612345),%0A++++);%0A%7D&edition=2021)\n\nYou can use `OnceLock` to implement a type that requires ‚Äúappend-only‚Äù logic:\n\n```\nuse std::sync::{OnceLock, atomic::{AtomicU32, Ordering}};\nuse std::thread;\n\nstruct OnceList<T> {\n    data: OnceLock<T>,\n    next: OnceLock<Box<OnceList<T>>>,\n}\nimpl<T> OnceList<T> {\n    const fn new() -> OnceList<T> {\n        OnceList { data: OnceLock::new(), next: OnceLock::new() }\n    }\n    fn push(&self, value: T) {\n        // FIXME: this impl is concise, but is also slow for long lists or many threads.\n        // as an exercise, consider how you might improve on it while preserving the behavior\n        if let Err(value) = self.data.set(value) {\n            let next = self.next.get_or_init(|| Box::new(OnceList::new()));\n            next.push(value)\n        };\n    }\n    fn contains(&self, example: &T) -> bool\n    where\n        T: PartialEq,\n    {\n        self.data.get().map(|item| item == example).filter(|v| *v).unwrap_or_else(|| {\n            self.next.get().map(|next| next.contains(example)).unwrap_or(false)\n        })\n    }\n}\n\n// Let's exercise this new Sync append-only list by doing a little counting\nstatic LIST: OnceList<u32> = OnceList::new();\nstatic COUNTER: AtomicU32 = AtomicU32::new(0);\n\nlet vec = (0..thread::available_parallelism().unwrap().get()).map(|_| thread::spawn(|| {\n    while let i @ 0..=1000 = COUNTER.fetch_add(1, Ordering::Relaxed) {\n        LIST.push(i);\n    }\n})).collect::<Vec<thread::JoinHandle<_>>>();\nvec.into_iter().for_each(|handle| handle.join().unwrap());\n\nfor i in 0..=1000 {\n    assert!(LIST.contains(&i));\n}\n\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::%7BOnceLock,+atomic::%7BAtomicU32,+Ordering%7D%7D;%0A++++use+std::thread;%0A++++%0A++++struct+OnceList%3CT%3E+%7B%0A++++++++data:+OnceLock%3CT%3E,%0A++++++++next:+OnceLock%3CBox%3COnceList%3CT%3E%3E%3E,%0A++++%7D%0A++++impl%3CT%3E+OnceList%3CT%3E+%7B%0A++++++++const+fn+new()+-%3E+OnceList%3CT%3E+%7B%0A++++++++++++OnceList+%7B+data:+OnceLock::new(),+next:+OnceLock::new()+%7D%0A++++++++%7D%0A++++++++fn+push(%26self,+value:+T)+%7B%0A++++++++++++//+FIXME:+this+impl+is+concise,+but+is+also+slow+for+long+lists+or+many+threads.%0A++++++++++++//+as+an+exercise,+consider+how+you+might+improve+on+it+while+preserving+the+behavior%0A++++++++++++if+let+Err(value)+=+self.data.set(value)+%7B%0A++++++++++++++++let+next+=+self.next.get_or_init(%7C%7C+Box::new(OnceList::new()));%0A++++++++++++++++next.push(value)%0A++++++++++++%7D;%0A++++++++%7D%0A++++++++fn+contains(%26self,+example:+%26T)+-%3E+bool%0A++++++++where%0A++++++++++++T:+PartialEq,%0A++++++++%7B%0A++++++++++++self.data.get().map(%7Citem%7C+item+==+example).filter(%7Cv%7C+*v).unwrap_or_else(%7C%7C+%7B%0A++++++++++++++++self.next.get().map(%7Cnext%7C+next.contains(example)).unwrap_or(false)%0A++++++++++++%7D)%0A++++++++%7D%0A++++%7D%0A++++%0A++++//+Let%27s+exercise+this+new+Sync+append-only+list+by+doing+a+little+counting%0A++++static+LIST:+OnceList%3Cu32%3E+=+OnceList::new();%0A++++static+COUNTER:+AtomicU32+=+AtomicU32::new(0);%0A++++%0A++++let+vec+=+(0..thread::available_parallelism().unwrap().get()).map(%7C_%7C+thread::spawn(%7C%7C+%7B%0A++++++++while+let+i+%40+0..=1000+=+COUNTER.fetch_add(1,+Ordering::Relaxed)+%7B%0A++++++++++++LIST.push(i);%0A++++++++%7D%0A++++%7D)).collect::%3CVec%3Cthread::JoinHandle%3C_%3E%3E%3E();%0A++++vec.into_iter().for_each(%7Chandle%7C+handle.join().unwrap());%0A++++%0A++++for+i+in+0..=1000+%7B%0A++++++++assert!(LIST.contains(%26i));%0A++++%7D%0A%7D&edition=2021)\n\n[source](about:blank/src/std/sync/once_lock.rs.html#120-509)[¬ß](#impl-OnceLock%3CT%3E)\n\n1.70.0 (const: 1.70.0) ¬∑ [source](about:blank/src/std/sync/once_lock.rs.html#126-132)\n\nCreates a new empty cell.\n\n1.70.0 ¬∑ [source](about:blank/src/std/sync/once_lock.rs.html#140-147)\n\nGets the reference to the underlying value.\n\nReturns `None` if the cell is empty, or being initialized. This method never blocks.\n\n1.70.0 ¬∑ [source](about:blank/src/std/sync/once_lock.rs.html#154-161)\n\nGets the mutable reference to the underlying value.\n\nReturns `None` if the cell is empty. This method never blocks.\n\n1.70.0 ¬∑ [source](about:blank/src/std/sync/once_lock.rs.html#190-195)\n\nSets the contents of this cell to `value`.\n\nMay block if another thread is currently attempting to initialize the cell. The cell is guaranteed to contain a value when set returns, though not necessarily the one provided.\n\nReturns `Ok(())` if the cell‚Äôs value was set by this call.\n\n##### [¬ß](#examples-1)Examples\n\n```\nuse std::sync::OnceLock;\n\nstatic CELL: OnceLock<i32> = OnceLock::new();\n\nfn main() {\n    assert!(CELL.get().is_none());\n\n    std::thread::spawn(|| {\n        assert_eq!(CELL.set(92), Ok(()));\n    }).join().unwrap();\n\n    assert_eq!(CELL.set(62), Err(62));\n    assert_eq!(CELL.get(), Some(&92));\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::sync::OnceLock;%0A%0Astatic+CELL:+OnceLock%3Ci32%3E+=+OnceLock::new();%0A%0Afn+main()+%7B%0A++++assert!(CELL.get().is_none());%0A%0A++++std::thread::spawn(%7C%7C+%7B%0A++++++++assert_eq!(CELL.set(92),+Ok(()));%0A++++%7D).join().unwrap();%0A%0A++++assert_eq!(CELL.set(62),+Err(62));%0A++++assert_eq!(CELL.get(),+Some(%2692));%0A%7D&edition=2021)\n\n[source](about:blank/src/std/sync/once_lock.rs.html#227-234)\n\nüî¨This is a nightly-only experimental API. (`once_cell_try_insert`¬†[#116693](https://github.com/rust-lang/rust/issues/116693))\n\nSets the contents of this cell to `value` if the cell was empty, then returns a reference to it.\n\nMay block if another thread is currently attempting to initialize the cell. The cell is guaranteed to contain a value when set returns, though not necessarily the one provided.\n\nReturns `Ok(&value)` if the cell was empty and `Err(&current_value, value)` if it was full.\n\n##### [¬ß](#examples-2)Examples\n\n```\n#![feature(once_cell_try_insert)]\n\nuse std::sync::OnceLock;\n\nstatic CELL: OnceLock<i32> = OnceLock::new();\n\nfn main() {\n    assert!(CELL.get().is_none());\n\n    std::thread::spawn(|| {\n        assert_eq!(CELL.try_insert(92), Ok(&92));\n    }).join().unwrap();\n\n    assert_eq!(CELL.try_insert(62), Err((&92, 62)));\n    assert_eq!(CELL.get(), Some(&92));\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(once_cell_try_insert)%5D%0A%0Ause+std::sync::OnceLock;%0A%0Astatic+CELL:+OnceLock%3Ci32%3E+=+OnceLock::new();%0A%0Afn+main()+%7B%0A++++assert!(CELL.get().is_none());%0A%0A++++std::thread::spawn(%7C%7C+%7B%0A++++++++assert_eq!(CELL.try_insert(92),+Ok(%2692));%0A++++%7D).join().unwrap();%0A%0A++++assert_eq!(CELL.try_insert(62),+Err((%2692,+62)));%0A++++assert_eq!(CELL.get(),+Some(%2692));%0A%7D&version=nightly&edition=2021)\n\n1.70.0 ¬∑ [source](about:blank/src/std/sync/once_lock.rs.html#265-272)\n\nGets the contents of the cell, initializing it with `f` if the cell was empty.\n\nMany threads may call `get_or_init` concurrently with different initializing functions, but it is guaranteed that only one function will be executed.\n\n##### [¬ß](#panics)Panics\n\nIf `f` panics, the panic is propagated to the caller, and the cell remains uninitialized.\n\nIt is an error to reentrantly initialize the cell from `f`. The exact outcome is unspecified. Current implementation deadlocks, but this may be changed to a panic in the future.\n\n##### [¬ß](#examples-3)Examples\n\n```\nuse std::sync::OnceLock;\n\nlet cell = OnceLock::new();\nlet value = cell.get_or_init(|| 92);\nassert_eq!(value, &92);\nlet value = cell.get_or_init(|| unreachable!());\nassert_eq!(value, &92);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::OnceLock;%0A++++%0A++++let+cell+=+OnceLock::new();%0A++++let+value+=+cell.get_or_init(%7C%7C+92);%0A++++assert_eq!(value,+%2692);%0A++++let+value+=+cell.get_or_init(%7C%7C+unreachable!());%0A++++assert_eq!(value,+%2692);%0A%7D&edition=2021)\n\n[source](about:blank/src/std/sync/once_lock.rs.html#305-312)\n\nüî¨This is a nightly-only experimental API. (`once_cell_get_mut`¬†[#121641](https://github.com/rust-lang/rust/issues/121641))\n\nGets the mutable reference of the contents of the cell, initializing it with `f` if the cell was empty.\n\nMany threads may call `get_mut_or_init` concurrently with different initializing functions, but it is guaranteed that only one function will be executed.\n\n##### [¬ß](#panics-1)Panics\n\nIf `f` panics, the panic is propagated to the caller, and the cell remains uninitialized.\n\n##### [¬ß](#examples-4)Examples\n\n```\n#![feature(once_cell_get_mut)]\n\nuse std::sync::OnceLock;\n\nlet mut cell = OnceLock::new();\nlet value = cell.get_mut_or_init(|| 92);\nassert_eq!(*value, 92);\n\n*value += 2;\nassert_eq!(*value, 94);\n\nlet value = cell.get_mut_or_init(|| unreachable!());\nassert_eq!(*value, 94);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(once_cell_get_mut)%5D%0A%0Afn+main()+%7B%0A++++use+std::sync::OnceLock;%0A++++%0A++++let+mut+cell+=+OnceLock::new();%0A++++let+value+=+cell.get_mut_or_init(%7C%7C+92);%0A++++assert_eq!(*value,+92);%0A++++%0A++++*value+%2B=+2;%0A++++assert_eq!(*value,+94);%0A++++%0A++++let+value+=+cell.get_mut_or_init(%7C%7C+unreachable!());%0A++++assert_eq!(*value,+94);%0A%7D&version=nightly&edition=2021)\n\n[source](about:blank/src/std/sync/once_lock.rs.html#345-363)\n\nüî¨This is a nightly-only experimental API. (`once_cell_try`¬†[#109737](https://github.com/rust-lang/rust/issues/109737))\n\nGets the contents of the cell, initializing it with `f` if the cell was empty. If the cell was empty and `f` failed, an error is returned.\n\n##### [¬ß](#panics-2)Panics\n\nIf `f` panics, the panic is propagated to the caller, and the cell remains uninitialized.\n\nIt is an error to reentrantly initialize the cell from `f`. The exact outcome is unspecified. Current implementation deadlocks, but this may be changed to a panic in the future.\n\n##### [¬ß](#examples-5)Examples\n\n```\n#![feature(once_cell_try)]\n\nuse std::sync::OnceLock;\n\nlet cell = OnceLock::new();\nassert_eq!(cell.get_or_try_init(|| Err(())), Err(()));\nassert!(cell.get().is_none());\nlet value = cell.get_or_try_init(|| -> Result<i32, ()> {\n    Ok(92)\n});\nassert_eq!(value, Ok(&92));\nassert_eq!(cell.get(), Some(&92))\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(once_cell_try)%5D%0A%0Afn+main()+%7B%0A++++use+std::sync::OnceLock;%0A++++%0A++++let+cell+=+OnceLock::new();%0A++++assert_eq!(cell.get_or_try_init(%7C%7C+Err(())),+Err(()));%0A++++assert!(cell.get().is_none());%0A++++let+value+=+cell.get_or_try_init(%7C%7C+-%3E+Result%3Ci32,+()%3E+%7B%0A++++++++Ok(92)%0A++++%7D);%0A++++assert_eq!(value,+Ok(%2692));%0A++++assert_eq!(cell.get(),+Some(%2692))%0A%7D&version=nightly&edition=2021)\n\n[source](about:blank/src/std/sync/once_lock.rs.html#394-404)\n\nüî¨This is a nightly-only experimental API. (`once_cell_get_mut`¬†[#121641](https://github.com/rust-lang/rust/issues/121641))\n\nGets the mutable reference of the contents of the cell, initializing it with `f` if the cell was empty. If the cell was empty and `f` failed, an error is returned.\n\n##### [¬ß](#panics-3)Panics\n\nIf `f` panics, the panic is propagated to the caller, and the cell remains uninitialized.\n\n##### [¬ß](#examples-6)Examples\n\n```\n#![feature(once_cell_get_mut)]\n\nuse std::sync::OnceLock;\n\nlet mut cell: OnceLock<u32> = OnceLock::new();\n\n// Failed initializers do not change the value\nassert!(cell.get_mut_or_try_init(|| \"not a number!\".parse()).is_err());\nassert!(cell.get().is_none());\n\nlet value = cell.get_mut_or_try_init(|| \"1234\".parse());\nassert_eq!(value, Ok(&mut 1234));\n*value.unwrap() += 2;\nassert_eq!(cell.get(), Some(&1236))\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(once_cell_get_mut)%5D%0A%0Afn+main()+%7B%0A++++use+std::sync::OnceLock;%0A++++%0A++++let+mut+cell:+OnceLock%3Cu32%3E+=+OnceLock::new();%0A++++%0A++++//+Failed+initializers+do+not+change+the+value%0A++++assert!(cell.get_mut_or_try_init(%7C%7C+%22not+a+number!%22.parse()).is_err());%0A++++assert!(cell.get().is_none());%0A++++%0A++++let+value+=+cell.get_mut_or_try_init(%7C%7C+%221234%22.parse());%0A++++assert_eq!(value,+Ok(%26mut+1234));%0A++++*value.unwrap()+%2B=+2;%0A++++assert_eq!(cell.get(),+Some(%261236))%0A%7D&version=nightly&edition=2021)\n\n1.70.0 ¬∑ [source](about:blank/src/std/sync/once_lock.rs.html#423-425)\n\nConsumes the `OnceLock`, returning the wrapped value. Returns `None` if the cell was empty.\n\n##### [¬ß](#examples-7)Examples\n\n```\nuse std::sync::OnceLock;\n\nlet cell: OnceLock<String> = OnceLock::new();\nassert_eq!(cell.into_inner(), None);\n\nlet cell = OnceLock::new();\ncell.set(\"hello\".to_string()).unwrap();\nassert_eq!(cell.into_inner(), Some(\"hello\".to_string()));\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::OnceLock;%0A++++%0A++++let+cell:+OnceLock%3CString%3E+=+OnceLock::new();%0A++++assert_eq!(cell.into_inner(),+None);%0A++++%0A++++let+cell+=+OnceLock::new();%0A++++cell.set(%22hello%22.to_string()).unwrap();%0A++++assert_eq!(cell.into_inner(),+Some(%22hello%22.to_string()));%0A%7D&edition=2021)\n\n1.70.0 ¬∑ [source](about:blank/src/std/sync/once_lock.rs.html#448-458)\n\nTakes the value out of this `OnceLock`, moving it back to an uninitialized state.\n\nHas no effect and returns `None` if the `OnceLock` hasn‚Äôt been initialized.\n\nSafety is guaranteed by requiring a mutable reference.\n\n##### [¬ß](#examples-8)Examples\n\n```\nuse std::sync::OnceLock;\n\nlet mut cell: OnceLock<String> = OnceLock::new();\nassert_eq!(cell.take(), None);\n\nlet mut cell = OnceLock::new();\ncell.set(\"hello\".to_string()).unwrap();\nassert_eq!(cell.take(), Some(\"hello\".to_string()));\nassert_eq!(cell.get(), None);\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::OnceLock;%0A++++%0A++++let+mut+cell:+OnceLock%3CString%3E+=+OnceLock::new();%0A++++assert_eq!(cell.take(),+None);%0A++++%0A++++let+mut+cell+=+OnceLock::new();%0A++++cell.set(%22hello%22.to_string()).unwrap();%0A++++assert_eq!(cell.take(),+Some(%22hello%22.to_string()));%0A++++assert_eq!(cell.get(),+None);%0A%7D&edition=2021)\n\n1.70.0 ¬∑ [source](about:blank/src/std/sync/once_lock.rs.html#558-570)[¬ß](#impl-Clone-for-OnceLock%3CT%3E)\n\n1.70.0 ¬∑ [source](about:blank/src/std/sync/once_lock.rs.html#546-555)[¬ß](#impl-Debug-for-OnceLock%3CT%3E)\n\n1.70.0 ¬∑ [source](about:blank/src/std/sync/once_lock.rs.html#527-543)[¬ß](#impl-Default-for-OnceLock%3CT%3E)\n\n[source](about:blank/src/std/sync/once_lock.rs.html#540-542)[¬ß](#method.default)\n\nCreates a new empty cell.\n\n##### [¬ß](#example-1)Example\n\n```\nuse std::sync::OnceLock;\n\nfn main() {\n    assert_eq!(OnceLock::<()>::new(), OnceLock::default());\n}\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::sync::OnceLock;%0A%0Afn+main()+%7B%0A++++assert_eq!(OnceLock::%3C()%3E::new(),+OnceLock::default());%0A%7D&edition=2021)\n\n1.70.0 ¬∑ [source](about:blank/src/std/sync/once_lock.rs.html#611-621)[¬ß](#impl-Drop-for-OnceLock%3CT%3E)\n\n1.70.0 ¬∑ [source](about:blank/src/std/sync/once_lock.rs.html#573-597)[¬ß](#impl-From%3CT%3E-for-OnceLock%3CT%3E)\n\n[source](about:blank/src/std/sync/once_lock.rs.html#590-596)[¬ß](#method.from)\n\nCreate a new cell with its contents set to `value`.\n\n##### [¬ß](#example)Example\n\n```\nuse std::sync::OnceLock;\n\nlet a = OnceLock::from(3);\nlet b = OnceLock::new();\nb.set(3)?;\nassert_eq!(a, b);\nOk(())\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::sync::OnceLock;%0A%0Afn+main()+-%3E+Result%3C(),+i32%3E+%7B%0Alet+a+=+OnceLock::from(3);%0Alet+b+=+OnceLock::new();%0Ab.set(3)?;%0Aassert_eq!(a,+b);%0AOk(())%0A%7D&edition=2021)\n\n1.70.0 ¬∑ [source](about:blank/src/std/sync/once_lock.rs.html#600-605)[¬ß](#impl-PartialEq-for-OnceLock%3CT%3E)\n\n[source](about:blank/src/std/sync/once_lock.rs.html#602-604)[¬ß](#method.eq)\n\nThis method tests for `self` and `other` values to be equal, and is used by `==`.\n\n1.0.0 ¬∑ [source](https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263)[¬ß](#method.ne)\n\nThis method tests for `!=`. The default implementation is almost always sufficient, and should not be overridden without very good reason.\n\n1.70.0 ¬∑ [source](about:blank/src/std/sync/once_lock.rs.html#608)[¬ß](#impl-Eq-for-OnceLock%3CT%3E)\n\n1.70.0 ¬∑ [source](about:blank/src/std/sync/once_lock.rs.html#522)[¬ß](#impl-RefUnwindSafe-for-OnceLock%3CT%3E)\n\n1.70.0 ¬∑ [source](about:blank/src/std/sync/once_lock.rs.html#519)[¬ß](#impl-Send-for-OnceLock%3CT%3E)\n\n1.70.0 ¬∑ [source](about:blank/src/std/sync/once_lock.rs.html#517)[¬ß](#impl-Sync-for-OnceLock%3CT%3E)\n\n1.70.0 ¬∑ [source](about:blank/src/std/sync/once_lock.rs.html#524)[¬ß](#impl-UnwindSafe-for-OnceLock%3CT%3E)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140)[¬ß](#impl-Any-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208)[¬ß](#impl-Borrow%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216)[¬ß](#impl-BorrowMut%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#782)[¬ß](#impl-From%3C!%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#783)[¬ß](#method.from-1)\n\nConverts to this type from the input type.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765)[¬ß](#impl-From%3CT%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768)[¬ß](#method.from-2)\n\nReturns the argument unchanged.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750)[¬ß](#impl-Into%3CU%3E-for-T)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758)[¬ß](#method.into)\n\nCalls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of `[From](../convert/trait.From.html \"trait std::convert::From\")<T> for U` chooses to do.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85)[¬ß](#impl-ToOwned-for-T)\n\n[¬ß](#associatedtype.Owned)\n\nThe resulting type after obtaining ownership.\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88)[¬ß](#method.to_owned)\n\nCreates owned data from borrowed data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#tymethod.to_owned)\n\n[source](https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92)[¬ß](#method.clone_into)\n\nUses borrowed data to replace owned data, usually by cloning. [Read more](about:blank/borrow/trait.ToOwned.html#method.clone_into)\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807)[¬ß](#impl-TryFrom%3CU%3E-for-T)\n\n[¬ß](#associatedtype.Error-1)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812)[¬ß](#method.try_from)\n\nPerforms the conversion.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792)[¬ß](#impl-TryInto%3CU%3E-for-T)\n\n[¬ß](#associatedtype.Error)\n\nThe type returned in the event of a conversion error.\n\n[source](https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797)[¬ß](#method.try_into)\n\nPerforms the conversion.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"A synchronization primitive which can nominally be written to only once.\"><title>OnceLock in std::sync - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc struct\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">OnceLock</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">OnceLock</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#implementations\">Methods</a></h3><ul class=\"block method\"><li><a href=\"#method.get\">get</a></li><li><a href=\"#method.get_mut\">get_mut</a></li><li><a href=\"#method.get_mut_or_init\">get_mut_or_init</a></li><li><a href=\"#method.get_mut_or_try_init\">get_mut_or_try_init</a></li><li><a href=\"#method.get_or_init\">get_or_init</a></li><li><a href=\"#method.get_or_try_init\">get_or_try_init</a></li><li><a href=\"#method.into_inner\">into_inner</a></li><li><a href=\"#method.new\">new</a></li><li><a href=\"#method.set\">set</a></li><li><a href=\"#method.take\">take</a></li><li><a href=\"#method.try_insert\">try_insert</a></li></ul><h3><a href=\"#trait-implementations\">Trait Implementations</a></h3><ul class=\"block trait-implementation\"><li><a href=\"#impl-Clone-for-OnceLock%3CT%3E\">Clone</a></li><li><a href=\"#impl-Debug-for-OnceLock%3CT%3E\">Debug</a></li><li><a href=\"#impl-Default-for-OnceLock%3CT%3E\">Default</a></li><li><a href=\"#impl-Drop-for-OnceLock%3CT%3E\">Drop</a></li><li><a href=\"#impl-Eq-for-OnceLock%3CT%3E\">Eq</a></li><li><a href=\"#impl-From%3CT%3E-for-OnceLock%3CT%3E\">From&lt;T&gt;</a></li><li><a href=\"#impl-PartialEq-for-OnceLock%3CT%3E\">PartialEq</a></li><li><a href=\"#impl-RefUnwindSafe-for-OnceLock%3CT%3E\">RefUnwindSafe</a></li><li><a href=\"#impl-Send-for-OnceLock%3CT%3E\">Send</a></li><li><a href=\"#impl-Sync-for-OnceLock%3CT%3E\">Sync</a></li><li><a href=\"#impl-UnwindSafe-for-OnceLock%3CT%3E\">UnwindSafe</a></li></ul><h3><a href=\"#synthetic-implementations\">Auto Trait Implementations</a></h3><ul class=\"block synthetic-implementation\"><li><a href=\"#impl-Freeze-for-OnceLock%3CT%3E\">!Freeze</a></li><li><a href=\"#impl-Unpin-for-OnceLock%3CT%3E\">Unpin</a></li></ul><h3><a href=\"#blanket-implementations\">Blanket Implementations</a></h3><ul class=\"block blanket-implementation\"><li><a href=\"#impl-Any-for-T\">Any</a></li><li><a href=\"#impl-Borrow%3CT%3E-for-T\">Borrow&lt;T&gt;</a></li><li><a href=\"#impl-BorrowMut%3CT%3E-for-T\">BorrowMut&lt;T&gt;</a></li><li><a href=\"#impl-From%3C!%3E-for-T\">From&lt;!&gt;</a></li><li><a href=\"#impl-From%3CT%3E-for-T\">From&lt;T&gt;</a></li><li><a href=\"#impl-Into%3CU%3E-for-T\">Into&lt;U&gt;</a></li><li><a href=\"#impl-ToOwned-for-T\">ToOwned</a></li><li><a href=\"#impl-TryFrom%3CU%3E-for-T\">TryFrom&lt;U&gt;</a></li><li><a href=\"#impl-TryInto%3CU%3E-for-T\">TryInto&lt;U&gt;</a></li></ul></section><h2><a href=\"index.html\">In std::sync</a></h2><h3><a href=\"index.html#modules\">Modules</a></h3><ul class=\"block mod\"><li><a href=\"atomic/index.html\">atomic</a></li><li><a href=\"mpsc/index.html\">mpsc</a></li></ul><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.Arc.html\">Arc</a></li><li><a href=\"struct.Barrier.html\">Barrier</a></li><li><a href=\"struct.BarrierWaitResult.html\">BarrierWaitResult</a></li><li><a href=\"struct.Condvar.html\">Condvar</a></li><li><a href=\"struct.Exclusive.html\">Exclusive</a></li><li><a href=\"struct.LazyLock.html\">LazyLock</a></li><li><a href=\"struct.MappedMutexGuard.html\">MappedMutexGuard</a></li><li><a href=\"struct.MappedRwLockReadGuard.html\">MappedRwLockReadGuard</a></li><li><a href=\"struct.MappedRwLockWriteGuard.html\">MappedRwLockWriteGuard</a></li><li><a href=\"struct.Mutex.html\">Mutex</a></li><li><a href=\"struct.MutexGuard.html\">MutexGuard</a></li><li><a href=\"struct.Once.html\">Once</a></li><li><a href=\"struct.OnceLock.html\">OnceLock</a></li><li><a href=\"struct.OnceState.html\">OnceState</a></li><li><a href=\"struct.PoisonError.html\">PoisonError</a></li><li><a href=\"struct.ReentrantLock.html\">ReentrantLock</a></li><li><a href=\"struct.ReentrantLockGuard.html\">ReentrantLockGuard</a></li><li><a href=\"struct.RwLock.html\">RwLock</a></li><li><a href=\"struct.RwLockReadGuard.html\">RwLockReadGuard</a></li><li><a href=\"struct.RwLockWriteGuard.html\">RwLockWriteGuard</a></li><li><a href=\"struct.WaitTimeoutResult.html\">WaitTimeoutResult</a></li><li><a href=\"struct.Weak.html\">Weak</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.TryLockError.html\">TryLockError</a></li></ul><h3><a href=\"index.html#constants\">Constants</a></h3><ul class=\"block constant\"><li><a href=\"constant.ONCE_INIT.html\">ONCE_INIT</a></li></ul><h3><a href=\"index.html#types\">Type Aliases</a></h3><ul class=\"block type\"><li><a href=\"type.LockResult.html\">LockResult</a></li><li><a href=\"type.TryLockResult.html\">TryLockResult</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‚ÄòS‚Äô or ‚Äò/‚Äô to search, ‚Äò?‚Äô for more options‚Ä¶\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Struct <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">sync</a>::<wbr><a class=\"struct\" href=\"#\">OnceLock</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> ¬∑ <a class=\"src\" href=\"../../src/std/sync/once_lock.rs.html#96-118\">source</a> ¬∑ <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>‚àí</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub struct OnceLock&lt;T&gt; { <span class=\"comment\">/* private fields */</span> }</code></pre><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>A synchronization primitive which can nominally be written to only once.</p>\n<p>This type is a thread-safe <a href=\"../cell/struct.OnceCell.html\" title=\"struct std::cell::OnceCell\"><code>OnceCell</code></a>, and can be used in statics.\nIn many simple cases, you can use <a href=\"struct.LazyLock.html\" title=\"struct std::sync::LazyLock\"><code>LazyLock&lt;T, F&gt;</code></a> instead to get the benefits of this type\nwith less effort: <code>LazyLock&lt;T, F&gt;</code> ‚Äúlooks like‚Äù <code>&amp;T</code> because it initializes with <code>F</code> on deref!\nWhere OnceLock shines is when LazyLock is too simple to support a given case, as LazyLock\ndoesn‚Äôt allow additional inputs to its function after you call <a href=\"struct.LazyLock.html#method.new\" title=\"associated function std::sync::LazyLock::new\"><code>LazyLock::new(|| ...)</code></a>.</p>\n<h2 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">¬ß</a>Examples</h2>\n<p>Writing to a <code>OnceLock</code> from a separate thread:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::OnceLock;\n\n<span class=\"kw\">static </span>CELL: OnceLock&lt;usize&gt; = OnceLock::new();\n\n<span class=\"comment\">// `OnceLock` has not been written to yet.\n</span><span class=\"macro\">assert!</span>(CELL.get().is_none());\n\n<span class=\"comment\">// Spawn a thread and write to `OnceLock`.\n</span>std::thread::spawn(|| {\n    <span class=\"kw\">let </span>value = CELL.get_or_init(|| <span class=\"number\">12345</span>);\n    <span class=\"macro\">assert_eq!</span>(value, <span class=\"kw-2\">&amp;</span><span class=\"number\">12345</span>);\n})\n.join()\n.unwrap();\n\n<span class=\"comment\">// `OnceLock` now contains the value.\n</span><span class=\"macro\">assert_eq!</span>(\n    CELL.get(),\n    <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">12345</span>),\n);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::OnceLock;%0A++++%0A++++static+CELL:+OnceLock%3Cusize%3E+=+OnceLock::new();%0A++++%0A++++//+%60OnceLock%60+has+not+been+written+to+yet.%0A++++assert!(CELL.get().is_none());%0A++++%0A++++//+Spawn+a+thread+and+write+to+%60OnceLock%60.%0A++++std::thread::spawn(%7C%7C+%7B%0A++++++++let+value+=+CELL.get_or_init(%7C%7C+12345);%0A++++++++assert_eq!(value,+%2612345);%0A++++%7D)%0A++++.join()%0A++++.unwrap();%0A++++%0A++++//+%60OnceLock%60+now+contains+the+value.%0A++++assert_eq!(%0A++++++++CELL.get(),%0A++++++++Some(%2612345),%0A++++);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>You can use <code>OnceLock</code> to implement a type that requires ‚Äúappend-only‚Äù logic:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::{OnceLock, atomic::{AtomicU32, Ordering}};\n<span class=\"kw\">use </span>std::thread;\n\n<span class=\"kw\">struct </span>OnceList&lt;T&gt; {\n    data: OnceLock&lt;T&gt;,\n    next: OnceLock&lt;Box&lt;OnceList&lt;T&gt;&gt;&gt;,\n}\n<span class=\"kw\">impl</span>&lt;T&gt; OnceList&lt;T&gt; {\n    <span class=\"kw\">const fn </span>new() -&gt; OnceList&lt;T&gt; {\n        OnceList { data: OnceLock::new(), next: OnceLock::new() }\n    }\n    <span class=\"kw\">fn </span>push(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, value: T) {\n        <span class=\"comment\">// FIXME: this impl is concise, but is also slow for long lists or many threads.\n        // as an exercise, consider how you might improve on it while preserving the behavior\n        </span><span class=\"kw\">if let </span><span class=\"prelude-val\">Err</span>(value) = <span class=\"self\">self</span>.data.set(value) {\n            <span class=\"kw\">let </span>next = <span class=\"self\">self</span>.next.get_or_init(|| Box::new(OnceList::new()));\n            next.push(value)\n        };\n    }\n    <span class=\"kw\">fn </span>contains(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, example: <span class=\"kw-2\">&amp;</span>T) -&gt; bool\n    <span class=\"kw\">where\n        </span>T: PartialEq,\n    {\n        <span class=\"self\">self</span>.data.get().map(|item| item == example).filter(|v| <span class=\"kw-2\">*</span>v).unwrap_or_else(|| {\n            <span class=\"self\">self</span>.next.get().map(|next| next.contains(example)).unwrap_or(<span class=\"bool-val\">false</span>)\n        })\n    }\n}\n\n<span class=\"comment\">// Let's exercise this new Sync append-only list by doing a little counting\n</span><span class=\"kw\">static </span>LIST: OnceList&lt;u32&gt; = OnceList::new();\n<span class=\"kw\">static </span>COUNTER: AtomicU32 = AtomicU32::new(<span class=\"number\">0</span>);\n\n<span class=\"kw\">let </span>vec = (<span class=\"number\">0</span>..thread::available_parallelism().unwrap().get()).map(|<span class=\"kw\">_</span>| thread::spawn(|| {\n    <span class=\"kw\">while let </span>i @ <span class=\"number\">0</span>..=<span class=\"number\">1000 </span>= COUNTER.fetch_add(<span class=\"number\">1</span>, Ordering::Relaxed) {\n        LIST.push(i);\n    }\n})).collect::&lt;Vec&lt;thread::JoinHandle&lt;<span class=\"kw\">_</span>&gt;&gt;&gt;();\nvec.into_iter().for_each(|handle| handle.join().unwrap());\n\n<span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..=<span class=\"number\">1000 </span>{\n    <span class=\"macro\">assert!</span>(LIST.contains(<span class=\"kw-2\">&amp;</span>i));\n}\n</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::%7BOnceLock,+atomic::%7BAtomicU32,+Ordering%7D%7D;%0A++++use+std::thread;%0A++++%0A++++struct+OnceList%3CT%3E+%7B%0A++++++++data:+OnceLock%3CT%3E,%0A++++++++next:+OnceLock%3CBox%3COnceList%3CT%3E%3E%3E,%0A++++%7D%0A++++impl%3CT%3E+OnceList%3CT%3E+%7B%0A++++++++const+fn+new()+-%3E+OnceList%3CT%3E+%7B%0A++++++++++++OnceList+%7B+data:+OnceLock::new(),+next:+OnceLock::new()+%7D%0A++++++++%7D%0A++++++++fn+push(%26self,+value:+T)+%7B%0A++++++++++++//+FIXME:+this+impl+is+concise,+but+is+also+slow+for+long+lists+or+many+threads.%0A++++++++++++//+as+an+exercise,+consider+how+you+might+improve+on+it+while+preserving+the+behavior%0A++++++++++++if+let+Err(value)+=+self.data.set(value)+%7B%0A++++++++++++++++let+next+=+self.next.get_or_init(%7C%7C+Box::new(OnceList::new()));%0A++++++++++++++++next.push(value)%0A++++++++++++%7D;%0A++++++++%7D%0A++++++++fn+contains(%26self,+example:+%26T)+-%3E+bool%0A++++++++where%0A++++++++++++T:+PartialEq,%0A++++++++%7B%0A++++++++++++self.data.get().map(%7Citem%7C+item+==+example).filter(%7Cv%7C+*v).unwrap_or_else(%7C%7C+%7B%0A++++++++++++++++self.next.get().map(%7Cnext%7C+next.contains(example)).unwrap_or(false)%0A++++++++++++%7D)%0A++++++++%7D%0A++++%7D%0A++++%0A++++//+Let's+exercise+this+new+Sync+append-only+list+by+doing+a+little+counting%0A++++static+LIST:+OnceList%3Cu32%3E+=+OnceList::new();%0A++++static+COUNTER:+AtomicU32+=+AtomicU32::new(0);%0A++++%0A++++let+vec+=+(0..thread::available_parallelism().unwrap().get()).map(%7C_%7C+thread::spawn(%7C%7C+%7B%0A++++++++while+let+i+%40+0..=1000+=+COUNTER.fetch_add(1,+Ordering::Relaxed)+%7B%0A++++++++++++LIST.push(i);%0A++++++++%7D%0A++++%7D)).collect::%3CVec%3Cthread::JoinHandle%3C_%3E%3E%3E();%0A++++vec.into_iter().for_each(%7Chandle%7C+handle.join().unwrap());%0A++++%0A++++for+i+in+0..=1000+%7B%0A++++++++assert!(LIST.contains(%26i));%0A++++%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><h2 id=\"implementations\" class=\"section-header\">Implementations<a href=\"#implementations\" class=\"anchor\">¬ß</a></h2><div id=\"implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-OnceLock%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"../../src/std/sync/once_lock.rs.html#120-509\">source</a><a href=\"#impl-OnceLock%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"struct.OnceLock.html\" title=\"struct std::sync::OnceLock\">OnceLock</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.new\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0, const since 1.70.0\">1.70.0 (const: 1.70.0)</span> ¬∑ <a class=\"src\" href=\"../../src/std/sync/once_lock.rs.html#126-132\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"#method.new\" class=\"fn\">new</a>() -&gt; <a class=\"struct\" href=\"struct.OnceLock.html\" title=\"struct std::sync::OnceLock\">OnceLock</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new empty cell.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> ¬∑ <a class=\"src\" href=\"../../src/std/sync/once_lock.rs.html#140-147\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.get\" class=\"fn\">get</a>(&amp;self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Gets the reference to the underlying value.</p>\n<p>Returns <code>None</code> if the cell is empty, or being initialized. This\nmethod never blocks.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> ¬∑ <a class=\"src\" href=\"../../src/std/sync/once_lock.rs.html#154-161\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.get_mut\" class=\"fn\">get_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Gets the mutable reference to the underlying value.</p>\n<p>Returns <code>None</code> if the cell is empty. This method never blocks.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.set\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> ¬∑ <a class=\"src\" href=\"../../src/std/sync/once_lock.rs.html#190-195\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.set\" class=\"fn\">set</a>(&amp;self, value: T) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.unit.html\">()</a>, T&gt;</h4></section></summary><div class=\"docblock\"><p>Sets the contents of this cell to <code>value</code>.</p>\n<p>May block if another thread is currently attempting to initialize the cell. The cell is\nguaranteed to contain a value when set returns, though not necessarily the one provided.</p>\n<p>Returns <code>Ok(())</code> if the cell‚Äôs value was set by this call.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::OnceLock;\n\n<span class=\"kw\">static </span>CELL: OnceLock&lt;i32&gt; = OnceLock::new();\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"macro\">assert!</span>(CELL.get().is_none());\n\n    std::thread::spawn(|| {\n        <span class=\"macro\">assert_eq!</span>(CELL.set(<span class=\"number\">92</span>), <span class=\"prelude-val\">Ok</span>(()));\n    }).join().unwrap();\n\n    <span class=\"macro\">assert_eq!</span>(CELL.set(<span class=\"number\">62</span>), <span class=\"prelude-val\">Err</span>(<span class=\"number\">62</span>));\n    <span class=\"macro\">assert_eq!</span>(CELL.get(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">92</span>));\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::sync::OnceLock;%0A%0Astatic+CELL:+OnceLock%3Ci32%3E+=+OnceLock::new();%0A%0Afn+main()+%7B%0A++++assert!(CELL.get().is_none());%0A%0A++++std::thread::spawn(%7C%7C+%7B%0A++++++++assert_eq!(CELL.set(92),+Ok(()));%0A++++%7D).join().unwrap();%0A%0A++++assert_eq!(CELL.set(62),+Err(62));%0A++++assert_eq!(CELL.get(),+Some(%2692));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_insert\" class=\"method\"><a class=\"src rightside\" href=\"../../src/std/sync/once_lock.rs.html#227-234\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.try_insert\" class=\"fn\">try_insert</a>(&amp;self, value: T) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>, (<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>, T)&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>once_cell_try_insert</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/116693\">#116693</a>)</span></div></span></summary><div class=\"docblock\"><p>Sets the contents of this cell to <code>value</code> if the cell was empty, then\nreturns a reference to it.</p>\n<p>May block if another thread is currently attempting to initialize the cell. The cell is\nguaranteed to contain a value when set returns, though not necessarily the one provided.</p>\n<p>Returns <code>Ok(&amp;value)</code> if the cell was empty and <code>Err(&amp;current_value, value)</code> if it was full.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(once_cell_try_insert)]\n\n</span><span class=\"kw\">use </span>std::sync::OnceLock;\n\n<span class=\"kw\">static </span>CELL: OnceLock&lt;i32&gt; = OnceLock::new();\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"macro\">assert!</span>(CELL.get().is_none());\n\n    std::thread::spawn(|| {\n        <span class=\"macro\">assert_eq!</span>(CELL.try_insert(<span class=\"number\">92</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">92</span>));\n    }).join().unwrap();\n\n    <span class=\"macro\">assert_eq!</span>(CELL.try_insert(<span class=\"number\">62</span>), <span class=\"prelude-val\">Err</span>((<span class=\"kw-2\">&amp;</span><span class=\"number\">92</span>, <span class=\"number\">62</span>)));\n    <span class=\"macro\">assert_eq!</span>(CELL.get(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">92</span>));\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(once_cell_try_insert)%5D%0A%0Ause+std::sync::OnceLock;%0A%0Astatic+CELL:+OnceLock%3Ci32%3E+=+OnceLock::new();%0A%0Afn+main()+%7B%0A++++assert!(CELL.get().is_none());%0A%0A++++std::thread::spawn(%7C%7C+%7B%0A++++++++assert_eq!(CELL.try_insert(92),+Ok(%2692));%0A++++%7D).join().unwrap();%0A%0A++++assert_eq!(CELL.try_insert(62),+Err((%2692,+62)));%0A++++assert_eq!(CELL.get(),+Some(%2692));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_or_init\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> ¬∑ <a class=\"src\" href=\"../../src/std/sync/once_lock.rs.html#265-272\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.get_or_init\" class=\"fn\">get_or_init</a>&lt;F&gt;(&amp;self, f: F) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>() -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>Gets the contents of the cell, initializing it with <code>f</code> if the cell\nwas empty.</p>\n<p>Many threads may call <code>get_or_init</code> concurrently with different\ninitializing functions, but it is guaranteed that only one function\nwill be executed.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">¬ß</a>Panics</h5>\n<p>If <code>f</code> panics, the panic is propagated to the caller, and the cell\nremains uninitialized.</p>\n<p>It is an error to reentrantly initialize the cell from <code>f</code>. The\nexact outcome is unspecified. Current implementation deadlocks, but\nthis may be changed to a panic in the future.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::OnceLock;\n\n<span class=\"kw\">let </span>cell = OnceLock::new();\n<span class=\"kw\">let </span>value = cell.get_or_init(|| <span class=\"number\">92</span>);\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"kw-2\">&amp;</span><span class=\"number\">92</span>);\n<span class=\"kw\">let </span>value = cell.get_or_init(|| <span class=\"macro\">unreachable!</span>());\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"kw-2\">&amp;</span><span class=\"number\">92</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::OnceLock;%0A++++%0A++++let+cell+=+OnceLock::new();%0A++++let+value+=+cell.get_or_init(%7C%7C+92);%0A++++assert_eq!(value,+%2692);%0A++++let+value+=+cell.get_or_init(%7C%7C+unreachable!());%0A++++assert_eq!(value,+%2692);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_mut_or_init\" class=\"method\"><a class=\"src rightside\" href=\"../../src/std/sync/once_lock.rs.html#305-312\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.get_mut_or_init\" class=\"fn\">get_mut_or_init</a>&lt;F&gt;(&amp;mut self, f: F) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>() -&gt; T,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>once_cell_get_mut</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/121641\">#121641</a>)</span></div></span></summary><div class=\"docblock\"><p>Gets the mutable reference of the contents of the cell, initializing\nit with <code>f</code> if the cell was empty.</p>\n<p>Many threads may call <code>get_mut_or_init</code> concurrently with different\ninitializing functions, but it is guaranteed that only one function\nwill be executed.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">¬ß</a>Panics</h5>\n<p>If <code>f</code> panics, the panic is propagated to the caller, and the cell\nremains uninitialized.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(once_cell_get_mut)]\n\n</span><span class=\"kw\">use </span>std::sync::OnceLock;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>cell = OnceLock::new();\n<span class=\"kw\">let </span>value = cell.get_mut_or_init(|| <span class=\"number\">92</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>value, <span class=\"number\">92</span>);\n\n<span class=\"kw-2\">*</span>value += <span class=\"number\">2</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>value, <span class=\"number\">94</span>);\n\n<span class=\"kw\">let </span>value = cell.get_mut_or_init(|| <span class=\"macro\">unreachable!</span>());\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>value, <span class=\"number\">94</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(once_cell_get_mut)%5D%0A%0Afn+main()+%7B%0A++++use+std::sync::OnceLock;%0A++++%0A++++let+mut+cell+=+OnceLock::new();%0A++++let+value+=+cell.get_mut_or_init(%7C%7C+92);%0A++++assert_eq!(*value,+92);%0A++++%0A++++*value+%2B=+2;%0A++++assert_eq!(*value,+94);%0A++++%0A++++let+value+=+cell.get_mut_or_init(%7C%7C+unreachable!());%0A++++assert_eq!(*value,+94);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_or_try_init\" class=\"method\"><a class=\"src rightside\" href=\"../../src/std/sync/once_lock.rs.html#345-363\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.get_or_try_init\" class=\"fn\">get_or_try_init</a>&lt;F, E&gt;(&amp;self, f: F) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a>, E&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>() -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, E&gt;,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>once_cell_try</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/109737\">#109737</a>)</span></div></span></summary><div class=\"docblock\"><p>Gets the contents of the cell, initializing it with <code>f</code> if\nthe cell was empty. If the cell was empty and <code>f</code> failed, an\nerror is returned.</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">¬ß</a>Panics</h5>\n<p>If <code>f</code> panics, the panic is propagated to the caller, and\nthe cell remains uninitialized.</p>\n<p>It is an error to reentrantly initialize the cell from <code>f</code>.\nThe exact outcome is unspecified. Current implementation\ndeadlocks, but this may be changed to a panic in the future.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(once_cell_try)]\n\n</span><span class=\"kw\">use </span>std::sync::OnceLock;\n\n<span class=\"kw\">let </span>cell = OnceLock::new();\n<span class=\"macro\">assert_eq!</span>(cell.get_or_try_init(|| <span class=\"prelude-val\">Err</span>(())), <span class=\"prelude-val\">Err</span>(()));\n<span class=\"macro\">assert!</span>(cell.get().is_none());\n<span class=\"kw\">let </span>value = cell.get_or_try_init(|| -&gt; <span class=\"prelude-ty\">Result</span>&lt;i32, ()&gt; {\n    <span class=\"prelude-val\">Ok</span>(<span class=\"number\">92</span>)\n});\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"prelude-val\">Ok</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">92</span>));\n<span class=\"macro\">assert_eq!</span>(cell.get(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">92</span>))</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(once_cell_try)%5D%0A%0Afn+main()+%7B%0A++++use+std::sync::OnceLock;%0A++++%0A++++let+cell+=+OnceLock::new();%0A++++assert_eq!(cell.get_or_try_init(%7C%7C+Err(())),+Err(()));%0A++++assert!(cell.get().is_none());%0A++++let+value+=+cell.get_or_try_init(%7C%7C+-%3E+Result%3Ci32,+()%3E+%7B%0A++++++++Ok(92)%0A++++%7D);%0A++++assert_eq!(value,+Ok(%2692));%0A++++assert_eq!(cell.get(),+Some(%2692))%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.get_mut_or_try_init\" class=\"method\"><a class=\"src rightside\" href=\"../../src/std/sync/once_lock.rs.html#394-404\">source</a><h4 class=\"code-header\">pub fn <a href=\"#method.get_mut_or_try_init\" class=\"fn\">get_mut_or_try_init</a>&lt;F, E&gt;(&amp;mut self, f: F) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>, E&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"../ops/trait.FnOnce.html\" title=\"trait std::ops::FnOnce\">FnOnce</a>() -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, E&gt;,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">üî¨</span><span>This is a nightly-only experimental API. (<code>once_cell_get_mut</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/121641\">#121641</a>)</span></div></span></summary><div class=\"docblock\"><p>Gets the mutable reference of the contents of the cell, initializing\nit with <code>f</code> if the cell was empty. If the cell was empty and <code>f</code> failed,\nan error is returned.</p>\n<h5 id=\"panics-3\"><a class=\"doc-anchor\" href=\"#panics-3\">¬ß</a>Panics</h5>\n<p>If <code>f</code> panics, the panic is propagated to the caller, and\nthe cell remains uninitialized.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(once_cell_get_mut)]\n\n</span><span class=\"kw\">use </span>std::sync::OnceLock;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>cell: OnceLock&lt;u32&gt; = OnceLock::new();\n\n<span class=\"comment\">// Failed initializers do not change the value\n</span><span class=\"macro\">assert!</span>(cell.get_mut_or_try_init(|| <span class=\"string\">\"not a number!\"</span>.parse()).is_err());\n<span class=\"macro\">assert!</span>(cell.get().is_none());\n\n<span class=\"kw\">let </span>value = cell.get_mut_or_try_init(|| <span class=\"string\">\"1234\"</span>.parse());\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"prelude-val\">Ok</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"number\">1234</span>));\n<span class=\"kw-2\">*</span>value.unwrap() += <span class=\"number\">2</span>;\n<span class=\"macro\">assert_eq!</span>(cell.get(), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">1236</span>))</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(once_cell_get_mut)%5D%0A%0Afn+main()+%7B%0A++++use+std::sync::OnceLock;%0A++++%0A++++let+mut+cell:+OnceLock%3Cu32%3E+=+OnceLock::new();%0A++++%0A++++//+Failed+initializers+do+not+change+the+value%0A++++assert!(cell.get_mut_or_try_init(%7C%7C+%22not+a+number!%22.parse()).is_err());%0A++++assert!(cell.get().is_none());%0A++++%0A++++let+value+=+cell.get_mut_or_try_init(%7C%7C+%221234%22.parse());%0A++++assert_eq!(value,+Ok(%26mut+1234));%0A++++*value.unwrap()+%2B=+2;%0A++++assert_eq!(cell.get(),+Some(%261236))%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into_inner\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> ¬∑ <a class=\"src\" href=\"../../src/std/sync/once_lock.rs.html#423-425\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.into_inner\" class=\"fn\">into_inner</a>(self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Consumes the <code>OnceLock</code>, returning the wrapped value. Returns\n<code>None</code> if the cell was empty.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::OnceLock;\n\n<span class=\"kw\">let </span>cell: OnceLock&lt;String&gt; = OnceLock::new();\n<span class=\"macro\">assert_eq!</span>(cell.into_inner(), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span>cell = OnceLock::new();\ncell.set(<span class=\"string\">\"hello\"</span>.to_string()).unwrap();\n<span class=\"macro\">assert_eq!</span>(cell.into_inner(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hello\"</span>.to_string()));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::OnceLock;%0A++++%0A++++let+cell:+OnceLock%3CString%3E+=+OnceLock::new();%0A++++assert_eq!(cell.into_inner(),+None);%0A++++%0A++++let+cell+=+OnceLock::new();%0A++++cell.set(%22hello%22.to_string()).unwrap();%0A++++assert_eq!(cell.into_inner(),+Some(%22hello%22.to_string()));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.take\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> ¬∑ <a class=\"src\" href=\"../../src/std/sync/once_lock.rs.html#448-458\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"#method.take\" class=\"fn\">take</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"../option/enum.Option.html\" title=\"enum std::option::Option\">Option</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Takes the value out of this <code>OnceLock</code>, moving it back to an uninitialized state.</p>\n<p>Has no effect and returns <code>None</code> if the <code>OnceLock</code> hasn‚Äôt been initialized.</p>\n<p>Safety is guaranteed by requiring a mutable reference.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">¬ß</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::OnceLock;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>cell: OnceLock&lt;String&gt; = OnceLock::new();\n<span class=\"macro\">assert_eq!</span>(cell.take(), <span class=\"prelude-val\">None</span>);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>cell = OnceLock::new();\ncell.set(<span class=\"string\">\"hello\"</span>.to_string()).unwrap();\n<span class=\"macro\">assert_eq!</span>(cell.take(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"hello\"</span>.to_string()));\n<span class=\"macro\">assert_eq!</span>(cell.get(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::sync::OnceLock;%0A++++%0A++++let+mut+cell:+OnceLock%3CString%3E+=+OnceLock::new();%0A++++assert_eq!(cell.take(),+None);%0A++++%0A++++let+mut+cell+=+OnceLock::new();%0A++++cell.set(%22hello%22.to_string()).unwrap();%0A++++assert_eq!(cell.take(),+Some(%22hello%22.to_string()));%0A++++assert_eq!(cell.get(),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details></div><h2 id=\"trait-implementations\" class=\"section-header\">Trait Implementations<a href=\"#trait-implementations\" class=\"anchor\">¬ß</a></h2><div id=\"trait-implementations-list\"><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Clone-for-OnceLock%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> ¬∑ <a class=\"src\" href=\"../../src/std/sync/once_lock.rs.html#558-570\">source</a></span><a href=\"#impl-Clone-for-OnceLock%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>&gt; <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"struct.OnceLock.html\" title=\"struct std::sync::OnceLock\">OnceLock</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/sync/once_lock.rs.html#560-569\">source</a><a href=\"#method.clone\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"struct.OnceLock.html\" title=\"struct std::sync::OnceLock\">OnceLock</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\">Returns a copy of the value. <a href=\"../clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class=\"docblock\">Performs copy-assignment from <code>source</code>. <a href=\"../clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Debug-for-OnceLock%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> ¬∑ <a class=\"src\" href=\"../../src/std/sync/once_lock.rs.html#546-555\">source</a></span><a href=\"#impl-Debug-for-OnceLock%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a>&gt; <a class=\"trait\" href=\"../fmt/trait.Debug.html\" title=\"trait std::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"struct.OnceLock.html\" title=\"struct std::sync::OnceLock\">OnceLock</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/sync/once_lock.rs.html#547-554\">source</a><a href=\"#method.fmt\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"../fmt/struct.Formatter.html\" title=\"struct std::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"../fmt/type.Result.html\" title=\"type std::fmt::Result\">Result</a></h4></section></summary><div class=\"docblock\">Formats the value using the given formatter. <a href=\"../fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Default-for-OnceLock%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> ¬∑ <a class=\"src\" href=\"../../src/std/sync/once_lock.rs.html#527-543\">source</a></span><a href=\"#impl-Default-for-OnceLock%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../default/trait.Default.html\" title=\"trait std::default::Default\">Default</a> for <a class=\"struct\" href=\"struct.OnceLock.html\" title=\"struct std::sync::OnceLock\">OnceLock</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/sync/once_lock.rs.html#540-542\">source</a><a href=\"#method.default\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"struct.OnceLock.html\" title=\"struct std::sync::OnceLock\">OnceLock</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new empty cell.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">¬ß</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::OnceLock;\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"macro\">assert_eq!</span>(OnceLock::&lt;()&gt;::new(), OnceLock::default());\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::sync::OnceLock;%0A%0Afn+main()+%7B%0A++++assert_eq!(OnceLock::%3C()%3E::new(),+OnceLock::default());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-Drop-for-OnceLock%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> ¬∑ <a class=\"src\" href=\"../../src/std/sync/once_lock.rs.html#611-621\">source</a></span><a href=\"#impl-Drop-for-OnceLock%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../ops/trait.Drop.html\" title=\"trait std::ops::Drop\">Drop</a> for <a class=\"struct\" href=\"struct.OnceLock.html\" title=\"struct std::sync::OnceLock\">OnceLock</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.drop\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/sync/once_lock.rs.html#613-620\">source</a><a href=\"#method.drop\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../ops/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\">Executes the destructor for this type. <a href=\"../ops/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-From%3CT%3E-for-OnceLock%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> ¬∑ <a class=\"src\" href=\"../../src/std/sync/once_lock.rs.html#573-597\">source</a></span><a href=\"#impl-From%3CT%3E-for-OnceLock%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for <a class=\"struct\" href=\"struct.OnceLock.html\" title=\"struct std::sync::OnceLock\">OnceLock</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/sync/once_lock.rs.html#590-596\">source</a><a href=\"#method.from\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: T) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Create a new cell with its contents set to <code>value</code>.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">¬ß</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::OnceLock;\n\n<span class=\"kw\">let </span>a = OnceLock::from(<span class=\"number\">3</span>);\n<span class=\"kw\">let </span>b = OnceLock::new();\nb.set(<span class=\"number\">3</span>)<span class=\"question-mark\">?</span>;\n<span class=\"macro\">assert_eq!</span>(a, b);\n<span class=\"prelude-val\">Ok</span>(())</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Ause+std::sync::OnceLock;%0A%0Afn+main()+-%3E+Result%3C(),+i32%3E+%7B%0Alet+a+=+OnceLock::from(3);%0Alet+b+=+OnceLock::new();%0Ab.set(3)?;%0Aassert_eq!(a,+b);%0AOk(())%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details><details class=\"toggle implementors-toggle\" open=\"\"><summary><section id=\"impl-PartialEq-for-OnceLock%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> ¬∑ <a class=\"src\" href=\"../../src/std/sync/once_lock.rs.html#600-605\">source</a></span><a href=\"#impl-PartialEq-for-OnceLock%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a>&gt; <a class=\"trait\" href=\"../cmp/trait.PartialEq.html\" title=\"trait std::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"struct.OnceLock.html\" title=\"struct std::sync::OnceLock\">OnceLock</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"../../src/std/sync/once_lock.rs.html#602-604\">source</a><a href=\"#method.eq\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"struct.OnceLock.html\" title=\"struct std::sync::OnceLock\">OnceLock</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ¬∑ <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\">This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details><section id=\"impl-Eq-for-OnceLock%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> ¬∑ <a class=\"src\" href=\"../../src/std/sync/once_lock.rs.html#608\">source</a></span><a href=\"#impl-Eq-for-OnceLock%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a>&gt; <a class=\"trait\" href=\"../cmp/trait.Eq.html\" title=\"trait std::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"struct.OnceLock.html\" title=\"struct std::sync::OnceLock\">OnceLock</a>&lt;T&gt;</h3></section><section id=\"impl-RefUnwindSafe-for-OnceLock%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> ¬∑ <a class=\"src\" href=\"../../src/std/sync/once_lock.rs.html#522\">source</a></span><a href=\"#impl-RefUnwindSafe-for-OnceLock%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> + <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a>&gt; <a class=\"trait\" href=\"../panic/trait.RefUnwindSafe.html\" title=\"trait std::panic::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"struct.OnceLock.html\" title=\"struct std::sync::OnceLock\">OnceLock</a>&lt;T&gt;</h3></section><section id=\"impl-Send-for-OnceLock%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> ¬∑ <a class=\"src\" href=\"../../src/std/sync/once_lock.rs.html#519\">source</a></span><a href=\"#impl-Send-for-OnceLock%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a>&gt; <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a> for <a class=\"struct\" href=\"struct.OnceLock.html\" title=\"struct std::sync::OnceLock\">OnceLock</a>&lt;T&gt;</h3></section><section id=\"impl-Sync-for-OnceLock%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> ¬∑ <a class=\"src\" href=\"../../src/std/sync/once_lock.rs.html#517\">source</a></span><a href=\"#impl-Sync-for-OnceLock%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"../marker/trait.Send.html\" title=\"trait std::marker::Send\">Send</a>&gt; <a class=\"trait\" href=\"../marker/trait.Sync.html\" title=\"trait std::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"struct.OnceLock.html\" title=\"struct std::sync::OnceLock\">OnceLock</a>&lt;T&gt;</h3></section><section id=\"impl-UnwindSafe-for-OnceLock%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.70.0\">1.70.0</span> ¬∑ <a class=\"src\" href=\"../../src/std/sync/once_lock.rs.html#524\">source</a></span><a href=\"#impl-UnwindSafe-for-OnceLock%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a>&gt; <a class=\"trait\" href=\"../panic/trait.UnwindSafe.html\" title=\"trait std::panic::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"struct.OnceLock.html\" title=\"struct std::sync::OnceLock\">OnceLock</a>&lt;T&gt;</h3></section></div><h2 id=\"synthetic-implementations\" class=\"section-header\">Auto Trait Implementations<a href=\"#synthetic-implementations\" class=\"anchor\">¬ß</a></h2><div id=\"synthetic-implementations-list\"><section id=\"impl-Freeze-for-OnceLock%3CT%3E\" class=\"impl\"><a href=\"#impl-Freeze-for-OnceLock%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; !<a class=\"trait\" href=\"../marker/trait.Freeze.html\" title=\"trait std::marker::Freeze\">Freeze</a> for <a class=\"struct\" href=\"struct.OnceLock.html\" title=\"struct std::sync::OnceLock\">OnceLock</a>&lt;T&gt;</h3></section><section id=\"impl-Unpin-for-OnceLock%3CT%3E\" class=\"impl\"><a href=\"#impl-Unpin-for-OnceLock%3CT%3E\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"struct.OnceLock.html\" title=\"struct std::sync::OnceLock\">OnceLock</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../marker/trait.Unpin.html\" title=\"trait std::marker::Unpin\">Unpin</a>,</div></h3></section></div><h2 id=\"blanket-implementations\" class=\"section-header\">Blanket Implementations<a href=\"#blanket-implementations\" class=\"anchor\">¬ß</a></h2><div id=\"blanket-implementations-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Any-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#140\">source</a><a href=\"#impl-Any-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../any/trait.Any.html\" title=\"trait std::any::Any\">Any</a> for T<div class=\"where\">where\n    T: 'static + ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/any.rs.html#141\">source</a><a href=\"#method.type_id\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../any/trait.Any.html#tymethod.type_id\" class=\"fn\">type_id</a>(&amp;self) -&gt; <a class=\"struct\" href=\"../any/struct.TypeId.html\" title=\"struct std::any::TypeId\">TypeId</a></h4></section></summary><div class=\"docblock\">Gets the <code>TypeId</code> of <code>self</code>. <a href=\"../any/trait.Any.html#tymethod.type_id\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Borrow%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#208\">source</a><a href=\"#impl-Borrow%3CT%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.Borrow.html\" title=\"trait std::borrow::Borrow\">Borrow</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#210\">source</a><a href=\"#method.borrow\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\">Immutably borrows from an owned value. <a href=\"../borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-BorrowMut%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#216\">source</a><a href=\"#impl-BorrowMut%3CT%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.BorrowMut.html\" title=\"trait std::borrow::BorrowMut\">BorrowMut</a>&lt;T&gt; for T<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"../marker/trait.Sized.html\" title=\"trait std::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/borrow.rs.html#217\">source</a><a href=\"#method.borrow_mut\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\">Mutably borrows from an owned value. <a href=\"../borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3C!%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#782\">source</a><a href=\"#impl-From%3C!%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"../primitive.never.html\">!</a>&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#783\">source</a><a href=\"#method.from-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: <a class=\"primitive\" href=\"../primitive.never.html\">!</a>) -&gt; T</h4></section></summary><div class=\"docblock\">Converts to this type from the input type.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-From%3CT%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#765\">source</a><a href=\"#impl-From%3CT%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for T</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.from-2\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#768\">source</a><a href=\"#method.from-2\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Returns the argument unchanged.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-Into%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#748-750\">source</a><a href=\"#impl-Into%3CU%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#758\">source</a><a href=\"#method.into\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.Into.html#tymethod.into\" class=\"fn\">into</a>(self) -&gt; U</h4></section></summary><div class=\"docblock\"><p>Calls <code>U::from(self)</code>.</p>\n<p>That is, this conversion is whatever the implementation of\n<code><a href=\"../convert/trait.From.html\" title=\"trait std::convert::From\">From</a>&lt;T&gt; for U</code> chooses to do.</p>\n</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-ToOwned-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#83-85\">source</a><a href=\"#impl-ToOwned-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"../borrow/trait.ToOwned.html\" title=\"trait std::borrow::ToOwned\">ToOwned</a> for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"../clone/trait.Clone.html\" title=\"trait std::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Owned\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../borrow/trait.ToOwned.html#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = T</h4></section></summary><div class=\"docblock\">The resulting type after obtaining ownership.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.to_owned\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#88\">source</a><a href=\"#method.to_owned\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\">Creates owned data from borrowed data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#tymethod.to_owned\">Read more</a></div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.clone_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/alloc/borrow.rs.html#92\">source</a><a href=\"#method.clone_into\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../borrow/trait.ToOwned.html#method.clone_into\" class=\"fn\">clone_into</a>(&amp;self, target: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;mut T</a>)</h4></section></summary><div class=\"docblock\">Uses borrowed data to replace owned data, usually by cloning. <a href=\"../borrow/trait.ToOwned.html#method.clone_into\">Read more</a></div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryFrom%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#805-807\">source</a><a href=\"#impl-TryFrom%3CU%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.Into.html\" title=\"trait std::convert::Into\">Into</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error-1\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"enum\" href=\"../convert/enum.Infallible.html\" title=\"enum std::convert::Infallible\">Infallible</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#812\">source</a><a href=\"#method.try_from\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: U) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;T, &lt;T as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;U&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-TryInto%3CU%3E-for-T\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#790-792\">source</a><a href=\"#impl-TryInto%3CU%3E-for-T\" class=\"anchor\">¬ß</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"../convert/trait.TryInto.html\" title=\"trait std::convert::TryInto\">TryInto</a>&lt;U&gt; for T<div class=\"where\">where\n    U: <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">type <a href=\"../convert/trait.TryInto.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a></h4></section></summary><div class=\"docblock\">The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"method.try_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/convert/mod.rs.html#797\">source</a><a href=\"#method.try_into\" class=\"anchor\">¬ß</a><h4 class=\"code-header\">fn <a href=\"../convert/trait.TryInto.html#tymethod.try_into\" class=\"fn\">try_into</a>(self) -&gt; <a class=\"enum\" href=\"../result/enum.Result.html\" title=\"enum std::result::Result\">Result</a>&lt;U, &lt;U as <a class=\"trait\" href=\"../convert/trait.TryFrom.html\" title=\"trait std::convert::TryFrom\">TryFrom</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"../convert/trait.TryFrom.html#associatedtype.Error\" title=\"type std::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\">Performs the conversion.</div></details></div></details></div></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:13:20.967Z"
}