{
	"title": "The Rust Programming Language",
	"url": "https://doc.rust-lang.org/stable/book/print.html",
	"markdown": "# The Rust Programming Language\n\n_by Steve Klabnik and Carol Nichols, with contributions from the Rust Community_\n\nThis version of the text assumes you‚Äôre using Rust 1.78.0 (released 2024-05-02) or later. See the [‚ÄúInstallation‚Äù section of Chapter 1](ch01-01-installation.html) to install or update Rust.\n\nThe HTML format is available online at [https://doc.rust-lang.org/stable/book/](https://doc.rust-lang.org/stable/book/) and offline with installations of Rust made with `rustup`; run `rustup doc --book` to open.\n\nSeveral community [translations](appendix-06-translation.html) are also available.\n\nThis text is available in [paperback and ebook format from No Starch Press](https://nostarch.com/rust-programming-language-2nd-edition).\n\n> **üö® Want a more interactive learning experience? Try out a different version of the Rust Book, featuring: quizzes, highlighting, visualizations, and more**: [https://rust-book.cs.brown.edu](https://rust-book.cs.brown.edu/)\n\n## [Foreword](#foreword)\n\nIt wasn‚Äôt always so clear, but the Rust programming language is fundamentally about _empowerment_: no matter what kind of code you are writing now, Rust empowers you to reach farther, to program with confidence in a wider variety of domains than you did before.\n\nTake, for example, ‚Äúsystems-level‚Äù work that deals with low-level details of memory management, data representation, and concurrency. Traditionally, this realm of programming is seen as arcane, accessible only to a select few who have devoted the necessary years learning to avoid its infamous pitfalls. And even those who practice it do so with caution, lest their code be open to exploits, crashes, or corruption.\n\nRust breaks down these barriers by eliminating the old pitfalls and providing a friendly, polished set of tools to help you along the way. Programmers who need to ‚Äúdip down‚Äù into lower-level control can do so with Rust, without taking on the customary risk of crashes or security holes, and without having to learn the fine points of a fickle toolchain. Better yet, the language is designed to guide you naturally towards reliable code that is efficient in terms of speed and memory usage.\n\nProgrammers who are already working with low-level code can use Rust to raise their ambitions. For example, introducing parallelism in Rust is a relatively low-risk operation: the compiler will catch the classical mistakes for you. And you can tackle more aggressive optimizations in your code with the confidence that you won‚Äôt accidentally introduce crashes or vulnerabilities.\n\nBut Rust isn‚Äôt limited to low-level systems programming. It‚Äôs expressive and ergonomic enough to make CLI apps, web servers, and many other kinds of code quite pleasant to write ‚Äî you‚Äôll find simple examples of both later in the book. Working with Rust allows you to build skills that transfer from one domain to another; you can learn Rust by writing a web app, then apply those same skills to target your Raspberry Pi.\n\nThis book fully embraces the potential of Rust to empower its users. It‚Äôs a friendly and approachable text intended to help you level up not just your knowledge of Rust, but also your reach and confidence as a programmer in general. So dive in, get ready to learn‚Äîand welcome to the Rust community!\n\n‚Äî Nicholas Matsakis and Aaron Turon\n\n## [Introduction](#introduction)\n\nNote: This edition of the book is the same as [The Rust Programming Language](https://nostarch.com/rust-programming-language-2nd-edition) available in print and ebook format from [No Starch Press](https://nostarch.com/).\n\nWelcome to _The Rust Programming Language_, an introductory book about Rust. The Rust programming language helps you write faster, more reliable software. High-level ergonomics and low-level control are often at odds in programming language design; Rust challenges that conflict. Through balancing powerful technical capacity and a great developer experience, Rust gives you the option to control low-level details (such as memory usage) without all the hassle traditionally associated with such control.\n\n## [Who Rust Is For](#who-rust-is-for)\n\nRust is ideal for many people for a variety of reasons. Let‚Äôs look at a few of the most important groups.\n\n### [Teams of Developers](#teams-of-developers)\n\nRust is proving to be a productive tool for collaborating among large teams of developers with varying levels of systems programming knowledge. Low-level code is prone to various subtle bugs, which in most other languages can be caught only through extensive testing and careful code review by experienced developers. In Rust, the compiler plays a gatekeeper role by refusing to compile code with these elusive bugs, including concurrency bugs. By working alongside the compiler, the team can spend their time focusing on the program‚Äôs logic rather than chasing down bugs.\n\nRust also brings contemporary developer tools to the systems programming world:\n\n-   Cargo, the included dependency manager and build tool, makes adding, compiling, and managing dependencies painless and consistent across the Rust ecosystem.\n-   The Rustfmt formatting tool ensures a consistent coding style across developers.\n-   The rust-analyzer powers Integrated Development Environment (IDE) integration for code completion and inline error messages.\n\nBy using these and other tools in the Rust ecosystem, developers can be productive while writing systems-level code.\n\n### [Students](#students)\n\nRust is for students and those who are interested in learning about systems concepts. Using Rust, many people have learned about topics like operating systems development. The community is very welcoming and happy to answer student questions. Through efforts such as this book, the Rust teams want to make systems concepts more accessible to more people, especially those new to programming.\n\n### [Companies](#companies)\n\nHundreds of companies, large and small, use Rust in production for a variety of tasks, including command line tools, web services, DevOps tooling, embedded devices, audio and video analysis and transcoding, cryptocurrencies, bioinformatics, search engines, Internet of Things applications, machine learning, and even major parts of the Firefox web browser.\n\n### [Open Source Developers](#open-source-developers)\n\nRust is for people who want to build the Rust programming language, community, developer tools, and libraries. We‚Äôd love to have you contribute to the Rust language.\n\n### [People Who Value Speed and Stability](#people-who-value-speed-and-stability)\n\nRust is for people who crave speed and stability in a language. By speed, we mean both how quickly Rust code can run and the speed at which Rust lets you write programs. The Rust compiler‚Äôs checks ensure stability through feature additions and refactoring. This is in contrast to the brittle legacy code in languages without these checks, which developers are often afraid to modify. By striving for zero-cost abstractions, higher-level features that compile to lower-level code as fast as code written manually, Rust endeavors to make safe code be fast code as well.\n\nThe Rust language hopes to support many other users as well; those mentioned here are merely some of the biggest stakeholders. Overall, Rust‚Äôs greatest ambition is to eliminate the trade-offs that programmers have accepted for decades by providing safety _and_ productivity, speed _and_ ergonomics. Give Rust a try and see if its choices work for you.\n\n## [Who This Book Is For](#who-this-book-is-for)\n\nThis book assumes that you‚Äôve written code in another programming language but doesn‚Äôt make any assumptions about which one. We‚Äôve tried to make the material broadly accessible to those from a wide variety of programming backgrounds. We don‚Äôt spend a lot of time talking about what programming _is_ or how to think about it. If you‚Äôre entirely new to programming, you would be better served by reading a book that specifically provides an introduction to programming.\n\n## [How to Use This Book](#how-to-use-this-book)\n\nIn general, this book assumes that you‚Äôre reading it in sequence from front to back. Later chapters build on concepts in earlier chapters, and earlier chapters might not delve into details on a particular topic but will revisit the topic in a later chapter.\n\nYou‚Äôll find two kinds of chapters in this book: concept chapters and project chapters. In concept chapters, you‚Äôll learn about an aspect of Rust. In project chapters, we‚Äôll build small programs together, applying what you‚Äôve learned so far. Chapters 2, 12, and 20 are project chapters; the rest are concept chapters.\n\nChapter 1 explains how to install Rust, how to write a ‚ÄúHello, world!‚Äù program, and how to use Cargo, Rust‚Äôs package manager and build tool. Chapter 2 is a hands-on introduction to writing a program in Rust, having you build up a number guessing game. Here we cover concepts at a high level, and later chapters will provide additional detail. If you want to get your hands dirty right away, Chapter 2 is the place for that. Chapter 3 covers Rust features that are similar to those of other programming languages, and in Chapter 4 you‚Äôll learn about Rust‚Äôs ownership system. If you‚Äôre a particularly meticulous learner who prefers to learn every detail before moving on to the next, you might want to skip Chapter 2 and go straight to Chapter 3, returning to Chapter 2 when you‚Äôd like to work on a project applying the details you‚Äôve learned.\n\nChapter 5 discusses structs and methods, and Chapter 6 covers enums, `match` expressions, and the `if let` control flow construct. You‚Äôll use structs and enums to make custom types in Rust.\n\nIn Chapter 7, you‚Äôll learn about Rust‚Äôs module system and about privacy rules for organizing your code and its public Application Programming Interface (API). Chapter 8 discusses some common collection data structures that the standard library provides, such as vectors, strings, and hash maps. Chapter 9 explores Rust‚Äôs error-handling philosophy and techniques.\n\nChapter 10 digs into generics, traits, and lifetimes, which give you the power to define code that applies to multiple types. Chapter 11 is all about testing, which even with Rust‚Äôs safety guarantees is necessary to ensure your program‚Äôs logic is correct. In Chapter 12, we‚Äôll build our own implementation of a subset of functionality from the `grep` command line tool that searches for text within files. For this, we‚Äôll use many of the concepts we discussed in the previous chapters.\n\nChapter 13 explores closures and iterators: features of Rust that come from functional programming languages. In Chapter 14, we‚Äôll examine Cargo in more depth and talk about best practices for sharing your libraries with others. Chapter 15 discusses smart pointers that the standard library provides and the traits that enable their functionality.\n\nIn Chapter 16, we‚Äôll walk through different models of concurrent programming and talk about how Rust helps you to program in multiple threads fearlessly. Chapter 17 looks at how Rust idioms compare to object-oriented programming principles you might be familiar with.\n\nChapter 18 is a reference on patterns and pattern matching, which are powerful ways of expressing ideas throughout Rust programs. Chapter 19 contains a smorgasbord of advanced topics of interest, including unsafe Rust, macros, and more about lifetimes, traits, types, functions, and closures.\n\nIn Chapter 20, we‚Äôll complete a project in which we‚Äôll implement a low-level multithreaded web server!\n\nFinally, some appendices contain useful information about the language in a more reference-like format. Appendix A covers Rust‚Äôs keywords, Appendix B covers Rust‚Äôs operators and symbols, Appendix C covers derivable traits provided by the standard library, Appendix D covers some useful development tools, and Appendix E explains Rust editions. In Appendix F, you can find translations of the book, and in Appendix G we‚Äôll cover how Rust is made and what nightly Rust is.\n\nThere is no wrong way to read this book: if you want to skip ahead, go for it! You might have to jump back to earlier chapters if you experience any confusion. But do whatever works for you.\n\nAn important part of the process of learning Rust is learning how to read the error messages the compiler displays: these will guide you toward working code. As such, we‚Äôll provide many examples that don‚Äôt compile along with the error message the compiler will show you in each situation. Know that if you enter and run a random example, it may not compile! Make sure you read the surrounding text to see whether the example you‚Äôre trying to run is meant to error. Ferris will also help you distinguish code that isn‚Äôt meant to work:\n\nIn most situations, we‚Äôll lead you to the correct version of any code that doesn‚Äôt compile.\n\n## [Source Code](#source-code)\n\nThe source files from which this book is generated can be found on [GitHub](https://github.com/rust-lang/book/tree/main/src).\n\n## [Getting Started](#getting-started)\n\nLet‚Äôs start your Rust journey! There‚Äôs a lot to learn, but every journey starts somewhere. In this chapter, we‚Äôll discuss:\n\n-   Installing Rust on Linux, macOS, and Windows\n-   Writing a program that prints `Hello, world!`\n-   Using `cargo`, Rust‚Äôs package manager and build system\n\n## [Installation](#installation)\n\nThe first step is to install Rust. We‚Äôll download Rust through `rustup`, a command line tool for managing Rust versions and associated tools. You‚Äôll need an internet connection for the download.\n\nNote: If you prefer not to use `rustup` for some reason, please see the [Other Rust Installation Methods page](https://forge.rust-lang.org/infra/other-installation-methods.html) for more options.\n\nThe following steps install the latest stable version of the Rust compiler. Rust‚Äôs stability guarantees ensure that all the examples in the book that compile will continue to compile with newer Rust versions. The output might differ slightly between versions because Rust often improves error messages and warnings. In other words, any newer, stable version of Rust you install using these steps should work as expected with the content of this book.\n\n### [Command Line Notation](#command-line-notation)\n\nIn this chapter and throughout the book, we‚Äôll show some commands used in the terminal. Lines that you should enter in a terminal all start with `$`. You don‚Äôt need to type the `$` character; it‚Äôs the command line prompt shown to indicate the start of each command. Lines that don‚Äôt start with `$` typically show the output of the previous command. Additionally, PowerShell-specific examples will use `>` rather than `$`.\n\n### [Installing `rustup` on Linux or macOS](#installing-rustup-on-linux-or-macos)\n\nIf you‚Äôre using Linux or macOS, open a terminal and enter the following command:\n\n```console\n$ curl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sSf | sh\n\n```\n\nThe command downloads a script and starts the installation of the `rustup` tool, which installs the latest stable version of Rust. You might be prompted for your password. If the install is successful, the following line will appear:\n\n```text\nRust is installed now. Great!\n\n```\n\nYou will also need a _linker_, which is a program that Rust uses to join its compiled outputs into one file. It is likely you already have one. If you get linker errors, you should install a C compiler, which will typically include a linker. A C compiler is also useful because some common Rust packages depend on C code and will need a C compiler.\n\nOn macOS, you can get a C compiler by running:\n\n```console\n$ xcode-select --install\n\n```\n\nLinux users should generally install GCC or Clang, according to their distribution‚Äôs documentation. For example, if you use Ubuntu, you can install the `build-essential` package.\n\n### [Installing `rustup` on Windows](#installing-rustup-on-windows)\n\nOn Windows, go to [https://www.rust-lang.org/tools/install](https://www.rust-lang.org/tools/install) and follow the instructions for installing Rust. At some point in the installation, you‚Äôll be prompted to install Visual Studio. This provides a linker and the native libraries needed to compile programs. If you need more help with this step, see [https://rust-lang.github.io/rustup/installation/windows-msvc.html](https://rust-lang.github.io/rustup/installation/windows-msvc.html)\n\nThe rest of this book uses commands that work in both _cmd.exe_ and PowerShell. If there are specific differences, we‚Äôll explain which to use.\n\n### [Troubleshooting](#troubleshooting)\n\nTo check whether you have Rust installed correctly, open a shell and enter this line:\n\n```console\n$ rustc --version\n\n```\n\nYou should see the version number, commit hash, and commit date for the latest stable version that has been released, in the following format:\n\n```text\nrustc x.y.z (abcabcabc yyyy-mm-dd)\n\n```\n\nIf you see this information, you have installed Rust successfully! If you don‚Äôt see this information, check that Rust is in your `%PATH%` system variable as follows.\n\nIn Windows CMD, use:\n\n```console\n> echo %PATH%\n\n```\n\nIn PowerShell, use:\n\n```powershell\n> echo $env:Path\n\n```\n\nIn Linux and macOS, use:\n\n```console\n$ echo $PATH\n\n```\n\nIf that‚Äôs all correct and Rust still isn‚Äôt working, there are a number of places you can get help. Find out how to get in touch with other Rustaceans (a silly nickname we call ourselves) on [the community page](https://www.rust-lang.org/community).\n\n### [Updating and Uninstalling](#updating-and-uninstalling)\n\nOnce Rust is installed via `rustup`, updating to a newly released version is easy. From your shell, run the following update script:\n\n```console\n$ rustup update\n\n```\n\nTo uninstall Rust and `rustup`, run the following uninstall script from your shell:\n\n```console\n$ rustup self uninstall\n\n```\n\n### [Local Documentation](#local-documentation)\n\nThe installation of Rust also includes a local copy of the documentation so that you can read it offline. Run `rustup doc` to open the local documentation in your browser.\n\nAny time a type or function is provided by the standard library and you‚Äôre not sure what it does or how to use it, use the application programming interface (API) documentation to find out!\n\n## [Hello, World!](#hello-world)\n\nNow that you‚Äôve installed Rust, it‚Äôs time to write your first Rust program. It‚Äôs traditional when learning a new language to write a little program that prints the text `Hello, world!` to the screen, so we‚Äôll do the same here!\n\nNote: This book assumes basic familiarity with the command line. Rust makes no specific demands about your editing or tooling or where your code lives, so if you prefer to use an integrated development environment (IDE) instead of the command line, feel free to use your favorite IDE. Many IDEs now have some degree of Rust support; check the IDE‚Äôs documentation for details. The Rust team has been focusing on enabling great IDE support via `rust-analyzer`. See [Appendix D](appendix-04-useful-development-tools.html) for more details.\n\n### [Creating a Project Directory](#creating-a-project-directory)\n\nYou‚Äôll start by making a directory to store your Rust code. It doesn‚Äôt matter to Rust where your code lives, but for the exercises and projects in this book, we suggest making a _projects_ directory in your home directory and keeping all your projects there.\n\nOpen a terminal and enter the following commands to make a _projects_ directory and a directory for the ‚ÄúHello, world!‚Äù project within the _projects_ directory.\n\nFor Linux, macOS, and PowerShell on Windows, enter this:\n\n```console\n$ mkdir ~/projects\n$ cd ~/projects\n$ mkdir hello_world\n$ cd hello_world\n\n```\n\nFor Windows CMD, enter this:\n\n```cmd\n> mkdir \"%USERPROFILE%\\projects\"\n> cd /d \"%USERPROFILE%\\projects\"\n> mkdir hello_world\n> cd hello_world\n\n```\n\n### [Writing and Running a Rust Program](#writing-and-running-a-rust-program)\n\nNext, make a new source file and call it _main.rs_. Rust files always end with the _.rs_ extension. If you‚Äôre using more than one word in your filename, the convention is to use an underscore to separate them. For example, use _hello\\_world.rs_ rather than _helloworld.rs_.\n\nNow open the _main.rs_ file you just created and enter the code in Listing 1-1.\n\nFilename: main.rs\n```rust\nfn main() {\n    println!(\"Hello, world!\");\n}\n```\n\nListing 1-1: A program that prints `Hello, world!`\n\nSave the file and go back to your terminal window in the _~/projects/hello\\_world_ directory. On Linux or macOS, enter the following commands to compile and run the file:\n\n```console\n$ rustc main.rs\n$ ./main\nHello, world!\n\n```\n\nOn Windows, enter the command `.\\main.exe` instead of `./main`:\n\n```powershell\n> rustc main.rs\n> .\\main.exe\nHello, world!\n\n```\n\nRegardless of your operating system, the string `Hello, world!` should print to the terminal. If you don‚Äôt see this output, refer back to the [‚ÄúTroubleshooting‚Äù](about:blank/ch01-01-installation.html#troubleshooting) part of the Installation section for ways to get help.\n\nIf `Hello, world!` did print, congratulations! You‚Äôve officially written a Rust program. That makes you a Rust programmer‚Äîwelcome!\n\n### [Anatomy of a Rust Program](#anatomy-of-a-rust-program)\n\nLet‚Äôs review this ‚ÄúHello, world!‚Äù program in detail. Here‚Äôs the first piece of the puzzle:\n\n```rust\nfn main() {\n\n}\n```\n\nThese lines define a function named `main`. The `main` function is special: it is always the first code that runs in every executable Rust program. Here, the first line declares a function named `main` that has no parameters and returns nothing. If there were parameters, they would go inside the parentheses `()`.\n\nThe function body is wrapped in `{}`. Rust requires curly brackets around all function bodies. It‚Äôs good style to place the opening curly bracket on the same line as the function declaration, adding one space in between.\n\nNote: If you want to stick to a standard style across Rust projects, you can use an automatic formatter tool called `rustfmt` to format your code in a particular style (more on `rustfmt` in [Appendix D](appendix-04-useful-development-tools.html)). The Rust team has included this tool with the standard Rust distribution, as `rustc` is, so it should already be installed on your computer!\n\nThe body of the `main` function holds the following code:\n\n```rust\n#![allow(unused)]\nfn main() {\n    println!(\"Hello, world!\");\n}\n```\n\nThis line does all the work in this little program: it prints text to the screen. There are four important details to notice here.\n\nFirst, Rust style is to indent with four spaces, not a tab.\n\nSecond, `println!` calls a Rust macro. If it had called a function instead, it would be entered as `println` (without the `!`). We‚Äôll discuss Rust macros in more detail in Chapter 19. For now, you just need to know that using a `!` means that you‚Äôre calling a macro instead of a normal function and that macros don‚Äôt always follow the same rules as functions.\n\nThird, you see the `\"Hello, world!\"` string. We pass this string as an argument to `println!`, and the string is printed to the screen.\n\nFourth, we end the line with a semicolon (`;`), which indicates that this expression is over and the next one is ready to begin. Most lines of Rust code end with a semicolon.\n\n### [Compiling and Running Are Separate Steps](#compiling-and-running-are-separate-steps)\n\nYou‚Äôve just run a newly created program, so let‚Äôs examine each step in the process.\n\nBefore running a Rust program, you must compile it using the Rust compiler by entering the `rustc` command and passing it the name of your source file, like this:\n\n```console\n$ rustc main.rs\n\n```\n\nIf you have a C or C++ background, you‚Äôll notice that this is similar to `gcc` or `clang`. After compiling successfully, Rust outputs a binary executable.\n\nOn Linux, macOS, and PowerShell on Windows, you can see the executable by entering the `ls` command in your shell:\n\n```console\n$ ls\nmain  main.rs\n\n```\n\nOn Linux and macOS, you‚Äôll see two files. With PowerShell on Windows, you‚Äôll see the same three files that you would see using CMD. With CMD on Windows, you would enter the following:\n\n```cmd\n> dir /B %= the /B option says to only show the file names =%\nmain.exe\nmain.pdb\nmain.rs\n\n```\n\nThis shows the source code file with the _.rs_ extension, the executable file (_main.exe_ on Windows, but _main_ on all other platforms), and, when using Windows, a file containing debugging information with the _.pdb_ extension. From here, you run the _main_ or _main.exe_ file, like this:\n\n```console\n$ ./main # or .\\main.exe on Windows\n\n```\n\nIf your _main.rs_ is your ‚ÄúHello, world!‚Äù program, this line prints `Hello, world!` to your terminal.\n\nIf you‚Äôre more familiar with a dynamic language, such as Ruby, Python, or JavaScript, you might not be used to compiling and running a program as separate steps. Rust is an _ahead-of-time compiled_ language, meaning you can compile a program and give the executable to someone else, and they can run it even without having Rust installed. If you give someone a _.rb_, _.py_, or _.js_ file, they need to have a Ruby, Python, or JavaScript implementation installed (respectively). But in those languages, you only need one command to compile and run your program. Everything is a trade-off in language design.\n\nJust compiling with `rustc` is fine for simple programs, but as your project grows, you‚Äôll want to manage all the options and make it easy to share your code. Next, we‚Äôll introduce you to the Cargo tool, which will help you write real-world Rust programs.\n\n## [Hello, Cargo!](#hello-cargo)\n\nCargo is Rust‚Äôs build system and package manager. Most Rustaceans use this tool to manage their Rust projects because Cargo handles a lot of tasks for you, such as building your code, downloading the libraries your code depends on, and building those libraries. (We call the libraries that your code needs _dependencies_.)\n\nThe simplest Rust programs, like the one we‚Äôve written so far, don‚Äôt have any dependencies. If we had built the ‚ÄúHello, world!‚Äù project with Cargo, it would only use the part of Cargo that handles building your code. As you write more complex Rust programs, you‚Äôll add dependencies, and if you start a project using Cargo, adding dependencies will be much easier to do.\n\nBecause the vast majority of Rust projects use Cargo, the rest of this book assumes that you‚Äôre using Cargo too. Cargo comes installed with Rust if you used the official installers discussed in the [‚ÄúInstallation‚Äù](about:blank/ch01-01-installation.html#installation) section. If you installed Rust through some other means, check whether Cargo is installed by entering the following in your terminal:\n\n```console\n$ cargo --version\n\n```\n\nIf you see a version number, you have it! If you see an error, such as `command not found`, look at the documentation for your method of installation to determine how to install Cargo separately.\n\n### [Creating a Project with Cargo](#creating-a-project-with-cargo)\n\nLet‚Äôs create a new project using Cargo and look at how it differs from our original ‚ÄúHello, world!‚Äù project. Navigate back to your _projects_ directory (or wherever you decided to store your code). Then, on any operating system, run the following:\n\n```console\n$ cargo new hello_cargo\n$ cd hello_cargo\n\n```\n\nThe first command creates a new directory and project called _hello\\_cargo_. We‚Äôve named our project _hello\\_cargo_, and Cargo creates its files in a directory of the same name.\n\nGo into the _hello\\_cargo_ directory and list the files. You‚Äôll see that Cargo has generated two files and one directory for us: a _Cargo.toml_ file and a _src_ directory with a _main.rs_ file inside.\n\nIt has also initialized a new Git repository along with a _.gitignore_ file. Git files won‚Äôt be generated if you run `cargo new` within an existing Git repository; you can override this behavior by using `cargo new --vcs=git`.\n\nNote: Git is a common version control system. You can change `cargo new` to use a different version control system or no version control system by using the `--vcs` flag. Run `cargo new --help` to see the available options.\n\nOpen _Cargo.toml_ in your text editor of choice. It should look similar to the code in Listing 1-2.\n\nFilename: Cargo.toml\n```toml\n[package]\nname = \"hello_cargo\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n\n[dependencies]\n\n```\n\nListing 1-2: Contents of _Cargo.toml_ generated by `cargo new`\n\nThis file is in the [_TOML_](https://toml.io/) (_Tom‚Äôs Obvious, Minimal Language_) format, which is Cargo‚Äôs configuration format.\n\nThe first line, `[package]`, is a section heading that indicates that the following statements are configuring a package. As we add more information to this file, we‚Äôll add other sections.\n\nThe next three lines set the configuration information Cargo needs to compile your program: the name, the version, and the edition of Rust to use. We‚Äôll talk about the `edition` key in [Appendix E](appendix-05-editions.html).\n\nThe last line, `[dependencies]`, is the start of a section for you to list any of your project‚Äôs dependencies. In Rust, packages of code are referred to as _crates_. We won‚Äôt need any other crates for this project, but we will in the first project in Chapter 2, so we‚Äôll use this dependencies section then.\n\nNow open _src/main.rs_ and take a look:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    println!(\"Hello, world!\");\n}\n```\n\nCargo has generated a ‚ÄúHello, world!‚Äù program for you, just like the one we wrote in Listing 1-1! So far, the differences between our project and the project Cargo generated are that Cargo placed the code in the _src_ directory and we have a _Cargo.toml_ configuration file in the top directory.\n\nCargo expects your source files to live inside the _src_ directory. The top-level project directory is just for README files, license information, configuration files, and anything else not related to your code. Using Cargo helps you organize your projects. There‚Äôs a place for everything, and everything is in its place.\n\nIf you started a project that doesn‚Äôt use Cargo, as we did with the ‚ÄúHello, world!‚Äù project, you can convert it to a project that does use Cargo. Move the project code into the _src_ directory and create an appropriate _Cargo.toml_ file.\n\n### [Building and Running a Cargo Project](#building-and-running-a-cargo-project)\n\nNow let‚Äôs look at what‚Äôs different when we build and run the ‚ÄúHello, world!‚Äù program with Cargo! From your _hello\\_cargo_ directory, build your project by entering the following command:\n\n```console\n$ cargo build\n   Compiling hello_cargo v0.1.0 (file:///projects/hello_cargo)\n    Finished dev [unoptimized + debuginfo] target(s) in 2.85 secs\n\n```\n\nThis command creates an executable file in _target/debug/hello\\_cargo_ (or _target\\\\debug\\\\hello\\_cargo.exe_ on Windows) rather than in your current directory. Because the default build is a debug build, Cargo puts the binary in a directory named _debug_. You can run the executable with this command:\n\n```console\n$ ./target/debug/hello_cargo # or .\\target\\debug\\hello_cargo.exe on Windows\nHello, world!\n\n```\n\nIf all goes well, `Hello, world!` should print to the terminal. Running `cargo build` for the first time also causes Cargo to create a new file at the top level: _Cargo.lock_. This file keeps track of the exact versions of dependencies in your project. This project doesn‚Äôt have dependencies, so the file is a bit sparse. You won‚Äôt ever need to change this file manually; Cargo manages its contents for you.\n\nWe just built a project with `cargo build` and ran it with `./target/debug/hello_cargo`, but we can also use `cargo run` to compile the code and then run the resultant executable all in one command:\n\n```console\n$ cargo run\n    Finished dev [unoptimized + debuginfo] target(s) in 0.0 secs\n     Running `target/debug/hello_cargo`\nHello, world!\n\n```\n\nUsing `cargo run` is more convenient than having to remember to run `cargo build` and then use the whole path to the binary, so most developers use `cargo run`.\n\nNotice that this time we didn‚Äôt see output indicating that Cargo was compiling `hello_cargo`. Cargo figured out that the files hadn‚Äôt changed, so it didn‚Äôt rebuild but just ran the binary. If you had modified your source code, Cargo would have rebuilt the project before running it, and you would have seen this output:\n\n```console\n$ cargo run\n   Compiling hello_cargo v0.1.0 (file:///projects/hello_cargo)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.33 secs\n     Running `target/debug/hello_cargo`\nHello, world!\n\n```\n\nCargo also provides a command called `cargo check`. This command quickly checks your code to make sure it compiles but doesn‚Äôt produce an executable:\n\n```console\n$ cargo check\n   Checking hello_cargo v0.1.0 (file:///projects/hello_cargo)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.32 secs\n\n```\n\nWhy would you not want an executable? Often, `cargo check` is much faster than `cargo build` because it skips the step of producing an executable. If you‚Äôre continually checking your work while writing the code, using `cargo check` will speed up the process of letting you know if your project is still compiling! As such, many Rustaceans run `cargo check` periodically as they write their program to make sure it compiles. Then they run `cargo build` when they‚Äôre ready to use the executable.\n\nLet‚Äôs recap what we‚Äôve learned so far about Cargo:\n\n-   We can create a project using `cargo new`.\n-   We can build a project using `cargo build`.\n-   We can build and run a project in one step using `cargo run`.\n-   We can build a project without producing a binary to check for errors using `cargo check`.\n-   Instead of saving the result of the build in the same directory as our code, Cargo stores it in the _target/debug_ directory.\n\nAn additional advantage of using Cargo is that the commands are the same no matter which operating system you‚Äôre working on. So, at this point, we‚Äôll no longer provide specific instructions for Linux and macOS versus Windows.\n\n### [Building for Release](#building-for-release)\n\nWhen your project is finally ready for release, you can use `cargo build --release` to compile it with optimizations. This command will create an executable in _target/release_ instead of _target/debug_. The optimizations make your Rust code run faster, but turning them on lengthens the time it takes for your program to compile. This is why there are two different profiles: one for development, when you want to rebuild quickly and often, and another for building the final program you‚Äôll give to a user that won‚Äôt be rebuilt repeatedly and that will run as fast as possible. If you‚Äôre benchmarking your code‚Äôs running time, be sure to run `cargo build --release` and benchmark with the executable in _target/release_.\n\n### [Cargo as Convention](#cargo-as-convention)\n\nWith simple projects, Cargo doesn‚Äôt provide a lot of value over just using `rustc`, but it will prove its worth as your programs become more intricate. Once programs grow to multiple files or need a dependency, it‚Äôs much easier to let Cargo coordinate the build.\n\nEven though the `hello_cargo` project is simple, it now uses much of the real tooling you‚Äôll use in the rest of your Rust career. In fact, to work on any existing projects, you can use the following commands to check out the code using Git, change to that project‚Äôs directory, and build:\n\n```console\n$ git clone example.org/someproject\n$ cd someproject\n$ cargo build\n\n```\n\nFor more information about Cargo, check out [its documentation](https://doc.rust-lang.org/cargo/).\n\n## [Summary](#summary)\n\nYou‚Äôre already off to a great start on your Rust journey! In this chapter, you‚Äôve learned how to:\n\n-   Install the latest stable version of Rust using `rustup`\n-   Update to a newer Rust version\n-   Open locally installed documentation\n-   Write and run a ‚ÄúHello, world!‚Äù program using `rustc` directly\n-   Create and run a new project using the conventions of Cargo\n\nThis is a great time to build a more substantial program to get used to reading and writing Rust code. So, in Chapter 2, we‚Äôll build a guessing game program. If you would rather start by learning how common programming concepts work in Rust, see Chapter 3 and then return to Chapter 2.\n\n## [Programming a Guessing Game](#programming-a-guessing-game)\n\nLet‚Äôs jump into Rust by working through a hands-on project together! This chapter introduces you to a few common Rust concepts by showing you how to use them in a real program. You‚Äôll learn about `let`, `match`, methods, associated functions, external crates, and more! In the following chapters, we‚Äôll explore these ideas in more detail. In this chapter, you‚Äôll just practice the fundamentals.\n\nWe‚Äôll implement a classic beginner programming problem: a guessing game. Here‚Äôs how it works: the program will generate a random integer between 1 and 100. It will then prompt the player to enter a guess. After a guess is entered, the program will indicate whether the guess is too low or too high. If the guess is correct, the game will print a congratulatory message and exit.\n\n## [Setting Up a New Project](#setting-up-a-new-project)\n\nTo set up a new project, go to the _projects_ directory that you created in Chapter 1 and make a new project using Cargo, like so:\n\n```console\n$ cargo new guessing_game\n$ cd guessing_game\n\n```\n\nThe first command, `cargo new`, takes the name of the project (`guessing_game`) as the first argument. The second command changes to the new project‚Äôs directory.\n\nLook at the generated _Cargo.toml_ file:\n\nFilename: Cargo.toml\n\n```toml\n[package]\nname = \"guessing_game\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n\n[dependencies]\n\n```\n\nAs you saw in Chapter 1, `cargo new` generates a ‚ÄúHello, world!‚Äù program for you. Check out the _src/main.rs_ file:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    println!(\"Hello, world!\");\n}\n```\n\nNow let‚Äôs compile this ‚ÄúHello, world!‚Äù program and run it in the same step using the `cargo run` command:\n\n```console\n$ cargo run\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 1.50s\n     Running `target/debug/guessing_game`\nHello, world!\n\n```\n\nThe `run` command comes in handy when you need to rapidly iterate on a project, as we‚Äôll do in this game, quickly testing each iteration before moving on to the next one.\n\nReopen the _src/main.rs_ file. You‚Äôll be writing all the code in this file.\n\n## [Processing a Guess](#processing-a-guess)\n\nThe first part of the guessing game program will ask for user input, process that input, and check that the input is in the expected form. To start, we‚Äôll allow the player to input a guess. Enter the code in Listing 2-1 into _src/main.rs_.\n\nFilename: src/main.rs\n\n```rust\nuse std::io;\n\nfn main() {\n    println!(\"Guess the number!\");\n\n    println!(\"Please input your guess.\");\n\n    let mut guess = String::new();\n\n    io::stdin()\n        .read_line(&mut guess)\n        .expect(\"Failed to read line\");\n\n    println!(\"You guessed: {}\", guess);\n}\n```\n\nListing 2-1: Code that gets a guess from the user and prints it\n\nThis code contains a lot of information, so let‚Äôs go over it line by line. To obtain user input and then print the result as output, we need to bring the `io` input/output library into scope. The `io` library comes from the standard library, known as `std`:\n\n```rust\nuse std::io;\n\nfn main() {\n    println!(\"Guess the number!\");\n\n    println!(\"Please input your guess.\");\n\n    let mut guess = String::new();\n\n    io::stdin()\n        .read_line(&mut guess)\n        .expect(\"Failed to read line\");\n\n    println!(\"You guessed: {}\", guess);\n}\n```\n\nBy default, Rust has a set of items defined in the standard library that it brings into the scope of every program. This set is called the _prelude_, and you can see everything in it [in the standard library documentation](../std/prelude/index.html).\n\nIf a type you want to use isn‚Äôt in the prelude, you have to bring that type into scope explicitly with a `use` statement. Using the `std::io` library provides you with a number of useful features, including the ability to accept user input.\n\nAs you saw in Chapter 1, the `main` function is the entry point into the program:\n\n```rust\nuse std::io;\n\nfn main() {\n    println!(\"Guess the number!\");\n\n    println!(\"Please input your guess.\");\n\n    let mut guess = String::new();\n\n    io::stdin()\n        .read_line(&mut guess)\n        .expect(\"Failed to read line\");\n\n    println!(\"You guessed: {}\", guess);\n}\n```\n\nThe `fn` syntax declares a new function; the parentheses, `()`, indicate there are no parameters; and the curly bracket, `{`, starts the body of the function.\n\nAs you also learned in Chapter 1, `println!` is a macro that prints a string to the screen:\n\n```rust\nuse std::io;\n\nfn main() {\n    println!(\"Guess the number!\");\n\n    println!(\"Please input your guess.\");\n\n    let mut guess = String::new();\n\n    io::stdin()\n        .read_line(&mut guess)\n        .expect(\"Failed to read line\");\n\n    println!(\"You guessed: {}\", guess);\n}\n```\n\nThis code is printing a prompt stating what the game is and requesting input from the user.\n\n### [Storing Values with Variables](#storing-values-with-variables)\n\nNext, we‚Äôll create a _variable_ to store the user input, like this:\n\n```rust\nuse std::io;\n\nfn main() {\n    println!(\"Guess the number!\");\n\n    println!(\"Please input your guess.\");\n\n    let mut guess = String::new();\n\n    io::stdin()\n        .read_line(&mut guess)\n        .expect(\"Failed to read line\");\n\n    println!(\"You guessed: {}\", guess);\n}\n```\n\nNow the program is getting interesting! There‚Äôs a lot going on in this little line. We use the `let` statement to create the variable. Here‚Äôs another example:\n\n```rust\nlet apples = 5;\n```\n\nThis line creates a new variable named `apples` and binds it to the value 5. In Rust, variables are immutable by default, meaning once we give the variable a value, the value won‚Äôt change. We‚Äôll be discussing this concept in detail in the [‚ÄúVariables and Mutability‚Äù](about:blank/ch03-01-variables-and-mutability.html#variables-and-mutability) section in Chapter 3. To make a variable mutable, we add `mut` before the variable name:\n\n```rust\nlet apples = 5; // immutable\nlet mut bananas = 5; // mutable\n```\n\nNote: The `//` syntax starts a comment that continues until the end of the line. Rust ignores everything in comments. We‚Äôll discuss comments in more detail in [Chapter 3](ch03-04-comments.html).\n\nReturning to the guessing game program, you now know that `let mut guess` will introduce a mutable variable named `guess`. The equal sign (`=`) tells Rust we want to bind something to the variable now. On the right of the equal sign is the value that `guess` is bound to, which is the result of calling `String::new`, a function that returns a new instance of a `String`. [`String`](../std/string/struct.String.html) is a string type provided by the standard library that is a growable, UTF-8 encoded bit of text.\n\nThe `::` syntax in the `::new` line indicates that `new` is an associated function of the `String` type. An _associated function_ is a function that‚Äôs implemented on a type, in this case `String`. This `new` function creates a new, empty string. You‚Äôll find a `new` function on many types because it‚Äôs a common name for a function that makes a new value of some kind.\n\nIn full, the `let mut guess = String::new();` line has created a mutable variable that is currently bound to a new, empty instance of a `String`. Whew!\n\n### [Receiving User Input](#receiving-user-input)\n\nRecall that we included the input/output functionality from the standard library with `use std::io;` on the first line of the program. Now we‚Äôll call the `stdin` function from the `io` module, which will allow us to handle user input:\n\n```rust\nuse std::io;\n\nfn main() {\n    println!(\"Guess the number!\");\n\n    println!(\"Please input your guess.\");\n\n    let mut guess = String::new();\n\n    io::stdin()\n        .read_line(&mut guess)\n        .expect(\"Failed to read line\");\n\n    println!(\"You guessed: {}\", guess);\n}\n```\n\nIf we hadn‚Äôt imported the `io` library with `use std::io;` at the beginning of the program, we could still use the function by writing this function call as `std::io::stdin`. The `stdin` function returns an instance of [`std::io::Stdin`](../std/io/struct.Stdin.html), which is a type that represents a handle to the standard input for your terminal.\n\nNext, the line `.read_line(&mut guess)` calls the [`read_line`](about:blank/std/io/struct.Stdin.html#method.read_line) method on the standard input handle to get input from the user. We‚Äôre also passing `&mut guess` as the argument to `read_line` to tell it what string to store the user input in. The full job of `read_line` is to take whatever the user types into standard input and append that into a string (without overwriting its contents), so we therefore pass that string as an argument. The string argument needs to be mutable so the method can change the string‚Äôs content.\n\nThe `&` indicates that this argument is a _reference_, which gives you a way to let multiple parts of your code access one piece of data without needing to copy that data into memory multiple times. References are a complex feature, and one of Rust‚Äôs major advantages is how safe and easy it is to use references. You don‚Äôt need to know a lot of those details to finish this program. For now, all you need to know is that, like variables, references are immutable by default. Hence, you need to write `&mut guess` rather than `&guess` to make it mutable. (Chapter 4 will explain references more thoroughly.)\n\n### [Handling Potential Failure with `Result`](#handling-potential-failure-with-result)\n\nWe‚Äôre still working on this line of code. We‚Äôre now discussing a third line of text, but note that it‚Äôs still part of a single logical line of code. The next part is this method:\n\n```rust\nuse std::io;\n\nfn main() {\n    println!(\"Guess the number!\");\n\n    println!(\"Please input your guess.\");\n\n    let mut guess = String::new();\n\n    io::stdin()\n        .read_line(&mut guess)\n        .expect(\"Failed to read line\");\n\n    println!(\"You guessed: {}\", guess);\n}\n```\n\nWe could have written this code as:\n\n```rust\nio::stdin().read_line(&mut guess).expect(\"Failed to read line\");\n```\n\nHowever, one long line is difficult to read, so it‚Äôs best to divide it. It‚Äôs often wise to introduce a newline and other whitespace to help break up long lines when you call a method with the `.method_name()` syntax. Now let‚Äôs discuss what this line does.\n\nAs mentioned earlier, `read_line` puts whatever the user enters into the string we pass to it, but it also returns a `Result` value. [`Result`](../std/result/enum.Result.html) is an [_enumeration_](ch06-00-enums.html), often called an _enum_, which is a type that can be in one of multiple possible states. We call each possible state a _variant_.\n\n[Chapter 6](ch06-00-enums.html) will cover enums in more detail. The purpose of these `Result` types is to encode error-handling information.\n\n`Result`‚Äôs variants are `Ok` and `Err`. The `Ok` variant indicates the operation was successful, and inside `Ok` is the successfully generated value. The `Err` variant means the operation failed, and `Err` contains information about how or why the operation failed.\n\nValues of the `Result` type, like values of any type, have methods defined on them. An instance of `Result` has an [`expect` method](about:blank/std/result/enum.Result.html#method.expect) that you can call. If this instance of `Result` is an `Err` value, `expect` will cause the program to crash and display the message that you passed as an argument to `expect`. If the `read_line` method returns an `Err`, it would likely be the result of an error coming from the underlying operating system. If this instance of `Result` is an `Ok` value, `expect` will take the return value that `Ok` is holding and return just that value to you so you can use it. In this case, that value is the number of bytes in the user‚Äôs input.\n\nIf you don‚Äôt call `expect`, the program will compile, but you‚Äôll get a warning:\n\n```console\n$ cargo build\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\nwarning: unused `Result` that must be used\n  --> src/main.rs:10:5\n   |\n10 |     io::stdin().read_line(&mut guess);\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: this `Result` may be an `Err` variant, which should be handled\n   = note: `#[warn(unused_must_use)]` on by default\nhelp: use `let _ = ...` to ignore the resulting value\n   |\n10 |     let _ = io::stdin().read_line(&mut guess);\n   |     +++++++\n\nwarning: `guessing_game` (bin \"guessing_game\") generated 1 warning\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.59s\n\n```\n\nRust warns that you haven‚Äôt used the `Result` value returned from `read_line`, indicating that the program hasn‚Äôt handled a possible error.\n\nThe right way to suppress the warning is to actually write error-handling code, but in our case we just want to crash this program when a problem occurs, so we can use `expect`. You‚Äôll learn about recovering from errors in [Chapter 9](ch09-02-recoverable-errors-with-result.html).\n\n### [Printing Values with `println!` Placeholders](#printing-values-with-println-placeholders)\n\nAside from the closing curly bracket, there‚Äôs only one more line to discuss in the code so far:\n\n```rust\nuse std::io;\n\nfn main() {\n    println!(\"Guess the number!\");\n\n    println!(\"Please input your guess.\");\n\n    let mut guess = String::new();\n\n    io::stdin()\n        .read_line(&mut guess)\n        .expect(\"Failed to read line\");\n\n    println!(\"You guessed: {}\", guess);\n}\n```\n\nThis line prints the string that now contains the user‚Äôs input. The `{}` set of curly brackets is a placeholder: think of `{}` as little crab pincers that hold a value in place. When printing the value of a variable, the variable name can go inside the curly brackets. When printing the result of evaluating an expression, place empty curly brackets in the format string, then follow the format string with a comma-separated list of expressions to print in each empty curly bracket placeholder in the same order. Printing a variable and the result of an expression in one call to `println!` would look like this:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet x = 5;\nlet y = 10;\n\nprintln!(\"x = {x} and y + 2 = {}\", y + 2);\n}\n```\n\nThis code would print `x = 5 and y + 2 = 12`.\n\n### [Testing the First Part](#testing-the-first-part)\n\nLet‚Äôs test the first part of the guessing game. Run it using `cargo run`:\n\n```console\n$ cargo run\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 6.44s\n     Running `target/debug/guessing_game`\nGuess the number!\nPlease input your guess.\n6\nYou guessed: 6\n\n```\n\nAt this point, the first part of the game is done: we‚Äôre getting input from the keyboard and then printing it.\n\n## [Generating a Secret Number](#generating-a-secret-number)\n\nNext, we need to generate a secret number that the user will try to guess. The secret number should be different every time so the game is fun to play more than once. We‚Äôll use a random number between 1 and 100 so the game isn‚Äôt too difficult. Rust doesn‚Äôt yet include random number functionality in its standard library. However, the Rust team does provide a [`rand` crate](https://crates.io/crates/rand) with said functionality.\n\n### [Using a Crate to Get More Functionality](#using-a-crate-to-get-more-functionality)\n\nRemember that a crate is a collection of Rust source code files. The project we‚Äôve been building is a _binary crate_, which is an executable. The `rand` crate is a _library crate_, which contains code that is intended to be used in other programs and can‚Äôt be executed on its own.\n\nCargo‚Äôs coordination of external crates is where Cargo really shines. Before we can write code that uses `rand`, we need to modify the _Cargo.toml_ file to include the `rand` crate as a dependency. Open that file now and add the following line to the bottom, beneath the `[dependencies]` section header that Cargo created for you. Be sure to specify `rand` exactly as we have here, with this version number, or the code examples in this tutorial may not work:\n\nFilename: Cargo.toml\n\n```toml\n[dependencies]\nrand = \"0.8.5\"\n\n```\n\nIn the _Cargo.toml_ file, everything that follows a header is part of that section that continues until another section starts. In `[dependencies]` you tell Cargo which external crates your project depends on and which versions of those crates you require. In this case, we specify the `rand` crate with the semantic version specifier `0.8.5`. Cargo understands [Semantic Versioning](http://semver.org/) (sometimes called _SemVer_), which is a standard for writing version numbers. The specifier `0.8.5` is actually shorthand for `^0.8.5`, which means any version that is at least 0.8.5 but below 0.9.0.\n\nCargo considers these versions to have public APIs compatible with version 0.8.5, and this specification ensures you‚Äôll get the latest patch release that will still compile with the code in this chapter. Any version 0.9.0 or greater is not guaranteed to have the same API as what the following examples use.\n\nNow, without changing any of the code, let‚Äôs build the project, as shown in Listing 2-2.\n\n```console\n$ cargo build\n    Updating crates.io index\n  Downloaded rand v0.8.5\n  Downloaded libc v0.2.127\n  Downloaded getrandom v0.2.7\n  Downloaded cfg-if v1.0.0\n  Downloaded ppv-lite86 v0.2.16\n  Downloaded rand_chacha v0.3.1\n  Downloaded rand_core v0.6.3\n   Compiling libc v0.2.127\n   Compiling getrandom v0.2.7\n   Compiling cfg-if v1.0.0\n   Compiling ppv-lite86 v0.2.16\n   Compiling rand_core v0.6.3\n   Compiling rand_chacha v0.3.1\n   Compiling rand v0.8.5\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 2.53s\n\n```\n\nListing 2-2: The output from running `cargo build` after adding the rand crate as a dependency\n\nYou may see different version numbers (but they will all be compatible with the code, thanks to SemVer!) and different lines (depending on the operating system), and the lines may be in a different order.\n\nWhen we include an external dependency, Cargo fetches the latest versions of everything that dependency needs from the _registry_, which is a copy of data from [Crates.io](https://crates.io/). Crates.io is where people in the Rust ecosystem post their open source Rust projects for others to use.\n\nAfter updating the registry, Cargo checks the `[dependencies]` section and downloads any crates listed that aren‚Äôt already downloaded. In this case, although we only listed `rand` as a dependency, Cargo also grabbed other crates that `rand` depends on to work. After downloading the crates, Rust compiles them and then compiles the project with the dependencies available.\n\nIf you immediately run `cargo build` again without making any changes, you won‚Äôt get any output aside from the `Finished` line. Cargo knows it has already downloaded and compiled the dependencies, and you haven‚Äôt changed anything about them in your _Cargo.toml_ file. Cargo also knows that you haven‚Äôt changed anything about your code, so it doesn‚Äôt recompile that either. With nothing to do, it simply exits.\n\nIf you open the _src/main.rs_ file, make a trivial change, and then save it and build again, you‚Äôll only see two lines of output:\n\n```console\n$ cargo build\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 2.53 secs\n\n```\n\nThese lines show that Cargo only updates the build with your tiny change to the _src/main.rs_ file. Your dependencies haven‚Äôt changed, so Cargo knows it can reuse what it has already downloaded and compiled for those.\n\n#### [Ensuring Reproducible Builds with the _Cargo.lock_ File](#ensuring-reproducible-builds-with-the-cargolock-file)\n\nCargo has a mechanism that ensures you can rebuild the same artifact every time you or anyone else builds your code: Cargo will use only the versions of the dependencies you specified until you indicate otherwise. For example, say that next week version 0.8.6 of the `rand` crate comes out, and that version contains an important bug fix, but it also contains a regression that will break your code. To handle this, Rust creates the _Cargo.lock_ file the first time you run `cargo build`, so we now have this in the _guessing\\_game_ directory.\n\nWhen you build a project for the first time, Cargo figures out all the versions of the dependencies that fit the criteria and then writes them to the _Cargo.lock_ file. When you build your project in the future, Cargo will see that the _Cargo.lock_ file exists and will use the versions specified there rather than doing all the work of figuring out versions again. This lets you have a reproducible build automatically. In other words, your project will remain at 0.8.5 until you explicitly upgrade, thanks to the _Cargo.lock_ file. Because the _Cargo.lock_ file is important for reproducible builds, it‚Äôs often checked into source control with the rest of the code in your project.\n\n#### [Updating a Crate to Get a New Version](#updating-a-crate-to-get-a-new-version)\n\nWhen you _do_ want to update a crate, Cargo provides the command `update`, which will ignore the _Cargo.lock_ file and figure out all the latest versions that fit your specifications in _Cargo.toml_. Cargo will then write those versions to the _Cargo.lock_ file. In this case, Cargo will only look for versions greater than 0.8.5 and less than 0.9.0. If the `rand` crate has released the two new versions 0.8.6 and 0.9.0, you would see the following if you ran `cargo update`:\n\n```console\n$ cargo update\n    Updating crates.io index\n    Updating rand v0.8.5 -> v0.8.6\n\n```\n\nCargo ignores the 0.9.0 release. At this point, you would also notice a change in your _Cargo.lock_ file noting that the version of the `rand` crate you are now using is 0.8.6. To use `rand` version 0.9.0 or any version in the 0.9._x_ series, you‚Äôd have to update the _Cargo.toml_ file to look like this instead:\n\n```toml\n[dependencies]\nrand = \"0.9.0\"\n\n```\n\nThe next time you run `cargo build`, Cargo will update the registry of crates available and reevaluate your `rand` requirements according to the new version you have specified.\n\nThere‚Äôs a lot more to say about [Cargo](https://doc.rust-lang.org/cargo/) and [its ecosystem](https://doc.rust-lang.org/cargo/reference/publishing.html), which we‚Äôll discuss in Chapter 14, but for now, that‚Äôs all you need to know. Cargo makes it very easy to reuse libraries, so Rustaceans are able to write smaller projects that are assembled from a number of packages.\n\n### [Generating a Random Number](#generating-a-random-number)\n\nLet‚Äôs start using `rand` to generate a number to guess. The next step is to update _src/main.rs_, as shown in Listing 2-3.\n\nFilename: src/main.rs\n\n```rust\nuse std::io;\nuse rand::Rng;\n\nfn main() {\n    println!(\"Guess the number!\");\n\n    let secret_number = rand::thread_rng().gen_range(1..=100);\n\n    println!(\"The secret number is: {secret_number}\");\n\n    println!(\"Please input your guess.\");\n\n    let mut guess = String::new();\n\n    io::stdin()\n        .read_line(&mut guess)\n        .expect(\"Failed to read line\");\n\n    println!(\"You guessed: {guess}\");\n}\n```\n\nListing 2-3: Adding code to generate a random number\n\nFirst we add the line `use rand::Rng;`. The `Rng` trait defines methods that random number generators implement, and this trait must be in scope for us to use those methods. Chapter 10 will cover traits in detail.\n\nNext, we‚Äôre adding two lines in the middle. In the first line, we call the `rand::thread_rng` function that gives us the particular random number generator we‚Äôre going to use: one that is local to the current thread of execution and is seeded by the operating system. Then we call the `gen_range` method on the random number generator. This method is defined by the `Rng` trait that we brought into scope with the `use rand::Rng;` statement. The `gen_range` method takes a range expression as an argument and generates a random number in the range. The kind of range expression we‚Äôre using here takes the form `start..=end` and is inclusive on the lower and upper bounds, so we need to specify `1..=100` to request a number between 1 and 100.\n\nNote: You won‚Äôt just know which traits to use and which methods and functions to call from a crate, so each crate has documentation with instructions for using it. Another neat feature of Cargo is that running the `cargo doc --open` command will build documentation provided by all your dependencies locally and open it in your browser. If you‚Äôre interested in other functionality in the `rand` crate, for example, run `cargo doc --open` and click `rand` in the sidebar on the left.\n\nThe second new line prints the secret number. This is useful while we‚Äôre developing the program to be able to test it, but we‚Äôll delete it from the final version. It‚Äôs not much of a game if the program prints the answer as soon as it starts!\n\nTry running the program a few times:\n\n```console\n$ cargo run\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 2.53s\n     Running `target/debug/guessing_game`\nGuess the number!\nThe secret number is: 7\nPlease input your guess.\n4\nYou guessed: 4\n\n$ cargo run\n    Finished dev [unoptimized + debuginfo] target(s) in 0.02s\n     Running `target/debug/guessing_game`\nGuess the number!\nThe secret number is: 83\nPlease input your guess.\n5\nYou guessed: 5\n\n```\n\nYou should get different random numbers, and they should all be numbers between 1 and 100. Great job!\n\n## [Comparing the Guess to the Secret Number](#comparing-the-guess-to-the-secret-number)\n\nNow that we have user input and a random number, we can compare them. That step is shown in Listing 2-4. Note that this code won‚Äôt compile just yet, as we will explain.\n\nFilename: src/main.rs\n\n```rust\nuse rand::Rng;\nuse std::cmp::Ordering;\nuse std::io;\n\nfn main() {\n    // --snip--\n    println!(\"Guess the number!\");\n\n    let secret_number = rand::thread_rng().gen_range(1..=100);\n\n    println!(\"The secret number is: {secret_number}\");\n\n    println!(\"Please input your guess.\");\n\n    let mut guess = String::new();\n\n    io::stdin()\n        .read_line(&mut guess)\n        .expect(\"Failed to read line\");\n\n    println!(\"You guessed: {guess}\");\n\n    match guess.cmp(&secret_number) {\n        Ordering::Less => println!(\"Too small!\"),\n        Ordering::Greater => println!(\"Too big!\"),\n        Ordering::Equal => println!(\"You win!\"),\n    }\n}\n```\n\nListing 2-4: Handling the possible return values of comparing two numbers\n\nFirst we add another `use` statement, bringing a type called `std::cmp::Ordering` into scope from the standard library. The `Ordering` type is another enum and has the variants `Less`, `Greater`, and `Equal`. These are the three outcomes that are possible when you compare two values.\n\nThen we add five new lines at the bottom that use the `Ordering` type. The `cmp` method compares two values and can be called on anything that can be compared. It takes a reference to whatever you want to compare with: here it‚Äôs comparing `guess` to `secret_number`. Then it returns a variant of the `Ordering` enum we brought into scope with the `use` statement. We use a [`match`](ch06-02-match.html) expression to decide what to do next based on which variant of `Ordering` was returned from the call to `cmp` with the values in `guess` and `secret_number`.\n\nA `match` expression is made up of _arms_. An arm consists of a _pattern_ to match against, and the code that should be run if the value given to `match` fits that arm‚Äôs pattern. Rust takes the value given to `match` and looks through each arm‚Äôs pattern in turn. Patterns and the `match` construct are powerful Rust features: they let you express a variety of situations your code might encounter and they make sure you handle them all. These features will be covered in detail in Chapter 6 and Chapter 18, respectively.\n\nLet‚Äôs walk through an example with the `match` expression we use here. Say that the user has guessed 50 and the randomly generated secret number this time is 38.\n\nWhen the code compares 50 to 38, the `cmp` method will return `Ordering::Greater` because 50 is greater than 38. The `match` expression gets the `Ordering::Greater` value and starts checking each arm‚Äôs pattern. It looks at the first arm‚Äôs pattern, `Ordering::Less`, and sees that the value `Ordering::Greater` does not match `Ordering::Less`, so it ignores the code in that arm and moves to the next arm. The next arm‚Äôs pattern is `Ordering::Greater`, which _does_ match `Ordering::Greater`! The associated code in that arm will execute and print `Too big!` to the screen. The `match` expression ends after the first successful match, so it won‚Äôt look at the last arm in this scenario.\n\nHowever, the code in Listing 2-4 won‚Äôt compile yet. Let‚Äôs try it:\n\n```console\n$ cargo build\n   Compiling libc v0.2.86\n   Compiling getrandom v0.2.2\n   Compiling cfg-if v1.0.0\n   Compiling ppv-lite86 v0.2.10\n   Compiling rand_core v0.6.2\n   Compiling rand_chacha v0.3.0\n   Compiling rand v0.8.5\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\nerror[E0308]: mismatched types\n  --> src/main.rs:22:21\n   |\n22 |     match guess.cmp(&secret_number) {\n   |                 --- ^^^^^^^^^^^^^^ expected `&String`, found `&{integer}`\n   |                 |\n   |                 arguments to this method are incorrect\n   |\n   = note: expected reference `&String`\n              found reference `&{integer}`\nnote: method defined here\n  --> /rustc/9b00956e56009bab2aa15d7bff10916599e3d6d6/library/core/src/cmp.rs:836:8\n\nFor more information about this error, try `rustc --explain E0308`.\nerror: could not compile `guessing_game` (bin \"guessing_game\") due to 1 previous error\n\n```\n\nThe core of the error states that there are _mismatched types_. Rust has a strong, static type system. However, it also has type inference. When we wrote `let mut guess = String::new()`, Rust was able to infer that `guess` should be a `String` and didn‚Äôt make us write the type. The `secret_number`, on the other hand, is a number type. A few of Rust‚Äôs number types can have a value between 1 and 100: `i32`, a 32-bit number; `u32`, an unsigned 32-bit number; `i64`, a 64-bit number; as well as others. Unless otherwise specified, Rust defaults to an `i32`, which is the type of `secret_number` unless you add type information elsewhere that would cause Rust to infer a different numerical type. The reason for the error is that Rust cannot compare a string and a number type.\n\nUltimately, we want to convert the `String` the program reads as input into a number type so we can compare it numerically to the secret number. We do so by adding this line to the `main` function body:\n\nFilename: src/main.rs\n\n```rust\nuse rand::Rng;\nuse std::cmp::Ordering;\nuse std::io;\n\nfn main() {\n    println!(\"Guess the number!\");\n\n    let secret_number = rand::thread_rng().gen_range(1..=100);\n\n    println!(\"The secret number is: {secret_number}\");\n\n    println!(\"Please input your guess.\");\n\n    // --snip--\n\n    let mut guess = String::new();\n\n    io::stdin()\n        .read_line(&mut guess)\n        .expect(\"Failed to read line\");\n\n    let guess: u32 = guess.trim().parse().expect(\"Please type a number!\");\n\n    println!(\"You guessed: {guess}\");\n\n    match guess.cmp(&secret_number) {\n        Ordering::Less => println!(\"Too small!\"),\n        Ordering::Greater => println!(\"Too big!\"),\n        Ordering::Equal => println!(\"You win!\"),\n    }\n}\n```\n\nThe line is:\n\n```rust\nlet guess: u32 = guess.trim().parse().expect(\"Please type a number!\");\n```\n\nWe create a variable named `guess`. But wait, doesn‚Äôt the program already have a variable named `guess`? It does, but helpfully Rust allows us to shadow the previous value of `guess` with a new one. _Shadowing_ lets us reuse the `guess` variable name rather than forcing us to create two unique variables, such as `guess_str` and `guess`, for example. We‚Äôll cover this in more detail in [Chapter 3](about:blank/ch03-01-variables-and-mutability.html#shadowing), but for now, know that this feature is often used when you want to convert a value from one type to another type.\n\nWe bind this new variable to the expression `guess.trim().parse()`. The `guess` in the expression refers to the original `guess` variable that contained the input as a string. The `trim` method on a `String` instance will eliminate any whitespace at the beginning and end, which we must do to be able to compare the string to the `u32`, which can only contain numerical data. The user must press enter to satisfy `read_line` and input their guess, which adds a newline character to the string. For example, if the user types 5 and presses enter, `guess` looks like this: `5\\n`. The `\\n` represents ‚Äúnewline.‚Äù (On Windows, pressing enter results in a carriage return and a newline, `\\r\\n`.) The `trim` method eliminates `\\n` or `\\r\\n`, resulting in just `5`.\n\nThe [`parse` method on strings](about:blank/std/primitive.str.html#method.parse) converts a string to another type. Here, we use it to convert from a string to a number. We need to tell Rust the exact number type we want by using `let guess: u32`. The colon (`:`) after `guess` tells Rust we‚Äôll annotate the variable‚Äôs type. Rust has a few built-in number types; the `u32` seen here is an unsigned, 32-bit integer. It‚Äôs a good default choice for a small positive number. You‚Äôll learn about other number types in [Chapter 3](about:blank/ch03-02-data-types.html#integer-types).\n\nAdditionally, the `u32` annotation in this example program and the comparison with `secret_number` means Rust will infer that `secret_number` should be a `u32` as well. So now the comparison will be between two values of the same type!\n\nThe `parse` method will only work on characters that can logically be converted into numbers and so can easily cause errors. If, for example, the string contained `Aüëç%`, there would be no way to convert that to a number. Because it might fail, the `parse` method returns a `Result` type, much as the `read_line` method does (discussed earlier in [‚ÄúHandling Potential Failure with `Result`‚Äù](about:blank/ch02-00-guessing-game-tutorial.html#handling-potential-failure-with-result)). We‚Äôll treat this `Result` the same way by using the `expect` method again. If `parse` returns an `Err` `Result` variant because it couldn‚Äôt create a number from the string, the `expect` call will crash the game and print the message we give it. If `parse` can successfully convert the string to a number, it will return the `Ok` variant of `Result`, and `expect` will return the number that we want from the `Ok` value.\n\nLet‚Äôs run the program now:\n\n```console\n$ cargo run\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.43s\n     Running `target/debug/guessing_game`\nGuess the number!\nThe secret number is: 58\nPlease input your guess.\n  76\nYou guessed: 76\nToo big!\n\n```\n\nNice! Even though spaces were added before the guess, the program still figured out that the user guessed 76. Run the program a few times to verify the different behavior with different kinds of input: guess the number correctly, guess a number that is too high, and guess a number that is too low.\n\nWe have most of the game working now, but the user can make only one guess. Let‚Äôs change that by adding a loop!\n\n## [Allowing Multiple Guesses with Looping](#allowing-multiple-guesses-with-looping)\n\nThe `loop` keyword creates an infinite loop. We‚Äôll add a loop to give users more chances at guessing the number:\n\nFilename: src/main.rs\n\n```rust\nuse rand::Rng;\nuse std::cmp::Ordering;\nuse std::io;\n\nfn main() {\n    println!(\"Guess the number!\");\n\n    let secret_number = rand::thread_rng().gen_range(1..=100);\n\n    // --snip--\n\n    println!(\"The secret number is: {secret_number}\");\n\n    loop {\n        println!(\"Please input your guess.\");\n\n        // --snip--\n\n\n        let mut guess = String::new();\n\n        io::stdin()\n            .read_line(&mut guess)\n            .expect(\"Failed to read line\");\n\n        let guess: u32 = guess.trim().parse().expect(\"Please type a number!\");\n\n        println!(\"You guessed: {guess}\");\n\n        match guess.cmp(&secret_number) {\n            Ordering::Less => println!(\"Too small!\"),\n            Ordering::Greater => println!(\"Too big!\"),\n            Ordering::Equal => println!(\"You win!\"),\n        }\n    }\n}\n```\n\nAs you can see, we‚Äôve moved everything from the guess input prompt onward into a loop. Be sure to indent the lines inside the loop another four spaces each and run the program again. The program will now ask for another guess forever, which actually introduces a new problem. It doesn‚Äôt seem like the user can quit!\n\nThe user could always interrupt the program by using the keyboard shortcut ctrl\\-c. But there‚Äôs another way to escape this insatiable monster, as mentioned in the `parse` discussion in [‚ÄúComparing the Guess to the Secret Number‚Äù](about:blank/ch02-00-guessing-game-tutorial.html#comparing-the-guess-to-the-secret-number): if the user enters a non-number answer, the program will crash. We can take advantage of that to allow the user to quit, as shown here:\n\n```console\n$ cargo run\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 1.50s\n     Running `target/debug/guessing_game`\nGuess the number!\nThe secret number is: 59\nPlease input your guess.\n45\nYou guessed: 45\nToo small!\nPlease input your guess.\n60\nYou guessed: 60\nToo big!\nPlease input your guess.\n59\nYou guessed: 59\nYou win!\nPlease input your guess.\nquit\nthread 'main' panicked at 'Please type a number!: ParseIntError { kind: InvalidDigit }', src/main.rs:28:47\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\n```\n\nTyping `quit` will quit the game, but as you‚Äôll notice, so will entering any other non-number input. This is suboptimal, to say the least; we want the game to also stop when the correct number is guessed.\n\n### [Quitting After a Correct Guess](#quitting-after-a-correct-guess)\n\nLet‚Äôs program the game to quit when the user wins by adding a `break` statement:\n\nFilename: src/main.rs\n\n```rust\nuse rand::Rng;\nuse std::cmp::Ordering;\nuse std::io;\n\nfn main() {\n    println!(\"Guess the number!\");\n\n    let secret_number = rand::thread_rng().gen_range(1..=100);\n\n    println!(\"The secret number is: {secret_number}\");\n\n    loop {\n        println!(\"Please input your guess.\");\n\n        let mut guess = String::new();\n\n        io::stdin()\n            .read_line(&mut guess)\n            .expect(\"Failed to read line\");\n\n        let guess: u32 = guess.trim().parse().expect(\"Please type a number!\");\n\n        println!(\"You guessed: {guess}\");\n\n        // --snip--\n\n        match guess.cmp(&secret_number) {\n            Ordering::Less => println!(\"Too small!\"),\n            Ordering::Greater => println!(\"Too big!\"),\n            Ordering::Equal => {\n                println!(\"You win!\");\n                break;\n            }\n        }\n    }\n}\n```\n\nAdding the `break` line after `You win!` makes the program exit the loop when the user guesses the secret number correctly. Exiting the loop also means exiting the program, because the loop is the last part of `main`.\n\n### [Handling Invalid Input](#handling-invalid-input)\n\nTo further refine the game‚Äôs behavior, rather than crashing the program when the user inputs a non-number, let‚Äôs make the game ignore a non-number so the user can continue guessing. We can do that by altering the line where `guess` is converted from a `String` to a `u32`, as shown in Listing 2-5.\n\nFilename: src/main.rs\n\n```rust\nuse rand::Rng;\nuse std::cmp::Ordering;\nuse std::io;\n\nfn main() {\n    println!(\"Guess the number!\");\n\n    let secret_number = rand::thread_rng().gen_range(1..=100);\n\n    println!(\"The secret number is: {secret_number}\");\n\n    loop {\n        println!(\"Please input your guess.\");\n\n        let mut guess = String::new();\n\n        // --snip--\n\n        io::stdin()\n            .read_line(&mut guess)\n            .expect(\"Failed to read line\");\n\n        let guess: u32 = match guess.trim().parse() {\n            Ok(num) => num,\n            Err(_) => continue,\n        };\n\n        println!(\"You guessed: {guess}\");\n\n        // --snip--\n\n        match guess.cmp(&secret_number) {\n            Ordering::Less => println!(\"Too small!\"),\n            Ordering::Greater => println!(\"Too big!\"),\n            Ordering::Equal => {\n                println!(\"You win!\");\n                break;\n            }\n        }\n    }\n}\n```\n\nListing 2-5: Ignoring a non-number guess and asking for another guess instead of crashing the program\n\nWe switch from an `expect` call to a `match` expression to move from crashing on an error to handling the error. Remember that `parse` returns a `Result` type and `Result` is an enum that has the variants `Ok` and `Err`. We‚Äôre using a `match` expression here, as we did with the `Ordering` result of the `cmp` method.\n\nIf `parse` is able to successfully turn the string into a number, it will return an `Ok` value that contains the resultant number. That `Ok` value will match the first arm‚Äôs pattern, and the `match` expression will just return the `num` value that `parse` produced and put inside the `Ok` value. That number will end up right where we want it in the new `guess` variable we‚Äôre creating.\n\nIf `parse` is _not_ able to turn the string into a number, it will return an `Err` value that contains more information about the error. The `Err` value does not match the `Ok(num)` pattern in the first `match` arm, but it does match the `Err(_)` pattern in the second arm. The underscore, `_`, is a catchall value; in this example, we‚Äôre saying we want to match all `Err` values, no matter what information they have inside them. So the program will execute the second arm‚Äôs code, `continue`, which tells the program to go to the next iteration of the `loop` and ask for another guess. So, effectively, the program ignores all errors that `parse` might encounter!\n\nNow everything in the program should work as expected. Let‚Äôs try it:\n\n```console\n$ cargo run\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 4.45s\n     Running `target/debug/guessing_game`\nGuess the number!\nThe secret number is: 61\nPlease input your guess.\n10\nYou guessed: 10\nToo small!\nPlease input your guess.\n99\nYou guessed: 99\nToo big!\nPlease input your guess.\nfoo\nPlease input your guess.\n61\nYou guessed: 61\nYou win!\n\n```\n\nAwesome! With one tiny final tweak, we will finish the guessing game. Recall that the program is still printing the secret number. That worked well for testing, but it ruins the game. Let‚Äôs delete the `println!` that outputs the secret number. Listing 2-6 shows the final code.\n\nFilename: src/main.rs\n\n```rust\nuse rand::Rng;\nuse std::cmp::Ordering;\nuse std::io;\n\nfn main() {\n    println!(\"Guess the number!\");\n\n    let secret_number = rand::thread_rng().gen_range(1..=100);\n\n    loop {\n        println!(\"Please input your guess.\");\n\n        let mut guess = String::new();\n\n        io::stdin()\n            .read_line(&mut guess)\n            .expect(\"Failed to read line\");\n\n        let guess: u32 = match guess.trim().parse() {\n            Ok(num) => num,\n            Err(_) => continue,\n        };\n\n        println!(\"You guessed: {guess}\");\n\n        match guess.cmp(&secret_number) {\n            Ordering::Less => println!(\"Too small!\"),\n            Ordering::Greater => println!(\"Too big!\"),\n            Ordering::Equal => {\n                println!(\"You win!\");\n                break;\n            }\n        }\n    }\n}\n```\n\nListing 2-6: Complete guessing game code\n\nAt this point, you‚Äôve successfully built the guessing game. Congratulations!\n\n## [Summary](#summary-1)\n\nThis project was a hands-on way to introduce you to many new Rust concepts: `let`, `match`, functions, the use of external crates, and more. In the next few chapters, you‚Äôll learn about these concepts in more detail. Chapter 3 covers concepts that most programming languages have, such as variables, data types, and functions, and shows how to use them in Rust. Chapter 4 explores ownership, a feature that makes Rust different from other languages. Chapter 5 discusses structs and method syntax, and Chapter 6 explains how enums work.\n\n## [Common Programming Concepts](#common-programming-concepts)\n\nThis chapter covers concepts that appear in almost every programming language and how they work in Rust. Many programming languages have much in common at their core. None of the concepts presented in this chapter are unique to Rust, but we‚Äôll discuss them in the context of Rust and explain the conventions around using these concepts.\n\nSpecifically, you‚Äôll learn about variables, basic types, functions, comments, and control flow. These foundations will be in every Rust program, and learning them early will give you a strong core to start from.\n\n#### [Keywords](#keywords)\n\nThe Rust language has a set of _keywords_ that are reserved for use by the language only, much as in other languages. Keep in mind that you cannot use these words as names of variables or functions. Most of the keywords have special meanings, and you‚Äôll be using them to do various tasks in your Rust programs; a few have no current functionality associated with them but have been reserved for functionality that might be added to Rust in the future. You can find a list of the keywords in [Appendix A](appendix-01-keywords.html).\n\n## [Variables and Mutability](#variables-and-mutability)\n\nAs mentioned in the [‚ÄúStoring Values with Variables‚Äù](about:blank/ch02-00-guessing-game-tutorial.html#storing-values-with-variables) section, by default, variables are immutable. This is one of many nudges Rust gives you to write your code in a way that takes advantage of the safety and easy concurrency that Rust offers. However, you still have the option to make your variables mutable. Let‚Äôs explore how and why Rust encourages you to favor immutability and why sometimes you might want to opt out.\n\nWhen a variable is immutable, once a value is bound to a name, you can‚Äôt change that value. To illustrate this, generate a new project called _variables_ in your _projects_ directory by using `cargo new variables`.\n\nThen, in your new _variables_ directory, open _src/main.rs_ and replace its code with the following code, which won‚Äôt compile just yet:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let x = 5;\n    println!(\"The value of x is: {x}\");\n    x = 6;\n    println!(\"The value of x is: {x}\");\n}\n```\n\nSave and run the program using `cargo run`. You should receive an error message regarding an immutability error, as shown in this output:\n\n```console\n$ cargo run\n   Compiling variables v0.1.0 (file:///projects/variables)\nerror[E0384]: cannot assign twice to immutable variable `x`\n --> src/main.rs:4:5\n  |\n2 |     let x = 5;\n  |         -\n  |         |\n  |         first assignment to `x`\n  |         help: consider making this binding mutable: `mut x`\n3 |     println!(\"The value of x is: {x}\");\n4 |     x = 6;\n  |     ^^^^^ cannot assign twice to immutable variable\n\nFor more information about this error, try `rustc --explain E0384`.\nerror: could not compile `variables` (bin \"variables\") due to 1 previous error\n\n```\n\nThis example shows how the compiler helps you find errors in your programs. Compiler errors can be frustrating, but really they only mean your program isn‚Äôt safely doing what you want it to do yet; they do _not_ mean that you‚Äôre not a good programmer! Experienced Rustaceans still get compiler errors.\n\nYou received the error message ``cannot assign twice to immutable variable `x` `` because you tried to assign a second value to the immutable `x` variable.\n\nIt‚Äôs important that we get compile-time errors when we attempt to change a value that‚Äôs designated as immutable because this very situation can lead to bugs. If one part of our code operates on the assumption that a value will never change and another part of our code changes that value, it‚Äôs possible that the first part of the code won‚Äôt do what it was designed to do. The cause of this kind of bug can be difficult to track down after the fact, especially when the second piece of code changes the value only _sometimes_. The Rust compiler guarantees that when you state that a value won‚Äôt change, it really won‚Äôt change, so you don‚Äôt have to keep track of it yourself. Your code is thus easier to reason through.\n\nBut mutability can be very useful, and can make code more convenient to write. Although variables are immutable by default, you can make them mutable by adding `mut` in front of the variable name as you did in [Chapter 2](about:blank/ch02-00-guessing-game-tutorial.html#storing-values-with-variables). Adding `mut` also conveys intent to future readers of the code by indicating that other parts of the code will be changing this variable‚Äôs value.\n\nFor example, let‚Äôs change _src/main.rs_ to the following:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let mut x = 5;\n    println!(\"The value of x is: {x}\");\n    x = 6;\n    println!(\"The value of x is: {x}\");\n}\n```\n\nWhen we run the program now, we get this:\n\n```console\n$ cargo run\n   Compiling variables v0.1.0 (file:///projects/variables)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.30s\n     Running `target/debug/variables`\nThe value of x is: 5\nThe value of x is: 6\n\n```\n\nWe‚Äôre allowed to change the value bound to `x` from `5` to `6` when `mut` is used. Ultimately, deciding whether to use mutability or not is up to you and depends on what you think is clearest in that particular situation.\n\n### [Constants](#constants)\n\nLike immutable variables, _constants_ are values that are bound to a name and are not allowed to change, but there are a few differences between constants and variables.\n\nFirst, you aren‚Äôt allowed to use `mut` with constants. Constants aren‚Äôt just immutable by default‚Äîthey‚Äôre always immutable. You declare constants using the `const` keyword instead of the `let` keyword, and the type of the value _must_ be annotated. We‚Äôll cover types and type annotations in the next section, [‚ÄúData Types‚Äù](about:blank/ch03-02-data-types.html#data-types), so don‚Äôt worry about the details right now. Just know that you must always annotate the type.\n\nConstants can be declared in any scope, including the global scope, which makes them useful for values that many parts of code need to know about.\n\nThe last difference is that constants may be set only to a constant expression, not the result of a value that could only be computed at runtime.\n\nHere‚Äôs an example of a constant declaration:\n\n```rust\n#![allow(unused)]\nfn main() {\nconst THREE_HOURS_IN_SECONDS: u32 = 60 * 60 * 3;\n}\n```\n\nThe constant‚Äôs name is `THREE_HOURS_IN_SECONDS` and its value is set to the result of multiplying 60 (the number of seconds in a minute) by 60 (the number of minutes in an hour) by 3 (the number of hours we want to count in this program). Rust‚Äôs naming convention for constants is to use all uppercase with underscores between words. The compiler is able to evaluate a limited set of operations at compile time, which lets us choose to write out this value in a way that‚Äôs easier to understand and verify, rather than setting this constant to the value 10,800. See the [Rust Reference‚Äôs section on constant evaluation](../reference/const_eval.html) for more information on what operations can be used when declaring constants.\n\nConstants are valid for the entire time a program runs, within the scope in which they were declared. This property makes constants useful for values in your application domain that multiple parts of the program might need to know about, such as the maximum number of points any player of a game is allowed to earn, or the speed of light.\n\nNaming hardcoded values used throughout your program as constants is useful in conveying the meaning of that value to future maintainers of the code. It also helps to have only one place in your code you would need to change if the hardcoded value needed to be updated in the future.\n\n### [Shadowing](#shadowing)\n\nAs you saw in the guessing game tutorial in [Chapter 2](about:blank/ch02-00-guessing-game-tutorial.html#comparing-the-guess-to-the-secret-number), you can declare a new variable with the same name as a previous variable. Rustaceans say that the first variable is _shadowed_ by the second, which means that the second variable is what the compiler will see when you use the name of the variable. In effect, the second variable overshadows the first, taking any uses of the variable name to itself until either it itself is shadowed or the scope ends. We can shadow a variable by using the same variable‚Äôs name and repeating the use of the `let` keyword as follows:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let x = 5;\n\n    let x = x + 1;\n\n    {\n        let x = x * 2;\n        println!(\"The value of x in the inner scope is: {x}\");\n    }\n\n    println!(\"The value of x is: {x}\");\n}\n```\n\nThis program first binds `x` to a value of `5`. Then it creates a new variable `x` by repeating `let x =`, taking the original value and adding `1` so the value of `x` is then `6`. Then, within an inner scope created with the curly brackets, the third `let` statement also shadows `x` and creates a new variable, multiplying the previous value by `2` to give `x` a value of `12`. When that scope is over, the inner shadowing ends and `x` returns to being `6`. When we run this program, it will output the following:\n\n```console\n$ cargo run\n   Compiling variables v0.1.0 (file:///projects/variables)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.31s\n     Running `target/debug/variables`\nThe value of x in the inner scope is: 12\nThe value of x is: 6\n\n```\n\nShadowing is different from marking a variable as `mut` because we‚Äôll get a compile-time error if we accidentally try to reassign to this variable without using the `let` keyword. By using `let`, we can perform a few transformations on a value but have the variable be immutable after those transformations have been completed.\n\nThe other difference between `mut` and shadowing is that because we‚Äôre effectively creating a new variable when we use the `let` keyword again, we can change the type of the value but reuse the same name. For example, say our program asks a user to show how many spaces they want between some text by inputting space characters, and then we want to store that input as a number:\n\n```rust\nfn main() {\n    let spaces = \"   \";\n    let spaces = spaces.len();\n}\n```\n\nThe first `spaces` variable is a string type and the second `spaces` variable is a number type. Shadowing thus spares us from having to come up with different names, such as `spaces_str` and `spaces_num`; instead, we can reuse the simpler `spaces` name. However, if we try to use `mut` for this, as shown here, we‚Äôll get a compile-time error:\n\n```rust\nfn main() {\n    let mut spaces = \"   \";\n    spaces = spaces.len();\n}\n```\n\nThe error says we‚Äôre not allowed to mutate a variable‚Äôs type:\n\n```console\n$ cargo run\n   Compiling variables v0.1.0 (file:///projects/variables)\nerror[E0308]: mismatched types\n --> src/main.rs:3:14\n  |\n2 |     let mut spaces = \"   \";\n  |                      ----- expected due to this value\n3 |     spaces = spaces.len();\n  |              ^^^^^^^^^^^^ expected `&str`, found `usize`\n\nFor more information about this error, try `rustc --explain E0308`.\nerror: could not compile `variables` (bin \"variables\") due to 1 previous error\n\n```\n\nNow that we‚Äôve explored how variables work, let‚Äôs look at more data types they can have.\n\n## [Data Types](#data-types)\n\nEvery value in Rust is of a certain _data type_, which tells Rust what kind of data is being specified so it knows how to work with that data. We‚Äôll look at two data type subsets: scalar and compound.\n\nKeep in mind that Rust is a _statically typed_ language, which means that it must know the types of all variables at compile time. The compiler can usually infer what type we want to use based on the value and how we use it. In cases when many types are possible, such as when we converted a `String` to a numeric type using `parse` in the [‚ÄúComparing the Guess to the Secret Number‚Äù](about:blank/ch02-00-guessing-game-tutorial.html#comparing-the-guess-to-the-secret-number) section in Chapter 2, we must add a type annotation, like this:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet guess: u32 = \"42\".parse().expect(\"Not a number!\");\n}\n```\n\nIf we don‚Äôt add the `: u32` type annotation shown in the preceding code, Rust will display the following error, which means the compiler needs more information from us to know which type we want to use:\n\n```console\n$ cargo build\n   Compiling no_type_annotations v0.1.0 (file:///projects/no_type_annotations)\nerror[E0284]: type annotations needed\n --> src/main.rs:2:9\n  |\n2 |     let guess = \"42\".parse().expect(\"Not a number!\");\n  |         ^^^^^        ----- type must be known at this point\n  |\n  = note: cannot satisfy `<_ as FromStr>::Err == _`\nhelp: consider giving `guess` an explicit type\n  |\n2 |     let guess: /* Type */ = \"42\".parse().expect(\"Not a number!\");\n  |              ++++++++++++\n\nFor more information about this error, try `rustc --explain E0284`.\nerror: could not compile `no_type_annotations` (bin \"no_type_annotations\") due to 1 previous error\n\n```\n\nYou‚Äôll see different type annotations for other data types.\n\n### [Scalar Types](#scalar-types)\n\nA _scalar_ type represents a single value. Rust has four primary scalar types: integers, floating-point numbers, Booleans, and characters. You may recognize these from other programming languages. Let‚Äôs jump into how they work in Rust.\n\n#### [Integer Types](#integer-types)\n\nAn _integer_ is a number without a fractional component. We used one integer type in Chapter 2, the `u32` type. This type declaration indicates that the value it‚Äôs associated with should be an unsigned integer (signed integer types start with `i` instead of `u`) that takes up 32 bits of space. Table 3-1 shows the built-in integer types in Rust. We can use any of these variants to declare the type of an integer value.\n\nTable 3-1: Integer Types in Rust\n\n| Length | Signed | Unsigned |\n| --- | --- | --- |\n| 8-bit | `i8` | `u8` |\n| 16-bit | `i16` | `u16` |\n| 32-bit | `i32` | `u32` |\n| 64-bit | `i64` | `u64` |\n| 128-bit | `i128` | `u128` |\n| arch | `isize` | `usize` |\n\nEach variant can be either signed or unsigned and has an explicit size. _Signed_ and _unsigned_ refer to whether it‚Äôs possible for the number to be negative‚Äîin other words, whether the number needs to have a sign with it (signed) or whether it will only ever be positive and can therefore be represented without a sign (unsigned). It‚Äôs like writing numbers on paper: when the sign matters, a number is shown with a plus sign or a minus sign; however, when it‚Äôs safe to assume the number is positive, it‚Äôs shown with no sign. Signed numbers are stored using [two‚Äôs complement](https://en.wikipedia.org/wiki/Two%27s_complement) representation.\n\nEach signed variant can store numbers from -(2n - 1) to 2n - 1 - 1 inclusive, where _n_ is the number of bits that variant uses. So an `i8` can store numbers from -(27) to 27 - 1, which equals -128 to 127. Unsigned variants can store numbers from 0 to 2n - 1, so a `u8` can store numbers from 0 to 28 - 1, which equals 0 to 255.\n\nAdditionally, the `isize` and `usize` types depend on the architecture of the computer your program is running on, which is denoted in the table as ‚Äúarch‚Äù: 64 bits if you‚Äôre on a 64-bit architecture and 32 bits if you‚Äôre on a 32-bit architecture.\n\nYou can write integer literals in any of the forms shown in Table 3-2. Note that number literals that can be multiple numeric types allow a type suffix, such as `57u8`, to designate the type. Number literals can also use `_` as a visual separator to make the number easier to read, such as `1_000`, which will have the same value as if you had specified `1000`.\n\nTable 3-2: Integer Literals in Rust\n\n| Number literals | Example |\n| --- | --- |\n| Decimal | `98_222` |\n| Hex | `0xff` |\n| Octal | `0o77` |\n| Binary | `0b1111_0000` |\n| Byte (`u8` only) | `b'A'` |\n\nSo how do you know which type of integer to use? If you‚Äôre unsure, Rust‚Äôs defaults are generally good places to start: integer types default to `i32`. The primary situation in which you‚Äôd use `isize` or `usize` is when indexing some sort of collection.\n\n##### [Integer Overflow](#integer-overflow)\n\nLet‚Äôs say you have a variable of type `u8` that can hold values between 0 and 255. If you try to change the variable to a value outside that range, such as 256, _integer overflow_ will occur, which can result in one of two behaviors. When you‚Äôre compiling in debug mode, Rust includes checks for integer overflow that cause your program to _panic_ at runtime if this behavior occurs. Rust uses the term _panicking_ when a program exits with an error; we‚Äôll discuss panics in more depth in the [‚ÄúUnrecoverable Errors with `panic!`‚Äù](ch09-01-unrecoverable-errors-with-panic.html) section in Chapter 9.\n\nWhen you‚Äôre compiling in release mode with the `--release` flag, Rust does _not_ include checks for integer overflow that cause panics. Instead, if overflow occurs, Rust performs _two‚Äôs complement wrapping_. In short, values greater than the maximum value the type can hold ‚Äúwrap around‚Äù to the minimum of the values the type can hold. In the case of a `u8`, the value 256 becomes 0, the value 257 becomes 1, and so on. The program won‚Äôt panic, but the variable will have a value that probably isn‚Äôt what you were expecting it to have. Relying on integer overflow‚Äôs wrapping behavior is considered an error.\n\nTo explicitly handle the possibility of overflow, you can use these families of methods provided by the standard library for primitive numeric types:\n\n-   Wrap in all modes with the `wrapping_*` methods, such as `wrapping_add`.\n-   Return the `None` value if there is overflow with the `checked_*` methods.\n-   Return the value and a boolean indicating whether there was overflow with the `overflowing_*` methods.\n-   Saturate at the value‚Äôs minimum or maximum values with the `saturating_*` methods.\n\n#### [Floating-Point Types](#floating-point-types)\n\nRust also has two primitive types for _floating-point numbers_, which are numbers with decimal points. Rust‚Äôs floating-point types are `f32` and `f64`, which are 32 bits and 64 bits in size, respectively. The default type is `f64` because on modern CPUs, it‚Äôs roughly the same speed as `f32` but is capable of more precision. All floating-point types are signed.\n\nHere‚Äôs an example that shows floating-point numbers in action:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let x = 2.0; // f64\n\n    let y: f32 = 3.0; // f32\n}\n```\n\nFloating-point numbers are represented according to the IEEE-754 standard. The `f32` type is a single-precision float, and `f64` has double precision.\n\n#### [Numeric Operations](#numeric-operations)\n\nRust supports the basic mathematical operations you‚Äôd expect for all the number types: addition, subtraction, multiplication, division, and remainder. Integer division truncates toward zero to the nearest integer. The following code shows how you‚Äôd use each numeric operation in a `let` statement:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    // addition\n    let sum = 5 + 10;\n\n    // subtraction\n    let difference = 95.5 - 4.3;\n\n    // multiplication\n    let product = 4 * 30;\n\n    // division\n    let quotient = 56.7 / 32.2;\n    let truncated = -5 / 3; // Results in -1\n\n    // remainder\n    let remainder = 43 % 5;\n}\n```\n\nEach expression in these statements uses a mathematical operator and evaluates to a single value, which is then bound to a variable. [Appendix B](appendix-02-operators.html) contains a list of all operators that Rust provides.\n\n#### [The Boolean Type](#the-boolean-type)\n\nAs in most other programming languages, a Boolean type in Rust has two possible values: `true` and `false`. Booleans are one byte in size. The Boolean type in Rust is specified using `bool`. For example:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let t = true;\n\n    let f: bool = false; // with explicit type annotation\n}\n```\n\nThe main way to use Boolean values is through conditionals, such as an `if` expression. We‚Äôll cover how `if` expressions work in Rust in the [‚ÄúControl Flow‚Äù](about:blank/ch03-05-control-flow.html#control-flow) section.\n\n#### [The Character Type](#the-character-type)\n\nRust‚Äôs `char` type is the language‚Äôs most primitive alphabetic type. Here are some examples of declaring `char` values:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let c = 'z';\n    let z: char = '‚Ñ§'; // with explicit type annotation\n    let heart_eyed_cat = 'üòª';\n}\n```\n\nNote that we specify `char` literals with single quotes, as opposed to string literals, which use double quotes. Rust‚Äôs `char` type is four bytes in size and represents a Unicode Scalar Value, which means it can represent a lot more than just ASCII. Accented letters; Chinese, Japanese, and Korean characters; emoji; and zero-width spaces are all valid `char` values in Rust. Unicode Scalar Values range from `U+0000` to `U+D7FF` and `U+E000` to `U+10FFFF` inclusive. However, a ‚Äúcharacter‚Äù isn‚Äôt really a concept in Unicode, so your human intuition for what a ‚Äúcharacter‚Äù is may not match up with what a `char` is in Rust. We‚Äôll discuss this topic in detail in [‚ÄúStoring UTF-8 Encoded Text with Strings‚Äù](about:blank/ch08-02-strings.html#storing-utf-8-encoded-text-with-strings) in Chapter 8.\n\n### [Compound Types](#compound-types)\n\n_Compound types_ can group multiple values into one type. Rust has two primitive compound types: tuples and arrays.\n\n#### [The Tuple Type](#the-tuple-type)\n\nA _tuple_ is a general way of grouping together a number of values with a variety of types into one compound type. Tuples have a fixed length: once declared, they cannot grow or shrink in size.\n\nWe create a tuple by writing a comma-separated list of values inside parentheses. Each position in the tuple has a type, and the types of the different values in the tuple don‚Äôt have to be the same. We‚Äôve added optional type annotations in this example:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let tup: (i32, f64, u8) = (500, 6.4, 1);\n}\n```\n\nThe variable `tup` binds to the entire tuple because a tuple is considered a single compound element. To get the individual values out of a tuple, we can use pattern matching to destructure a tuple value, like this:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let tup = (500, 6.4, 1);\n\n    let (x, y, z) = tup;\n\n    println!(\"The value of y is: {y}\");\n}\n```\n\nThis program first creates a tuple and binds it to the variable `tup`. It then uses a pattern with `let` to take `tup` and turn it into three separate variables, `x`, `y`, and `z`. This is called _destructuring_ because it breaks the single tuple into three parts. Finally, the program prints the value of `y`, which is `6.4`.\n\nWe can also access a tuple element directly by using a period (`.`) followed by the index of the value we want to access. For example:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let x: (i32, f64, u8) = (500, 6.4, 1);\n\n    let five_hundred = x.0;\n\n    let six_point_four = x.1;\n\n    let one = x.2;\n}\n```\n\nThis program creates the tuple `x` and then accesses each element of the tuple using their respective indices. As with most programming languages, the first index in a tuple is 0.\n\nThe tuple without any values has a special name, _unit_. This value and its corresponding type are both written `()` and represent an empty value or an empty return type. Expressions implicitly return the unit value if they don‚Äôt return any other value.\n\n#### [The Array Type](#the-array-type)\n\nAnother way to have a collection of multiple values is with an _array_. Unlike a tuple, every element of an array must have the same type. Unlike arrays in some other languages, arrays in Rust have a fixed length.\n\nWe write the values in an array as a comma-separated list inside square brackets:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let a = [1, 2, 3, 4, 5];\n}\n```\n\nArrays are useful when you want your data allocated on the stack rather than the heap (we will discuss the stack and the heap more in [Chapter 4](about:blank/ch04-01-what-is-ownership.html#the-stack-and-the-heap)) or when you want to ensure you always have a fixed number of elements. An array isn‚Äôt as flexible as the vector type, though. A _vector_ is a similar collection type provided by the standard library that _is_ allowed to grow or shrink in size. If you‚Äôre unsure whether to use an array or a vector, chances are you should use a vector. [Chapter 8](ch08-01-vectors.html) discusses vectors in more detail.\n\nHowever, arrays are more useful when you know the number of elements will not need to change. For example, if you were using the names of the month in a program, you would probably use an array rather than a vector because you know it will always contain 12 elements:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\",\n              \"August\", \"September\", \"October\", \"November\", \"December\"];\n}\n```\n\nYou write an array‚Äôs type using square brackets with the type of each element, a semicolon, and then the number of elements in the array, like so:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet a: [i32; 5] = [1, 2, 3, 4, 5];\n}\n```\n\nHere, `i32` is the type of each element. After the semicolon, the number `5` indicates the array contains five elements.\n\nYou can also initialize an array to contain the same value for each element by specifying the initial value, followed by a semicolon, and then the length of the array in square brackets, as shown here:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet a = [3; 5];\n}\n```\n\nThe array named `a` will contain `5` elements that will all be set to the value `3` initially. This is the same as writing `let a = [3, 3, 3, 3, 3];` but in a more concise way.\n\n##### [Accessing Array Elements](#accessing-array-elements)\n\nAn array is a single chunk of memory of a known, fixed size that can be allocated on the stack. You can access elements of an array using indexing, like this:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let a = [1, 2, 3, 4, 5];\n\n    let first = a[0];\n    let second = a[1];\n}\n```\n\nIn this example, the variable named `first` will get the value `1` because that is the value at index `[0]` in the array. The variable named `second` will get the value `2` from index `[1]` in the array.\n\n##### [Invalid Array Element Access](#invalid-array-element-access)\n\nLet‚Äôs see what happens if you try to access an element of an array that is past the end of the array. Say you run this code, similar to the guessing game in Chapter 2, to get an array index from the user:\n\nFilename: src/main.rs\n\n```rust\nuse std::io;\n\nfn main() {\n    let a = [1, 2, 3, 4, 5];\n\n    println!(\"Please enter an array index.\");\n\n    let mut index = String::new();\n\n    io::stdin()\n        .read_line(&mut index)\n        .expect(\"Failed to read line\");\n\n    let index: usize = index\n        .trim()\n        .parse()\n        .expect(\"Index entered was not a number\");\n\n    let element = a[index];\n\n    println!(\"The value of the element at index {index} is: {element}\");\n}\n```\n\nThis code compiles successfully. If you run this code using `cargo run` and enter `0`, `1`, `2`, `3`, or `4`, the program will print out the corresponding value at that index in the array. If you instead enter a number past the end of the array, such as `10`, you‚Äôll see output like this:\n\n```console\nthread 'main' panicked at src/main.rs:19:19:\nindex out of bounds: the len is 5 but the index is 10\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\n```\n\nThe program resulted in a _runtime_ error at the point of using an invalid value in the indexing operation. The program exited with an error message and didn‚Äôt execute the final `println!` statement. When you attempt to access an element using indexing, Rust will check that the index you‚Äôve specified is less than the array length. If the index is greater than or equal to the length, Rust will panic. This check has to happen at runtime, especially in this case, because the compiler can‚Äôt possibly know what value a user will enter when they run the code later.\n\nThis is an example of Rust‚Äôs memory safety principles in action. In many low-level languages, this kind of check is not done, and when you provide an incorrect index, invalid memory can be accessed. Rust protects you against this kind of error by immediately exiting instead of allowing the memory access and continuing. Chapter 9 discusses more of Rust‚Äôs error handling and how you can write readable, safe code that neither panics nor allows invalid memory access.\n\n## [Functions](#functions)\n\nFunctions are prevalent in Rust code. You‚Äôve already seen one of the most important functions in the language: the `main` function, which is the entry point of many programs. You‚Äôve also seen the `fn` keyword, which allows you to declare new functions.\n\nRust code uses _snake case_ as the conventional style for function and variable names, in which all letters are lowercase and underscores separate words. Here‚Äôs a program that contains an example function definition:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    println!(\"Hello, world!\");\n\n    another_function();\n}\n\nfn another_function() {\n    println!(\"Another function.\");\n}\n```\n\nWe define a function in Rust by entering `fn` followed by a function name and a set of parentheses. The curly brackets tell the compiler where the function body begins and ends.\n\nWe can call any function we‚Äôve defined by entering its name followed by a set of parentheses. Because `another_function` is defined in the program, it can be called from inside the `main` function. Note that we defined `another_function` _after_ the `main` function in the source code; we could have defined it before as well. Rust doesn‚Äôt care where you define your functions, only that they‚Äôre defined somewhere in a scope that can be seen by the caller.\n\nLet‚Äôs start a new binary project named _functions_ to explore functions further. Place the `another_function` example in _src/main.rs_ and run it. You should see the following output:\n\n```console\n$ cargo run\n   Compiling functions v0.1.0 (file:///projects/functions)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.28s\n     Running `target/debug/functions`\nHello, world!\nAnother function.\n\n```\n\nThe lines execute in the order in which they appear in the `main` function. First the ‚ÄúHello, world!‚Äù message prints, and then `another_function` is called and its message is printed.\n\n### [Parameters](#parameters)\n\nWe can define functions to have _parameters_, which are special variables that are part of a function‚Äôs signature. When a function has parameters, you can provide it with concrete values for those parameters. Technically, the concrete values are called _arguments_, but in casual conversation, people tend to use the words _parameter_ and _argument_ interchangeably for either the variables in a function‚Äôs definition or the concrete values passed in when you call a function.\n\nIn this version of `another_function` we add a parameter:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    another_function(5);\n}\n\nfn another_function(x: i32) {\n    println!(\"The value of x is: {x}\");\n}\n```\n\nTry running this program; you should get the following output:\n\n```console\n$ cargo run\n   Compiling functions v0.1.0 (file:///projects/functions)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 1.21s\n     Running `target/debug/functions`\nThe value of x is: 5\n\n```\n\nThe declaration of `another_function` has one parameter named `x`. The type of `x` is specified as `i32`. When we pass `5` in to `another_function`, the `println!` macro puts `5` where the pair of curly brackets containing `x` was in the format string.\n\nIn function signatures, you _must_ declare the type of each parameter. This is a deliberate decision in Rust‚Äôs design: requiring type annotations in function definitions means the compiler almost never needs you to use them elsewhere in the code to figure out what type you mean. The compiler is also able to give more helpful error messages if it knows what types the function expects.\n\nWhen defining multiple parameters, separate the parameter declarations with commas, like this:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    print_labeled_measurement(5, 'h');\n}\n\nfn print_labeled_measurement(value: i32, unit_label: char) {\n    println!(\"The measurement is: {value}{unit_label}\");\n}\n```\n\nThis example creates a function named `print_labeled_measurement` with two parameters. The first parameter is named `value` and is an `i32`. The second is named `unit_label` and is type `char`. The function then prints text containing both the `value` and the `unit_label`.\n\nLet‚Äôs try running this code. Replace the program currently in your _functions_ project‚Äôs _src/main.rs_ file with the preceding example and run it using `cargo run`:\n\n```console\n$ cargo run\n   Compiling functions v0.1.0 (file:///projects/functions)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.31s\n     Running `target/debug/functions`\nThe measurement is: 5h\n\n```\n\nBecause we called the function with `5` as the value for `value` and `'h'` as the value for `unit_label`, the program output contains those values.\n\n### [Statements and Expressions](#statements-and-expressions)\n\nFunction bodies are made up of a series of statements optionally ending in an expression. So far, the functions we‚Äôve covered haven‚Äôt included an ending expression, but you have seen an expression as part of a statement. Because Rust is an expression-based language, this is an important distinction to understand. Other languages don‚Äôt have the same distinctions, so let‚Äôs look at what statements and expressions are and how their differences affect the bodies of functions.\n\n-   **Statements** are instructions that perform some action and do not return a value.\n-   **Expressions** evaluate to a resultant value. Let‚Äôs look at some examples.\n\nWe‚Äôve actually already used statements and expressions. Creating a variable and assigning a value to it with the `let` keyword is a statement. In Listing 3-1, `let y = 6;` is a statement.\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let y = 6;\n}\n```\n\nListing 3-1: A `main` function declaration containing one statement\n\nFunction definitions are also statements; the entire preceding example is a statement in itself.\n\nStatements do not return values. Therefore, you can‚Äôt assign a `let` statement to another variable, as the following code tries to do; you‚Äôll get an error:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let x = (let y = 6);\n}\n```\n\nWhen you run this program, the error you‚Äôll get looks like this:\n\n```console\n$ cargo run\n   Compiling functions v0.1.0 (file:///projects/functions)\nerror: expected expression, found `let` statement\n --> src/main.rs:2:14\n  |\n2 |     let x = (let y = 6);\n  |              ^^^\n  |\n  = note: only supported directly in conditions of `if` and `while` expressions\n\nwarning: unnecessary parentheses around assigned value\n --> src/main.rs:2:13\n  |\n2 |     let x = (let y = 6);\n  |             ^         ^\n  |\n  = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n  |\n2 -     let x = (let y = 6);\n2 +     let x = let y = 6;\n  |\n\nwarning: `functions` (bin \"functions\") generated 1 warning\nerror: could not compile `functions` (bin \"functions\") due to 1 previous error; 1 warning emitted\n\n```\n\nThe `let y = 6` statement does not return a value, so there isn‚Äôt anything for `x` to bind to. This is different from what happens in other languages, such as C and Ruby, where the assignment returns the value of the assignment. In those languages, you can write `x = y = 6` and have both `x` and `y` have the value `6`; that is not the case in Rust.\n\nExpressions evaluate to a value and make up most of the rest of the code that you‚Äôll write in Rust. Consider a math operation, such as `5 + 6`, which is an expression that evaluates to the value `11`. Expressions can be part of statements: in Listing 3-1, the `6` in the statement `let y = 6;` is an expression that evaluates to the value `6`. Calling a function is an expression. Calling a macro is an expression. A new scope block created with curly brackets is an expression, for example:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let y = {\n        let x = 3;\n        x + 1\n    };\n\n    println!(\"The value of y is: {y}\");\n}\n```\n\nThis expression:\n\n```rust\n{\n    let x = 3;\n    x + 1\n}\n```\n\nis a block that, in this case, evaluates to `4`. That value gets bound to `y` as part of the `let` statement. Note that the `x + 1` line doesn‚Äôt have a semicolon at the end, which is unlike most of the lines you‚Äôve seen so far. Expressions do not include ending semicolons. If you add a semicolon to the end of an expression, you turn it into a statement, and it will then not return a value. Keep this in mind as you explore function return values and expressions next.\n\n### [Functions with Return Values](#functions-with-return-values)\n\nFunctions can return values to the code that calls them. We don‚Äôt name return values, but we must declare their type after an arrow (`->`). In Rust, the return value of the function is synonymous with the value of the final expression in the block of the body of a function. You can return early from a function by using the `return` keyword and specifying a value, but most functions return the last expression implicitly. Here‚Äôs an example of a function that returns a value:\n\nFilename: src/main.rs\n\n```rust\nfn five() -> i32 {\n    5\n}\n\nfn main() {\n    let x = five();\n\n    println!(\"The value of x is: {x}\");\n}\n```\n\nThere are no function calls, macros, or even `let` statements in the `five` function‚Äîjust the number `5` by itself. That‚Äôs a perfectly valid function in Rust. Note that the function‚Äôs return type is specified too, as `-> i32`. Try running this code; the output should look like this:\n\n```console\n$ cargo run\n   Compiling functions v0.1.0 (file:///projects/functions)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.30s\n     Running `target/debug/functions`\nThe value of x is: 5\n\n```\n\nThe `5` in `five` is the function‚Äôs return value, which is why the return type is `i32`. Let‚Äôs examine this in more detail. There are two important bits: first, the line `let x = five();` shows that we‚Äôre using the return value of a function to initialize a variable. Because the function `five` returns a `5`, that line is the same as the following:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet x = 5;\n}\n```\n\nSecond, the `five` function has no parameters and defines the type of the return value, but the body of the function is a lonely `5` with no semicolon because it‚Äôs an expression whose value we want to return.\n\nLet‚Äôs look at another example:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let x = plus_one(5);\n\n    println!(\"The value of x is: {x}\");\n}\n\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n```\n\nRunning this code will print `The value of x is: 6`. But if we place a semicolon at the end of the line containing `x + 1`, changing it from an expression to a statement, we‚Äôll get an error:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let x = plus_one(5);\n\n    println!(\"The value of x is: {x}\");\n}\n\nfn plus_one(x: i32) -> i32 {\n    x + 1;\n}\n```\n\nCompiling this code produces an error, as follows:\n\n```console\n$ cargo run\n   Compiling functions v0.1.0 (file:///projects/functions)\nerror[E0308]: mismatched types\n --> src/main.rs:7:24\n  |\n7 | fn plus_one(x: i32) -> i32 {\n  |    --------            ^^^ expected `i32`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n8 |     x + 1;\n  |          - help: remove this semicolon to return this value\n\nFor more information about this error, try `rustc --explain E0308`.\nerror: could not compile `functions` (bin \"functions\") due to 1 previous error\n\n```\n\nThe main error message, `mismatched types`, reveals the core issue with this code. The definition of the function `plus_one` says that it will return an `i32`, but statements don‚Äôt evaluate to a value, which is expressed by `()`, the unit type. Therefore, nothing is returned, which contradicts the function definition and results in an error. In this output, Rust provides a message to possibly help rectify this issue: it suggests removing the semicolon, which would fix the error.\n\nAll programmers strive to make their code easy to understand, but sometimes extra explanation is warranted. In these cases, programmers leave _comments_ in their source code that the compiler will ignore but people reading the source code may find useful.\n\nHere‚Äôs a simple comment:\n\n```rust\n#![allow(unused)]\nfn main() {\n// hello, world\n}\n```\n\nIn Rust, the idiomatic comment style starts a comment with two slashes, and the comment continues until the end of the line. For comments that extend beyond a single line, you‚Äôll need to include `//` on each line, like this:\n\n```rust\n#![allow(unused)]\nfn main() {\n// So we‚Äôre doing something complicated here, long enough that we need\n// multiple lines of comments to do it! Whew! Hopefully, this comment will\n// explain what‚Äôs going on.\n}\n```\n\nComments can also be placed at the end of lines containing code:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let lucky_number = 7; // I‚Äôm feeling lucky today\n}\n```\n\nBut you‚Äôll more often see them used in this format, with the comment on a separate line above the code it‚Äôs annotating:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    // I‚Äôm feeling lucky today\n    let lucky_number = 7;\n}\n```\n\nRust also has another kind of comment, documentation comments, which we‚Äôll discuss in the [‚ÄúPublishing a Crate to Crates.io‚Äù](ch14-02-publishing-to-crates-io.html) section of Chapter 14.\n\n## [Control Flow](#control-flow)\n\nThe ability to run some code depending on whether a condition is `true` and to run some code repeatedly while a condition is `true` are basic building blocks in most programming languages. The most common constructs that let you control the flow of execution of Rust code are `if` expressions and loops.\n\n### [`if` Expressions](#if-expressions)\n\nAn `if` expression allows you to branch your code depending on conditions. You provide a condition and then state, ‚ÄúIf this condition is met, run this block of code. If the condition is not met, do not run this block of code.‚Äù\n\nCreate a new project called _branches_ in your _projects_ directory to explore the `if` expression. In the _src/main.rs_ file, input the following:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let number = 3;\n\n    if number < 5 {\n        println!(\"condition was true\");\n    } else {\n        println!(\"condition was false\");\n    }\n}\n```\n\nAll `if` expressions start with the keyword `if`, followed by a condition. In this case, the condition checks whether or not the variable `number` has a value less than 5. We place the block of code to execute if the condition is `true` immediately after the condition inside curly brackets. Blocks of code associated with the conditions in `if` expressions are sometimes called _arms_, just like the arms in `match` expressions that we discussed in the [‚ÄúComparing the Guess to the Secret Number‚Äù](about:blank/ch02-00-guessing-game-tutorial.html#comparing-the-guess-to-the-secret-number) section of Chapter 2.\n\nOptionally, we can also include an `else` expression, which we chose to do here, to give the program an alternative block of code to execute should the condition evaluate to `false`. If you don‚Äôt provide an `else` expression and the condition is `false`, the program will just skip the `if` block and move on to the next bit of code.\n\nTry running this code; you should see the following output:\n\n```console\n$ cargo run\n   Compiling branches v0.1.0 (file:///projects/branches)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.31s\n     Running `target/debug/branches`\ncondition was true\n\n```\n\nLet‚Äôs try changing the value of `number` to a value that makes the condition `false` to see what happens:\n\n```rust\nfn main() {\n    let number = 7;\n\n    if number < 5 {\n        println!(\"condition was true\");\n    } else {\n        println!(\"condition was false\");\n    }\n}\n```\n\nRun the program again, and look at the output:\n\n```console\n$ cargo run\n   Compiling branches v0.1.0 (file:///projects/branches)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.31s\n     Running `target/debug/branches`\ncondition was false\n\n```\n\nIt‚Äôs also worth noting that the condition in this code _must_ be a `bool`. If the condition isn‚Äôt a `bool`, we‚Äôll get an error. For example, try running the following code:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let number = 3;\n\n    if number {\n        println!(\"number was three\");\n    }\n}\n```\n\nThe `if` condition evaluates to a value of `3` this time, and Rust throws an error:\n\n```console\n$ cargo run\n   Compiling branches v0.1.0 (file:///projects/branches)\nerror[E0308]: mismatched types\n --> src/main.rs:4:8\n  |\n4 |     if number {\n  |        ^^^^^^ expected `bool`, found integer\n\nFor more information about this error, try `rustc --explain E0308`.\nerror: could not compile `branches` (bin \"branches\") due to 1 previous error\n\n```\n\nThe error indicates that Rust expected a `bool` but got an integer. Unlike languages such as Ruby and JavaScript, Rust will not automatically try to convert non-Boolean types to a Boolean. You must be explicit and always provide `if` with a Boolean as its condition. If we want the `if` code block to run only when a number is not equal to `0`, for example, we can change the `if` expression to the following:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let number = 3;\n\n    if number != 0 {\n        println!(\"number was something other than zero\");\n    }\n}\n```\n\nRunning this code will print `number was something other than zero`.\n\n#### [Handling Multiple Conditions with `else if`](#handling-multiple-conditions-with-else-if)\n\nYou can use multiple conditions by combining `if` and `else` in an `else if` expression. For example:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let number = 6;\n\n    if number % 4 == 0 {\n        println!(\"number is divisible by 4\");\n    } else if number % 3 == 0 {\n        println!(\"number is divisible by 3\");\n    } else if number % 2 == 0 {\n        println!(\"number is divisible by 2\");\n    } else {\n        println!(\"number is not divisible by 4, 3, or 2\");\n    }\n}\n```\n\nThis program has four possible paths it can take. After running it, you should see the following output:\n\n```console\n$ cargo run\n   Compiling branches v0.1.0 (file:///projects/branches)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.31s\n     Running `target/debug/branches`\nnumber is divisible by 3\n\n```\n\nWhen this program executes, it checks each `if` expression in turn and executes the first body for which the condition evaluates to `true`. Note that even though 6 is divisible by 2, we don‚Äôt see the output `number is divisible by 2`, nor do we see the `number is not divisible by 4, 3, or 2` text from the `else` block. That‚Äôs because Rust only executes the block for the first `true` condition, and once it finds one, it doesn‚Äôt even check the rest.\n\nUsing too many `else if` expressions can clutter your code, so if you have more than one, you might want to refactor your code. Chapter 6 describes a powerful Rust branching construct called `match` for these cases.\n\n#### [Using `if` in a `let` Statement](#using-if-in-a-let-statement)\n\nBecause `if` is an expression, we can use it on the right side of a `let` statement to assign the outcome to a variable, as in Listing 3-2.\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let condition = true;\n    let number = if condition { 5 } else { 6 };\n\n    println!(\"The value of number is: {number}\");\n}\n```\n\nListing 3-2: Assigning the result of an `if` expression to a variable\n\nThe `number` variable will be bound to a value based on the outcome of the `if` expression. Run this code to see what happens:\n\n```console\n$ cargo run\n   Compiling branches v0.1.0 (file:///projects/branches)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.30s\n     Running `target/debug/branches`\nThe value of number is: 5\n\n```\n\nRemember that blocks of code evaluate to the last expression in them, and numbers by themselves are also expressions. In this case, the value of the whole `if` expression depends on which block of code executes. This means the values that have the potential to be results from each arm of the `if` must be the same type; in Listing 3-2, the results of both the `if` arm and the `else` arm were `i32` integers. If the types are mismatched, as in the following example, we‚Äôll get an error:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let condition = true;\n\n    let number = if condition { 5 } else { \"six\" };\n\n    println!(\"The value of number is: {number}\");\n}\n```\n\nWhen we try to compile this code, we‚Äôll get an error. The `if` and `else` arms have value types that are incompatible, and Rust indicates exactly where to find the problem in the program:\n\n```console\n$ cargo run\n   Compiling branches v0.1.0 (file:///projects/branches)\nerror[E0308]: `if` and `else` have incompatible types\n --> src/main.rs:4:44\n  |\n4 |     let number = if condition { 5 } else { \"six\" };\n  |                                 -          ^^^^^ expected integer, found `&str`\n  |                                 |\n  |                                 expected because of this\n\nFor more information about this error, try `rustc --explain E0308`.\nerror: could not compile `branches` (bin \"branches\") due to 1 previous error\n\n```\n\nThe expression in the `if` block evaluates to an integer, and the expression in the `else` block evaluates to a string. This won‚Äôt work because variables must have a single type, and Rust needs to know at compile time what type the `number` variable is, definitively. Knowing the type of `number` lets the compiler verify the type is valid everywhere we use `number`. Rust wouldn‚Äôt be able to do that if the type of `number` was only determined at runtime; the compiler would be more complex and would make fewer guarantees about the code if it had to keep track of multiple hypothetical types for any variable.\n\n### [Repetition with Loops](#repetition-with-loops)\n\nIt‚Äôs often useful to execute a block of code more than once. For this task, Rust provides several _loops_, which will run through the code inside the loop body to the end and then start immediately back at the beginning. To experiment with loops, let‚Äôs make a new project called _loops_.\n\nRust has three kinds of loops: `loop`, `while`, and `for`. Let‚Äôs try each one.\n\n#### [Repeating Code with `loop`](#repeating-code-with-loop)\n\nThe `loop` keyword tells Rust to execute a block of code over and over again forever or until you explicitly tell it to stop.\n\nAs an example, change the _src/main.rs_ file in your _loops_ directory to look like this:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    loop {\n        println!(\"again!\");\n    }\n}\n```\n\nWhen we run this program, we‚Äôll see `again!` printed over and over continuously until we stop the program manually. Most terminals support the keyboard shortcut ctrl\\-c to interrupt a program that is stuck in a continual loop. Give it a try:\n\n```console\n$ cargo run\n   Compiling loops v0.1.0 (file:///projects/loops)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.29s\n     Running `target/debug/loops`\nagain!\nagain!\nagain!\nagain!\n^Cagain!\n\n```\n\nThe symbol `^C` represents where you pressed ctrl\\-c. You may or may not see the word `again!` printed after the `^C`, depending on where the code was in the loop when it received the interrupt signal.\n\nFortunately, Rust also provides a way to break out of a loop using code. You can place the `break` keyword within the loop to tell the program when to stop executing the loop. Recall that we did this in the guessing game in the [‚ÄúQuitting After a Correct Guess‚Äù](about:blank/ch02-00-guessing-game-tutorial.html#quitting-after-a-correct-guess) section of Chapter 2 to exit the program when the user won the game by guessing the correct number.\n\nWe also used `continue` in the guessing game, which in a loop tells the program to skip over any remaining code in this iteration of the loop and go to the next iteration.\n\n#### [Returning Values from Loops](#returning-values-from-loops)\n\nOne of the uses of a `loop` is to retry an operation you know might fail, such as checking whether a thread has completed its job. You might also need to pass the result of that operation out of the loop to the rest of your code. To do this, you can add the value you want returned after the `break` expression you use to stop the loop; that value will be returned out of the loop so you can use it, as shown here:\n\n```rust\nfn main() {\n    let mut counter = 0;\n\n    let result = loop {\n        counter += 1;\n\n        if counter == 10 {\n            break counter * 2;\n        }\n    };\n\n    println!(\"The result is {result}\");\n}\n```\n\nBefore the loop, we declare a variable named `counter` and initialize it to `0`. Then we declare a variable named `result` to hold the value returned from the loop. On every iteration of the loop, we add `1` to the `counter` variable, and then check whether the `counter` is equal to `10`. When it is, we use the `break` keyword with the value `counter * 2`. After the loop, we use a semicolon to end the statement that assigns the value to `result`. Finally, we print the value in `result`, which in this case is `20`.\n\nYou can also `return` from inside a loop. While `break` only exits the current loop, `return` always exits the current function.\n\n#### [Loop Labels to Disambiguate Between Multiple Loops](#loop-labels-to-disambiguate-between-multiple-loops)\n\nIf you have loops within loops, `break` and `continue` apply to the innermost loop at that point. You can optionally specify a _loop label_ on a loop that you can then use with `break` or `continue` to specify that those keywords apply to the labeled loop instead of the innermost loop. Loop labels must begin with a single quote. Here‚Äôs an example with two nested loops:\n\n```rust\nfn main() {\n    let mut count = 0;\n    'counting_up: loop {\n        println!(\"count = {count}\");\n        let mut remaining = 10;\n\n        loop {\n            println!(\"remaining = {remaining}\");\n            if remaining == 9 {\n                break;\n            }\n            if count == 2 {\n                break 'counting_up;\n            }\n            remaining -= 1;\n        }\n\n        count += 1;\n    }\n    println!(\"End count = {count}\");\n}\n```\n\nThe outer loop has the label `'counting_up`, and it will count up from 0 to 2. The inner loop without a label counts down from 10 to 9. The first `break` that doesn‚Äôt specify a label will exit the inner loop only. The `break 'counting_up;` statement will exit the outer loop. This code prints:\n\n```console\n$ cargo run\n   Compiling loops v0.1.0 (file:///projects/loops)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.58s\n     Running `target/debug/loops`\ncount = 0\nremaining = 10\nremaining = 9\ncount = 1\nremaining = 10\nremaining = 9\ncount = 2\nremaining = 10\nEnd count = 2\n\n```\n\n#### [Conditional Loops with `while`](#conditional-loops-with-while)\n\nA program will often need to evaluate a condition within a loop. While the condition is `true`, the loop runs. When the condition ceases to be `true`, the program calls `break`, stopping the loop. It‚Äôs possible to implement behavior like this using a combination of `loop`, `if`, `else`, and `break`; you could try that now in a program, if you‚Äôd like. However, this pattern is so common that Rust has a built-in language construct for it, called a `while` loop. In Listing 3-3, we use `while` to loop the program three times, counting down each time, and then, after the loop, print a message and exit.\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let mut number = 3;\n\n    while number != 0 {\n        println!(\"{number}!\");\n\n        number -= 1;\n    }\n\n    println!(\"LIFTOFF!!!\");\n}\n```\n\nListing 3-3: Using a `while` loop to run code while a condition holds true\n\nThis construct eliminates a lot of nesting that would be necessary if you used `loop`, `if`, `else`, and `break`, and it‚Äôs clearer. While a condition evaluates to `true`, the code runs; otherwise, it exits the loop.\n\n#### [Looping Through a Collection with `for`](#looping-through-a-collection-with-for)\n\nYou can also use the `while` construct to loop over the elements of a collection, such as an array. For example, the loop in Listing 3-4 prints each element in the array `a`.\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let a = [10, 20, 30, 40, 50];\n    let mut index = 0;\n\n    while index < 5 {\n        println!(\"the value is: {}\", a[index]);\n\n        index += 1;\n    }\n}\n```\n\nListing 3-4: Looping through each element of a collection using a `while` loop\n\nHere, the code counts up through the elements in the array. It starts at index `0`, and then loops until it reaches the final index in the array (that is, when `index < 5` is no longer `true`). Running this code will print every element in the array:\n\n```console\n$ cargo run\n   Compiling loops v0.1.0 (file:///projects/loops)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.32s\n     Running `target/debug/loops`\nthe value is: 10\nthe value is: 20\nthe value is: 30\nthe value is: 40\nthe value is: 50\n\n```\n\nAll five array values appear in the terminal, as expected. Even though `index` will reach a value of `5` at some point, the loop stops executing before trying to fetch a sixth value from the array.\n\nHowever, this approach is error prone; we could cause the program to panic if the index value or test condition is incorrect. For example, if you changed the definition of the `a` array to have four elements but forgot to update the condition to `while index < 4`, the code would panic. It‚Äôs also slow, because the compiler adds runtime code to perform the conditional check of whether the index is within the bounds of the array on every iteration through the loop.\n\nAs a more concise alternative, you can use a `for` loop and execute some code for each item in a collection. A `for` loop looks like the code in Listing 3-5.\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let a = [10, 20, 30, 40, 50];\n\n    for element in a {\n        println!(\"the value is: {element}\");\n    }\n}\n```\n\nListing 3-5: Looping through each element of a collection using a `for` loop\n\nWhen we run this code, we‚Äôll see the same output as in Listing 3-4. More importantly, we‚Äôve now increased the safety of the code and eliminated the chance of bugs that might result from going beyond the end of the array or not going far enough and missing some items.\n\nUsing the `for` loop, you wouldn‚Äôt need to remember to change any other code if you changed the number of values in the array, as you would with the method used in Listing 3-4.\n\nThe safety and conciseness of `for` loops make them the most commonly used loop construct in Rust. Even in situations in which you want to run some code a certain number of times, as in the countdown example that used a `while` loop in Listing 3-3, most Rustaceans would use a `for` loop. The way to do that would be to use a `Range`, provided by the standard library, which generates all numbers in sequence starting from one number and ending before another number.\n\nHere‚Äôs what the countdown would look like using a `for` loop and another method we‚Äôve not yet talked about, `rev`, to reverse the range:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    for number in (1..4).rev() {\n        println!(\"{number}!\");\n    }\n    println!(\"LIFTOFF!!!\");\n}\n```\n\nThis code is a bit nicer, isn‚Äôt it?\n\n## [Summary](#summary-2)\n\nYou made it! This was a sizable chapter: you learned about variables, scalar and compound data types, functions, comments, `if` expressions, and loops! To practice with the concepts discussed in this chapter, try building programs to do the following:\n\n-   Convert temperatures between Fahrenheit and Celsius.\n-   Generate the _n_th Fibonacci number.\n-   Print the lyrics to the Christmas carol ‚ÄúThe Twelve Days of Christmas,‚Äù taking advantage of the repetition in the song.\n\nWhen you‚Äôre ready to move on, we‚Äôll talk about a concept in Rust that _doesn‚Äôt_ commonly exist in other programming languages: ownership.\n\n## [Understanding Ownership](#understanding-ownership)\n\nOwnership is Rust‚Äôs most unique feature and has deep implications for the rest of the language. It enables Rust to make memory safety guarantees without needing a garbage collector, so it‚Äôs important to understand how ownership works. In this chapter, we‚Äôll talk about ownership as well as several related features: borrowing, slices, and how Rust lays data out in memory.\n\n## [What Is Ownership?](#what-is-ownership)\n\n_Ownership_ is a set of rules that govern how a Rust program manages memory. All programs have to manage the way they use a computer‚Äôs memory while running. Some languages have garbage collection that regularly looks for no-longer-used memory as the program runs; in other languages, the programmer must explicitly allocate and free the memory. Rust uses a third approach: memory is managed through a system of ownership with a set of rules that the compiler checks. If any of the rules are violated, the program won‚Äôt compile. None of the features of ownership will slow down your program while it‚Äôs running.\n\nBecause ownership is a new concept for many programmers, it does take some time to get used to. The good news is that the more experienced you become with Rust and the rules of the ownership system, the easier you‚Äôll find it to naturally develop code that is safe and efficient. Keep at it!\n\nWhen you understand ownership, you‚Äôll have a solid foundation for understanding the features that make Rust unique. In this chapter, you‚Äôll learn ownership by working through some examples that focus on a very common data structure: strings.\n\n### [The Stack and the Heap](#the-stack-and-the-heap)\n\nMany programming languages don‚Äôt require you to think about the stack and the heap very often. But in a systems programming language like Rust, whether a value is on the stack or the heap affects how the language behaves and why you have to make certain decisions. Parts of ownership will be described in relation to the stack and the heap later in this chapter, so here is a brief explanation in preparation.\n\nBoth the stack and the heap are parts of memory available to your code to use at runtime, but they are structured in different ways. The stack stores values in the order it gets them and removes the values in the opposite order. This is referred to as _last in, first out_. Think of a stack of plates: when you add more plates, you put them on top of the pile, and when you need a plate, you take one off the top. Adding or removing plates from the middle or bottom wouldn‚Äôt work as well! Adding data is called _pushing onto the stack_, and removing data is called _popping off the stack_. All data stored on the stack must have a known, fixed size. Data with an unknown size at compile time or a size that might change must be stored on the heap instead.\n\nThe heap is less organized: when you put data on the heap, you request a certain amount of space. The memory allocator finds an empty spot in the heap that is big enough, marks it as being in use, and returns a _pointer_, which is the address of that location. This process is called _allocating on the heap_ and is sometimes abbreviated as just _allocating_ (pushing values onto the stack is not considered allocating). Because the pointer to the heap is a known, fixed size, you can store the pointer on the stack, but when you want the actual data, you must follow the pointer. Think of being seated at a restaurant. When you enter, you state the number of people in your group, and the host finds an empty table that fits everyone and leads you there. If someone in your group comes late, they can ask where you‚Äôve been seated to find you.\n\nPushing to the stack is faster than allocating on the heap because the allocator never has to search for a place to store new data; that location is always at the top of the stack. Comparatively, allocating space on the heap requires more work because the allocator must first find a big enough space to hold the data and then perform bookkeeping to prepare for the next allocation.\n\nAccessing data in the heap is slower than accessing data on the stack because you have to follow a pointer to get there. Contemporary processors are faster if they jump around less in memory. Continuing the analogy, consider a server at a restaurant taking orders from many tables. It‚Äôs most efficient to get all the orders at one table before moving on to the next table. Taking an order from table A, then an order from table B, then one from A again, and then one from B again would be a much slower process. By the same token, a processor can do its job better if it works on data that‚Äôs close to other data (as it is on the stack) rather than farther away (as it can be on the heap).\n\nWhen your code calls a function, the values passed into the function (including, potentially, pointers to data on the heap) and the function‚Äôs local variables get pushed onto the stack. When the function is over, those values get popped off the stack.\n\nKeeping track of what parts of code are using what data on the heap, minimizing the amount of duplicate data on the heap, and cleaning up unused data on the heap so you don‚Äôt run out of space are all problems that ownership addresses. Once you understand ownership, you won‚Äôt need to think about the stack and the heap very often, but knowing that the main purpose of ownership is to manage heap data can help explain why it works the way it does.\n\n### [Ownership Rules](#ownership-rules)\n\nFirst, let‚Äôs take a look at the ownership rules. Keep these rules in mind as we work through the examples that illustrate them:\n\n-   Each value in Rust has an _owner_.\n-   There can only be one owner at a time.\n-   When the owner goes out of scope, the value will be dropped.\n\n### [Variable Scope](#variable-scope)\n\nNow that we‚Äôre past basic Rust syntax, we won‚Äôt include all the `fn main() {` code in examples, so if you‚Äôre following along, make sure to put the following examples inside a `main` function manually. As a result, our examples will be a bit more concise, letting us focus on the actual details rather than boilerplate code.\n\nAs a first example of ownership, we‚Äôll look at the _scope_ of some variables. A scope is the range within a program for which an item is valid. Take the following variable:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet s = \"hello\";\n}\n```\n\nThe variable `s` refers to a string literal, where the value of the string is hardcoded into the text of our program. The variable is valid from the point at which it‚Äôs declared until the end of the current _scope_. Listing 4-1 shows a program with comments annotating where the variable `s` would be valid.\n\n```rust\nfn main() {\n    {                      // s is not valid here, it‚Äôs not yet declared\n        let s = \"hello\";   // s is valid from this point forward\n\n        // do stuff with s\n    }                      // this scope is now over, and s is no longer valid\n}\n```\n\nListing 4-1: A variable and the scope in which it is valid\n\nIn other words, there are two important points in time here:\n\n-   When `s` comes _into_ scope, it is valid.\n-   It remains valid until it goes _out of_ scope.\n\nAt this point, the relationship between scopes and when variables are valid is similar to that in other programming languages. Now we‚Äôll build on top of this understanding by introducing the `String` type.\n\n### [The `String` Type](#the-string-type)\n\nTo illustrate the rules of ownership, we need a data type that is more complex than those we covered in the [‚ÄúData Types‚Äù](about:blank/ch03-02-data-types.html#data-types) section of Chapter 3. The types covered previously are of a known size, can be stored on the stack and popped off the stack when their scope is over, and can be quickly and trivially copied to make a new, independent instance if another part of code needs to use the same value in a different scope. But we want to look at data that is stored on the heap and explore how Rust knows when to clean up that data, and the `String` type is a great example.\n\nWe‚Äôll concentrate on the parts of `String` that relate to ownership. These aspects also apply to other complex data types, whether they are provided by the standard library or created by you. We‚Äôll discuss `String` in more depth in [Chapter 8](ch08-02-strings.html).\n\nWe‚Äôve already seen string literals, where a string value is hardcoded into our program. String literals are convenient, but they aren‚Äôt suitable for every situation in which we may want to use text. One reason is that they‚Äôre immutable. Another is that not every string value can be known when we write our code: for example, what if we want to take user input and store it? For these situations, Rust has a second string type, `String`. This type manages data allocated on the heap and as such is able to store an amount of text that is unknown to us at compile time. You can create a `String` from a string literal using the `from` function, like so:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet s = String::from(\"hello\");\n}\n```\n\nThe double colon `::` operator allows us to namespace this particular `from` function under the `String` type rather than using some sort of name like `string_from`. We‚Äôll discuss this syntax more in the [‚ÄúMethod Syntax‚Äù](about:blank/ch05-03-method-syntax.html#method-syntax) section of Chapter 5, and when we talk about namespacing with modules in [‚ÄúPaths for Referring to an Item in the Module Tree‚Äù](ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html) in Chapter 7.\n\nThis kind of string _can_ be mutated:\n\n```rust\nfn main() {\n    let mut s = String::from(\"hello\");\n\n    s.push_str(\", world!\"); // push_str() appends a literal to a String\n\n    println!(\"{s}\"); // This will print `hello, world!`\n}\n```\n\nSo, what‚Äôs the difference here? Why can `String` be mutated but literals cannot? The difference is in how these two types deal with memory.\n\n### [Memory and Allocation](#memory-and-allocation)\n\nIn the case of a string literal, we know the contents at compile time, so the text is hardcoded directly into the final executable. This is why string literals are fast and efficient. But these properties only come from the string literal‚Äôs immutability. Unfortunately, we can‚Äôt put a blob of memory into the binary for each piece of text whose size is unknown at compile time and whose size might change while running the program.\n\nWith the `String` type, in order to support a mutable, growable piece of text, we need to allocate an amount of memory on the heap, unknown at compile time, to hold the contents. This means:\n\n-   The memory must be requested from the memory allocator at runtime.\n-   We need a way of returning this memory to the allocator when we‚Äôre done with our `String`.\n\nThat first part is done by us: when we call `String::from`, its implementation requests the memory it needs. This is pretty much universal in programming languages.\n\nHowever, the second part is different. In languages with a _garbage collector (GC)_, the GC keeps track of and cleans up memory that isn‚Äôt being used anymore, and we don‚Äôt need to think about it. In most languages without a GC, it‚Äôs our responsibility to identify when memory is no longer being used and to call code to explicitly free it, just as we did to request it. Doing this correctly has historically been a difficult programming problem. If we forget, we‚Äôll waste memory. If we do it too early, we‚Äôll have an invalid variable. If we do it twice, that‚Äôs a bug too. We need to pair exactly one `allocate` with exactly one `free`.\n\nRust takes a different path: the memory is automatically returned once the variable that owns it goes out of scope. Here‚Äôs a version of our scope example from Listing 4-1 using a `String` instead of a string literal:\n\n```rust\nfn main() {\n    {\n        let s = String::from(\"hello\"); // s is valid from this point forward\n\n        // do stuff with s\n    }                                  // this scope is now over, and s is no\n                                       // longer valid\n}\n```\n\nThere is a natural point at which we can return the memory our `String` needs to the allocator: when `s` goes out of scope. When a variable goes out of scope, Rust calls a special function for us. This function is called [`drop`](about:blank/std/ops/trait.Drop.html#tymethod.drop), and it‚Äôs where the author of `String` can put the code to return the memory. Rust calls `drop` automatically at the closing curly bracket.\n\nNote: In C++, this pattern of deallocating resources at the end of an item‚Äôs lifetime is sometimes called _Resource Acquisition Is Initialization (RAII)_. The `drop` function in Rust will be familiar to you if you‚Äôve used RAII patterns.\n\nThis pattern has a profound impact on the way Rust code is written. It may seem simple right now, but the behavior of code can be unexpected in more complicated situations when we want to have multiple variables use the data we‚Äôve allocated on the heap. Let‚Äôs explore some of those situations now.\n\n#### [Variables and Data Interacting with Move](#variables-and-data-interacting-with-move)\n\nMultiple variables can interact with the same data in different ways in Rust. Let‚Äôs look at an example using an integer in Listing 4-2.\n\n```rust\nfn main() {\n    let x = 5;\n    let y = x;\n}\n```\n\nListing 4-2: Assigning the integer value of variable `x` to `y`\n\nWe can probably guess what this is doing: ‚Äúbind the value `5` to `x`; then make a copy of the value in `x` and bind it to `y`.‚Äù We now have two variables, `x` and `y`, and both equal `5`. This is indeed what is happening, because integers are simple values with a known, fixed size, and these two `5` values are pushed onto the stack.\n\nNow let‚Äôs look at the `String` version:\n\n```rust\nfn main() {\n    let s1 = String::from(\"hello\");\n    let s2 = s1;\n}\n```\n\nThis looks very similar, so we might assume that the way it works would be the same: that is, the second line would make a copy of the value in `s1` and bind it to `s2`. But this isn‚Äôt quite what happens.\n\nTake a look at Figure 4-1 to see what is happening to `String` under the covers. A `String` is made up of three parts, shown on the left: a pointer to the memory that holds the contents of the string, a length, and a capacity. This group of data is stored on the stack. On the right is the memory on the heap that holds the contents.\n\n![Two tables: the first table contains the representation of s1 on the\nstack, consisting of its length (5), capacity (5), and a pointer to the first\nvalue in the second table. The second table contains the representation of the\nstring data on the heap, byte by byte.](img/trpl04-01.svg)\n\nFigure 4-1: Representation in memory of a `String` holding the value `\"hello\"` bound to `s1`\n\nThe length is how much memory, in bytes, the contents of the `String` are currently using. The capacity is the total amount of memory, in bytes, that the `String` has received from the allocator. The difference between length and capacity matters, but not in this context, so for now, it‚Äôs fine to ignore the capacity.\n\nWhen we assign `s1` to `s2`, the `String` data is copied, meaning we copy the pointer, the length, and the capacity that are on the stack. We do not copy the data on the heap that the pointer refers to. In other words, the data representation in memory looks like Figure 4-2.\n\n![Three tables: tables s1 and s2 representing those strings on the\nstack, respectively, and both pointing to the same string data on the heap.](img/trpl04-02.svg)\n\nFigure 4-2: Representation in memory of the variable `s2` that has a copy of the pointer, length, and capacity of `s1`\n\nThe representation does _not_ look like Figure 4-3, which is what memory would look like if Rust instead copied the heap data as well. If Rust did this, the operation `s2 = s1` could be very expensive in terms of runtime performance if the data on the heap were large.\n\n![Four tables: two tables representing the stack data for s1 and s2,\nand each points to its own copy of string data on the heap.](img/trpl04-03.svg)\n\nFigure 4-3: Another possibility for what `s2 = s1` might do if Rust copied the heap data as well\n\nEarlier, we said that when a variable goes out of scope, Rust automatically calls the `drop` function and cleans up the heap memory for that variable. But Figure 4-2 shows both data pointers pointing to the same location. This is a problem: when `s2` and `s1` go out of scope, they will both try to free the same memory. This is known as a _double free_ error and is one of the memory safety bugs we mentioned previously. Freeing memory twice can lead to memory corruption, which can potentially lead to security vulnerabilities.\n\nTo ensure memory safety, after the line `let s2 = s1;`, Rust considers `s1` as no longer valid. Therefore, Rust doesn‚Äôt need to free anything when `s1` goes out of scope. Check out what happens when you try to use `s1` after `s2` is created; it won‚Äôt work:\n\n```rust\nfn main() {\n    let s1 = String::from(\"hello\");\n    let s2 = s1;\n\n    println!(\"{s1}, world!\");\n}\n```\n\nYou‚Äôll get an error like this because Rust prevents you from using the invalidated reference:\n\n```console\n$ cargo run\n   Compiling ownership v0.1.0 (file:///projects/ownership)\nerror[E0382]: borrow of moved value: `s1`\n --> src/main.rs:5:15\n  |\n2 |     let s1 = String::from(\"hello\");\n  |         -- move occurs because `s1` has type `String`, which does not implement the `Copy` trait\n3 |     let s2 = s1;\n  |              -- value moved here\n4 |\n5 |     println!(\"{s1}, world!\");\n  |               ^^^^ value borrowed here after move\n  |\n  = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider cloning the value if the performance cost is acceptable\n  |\n3 |     let s2 = s1.clone();\n  |                ++++++++\n\nFor more information about this error, try `rustc --explain E0382`.\nerror: could not compile `ownership` (bin \"ownership\") due to 1 previous error\n\n```\n\nIf you‚Äôve heard the terms _shallow copy_ and _deep copy_ while working with other languages, the concept of copying the pointer, length, and capacity without copying the data probably sounds like making a shallow copy. But because Rust also invalidates the first variable, instead of being called a shallow copy, it‚Äôs known as a _move_. In this example, we would say that `s1` was _moved_ into `s2`. So, what actually happens is shown in Figure 4-4.\n\n![Three tables: tables s1 and s2 representing those strings on the\nstack, respectively, and both pointing to the same string data on the heap.\nTable s1 is grayed out be-cause s1 is no longer valid; only s2 can be used to\naccess the heap data.](img/trpl04-04.svg)\n\nFigure 4-4: Representation in memory after `s1` has been invalidated\n\nThat solves our problem! With only `s2` valid, when it goes out of scope it alone will free the memory, and we‚Äôre done.\n\nIn addition, there‚Äôs a design choice that‚Äôs implied by this: Rust will never automatically create ‚Äúdeep‚Äù copies of your data. Therefore, any _automatic_ copying can be assumed to be inexpensive in terms of runtime performance.\n\n#### [Variables and Data Interacting with Clone](#variables-and-data-interacting-with-clone)\n\nIf we _do_ want to deeply copy the heap data of the `String`, not just the stack data, we can use a common method called `clone`. We‚Äôll discuss method syntax in Chapter 5, but because methods are a common feature in many programming languages, you‚Äôve probably seen them before.\n\nHere‚Äôs an example of the `clone` method in action:\n\n```rust\nfn main() {\n    let s1 = String::from(\"hello\");\n    let s2 = s1.clone();\n\n    println!(\"s1 = {s1}, s2 = {s2}\");\n}\n```\n\nThis works just fine and explicitly produces the behavior shown in Figure 4-3, where the heap data _does_ get copied.\n\nWhen you see a call to `clone`, you know that some arbitrary code is being executed and that code may be expensive. It‚Äôs a visual indicator that something different is going on.\n\n#### [Stack-Only Data: Copy](#stack-only-data-copy)\n\nThere‚Äôs another wrinkle we haven‚Äôt talked about yet. This code using integers‚Äîpart of which was shown in Listing 4-2‚Äîworks and is valid:\n\n```rust\nfn main() {\n    let x = 5;\n    let y = x;\n\n    println!(\"x = {x}, y = {y}\");\n}\n```\n\nBut this code seems to contradict what we just learned: we don‚Äôt have a call to `clone`, but `x` is still valid and wasn‚Äôt moved into `y`.\n\nThe reason is that types such as integers that have a known size at compile time are stored entirely on the stack, so copies of the actual values are quick to make. That means there‚Äôs no reason we would want to prevent `x` from being valid after we create the variable `y`. In other words, there‚Äôs no difference between deep and shallow copying here, so calling `clone` wouldn‚Äôt do anything different from the usual shallow copying, and we can leave it out.\n\nRust has a special annotation called the `Copy` trait that we can place on types that are stored on the stack, as integers are (we‚Äôll talk more about traits in [Chapter 10](ch10-02-traits.html)). If a type implements the `Copy` trait, variables that use it do not move, but rather are trivially copied, making them still valid after assignment to another variable.\n\nRust won‚Äôt let us annotate a type with `Copy` if the type, or any of its parts, has implemented the `Drop` trait. If the type needs something special to happen when the value goes out of scope and we add the `Copy` annotation to that type, we‚Äôll get a compile-time error. To learn about how to add the `Copy` annotation to your type to implement the trait, see [‚ÄúDerivable Traits‚Äù](appendix-03-derivable-traits.html) in Appendix C.\n\nSo, what types implement the `Copy` trait? You can check the documentation for the given type to be sure, but as a general rule, any group of simple scalar values can implement `Copy`, and nothing that requires allocation or is some form of resource can implement `Copy`. Here are some of the types that implement `Copy`:\n\n-   All the integer types, such as `u32`.\n-   The Boolean type, `bool`, with values `true` and `false`.\n-   All the floating-point types, such as `f64`.\n-   The character type, `char`.\n-   Tuples, if they only contain types that also implement `Copy`. For example, `(i32, i32)` implements `Copy`, but `(i32, String)` does not.\n\n### [Ownership and Functions](#ownership-and-functions)\n\nThe mechanics of passing a value to a function are similar to those when assigning a value to a variable. Passing a variable to a function will move or copy, just as assignment does. Listing 4-3 has an example with some annotations showing where variables go into and out of scope.\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let s = String::from(\"hello\");  // s comes into scope\n\n    takes_ownership(s);             // s's value moves into the function...\n                                    // ... and so is no longer valid here\n\n    let x = 5;                      // x comes into scope\n\n    makes_copy(x);                  // x would move into the function,\n                                    // but i32 is Copy, so it's okay to still\n                                    // use x afterward\n\n} // Here, x goes out of scope, then s. But because s's value was moved, nothing\n  // special happens.\n\nfn takes_ownership(some_string: String) { // some_string comes into scope\n    println!(\"{some_string}\");\n} // Here, some_string goes out of scope and `drop` is called. The backing\n  // memory is freed.\n\nfn makes_copy(some_integer: i32) { // some_integer comes into scope\n    println!(\"{some_integer}\");\n} // Here, some_integer goes out of scope. Nothing special happens.\n```\n\nListing 4-3: Functions with ownership and scope annotated\n\nIf we tried to use `s` after the call to `takes_ownership`, Rust would throw a compile-time error. These static checks protect us from mistakes. Try adding code to `main` that uses `s` and `x` to see where you can use them and where the ownership rules prevent you from doing so.\n\n### [Return Values and Scope](#return-values-and-scope)\n\nReturning values can also transfer ownership. Listing 4-4 shows an example of a function that returns some value, with similar annotations as those in Listing 4-3.\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let s1 = gives_ownership();         // gives_ownership moves its return\n                                        // value into s1\n\n    let s2 = String::from(\"hello\");     // s2 comes into scope\n\n    let s3 = takes_and_gives_back(s2);  // s2 is moved into\n                                        // takes_and_gives_back, which also\n                                        // moves its return value into s3\n} // Here, s3 goes out of scope and is dropped. s2 was moved, so nothing\n  // happens. s1 goes out of scope and is dropped.\n\nfn gives_ownership() -> String {             // gives_ownership will move its\n                                             // return value into the function\n                                             // that calls it\n\n    let some_string = String::from(\"yours\"); // some_string comes into scope\n\n    some_string                              // some_string is returned and\n                                             // moves out to the calling\n                                             // function\n}\n\n// This function takes a String and returns one\nfn takes_and_gives_back(a_string: String) -> String { // a_string comes into\n                                                      // scope\n\n    a_string  // a_string is returned and moves out to the calling function\n}\n```\n\nListing 4-4: Transferring ownership of return values\n\nThe ownership of a variable follows the same pattern every time: assigning a value to another variable moves it. When a variable that includes data on the heap goes out of scope, the value will be cleaned up by `drop` unless ownership of the data has been moved to another variable.\n\nWhile this works, taking ownership and then returning ownership with every function is a bit tedious. What if we want to let a function use a value but not take ownership? It‚Äôs quite annoying that anything we pass in also needs to be passed back if we want to use it again, in addition to any data resulting from the body of the function that we might want to return as well.\n\nRust does let us return multiple values using a tuple, as shown in Listing 4-5.\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let s1 = String::from(\"hello\");\n\n    let (s2, len) = calculate_length(s1);\n\n    println!(\"The length of '{s2}' is {len}.\");\n}\n\nfn calculate_length(s: String) -> (String, usize) {\n    let length = s.len(); // len() returns the length of a String\n\n    (s, length)\n}\n```\n\nListing 4-5: Returning ownership of parameters\n\nBut this is too much ceremony and a lot of work for a concept that should be common. Luckily for us, Rust has a feature for using a value without transferring ownership, called _references_.\n\n## [References and Borrowing](#references-and-borrowing)\n\nThe issue with the tuple code in Listing 4-5 is that we have to return the `String` to the calling function so we can still use the `String` after the call to `calculate_length`, because the `String` was moved into `calculate_length`. Instead, we can provide a reference to the `String` value. A _reference_ is like a pointer in that it‚Äôs an address we can follow to access the data stored at that address; that data is owned by some other variable. Unlike a pointer, a reference is guaranteed to point to a valid value of a particular type for the life of that reference.\n\nHere is how you would define and use a `calculate_length` function that has a reference to an object as a parameter instead of taking ownership of the value:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let s1 = String::from(\"hello\");\n\n    let len = calculate_length(&s1);\n\n    println!(\"The length of '{s1}' is {len}.\");\n}\n\nfn calculate_length(s: &String) -> usize {\n    s.len()\n}\n```\n\nFirst, notice that all the tuple code in the variable declaration and the function return value is gone. Second, note that we pass `&s1` into `calculate_length` and, in its definition, we take `&String` rather than `String`. These ampersands represent _references_, and they allow you to refer to some value without taking ownership of it. Figure 4-5 depicts this concept.\n\n![Three tables: the table for s contains only a pointer to the table\nfor s1. The table for s1 contains the stack data for s1 and points to the\nstring data on the heap.](img/trpl04-05.svg)\n\nFigure 4-5: A diagram of `&String s` pointing at `String s1`\n\nNote: The opposite of referencing by using `&` is _dereferencing_, which is accomplished with the dereference operator, `*`. We‚Äôll see some uses of the dereference operator in Chapter 8 and discuss details of dereferencing in Chapter 15.\n\nLet‚Äôs take a closer look at the function call here:\n\n```rust\nfn main() {\n    let s1 = String::from(\"hello\");\n\n    let len = calculate_length(&s1);\n\n    println!(\"The length of '{s1}' is {len}.\");\n}\n\nfn calculate_length(s: &String) -> usize {\n    s.len()\n}\n```\n\nThe `&s1` syntax lets us create a reference that _refers_ to the value of `s1` but does not own it. Because it does not own it, the value it points to will not be dropped when the reference stops being used.\n\nLikewise, the signature of the function uses `&` to indicate that the type of the parameter `s` is a reference. Let‚Äôs add some explanatory annotations:\n\n```rust\nfn main() {\n    let s1 = String::from(\"hello\");\n\n    let len = calculate_length(&s1);\n\n    println!(\"The length of '{s1}' is {len}.\");\n}\n\nfn calculate_length(s: &String) -> usize { // s is a reference to a String\n    s.len()\n} // Here, s goes out of scope. But because it does not have ownership of what\n  // it refers to, it is not dropped.\n```\n\nThe scope in which the variable `s` is valid is the same as any function parameter‚Äôs scope, but the value pointed to by the reference is not dropped when `s` stops being used, because `s` doesn‚Äôt have ownership. When functions have references as parameters instead of the actual values, we won‚Äôt need to return the values in order to give back ownership, because we never had ownership.\n\nWe call the action of creating a reference _borrowing_. As in real life, if a person owns something, you can borrow it from them. When you‚Äôre done, you have to give it back. You don‚Äôt own it.\n\nSo, what happens if we try to modify something we‚Äôre borrowing? Try the code in Listing 4-6. Spoiler alert: it doesn‚Äôt work!\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let s = String::from(\"hello\");\n\n    change(&s);\n}\n\nfn change(some_string: &String) {\n    some_string.push_str(\", world\");\n}\n```\n\nListing 4-6: Attempting to modify a borrowed value\n\nHere‚Äôs the error:\n\n```console\n$ cargo run\n   Compiling ownership v0.1.0 (file:///projects/ownership)\nerror[E0596]: cannot borrow `*some_string` as mutable, as it is behind a `&` reference\n --> src/main.rs:8:5\n  |\n8 |     some_string.push_str(\", world\");\n  |     ^^^^^^^^^^^ `some_string` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n  |\nhelp: consider changing this to be a mutable reference\n  |\n7 | fn change(some_string: &mut String) {\n  |                         +++\n\nFor more information about this error, try `rustc --explain E0596`.\nerror: could not compile `ownership` (bin \"ownership\") due to 1 previous error\n\n```\n\nJust as variables are immutable by default, so are references. We‚Äôre not allowed to modify something we have a reference to.\n\n### [Mutable References](#mutable-references)\n\nWe can fix the code from Listing 4-6 to allow us to modify a borrowed value with just a few small tweaks that use, instead, a _mutable reference_:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let mut s = String::from(\"hello\");\n\n    change(&mut s);\n}\n\nfn change(some_string: &mut String) {\n    some_string.push_str(\", world\");\n}\n```\n\nFirst we change `s` to be `mut`. Then we create a mutable reference with `&mut s` where we call the `change` function, and update the function signature to accept a mutable reference with `some_string: &mut String`. This makes it very clear that the `change` function will mutate the value it borrows.\n\nMutable references have one big restriction: if you have a mutable reference to a value, you can have no other references to that value. This code that attempts to create two mutable references to `s` will fail:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let mut s = String::from(\"hello\");\n\n    let r1 = &mut s;\n    let r2 = &mut s;\n\n    println!(\"{}, {}\", r1, r2);\n}\n```\n\nHere‚Äôs the error:\n\n```console\n$ cargo run\n   Compiling ownership v0.1.0 (file:///projects/ownership)\nerror[E0499]: cannot borrow `s` as mutable more than once at a time\n --> src/main.rs:5:14\n  |\n4 |     let r1 = &mut s;\n  |              ------ first mutable borrow occurs here\n5 |     let r2 = &mut s;\n  |              ^^^^^^ second mutable borrow occurs here\n6 |\n7 |     println!(\"{}, {}\", r1, r2);\n  |                        -- first borrow later used here\n\nFor more information about this error, try `rustc --explain E0499`.\nerror: could not compile `ownership` (bin \"ownership\") due to 1 previous error\n\n```\n\nThis error says that this code is invalid because we cannot borrow `s` as mutable more than once at a time. The first mutable borrow is in `r1` and must last until it‚Äôs used in the `println!`, but between the creation of that mutable reference and its usage, we tried to create another mutable reference in `r2` that borrows the same data as `r1`.\n\nThe restriction preventing multiple mutable references to the same data at the same time allows for mutation but in a very controlled fashion. It‚Äôs something that new Rustaceans struggle with because most languages let you mutate whenever you‚Äôd like. The benefit of having this restriction is that Rust can prevent data races at compile time. A _data race_ is similar to a race condition and happens when these three behaviors occur:\n\n-   Two or more pointers access the same data at the same time.\n-   At least one of the pointers is being used to write to the data.\n-   There‚Äôs no mechanism being used to synchronize access to the data.\n\nData races cause undefined behavior and can be difficult to diagnose and fix when you‚Äôre trying to track them down at runtime; Rust prevents this problem by refusing to compile code with data races!\n\nAs always, we can use curly brackets to create a new scope, allowing for multiple mutable references, just not _simultaneous_ ones:\n\n```rust\nfn main() {\n    let mut s = String::from(\"hello\");\n\n    {\n        let r1 = &mut s;\n    } // r1 goes out of scope here, so we can make a new reference with no problems.\n\n    let r2 = &mut s;\n}\n```\n\nRust enforces a similar rule for combining mutable and immutable references. This code results in an error:\n\n```rust\nfn main() {\n    let mut s = String::from(\"hello\");\n\n    let r1 = &s; // no problem\n    let r2 = &s; // no problem\n    let r3 = &mut s; // BIG PROBLEM\n\n    println!(\"{}, {}, and {}\", r1, r2, r3);\n}\n```\n\nHere‚Äôs the error:\n\n```console\n$ cargo run\n   Compiling ownership v0.1.0 (file:///projects/ownership)\nerror[E0502]: cannot borrow `s` as mutable because it is also borrowed as immutable\n --> src/main.rs:6:14\n  |\n4 |     let r1 = &s; // no problem\n  |              -- immutable borrow occurs here\n5 |     let r2 = &s; // no problem\n6 |     let r3 = &mut s; // BIG PROBLEM\n  |              ^^^^^^ mutable borrow occurs here\n7 |\n8 |     println!(\"{}, {}, and {}\", r1, r2, r3);\n  |                                -- immutable borrow later used here\n\nFor more information about this error, try `rustc --explain E0502`.\nerror: could not compile `ownership` (bin \"ownership\") due to 1 previous error\n\n```\n\nWhew! We _also_ cannot have a mutable reference while we have an immutable one to the same value.\n\nUsers of an immutable reference don‚Äôt expect the value to suddenly change out from under them! However, multiple immutable references are allowed because no one who is just reading the data has the ability to affect anyone else‚Äôs reading of the data.\n\nNote that a reference‚Äôs scope starts from where it is introduced and continues through the last time that reference is used. For instance, this code will compile because the last usage of the immutable references, the `println!`, occurs before the mutable reference is introduced:\n\n```rust\nfn main() {\n    let mut s = String::from(\"hello\");\n\n    let r1 = &s; // no problem\n    let r2 = &s; // no problem\n    println!(\"{r1} and {r2}\");\n    // variables r1 and r2 will not be used after this point\n\n    let r3 = &mut s; // no problem\n    println!(\"{r3}\");\n}\n```\n\nThe scopes of the immutable references `r1` and `r2` end after the `println!` where they are last used, which is before the mutable reference `r3` is created. These scopes don‚Äôt overlap, so this code is allowed: the compiler can tell that the reference is no longer being used at a point before the end of the scope.\n\nEven though borrowing errors may be frustrating at times, remember that it‚Äôs the Rust compiler pointing out a potential bug early (at compile time rather than at runtime) and showing you exactly where the problem is. Then you don‚Äôt have to track down why your data isn‚Äôt what you thought it was.\n\n### [Dangling References](#dangling-references)\n\nIn languages with pointers, it‚Äôs easy to erroneously create a _dangling pointer_‚Äîa pointer that references a location in memory that may have been given to someone else‚Äîby freeing some memory while preserving a pointer to that memory. In Rust, by contrast, the compiler guarantees that references will never be dangling references: if you have a reference to some data, the compiler will ensure that the data will not go out of scope before the reference to the data does.\n\nLet‚Äôs try to create a dangling reference to see how Rust prevents them with a compile-time error:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let reference_to_nothing = dangle();\n}\n\nfn dangle() -> &String {\n    let s = String::from(\"hello\");\n\n    &s\n}\n```\n\nHere‚Äôs the error:\n\n```console\n$ cargo run\n   Compiling ownership v0.1.0 (file:///projects/ownership)\nerror[E0106]: missing lifetime specifier\n --> src/main.rs:5:16\n  |\n5 | fn dangle() -> &String {\n  |                ^ expected named lifetime parameter\n  |\n  = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\nhelp: consider using the `'static` lifetime, but this is uncommon unless you're returning a borrowed value from a `const` or a `static`\n  |\n5 | fn dangle() -> &'static String {\n  |                 +++++++\nhelp: instead, you are more likely to want to return an owned value\n  |\n5 - fn dangle() -> &String {\n5 + fn dangle() -> String {\n  |\n\nerror[E0515]: cannot return reference to local variable `s`\n --> src/main.rs:8:5\n  |\n8 |     &s\n  |     ^^ returns a reference to data owned by the current function\n\nSome errors have detailed explanations: E0106, E0515.\nFor more information about an error, try `rustc --explain E0106`.\nerror: could not compile `ownership` (bin \"ownership\") due to 2 previous errors\n\n```\n\nThis error message refers to a feature we haven‚Äôt covered yet: lifetimes. We‚Äôll discuss lifetimes in detail in Chapter 10. But, if you disregard the parts about lifetimes, the message does contain the key to why this code is a problem:\n\n```text\nthis function's return type contains a borrowed value, but there is no value\nfor it to be borrowed from\n\n```\n\nLet‚Äôs take a closer look at exactly what‚Äôs happening at each stage of our `dangle` code:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let reference_to_nothing = dangle();\n}\n\nfn dangle() -> &String { // dangle returns a reference to a String\n\n    let s = String::from(\"hello\"); // s is a new String\n\n    &s // we return a reference to the String, s\n} // Here, s goes out of scope, and is dropped. Its memory goes away.\n  // Danger!\n```\n\nBecause `s` is created inside `dangle`, when the code of `dangle` is finished, `s` will be deallocated. But we tried to return a reference to it. That means this reference would be pointing to an invalid `String`. That‚Äôs no good! Rust won‚Äôt let us do this.\n\nThe solution here is to return the `String` directly:\n\n```rust\nfn main() {\n    let string = no_dangle();\n}\n\nfn no_dangle() -> String {\n    let s = String::from(\"hello\");\n\n    s\n}\n```\n\nThis works without any problems. Ownership is moved out, and nothing is deallocated.\n\n### [The Rules of References](#the-rules-of-references)\n\nLet‚Äôs recap what we‚Äôve discussed about references:\n\n-   At any given time, you can have _either_ one mutable reference _or_ any number of immutable references.\n-   References must always be valid.\n\nNext, we‚Äôll look at a different kind of reference: slices.\n\n## [The Slice Type](#the-slice-type)\n\n_Slices_ let you reference a contiguous sequence of elements in a [collection](ch08-00-common-collections.html) rather than the whole collection. A slice is a kind of reference, so it does not have ownership.\n\nHere‚Äôs a small programming problem: write a function that takes a string of words separated by spaces and returns the first word it finds in that string. If the function doesn‚Äôt find a space in the string, the whole string must be one word, so the entire string should be returned.\n\nLet‚Äôs work through how we‚Äôd write the signature of this function without using slices, to understand the problem that slices will solve:\n\n```rust\nfn first_word(s: &String) -> ?\n```\n\nThe `first_word` function has a `&String` as a parameter. We don‚Äôt want ownership, so this is fine. But what should we return? We don‚Äôt really have a way to talk about _part_ of a string. However, we could return the index of the end of the word, indicated by a space. Let‚Äôs try that, as shown in Listing 4-7.\n\nFilename: src/main.rs\n\n```rust\nfn first_word(s: &String) -> usize {\n    let bytes = s.as_bytes();\n\n    for (i, &item) in bytes.iter().enumerate() {\n        if item == b' ' {\n            return i;\n        }\n    }\n\n    s.len()\n}\n\nfn main() {}\n```\n\nListing 4-7: The `first_word` function that returns a byte index value into the `String` parameter\n\nBecause we need to go through the `String` element by element and check whether a value is a space, we‚Äôll convert our `String` to an array of bytes using the `as_bytes` method.\n\n```rust\nfn first_word(s: &String) -> usize {\n    let bytes = s.as_bytes();\n\n    for (i, &item) in bytes.iter().enumerate() {\n        if item == b' ' {\n            return i;\n        }\n    }\n\n    s.len()\n}\n\nfn main() {}\n```\n\nNext, we create an iterator over the array of bytes using the `iter` method:\n\n```rust\nfn first_word(s: &String) -> usize {\n    let bytes = s.as_bytes();\n\n    for (i, &item) in bytes.iter().enumerate() {\n        if item == b' ' {\n            return i;\n        }\n    }\n\n    s.len()\n}\n\nfn main() {}\n```\n\nWe‚Äôll discuss iterators in more detail in [Chapter 13](ch13-02-iterators.html). For now, know that `iter` is a method that returns each element in a collection and that `enumerate` wraps the result of `iter` and returns each element as part of a tuple instead. The first element of the tuple returned from `enumerate` is the index, and the second element is a reference to the element. This is a bit more convenient than calculating the index ourselves.\n\nBecause the `enumerate` method returns a tuple, we can use patterns to destructure that tuple. We‚Äôll be discussing patterns more in [Chapter 6](about:blank/ch06-02-match.html#patterns-that-bind-to-values). In the `for` loop, we specify a pattern that has `i` for the index in the tuple and `&item` for the single byte in the tuple. Because we get a reference to the element from `.iter().enumerate()`, we use `&` in the pattern.\n\nInside the `for` loop, we search for the byte that represents the space by using the byte literal syntax. If we find a space, we return the position. Otherwise, we return the length of the string by using `s.len()`.\n\n```rust\nfn first_word(s: &String) -> usize {\n    let bytes = s.as_bytes();\n\n    for (i, &item) in bytes.iter().enumerate() {\n        if item == b' ' {\n            return i;\n        }\n    }\n\n    s.len()\n}\n\nfn main() {}\n```\n\nWe now have a way to find out the index of the end of the first word in the string, but there‚Äôs a problem. We‚Äôre returning a `usize` on its own, but it‚Äôs only a meaningful number in the context of the `&String`. In other words, because it‚Äôs a separate value from the `String`, there‚Äôs no guarantee that it will still be valid in the future. Consider the program in Listing 4-8 that uses the `first_word` function from Listing 4-7.\n\nFilename: src/main.rs\n\n```rust\nfn first_word(s: &String) -> usize {\n    let bytes = s.as_bytes();\n\n    for (i, &item) in bytes.iter().enumerate() {\n        if item == b' ' {\n            return i;\n        }\n    }\n\n    s.len()\n}\n\nfn main() {\n    let mut s = String::from(\"hello world\");\n\n    let word = first_word(&s); // word will get the value 5\n\n    s.clear(); // this empties the String, making it equal to \"\"\n\n    // word still has the value 5 here, but there's no more string that\n    // we could meaningfully use the value 5 with. word is now totally invalid!\n}\n```\n\nListing 4-8: Storing the result from calling the `first_word` function and then changing the `String` contents\n\nThis program compiles without any errors and would also do so if we used `word` after calling `s.clear()`. Because `word` isn‚Äôt connected to the state of `s` at all, `word` still contains the value `5`. We could use that value `5` with the variable `s` to try to extract the first word out, but this would be a bug because the contents of `s` have changed since we saved `5` in `word`.\n\nHaving to worry about the index in `word` getting out of sync with the data in `s` is tedious and error prone! Managing these indices is even more brittle if we write a `second_word` function. Its signature would have to look like this:\n\n```rust\nfn second_word(s: &String) -> (usize, usize) {\n```\n\nNow we‚Äôre tracking a starting _and_ an ending index, and we have even more values that were calculated from data in a particular state but aren‚Äôt tied to that state at all. We have three unrelated variables floating around that need to be kept in sync.\n\nLuckily, Rust has a solution to this problem: string slices.\n\n### [String Slices](#string-slices)\n\nA _string slice_ is a reference to part of a `String`, and it looks like this:\n\n```rust\nfn main() {\n    let s = String::from(\"hello world\");\n\n    let hello = &s[0..5];\n    let world = &s[6..11];\n}\n```\n\nRather than a reference to the entire `String`, `hello` is a reference to a portion of the `String`, specified in the extra `[0..5]` bit. We create slices using a range within brackets by specifying `[starting_index..ending_index]`, where `starting_index` is the first position in the slice and `ending_index` is one more than the last position in the slice. Internally, the slice data structure stores the starting position and the length of the slice, which corresponds to `ending_index` minus `starting_index`. So, in the case of `let world = &s[6..11];`, `world` would be a slice that contains a pointer to the byte at index 6 of `s` with a length value of `5`.\n\nFigure 4-6 shows this in a diagram.\n\n![Three tables: a table representing the stack data of s, which points\nto the byte at index 0 in a table of the string data \"hello world\" on\nthe heap. The third table rep-resents the stack data of the slice world, which\nhas a length value of 5 and points to byte 6 of the heap data table.](img/trpl04-06.svg)\n\nFigure 4-6: String slice referring to part of a `String`\n\nWith Rust‚Äôs `..` range syntax, if you want to start at index 0, you can drop the value before the two periods. In other words, these are equal:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet s = String::from(\"hello\");\n\nlet slice = &s[0..2];\nlet slice = &s[..2];\n}\n```\n\nBy the same token, if your slice includes the last byte of the `String`, you can drop the trailing number. That means these are equal:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet s = String::from(\"hello\");\n\nlet len = s.len();\n\nlet slice = &s[3..len];\nlet slice = &s[3..];\n}\n```\n\nYou can also drop both values to take a slice of the entire string. So these are equal:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet s = String::from(\"hello\");\n\nlet len = s.len();\n\nlet slice = &s[0..len];\nlet slice = &s[..];\n}\n```\n\nNote: String slice range indices must occur at valid UTF-8 character boundaries. If you attempt to create a string slice in the middle of a multibyte character, your program will exit with an error. For the purposes of introducing string slices, we are assuming ASCII only in this section; a more thorough discussion of UTF-8 handling is in the [‚ÄúStoring UTF-8 Encoded Text with Strings‚Äù](about:blank/ch08-02-strings.html#storing-utf-8-encoded-text-with-strings) section of Chapter 8.\n\nWith all this information in mind, let‚Äôs rewrite `first_word` to return a slice. The type that signifies ‚Äústring slice‚Äù is written as `&str`:\n\nFilename: src/main.rs\n\n```rust\nfn first_word(s: &String) -> &str {\n    let bytes = s.as_bytes();\n\n    for (i, &item) in bytes.iter().enumerate() {\n        if item == b' ' {\n            return &s[0..i];\n        }\n    }\n\n    &s[..]\n}\n\nfn main() {}\n```\n\nWe get the index for the end of the word the same way we did in Listing 4-7, by looking for the first occurrence of a space. When we find a space, we return a string slice using the start of the string and the index of the space as the starting and ending indices.\n\nNow when we call `first_word`, we get back a single value that is tied to the underlying data. The value is made up of a reference to the starting point of the slice and the number of elements in the slice.\n\nReturning a slice would also work for a `second_word` function:\n\n```rust\nfn second_word(s: &String) -> &str {\n```\n\nWe now have a straightforward API that‚Äôs much harder to mess up because the compiler will ensure the references into the `String` remain valid. Remember the bug in the program in Listing 4-8, when we got the index to the end of the first word but then cleared the string so our index was invalid? That code was logically incorrect but didn‚Äôt show any immediate errors. The problems would show up later if we kept trying to use the first word index with an emptied string. Slices make this bug impossible and let us know we have a problem with our code much sooner. Using the slice version of `first_word` will throw a compile-time error:\n\nFilename: src/main.rs\n\n```rust\nfn first_word(s: &String) -> &str {\n    let bytes = s.as_bytes();\n\n    for (i, &item) in bytes.iter().enumerate() {\n        if item == b' ' {\n            return &s[0..i];\n        }\n    }\n\n    &s[..]\n}\n\nfn main() {\n    let mut s = String::from(\"hello world\");\n\n    let word = first_word(&s);\n\n    s.clear(); // error!\n\n    println!(\"the first word is: {word}\");\n}\n```\n\nHere‚Äôs the compiler error:\n\n```console\n$ cargo run\n   Compiling ownership v0.1.0 (file:///projects/ownership)\nerror[E0502]: cannot borrow `s` as mutable because it is also borrowed as immutable\n  --> src/main.rs:18:5\n   |\n16 |     let word = first_word(&s);\n   |                           -- immutable borrow occurs here\n17 |\n18 |     s.clear(); // error!\n   |     ^^^^^^^^^ mutable borrow occurs here\n19 |\n20 |     println!(\"the first word is: {word}\");\n   |                                  ------ immutable borrow later used here\n\nFor more information about this error, try `rustc --explain E0502`.\nerror: could not compile `ownership` (bin \"ownership\") due to 1 previous error\n\n```\n\nRecall from the borrowing rules that if we have an immutable reference to something, we cannot also take a mutable reference. Because `clear` needs to truncate the `String`, it needs to get a mutable reference. The `println!` after the call to `clear` uses the reference in `word`, so the immutable reference must still be active at that point. Rust disallows the mutable reference in `clear` and the immutable reference in `word` from existing at the same time, and compilation fails. Not only has Rust made our API easier to use, but it has also eliminated an entire class of errors at compile time!\n\n#### [String Literals as Slices](#string-literals-as-slices)\n\nRecall that we talked about string literals being stored inside the binary. Now that we know about slices, we can properly understand string literals:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet s = \"Hello, world!\";\n}\n```\n\nThe type of `s` here is `&str`: it‚Äôs a slice pointing to that specific point of the binary. This is also why string literals are immutable; `&str` is an immutable reference.\n\n#### [String Slices as Parameters](#string-slices-as-parameters)\n\nKnowing that you can take slices of literals and `String` values leads us to one more improvement on `first_word`, and that‚Äôs its signature:\n\n```rust\nfn first_word(s: &String) -> &str {\n```\n\nA more experienced Rustacean would write the signature shown in Listing 4-9 instead because it allows us to use the same function on both `&String` values and `&str` values.\n\n```rust\nfn first_word(s: &str) -> &str {\n    let bytes = s.as_bytes();\n\n    for (i, &item) in bytes.iter().enumerate() {\n        if item == b' ' {\n            return &s[0..i];\n        }\n    }\n\n    &s[..]\n}\n\nfn main() {\n    let my_string = String::from(\"hello world\");\n\n    // `first_word` works on slices of `String`s, whether partial or whole\n    let word = first_word(&my_string[0..6]);\n    let word = first_word(&my_string[..]);\n    // `first_word` also works on references to `String`s, which are equivalent\n    // to whole slices of `String`s\n    let word = first_word(&my_string);\n\n    let my_string_literal = \"hello world\";\n\n    // `first_word` works on slices of string literals, whether partial or whole\n    let word = first_word(&my_string_literal[0..6]);\n    let word = first_word(&my_string_literal[..]);\n\n    // Because string literals *are* string slices already,\n    // this works too, without the slice syntax!\n    let word = first_word(my_string_literal);\n}\n```\n\nListing 4-9: Improving the `first_word` function by using a string slice for the type of the `s` parameter\n\nIf we have a string slice, we can pass that directly. If we have a `String`, we can pass a slice of the `String` or a reference to the `String`. This flexibility takes advantage of _deref coercions_, a feature we will cover in the [‚ÄúImplicit Deref Coercions with Functions and Methods‚Äù](about:blank/ch15-02-deref.html#implicit-deref-coercions-with-functions-and-methods) section of Chapter 15.\n\nDefining a function to take a string slice instead of a reference to a `String` makes our API more general and useful without losing any functionality:\n\nFilename: src/main.rs\n\n```rust\nfn first_word(s: &str) -> &str {\n    let bytes = s.as_bytes();\n\n    for (i, &item) in bytes.iter().enumerate() {\n        if item == b' ' {\n            return &s[0..i];\n        }\n    }\n\n    &s[..]\n}\n\nfn main() {\n    let my_string = String::from(\"hello world\");\n\n    // `first_word` works on slices of `String`s, whether partial or whole\n    let word = first_word(&my_string[0..6]);\n    let word = first_word(&my_string[..]);\n    // `first_word` also works on references to `String`s, which are equivalent\n    // to whole slices of `String`s\n    let word = first_word(&my_string);\n\n    let my_string_literal = \"hello world\";\n\n    // `first_word` works on slices of string literals, whether partial or whole\n    let word = first_word(&my_string_literal[0..6]);\n    let word = first_word(&my_string_literal[..]);\n\n    // Because string literals *are* string slices already,\n    // this works too, without the slice syntax!\n    let word = first_word(my_string_literal);\n}\n```\n\n### [Other Slices](#other-slices)\n\nString slices, as you might imagine, are specific to strings. But there‚Äôs a more general slice type too. Consider this array:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet a = [1, 2, 3, 4, 5];\n}\n```\n\nJust as we might want to refer to part of a string, we might want to refer to part of an array. We‚Äôd do so like this:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet a = [1, 2, 3, 4, 5];\n\nlet slice = &a[1..3];\n\nassert_eq!(slice, &[2, 3]);\n}\n```\n\nThis slice has the type `&[i32]`. It works the same way as string slices do, by storing a reference to the first element and a length. You‚Äôll use this kind of slice for all sorts of other collections. We‚Äôll discuss these collections in detail when we talk about vectors in Chapter 8.\n\n## [Summary](#summary-3)\n\nThe concepts of ownership, borrowing, and slices ensure memory safety in Rust programs at compile time. The Rust language gives you control over your memory usage in the same way as other systems programming languages, but having the owner of data automatically clean up that data when the owner goes out of scope means you don‚Äôt have to write and debug extra code to get this control.\n\nOwnership affects how lots of other parts of Rust work, so we‚Äôll talk about these concepts further throughout the rest of the book. Let‚Äôs move on to Chapter 5 and look at grouping pieces of data together in a `struct`.\n\nA _struct_, or _structure_, is a custom data type that lets you package together and name multiple related values that make up a meaningful group. If you‚Äôre familiar with an object-oriented language, a _struct_ is like an object‚Äôs data attributes. In this chapter, we‚Äôll compare and contrast tuples with structs to build on what you already know and demonstrate when structs are a better way to group data.\n\nWe‚Äôll demonstrate how to define and instantiate structs. We‚Äôll discuss how to define associated functions, especially the kind of associated functions called _methods_, to specify behavior associated with a struct type. Structs and enums (discussed in Chapter 6) are the building blocks for creating new types in your program‚Äôs domain to take full advantage of Rust‚Äôs compile-time type checking.\n\n## [Defining and Instantiating Structs](#defining-and-instantiating-structs)\n\nStructs are similar to tuples, discussed in [‚ÄúThe Tuple Type‚Äù](about:blank/ch03-02-data-types.html#the-tuple-type) section, in that both hold multiple related values. Like tuples, the pieces of a struct can be different types. Unlike with tuples, in a struct you‚Äôll name each piece of data so it‚Äôs clear what the values mean. Adding these names means that structs are more flexible than tuples: you don‚Äôt have to rely on the order of the data to specify or access the values of an instance.\n\nTo define a struct, we enter the keyword `struct` and name the entire struct. A struct‚Äôs name should describe the significance of the pieces of data being grouped together. Then, inside curly brackets, we define the names and types of the pieces of data, which we call _fields_. For example, Listing 5-1 shows a struct that stores information about a user account.\n\nFilename: src/main.rs\n\n```rust\nstruct User {\n    active: bool,\n    username: String,\n    email: String,\n    sign_in_count: u64,\n}\n\nfn main() {}\n```\n\nListing 5-1: A `User` struct definition\n\nTo use a struct after we‚Äôve defined it, we create an _instance_ of that struct by specifying concrete values for each of the fields. We create an instance by stating the name of the struct and then add curly brackets containing _key: value_ pairs, where the keys are the names of the fields and the values are the data we want to store in those fields. We don‚Äôt have to specify the fields in the same order in which we declared them in the struct. In other words, the struct definition is like a general template for the type, and instances fill in that template with particular data to create values of the type. For example, we can declare a particular user as shown in Listing 5-2.\n\nFilename: src/main.rs\n\n```rust\nstruct User {\n    active: bool,\n    username: String,\n    email: String,\n    sign_in_count: u64,\n}\n\nfn main() {\n    let user1 = User {\n        active: true,\n        username: String::from(\"someusername123\"),\n        email: String::from(\"someone@example.com\"),\n        sign_in_count: 1,\n    };\n}\n```\n\nListing 5-2: Creating an instance of the `User` struct\n\nTo get a specific value from a struct, we use dot notation. For example, to access this user‚Äôs email address, we use `user1.email`. If the instance is mutable, we can change a value by using the dot notation and assigning into a particular field. Listing 5-3 shows how to change the value in the `email` field of a mutable `User` instance.\n\nFilename: src/main.rs\n\n```rust\nstruct User {\n    active: bool,\n    username: String,\n    email: String,\n    sign_in_count: u64,\n}\n\nfn main() {\n    let mut user1 = User {\n        active: true,\n        username: String::from(\"someusername123\"),\n        email: String::from(\"someone@example.com\"),\n        sign_in_count: 1,\n    };\n\n    user1.email = String::from(\"anotheremail@example.com\");\n}\n```\n\nListing 5-3: Changing the value in the `email` field of a `User` instance\n\nNote that the entire instance must be mutable; Rust doesn‚Äôt allow us to mark only certain fields as mutable. As with any expression, we can construct a new instance of the struct as the last expression in the function body to implicitly return that new instance.\n\nListing 5-4 shows a `build_user` function that returns a `User` instance with the given email and username. The `active` field gets the value of `true`, and the `sign_in_count` gets a value of `1`.\n\nFilename: src/main.rs\n\n```rust\nstruct User {\n    active: bool,\n    username: String,\n    email: String,\n    sign_in_count: u64,\n}\n\nfn build_user(email: String, username: String) -> User {\n    User {\n        active: true,\n        username: username,\n        email: email,\n        sign_in_count: 1,\n    }\n}\n\nfn main() {\n    let user1 = build_user(\n        String::from(\"someone@example.com\"),\n        String::from(\"someusername123\"),\n    );\n}\n```\n\nListing 5-4: A `build_user` function that takes an email and username and returns a `User` instance\n\nIt makes sense to name the function parameters with the same name as the struct fields, but having to repeat the `email` and `username` field names and variables is a bit tedious. If the struct had more fields, repeating each name would get even more annoying. Luckily, there‚Äôs a convenient shorthand!\n\n### [Using the Field Init Shorthand](#using-the-field-init-shorthand)\n\nBecause the parameter names and the struct field names are exactly the same in Listing 5-4, we can use the _field init shorthand_ syntax to rewrite `build_user` so it behaves exactly the same but doesn‚Äôt have the repetition of `username` and `email`, as shown in Listing 5-5.\n\nFilename: src/main.rs\n\n```rust\nstruct User {\n    active: bool,\n    username: String,\n    email: String,\n    sign_in_count: u64,\n}\n\nfn build_user(email: String, username: String) -> User {\n    User {\n        active: true,\n        username,\n        email,\n        sign_in_count: 1,\n    }\n}\n\nfn main() {\n    let user1 = build_user(\n        String::from(\"someone@example.com\"),\n        String::from(\"someusername123\"),\n    );\n}\n```\n\nListing 5-5: A `build_user` function that uses field init shorthand because the `username` and `email` parameters have the same name as struct fields\n\nHere, we‚Äôre creating a new instance of the `User` struct, which has a field named `email`. We want to set the `email` field‚Äôs value to the value in the `email` parameter of the `build_user` function. Because the `email` field and the `email` parameter have the same name, we only need to write `email` rather than `email: email`.\n\n### [Creating Instances from Other Instances with Struct Update Syntax](#creating-instances-from-other-instances-with-struct-update-syntax)\n\nIt‚Äôs often useful to create a new instance of a struct that includes most of the values from another instance, but changes some. You can do this using _struct update syntax_.\n\nFirst, in Listing 5-6 we show how to create a new `User` instance in `user2` regularly, without the update syntax. We set a new value for `email` but otherwise use the same values from `user1` that we created in Listing 5-2.\n\nFilename: src/main.rs\n\n```rust\nstruct User {\n    active: bool,\n    username: String,\n    email: String,\n    sign_in_count: u64,\n}\n\nfn main() {\n    // --snip--\n\n    let user1 = User {\n        email: String::from(\"someone@example.com\"),\n        username: String::from(\"someusername123\"),\n        active: true,\n        sign_in_count: 1,\n    };\n\n    let user2 = User {\n        active: user1.active,\n        username: user1.username,\n        email: String::from(\"another@example.com\"),\n        sign_in_count: user1.sign_in_count,\n    };\n}\n```\n\nListing 5-6: Creating a new `User` instance using all but one of the values from `user1`\n\nUsing struct update syntax, we can achieve the same effect with less code, as shown in Listing 5-7. The syntax `..` specifies that the remaining fields not explicitly set should have the same value as the fields in the given instance.\n\nFilename: src/main.rs\n\n```rust\nstruct User {\n    active: bool,\n    username: String,\n    email: String,\n    sign_in_count: u64,\n}\n\nfn main() {\n    // --snip--\n\n    let user1 = User {\n        email: String::from(\"someone@example.com\"),\n        username: String::from(\"someusername123\"),\n        active: true,\n        sign_in_count: 1,\n    };\n\n    let user2 = User {\n        email: String::from(\"another@example.com\"),\n        ..user1\n    };\n}\n```\n\nListing 5-7: Using struct update syntax to set a new `email` value for a `User` instance but to use the rest of the values from `user1`\n\nThe code in Listing 5-7 also creates an instance in `user2` that has a different value for `email` but has the same values for the `username`, `active`, and `sign_in_count` fields from `user1`. The `..user1` must come last to specify that any remaining fields should get their values from the corresponding fields in `user1`, but we can choose to specify values for as many fields as we want in any order, regardless of the order of the fields in the struct‚Äôs definition.\n\nNote that the struct update syntax uses `=` like an assignment; this is because it moves the data, just as we saw in the [‚ÄúVariables and Data Interacting with Move‚Äù](about:blank/ch04-01-what-is-ownership.html#variables-and-data-interacting-with-move) section. In this example, we can no longer use `user1` as a whole after creating `user2` because the `String` in the `username` field of `user1` was moved into `user2`. If we had given `user2` new `String` values for both `email` and `username`, and thus only used the `active` and `sign_in_count` values from `user1`, then `user1` would still be valid after creating `user2`. Both `active` and `sign_in_count` are types that implement the `Copy` trait, so the behavior we discussed in the [‚ÄúStack-Only Data: Copy‚Äù](about:blank/ch04-01-what-is-ownership.html#stack-only-data-copy) section would apply.\n\n### [Using Tuple Structs Without Named Fields to Create Different Types](#using-tuple-structs-without-named-fields-to-create-different-types)\n\nRust also supports structs that look similar to tuples, called _tuple structs_. Tuple structs have the added meaning the struct name provides but don‚Äôt have names associated with their fields; rather, they just have the types of the fields. Tuple structs are useful when you want to give the whole tuple a name and make the tuple a different type from other tuples, and when naming each field as in a regular struct would be verbose or redundant.\n\nTo define a tuple struct, start with the `struct` keyword and the struct name followed by the types in the tuple. For example, here we define and use two tuple structs named `Color` and `Point`:\n\nFilename: src/main.rs\n\n```rust\nstruct Color(i32, i32, i32);\nstruct Point(i32, i32, i32);\n\nfn main() {\n    let black = Color(0, 0, 0);\n    let origin = Point(0, 0, 0);\n}\n```\n\nNote that the `black` and `origin` values are different types because they‚Äôre instances of different tuple structs. Each struct you define is its own type, even though the fields within the struct might have the same types. For example, a function that takes a parameter of type `Color` cannot take a `Point` as an argument, even though both types are made up of three `i32` values. Otherwise, tuple struct instances are similar to tuples in that you can destructure them into their individual pieces, and you can use a `.` followed by the index to access an individual value.\n\n### [Unit-Like Structs Without Any Fields](#unit-like-structs-without-any-fields)\n\nYou can also define structs that don‚Äôt have any fields! These are called _unit-like structs_ because they behave similarly to `()`, the unit type that we mentioned in [‚ÄúThe Tuple Type‚Äù](about:blank/ch03-02-data-types.html#the-tuple-type) section. Unit-like structs can be useful when you need to implement a trait on some type but don‚Äôt have any data that you want to store in the type itself. We‚Äôll discuss traits in Chapter 10. Here‚Äôs an example of declaring and instantiating a unit struct named `AlwaysEqual`:\n\nFilename: src/main.rs\n\n```rust\nstruct AlwaysEqual;\n\nfn main() {\n    let subject = AlwaysEqual;\n}\n```\n\nTo define `AlwaysEqual`, we use the `struct` keyword, the name we want, and then a semicolon. No need for curly brackets or parentheses! Then we can get an instance of `AlwaysEqual` in the `subject` variable in a similar way: using the name we defined, without any curly brackets or parentheses. Imagine that later we‚Äôll implement behavior for this type such that every instance of `AlwaysEqual` is always equal to every instance of any other type, perhaps to have a known result for testing purposes. We wouldn‚Äôt need any data to implement that behavior! You‚Äôll see in Chapter 10 how to define traits and implement them on any type, including unit-like structs.\n\n### [Ownership of Struct Data](#ownership-of-struct-data)\n\nIn the `User` struct definition in Listing 5-1, we used the owned `String` type rather than the `&str` string slice type. This is a deliberate choice because we want each instance of this struct to own all of its data and for that data to be valid for as long as the entire struct is valid.\n\nIt‚Äôs also possible for structs to store references to data owned by something else, but to do so requires the use of _lifetimes_, a Rust feature that we‚Äôll discuss in Chapter 10. Lifetimes ensure that the data referenced by a struct is valid for as long as the struct is. Let‚Äôs say you try to store a reference in a struct without specifying lifetimes, like the following; this won‚Äôt work:\n\nFilename: src/main.rs\n\n```rust\nstruct User {\n    active: bool,\n    username: &str,\n    email: &str,\n    sign_in_count: u64,\n}\n\nfn main() {\n    let user1 = User {\n        active: true,\n        username: \"someusername123\",\n        email: \"someone@example.com\",\n        sign_in_count: 1,\n    };\n}\n```\n\nThe compiler will complain that it needs lifetime specifiers:\n\n```console\n$ cargo run\n   Compiling structs v0.1.0 (file:///projects/structs)\nerror[E0106]: missing lifetime specifier\n --> src/main.rs:3:15\n  |\n3 |     username: &str,\n  |               ^ expected named lifetime parameter\n  |\nhelp: consider introducing a named lifetime parameter\n  |\n1 ~ struct User<'a> {\n2 |     active: bool,\n3 ~     username: &'a str,\n  |\n\nerror[E0106]: missing lifetime specifier\n --> src/main.rs:4:12\n  |\n4 |     email: &str,\n  |            ^ expected named lifetime parameter\n  |\nhelp: consider introducing a named lifetime parameter\n  |\n1 ~ struct User<'a> {\n2 |     active: bool,\n3 |     username: &str,\n4 ~     email: &'a str,\n  |\n\nFor more information about this error, try `rustc --explain E0106`.\nerror: could not compile `structs` (bin \"structs\") due to 2 previous errors\n\n```\n\nIn Chapter 10, we‚Äôll discuss how to fix these errors so you can store references in structs, but for now, we‚Äôll fix errors like these using owned types like `String` instead of references like `&str`.\n\n## [An Example Program Using Structs](#an-example-program-using-structs)\n\nTo understand when we might want to use structs, let‚Äôs write a program that calculates the area of a rectangle. We‚Äôll start by using single variables, and then refactor the program until we‚Äôre using structs instead.\n\nLet‚Äôs make a new binary project with Cargo called _rectangles_ that will take the width and height of a rectangle specified in pixels and calculate the area of the rectangle. Listing 5-8 shows a short program with one way of doing exactly that in our project‚Äôs _src/main.rs_.\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let width1 = 30;\n    let height1 = 50;\n\n    println!(\n        \"The area of the rectangle is {} square pixels.\",\n        area(width1, height1)\n    );\n}\n\nfn area(width: u32, height: u32) -> u32 {\n    width * height\n}\n```\n\nListing 5-8: Calculating the area of a rectangle specified by separate width and height variables\n\nNow, run this program using `cargo run`:\n\n```console\n$ cargo run\n   Compiling rectangles v0.1.0 (file:///projects/rectangles)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.42s\n     Running `target/debug/rectangles`\nThe area of the rectangle is 1500 square pixels.\n\n```\n\nThis code succeeds in figuring out the area of the rectangle by calling the `area` function with each dimension, but we can do more to make this code clear and readable.\n\nThe issue with this code is evident in the signature of `area`:\n\n```rust\nfn main() {\n    let width1 = 30;\n    let height1 = 50;\n\n    println!(\n        \"The area of the rectangle is {} square pixels.\",\n        area(width1, height1)\n    );\n}\n\nfn area(width: u32, height: u32) -> u32 {\n    width * height\n}\n```\n\nThe `area` function is supposed to calculate the area of one rectangle, but the function we wrote has two parameters, and it‚Äôs not clear anywhere in our program that the parameters are related. It would be more readable and more manageable to group width and height together. We‚Äôve already discussed one way we might do that in [‚ÄúThe Tuple Type‚Äù](about:blank/ch03-02-data-types.html#the-tuple-type) section of Chapter 3: by using tuples.\n\n### [Refactoring with Tuples](#refactoring-with-tuples)\n\nListing 5-9 shows another version of our program that uses tuples.\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let rect1 = (30, 50);\n\n    println!(\n        \"The area of the rectangle is {} square pixels.\",\n        area(rect1)\n    );\n}\n\nfn area(dimensions: (u32, u32)) -> u32 {\n    dimensions.0 * dimensions.1\n}\n```\n\nListing 5-9: Specifying the width and height of the rectangle with a tuple\n\nIn one way, this program is better. Tuples let us add a bit of structure, and we‚Äôre now passing just one argument. But in another way, this version is less clear: tuples don‚Äôt name their elements, so we have to index into the parts of the tuple, making our calculation less obvious.\n\nMixing up the width and height wouldn‚Äôt matter for the area calculation, but if we want to draw the rectangle on the screen, it would matter! We would have to keep in mind that `width` is the tuple index `0` and `height` is the tuple index `1`. This would be even harder for someone else to figure out and keep in mind if they were to use our code. Because we haven‚Äôt conveyed the meaning of our data in our code, it‚Äôs now easier to introduce errors.\n\n### [Refactoring with Structs: Adding More Meaning](#refactoring-with-structs-adding-more-meaning)\n\nWe use structs to add meaning by labeling the data. We can transform the tuple we‚Äôre using into a struct with a name for the whole as well as names for the parts, as shown in Listing 5-10.\n\nFilename: src/main.rs\n\n```rust\nstruct Rectangle {\n    width: u32,\n    height: u32,\n}\n\nfn main() {\n    let rect1 = Rectangle {\n        width: 30,\n        height: 50,\n    };\n\n    println!(\n        \"The area of the rectangle is {} square pixels.\",\n        area(&rect1)\n    );\n}\n\nfn area(rectangle: &Rectangle) -> u32 {\n    rectangle.width * rectangle.height\n}\n```\n\nListing 5-10: Defining a `Rectangle` struct\n\nHere we‚Äôve defined a struct and named it `Rectangle`. Inside the curly brackets, we defined the fields as `width` and `height`, both of which have type `u32`. Then, in `main`, we created a particular instance of `Rectangle` that has a width of `30` and a height of `50`.\n\nOur `area` function is now defined with one parameter, which we‚Äôve named `rectangle`, whose type is an immutable borrow of a struct `Rectangle` instance. As mentioned in Chapter 4, we want to borrow the struct rather than take ownership of it. This way, `main` retains its ownership and can continue using `rect1`, which is the reason we use the `&` in the function signature and where we call the function.\n\nThe `area` function accesses the `width` and `height` fields of the `Rectangle` instance (note that accessing fields of a borrowed struct instance does not move the field values, which is why you often see borrows of structs). Our function signature for `area` now says exactly what we mean: calculate the area of `Rectangle`, using its `width` and `height` fields. This conveys that the width and height are related to each other, and it gives descriptive names to the values rather than using the tuple index values of `0` and `1`. This is a win for clarity.\n\n### [Adding Useful Functionality with Derived Traits](#adding-useful-functionality-with-derived-traits)\n\nIt‚Äôd be useful to be able to print an instance of `Rectangle` while we‚Äôre debugging our program and see the values for all its fields. Listing 5-11 tries using the [`println!` macro](../std/macro.println.html) as we have used in previous chapters. This won‚Äôt work, however.\n\nFilename: src/main.rs\n\n```rust\nstruct Rectangle {\n    width: u32,\n    height: u32,\n}\n\nfn main() {\n    let rect1 = Rectangle {\n        width: 30,\n        height: 50,\n    };\n\n    println!(\"rect1 is {}\", rect1);\n}\n```\n\nListing 5-11: Attempting to print a `Rectangle` instance\n\nWhen we compile this code, we get an error with this core message:\n\n```text\nerror[E0277]: `Rectangle` doesn't implement `std::fmt::Display`\n\n```\n\nThe `println!` macro can do many kinds of formatting, and by default, the curly brackets tell `println!` to use formatting known as `Display`: output intended for direct end user consumption. The primitive types we‚Äôve seen so far implement `Display` by default because there‚Äôs only one way you‚Äôd want to show a `1` or any other primitive type to a user. But with structs, the way `println!` should format the output is less clear because there are more display possibilities: Do you want commas or not? Do you want to print the curly brackets? Should all the fields be shown? Due to this ambiguity, Rust doesn‚Äôt try to guess what we want, and structs don‚Äôt have a provided implementation of `Display` to use with `println!` and the `{}` placeholder.\n\nIf we continue reading the errors, we‚Äôll find this helpful note:\n\n```text\n   = help: the trait `std::fmt::Display` is not implemented for `Rectangle`\n   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n\n```\n\nLet‚Äôs try it! The `println!` macro call will now look like `println!(\"rect1 is {rect1:?}\");`. Putting the specifier `:?` inside the curly brackets tells `println!` we want to use an output format called `Debug`. The `Debug` trait enables us to print our struct in a way that is useful for developers so we can see its value while we‚Äôre debugging our code.\n\nCompile the code with this change. Drat! We still get an error:\n\n```text\nerror[E0277]: `Rectangle` doesn't implement `Debug`\n\n```\n\nBut again, the compiler gives us a helpful note:\n\n```text\n   = help: the trait `Debug` is not implemented for `Rectangle`\n   = note: add `#[derive(Debug)]` to `Rectangle` or manually `impl Debug for Rectangle`\n\n```\n\nRust _does_ include functionality to print out debugging information, but we have to explicitly opt in to make that functionality available for our struct. To do that, we add the outer attribute `#[derive(Debug)]` just before the struct definition, as shown in Listing 5-12.\n\nFilename: src/main.rs\n\n```rust\n#[derive(Debug)]\nstruct Rectangle {\n    width: u32,\n    height: u32,\n}\n\nfn main() {\n    let rect1 = Rectangle {\n        width: 30,\n        height: 50,\n    };\n\n    println!(\"rect1 is {rect1:?}\");\n}\n```\n\nListing 5-12: Adding the attribute to derive the `Debug` trait and printing the `Rectangle` instance using debug formatting\n\nNow when we run the program, we won‚Äôt get any errors, and we‚Äôll see the following output:\n\n```console\n$ cargo run\n   Compiling rectangles v0.1.0 (file:///projects/rectangles)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.48s\n     Running `target/debug/rectangles`\nrect1 is Rectangle { width: 30, height: 50 }\n\n```\n\nNice! It‚Äôs not the prettiest output, but it shows the values of all the fields for this instance, which would definitely help during debugging. When we have larger structs, it‚Äôs useful to have output that‚Äôs a bit easier to read; in those cases, we can use `{:#?}` instead of `{:?}` in the `println!` string. In this example, using the `{:#?}` style will output the following:\n\n```console\n$ cargo run\n   Compiling rectangles v0.1.0 (file:///projects/rectangles)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.48s\n     Running `target/debug/rectangles`\nrect1 is Rectangle {\n    width: 30,\n    height: 50,\n}\n\n```\n\nAnother way to print out a value using the `Debug` format is to use the [`dbg!` macro](../std/macro.dbg.html), which takes ownership of an expression (as opposed to `println!`, which takes a reference), prints the file and line number of where that `dbg!` macro call occurs in your code along with the resultant value of that expression, and returns ownership of the value.\n\nNote: Calling the `dbg!` macro prints to the standard error console stream (`stderr`), as opposed to `println!`, which prints to the standard output console stream (`stdout`). We‚Äôll talk more about `stderr` and `stdout` in the [‚ÄúWriting Error Messages to Standard Error Instead of Standard Output‚Äù section in Chapter 12](ch12-06-writing-to-stderr-instead-of-stdout.html).\n\nHere‚Äôs an example where we‚Äôre interested in the value that gets assigned to the `width` field, as well as the value of the whole struct in `rect1`:\n\n```rust\n#[derive(Debug)]\nstruct Rectangle {\n    width: u32,\n    height: u32,\n}\n\nfn main() {\n    let scale = 2;\n    let rect1 = Rectangle {\n        width: dbg!(30 * scale),\n        height: 50,\n    };\n\n    dbg!(&rect1);\n}\n```\n\nWe can put `dbg!` around the expression `30 * scale` and, because `dbg!` returns ownership of the expression‚Äôs value, the `width` field will get the same value as if we didn‚Äôt have the `dbg!` call there. We don‚Äôt want `dbg!` to take ownership of `rect1`, so we use a reference to `rect1` in the next call. Here‚Äôs what the output of this example looks like:\n\n```console\n$ cargo run\n   Compiling rectangles v0.1.0 (file:///projects/rectangles)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.61s\n     Running `target/debug/rectangles`\n[src/main.rs:10:16] 30 * scale = 60\n[src/main.rs:14:5] &rect1 = Rectangle {\n    width: 60,\n    height: 50,\n}\n\n```\n\nWe can see the first bit of output came from _src/main.rs_ line 10 where we‚Äôre debugging the expression `30 * scale`, and its resultant value is `60` (the `Debug` formatting implemented for integers is to print only their value). The `dbg!` call on line 14 of _src/main.rs_ outputs the value of `&rect1`, which is the `Rectangle` struct. This output uses the pretty `Debug` formatting of the `Rectangle` type. The `dbg!` macro can be really helpful when you‚Äôre trying to figure out what your code is doing!\n\nIn addition to the `Debug` trait, Rust has provided a number of traits for us to use with the `derive` attribute that can add useful behavior to our custom types. Those traits and their behaviors are listed in [Appendix C](appendix-03-derivable-traits.html). We‚Äôll cover how to implement these traits with custom behavior as well as how to create your own traits in Chapter 10. There are also many attributes other than `derive`; for more information, see [the ‚ÄúAttributes‚Äù section of the Rust Reference](../reference/attributes.html).\n\nOur `area` function is very specific: it only computes the area of rectangles. It would be helpful to tie this behavior more closely to our `Rectangle` struct because it won‚Äôt work with any other type. Let‚Äôs look at how we can continue to refactor this code by turning the `area` function into an `area` _method_ defined on our `Rectangle` type.\n\n## [Method Syntax](#method-syntax)\n\n_Methods_ are similar to functions: we declare them with the `fn` keyword and a name, they can have parameters and a return value, and they contain some code that‚Äôs run when the method is called from somewhere else. Unlike functions, methods are defined within the context of a struct (or an enum or a trait object, which we cover in [Chapter 6](ch06-00-enums.html) and [Chapter 17](ch17-02-trait-objects.html), respectively), and their first parameter is always `self`, which represents the instance of the struct the method is being called on.\n\n### [Defining Methods](#defining-methods)\n\nLet‚Äôs change the `area` function that has a `Rectangle` instance as a parameter and instead make an `area` method defined on the `Rectangle` struct, as shown in Listing 5-13.\n\nFilename: src/main.rs\n\n```rust\n#[derive(Debug)]\nstruct Rectangle {\n    width: u32,\n    height: u32,\n}\n\nimpl Rectangle {\n    fn area(&self) -> u32 {\n        self.width * self.height\n    }\n}\n\nfn main() {\n    let rect1 = Rectangle {\n        width: 30,\n        height: 50,\n    };\n\n    println!(\n        \"The area of the rectangle is {} square pixels.\",\n        rect1.area()\n    );\n}\n```\n\nListing 5-13: Defining an `area` method on the `Rectangle` struct\n\nTo define the function within the context of `Rectangle`, we start an `impl` (implementation) block for `Rectangle`. Everything within this `impl` block will be associated with the `Rectangle` type. Then we move the `area` function within the `impl` curly brackets and change the first (and in this case, only) parameter to be `self` in the signature and everywhere within the body. In `main`, where we called the `area` function and passed `rect1` as an argument, we can instead use _method syntax_ to call the `area` method on our `Rectangle` instance. The method syntax goes after an instance: we add a dot followed by the method name, parentheses, and any arguments.\n\nIn the signature for `area`, we use `&self` instead of `rectangle: &Rectangle`. The `&self` is actually short for `self: &Self`. Within an `impl` block, the type `Self` is an alias for the type that the `impl` block is for. Methods must have a parameter named `self` of type `Self` for their first parameter, so Rust lets you abbreviate this with only the name `self` in the first parameter spot. Note that we still need to use the `&` in front of the `self` shorthand to indicate that this method borrows the `Self` instance, just as we did in `rectangle: &Rectangle`. Methods can take ownership of `self`, borrow `self` immutably, as we‚Äôve done here, or borrow `self` mutably, just as they can any other parameter.\n\nWe chose `&self` here for the same reason we used `&Rectangle` in the function version: we don‚Äôt want to take ownership, and we just want to read the data in the struct, not write to it. If we wanted to change the instance that we‚Äôve called the method on as part of what the method does, we‚Äôd use `&mut self` as the first parameter. Having a method that takes ownership of the instance by using just `self` as the first parameter is rare; this technique is usually used when the method transforms `self` into something else and you want to prevent the caller from using the original instance after the transformation.\n\nThe main reason for using methods instead of functions, in addition to providing method syntax and not having to repeat the type of `self` in every method‚Äôs signature, is for organization. We‚Äôve put all the things we can do with an instance of a type in one `impl` block rather than making future users of our code search for capabilities of `Rectangle` in various places in the library we provide.\n\nNote that we can choose to give a method the same name as one of the struct‚Äôs fields. For example, we can define a method on `Rectangle` that is also named `width`:\n\nFilename: src/main.rs\n\n```rust\n#[derive(Debug)]\nstruct Rectangle {\n    width: u32,\n    height: u32,\n}\n\nimpl Rectangle {\n    fn width(&self) -> bool {\n        self.width > 0\n    }\n}\n\nfn main() {\n    let rect1 = Rectangle {\n        width: 30,\n        height: 50,\n    };\n\n    if rect1.width() {\n        println!(\"The rectangle has a nonzero width; it is {}\", rect1.width);\n    }\n}\n```\n\nHere, we‚Äôre choosing to make the `width` method return `true` if the value in the instance‚Äôs `width` field is greater than `0` and `false` if the value is `0`: we can use a field within a method of the same name for any purpose. In `main`, when we follow `rect1.width` with parentheses, Rust knows we mean the method `width`. When we don‚Äôt use parentheses, Rust knows we mean the field `width`.\n\nOften, but not always, when we give a method the same name as a field we want it to only return the value in the field and do nothing else. Methods like this are called _getters_, and Rust does not implement them automatically for struct fields as some other languages do. Getters are useful because you can make the field private but the method public, and thus enable read-only access to that field as part of the type‚Äôs public API. We will discuss what public and private are and how to designate a field or method as public or private in [Chapter 7](about:blank/ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html#exposing-paths-with-the-pub-keyword).\n\n### [Where‚Äôs the `->` Operator?](#wheres-the---operator)\n\nIn C and C++, two different operators are used for calling methods: you use `.` if you‚Äôre calling a method on the object directly and `->` if you‚Äôre calling the method on a pointer to the object and need to dereference the pointer first. In other words, if `object` is a pointer, `object->something()` is similar to `(*object).something()`.\n\nRust doesn‚Äôt have an equivalent to the `->` operator; instead, Rust has a feature called _automatic referencing and dereferencing_. Calling methods is one of the few places in Rust that has this behavior.\n\nHere‚Äôs how it works: when you call a method with `object.something()`, Rust automatically adds in `&`, `&mut`, or `*` so `object` matches the signature of the method. In other words, the following are the same:\n\n```rust\n#![allow(unused)]\nfn main() {\n#[derive(Debug,Copy,Clone)]\nstruct Point {\n    x: f64,\n    y: f64,\n}\n\nimpl Point {\n   fn distance(&self, other: &Point) -> f64 {\n       let x_squared = f64::powi(other.x - self.x, 2);\n       let y_squared = f64::powi(other.y - self.y, 2);\n\n       f64::sqrt(x_squared + y_squared)\n   }\n}\nlet p1 = Point { x: 0.0, y: 0.0 };\nlet p2 = Point { x: 5.0, y: 6.5 };\np1.distance(&p2);\n(&p1).distance(&p2);\n}\n```\n\nThe first one looks much cleaner. This automatic referencing behavior works because methods have a clear receiver‚Äîthe type of `self`. Given the receiver and name of a method, Rust can figure out definitively whether the method is reading (`&self`), mutating (`&mut self`), or consuming (`self`). The fact that Rust makes borrowing implicit for method receivers is a big part of making ownership ergonomic in practice.\n\n### [Methods with More Parameters](#methods-with-more-parameters)\n\nLet‚Äôs practice using methods by implementing a second method on the `Rectangle` struct. This time we want an instance of `Rectangle` to take another instance of `Rectangle` and return `true` if the second `Rectangle` can fit completely within `self` (the first `Rectangle`); otherwise, it should return `false`. That is, once we‚Äôve defined the `can_hold` method, we want to be able to write the program shown in Listing 5-14.\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let rect1 = Rectangle {\n        width: 30,\n        height: 50,\n    };\n    let rect2 = Rectangle {\n        width: 10,\n        height: 40,\n    };\n    let rect3 = Rectangle {\n        width: 60,\n        height: 45,\n    };\n\n    println!(\"Can rect1 hold rect2? {}\", rect1.can_hold(&rect2));\n    println!(\"Can rect1 hold rect3? {}\", rect1.can_hold(&rect3));\n}\n```\n\nListing 5-14: Using the as-yet-unwritten `can_hold` method\n\nThe expected output would look like the following because both dimensions of `rect2` are smaller than the dimensions of `rect1`, but `rect3` is wider than `rect1`:\n\n```text\nCan rect1 hold rect2? true\nCan rect1 hold rect3? false\n\n```\n\nWe know we want to define a method, so it will be within the `impl Rectangle` block. The method name will be `can_hold`, and it will take an immutable borrow of another `Rectangle` as a parameter. We can tell what the type of the parameter will be by looking at the code that calls the method: `rect1.can_hold(&rect2)` passes in `&rect2`, which is an immutable borrow to `rect2`, an instance of `Rectangle`. This makes sense because we only need to read `rect2` (rather than write, which would mean we‚Äôd need a mutable borrow), and we want `main` to retain ownership of `rect2` so we can use it again after calling the `can_hold` method. The return value of `can_hold` will be a Boolean, and the implementation will check whether the width and height of `self` are greater than the width and height of the other `Rectangle`, respectively. Let‚Äôs add the new `can_hold` method to the `impl` block from Listing 5-13, shown in Listing 5-15.\n\nFilename: src/main.rs\n\n```rust\n#[derive(Debug)]\nstruct Rectangle {\n    width: u32,\n    height: u32,\n}\n\nimpl Rectangle {\n    fn area(&self) -> u32 {\n        self.width * self.height\n    }\n\n    fn can_hold(&self, other: &Rectangle) -> bool {\n        self.width > other.width && self.height > other.height\n    }\n}\n\nfn main() {\n    let rect1 = Rectangle {\n        width: 30,\n        height: 50,\n    };\n    let rect2 = Rectangle {\n        width: 10,\n        height: 40,\n    };\n    let rect3 = Rectangle {\n        width: 60,\n        height: 45,\n    };\n\n    println!(\"Can rect1 hold rect2? {}\", rect1.can_hold(&rect2));\n    println!(\"Can rect1 hold rect3? {}\", rect1.can_hold(&rect3));\n}\n```\n\nListing 5-15: Implementing the `can_hold` method on `Rectangle` that takes another `Rectangle` instance as a parameter\n\nWhen we run this code with the `main` function in Listing 5-14, we‚Äôll get our desired output. Methods can take multiple parameters that we add to the signature after the `self` parameter, and those parameters work just like parameters in functions.\n\n### [Associated Functions](#associated-functions)\n\nAll functions defined within an `impl` block are called _associated functions_ because they‚Äôre associated with the type named after the `impl`. We can define associated functions that don‚Äôt have `self` as their first parameter (and thus are not methods) because they don‚Äôt need an instance of the type to work with. We‚Äôve already used one function like this: the `String::from` function that‚Äôs defined on the `String` type.\n\nAssociated functions that aren‚Äôt methods are often used for constructors that will return a new instance of the struct. These are often called `new`, but `new` isn‚Äôt a special name and isn‚Äôt built into the language. For example, we could choose to provide an associated function named `square` that would have one dimension parameter and use that as both width and height, thus making it easier to create a square `Rectangle` rather than having to specify the same value twice:\n\nFilename: src/main.rs\n\n```rust\n#[derive(Debug)]\nstruct Rectangle {\n    width: u32,\n    height: u32,\n}\n\nimpl Rectangle {\n    fn square(size: u32) -> Self {\n        Self {\n            width: size,\n            height: size,\n        }\n    }\n}\n\nfn main() {\n    let sq = Rectangle::square(3);\n}\n```\n\nThe `Self` keywords in the return type and in the body of the function are aliases for the type that appears after the `impl` keyword, which in this case is `Rectangle`.\n\nTo call this associated function, we use the `::` syntax with the struct name; `let sq = Rectangle::square(3);` is an example. This function is namespaced by the struct: the `::` syntax is used for both associated functions and namespaces created by modules. We‚Äôll discuss modules in [Chapter 7](ch07-02-defining-modules-to-control-scope-and-privacy.html).\n\n### [Multiple `impl` Blocks](#multiple-impl-blocks)\n\nEach struct is allowed to have multiple `impl` blocks. For example, Listing 5-15 is equivalent to the code shown in Listing 5-16, which has each method in its own `impl` block.\n\n```rust\n#[derive(Debug)]\nstruct Rectangle {\n    width: u32,\n    height: u32,\n}\n\nimpl Rectangle {\n    fn area(&self) -> u32 {\n        self.width * self.height\n    }\n}\n\nimpl Rectangle {\n    fn can_hold(&self, other: &Rectangle) -> bool {\n        self.width > other.width && self.height > other.height\n    }\n}\n\nfn main() {\n    let rect1 = Rectangle {\n        width: 30,\n        height: 50,\n    };\n    let rect2 = Rectangle {\n        width: 10,\n        height: 40,\n    };\n    let rect3 = Rectangle {\n        width: 60,\n        height: 45,\n    };\n\n    println!(\"Can rect1 hold rect2? {}\", rect1.can_hold(&rect2));\n    println!(\"Can rect1 hold rect3? {}\", rect1.can_hold(&rect3));\n}\n```\n\nListing 5-16: Rewriting Listing 5-15 using multiple `impl` blocks\n\nThere‚Äôs no reason to separate these methods into multiple `impl` blocks here, but this is valid syntax. We‚Äôll see a case in which multiple `impl` blocks are useful in Chapter 10, where we discuss generic types and traits.\n\n## [Summary](#summary-4)\n\nStructs let you create custom types that are meaningful for your domain. By using structs, you can keep associated pieces of data connected to each other and name each piece to make your code clear. In `impl` blocks, you can define functions that are associated with your type, and methods are a kind of associated function that let you specify the behavior that instances of your structs have.\n\nBut structs aren‚Äôt the only way you can create custom types: let‚Äôs turn to Rust‚Äôs enum feature to add another tool to your toolbox.\n\n## [Enums and Pattern Matching](#enums-and-pattern-matching)\n\nIn this chapter, we‚Äôll look at _enumerations_, also referred to as _enums_. Enums allow you to define a type by enumerating its possible _variants_. First we‚Äôll define and use an enum to show how an enum can encode meaning along with data. Next, we‚Äôll explore a particularly useful enum, called `Option`, which expresses that a value can be either something or nothing. Then we‚Äôll look at how pattern matching in the `match` expression makes it easy to run different code for different values of an enum. Finally, we‚Äôll cover how the `if let` construct is another convenient and concise idiom available to handle enums in your code.\n\n## [Defining an Enum](#defining-an-enum)\n\nWhere structs give you a way of grouping together related fields and data, like a `Rectangle` with its `width` and `height`, enums give you a way of saying a value is one of a possible set of values. For example, we may want to say that `Rectangle` is one of a set of possible shapes that also includes `Circle` and `Triangle`. To do this, Rust allows us to encode these possibilities as an enum.\n\nLet‚Äôs look at a situation we might want to express in code and see why enums are useful and more appropriate than structs in this case. Say we need to work with IP addresses. Currently, two major standards are used for IP addresses: version four and version six. Because these are the only possibilities for an IP address that our program will come across, we can _enumerate_ all possible variants, which is where enumeration gets its name.\n\nAny IP address can be either a version four or a version six address, but not both at the same time. That property of IP addresses makes the enum data structure appropriate because an enum value can only be one of its variants. Both version four and version six addresses are still fundamentally IP addresses, so they should be treated as the same type when the code is handling situations that apply to any kind of IP address.\n\nWe can express this concept in code by defining an `IpAddrKind` enumeration and listing the possible kinds an IP address can be, `V4` and `V6`. These are the variants of the enum:\n\n```rust\nenum IpAddrKind {\n    V4,\n    V6,\n}\n\nfn main() {\n    let four = IpAddrKind::V4;\n    let six = IpAddrKind::V6;\n\n    route(IpAddrKind::V4);\n    route(IpAddrKind::V6);\n}\n\nfn route(ip_kind: IpAddrKind) {}\n```\n\n`IpAddrKind` is now a custom data type that we can use elsewhere in our code.\n\n### [Enum Values](#enum-values)\n\nWe can create instances of each of the two variants of `IpAddrKind` like this:\n\n```rust\nenum IpAddrKind {\n    V4,\n    V6,\n}\n\nfn main() {\n    let four = IpAddrKind::V4;\n    let six = IpAddrKind::V6;\n\n    route(IpAddrKind::V4);\n    route(IpAddrKind::V6);\n}\n\nfn route(ip_kind: IpAddrKind) {}\n```\n\nNote that the variants of the enum are namespaced under its identifier, and we use a double colon to separate the two. This is useful because now both values `IpAddrKind::V4` and `IpAddrKind::V6` are of the same type: `IpAddrKind`. We can then, for instance, define a function that takes any `IpAddrKind`:\n\n```rust\nenum IpAddrKind {\n    V4,\n    V6,\n}\n\nfn main() {\n    let four = IpAddrKind::V4;\n    let six = IpAddrKind::V6;\n\n    route(IpAddrKind::V4);\n    route(IpAddrKind::V6);\n}\n\nfn route(ip_kind: IpAddrKind) {}\n```\n\nAnd we can call this function with either variant:\n\n```rust\nenum IpAddrKind {\n    V4,\n    V6,\n}\n\nfn main() {\n    let four = IpAddrKind::V4;\n    let six = IpAddrKind::V6;\n\n    route(IpAddrKind::V4);\n    route(IpAddrKind::V6);\n}\n\nfn route(ip_kind: IpAddrKind) {}\n```\n\nUsing enums has even more advantages. Thinking more about our IP address type, at the moment we don‚Äôt have a way to store the actual IP address _data_; we only know what _kind_ it is. Given that you just learned about structs in Chapter 5, you might be tempted to tackle this problem with structs as shown in Listing 6-1.\n\n```rust\nfn main() {\n    enum IpAddrKind {\n        V4,\n        V6,\n    }\n\n    struct IpAddr {\n        kind: IpAddrKind,\n        address: String,\n    }\n\n    let home = IpAddr {\n        kind: IpAddrKind::V4,\n        address: String::from(\"127.0.0.1\"),\n    };\n\n    let loopback = IpAddr {\n        kind: IpAddrKind::V6,\n        address: String::from(\"::1\"),\n    };\n}\n```\n\nListing 6-1: Storing the data and `IpAddrKind` variant of an IP address using a `struct`\n\nHere, we‚Äôve defined a struct `IpAddr` that has two fields: a `kind` field that is of type `IpAddrKind` (the enum we defined previously) and an `address` field of type `String`. We have two instances of this struct. The first is `home`, and it has the value `IpAddrKind::V4` as its `kind` with associated address data of `127.0.0.1`. The second instance is `loopback`. It has the other variant of `IpAddrKind` as its `kind` value, `V6`, and has address `::1` associated with it. We‚Äôve used a struct to bundle the `kind` and `address` values together, so now the variant is associated with the value.\n\nHowever, representing the same concept using just an enum is more concise: rather than an enum inside a struct, we can put data directly into each enum variant. This new definition of the `IpAddr` enum says that both `V4` and `V6` variants will have associated `String` values:\n\n```rust\nfn main() {\n    enum IpAddr {\n        V4(String),\n        V6(String),\n    }\n\n    let home = IpAddr::V4(String::from(\"127.0.0.1\"));\n\n    let loopback = IpAddr::V6(String::from(\"::1\"));\n}\n```\n\nWe attach data to each variant of the enum directly, so there is no need for an extra struct. Here, it‚Äôs also easier to see another detail of how enums work: the name of each enum variant that we define also becomes a function that constructs an instance of the enum. That is, `IpAddr::V4()` is a function call that takes a `String` argument and returns an instance of the `IpAddr` type. We automatically get this constructor function defined as a result of defining the enum.\n\nThere‚Äôs another advantage to using an enum rather than a struct: each variant can have different types and amounts of associated data. Version four IP addresses will always have four numeric components that will have values between 0 and 255. If we wanted to store `V4` addresses as four `u8` values but still express `V6` addresses as one `String` value, we wouldn‚Äôt be able to with a struct. Enums handle this case with ease:\n\n```rust\nfn main() {\n    enum IpAddr {\n        V4(u8, u8, u8, u8),\n        V6(String),\n    }\n\n    let home = IpAddr::V4(127, 0, 0, 1);\n\n    let loopback = IpAddr::V6(String::from(\"::1\"));\n}\n```\n\nWe‚Äôve shown several different ways to define data structures to store version four and version six IP addresses. However, as it turns out, wanting to store IP addresses and encode which kind they are is so common that [the standard library has a definition we can use!](../std/net/enum.IpAddr.html) Let‚Äôs look at how the standard library defines `IpAddr`: it has the exact enum and variants that we‚Äôve defined and used, but it embeds the address data inside the variants in the form of two different structs, which are defined differently for each variant:\n\n```rust\n#![allow(unused)]\nfn main() {\nstruct Ipv4Addr {\n    // --snip--\n}\n\nstruct Ipv6Addr {\n    // --snip--\n}\n\nenum IpAddr {\n    V4(Ipv4Addr),\n    V6(Ipv6Addr),\n}\n}\n```\n\nThis code illustrates that you can put any kind of data inside an enum variant: strings, numeric types, or structs, for example. You can even include another enum! Also, standard library types are often not much more complicated than what you might come up with.\n\nNote that even though the standard library contains a definition for `IpAddr`, we can still create and use our own definition without conflict because we haven‚Äôt brought the standard library‚Äôs definition into our scope. We‚Äôll talk more about bringing types into scope in Chapter 7.\n\nLet‚Äôs look at another example of an enum in Listing 6-2: this one has a wide variety of types embedded in its variants.\n\n```rust\nenum Message {\n    Quit,\n    Move { x: i32, y: i32 },\n    Write(String),\n    ChangeColor(i32, i32, i32),\n}\n\nfn main() {}\n```\n\nListing 6-2: A `Message` enum whose variants each store different amounts and types of values\n\nThis enum has four variants with different types:\n\n-   `Quit` has no data associated with it at all.\n-   `Move` has named fields, like a struct does.\n-   `Write` includes a single `String`.\n-   `ChangeColor` includes three `i32` values.\n\nDefining an enum with variants such as the ones in Listing 6-2 is similar to defining different kinds of struct definitions, except the enum doesn‚Äôt use the `struct` keyword and all the variants are grouped together under the `Message` type. The following structs could hold the same data that the preceding enum variants hold:\n\n```rust\nstruct QuitMessage; // unit struct\nstruct MoveMessage {\n    x: i32,\n    y: i32,\n}\nstruct WriteMessage(String); // tuple struct\nstruct ChangeColorMessage(i32, i32, i32); // tuple struct\n\nfn main() {}\n```\n\nBut if we used the different structs, each of which has its own type, we couldn‚Äôt as easily define a function to take any of these kinds of messages as we could with the `Message` enum defined in Listing 6-2, which is a single type.\n\nThere is one more similarity between enums and structs: just as we‚Äôre able to define methods on structs using `impl`, we‚Äôre also able to define methods on enums. Here‚Äôs a method named `call` that we could define on our `Message` enum:\n\n```rust\nfn main() {\n    enum Message {\n        Quit,\n        Move { x: i32, y: i32 },\n        Write(String),\n        ChangeColor(i32, i32, i32),\n    }\n\n    impl Message {\n        fn call(&self) {\n            // method body would be defined here\n        }\n    }\n\n    let m = Message::Write(String::from(\"hello\"));\n    m.call();\n}\n```\n\nThe body of the method would use `self` to get the value that we called the method on. In this example, we‚Äôve created a variable `m` that has the value `Message::Write(String::from(\"hello\"))`, and that is what `self` will be in the body of the `call` method when `m.call()` runs.\n\nLet‚Äôs look at another enum in the standard library that is very common and useful: `Option`.\n\n### [The `Option` Enum and Its Advantages Over Null Values](#the-option-enum-and-its-advantages-over-null-values)\n\nThis section explores a case study of `Option`, which is another enum defined by the standard library. The `Option` type encodes the very common scenario in which a value could be something or it could be nothing.\n\nFor example, if you request the first item in a non-empty list, you would get a value. If you request the first item in an empty list, you would get nothing. Expressing this concept in terms of the type system means the compiler can check whether you‚Äôve handled all the cases you should be handling; this functionality can prevent bugs that are extremely common in other programming languages.\n\nProgramming language design is often thought of in terms of which features you include, but the features you exclude are important too. Rust doesn‚Äôt have the null feature that many other languages have. _Null_ is a value that means there is no value there. In languages with null, variables can always be in one of two states: null or not-null.\n\nIn his 2009 presentation ‚ÄúNull References: The Billion Dollar Mistake,‚Äù Tony Hoare, the inventor of null, has this to say:\n\n> I call it my billion-dollar mistake. At that time, I was designing the first comprehensive type system for references in an object-oriented language. My goal was to ensure that all use of references should be absolutely safe, with checking performed automatically by the compiler. But I couldn‚Äôt resist the temptation to put in a null reference, simply because it was so easy to implement. This has led to innumerable errors, vulnerabilities, and system crashes, which have probably caused a billion dollars of pain and damage in the last forty years.\n\nThe problem with null values is that if you try to use a null value as a not-null value, you‚Äôll get an error of some kind. Because this null or not-null property is pervasive, it‚Äôs extremely easy to make this kind of error.\n\nHowever, the concept that null is trying to express is still a useful one: a null is a value that is currently invalid or absent for some reason.\n\nThe problem isn‚Äôt really with the concept but with the particular implementation. As such, Rust does not have nulls, but it does have an enum that can encode the concept of a value being present or absent. This enum is `Option<T>`, and it is [defined by the standard library](../std/option/enum.Option.html) as follows:\n\n```rust\n#![allow(unused)]\nfn main() {\nenum Option<T> {\n    None,\n    Some(T),\n}\n}\n```\n\nThe `Option<T>` enum is so useful that it‚Äôs even included in the prelude; you don‚Äôt need to bring it into scope explicitly. Its variants are also included in the prelude: you can use `Some` and `None` directly without the `Option::` prefix. The `Option<T>` enum is still just a regular enum, and `Some(T)` and `None` are still variants of type `Option<T>`.\n\nThe `<T>` syntax is a feature of Rust we haven‚Äôt talked about yet. It‚Äôs a generic type parameter, and we‚Äôll cover generics in more detail in Chapter 10. For now, all you need to know is that `<T>` means that the `Some` variant of the `Option` enum can hold one piece of data of any type, and that each concrete type that gets used in place of `T` makes the overall `Option<T>` type a different type. Here are some examples of using `Option` values to hold number types and string types:\n\n```rust\nfn main() {\n    let some_number = Some(5);\n    let some_char = Some('e');\n\n    let absent_number: Option<i32> = None;\n}\n```\n\nThe type of `some_number` is `Option<i32>`. The type of `some_char` is `Option<char>`, which is a different type. Rust can infer these types because we‚Äôve specified a value inside the `Some` variant. For `absent_number`, Rust requires us to annotate the overall `Option` type: the compiler can‚Äôt infer the type that the corresponding `Some` variant will hold by looking only at a `None` value. Here, we tell Rust that we mean for `absent_number` to be of type `Option<i32>`.\n\nWhen we have a `Some` value, we know that a value is present and the value is held within the `Some`. When we have a `None` value, in some sense it means the same thing as null: we don‚Äôt have a valid value. So why is having `Option<T>` any better than having null?\n\nIn short, because `Option<T>` and `T` (where `T` can be any type) are different types, the compiler won‚Äôt let us use an `Option<T>` value as if it were definitely a valid value. For example, this code won‚Äôt compile, because it‚Äôs trying to add an `i8` to an `Option<i8>`:\n\n```rust\nfn main() {\n    let x: i8 = 5;\n    let y: Option<i8> = Some(5);\n\n    let sum = x + y;\n}\n```\n\nIf we run this code, we get an error message like this one:\n\n```console\n$ cargo run\n   Compiling enums v0.1.0 (file:///projects/enums)\nerror[E0277]: cannot add `Option<i8>` to `i8`\n --> src/main.rs:5:17\n  |\n5 |     let sum = x + y;\n  |                 ^ no implementation for `i8 + Option<i8>`\n  |\n  = help: the trait `Add<Option<i8>>` is not implemented for `i8`\n  = help: the following other types implement trait `Add<Rhs>`:\n            <i8 as Add>\n            <i8 as Add<&i8>>\n            <&'a i8 as Add<i8>>\n            <&i8 as Add<&i8>>\n\nFor more information about this error, try `rustc --explain E0277`.\nerror: could not compile `enums` (bin \"enums\") due to 1 previous error\n\n```\n\nIntense! In effect, this error message means that Rust doesn‚Äôt understand how to add an `i8` and an `Option<i8>`, because they‚Äôre different types. When we have a value of a type like `i8` in Rust, the compiler will ensure that we always have a valid value. We can proceed confidently without having to check for null before using that value. Only when we have an `Option<i8>` (or whatever type of value we‚Äôre working with) do we have to worry about possibly not having a value, and the compiler will make sure we handle that case before using the value.\n\nIn other words, you have to convert an `Option<T>` to a `T` before you can perform `T` operations with it. Generally, this helps catch one of the most common issues with null: assuming that something isn‚Äôt null when it actually is.\n\nEliminating the risk of incorrectly assuming a not-null value helps you to be more confident in your code. In order to have a value that can possibly be null, you must explicitly opt in by making the type of that value `Option<T>`. Then, when you use that value, you are required to explicitly handle the case when the value is null. Everywhere that a value has a type that isn‚Äôt an `Option<T>`, you _can_ safely assume that the value isn‚Äôt null. This was a deliberate design decision for Rust to limit null‚Äôs pervasiveness and increase the safety of Rust code.\n\nSo how do you get the `T` value out of a `Some` variant when you have a value of type `Option<T>` so that you can use that value? The `Option<T>` enum has a large number of methods that are useful in a variety of situations; you can check them out in [its documentation](../std/option/enum.Option.html). Becoming familiar with the methods on `Option<T>` will be extremely useful in your journey with Rust.\n\nIn general, in order to use an `Option<T>` value, you want to have code that will handle each variant. You want some code that will run only when you have a `Some(T)` value, and this code is allowed to use the inner `T`. You want some other code to run only if you have a `None` value, and that code doesn‚Äôt have a `T` value available. The `match` expression is a control flow construct that does just this when used with enums: it will run different code depending on which variant of the enum it has, and that code can use the data inside the matching value.\n\n## [The `match` Control Flow Construct](#the-match-control-flow-construct)\n\nRust has an extremely powerful control flow construct called `match` that allows you to compare a value against a series of patterns and then execute code based on which pattern matches. Patterns can be made up of literal values, variable names, wildcards, and many other things; [Chapter 18](ch18-00-patterns.html) covers all the different kinds of patterns and what they do. The power of `match` comes from the expressiveness of the patterns and the fact that the compiler confirms that all possible cases are handled.\n\nThink of a `match` expression as being like a coin-sorting machine: coins slide down a track with variously sized holes along it, and each coin falls through the first hole it encounters that it fits into. In the same way, values go through each pattern in a `match`, and at the first pattern the value ‚Äúfits,‚Äù the value falls into the associated code block to be used during execution.\n\nSpeaking of coins, let‚Äôs use them as an example using `match`! We can write a function that takes an unknown US coin and, in a similar way as the counting machine, determines which coin it is and returns its value in cents, as shown in Listing 6-3.\n\n```rust\nenum Coin {\n    Penny,\n    Nickel,\n    Dime,\n    Quarter,\n}\n\nfn value_in_cents(coin: Coin) -> u8 {\n    match coin {\n        Coin::Penny => 1,\n        Coin::Nickel => 5,\n        Coin::Dime => 10,\n        Coin::Quarter => 25,\n    }\n}\n\nfn main() {}\n```\n\nListing 6-3: An enum and a `match` expression that has the variants of the enum as its patterns\n\nLet‚Äôs break down the `match` in the `value_in_cents` function. First we list the `match` keyword followed by an expression, which in this case is the value `coin`. This seems very similar to a conditional expression used with `if`, but there‚Äôs a big difference: with `if`, the condition needs to evaluate to a Boolean value, but here it can be any type. The type of `coin` in this example is the `Coin` enum that we defined on the first line.\n\nNext are the `match` arms. An arm has two parts: a pattern and some code. The first arm here has a pattern that is the value `Coin::Penny` and then the `=>` operator that separates the pattern and the code to run. The code in this case is just the value `1`. Each arm is separated from the next with a comma.\n\nWhen the `match` expression executes, it compares the resultant value against the pattern of each arm, in order. If a pattern matches the value, the code associated with that pattern is executed. If that pattern doesn‚Äôt match the value, execution continues to the next arm, much as in a coin-sorting machine. We can have as many arms as we need: in Listing 6-3, our `match` has four arms.\n\nThe code associated with each arm is an expression, and the resultant value of the expression in the matching arm is the value that gets returned for the entire `match` expression.\n\nWe don‚Äôt typically use curly brackets if the match arm code is short, as it is in Listing 6-3 where each arm just returns a value. If you want to run multiple lines of code in a match arm, you must use curly brackets, and the comma following the arm is then optional. For example, the following code prints ‚ÄúLucky penny!‚Äù every time the method is called with a `Coin::Penny`, but still returns the last value of the block, `1`:\n\n```rust\nenum Coin {\n    Penny,\n    Nickel,\n    Dime,\n    Quarter,\n}\n\nfn value_in_cents(coin: Coin) -> u8 {\n    match coin {\n        Coin::Penny => {\n            println!(\"Lucky penny!\");\n            1\n        }\n        Coin::Nickel => 5,\n        Coin::Dime => 10,\n        Coin::Quarter => 25,\n    }\n}\n\nfn main() {}\n```\n\n### [Patterns That Bind to Values](#patterns-that-bind-to-values)\n\nAnother useful feature of match arms is that they can bind to the parts of the values that match the pattern. This is how we can extract values out of enum variants.\n\nAs an example, let‚Äôs change one of our enum variants to hold data inside it. From 1999 through 2008, the United States minted quarters with different designs for each of the 50 states on one side. No other coins got state designs, so only quarters have this extra value. We can add this information to our `enum` by changing the `Quarter` variant to include a `UsState` value stored inside it, which we‚Äôve done in Listing 6-4.\n\n```rust\n#[derive(Debug)] // so we can inspect the state in a minute\nenum UsState {\n    Alabama,\n    Alaska,\n    // --snip--\n}\n\nenum Coin {\n    Penny,\n    Nickel,\n    Dime,\n    Quarter(UsState),\n}\n\nfn main() {}\n```\n\nListing 6-4: A `Coin` enum in which the `Quarter` variant also holds a `UsState` value\n\nLet‚Äôs imagine that a friend is trying to collect all 50 state quarters. While we sort our loose change by coin type, we‚Äôll also call out the name of the state associated with each quarter so that if it‚Äôs one our friend doesn‚Äôt have, they can add it to their collection.\n\nIn the match expression for this code, we add a variable called `state` to the pattern that matches values of the variant `Coin::Quarter`. When a `Coin::Quarter` matches, the `state` variable will bind to the value of that quarter‚Äôs state. Then we can use `state` in the code for that arm, like so:\n\n```rust\n#[derive(Debug)]\nenum UsState {\n    Alabama,\n    Alaska,\n    // --snip--\n}\n\nenum Coin {\n    Penny,\n    Nickel,\n    Dime,\n    Quarter(UsState),\n}\n\nfn value_in_cents(coin: Coin) -> u8 {\n    match coin {\n        Coin::Penny => 1,\n        Coin::Nickel => 5,\n        Coin::Dime => 10,\n        Coin::Quarter(state) => {\n            println!(\"State quarter from {state:?}!\");\n            25\n        }\n    }\n}\n\nfn main() {\n    value_in_cents(Coin::Quarter(UsState::Alaska));\n}\n```\n\nIf we were to call `value_in_cents(Coin::Quarter(UsState::Alaska))`, `coin` would be `Coin::Quarter(UsState::Alaska)`. When we compare that value with each of the match arms, none of them match until we reach `Coin::Quarter(state)`. At that point, the binding for `state` will be the value `UsState::Alaska`. We can then use that binding in the `println!` expression, thus getting the inner state value out of the `Coin` enum variant for `Quarter`.\n\n### [Matching with `Option<T>`](#matching-with-optiont)\n\nIn the previous section, we wanted to get the inner `T` value out of the `Some` case when using `Option<T>`; we can also handle `Option<T>` using `match`, as we did with the `Coin` enum! Instead of comparing coins, we‚Äôll compare the variants of `Option<T>`, but the way the `match` expression works remains the same.\n\nLet‚Äôs say we want to write a function that takes an `Option<i32>` and, if there‚Äôs a value inside, adds 1 to that value. If there isn‚Äôt a value inside, the function should return the `None` value and not attempt to perform any operations.\n\nThis function is very easy to write, thanks to `match`, and will look like Listing 6-5.\n\n```rust\nfn main() {\n    fn plus_one(x: Option<i32>) -> Option<i32> {\n        match x {\n            None => None,\n            Some(i) => Some(i + 1),\n        }\n    }\n\n    let five = Some(5);\n    let six = plus_one(five);\n    let none = plus_one(None);\n}\n```\n\nListing 6-5: A function that uses a `match` expression on an `Option<i32>`\n\nLet‚Äôs examine the first execution of `plus_one` in more detail. When we call `plus_one(five)`, the variable `x` in the body of `plus_one` will have the value `Some(5)`. We then compare that against each match arm:\n\n```rust\nfn main() {\n    fn plus_one(x: Option<i32>) -> Option<i32> {\n        match x {\n            None => None,\n            Some(i) => Some(i + 1),\n        }\n    }\n\n    let five = Some(5);\n    let six = plus_one(five);\n    let none = plus_one(None);\n}\n```\n\nThe `Some(5)` value doesn‚Äôt match the pattern `None`, so we continue to the next arm:\n\n```rust\nfn main() {\n    fn plus_one(x: Option<i32>) -> Option<i32> {\n        match x {\n            None => None,\n            Some(i) => Some(i + 1),\n        }\n    }\n\n    let five = Some(5);\n    let six = plus_one(five);\n    let none = plus_one(None);\n}\n```\n\nDoes `Some(5)` match `Some(i)`? It does! We have the same variant. The `i` binds to the value contained in `Some`, so `i` takes the value `5`. The code in the match arm is then executed, so we add 1 to the value of `i` and create a new `Some` value with our total `6` inside.\n\nNow let‚Äôs consider the second call of `plus_one` in Listing 6-5, where `x` is `None`. We enter the `match` and compare to the first arm:\n\n```rust\nfn main() {\n    fn plus_one(x: Option<i32>) -> Option<i32> {\n        match x {\n            None => None,\n            Some(i) => Some(i + 1),\n        }\n    }\n\n    let five = Some(5);\n    let six = plus_one(five);\n    let none = plus_one(None);\n}\n```\n\nIt matches! There‚Äôs no value to add to, so the program stops and returns the `None` value on the right side of `=>`. Because the first arm matched, no other arms are compared.\n\nCombining `match` and enums is useful in many situations. You‚Äôll see this pattern a lot in Rust code: `match` against an enum, bind a variable to the data inside, and then execute code based on it. It‚Äôs a bit tricky at first, but once you get used to it, you‚Äôll wish you had it in all languages. It‚Äôs consistently a user favorite.\n\n### [Matches Are Exhaustive](#matches-are-exhaustive)\n\nThere‚Äôs one other aspect of `match` we need to discuss: the arms‚Äô patterns must cover all possibilities. Consider this version of our `plus_one` function, which has a bug and won‚Äôt compile:\n\n```rust\nfn main() {\n    fn plus_one(x: Option<i32>) -> Option<i32> {\n        match x {\n            Some(i) => Some(i + 1),\n        }\n    }\n\n    let five = Some(5);\n    let six = plus_one(five);\n    let none = plus_one(None);\n}\n```\n\nWe didn‚Äôt handle the `None` case, so this code will cause a bug. Luckily, it‚Äôs a bug Rust knows how to catch. If we try to compile this code, we‚Äôll get this error:\n\n```console\n$ cargo run\n   Compiling enums v0.1.0 (file:///projects/enums)\nerror[E0004]: non-exhaustive patterns: `None` not covered\n --> src/main.rs:3:15\n  |\n3 |         match x {\n  |               ^ pattern `None` not covered\n  |\nnote: `Option<i32>` defined here\n --> /rustc/9b00956e56009bab2aa15d7bff10916599e3d6d6/library/core/src/option.rs:572:1\n ::: /rustc/9b00956e56009bab2aa15d7bff10916599e3d6d6/library/core/src/option.rs:576:5\n  |\n  = note: not covered\n  = note: the matched value is of type `Option<i32>`\nhelp: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n  |\n4 ~             Some(i) => Some(i + 1),\n5 ~             None => todo!(),\n  |\n\nFor more information about this error, try `rustc --explain E0004`.\nerror: could not compile `enums` (bin \"enums\") due to 1 previous error\n\n```\n\nRust knows that we didn‚Äôt cover every possible case, and even knows which pattern we forgot! Matches in Rust are _exhaustive_: we must exhaust every last possibility in order for the code to be valid. Especially in the case of `Option<T>`, when Rust prevents us from forgetting to explicitly handle the `None` case, it protects us from assuming that we have a value when we might have null, thus making the billion-dollar mistake discussed earlier impossible.\n\n### [Catch-all Patterns and the `_` Placeholder](#catch-all-patterns-and-the-_-placeholder)\n\nUsing enums, we can also take special actions for a few particular values, but for all other values take one default action. Imagine we‚Äôre implementing a game where, if you roll a 3 on a dice roll, your player doesn‚Äôt move, but instead gets a new fancy hat. If you roll a 7, your player loses a fancy hat. For all other values, your player moves that number of spaces on the game board. Here‚Äôs a `match` that implements that logic, with the result of the dice roll hardcoded rather than a random value, and all other logic represented by functions without bodies because actually implementing them is out of scope for this example:\n\n```rust\nfn main() {\n    let dice_roll = 9;\n    match dice_roll {\n        3 => add_fancy_hat(),\n        7 => remove_fancy_hat(),\n        other => move_player(other),\n    }\n\n    fn add_fancy_hat() {}\n    fn remove_fancy_hat() {}\n    fn move_player(num_spaces: u8) {}\n}\n```\n\nFor the first two arms, the patterns are the literal values `3` and `7`. For the last arm that covers every other possible value, the pattern is the variable we‚Äôve chosen to name `other`. The code that runs for the `other` arm uses the variable by passing it to the `move_player` function.\n\nThis code compiles, even though we haven‚Äôt listed all the possible values a `u8` can have, because the last pattern will match all values not specifically listed. This catch-all pattern meets the requirement that `match` must be exhaustive. Note that we have to put the catch-all arm last because the patterns are evaluated in order. If we put the catch-all arm earlier, the other arms would never run, so Rust will warn us if we add arms after a catch-all!\n\nRust also has a pattern we can use when we want a catch-all but don‚Äôt want to _use_ the value in the catch-all pattern: `_` is a special pattern that matches any value and does not bind to that value. This tells Rust we aren‚Äôt going to use the value, so Rust won‚Äôt warn us about an unused variable.\n\nLet‚Äôs change the rules of the game: now, if you roll anything other than a 3 or a 7, you must roll again. We no longer need to use the catch-all value, so we can change our code to use `_` instead of the variable named `other`:\n\n```rust\nfn main() {\n    let dice_roll = 9;\n    match dice_roll {\n        3 => add_fancy_hat(),\n        7 => remove_fancy_hat(),\n        _ => reroll(),\n    }\n\n    fn add_fancy_hat() {}\n    fn remove_fancy_hat() {}\n    fn reroll() {}\n}\n```\n\nThis example also meets the exhaustiveness requirement because we‚Äôre explicitly ignoring all other values in the last arm; we haven‚Äôt forgotten anything.\n\nFinally, we‚Äôll change the rules of the game one more time so that nothing else happens on your turn if you roll anything other than a 3 or a 7. We can express that by using the unit value (the empty tuple type we mentioned in [‚ÄúThe Tuple Type‚Äù](about:blank/ch03-02-data-types.html#the-tuple-type) section) as the code that goes with the `_` arm:\n\n```rust\nfn main() {\n    let dice_roll = 9;\n    match dice_roll {\n        3 => add_fancy_hat(),\n        7 => remove_fancy_hat(),\n        _ => (),\n    }\n\n    fn add_fancy_hat() {}\n    fn remove_fancy_hat() {}\n}\n```\n\nHere, we‚Äôre telling Rust explicitly that we aren‚Äôt going to use any other value that doesn‚Äôt match a pattern in an earlier arm, and we don‚Äôt want to run any code in this case.\n\nThere‚Äôs more about patterns and matching that we‚Äôll cover in [Chapter 18](ch18-00-patterns.html). For now, we‚Äôre going to move on to the `if let` syntax, which can be useful in situations where the `match` expression is a bit wordy.\n\n## [Concise Control Flow with `if let`](#concise-control-flow-with-if-let)\n\nThe `if let` syntax lets you combine `if` and `let` into a less verbose way to handle values that match one pattern while ignoring the rest. Consider the program in Listing 6-6 that matches on an `Option<u8>` value in the `config_max` variable but only wants to execute code if the value is the `Some` variant.\n\n```rust\nfn main() {\n    let config_max = Some(3u8);\n    match config_max {\n        Some(max) => println!(\"The maximum is configured to be {max}\"),\n        _ => (),\n    }\n}\n```\n\nListing 6-6: A `match` that only cares about executing code when the value is `Some`\n\nIf the value is `Some`, we print out the value in the `Some` variant by binding the value to the variable `max` in the pattern. We don‚Äôt want to do anything with the `None` value. To satisfy the `match` expression, we have to add `_ => ()` after processing just one variant, which is annoying boilerplate code to add.\n\nInstead, we could write this in a shorter way using `if let`. The following code behaves the same as the `match` in Listing 6-6:\n\n```rust\nfn main() {\n    let config_max = Some(3u8);\n    if let Some(max) = config_max {\n        println!(\"The maximum is configured to be {max}\");\n    }\n}\n```\n\nThe syntax `if let` takes a pattern and an expression separated by an equal sign. It works the same way as a `match`, where the expression is given to the `match` and the pattern is its first arm. In this case, the pattern is `Some(max)`, and the `max` binds to the value inside the `Some`. We can then use `max` in the body of the `if let` block in the same way we used `max` in the corresponding `match` arm. The code in the `if let` block isn‚Äôt run if the value doesn‚Äôt match the pattern.\n\nUsing `if let` means less typing, less indentation, and less boilerplate code. However, you lose the exhaustive checking that `match` enforces. Choosing between `match` and `if let` depends on what you‚Äôre doing in your particular situation and whether gaining conciseness is an appropriate trade-off for losing exhaustive checking.\n\nIn other words, you can think of `if let` as syntax sugar for a `match` that runs code when the value matches one pattern and then ignores all other values.\n\nWe can include an `else` with an `if let`. The block of code that goes with the `else` is the same as the block of code that would go with the `_` case in the `match` expression that is equivalent to the `if let` and `else`. Recall the `Coin` enum definition in Listing 6-4, where the `Quarter` variant also held a `UsState` value. If we wanted to count all non-quarter coins we see while also announcing the state of the quarters, we could do that with a `match` expression, like this:\n\n```rust\n#[derive(Debug)]\nenum UsState {\n    Alabama,\n    Alaska,\n    // --snip--\n}\n\nenum Coin {\n    Penny,\n    Nickel,\n    Dime,\n    Quarter(UsState),\n}\n\nfn main() {\n    let coin = Coin::Penny;\n    let mut count = 0;\n    match coin {\n        Coin::Quarter(state) => println!(\"State quarter from {state:?}!\"),\n        _ => count += 1,\n    }\n}\n```\n\nOr we could use an `if let` and `else` expression, like this:\n\n```rust\n#[derive(Debug)]\nenum UsState {\n    Alabama,\n    Alaska,\n    // --snip--\n}\n\nenum Coin {\n    Penny,\n    Nickel,\n    Dime,\n    Quarter(UsState),\n}\n\nfn main() {\n    let coin = Coin::Penny;\n    let mut count = 0;\n    if let Coin::Quarter(state) = coin {\n        println!(\"State quarter from {state:?}!\");\n    } else {\n        count += 1;\n    }\n}\n```\n\nIf you have a situation in which your program has logic that is too verbose to express using a `match`, remember that `if let` is in your Rust toolbox as well.\n\n## [Summary](#summary-5)\n\nWe‚Äôve now covered how to use enums to create custom types that can be one of a set of enumerated values. We‚Äôve shown how the standard library‚Äôs `Option<T>` type helps you use the type system to prevent errors. When enum values have data inside them, you can use `match` or `if let` to extract and use those values, depending on how many cases you need to handle.\n\nYour Rust programs can now express concepts in your domain using structs and enums. Creating custom types to use in your API ensures type safety: the compiler will make certain your functions only get values of the type each function expects.\n\nIn order to provide a well-organized API to your users that is straightforward to use and only exposes exactly what your users will need, let‚Äôs now turn to Rust‚Äôs modules.\n\n## [Managing Growing Projects with Packages, Crates, and Modules](#managing-growing-projects-with-packages-crates-and-modules)\n\nAs you write large programs, organizing your code will become increasingly important. By grouping related functionality and separating code with distinct features, you‚Äôll clarify where to find code that implements a particular feature and where to go to change how a feature works.\n\nThe programs we‚Äôve written so far have been in one module in one file. As a project grows, you should organize code by splitting it into multiple modules and then multiple files. A package can contain multiple binary crates and optionally one library crate. As a package grows, you can extract parts into separate crates that become external dependencies. This chapter covers all these techniques. For very large projects comprising a set of interrelated packages that evolve together, Cargo provides _workspaces_, which we‚Äôll cover in the [‚ÄúCargo Workspaces‚Äù](ch14-03-cargo-workspaces.html) section in Chapter 14.\n\nWe‚Äôll also discuss encapsulating implementation details, which lets you reuse code at a higher level: once you‚Äôve implemented an operation, other code can call your code via its public interface without having to know how the implementation works. The way you write code defines which parts are public for other code to use and which parts are private implementation details that you reserve the right to change. This is another way to limit the amount of detail you have to keep in your head.\n\nA related concept is scope: the nested context in which code is written has a set of names that are defined as ‚Äúin scope.‚Äù When reading, writing, and compiling code, programmers and compilers need to know whether a particular name at a particular spot refers to a variable, function, struct, enum, module, constant, or other item and what that item means. You can create scopes and change which names are in or out of scope. You can‚Äôt have two items with the same name in the same scope; tools are available to resolve name conflicts.\n\nRust has a number of features that allow you to manage your code‚Äôs organization, including which details are exposed, which details are private, and what names are in each scope in your programs. These features, sometimes collectively referred to as the _module system_, include:\n\n-   **Packages:** A Cargo feature that lets you build, test, and share crates\n-   **Crates:** A tree of modules that produces a library or executable\n-   **Modules** and **use:** Let you control the organization, scope, and privacy of paths\n-   **Paths:** A way of naming an item, such as a struct, function, or module\n\nIn this chapter, we‚Äôll cover all these features, discuss how they interact, and explain how to use them to manage scope. By the end, you should have a solid understanding of the module system and be able to work with scopes like a pro!\n\n## [Packages and Crates](#packages-and-crates)\n\nThe first parts of the module system we‚Äôll cover are packages and crates.\n\nA _crate_ is the smallest amount of code that the Rust compiler considers at a time. Even if you run `rustc` rather than `cargo` and pass a single source code file (as we did all the way back in the ‚ÄúWriting and Running a Rust Program‚Äù section of Chapter 1), the compiler considers that file to be a crate. Crates can contain modules, and the modules may be defined in other files that get compiled with the crate, as we‚Äôll see in the coming sections.\n\nA crate can come in one of two forms: a binary crate or a library crate. _Binary crates_ are programs you can compile to an executable that you can run, such as a command-line program or a server. Each must have a function called `main` that defines what happens when the executable runs. All the crates we‚Äôve created so far have been binary crates.\n\n_Library crates_ don‚Äôt have a `main` function, and they don‚Äôt compile to an executable. Instead, they define functionality intended to be shared with multiple projects. For example, the `rand` crate we used in [Chapter 2](about:blank/ch02-00-guessing-game-tutorial.html#generating-a-random-number) provides functionality that generates random numbers. Most of the time when Rustaceans say ‚Äúcrate‚Äù, they mean library crate, and they use ‚Äúcrate‚Äù interchangeably with the general programming concept of a ‚Äúlibrary‚Äú.\n\nThe _crate root_ is a source file that the Rust compiler starts from and makes up the root module of your crate (we‚Äôll explain modules in depth in the [‚ÄúDefining Modules to Control Scope and Privacy‚Äù](ch07-02-defining-modules-to-control-scope-and-privacy.html) section).\n\nA _package_ is a bundle of one or more crates that provides a set of functionality. A package contains a _Cargo.toml_ file that describes how to build those crates. Cargo is actually a package that contains the binary crate for the command-line tool you‚Äôve been using to build your code. The Cargo package also contains a library crate that the binary crate depends on. Other projects can depend on the Cargo library crate to use the same logic the Cargo command-line tool uses.\n\nA crate can come in one of two forms: a binary crate or a library crate. A package can contain as many binary crates as you like, but at most only one library crate. A package must contain at least one crate, whether that‚Äôs a library or binary crate.\n\nLet‚Äôs walk through what happens when we create a package. First we enter the command `cargo new my-project`:\n\n```console\n$ cargo new my-project\n     Created binary (application) `my-project` package\n$ ls my-project\nCargo.toml\nsrc\n$ ls my-project/src\nmain.rs\n\n```\n\nAfter we run `cargo new my-project`, we use `ls` to see what Cargo creates. In the project directory, there‚Äôs a _Cargo.toml_ file, giving us a package. There‚Äôs also a _src_ directory that contains _main.rs_. Open _Cargo.toml_ in your text editor, and note there‚Äôs no mention of _src/main.rs_. Cargo follows a convention that _src/main.rs_ is the crate root of a binary crate with the same name as the package. Likewise, Cargo knows that if the package directory contains _src/lib.rs_, the package contains a library crate with the same name as the package, and _src/lib.rs_ is its crate root. Cargo passes the crate root files to `rustc` to build the library or binary.\n\nHere, we have a package that only contains _src/main.rs_, meaning it only contains a binary crate named `my-project`. If a package contains _src/main.rs_ and _src/lib.rs_, it has two crates: a binary and a library, both with the same name as the package. A package can have multiple binary crates by placing files in the _src/bin_ directory: each file will be a separate binary crate.\n\n## [Defining Modules to Control Scope and Privacy](#defining-modules-to-control-scope-and-privacy)\n\nIn this section, we‚Äôll talk about modules and other parts of the module system, namely _paths_, which allow you to name items; the `use` keyword that brings a path into scope; and the `pub` keyword to make items public. We‚Äôll also discuss the `as` keyword, external packages, and the glob operator.\n\n### [Modules Cheat Sheet](#modules-cheat-sheet)\n\nBefore we get to the details of modules and paths, here we provide a quick reference on how modules, paths, the `use` keyword, and the `pub` keyword work in the compiler, and how most developers organize their code. We‚Äôll be going through examples of each of these rules throughout this chapter, but this is a great place to refer to as a reminder of how modules work.\n\n-   **Start from the crate root**: When compiling a crate, the compiler first looks in the crate root file (usually _src/lib.rs_ for a library crate or _src/main.rs_ for a binary crate) for code to compile.\n-   **Declaring modules**: In the crate root file, you can declare new modules; say you declare a ‚Äúgarden‚Äù module with `mod garden;`. The compiler will look for the module‚Äôs code in these places:\n    -   Inline, within curly brackets that replace the semicolon following `mod garden`\n    -   In the file _src/garden.rs_\n    -   In the file _src/garden/mod.rs_\n-   **Declaring submodules**: In any file other than the crate root, you can declare submodules. For example, you might declare `mod vegetables;` in _src/garden.rs_. The compiler will look for the submodule‚Äôs code within the directory named for the parent module in these places:\n    -   Inline, directly following `mod vegetables`, within curly brackets instead of the semicolon\n    -   In the file _src/garden/vegetables.rs_\n    -   In the file _src/garden/vegetables/mod.rs_\n-   **Paths to code in modules**: Once a module is part of your crate, you can refer to code in that module from anywhere else in that same crate, as long as the privacy rules allow, using the path to the code. For example, an `Asparagus` type in the garden vegetables module would be found at `crate::garden::vegetables::Asparagus`.\n-   **Private vs. public**: Code within a module is private from its parent modules by default. To make a module public, declare it with `pub mod` instead of `mod`. To make items within a public module public as well, use `pub` before their declarations.\n-   **The `use` keyword**: Within a scope, the `use` keyword creates shortcuts to items to reduce repetition of long paths. In any scope that can refer to `crate::garden::vegetables::Asparagus`, you can create a shortcut with `use crate::garden::vegetables::Asparagus;` and from then on you only need to write `Asparagus` to make use of that type in the scope.\n\nHere, we create a binary crate named `backyard` that illustrates these rules. The crate‚Äôs directory, also named `backyard`, contains these files and directories:\n\n```text\nbackyard\n‚îú‚îÄ‚îÄ Cargo.lock\n‚îú‚îÄ‚îÄ Cargo.toml\n‚îî‚îÄ‚îÄ src\n    ‚îú‚îÄ‚îÄ garden\n    ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ vegetables.rs\n    ‚îú‚îÄ‚îÄ garden.rs\n    ‚îî‚îÄ‚îÄ main.rs\n\n```\n\nThe crate root file in this case is _src/main.rs_, and it contains:\n\nFilename: src/main.rs\n\n```rust\nuse crate::garden::vegetables::Asparagus;\n\npub mod garden;\n\nfn main() {\n    let plant = Asparagus {};\n    println!(\"I'm growing {plant:?}!\");\n}\n```\n\nThe `pub mod garden;` line tells the compiler to include the code it finds in _src/garden.rs_, which is:\n\nFilename: src/garden.rs\n\n```rust\npub mod vegetables;\n```\n\nHere, `pub mod vegetables;` means the code in _src/garden/vegetables.rs_ is included too. That code is:\n\n```rust\n#[derive(Debug)]\npub struct Asparagus {}\n```\n\nNow let‚Äôs get into the details of these rules and demonstrate them in action!\n\n_Modules_ let us organize code within a crate for readability and easy reuse. Modules also allow us to control the _privacy_ of items because code within a module is private by default. Private items are internal implementation details not available for outside use. We can choose to make modules and the items within them public, which exposes them to allow external code to use and depend on them.\n\nAs an example, let‚Äôs write a library crate that provides the functionality of a restaurant. We‚Äôll define the signatures of functions but leave their bodies empty to concentrate on the organization of the code rather than the implementation of a restaurant.\n\nIn the restaurant industry, some parts of a restaurant are referred to as _front of house_ and others as _back of house_. Front of house is where customers are; this encompasses where the hosts seat customers, servers take orders and payment, and bartenders make drinks. Back of house is where the chefs and cooks work in the kitchen, dishwashers clean up, and managers do administrative work.\n\nTo structure our crate in this way, we can organize its functions into nested modules. Create a new library named `restaurant` by running `cargo new restaurant --lib`. Then enter the code in Listing 7-1 into _src/lib.rs_ to define some modules and function signatures; this code is the front of house section.\n\nFilename: src/lib.rs\n\n```rust\nmod front_of_house {\n    mod hosting {\n        fn add_to_waitlist() {}\n\n        fn seat_at_table() {}\n    }\n\n    mod serving {\n        fn take_order() {}\n\n        fn serve_order() {}\n\n        fn take_payment() {}\n    }\n}\n```\n\nListing 7-1: A `front_of_house` module containing other modules that then contain functions\n\nWe define a module with the `mod` keyword followed by the name of the module (in this case, `front_of_house`). The body of the module then goes inside curly brackets. Inside modules, we can place other modules, as in this case with the modules `hosting` and `serving`. Modules can also hold definitions for other items, such as structs, enums, constants, traits, and‚Äîas in Listing 7-1‚Äîfunctions.\n\nBy using modules, we can group related definitions together and name why they‚Äôre related. Programmers using this code can navigate the code based on the groups rather than having to read through all the definitions, making it easier to find the definitions relevant to them. Programmers adding new functionality to this code would know where to place the code to keep the program organized.\n\nEarlier, we mentioned that _src/main.rs_ and _src/lib.rs_ are called crate roots. The reason for their name is that the contents of either of these two files form a module named `crate` at the root of the crate‚Äôs module structure, known as the _module tree_.\n\nListing 7-2 shows the module tree for the structure in Listing 7-1.\n\n```text\ncrate\n ‚îî‚îÄ‚îÄ front_of_house\n     ‚îú‚îÄ‚îÄ hosting\n     ‚îÇ   ‚îú‚îÄ‚îÄ add_to_waitlist\n     ‚îÇ   ‚îî‚îÄ‚îÄ seat_at_table\n     ‚îî‚îÄ‚îÄ serving\n         ‚îú‚îÄ‚îÄ take_order\n         ‚îú‚îÄ‚îÄ serve_order\n         ‚îî‚îÄ‚îÄ take_payment\n\n```\n\nListing 7-2: The module tree for the code in Listing 7-1\n\nThis tree shows how some of the modules nest inside other modules; for example, `hosting` nests inside `front_of_house`. The tree also shows that some modules are _siblings_, meaning they‚Äôre defined in the same module; `hosting` and `serving` are siblings defined within `front_of_house`. If module A is contained inside module B, we say that module A is the _child_ of module B and that module B is the _parent_ of module A. Notice that the entire module tree is rooted under the implicit module named `crate`.\n\nThe module tree might remind you of the filesystem‚Äôs directory tree on your computer; this is a very apt comparison! Just like directories in a filesystem, you use modules to organize your code. And just like files in a directory, we need a way to find our modules.\n\n## [Paths for Referring to an Item in the Module Tree](#paths-for-referring-to-an-item-in-the-module-tree)\n\nTo show Rust where to find an item in a module tree, we use a path in the same way we use a path when navigating a filesystem. To call a function, we need to know its path.\n\nA path can take two forms:\n\n-   An _absolute path_ is the full path starting from a crate root; for code from an external crate, the absolute path begins with the crate name, and for code from the current crate, it starts with the literal `crate`.\n-   A _relative path_ starts from the current module and uses `self`, `super`, or an identifier in the current module.\n\nBoth absolute and relative paths are followed by one or more identifiers separated by double colons (`::`).\n\nReturning to Listing 7-1, say we want to call the `add_to_waitlist` function. This is the same as asking: what‚Äôs the path of the `add_to_waitlist` function? Listing 7-3 contains Listing 7-1 with some of the modules and functions removed.\n\nWe‚Äôll show two ways to call the `add_to_waitlist` function from a new function, `eat_at_restaurant`, defined in the crate root. These paths are correct, but there‚Äôs another problem remaining that will prevent this example from compiling as is. We‚Äôll explain why in a bit.\n\nThe `eat_at_restaurant` function is part of our library crate‚Äôs public API, so we mark it with the `pub` keyword. In the [‚ÄúExposing Paths with the `pub` Keyword‚Äù](about:blank/ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html#exposing-paths-with-the-pub-keyword) section, we‚Äôll go into more detail about `pub`.\n\nFilename: src/lib.rs\n\n```rust\nmod front_of_house {\n    mod hosting {\n        fn add_to_waitlist() {}\n    }\n}\n\npub fn eat_at_restaurant() {\n    // Absolute path\n    crate::front_of_house::hosting::add_to_waitlist();\n\n    // Relative path\n    front_of_house::hosting::add_to_waitlist();\n}\n```\n\nListing 7-3: Calling the `add_to_waitlist` function using absolute and relative paths\n\nThe first time we call the `add_to_waitlist` function in `eat_at_restaurant`, we use an absolute path. The `add_to_waitlist` function is defined in the same crate as `eat_at_restaurant`, which means we can use the `crate` keyword to start an absolute path. We then include each of the successive modules until we make our way to `add_to_waitlist`. You can imagine a filesystem with the same structure: we‚Äôd specify the path `/front_of_house/hosting/add_to_waitlist` to run the `add_to_waitlist` program; using the `crate` name to start from the crate root is like using `/` to start from the filesystem root in your shell.\n\nThe second time we call `add_to_waitlist` in `eat_at_restaurant`, we use a relative path. The path starts with `front_of_house`, the name of the module defined at the same level of the module tree as `eat_at_restaurant`. Here the filesystem equivalent would be using the path `front_of_house/hosting/add_to_waitlist`. Starting with a module name means that the path is relative.\n\nChoosing whether to use a relative or absolute path is a decision you‚Äôll make based on your project, and it depends on whether you‚Äôre more likely to move item definition code separately from or together with the code that uses the item. For example, if we moved the `front_of_house` module and the `eat_at_restaurant` function into a module named `customer_experience`, we‚Äôd need to update the absolute path to `add_to_waitlist`, but the relative path would still be valid. However, if we moved the `eat_at_restaurant` function separately into a module named `dining`, the absolute path to the `add_to_waitlist` call would stay the same, but the relative path would need to be updated. Our preference in general is to specify absolute paths because it‚Äôs more likely we‚Äôll want to move code definitions and item calls independently of each other.\n\nLet‚Äôs try to compile Listing 7-3 and find out why it won‚Äôt compile yet! The errors we get are shown in Listing 7-4.\n\n```console\n$ cargo build\n   Compiling restaurant v0.1.0 (file:///projects/restaurant)\nerror[E0603]: module `hosting` is private\n --> src/lib.rs:9:28\n  |\n9 |     crate::front_of_house::hosting::add_to_waitlist();\n  |                            ^^^^^^^  --------------- function `add_to_waitlist` is not publicly re-exported\n  |                            |\n  |                            private module\n  |\nnote: the module `hosting` is defined here\n --> src/lib.rs:2:5\n  |\n2 |     mod hosting {\n  |     ^^^^^^^^^^^\n\nerror[E0603]: module `hosting` is private\n  --> src/lib.rs:12:21\n   |\n12 |     front_of_house::hosting::add_to_waitlist();\n   |                     ^^^^^^^  --------------- function `add_to_waitlist` is not publicly re-exported\n   |                     |\n   |                     private module\n   |\nnote: the module `hosting` is defined here\n  --> src/lib.rs:2:5\n   |\n2  |     mod hosting {\n   |     ^^^^^^^^^^^\n\nFor more information about this error, try `rustc --explain E0603`.\nerror: could not compile `restaurant` (lib) due to 2 previous errors\n\n```\n\nListing 7-4: Compiler errors from building the code in Listing 7-3\n\nThe error messages say that module `hosting` is private. In other words, we have the correct paths for the `hosting` module and the `add_to_waitlist` function, but Rust won‚Äôt let us use them because it doesn‚Äôt have access to the private sections. In Rust, all items (functions, methods, structs, enums, modules, and constants) are private to parent modules by default. If you want to make an item like a function or struct private, you put it in a module.\n\nItems in a parent module can‚Äôt use the private items inside child modules, but items in child modules can use the items in their ancestor modules. This is because child modules wrap and hide their implementation details, but the child modules can see the context in which they‚Äôre defined. To continue with our metaphor, think of the privacy rules as being like the back office of a restaurant: what goes on in there is private to restaurant customers, but office managers can see and do everything in the restaurant they operate.\n\nRust chose to have the module system function this way so that hiding inner implementation details is the default. That way, you know which parts of the inner code you can change without breaking outer code. However, Rust does give you the option to expose inner parts of child modules‚Äô code to outer ancestor modules by using the `pub` keyword to make an item public.\n\n### [Exposing Paths with the `pub` Keyword](#exposing-paths-with-the-pub-keyword)\n\nLet‚Äôs return to the error in Listing 7-4 that told us the `hosting` module is private. We want the `eat_at_restaurant` function in the parent module to have access to the `add_to_waitlist` function in the child module, so we mark the `hosting` module with the `pub` keyword, as shown in Listing 7-5.\n\nFilename: src/lib.rs\n\n```rust\nmod front_of_house {\n    pub mod hosting {\n        fn add_to_waitlist() {}\n    }\n}\n\npub fn eat_at_restaurant() {\n    // Absolute path\n    crate::front_of_house::hosting::add_to_waitlist();\n\n    // Relative path\n    front_of_house::hosting::add_to_waitlist();\n}\n```\n\nListing 7-5: Declaring the `hosting` module as `pub` to use it from `eat_at_restaurant`\n\nUnfortunately, the code in Listing 7-5 still results in compiler errors, as shown in Listing 7-6.\n\n```console\n$ cargo build\n   Compiling restaurant v0.1.0 (file:///projects/restaurant)\nerror[E0603]: function `add_to_waitlist` is private\n --> src/lib.rs:9:37\n  |\n9 |     crate::front_of_house::hosting::add_to_waitlist();\n  |                                     ^^^^^^^^^^^^^^^ private function\n  |\nnote: the function `add_to_waitlist` is defined here\n --> src/lib.rs:3:9\n  |\n3 |         fn add_to_waitlist() {}\n  |         ^^^^^^^^^^^^^^^^^^^^\n\nerror[E0603]: function `add_to_waitlist` is private\n  --> src/lib.rs:12:30\n   |\n12 |     front_of_house::hosting::add_to_waitlist();\n   |                              ^^^^^^^^^^^^^^^ private function\n   |\nnote: the function `add_to_waitlist` is defined here\n  --> src/lib.rs:3:9\n   |\n3  |         fn add_to_waitlist() {}\n   |         ^^^^^^^^^^^^^^^^^^^^\n\nFor more information about this error, try `rustc --explain E0603`.\nerror: could not compile `restaurant` (lib) due to 2 previous errors\n\n```\n\nListing 7-6: Compiler errors from building the code in Listing 7-5\n\nWhat happened? Adding the `pub` keyword in front of `mod hosting` makes the module public. With this change, if we can access `front_of_house`, we can access `hosting`. But the _contents_ of `hosting` are still private; making the module public doesn‚Äôt make its contents public. The `pub` keyword on a module only lets code in its ancestor modules refer to it, not access its inner code. Because modules are containers, there‚Äôs not much we can do by only making the module public; we need to go further and choose to make one or more of the items within the module public as well.\n\nThe errors in Listing 7-6 say that the `add_to_waitlist` function is private. The privacy rules apply to structs, enums, functions, and methods as well as modules.\n\nLet‚Äôs also make the `add_to_waitlist` function public by adding the `pub` keyword before its definition, as in Listing 7-7.\n\nFilename: src/lib.rs\n\n```rust\nmod front_of_house {\n    pub mod hosting {\n        pub fn add_to_waitlist() {}\n    }\n}\n\npub fn eat_at_restaurant() {\n    // Absolute path\n    crate::front_of_house::hosting::add_to_waitlist();\n\n    // Relative path\n    front_of_house::hosting::add_to_waitlist();\n}\n```\n\nListing 7-7: Adding the `pub` keyword to `mod hosting` and `fn add_to_waitlist` lets us call the function from `eat_at_restaurant`\n\nNow the code will compile! To see why adding the `pub` keyword lets us use these paths in `eat_at_restaurant` with respect to the privacy rules, let‚Äôs look at the absolute and the relative paths.\n\nIn the absolute path, we start with `crate`, the root of our crate‚Äôs module tree. The `front_of_house` module is defined in the crate root. While `front_of_house` isn‚Äôt public, because the `eat_at_restaurant` function is defined in the same module as `front_of_house` (that is, `eat_at_restaurant` and `front_of_house` are siblings), we can refer to `front_of_house` from `eat_at_restaurant`. Next is the `hosting` module marked with `pub`. We can access the parent module of `hosting`, so we can access `hosting`. Finally, the `add_to_waitlist` function is marked with `pub` and we can access its parent module, so this function call works!\n\nIn the relative path, the logic is the same as the absolute path except for the first step: rather than starting from the crate root, the path starts from `front_of_house`. The `front_of_house` module is defined within the same module as `eat_at_restaurant`, so the relative path starting from the module in which `eat_at_restaurant` is defined works. Then, because `hosting` and `add_to_waitlist` are marked with `pub`, the rest of the path works, and this function call is valid!\n\nIf you plan on sharing your library crate so other projects can use your code, your public API is your contract with users of your crate that determines how they can interact with your code. There are many considerations around managing changes to your public API to make it easier for people to depend on your crate. These considerations are out of the scope of this book; if you‚Äôre interested in this topic, see [The Rust API Guidelines](https://rust-lang.github.io/api-guidelines/).\n\n#### [Best Practices for Packages with a Binary and a Library](#best-practices-for-packages-with-a-binary-and-a-library)\n\nWe mentioned that a package can contain both a _src/main.rs_ binary crate root as well as a _src/lib.rs_ library crate root, and both crates will have the package name by default. Typically, packages with this pattern of containing both a library and a binary crate will have just enough code in the binary crate to start an executable that calls code within the library crate. This lets other projects benefit from most of the functionality that the package provides because the library crate‚Äôs code can be shared.\n\nThe module tree should be defined in _src/lib.rs_. Then, any public items can be used in the binary crate by starting paths with the name of the package. The binary crate becomes a user of the library crate just like a completely external crate would use the library crate: it can only use the public API. This helps you design a good API; not only are you the author, you‚Äôre also a client!\n\nIn [Chapter 12](ch12-00-an-io-project.html), we‚Äôll demonstrate this organizational practice with a command-line program that will contain both a binary crate and a library crate.\n\n### [Starting Relative Paths with `super`](#starting-relative-paths-with-super)\n\nWe can construct relative paths that begin in the parent module, rather than the current module or the crate root, by using `super` at the start of the path. This is like starting a filesystem path with the `..` syntax. Using `super` allows us to reference an item that we know is in the parent module, which can make rearranging the module tree easier when the module is closely related to the parent but the parent might be moved elsewhere in the module tree someday.\n\nConsider the code in Listing 7-8 that models the situation in which a chef fixes an incorrect order and personally brings it out to the customer. The function `fix_incorrect_order` defined in the `back_of_house` module calls the function `deliver_order` defined in the parent module by specifying the path to `deliver_order`, starting with `super`.\n\nFilename: src/lib.rs\n\n```rust\nfn deliver_order() {}\n\nmod back_of_house {\n    fn fix_incorrect_order() {\n        cook_order();\n        super::deliver_order();\n    }\n\n    fn cook_order() {}\n}\n```\n\nListing 7-8: Calling a function using a relative path starting with `super`\n\nThe `fix_incorrect_order` function is in the `back_of_house` module, so we can use `super` to go to the parent module of `back_of_house`, which in this case is `crate`, the root. From there, we look for `deliver_order` and find it. Success! We think the `back_of_house` module and the `deliver_order` function are likely to stay in the same relationship to each other and get moved together should we decide to reorganize the crate‚Äôs module tree. Therefore, we used `super` so we‚Äôll have fewer places to update code in the future if this code gets moved to a different module.\n\n### [Making Structs and Enums Public](#making-structs-and-enums-public)\n\nWe can also use `pub` to designate structs and enums as public, but there are a few extra details to the usage of `pub` with structs and enums. If we use `pub` before a struct definition, we make the struct public, but the struct‚Äôs fields will still be private. We can make each field public or not on a case-by-case basis. In Listing 7-9, we‚Äôve defined a public `back_of_house::Breakfast` struct with a public `toast` field but a private `seasonal_fruit` field. This models the case in a restaurant where the customer can pick the type of bread that comes with a meal, but the chef decides which fruit accompanies the meal based on what‚Äôs in season and in stock. The available fruit changes quickly, so customers can‚Äôt choose the fruit or even see which fruit they‚Äôll get.\n\nFilename: src/lib.rs\n\n```rust\nmod back_of_house {\n    pub struct Breakfast {\n        pub toast: String,\n        seasonal_fruit: String,\n    }\n\n    impl Breakfast {\n        pub fn summer(toast: &str) -> Breakfast {\n            Breakfast {\n                toast: String::from(toast),\n                seasonal_fruit: String::from(\"peaches\"),\n            }\n        }\n    }\n}\n\npub fn eat_at_restaurant() {\n    // Order a breakfast in the summer with Rye toast\n    let mut meal = back_of_house::Breakfast::summer(\"Rye\");\n    // Change our mind about what bread we'd like\n    meal.toast = String::from(\"Wheat\");\n    println!(\"I'd like {} toast please\", meal.toast);\n\n    // The next line won't compile if we uncomment it; we're not allowed\n    // to see or modify the seasonal fruit that comes with the meal\n    // meal.seasonal_fruit = String::from(\"blueberries\");\n}\n```\n\nListing 7-9: A struct with some public fields and some private fields\n\nBecause the `toast` field in the `back_of_house::Breakfast` struct is public, in `eat_at_restaurant` we can write and read to the `toast` field using dot notation. Notice that we can‚Äôt use the `seasonal_fruit` field in `eat_at_restaurant`, because `seasonal_fruit` is private. Try uncommenting the line modifying the `seasonal_fruit` field value to see what error you get!\n\nAlso, note that because `back_of_house::Breakfast` has a private field, the struct needs to provide a public associated function that constructs an instance of `Breakfast` (we‚Äôve named it `summer` here). If `Breakfast` didn‚Äôt have such a function, we couldn‚Äôt create an instance of `Breakfast` in `eat_at_restaurant` because we couldn‚Äôt set the value of the private `seasonal_fruit` field in `eat_at_restaurant`.\n\nIn contrast, if we make an enum public, all of its variants are then public. We only need the `pub` before the `enum` keyword, as shown in Listing 7-10.\n\nFilename: src/lib.rs\n\n```rust\nmod back_of_house {\n    pub enum Appetizer {\n        Soup,\n        Salad,\n    }\n}\n\npub fn eat_at_restaurant() {\n    let order1 = back_of_house::Appetizer::Soup;\n    let order2 = back_of_house::Appetizer::Salad;\n}\n```\n\nListing 7-10: Designating an enum as public makes all its variants public\n\nBecause we made the `Appetizer` enum public, we can use the `Soup` and `Salad` variants in `eat_at_restaurant`.\n\nEnums aren‚Äôt very useful unless their variants are public; it would be annoying to have to annotate all enum variants with `pub` in every case, so the default for enum variants is to be public. Structs are often useful without their fields being public, so struct fields follow the general rule of everything being private by default unless annotated with `pub`.\n\nThere‚Äôs one more situation involving `pub` that we haven‚Äôt covered, and that is our last module system feature: the `use` keyword. We‚Äôll cover `use` by itself first, and then we‚Äôll show how to combine `pub` and `use`.\n\n## [Bringing Paths into Scope with the `use` Keyword](#bringing-paths-into-scope-with-the-use-keyword)\n\nHaving to write out the paths to call functions can feel inconvenient and repetitive. In Listing 7-7, whether we chose the absolute or relative path to the `add_to_waitlist` function, every time we wanted to call `add_to_waitlist` we had to specify `front_of_house` and `hosting` too. Fortunately, there‚Äôs a way to simplify this process: we can create a shortcut to a path with the `use` keyword once, and then use the shorter name everywhere else in the scope.\n\nIn Listing 7-11, we bring the `crate::front_of_house::hosting` module into the scope of the `eat_at_restaurant` function so we only have to specify `hosting::add_to_waitlist` to call the `add_to_waitlist` function in `eat_at_restaurant`.\n\nFilename: src/lib.rs\n\n```rust\nmod front_of_house {\n    pub mod hosting {\n        pub fn add_to_waitlist() {}\n    }\n}\n\nuse crate::front_of_house::hosting;\n\npub fn eat_at_restaurant() {\n    hosting::add_to_waitlist();\n}\n```\n\nListing 7-11: Bringing a module into scope with `use`\n\nAdding `use` and a path in a scope is similar to creating a symbolic link in the filesystem. By adding `use crate::front_of_house::hosting` in the crate root, `hosting` is now a valid name in that scope, just as though the `hosting` module had been defined in the crate root. Paths brought into scope with `use` also check privacy, like any other paths.\n\nNote that `use` only creates the shortcut for the particular scope in which the `use` occurs. Listing 7-12 moves the `eat_at_restaurant` function into a new child module named `customer`, which is then a different scope than the `use` statement, so the function body won‚Äôt compile.\n\nFilename: src/lib.rs\n\n```rust\nmod front_of_house {\n    pub mod hosting {\n        pub fn add_to_waitlist() {}\n    }\n}\n\nuse crate::front_of_house::hosting;\n\nmod customer {\n    pub fn eat_at_restaurant() {\n        hosting::add_to_waitlist();\n    }\n}\n```\n\nListing 7-12: A `use` statement only applies in the scope it‚Äôs in\n\nThe compiler error shows that the shortcut no longer applies within the `customer` module:\n\n```console\n$ cargo build\n   Compiling restaurant v0.1.0 (file:///projects/restaurant)\nerror[E0433]: failed to resolve: use of undeclared crate or module `hosting`\n  --> src/lib.rs:11:9\n   |\n11 |         hosting::add_to_waitlist();\n   |         ^^^^^^^ use of undeclared crate or module `hosting`\n   |\nhelp: consider importing this module through its public re-export\n   |\n10 +     use crate::hosting;\n   |\n\nwarning: unused import: `crate::front_of_house::hosting`\n --> src/lib.rs:7:5\n  |\n7 | use crate::front_of_house::hosting;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\n  = note: `#[warn(unused_imports)]` on by default\n\nFor more information about this error, try `rustc --explain E0433`.\nwarning: `restaurant` (lib) generated 1 warning\nerror: could not compile `restaurant` (lib) due to 1 previous error; 1 warning emitted\n\n```\n\nNotice there‚Äôs also a warning that the `use` is no longer used in its scope! To fix this problem, move the `use` within the `customer` module too, or reference the shortcut in the parent module with `super::hosting` within the child `customer` module.\n\n### [Creating Idiomatic `use` Paths](#creating-idiomatic-use-paths)\n\nIn Listing 7-11, you might have wondered why we specified `use crate::front_of_house::hosting` and then called `hosting::add_to_waitlist` in `eat_at_restaurant`, rather than specifying the `use` path all the way out to the `add_to_waitlist` function to achieve the same result, as in Listing 7-13.\n\nFilename: src/lib.rs\n\n```rust\nmod front_of_house {\n    pub mod hosting {\n        pub fn add_to_waitlist() {}\n    }\n}\n\nuse crate::front_of_house::hosting::add_to_waitlist;\n\npub fn eat_at_restaurant() {\n    add_to_waitlist();\n}\n```\n\nListing 7-13: Bringing the `add_to_waitlist` function into scope with `use`, which is unidiomatic\n\nAlthough both Listing 7-11 and Listing 7-13 accomplish the same task, Listing 7-11 is the idiomatic way to bring a function into scope with `use`. Bringing the function‚Äôs parent module into scope with `use` means we have to specify the parent module when calling the function. Specifying the parent module when calling the function makes it clear that the function isn‚Äôt locally defined while still minimizing repetition of the full path. The code in Listing 7-13 is unclear as to where `add_to_waitlist` is defined.\n\nOn the other hand, when bringing in structs, enums, and other items with `use`, it‚Äôs idiomatic to specify the full path. Listing 7-14 shows the idiomatic way to bring the standard library‚Äôs `HashMap` struct into the scope of a binary crate.\n\nFilename: src/main.rs\n\n```rust\nuse std::collections::HashMap;\n\nfn main() {\n    let mut map = HashMap::new();\n    map.insert(1, 2);\n}\n```\n\nListing 7-14: Bringing `HashMap` into scope in an idiomatic way\n\nThere‚Äôs no strong reason behind this idiom: it‚Äôs just the convention that has emerged, and folks have gotten used to reading and writing Rust code this way.\n\nThe exception to this idiom is if we‚Äôre bringing two items with the same name into scope with `use` statements, because Rust doesn‚Äôt allow that. Listing 7-15 shows how to bring two `Result` types into scope that have the same name but different parent modules, and how to refer to them.\n\nFilename: src/lib.rs\n\n```rust\nuse std::fmt;\nuse std::io;\n\nfn function1() -> fmt::Result {\n    // --snip--\n    Ok(())\n}\n\nfn function2() -> io::Result<()> {\n    // --snip--\n    Ok(())\n}\n```\n\nListing 7-15: Bringing two types with the same name into the same scope requires using their parent modules.\n\nAs you can see, using the parent modules distinguishes the two `Result` types. If instead we specified `use std::fmt::Result` and `use std::io::Result`, we‚Äôd have two `Result` types in the same scope, and Rust wouldn‚Äôt know which one we meant when we used `Result`.\n\n### [Providing New Names with the `as` Keyword](#providing-new-names-with-the-as-keyword)\n\nThere‚Äôs another solution to the problem of bringing two types of the same name into the same scope with `use`: after the path, we can specify `as` and a new local name, or _alias_, for the type. Listing 7-16 shows another way to write the code in Listing 7-15 by renaming one of the two `Result` types using `as`.\n\nFilename: src/lib.rs\n\n```rust\nuse std::fmt::Result;\nuse std::io::Result as IoResult;\n\nfn function1() -> Result {\n    // --snip--\n    Ok(())\n}\n\nfn function2() -> IoResult<()> {\n    // --snip--\n    Ok(())\n}\n```\n\nListing 7-16: Renaming a type when it‚Äôs brought into scope with the `as` keyword\n\nIn the second `use` statement, we chose the new name `IoResult` for the `std::io::Result` type, which won‚Äôt conflict with the `Result` from `std::fmt` that we‚Äôve also brought into scope. Listing 7-15 and Listing 7-16 are considered idiomatic, so the choice is up to you!\n\n### [Re-exporting Names with `pub use`](#re-exporting-names-with-pub-use)\n\nWhen we bring a name into scope with the `use` keyword, the name available in the new scope is private. To enable the code that calls our code to refer to that name as if it had been defined in that code‚Äôs scope, we can combine `pub` and `use`. This technique is called _re-exporting_ because we‚Äôre bringing an item into scope but also making that item available for others to bring into their scope.\n\nListing 7-17 shows the code in Listing 7-11 with `use` in the root module changed to `pub use`.\n\nFilename: src/lib.rs\n\n```rust\nmod front_of_house {\n    pub mod hosting {\n        pub fn add_to_waitlist() {}\n    }\n}\n\npub use crate::front_of_house::hosting;\n\npub fn eat_at_restaurant() {\n    hosting::add_to_waitlist();\n}\n```\n\nListing 7-17: Making a name available for any code to use from a new scope with `pub use`\n\nBefore this change, external code would have to call the `add_to_waitlist` function by using the path `restaurant::front_of_house::hosting::add_to_waitlist()`, which also would have required the `front_of_house` module to be marked as `pub`. Now that this `pub use` has re-exported the `hosting` module from the root module, external code can use the path `restaurant::hosting::add_to_waitlist()` instead.\n\nRe-exporting is useful when the internal structure of your code is different from how programmers calling your code would think about the domain. For example, in this restaurant metaphor, the people running the restaurant think about ‚Äúfront of house‚Äù and ‚Äúback of house.‚Äù But customers visiting a restaurant probably won‚Äôt think about the parts of the restaurant in those terms. With `pub use`, we can write our code with one structure but expose a different structure. Doing so makes our library well organized for programmers working on the library and programmers calling the library. We‚Äôll look at another example of `pub use` and how it affects your crate‚Äôs documentation in the [‚ÄúExporting a Convenient Public API with `pub use`‚Äù](about:blank/ch14-02-publishing-to-crates-io.html#exporting-a-convenient-public-api-with-pub-use) section of Chapter 14.\n\n### [Using External Packages](#using-external-packages)\n\nIn Chapter 2, we programmed a guessing game project that used an external package called `rand` to get random numbers. To use `rand` in our project, we added this line to _Cargo.toml_:\n\nFilename: Cargo.toml\n\n```toml\nrand = \"0.8.5\"\n\n```\n\nAdding `rand` as a dependency in _Cargo.toml_ tells Cargo to download the `rand` package and any dependencies from [crates.io](https://crates.io/) and make `rand` available to our project.\n\nThen, to bring `rand` definitions into the scope of our package, we added a `use` line starting with the name of the crate, `rand`, and listed the items we wanted to bring into scope. Recall that in the [‚ÄúGenerating a Random Number‚Äù](about:blank/ch02-00-guessing-game-tutorial.html#generating-a-random-number) section in Chapter 2, we brought the `Rng` trait into scope and called the `rand::thread_rng` function:\n\n```rust\nuse std::io;\nuse rand::Rng;\n\nfn main() {\n    println!(\"Guess the number!\");\n\n    let secret_number = rand::thread_rng().gen_range(1..=100);\n\n    println!(\"The secret number is: {secret_number}\");\n\n    println!(\"Please input your guess.\");\n\n    let mut guess = String::new();\n\n    io::stdin()\n        .read_line(&mut guess)\n        .expect(\"Failed to read line\");\n\n    println!(\"You guessed: {guess}\");\n}\n```\n\nMembers of the Rust community have made many packages available at [crates.io](https://crates.io/), and pulling any of them into your package involves these same steps: listing them in your package‚Äôs _Cargo.toml_ file and using `use` to bring items from their crates into scope.\n\nNote that the standard `std` library is also a crate that‚Äôs external to our package. Because the standard library is shipped with the Rust language, we don‚Äôt need to change _Cargo.toml_ to include `std`. But we do need to refer to it with `use` to bring items from there into our package‚Äôs scope. For example, with `HashMap` we would use this line:\n\n```rust\n#![allow(unused)]\nfn main() {\nuse std::collections::HashMap;\n}\n```\n\nThis is an absolute path starting with `std`, the name of the standard library crate.\n\n### [Using Nested Paths to Clean Up Large `use` Lists](#using-nested-paths-to-clean-up-large-use-lists)\n\nIf we‚Äôre using multiple items defined in the same crate or same module, listing each item on its own line can take up a lot of vertical space in our files. For example, these two `use` statements we had in the guessing game in Listing 2-4 bring items from `std` into scope:\n\nFilename: src/main.rs\n\n```rust\nuse rand::Rng;\n// --snip--\nuse std::cmp::Ordering;\nuse std::io;\n// --snip--\n\nfn main() {\n    println!(\"Guess the number!\");\n\n    let secret_number = rand::thread_rng().gen_range(1..=100);\n\n    println!(\"The secret number is: {secret_number}\");\n\n    println!(\"Please input your guess.\");\n\n    let mut guess = String::new();\n\n    io::stdin()\n        .read_line(&mut guess)\n        .expect(\"Failed to read line\");\n\n    println!(\"You guessed: {guess}\");\n\n    match guess.cmp(&secret_number) {\n        Ordering::Less => println!(\"Too small!\"),\n        Ordering::Greater => println!(\"Too big!\"),\n        Ordering::Equal => println!(\"You win!\"),\n    }\n}\n```\n\nInstead, we can use nested paths to bring the same items into scope in one line. We do this by specifying the common part of the path, followed by two colons, and then curly brackets around a list of the parts of the paths that differ, as shown in Listing 7-18.\n\nFilename: src/main.rs\n\n```rust\nuse rand::Rng;\n// --snip--\nuse std::{cmp::Ordering, io};\n// --snip--\n\nfn main() {\n    println!(\"Guess the number!\");\n\n    let secret_number = rand::thread_rng().gen_range(1..=100);\n\n    println!(\"The secret number is: {secret_number}\");\n\n    println!(\"Please input your guess.\");\n\n    let mut guess = String::new();\n\n    io::stdin()\n        .read_line(&mut guess)\n        .expect(\"Failed to read line\");\n\n    let guess: u32 = guess.trim().parse().expect(\"Please type a number!\");\n\n    println!(\"You guessed: {guess}\");\n\n    match guess.cmp(&secret_number) {\n        Ordering::Less => println!(\"Too small!\"),\n        Ordering::Greater => println!(\"Too big!\"),\n        Ordering::Equal => println!(\"You win!\"),\n    }\n}\n```\n\nListing 7-18: Specifying a nested path to bring multiple items with the same prefix into scope\n\nIn bigger programs, bringing many items into scope from the same crate or module using nested paths can reduce the number of separate `use` statements needed by a lot!\n\nWe can use a nested path at any level in a path, which is useful when combining two `use` statements that share a subpath. For example, Listing 7-19 shows two `use` statements: one that brings `std::io` into scope and one that brings `std::io::Write` into scope.\n\nFilename: src/lib.rs\n\n```rust\nuse std::io;\nuse std::io::Write;\n```\n\nListing 7-19: Two `use` statements where one is a subpath of the other\n\nThe common part of these two paths is `std::io`, and that‚Äôs the complete first path. To merge these two paths into one `use` statement, we can use `self` in the nested path, as shown in Listing 7-20.\n\nFilename: src/lib.rs\n\n```rust\nuse std::io::{self, Write};\n```\n\nListing 7-20: Combining the paths in Listing 7-19 into one `use` statement\n\nThis line brings `std::io` and `std::io::Write` into scope.\n\n### [The Glob Operator](#the-glob-operator)\n\nIf we want to bring _all_ public items defined in a path into scope, we can specify that path followed by the `*` glob operator:\n\n```rust\n#![allow(unused)]\nfn main() {\nuse std::collections::*;\n}\n```\n\nThis `use` statement brings all public items defined in `std::collections` into the current scope. Be careful when using the glob operator! Glob can make it harder to tell what names are in scope and where a name used in your program was defined.\n\nThe glob operator is often used when testing to bring everything under test into the `tests` module; we‚Äôll talk about that in the [‚ÄúHow to Write Tests‚Äù](about:blank/ch11-01-writing-tests.html#how-to-write-tests) section in Chapter 11. The glob operator is also sometimes used as part of the prelude pattern: see [the standard library documentation](about:blank/std/prelude/index.html#other-preludes) for more information on that pattern.\n\n## [Separating Modules into Different Files](#separating-modules-into-different-files)\n\nSo far, all the examples in this chapter defined multiple modules in one file. When modules get large, you might want to move their definitions to a separate file to make the code easier to navigate.\n\nFor example, let‚Äôs start from the code in Listing 7-17 that had multiple restaurant modules. We‚Äôll extract modules into files instead of having all the modules defined in the crate root file. In this case, the crate root file is _src/lib.rs_, but this procedure also works with binary crates whose crate root file is _src/main.rs_.\n\nFirst we‚Äôll extract the `front_of_house` module to its own file. Remove the code inside the curly brackets for the `front_of_house` module, leaving only the `mod front_of_house;` declaration, so that _src/lib.rs_ contains the code shown in Listing 7-21. Note that this won‚Äôt compile until we create the _src/front\\_of\\_house.rs_ file in Listing 7-22.\n\nFilename: src/lib.rs\n\n```rust\nmod front_of_house;\n\npub use crate::front_of_house::hosting;\n\npub fn eat_at_restaurant() {\n    hosting::add_to_waitlist();\n}\n```\n\nListing 7-21: Declaring the `front_of_house` module whose body will be in _src/front\\_of\\_house.rs_\n\nNext, place the code that was in the curly brackets into a new file named _src/front\\_of\\_house.rs_, as shown in Listing 7-22. The compiler knows to look in this file because it came across the module declaration in the crate root with the name `front_of_house`.\n\nFilename: src/front\\_of\\_house.rs\n\n```rust\npub mod hosting {\n    pub fn add_to_waitlist() {}\n}\n```\n\nListing 7-22: Definitions inside the `front_of_house` module in _src/front\\_of\\_house.rs_\n\nNote that you only need to load a file using a `mod` declaration _once_ in your module tree. Once the compiler knows the file is part of the project (and knows where in the module tree the code resides because of where you‚Äôve put the `mod` statement), other files in your project should refer to the loaded file‚Äôs code using a path to where it was declared, as covered in the [‚ÄúPaths for Referring to an Item in the Module Tree‚Äù](ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html) section. In other words, `mod` is _not_ an ‚Äúinclude‚Äù operation that you may have seen in other programming languages.\n\nNext, we‚Äôll extract the `hosting` module to its own file. The process is a bit different because `hosting` is a child module of `front_of_house`, not of the root module. We‚Äôll place the file for `hosting` in a new directory that will be named for its ancestors in the module tree, in this case _src/front\\_of\\_house_.\n\nTo start moving `hosting`, we change _src/front\\_of\\_house.rs_ to contain only the declaration of the `hosting` module:\n\nFilename: src/front\\_of\\_house.rs\n\n```rust\npub mod hosting;\n```\n\nThen we create a _src/front\\_of\\_house_ directory and a _hosting.rs_ file to contain the definitions made in the `hosting` module:\n\nFilename: src/front\\_of\\_house/hosting.rs\n\n```rust\npub fn add_to_waitlist() {}\n```\n\nIf we instead put _hosting.rs_ in the _src_ directory, the compiler would expect the _hosting.rs_ code to be in a `hosting` module declared in the crate root, and not declared as a child of the `front_of_house` module. The compiler‚Äôs rules for which files to check for which modules‚Äô code mean the directories and files more closely match the module tree.\n\n### [Alternate File Paths](#alternate-file-paths)\n\nSo far we‚Äôve covered the most idiomatic file paths the Rust compiler uses, but Rust also supports an older style of file path. For a module named `front_of_house` declared in the crate root, the compiler will look for the module‚Äôs code in:\n\n-   _src/front\\_of\\_house.rs_ (what we covered)\n-   _src/front\\_of\\_house/mod.rs_ (older style, still supported path)\n\nFor a module named `hosting` that is a submodule of `front_of_house`, the compiler will look for the module‚Äôs code in:\n\n-   _src/front\\_of\\_house/hosting.rs_ (what we covered)\n-   _src/front\\_of\\_house/hosting/mod.rs_ (older style, still supported path)\n\nIf you use both styles for the same module, you‚Äôll get a compiler error. Using a mix of both styles for different modules in the same project is allowed, but might be confusing for people navigating your project.\n\nThe main downside to the style that uses files named _mod.rs_ is that your project can end up with many files named _mod.rs_, which can get confusing when you have them open in your editor at the same time.\n\nWe‚Äôve moved each module‚Äôs code to a separate file, and the module tree remains the same. The function calls in `eat_at_restaurant` will work without any modification, even though the definitions live in different files. This technique lets you move modules to new files as they grow in size.\n\nNote that the `pub use crate::front_of_house::hosting` statement in _src/lib.rs_ also hasn‚Äôt changed, nor does `use` have any impact on what files are compiled as part of the crate. The `mod` keyword declares modules, and Rust looks in a file with the same name as the module for the code that goes into that module.\n\n## [Summary](#summary-6)\n\nRust lets you split a package into multiple crates and a crate into modules so you can refer to items defined in one module from another module. You can do this by specifying absolute or relative paths. These paths can be brought into scope with a `use` statement so you can use a shorter path for multiple uses of the item in that scope. Module code is private by default, but you can make definitions public by adding the `pub` keyword.\n\nIn the next chapter, we‚Äôll look at some collection data structures in the standard library that you can use in your neatly organized code.\n\n## [Common Collections](#common-collections)\n\nRust‚Äôs standard library includes a number of very useful data structures called _collections_. Most other data types represent one specific value, but collections can contain multiple values. Unlike the built-in array and tuple types, the data these collections point to is stored on the heap, which means the amount of data does not need to be known at compile time and can grow or shrink as the program runs. Each kind of collection has different capabilities and costs, and choosing an appropriate one for your current situation is a skill you‚Äôll develop over time. In this chapter, we‚Äôll discuss three collections that are used very often in Rust programs:\n\n-   A _vector_ allows you to store a variable number of values next to each other.\n-   A _string_ is a collection of characters. We‚Äôve mentioned the `String` type previously, but in this chapter we‚Äôll talk about it in depth.\n-   A _hash map_ allows you to associate a value with a specific key. It‚Äôs a particular implementation of the more general data structure called a _map_.\n\nTo learn about the other kinds of collections provided by the standard library, see [the documentation](../std/collections/index.html).\n\nWe‚Äôll discuss how to create and update vectors, strings, and hash maps, as well as what makes each special.\n\n## [Storing Lists of Values with Vectors](#storing-lists-of-values-with-vectors)\n\nThe first collection type we‚Äôll look at is `Vec<T>`, also known as a _vector_. Vectors allow you to store more than one value in a single data structure that puts all the values next to each other in memory. Vectors can only store values of the same type. They are useful when you have a list of items, such as the lines of text in a file or the prices of items in a shopping cart.\n\n### [Creating a New Vector](#creating-a-new-vector)\n\nTo create a new empty vector, we call the `Vec::new` function, as shown in Listing 8-1.\n\n```rust\nfn main() {\n    let v: Vec<i32> = Vec::new();\n}\n```\n\nListing 8-1: Creating a new, empty vector to hold values of type `i32`\n\nNote that we added a type annotation here. Because we aren‚Äôt inserting any values into this vector, Rust doesn‚Äôt know what kind of elements we intend to store. This is an important point. Vectors are implemented using generics; we‚Äôll cover how to use generics with your own types in Chapter 10. For now, know that the `Vec<T>` type provided by the standard library can hold any type. When we create a vector to hold a specific type, we can specify the type within angle brackets. In Listing 8-1, we‚Äôve told Rust that the `Vec<T>` in `v` will hold elements of the `i32` type.\n\nMore often, you‚Äôll create a `Vec<T>` with initial values and Rust will infer the type of value you want to store, so you rarely need to do this type annotation. Rust conveniently provides the `vec!` macro, which will create a new vector that holds the values you give it. Listing 8-2 creates a new `Vec<i32>` that holds the values `1`, `2`, and `3`. The integer type is `i32` because that‚Äôs the default integer type, as we discussed in the [‚ÄúData Types‚Äù](about:blank/ch03-02-data-types.html#data-types) section of Chapter 3.\n\n```rust\nfn main() {\n    let v = vec![1, 2, 3];\n}\n```\n\nListing 8-2: Creating a new vector containing values\n\nBecause we‚Äôve given initial `i32` values, Rust can infer that the type of `v` is `Vec<i32>`, and the type annotation isn‚Äôt necessary. Next, we‚Äôll look at how to modify a vector.\n\n### [Updating a Vector](#updating-a-vector)\n\nTo create a vector and then add elements to it, we can use the `push` method, as shown in Listing 8-3.\n\n```rust\nfn main() {\n    let mut v = Vec::new();\n\n    v.push(5);\n    v.push(6);\n    v.push(7);\n    v.push(8);\n}\n```\n\nListing 8-3: Using the `push` method to add values to a vector\n\nAs with any variable, if we want to be able to change its value, we need to make it mutable using the `mut` keyword, as discussed in Chapter 3. The numbers we place inside are all of type `i32`, and Rust infers this from the data, so we don‚Äôt need the `Vec<i32>` annotation.\n\n### [Reading Elements of Vectors](#reading-elements-of-vectors)\n\nThere are two ways to reference a value stored in a vector: via indexing or by using the `get` method. In the following examples, we‚Äôve annotated the types of the values that are returned from these functions for extra clarity.\n\nListing 8-4 shows both methods of accessing a value in a vector, with indexing syntax and the `get` method.\n\n```rust\nfn main() {\n    let v = vec![1, 2, 3, 4, 5];\n\n    let third: &i32 = &v[2];\n    println!(\"The third element is {third}\");\n\n    let third: Option<&i32> = v.get(2);\n    match third {\n        Some(third) => println!(\"The third element is {third}\"),\n        None => println!(\"There is no third element.\"),\n    }\n}\n```\n\nListing 8-4: Using indexing syntax and using the `get` method to access an item in a vector\n\nNote a few details here. We use the index value of `2` to get the third element because vectors are indexed by number, starting at zero. Using `&` and `[]` gives us a reference to the element at the index value. When we use the `get` method with the index passed as an argument, we get an `Option<&T>` that we can use with `match`.\n\nRust provides these two ways to reference an element so you can choose how the program behaves when you try to use an index value outside the range of existing elements. As an example, let‚Äôs see what happens when we have a vector of five elements and then we try to access an element at index 100 with each technique, as shown in Listing 8-5.\n\n```rust\nfn main() {\n    let v = vec![1, 2, 3, 4, 5];\n\n    let does_not_exist = &v[100];\n    let does_not_exist = v.get(100);\n}\n```\n\nListing 8-5: Attempting to access the element at index 100 in a vector containing five elements\n\nWhen we run this code, the first `[]` method will cause the program to panic because it references a nonexistent element. This method is best used when you want your program to crash if there‚Äôs an attempt to access an element past the end of the vector.\n\nWhen the `get` method is passed an index that is outside the vector, it returns `None` without panicking. You would use this method if accessing an element beyond the range of the vector may happen occasionally under normal circumstances. Your code will then have logic to handle having either `Some(&element)` or `None`, as discussed in Chapter 6. For example, the index could be coming from a person entering a number. If they accidentally enter a number that‚Äôs too large and the program gets a `None` value, you could tell the user how many items are in the current vector and give them another chance to enter a valid value. That would be more user-friendly than crashing the program due to a typo!\n\nWhen the program has a valid reference, the borrow checker enforces the ownership and borrowing rules (covered in Chapter 4) to ensure this reference and any other references to the contents of the vector remain valid. Recall the rule that states you can‚Äôt have mutable and immutable references in the same scope. That rule applies in Listing 8-6, where we hold an immutable reference to the first element in a vector and try to add an element to the end. This program won‚Äôt work if we also try to refer to that element later in the function.\n\n```rust\nfn main() {\n    let mut v = vec![1, 2, 3, 4, 5];\n\n    let first = &v[0];\n\n    v.push(6);\n\n    println!(\"The first element is: {first}\");\n}\n```\n\nListing 8-6: Attempting to add an element to a vector while holding a reference to an item\n\nCompiling this code will result in this error:\n\n```console\n$ cargo run\n   Compiling collections v0.1.0 (file:///projects/collections)\nerror[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n --> src/main.rs:6:5\n  |\n4 |     let first = &v[0];\n  |                  - immutable borrow occurs here\n5 |\n6 |     v.push(6);\n  |     ^^^^^^^^^ mutable borrow occurs here\n7 |\n8 |     println!(\"The first element is: {first}\");\n  |                                     ------- immutable borrow later used here\n\nFor more information about this error, try `rustc --explain E0502`.\nerror: could not compile `collections` (bin \"collections\") due to 1 previous error\n\n```\n\nThe code in Listing 8-6 might look like it should work: why should a reference to the first element care about changes at the end of the vector? This error is due to the way vectors work: because vectors put the values next to each other in memory, adding a new element onto the end of the vector might require allocating new memory and copying the old elements to the new space, if there isn‚Äôt enough room to put all the elements next to each other where the vector is currently stored. In that case, the reference to the first element would be pointing to deallocated memory. The borrowing rules prevent programs from ending up in that situation.\n\nNote: For more on the implementation details of the `Vec<T>` type, see [‚ÄúThe Rustonomicon‚Äù](../nomicon/vec/vec.html).\n\n### [Iterating Over the Values in a Vector](#iterating-over-the-values-in-a-vector)\n\nTo access each element in a vector in turn, we would iterate through all of the elements rather than use indices to access one at a time. Listing 8-7 shows how to use a `for` loop to get immutable references to each element in a vector of `i32` values and print them.\n\n```rust\nfn main() {\n    let v = vec![100, 32, 57];\n    for i in &v {\n        println!(\"{i}\");\n    }\n}\n```\n\nListing 8-7: Printing each element in a vector by iterating over the elements using a `for` loop\n\nWe can also iterate over mutable references to each element in a mutable vector in order to make changes to all the elements. The `for` loop in Listing 8-8 will add `50` to each element.\n\n```rust\nfn main() {\n    let mut v = vec![100, 32, 57];\n    for i in &mut v {\n        *i += 50;\n    }\n}\n```\n\nListing 8-8: Iterating over mutable references to elements in a vector\n\nTo change the value that the mutable reference refers to, we have to use the `*` dereference operator to get to the value in `i` before we can use the `+=` operator. We‚Äôll talk more about the dereference operator in the [‚ÄúFollowing the Pointer to the Value with the Dereference Operator‚Äù](about:blank/ch15-02-deref.html#following-the-pointer-to-the-value-with-the-dereference-operator) section of Chapter 15.\n\nIterating over a vector, whether immutably or mutably, is safe because of the borrow checker‚Äôs rules. If we attempted to insert or remove items in the `for` loop bodies in Listing 8-7 and Listing 8-8, we would get a compiler error similar to the one we got with the code in Listing 8-6. The reference to the vector that the `for` loop holds prevents simultaneous modification of the whole vector.\n\n### [Using an Enum to Store Multiple Types](#using-an-enum-to-store-multiple-types)\n\nVectors can only store values that are of the same type. This can be inconvenient; there are definitely use cases for needing to store a list of items of different types. Fortunately, the variants of an enum are defined under the same enum type, so when we need one type to represent elements of different types, we can define and use an enum!\n\nFor example, say we want to get values from a row in a spreadsheet in which some of the columns in the row contain integers, some floating-point numbers, and some strings. We can define an enum whose variants will hold the different value types, and all the enum variants will be considered the same type: that of the enum. Then we can create a vector to hold that enum and so, ultimately, hold different types. We‚Äôve demonstrated this in Listing 8-9.\n\n```rust\nfn main() {\n    enum SpreadsheetCell {\n        Int(i32),\n        Float(f64),\n        Text(String),\n    }\n\n    let row = vec![\n        SpreadsheetCell::Int(3),\n        SpreadsheetCell::Text(String::from(\"blue\")),\n        SpreadsheetCell::Float(10.12),\n    ];\n}\n```\n\nListing 8-9: Defining an `enum` to store values of different types in one vector\n\nRust needs to know what types will be in the vector at compile time so it knows exactly how much memory on the heap will be needed to store each element. We must also be explicit about what types are allowed in this vector. If Rust allowed a vector to hold any type, there would be a chance that one or more of the types would cause errors with the operations performed on the elements of the vector. Using an enum plus a `match` expression means that Rust will ensure at compile time that every possible case is handled, as discussed in Chapter 6.\n\nIf you don‚Äôt know the exhaustive set of types a program will get at runtime to store in a vector, the enum technique won‚Äôt work. Instead, you can use a trait object, which we‚Äôll cover in Chapter 17.\n\nNow that we‚Äôve discussed some of the most common ways to use vectors, be sure to review [the API documentation](../std/vec/struct.Vec.html) for all of the many useful methods defined on `Vec<T>` by the standard library. For example, in addition to `push`, a `pop` method removes and returns the last element.\n\n### [Dropping a Vector Drops Its Elements](#dropping-a-vector-drops-its-elements)\n\nLike any other `struct`, a vector is freed when it goes out of scope, as annotated in Listing 8-10.\n\n```rust\nfn main() {\n    {\n        let v = vec![1, 2, 3, 4];\n\n        // do stuff with v\n    } // <- v goes out of scope and is freed here\n}\n```\n\nListing 8-10: Showing where the vector and its elements are dropped\n\nWhen the vector gets dropped, all of its contents are also dropped, meaning the integers it holds will be cleaned up. The borrow checker ensures that any references to contents of a vector are only used while the vector itself is valid.\n\nLet‚Äôs move on to the next collection type: `String`!\n\n## [Storing UTF-8 Encoded Text with Strings](#storing-utf-8-encoded-text-with-strings)\n\nWe talked about strings in Chapter 4, but we‚Äôll look at them in more depth now. New Rustaceans commonly get stuck on strings for a combination of three reasons: Rust‚Äôs propensity for exposing possible errors, strings being a more complicated data structure than many programmers give them credit for, and UTF-8. These factors combine in a way that can seem difficult when you‚Äôre coming from other programming languages.\n\nWe discuss strings in the context of collections because strings are implemented as a collection of bytes, plus some methods to provide useful functionality when those bytes are interpreted as text. In this section, we‚Äôll talk about the operations on `String` that every collection type has, such as creating, updating, and reading. We‚Äôll also discuss the ways in which `String` is different from the other collections, namely how indexing into a `String` is complicated by the differences between how people and computers interpret `String` data.\n\n### [What Is a String?](#what-is-a-string)\n\nWe‚Äôll first define what we mean by the term _string_. Rust has only one string type in the core language, which is the string slice `str` that is usually seen in its borrowed form `&str`. In Chapter 4, we talked about _string slices_, which are references to some UTF-8 encoded string data stored elsewhere. String literals, for example, are stored in the program‚Äôs binary and are therefore string slices.\n\nThe `String` type, which is provided by Rust‚Äôs standard library rather than coded into the core language, is a growable, mutable, owned, UTF-8 encoded string type. When Rustaceans refer to ‚Äústrings‚Äù in Rust, they might be referring to either the `String` or the string slice `&str` types, not just one of those types. Although this section is largely about `String`, both types are used heavily in Rust‚Äôs standard library, and both `String` and string slices are UTF-8 encoded.\n\n### [Creating a New String](#creating-a-new-string)\n\nMany of the same operations available with `Vec<T>` are available with `String` as well because `String` is actually implemented as a wrapper around a vector of bytes with some extra guarantees, restrictions, and capabilities. An example of a function that works the same way with `Vec<T>` and `String` is the `new` function to create an instance, shown in Listing 8-11.\n\n```rust\nfn main() {\n    let mut s = String::new();\n}\n```\n\nListing 8-11: Creating a new, empty `String`\n\nThis line creates a new, empty string called `s`, into which we can then load data. Often, we‚Äôll have some initial data with which we want to start the string. For that, we use the `to_string` method, which is available on any type that implements the `Display` trait, as string literals do. Listing 8-12 shows two examples.\n\n```rust\nfn main() {\n    let data = \"initial contents\";\n\n    let s = data.to_string();\n\n    // the method also works on a literal directly:\n    let s = \"initial contents\".to_string();\n}\n```\n\nListing 8-12: Using the `to_string` method to create a `String` from a string literal\n\nThis code creates a string containing `initial contents`.\n\nWe can also use the function `String::from` to create a `String` from a string literal. The code in Listing 8-13 is equivalent to the code in Listing 8-12 that uses `to_string`.\n\n```rust\nfn main() {\n    let s = String::from(\"initial contents\");\n}\n```\n\nListing 8-13: Using the `String::from` function to create a `String` from a string literal\n\nBecause strings are used for so many things, we can use many different generic APIs for strings, providing us with a lot of options. Some of them can seem redundant, but they all have their place! In this case, `String::from` and `to_string` do the same thing, so which one you choose is a matter of style and readability.\n\nRemember that strings are UTF-8 encoded, so we can include any properly encoded data in them, as shown in Listing 8-14.\n\n```rust\nfn main() {\n    let hello = String::from(\"ÿßŸÑÿ≥ŸÑÿßŸÖ ÿπŸÑŸäŸÉŸÖ\");\n    let hello = String::from(\"Dobr√Ω den\");\n    let hello = String::from(\"Hello\");\n    let hello = String::from(\"◊©◊ú◊ï◊ù\");\n    let hello = String::from(\"‡§®‡§Æ‡§∏‡•ç‡§§‡•á\");\n    let hello = String::from(\"„Åì„Çì„Å´„Å°„ÅØ\");\n    let hello = String::from(\"ÏïàÎÖïÌïòÏÑ∏Ïöî\");\n    let hello = String::from(\"‰Ω†Â•Ω\");\n    let hello = String::from(\"Ol√°\");\n    let hello = String::from(\"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ\");\n    let hello = String::from(\"Hola\");\n}\n```\n\nListing 8-14: Storing greetings in different languages in strings\n\nAll of these are valid `String` values.\n\n### [Updating a String](#updating-a-string)\n\nA `String` can grow in size and its contents can change, just like the contents of a `Vec<T>`, if you push more data into it. In addition, you can conveniently use the `+` operator or the `format!` macro to concatenate `String` values.\n\n#### [Appending to a String with `push_str` and `push`](#appending-to-a-string-with-push_str-and-push)\n\nWe can grow a `String` by using the `push_str` method to append a string slice, as shown in Listing 8-15.\n\n```rust\nfn main() {\n    let mut s = String::from(\"foo\");\n    s.push_str(\"bar\");\n}\n```\n\nListing 8-15: Appending a string slice to a `String` using the `push_str` method\n\nAfter these two lines, `s` will contain `foobar`. The `push_str` method takes a string slice because we don‚Äôt necessarily want to take ownership of the parameter. For example, in the code in Listing 8-16, we want to be able to use `s2` after appending its contents to `s1`.\n\n```rust\nfn main() {\n    let mut s1 = String::from(\"foo\");\n    let s2 = \"bar\";\n    s1.push_str(s2);\n    println!(\"s2 is {s2}\");\n}\n```\n\nListing 8-16: Using a string slice after appending its contents to a `String`\n\nIf the `push_str` method took ownership of `s2`, we wouldn‚Äôt be able to print its value on the last line. However, this code works as we‚Äôd expect!\n\nThe `push` method takes a single character as a parameter and adds it to the `String`. Listing 8-17 adds the letter _l_ to a `String` using the `push` method.\n\n```rust\nfn main() {\n    let mut s = String::from(\"lo\");\n    s.push('l');\n}\n```\n\nListing 8-17: Adding one character to a `String` value using `push`\n\nAs a result, `s` will contain `lol`.\n\n#### [Concatenation with the `+` Operator or the `format!` Macro](#concatenation-with-the--operator-or-the-format-macro)\n\nOften, you‚Äôll want to combine two existing strings. One way to do so is to use the `+` operator, as shown in Listing 8-18.\n\n```rust\nfn main() {\n    let s1 = String::from(\"Hello, \");\n    let s2 = String::from(\"world!\");\n    let s3 = s1 + &s2; // note s1 has been moved here and can no longer be used\n}\n```\n\nListing 8-18: Using the `+` operator to combine two `String` values into a new `String` value\n\nThe string `s3` will contain `Hello, world!`. The reason `s1` is no longer valid after the addition, and the reason we used a reference to `s2`, has to do with the signature of the method that‚Äôs called when we use the `+` operator. The `+` operator uses the `add` method, whose signature looks something like this:\n\n```rust\nfn add(self, s: &str) -> String {\n```\n\nIn the standard library, you‚Äôll see `add` defined using generics and associated types. Here, we‚Äôve substituted in concrete types, which is what happens when we call this method with `String` values. We‚Äôll discuss generics in Chapter 10. This signature gives us the clues we need in order to understand the tricky bits of the `+` operator.\n\nFirst, `s2` has an `&`, meaning that we‚Äôre adding a _reference_ of the second string to the first string. This is because of the `s` parameter in the `add` function: we can only add a `&str` to a `String`; we can‚Äôt add two `String` values together. But wait‚Äîthe type of `&s2` is `&String`, not `&str`, as specified in the second parameter to `add`. So why does Listing 8-18 compile?\n\nThe reason we‚Äôre able to use `&s2` in the call to `add` is that the compiler can _coerce_ the `&String` argument into a `&str`. When we call the `add` method, Rust uses a _deref coercion_, which here turns `&s2` into `&s2[..]`. We‚Äôll discuss deref coercion in more depth in Chapter 15. Because `add` does not take ownership of the `s` parameter, `s2` will still be a valid `String` after this operation.\n\nSecond, we can see in the signature that `add` takes ownership of `self` because `self` does _not_ have an `&`. This means `s1` in Listing 8-18 will be moved into the `add` call and will no longer be valid after that. So, although `let s3 = s1 + &s2;` looks like it will copy both strings and create a new one, this statement actually takes ownership of `s1`, appends a copy of the contents of `s2`, and then returns ownership of the result. In other words, it looks like it‚Äôs making a lot of copies, but it isn‚Äôt; the implementation is more efficient than copying.\n\nIf we need to concatenate multiple strings, the behavior of the `+` operator gets unwieldy:\n\n```rust\nfn main() {\n    let s1 = String::from(\"tic\");\n    let s2 = String::from(\"tac\");\n    let s3 = String::from(\"toe\");\n\n    let s = s1 + \"-\" + &s2 + \"-\" + &s3;\n}\n```\n\nAt this point, `s` will be `tic-tac-toe`. With all of the `+` and `\"` characters, it‚Äôs difficult to see what‚Äôs going on. For combining strings in more complicated ways, we can instead use the `format!` macro:\n\n```rust\nfn main() {\n    let s1 = String::from(\"tic\");\n    let s2 = String::from(\"tac\");\n    let s3 = String::from(\"toe\");\n\n    let s = format!(\"{s1}-{s2}-{s3}\");\n}\n```\n\nThis code also sets `s` to `tic-tac-toe`. The `format!` macro works like `println!`, but instead of printing the output to the screen, it returns a `String` with the contents. The version of the code using `format!` is much easier to read, and the code generated by the `format!` macro uses references so that this call doesn‚Äôt take ownership of any of its parameters.\n\n### [Indexing into Strings](#indexing-into-strings)\n\nIn many other programming languages, accessing individual characters in a string by referencing them by index is a valid and common operation. However, if you try to access parts of a `String` using indexing syntax in Rust, you‚Äôll get an error. Consider the invalid code in Listing 8-19.\n\n```rust\nfn main() {\n    let s1 = String::from(\"hello\");\n    let h = s1[0];\n}\n```\n\nListing 8-19: Attempting to use indexing syntax with a String\n\nThis code will result in the following error:\n\n```console\n$ cargo run\n   Compiling collections v0.1.0 (file:///projects/collections)\nerror[E0277]: the type `str` cannot be indexed by `{integer}`\n --> src/main.rs:3:16\n  |\n3 |     let h = s1[0];\n  |                ^ string indices are ranges of `usize`\n  |\n  = help: the trait `SliceIndex<str>` is not implemented for `{integer}`, which is required by `String: Index<_>`\n  = note: you can use `.chars().nth()` or `.bytes().nth()`\n          for more information, see chapter 8 in The Book: <https://doc.rust-lang.org/book/ch08-02-strings.html#indexing-into-strings>\n  = help: the trait `SliceIndex<[_]>` is implemented for `usize`\n  = help: for that trait implementation, expected `[_]`, found `str`\n  = note: required for `String` to implement `Index<{integer}>`\n\nFor more information about this error, try `rustc --explain E0277`.\nerror: could not compile `collections` (bin \"collections\") due to 1 previous error\n\n```\n\nThe error and the note tell the story: Rust strings don‚Äôt support indexing. But why not? To answer that question, we need to discuss how Rust stores strings in memory.\n\n#### [Internal Representation](#internal-representation)\n\nA `String` is a wrapper over a `Vec<u8>`. Let‚Äôs look at some of our properly encoded UTF-8 example strings from Listing 8-14. First, this one:\n\n```rust\nfn main() {\n    let hello = String::from(\"ÿßŸÑÿ≥ŸÑÿßŸÖ ÿπŸÑŸäŸÉŸÖ\");\n    let hello = String::from(\"Dobr√Ω den\");\n    let hello = String::from(\"Hello\");\n    let hello = String::from(\"◊©◊ú◊ï◊ù\");\n    let hello = String::from(\"‡§®‡§Æ‡§∏‡•ç‡§§‡•á\");\n    let hello = String::from(\"„Åì„Çì„Å´„Å°„ÅØ\");\n    let hello = String::from(\"ÏïàÎÖïÌïòÏÑ∏Ïöî\");\n    let hello = String::from(\"‰Ω†Â•Ω\");\n    let hello = String::from(\"Ol√°\");\n    let hello = String::from(\"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ\");\n    let hello = String::from(\"Hola\");\n}\n```\n\nIn this case, `len` will be `4`, which means the vector storing the string `\"Hola\"` is 4 bytes long. Each of these letters takes one byte when encoded in UTF-8. The following line, however, may surprise you (note that this string begins with the capital Cyrillic letter _Ze_, not the number 3):\n\n```rust\nfn main() {\n    let hello = String::from(\"ÿßŸÑÿ≥ŸÑÿßŸÖ ÿπŸÑŸäŸÉŸÖ\");\n    let hello = String::from(\"Dobr√Ω den\");\n    let hello = String::from(\"Hello\");\n    let hello = String::from(\"◊©◊ú◊ï◊ù\");\n    let hello = String::from(\"‡§®‡§Æ‡§∏‡•ç‡§§‡•á\");\n    let hello = String::from(\"„Åì„Çì„Å´„Å°„ÅØ\");\n    let hello = String::from(\"ÏïàÎÖïÌïòÏÑ∏Ïöî\");\n    let hello = String::from(\"‰Ω†Â•Ω\");\n    let hello = String::from(\"Ol√°\");\n    let hello = String::from(\"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ\");\n    let hello = String::from(\"Hola\");\n}\n```\n\nIf you were asked how long the string is, you might say 12. In fact, Rust‚Äôs answer is 24: that‚Äôs the number of bytes it takes to encode ‚Äú–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ‚Äù in UTF-8, because each Unicode scalar value in that string takes 2 bytes of storage. Therefore, an index into the string‚Äôs bytes will not always correlate to a valid Unicode scalar value. To demonstrate, consider this invalid Rust code:\n\n```rust\nlet hello = \"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ\";\nlet answer = &hello[0];\n```\n\nYou already know that `answer` will not be `–ó`, the first letter. When encoded in UTF-8, the first byte of `–ó` is `208` and the second is `151`, so it would seem that `answer` should in fact be `208`, but `208` is not a valid character on its own. Returning `208` is likely not what a user would want if they asked for the first letter of this string; however, that‚Äôs the only data that Rust has at byte index 0. Users generally don‚Äôt want the byte value returned, even if the string contains only Latin letters: if `&\"hello\"[0]` were valid code that returned the byte value, it would return `104`, not `h`.\n\nThe answer, then, is that to avoid returning an unexpected value and causing bugs that might not be discovered immediately, Rust doesn‚Äôt compile this code at all and prevents misunderstandings early in the development process.\n\n#### [Bytes and Scalar Values and Grapheme Clusters! Oh My!](#bytes-and-scalar-values-and-grapheme-clusters-oh-my)\n\nAnother point about UTF-8 is that there are actually three relevant ways to look at strings from Rust‚Äôs perspective: as bytes, scalar values, and grapheme clusters (the closest thing to what we would call _letters_).\n\nIf we look at the Hindi word ‚Äú‡§®‡§Æ‡§∏‡•ç‡§§‡•á‚Äù written in the Devanagari script, it is stored as a vector of `u8` values that looks like this:\n\n```text\n[224, 164, 168, 224, 164, 174, 224, 164, 184, 224, 165, 141, 224, 164, 164,\n224, 165, 135]\n\n```\n\nThat‚Äôs 18 bytes and is how computers ultimately store this data. If we look at them as Unicode scalar values, which are what Rust‚Äôs `char` type is, those bytes look like this:\n\n```text\n['‡§®', '‡§Æ', '‡§∏', '‡•ç', '‡§§', '‡•á']\n\n```\n\nThere are six `char` values here, but the fourth and sixth are not letters: they‚Äôre diacritics that don‚Äôt make sense on their own. Finally, if we look at them as grapheme clusters, we‚Äôd get what a person would call the four letters that make up the Hindi word:\n\n```text\n[\"‡§®\", \"‡§Æ\", \"‡§∏‡•ç\", \"‡§§‡•á\"]\n\n```\n\nRust provides different ways of interpreting the raw string data that computers store so that each program can choose the interpretation it needs, no matter what human language the data is in.\n\nA final reason Rust doesn‚Äôt allow us to index into a `String` to get a character is that indexing operations are expected to always take constant time (O(1)). But it isn‚Äôt possible to guarantee that performance with a `String`, because Rust would have to walk through the contents from the beginning to the index to determine how many valid characters there were.\n\n### [Slicing Strings](#slicing-strings)\n\nIndexing into a string is often a bad idea because it‚Äôs not clear what the return type of the string-indexing operation should be: a byte value, a character, a grapheme cluster, or a string slice. If you really need to use indices to create string slices, therefore, Rust asks you to be more specific.\n\nRather than indexing using `[]` with a single number, you can use `[]` with a range to create a string slice containing particular bytes:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet hello = \"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ\";\n\nlet s = &hello[0..4];\n}\n```\n\nHere, `s` will be a `&str` that contains the first four bytes of the string. Earlier, we mentioned that each of these characters was two bytes, which means `s` will be `–ó–¥`.\n\nIf we were to try to slice only part of a character‚Äôs bytes with something like `&hello[0..1]`, Rust would panic at runtime in the same way as if an invalid index were accessed in a vector:\n\n```console\n$ cargo run\n   Compiling collections v0.1.0 (file:///projects/collections)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.43s\n     Running `target/debug/collections`\nthread 'main' panicked at src/main.rs:4:19:\nbyte index 1 is not a char boundary; it is inside '–ó' (bytes 0..2) of `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ`\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\n```\n\nYou should use caution when creating string slices with ranges, because doing so can crash your program.\n\n### [Methods for Iterating Over Strings](#methods-for-iterating-over-strings)\n\nThe best way to operate on pieces of strings is to be explicit about whether you want characters or bytes. For individual Unicode scalar values, use the `chars` method. Calling `chars` on ‚Äú–ó–¥‚Äù separates out and returns two values of type `char`, and you can iterate over the result to access each element:\n\n```rust\n#![allow(unused)]\nfn main() {\nfor c in \"–ó–¥\".chars() {\n    println!(\"{c}\");\n}\n}\n```\n\nThis code will print the following:\n\n```text\n–ó\n–¥\n\n```\n\nAlternatively, the `bytes` method returns each raw byte, which might be appropriate for your domain:\n\n```rust\n#![allow(unused)]\nfn main() {\nfor b in \"–ó–¥\".bytes() {\n    println!(\"{b}\");\n}\n}\n```\n\nThis code will print the four bytes that make up this string:\n\n```text\n208\n151\n208\n180\n\n```\n\nBut be sure to remember that valid Unicode scalar values may be made up of more than one byte.\n\nGetting grapheme clusters from strings, as with the Devanagari script, is complex, so this functionality is not provided by the standard library. Crates are available on [crates.io](https://crates.io/) if this is the functionality you need.\n\n### [Strings Are Not So Simple](#strings-are-not-so-simple)\n\nTo summarize, strings are complicated. Different programming languages make different choices about how to present this complexity to the programmer. Rust has chosen to make the correct handling of `String` data the default behavior for all Rust programs, which means programmers have to put more thought into handling UTF-8 data up front. This trade-off exposes more of the complexity of strings than is apparent in other programming languages, but it prevents you from having to handle errors involving non-ASCII characters later in your development life cycle.\n\nThe good news is that the standard library offers a lot of functionality built off the `String` and `&str` types to help handle these complex situations correctly. Be sure to check out the documentation for useful methods like `contains` for searching in a string and `replace` for substituting parts of a string with another string.\n\nLet‚Äôs switch to something a bit less complex: hash maps!\n\n## [Storing Keys with Associated Values in Hash Maps](#storing-keys-with-associated-values-in-hash-maps)\n\nThe last of our common collections is the _hash map_. The type `HashMap<K, V>` stores a mapping of keys of type `K` to values of type `V` using a _hashing function_, which determines how it places these keys and values into memory. Many programming languages support this kind of data structure, but they often use a different name, such as _hash_, _map_, _object_, _hash table_, _dictionary_, or _associative array_, just to name a few.\n\nHash maps are useful when you want to look up data not by using an index, as you can with vectors, but by using a key that can be of any type. For example, in a game, you could keep track of each team‚Äôs score in a hash map in which each key is a team‚Äôs name and the values are each team‚Äôs score. Given a team name, you can retrieve its score.\n\nWe‚Äôll go over the basic API of hash maps in this section, but many more goodies are hiding in the functions defined on `HashMap<K, V>` by the standard library. As always, check the standard library documentation for more information.\n\n### [Creating a New Hash Map](#creating-a-new-hash-map)\n\nOne way to create an empty hash map is to use `new` and to add elements with `insert`. In Listing 8-20, we‚Äôre keeping track of the scores of two teams whose names are _Blue_ and _Yellow_. The Blue team starts with 10 points, and the Yellow team starts with 50.\n\n```rust\nfn main() {\n    use std::collections::HashMap;\n\n    let mut scores = HashMap::new();\n\n    scores.insert(String::from(\"Blue\"), 10);\n    scores.insert(String::from(\"Yellow\"), 50);\n}\n```\n\nListing 8-20: Creating a new hash map and inserting some keys and values\n\nNote that we need to first `use` the `HashMap` from the collections portion of the standard library. Of our three common collections, this one is the least often used, so it‚Äôs not included in the features brought into scope automatically in the prelude. Hash maps also have less support from the standard library; there‚Äôs no built-in macro to construct them, for example.\n\nJust like vectors, hash maps store their data on the heap. This `HashMap` has keys of type `String` and values of type `i32`. Like vectors, hash maps are homogeneous: all of the keys must have the same type, and all of the values must have the same type.\n\n### [Accessing Values in a Hash Map](#accessing-values-in-a-hash-map)\n\nWe can get a value out of the hash map by providing its key to the `get` method, as shown in Listing 8-21.\n\n```rust\nfn main() {\n    use std::collections::HashMap;\n\n    let mut scores = HashMap::new();\n\n    scores.insert(String::from(\"Blue\"), 10);\n    scores.insert(String::from(\"Yellow\"), 50);\n\n    let team_name = String::from(\"Blue\");\n    let score = scores.get(&team_name).copied().unwrap_or(0);\n}\n```\n\nListing 8-21: Accessing the score for the Blue team stored in the hash map\n\nHere, `score` will have the value that‚Äôs associated with the Blue team, and the result will be `10`. The `get` method returns an `Option<&V>`; if there‚Äôs no value for that key in the hash map, `get` will return `None`. This program handles the `Option` by calling `copied` to get an `Option<i32>` rather than an `Option<&i32>`, then `unwrap_or` to set `score` to zero if `scores` doesn‚Äôt have an entry for the key.\n\nWe can iterate over each key‚Äìvalue pair in a hash map in a similar manner as we do with vectors, using a `for` loop:\n\n```rust\nfn main() {\n    use std::collections::HashMap;\n\n    let mut scores = HashMap::new();\n\n    scores.insert(String::from(\"Blue\"), 10);\n    scores.insert(String::from(\"Yellow\"), 50);\n\n    for (key, value) in &scores {\n        println!(\"{key}: {value}\");\n    }\n}\n```\n\nThis code will print each pair in an arbitrary order:\n\n```text\nYellow: 50\nBlue: 10\n\n```\n\n### [Hash Maps and Ownership](#hash-maps-and-ownership)\n\nFor types that implement the `Copy` trait, like `i32`, the values are copied into the hash map. For owned values like `String`, the values will be moved and the hash map will be the owner of those values, as demonstrated in Listing 8-22.\n\n```rust\nfn main() {\n    use std::collections::HashMap;\n\n    let field_name = String::from(\"Favorite color\");\n    let field_value = String::from(\"Blue\");\n\n    let mut map = HashMap::new();\n    map.insert(field_name, field_value);\n    // field_name and field_value are invalid at this point, try using them and\n    // see what compiler error you get!\n}\n```\n\nListing 8-22: Showing that keys and values are owned by the hash map once they‚Äôre inserted\n\nWe aren‚Äôt able to use the variables `field_name` and `field_value` after they‚Äôve been moved into the hash map with the call to `insert`.\n\nIf we insert references to values into the hash map, the values won‚Äôt be moved into the hash map. The values that the references point to must be valid for at least as long as the hash map is valid. We‚Äôll talk more about these issues in the [‚ÄúValidating References with Lifetimes‚Äù](about:blank/ch10-03-lifetime-syntax.html#validating-references-with-lifetimes) section in Chapter 10.\n\n### [Updating a Hash Map](#updating-a-hash-map)\n\nAlthough the number of key and value pairs is growable, each unique key can only have one value associated with it at a time (but not vice versa: for example, both the Blue team and the Yellow team could have the value `10` stored in the `scores` hash map).\n\nWhen you want to change the data in a hash map, you have to decide how to handle the case when a key already has a value assigned. You could replace the old value with the new value, completely disregarding the old value. You could keep the old value and ignore the new value, only adding the new value if the key _doesn‚Äôt_ already have a value. Or you could combine the old value and the new value. Let‚Äôs look at how to do each of these!\n\n#### [Overwriting a Value](#overwriting-a-value)\n\nIf we insert a key and a value into a hash map and then insert that same key with a different value, the value associated with that key will be replaced. Even though the code in Listing 8-23 calls `insert` twice, the hash map will only contain one key‚Äìvalue pair because we‚Äôre inserting the value for the Blue team‚Äôs key both times.\n\n```rust\nfn main() {\n    use std::collections::HashMap;\n\n    let mut scores = HashMap::new();\n\n    scores.insert(String::from(\"Blue\"), 10);\n    scores.insert(String::from(\"Blue\"), 25);\n\n    println!(\"{scores:?}\");\n}\n```\n\nListing 8-23: Replacing a value stored with a particular key\n\nThis code will print `{\"Blue\": 25}`. The original value of `10` has been overwritten.\n\n#### [Adding a Key and Value Only If a Key Isn‚Äôt Present](#adding-a-key-and-value-only-if-a-key-isnt-present)\n\nIt‚Äôs common to check whether a particular key already exists in the hash map with a value and then to take the following actions: if the key does exist in the hash map, the existing value should remain the way it is; if the key doesn‚Äôt exist, insert it and a value for it.\n\nHash maps have a special API for this called `entry` that takes the key you want to check as a parameter. The return value of the `entry` method is an enum called `Entry` that represents a value that might or might not exist. Let‚Äôs say we want to check whether the key for the Yellow team has a value associated with it. If it doesn‚Äôt, we want to insert the value `50`, and the same for the Blue team. Using the `entry` API, the code looks like Listing 8-24.\n\n```rust\nfn main() {\n    use std::collections::HashMap;\n\n    let mut scores = HashMap::new();\n    scores.insert(String::from(\"Blue\"), 10);\n\n    scores.entry(String::from(\"Yellow\")).or_insert(50);\n    scores.entry(String::from(\"Blue\")).or_insert(50);\n\n    println!(\"{scores:?}\");\n}\n```\n\nListing 8-24: Using the `entry` method to only insert if the key does not already have a value\n\nThe `or_insert` method on `Entry` is defined to return a mutable reference to the value for the corresponding `Entry` key if that key exists, and if not, it inserts the parameter as the new value for this key and returns a mutable reference to the new value. This technique is much cleaner than writing the logic ourselves and, in addition, plays more nicely with the borrow checker.\n\nRunning the code in Listing 8-24 will print `{\"Yellow\": 50, \"Blue\": 10}`. The first call to `entry` will insert the key for the Yellow team with the value `50` because the Yellow team doesn‚Äôt have a value already. The second call to `entry` will not change the hash map because the Blue team already has the value `10`.\n\n#### [Updating a Value Based on the Old Value](#updating-a-value-based-on-the-old-value)\n\nAnother common use case for hash maps is to look up a key‚Äôs value and then update it based on the old value. For instance, Listing 8-25 shows code that counts how many times each word appears in some text. We use a hash map with the words as keys and increment the value to keep track of how many times we‚Äôve seen that word. If it‚Äôs the first time we‚Äôve seen a word, we‚Äôll first insert the value `0`.\n\n```rust\nfn main() {\n    use std::collections::HashMap;\n\n    let text = \"hello world wonderful world\";\n\n    let mut map = HashMap::new();\n\n    for word in text.split_whitespace() {\n        let count = map.entry(word).or_insert(0);\n        *count += 1;\n    }\n\n    println!(\"{map:?}\");\n}\n```\n\nListing 8-25: Counting occurrences of words using a hash map that stores words and counts\n\nThis code will print `{\"world\": 2, \"hello\": 1, \"wonderful\": 1}`. You might see the same key‚Äìvalue pairs printed in a different order: recall from the [‚ÄúAccessing Values in a Hash Map‚Äù](about:blank/ch08-03-hash-maps.html#accessing-values-in-a-hash-map) section that iterating over a hash map happens in an arbitrary order.\n\nThe `split_whitespace` method returns an iterator over subslices, separated by whitespace, of the value in `text`. The `or_insert` method returns a mutable reference (`&mut V`) to the value for the specified key. Here, we store that mutable reference in the `count` variable, so in order to assign to that value, we must first dereference `count` using the asterisk (`*`). The mutable reference goes out of scope at the end of the `for` loop, so all of these changes are safe and allowed by the borrowing rules.\n\n### [Hashing Functions](#hashing-functions)\n\nBy default, `HashMap` uses a hashing function called _SipHash_ that can provide resistance to denial-of-service (DoS) attacks involving hash tables[1](#siphash). This is not the fastest hashing algorithm available, but the trade-off for better security that comes with the drop in performance is worth it. If you profile your code and find that the default hash function is too slow for your purposes, you can switch to another function by specifying a different hasher. A _hasher_ is a type that implements the `BuildHasher` trait. We‚Äôll talk about traits and how to implement them in [Chapter 10](ch10-02-traits.html). You don‚Äôt necessarily have to implement your own hasher from scratch; [crates.io](https://crates.io/) has libraries shared by other Rust users that provide hashers implementing many common hashing algorithms.\n\n## [Summary](#summary-7)\n\nVectors, strings, and hash maps will provide a large amount of functionality necessary in programs when you need to store, access, and modify data. Here are some exercises you should now be equipped to solve:\n\n1.  Given a list of integers, use a vector and return the median (when sorted, the value in the middle position) and mode (the value that occurs most often; a hash map will be helpful here) of the list.\n2.  Convert strings to pig latin. The first consonant of each word is moved to the end of the word and _ay_ is added, so _first_ becomes _irst-fay_. Words that start with a vowel have _hay_ added to the end instead (_apple_ becomes _apple-hay_). Keep in mind the details about UTF-8 encoding!\n3.  Using a hash map and vectors, create a text interface to allow a user to add employee names to a department in a company; for example, ‚ÄúAdd Sally to Engineering‚Äù or ‚ÄúAdd Amir to Sales.‚Äù Then let the user retrieve a list of all people in a department or all people in the company by department, sorted alphabetically.\n\nThe standard library API documentation describes methods that vectors, strings, and hash maps have that will be helpful for these exercises!\n\nWe‚Äôre getting into more complex programs in which operations can fail, so it‚Äôs a perfect time to discuss error handling. We‚Äôll do that next!\n\n## [Error Handling](#error-handling)\n\nErrors are a fact of life in software, so Rust has a number of features for handling situations in which something goes wrong. In many cases, Rust requires you to acknowledge the possibility of an error and take some action before your code will compile. This requirement makes your program more robust by ensuring that you‚Äôll discover errors and handle them appropriately before you‚Äôve deployed your code to production!\n\nRust groups errors into two major categories: _recoverable_ and _unrecoverable_ errors. For a recoverable error, such as a _file not found_ error, we most likely just want to report the problem to the user and retry the operation. Unrecoverable errors are always symptoms of bugs, such as trying to access a location beyond the end of an array, and so we want to immediately stop the program.\n\nMost languages don‚Äôt distinguish between these two kinds of errors and handle both in the same way, using mechanisms such as exceptions. Rust doesn‚Äôt have exceptions. Instead, it has the type `Result<T, E>` for recoverable errors and the `panic!` macro that stops execution when the program encounters an unrecoverable error. This chapter covers calling `panic!` first and then talks about returning `Result<T, E>` values. Additionally, we‚Äôll explore considerations when deciding whether to try to recover from an error or to stop execution.\n\n## [Unrecoverable Errors with `panic!`](#unrecoverable-errors-with-panic)\n\nSometimes bad things happen in your code, and there‚Äôs nothing you can do about it. In these cases, Rust has the `panic!` macro. There are two ways to cause a panic in practice: by taking an action that causes our code to panic (such as accessing an array past the end) or by explicitly calling the `panic!` macro. In both cases, we cause a panic in our program. By default, these panics will print a failure message, unwind, clean up the stack, and quit. Via an environment variable, you can also have Rust display the call stack when a panic occurs to make it easier to track down the source of the panic.\n\n### [Unwinding the Stack or Aborting in Response to a Panic](#unwinding-the-stack-or-aborting-in-response-to-a-panic)\n\nBy default, when a panic occurs the program starts _unwinding_, which means Rust walks back up the stack and cleans up the data from each function it encounters. However, walking back and cleaning up is a lot of work. Rust, therefore, allows you to choose the alternative of immediately _aborting_, which ends the program without cleaning up.\n\nMemory that the program was using will then need to be cleaned up by the operating system. If in your project you need to make the resultant binary as small as possible, you can switch from unwinding to aborting upon a panic by adding `panic = 'abort'` to the appropriate `[profile]` sections in your _Cargo.toml_ file. For example, if you want to abort on panic in release mode, add this:\n\n```toml\n[profile.release]\npanic = 'abort'\n\n```\n\nLet‚Äôs try calling `panic!` in a simple program:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    panic!(\"crash and burn\");\n}\n```\n\nWhen you run the program, you‚Äôll see something like this:\n\n```console\n$ cargo run\n   Compiling panic v0.1.0 (file:///projects/panic)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.25s\n     Running `target/debug/panic`\nthread 'main' panicked at src/main.rs:2:5:\ncrash and burn\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\n```\n\nThe call to `panic!` causes the error message contained in the last two lines. The first line shows our panic message and the place in our source code where the panic occurred: _src/main.rs:2:5_ indicates that it‚Äôs the second line, fifth character of our _src/main.rs_ file.\n\nIn this case, the line indicated is part of our code, and if we go to that line, we see the `panic!` macro call. In other cases, the `panic!` call might be in code that our code calls, and the filename and line number reported by the error message will be someone else‚Äôs code where the `panic!` macro is called, not the line of our code that eventually led to the `panic!` call.\n\nWe can use the backtrace of the functions the `panic!` call came from to figure out the part of our code that is causing the problem. To understand how to use a `panic!` backtrace, let‚Äôs look at another example and see what it‚Äôs like when a `panic!` call comes from a library because of a bug in our code instead of from our code calling the macro directly. Listing 9-1 has some code that attempts to access an index in a vector beyond the range of valid indexes.\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let v = vec![1, 2, 3];\n\n    v[99];\n}\n```\n\nListing 9-1: Attempting to access an element beyond the end of a vector, which will cause a call to `panic!`\n\nHere, we‚Äôre attempting to access the 100th element of our vector (which is at index 99 because indexing starts at zero), but the vector has only three elements. In this situation, Rust will panic. Using `[]` is supposed to return an element, but if you pass an invalid index, there‚Äôs no element that Rust could return here that would be correct.\n\nIn C, attempting to read beyond the end of a data structure is undefined behavior. You might get whatever is at the location in memory that would correspond to that element in the data structure, even though the memory doesn‚Äôt belong to that structure. This is called a _buffer overread_ and can lead to security vulnerabilities if an attacker is able to manipulate the index in such a way as to read data they shouldn‚Äôt be allowed to that is stored after the data structure.\n\nTo protect your program from this sort of vulnerability, if you try to read an element at an index that doesn‚Äôt exist, Rust will stop execution and refuse to continue. Let‚Äôs try it and see:\n\n```console\n$ cargo run\n   Compiling panic v0.1.0 (file:///projects/panic)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.27s\n     Running `target/debug/panic`\nthread 'main' panicked at src/main.rs:4:6:\nindex out of bounds: the len is 3 but the index is 99\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\n```\n\nThis error points at line 4 of our _main.rs_ where we attempt to access index `99` of the vector in `v`.\n\nThe `note:` line tells us that we can set the `RUST_BACKTRACE` environment variable to get a backtrace of exactly what happened to cause the error. A _backtrace_ is a list of all the functions that have been called to get to this point. Backtraces in Rust work as they do in other languages: the key to reading the backtrace is to start from the top and read until you see files you wrote. That‚Äôs the spot where the problem originated. The lines above that spot are code that your code has called; the lines below are code that called your code. These before-and-after lines might include core Rust code, standard library code, or crates that you‚Äôre using. Let‚Äôs try getting a backtrace by setting the `RUST_BACKTRACE` environment variable to any value except `0`. Listing 9-2 shows output similar to what you‚Äôll see.\n\n```console\n$ RUST_BACKTRACE=1 cargo run\nthread 'main' panicked at src/main.rs:4:6:\nindex out of bounds: the len is 3 but the index is 99\nstack backtrace:\n   0: rust_begin_unwind\n             at /rustc/07dca489ac2d933c78d3c5158e3f43beefeb02ce/library/std/src/panicking.rs:645:5\n   1: core::panicking::panic_fmt\n             at /rustc/07dca489ac2d933c78d3c5158e3f43beefeb02ce/library/core/src/panicking.rs:72:14\n   2: core::panicking::panic_bounds_check\n             at /rustc/07dca489ac2d933c78d3c5158e3f43beefeb02ce/library/core/src/panicking.rs:208:5\n   3: <usize as core::slice::index::SliceIndex<[T]>>::index\n             at /rustc/07dca489ac2d933c78d3c5158e3f43beefeb02ce/library/core/src/slice/index.rs:255:10\n   4: core::slice::index::<impl core::ops::index::Index<I> for [T]>::index\n             at /rustc/07dca489ac2d933c78d3c5158e3f43beefeb02ce/library/core/src/slice/index.rs:18:9\n   5: <alloc::vec::Vec<T,A> as core::ops::index::Index<I>>::index\n             at /rustc/07dca489ac2d933c78d3c5158e3f43beefeb02ce/library/alloc/src/vec/mod.rs:2770:9\n   6: panic::main\n             at ./src/main.rs:4:6\n   7: core::ops::function::FnOnce::call_once\n             at /rustc/07dca489ac2d933c78d3c5158e3f43beefeb02ce/library/core/src/ops/function.rs:250:5\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\n\n```\n\nListing 9-2: The backtrace generated by a call to `panic!` displayed when the environment variable `RUST_BACKTRACE` is set\n\nThat‚Äôs a lot of output! The exact output you see might be different depending on your operating system and Rust version. In order to get backtraces with this information, debug symbols must be enabled. Debug symbols are enabled by default when using `cargo build` or `cargo run` without the `--release` flag, as we have here.\n\nIn the output in Listing 9-2, line 6 of the backtrace points to the line in our project that‚Äôs causing the problem: line 4 of _src/main.rs_. If we don‚Äôt want our program to panic, we should start our investigation at the location pointed to by the first line mentioning a file we wrote. In Listing 9-1, where we deliberately wrote code that would panic, the way to fix the panic is to not request an element beyond the range of the vector indexes. When your code panics in the future, you‚Äôll need to figure out what action the code is taking with what values to cause the panic and what the code should do instead.\n\nWe‚Äôll come back to `panic!` and when we should and should not use `panic!` to handle error conditions in the [‚ÄúTo `panic!` or Not to `panic!`‚Äù](about:blank/ch09-03-to-panic-or-not-to-panic.html#to-panic-or-not-to-panic) section later in this chapter. Next, we‚Äôll look at how to recover from an error using `Result`.\n\n## [Recoverable Errors with `Result`](#recoverable-errors-with-result)\n\nMost errors aren‚Äôt serious enough to require the program to stop entirely. Sometimes when a function fails it‚Äôs for a reason that you can easily interpret and respond to. For example, if you try to open a file and that operation fails because the file doesn‚Äôt exist, you might want to create the file instead of terminating the process.\n\nRecall from [‚ÄúHandling Potential Failure with `Result`‚Äù](about:blank/ch02-00-guessing-game-tutorial.html#handling-potential-failure-with-result) in Chapter 2 that the `Result` enum is defined as having two variants, `Ok` and `Err`, as follows:\n\n```rust\n#![allow(unused)]\nfn main() {\nenum Result<T, E> {\n    Ok(T),\n    Err(E),\n}\n}\n```\n\nThe `T` and `E` are generic type parameters: we‚Äôll discuss generics in more detail in Chapter 10. What you need to know right now is that `T` represents the type of the value that will be returned in a success case within the `Ok` variant, and `E` represents the type of the error that will be returned in a failure case within the `Err` variant. Because `Result` has these generic type parameters, we can use the `Result` type and the functions defined on it in many different situations where the success value and error value we want to return may differ.\n\nLet‚Äôs call a function that returns a `Result` value because the function could fail. In Listing 9-3 we try to open a file.\n\nFilename: src/main.rs\n\n```rust\nuse std::fs::File;\n\nfn main() {\n    let greeting_file_result = File::open(\"hello.txt\");\n}\n```\n\nListing 9-3: Opening a file\n\nThe return type of `File::open` is a `Result<T, E>`. The generic parameter `T` has been filled in by the implementation of `File::open` with the type of the success value, `std::fs::File`, which is a file handle. The type of `E` used in the error value is `std::io::Error`. This return type means the call to `File::open` might succeed and return a file handle that we can read from or write to. The function call also might fail: for example, the file might not exist, or we might not have permission to access the file. The `File::open` function needs to have a way to tell us whether it succeeded or failed and at the same time give us either the file handle or error information. This information is exactly what the `Result` enum conveys.\n\nIn the case where `File::open` succeeds, the value in the variable `greeting_file_result` will be an instance of `Ok` that contains a file handle. In the case where it fails, the value in `greeting_file_result` will be an instance of `Err` that contains more information about the kind of error that occurred.\n\nWe need to add to the code in Listing 9-3 to take different actions depending on the value `File::open` returns. Listing 9-4 shows one way to handle the `Result` using a basic tool, the `match` expression that we discussed in Chapter 6.\n\nFilename: src/main.rs\n\n```rust\nuse std::fs::File;\n\nfn main() {\n    let greeting_file_result = File::open(\"hello.txt\");\n\n    let greeting_file = match greeting_file_result {\n        Ok(file) => file,\n        Err(error) => panic!(\"Problem opening the file: {error:?}\"),\n    };\n}\n```\n\nListing 9-4: Using a `match` expression to handle the `Result` variants that might be returned\n\nNote that, like the `Option` enum, the `Result` enum and its variants have been brought into scope by the prelude, so we don‚Äôt need to specify `Result::` before the `Ok` and `Err` variants in the `match` arms.\n\nWhen the result is `Ok`, this code will return the inner `file` value out of the `Ok` variant, and we then assign that file handle value to the variable `greeting_file`. After the `match`, we can use the file handle for reading or writing.\n\nThe other arm of the `match` handles the case where we get an `Err` value from `File::open`. In this example, we‚Äôve chosen to call the `panic!` macro. If there‚Äôs no file named _hello.txt_ in our current directory and we run this code, we‚Äôll see the following output from the `panic!` macro:\n\n```console\n$ cargo run\n   Compiling error-handling v0.1.0 (file:///projects/error-handling)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.73s\n     Running `target/debug/error-handling`\nthread 'main' panicked at src/main.rs:8:23:\nProblem opening the file: Os { code: 2, kind: NotFound, message: \"No such file or directory\" }\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\n```\n\nAs usual, this output tells us exactly what has gone wrong.\n\n### [Matching on Different Errors](#matching-on-different-errors)\n\nThe code in Listing 9-4 will `panic!` no matter why `File::open` failed. However, we want to take different actions for different failure reasons. If `File::open` failed because the file doesn‚Äôt exist, we want to create the file and return the handle to the new file. If `File::open` failed for any other reason‚Äîfor example, because we didn‚Äôt have permission to open the file‚Äîwe still want the code to `panic!` in the same way it did in Listing 9-4. For this, we add an inner `match` expression, shown in Listing 9-5.\n\nFilename: src/main.rs\n\n```rust\nuse std::fs::File;\nuse std::io::ErrorKind;\n\nfn main() {\n    let greeting_file_result = File::open(\"hello.txt\");\n\n    let greeting_file = match greeting_file_result {\n        Ok(file) => file,\n        Err(error) => match error.kind() {\n            ErrorKind::NotFound => match File::create(\"hello.txt\") {\n                Ok(fc) => fc,\n                Err(e) => panic!(\"Problem creating the file: {e:?}\"),\n            },\n            other_error => {\n                panic!(\"Problem opening the file: {other_error:?}\");\n            }\n        },\n    };\n}\n```\n\nListing 9-5: Handling different kinds of errors in different ways\n\nThe type of the value that `File::open` returns inside the `Err` variant is `io::Error`, which is a struct provided by the standard library. This struct has a method `kind` that we can call to get an `io::ErrorKind` value. The enum `io::ErrorKind` is provided by the standard library and has variants representing the different kinds of errors that might result from an `io` operation. The variant we want to use is `ErrorKind::NotFound`, which indicates the file we‚Äôre trying to open doesn‚Äôt exist yet. So we match on `greeting_file_result`, but we also have an inner match on `error.kind()`.\n\nThe condition we want to check in the inner match is whether the value returned by `error.kind()` is the `NotFound` variant of the `ErrorKind` enum. If it is, we try to create the file with `File::create`. However, because `File::create` could also fail, we need a second arm in the inner `match` expression. When the file can‚Äôt be created, a different error message is printed. The second arm of the outer `match` stays the same, so the program panics on any error besides the missing file error.\n\n#### [Alternatives to Using `match` with `Result<T, E>`](#alternatives-to-using-match-with-resultt-e)\n\nThat‚Äôs a lot of `match`! The `match` expression is very useful but also very much a primitive. In Chapter 13, you‚Äôll learn about closures, which are used with many of the methods defined on `Result<T, E>`. These methods can be more concise than using `match` when handling `Result<T, E>` values in your code.\n\nFor example, here‚Äôs another way to write the same logic as shown in Listing 9-5, this time using closures and the `unwrap_or_else` method:\n\n```rust\nuse std::fs::File;\nuse std::io::ErrorKind;\n\nfn main() {\n    let greeting_file = File::open(\"hello.txt\").unwrap_or_else(|error| {\n        if error.kind() == ErrorKind::NotFound {\n            File::create(\"hello.txt\").unwrap_or_else(|error| {\n                panic!(\"Problem creating the file: {error:?}\");\n            })\n        } else {\n            panic!(\"Problem opening the file: {error:?}\");\n        }\n    });\n}\n```\n\nAlthough this code has the same behavior as Listing 9-5, it doesn‚Äôt contain any `match` expressions and is cleaner to read. Come back to this example after you‚Äôve read Chapter 13, and look up the `unwrap_or_else` method in the standard library documentation. Many more of these methods can clean up huge nested `match` expressions when you‚Äôre dealing with errors.\n\n#### [Shortcuts for Panic on Error: `unwrap` and `expect`](#shortcuts-for-panic-on-error-unwrap-and-expect)\n\nUsing `match` works well enough, but it can be a bit verbose and doesn‚Äôt always communicate intent well. The `Result<T, E>` type has many helper methods defined on it to do various, more specific tasks. The `unwrap` method is a shortcut method implemented just like the `match` expression we wrote in Listing 9-4. If the `Result` value is the `Ok` variant, `unwrap` will return the value inside the `Ok`. If the `Result` is the `Err` variant, `unwrap` will call the `panic!` macro for us. Here is an example of `unwrap` in action:\n\nFilename: src/main.rs\n\n```rust\nuse std::fs::File;\n\nfn main() {\n    let greeting_file = File::open(\"hello.txt\").unwrap();\n}\n```\n\nIf we run this code without a _hello.txt_ file, we‚Äôll see an error message from the `panic!` call that the `unwrap` method makes:\n\n```text\nthread 'main' panicked at src/main.rs:4:49:\ncalled `Result::unwrap()` on an `Err` value: Os { code: 2, kind: NotFound, message: \"No such file or directory\" }\n\n```\n\nSimilarly, the `expect` method lets us also choose the `panic!` error message. Using `expect` instead of `unwrap` and providing good error messages can convey your intent and make tracking down the source of a panic easier. The syntax of `expect` looks like this:\n\nFilename: src/main.rs\n\n```rust\nuse std::fs::File;\n\nfn main() {\n    let greeting_file = File::open(\"hello.txt\")\n        .expect(\"hello.txt should be included in this project\");\n}\n```\n\nWe use `expect` in the same way as `unwrap`: to return the file handle or call the `panic!` macro. The error message used by `expect` in its call to `panic!` will be the parameter that we pass to `expect`, rather than the default `panic!` message that `unwrap` uses. Here‚Äôs what it looks like:\n\n```text\nthread 'main' panicked at src/main.rs:5:10:\nhello.txt should be included in this project: Os { code: 2, kind: NotFound, message: \"No such file or directory\" }\n\n```\n\nIn production-quality code, most Rustaceans choose `expect` rather than `unwrap` and give more context about why the operation is expected to always succeed. That way, if your assumptions are ever proven wrong, you have more information to use in debugging.\n\n### [Propagating Errors](#propagating-errors)\n\nWhen a function‚Äôs implementation calls something that might fail, instead of handling the error within the function itself you can return the error to the calling code so that it can decide what to do. This is known as _propagating_ the error and gives more control to the calling code, where there might be more information or logic that dictates how the error should be handled than what you have available in the context of your code.\n\nFor example, Listing 9-6 shows a function that reads a username from a file. If the file doesn‚Äôt exist or can‚Äôt be read, this function will return those errors to the code that called the function.\n\nFilename: src/main.rs\n\n```rust\n#![allow(unused)]\nfn main() {\nuse std::fs::File;\nuse std::io::{self, Read};\n\nfn read_username_from_file() -> Result<String, io::Error> {\n    let username_file_result = File::open(\"hello.txt\");\n\n    let mut username_file = match username_file_result {\n        Ok(file) => file,\n        Err(e) => return Err(e),\n    };\n\n    let mut username = String::new();\n\n    match username_file.read_to_string(&mut username) {\n        Ok(_) => Ok(username),\n        Err(e) => Err(e),\n    }\n}\n}\n```\n\nListing 9-6: A function that returns errors to the calling code using `match`\n\nThis function can be written in a much shorter way, but we‚Äôre going to start by doing a lot of it manually in order to explore error handling; at the end, we‚Äôll show the shorter way. Let‚Äôs look at the return type of the function first: `Result<String, io::Error>`. This means the function is returning a value of the type `Result<T, E>`, where the generic parameter `T` has been filled in with the concrete type `String` and the generic type `E` has been filled in with the concrete type `io::Error`.\n\nIf this function succeeds without any problems, the code that calls this function will receive an `Ok` value that holds a `String`‚Äîthe `username` that this function read from the file. If this function encounters any problems, the calling code will receive an `Err` value that holds an instance of `io::Error` that contains more information about what the problems were. We chose `io::Error` as the return type of this function because that happens to be the type of the error value returned from both of the operations we‚Äôre calling in this function‚Äôs body that might fail: the `File::open` function and the `read_to_string` method.\n\nThe body of the function starts by calling the `File::open` function. Then we handle the `Result` value with a `match` similar to the `match` in Listing 9-4. If `File::open` succeeds, the file handle in the pattern variable `file` becomes the value in the mutable variable `username_file` and the function continues. In the `Err` case, instead of calling `panic!`, we use the `return` keyword to return early out of the function entirely and pass the error value from `File::open`, now in the pattern variable `e`, back to the calling code as this function‚Äôs error value.\n\nSo, if we have a file handle in `username_file`, the function then creates a new `String` in variable `username` and calls the `read_to_string` method on the file handle in `username_file` to read the contents of the file into `username`. The `read_to_string` method also returns a `Result` because it might fail, even though `File::open` succeeded. So we need another `match` to handle that `Result`: if `read_to_string` succeeds, then our function has succeeded, and we return the username from the file that‚Äôs now in `username` wrapped in an `Ok`. If `read_to_string` fails, we return the error value in the same way that we returned the error value in the `match` that handled the return value of `File::open`. However, we don‚Äôt need to explicitly say `return`, because this is the last expression in the function.\n\nThe code that calls this code will then handle getting either an `Ok` value that contains a username or an `Err` value that contains an `io::Error`. It‚Äôs up to the calling code to decide what to do with those values. If the calling code gets an `Err` value, it could call `panic!` and crash the program, use a default username, or look up the username from somewhere other than a file, for example. We don‚Äôt have enough information on what the calling code is actually trying to do, so we propagate all the success or error information upward for it to handle appropriately.\n\nThis pattern of propagating errors is so common in Rust that Rust provides the question mark operator `?` to make this easier.\n\n#### [A Shortcut for Propagating Errors: the `?` Operator](#a-shortcut-for-propagating-errors-the--operator)\n\nListing 9-7 shows an implementation of `read_username_from_file` that has the same functionality as in Listing 9-6, but this implementation uses the `?` operator.\n\nFilename: src/main.rs\n\n```rust\n#![allow(unused)]\nfn main() {\nuse std::fs::File;\nuse std::io::{self, Read};\n\nfn read_username_from_file() -> Result<String, io::Error> {\n    let mut username_file = File::open(\"hello.txt\")?;\n    let mut username = String::new();\n    username_file.read_to_string(&mut username)?;\n    Ok(username)\n}\n}\n```\n\nListing 9-7: A function that returns errors to the calling code using the `?` operator\n\nThe `?` placed after a `Result` value is defined to work in almost the same way as the `match` expressions we defined to handle the `Result` values in Listing 9-6. If the value of the `Result` is an `Ok`, the value inside the `Ok` will get returned from this expression, and the program will continue. If the value is an `Err`, the `Err` will be returned from the whole function as if we had used the `return` keyword so the error value gets propagated to the calling code.\n\nThere is a difference between what the `match` expression from Listing 9-6 does and what the `?` operator does: error values that have the `?` operator called on them go through the `from` function, defined in the `From` trait in the standard library, which is used to convert values from one type into another. When the `?` operator calls the `from` function, the error type received is converted into the error type defined in the return type of the current function. This is useful when a function returns one error type to represent all the ways a function might fail, even if parts might fail for many different reasons.\n\nFor example, we could change the `read_username_from_file` function in Listing 9-7 to return a custom error type named `OurError` that we define. If we also define `impl From<io::Error> for OurError` to construct an instance of `OurError` from an `io::Error`, then the `?` operator calls in the body of `read_username_from_file` will call `from` and convert the error types without needing to add any more code to the function.\n\nIn the context of Listing 9-7, the `?` at the end of the `File::open` call will return the value inside an `Ok` to the variable `username_file`. If an error occurs, the `?` operator will return early out of the whole function and give any `Err` value to the calling code. The same thing applies to the `?` at the end of the `read_to_string` call.\n\nThe `?` operator eliminates a lot of boilerplate and makes this function‚Äôs implementation simpler. We could even shorten this code further by chaining method calls immediately after the `?`, as shown in Listing 9-8.\n\nFilename: src/main.rs\n\n```rust\n#![allow(unused)]\nfn main() {\nuse std::fs::File;\nuse std::io::{self, Read};\n\nfn read_username_from_file() -> Result<String, io::Error> {\n    let mut username = String::new();\n\n    File::open(\"hello.txt\")?.read_to_string(&mut username)?;\n\n    Ok(username)\n}\n}\n```\n\nListing 9-8: Chaining method calls after the `?` operator\n\nWe‚Äôve moved the creation of the new `String` in `username` to the beginning of the function; that part hasn‚Äôt changed. Instead of creating a variable `username_file`, we‚Äôve chained the call to `read_to_string` directly onto the result of `File::open(\"hello.txt\")?`. We still have a `?` at the end of the `read_to_string` call, and we still return an `Ok` value containing `username` when both `File::open` and `read_to_string` succeed rather than returning errors. The functionality is again the same as in Listing 9-6 and Listing 9-7; this is just a different, more ergonomic way to write it.\n\nListing 9-9 shows a way to make this even shorter using `fs::read_to_string`.\n\nFilename: src/main.rs\n\n```rust\n#![allow(unused)]\nfn main() {\nuse std::fs;\nuse std::io;\n\nfn read_username_from_file() -> Result<String, io::Error> {\n    fs::read_to_string(\"hello.txt\")\n}\n}\n```\n\nListing 9-9: Using `fs::read_to_string` instead of opening and then reading the file\n\nReading a file into a string is a fairly common operation, so the standard library provides the convenient `fs::read_to_string` function that opens the file, creates a new `String`, reads the contents of the file, puts the contents into that `String`, and returns it. Of course, using `fs::read_to_string` doesn‚Äôt give us the opportunity to explain all the error handling, so we did it the longer way first.\n\n#### [Where The `?` Operator Can Be Used](#where-the--operator-can-be-used)\n\nThe `?` operator can only be used in functions whose return type is compatible with the value the `?` is used on. This is because the `?` operator is defined to perform an early return of a value out of the function, in the same manner as the `match` expression we defined in Listing 9-6. In Listing 9-6, the `match` was using a `Result` value, and the early return arm returned an `Err(e)` value. The return type of the function has to be a `Result` so that it‚Äôs compatible with this `return`.\n\nIn Listing 9-10, let‚Äôs look at the error we‚Äôll get if we use the `?` operator in a `main` function with a return type that is incompatible with the type of the value we use `?` on.\n\nFilename: src/main.rs\n\n```rust\nuse std::fs::File;\n\nfn main() {\n    let greeting_file = File::open(\"hello.txt\")?;\n}\n```\n\nListing 9-10: Attempting to use the `?` in the `main` function that returns `()` won‚Äôt compile.\n\nThis code opens a file, which might fail. The `?` operator follows the `Result` value returned by `File::open`, but this `main` function has the return type of `()`, not `Result`. When we compile this code, we get the following error message:\n\n```console\n$ cargo run\n   Compiling error-handling v0.1.0 (file:///projects/error-handling)\nerror[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n --> src/main.rs:4:48\n  |\n3 | fn main() {\n  | --------- this function should return `Result` or `Option` to accept `?`\n4 |     let greeting_file = File::open(\"hello.txt\")?;\n  |                                                ^ cannot use the `?` operator in a function that returns `()`\n  |\n  = help: the trait `FromResidual<Result<Infallible, std::io::Error>>` is not implemented for `()`\n\nFor more information about this error, try `rustc --explain E0277`.\nerror: could not compile `error-handling` (bin \"error-handling\") due to 1 previous error\n\n```\n\nThis error points out that we‚Äôre only allowed to use the `?` operator in a function that returns `Result`, `Option`, or another type that implements `FromResidual`.\n\nTo fix the error, you have two choices. One choice is to change the return type of your function to be compatible with the value you‚Äôre using the `?` operator on as long as you have no restrictions preventing that. The other choice is to use a `match` or one of the `Result<T, E>` methods to handle the `Result<T, E>` in whatever way is appropriate.\n\nThe error message also mentioned that `?` can be used with `Option<T>` values as well. As with using `?` on `Result`, you can only use `?` on `Option` in a function that returns an `Option`. The behavior of the `?` operator when called on an `Option<T>` is similar to its behavior when called on a `Result<T, E>`: if the value is `None`, the `None` will be returned early from the function at that point. If the value is `Some`, the value inside the `Some` is the resultant value of the expression, and the function continues. Listing 9-11 has an example of a function that finds the last character of the first line in the given text.\n\n```rust\nfn last_char_of_first_line(text: &str) -> Option<char> {\n    text.lines().next()?.chars().last()\n}\n\nfn main() {\n    assert_eq!(\n        last_char_of_first_line(\"Hello, world\\nHow are you today?\"),\n        Some('d')\n    );\n\n    assert_eq!(last_char_of_first_line(\"\"), None);\n    assert_eq!(last_char_of_first_line(\"\\nhi\"), None);\n}\n```\n\nListing 9-11: Using the `?` operator on an `Option<T>` value\n\nThis function returns `Option<char>` because it‚Äôs possible that there is a character there, but it‚Äôs also possible that there isn‚Äôt. This code takes the `text` string slice argument and calls the `lines` method on it, which returns an iterator over the lines in the string. Because this function wants to examine the first line, it calls `next` on the iterator to get the first value from the iterator. If `text` is the empty string, this call to `next` will return `None`, in which case we use `?` to stop and return `None` from `last_char_of_first_line`. If `text` is not the empty string, `next` will return a `Some` value containing a string slice of the first line in `text`.\n\nThe `?` extracts the string slice, and we can call `chars` on that string slice to get an iterator of its characters. We‚Äôre interested in the last character in this first line, so we call `last` to return the last item in the iterator. This is an `Option` because it‚Äôs possible that the first line is the empty string; for example, if `text` starts with a blank line but has characters on other lines, as in `\"\\nhi\"`. However, if there is a last character on the first line, it will be returned in the `Some` variant. The `?` operator in the middle gives us a concise way to express this logic, allowing us to implement the function in one line. If we couldn‚Äôt use the `?` operator on `Option`, we‚Äôd have to implement this logic using more method calls or a `match` expression.\n\nNote that you can use the `?` operator on a `Result` in a function that returns `Result`, and you can use the `?` operator on an `Option` in a function that returns `Option`, but you can‚Äôt mix and match. The `?` operator won‚Äôt automatically convert a `Result` to an `Option` or vice versa; in those cases, you can use methods like the `ok` method on `Result` or the `ok_or` method on `Option` to do the conversion explicitly.\n\nSo far, all the `main` functions we‚Äôve used return `()`. The `main` function is special because it‚Äôs the entry point and exit point of an executable program, and there are restrictions on what its return type can be for the program to behave as expected.\n\nLuckily, `main` can also return a `Result<(), E>`. Listing 9-12 has the code from Listing 9-10, but we‚Äôve changed the return type of `main` to be `Result<(), Box<dyn Error>>` and added a return value `Ok(())` to the end. This code will now compile.\n\nFilename: src/main.rs\n\n```rust\nuse std::error::Error;\nuse std::fs::File;\n\nfn main() -> Result<(), Box<dyn Error>> {\n    let greeting_file = File::open(\"hello.txt\")?;\n\n    Ok(())\n}\n```\n\nListing 9-12: Changing `main` to return `Result<(), E>` allows the use of the `?` operator on `Result` values.\n\nThe `Box<dyn Error>` type is a _trait object_, which we‚Äôll talk about in the [‚ÄúUsing Trait Objects that Allow for Values of Different Types‚Äù](about:blank/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types) section in Chapter 17. For now, you can read `Box<dyn Error>` to mean ‚Äúany kind of error.‚Äù Using `?` on a `Result` value in a `main` function with the error type `Box<dyn Error>` is allowed because it allows any `Err` value to be returned early. Even though the body of this `main` function will only ever return errors of type `std::io::Error`, by specifying `Box<dyn Error>`, this signature will continue to be correct even if more code that returns other errors is added to the body of `main`.\n\nWhen a `main` function returns a `Result<(), E>`, the executable will exit with a value of `0` if `main` returns `Ok(())` and will exit with a nonzero value if `main` returns an `Err` value. Executables written in C return integers when they exit: programs that exit successfully return the integer `0`, and programs that error return some integer other than `0`. Rust also returns integers from executables to be compatible with this convention.\n\nThe `main` function may return any types that implement [the `std::process::Termination` trait](../std/process/trait.Termination.html), which contains a function `report` that returns an `ExitCode`. Consult the standard library documentation for more information on implementing the `Termination` trait for your own types.\n\nNow that we‚Äôve discussed the details of calling `panic!` or returning `Result`, let‚Äôs return to the topic of how to decide which is appropriate to use in which cases.\n\n## [To `panic!` or Not to `panic!`](#to-panic-or-not-to-panic)\n\nSo how do you decide when you should call `panic!` and when you should return `Result`? When code panics, there‚Äôs no way to recover. You could call `panic!` for any error situation, whether there‚Äôs a possible way to recover or not, but then you‚Äôre making the decision that a situation is unrecoverable on behalf of the calling code. When you choose to return a `Result` value, you give the calling code options. The calling code could choose to attempt to recover in a way that‚Äôs appropriate for its situation, or it could decide that an `Err` value in this case is unrecoverable, so it can call `panic!` and turn your recoverable error into an unrecoverable one. Therefore, returning `Result` is a good default choice when you‚Äôre defining a function that might fail.\n\nIn situations such as examples, prototype code, and tests, it‚Äôs more appropriate to write code that panics instead of returning a `Result`. Let‚Äôs explore why, then discuss situations in which the compiler can‚Äôt tell that failure is impossible, but you as a human can. The chapter will conclude with some general guidelines on how to decide whether to panic in library code.\n\n### [Examples, Prototype Code, and Tests](#examples-prototype-code-and-tests)\n\nWhen you‚Äôre writing an example to illustrate some concept, also including robust error-handling code can make the example less clear. In examples, it‚Äôs understood that a call to a method like `unwrap` that could panic is meant as a placeholder for the way you‚Äôd want your application to handle errors, which can differ based on what the rest of your code is doing.\n\nSimilarly, the `unwrap` and `expect` methods are very handy when prototyping, before you‚Äôre ready to decide how to handle errors. They leave clear markers in your code for when you‚Äôre ready to make your program more robust.\n\nIf a method call fails in a test, you‚Äôd want the whole test to fail, even if that method isn‚Äôt the functionality under test. Because `panic!` is how a test is marked as a failure, calling `unwrap` or `expect` is exactly what should happen.\n\n### [Cases in Which You Have More Information Than the Compiler](#cases-in-which-you-have-more-information-than-the-compiler)\n\nIt would also be appropriate to call `unwrap` or `expect` when you have some other logic that ensures the `Result` will have an `Ok` value, but the logic isn‚Äôt something the compiler understands. You‚Äôll still have a `Result` value that you need to handle: whatever operation you‚Äôre calling still has the possibility of failing in general, even though it‚Äôs logically impossible in your particular situation. If you can ensure by manually inspecting the code that you‚Äôll never have an `Err` variant, it‚Äôs perfectly acceptable to call `unwrap`, and even better to document the reason you think you‚Äôll never have an `Err` variant in the `expect` text. Here‚Äôs an example:\n\n```rust\nfn main() {\n    use std::net::IpAddr;\n\n    let home: IpAddr = \"127.0.0.1\"\n        .parse()\n        .expect(\"Hardcoded IP address should be valid\");\n}\n```\n\nWe‚Äôre creating an `IpAddr` instance by parsing a hardcoded string. We can see that `127.0.0.1` is a valid IP address, so it‚Äôs acceptable to use `expect` here. However, having a hardcoded, valid string doesn‚Äôt change the return type of the `parse` method: we still get a `Result` value, and the compiler will still make us handle the `Result` as if the `Err` variant is a possibility because the compiler isn‚Äôt smart enough to see that this string is always a valid IP address. If the IP address string came from a user rather than being hardcoded into the program and therefore _did_ have a possibility of failure, we‚Äôd definitely want to handle the `Result` in a more robust way instead. Mentioning the assumption that this IP address is hardcoded will prompt us to change `expect` to better error-handling code if, in the future, we need to get the IP address from some other source instead.\n\n### [Guidelines for Error Handling](#guidelines-for-error-handling)\n\nIt‚Äôs advisable to have your code panic when it‚Äôs possible that your code could end up in a bad state. In this context, a _bad state_ is when some assumption, guarantee, contract, or invariant has been broken, such as when invalid values, contradictory values, or missing values are passed to your code‚Äîplus one or more of the following:\n\n-   The bad state is something that is unexpected, as opposed to something that will likely happen occasionally, like a user entering data in the wrong format.\n-   Your code after this point needs to rely on not being in this bad state, rather than checking for the problem at every step.\n-   There‚Äôs not a good way to encode this information in the types you use. We‚Äôll work through an example of what we mean in the [‚ÄúEncoding States and Behavior as Types‚Äù](about:blank/ch17-03-oo-design-patterns.html#encoding-states-and-behavior-as-types) section of Chapter 17.\n\nIf someone calls your code and passes in values that don‚Äôt make sense, it‚Äôs best to return an error if you can so the user of the library can decide what they want to do in that case. However, in cases where continuing could be insecure or harmful, the best choice might be to call `panic!` and alert the person using your library to the bug in their code so they can fix it during development. Similarly, `panic!` is often appropriate if you‚Äôre calling external code that is out of your control and it returns an invalid state that you have no way of fixing.\n\nHowever, when failure is expected, it‚Äôs more appropriate to return a `Result` than to make a `panic!` call. Examples include a parser being given malformed data or an HTTP request returning a status that indicates you have hit a rate limit. In these cases, returning a `Result` indicates that failure is an expected possibility that the calling code must decide how to handle.\n\nWhen your code performs an operation that could put a user at risk if it‚Äôs called using invalid values, your code should verify the values are valid first and panic if the values aren‚Äôt valid. This is mostly for safety reasons: attempting to operate on invalid data can expose your code to vulnerabilities. This is the main reason the standard library will call `panic!` if you attempt an out-of-bounds memory access: trying to access memory that doesn‚Äôt belong to the current data structure is a common security problem. Functions often have _contracts_: their behavior is only guaranteed if the inputs meet particular requirements. Panicking when the contract is violated makes sense because a contract violation always indicates a caller-side bug, and it‚Äôs not a kind of error you want the calling code to have to explicitly handle. In fact, there‚Äôs no reasonable way for calling code to recover; the calling _programmers_ need to fix the code. Contracts for a function, especially when a violation will cause a panic, should be explained in the API documentation for the function.\n\nHowever, having lots of error checks in all of your functions would be verbose and annoying. Fortunately, you can use Rust‚Äôs type system (and thus the type checking done by the compiler) to do many of the checks for you. If your function has a particular type as a parameter, you can proceed with your code‚Äôs logic knowing that the compiler has already ensured you have a valid value. For example, if you have a type rather than an `Option`, your program expects to have _something_ rather than _nothing_. Your code then doesn‚Äôt have to handle two cases for the `Some` and `None` variants: it will only have one case for definitely having a value. Code trying to pass nothing to your function won‚Äôt even compile, so your function doesn‚Äôt have to check for that case at runtime. Another example is using an unsigned integer type such as `u32`, which ensures the parameter is never negative.\n\n### [Creating Custom Types for Validation](#creating-custom-types-for-validation)\n\nLet‚Äôs take the idea of using Rust‚Äôs type system to ensure we have a valid value one step further and look at creating a custom type for validation. Recall the guessing game in Chapter 2 in which our code asked the user to guess a number between 1 and 100. We never validated that the user‚Äôs guess was between those numbers before checking it against our secret number; we only validated that the guess was positive. In this case, the consequences were not very dire: our output of ‚ÄúToo high‚Äù or ‚ÄúToo low‚Äù would still be correct. But it would be a useful enhancement to guide the user toward valid guesses and have different behavior when the user guesses a number that‚Äôs out of range versus when the user types, for example, letters instead.\n\nOne way to do this would be to parse the guess as an `i32` instead of only a `u32` to allow potentially negative numbers, and then add a check for the number being in range, like so:\n\nFilename: src/main.rs\n\n```rust\nuse rand::Rng;\nuse std::cmp::Ordering;\nuse std::io;\n\nfn main() {\n    println!(\"Guess the number!\");\n\n    let secret_number = rand::thread_rng().gen_range(1..=100);\n\n    loop {\n        // --snip--\n\n        println!(\"Please input your guess.\");\n\n        let mut guess = String::new();\n\n        io::stdin()\n            .read_line(&mut guess)\n            .expect(\"Failed to read line\");\n\n        let guess: i32 = match guess.trim().parse() {\n            Ok(num) => num,\n            Err(_) => continue,\n        };\n\n        if guess < 1 || guess > 100 {\n            println!(\"The secret number will be between 1 and 100.\");\n            continue;\n        }\n\n        match guess.cmp(&secret_number) {\n            // --snip--\n            Ordering::Less => println!(\"Too small!\"),\n            Ordering::Greater => println!(\"Too big!\"),\n            Ordering::Equal => {\n                println!(\"You win!\");\n                break;\n            }\n        }\n    }\n}\n```\n\nThe `if` expression checks whether our value is out of range, tells the user about the problem, and calls `continue` to start the next iteration of the loop and ask for another guess. After the `if` expression, we can proceed with the comparisons between `guess` and the secret number knowing that `guess` is between 1 and 100.\n\nHowever, this is not an ideal solution: if it were absolutely critical that the program only operated on values between 1 and 100, and it had many functions with this requirement, having a check like this in every function would be tedious (and might impact performance).\n\nInstead, we can make a new type and put the validations in a function to create an instance of the type rather than repeating the validations everywhere. That way, it‚Äôs safe for functions to use the new type in their signatures and confidently use the values they receive. Listing 9-13 shows one way to define a `Guess` type that will only create an instance of `Guess` if the `new` function receives a value between 1 and 100.\n\nFilename: src/lib.rs\n\n```rust\n#![allow(unused)]\nfn main() {\npub struct Guess {\n    value: i32,\n}\n\nimpl Guess {\n    pub fn new(value: i32) -> Guess {\n        if value < 1 || value > 100 {\n            panic!(\"Guess value must be between 1 and 100, got {value}.\");\n        }\n\n        Guess { value }\n    }\n\n    pub fn value(&self) -> i32 {\n        self.value\n    }\n}\n}\n```\n\nListing 9-13: A `Guess` type that will only continue with values between 1 and 100\n\nFirst we define a struct named `Guess` that has a field named `value` that holds an `i32`. This is where the number will be stored.\n\nThen we implement an associated function named `new` on `Guess` that creates instances of `Guess` values. The `new` function is defined to have one parameter named `value` of type `i32` and to return a `Guess`. The code in the body of the `new` function tests `value` to make sure it‚Äôs between 1 and 100. If `value` doesn‚Äôt pass this test, we make a `panic!` call, which will alert the programmer who is writing the calling code that they have a bug they need to fix, because creating a `Guess` with a `value` outside this range would violate the contract that `Guess::new` is relying on. The conditions in which `Guess::new` might panic should be discussed in its public-facing API documentation; we‚Äôll cover documentation conventions indicating the possibility of a `panic!` in the API documentation that you create in Chapter 14. If `value` does pass the test, we create a new `Guess` with its `value` field set to the `value` parameter and return the `Guess`.\n\nNext, we implement a method named `value` that borrows `self`, doesn‚Äôt have any other parameters, and returns an `i32`. This kind of method is sometimes called a _getter_ because its purpose is to get some data from its fields and return it. This public method is necessary because the `value` field of the `Guess` struct is private. It‚Äôs important that the `value` field be private so code using the `Guess` struct is not allowed to set `value` directly: code outside the module _must_ use the `Guess::new` function to create an instance of `Guess`, thereby ensuring there‚Äôs no way for a `Guess` to have a `value` that hasn‚Äôt been checked by the conditions in the `Guess::new` function.\n\nA function that has a parameter or returns only numbers between 1 and 100 could then declare in its signature that it takes or returns a `Guess` rather than an `i32` and wouldn‚Äôt need to do any additional checks in its body.\n\n## [Summary](#summary-8)\n\nRust‚Äôs error-handling features are designed to help you write more robust code. The `panic!` macro signals that your program is in a state it can‚Äôt handle and lets you tell the process to stop instead of trying to proceed with invalid or incorrect values. The `Result` enum uses Rust‚Äôs type system to indicate that operations might fail in a way that your code could recover from. You can use `Result` to tell code that calls your code that it needs to handle potential success or failure as well. Using `panic!` and `Result` in the appropriate situations will make your code more reliable in the face of inevitable problems.\n\nNow that you‚Äôve seen useful ways that the standard library uses generics with the `Option` and `Result` enums, we‚Äôll talk about how generics work and how you can use them in your code.\n\n## [Generic Types, Traits, and Lifetimes](#generic-types-traits-and-lifetimes)\n\nEvery programming language has tools for effectively handling the duplication of concepts. In Rust, one such tool is _generics_: abstract stand-ins for concrete types or other properties. We can express the behavior of generics or how they relate to other generics without knowing what will be in their place when compiling and running the code.\n\nFunctions can take parameters of some generic type, instead of a concrete type like `i32` or `String`, in the same way they take parameters with unknown values to run the same code on multiple concrete values. In fact, we‚Äôve already used generics in Chapter 6 with `Option<T>`, in Chapter 8 with `Vec<T>` and `HashMap<K, V>`, and in Chapter 9 with `Result<T, E>`. In this chapter, you‚Äôll explore how to define your own types, functions, and methods with generics!\n\nFirst we‚Äôll review how to extract a function to reduce code duplication. We‚Äôll then use the same technique to make a generic function from two functions that differ only in the types of their parameters. We‚Äôll also explain how to use generic types in struct and enum definitions.\n\nThen you‚Äôll learn how to use _traits_ to define behavior in a generic way. You can combine traits with generic types to constrain a generic type to accept only those types that have a particular behavior, as opposed to just any type.\n\nFinally, we‚Äôll discuss _lifetimes_: a variety of generics that give the compiler information about how references relate to each other. Lifetimes allow us to give the compiler enough information about borrowed values so that it can ensure references will be valid in more situations than it could without our help.\n\nGenerics allow us to replace specific types with a placeholder that represents multiple types to remove code duplication. Before diving into generics syntax, let‚Äôs first look at how to remove duplication in a way that doesn‚Äôt involve generic types by extracting a function that replaces specific values with a placeholder that represents multiple values. Then we‚Äôll apply the same technique to extract a generic function! By looking at how to recognize duplicated code you can extract into a function, you‚Äôll start to recognize duplicated code that can use generics.\n\nWe‚Äôll begin with the short program in Listing 10-1 that finds the largest number in a list.\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let number_list = vec![34, 50, 25, 100, 65];\n\n    let mut largest = &number_list[0];\n\n    for number in &number_list {\n        if number > largest {\n            largest = number;\n        }\n    }\n\n    println!(\"The largest number is {largest}\");\n    assert_eq!(*largest, 100);\n}\n```\n\nListing 10-1: Finding the largest number in a list of numbers\n\nWe store a list of integers in the variable `number_list` and place a reference to the first number in the list in a variable named `largest`. We then iterate through all the numbers in the list, and if the current number is greater than the number stored in `largest`, we replace the reference in that variable. However, if the current number is less than or equal to the largest number seen so far, the variable doesn‚Äôt change, and the code moves on to the next number in the list. After considering all the numbers in the list, `largest` should refer to the largest number, which in this case is 100.\n\nWe‚Äôve now been tasked with finding the largest number in two different lists of numbers. To do so, we can choose to duplicate the code in Listing 10-1 and use the same logic at two different places in the program, as shown in Listing 10-2.\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let number_list = vec![34, 50, 25, 100, 65];\n\n    let mut largest = &number_list[0];\n\n    for number in &number_list {\n        if number > largest {\n            largest = number;\n        }\n    }\n\n    println!(\"The largest number is {largest}\");\n\n    let number_list = vec![102, 34, 6000, 89, 54, 2, 43, 8];\n\n    let mut largest = &number_list[0];\n\n    for number in &number_list {\n        if number > largest {\n            largest = number;\n        }\n    }\n\n    println!(\"The largest number is {largest}\");\n}\n```\n\nListing 10-2: Code to find the largest number in _two_ lists of numbers\n\nAlthough this code works, duplicating code is tedious and error prone. We also have to remember to update the code in multiple places when we want to change it.\n\nTo eliminate this duplication, we‚Äôll create an abstraction by defining a function that operates on any list of integers passed in a parameter. This solution makes our code clearer and lets us express the concept of finding the largest number in a list abstractly.\n\nIn Listing 10-3, we extract the code that finds the largest number into a function named `largest`. Then we call the function to find the largest number in the two lists from Listing 10-2. We could also use the function on any other list of `i32` values we might have in the future.\n\nFilename: src/main.rs\n\n```rust\nfn largest(list: &[i32]) -> &i32 {\n    let mut largest = &list[0];\n\n    for item in list {\n        if item > largest {\n            largest = item;\n        }\n    }\n\n    largest\n}\n\nfn main() {\n    let number_list = vec![34, 50, 25, 100, 65];\n\n    let result = largest(&number_list);\n    println!(\"The largest number is {result}\");\n    assert_eq!(*result, 100);\n\n    let number_list = vec![102, 34, 6000, 89, 54, 2, 43, 8];\n\n    let result = largest(&number_list);\n    println!(\"The largest number is {result}\");\n    assert_eq!(*result, 6000);\n}\n```\n\nListing 10-3: Abstracted code to find the largest number in two lists\n\nThe `largest` function has a parameter called `list`, which represents any concrete slice of `i32` values we might pass into the function. As a result, when we call the function, the code runs on the specific values that we pass in.\n\nIn summary, here are the steps we took to change the code from Listing 10-2 to Listing 10-3:\n\n1.  Identify duplicate code.\n2.  Extract the duplicate code into the body of the function, and specify the inputs and return values of that code in the function signature.\n3.  Update the two instances of duplicated code to call the function instead.\n\nNext, we‚Äôll use these same steps with generics to reduce code duplication. In the same way that the function body can operate on an abstract `list` instead of specific values, generics allow code to operate on abstract types.\n\nFor example, say we had two functions: one that finds the largest item in a slice of `i32` values and one that finds the largest item in a slice of `char` values. How would we eliminate that duplication? Let‚Äôs find out!\n\n## [Generic Data Types](#generic-data-types)\n\nWe use generics to create definitions for items like function signatures or structs, which we can then use with many different concrete data types. Let‚Äôs first look at how to define functions, structs, enums, and methods using generics. Then we‚Äôll discuss how generics affect code performance.\n\n### [In Function Definitions](#in-function-definitions)\n\nWhen defining a function that uses generics, we place the generics in the signature of the function where we would usually specify the data types of the parameters and return value. Doing so makes our code more flexible and provides more functionality to callers of our function while preventing code duplication.\n\nContinuing with our `largest` function, Listing 10-4 shows two functions that both find the largest value in a slice. We‚Äôll then combine these into a single function that uses generics.\n\nFilename: src/main.rs\n\n```rust\nfn largest_i32(list: &[i32]) -> &i32 {\n    let mut largest = &list[0];\n\n    for item in list {\n        if item > largest {\n            largest = item;\n        }\n    }\n\n    largest\n}\n\nfn largest_char(list: &[char]) -> &char {\n    let mut largest = &list[0];\n\n    for item in list {\n        if item > largest {\n            largest = item;\n        }\n    }\n\n    largest\n}\n\nfn main() {\n    let number_list = vec![34, 50, 25, 100, 65];\n\n    let result = largest_i32(&number_list);\n    println!(\"The largest number is {result}\");\n    assert_eq!(*result, 100);\n\n    let char_list = vec!['y', 'm', 'a', 'q'];\n\n    let result = largest_char(&char_list);\n    println!(\"The largest char is {result}\");\n    assert_eq!(*result, 'y');\n}\n```\n\nListing 10-4: Two functions that differ only in their names and in the types in their signatures\n\nThe `largest_i32` function is the one we extracted in Listing 10-3 that finds the largest `i32` in a slice. The `largest_char` function finds the largest `char` in a slice. The function bodies have the same code, so let‚Äôs eliminate the duplication by introducing a generic type parameter in a single function.\n\nTo parameterize the types in a new single function, we need to name the type parameter, just as we do for the value parameters to a function. You can use any identifier as a type parameter name. But we‚Äôll use `T` because, by convention, type parameter names in Rust are short, often just one letter, and Rust‚Äôs type-naming convention is UpperCamelCase. Short for _type_, `T` is the default choice of most Rust programmers.\n\nWhen we use a parameter in the body of the function, we have to declare the parameter name in the signature so the compiler knows what that name means. Similarly, when we use a type parameter name in a function signature, we have to declare the type parameter name before we use it. To define the generic `largest` function, we place type name declarations inside angle brackets, `<>`, between the name of the function and the parameter list, like this:\n\n```rust\nfn largest<T>(list: &[T]) -> &T {\n```\n\nWe read this definition as: the function `largest` is generic over some type `T`. This function has one parameter named `list`, which is a slice of values of type `T`. The `largest` function will return a reference to a value of the same type `T`.\n\nListing 10-5 shows the combined `largest` function definition using the generic data type in its signature. The listing also shows how we can call the function with either a slice of `i32` values or `char` values. Note that this code won‚Äôt compile yet, but we‚Äôll fix it later in this chapter.\n\nFilename: src/main.rs\n\n```rust\nfn largest<T>(list: &[T]) -> &T {\n    let mut largest = &list[0];\n\n    for item in list {\n        if item > largest {\n            largest = item;\n        }\n    }\n\n    largest\n}\n\nfn main() {\n    let number_list = vec![34, 50, 25, 100, 65];\n\n    let result = largest(&number_list);\n    println!(\"The largest number is {result}\");\n\n    let char_list = vec!['y', 'm', 'a', 'q'];\n\n    let result = largest(&char_list);\n    println!(\"The largest char is {result}\");\n}\n```\n\nListing 10-5: The `largest` function using generic type parameters; this doesn‚Äôt compile yet\n\nIf we compile this code right now, we‚Äôll get this error:\n\n```console\n$ cargo run\n   Compiling chapter10 v0.1.0 (file:///projects/chapter10)\nerror[E0369]: binary operation `>` cannot be applied to type `&T`\n --> src/main.rs:5:17\n  |\n5 |         if item > largest {\n  |            ---- ^ ------- &T\n  |            |\n  |            &T\n  |\nhelp: consider restricting type parameter `T`\n  |\n1 | fn largest<T: std::cmp::PartialOrd>(list: &[T]) -> &T {\n  |             ++++++++++++++++++++++\n\nFor more information about this error, try `rustc --explain E0369`.\nerror: could not compile `chapter10` (bin \"chapter10\") due to 1 previous error\n\n```\n\nThe help text mentions `std::cmp::PartialOrd`, which is a _trait_, and we‚Äôre going to talk about traits in the next section. For now, know that this error states that the body of `largest` won‚Äôt work for all possible types that `T` could be. Because we want to compare values of type `T` in the body, we can only use types whose values can be ordered. To enable comparisons, the standard library has the `std::cmp::PartialOrd` trait that you can implement on types (see Appendix C for more on this trait). By following the help text‚Äôs suggestion, we restrict the types valid for `T` to only those that implement `PartialOrd` and this example will compile, because the standard library implements `PartialOrd` on both `i32` and `char`.\n\n### [In Struct Definitions](#in-struct-definitions)\n\nWe can also define structs to use a generic type parameter in one or more fields using the `<>` syntax. Listing 10-6 defines a `Point<T>` struct to hold `x` and `y` coordinate values of any type.\n\nFilename: src/main.rs\n\n```rust\nstruct Point<T> {\n    x: T,\n    y: T,\n}\n\nfn main() {\n    let integer = Point { x: 5, y: 10 };\n    let float = Point { x: 1.0, y: 4.0 };\n}\n```\n\nListing 10-6: A `Point<T>` struct that holds `x` and `y` values of type `T`\n\nThe syntax for using generics in struct definitions is similar to that used in function definitions. First we declare the name of the type parameter inside angle brackets just after the name of the struct. Then we use the generic type in the struct definition where we would otherwise specify concrete data types.\n\nNote that because we‚Äôve used only one generic type to define `Point<T>`, this definition says that the `Point<T>` struct is generic over some type `T`, and the fields `x` and `y` are _both_ that same type, whatever that type may be. If we create an instance of a `Point<T>` that has values of different types, as in Listing 10-7, our code won‚Äôt compile.\n\nFilename: src/main.rs\n\n```rust\nstruct Point<T> {\n    x: T,\n    y: T,\n}\n\nfn main() {\n    let wont_work = Point { x: 5, y: 4.0 };\n}\n```\n\nListing 10-7: The fields `x` and `y` must be the same type because both have the same generic data type `T`.\n\nIn this example, when we assign the integer value `5` to `x`, we let the compiler know that the generic type `T` will be an integer for this instance of `Point<T>`. Then when we specify `4.0` for `y`, which we‚Äôve defined to have the same type as `x`, we‚Äôll get a type mismatch error like this:\n\n```console\n$ cargo run\n   Compiling chapter10 v0.1.0 (file:///projects/chapter10)\nerror[E0308]: mismatched types\n --> src/main.rs:7:38\n  |\n7 |     let wont_work = Point { x: 5, y: 4.0 };\n  |                                      ^^^ expected integer, found floating-point number\n\nFor more information about this error, try `rustc --explain E0308`.\nerror: could not compile `chapter10` (bin \"chapter10\") due to 1 previous error\n\n```\n\nTo define a `Point` struct where `x` and `y` are both generics but could have different types, we can use multiple generic type parameters. For example, in Listing 10-8, we change the definition of `Point` to be generic over types `T` and `U` where `x` is of type `T` and `y` is of type `U`.\n\nFilename: src/main.rs\n\n```rust\nstruct Point<T, U> {\n    x: T,\n    y: U,\n}\n\nfn main() {\n    let both_integer = Point { x: 5, y: 10 };\n    let both_float = Point { x: 1.0, y: 4.0 };\n    let integer_and_float = Point { x: 5, y: 4.0 };\n}\n```\n\nListing 10-8: A `Point<T, U>` generic over two types so that `x` and `y` can be values of different types\n\nNow all the instances of `Point` shown are allowed! You can use as many generic type parameters in a definition as you want, but using more than a few makes your code hard to read. If you‚Äôre finding you need lots of generic types in your code, it could indicate that your code needs restructuring into smaller pieces.\n\n### [In Enum Definitions](#in-enum-definitions)\n\nAs we did with structs, we can define enums to hold generic data types in their variants. Let‚Äôs take another look at the `Option<T>` enum that the standard library provides, which we used in Chapter 6:\n\n```rust\n#![allow(unused)]\nfn main() {\nenum Option<T> {\n    Some(T),\n    None,\n}\n}\n```\n\nThis definition should now make more sense to you. As you can see, the `Option<T>` enum is generic over type `T` and has two variants: `Some`, which holds one value of type `T`, and a `None` variant that doesn‚Äôt hold any value. By using the `Option<T>` enum, we can express the abstract concept of an optional value, and because `Option<T>` is generic, we can use this abstraction no matter what the type of the optional value is.\n\nEnums can use multiple generic types as well. The definition of the `Result` enum that we used in Chapter 9 is one example:\n\n```rust\n#![allow(unused)]\nfn main() {\nenum Result<T, E> {\n    Ok(T),\n    Err(E),\n}\n}\n```\n\nThe `Result` enum is generic over two types, `T` and `E`, and has two variants: `Ok`, which holds a value of type `T`, and `Err`, which holds a value of type `E`. This definition makes it convenient to use the `Result` enum anywhere we have an operation that might succeed (return a value of some type `T`) or fail (return an error of some type `E`). In fact, this is what we used to open a file in Listing 9-3, where `T` was filled in with the type `std::fs::File` when the file was opened successfully and `E` was filled in with the type `std::io::Error` when there were problems opening the file.\n\nWhen you recognize situations in your code with multiple struct or enum definitions that differ only in the types of the values they hold, you can avoid duplication by using generic types instead.\n\n### [In Method Definitions](#in-method-definitions)\n\nWe can implement methods on structs and enums (as we did in Chapter 5) and use generic types in their definitions too. Listing 10-9 shows the `Point<T>` struct we defined in Listing 10-6 with a method named `x` implemented on it.\n\nFilename: src/main.rs\n\n```rust\nstruct Point<T> {\n    x: T,\n    y: T,\n}\n\nimpl<T> Point<T> {\n    fn x(&self) -> &T {\n        &self.x\n    }\n}\n\nfn main() {\n    let p = Point { x: 5, y: 10 };\n\n    println!(\"p.x = {}\", p.x());\n}\n```\n\nListing 10-9: Implementing a method named `x` on the `Point<T>` struct that will return a reference to the `x` field of type `T`\n\nHere, we‚Äôve defined a method named `x` on `Point<T>` that returns a reference to the data in the field `x`.\n\nNote that we have to declare `T` just after `impl` so we can use `T` to specify that we‚Äôre implementing methods on the type `Point<T>`. By declaring `T` as a generic type after `impl`, Rust can identify that the type in the angle brackets in `Point` is a generic type rather than a concrete type. We could have chosen a different name for this generic parameter than the generic parameter declared in the struct definition, but using the same name is conventional. Methods written within an `impl` that declares the generic type will be defined on any instance of the type, no matter what concrete type ends up substituting for the generic type.\n\nWe can also specify constraints on generic types when defining methods on the type. We could, for example, implement methods only on `Point<f32>` instances rather than on `Point<T>` instances with any generic type. In Listing 10-10 we use the concrete type `f32`, meaning we don‚Äôt declare any types after `impl`.\n\nFilename: src/main.rs\n\n```rust\nstruct Point<T> {\n    x: T,\n    y: T,\n}\n\nimpl<T> Point<T> {\n    fn x(&self) -> &T {\n        &self.x\n    }\n}\n\nimpl Point<f32> {\n    fn distance_from_origin(&self) -> f32 {\n        (self.x.powi(2) + self.y.powi(2)).sqrt()\n    }\n}\n\nfn main() {\n    let p = Point { x: 5, y: 10 };\n\n    println!(\"p.x = {}\", p.x());\n}\n```\n\nListing 10-10: An `impl` block that only applies to a struct with a particular concrete type for the generic type parameter `T`\n\nThis code means the type `Point<f32>` will have a `distance_from_origin` method; other instances of `Point<T>` where `T` is not of type `f32` will not have this method defined. The method measures how far our point is from the point at coordinates (0.0, 0.0) and uses mathematical operations that are available only for floating-point types.\n\nGeneric type parameters in a struct definition aren‚Äôt always the same as those you use in that same struct‚Äôs method signatures. Listing 10-11 uses the generic types `X1` and `Y1` for the `Point` struct and `X2` `Y2` for the `mixup` method signature to make the example clearer. The method creates a new `Point` instance with the `x` value from the `self` `Point` (of type `X1`) and the `y` value from the passed-in `Point` (of type `Y2`).\n\nFilename: src/main.rs\n\n```rust\nstruct Point<X1, Y1> {\n    x: X1,\n    y: Y1,\n}\n\nimpl<X1, Y1> Point<X1, Y1> {\n    fn mixup<X2, Y2>(self, other: Point<X2, Y2>) -> Point<X1, Y2> {\n        Point {\n            x: self.x,\n            y: other.y,\n        }\n    }\n}\n\nfn main() {\n    let p1 = Point { x: 5, y: 10.4 };\n    let p2 = Point { x: \"Hello\", y: 'c' };\n\n    let p3 = p1.mixup(p2);\n\n    println!(\"p3.x = {}, p3.y = {}\", p3.x, p3.y);\n}\n```\n\nListing 10-11: A method that uses generic types different from its struct‚Äôs definition\n\nIn `main`, we‚Äôve defined a `Point` that has an `i32` for `x` (with value `5`) and an `f64` for `y` (with value `10.4`). The `p2` variable is a `Point` struct that has a string slice for `x` (with value `\"Hello\"`) and a `char` for `y` (with value `c`). Calling `mixup` on `p1` with the argument `p2` gives us `p3`, which will have an `i32` for `x` because `x` came from `p1`. The `p3` variable will have a `char` for `y` because `y` came from `p2`. The `println!` macro call will print `p3.x = 5, p3.y = c`.\n\nThe purpose of this example is to demonstrate a situation in which some generic parameters are declared with `impl` and some are declared with the method definition. Here, the generic parameters `X1` and `Y1` are declared after `impl` because they go with the struct definition. The generic parameters `X2` and `Y2` are declared after `fn mixup` because they‚Äôre only relevant to the method.\n\n### [Performance of Code Using Generics](#performance-of-code-using-generics)\n\nYou might be wondering whether there is a runtime cost when using generic type parameters. The good news is that using generic types won‚Äôt make your program run any slower than it would with concrete types.\n\nRust accomplishes this by performing monomorphization of the code using generics at compile time. _Monomorphization_ is the process of turning generic code into specific code by filling in the concrete types that are used when compiled. In this process, the compiler does the opposite of the steps we used to create the generic function in Listing 10-5: the compiler looks at all the places where generic code is called and generates code for the concrete types the generic code is called with.\n\nLet‚Äôs look at how this works by using the standard library‚Äôs generic `Option<T>` enum:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet integer = Some(5);\nlet float = Some(5.0);\n}\n```\n\nWhen Rust compiles this code, it performs monomorphization. During that process, the compiler reads the values that have been used in `Option<T>` instances and identifies two kinds of `Option<T>`: one is `i32` and the other is `f64`. As such, it expands the generic definition of `Option<T>` into two definitions specialized to `i32` and `f64`, thereby replacing the generic definition with the specific ones.\n\nThe monomorphized version of the code looks similar to the following (the compiler uses different names than what we‚Äôre using here for illustration):\n\nFilename: src/main.rs\n\n```rust\nenum Option_i32 {\n    Some(i32),\n    None,\n}\n\nenum Option_f64 {\n    Some(f64),\n    None,\n}\n\nfn main() {\n    let integer = Option_i32::Some(5);\n    let float = Option_f64::Some(5.0);\n}\n```\n\nThe generic `Option<T>` is replaced with the specific definitions created by the compiler. Because Rust compiles generic code into code that specifies the type in each instance, we pay no runtime cost for using generics. When the code runs, it performs just as it would if we had duplicated each definition by hand. The process of monomorphization makes Rust‚Äôs generics extremely efficient at runtime.\n\nA _trait_ defines the functionality a particular type has and can share with other types. We can use traits to define shared behavior in an abstract way. We can use _trait bounds_ to specify that a generic type can be any type that has certain behavior.\n\nNote: Traits are similar to a feature often called _interfaces_ in other languages, although with some differences.\n\n### [Defining a Trait](#defining-a-trait)\n\nA type‚Äôs behavior consists of the methods we can call on that type. Different types share the same behavior if we can call the same methods on all of those types. Trait definitions are a way to group method signatures together to define a set of behaviors necessary to accomplish some purpose.\n\nFor example, let‚Äôs say we have multiple structs that hold various kinds and amounts of text: a `NewsArticle` struct that holds a news story filed in a particular location and a `Tweet` that can have, at most, 280 characters along with metadata that indicates whether it was a new tweet, a retweet, or a reply to another tweet.\n\nWe want to make a media aggregator library crate named `aggregator` that can display summaries of data that might be stored in a `NewsArticle` or `Tweet` instance. To do this, we need a summary from each type, and we‚Äôll request that summary by calling a `summarize` method on an instance. Listing 10-12 shows the definition of a public `Summary` trait that expresses this behavior.\n\nFilename: src/lib.rs\n\n```rust\npub trait Summary {\n    fn summarize(&self) -> String;\n}\n```\n\nListing 10-12: A `Summary` trait that consists of the behavior provided by a `summarize` method\n\nHere, we declare a trait using the `trait` keyword and then the trait‚Äôs name, which is `Summary` in this case. We also declare the trait as `pub` so that crates depending on this crate can make use of this trait too, as we‚Äôll see in a few examples. Inside the curly brackets, we declare the method signatures that describe the behaviors of the types that implement this trait, which in this case is `fn summarize(&self) -> String`.\n\nAfter the method signature, instead of providing an implementation within curly brackets, we use a semicolon. Each type implementing this trait must provide its own custom behavior for the body of the method. The compiler will enforce that any type that has the `Summary` trait will have the method `summarize` defined with this signature exactly.\n\nA trait can have multiple methods in its body: the method signatures are listed one per line, and each line ends in a semicolon.\n\n### [Implementing a Trait on a Type](#implementing-a-trait-on-a-type)\n\nNow that we‚Äôve defined the desired signatures of the `Summary` trait‚Äôs methods, we can implement it on the types in our media aggregator. Listing 10-13 shows an implementation of the `Summary` trait on the `NewsArticle` struct that uses the headline, the author, and the location to create the return value of `summarize`. For the `Tweet` struct, we define `summarize` as the username followed by the entire text of the tweet, assuming that the tweet content is already limited to 280 characters.\n\nFilename: src/lib.rs\n\n```rust\npub trait Summary {\n    fn summarize(&self) -> String;\n}\n\npub struct NewsArticle {\n    pub headline: String,\n    pub location: String,\n    pub author: String,\n    pub content: String,\n}\n\nimpl Summary for NewsArticle {\n    fn summarize(&self) -> String {\n        format!(\"{}, by {} ({})\", self.headline, self.author, self.location)\n    }\n}\n\npub struct Tweet {\n    pub username: String,\n    pub content: String,\n    pub reply: bool,\n    pub retweet: bool,\n}\n\nimpl Summary for Tweet {\n    fn summarize(&self) -> String {\n        format!(\"{}: {}\", self.username, self.content)\n    }\n}\n```\n\nListing 10-13: Implementing the `Summary` trait on the `NewsArticle` and `Tweet` types\n\nImplementing a trait on a type is similar to implementing regular methods. The difference is that after `impl`, we put the trait name we want to implement, then use the `for` keyword, and then specify the name of the type we want to implement the trait for. Within the `impl` block, we put the method signatures that the trait definition has defined. Instead of adding a semicolon after each signature, we use curly brackets and fill in the method body with the specific behavior that we want the methods of the trait to have for the particular type.\n\nNow that the library has implemented the `Summary` trait on `NewsArticle` and `Tweet`, users of the crate can call the trait methods on instances of `NewsArticle` and `Tweet` in the same way we call regular methods. The only difference is that the user must bring the trait into scope as well as the types. Here‚Äôs an example of how a binary crate could use our `aggregator` library crate:\n\n```rust\nuse aggregator::{Summary, Tweet};\n\nfn main() {\n    let tweet = Tweet {\n        username: String::from(\"horse_ebooks\"),\n        content: String::from(\n            \"of course, as you probably already know, people\",\n        ),\n        reply: false,\n        retweet: false,\n    };\n\n    println!(\"1 new tweet: {}\", tweet.summarize());\n}\n```\n\nThis code prints `1 new tweet: horse_ebooks: of course, as you probably already know, people`.\n\nOther crates that depend on the `aggregator` crate can also bring the `Summary` trait into scope to implement `Summary` on their own types. One restriction to note is that we can implement a trait on a type only if either the trait or the type, or both, are local to our crate. For example, we can implement standard library traits like `Display` on a custom type like `Tweet` as part of our `aggregator` crate functionality because the type `Tweet` is local to our `aggregator` crate. We can also implement `Summary` on `Vec<T>` in our `aggregator` crate because the trait `Summary` is local to our `aggregator` crate.\n\nBut we can‚Äôt implement external traits on external types. For example, we can‚Äôt implement the `Display` trait on `Vec<T>` within our `aggregator` crate because `Display` and `Vec<T>` are both defined in the standard library and aren‚Äôt local to our `aggregator` crate. This restriction is part of a property called _coherence_, and more specifically the _orphan rule_, so named because the parent type is not present. This rule ensures that other people‚Äôs code can‚Äôt break your code and vice versa. Without the rule, two crates could implement the same trait for the same type, and Rust wouldn‚Äôt know which implementation to use.\n\n### [Default Implementations](#default-implementations)\n\nSometimes it‚Äôs useful to have default behavior for some or all of the methods in a trait instead of requiring implementations for all methods on every type. Then, as we implement the trait on a particular type, we can keep or override each method‚Äôs default behavior.\n\nIn Listing 10-14, we specify a default string for the `summarize` method of the `Summary` trait instead of only defining the method signature, as we did in Listing 10-12.\n\nFilename: src/lib.rs\n\n```rust\npub trait Summary {\n    fn summarize(&self) -> String {\n        String::from(\"(Read more...)\")\n    }\n}\n\npub struct NewsArticle {\n    pub headline: String,\n    pub location: String,\n    pub author: String,\n    pub content: String,\n}\n\nimpl Summary for NewsArticle {}\n\npub struct Tweet {\n    pub username: String,\n    pub content: String,\n    pub reply: bool,\n    pub retweet: bool,\n}\n\nimpl Summary for Tweet {\n    fn summarize(&self) -> String {\n        format!(\"{}: {}\", self.username, self.content)\n    }\n}\n```\n\nListing 10-14: Defining a `Summary` trait with a default implementation of the `summarize` method\n\nTo use a default implementation to summarize instances of `NewsArticle`, we specify an empty `impl` block with `impl Summary for NewsArticle {}`.\n\nEven though we‚Äôre no longer defining the `summarize` method on `NewsArticle` directly, we‚Äôve provided a default implementation and specified that `NewsArticle` implements the `Summary` trait. As a result, we can still call the `summarize` method on an instance of `NewsArticle`, like this:\n\n```rust\nuse aggregator::{self, NewsArticle, Summary};\n\nfn main() {\n    let article = NewsArticle {\n        headline: String::from(\"Penguins win the Stanley Cup Championship!\"),\n        location: String::from(\"Pittsburgh, PA, USA\"),\n        author: String::from(\"Iceburgh\"),\n        content: String::from(\n            \"The Pittsburgh Penguins once again are the best \\\n             hockey team in the NHL.\",\n        ),\n    };\n\n    println!(\"New article available! {}\", article.summarize());\n}\n```\n\nThis code prints `New article available! (Read more...)`.\n\nCreating a default implementation doesn‚Äôt require us to change anything about the implementation of `Summary` on `Tweet` in Listing 10-13. The reason is that the syntax for overriding a default implementation is the same as the syntax for implementing a trait method that doesn‚Äôt have a default implementation.\n\nDefault implementations can call other methods in the same trait, even if those other methods don‚Äôt have a default implementation. In this way, a trait can provide a lot of useful functionality and only require implementors to specify a small part of it. For example, we could define the `Summary` trait to have a `summarize_author` method whose implementation is required, and then define a `summarize` method that has a default implementation that calls the `summarize_author` method:\n\n```rust\npub trait Summary {\n    fn summarize_author(&self) -> String;\n\n    fn summarize(&self) -> String {\n        format!(\"(Read more from {}...)\", self.summarize_author())\n    }\n}\n\npub struct Tweet {\n    pub username: String,\n    pub content: String,\n    pub reply: bool,\n    pub retweet: bool,\n}\n\nimpl Summary for Tweet {\n    fn summarize_author(&self) -> String {\n        format!(\"@{}\", self.username)\n    }\n}\n```\n\nTo use this version of `Summary`, we only need to define `summarize_author` when we implement the trait on a type:\n\n```rust\npub trait Summary {\n    fn summarize_author(&self) -> String;\n\n    fn summarize(&self) -> String {\n        format!(\"(Read more from {}...)\", self.summarize_author())\n    }\n}\n\npub struct Tweet {\n    pub username: String,\n    pub content: String,\n    pub reply: bool,\n    pub retweet: bool,\n}\n\nimpl Summary for Tweet {\n    fn summarize_author(&self) -> String {\n        format!(\"@{}\", self.username)\n    }\n}\n```\n\nAfter we define `summarize_author`, we can call `summarize` on instances of the `Tweet` struct, and the default implementation of `summarize` will call the definition of `summarize_author` that we‚Äôve provided. Because we‚Äôve implemented `summarize_author`, the `Summary` trait has given us the behavior of the `summarize` method without requiring us to write any more code. Here‚Äôs what that looks like:\n\n```rust\nuse aggregator::{self, Summary, Tweet};\n\nfn main() {\n    let tweet = Tweet {\n        username: String::from(\"horse_ebooks\"),\n        content: String::from(\n            \"of course, as you probably already know, people\",\n        ),\n        reply: false,\n        retweet: false,\n    };\n\n    println!(\"1 new tweet: {}\", tweet.summarize());\n}\n```\n\nThis code prints `1 new tweet: (Read more from @horse_ebooks...)`.\n\nNote that it isn‚Äôt possible to call the default implementation from an overriding implementation of that same method.\n\n### [Traits as Parameters](#traits-as-parameters)\n\nNow that you know how to define and implement traits, we can explore how to use traits to define functions that accept many different types. We‚Äôll use the `Summary` trait we implemented on the `NewsArticle` and `Tweet` types in Listing 10-13 to define a `notify` function that calls the `summarize` method on its `item` parameter, which is of some type that implements the `Summary` trait. To do this, we use the `impl Trait` syntax, like this:\n\n```rust\npub trait Summary {\n    fn summarize(&self) -> String;\n}\n\npub struct NewsArticle {\n    pub headline: String,\n    pub location: String,\n    pub author: String,\n    pub content: String,\n}\n\nimpl Summary for NewsArticle {\n    fn summarize(&self) -> String {\n        format!(\"{}, by {} ({})\", self.headline, self.author, self.location)\n    }\n}\n\npub struct Tweet {\n    pub username: String,\n    pub content: String,\n    pub reply: bool,\n    pub retweet: bool,\n}\n\nimpl Summary for Tweet {\n    fn summarize(&self) -> String {\n        format!(\"{}: {}\", self.username, self.content)\n    }\n}\n\npub fn notify(item: &impl Summary) {\n    println!(\"Breaking news! {}\", item.summarize());\n}\n```\n\nInstead of a concrete type for the `item` parameter, we specify the `impl` keyword and the trait name. This parameter accepts any type that implements the specified trait. In the body of `notify`, we can call any methods on `item` that come from the `Summary` trait, such as `summarize`. We can call `notify` and pass in any instance of `NewsArticle` or `Tweet`. Code that calls the function with any other type, such as a `String` or an `i32`, won‚Äôt compile because those types don‚Äôt implement `Summary`.\n\n#### [Trait Bound Syntax](#trait-bound-syntax)\n\nThe `impl Trait` syntax works for straightforward cases but is actually syntax sugar for a longer form known as a _trait bound_; it looks like this:\n\n```rust\npub fn notify<T: Summary>(item: &T) {\n    println!(\"Breaking news! {}\", item.summarize());\n}\n```\n\nThis longer form is equivalent to the example in the previous section but is more verbose. We place trait bounds with the declaration of the generic type parameter after a colon and inside angle brackets.\n\nThe `impl Trait` syntax is convenient and makes for more concise code in simple cases, while the fuller trait bound syntax can express more complexity in other cases. For example, we can have two parameters that implement `Summary`. Doing so with the `impl Trait` syntax looks like this:\n\n```rust\npub fn notify(item1: &impl Summary, item2: &impl Summary) {\n```\n\nUsing `impl Trait` is appropriate if we want this function to allow `item1` and `item2` to have different types (as long as both types implement `Summary`). If we want to force both parameters to have the same type, however, we must use a trait bound, like this:\n\n```rust\npub fn notify<T: Summary>(item1: &T, item2: &T) {\n```\n\nThe generic type `T` specified as the type of the `item1` and `item2` parameters constrains the function such that the concrete type of the value passed as an argument for `item1` and `item2` must be the same.\n\n#### [Specifying Multiple Trait Bounds with the `+` Syntax](#specifying-multiple-trait-bounds-with-the--syntax)\n\nWe can also specify more than one trait bound. Say we wanted `notify` to use display formatting as well as `summarize` on `item`: we specify in the `notify` definition that `item` must implement both `Display` and `Summary`. We can do so using the `+` syntax:\n\n```rust\npub fn notify(item: &(impl Summary + Display)) {\n```\n\nThe `+` syntax is also valid with trait bounds on generic types:\n\n```rust\npub fn notify<T: Summary + Display>(item: &T) {\n```\n\nWith the two trait bounds specified, the body of `notify` can call `summarize` and use `{}` to format `item`.\n\n#### [Clearer Trait Bounds with `where` Clauses](#clearer-trait-bounds-with-where-clauses)\n\nUsing too many trait bounds has its downsides. Each generic has its own trait bounds, so functions with multiple generic type parameters can contain lots of trait bound information between the function‚Äôs name and its parameter list, making the function signature hard to read. For this reason, Rust has alternate syntax for specifying trait bounds inside a `where` clause after the function signature. So, instead of writing this:\n\n```rust\nfn some_function<T: Display + Clone, U: Clone + Debug>(t: &T, u: &U) -> i32 {\n```\n\nwe can use a `where` clause, like this:\n\n```rust\nfn some_function<T, U>(t: &T, u: &U) -> i32\nwhere\n    T: Display + Clone,\n    U: Clone + Debug,\n{\n    unimplemented!()\n}\n```\n\nThis function‚Äôs signature is less cluttered: the function name, parameter list, and return type are close together, similar to a function without lots of trait bounds.\n\n### [Returning Types That Implement Traits](#returning-types-that-implement-traits)\n\nWe can also use the `impl Trait` syntax in the return position to return a value of some type that implements a trait, as shown here:\n\n```rust\npub trait Summary {\n    fn summarize(&self) -> String;\n}\n\npub struct NewsArticle {\n    pub headline: String,\n    pub location: String,\n    pub author: String,\n    pub content: String,\n}\n\nimpl Summary for NewsArticle {\n    fn summarize(&self) -> String {\n        format!(\"{}, by {} ({})\", self.headline, self.author, self.location)\n    }\n}\n\npub struct Tweet {\n    pub username: String,\n    pub content: String,\n    pub reply: bool,\n    pub retweet: bool,\n}\n\nimpl Summary for Tweet {\n    fn summarize(&self) -> String {\n        format!(\"{}: {}\", self.username, self.content)\n    }\n}\n\nfn returns_summarizable() -> impl Summary {\n    Tweet {\n        username: String::from(\"horse_ebooks\"),\n        content: String::from(\n            \"of course, as you probably already know, people\",\n        ),\n        reply: false,\n        retweet: false,\n    }\n}\n```\n\nBy using `impl Summary` for the return type, we specify that the `returns_summarizable` function returns some type that implements the `Summary` trait without naming the concrete type. In this case, `returns_summarizable` returns a `Tweet`, but the code calling this function doesn‚Äôt need to know that.\n\nThe ability to specify a return type only by the trait it implements is especially useful in the context of closures and iterators, which we cover in Chapter 13. Closures and iterators create types that only the compiler knows or types that are very long to specify. The `impl Trait` syntax lets you concisely specify that a function returns some type that implements the `Iterator` trait without needing to write out a very long type.\n\nHowever, you can only use `impl Trait` if you‚Äôre returning a single type. For example, this code that returns either a `NewsArticle` or a `Tweet` with the return type specified as `impl Summary` wouldn‚Äôt work:\n\n```rust\npub trait Summary {\n    fn summarize(&self) -> String;\n}\n\npub struct NewsArticle {\n    pub headline: String,\n    pub location: String,\n    pub author: String,\n    pub content: String,\n}\n\nimpl Summary for NewsArticle {\n    fn summarize(&self) -> String {\n        format!(\"{}, by {} ({})\", self.headline, self.author, self.location)\n    }\n}\n\npub struct Tweet {\n    pub username: String,\n    pub content: String,\n    pub reply: bool,\n    pub retweet: bool,\n}\n\nimpl Summary for Tweet {\n    fn summarize(&self) -> String {\n        format!(\"{}: {}\", self.username, self.content)\n    }\n}\n\nfn returns_summarizable(switch: bool) -> impl Summary {\n    if switch {\n        NewsArticle {\n            headline: String::from(\n                \"Penguins win the Stanley Cup Championship!\",\n            ),\n            location: String::from(\"Pittsburgh, PA, USA\"),\n            author: String::from(\"Iceburgh\"),\n            content: String::from(\n                \"The Pittsburgh Penguins once again are the best \\\n                 hockey team in the NHL.\",\n            ),\n        }\n    } else {\n        Tweet {\n            username: String::from(\"horse_ebooks\"),\n            content: String::from(\n                \"of course, as you probably already know, people\",\n            ),\n            reply: false,\n            retweet: false,\n        }\n    }\n}\n```\n\nReturning either a `NewsArticle` or a `Tweet` isn‚Äôt allowed due to restrictions around how the `impl Trait` syntax is implemented in the compiler. We‚Äôll cover how to write a function with this behavior in the [‚ÄúUsing Trait Objects That Allow for Values of Different Types‚Äù](about:blank/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types) section of Chapter 17.\n\n### [Using Trait Bounds to Conditionally Implement Methods](#using-trait-bounds-to-conditionally-implement-methods)\n\nBy using a trait bound with an `impl` block that uses generic type parameters, we can implement methods conditionally for types that implement the specified traits. For example, the type `Pair<T>` in Listing 10-15 always implements the `new` function to return a new instance of `Pair<T>` (recall from the [‚ÄúDefining Methods‚Äù](about:blank/ch05-03-method-syntax.html#defining-methods) section of Chapter 5 that `Self` is a type alias for the type of the `impl` block, which in this case is `Pair<T>`). But in the next `impl` block, `Pair<T>` only implements the `cmp_display` method if its inner type `T` implements the `PartialOrd` trait that enables comparison _and_ the `Display` trait that enables printing.\n\nFilename: src/lib.rs\n\n```rust\nuse std::fmt::Display;\n\nstruct Pair<T> {\n    x: T,\n    y: T,\n}\n\nimpl<T> Pair<T> {\n    fn new(x: T, y: T) -> Self {\n        Self { x, y }\n    }\n}\n\nimpl<T: Display + PartialOrd> Pair<T> {\n    fn cmp_display(&self) {\n        if self.x >= self.y {\n            println!(\"The largest member is x = {}\", self.x);\n        } else {\n            println!(\"The largest member is y = {}\", self.y);\n        }\n    }\n}\n```\n\nListing 10-15: Conditionally implementing methods on a generic type depending on trait bounds\n\nWe can also conditionally implement a trait for any type that implements another trait. Implementations of a trait on any type that satisfies the trait bounds are called _blanket implementations_ and are used extensively in the Rust standard library. For example, the standard library implements the `ToString` trait on any type that implements the `Display` trait. The `impl` block in the standard library looks similar to this code:\n\n```rust\nimpl<T: Display> ToString for T {\n    // --snip--\n}\n```\n\nBecause the standard library has this blanket implementation, we can call the `to_string` method defined by the `ToString` trait on any type that implements the `Display` trait. For example, we can turn integers into their corresponding `String` values like this because integers implement `Display`:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet s = 3.to_string();\n}\n```\n\nBlanket implementations appear in the documentation for the trait in the ‚ÄúImplementors‚Äù section.\n\nTraits and trait bounds let us write code that uses generic type parameters to reduce duplication but also specify to the compiler that we want the generic type to have particular behavior. The compiler can then use the trait bound information to check that all the concrete types used with our code provide the correct behavior. In dynamically typed languages, we would get an error at runtime if we called a method on a type which didn‚Äôt define the method. But Rust moves these errors to compile time so we‚Äôre forced to fix the problems before our code is even able to run. Additionally, we don‚Äôt have to write code that checks for behavior at runtime because we‚Äôve already checked at compile time. Doing so improves performance without having to give up the flexibility of generics.\n\n## [Validating References with Lifetimes](#validating-references-with-lifetimes)\n\nLifetimes are another kind of generic that we‚Äôve already been using. Rather than ensuring that a type has the behavior we want, lifetimes ensure that references are valid as long as we need them to be.\n\nOne detail we didn‚Äôt discuss in the [‚ÄúReferences and Borrowing‚Äù](about:blank/ch04-02-references-and-borrowing.html#references-and-borrowing) section in Chapter 4 is that every reference in Rust has a _lifetime_, which is the scope for which that reference is valid. Most of the time, lifetimes are implicit and inferred, just like most of the time, types are inferred. We must annotate types only when multiple types are possible. In a similar way, we must annotate lifetimes when the lifetimes of references could be related in a few different ways. Rust requires us to annotate the relationships using generic lifetime parameters to ensure the actual references used at runtime will definitely be valid.\n\nAnnotating lifetimes is not a concept most other programming languages have, so this is going to feel unfamiliar. Although we won‚Äôt cover lifetimes in their entirety in this chapter, we‚Äôll discuss common ways you might encounter lifetime syntax so you can get comfortable with the concept.\n\n### [Preventing Dangling References with Lifetimes](#preventing-dangling-references-with-lifetimes)\n\nThe main aim of lifetimes is to prevent _dangling references_, which cause a program to reference data other than the data it‚Äôs intended to reference. Consider the program in Listing 10-16, which has an outer scope and an inner scope.\n\n```rust\nfn main() {\n    let r;\n\n    {\n        let x = 5;\n        r = &x;\n    }\n\n    println!(\"r: {r}\");\n}\n```\n\nListing 10-16: An attempt to use a reference whose value has gone out of scope\n\nNote: The examples in Listing 10-16, 10-17, and 10-23 declare variables without giving them an initial value, so the variable name exists in the outer scope. At first glance, this might appear to be in conflict with Rust‚Äôs having no null values. However, if we try to use a variable before giving it a value, we‚Äôll get a compile-time error, which shows that Rust indeed does not allow null values.\n\nThe outer scope declares a variable named `r` with no initial value, and the inner scope declares a variable named `x` with the initial value of `5`. Inside the inner scope, we attempt to set the value of `r` as a reference to `x`. Then the inner scope ends, and we attempt to print the value in `r`. This code won‚Äôt compile because the value that `r` is referring to has gone out of scope before we try to use it. Here is the error message:\n\n```console\n$ cargo run\n   Compiling chapter10 v0.1.0 (file:///projects/chapter10)\nerror[E0597]: `x` does not live long enough\n --> src/main.rs:6:13\n  |\n5 |         let x = 5;\n  |             - binding `x` declared here\n6 |         r = &x;\n  |             ^^ borrowed value does not live long enough\n7 |     }\n  |     - `x` dropped here while still borrowed\n8 |\n9 |     println!(\"r: {r}\");\n  |                  --- borrow later used here\n\nFor more information about this error, try `rustc --explain E0597`.\nerror: could not compile `chapter10` (bin \"chapter10\") due to 1 previous error\n\n```\n\nThe error message says that the variable `x` ‚Äúdoes not live long enough.‚Äù The reason is that `x` will be out of scope when the inner scope ends on line 7. But `r` is still valid for the outer scope; because its scope is larger, we say that it ‚Äúlives longer.‚Äù If Rust allowed this code to work, `r` would be referencing memory that was deallocated when `x` went out of scope, and anything we tried to do with `r` wouldn‚Äôt work correctly. So how does Rust determine that this code is invalid? It uses a borrow checker.\n\n### [The Borrow Checker](#the-borrow-checker)\n\nThe Rust compiler has a _borrow checker_ that compares scopes to determine whether all borrows are valid. Listing 10-17 shows the same code as Listing 10-16 but with annotations showing the lifetimes of the variables.\n\n```rust\nfn main() {\n    let r;                // ---------+-- 'a\n                          //          |\n    {                     //          |\n        let x = 5;        // -+-- 'b  |\n        r = &x;           //  |       |\n    }                     // -+       |\n                          //          |\n    println!(\"r: {r}\");   //          |\n}                         // ---------+\n```\n\nListing 10-17: Annotations of the lifetimes of `r` and `x`, named `'a` and `'b`, respectively\n\nHere, we‚Äôve annotated the lifetime of `r` with `'a` and the lifetime of `x` with `'b`. As you can see, the inner `'b` block is much smaller than the outer `'a` lifetime block. At compile time, Rust compares the size of the two lifetimes and sees that `r` has a lifetime of `'a` but that it refers to memory with a lifetime of `'b`. The program is rejected because `'b` is shorter than `'a`: the subject of the reference doesn‚Äôt live as long as the reference.\n\nListing 10-18 fixes the code so it doesn‚Äôt have a dangling reference and it compiles without any errors.\n\n```rust\nfn main() {\n    let x = 5;            // ----------+-- 'b\n                          //           |\n    let r = &x;           // --+-- 'a  |\n                          //   |       |\n    println!(\"r: {r}\");   //   |       |\n                          // --+       |\n}                         // ----------+\n```\n\nListing 10-18: A valid reference because the data has a longer lifetime than the reference\n\nHere, `x` has the lifetime `'b`, which in this case is larger than `'a`. This means `r` can reference `x` because Rust knows that the reference in `r` will always be valid while `x` is valid.\n\nNow that you know what the lifetimes of references are and how Rust analyzes lifetimes to ensure references will always be valid, let‚Äôs explore generic lifetimes of parameters and return values in the context of functions.\n\n### [Generic Lifetimes in Functions](#generic-lifetimes-in-functions)\n\nWe‚Äôll write a function that returns the longer of two string slices. This function will take two string slices and return a single string slice. After we‚Äôve implemented the `longest` function, the code in Listing 10-19 should print `The longest string is abcd`.\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let string1 = String::from(\"abcd\");\n    let string2 = \"xyz\";\n\n    let result = longest(string1.as_str(), string2);\n    println!(\"The longest string is {result}\");\n}\n```\n\nListing 10-19: A `main` function that calls the `longest` function to find the longer of two string slices\n\nNote that we want the function to take string slices, which are references, rather than strings, because we don‚Äôt want the `longest` function to take ownership of its parameters. Refer to the [‚ÄúString Slices as Parameters‚Äù](about:blank/ch04-03-slices.html#string-slices-as-parameters) section in Chapter 4 for more discussion about why the parameters we use in Listing 10-19 are the ones we want.\n\nIf we try to implement the `longest` function as shown in Listing 10-20, it won‚Äôt compile.\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let string1 = String::from(\"abcd\");\n    let string2 = \"xyz\";\n\n    let result = longest(string1.as_str(), string2);\n    println!(\"The longest string is {result}\");\n}\n\nfn longest(x: &str, y: &str) -> &str {\n    if x.len() > y.len() {\n        x\n    } else {\n        y\n    }\n}\n```\n\nListing 10-20: An implementation of the `longest` function that returns the longer of two string slices but does not yet compile\n\nInstead, we get the following error that talks about lifetimes:\n\n```console\n$ cargo run\n   Compiling chapter10 v0.1.0 (file:///projects/chapter10)\nerror[E0106]: missing lifetime specifier\n --> src/main.rs:9:33\n  |\n9 | fn longest(x: &str, y: &str) -> &str {\n  |               ----     ----     ^ expected named lifetime parameter\n  |\n  = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `x` or `y`\nhelp: consider introducing a named lifetime parameter\n  |\n9 | fn longest<'a>(x: &'a str, y: &'a str) -> &'a str {\n  |           ++++     ++          ++          ++\n\nerror: lifetime may not live long enough\n  --> src/main.rs:11:9\n   |\n9  | fn longest(x: &str, y: &str) -> &str {\n   |               - let's call the lifetime of this reference `'1`\n10 |     if x.len() > y.len() {\n11 |         x\n   |         ^ returning this value requires that `'1` must outlive `'static`\n\nerror: lifetime may not live long enough\n  --> src/main.rs:13:9\n   |\n9  | fn longest(x: &str, y: &str) -> &str {\n   |                        - let's call the lifetime of this reference `'2`\n...\n13 |         y\n   |         ^ returning this value requires that `'2` must outlive `'static`\n\nFor more information about this error, try `rustc --explain E0106`.\nerror: could not compile `chapter10` (bin \"chapter10\") due to 3 previous errors\n\n```\n\nThe help text reveals that the return type needs a generic lifetime parameter on it because Rust can‚Äôt tell whether the reference being returned refers to `x` or `y`. Actually, we don‚Äôt know either, because the `if` block in the body of this function returns a reference to `x` and the `else` block returns a reference to `y`!\n\nWhen we‚Äôre defining this function, we don‚Äôt know the concrete values that will be passed into this function, so we don‚Äôt know whether the `if` case or the `else` case will execute. We also don‚Äôt know the concrete lifetimes of the references that will be passed in, so we can‚Äôt look at the scopes as we did in Listings 10-17 and 10-18 to determine whether the reference we return will always be valid. The borrow checker can‚Äôt determine this either, because it doesn‚Äôt know how the lifetimes of `x` and `y` relate to the lifetime of the return value. To fix this error, we‚Äôll add generic lifetime parameters that define the relationship between the references so the borrow checker can perform its analysis.\n\n### [Lifetime Annotation Syntax](#lifetime-annotation-syntax)\n\nLifetime annotations don‚Äôt change how long any of the references live. Rather, they describe the relationships of the lifetimes of multiple references to each other without affecting the lifetimes. Just as functions can accept any type when the signature specifies a generic type parameter, functions can accept references with any lifetime by specifying a generic lifetime parameter.\n\nLifetime annotations have a slightly unusual syntax: the names of lifetime parameters must start with an apostrophe (`'`) and are usually all lowercase and very short, like generic types. Most people use the name `'a` for the first lifetime annotation. We place lifetime parameter annotations after the `&` of a reference, using a space to separate the annotation from the reference‚Äôs type.\n\nHere are some examples: a reference to an `i32` without a lifetime parameter, a reference to an `i32` that has a lifetime parameter named `'a`, and a mutable reference to an `i32` that also has the lifetime `'a`.\n\n```rust\n&i32        // a reference\n&'a i32     // a reference with an explicit lifetime\n&'a mut i32 // a mutable reference with an explicit lifetime\n```\n\nOne lifetime annotation by itself doesn‚Äôt have much meaning because the annotations are meant to tell Rust how generic lifetime parameters of multiple references relate to each other. Let‚Äôs examine how the lifetime annotations relate to each other in the context of the `longest` function.\n\n### [Lifetime Annotations in Function Signatures](#lifetime-annotations-in-function-signatures)\n\nTo use lifetime annotations in function signatures, we need to declare the generic _lifetime_ parameters inside angle brackets between the function name and the parameter list, just as we did with generic _type_ parameters.\n\nWe want the signature to express the following constraint: the returned reference will be valid as long as both the parameters are valid. This is the relationship between lifetimes of the parameters and the return value. We‚Äôll name the lifetime `'a` and then add it to each reference, as shown in Listing 10-21.\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let string1 = String::from(\"abcd\");\n    let string2 = \"xyz\";\n\n    let result = longest(string1.as_str(), string2);\n    println!(\"The longest string is {result}\");\n}\n\nfn longest<'a>(x: &'a str, y: &'a str) -> &'a str {\n    if x.len() > y.len() {\n        x\n    } else {\n        y\n    }\n}\n```\n\nListing 10-21: The `longest` function definition specifying that all the references in the signature must have the same lifetime `'a`\n\nThis code should compile and produce the result we want when we use it with the `main` function in Listing 10-19.\n\nThe function signature now tells Rust that for some lifetime `'a`, the function takes two parameters, both of which are string slices that live at least as long as lifetime `'a`. The function signature also tells Rust that the string slice returned from the function will live at least as long as lifetime `'a`. In practice, it means that the lifetime of the reference returned by the `longest` function is the same as the smaller of the lifetimes of the values referred to by the function arguments. These relationships are what we want Rust to use when analyzing this code.\n\nRemember, when we specify the lifetime parameters in this function signature, we‚Äôre not changing the lifetimes of any values passed in or returned. Rather, we‚Äôre specifying that the borrow checker should reject any values that don‚Äôt adhere to these constraints. Note that the `longest` function doesn‚Äôt need to know exactly how long `x` and `y` will live, only that some scope can be substituted for `'a` that will satisfy this signature.\n\nWhen annotating lifetimes in functions, the annotations go in the function signature, not in the function body. The lifetime annotations become part of the contract of the function, much like the types in the signature. Having function signatures contain the lifetime contract means the analysis the Rust compiler does can be simpler. If there‚Äôs a problem with the way a function is annotated or the way it is called, the compiler errors can point to the part of our code and the constraints more precisely. If, instead, the Rust compiler made more inferences about what we intended the relationships of the lifetimes to be, the compiler might only be able to point to a use of our code many steps away from the cause of the problem.\n\nWhen we pass concrete references to `longest`, the concrete lifetime that is substituted for `'a` is the part of the scope of `x` that overlaps with the scope of `y`. In other words, the generic lifetime `'a` will get the concrete lifetime that is equal to the smaller of the lifetimes of `x` and `y`. Because we‚Äôve annotated the returned reference with the same lifetime parameter `'a`, the returned reference will also be valid for the length of the smaller of the lifetimes of `x` and `y`.\n\nLet‚Äôs look at how the lifetime annotations restrict the `longest` function by passing in references that have different concrete lifetimes. Listing 10-22 is a straightforward example.\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let string1 = String::from(\"long string is long\");\n\n    {\n        let string2 = String::from(\"xyz\");\n        let result = longest(string1.as_str(), string2.as_str());\n        println!(\"The longest string is {result}\");\n    }\n}\n\nfn longest<'a>(x: &'a str, y: &'a str) -> &'a str {\n    if x.len() > y.len() {\n        x\n    } else {\n        y\n    }\n}\n```\n\nListing 10-22: Using the `longest` function with references to `String` values that have different concrete lifetimes\n\nIn this example, `string1` is valid until the end of the outer scope, `string2` is valid until the end of the inner scope, and `result` references something that is valid until the end of the inner scope. Run this code and you‚Äôll see that the borrow checker approves; it will compile and print `The longest string is long string is long`.\n\nNext, let‚Äôs try an example that shows that the lifetime of the reference in `result` must be the smaller lifetime of the two arguments. We‚Äôll move the declaration of the `result` variable outside the inner scope but leave the assignment of the value to the `result` variable inside the scope with `string2`. Then we‚Äôll move the `println!` that uses `result` to outside the inner scope, after the inner scope has ended. The code in Listing 10-23 will not compile.\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let string1 = String::from(\"long string is long\");\n    let result;\n    {\n        let string2 = String::from(\"xyz\");\n        result = longest(string1.as_str(), string2.as_str());\n    }\n    println!(\"The longest string is {result}\");\n}\n\nfn longest<'a>(x: &'a str, y: &'a str) -> &'a str {\n    if x.len() > y.len() {\n        x\n    } else {\n        y\n    }\n}\n```\n\nListing 10-23: Attempting to use `result` after `string2` has gone out of scope\n\nWhen we try to compile this code, we get this error:\n\n```console\n$ cargo run\n   Compiling chapter10 v0.1.0 (file:///projects/chapter10)\nerror[E0597]: `string2` does not live long enough\n --> src/main.rs:6:44\n  |\n5 |         let string2 = String::from(\"xyz\");\n  |             ------- binding `string2` declared here\n6 |         result = longest(string1.as_str(), string2.as_str());\n  |                                            ^^^^^^^ borrowed value does not live long enough\n7 |     }\n  |     - `string2` dropped here while still borrowed\n8 |     println!(\"The longest string is {result}\");\n  |                                     -------- borrow later used here\n\nFor more information about this error, try `rustc --explain E0597`.\nerror: could not compile `chapter10` (bin \"chapter10\") due to 1 previous error\n\n```\n\nThe error shows that for `result` to be valid for the `println!` statement, `string2` would need to be valid until the end of the outer scope. Rust knows this because we annotated the lifetimes of the function parameters and return values using the same lifetime parameter `'a`.\n\nAs humans, we can look at this code and see that `string1` is longer than `string2`, and therefore, `result` will contain a reference to `string1`. Because `string1` has not gone out of scope yet, a reference to `string1` will still be valid for the `println!` statement. However, the compiler can‚Äôt see that the reference is valid in this case. We‚Äôve told Rust that the lifetime of the reference returned by the `longest` function is the same as the smaller of the lifetimes of the references passed in. Therefore, the borrow checker disallows the code in Listing 10-23 as possibly having an invalid reference.\n\nTry designing more experiments that vary the values and lifetimes of the references passed in to the `longest` function and how the returned reference is used. Make hypotheses about whether or not your experiments will pass the borrow checker before you compile; then check to see if you‚Äôre right!\n\n### [Thinking in Terms of Lifetimes](#thinking-in-terms-of-lifetimes)\n\nThe way in which you need to specify lifetime parameters depends on what your function is doing. For example, if we changed the implementation of the `longest` function to always return the first parameter rather than the longest string slice, we wouldn‚Äôt need to specify a lifetime on the `y` parameter. The following code will compile:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let string1 = String::from(\"abcd\");\n    let string2 = \"efghijklmnopqrstuvwxyz\";\n\n    let result = longest(string1.as_str(), string2);\n    println!(\"The longest string is {result}\");\n}\n\nfn longest<'a>(x: &'a str, y: &str) -> &'a str {\n    x\n}\n```\n\nWe‚Äôve specified a lifetime parameter `'a` for the parameter `x` and the return type, but not for the parameter `y`, because the lifetime of `y` does not have any relationship with the lifetime of `x` or the return value.\n\nWhen returning a reference from a function, the lifetime parameter for the return type needs to match the lifetime parameter for one of the parameters. If the reference returned does _not_ refer to one of the parameters, it must refer to a value created within this function. However, this would be a dangling reference because the value will go out of scope at the end of the function. Consider this attempted implementation of the `longest` function that won‚Äôt compile:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let string1 = String::from(\"abcd\");\n    let string2 = \"xyz\";\n\n    let result = longest(string1.as_str(), string2);\n    println!(\"The longest string is {result}\");\n}\n\nfn longest<'a>(x: &str, y: &str) -> &'a str {\n    let result = String::from(\"really long string\");\n    result.as_str()\n}\n```\n\nHere, even though we‚Äôve specified a lifetime parameter `'a` for the return type, this implementation will fail to compile because the return value lifetime is not related to the lifetime of the parameters at all. Here is the error message we get:\n\n```console\n$ cargo run\n   Compiling chapter10 v0.1.0 (file:///projects/chapter10)\nerror[E0515]: cannot return value referencing local variable `result`\n  --> src/main.rs:11:5\n   |\n11 |     result.as_str()\n   |     ------^^^^^^^^^\n   |     |\n   |     returns a value referencing data owned by the current function\n   |     `result` is borrowed here\n\nFor more information about this error, try `rustc --explain E0515`.\nerror: could not compile `chapter10` (bin \"chapter10\") due to 1 previous error\n\n```\n\nThe problem is that `result` goes out of scope and gets cleaned up at the end of the `longest` function. We‚Äôre also trying to return a reference to `result` from the function. There is no way we can specify lifetime parameters that would change the dangling reference, and Rust won‚Äôt let us create a dangling reference. In this case, the best fix would be to return an owned data type rather than a reference so the calling function is then responsible for cleaning up the value.\n\nUltimately, lifetime syntax is about connecting the lifetimes of various parameters and return values of functions. Once they‚Äôre connected, Rust has enough information to allow memory-safe operations and disallow operations that would create dangling pointers or otherwise violate memory safety.\n\n### [Lifetime Annotations in Struct Definitions](#lifetime-annotations-in-struct-definitions)\n\nSo far, the structs we‚Äôve defined all hold owned types. We can define structs to hold references, but in that case we would need to add a lifetime annotation on every reference in the struct‚Äôs definition. Listing 10-24 has a struct named `ImportantExcerpt` that holds a string slice.\n\nFilename: src/main.rs\n\n```rust\nstruct ImportantExcerpt<'a> {\n    part: &'a str,\n}\n\nfn main() {\n    let novel = String::from(\"Call me Ishmael. Some years ago...\");\n    let first_sentence = novel.split('.').next().unwrap();\n    let i = ImportantExcerpt {\n        part: first_sentence,\n    };\n}\n```\n\nListing 10-24: A struct that holds a reference, requiring a lifetime annotation\n\nThis struct has the single field `part` that holds a string slice, which is a reference. As with generic data types, we declare the name of the generic lifetime parameter inside angle brackets after the name of the struct so we can use the lifetime parameter in the body of the struct definition. This annotation means an instance of `ImportantExcerpt` can‚Äôt outlive the reference it holds in its `part` field.\n\nThe `main` function here creates an instance of the `ImportantExcerpt` struct that holds a reference to the first sentence of the `String` owned by the variable `novel`. The data in `novel` exists before the `ImportantExcerpt` instance is created. In addition, `novel` doesn‚Äôt go out of scope until after the `ImportantExcerpt` goes out of scope, so the reference in the `ImportantExcerpt` instance is valid.\n\n### [Lifetime Elision](#lifetime-elision)\n\nYou‚Äôve learned that every reference has a lifetime and that you need to specify lifetime parameters for functions or structs that use references. However, we had a function in Listing 4-9, shown again in Listing 10-25, that compiled without lifetime annotations.\n\nFilename: src/lib.rs\n\n```rust\nfn first_word(s: &str) -> &str {\n    let bytes = s.as_bytes();\n\n    for (i, &item) in bytes.iter().enumerate() {\n        if item == b' ' {\n            return &s[0..i];\n        }\n    }\n\n    &s[..]\n}\n\nfn main() {\n    let my_string = String::from(\"hello world\");\n\n    // first_word works on slices of `String`s\n    let word = first_word(&my_string[..]);\n\n    let my_string_literal = \"hello world\";\n\n    // first_word works on slices of string literals\n    let word = first_word(&my_string_literal[..]);\n\n    // Because string literals *are* string slices already,\n    // this works too, without the slice syntax!\n    let word = first_word(my_string_literal);\n}\n```\n\nListing 10-25: A function we defined in Listing 4-9 that compiled without lifetime annotations, even though the parameter and return type are references\n\nThe reason this function compiles without lifetime annotations is historical: in early versions (pre-1.0) of Rust, this code wouldn‚Äôt have compiled because every reference needed an explicit lifetime. At that time, the function signature would have been written like this:\n\n```rust\nfn first_word<'a>(s: &'a str) -> &'a str {\n```\n\nAfter writing a lot of Rust code, the Rust team found that Rust programmers were entering the same lifetime annotations over and over in particular situations. These situations were predictable and followed a few deterministic patterns. The developers programmed these patterns into the compiler‚Äôs code so the borrow checker could infer the lifetimes in these situations and wouldn‚Äôt need explicit annotations.\n\nThis piece of Rust history is relevant because it‚Äôs possible that more deterministic patterns will emerge and be added to the compiler. In the future, even fewer lifetime annotations might be required.\n\nThe patterns programmed into Rust‚Äôs analysis of references are called the _lifetime elision rules_. These aren‚Äôt rules for programmers to follow; they‚Äôre a set of particular cases that the compiler will consider, and if your code fits these cases, you don‚Äôt need to write the lifetimes explicitly.\n\nThe elision rules don‚Äôt provide full inference. If there is still ambiguity as to what lifetimes the references have after Rust applies the rules, the compiler won‚Äôt guess what the lifetime of the remaining references should be. Instead of guessing, the compiler will give you an error that you can resolve by adding the lifetime annotations.\n\nLifetimes on function or method parameters are called _input lifetimes_, and lifetimes on return values are called _output lifetimes_.\n\nThe compiler uses three rules to figure out the lifetimes of the references when there aren‚Äôt explicit annotations. The first rule applies to input lifetimes, and the second and third rules apply to output lifetimes. If the compiler gets to the end of the three rules and there are still references for which it can‚Äôt figure out lifetimes, the compiler will stop with an error. These rules apply to `fn` definitions as well as `impl` blocks.\n\nThe first rule is that the compiler assigns a lifetime parameter to each parameter that‚Äôs a reference. In other words, a function with one parameter gets one lifetime parameter: `fn foo<'a>(x: &'a i32)`; a function with two parameters gets two separate lifetime parameters: `fn foo<'a, 'b>(x: &'a i32, y: &'b i32)`; and so on.\n\nThe second rule is that, if there is exactly one input lifetime parameter, that lifetime is assigned to all output lifetime parameters: `fn foo<'a>(x: &'a i32) -> &'a i32`.\n\nThe third rule is that, if there are multiple input lifetime parameters, but one of them is `&self` or `&mut self` because this is a method, the lifetime of `self` is assigned to all output lifetime parameters. This third rule makes methods much nicer to read and write because fewer symbols are necessary.\n\nLet‚Äôs pretend we‚Äôre the compiler. We‚Äôll apply these rules to figure out the lifetimes of the references in the signature of the `first_word` function in Listing 10-25. The signature starts without any lifetimes associated with the references:\n\n```rust\nfn first_word(s: &str) -> &str {\n```\n\nThen the compiler applies the first rule, which specifies that each parameter gets its own lifetime. We‚Äôll call it `'a` as usual, so now the signature is this:\n\n```rust\nfn first_word<'a>(s: &'a str) -> &str {\n```\n\nThe second rule applies because there is exactly one input lifetime. The second rule specifies that the lifetime of the one input parameter gets assigned to the output lifetime, so the signature is now this:\n\n```rust\nfn first_word<'a>(s: &'a str) -> &'a str {\n```\n\nNow all the references in this function signature have lifetimes, and the compiler can continue its analysis without needing the programmer to annotate the lifetimes in this function signature.\n\nLet‚Äôs look at another example, this time using the `longest` function that had no lifetime parameters when we started working with it in Listing 10-20:\n\n```rust\nfn longest(x: &str, y: &str) -> &str {\n```\n\nLet‚Äôs apply the first rule: each parameter gets its own lifetime. This time we have two parameters instead of one, so we have two lifetimes:\n\n```rust\nfn longest<'a, 'b>(x: &'a str, y: &'b str) -> &str {\n```\n\nYou can see that the second rule doesn‚Äôt apply because there is more than one input lifetime. The third rule doesn‚Äôt apply either, because `longest` is a function rather than a method, so none of the parameters are `self`. After working through all three rules, we still haven‚Äôt figured out what the return type‚Äôs lifetime is. This is why we got an error trying to compile the code in Listing 10-20: the compiler worked through the lifetime elision rules but still couldn‚Äôt figure out all the lifetimes of the references in the signature.\n\nBecause the third rule really only applies in method signatures, we‚Äôll look at lifetimes in that context next to see why the third rule means we don‚Äôt have to annotate lifetimes in method signatures very often.\n\n### [Lifetime Annotations in Method Definitions](#lifetime-annotations-in-method-definitions)\n\nWhen we implement methods on a struct with lifetimes, we use the same syntax as that of generic type parameters shown in Listing 10-11. Where we declare and use the lifetime parameters depends on whether they‚Äôre related to the struct fields or the method parameters and return values.\n\nLifetime names for struct fields always need to be declared after the `impl` keyword and then used after the struct‚Äôs name because those lifetimes are part of the struct‚Äôs type.\n\nIn method signatures inside the `impl` block, references might be tied to the lifetime of references in the struct‚Äôs fields, or they might be independent. In addition, the lifetime elision rules often make it so that lifetime annotations aren‚Äôt necessary in method signatures. Let‚Äôs look at some examples using the struct named `ImportantExcerpt` that we defined in Listing 10-24.\n\nFirst we‚Äôll use a method named `level` whose only parameter is a reference to `self` and whose return value is an `i32`, which is not a reference to anything:\n\n```rust\nstruct ImportantExcerpt<'a> {\n    part: &'a str,\n}\n\nimpl<'a> ImportantExcerpt<'a> {\n    fn level(&self) -> i32 {\n        3\n    }\n}\n\nimpl<'a> ImportantExcerpt<'a> {\n    fn announce_and_return_part(&self, announcement: &str) -> &str {\n        println!(\"Attention please: {announcement}\");\n        self.part\n    }\n}\n\nfn main() {\n    let novel = String::from(\"Call me Ishmael. Some years ago...\");\n    let first_sentence = novel.split('.').next().unwrap();\n    let i = ImportantExcerpt {\n        part: first_sentence,\n    };\n}\n```\n\nThe lifetime parameter declaration after `impl` and its use after the type name are required, but we‚Äôre not required to annotate the lifetime of the reference to `self` because of the first elision rule.\n\nHere is an example where the third lifetime elision rule applies:\n\n```rust\nstruct ImportantExcerpt<'a> {\n    part: &'a str,\n}\n\nimpl<'a> ImportantExcerpt<'a> {\n    fn level(&self) -> i32 {\n        3\n    }\n}\n\nimpl<'a> ImportantExcerpt<'a> {\n    fn announce_and_return_part(&self, announcement: &str) -> &str {\n        println!(\"Attention please: {announcement}\");\n        self.part\n    }\n}\n\nfn main() {\n    let novel = String::from(\"Call me Ishmael. Some years ago...\");\n    let first_sentence = novel.split('.').next().unwrap();\n    let i = ImportantExcerpt {\n        part: first_sentence,\n    };\n}\n```\n\nThere are two input lifetimes, so Rust applies the first lifetime elision rule and gives both `&self` and `announcement` their own lifetimes. Then, because one of the parameters is `&self`, the return type gets the lifetime of `&self`, and all lifetimes have been accounted for.\n\n### [The Static Lifetime](#the-static-lifetime)\n\nOne special lifetime we need to discuss is `'static`, which denotes that the affected reference _can_ live for the entire duration of the program. All string literals have the `'static` lifetime, which we can annotate as follows:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet s: &'static str = \"I have a static lifetime.\";\n}\n```\n\nThe text of this string is stored directly in the program‚Äôs binary, which is always available. Therefore, the lifetime of all string literals is `'static`.\n\nYou might see suggestions to use the `'static` lifetime in error messages. But before specifying `'static` as the lifetime for a reference, think about whether the reference you have actually lives the entire lifetime of your program or not, and whether you want it to. Most of the time, an error message suggesting the `'static` lifetime results from attempting to create a dangling reference or a mismatch of the available lifetimes. In such cases, the solution is to fix those problems, not to specify the `'static` lifetime.\n\n## [Generic Type Parameters, Trait Bounds, and Lifetimes Together](#generic-type-parameters-trait-bounds-and-lifetimes-together)\n\nLet‚Äôs briefly look at the syntax of specifying generic type parameters, trait bounds, and lifetimes all in one function!\n\n```rust\nfn main() {\n    let string1 = String::from(\"abcd\");\n    let string2 = \"xyz\";\n\n    let result = longest_with_an_announcement(\n        string1.as_str(),\n        string2,\n        \"Today is someone's birthday!\",\n    );\n    println!(\"The longest string is {result}\");\n}\n\nuse std::fmt::Display;\n\nfn longest_with_an_announcement<'a, T>(\n    x: &'a str,\n    y: &'a str,\n    ann: T,\n) -> &'a str\nwhere\n    T: Display,\n{\n    println!(\"Announcement! {ann}\");\n    if x.len() > y.len() {\n        x\n    } else {\n        y\n    }\n}\n```\n\nThis is the `longest` function from Listing 10-21 that returns the longer of two string slices. But now it has an extra parameter named `ann` of the generic type `T`, which can be filled in by any type that implements the `Display` trait as specified by the `where` clause. This extra parameter will be printed using `{}`, which is why the `Display` trait bound is necessary. Because lifetimes are a type of generic, the declarations of the lifetime parameter `'a` and the generic type parameter `T` go in the same list inside the angle brackets after the function name.\n\n## [Summary](#summary-9)\n\nWe covered a lot in this chapter! Now that you know about generic type parameters, traits and trait bounds, and generic lifetime parameters, you‚Äôre ready to write code without repetition that works in many different situations. Generic type parameters let you apply the code to different types. Traits and trait bounds ensure that even though the types are generic, they‚Äôll have the behavior the code needs. You learned how to use lifetime annotations to ensure that this flexible code won‚Äôt have any dangling references. And all of this analysis happens at compile time, which doesn‚Äôt affect runtime performance!\n\nBelieve it or not, there is much more to learn on the topics we discussed in this chapter: Chapter 17 discusses trait objects, which are another way to use traits. There are also more complex scenarios involving lifetime annotations that you will only need in very advanced scenarios; for those, you should read the [Rust Reference](../reference/index.html). But next, you‚Äôll learn how to write tests in Rust so you can make sure your code is working the way it should.\n\n## [Writing Automated Tests](#writing-automated-tests)\n\nIn his 1972 essay ‚ÄúThe Humble Programmer,‚Äù Edsger W. Dijkstra said that ‚ÄúProgram testing can be a very effective way to show the presence of bugs, but it is hopelessly inadequate for showing their absence.‚Äù That doesn‚Äôt mean we shouldn‚Äôt try to test as much as we can!\n\nCorrectness in our programs is the extent to which our code does what we intend it to do. Rust is designed with a high degree of concern about the correctness of programs, but correctness is complex and not easy to prove. Rust‚Äôs type system shoulders a huge part of this burden, but the type system cannot catch everything. As such, Rust includes support for writing automated software tests.\n\nSay we write a function `add_two` that adds 2 to whatever number is passed to it. This function‚Äôs signature accepts an integer as a parameter and returns an integer as a result. When we implement and compile that function, Rust does all the type checking and borrow checking that you‚Äôve learned so far to ensure that, for instance, we aren‚Äôt passing a `String` value or an invalid reference to this function. But Rust _can‚Äôt_ check that this function will do precisely what we intend, which is return the parameter plus 2 rather than, say, the parameter plus 10 or the parameter minus 50! That‚Äôs where tests come in.\n\nWe can write tests that assert, for example, that when we pass `3` to the `add_two` function, the returned value is `5`. We can run these tests whenever we make changes to our code to make sure any existing correct behavior has not changed.\n\nTesting is a complex skill: although we can‚Äôt cover every detail about how to write good tests in one chapter, we‚Äôll discuss the mechanics of Rust‚Äôs testing facilities. We‚Äôll talk about the annotations and macros available to you when writing your tests, the default behavior and options provided for running your tests, and how to organize tests into unit tests and integration tests.\n\n## [How to Write Tests](#how-to-write-tests)\n\nTests are Rust functions that verify that the non-test code is functioning in the expected manner. The bodies of test functions typically perform these three actions:\n\n1.  Set up any needed data or state.\n2.  Run the code you want to test.\n3.  Assert the results are what you expect.\n\nLet‚Äôs look at the features Rust provides specifically for writing tests that take these actions, which include the `test` attribute, a few macros, and the `should_panic` attribute.\n\n### [The Anatomy of a Test Function](#the-anatomy-of-a-test-function)\n\nAt its simplest, a test in Rust is a function that‚Äôs annotated with the `test` attribute. Attributes are metadata about pieces of Rust code; one example is the `derive` attribute we used with structs in Chapter 5. To change a function into a test function, add `#[test]` on the line before `fn`. When you run your tests with the `cargo test` command, Rust builds a test runner binary that runs the annotated functions and reports on whether each test function passes or fails.\n\nWhenever we make a new library project with Cargo, a test module with a test function in it is automatically generated for us. This module gives you a template for writing your tests so you don‚Äôt have to look up the exact structure and syntax every time you start a new project. You can add as many additional test functions and as many test modules as you want!\n\nWe‚Äôll explore some aspects of how tests work by experimenting with the template test before we actually test any code. Then we‚Äôll write some real-world tests that call some code that we‚Äôve written and assert that its behavior is correct.\n\nLet‚Äôs create a new library project called `adder` that will add two numbers:\n\n```console\n$ cargo new adder --lib\n     Created library `adder` project\n$ cd adder\n\n```\n\nThe contents of the _src/lib.rs_ file in your `adder` library should look like Listing 11-1.\n\nFilename: src/lib.rs\n\n```rust\npub fn add(left: usize, right: usize) -> usize {\n    left + right\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn it_works() {\n        let result = add(2, 2);\n        assert_eq!(result, 4);\n    }\n}\n```\n\nListing 11-1: The test module and function generated automatically by `cargo new`\n\nFor now, let‚Äôs focus solely on the `it_works()` function. Note the `#[test]` annotation: this attribute indicates this is a test function, so the test runner knows to treat this function as a test. We might also have non-test functions in the `tests` module to help set up common scenarios or perform common operations, so we always need to indicate which functions are tests.\n\nThe example function body uses the `assert_eq!` macro to assert that `result`, which contains the result of adding 2 and 2, equals 4. This assertion serves as an example of the format for a typical test. Let‚Äôs run it to see that this test passes.\n\nThe `cargo test` command runs all tests in our project, as shown in Listing 11-2.\n\n```console\n$ cargo test\n   Compiling adder v0.1.0 (file:///projects/adder)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.57s\n     Running unittests src/lib.rs (target/debug/deps/adder-92948b65e88960b4)\n\nrunning 1 test\ntest tests::it_works ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n   Doc-tests adder\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n\n```\n\nListing 11-2: The output from running the automatically generated test\n\nCargo compiled and ran the test. We see the line `running 1 test`. The next line shows the name of the generated test function, called `it_works`, and that the result of running that test is `ok`. The overall summary `test result: ok.` means that all the tests passed, and the portion that reads `1 passed; 0 failed` totals the number of tests that passed or failed.\n\nIt‚Äôs possible to mark a test as ignored so it doesn‚Äôt run in a particular instance; we‚Äôll cover that in the [‚ÄúIgnoring Some Tests Unless Specifically Requested‚Äù](about:blank/ch11-02-running-tests.html#ignoring-some-tests-unless-specifically-requested) section later in this chapter. Because we haven‚Äôt done that here, the summary shows `0 ignored`. We can also pass an argument to the `cargo test` command to run only tests whose name matches a string; this is called _filtering_ and we‚Äôll cover that in the [‚ÄúRunning a Subset of Tests by Name‚Äù](about:blank/ch11-02-running-tests.html#running-a-subset-of-tests-by-name) section. We also haven‚Äôt filtered the tests being run, so the end of the summary shows `0 filtered out`.\n\nThe `0 measured` statistic is for benchmark tests that measure performance. Benchmark tests are, as of this writing, only available in nightly Rust. See [the documentation about benchmark tests](../unstable-book/library-features/test.html) to learn more.\n\nThe next part of the test output starting at `Doc-tests adder` is for the results of any documentation tests. We don‚Äôt have any documentation tests yet, but Rust can compile any code examples that appear in our API documentation. This feature helps keep your docs and your code in sync! We‚Äôll discuss how to write documentation tests in the [‚ÄúDocumentation Comments as Tests‚Äù](about:blank/ch14-02-publishing-to-crates-io.html#documentation-comments-as-tests) section of Chapter 14. For now, we‚Äôll ignore the `Doc-tests` output.\n\nLet‚Äôs start to customize the test to our own needs. First change the name of the `it_works` function to a different name, such as `exploration`, like so:\n\nFilename: src/lib.rs\n\n```rust\npub fn add(left: usize, right: usize) -> usize {\n    left + right\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn exploration() {\n        let result = add(2, 2);\n        assert_eq!(result, 4);\n    }\n}\n```\n\nThen run `cargo test` again. The output now shows `exploration` instead of `it_works`:\n\n```console\n$ cargo test\n   Compiling adder v0.1.0 (file:///projects/adder)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.59s\n     Running unittests src/lib.rs (target/debug/deps/adder-92948b65e88960b4)\n\nrunning 1 test\ntest tests::exploration ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n   Doc-tests adder\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n\n```\n\nNow we‚Äôll add another test, but this time we‚Äôll make a test that fails! Tests fail when something in the test function panics. Each test is run in a new thread, and when the main thread sees that a test thread has died, the test is marked as failed. In Chapter 9, we talked about how the simplest way to panic is to call the `panic!` macro. Enter the new test as a function named `another`, so your _src/lib.rs_ file looks like Listing 11-3.\n\nFilename: src/lib.rs\n\n```rust\npub fn add(left: usize, right: usize) -> usize {\n    left + right\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn exploration() {\n        let result = add(2, 2);\n        assert_eq!(result, 4);\n    }\n    \n    #[test]\n    fn another() {\n        panic!(\"Make this test fail\");\n    }\n}\n```\n\nListing 11-3: Adding a second test that will fail because we call the `panic!` macro\n\nRun the tests again using `cargo test`. The output should look like Listing 11-4, which shows that our `exploration` test passed and `another` failed.\n\n```console\n$ cargo test\n   Compiling adder v0.1.0 (file:///projects/adder)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.72s\n     Running unittests src/lib.rs (target/debug/deps/adder-92948b65e88960b4)\n\nrunning 2 tests\ntest tests::another ... FAILED\ntest tests::exploration ... ok\n\nfailures:\n\n---- tests::another stdout ----\nthread 'tests::another' panicked at src/lib.rs:17:9:\nMake this test fail\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\n\nfailures:\n    tests::another\n\ntest result: FAILED. 1 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\nerror: test failed, to rerun pass `--lib`\n\n```\n\nListing 11-4: Test results when one test passes and one test fails\n\nInstead of `ok`, the line `test tests::another` shows `FAILED`. Two new sections appear between the individual results and the summary: the first displays the detailed reason for each test failure. In this case, we get the details that `another` failed because it `panicked at 'Make this test fail'` on line 10 in the _src/lib.rs_ file. The next section lists just the names of all the failing tests, which is useful when there are lots of tests and lots of detailed failing test output. We can use the name of a failing test to run just that test to more easily debug it; we‚Äôll talk more about ways to run tests in the [‚ÄúControlling How Tests Are Run‚Äù](about:blank/ch11-02-running-tests.html#controlling-how-tests-are-run) section.\n\nThe summary line displays at the end: overall, our test result is `FAILED`. We had one test pass and one test fail.\n\nNow that you‚Äôve seen what the test results look like in different scenarios, let‚Äôs look at some macros other than `panic!` that are useful in tests.\n\n### [Checking Results with the `assert!` Macro](#checking-results-with-the-assert-macro)\n\nThe `assert!` macro, provided by the standard library, is useful when you want to ensure that some condition in a test evaluates to `true`. We give the `assert!` macro an argument that evaluates to a Boolean. If the value is `true`, nothing happens and the test passes. If the value is `false`, the `assert!` macro calls `panic!` to cause the test to fail. Using the `assert!` macro helps us check that our code is functioning in the way we intend.\n\nIn Chapter 5, Listing 5-15, we used a `Rectangle` struct and a `can_hold` method, which are repeated here in Listing 11-5. Let‚Äôs put this code in the _src/lib.rs_ file, then write some tests for it using the `assert!` macro.\n\nFilename: src/lib.rs\n\n```rust\n#[derive(Debug)]\nstruct Rectangle {\n    width: u32,\n    height: u32,\n}\n\nimpl Rectangle {\n    fn can_hold(&self, other: &Rectangle) -> bool {\n        self.width > other.width && self.height > other.height\n    }\n}\n```\n\nListing 11-5: Using the `Rectangle` struct and its `can_hold` method from Chapter 5\n\nThe `can_hold` method returns a Boolean, which means it‚Äôs a perfect use case for the `assert!` macro. In Listing 11-6, we write a test that exercises the `can_hold` method by creating a `Rectangle` instance that has a width of 8 and a height of 7 and asserting that it can hold another `Rectangle` instance that has a width of 5 and a height of 1.\n\nFilename: src/lib.rs\n\n```rust\n#[derive(Debug)]\nstruct Rectangle {\n    width: u32,\n    height: u32,\n}\n\nimpl Rectangle {\n    fn can_hold(&self, other: &Rectangle) -> bool {\n        self.width > other.width && self.height > other.height\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn larger_can_hold_smaller() {\n        let larger = Rectangle {\n            width: 8,\n            height: 7,\n        };\n        let smaller = Rectangle {\n            width: 5,\n            height: 1,\n        };\n\n        assert!(larger.can_hold(&smaller));\n    }\n}\n```\n\nListing 11-6: A test for `can_hold` that checks whether a larger rectangle can indeed hold a smaller rectangle\n\nNote that we‚Äôve added a new line inside the `tests` module: `use super::*;`. The `tests` module is a regular module that follows the usual visibility rules we covered in Chapter 7 in the [‚ÄúPaths for Referring to an Item in the Module Tree‚Äù](ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html) section. Because the `tests` module is an inner module, we need to bring the code under test in the outer module into the scope of the inner module. We use a glob here so anything we define in the outer module is available to this `tests` module.\n\nWe‚Äôve named our test `larger_can_hold_smaller`, and we‚Äôve created the two `Rectangle` instances that we need. Then we called the `assert!` macro and passed it the result of calling `larger.can_hold(&smaller)`. This expression is supposed to return `true`, so our test should pass. Let‚Äôs find out!\n\n```console\n$ cargo test\n   Compiling rectangle v0.1.0 (file:///projects/rectangle)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.66s\n     Running unittests src/lib.rs (target/debug/deps/rectangle-6584c4561e48942e)\n\nrunning 1 test\ntest tests::larger_can_hold_smaller ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n   Doc-tests rectangle\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n\n```\n\nIt does pass! Let‚Äôs add another test, this time asserting that a smaller rectangle cannot hold a larger rectangle:\n\nFilename: src/lib.rs\n\n```rust\n#[derive(Debug)]\nstruct Rectangle {\n    width: u32,\n    height: u32,\n}\n\nimpl Rectangle {\n    fn can_hold(&self, other: &Rectangle) -> bool {\n        self.width > other.width && self.height > other.height\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn larger_can_hold_smaller() {\n        // --snip--\n        let larger = Rectangle {\n            width: 8,\n            height: 7,\n        };\n        let smaller = Rectangle {\n            width: 5,\n            height: 1,\n        };\n\n        assert!(larger.can_hold(&smaller));\n    }\n\n    #[test]\n    fn smaller_cannot_hold_larger() {\n        let larger = Rectangle {\n            width: 8,\n            height: 7,\n        };\n        let smaller = Rectangle {\n            width: 5,\n            height: 1,\n        };\n\n        assert!(!smaller.can_hold(&larger));\n    }\n}\n```\n\nBecause the correct result of the `can_hold` function in this case is `false`, we need to negate that result before we pass it to the `assert!` macro. As a result, our test will pass if `can_hold` returns `false`:\n\n```console\n$ cargo test\n   Compiling rectangle v0.1.0 (file:///projects/rectangle)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.66s\n     Running unittests src/lib.rs (target/debug/deps/rectangle-6584c4561e48942e)\n\nrunning 2 tests\ntest tests::larger_can_hold_smaller ... ok\ntest tests::smaller_cannot_hold_larger ... ok\n\ntest result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n   Doc-tests rectangle\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n\n```\n\nTwo tests that pass! Now let‚Äôs see what happens to our test results when we introduce a bug in our code. We‚Äôll change the implementation of the `can_hold` method by replacing the greater-than sign with a less-than sign when it compares the widths:\n\n```rust\n#[derive(Debug)]\nstruct Rectangle {\n    width: u32,\n    height: u32,\n}\n\n// --snip--\nimpl Rectangle {\n    fn can_hold(&self, other: &Rectangle) -> bool {\n        self.width < other.width && self.height > other.height\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn larger_can_hold_smaller() {\n        let larger = Rectangle {\n            width: 8,\n            height: 7,\n        };\n        let smaller = Rectangle {\n            width: 5,\n            height: 1,\n        };\n\n        assert!(larger.can_hold(&smaller));\n    }\n\n    #[test]\n    fn smaller_cannot_hold_larger() {\n        let larger = Rectangle {\n            width: 8,\n            height: 7,\n        };\n        let smaller = Rectangle {\n            width: 5,\n            height: 1,\n        };\n\n        assert!(!smaller.can_hold(&larger));\n    }\n}\n```\n\nRunning the tests now produces the following:\n\n```console\n$ cargo test\n   Compiling rectangle v0.1.0 (file:///projects/rectangle)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.66s\n     Running unittests src/lib.rs (target/debug/deps/rectangle-6584c4561e48942e)\n\nrunning 2 tests\ntest tests::larger_can_hold_smaller ... FAILED\ntest tests::smaller_cannot_hold_larger ... ok\n\nfailures:\n\n---- tests::larger_can_hold_smaller stdout ----\nthread 'tests::larger_can_hold_smaller' panicked at src/lib.rs:28:9:\nassertion failed: larger.can_hold(&smaller)\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\n\nfailures:\n    tests::larger_can_hold_smaller\n\ntest result: FAILED. 1 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\nerror: test failed, to rerun pass `--lib`\n\n```\n\nOur tests caught the bug! Because `larger.width` is 8 and `smaller.width` is 5, the comparison of the widths in `can_hold` now returns `false`: 8 is not less than 5.\n\n### [Testing Equality with the `assert_eq!` and `assert_ne!` Macros](#testing-equality-with-the-assert_eq-and-assert_ne-macros)\n\nA common way to verify functionality is to test for equality between the result of the code under test and the value you expect the code to return. You could do this using the `assert!` macro and passing it an expression using the `==` operator. However, this is such a common test that the standard library provides a pair of macros‚Äî`assert_eq!` and `assert_ne!`‚Äîto perform this test more conveniently. These macros compare two arguments for equality or inequality, respectively. They‚Äôll also print the two values if the assertion fails, which makes it easier to see _why_ the test failed; conversely, the `assert!` macro only indicates that it got a `false` value for the `==` expression, without printing the values that led to the `false` value.\n\nIn Listing 11-7, we write a function named `add_two` that adds `2` to its parameter, then we test this function using the `assert_eq!` macro.\n\nFilename: src/lib.rs\n\n```rust\npub fn add_two(a: i32) -> i32 {\n    a + 2\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn it_adds_two() {\n        assert_eq!(4, add_two(2));\n    }\n}\n```\n\nListing 11-7: Testing the function `add_two` using the `assert_eq!` macro\n\nLet‚Äôs check that it passes!\n\n```console\n$ cargo test\n   Compiling adder v0.1.0 (file:///projects/adder)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.58s\n     Running unittests src/lib.rs (target/debug/deps/adder-92948b65e88960b4)\n\nrunning 1 test\ntest tests::it_adds_two ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n   Doc-tests adder\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n\n```\n\nWe pass `4` as the argument to `assert_eq!`, which is equal to the result of calling `add_two(2)`. The line for this test is `test tests::it_adds_two ... ok`, and the `ok` text indicates that our test passed!\n\nLet‚Äôs introduce a bug into our code to see what `assert_eq!` looks like when it fails. Change the implementation of the `add_two` function to instead add `3`:\n\n```rust\npub fn add_two(a: i32) -> i32 {\n    a + 3\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn it_adds_two() {\n        assert_eq!(4, add_two(2));\n    }\n}\n```\n\nRun the tests again:\n\n```console\n$ cargo test\n   Compiling adder v0.1.0 (file:///projects/adder)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.61s\n     Running unittests src/lib.rs (target/debug/deps/adder-92948b65e88960b4)\n\nrunning 1 test\ntest tests::it_adds_two ... FAILED\n\nfailures:\n\n---- tests::it_adds_two stdout ----\nthread 'tests::it_adds_two' panicked at src/lib.rs:11:9:\nassertion `left == right` failed\n  left: 4\n right: 5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\n\nfailures:\n    tests::it_adds_two\n\ntest result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\nerror: test failed, to rerun pass `--lib`\n\n```\n\nOur test caught the bug! The `it_adds_two` test failed, and the message tells us that the assertion that fails was ``assertion `left == right` failed`` and what the `left` and `right` values are. This message helps us start debugging: the `left` argument was `4` but the `right` argument, where we had `add_two(2)`, was `5`. You can imagine that this would be especially helpful when we have a lot of tests going on.\n\nNote that in some languages and test frameworks, the parameters to equality assertion functions are called `expected` and `actual`, and the order in which we specify the arguments matters. However, in Rust, they‚Äôre called `left` and `right`, and the order in which we specify the value we expect and the value the code produces doesn‚Äôt matter. We could write the assertion in this test as `assert_eq!(add_two(2), 4)`, which would result in the same failure message that displays ``assertion failed: `(left == right)` ``.\n\nThe `assert_ne!` macro will pass if the two values we give it are not equal and fail if they‚Äôre equal. This macro is most useful for cases when we‚Äôre not sure what a value _will_ be, but we know what the value definitely _shouldn‚Äôt_ be. For example, if we‚Äôre testing a function that is guaranteed to change its input in some way, but the way in which the input is changed depends on the day of the week that we run our tests, the best thing to assert might be that the output of the function is not equal to the input.\n\nUnder the surface, the `assert_eq!` and `assert_ne!` macros use the operators `==` and `!=`, respectively. When the assertions fail, these macros print their arguments using debug formatting, which means the values being compared must implement the `PartialEq` and `Debug` traits. All primitive types and most of the standard library types implement these traits. For structs and enums that you define yourself, you‚Äôll need to implement `PartialEq` to assert equality of those types. You‚Äôll also need to implement `Debug` to print the values when the assertion fails. Because both traits are derivable traits, as mentioned in Listing 5-12 in Chapter 5, this is usually as straightforward as adding the `#[derive(PartialEq, Debug)]` annotation to your struct or enum definition. See Appendix C, [‚ÄúDerivable Traits,‚Äù](appendix-03-derivable-traits.html) for more details about these and other derivable traits.\n\n### [Adding Custom Failure Messages](#adding-custom-failure-messages)\n\nYou can also add a custom message to be printed with the failure message as optional arguments to the `assert!`, `assert_eq!`, and `assert_ne!` macros. Any arguments specified after the required arguments are passed along to the `format!` macro (discussed in Chapter 8 in the [‚ÄúConcatenation with the `+` Operator or the `format!` Macro‚Äù](about:blank/ch08-02-strings.html#concatenation-with-the--operator-or-the-format-macro) section), so you can pass a format string that contains `{}` placeholders and values to go in those placeholders. Custom messages are useful for documenting what an assertion means; when a test fails, you‚Äôll have a better idea of what the problem is with the code.\n\nFor example, let‚Äôs say we have a function that greets people by name and we want to test that the name we pass into the function appears in the output:\n\nFilename: src/lib.rs\n\n```rust\npub fn greeting(name: &str) -> String {\n    format!(\"Hello {name}!\")\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn greeting_contains_name() {\n        let result = greeting(\"Carol\");\n        assert!(result.contains(\"Carol\"));\n    }\n}\n```\n\nThe requirements for this program haven‚Äôt been agreed upon yet, and we‚Äôre pretty sure the `Hello` text at the beginning of the greeting will change. We decided we don‚Äôt want to have to update the test when the requirements change, so instead of checking for exact equality to the value returned from the `greeting` function, we‚Äôll just assert that the output contains the text of the input parameter.\n\nNow let‚Äôs introduce a bug into this code by changing `greeting` to exclude `name` to see what the default test failure looks like:\n\n```rust\npub fn greeting(name: &str) -> String {\n    String::from(\"Hello!\")\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn greeting_contains_name() {\n        let result = greeting(\"Carol\");\n        assert!(result.contains(\"Carol\"));\n    }\n}\n```\n\nRunning this test produces the following:\n\n```console\n$ cargo test\n   Compiling greeter v0.1.0 (file:///projects/greeter)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.91s\n     Running unittests src/lib.rs (target/debug/deps/greeter-170b942eb5bf5e3a)\n\nrunning 1 test\ntest tests::greeting_contains_name ... FAILED\n\nfailures:\n\n---- tests::greeting_contains_name stdout ----\nthread 'tests::greeting_contains_name' panicked at src/lib.rs:12:9:\nassertion failed: result.contains(\"Carol\")\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\n\nfailures:\n    tests::greeting_contains_name\n\ntest result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\nerror: test failed, to rerun pass `--lib`\n\n```\n\nThis result just indicates that the assertion failed and which line the assertion is on. A more useful failure message would print the value from the `greeting` function. Let‚Äôs add a custom failure message composed of a format string with a placeholder filled in with the actual value we got from the `greeting` function:\n\n```rust\npub fn greeting(name: &str) -> String {\n    String::from(\"Hello!\")\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn greeting_contains_name() {\n        let result = greeting(\"Carol\");\n        assert!(\n            result.contains(\"Carol\"),\n            \"Greeting did not contain name, value was `{}`\",\n            result\n        );\n    }\n}\n```\n\nNow when we run the test, we‚Äôll get a more informative error message:\n\n```console\n$ cargo test\n   Compiling greeter v0.1.0 (file:///projects/greeter)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.93s\n     Running unittests src/lib.rs (target/debug/deps/greeter-170b942eb5bf5e3a)\n\nrunning 1 test\ntest tests::greeting_contains_name ... FAILED\n\nfailures:\n\n---- tests::greeting_contains_name stdout ----\nthread 'tests::greeting_contains_name' panicked at src/lib.rs:12:9:\nGreeting did not contain name, value was `Hello!`\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\n\nfailures:\n    tests::greeting_contains_name\n\ntest result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\nerror: test failed, to rerun pass `--lib`\n\n```\n\nWe can see the value we actually got in the test output, which would help us debug what happened instead of what we were expecting to happen.\n\n### [Checking for Panics with `should_panic`](#checking-for-panics-with-should_panic)\n\nIn addition to checking return values, it‚Äôs important to check that our code handles error conditions as we expect. For example, consider the `Guess` type that we created in Chapter 9, Listing 9-13. Other code that uses `Guess` depends on the guarantee that `Guess` instances will contain only values between 1 and 100. We can write a test that ensures that attempting to create a `Guess` instance with a value outside that range panics.\n\nWe do this by adding the attribute `should_panic` to our test function. The test passes if the code inside the function panics; the test fails if the code inside the function doesn‚Äôt panic.\n\nListing 11-8 shows a test that checks that the error conditions of `Guess::new` happen when we expect them to.\n\nFilename: src/lib.rs\n\n```rust\npub struct Guess {\n    value: i32,\n}\n\nimpl Guess {\n    pub fn new(value: i32) -> Guess {\n        if value < 1 || value > 100 {\n            panic!(\"Guess value must be between 1 and 100, got {value}.\");\n        }\n\n        Guess { value }\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    #[should_panic]\n    fn greater_than_100() {\n        Guess::new(200);\n    }\n}\n```\n\nListing 11-8: Testing that a condition will cause a `panic!`\n\nWe place the `#[should_panic]` attribute after the `#[test]` attribute and before the test function it applies to. Let‚Äôs look at the result when this test passes:\n\n```console\n$ cargo test\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.58s\n     Running unittests src/lib.rs (target/debug/deps/guessing_game-57d70c3acb738f4d)\n\nrunning 1 test\ntest tests::greater_than_100 - should panic ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n   Doc-tests guessing_game\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n\n```\n\nLooks good! Now let‚Äôs introduce a bug in our code by removing the condition that the `new` function will panic if the value is greater than 100:\n\n```rust\npub struct Guess {\n    value: i32,\n}\n\n// --snip--\nimpl Guess {\n    pub fn new(value: i32) -> Guess {\n        if value < 1 {\n            panic!(\"Guess value must be between 1 and 100, got {value}.\");\n        }\n\n        Guess { value }\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    #[should_panic]\n    fn greater_than_100() {\n        Guess::new(200);\n    }\n}\n```\n\nWhen we run the test in Listing 11-8, it will fail:\n\n```console\n$ cargo test\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.62s\n     Running unittests src/lib.rs (target/debug/deps/guessing_game-57d70c3acb738f4d)\n\nrunning 1 test\ntest tests::greater_than_100 - should panic ... FAILED\n\nfailures:\n\n---- tests::greater_than_100 stdout ----\nnote: test did not panic as expected\n\nfailures:\n    tests::greater_than_100\n\ntest result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\nerror: test failed, to rerun pass `--lib`\n\n```\n\nWe don‚Äôt get a very helpful message in this case, but when we look at the test function, we see that it‚Äôs annotated with `#[should_panic]`. The failure we got means that the code in the test function did not cause a panic.\n\nTests that use `should_panic` can be imprecise. A `should_panic` test would pass even if the test panics for a different reason from the one we were expecting. To make `should_panic` tests more precise, we can add an optional `expected` parameter to the `should_panic` attribute. The test harness will make sure that the failure message contains the provided text. For example, consider the modified code for `Guess` in Listing 11-9 where the `new` function panics with different messages depending on whether the value is too small or too large.\n\nFilename: src/lib.rs\n\n```rust\npub struct Guess {\n    value: i32,\n}\n\n// --snip--\n\nimpl Guess {\n    pub fn new(value: i32) -> Guess {\n        if value < 1 {\n            panic!(\n                \"Guess value must be greater than or equal to 1, got {value}.\"\n            );\n        } else if value > 100 {\n            panic!(\n                \"Guess value must be less than or equal to 100, got {value}.\"\n            );\n        }\n\n        Guess { value }\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    #[should_panic(expected = \"less than or equal to 100\")]\n    fn greater_than_100() {\n        Guess::new(200);\n    }\n}\n```\n\nListing 11-9: Testing for a `panic!` with a panic message containing a specified substring\n\nThis test will pass because the value we put in the `should_panic` attribute‚Äôs `expected` parameter is a substring of the message that the `Guess::new` function panics with. We could have specified the entire panic message that we expect, which in this case would be `Guess value must be less than or equal to 100, got 200.` What you choose to specify depends on how much of the panic message is unique or dynamic and how precise you want your test to be. In this case, a substring of the panic message is enough to ensure that the code in the test function executes the `else if value > 100` case.\n\nTo see what happens when a `should_panic` test with an `expected` message fails, let‚Äôs again introduce a bug into our code by swapping the bodies of the `if value < 1` and the `else if value > 100` blocks:\n\n```rust\npub struct Guess {\n    value: i32,\n}\n\nimpl Guess {\n    pub fn new(value: i32) -> Guess {\n        if value < 1 {\n            panic!(\n                \"Guess value must be less than or equal to 100, got {value}.\"\n            );\n        } else if value > 100 {\n            panic!(\n                \"Guess value must be greater than or equal to 1, got {value}.\"\n            );\n        }\n\n        Guess { value }\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    #[should_panic(expected = \"less than or equal to 100\")]\n    fn greater_than_100() {\n        Guess::new(200);\n    }\n}\n```\n\nThis time when we run the `should_panic` test, it will fail:\n\n```console\n$ cargo test\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.66s\n     Running unittests src/lib.rs (target/debug/deps/guessing_game-57d70c3acb738f4d)\n\nrunning 1 test\ntest tests::greater_than_100 - should panic ... FAILED\n\nfailures:\n\n---- tests::greater_than_100 stdout ----\nthread 'tests::greater_than_100' panicked at src/lib.rs:12:13:\nGuess value must be greater than or equal to 1, got 200.\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\nnote: panic did not contain expected string\n      panic message: `\"Guess value must be greater than or equal to 1, got 200.\"`,\n expected substring: `\"less than or equal to 100\"`\n\nfailures:\n    tests::greater_than_100\n\ntest result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\nerror: test failed, to rerun pass `--lib`\n\n```\n\nThe failure message indicates that this test did indeed panic as we expected, but the panic message did not include the expected string `less than or equal to 100`. The panic message that we did get in this case was `Guess value must be greater than or equal to 1, got 200.` Now we can start figuring out where our bug is!\n\n### [Using `Result<T, E>` in Tests](#using-resultt-e-in-tests)\n\nOur tests so far all panic when they fail. We can also write tests that use `Result<T, E>`! Here‚Äôs the test from Listing 11-1, rewritten to use `Result<T, E>` and return an `Err` instead of panicking:\n\n```rust\n#[cfg(test)]\nmod tests {\n    #[test]\n    fn it_works() -> Result<(), String> {\n        if 2 + 2 == 4 {\n            Ok(())\n        } else {\n            Err(String::from(\"two plus two does not equal four\"))\n        }\n    }\n}\n```\n\nThe `it_works` function now has the `Result<(), String>` return type. In the body of the function, rather than calling the `assert_eq!` macro, we return `Ok(())` when the test passes and an `Err` with a `String` inside when the test fails.\n\nWriting tests so they return a `Result<T, E>` enables you to use the question mark operator in the body of tests, which can be a convenient way to write tests that should fail if any operation within them returns an `Err` variant.\n\nYou can‚Äôt use the `#[should_panic]` annotation on tests that use `Result<T, E>`. To assert that an operation returns an `Err` variant, _don‚Äôt_ use the question mark operator on the `Result<T, E>` value. Instead, use `assert!(value.is_err())`.\n\nNow that you know several ways to write tests, let‚Äôs look at what is happening when we run our tests and explore the different options we can use with `cargo test`.\n\n## [Controlling How Tests Are Run](#controlling-how-tests-are-run)\n\nJust as `cargo run` compiles your code and then runs the resulting binary, `cargo test` compiles your code in test mode and runs the resulting test binary. The default behavior of the binary produced by `cargo test` is to run all the tests in parallel and capture output generated during test runs, preventing the output from being displayed and making it easier to read the output related to the test results. You can, however, specify command line options to change this default behavior.\n\nSome command line options go to `cargo test`, and some go to the resulting test binary. To separate these two types of arguments, you list the arguments that go to `cargo test` followed by the separator `--` and then the ones that go to the test binary. Running `cargo test --help` displays the options you can use with `cargo test`, and running `cargo test -- --help` displays the options you can use after the separator.\n\n### [Running Tests in Parallel or Consecutively](#running-tests-in-parallel-or-consecutively)\n\nWhen you run multiple tests, by default they run in parallel using threads, meaning they finish running faster and you get feedback quicker. Because the tests are running at the same time, you must make sure your tests don‚Äôt depend on each other or on any shared state, including a shared environment, such as the current working directory or environment variables.\n\nFor example, say each of your tests runs some code that creates a file on disk named _test-output.txt_ and writes some data to that file. Then each test reads the data in that file and asserts that the file contains a particular value, which is different in each test. Because the tests run at the same time, one test might overwrite the file in the time between another test writing and reading the file. The second test will then fail, not because the code is incorrect but because the tests have interfered with each other while running in parallel. One solution is to make sure each test writes to a different file; another solution is to run the tests one at a time.\n\nIf you don‚Äôt want to run the tests in parallel or if you want more fine-grained control over the number of threads used, you can send the `--test-threads` flag and the number of threads you want to use to the test binary. Take a look at the following example:\n\n```console\n$ cargo test -- --test-threads=1\n\n```\n\nWe set the number of test threads to `1`, telling the program not to use any parallelism. Running the tests using one thread will take longer than running them in parallel, but the tests won‚Äôt interfere with each other if they share state.\n\n### [Showing Function Output](#showing-function-output)\n\nBy default, if a test passes, Rust‚Äôs test library captures anything printed to standard output. For example, if we call `println!` in a test and the test passes, we won‚Äôt see the `println!` output in the terminal; we‚Äôll see only the line that indicates the test passed. If a test fails, we‚Äôll see whatever was printed to standard output with the rest of the failure message.\n\nAs an example, Listing 11-10 has a silly function that prints the value of its parameter and returns 10, as well as a test that passes and a test that fails.\n\nFilename: src/lib.rs\n\n```rust\nfn prints_and_returns_10(a: i32) -> i32 {\n    println!(\"I got the value {a}\");\n    10\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn this_test_will_pass() {\n        let value = prints_and_returns_10(4);\n        assert_eq!(10, value);\n    }\n\n    #[test]\n    fn this_test_will_fail() {\n        let value = prints_and_returns_10(8);\n        assert_eq!(5, value);\n    }\n}\n```\n\nListing 11-10: Tests for a function that calls `println!`\n\nWhen we run these tests with `cargo test`, we‚Äôll see the following output:\n\n```console\n$ cargo test\n   Compiling silly-function v0.1.0 (file:///projects/silly-function)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.58s\n     Running unittests src/lib.rs (target/debug/deps/silly_function-160869f38cff9166)\n\nrunning 2 tests\ntest tests::this_test_will_fail ... FAILED\ntest tests::this_test_will_pass ... ok\n\nfailures:\n\n---- tests::this_test_will_fail stdout ----\nI got the value 8\nthread 'tests::this_test_will_fail' panicked at src/lib.rs:19:9:\nassertion `left == right` failed\n  left: 5\n right: 10\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\n\nfailures:\n    tests::this_test_will_fail\n\ntest result: FAILED. 1 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\nerror: test failed, to rerun pass `--lib`\n\n```\n\nNote that nowhere in this output do we see `I got the value 4`, which is what is printed when the test that passes runs. That output has been captured. The output from the test that failed, `I got the value 8`, appears in the section of the test summary output, which also shows the cause of the test failure.\n\nIf we want to see printed values for passing tests as well, we can tell Rust to also show the output of successful tests with `--show-output`.\n\n```console\n$ cargo test -- --show-output\n\n```\n\nWhen we run the tests in Listing 11-10 again with the `--show-output` flag, we see the following output:\n\n```console\n$ cargo test -- --show-output\n   Compiling silly-function v0.1.0 (file:///projects/silly-function)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.60s\n     Running unittests src/lib.rs (target/debug/deps/silly_function-160869f38cff9166)\n\nrunning 2 tests\ntest tests::this_test_will_fail ... FAILED\ntest tests::this_test_will_pass ... ok\n\nsuccesses:\n\n---- tests::this_test_will_pass stdout ----\nI got the value 4\n\n\nsuccesses:\n    tests::this_test_will_pass\n\nfailures:\n\n---- tests::this_test_will_fail stdout ----\nI got the value 8\nthread 'tests::this_test_will_fail' panicked at src/lib.rs:19:9:\nassertion `left == right` failed\n  left: 5\n right: 10\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\n\nfailures:\n    tests::this_test_will_fail\n\ntest result: FAILED. 1 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\nerror: test failed, to rerun pass `--lib`\n\n```\n\n### [Running a Subset of Tests by Name](#running-a-subset-of-tests-by-name)\n\nSometimes, running a full test suite can take a long time. If you‚Äôre working on code in a particular area, you might want to run only the tests pertaining to that code. You can choose which tests to run by passing `cargo test` the name or names of the test(s) you want to run as an argument.\n\nTo demonstrate how to run a subset of tests, we‚Äôll first create three tests for our `add_two` function, as shown in Listing 11-11, and choose which ones to run.\n\nFilename: src/lib.rs\n\n```rust\npub fn add_two(a: i32) -> i32 {\n    a + 2\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn add_two_and_two() {\n        assert_eq!(4, add_two(2));\n    }\n\n    #[test]\n    fn add_three_and_two() {\n        assert_eq!(5, add_two(3));\n    }\n\n    #[test]\n    fn one_hundred() {\n        assert_eq!(102, add_two(100));\n    }\n}\n```\n\nListing 11-11: Three tests with three different names\n\nIf we run the tests without passing any arguments, as we saw earlier, all the tests will run in parallel:\n\n```console\n$ cargo test\n   Compiling adder v0.1.0 (file:///projects/adder)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.62s\n     Running unittests src/lib.rs (target/debug/deps/adder-92948b65e88960b4)\n\nrunning 3 tests\ntest tests::add_three_and_two ... ok\ntest tests::add_two_and_two ... ok\ntest tests::one_hundred ... ok\n\ntest result: ok. 3 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n   Doc-tests adder\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n\n```\n\n#### [Running Single Tests](#running-single-tests)\n\nWe can pass the name of any test function to `cargo test` to run only that test:\n\n```console\n$ cargo test one_hundred\n   Compiling adder v0.1.0 (file:///projects/adder)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.69s\n     Running unittests src/lib.rs (target/debug/deps/adder-92948b65e88960b4)\n\nrunning 1 test\ntest tests::one_hundred ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 2 filtered out; finished in 0.00s\n\n\n```\n\nOnly the test with the name `one_hundred` ran; the other two tests didn‚Äôt match that name. The test output lets us know we had more tests that didn‚Äôt run by displaying `2 filtered out` at the end.\n\nWe can‚Äôt specify the names of multiple tests in this way; only the first value given to `cargo test` will be used. But there is a way to run multiple tests.\n\n#### [Filtering to Run Multiple Tests](#filtering-to-run-multiple-tests)\n\nWe can specify part of a test name, and any test whose name matches that value will be run. For example, because two of our tests‚Äô names contain `add`, we can run those two by running `cargo test add`:\n\n```console\n$ cargo test add\n   Compiling adder v0.1.0 (file:///projects/adder)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.61s\n     Running unittests src/lib.rs (target/debug/deps/adder-92948b65e88960b4)\n\nrunning 2 tests\ntest tests::add_three_and_two ... ok\ntest tests::add_two_and_two ... ok\n\ntest result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 1 filtered out; finished in 0.00s\n\n\n```\n\nThis command ran all tests with `add` in the name and filtered out the test named `one_hundred`. Also note that the module in which a test appears becomes part of the test‚Äôs name, so we can run all the tests in a module by filtering on the module‚Äôs name.\n\n### [Ignoring Some Tests Unless Specifically Requested](#ignoring-some-tests-unless-specifically-requested)\n\nSometimes a few specific tests can be very time-consuming to execute, so you might want to exclude them during most runs of `cargo test`. Rather than listing as arguments all tests you do want to run, you can instead annotate the time-consuming tests using the `ignore` attribute to exclude them, as shown here:\n\nFilename: src/lib.rs\n\n```rust\n#[test]\nfn it_works() {\n    assert_eq!(2 + 2, 4);\n}\n\n#[test]\n#[ignore]\nfn expensive_test() {\n    // code that takes an hour to run\n}\n```\n\nAfter `#[test]` we add the `#[ignore]` line to the test we want to exclude. Now when we run our tests, `it_works` runs, but `expensive_test` doesn‚Äôt:\n\n```console\n$ cargo test\n   Compiling adder v0.1.0 (file:///projects/adder)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.60s\n     Running unittests src/lib.rs (target/debug/deps/adder-92948b65e88960b4)\n\nrunning 2 tests\ntest expensive_test ... ignored\ntest it_works ... ok\n\ntest result: ok. 1 passed; 0 failed; 1 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n   Doc-tests adder\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n\n```\n\nThe `expensive_test` function is listed as `ignored`. If we want to run only the ignored tests, we can use `cargo test -- --ignored`:\n\n```console\n$ cargo test -- --ignored\n   Compiling adder v0.1.0 (file:///projects/adder)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.61s\n     Running unittests src/lib.rs (target/debug/deps/adder-92948b65e88960b4)\n\nrunning 1 test\ntest expensive_test ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 1 filtered out; finished in 0.00s\n\n   Doc-tests adder\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n\n```\n\nBy controlling which tests run, you can make sure your `cargo test` results will be fast. When you‚Äôre at a point where it makes sense to check the results of the `ignored` tests and you have time to wait for the results, you can run `cargo test -- --ignored` instead. If you want to run all tests whether they‚Äôre ignored or not, you can run `cargo test -- --include-ignored`.\n\n## [Test Organization](#test-organization)\n\nAs mentioned at the start of the chapter, testing is a complex discipline, and different people use different terminology and organization. The Rust community thinks about tests in terms of two main categories: unit tests and integration tests. _Unit tests_ are small and more focused, testing one module in isolation at a time, and can test private interfaces. _Integration tests_ are entirely external to your library and use your code in the same way any other external code would, using only the public interface and potentially exercising multiple modules per test.\n\nWriting both kinds of tests is important to ensure that the pieces of your library are doing what you expect them to, separately and together.\n\n### [Unit Tests](#unit-tests)\n\nThe purpose of unit tests is to test each unit of code in isolation from the rest of the code to quickly pinpoint where code is and isn‚Äôt working as expected. You‚Äôll put unit tests in the _src_ directory in each file with the code that they‚Äôre testing. The convention is to create a module named `tests` in each file to contain the test functions and to annotate the module with `cfg(test)`.\n\n#### [The Tests Module and `#[cfg(test)]`](#the-tests-module-and-cfgtest)\n\nThe `#[cfg(test)]` annotation on the tests module tells Rust to compile and run the test code only when you run `cargo test`, not when you run `cargo build`. This saves compile time when you only want to build the library and saves space in the resulting compiled artifact because the tests are not included. You‚Äôll see that because integration tests go in a different directory, they don‚Äôt need the `#[cfg(test)]` annotation. However, because unit tests go in the same files as the code, you‚Äôll use `#[cfg(test)]` to specify that they shouldn‚Äôt be included in the compiled result.\n\nRecall that when we generated the new `adder` project in the first section of this chapter, Cargo generated this code for us:\n\nFilename: src/lib.rs\n\n```rust\npub fn add(left: usize, right: usize) -> usize {\n    left + right\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn it_works() {\n        let result = add(2, 2);\n        assert_eq!(result, 4);\n    }\n}\n```\n\nThis code is the automatically generated test module. The attribute `cfg` stands for _configuration_ and tells Rust that the following item should only be included given a certain configuration option. In this case, the configuration option is `test`, which is provided by Rust for compiling and running tests. By using the `cfg` attribute, Cargo compiles our test code only if we actively run the tests with `cargo test`. This includes any helper functions that might be within this module, in addition to the functions annotated with `#[test]`.\n\n#### [Testing Private Functions](#testing-private-functions)\n\nThere‚Äôs debate within the testing community about whether or not private functions should be tested directly, and other languages make it difficult or impossible to test private functions. Regardless of which testing ideology you adhere to, Rust‚Äôs privacy rules do allow you to test private functions. Consider the code in Listing 11-12 with the private function `internal_adder`.\n\nFilename: src/lib.rs\n\n```rust\npub fn add_two(a: i32) -> i32 {\n    internal_adder(a, 2)\n}\n\nfn internal_adder(a: i32, b: i32) -> i32 {\n    a + b\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn internal() {\n        assert_eq!(4, internal_adder(2, 2));\n    }\n}\n```\n\nListing 11-12: Testing a private function\n\nNote that the `internal_adder` function is not marked as `pub`. Tests are just Rust code, and the `tests` module is just another module. As we discussed in the [‚ÄúPaths for Referring to an Item in the Module Tree‚Äù](ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html) section, items in child modules can use the items in their ancestor modules. In this test, we bring all of the `tests` module‚Äôs parent‚Äôs items into scope with `use super::*`, and then the test can call `internal_adder`. If you don‚Äôt think private functions should be tested, there‚Äôs nothing in Rust that will compel you to do so.\n\n### [Integration Tests](#integration-tests)\n\nIn Rust, integration tests are entirely external to your library. They use your library in the same way any other code would, which means they can only call functions that are part of your library‚Äôs public API. Their purpose is to test whether many parts of your library work together correctly. Units of code that work correctly on their own could have problems when integrated, so test coverage of the integrated code is important as well. To create integration tests, you first need a _tests_ directory.\n\n#### [The _tests_ Directory](#the-tests-directory)\n\nWe create a _tests_ directory at the top level of our project directory, next to _src_. Cargo knows to look for integration test files in this directory. We can then make as many test files as we want, and Cargo will compile each of the files as an individual crate.\n\nLet‚Äôs create an integration test. With the code in Listing 11-12 still in the _src/lib.rs_ file, make a _tests_ directory, and create a new file named _tests/integration\\_test.rs_. Your directory structure should look like this:\n\n```text\nadder\n‚îú‚îÄ‚îÄ Cargo.lock\n‚îú‚îÄ‚îÄ Cargo.toml\n‚îú‚îÄ‚îÄ src\n‚îÇ¬†¬† ‚îî‚îÄ‚îÄ lib.rs\n‚îî‚îÄ‚îÄ tests\n    ‚îî‚îÄ‚îÄ integration_test.rs\n\n```\n\nEnter the code in Listing 11-13 into the _tests/integration\\_test.rs_ file:\n\nFilename: tests/integration\\_test.rs\n\n```rust\nuse adder::add_two;\n\n#[test]\nfn it_adds_two() {\n    assert_eq!(4, add_two(2));\n}\n```\n\nListing 11-13: An integration test of a function in the `adder` crate\n\nEach file in the `tests` directory is a separate crate, so we need to bring our library into each test crate‚Äôs scope. For that reason we add `use adder::add_two` at the top of the code, which we didn‚Äôt need in the unit tests.\n\nWe don‚Äôt need to annotate any code in _tests/integration\\_test.rs_ with `#[cfg(test)]`. Cargo treats the `tests` directory specially and compiles files in this directory only when we run `cargo test`. Run `cargo test` now:\n\n```console\n$ cargo test\n   Compiling adder v0.1.0 (file:///projects/adder)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 1.31s\n     Running unittests src/lib.rs (target/debug/deps/adder-1082c4b063a8fbe6)\n\nrunning 1 test\ntest tests::internal ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n     Running tests/integration_test.rs (target/debug/deps/integration_test-1082c4b063a8fbe6)\n\nrunning 1 test\ntest it_adds_two ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n   Doc-tests adder\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n\n```\n\nThe three sections of output include the unit tests, the integration test, and the doc tests. Note that if any test in a section fails, the following sections will not be run. For example, if a unit test fails, there won‚Äôt be any output for integration and doc tests because those tests will only be run if all unit tests are passing.\n\nThe first section for the unit tests is the same as we‚Äôve been seeing: one line for each unit test (one named `internal` that we added in Listing 11-12) and then a summary line for the unit tests.\n\nThe integration tests section starts with the line `Running tests/integration_test.rs`. Next, there is a line for each test function in that integration test and a summary line for the results of the integration test just before the `Doc-tests adder` section starts.\n\nEach integration test file has its own section, so if we add more files in the _tests_ directory, there will be more integration test sections.\n\nWe can still run a particular integration test function by specifying the test function‚Äôs name as an argument to `cargo test`. To run all the tests in a particular integration test file, use the `--test` argument of `cargo test` followed by the name of the file:\n\n```console\n$ cargo test --test integration_test\n   Compiling adder v0.1.0 (file:///projects/adder)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.64s\n     Running tests/integration_test.rs (target/debug/deps/integration_test-82e7799c1bc62298)\n\nrunning 1 test\ntest it_adds_two ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n\n```\n\nThis command runs only the tests in the _tests/integration\\_test.rs_ file.\n\n#### [Submodules in Integration Tests](#submodules-in-integration-tests)\n\nAs you add more integration tests, you might want to make more files in the _tests_ directory to help organize them; for example, you can group the test functions by the functionality they‚Äôre testing. As mentioned earlier, each file in the _tests_ directory is compiled as its own separate crate, which is useful for creating separate scopes to more closely imitate the way end users will be using your crate. However, this means files in the _tests_ directory don‚Äôt share the same behavior as files in _src_ do, as you learned in Chapter 7 regarding how to separate code into modules and files.\n\nThe different behavior of _tests_ directory files is most noticeable when you have a set of helper functions to use in multiple integration test files and you try to follow the steps in the [‚ÄúSeparating Modules into Different Files‚Äù](ch07-05-separating-modules-into-different-files.html) section of Chapter 7 to extract them into a common module. For example, if we create _tests/common.rs_ and place a function named `setup` in it, we can add some code to `setup` that we want to call from multiple test functions in multiple test files:\n\nFilename: tests/common.rs\n\n```rust\npub fn setup() {\n    // setup code specific to your library's tests would go here\n}\n```\n\nWhen we run the tests again, we‚Äôll see a new section in the test output for the _common.rs_ file, even though this file doesn‚Äôt contain any test functions nor did we call the `setup` function from anywhere:\n\n```console\n$ cargo test\n   Compiling adder v0.1.0 (file:///projects/adder)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.89s\n     Running unittests src/lib.rs (target/debug/deps/adder-92948b65e88960b4)\n\nrunning 1 test\ntest tests::internal ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n     Running tests/common.rs (target/debug/deps/common-92948b65e88960b4)\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n     Running tests/integration_test.rs (target/debug/deps/integration_test-92948b65e88960b4)\n\nrunning 1 test\ntest it_adds_two ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n   Doc-tests adder\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n\n```\n\nHaving `common` appear in the test results with `running 0 tests` displayed for it is not what we wanted. We just wanted to share some code with the other integration test files.\n\nTo avoid having `common` appear in the test output, instead of creating _tests/common.rs_, we‚Äôll create _tests/common/mod.rs_. The project directory now looks like this:\n\n```text\n‚îú‚îÄ‚îÄ Cargo.lock\n‚îú‚îÄ‚îÄ Cargo.toml\n‚îú‚îÄ‚îÄ src\n‚îÇ¬†¬† ‚îî‚îÄ‚îÄ lib.rs\n‚îî‚îÄ‚îÄ tests\n    ‚îú‚îÄ‚îÄ common\n    ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ mod.rs\n    ‚îî‚îÄ‚îÄ integration_test.rs\n\n```\n\nThis is the older naming convention that Rust also understands that we mentioned in the [‚ÄúAlternate File Paths‚Äù](about:blank/ch07-05-separating-modules-into-different-files.html#alternate-file-paths) section of Chapter 7. Naming the file this way tells Rust not to treat the `common` module as an integration test file. When we move the `setup` function code into _tests/common/mod.rs_ and delete the _tests/common.rs_ file, the section in the test output will no longer appear. Files in subdirectories of the _tests_ directory don‚Äôt get compiled as separate crates or have sections in the test output.\n\nAfter we‚Äôve created _tests/common/mod.rs_, we can use it from any of the integration test files as a module. Here‚Äôs an example of calling the `setup` function from the `it_adds_two` test in _tests/integration\\_test.rs_:\n\nFilename: tests/integration\\_test.rs\n\n```rust\nuse adder;\n\nmod common;\n\n#[test]\nfn it_adds_two() {\n    common::setup();\n    assert_eq!(4, adder::add_two(2));\n}\n```\n\nNote that the `mod common;` declaration is the same as the module declaration we demonstrated in Listing 7-21. Then in the test function, we can call the `common::setup()` function.\n\n#### [Integration Tests for Binary Crates](#integration-tests-for-binary-crates)\n\nIf our project is a binary crate that only contains a _src/main.rs_ file and doesn‚Äôt have a _src/lib.rs_ file, we can‚Äôt create integration tests in the _tests_ directory and bring functions defined in the _src/main.rs_ file into scope with a `use` statement. Only library crates expose functions that other crates can use; binary crates are meant to be run on their own.\n\nThis is one of the reasons Rust projects that provide a binary have a straightforward _src/main.rs_ file that calls logic that lives in the _src/lib.rs_ file. Using that structure, integration tests _can_ test the library crate with `use` to make the important functionality available. If the important functionality works, the small amount of code in the _src/main.rs_ file will work as well, and that small amount of code doesn‚Äôt need to be tested.\n\n## [Summary](#summary-10)\n\nRust‚Äôs testing features provide a way to specify how code should function to ensure it continues to work as you expect, even as you make changes. Unit tests exercise different parts of a library separately and can test private implementation details. Integration tests check that many parts of the library work together correctly, and they use the library‚Äôs public API to test the code in the same way external code will use it. Even though Rust‚Äôs type system and ownership rules help prevent some kinds of bugs, tests are still important to reduce logic bugs having to do with how your code is expected to behave.\n\nLet‚Äôs combine the knowledge you learned in this chapter and in previous chapters to work on a project!\n\n## [An I/O Project: Building a Command Line Program](#an-io-project-building-a-command-line-program)\n\nThis chapter is a recap of the many skills you‚Äôve learned so far and an exploration of a few more standard library features. We‚Äôll build a command line tool that interacts with file and command line input/output to practice some of the Rust concepts you now have under your belt.\n\nRust‚Äôs speed, safety, single binary output, and cross-platform support make it an ideal language for creating command line tools, so for our project, we‚Äôll make our own version of the classic command line search tool `grep` (**g**lobally search a **r**egular **e**xpression and **p**rint). In the simplest use case, `grep` searches a specified file for a specified string. To do so, `grep` takes as its arguments a file path and a string. Then it reads the file, finds lines in that file that contain the string argument, and prints those lines.\n\nAlong the way, we‚Äôll show how to make our command line tool use the terminal features that many other command line tools use. We‚Äôll read the value of an environment variable to allow the user to configure the behavior of our tool. We‚Äôll also print error messages to the standard error console stream (`stderr`) instead of standard output (`stdout`), so, for example, the user can redirect successful output to a file while still seeing error messages onscreen.\n\nOne Rust community member, Andrew Gallant, has already created a fully featured, very fast version of `grep`, called `ripgrep`. By comparison, our version will be fairly simple, but this chapter will give you some of the background knowledge you need to understand a real-world project such as `ripgrep`.\n\nOur `grep` project will combine a number of concepts you‚Äôve learned so far:\n\n-   Organizing code (using what you learned about modules in [Chapter 7](ch07-00-managing-growing-projects-with-packages-crates-and-modules.html))\n-   Using vectors and strings (collections, [Chapter 8](ch08-00-common-collections.html))\n-   Handling errors ([Chapter 9](ch09-00-error-handling.html))\n-   Using traits and lifetimes where appropriate ([Chapter 10](ch10-00-generics.html))\n-   Writing tests ([Chapter 11](ch11-00-testing.html))\n\nWe‚Äôll also briefly introduce closures, iterators, and trait objects, which Chapters [13](ch13-00-functional-features.html) and [17](ch17-00-oop.html) will cover in detail.\n\n## [Accepting Command Line Arguments](#accepting-command-line-arguments)\n\nLet‚Äôs create a new project with, as always, `cargo new`. We‚Äôll call our project `minigrep` to distinguish it from the `grep` tool that you might already have on your system.\n\n```console\n$ cargo new minigrep\n     Created binary (application) `minigrep` project\n$ cd minigrep\n\n```\n\nThe first task is to make `minigrep` accept its two command line arguments: the file path and a string to search for. That is, we want to be able to run our program with `cargo run`, two hyphens to indicate the following arguments are for our program rather than for `cargo`, a string to search for, and a path to a file to search in, like so:\n\n```console\n$ cargo run -- searchstring example-filename.txt\n\n```\n\nRight now, the program generated by `cargo new` cannot process arguments we give it. Some existing libraries on [crates.io](https://crates.io/) can help with writing a program that accepts command line arguments, but because you‚Äôre just learning this concept, let‚Äôs implement this capability ourselves.\n\n### [Reading the Argument Values](#reading-the-argument-values)\n\nTo enable `minigrep` to read the values of command line arguments we pass to it, we‚Äôll need the `std::env::args` function provided in Rust‚Äôs standard library. This function returns an iterator of the command line arguments passed to `minigrep`. We‚Äôll cover iterators fully in [Chapter 13](ch13-00-functional-features.html). For now, you only need to know two details about iterators: iterators produce a series of values, and we can call the `collect` method on an iterator to turn it into a collection, such as a vector, that contains all the elements the iterator produces.\n\nThe code in Listing 12-1 allows your `minigrep` program to read any command line arguments passed to it and then collect the values into a vector.\n\nFilename: src/main.rs\n\n```rust\nuse std::env;\n\nfn main() {\n    let args: Vec<String> = env::args().collect();\n    dbg!(args);\n}\n```\n\nListing 12-1: Collecting the command line arguments into a vector and printing them\n\nFirst, we bring the `std::env` module into scope with a `use` statement so we can use its `args` function. Notice that the `std::env::args` function is nested in two levels of modules. As we discussed in [Chapter 7](about:blank/ch07-04-bringing-paths-into-scope-with-the-use-keyword.html#creating-idiomatic-use-paths), in cases where the desired function is nested in more than one module, we‚Äôve chosen to bring the parent module into scope rather than the function. By doing so, we can easily use other functions from `std::env`. It‚Äôs also less ambiguous than adding `use std::env::args` and then calling the function with just `args`, because `args` might easily be mistaken for a function that‚Äôs defined in the current module.\n\n### [The `args` Function and Invalid Unicode](#the-args-function-and-invalid-unicode)\n\nNote that `std::env::args` will panic if any argument contains invalid Unicode. If your program needs to accept arguments containing invalid Unicode, use `std::env::args_os` instead. That function returns an iterator that produces `OsString` values instead of `String` values. We‚Äôve chosen to use `std::env::args` here for simplicity, because `OsString` values differ per platform and are more complex to work with than `String` values.\n\nOn the first line of `main`, we call `env::args`, and we immediately use `collect` to turn the iterator into a vector containing all the values produced by the iterator. We can use the `collect` function to create many kinds of collections, so we explicitly annotate the type of `args` to specify that we want a vector of strings. Although we very rarely need to annotate types in Rust, `collect` is one function you do often need to annotate because Rust isn‚Äôt able to infer the kind of collection you want.\n\nFinally, we print the vector using the debug macro. Let‚Äôs try running the code first with no arguments and then with two arguments:\n\n```console\n$ cargo run\n   Compiling minigrep v0.1.0 (file:///projects/minigrep)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.61s\n     Running `target/debug/minigrep`\n[src/main.rs:5:5] args = [\n    \"target/debug/minigrep\",\n]\n\n```\n\n```console\n$ cargo run -- needle haystack\n   Compiling minigrep v0.1.0 (file:///projects/minigrep)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 1.57s\n     Running `target/debug/minigrep needle haystack`\n[src/main.rs:5:5] args = [\n    \"target/debug/minigrep\",\n    \"needle\",\n    \"haystack\",\n]\n\n```\n\nNotice that the first value in the vector is `\"target/debug/minigrep\"`, which is the name of our binary. This matches the behavior of the arguments list in C, letting programs use the name by which they were invoked in their execution. It‚Äôs often convenient to have access to the program name in case you want to print it in messages or change behavior of the program based on what command line alias was used to invoke the program. But for the purposes of this chapter, we‚Äôll ignore it and save only the two arguments we need.\n\n### [Saving the Argument Values in Variables](#saving-the-argument-values-in-variables)\n\nThe program is currently able to access the values specified as command line arguments. Now we need to save the values of the two arguments in variables so we can use the values throughout the rest of the program. We do that in Listing 12-2.\n\nFilename: src/main.rs\n\n```rust\nuse std::env;\n\nfn main() {\n    let args: Vec<String> = env::args().collect();\n\n    let query = &args[1];\n    let file_path = &args[2];\n\n    println!(\"Searching for {query}\");\n    println!(\"In file {file_path}\");\n}\n```\n\nListing 12-2: Creating variables to hold the query argument and file path argument\n\nAs we saw when we printed the vector, the program‚Äôs name takes up the first value in the vector at `args[0]`, so we‚Äôre starting arguments at index `1`. The first argument `minigrep` takes is the string we‚Äôre searching for, so we put a reference to the first argument in the variable `query`. The second argument will be the file path, so we put a reference to the second argument in the variable `file_path`.\n\nWe temporarily print the values of these variables to prove that the code is working as we intend. Let‚Äôs run this program again with the arguments `test` and `sample.txt`:\n\n```console\n$ cargo run -- test sample.txt\n   Compiling minigrep v0.1.0 (file:///projects/minigrep)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.0s\n     Running `target/debug/minigrep test sample.txt`\nSearching for test\nIn file sample.txt\n\n```\n\nGreat, the program is working! The values of the arguments we need are being saved into the right variables. Later we‚Äôll add some error handling to deal with certain potential erroneous situations, such as when the user provides no arguments; for now, we‚Äôll ignore that situation and work on adding file-reading capabilities instead.\n\n## [Reading a File](#reading-a-file)\n\nNow we‚Äôll add functionality to read the file specified in the `file_path` argument. First, we need a sample file to test it with: we‚Äôll use a file with a small amount of text over multiple lines with some repeated words. Listing 12-3 has an Emily Dickinson poem that will work well! Create a file called _poem.txt_ at the root level of your project, and enter the poem ‚ÄúI‚Äôm Nobody! Who are you?‚Äù\n\nFilename: poem.txt\n\n```text\nI'm nobody! Who are you?\nAre you nobody, too?\nThen there's a pair of us - don't tell!\nThey'd banish us, you know.\n\nHow dreary to be somebody!\nHow public, like a frog\nTo tell your name the livelong day\nTo an admiring bog!\n\n```\n\nListing 12-3: A poem by Emily Dickinson makes a good test case\n\nWith the text in place, edit _src/main.rs_ and add code to read the file, as shown in Listing 12-4.\n\nFilename: src/main.rs\n\n```rust\nuse std::env;\nuse std::fs;\n\nfn main() {\n    // --snip--\n    let args: Vec<String> = env::args().collect();\n\n    let query = &args[1];\n    let file_path = &args[2];\n\n    println!(\"Searching for {query}\");\n    println!(\"In file {file_path}\");\n\n    let contents = fs::read_to_string(file_path)\n        .expect(\"Should have been able to read the file\");\n\n    println!(\"With text:\\n{contents}\");\n}\n```\n\nListing 12-4: Reading the contents of the file specified by the second argument\n\nFirst, we bring in a relevant part of the standard library with a `use` statement: we need `std::fs` to handle files.\n\nIn `main`, the new statement `fs::read_to_string` takes the `file_path`, opens that file, and returns a `std::io::Result<String>` of the file‚Äôs contents.\n\nAfter that, we again add a temporary `println!` statement that prints the value of `contents` after the file is read, so we can check that the program is working so far.\n\nLet‚Äôs run this code with any string as the first command line argument (because we haven‚Äôt implemented the searching part yet) and the _poem.txt_ file as the second argument:\n\n```console\n$ cargo run -- the poem.txt\n   Compiling minigrep v0.1.0 (file:///projects/minigrep)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.0s\n     Running `target/debug/minigrep the poem.txt`\nSearching for the\nIn file poem.txt\nWith text:\nI'm nobody! Who are you?\nAre you nobody, too?\nThen there's a pair of us - don't tell!\nThey'd banish us, you know.\n\nHow dreary to be somebody!\nHow public, like a frog\nTo tell your name the livelong day\nTo an admiring bog!\n\n\n```\n\nGreat! The code read and then printed the contents of the file. But the code has a few flaws. At the moment, the `main` function has multiple responsibilities: generally, functions are clearer and easier to maintain if each function is responsible for only one idea. The other problem is that we‚Äôre not handling errors as well as we could. The program is still small, so these flaws aren‚Äôt a big problem, but as the program grows, it will be harder to fix them cleanly. It‚Äôs good practice to begin refactoring early on when developing a program, because it‚Äôs much easier to refactor smaller amounts of code. We‚Äôll do that next.\n\n## [Refactoring to Improve Modularity and Error Handling](#refactoring-to-improve-modularity-and-error-handling)\n\nTo improve our program, we‚Äôll fix four problems that have to do with the program‚Äôs structure and how it‚Äôs handling potential errors. First, our `main` function now performs two tasks: it parses arguments and reads files. As our program grows, the number of separate tasks the `main` function handles will increase. As a function gains responsibilities, it becomes more difficult to reason about, harder to test, and harder to change without breaking one of its parts. It‚Äôs best to separate functionality so each function is responsible for one task.\n\nThis issue also ties into the second problem: although `query` and `file_path` are configuration variables to our program, variables like `contents` are used to perform the program‚Äôs logic. The longer `main` becomes, the more variables we‚Äôll need to bring into scope; the more variables we have in scope, the harder it will be to keep track of the purpose of each. It‚Äôs best to group the configuration variables into one structure to make their purpose clear.\n\nThe third problem is that we‚Äôve used `expect` to print an error message when reading the file fails, but the error message just prints `Should have been able to read the file`. Reading a file can fail in a number of ways: for example, the file could be missing, or we might not have permission to open it. Right now, regardless of the situation, we‚Äôd print the same error message for everything, which wouldn‚Äôt give the user any information!\n\nFourth, we use `expect` to handle an error, and if the user runs our program without specifying enough arguments, they‚Äôll get an `index out of bounds` error from Rust that doesn‚Äôt clearly explain the problem. It would be best if all the error-handling code were in one place so future maintainers had only one place to consult the code if the error-handling logic needed to change. Having all the error-handling code in one place will also ensure that we‚Äôre printing messages that will be meaningful to our end users.\n\nLet‚Äôs address these four problems by refactoring our project.\n\n### [Separation of Concerns for Binary Projects](#separation-of-concerns-for-binary-projects)\n\nThe organizational problem of allocating responsibility for multiple tasks to the `main` function is common to many binary projects. As a result, the Rust community has developed guidelines for splitting the separate concerns of a binary program when `main` starts getting large. This process has the following steps:\n\n-   Split your program into a _main.rs_ and a _lib.rs_ and move your program‚Äôs logic to _lib.rs_.\n-   As long as your command line parsing logic is small, it can remain in _main.rs_.\n-   When the command line parsing logic starts getting complicated, extract it from _main.rs_ and move it to _lib.rs_.\n\nThe responsibilities that remain in the `main` function after this process should be limited to the following:\n\n-   Calling the command line parsing logic with the argument values\n-   Setting up any other configuration\n-   Calling a `run` function in _lib.rs_\n-   Handling the error if `run` returns an error\n\nThis pattern is about separating concerns: _main.rs_ handles running the program, and _lib.rs_ handles all the logic of the task at hand. Because you can‚Äôt test the `main` function directly, this structure lets you test all of your program‚Äôs logic by moving it into functions in _lib.rs_. The code that remains in _main.rs_ will be small enough to verify its correctness by reading it. Let‚Äôs rework our program by following this process.\n\nWe‚Äôll extract the functionality for parsing arguments into a function that `main` will call to prepare for moving the command line parsing logic to _src/lib.rs_. Listing 12-5 shows the new start of `main` that calls a new function `parse_config`, which we‚Äôll define in _src/main.rs_ for the moment.\n\nFilename: src/main.rs\n\n```rust\nuse std::env;\nuse std::fs;\n\nfn main() {\n    let args: Vec<String> = env::args().collect();\n\n    let (query, file_path) = parse_config(&args);\n\n    // --snip--\n\n    println!(\"Searching for {query}\");\n    println!(\"In file {file_path}\");\n\n    let contents = fs::read_to_string(file_path)\n        .expect(\"Should have been able to read the file\");\n\n    println!(\"With text:\\n{contents}\");\n}\n\nfn parse_config(args: &[String]) -> (&str, &str) {\n    let query = &args[1];\n    let file_path = &args[2];\n\n    (query, file_path)\n}\n```\n\nListing 12-5: Extracting a `parse_config` function from `main`\n\nWe‚Äôre still collecting the command line arguments into a vector, but instead of assigning the argument value at index 1 to the variable `query` and the argument value at index 2 to the variable `file_path` within the `main` function, we pass the whole vector to the `parse_config` function. The `parse_config` function then holds the logic that determines which argument goes in which variable and passes the values back to `main`. We still create the `query` and `file_path` variables in `main`, but `main` no longer has the responsibility of determining how the command line arguments and variables correspond.\n\nThis rework may seem like overkill for our small program, but we‚Äôre refactoring in small, incremental steps. After making this change, run the program again to verify that the argument parsing still works. It‚Äôs good to check your progress often, to help identify the cause of problems when they occur.\n\n#### [Grouping Configuration Values](#grouping-configuration-values)\n\nWe can take another small step to improve the `parse_config` function further. At the moment, we‚Äôre returning a tuple, but then we immediately break that tuple into individual parts again. This is a sign that perhaps we don‚Äôt have the right abstraction yet.\n\nAnother indicator that shows there‚Äôs room for improvement is the `config` part of `parse_config`, which implies that the two values we return are related and are both part of one configuration value. We‚Äôre not currently conveying this meaning in the structure of the data other than by grouping the two values into a tuple; we‚Äôll instead put the two values into one struct and give each of the struct fields a meaningful name. Doing so will make it easier for future maintainers of this code to understand how the different values relate to each other and what their purpose is.\n\nListing 12-6 shows the improvements to the `parse_config` function.\n\nFilename: src/main.rs\n\n```rust\nuse std::env;\nuse std::fs;\n\nfn main() {\n    let args: Vec<String> = env::args().collect();\n\n    let config = parse_config(&args);\n\n    println!(\"Searching for {}\", config.query);\n    println!(\"In file {}\", config.file_path);\n\n    let contents = fs::read_to_string(config.file_path)\n        .expect(\"Should have been able to read the file\");\n\n    // --snip--\n\n    println!(\"With text:\\n{contents}\");\n}\n\nstruct Config {\n    query: String,\n    file_path: String,\n}\n\nfn parse_config(args: &[String]) -> Config {\n    let query = args[1].clone();\n    let file_path = args[2].clone();\n\n    Config { query, file_path }\n}\n```\n\nListing 12-6: Refactoring `parse_config` to return an instance of a `Config` struct\n\nWe‚Äôve added a struct named `Config` defined to have fields named `query` and `file_path`. The signature of `parse_config` now indicates that it returns a `Config` value. In the body of `parse_config`, where we used to return string slices that reference `String` values in `args`, we now define `Config` to contain owned `String` values. The `args` variable in `main` is the owner of the argument values and is only letting the `parse_config` function borrow them, which means we‚Äôd violate Rust‚Äôs borrowing rules if `Config` tried to take ownership of the values in `args`.\n\nThere are a number of ways we could manage the `String` data; the easiest, though somewhat inefficient, route is to call the `clone` method on the values. This will make a full copy of the data for the `Config` instance to own, which takes more time and memory than storing a reference to the string data. However, cloning the data also makes our code very straightforward because we don‚Äôt have to manage the lifetimes of the references; in this circumstance, giving up a little performance to gain simplicity is a worthwhile trade-off.\n\n### [The Trade-Offs of Using `clone`](#the-trade-offs-of-using-clone)\n\nThere‚Äôs a tendency among many Rustaceans to avoid using `clone` to fix ownership problems because of its runtime cost. In [Chapter 13](ch13-00-functional-features.html), you‚Äôll learn how to use more efficient methods in this type of situation. But for now, it‚Äôs okay to copy a few strings to continue making progress because you‚Äôll make these copies only once and your file path and query string are very small. It‚Äôs better to have a working program that‚Äôs a bit inefficient than to try to hyperoptimize code on your first pass. As you become more experienced with Rust, it‚Äôll be easier to start with the most efficient solution, but for now, it‚Äôs perfectly acceptable to call `clone`.\n\nWe‚Äôve updated `main` so it places the instance of `Config` returned by `parse_config` into a variable named `config`, and we updated the code that previously used the separate `query` and `file_path` variables so it now uses the fields on the `Config` struct instead.\n\nNow our code more clearly conveys that `query` and `file_path` are related and that their purpose is to configure how the program will work. Any code that uses these values knows to find them in the `config` instance in the fields named for their purpose.\n\n#### [Creating a Constructor for `Config`](#creating-a-constructor-for-config)\n\nSo far, we‚Äôve extracted the logic responsible for parsing the command line arguments from `main` and placed it in the `parse_config` function. Doing so helped us to see that the `query` and `file_path` values were related and that relationship should be conveyed in our code. We then added a `Config` struct to name the related purpose of `query` and `file_path` and to be able to return the values‚Äô names as struct field names from the `parse_config` function.\n\nSo now that the purpose of the `parse_config` function is to create a `Config` instance, we can change `parse_config` from a plain function to a function named `new` that is associated with the `Config` struct. Making this change will make the code more idiomatic. We can create instances of types in the standard library, such as `String`, by calling `String::new`. Similarly, by changing `parse_config` into a `new` function associated with `Config`, we‚Äôll be able to create instances of `Config` by calling `Config::new`. Listing 12-7 shows the changes we need to make.\n\nFilename: src/main.rs\n\n```rust\nuse std::env;\nuse std::fs;\n\nfn main() {\n    let args: Vec<String> = env::args().collect();\n\n    let config = Config::new(&args);\n\n    println!(\"Searching for {}\", config.query);\n    println!(\"In file {}\", config.file_path);\n\n    let contents = fs::read_to_string(config.file_path)\n        .expect(\"Should have been able to read the file\");\n\n    println!(\"With text:\\n{contents}\");\n\n    // --snip--\n}\n\n// --snip--\n\nstruct Config {\n    query: String,\n    file_path: String,\n}\n\nimpl Config {\n    fn new(args: &[String]) -> Config {\n        let query = args[1].clone();\n        let file_path = args[2].clone();\n\n        Config { query, file_path }\n    }\n}\n```\n\nListing 12-7: Changing `parse_config` into `Config::new`\n\nWe‚Äôve updated `main` where we were calling `parse_config` to instead call `Config::new`. We‚Äôve changed the name of `parse_config` to `new` and moved it within an `impl` block, which associates the `new` function with `Config`. Try compiling this code again to make sure it works.\n\n### [Fixing the Error Handling](#fixing-the-error-handling)\n\nNow we‚Äôll work on fixing our error handling. Recall that attempting to access the values in the `args` vector at index 1 or index 2 will cause the program to panic if the vector contains fewer than three items. Try running the program without any arguments; it will look like this:\n\n```console\n$ cargo run\n   Compiling minigrep v0.1.0 (file:///projects/minigrep)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.0s\n     Running `target/debug/minigrep`\nthread 'main' panicked at src/main.rs:27:21:\nindex out of bounds: the len is 1 but the index is 1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\n```\n\nThe line `index out of bounds: the len is 1 but the index is 1` is an error message intended for programmers. It won‚Äôt help our end users understand what they should do instead. Let‚Äôs fix that now.\n\n#### [Improving the Error Message](#improving-the-error-message)\n\nIn Listing 12-8, we add a check in the `new` function that will verify that the slice is long enough before accessing index 1 and 2. If the slice isn‚Äôt long enough, the program panics and displays a better error message.\n\nFilename: src/main.rs\n\n```rust\nuse std::env;\nuse std::fs;\n\nfn main() {\n    let args: Vec<String> = env::args().collect();\n\n    let config = Config::new(&args);\n\n    println!(\"Searching for {}\", config.query);\n    println!(\"In file {}\", config.file_path);\n\n    let contents = fs::read_to_string(config.file_path)\n        .expect(\"Should have been able to read the file\");\n\n    println!(\"With text:\\n{contents}\");\n}\n\nstruct Config {\n    query: String,\n    file_path: String,\n}\n\nimpl Config {\n    // --snip--\n    fn new(args: &[String]) -> Config {\n        if args.len() < 3 {\n            panic!(\"not enough arguments\");\n        }\n        // --snip--\n\n        let query = args[1].clone();\n        let file_path = args[2].clone();\n\n        Config { query, file_path }\n    }\n}\n```\n\nListing 12-8: Adding a check for the number of arguments\n\nThis code is similar to [the `Guess::new` function we wrote in Listing 9-13](about:blank/ch09-03-to-panic-or-not-to-panic.html#creating-custom-types-for-validation), where we called `panic!` when the `value` argument was out of the range of valid values. Instead of checking for a range of values here, we‚Äôre checking that the length of `args` is at least 3 and the rest of the function can operate under the assumption that this condition has been met. If `args` has fewer than three items, this condition will be true, and we call the `panic!` macro to end the program immediately.\n\nWith these extra few lines of code in `new`, let‚Äôs run the program without any arguments again to see what the error looks like now:\n\n```console\n$ cargo run\n   Compiling minigrep v0.1.0 (file:///projects/minigrep)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.0s\n     Running `target/debug/minigrep`\nthread 'main' panicked at src/main.rs:26:13:\nnot enough arguments\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\n```\n\nThis output is better: we now have a reasonable error message. However, we also have extraneous information we don‚Äôt want to give to our users. Perhaps using the technique we used in Listing 9-13 isn‚Äôt the best to use here: a call to `panic!` is more appropriate for a programming problem than a usage problem, [as discussed in Chapter 9](about:blank/ch09-03-to-panic-or-not-to-panic.html#guidelines-for-error-handling). Instead, we‚Äôll use the other technique you learned about in Chapter 9‚Äî[returning a `Result`](ch09-02-recoverable-errors-with-result.html) that indicates either success or an error.\n\n#### [Returning a `Result` Instead of Calling `panic!`](#returning-a-result-instead-of-calling-panic)\n\nWe can instead return a `Result` value that will contain a `Config` instance in the successful case and will describe the problem in the error case. We‚Äôre also going to change the function name from `new` to `build` because many programmers expect `new` functions to never fail. When `Config::build` is communicating to `main`, we can use the `Result` type to signal there was a problem. Then we can change `main` to convert an `Err` variant into a more practical error for our users without the surrounding text about `thread 'main'` and `RUST_BACKTRACE` that a call to `panic!` causes.\n\nListing 12-9 shows the changes we need to make to the return value of the function we‚Äôre now calling `Config::build` and the body of the function needed to return a `Result`. Note that this won‚Äôt compile until we update `main` as well, which we‚Äôll do in the next listing.\n\nFilename: src/main.rs\n\n```rust\nuse std::env;\nuse std::fs;\n\nfn main() {\n    let args: Vec<String> = env::args().collect();\n\n    let config = Config::new(&args);\n\n    println!(\"Searching for {}\", config.query);\n    println!(\"In file {}\", config.file_path);\n\n    let contents = fs::read_to_string(config.file_path)\n        .expect(\"Should have been able to read the file\");\n\n    println!(\"With text:\\n{contents}\");\n}\n\nstruct Config {\n    query: String,\n    file_path: String,\n}\n\nimpl Config {\n    fn build(args: &[String]) -> Result<Config, &'static str> {\n        if args.len() < 3 {\n            return Err(\"not enough arguments\");\n        }\n\n        let query = args[1].clone();\n        let file_path = args[2].clone();\n\n        Ok(Config { query, file_path })\n    }\n}\n```\n\nListing 12-9: Returning a `Result` from `Config::build`\n\nOur `build` function returns a `Result` with a `Config` instance in the success case and a `&'static str` in the error case. Our error values will always be string literals that have the `'static` lifetime.\n\nWe‚Äôve made two changes in the body of the function: instead of calling `panic!` when the user doesn‚Äôt pass enough arguments, we now return an `Err` value, and we‚Äôve wrapped the `Config` return value in an `Ok`. These changes make the function conform to its new type signature.\n\nReturning an `Err` value from `Config::build` allows the `main` function to handle the `Result` value returned from the `build` function and exit the process more cleanly in the error case.\n\n#### [Calling `Config::build` and Handling Errors](#calling-configbuild-and-handling-errors)\n\nTo handle the error case and print a user-friendly message, we need to update `main` to handle the `Result` being returned by `Config::build`, as shown in Listing 12-10. We‚Äôll also take the responsibility of exiting the command line tool with a nonzero error code away from `panic!` and instead implement it by hand. A nonzero exit status is a convention to signal to the process that called our program that the program exited with an error state.\n\nFilename: src/main.rs\n\n```rust\nuse std::env;\nuse std::fs;\nuse std::process;\n\nfn main() {\n    let args: Vec<String> = env::args().collect();\n\n    let config = Config::build(&args).unwrap_or_else(|err| {\n        println!(\"Problem parsing arguments: {err}\");\n        process::exit(1);\n    });\n\n    // --snip--\n\n    println!(\"Searching for {}\", config.query);\n    println!(\"In file {}\", config.file_path);\n\n    let contents = fs::read_to_string(config.file_path)\n        .expect(\"Should have been able to read the file\");\n\n    println!(\"With text:\\n{contents}\");\n}\n\nstruct Config {\n    query: String,\n    file_path: String,\n}\n\nimpl Config {\n    fn build(args: &[String]) -> Result<Config, &'static str> {\n        if args.len() < 3 {\n            return Err(\"not enough arguments\");\n        }\n\n        let query = args[1].clone();\n        let file_path = args[2].clone();\n\n        Ok(Config { query, file_path })\n    }\n}\n```\n\nListing 12-10: Exiting with an error code if building a `Config` fails\n\nIn this listing, we‚Äôve used a method we haven‚Äôt covered in detail yet: `unwrap_or_else`, which is defined on `Result<T, E>` by the standard library. Using `unwrap_or_else` allows us to define some custom, non-`panic!` error handling. If the `Result` is an `Ok` value, this method‚Äôs behavior is similar to `unwrap`: it returns the inner value `Ok` is wrapping. However, if the value is an `Err` value, this method calls the code in the _closure_, which is an anonymous function we define and pass as an argument to `unwrap_or_else`. We‚Äôll cover closures in more detail in [Chapter 13](ch13-00-functional-features.html). For now, you just need to know that `unwrap_or_else` will pass the inner value of the `Err`, which in this case is the static string `\"not enough arguments\"` that we added in Listing 12-9, to our closure in the argument `err` that appears between the vertical pipes. The code in the closure can then use the `err` value when it runs.\n\nWe‚Äôve added a new `use` line to bring `process` from the standard library into scope. The code in the closure that will be run in the error case is only two lines: we print the `err` value and then call `process::exit`. The `process::exit` function will stop the program immediately and return the number that was passed as the exit status code. This is similar to the `panic!`\\-based handling we used in Listing 12-8, but we no longer get all the extra output. Let‚Äôs try it:\n\n```console\n$ cargo run\n   Compiling minigrep v0.1.0 (file:///projects/minigrep)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.48s\n     Running `target/debug/minigrep`\nProblem parsing arguments: not enough arguments\n\n```\n\nGreat! This output is much friendlier for our users.\n\n### [Extracting Logic from `main`](#extracting-logic-from-main)\n\nNow that we‚Äôve finished refactoring the configuration parsing, let‚Äôs turn to the program‚Äôs logic. As we stated in [‚ÄúSeparation of Concerns for Binary Projects‚Äù](about:blank/ch12-03-improving-error-handling-and-modularity.html#separation-of-concerns-for-binary-projects), we‚Äôll extract a function named `run` that will hold all the logic currently in the `main` function that isn‚Äôt involved with setting up configuration or handling errors. When we‚Äôre done, `main` will be concise and easy to verify by inspection, and we‚Äôll be able to write tests for all the other logic.\n\nListing 12-11 shows the extracted `run` function. For now, we‚Äôre just making the small, incremental improvement of extracting the function. We‚Äôre still defining the function in _src/main.rs_.\n\nFilename: src/main.rs\n\n```rust\nuse std::env;\nuse std::fs;\nuse std::process;\n\nfn main() {\n    // --snip--\n\n    let args: Vec<String> = env::args().collect();\n\n    let config = Config::build(&args).unwrap_or_else(|err| {\n        println!(\"Problem parsing arguments: {err}\");\n        process::exit(1);\n    });\n\n    println!(\"Searching for {}\", config.query);\n    println!(\"In file {}\", config.file_path);\n\n    run(config);\n}\n\nfn run(config: Config) {\n    let contents = fs::read_to_string(config.file_path)\n        .expect(\"Should have been able to read the file\");\n\n    println!(\"With text:\\n{contents}\");\n}\n\n// --snip--\n\nstruct Config {\n    query: String,\n    file_path: String,\n}\n\nimpl Config {\n    fn build(args: &[String]) -> Result<Config, &'static str> {\n        if args.len() < 3 {\n            return Err(\"not enough arguments\");\n        }\n\n        let query = args[1].clone();\n        let file_path = args[2].clone();\n\n        Ok(Config { query, file_path })\n    }\n}\n```\n\nListing 12-11: Extracting a `run` function containing the rest of the program logic\n\nThe `run` function now contains all the remaining logic from `main`, starting from reading the file. The `run` function takes the `Config` instance as an argument.\n\n#### [Returning Errors from the `run` Function](#returning-errors-from-the-run-function)\n\nWith the remaining program logic separated into the `run` function, we can improve the error handling, as we did with `Config::build` in Listing 12-9. Instead of allowing the program to panic by calling `expect`, the `run` function will return a `Result<T, E>` when something goes wrong. This will let us further consolidate the logic around handling errors into `main` in a user-friendly way. Listing 12-12 shows the changes we need to make to the signature and body of `run`.\n\nFilename: src/main.rs\n\n```rust\nuse std::env;\nuse std::fs;\nuse std::process;\nuse std::error::Error;\n\n// --snip--\n\n\nfn main() {\n    let args: Vec<String> = env::args().collect();\n\n    let config = Config::build(&args).unwrap_or_else(|err| {\n        println!(\"Problem parsing arguments: {err}\");\n        process::exit(1);\n    });\n\n    println!(\"Searching for {}\", config.query);\n    println!(\"In file {}\", config.file_path);\n\n    run(config);\n}\n\nfn run(config: Config) -> Result<(), Box<dyn Error>> {\n    let contents = fs::read_to_string(config.file_path)?;\n\n    println!(\"With text:\\n{contents}\");\n\n    Ok(())\n}\n\nstruct Config {\n    query: String,\n    file_path: String,\n}\n\nimpl Config {\n    fn build(args: &[String]) -> Result<Config, &'static str> {\n        if args.len() < 3 {\n            return Err(\"not enough arguments\");\n        }\n\n        let query = args[1].clone();\n        let file_path = args[2].clone();\n\n        Ok(Config { query, file_path })\n    }\n}\n```\n\nListing 12-12: Changing the `run` function to return `Result`\n\nWe‚Äôve made three significant changes here. First, we changed the return type of the `run` function to `Result<(), Box<dyn Error>>`. This function previously returned the unit type, `()`, and we keep that as the value returned in the `Ok` case.\n\nFor the error type, we used the _trait object_ `Box<dyn Error>` (and we‚Äôve brought `std::error::Error` into scope with a `use` statement at the top). We‚Äôll cover trait objects in [Chapter 17](ch17-00-oop.html). For now, just know that `Box<dyn Error>` means the function will return a type that implements the `Error` trait, but we don‚Äôt have to specify what particular type the return value will be. This gives us flexibility to return error values that may be of different types in different error cases. The `dyn` keyword is short for ‚Äúdynamic.‚Äù\n\nSecond, we‚Äôve removed the call to `expect` in favor of the `?` operator, as we talked about in [Chapter 9](about:blank/ch09-02-recoverable-errors-with-result.html#a-shortcut-for-propagating-errors-the--operator). Rather than `panic!` on an error, `?` will return the error value from the current function for the caller to handle.\n\nThird, the `run` function now returns an `Ok` value in the success case. We‚Äôve declared the `run` function‚Äôs success type as `()` in the signature, which means we need to wrap the unit type value in the `Ok` value. This `Ok(())` syntax might look a bit strange at first, but using `()` like this is the idiomatic way to indicate that we‚Äôre calling `run` for its side effects only; it doesn‚Äôt return a value we need.\n\nWhen you run this code, it will compile but will display a warning:\n\n```console\n$ cargo run -- the poem.txt\n   Compiling minigrep v0.1.0 (file:///projects/minigrep)\nwarning: unused `Result` that must be used\n  --> src/main.rs:19:5\n   |\n19 |     run(config);\n   |     ^^^^^^^^^^^\n   |\n   = note: this `Result` may be an `Err` variant, which should be handled\n   = note: `#[warn(unused_must_use)]` on by default\nhelp: use `let _ = ...` to ignore the resulting value\n   |\n19 |     let _ = run(config);\n   |     +++++++\n\nwarning: `minigrep` (bin \"minigrep\") generated 1 warning\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.71s\n     Running `target/debug/minigrep the poem.txt`\nSearching for the\nIn file poem.txt\nWith text:\nI'm nobody! Who are you?\nAre you nobody, too?\nThen there's a pair of us - don't tell!\nThey'd banish us, you know.\n\nHow dreary to be somebody!\nHow public, like a frog\nTo tell your name the livelong day\nTo an admiring bog!\n\n\n```\n\nRust tells us that our code ignored the `Result` value and the `Result` value might indicate that an error occurred. But we‚Äôre not checking to see whether or not there was an error, and the compiler reminds us that we probably meant to have some error-handling code here! Let‚Äôs rectify that problem now.\n\n#### [Handling Errors Returned from `run` in `main`](#handling-errors-returned-from-run-in-main)\n\nWe‚Äôll check for errors and handle them using a technique similar to one we used with `Config::build` in Listing 12-10, but with a slight difference:\n\nFilename: src/main.rs\n\n```rust\nuse std::env;\nuse std::error::Error;\nuse std::fs;\nuse std::process;\n\nfn main() {\n    // --snip--\n\n    let args: Vec<String> = env::args().collect();\n\n    let config = Config::build(&args).unwrap_or_else(|err| {\n        println!(\"Problem parsing arguments: {err}\");\n        process::exit(1);\n    });\n\n    println!(\"Searching for {}\", config.query);\n    println!(\"In file {}\", config.file_path);\n\n    if let Err(e) = run(config) {\n        println!(\"Application error: {e}\");\n        process::exit(1);\n    }\n}\n\nfn run(config: Config) -> Result<(), Box<dyn Error>> {\n    let contents = fs::read_to_string(config.file_path)?;\n\n    println!(\"With text:\\n{contents}\");\n\n    Ok(())\n}\n\nstruct Config {\n    query: String,\n    file_path: String,\n}\n\nimpl Config {\n    fn build(args: &[String]) -> Result<Config, &'static str> {\n        if args.len() < 3 {\n            return Err(\"not enough arguments\");\n        }\n\n        let query = args[1].clone();\n        let file_path = args[2].clone();\n\n        Ok(Config { query, file_path })\n    }\n}\n```\n\nWe use `if let` rather than `unwrap_or_else` to check whether `run` returns an `Err` value and call `process::exit(1)` if it does. The `run` function doesn‚Äôt return a value that we want to `unwrap` in the same way that `Config::build` returns the `Config` instance. Because `run` returns `()` in the success case, we only care about detecting an error, so we don‚Äôt need `unwrap_or_else` to return the unwrapped value, which would only be `()`.\n\nThe bodies of the `if let` and the `unwrap_or_else` functions are the same in both cases: we print the error and exit.\n\n### [Splitting Code into a Library Crate](#splitting-code-into-a-library-crate)\n\nOur `minigrep` project is looking good so far! Now we‚Äôll split the _src/main.rs_ file and put some code into the _src/lib.rs_ file. That way we can test the code and have a _src/main.rs_ file with fewer responsibilities.\n\nLet‚Äôs move all the code that isn‚Äôt the `main` function from _src/main.rs_ to _src/lib.rs_:\n\n-   The `run` function definition\n-   The relevant `use` statements\n-   The definition of `Config`\n-   The `Config::build` function definition\n\nThe contents of _src/lib.rs_ should have the signatures shown in Listing 12-13 (we‚Äôve omitted the bodies of the functions for brevity). Note that this won‚Äôt compile until we modify _src/main.rs_ in Listing 12-14.\n\nFilename: src/lib.rs\n\n```rust\nuse std::error::Error;\nuse std::fs;\n\npub struct Config {\n    pub query: String,\n    pub file_path: String,\n}\n\nimpl Config {\n    pub fn build(args: &[String]) -> Result<Config, &'static str> {\n        // --snip--\n        if args.len() < 3 {\n            return Err(\"not enough arguments\");\n        }\n\n        let query = args[1].clone();\n        let file_path = args[2].clone();\n\n        Ok(Config { query, file_path })\n    }\n}\n\npub fn run(config: Config) -> Result<(), Box<dyn Error>> {\n    // --snip--\n    let contents = fs::read_to_string(config.file_path)?;\n\n    println!(\"With text:\\n{contents}\");\n\n    Ok(())\n}\n```\n\nListing 12-13: Moving `Config` and `run` into _src/lib.rs_\n\nWe‚Äôve made liberal use of the `pub` keyword: on `Config`, on its fields and its `build` method, and on the `run` function. We now have a library crate that has a public API we can test!\n\nNow we need to bring the code we moved to _src/lib.rs_ into the scope of the binary crate in _src/main.rs_, as shown in Listing 12-14.\n\nFilename: src/main.rs\n\n```rust\nuse std::env;\nuse std::process;\n\nuse minigrep::Config;\n\nfn main() {\n    // --snip--\n    let args: Vec<String> = env::args().collect();\n\n    let config = Config::build(&args).unwrap_or_else(|err| {\n        println!(\"Problem parsing arguments: {err}\");\n        process::exit(1);\n    });\n\n    println!(\"Searching for {}\", config.query);\n    println!(\"In file {}\", config.file_path);\n\n    if let Err(e) = minigrep::run(config) {\n        // --snip--\n        println!(\"Application error: {e}\");\n        process::exit(1);\n    }\n}\n```\n\nListing 12-14: Using the `minigrep` library crate in _src/main.rs_\n\nWe add a `use minigrep::Config` line to bring the `Config` type from the library crate into the binary crate‚Äôs scope, and we prefix the `run` function with our crate name. Now all the functionality should be connected and should work. Run the program with `cargo run` and make sure everything works correctly.\n\nWhew! That was a lot of work, but we‚Äôve set ourselves up for success in the future. Now it‚Äôs much easier to handle errors, and we‚Äôve made the code more modular. Almost all of our work will be done in _src/lib.rs_ from here on out.\n\nLet‚Äôs take advantage of this newfound modularity by doing something that would have been difficult with the old code but is easy with the new code: we‚Äôll write some tests!\n\n## [Developing the Library‚Äôs Functionality with Test-Driven Development](#developing-the-librarys-functionality-with-test-driven-development)\n\nNow that we‚Äôve extracted the logic into _src/lib.rs_ and left the argument collecting and error handling in _src/main.rs_, it‚Äôs much easier to write tests for the core functionality of our code. We can call functions directly with various arguments and check return values without having to call our binary from the command line.\n\nIn this section, we‚Äôll add the searching logic to the `minigrep` program using the test-driven development (TDD) process with the following steps:\n\n1.  Write a test that fails and run it to make sure it fails for the reason you expect.\n2.  Write or modify just enough code to make the new test pass.\n3.  Refactor the code you just added or changed and make sure the tests continue to pass.\n4.  Repeat from step 1!\n\nThough it‚Äôs just one of many ways to write software, TDD can help drive code design. Writing the test before you write the code that makes the test pass helps to maintain high test coverage throughout the process.\n\nWe‚Äôll test drive the implementation of the functionality that will actually do the searching for the query string in the file contents and produce a list of lines that match the query. We‚Äôll add this functionality in a function called `search`.\n\n### [Writing a Failing Test](#writing-a-failing-test)\n\nBecause we don‚Äôt need them anymore, let‚Äôs remove the `println!` statements from _src/lib.rs_ and _src/main.rs_ that we used to check the program‚Äôs behavior. Then, in _src/lib.rs_, add a `tests` module with a test function, as we did in [Chapter 11](about:blank/ch11-01-writing-tests.html#the-anatomy-of-a-test-function). The test function specifies the behavior we want the `search` function to have: it will take a query and the text to search, and it will return only the lines from the text that contain the query. Listing 12-15 shows this test, which won‚Äôt compile yet.\n\nFilename: src/lib.rs\n\n```rust\nuse std::error::Error;\nuse std::fs;\n\npub struct Config {\n    pub query: String,\n    pub file_path: String,\n}\n\nimpl Config {\n    pub fn build(args: &[String]) -> Result<Config, &'static str> {\n        if args.len() < 3 {\n            return Err(\"not enough arguments\");\n        }\n\n        let query = args[1].clone();\n        let file_path = args[2].clone();\n\n        Ok(Config { query, file_path })\n    }\n}\n\npub fn run(config: Config) -> Result<(), Box<dyn Error>> {\n    let contents = fs::read_to_string(config.file_path)?;\n\n    Ok(())\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn one_result() {\n        let query = \"duct\";\n        let contents = \"\\\nRust:\nsafe, fast, productive.\nPick three.\";\n\n        assert_eq!(vec![\"safe, fast, productive.\"], search(query, contents));\n    }\n}\n```\n\nListing 12-15: Creating a failing test for the `search` function we wish we had\n\nThis test searches for the string `\"duct\"`. The text we‚Äôre searching is three lines, only one of which contains `\"duct\"` (Note that the backslash after the opening double quote tells Rust not to put a newline character at the beginning of the contents of this string literal). We assert that the value returned from the `search` function contains only the line we expect.\n\nWe aren‚Äôt yet able to run this test and watch it fail because the test doesn‚Äôt even compile: the `search` function doesn‚Äôt exist yet! In accordance with TDD principles, we‚Äôll add just enough code to get the test to compile and run by adding a definition of the `search` function that always returns an empty vector, as shown in Listing 12-16. Then the test should compile and fail because an empty vector doesn‚Äôt match a vector containing the line `\"safe, fast, productive.\"`\n\nFilename: src/lib.rs\n\n```rust\nuse std::error::Error;\nuse std::fs;\n\npub struct Config {\n    pub query: String,\n    pub file_path: String,\n}\n\nimpl Config {\n    pub fn build(args: &[String]) -> Result<Config, &'static str> {\n        if args.len() < 3 {\n            return Err(\"not enough arguments\");\n        }\n\n        let query = args[1].clone();\n        let file_path = args[2].clone();\n\n        Ok(Config { query, file_path })\n    }\n}\n\npub fn run(config: Config) -> Result<(), Box<dyn Error>> {\n    let contents = fs::read_to_string(config.file_path)?;\n\n    Ok(())\n}\n\npub fn search<'a>(query: &str, contents: &'a str) -> Vec<&'a str> {\n    vec![]\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn one_result() {\n        let query = \"duct\";\n        let contents = \"\\\nRust:\nsafe, fast, productive.\nPick three.\";\n\n        assert_eq!(vec![\"safe, fast, productive.\"], search(query, contents));\n    }\n}\n```\n\nListing 12-16: Defining just enough of the `search` function so our test will compile\n\nNotice that we need to define an explicit lifetime `'a` in the signature of `search` and use that lifetime with the `contents` argument and the return value. Recall in [Chapter 10](ch10-03-lifetime-syntax.html) that the lifetime parameters specify which argument lifetime is connected to the lifetime of the return value. In this case, we indicate that the returned vector should contain string slices that reference slices of the argument `contents` (rather than the argument `query`).\n\nIn other words, we tell Rust that the data returned by the `search` function will live as long as the data passed into the `search` function in the `contents` argument. This is important! The data referenced _by_ a slice needs to be valid for the reference to be valid; if the compiler assumes we‚Äôre making string slices of `query` rather than `contents`, it will do its safety checking incorrectly.\n\nIf we forget the lifetime annotations and try to compile this function, we‚Äôll get this error:\n\n```console\n$ cargo build\n   Compiling minigrep v0.1.0 (file:///projects/minigrep)\nerror[E0106]: missing lifetime specifier\n  --> src/lib.rs:28:51\n   |\n28 | pub fn search(query: &str, contents: &str) -> Vec<&str> {\n   |                      ----            ----         ^ expected named lifetime parameter\n   |\n   = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `query` or `contents`\nhelp: consider introducing a named lifetime parameter\n   |\n28 | pub fn search<'a>(query: &'a str, contents: &'a str) -> Vec<&'a str> {\n   |              ++++         ++                 ++              ++\n\nFor more information about this error, try `rustc --explain E0106`.\nerror: could not compile `minigrep` (lib) due to 1 previous error\n\n```\n\nRust can‚Äôt possibly know which of the two arguments we need, so we need to tell it explicitly. Because `contents` is the argument that contains all of our text and we want to return the parts of that text that match, we know `contents` is the argument that should be connected to the return value using the lifetime syntax.\n\nOther programming languages don‚Äôt require you to connect arguments to return values in the signature, but this practice will get easier over time. You might want to compare this example with the [‚ÄúValidating References with Lifetimes‚Äù](about:blank/ch10-03-lifetime-syntax.html#validating-references-with-lifetimes) section in Chapter 10.\n\nNow let‚Äôs run the test:\n\n```console\n$ cargo test\n   Compiling minigrep v0.1.0 (file:///projects/minigrep)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.97s\n     Running unittests src/lib.rs (target/debug/deps/minigrep-9cd200e5fac0fc94)\n\nrunning 1 test\ntest tests::one_result ... FAILED\n\nfailures:\n\n---- tests::one_result stdout ----\nthread 'tests::one_result' panicked at src/lib.rs:44:9:\nassertion `left == right` failed\n  left: [\"safe, fast, productive.\"]\n right: []\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\n\nfailures:\n    tests::one_result\n\ntest result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\nerror: test failed, to rerun pass `--lib`\n\n```\n\nGreat, the test fails, exactly as we expected. Let‚Äôs get the test to pass!\n\n### [Writing Code to Pass the Test](#writing-code-to-pass-the-test)\n\nCurrently, our test is failing because we always return an empty vector. To fix that and implement `search`, our program needs to follow these steps:\n\n-   Iterate through each line of the contents.\n-   Check whether the line contains our query string.\n-   If it does, add it to the list of values we‚Äôre returning.\n-   If it doesn‚Äôt, do nothing.\n-   Return the list of results that match.\n\nLet‚Äôs work through each step, starting with iterating through lines.\n\n#### [Iterating Through Lines with the `lines` Method](#iterating-through-lines-with-the-lines-method)\n\nRust has a helpful method to handle line-by-line iteration of strings, conveniently named `lines`, that works as shown in Listing 12-17. Note this won‚Äôt compile yet.\n\nFilename: src/lib.rs\n\n```rust\nuse std::error::Error;\nuse std::fs;\n\npub struct Config {\n    pub query: String,\n    pub file_path: String,\n}\n\nimpl Config {\n    pub fn build(args: &[String]) -> Result<Config, &'static str> {\n        if args.len() < 3 {\n            return Err(\"not enough arguments\");\n        }\n\n        let query = args[1].clone();\n        let file_path = args[2].clone();\n\n        Ok(Config { query, file_path })\n    }\n}\n\npub fn run(config: Config) -> Result<(), Box<dyn Error>> {\n    let contents = fs::read_to_string(config.file_path)?;\n\n    Ok(())\n}\n\npub fn search<'a>(query: &str, contents: &'a str) -> Vec<&'a str> {\n    for line in contents.lines() {\n        // do something with line\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn one_result() {\n        let query = \"duct\";\n        let contents = \"\\\nRust:\nsafe, fast, productive.\nPick three.\";\n\n        assert_eq!(vec![\"safe, fast, productive.\"], search(query, contents));\n    }\n}\n```\n\nListing 12-17: Iterating through each line in `contents`\n\nThe `lines` method returns an iterator. We‚Äôll talk about iterators in depth in [Chapter 13](ch13-02-iterators.html), but recall that you saw this way of using an iterator in [Listing 3-5](about:blank/ch03-05-control-flow.html#looping-through-a-collection-with-for), where we used a `for` loop with an iterator to run some code on each item in a collection.\n\n#### [Searching Each Line for the Query](#searching-each-line-for-the-query)\n\nNext, we‚Äôll check whether the current line contains our query string. Fortunately, strings have a helpful method named `contains` that does this for us! Add a call to the `contains` method in the `search` function, as shown in Listing 12-18. Note this still won‚Äôt compile yet.\n\nFilename: src/lib.rs\n\n```rust\nuse std::error::Error;\nuse std::fs;\n\npub struct Config {\n    pub query: String,\n    pub file_path: String,\n}\n\nimpl Config {\n    pub fn build(args: &[String]) -> Result<Config, &'static str> {\n        if args.len() < 3 {\n            return Err(\"not enough arguments\");\n        }\n\n        let query = args[1].clone();\n        let file_path = args[2].clone();\n\n        Ok(Config { query, file_path })\n    }\n}\n\npub fn run(config: Config) -> Result<(), Box<dyn Error>> {\n    let contents = fs::read_to_string(config.file_path)?;\n\n    Ok(())\n}\n\npub fn search<'a>(query: &str, contents: &'a str) -> Vec<&'a str> {\n    for line in contents.lines() {\n        if line.contains(query) {\n            // do something with line\n        }\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn one_result() {\n        let query = \"duct\";\n        let contents = \"\\\nRust:\nsafe, fast, productive.\nPick three.\";\n\n        assert_eq!(vec![\"safe, fast, productive.\"], search(query, contents));\n    }\n}\n```\n\nListing 12-18: Adding functionality to see whether the line contains the string in `query`\n\nAt the moment, we‚Äôre building up functionality. To get it to compile, we need to return a value from the body as we indicated we would in the function signature.\n\n#### [Storing Matching Lines](#storing-matching-lines)\n\nTo finish this function, we need a way to store the matching lines that we want to return. For that, we can make a mutable vector before the `for` loop and call the `push` method to store a `line` in the vector. After the `for` loop, we return the vector, as shown in Listing 12-19.\n\nFilename: src/lib.rs\n\n```rust\nuse std::error::Error;\nuse std::fs;\n\npub struct Config {\n    pub query: String,\n    pub file_path: String,\n}\n\nimpl Config {\n    pub fn build(args: &[String]) -> Result<Config, &'static str> {\n        if args.len() < 3 {\n            return Err(\"not enough arguments\");\n        }\n\n        let query = args[1].clone();\n        let file_path = args[2].clone();\n\n        Ok(Config { query, file_path })\n    }\n}\n\npub fn run(config: Config) -> Result<(), Box<dyn Error>> {\n    let contents = fs::read_to_string(config.file_path)?;\n\n    Ok(())\n}\n\npub fn search<'a>(query: &str, contents: &'a str) -> Vec<&'a str> {\n    let mut results = Vec::new();\n\n    for line in contents.lines() {\n        if line.contains(query) {\n            results.push(line);\n        }\n    }\n\n    results\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn one_result() {\n        let query = \"duct\";\n        let contents = \"\\\nRust:\nsafe, fast, productive.\nPick three.\";\n\n        assert_eq!(vec![\"safe, fast, productive.\"], search(query, contents));\n    }\n}\n```\n\nListing 12-19: Storing the lines that match so we can return them\n\nNow the `search` function should return only the lines that contain `query`, and our test should pass. Let‚Äôs run the test:\n\n```console\n$ cargo test\n   Compiling minigrep v0.1.0 (file:///projects/minigrep)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 1.22s\n     Running unittests src/lib.rs (target/debug/deps/minigrep-9cd200e5fac0fc94)\n\nrunning 1 test\ntest tests::one_result ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n     Running unittests src/main.rs (target/debug/deps/minigrep-9cd200e5fac0fc94)\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n   Doc-tests minigrep\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n\n```\n\nOur test passed, so we know it works!\n\nAt this point, we could consider opportunities for refactoring the implementation of the search function while keeping the tests passing to maintain the same functionality. The code in the search function isn‚Äôt too bad, but it doesn‚Äôt take advantage of some useful features of iterators. We‚Äôll return to this example in [Chapter 13](ch13-02-iterators.html), where we‚Äôll explore iterators in detail, and look at how to improve it.\n\n#### [Using the `search` Function in the `run` Function](#using-the-search-function-in-the-run-function)\n\nNow that the `search` function is working and tested, we need to call `search` from our `run` function. We need to pass the `config.query` value and the `contents` that `run` reads from the file to the `search` function. Then `run` will print each line returned from `search`:\n\nFilename: src/lib.rs\n\n```rust\nuse std::error::Error;\nuse std::fs;\n\npub struct Config {\n    pub query: String,\n    pub file_path: String,\n}\n\nimpl Config {\n    pub fn build(args: &[String]) -> Result<Config, &'static str> {\n        if args.len() < 3 {\n            return Err(\"not enough arguments\");\n        }\n\n        let query = args[1].clone();\n        let file_path = args[2].clone();\n\n        Ok(Config { query, file_path })\n    }\n}\n\npub fn run(config: Config) -> Result<(), Box<dyn Error>> {\n    let contents = fs::read_to_string(config.file_path)?;\n\n    for line in search(&config.query, &contents) {\n        println!(\"{line}\");\n    }\n\n    Ok(())\n}\n\npub fn search<'a>(query: &str, contents: &'a str) -> Vec<&'a str> {\n    let mut results = Vec::new();\n\n    for line in contents.lines() {\n        if line.contains(query) {\n            results.push(line);\n        }\n    }\n\n    results\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn one_result() {\n        let query = \"duct\";\n        let contents = \"\\\nRust:\nsafe, fast, productive.\nPick three.\";\n\n        assert_eq!(vec![\"safe, fast, productive.\"], search(query, contents));\n    }\n}\n```\n\nWe‚Äôre still using a `for` loop to return each line from `search` and print it.\n\nNow the entire program should work! Let‚Äôs try it out, first with a word that should return exactly one line from the Emily Dickinson poem, ‚Äúfrog‚Äù:\n\n```console\n$ cargo run -- frog poem.txt\n   Compiling minigrep v0.1.0 (file:///projects/minigrep)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.38s\n     Running `target/debug/minigrep frog poem.txt`\nHow public, like a frog\n\n```\n\nCool! Now let‚Äôs try a word that will match multiple lines, like ‚Äúbody‚Äù:\n\n```console\n$ cargo run -- body poem.txt\n   Compiling minigrep v0.1.0 (file:///projects/minigrep)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.0s\n     Running `target/debug/minigrep body poem.txt`\nI'm nobody! Who are you?\nAre you nobody, too?\nHow dreary to be somebody!\n\n```\n\nAnd finally, let‚Äôs make sure that we don‚Äôt get any lines when we search for a word that isn‚Äôt anywhere in the poem, such as ‚Äúmonomorphization‚Äù:\n\n```console\n$ cargo run -- monomorphization poem.txt\n   Compiling minigrep v0.1.0 (file:///projects/minigrep)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.0s\n     Running `target/debug/minigrep monomorphization poem.txt`\n\n```\n\nExcellent! We‚Äôve built our own mini version of a classic tool and learned a lot about how to structure applications. We‚Äôve also learned a bit about file input and output, lifetimes, testing, and command line parsing.\n\nTo round out this project, we‚Äôll briefly demonstrate how to work with environment variables and how to print to standard error, both of which are useful when you‚Äôre writing command line programs.\n\n## [Working with Environment Variables](#working-with-environment-variables)\n\nWe‚Äôll improve `minigrep` by adding an extra feature: an option for case-insensitive searching that the user can turn on via an environment variable. We could make this feature a command line option and require that users enter it each time they want it to apply, but by instead making it an environment variable, we allow our users to set the environment variable once and have all their searches be case insensitive in that terminal session.\n\n### [Writing a Failing Test for the Case-Insensitive `search` Function](#writing-a-failing-test-for-the-case-insensitive-search-function)\n\nWe first add a new `search_case_insensitive` function that will be called when the environment variable has a value. We‚Äôll continue to follow the TDD process, so the first step is again to write a failing test. We‚Äôll add a new test for the new `search_case_insensitive` function and rename our old test from `one_result` to `case_sensitive` to clarify the differences between the two tests, as shown in Listing 12-20.\n\nFilename: src/lib.rs\n\n```rust\nuse std::error::Error;\nuse std::fs;\n\npub struct Config {\n    pub query: String,\n    pub file_path: String,\n}\n\nimpl Config {\n    pub fn build(args: &[String]) -> Result<Config, &'static str> {\n        if args.len() < 3 {\n            return Err(\"not enough arguments\");\n        }\n\n        let query = args[1].clone();\n        let file_path = args[2].clone();\n\n        Ok(Config { query, file_path })\n    }\n}\n\npub fn run(config: Config) -> Result<(), Box<dyn Error>> {\n    let contents = fs::read_to_string(config.file_path)?;\n\n    for line in search(&config.query, &contents) {\n        println!(\"{line}\");\n    }\n\n    Ok(())\n}\n\npub fn search<'a>(query: &str, contents: &'a str) -> Vec<&'a str> {\n    let mut results = Vec::new();\n\n    for line in contents.lines() {\n        if line.contains(query) {\n            results.push(line);\n        }\n    }\n\n    results\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn case_sensitive() {\n        let query = \"duct\";\n        let contents = \"\\\nRust:\nsafe, fast, productive.\nPick three.\nDuct tape.\";\n\n        assert_eq!(vec![\"safe, fast, productive.\"], search(query, contents));\n    }\n\n    #[test]\n    fn case_insensitive() {\n        let query = \"rUsT\";\n        let contents = \"\\\nRust:\nsafe, fast, productive.\nPick three.\nTrust me.\";\n\n        assert_eq!(\n            vec![\"Rust:\", \"Trust me.\"],\n            search_case_insensitive(query, contents)\n        );\n    }\n}\n```\n\nListing 12-20: Adding a new failing test for the case-insensitive function we‚Äôre about to add\n\nNote that we‚Äôve edited the old test‚Äôs `contents` too. We‚Äôve added a new line with the text `\"Duct tape.\"` using a capital D that shouldn‚Äôt match the query `\"duct\"` when we‚Äôre searching in a case-sensitive manner. Changing the old test in this way helps ensure that we don‚Äôt accidentally break the case-sensitive search functionality that we‚Äôve already implemented. This test should pass now and should continue to pass as we work on the case-insensitive search.\n\nThe new test for the case-_insensitive_ search uses `\"rUsT\"` as its query. In the `search_case_insensitive` function we‚Äôre about to add, the query `\"rUsT\"` should match the line containing `\"Rust:\"` with a capital R and match the line `\"Trust me.\"` even though both have different casing from the query. This is our failing test, and it will fail to compile because we haven‚Äôt yet defined the `search_case_insensitive` function. Feel free to add a skeleton implementation that always returns an empty vector, similar to the way we did for the `search` function in Listing 12-16 to see the test compile and fail.\n\n### [Implementing the `search_case_insensitive` Function](#implementing-the-search_case_insensitive-function)\n\nThe `search_case_insensitive` function, shown in Listing 12-21, will be almost the same as the `search` function. The only difference is that we‚Äôll lowercase the `query` and each `line` so whatever the case of the input arguments, they‚Äôll be the same case when we check whether the line contains the query.\n\nFilename: src/lib.rs\n\n```rust\nuse std::error::Error;\nuse std::fs;\n\npub struct Config {\n    pub query: String,\n    pub file_path: String,\n}\n\nimpl Config {\n    pub fn build(args: &[String]) -> Result<Config, &'static str> {\n        if args.len() < 3 {\n            return Err(\"not enough arguments\");\n        }\n\n        let query = args[1].clone();\n        let file_path = args[2].clone();\n\n        Ok(Config { query, file_path })\n    }\n}\n\npub fn run(config: Config) -> Result<(), Box<dyn Error>> {\n    let contents = fs::read_to_string(config.file_path)?;\n\n    for line in search(&config.query, &contents) {\n        println!(\"{line}\");\n    }\n\n    Ok(())\n}\n\npub fn search<'a>(query: &str, contents: &'a str) -> Vec<&'a str> {\n    let mut results = Vec::new();\n\n    for line in contents.lines() {\n        if line.contains(query) {\n            results.push(line);\n        }\n    }\n\n    results\n}\n\npub fn search_case_insensitive<'a>(\n    query: &str,\n    contents: &'a str,\n) -> Vec<&'a str> {\n    let query = query.to_lowercase();\n    let mut results = Vec::new();\n\n    for line in contents.lines() {\n        if line.to_lowercase().contains(&query) {\n            results.push(line);\n        }\n    }\n\n    results\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn case_sensitive() {\n        let query = \"duct\";\n        let contents = \"\\\nRust:\nsafe, fast, productive.\nPick three.\nDuct tape.\";\n\n        assert_eq!(vec![\"safe, fast, productive.\"], search(query, contents));\n    }\n\n    #[test]\n    fn case_insensitive() {\n        let query = \"rUsT\";\n        let contents = \"\\\nRust:\nsafe, fast, productive.\nPick three.\nTrust me.\";\n\n        assert_eq!(\n            vec![\"Rust:\", \"Trust me.\"],\n            search_case_insensitive(query, contents)\n        );\n    }\n}\n```\n\nListing 12-21: Defining the `search_case_insensitive` function to lowercase the query and the line before comparing them\n\nFirst, we lowercase the `query` string and store it in a shadowed variable with the same name. Calling `to_lowercase` on the query is necessary so no matter whether the user‚Äôs query is `\"rust\"`, `\"RUST\"`, `\"Rust\"`, or `\"rUsT\"`, we‚Äôll treat the query as if it were `\"rust\"` and be insensitive to the case. While `to_lowercase` will handle basic Unicode, it won‚Äôt be 100% accurate. If we were writing a real application, we‚Äôd want to do a bit more work here, but this section is about environment variables, not Unicode, so we‚Äôll leave it at that here.\n\nNote that `query` is now a `String` rather than a string slice, because calling `to_lowercase` creates new data rather than referencing existing data. Say the query is `\"rUsT\"`, as an example: that string slice doesn‚Äôt contain a lowercase `u` or `t` for us to use, so we have to allocate a new `String` containing `\"rust\"`. When we pass `query` as an argument to the `contains` method now, we need to add an ampersand because the signature of `contains` is defined to take a string slice.\n\nNext, we add a call to `to_lowercase` on each `line` to lowercase all characters. Now that we‚Äôve converted `line` and `query` to lowercase, we‚Äôll find matches no matter what the case of the query is.\n\nLet‚Äôs see if this implementation passes the tests:\n\n```console\n$ cargo test\n   Compiling minigrep v0.1.0 (file:///projects/minigrep)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 1.33s\n     Running unittests src/lib.rs (target/debug/deps/minigrep-9cd200e5fac0fc94)\n\nrunning 2 tests\ntest tests::case_insensitive ... ok\ntest tests::case_sensitive ... ok\n\ntest result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n     Running unittests src/main.rs (target/debug/deps/minigrep-9cd200e5fac0fc94)\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n   Doc-tests minigrep\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n\n```\n\nGreat! They passed. Now, let‚Äôs call the new `search_case_insensitive` function from the `run` function. First, we‚Äôll add a configuration option to the `Config` struct to switch between case-sensitive and case-insensitive search. Adding this field will cause compiler errors because we aren‚Äôt initializing this field anywhere yet:\n\nFilename: src/lib.rs\n\n```rust\nuse std::error::Error;\nuse std::fs;\n\npub struct Config {\n    pub query: String,\n    pub file_path: String,\n    pub ignore_case: bool,\n}\n\nimpl Config {\n    pub fn build(args: &[String]) -> Result<Config, &'static str> {\n        if args.len() < 3 {\n            return Err(\"not enough arguments\");\n        }\n\n        let query = args[1].clone();\n        let file_path = args[2].clone();\n\n        Ok(Config { query, file_path })\n    }\n}\n\npub fn run(config: Config) -> Result<(), Box<dyn Error>> {\n    let contents = fs::read_to_string(config.file_path)?;\n\n    let results = if config.ignore_case {\n        search_case_insensitive(&config.query, &contents)\n    } else {\n        search(&config.query, &contents)\n    };\n\n    for line in results {\n        println!(\"{line}\");\n    }\n\n    Ok(())\n}\n\npub fn search<'a>(query: &str, contents: &'a str) -> Vec<&'a str> {\n    let mut results = Vec::new();\n\n    for line in contents.lines() {\n        if line.contains(query) {\n            results.push(line);\n        }\n    }\n\n    results\n}\n\npub fn search_case_insensitive<'a>(\n    query: &str,\n    contents: &'a str,\n) -> Vec<&'a str> {\n    let query = query.to_lowercase();\n    let mut results = Vec::new();\n\n    for line in contents.lines() {\n        if line.to_lowercase().contains(&query) {\n            results.push(line);\n        }\n    }\n\n    results\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn case_sensitive() {\n        let query = \"duct\";\n        let contents = \"\\\nRust:\nsafe, fast, productive.\nPick three.\nDuct tape.\";\n\n        assert_eq!(vec![\"safe, fast, productive.\"], search(query, contents));\n    }\n\n    #[test]\n    fn case_insensitive() {\n        let query = \"rUsT\";\n        let contents = \"\\\nRust:\nsafe, fast, productive.\nPick three.\nTrust me.\";\n\n        assert_eq!(\n            vec![\"Rust:\", \"Trust me.\"],\n            search_case_insensitive(query, contents)\n        );\n    }\n}\n```\n\nWe added the `ignore_case` field that holds a Boolean. Next, we need the `run` function to check the `ignore_case` field‚Äôs value and use that to decide whether to call the `search` function or the `search_case_insensitive` function, as shown in Listing 12-22. This still won‚Äôt compile yet.\n\nFilename: src/lib.rs\n\n```rust\nuse std::error::Error;\nuse std::fs;\n\npub struct Config {\n    pub query: String,\n    pub file_path: String,\n    pub ignore_case: bool,\n}\n\nimpl Config {\n    pub fn build(args: &[String]) -> Result<Config, &'static str> {\n        if args.len() < 3 {\n            return Err(\"not enough arguments\");\n        }\n\n        let query = args[1].clone();\n        let file_path = args[2].clone();\n\n        Ok(Config { query, file_path })\n    }\n}\n\npub fn run(config: Config) -> Result<(), Box<dyn Error>> {\n    let contents = fs::read_to_string(config.file_path)?;\n\n    let results = if config.ignore_case {\n        search_case_insensitive(&config.query, &contents)\n    } else {\n        search(&config.query, &contents)\n    };\n\n    for line in results {\n        println!(\"{line}\");\n    }\n\n    Ok(())\n}\n\npub fn search<'a>(query: &str, contents: &'a str) -> Vec<&'a str> {\n    let mut results = Vec::new();\n\n    for line in contents.lines() {\n        if line.contains(query) {\n            results.push(line);\n        }\n    }\n\n    results\n}\n\npub fn search_case_insensitive<'a>(\n    query: &str,\n    contents: &'a str,\n) -> Vec<&'a str> {\n    let query = query.to_lowercase();\n    let mut results = Vec::new();\n\n    for line in contents.lines() {\n        if line.to_lowercase().contains(&query) {\n            results.push(line);\n        }\n    }\n\n    results\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn case_sensitive() {\n        let query = \"duct\";\n        let contents = \"\\\nRust:\nsafe, fast, productive.\nPick three.\nDuct tape.\";\n\n        assert_eq!(vec![\"safe, fast, productive.\"], search(query, contents));\n    }\n\n    #[test]\n    fn case_insensitive() {\n        let query = \"rUsT\";\n        let contents = \"\\\nRust:\nsafe, fast, productive.\nPick three.\nTrust me.\";\n\n        assert_eq!(\n            vec![\"Rust:\", \"Trust me.\"],\n            search_case_insensitive(query, contents)\n        );\n    }\n}\n```\n\nListing 12-22: Calling either `search` or `search_case_insensitive` based on the value in `config.ignore_case`\n\nFinally, we need to check for the environment variable. The functions for working with environment variables are in the `env` module in the standard library, so we bring that module into scope at the top of _src/lib.rs_. Then we‚Äôll use the `var` function from the `env` module to check if any value has been set for an environment variable named `IGNORE_CASE`, as shown in Listing 12-23.\n\nFilename: src/lib.rs\n\n```rust\nuse std::env;\n// --snip--\n\nuse std::error::Error;\nuse std::fs;\n\npub struct Config {\n    pub query: String,\n    pub file_path: String,\n    pub ignore_case: bool,\n}\n\nimpl Config {\n    pub fn build(args: &[String]) -> Result<Config, &'static str> {\n        if args.len() < 3 {\n            return Err(\"not enough arguments\");\n        }\n\n        let query = args[1].clone();\n        let file_path = args[2].clone();\n\n        let ignore_case = env::var(\"IGNORE_CASE\").is_ok();\n\n        Ok(Config {\n            query,\n            file_path,\n            ignore_case,\n        })\n    }\n}\n\npub fn run(config: Config) -> Result<(), Box<dyn Error>> {\n    let contents = fs::read_to_string(config.file_path)?;\n\n    let results = if config.ignore_case {\n        search_case_insensitive(&config.query, &contents)\n    } else {\n        search(&config.query, &contents)\n    };\n\n    for line in results {\n        println!(\"{line}\");\n    }\n\n    Ok(())\n}\n\npub fn search<'a>(query: &str, contents: &'a str) -> Vec<&'a str> {\n    let mut results = Vec::new();\n\n    for line in contents.lines() {\n        if line.contains(query) {\n            results.push(line);\n        }\n    }\n\n    results\n}\n\npub fn search_case_insensitive<'a>(\n    query: &str,\n    contents: &'a str,\n) -> Vec<&'a str> {\n    let query = query.to_lowercase();\n    let mut results = Vec::new();\n\n    for line in contents.lines() {\n        if line.to_lowercase().contains(&query) {\n            results.push(line);\n        }\n    }\n\n    results\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn case_sensitive() {\n        let query = \"duct\";\n        let contents = \"\\\nRust:\nsafe, fast, productive.\nPick three.\nDuct tape.\";\n\n        assert_eq!(vec![\"safe, fast, productive.\"], search(query, contents));\n    }\n\n    #[test]\n    fn case_insensitive() {\n        let query = \"rUsT\";\n        let contents = \"\\\nRust:\nsafe, fast, productive.\nPick three.\nTrust me.\";\n\n        assert_eq!(\n            vec![\"Rust:\", \"Trust me.\"],\n            search_case_insensitive(query, contents)\n        );\n    }\n}\n```\n\nListing 12-23: Checking for any value in an environment variable named `IGNORE_CASE`\n\nHere, we create a new variable `ignore_case`. To set its value, we call the `env::var` function and pass it the name of the `IGNORE_CASE` environment variable. The `env::var` function returns a `Result` that will be the successful `Ok` variant that contains the value of the environment variable if the environment variable is set to any value. It will return the `Err` variant if the environment variable is not set.\n\nWe‚Äôre using the `is_ok` method on the `Result` to check whether the environment variable is set, which means the program should do a case-insensitive search. If the `IGNORE_CASE` environment variable isn‚Äôt set to anything, `is_ok` will return false and the program will perform a case-sensitive search. We don‚Äôt care about the _value_ of the environment variable, just whether it‚Äôs set or unset, so we‚Äôre checking `is_ok` rather than using `unwrap`, `expect`, or any of the other methods we‚Äôve seen on `Result`.\n\nWe pass the value in the `ignore_case` variable to the `Config` instance so the `run` function can read that value and decide whether to call `search_case_insensitive` or `search`, as we implemented in Listing 12-22.\n\nLet‚Äôs give it a try! First, we‚Äôll run our program without the environment variable set and with the query `to`, which should match any line that contains the word ‚Äúto‚Äù in all lowercase:\n\n```console\n$ cargo run -- to poem.txt\n   Compiling minigrep v0.1.0 (file:///projects/minigrep)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.0s\n     Running `target/debug/minigrep to poem.txt`\nAre you nobody, too?\nHow dreary to be somebody!\n\n```\n\nLooks like that still works! Now, let‚Äôs run the program with `IGNORE_CASE` set to `1` but with the same query `to`.\n\n```console\n$ IGNORE_CASE=1 cargo run -- to poem.txt\n\n```\n\nIf you‚Äôre using PowerShell, you will need to set the environment variable and run the program as separate commands:\n\n```console\nPS> $Env:IGNORE_CASE=1; cargo run -- to poem.txt\n\n```\n\nThis will make `IGNORE_CASE` persist for the remainder of your shell session. It can be unset with the `Remove-Item` cmdlet:\n\n```console\nPS> Remove-Item Env:IGNORE_CASE\n\n```\n\nWe should get lines that contain ‚Äúto‚Äù that might have uppercase letters:\n\n```console\nAre you nobody, too?\nHow dreary to be somebody!\nTo tell your name the livelong day\nTo an admiring bog!\n\n```\n\nExcellent, we also got lines containing ‚ÄúTo‚Äù! Our `minigrep` program can now do case-insensitive searching controlled by an environment variable. Now you know how to manage options set using either command line arguments or environment variables.\n\nSome programs allow arguments _and_ environment variables for the same configuration. In those cases, the programs decide that one or the other takes precedence. For another exercise on your own, try controlling case sensitivity through either a command line argument or an environment variable. Decide whether the command line argument or the environment variable should take precedence if the program is run with one set to case sensitive and one set to ignore case.\n\nThe `std::env` module contains many more useful features for dealing with environment variables: check out its documentation to see what is available.\n\n## [Writing Error Messages to Standard Error Instead of Standard Output](#writing-error-messages-to-standard-error-instead-of-standard-output)\n\nAt the moment, we‚Äôre writing all of our output to the terminal using the `println!` macro. In most terminals, there are two kinds of output: _standard output_ (`stdout`) for general information and _standard error_ (`stderr`) for error messages. This distinction enables users to choose to direct the successful output of a program to a file but still print error messages to the screen.\n\nThe `println!` macro is only capable of printing to standard output, so we have to use something else to print to standard error.\n\n### [Checking Where Errors Are Written](#checking-where-errors-are-written)\n\nFirst, let‚Äôs observe how the content printed by `minigrep` is currently being written to standard output, including any error messages we want to write to standard error instead. We‚Äôll do that by redirecting the standard output stream to a file while intentionally causing an error. We won‚Äôt redirect the standard error stream, so any content sent to standard error will continue to display on the screen.\n\nCommand line programs are expected to send error messages to the standard error stream so we can still see error messages on the screen even if we redirect the standard output stream to a file. Our program is not currently well-behaved: we‚Äôre about to see that it saves the error message output to a file instead!\n\nTo demonstrate this behavior, we‚Äôll run the program with `>` and the file path, _output.txt_, that we want to redirect the standard output stream to. We won‚Äôt pass any arguments, which should cause an error:\n\n```console\n$ cargo run > output.txt\n\n```\n\nThe `>` syntax tells the shell to write the contents of standard output to _output.txt_ instead of the screen. We didn‚Äôt see the error message we were expecting printed to the screen, so that means it must have ended up in the file. This is what _output.txt_ contains:\n\n```text\nProblem parsing arguments: not enough arguments\n\n```\n\nYup, our error message is being printed to standard output. It‚Äôs much more useful for error messages like this to be printed to standard error so only data from a successful run ends up in the file. We‚Äôll change that.\n\n### [Printing Errors to Standard Error](#printing-errors-to-standard-error)\n\nWe‚Äôll use the code in Listing 12-24 to change how error messages are printed. Because of the refactoring we did earlier in this chapter, all the code that prints error messages is in one function, `main`. The standard library provides the `eprintln!` macro that prints to the standard error stream, so let‚Äôs change the two places we were calling `println!` to print errors to use `eprintln!` instead.\n\nFilename: src/main.rs\n\n```rust\nuse std::env;\nuse std::process;\n\nuse minigrep::Config;\n\nfn main() {\n    let args: Vec<String> = env::args().collect();\n\n    let config = Config::build(&args).unwrap_or_else(|err| {\n        eprintln!(\"Problem parsing arguments: {err}\");\n        process::exit(1);\n    });\n\n    if let Err(e) = minigrep::run(config) {\n        eprintln!(\"Application error: {e}\");\n        process::exit(1);\n    }\n}\n```\n\nListing 12-24: Writing error messages to standard error instead of standard output using `eprintln!`\n\nLet‚Äôs now run the program again in the same way, without any arguments and redirecting standard output with `>`:\n\n```console\n$ cargo run > output.txt\nProblem parsing arguments: not enough arguments\n\n```\n\nNow we see the error onscreen and _output.txt_ contains nothing, which is the behavior we expect of command line programs.\n\nLet‚Äôs run the program again with arguments that don‚Äôt cause an error but still redirect standard output to a file, like so:\n\n```console\n$ cargo run -- to poem.txt > output.txt\n\n```\n\nWe won‚Äôt see any output to the terminal, and _output.txt_ will contain our results:\n\nFilename: output.txt\n\n```text\nAre you nobody, too?\nHow dreary to be somebody!\n\n```\n\nThis demonstrates that we‚Äôre now using standard output for successful output and standard error for error output as appropriate.\n\n## [Summary](#summary-11)\n\nThis chapter recapped some of the major concepts you‚Äôve learned so far and covered how to perform common I/O operations in Rust. By using command line arguments, files, environment variables, and the `eprintln!` macro for printing errors, you‚Äôre now prepared to write command line applications. Combined with the concepts in previous chapters, your code will be well organized, store data effectively in the appropriate data structures, handle errors nicely, and be well tested.\n\nNext, we‚Äôll explore some Rust features that were influenced by functional languages: closures and iterators.\n\n## [Functional Language Features: Iterators and Closures](#functional-language-features-iterators-and-closures)\n\nRust‚Äôs design has taken inspiration from many existing languages and techniques, and one significant influence is _functional programming_. Programming in a functional style often includes using functions as values by passing them in arguments, returning them from other functions, assigning them to variables for later execution, and so forth.\n\nIn this chapter, we won‚Äôt debate the issue of what functional programming is or isn‚Äôt but will instead discuss some features of Rust that are similar to features in many languages often referred to as functional.\n\nMore specifically, we‚Äôll cover:\n\n-   _Closures_, a function-like construct you can store in a variable\n-   _Iterators_, a way of processing a series of elements\n-   How to use closures and iterators to improve the I/O project in Chapter 12\n-   The performance of closures and iterators (Spoiler alert: they‚Äôre faster than you might think!)\n\nWe‚Äôve already covered some other Rust features, such as pattern matching and enums, that are also influenced by the functional style. Because mastering closures and iterators is an important part of writing idiomatic, fast Rust code, we‚Äôll devote this entire chapter to them.\n\n## [Closures: Anonymous Functions that Capture Their Environment](#closures-anonymous-functions-that-capture-their-environment)\n\nRust‚Äôs closures are anonymous functions you can save in a variable or pass as arguments to other functions. You can create the closure in one place and then call the closure elsewhere to evaluate it in a different context. Unlike functions, closures can capture values from the scope in which they‚Äôre defined. We‚Äôll demonstrate how these closure features allow for code reuse and behavior customization.\n\n### [Capturing the Environment with Closures](#capturing-the-environment-with-closures)\n\nWe‚Äôll first examine how we can use closures to capture values from the environment they‚Äôre defined in for later use. Here‚Äôs the scenario: Every so often, our t-shirt company gives away an exclusive, limited-edition shirt to someone on our mailing list as a promotion. People on the mailing list can optionally add their favorite color to their profile. If the person chosen for a free shirt has their favorite color set, they get that color shirt. If the person hasn‚Äôt specified a favorite color, they get whatever color the company currently has the most of.\n\nThere are many ways to implement this. For this example, we‚Äôre going to use an enum called `ShirtColor` that has the variants `Red` and `Blue` (limiting the number of colors available for simplicity). We represent the company‚Äôs inventory with an `Inventory` struct that has a field named `shirts` that contains a `Vec<ShirtColor>` representing the shirt colors currently in stock. The method `giveaway` defined on `Inventory` gets the optional shirt color preference of the free shirt winner, and returns the shirt color the person will get. This setup is shown in Listing 13-1:\n\nFilename: src/main.rs\n\n```rust\n#[derive(Debug, PartialEq, Copy, Clone)]\nenum ShirtColor {\n    Red,\n    Blue,\n}\n\nstruct Inventory {\n    shirts: Vec<ShirtColor>,\n}\n\nimpl Inventory {\n    fn giveaway(&self, user_preference: Option<ShirtColor>) -> ShirtColor {\n        user_preference.unwrap_or_else(|| self.most_stocked())\n    }\n\n    fn most_stocked(&self) -> ShirtColor {\n        let mut num_red = 0;\n        let mut num_blue = 0;\n\n        for color in &self.shirts {\n            match color {\n                ShirtColor::Red => num_red += 1,\n                ShirtColor::Blue => num_blue += 1,\n            }\n        }\n        if num_red > num_blue {\n            ShirtColor::Red\n        } else {\n            ShirtColor::Blue\n        }\n    }\n}\n\nfn main() {\n    let store = Inventory {\n        shirts: vec![ShirtColor::Blue, ShirtColor::Red, ShirtColor::Blue],\n    };\n\n    let user_pref1 = Some(ShirtColor::Red);\n    let giveaway1 = store.giveaway(user_pref1);\n    println!(\n        \"The user with preference {:?} gets {:?}\",\n        user_pref1, giveaway1\n    );\n\n    let user_pref2 = None;\n    let giveaway2 = store.giveaway(user_pref2);\n    println!(\n        \"The user with preference {:?} gets {:?}\",\n        user_pref2, giveaway2\n    );\n}\n```\n\nListing 13-1: Shirt company giveaway situation\n\nThe `store` defined in `main` has two blue shirts and one red shirt remaining to distribute for this limited-edition promotion. We call the `giveaway` method for a user with a preference for a red shirt and a user without any preference.\n\nAgain, this code could be implemented in many ways, and here, to focus on closures, we‚Äôve stuck to concepts you‚Äôve already learned except for the body of the `giveaway` method that uses a closure. In the `giveaway` method, we get the user preference as a parameter of type `Option<ShirtColor>` and call the `unwrap_or_else` method on `user_preference`. The [`unwrap_or_else` method on `Option<T>`](about:blank/std/option/enum.Option.html#method.unwrap_or_else) is defined by the standard library. It takes one argument: a closure without any arguments that returns a value `T` (the same type stored in the `Some` variant of the `Option<T>`, in this case `ShirtColor`). If the `Option<T>` is the `Some` variant, `unwrap_or_else` returns the value from within the `Some`. If the `Option<T>` is the `None` variant, `unwrap_or_else` calls the closure and returns the value returned by the closure.\n\nWe specify the closure expression `|| self.most_stocked()` as the argument to `unwrap_or_else`. This is a closure that takes no parameters itself (if the closure had parameters, they would appear between the two vertical bars). The body of the closure calls `self.most_stocked()`. We‚Äôre defining the closure here, and the implementation of `unwrap_or_else` will evaluate the closure later if the result is needed.\n\nRunning this code prints:\n\n```console\n$ cargo run\n   Compiling shirt-company v0.1.0 (file:///projects/shirt-company)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.27s\n     Running `target/debug/shirt-company`\nThe user with preference Some(Red) gets Red\nThe user with preference None gets Blue\n\n```\n\nOne interesting aspect here is that we‚Äôve passed a closure that calls `self.most_stocked()` on the current `Inventory` instance. The standard library didn‚Äôt need to know anything about the `Inventory` or `ShirtColor` types we defined, or the logic we want to use in this scenario. The closure captures an immutable reference to the `self` `Inventory` instance and passes it with the code we specify to the `unwrap_or_else` method. Functions, on the other hand, are not able to capture their environment in this way.\n\n### [Closure Type Inference and Annotation](#closure-type-inference-and-annotation)\n\nThere are more differences between functions and closures. Closures don‚Äôt usually require you to annotate the types of the parameters or the return value like `fn` functions do. Type annotations are required on functions because the types are part of an explicit interface exposed to your users. Defining this interface rigidly is important for ensuring that everyone agrees on what types of values a function uses and returns. Closures, on the other hand, aren‚Äôt used in an exposed interface like this: they‚Äôre stored in variables and used without naming them and exposing them to users of our library.\n\nClosures are typically short and relevant only within a narrow context rather than in any arbitrary scenario. Within these limited contexts, the compiler can infer the types of the parameters and the return type, similar to how it‚Äôs able to infer the types of most variables (there are rare cases where the compiler needs closure type annotations too).\n\nAs with variables, we can add type annotations if we want to increase explicitness and clarity at the cost of being more verbose than is strictly necessary. Annotating the types for a closure would look like the definition shown in Listing 13-2. In this example, we‚Äôre defining a closure and storing it in a variable rather than defining the closure in the spot we pass it as an argument as we did in Listing 13-1.\n\nFilename: src/main.rs\n\n```rust\nuse std::thread;\nuse std::time::Duration;\n\nfn generate_workout(intensity: u32, random_number: u32) {\n    let expensive_closure = |num: u32| -> u32 {\n        println!(\"calculating slowly...\");\n        thread::sleep(Duration::from_secs(2));\n        num\n    };\n\n    if intensity < 25 {\n        println!(\"Today, do {} pushups!\", expensive_closure(intensity));\n        println!(\"Next, do {} situps!\", expensive_closure(intensity));\n    } else {\n        if random_number == 3 {\n            println!(\"Take a break today! Remember to stay hydrated!\");\n        } else {\n            println!(\n                \"Today, run for {} minutes!\",\n                expensive_closure(intensity)\n            );\n        }\n    }\n}\n\nfn main() {\n    let simulated_user_specified_value = 10;\n    let simulated_random_number = 7;\n\n    generate_workout(simulated_user_specified_value, simulated_random_number);\n}\n```\n\nListing 13-2: Adding optional type annotations of the parameter and return value types in the closure\n\nWith type annotations added, the syntax of closures looks more similar to the syntax of functions. Here we define a function that adds 1 to its parameter and a closure that has the same behavior, for comparison. We‚Äôve added some spaces to line up the relevant parts. This illustrates how closure syntax is similar to function syntax except for the use of pipes and the amount of syntax that is optional:\n\n```rust\nfn  add_one_v1   (x: u32) -> u32 { x + 1 }\nlet add_one_v2 = |x: u32| -> u32 { x + 1 };\nlet add_one_v3 = |x|             { x + 1 };\nlet add_one_v4 = |x|               x + 1  ;\n```\n\nThe first line shows a function definition, and the second line shows a fully annotated closure definition. In the third line, we remove the type annotations from the closure definition. In the fourth line, we remove the brackets, which are optional because the closure body has only one expression. These are all valid definitions that will produce the same behavior when they‚Äôre called. The `add_one_v3` and `add_one_v4` lines require the closures to be evaluated to be able to compile because the types will be inferred from their usage. This is similar to `let v = Vec::new();` needing either type annotations or values of some type to be inserted into the `Vec` for Rust to be able to infer the type.\n\nFor closure definitions, the compiler will infer one concrete type for each of their parameters and for their return value. For instance, Listing 13-3 shows the definition of a short closure that just returns the value it receives as a parameter. This closure isn‚Äôt very useful except for the purposes of this example. Note that we haven‚Äôt added any type annotations to the definition. Because there are no type annotations, we can call the closure with any type, which we‚Äôve done here with `String` the first time. If we then try to call `example_closure` with an integer, we‚Äôll get an error.\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let example_closure = |x| x;\n\n    let s = example_closure(String::from(\"hello\"));\n    let n = example_closure(5);\n}\n```\n\nListing 13-3: Attempting to call a closure whose types are inferred with two different types\n\nThe compiler gives us this error:\n\n```console\n$ cargo run\n   Compiling closure-example v0.1.0 (file:///projects/closure-example)\nerror[E0308]: mismatched types\n --> src/main.rs:5:29\n  |\n5 |     let n = example_closure(5);\n  |             --------------- ^- help: try using a conversion method: `.to_string()`\n  |             |               |\n  |             |               expected `String`, found integer\n  |             arguments to this function are incorrect\n  |\nnote: expected because the closure was earlier called with an argument of type `String`\n --> src/main.rs:4:29\n  |\n4 |     let s = example_closure(String::from(\"hello\"));\n  |             --------------- ^^^^^^^^^^^^^^^^^^^^^ expected because this argument is of type `String`\n  |             |\n  |             in this closure call\nnote: closure parameter defined here\n --> src/main.rs:2:28\n  |\n2 |     let example_closure = |x| x;\n  |                            ^\n\nFor more information about this error, try `rustc --explain E0308`.\nerror: could not compile `closure-example` (bin \"closure-example\") due to 1 previous error\n\n```\n\nThe first time we call `example_closure` with the `String` value, the compiler infers the type of `x` and the return type of the closure to be `String`. Those types are then locked into the closure in `example_closure`, and we get a type error when we next try to use a different type with the same closure.\n\n### [Capturing References or Moving Ownership](#capturing-references-or-moving-ownership)\n\nClosures can capture values from their environment in three ways, which directly map to the three ways a function can take a parameter: borrowing immutably, borrowing mutably, and taking ownership. The closure will decide which of these to use based on what the body of the function does with the captured values.\n\nIn Listing 13-4, we define a closure that captures an immutable reference to the vector named `list` because it only needs an immutable reference to print the value:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let list = vec![1, 2, 3];\n    println!(\"Before defining closure: {list:?}\");\n\n    let only_borrows = || println!(\"From closure: {list:?}\");\n\n    println!(\"Before calling closure: {list:?}\");\n    only_borrows();\n    println!(\"After calling closure: {list:?}\");\n}\n```\n\nListing 13-4: Defining and calling a closure that captures an immutable reference\n\nThis example also illustrates that a variable can bind to a closure definition, and we can later call the closure by using the variable name and parentheses as if the variable name were a function name.\n\nBecause we can have multiple immutable references to `list` at the same time, `list` is still accessible from the code before the closure definition, after the closure definition but before the closure is called, and after the closure is called. This code compiles, runs, and prints:\n\n```console\n$ cargo run\n   Compiling closure-example v0.1.0 (file:///projects/closure-example)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.43s\n     Running `target/debug/closure-example`\nBefore defining closure: [1, 2, 3]\nBefore calling closure: [1, 2, 3]\nFrom closure: [1, 2, 3]\nAfter calling closure: [1, 2, 3]\n\n```\n\nNext, in Listing 13-5, we change the closure body so that it adds an element to the `list` vector. The closure now captures a mutable reference:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let mut list = vec![1, 2, 3];\n    println!(\"Before defining closure: {list:?}\");\n\n    let mut borrows_mutably = || list.push(7);\n\n    borrows_mutably();\n    println!(\"After calling closure: {list:?}\");\n}\n```\n\nListing 13-5: Defining and calling a closure that captures a mutable reference\n\nThis code compiles, runs, and prints:\n\n```console\n$ cargo run\n   Compiling closure-example v0.1.0 (file:///projects/closure-example)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.43s\n     Running `target/debug/closure-example`\nBefore defining closure: [1, 2, 3]\nAfter calling closure: [1, 2, 3, 7]\n\n```\n\nNote that there‚Äôs no longer a `println!` between the definition and the call of the `borrows_mutably` closure: when `borrows_mutably` is defined, it captures a mutable reference to `list`. We don‚Äôt use the closure again after the closure is called, so the mutable borrow ends. Between the closure definition and the closure call, an immutable borrow to print isn‚Äôt allowed because no other borrows are allowed when there‚Äôs a mutable borrow. Try adding a `println!` there to see what error message you get!\n\nIf you want to force the closure to take ownership of the values it uses in the environment even though the body of the closure doesn‚Äôt strictly need ownership, you can use the `move` keyword before the parameter list.\n\nThis technique is mostly useful when passing a closure to a new thread to move the data so that it‚Äôs owned by the new thread. We‚Äôll discuss threads and why you would want to use them in detail in Chapter 16 when we talk about concurrency, but for now, let‚Äôs briefly explore spawning a new thread using a closure that needs the `move` keyword. Listing 13-6 shows Listing 13-4 modified to print the vector in a new thread rather than in the main thread:\n\nFilename: src/main.rs\n\n```rust\nuse std::thread;\n\nfn main() {\n    let list = vec![1, 2, 3];\n    println!(\"Before defining closure: {list:?}\");\n\n    thread::spawn(move || println!(\"From thread: {list:?}\"))\n        .join()\n        .unwrap();\n}\n```\n\nListing 13-6: Using `move` to force the closure for the thread to take ownership of `list`\n\nWe spawn a new thread, giving the thread a closure to run as an argument. The closure body prints out the list. In Listing 13-4, the closure only captured `list` using an immutable reference because that‚Äôs the least amount of access to `list` needed to print it. In this example, even though the closure body still only needs an immutable reference, we need to specify that `list` should be moved into the closure by putting the `move` keyword at the beginning of the closure definition. The new thread might finish before the rest of the main thread finishes, or the main thread might finish first. If the main thread maintained ownership of `list` but ended before the new thread did and dropped `list`, the immutable reference in the thread would be invalid. Therefore, the compiler requires that `list` be moved into the closure given to the new thread so the reference will be valid. Try removing the `move` keyword or using `list` in the main thread after the closure is defined to see what compiler errors you get!\n\n### [Moving Captured Values Out of Closures and the `Fn` Traits](#moving-captured-values-out-of-closures-and-the-fn-traits)\n\nOnce a closure has captured a reference or captured ownership of a value from the environment where the closure is defined (thus affecting what, if anything, is moved _into_ the closure), the code in the body of the closure defines what happens to the references or values when the closure is evaluated later (thus affecting what, if anything, is moved _out of_ the closure). A closure body can do any of the following: move a captured value out of the closure, mutate the captured value, neither move nor mutate the value, or capture nothing from the environment to begin with.\n\nThe way a closure captures and handles values from the environment affects which traits the closure implements, and traits are how functions and structs can specify what kinds of closures they can use. Closures will automatically implement one, two, or all three of these `Fn` traits, in an additive fashion, depending on how the closure‚Äôs body handles the values:\n\n1.  `FnOnce` applies to closures that can be called once. All closures implement at least this trait, because all closures can be called. A closure that moves captured values out of its body will only implement `FnOnce` and none of the other `Fn` traits, because it can only be called once.\n2.  `FnMut` applies to closures that don‚Äôt move captured values out of their body, but that might mutate the captured values. These closures can be called more than once.\n3.  `Fn` applies to closures that don‚Äôt move captured values out of their body and that don‚Äôt mutate captured values, as well as closures that capture nothing from their environment. These closures can be called more than once without mutating their environment, which is important in cases such as calling a closure multiple times concurrently.\n\nLet‚Äôs look at the definition of the `unwrap_or_else` method on `Option<T>` that we used in Listing 13-1:\n\n```rust\nimpl<T> Option<T> {\n    pub fn unwrap_or_else<F>(self, f: F) -> T\n    where\n        F: FnOnce() -> T\n    {\n        match self {\n            Some(x) => x,\n            None => f(),\n        }\n    }\n}\n```\n\nRecall that `T` is the generic type representing the type of the value in the `Some` variant of an `Option`. That type `T` is also the return type of the `unwrap_or_else` function: code that calls `unwrap_or_else` on an `Option<String>`, for example, will get a `String`.\n\nNext, notice that the `unwrap_or_else` function has the additional generic type parameter `F`. The `F` type is the type of the parameter named `f`, which is the closure we provide when calling `unwrap_or_else`.\n\nThe trait bound specified on the generic type `F` is `FnOnce() -> T`, which means `F` must be able to be called once, take no arguments, and return a `T`. Using `FnOnce` in the trait bound expresses the constraint that `unwrap_or_else` is only going to call `f` at most one time. In the body of `unwrap_or_else`, we can see that if the `Option` is `Some`, `f` won‚Äôt be called. If the `Option` is `None`, `f` will be called once. Because all closures implement `FnOnce`, `unwrap_or_else` accepts all three kinds of closures and is as flexible as it can be.\n\nNote: Functions can implement all three of the `Fn` traits too. If what we want to do doesn‚Äôt require capturing a value from the environment, we can use the name of a function rather than a closure where we need something that implements one of the `Fn` traits. For example, on an `Option<Vec<T>>` value, we could call `unwrap_or_else(Vec::new)` to get a new, empty vector if the value is `None`.\n\nNow let‚Äôs look at the standard library method `sort_by_key` defined on slices, to see how that differs from `unwrap_or_else` and why `sort_by_key` uses `FnMut` instead of `FnOnce` for the trait bound. The closure gets one argument in the form of a reference to the current item in the slice being considered, and returns a value of type `K` that can be ordered. This function is useful when you want to sort a slice by a particular attribute of each item. In Listing 13-7, we have a list of `Rectangle` instances and we use `sort_by_key` to order them by their `width` attribute from low to high:\n\nFilename: src/main.rs\n\n```rust\n#[derive(Debug)]\nstruct Rectangle {\n    width: u32,\n    height: u32,\n}\n\nfn main() {\n    let mut list = [\n        Rectangle { width: 10, height: 1 },\n        Rectangle { width: 3, height: 5 },\n        Rectangle { width: 7, height: 12 },\n    ];\n\n    list.sort_by_key(|r| r.width);\n    println!(\"{list:#?}\");\n}\n```\n\nListing 13-7: Using `sort_by_key` to order rectangles by width\n\nThis code prints:\n\n```console\n$ cargo run\n   Compiling rectangles v0.1.0 (file:///projects/rectangles)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.41s\n     Running `target/debug/rectangles`\n[\n    Rectangle {\n        width: 3,\n        height: 5,\n    },\n    Rectangle {\n        width: 7,\n        height: 12,\n    },\n    Rectangle {\n        width: 10,\n        height: 1,\n    },\n]\n\n```\n\nThe reason `sort_by_key` is defined to take an `FnMut` closure is that it calls the closure multiple times: once for each item in the slice. The closure `|r| r.width` doesn‚Äôt capture, mutate, or move out anything from its environment, so it meets the trait bound requirements.\n\nIn contrast, Listing 13-8 shows an example of a closure that implements just the `FnOnce` trait, because it moves a value out of the environment. The compiler won‚Äôt let us use this closure with `sort_by_key`:\n\nFilename: src/main.rs\n\n```rust\n#[derive(Debug)]\nstruct Rectangle {\n    width: u32,\n    height: u32,\n}\n\nfn main() {\n    let mut list = [\n        Rectangle { width: 10, height: 1 },\n        Rectangle { width: 3, height: 5 },\n        Rectangle { width: 7, height: 12 },\n    ];\n\n    let mut sort_operations = vec![];\n    let value = String::from(\"closure called\");\n\n    list.sort_by_key(|r| {\n        sort_operations.push(value);\n        r.width\n    });\n    println!(\"{list:#?}\");\n}\n```\n\nListing 13-8: Attempting to use an `FnOnce` closure with `sort_by_key`\n\nThis is a contrived, convoluted way (that doesn‚Äôt work) to try and count the number of times `sort_by_key` calls the closure when sorting `list`. This code attempts to do this counting by pushing `value`‚Äîa `String` from the closure‚Äôs environment‚Äîinto the `sort_operations` vector. The closure captures `value` then moves `value` out of the closure by transferring ownership of `value` to the `sort_operations` vector. This closure can be called once; trying to call it a second time wouldn‚Äôt work because `value` would no longer be in the environment to be pushed into `sort_operations` again! Therefore, this closure only implements `FnOnce`. When we try to compile this code, we get this error that `value` can‚Äôt be moved out of the closure because the closure must implement `FnMut`:\n\n```console\n$ cargo run\n   Compiling rectangles v0.1.0 (file:///projects/rectangles)\nerror[E0507]: cannot move out of `value`, a captured variable in an `FnMut` closure\n  --> src/main.rs:18:30\n   |\n15 |     let value = String::from(\"closure called\");\n   |         ----- captured outer variable\n16 |\n17 |     list.sort_by_key(|r| {\n   |                      --- captured by this `FnMut` closure\n18 |         sort_operations.push(value);\n   |                              ^^^^^ move occurs because `value` has type `String`, which does not implement the `Copy` trait\n\nFor more information about this error, try `rustc --explain E0507`.\nerror: could not compile `rectangles` (bin \"rectangles\") due to 1 previous error\n\n```\n\nThe error points to the line in the closure body that moves `value` out of the environment. To fix this, we need to change the closure body so that it doesn‚Äôt move values out of the environment. To count the number of times the closure is called, keeping a counter in the environment and incrementing its value in the closure body is a more straightforward way to calculate that. The closure in Listing 13-9 works with `sort_by_key` because it is only capturing a mutable reference to the `num_sort_operations` counter and can therefore be called more than once:\n\nFilename: src/main.rs\n\n```rust\n#[derive(Debug)]\nstruct Rectangle {\n    width: u32,\n    height: u32,\n}\n\nfn main() {\n    let mut list = [\n        Rectangle { width: 10, height: 1 },\n        Rectangle { width: 3, height: 5 },\n        Rectangle { width: 7, height: 12 },\n    ];\n\n    let mut num_sort_operations = 0;\n    list.sort_by_key(|r| {\n        num_sort_operations += 1;\n        r.width\n    });\n    println!(\"{list:#?}, sorted in {num_sort_operations} operations\");\n}\n```\n\nListing 13-9: Using an `FnMut` closure with `sort_by_key` is allowed\n\nThe `Fn` traits are important when defining or using functions or types that make use of closures. In the next section, we‚Äôll discuss iterators. Many iterator methods take closure arguments, so keep these closure details in mind as we continue!\n\n## [Processing a Series of Items with Iterators](#processing-a-series-of-items-with-iterators)\n\nThe iterator pattern allows you to perform some task on a sequence of items in turn. An iterator is responsible for the logic of iterating over each item and determining when the sequence has finished. When you use iterators, you don‚Äôt have to reimplement that logic yourself.\n\nIn Rust, iterators are _lazy_, meaning they have no effect until you call methods that consume the iterator to use it up. For example, the code in Listing 13-10 creates an iterator over the items in the vector `v1` by calling the `iter` method defined on `Vec<T>`. This code by itself doesn‚Äôt do anything useful.\n\n```rust\nfn main() {\n    let v1 = vec![1, 2, 3];\n\n    let v1_iter = v1.iter();\n}\n```\n\nListing 13-10: Creating an iterator\n\nThe iterator is stored in the `v1_iter` variable. Once we‚Äôve created an iterator, we can use it in a variety of ways. In Listing 3-5 in Chapter 3, we iterated over an array using a `for` loop to execute some code on each of its items. Under the hood this implicitly created and then consumed an iterator, but we glossed over how exactly that works until now.\n\nIn the example in Listing 13-11, we separate the creation of the iterator from the use of the iterator in the `for` loop. When the `for` loop is called using the iterator in `v1_iter`, each element in the iterator is used in one iteration of the loop, which prints out each value.\n\n```rust\nfn main() {\n    let v1 = vec![1, 2, 3];\n\n    let v1_iter = v1.iter();\n\n    for val in v1_iter {\n        println!(\"Got: {val}\");\n    }\n}\n```\n\nListing 13-11: Using an iterator in a `for` loop\n\nIn languages that don‚Äôt have iterators provided by their standard libraries, you would likely write this same functionality by starting a variable at index 0, using that variable to index into the vector to get a value, and incrementing the variable value in a loop until it reached the total number of items in the vector.\n\nIterators handle all that logic for you, cutting down on repetitive code you could potentially mess up. Iterators give you more flexibility to use the same logic with many different kinds of sequences, not just data structures you can index into, like vectors. Let‚Äôs examine how iterators do that.\n\n### [The `Iterator` Trait and the `next` Method](#the-iterator-trait-and-the-next-method)\n\nAll iterators implement a trait named `Iterator` that is defined in the standard library. The definition of the trait looks like this:\n\n```rust\n#![allow(unused)]\nfn main() {\npub trait Iterator {\n    type Item;\n\n    fn next(&mut self) -> Option<Self::Item>;\n\n    // methods with default implementations elided\n}\n}\n```\n\nNotice this definition uses some new syntax: `type Item` and `Self::Item`, which are defining an _associated type_ with this trait. We‚Äôll talk about associated types in depth in Chapter 19. For now, all you need to know is that this code says implementing the `Iterator` trait requires that you also define an `Item` type, and this `Item` type is used in the return type of the `next` method. In other words, the `Item` type will be the type returned from the iterator.\n\nThe `Iterator` trait only requires implementors to define one method: the `next` method, which returns one item of the iterator at a time wrapped in `Some` and, when iteration is over, returns `None`.\n\nWe can call the `next` method on iterators directly; Listing 13-12 demonstrates what values are returned from repeated calls to `next` on the iterator created from the vector.\n\nFilename: src/lib.rs\n\n```rust\n#[cfg(test)]\nmod tests {\n    #[test]\n    fn iterator_demonstration() {\n        let v1 = vec![1, 2, 3];\n\n        let mut v1_iter = v1.iter();\n\n        assert_eq!(v1_iter.next(), Some(&1));\n        assert_eq!(v1_iter.next(), Some(&2));\n        assert_eq!(v1_iter.next(), Some(&3));\n        assert_eq!(v1_iter.next(), None);\n    }\n}\n```\n\nListing 13-12: Calling the `next` method on an iterator\n\nNote that we needed to make `v1_iter` mutable: calling the `next` method on an iterator changes internal state that the iterator uses to keep track of where it is in the sequence. In other words, this code _consumes_, or uses up, the iterator. Each call to `next` eats up an item from the iterator. We didn‚Äôt need to make `v1_iter` mutable when we used a `for` loop because the loop took ownership of `v1_iter` and made it mutable behind the scenes.\n\nAlso note that the values we get from the calls to `next` are immutable references to the values in the vector. The `iter` method produces an iterator over immutable references. If we want to create an iterator that takes ownership of `v1` and returns owned values, we can call `into_iter` instead of `iter`. Similarly, if we want to iterate over mutable references, we can call `iter_mut` instead of `iter`.\n\n### [Methods that Consume the Iterator](#methods-that-consume-the-iterator)\n\nThe `Iterator` trait has a number of different methods with default implementations provided by the standard library; you can find out about these methods by looking in the standard library API documentation for the `Iterator` trait. Some of these methods call the `next` method in their definition, which is why you‚Äôre required to implement the `next` method when implementing the `Iterator` trait.\n\nMethods that call `next` are called _consuming adaptors_, because calling them uses up the iterator. One example is the `sum` method, which takes ownership of the iterator and iterates through the items by repeatedly calling `next`, thus consuming the iterator. As it iterates through, it adds each item to a running total and returns the total when iteration is complete. Listing 13-13 has a test illustrating a use of the `sum` method:\n\nFilename: src/lib.rs\n\n```rust\n#[cfg(test)]\nmod tests {\n    #[test]\n    fn iterator_sum() {\n        let v1 = vec![1, 2, 3];\n\n        let v1_iter = v1.iter();\n\n        let total: i32 = v1_iter.sum();\n\n        assert_eq!(total, 6);\n    }\n}\n```\n\nListing 13-13: Calling the `sum` method to get the total of all items in the iterator\n\nWe aren‚Äôt allowed to use `v1_iter` after the call to `sum` because `sum` takes ownership of the iterator we call it on.\n\n### [Methods that Produce Other Iterators](#methods-that-produce-other-iterators)\n\n_Iterator adaptors_ are methods defined on the `Iterator` trait that don‚Äôt consume the iterator. Instead, they produce different iterators by changing some aspect of the original iterator.\n\nListing 13-14 shows an example of calling the iterator adaptor method `map`, which takes a closure to call on each item as the items are iterated through. The `map` method returns a new iterator that produces the modified items. The closure here creates a new iterator in which each item from the vector will be incremented by 1:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let v1: Vec<i32> = vec![1, 2, 3];\n\n    v1.iter().map(|x| x + 1);\n}\n```\n\nListing 13-14: Calling the iterator adaptor `map` to create a new iterator\n\nHowever, this code produces a warning:\n\n```console\n$ cargo run\n   Compiling iterators v0.1.0 (file:///projects/iterators)\nwarning: unused `Map` that must be used\n --> src/main.rs:4:5\n  |\n4 |     v1.iter().map(|x| x + 1);\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^\n  |\n  = note: iterators are lazy and do nothing unless consumed\n  = note: `#[warn(unused_must_use)]` on by default\nhelp: use `let _ = ...` to ignore the resulting value\n  |\n4 |     let _ = v1.iter().map(|x| x + 1);\n  |     +++++++\n\nwarning: `iterators` (bin \"iterators\") generated 1 warning\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.47s\n     Running `target/debug/iterators`\n\n```\n\nThe code in Listing 13-14 doesn‚Äôt do anything; the closure we‚Äôve specified never gets called. The warning reminds us why: iterator adaptors are lazy, and we need to consume the iterator here.\n\nTo fix this warning and consume the iterator, we‚Äôll use the `collect` method, which we used in Chapter 12 with `env::args` in Listing 12-1. This method consumes the iterator and collects the resulting values into a collection data type.\n\nIn Listing 13-15, we collect the results of iterating over the iterator that‚Äôs returned from the call to `map` into a vector. This vector will end up containing each item from the original vector incremented by 1.\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let v1: Vec<i32> = vec![1, 2, 3];\n\n    let v2: Vec<_> = v1.iter().map(|x| x + 1).collect();\n\n    assert_eq!(v2, vec![2, 3, 4]);\n}\n```\n\nListing 13-15: Calling the `map` method to create a new iterator and then calling the `collect` method to consume the new iterator and create a vector\n\nBecause `map` takes a closure, we can specify any operation we want to perform on each item. This is a great example of how closures let you customize some behavior while reusing the iteration behavior that the `Iterator` trait provides.\n\nYou can chain multiple calls to iterator adaptors to perform complex actions in a readable way. But because all iterators are lazy, you have to call one of the consuming adaptor methods to get results from calls to iterator adaptors.\n\n### [Using Closures that Capture Their Environment](#using-closures-that-capture-their-environment)\n\nMany iterator adapters take closures as arguments, and commonly the closures we‚Äôll specify as arguments to iterator adapters will be closures that capture their environment.\n\nFor this example, we‚Äôll use the `filter` method that takes a closure. The closure gets an item from the iterator and returns a `bool`. If the closure returns `true`, the value will be included in the iteration produced by `filter`. If the closure returns `false`, the value won‚Äôt be included.\n\nIn Listing 13-16, we use `filter` with a closure that captures the `shoe_size` variable from its environment to iterate over a collection of `Shoe` struct instances. It will return only shoes that are the specified size.\n\nFilename: src/lib.rs\n\n```rust\n#[derive(PartialEq, Debug)]\nstruct Shoe {\n    size: u32,\n    style: String,\n}\n\nfn shoes_in_size(shoes: Vec<Shoe>, shoe_size: u32) -> Vec<Shoe> {\n    shoes.into_iter().filter(|s| s.size == shoe_size).collect()\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn filters_by_size() {\n        let shoes = vec![\n            Shoe {\n                size: 10,\n                style: String::from(\"sneaker\"),\n            },\n            Shoe {\n                size: 13,\n                style: String::from(\"sandal\"),\n            },\n            Shoe {\n                size: 10,\n                style: String::from(\"boot\"),\n            },\n        ];\n\n        let in_my_size = shoes_in_size(shoes, 10);\n\n        assert_eq!(\n            in_my_size,\n            vec![\n                Shoe {\n                    size: 10,\n                    style: String::from(\"sneaker\")\n                },\n                Shoe {\n                    size: 10,\n                    style: String::from(\"boot\")\n                },\n            ]\n        );\n    }\n}\n```\n\nListing 13-16: Using the `filter` method with a closure that captures `shoe_size`\n\nThe `shoes_in_size` function takes ownership of a vector of shoes and a shoe size as parameters. It returns a vector containing only shoes of the specified size.\n\nIn the body of `shoes_in_size`, we call `into_iter` to create an iterator that takes ownership of the vector. Then we call `filter` to adapt that iterator into a new iterator that only contains elements for which the closure returns `true`.\n\nThe closure captures the `shoe_size` parameter from the environment and compares the value with each shoe‚Äôs size, keeping only shoes of the size specified. Finally, calling `collect` gathers the values returned by the adapted iterator into a vector that‚Äôs returned by the function.\n\nThe test shows that when we call `shoes_in_size`, we get back only shoes that have the same size as the value we specified.\n\n## [Improving Our I/O Project](#improving-our-io-project)\n\nWith this new knowledge about iterators, we can improve the I/O project in Chapter 12 by using iterators to make places in the code clearer and more concise. Let‚Äôs look at how iterators can improve our implementation of the `Config::build` function and the `search` function.\n\n### [Removing a `clone` Using an Iterator](#removing-a-clone-using-an-iterator)\n\nIn Listing 12-6, we added code that took a slice of `String` values and created an instance of the `Config` struct by indexing into the slice and cloning the values, allowing the `Config` struct to own those values. In Listing 13-17, we‚Äôve reproduced the implementation of the `Config::build` function as it was in Listing 12-23:\n\nFilename: src/lib.rs\n\n```rust\nuse std::env;\nuse std::error::Error;\nuse std::fs;\n\npub struct Config {\n    pub query: String,\n    pub file_path: String,\n    pub ignore_case: bool,\n}\n\nimpl Config {\n    pub fn build(args: &[String]) -> Result<Config, &'static str> {\n        if args.len() < 3 {\n            return Err(\"not enough arguments\");\n        }\n\n        let query = args[1].clone();\n        let file_path = args[2].clone();\n\n        let ignore_case = env::var(\"IGNORE_CASE\").is_ok();\n\n        Ok(Config {\n            query,\n            file_path,\n            ignore_case,\n        })\n    }\n}\n\npub fn run(config: Config) -> Result<(), Box<dyn Error>> {\n    let contents = fs::read_to_string(config.file_path)?;\n\n    let results = if config.ignore_case {\n        search_case_insensitive(&config.query, &contents)\n    } else {\n        search(&config.query, &contents)\n    };\n\n    for line in results {\n        println!(\"{line}\");\n    }\n\n    Ok(())\n}\n\npub fn search<'a>(query: &str, contents: &'a str) -> Vec<&'a str> {\n    let mut results = Vec::new();\n\n    for line in contents.lines() {\n        if line.contains(query) {\n            results.push(line);\n        }\n    }\n\n    results\n}\n\npub fn search_case_insensitive<'a>(\n    query: &str,\n    contents: &'a str,\n) -> Vec<&'a str> {\n    let query = query.to_lowercase();\n    let mut results = Vec::new();\n\n    for line in contents.lines() {\n        if line.to_lowercase().contains(&query) {\n            results.push(line);\n        }\n    }\n\n    results\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn case_sensitive() {\n        let query = \"duct\";\n        let contents = \"\\\nRust:\nsafe, fast, productive.\nPick three.\nDuct tape.\";\n\n        assert_eq!(vec![\"safe, fast, productive.\"], search(query, contents));\n    }\n\n    #[test]\n    fn case_insensitive() {\n        let query = \"rUsT\";\n        let contents = \"\\\nRust:\nsafe, fast, productive.\nPick three.\nTrust me.\";\n\n        assert_eq!(\n            vec![\"Rust:\", \"Trust me.\"],\n            search_case_insensitive(query, contents)\n        );\n    }\n}\n```\n\nListing 13-17: Reproduction of the `Config::build` function from Listing 12-23\n\nAt the time, we said not to worry about the inefficient `clone` calls because we would remove them in the future. Well, that time is now!\n\nWe needed `clone` here because we have a slice with `String` elements in the parameter `args`, but the `build` function doesn‚Äôt own `args`. To return ownership of a `Config` instance, we had to clone the values from the `query` and `file_path` fields of `Config` so the `Config` instance can own its values.\n\nWith our new knowledge about iterators, we can change the `build` function to take ownership of an iterator as its argument instead of borrowing a slice. We‚Äôll use the iterator functionality instead of the code that checks the length of the slice and indexes into specific locations. This will clarify what the `Config::build` function is doing because the iterator will access the values.\n\nOnce `Config::build` takes ownership of the iterator and stops using indexing operations that borrow, we can move the `String` values from the iterator into `Config` rather than calling `clone` and making a new allocation.\n\n#### [Using the Returned Iterator Directly](#using-the-returned-iterator-directly)\n\nOpen your I/O project‚Äôs _src/main.rs_ file, which should look like this:\n\nFilename: src/main.rs\n\n```rust\nuse std::env;\nuse std::process;\n\nuse minigrep::Config;\n\nfn main() {\n    let args: Vec<String> = env::args().collect();\n\n    let config = Config::build(&args).unwrap_or_else(|err| {\n        eprintln!(\"Problem parsing arguments: {err}\");\n        process::exit(1);\n    });\n\n    // --snip--\n\n    if let Err(e) = minigrep::run(config) {\n        eprintln!(\"Application error: {e}\");\n        process::exit(1);\n    }\n}\n```\n\nWe‚Äôll first change the start of the `main` function that we had in Listing 12-24 to the code in Listing 13-18, which this time uses an iterator. This won‚Äôt compile until we update `Config::build` as well.\n\nFilename: src/main.rs\n\n```rust\nuse std::env;\nuse std::process;\n\nuse minigrep::Config;\n\nfn main() {\n    let config = Config::build(env::args()).unwrap_or_else(|err| {\n        eprintln!(\"Problem parsing arguments: {err}\");\n        process::exit(1);\n    });\n\n    // --snip--\n\n    if let Err(e) = minigrep::run(config) {\n        eprintln!(\"Application error: {e}\");\n        process::exit(1);\n    }\n}\n```\n\nListing 13-18: Passing the return value of `env::args` to `Config::build`\n\nThe `env::args` function returns an iterator! Rather than collecting the iterator values into a vector and then passing a slice to `Config::build`, now we‚Äôre passing ownership of the iterator returned from `env::args` to `Config::build` directly.\n\nNext, we need to update the definition of `Config::build`. In your I/O project‚Äôs _src/lib.rs_ file, let‚Äôs change the signature of `Config::build` to look like Listing 13-19. This still won‚Äôt compile because we need to update the function body.\n\nFilename: src/lib.rs\n\n```rust\nuse std::env;\nuse std::error::Error;\nuse std::fs;\n\npub struct Config {\n    pub query: String,\n    pub file_path: String,\n    pub ignore_case: bool,\n}\n\nimpl Config {\n    pub fn build(\n        mut args: impl Iterator<Item = String>,\n    ) -> Result<Config, &'static str> {\n        // --snip--\n        if args.len() < 3 {\n            return Err(\"not enough arguments\");\n        }\n\n        let query = args[1].clone();\n        let file_path = args[2].clone();\n\n        let ignore_case = env::var(\"IGNORE_CASE\").is_ok();\n\n        Ok(Config {\n            query,\n            file_path,\n            ignore_case,\n        })\n    }\n}\n\npub fn run(config: Config) -> Result<(), Box<dyn Error>> {\n    let contents = fs::read_to_string(config.file_path)?;\n\n    let results = if config.ignore_case {\n        search_case_insensitive(&config.query, &contents)\n    } else {\n        search(&config.query, &contents)\n    };\n\n    for line in results {\n        println!(\"{line}\");\n    }\n\n    Ok(())\n}\n\npub fn search<'a>(query: &str, contents: &'a str) -> Vec<&'a str> {\n    let mut results = Vec::new();\n\n    for line in contents.lines() {\n        if line.contains(query) {\n            results.push(line);\n        }\n    }\n\n    results\n}\n\npub fn search_case_insensitive<'a>(\n    query: &str,\n    contents: &'a str,\n) -> Vec<&'a str> {\n    let query = query.to_lowercase();\n    let mut results = Vec::new();\n\n    for line in contents.lines() {\n        if line.to_lowercase().contains(&query) {\n            results.push(line);\n        }\n    }\n\n    results\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn case_sensitive() {\n        let query = \"duct\";\n        let contents = \"\\\nRust:\nsafe, fast, productive.\nPick three.\nDuct tape.\";\n\n        assert_eq!(vec![\"safe, fast, productive.\"], search(query, contents));\n    }\n\n    #[test]\n    fn case_insensitive() {\n        let query = \"rUsT\";\n        let contents = \"\\\nRust:\nsafe, fast, productive.\nPick three.\nTrust me.\";\n\n        assert_eq!(\n            vec![\"Rust:\", \"Trust me.\"],\n            search_case_insensitive(query, contents)\n        );\n    }\n}\n```\n\nListing 13-19: Updating the signature of `Config::build` to expect an iterator\n\nThe standard library documentation for the `env::args` function shows that the type of the iterator it returns is `std::env::Args`, and that type implements the `Iterator` trait and returns `String` values.\n\nWe‚Äôve updated the signature of the `Config::build` function so the parameter `args` has a generic type with the trait bounds `impl Iterator<Item = String>` instead of `&[String]`. This usage of the `impl Trait` syntax we discussed in the [‚ÄúTraits as Parameters‚Äù](about:blank/ch10-02-traits.html#traits-as-parameters) section of Chapter 10 means that `args` can be any type that implements the `Iterator` trait and returns `String` items.\n\nBecause we‚Äôre taking ownership of `args` and we‚Äôll be mutating `args` by iterating over it, we can add the `mut` keyword into the specification of the `args` parameter to make it mutable.\n\n#### [Using `Iterator` Trait Methods Instead of Indexing](#using-iterator-trait-methods-instead-of-indexing)\n\nNext, we‚Äôll fix the body of `Config::build`. Because `args` implements the `Iterator` trait, we know we can call the `next` method on it! Listing 13-20 updates the code from Listing 12-23 to use the `next` method:\n\nFilename: src/lib.rs\n\n```rust\nuse std::env;\nuse std::error::Error;\nuse std::fs;\n\npub struct Config {\n    pub query: String,\n    pub file_path: String,\n    pub ignore_case: bool,\n}\n\nimpl Config {\n    pub fn build(\n        mut args: impl Iterator<Item = String>,\n    ) -> Result<Config, &'static str> {\n        args.next();\n\n        let query = match args.next() {\n            Some(arg) => arg,\n            None => return Err(\"Didn't get a query string\"),\n        };\n\n        let file_path = match args.next() {\n            Some(arg) => arg,\n            None => return Err(\"Didn't get a file path\"),\n        };\n\n        let ignore_case = env::var(\"IGNORE_CASE\").is_ok();\n\n        Ok(Config {\n            query,\n            file_path,\n            ignore_case,\n        })\n    }\n}\n\npub fn run(config: Config) -> Result<(), Box<dyn Error>> {\n    let contents = fs::read_to_string(config.file_path)?;\n\n    let results = if config.ignore_case {\n        search_case_insensitive(&config.query, &contents)\n    } else {\n        search(&config.query, &contents)\n    };\n\n    for line in results {\n        println!(\"{line}\");\n    }\n\n    Ok(())\n}\n\npub fn search<'a>(query: &str, contents: &'a str) -> Vec<&'a str> {\n    let mut results = Vec::new();\n\n    for line in contents.lines() {\n        if line.contains(query) {\n            results.push(line);\n        }\n    }\n\n    results\n}\n\npub fn search_case_insensitive<'a>(\n    query: &str,\n    contents: &'a str,\n) -> Vec<&'a str> {\n    let query = query.to_lowercase();\n    let mut results = Vec::new();\n\n    for line in contents.lines() {\n        if line.to_lowercase().contains(&query) {\n            results.push(line);\n        }\n    }\n\n    results\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn case_sensitive() {\n        let query = \"duct\";\n        let contents = \"\\\nRust:\nsafe, fast, productive.\nPick three.\nDuct tape.\";\n\n        assert_eq!(vec![\"safe, fast, productive.\"], search(query, contents));\n    }\n\n    #[test]\n    fn case_insensitive() {\n        let query = \"rUsT\";\n        let contents = \"\\\nRust:\nsafe, fast, productive.\nPick three.\nTrust me.\";\n\n        assert_eq!(\n            vec![\"Rust:\", \"Trust me.\"],\n            search_case_insensitive(query, contents)\n        );\n    }\n}\n```\n\nListing 13-20: Changing the body of `Config::build` to use iterator methods\n\nRemember that the first value in the return value of `env::args` is the name of the program. We want to ignore that and get to the next value, so first we call `next` and do nothing with the return value. Second, we call `next` to get the value we want to put in the `query` field of `Config`. If `next` returns a `Some`, we use a `match` to extract the value. If it returns `None`, it means not enough arguments were given and we return early with an `Err` value. We do the same thing for the `file_path` value.\n\n### [Making Code Clearer with Iterator Adaptors](#making-code-clearer-with-iterator-adaptors)\n\nWe can also take advantage of iterators in the `search` function in our I/O project, which is reproduced here in Listing 13-21 as it was in Listing 12-19:\n\nFilename: src/lib.rs\n\n```rust\nuse std::error::Error;\nuse std::fs;\n\npub struct Config {\n    pub query: String,\n    pub file_path: String,\n}\n\nimpl Config {\n    pub fn build(args: &[String]) -> Result<Config, &'static str> {\n        if args.len() < 3 {\n            return Err(\"not enough arguments\");\n        }\n\n        let query = args[1].clone();\n        let file_path = args[2].clone();\n\n        Ok(Config { query, file_path })\n    }\n}\n\npub fn run(config: Config) -> Result<(), Box<dyn Error>> {\n    let contents = fs::read_to_string(config.file_path)?;\n\n    Ok(())\n}\n\npub fn search<'a>(query: &str, contents: &'a str) -> Vec<&'a str> {\n    let mut results = Vec::new();\n\n    for line in contents.lines() {\n        if line.contains(query) {\n            results.push(line);\n        }\n    }\n\n    results\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn one_result() {\n        let query = \"duct\";\n        let contents = \"\\\nRust:\nsafe, fast, productive.\nPick three.\";\n\n        assert_eq!(vec![\"safe, fast, productive.\"], search(query, contents));\n    }\n}\n```\n\nListing 13-21: The implementation of the `search` function from Listing 12-19\n\nWe can write this code in a more concise way using iterator adaptor methods. Doing so also lets us avoid having a mutable intermediate `results` vector. The functional programming style prefers to minimize the amount of mutable state to make code clearer. Removing the mutable state might enable a future enhancement to make searching happen in parallel, because we wouldn‚Äôt have to manage concurrent access to the `results` vector. Listing 13-22 shows this change:\n\nFilename: src/lib.rs\n\n```rust\nuse std::env;\nuse std::error::Error;\nuse std::fs;\n\npub struct Config {\n    pub query: String,\n    pub file_path: String,\n    pub ignore_case: bool,\n}\n\nimpl Config {\n    pub fn build(\n        mut args: impl Iterator<Item = String>,\n    ) -> Result<Config, &'static str> {\n        args.next();\n\n        let query = match args.next() {\n            Some(arg) => arg,\n            None => return Err(\"Didn't get a query string\"),\n        };\n\n        let file_path = match args.next() {\n            Some(arg) => arg,\n            None => return Err(\"Didn't get a file path\"),\n        };\n\n        let ignore_case = env::var(\"IGNORE_CASE\").is_ok();\n\n        Ok(Config {\n            query,\n            file_path,\n            ignore_case,\n        })\n    }\n}\n\npub fn run(config: Config) -> Result<(), Box<dyn Error>> {\n    let contents = fs::read_to_string(config.file_path)?;\n\n    let results = if config.ignore_case {\n        search_case_insensitive(&config.query, &contents)\n    } else {\n        search(&config.query, &contents)\n    };\n\n    for line in results {\n        println!(\"{line}\");\n    }\n\n    Ok(())\n}\n\npub fn search<'a>(query: &str, contents: &'a str) -> Vec<&'a str> {\n    contents\n        .lines()\n        .filter(|line| line.contains(query))\n        .collect()\n}\n\npub fn search_case_insensitive<'a>(\n    query: &str,\n    contents: &'a str,\n) -> Vec<&'a str> {\n    let query = query.to_lowercase();\n    let mut results = Vec::new();\n\n    for line in contents.lines() {\n        if line.to_lowercase().contains(&query) {\n            results.push(line);\n        }\n    }\n\n    results\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn case_sensitive() {\n        let query = \"duct\";\n        let contents = \"\\\nRust:\nsafe, fast, productive.\nPick three.\nDuct tape.\";\n\n        assert_eq!(vec![\"safe, fast, productive.\"], search(query, contents));\n    }\n\n    #[test]\n    fn case_insensitive() {\n        let query = \"rUsT\";\n        let contents = \"\\\nRust:\nsafe, fast, productive.\nPick three.\nTrust me.\";\n\n        assert_eq!(\n            vec![\"Rust:\", \"Trust me.\"],\n            search_case_insensitive(query, contents)\n        );\n    }\n}\n```\n\nListing 13-22: Using iterator adaptor methods in the implementation of the `search` function\n\nRecall that the purpose of the `search` function is to return all lines in `contents` that contain the `query`. Similar to the `filter` example in Listing 13-16, this code uses the `filter` adaptor to keep only the lines that `line.contains(query)` returns `true` for. We then collect the matching lines into another vector with `collect`. Much simpler! Feel free to make the same change to use iterator methods in the `search_case_insensitive` function as well.\n\n### [Choosing Between Loops or Iterators](#choosing-between-loops-or-iterators)\n\nThe next logical question is which style you should choose in your own code and why: the original implementation in Listing 13-21 or the version using iterators in Listing 13-22. Most Rust programmers prefer to use the iterator style. It‚Äôs a bit tougher to get the hang of at first, but once you get a feel for the various iterator adaptors and what they do, iterators can be easier to understand. Instead of fiddling with the various bits of looping and building new vectors, the code focuses on the high-level objective of the loop. This abstracts away some of the commonplace code so it‚Äôs easier to see the concepts that are unique to this code, such as the filtering condition each element in the iterator must pass.\n\nBut are the two implementations truly equivalent? The intuitive assumption might be that the more low-level loop will be faster. Let‚Äôs talk about performance.\n\n## [Comparing Performance: Loops vs. Iterators](#comparing-performance-loops-vs-iterators)\n\nTo determine whether to use loops or iterators, you need to know which implementation is faster: the version of the `search` function with an explicit `for` loop or the version with iterators.\n\nWe ran a benchmark by loading the entire contents of _The Adventures of Sherlock Holmes_ by Sir Arthur Conan Doyle into a `String` and looking for the word _the_ in the contents. Here are the results of the benchmark on the version of `search` using the `for` loop and the version using iterators:\n\n```text\ntest bench_search_for  ... bench:  19,620,300 ns/iter (+/- 915,700)\ntest bench_search_iter ... bench:  19,234,900 ns/iter (+/- 657,200)\n\n```\n\nThe iterator version was slightly faster! We won‚Äôt explain the benchmark code here, because the point is not to prove that the two versions are equivalent but to get a general sense of how these two implementations compare performance-wise.\n\nFor a more comprehensive benchmark, you should check using various texts of various sizes as the `contents`, different words and words of different lengths as the `query`, and all kinds of other variations. The point is this: iterators, although a high-level abstraction, get compiled down to roughly the same code as if you‚Äôd written the lower-level code yourself. Iterators are one of Rust‚Äôs _zero-cost abstractions_, by which we mean using the abstraction imposes no additional runtime overhead. This is analogous to how Bjarne Stroustrup, the original designer and implementor of C++, defines _zero-overhead_ in ‚ÄúFoundations of C++‚Äù (2012):\n\n> In general, C++ implementations obey the zero-overhead principle: What you don‚Äôt use, you don‚Äôt pay for. And further: What you do use, you couldn‚Äôt hand code any better.\n\nAs another example, the following code is taken from an audio decoder. The decoding algorithm uses the linear prediction mathematical operation to estimate future values based on a linear function of the previous samples. This code uses an iterator chain to do some math on three variables in scope: a `buffer` slice of data, an array of 12 `coefficients`, and an amount by which to shift data in `qlp_shift`. We‚Äôve declared the variables within this example but not given them any values; although this code doesn‚Äôt have much meaning outside of its context, it‚Äôs still a concise, real-world example of how Rust translates high-level ideas to low-level code.\n\n```rust\nlet buffer: &mut [i32];\nlet coefficients: [i64; 12];\nlet qlp_shift: i16;\n\nfor i in 12..buffer.len() {\n    let prediction = coefficients.iter()\n                                 .zip(&buffer[i - 12..i])\n                                 .map(|(&c, &s)| c * s as i64)\n                                 .sum::<i64>() >> qlp_shift;\n    let delta = buffer[i];\n    buffer[i] = prediction as i32 + delta;\n}\n```\n\nTo calculate the value of `prediction`, this code iterates through each of the 12 values in `coefficients` and uses the `zip` method to pair the coefficient values with the previous 12 values in `buffer`. Then, for each pair, we multiply the values together, sum all the results, and shift the bits in the sum `qlp_shift` bits to the right.\n\nCalculations in applications like audio decoders often prioritize performance most highly. Here, we‚Äôre creating an iterator, using two adaptors, and then consuming the value. What assembly code would this Rust code compile to? Well, as of this writing, it compiles down to the same assembly you‚Äôd write by hand. There‚Äôs no loop at all corresponding to the iteration over the values in `coefficients`: Rust knows that there are 12 iterations, so it ‚Äúunrolls‚Äù the loop. _Unrolling_ is an optimization that removes the overhead of the loop controlling code and instead generates repetitive code for each iteration of the loop.\n\nAll of the coefficients get stored in registers, which means accessing the values is very fast. There are no bounds checks on the array access at runtime. All these optimizations that Rust is able to apply make the resulting code extremely efficient. Now that you know this, you can use iterators and closures without fear! They make code seem like it‚Äôs higher level but don‚Äôt impose a runtime performance penalty for doing so.\n\n## [Summary](#summary-12)\n\nClosures and iterators are Rust features inspired by functional programming language ideas. They contribute to Rust‚Äôs capability to clearly express high-level ideas at low-level performance. The implementations of closures and iterators are such that runtime performance is not affected. This is part of Rust‚Äôs goal to strive to provide zero-cost abstractions.\n\nNow that we‚Äôve improved the expressiveness of our I/O project, let‚Äôs look at some more features of `cargo` that will help us share the project with the world.\n\n## [More About Cargo and Crates.io](#more-about-cargo-and-cratesio)\n\nSo far we‚Äôve used only the most basic features of Cargo to build, run, and test our code, but it can do a lot more. In this chapter, we‚Äôll discuss some of its other, more advanced features to show you how to do the following:\n\n-   Customize your build through release profiles\n-   Publish libraries on [crates.io](https://crates.io/)\n-   Organize large projects with workspaces\n-   Install binaries from [crates.io](https://crates.io/)\n-   Extend Cargo using custom commands\n\nCargo can do even more than the functionality we cover in this chapter, so for a full explanation of all its features, see [its documentation](https://doc.rust-lang.org/cargo/).\n\n## [Customizing Builds with Release Profiles](#customizing-builds-with-release-profiles)\n\nIn Rust, _release profiles_ are predefined and customizable profiles with different configurations that allow a programmer to have more control over various options for compiling code. Each profile is configured independently of the others.\n\nCargo has two main profiles: the `dev` profile Cargo uses when you run `cargo build` and the `release` profile Cargo uses when you run `cargo build --release`. The `dev` profile is defined with good defaults for development, and the `release` profile has good defaults for release builds.\n\nThese profile names might be familiar from the output of your builds:\n\n```console\n$ cargo build\n    Finished dev [unoptimized + debuginfo] target(s) in 0.0s\n$ cargo build --release\n    Finished release [optimized] target(s) in 0.0s\n\n```\n\nThe `dev` and `release` are these different profiles used by the compiler.\n\nCargo has default settings for each of the profiles that apply when you haven‚Äôt explicitly added any `[profile.*]` sections in the project‚Äôs _Cargo.toml_ file. By adding `[profile.*]` sections for any profile you want to customize, you override any subset of the default settings. For example, here are the default values for the `opt-level` setting for the `dev` and `release` profiles:\n\nFilename: Cargo.toml\n\n```toml\n[profile.dev]\nopt-level = 0\n\n[profile.release]\nopt-level = 3\n\n```\n\nThe `opt-level` setting controls the number of optimizations Rust will apply to your code, with a range of 0 to 3. Applying more optimizations extends compiling time, so if you‚Äôre in development and compiling your code often, you‚Äôll want fewer optimizations to compile faster even if the resulting code runs slower. The default `opt-level` for `dev` is therefore `0`. When you‚Äôre ready to release your code, it‚Äôs best to spend more time compiling. You‚Äôll only compile in release mode once, but you‚Äôll run the compiled program many times, so release mode trades longer compile time for code that runs faster. That is why the default `opt-level` for the `release` profile is `3`.\n\nYou can override a default setting by adding a different value for it in _Cargo.toml_. For example, if we want to use optimization level 1 in the development profile, we can add these two lines to our project‚Äôs _Cargo.toml_ file:\n\nFilename: Cargo.toml\n\n```toml\n[profile.dev]\nopt-level = 1\n\n```\n\nThis code overrides the default setting of `0`. Now when we run `cargo build`, Cargo will use the defaults for the `dev` profile plus our customization to `opt-level`. Because we set `opt-level` to `1`, Cargo will apply more optimizations than the default, but not as many as in a release build.\n\nFor the full list of configuration options and defaults for each profile, see [Cargo‚Äôs documentation](https://doc.rust-lang.org/cargo/reference/profiles.html).\n\n## [Publishing a Crate to Crates.io](#publishing-a-crate-to-cratesio)\n\nWe‚Äôve used packages from [crates.io](https://crates.io/) as dependencies of our project, but you can also share your code with other people by publishing your own packages. The crate registry at [crates.io](https://crates.io/) distributes the source code of your packages, so it primarily hosts code that is open source.\n\nRust and Cargo have features that make your published package easier for people to find and use. We‚Äôll talk about some of these features next and then explain how to publish a package.\n\nAccurately documenting your packages will help other users know how and when to use them, so it‚Äôs worth investing the time to write documentation. In Chapter 3, we discussed how to comment Rust code using two slashes, `//`. Rust also has a particular kind of comment for documentation, known conveniently as a _documentation comment_, that will generate HTML documentation. The HTML displays the contents of documentation comments for public API items intended for programmers interested in knowing how to _use_ your crate as opposed to how your crate is _implemented_.\n\nDocumentation comments use three slashes, `///`, instead of two and support Markdown notation for formatting the text. Place documentation comments just before the item they‚Äôre documenting. Listing 14-1 shows documentation comments for an `add_one` function in a crate named `my_crate`.\n\nFilename: src/lib.rs\n\n```rust\n/// Adds one to the number given.\n///\n/// # Examples\n///\n/// ```\n/// let arg = 5;\n/// let answer = my_crate::add_one(arg);\n///\n/// assert_eq!(6, answer);\n/// ```\npub fn add_one(x: i32) -> i32 {\n    x + 1\n}\n```\n\nListing 14-1: A documentation comment for a function\n\nHere, we give a description of what the `add_one` function does, start a section with the heading `Examples`, and then provide code that demonstrates how to use the `add_one` function. We can generate the HTML documentation from this documentation comment by running `cargo doc`. This command runs the `rustdoc` tool distributed with Rust and puts the generated HTML documentation in the _target/doc_ directory.\n\nFor convenience, running `cargo doc --open` will build the HTML for your current crate‚Äôs documentation (as well as the documentation for all of your crate‚Äôs dependencies) and open the result in a web browser. Navigate to the `add_one` function and you‚Äôll see how the text in the documentation comments is rendered, as shown in Figure 14-1:\n\n![Rendered HTML documentation for the `add_one` function of `my_crate`](img/trpl14-01.png)\n\nFigure 14-1: HTML documentation for the `add_one` function\n\n#### [Commonly Used Sections](#commonly-used-sections)\n\nWe used the `# Examples` Markdown heading in Listing 14-1 to create a section in the HTML with the title ‚ÄúExamples.‚Äù Here are some other sections that crate authors commonly use in their documentation:\n\n-   **Panics**: The scenarios in which the function being documented could panic. Callers of the function who don‚Äôt want their programs to panic should make sure they don‚Äôt call the function in these situations.\n-   **Errors**: If the function returns a `Result`, describing the kinds of errors that might occur and what conditions might cause those errors to be returned can be helpful to callers so they can write code to handle the different kinds of errors in different ways.\n-   **Safety**: If the function is `unsafe` to call (we discuss unsafety in Chapter 19), there should be a section explaining why the function is unsafe and covering the invariants that the function expects callers to uphold.\n\nMost documentation comments don‚Äôt need all of these sections, but this is a good checklist to remind you of the aspects of your code users will be interested in knowing about.\n\nAdding example code blocks in your documentation comments can help demonstrate how to use your library, and doing so has an additional bonus: running `cargo test` will run the code examples in your documentation as tests! Nothing is better than documentation with examples. But nothing is worse than examples that don‚Äôt work because the code has changed since the documentation was written. If we run `cargo test` with the documentation for the `add_one` function from Listing 14-1, we will see a section in the test results like this:\n\n```text\n   Doc-tests my_crate\n\nrunning 1 test\ntest src/lib.rs - add_one (line 5) ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.27s\n\n```\n\nNow if we change either the function or the example so the `assert_eq!` in the example panics and run `cargo test` again, we‚Äôll see that the doc tests catch that the example and the code are out of sync with each other!\n\nThe style of doc comment `//!` adds documentation to the item that contains the comments rather than to the items following the comments. We typically use these doc comments inside the crate root file (_src/lib.rs_ by convention) or inside a module to document the crate or the module as a whole.\n\nFor example, to add documentation that describes the purpose of the `my_crate` crate that contains the `add_one` function, we add documentation comments that start with `//!` to the beginning of the _src/lib.rs_ file, as shown in Listing 14-2:\n\nFilename: src/lib.rs\n\n```rust\n//! # My Crate\n//!\n//! `my_crate` is a collection of utilities to make performing certain\n//! calculations more convenient.\n\n/// Adds one to the number given.\n// --snip--\n///\n/// # Examples\n///\n/// ```\n/// let arg = 5;\n/// let answer = my_crate::add_one(arg);\n///\n/// assert_eq!(6, answer);\n/// ```\npub fn add_one(x: i32) -> i32 {\n    x + 1\n}\n```\n\nListing 14-2: Documentation for the `my_crate` crate as a whole\n\nNotice there isn‚Äôt any code after the last line that begins with `//!`. Because we started the comments with `//!` instead of `///`, we‚Äôre documenting the item that contains this comment rather than an item that follows this comment. In this case, that item is the _src/lib.rs_ file, which is the crate root. These comments describe the entire crate.\n\nWhen we run `cargo doc --open`, these comments will display on the front page of the documentation for `my_crate` above the list of public items in the crate, as shown in Figure 14-2:\n\n![Rendered HTML documentation with a comment for the crate as a whole](img/trpl14-02.png)\n\nFigure 14-2: Rendered documentation for `my_crate`, including the comment describing the crate as a whole\n\nDocumentation comments within items are useful for describing crates and modules especially. Use them to explain the overall purpose of the container to help your users understand the crate‚Äôs organization.\n\n### [Exporting a Convenient Public API with `pub use`](#exporting-a-convenient-public-api-with-pub-use)\n\nThe structure of your public API is a major consideration when publishing a crate. People who use your crate are less familiar with the structure than you are and might have difficulty finding the pieces they want to use if your crate has a large module hierarchy.\n\nIn Chapter 7, we covered how to make items public using the `pub` keyword, and bring items into a scope with the `use` keyword. However, the structure that makes sense to you while you‚Äôre developing a crate might not be very convenient for your users. You might want to organize your structs in a hierarchy containing multiple levels, but then people who want to use a type you‚Äôve defined deep in the hierarchy might have trouble finding out that type exists. They might also be annoyed at having to enter `use` `my_crate::some_module::another_module::UsefulType;` rather than `use` `my_crate::UsefulType;`.\n\nThe good news is that if the structure _isn‚Äôt_ convenient for others to use from another library, you don‚Äôt have to rearrange your internal organization: instead, you can re-export items to make a public structure that‚Äôs different from your private structure by using `pub use`. Re-exporting takes a public item in one location and makes it public in another location, as if it were defined in the other location instead.\n\nFor example, say we made a library named `art` for modeling artistic concepts. Within this library are two modules: a `kinds` module containing two enums named `PrimaryColor` and `SecondaryColor` and a `utils` module containing a function named `mix`, as shown in Listing 14-3:\n\nFilename: src/lib.rs\n\n```rust\n//! # Art\n//!\n//! A library for modeling artistic concepts.\n\npub mod kinds {\n    /// The primary colors according to the RYB color model.\n    pub enum PrimaryColor {\n        Red,\n        Yellow,\n        Blue,\n    }\n\n    /// The secondary colors according to the RYB color model.\n    pub enum SecondaryColor {\n        Orange,\n        Green,\n        Purple,\n    }\n}\n\npub mod utils {\n    use crate::kinds::*;\n\n    /// Combines two primary colors in equal amounts to create\n    /// a secondary color.\n    pub fn mix(c1: PrimaryColor, c2: PrimaryColor) -> SecondaryColor {\n        // --snip--\n        unimplemented!();\n    }\n}\n```\n\nListing 14-3: An `art` library with items organized into `kinds` and `utils` modules\n\nFigure 14-3 shows what the front page of the documentation for this crate generated by `cargo doc` would look like:\n\n![Rendered documentation for the `art` crate that lists the `kinds` and `utils` modules](img/trpl14-03.png)\n\nFigure 14-3: Front page of the documentation for `art` that lists the `kinds` and `utils` modules\n\nNote that the `PrimaryColor` and `SecondaryColor` types aren‚Äôt listed on the front page, nor is the `mix` function. We have to click `kinds` and `utils` to see them.\n\nAnother crate that depends on this library would need `use` statements that bring the items from `art` into scope, specifying the module structure that‚Äôs currently defined. Listing 14-4 shows an example of a crate that uses the `PrimaryColor` and `mix` items from the `art` crate:\n\nFilename: src/main.rs\n\n```rust\nuse art::kinds::PrimaryColor;\nuse art::utils::mix;\n\nfn main() {\n    let red = PrimaryColor::Red;\n    let yellow = PrimaryColor::Yellow;\n    mix(red, yellow);\n}\n```\n\nListing 14-4: A crate using the `art` crate‚Äôs items with its internal structure exported\n\nThe author of the code in Listing 14-4, which uses the `art` crate, had to figure out that `PrimaryColor` is in the `kinds` module and `mix` is in the `utils` module. The module structure of the `art` crate is more relevant to developers working on the `art` crate than to those using it. The internal structure doesn‚Äôt contain any useful information for someone trying to understand how to use the `art` crate, but rather causes confusion because developers who use it have to figure out where to look, and must specify the module names in the `use` statements.\n\nTo remove the internal organization from the public API, we can modify the `art` crate code in Listing 14-3 to add `pub use` statements to re-export the items at the top level, as shown in Listing 14-5:\n\nFilename: src/lib.rs\n\n```rust\n//! # Art\n//!\n//! A library for modeling artistic concepts.\n\npub use self::kinds::PrimaryColor;\npub use self::kinds::SecondaryColor;\npub use self::utils::mix;\n\npub mod kinds {\n    // --snip--\n    /// The primary colors according to the RYB color model.\n    pub enum PrimaryColor {\n        Red,\n        Yellow,\n        Blue,\n    }\n\n    /// The secondary colors according to the RYB color model.\n    pub enum SecondaryColor {\n        Orange,\n        Green,\n        Purple,\n    }\n}\n\npub mod utils {\n    // --snip--\n    use crate::kinds::*;\n\n    /// Combines two primary colors in equal amounts to create\n    /// a secondary color.\n    pub fn mix(c1: PrimaryColor, c2: PrimaryColor) -> SecondaryColor {\n        SecondaryColor::Orange\n    }\n}\n```\n\nListing 14-5: Adding `pub use` statements to re-export items\n\nThe API documentation that `cargo doc` generates for this crate will now list and link re-exports on the front page, as shown in Figure 14-4, making the `PrimaryColor` and `SecondaryColor` types and the `mix` function easier to find.\n\n![Rendered documentation for the `art` crate with the re-exports on the front page](img/trpl14-04.png)\n\nFigure 14-4: The front page of the documentation for `art` that lists the re-exports\n\nThe `art` crate users can still see and use the internal structure from Listing 14-3 as demonstrated in Listing 14-4, or they can use the more convenient structure in Listing 14-5, as shown in Listing 14-6:\n\nFilename: src/main.rs\n\n```rust\nuse art::mix;\nuse art::PrimaryColor;\n\nfn main() {\n    // --snip--\n    let red = PrimaryColor::Red;\n    let yellow = PrimaryColor::Yellow;\n    mix(red, yellow);\n}\n```\n\nListing 14-6: A program using the re-exported items from the `art` crate\n\nIn cases where there are many nested modules, re-exporting the types at the top level with `pub use` can make a significant difference in the experience of people who use the crate. Another common use of `pub use` is to re-export definitions of a dependency in the current crate to make that crate‚Äôs definitions part of your crate‚Äôs public API.\n\nCreating a useful public API structure is more of an art than a science, and you can iterate to find the API that works best for your users. Choosing `pub use` gives you flexibility in how you structure your crate internally and decouples that internal structure from what you present to your users. Look at some of the code of crates you‚Äôve installed to see if their internal structure differs from their public API.\n\n### [Setting Up a Crates.io Account](#setting-up-a-cratesio-account)\n\nBefore you can publish any crates, you need to create an account on [crates.io](https://crates.io/) and get an API token. To do so, visit the home page at [crates.io](https://crates.io/) and log in via a GitHub account. (The GitHub account is currently a requirement, but the site might support other ways of creating an account in the future.) Once you‚Äôre logged in, visit your account settings at [https://crates.io/me/](https://crates.io/me/) and retrieve your API key. Then run the `cargo login` command and paste your API key when prompted, like this:\n\n```console\n$ cargo login\nabcdefghijklmnopqrstuvwxyz012345\n\n```\n\nThis command will inform Cargo of your API token and store it locally in _~/.cargo/credentials_. Note that this token is a _secret_: do not share it with anyone else. If you do share it with anyone for any reason, you should revoke it and generate a new token on [crates.io](https://crates.io/).\n\n### [Adding Metadata to a New Crate](#adding-metadata-to-a-new-crate)\n\nLet‚Äôs say you have a crate you want to publish. Before publishing, you‚Äôll need to add some metadata in the `[package]` section of the crate‚Äôs _Cargo.toml_ file.\n\nYour crate will need a unique name. While you‚Äôre working on a crate locally, you can name a crate whatever you‚Äôd like. However, crate names on [crates.io](https://crates.io/) are allocated on a first-come, first-served basis. Once a crate name is taken, no one else can publish a crate with that name. Before attempting to publish a crate, search for the name you want to use. If the name has been used, you will need to find another name and edit the `name` field in the _Cargo.toml_ file under the `[package]` section to use the new name for publishing, like so:\n\nFilename: Cargo.toml\n\n```toml\n[package]\nname = \"guessing_game\"\n\n```\n\nEven if you‚Äôve chosen a unique name, when you run `cargo publish` to publish the crate at this point, you‚Äôll get a warning and then an error:\n\n```console\n$ cargo publish\n    Updating crates.io index\nwarning: manifest has no description, license, license-file, documentation, homepage or repository.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#package-metadata for more info.\n--snip--\nerror: failed to publish to registry at https://crates.io\n\nCaused by:\n  the remote server responded with an error: missing or empty metadata fields: description, license. Please see https://doc.rust-lang.org/cargo/reference/manifest.html for how to upload metadata\n\n```\n\nThis errors because you‚Äôre missing some crucial information: a description and license are required so people will know what your crate does and under what terms they can use it. In _Cargo.toml_, add a description that‚Äôs just a sentence or two, because it will appear with your crate in search results. For the `license` field, you need to give a _license identifier value_. The [Linux Foundation‚Äôs Software Package Data Exchange (SPDX)](http://spdx.org/licenses/) lists the identifiers you can use for this value. For example, to specify that you‚Äôve licensed your crate using the MIT License, add the `MIT` identifier:\n\nFilename: Cargo.toml\n\n```toml\n[package]\nname = \"guessing_game\"\nlicense = \"MIT\"\n\n```\n\nIf you want to use a license that doesn‚Äôt appear in the SPDX, you need to place the text of that license in a file, include the file in your project, and then use `license-file` to specify the name of that file instead of using the `license` key.\n\nGuidance on which license is appropriate for your project is beyond the scope of this book. Many people in the Rust community license their projects in the same way as Rust by using a dual license of `MIT OR Apache-2.0`. This practice demonstrates that you can also specify multiple license identifiers separated by `OR` to have multiple licenses for your project.\n\nWith a unique name, the version, your description, and a license added, the _Cargo.toml_ file for a project that is ready to publish might look like this:\n\nFilename: Cargo.toml\n\n```toml\n[package]\nname = \"guessing_game\"\nversion = \"0.1.0\"\nedition = \"2021\"\ndescription = \"A fun game where you guess what number the computer has chosen.\"\nlicense = \"MIT OR Apache-2.0\"\n\n[dependencies]\n\n```\n\n[Cargo‚Äôs documentation](https://doc.rust-lang.org/cargo/) describes other metadata you can specify to ensure others can discover and use your crate more easily.\n\n### [Publishing to Crates.io](#publishing-to-cratesio)\n\nNow that you‚Äôve created an account, saved your API token, chosen a name for your crate, and specified the required metadata, you‚Äôre ready to publish! Publishing a crate uploads a specific version to [crates.io](https://crates.io/) for others to use.\n\nBe careful, because a publish is _permanent_. The version can never be overwritten, and the code cannot be deleted. One major goal of [crates.io](https://crates.io/) is to act as a permanent archive of code so that builds of all projects that depend on crates from [crates.io](https://crates.io/) will continue to work. Allowing version deletions would make fulfilling that goal impossible. However, there is no limit to the number of crate versions you can publish.\n\nRun the `cargo publish` command again. It should succeed now:\n\n```console\n$ cargo publish\n    Updating crates.io index\n   Packaging guessing_game v0.1.0 (file:///projects/guessing_game)\n   Verifying guessing_game v0.1.0 (file:///projects/guessing_game)\n   Compiling guessing_game v0.1.0\n(file:///projects/guessing_game/target/package/guessing_game-0.1.0)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.19s\n   Uploading guessing_game v0.1.0 (file:///projects/guessing_game)\n\n```\n\nCongratulations! You‚Äôve now shared your code with the Rust community, and anyone can easily add your crate as a dependency of their project.\n\n### [Publishing a New Version of an Existing Crate](#publishing-a-new-version-of-an-existing-crate)\n\nWhen you‚Äôve made changes to your crate and are ready to release a new version, you change the `version` value specified in your _Cargo.toml_ file and republish. Use the [Semantic Versioning rules](http://semver.org/) to decide what an appropriate next version number is based on the kinds of changes you‚Äôve made. Then run `cargo publish` to upload the new version.\n\n### [Deprecating Versions from Crates.io with `cargo yank`](#deprecating-versions-from-cratesio-with-cargo-yank)\n\nAlthough you can‚Äôt remove previous versions of a crate, you can prevent any future projects from adding them as a new dependency. This is useful when a crate version is broken for one reason or another. In such situations, Cargo supports _yanking_ a crate version.\n\nYanking a version prevents new projects from depending on that version while allowing all existing projects that depend on it to continue. Essentially, a yank means that all projects with a _Cargo.lock_ will not break, and any future _Cargo.lock_ files generated will not use the yanked version.\n\nTo yank a version of a crate, in the directory of the crate that you‚Äôve previously published, run `cargo yank` and specify which version you want to yank. For example, if we‚Äôve published a crate named `guessing_game` version 1.0.1 and we want to yank it, in the project directory for `guessing_game` we‚Äôd run:\n\n```console\n$ cargo yank --vers 1.0.1\n    Updating crates.io index\n        Yank guessing_game@1.0.1\n\n```\n\nBy adding `--undo` to the command, you can also undo a yank and allow projects to start depending on a version again:\n\n```console\n$ cargo yank --vers 1.0.1 --undo\n    Updating crates.io index\n      Unyank guessing_game@1.0.1\n\n```\n\nA yank _does not_ delete any code. It cannot, for example, delete accidentally uploaded secrets. If that happens, you must reset those secrets immediately.\n\n## [Cargo Workspaces](#cargo-workspaces)\n\nIn Chapter 12, we built a package that included a binary crate and a library crate. As your project develops, you might find that the library crate continues to get bigger and you want to split your package further into multiple library crates. Cargo offers a feature called _workspaces_ that can help manage multiple related packages that are developed in tandem.\n\n### [Creating a Workspace](#creating-a-workspace)\n\nA _workspace_ is a set of packages that share the same _Cargo.lock_ and output directory. Let‚Äôs make a project using a workspace‚Äîwe‚Äôll use trivial code so we can concentrate on the structure of the workspace. There are multiple ways to structure a workspace, so we‚Äôll just show one common way. We‚Äôll have a workspace containing a binary and two libraries. The binary, which will provide the main functionality, will depend on the two libraries. One library will provide an `add_one` function, and a second library an `add_two` function. These three crates will be part of the same workspace. We‚Äôll start by creating a new directory for the workspace:\n\n```console\n$ mkdir add\n$ cd add\n\n```\n\nNext, in the _add_ directory, we create the _Cargo.toml_ file that will configure the entire workspace. This file won‚Äôt have a `[package]` section. Instead, it will start with a `[workspace]` section that will allow us to add members to the workspace by specifying the path to the package with our binary crate; in this case, that path is _adder_:\n\nFilename: Cargo.toml\n\n```toml\n[workspace]\n\nmembers = [\n    \"adder\",\n]\n\n```\n\nNext, we‚Äôll create the `adder` binary crate by running `cargo new` within the _add_ directory:\n\n```console\n$ cargo new adder\n     Created binary (application) `adder` package\n\n```\n\nAt this point, we can build the workspace by running `cargo build`. The files in your _add_ directory should look like this:\n\n```text\n‚îú‚îÄ‚îÄ Cargo.lock\n‚îú‚îÄ‚îÄ Cargo.toml\n‚îú‚îÄ‚îÄ adder\n‚îÇ   ‚îú‚îÄ‚îÄ Cargo.toml\n‚îÇ   ‚îî‚îÄ‚îÄ src\n‚îÇ       ‚îî‚îÄ‚îÄ main.rs\n‚îî‚îÄ‚îÄ target\n\n```\n\nThe workspace has one _target_ directory at the top level that the compiled artifacts will be placed into; the `adder` package doesn‚Äôt have its own _target_ directory. Even if we were to run `cargo build` from inside the _adder_ directory, the compiled artifacts would still end up in _add/target_ rather than _add/adder/target_. Cargo structures the _target_ directory in a workspace like this because the crates in a workspace are meant to depend on each other. If each crate had its own _target_ directory, each crate would have to recompile each of the other crates in the workspace to place the artifacts in its own _target_ directory. By sharing one _target_ directory, the crates can avoid unnecessary rebuilding.\n\n### [Creating the Second Package in the Workspace](#creating-the-second-package-in-the-workspace)\n\nNext, let‚Äôs create another member package in the workspace and call it `add_one`. Change the top-level _Cargo.toml_ to specify the _add\\_one_ path in the `members` list:\n\nFilename: Cargo.toml\n\n```toml\n[workspace]\n\nmembers = [\n    \"adder\",\n    \"add_one\",\n]\n\n```\n\nThen generate a new library crate named `add_one`:\n\n```console\n$ cargo new add_one --lib\n     Created library `add_one` package\n\n```\n\nYour _add_ directory should now have these directories and files:\n\n```text\n‚îú‚îÄ‚îÄ Cargo.lock\n‚îú‚îÄ‚îÄ Cargo.toml\n‚îú‚îÄ‚îÄ add_one\n‚îÇ   ‚îú‚îÄ‚îÄ Cargo.toml\n‚îÇ   ‚îî‚îÄ‚îÄ src\n‚îÇ       ‚îî‚îÄ‚îÄ lib.rs\n‚îú‚îÄ‚îÄ adder\n‚îÇ   ‚îú‚îÄ‚îÄ Cargo.toml\n‚îÇ   ‚îî‚îÄ‚îÄ src\n‚îÇ       ‚îî‚îÄ‚îÄ main.rs\n‚îî‚îÄ‚îÄ target\n\n```\n\nIn the _add\\_one/src/lib.rs_ file, let‚Äôs add an `add_one` function:\n\nFilename: add\\_one/src/lib.rs\n\n```rust\npub fn add_one(x: i32) -> i32 {\n    x + 1\n}\n```\n\nNow we can have the `adder` package with our binary depend on the `add_one` package that has our library. First, we‚Äôll need to add a path dependency on `add_one` to _adder/Cargo.toml_.\n\nFilename: adder/Cargo.toml\n\n```toml\n[dependencies]\nadd_one = { path = \"../add_one\" }\n\n```\n\nCargo doesn‚Äôt assume that crates in a workspace will depend on each other, so we need to be explicit about the dependency relationships.\n\nNext, let‚Äôs use the `add_one` function (from the `add_one` crate) in the `adder` crate. Open the _adder/src/main.rs_ file and add a `use` line at the top to bring the new `add_one` library crate into scope. Then change the `main` function to call the `add_one` function, as in Listing 14-7.\n\nFilename: adder/src/main.rs\n\n```rust\nuse add_one;\n\nfn main() {\n    let num = 10;\n    println!(\"Hello, world! {num} plus one is {}!\", add_one::add_one(num));\n}\n```\n\nListing 14-7: Using the `add_one` library crate from the `adder` crate\n\nLet‚Äôs build the workspace by running `cargo build` in the top-level _add_ directory!\n\n```console\n$ cargo build\n   Compiling add_one v0.1.0 (file:///projects/add/add_one)\n   Compiling adder v0.1.0 (file:///projects/add/adder)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.68s\n\n```\n\nTo run the binary crate from the _add_ directory, we can specify which package in the workspace we want to run by using the `-p` argument and the package name with `cargo run`:\n\n```console\n$ cargo run -p adder\n    Finished dev [unoptimized + debuginfo] target(s) in 0.0s\n     Running `target/debug/adder`\nHello, world! 10 plus one is 11!\n\n```\n\nThis runs the code in _adder/src/main.rs_, which depends on the `add_one` crate.\n\n#### [Depending on an External Package in a Workspace](#depending-on-an-external-package-in-a-workspace)\n\nNotice that the workspace has only one _Cargo.lock_ file at the top level, rather than having a _Cargo.lock_ in each crate‚Äôs directory. This ensures that all crates are using the same version of all dependencies. If we add the `rand` package to the _adder/Cargo.toml_ and _add\\_one/Cargo.toml_ files, Cargo will resolve both of those to one version of `rand` and record that in the one _Cargo.lock_. Making all crates in the workspace use the same dependencies means the crates will always be compatible with each other. Let‚Äôs add the `rand` crate to the `[dependencies]` section in the _add\\_one/Cargo.toml_ file so we can use the `rand` crate in the `add_one` crate:\n\nFilename: add\\_one/Cargo.toml\n\n```toml\n[dependencies]\nrand = \"0.8.5\"\n\n```\n\nWe can now add `use rand;` to the _add\\_one/src/lib.rs_ file, and building the whole workspace by running `cargo build` in the _add_ directory will bring in and compile the `rand` crate. We will get one warning because we aren‚Äôt referring to the `rand` we brought into scope:\n\n```console\n$ cargo build\n    Updating crates.io index\n  Downloaded rand v0.8.5\n   --snip--\n   Compiling rand v0.8.5\n   Compiling add_one v0.1.0 (file:///projects/add/add_one)\nwarning: unused import: `rand`\n --> add_one/src/lib.rs:1:5\n  |\n1 | use rand;\n  |     ^^^^\n  |\n  = note: `#[warn(unused_imports)]` on by default\n\nwarning: `add_one` (lib) generated 1 warning\n   Compiling adder v0.1.0 (file:///projects/add/adder)\n    Finished dev [unoptimized + debuginfo] target(s) in 10.18s\n\n```\n\nThe top-level _Cargo.lock_ now contains information about the dependency of `add_one` on `rand`. However, even though `rand` is used somewhere in the workspace, we can‚Äôt use it in other crates in the workspace unless we add `rand` to their _Cargo.toml_ files as well. For example, if we add `use rand;` to the _adder/src/main.rs_ file for the `adder` package, we‚Äôll get an error:\n\n```console\n$ cargo build\n  --snip--\n   Compiling adder v0.1.0 (file:///projects/add/adder)\nerror[E0432]: unresolved import `rand`\n --> adder/src/main.rs:2:5\n  |\n2 | use rand;\n  |     ^^^^ no external crate `rand`\n\n```\n\nTo fix this, edit the _Cargo.toml_ file for the `adder` package and indicate that `rand` is a dependency for it as well. Building the `adder` package will add `rand` to the list of dependencies for `adder` in _Cargo.lock_, but no additional copies of `rand` will be downloaded. Cargo will ensure that every crate in every package in the workspace using the `rand` package will be using the same version as long as they specify compatible versions of `rand`, saving us space and ensuring that the crates in the workspace will be compatible with each other.\n\nIf crates in the workspace specify incompatible versions of the same dependency, Cargo will resolve each of them, but will still try to resolve as few versions as possible.\n\n#### [Adding a Test to a Workspace](#adding-a-test-to-a-workspace)\n\nFor another enhancement, let‚Äôs add a test of the `add_one::add_one` function within the `add_one` crate:\n\nFilename: add\\_one/src/lib.rs\n\n```rust\npub fn add_one(x: i32) -> i32 {\n    x + 1\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn it_works() {\n        assert_eq!(3, add_one(2));\n    }\n}\n```\n\nNow run `cargo test` in the top-level _add_ directory. Running `cargo test` in a workspace structured like this one will run the tests for all the crates in the workspace:\n\n```console\n$ cargo test\n   Compiling add_one v0.1.0 (file:///projects/add/add_one)\n   Compiling adder v0.1.0 (file:///projects/add/adder)\n    Finished test [unoptimized + debuginfo] target(s) in 0.27s\n     Running unittests src/lib.rs (target/debug/deps/add_one-f0253159197f7841)\n\nrunning 1 test\ntest tests::it_works ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n     Running unittests src/main.rs (target/debug/deps/adder-49979ff40686fa8e)\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n   Doc-tests add_one\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n```\n\nThe first section of the output shows that the `it_works` test in the `add_one` crate passed. The next section shows that zero tests were found in the `adder` crate, and then the last section shows zero documentation tests were found in the `add_one` crate.\n\nWe can also run tests for one particular crate in a workspace from the top-level directory by using the `-p` flag and specifying the name of the crate we want to test:\n\n```console\n$ cargo test -p add_one\n    Finished test [unoptimized + debuginfo] target(s) in 0.00s\n     Running unittests src/lib.rs (target/debug/deps/add_one-b3235fea9a156f74)\n\nrunning 1 test\ntest tests::it_works ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n   Doc-tests add_one\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n```\n\nThis output shows `cargo test` only ran the tests for the `add_one` crate and didn‚Äôt run the `adder` crate tests.\n\nIf you publish the crates in the workspace to [crates.io](https://crates.io/), each crate in the workspace will need to be published separately. Like `cargo test`, we can publish a particular crate in our workspace by using the `-p` flag and specifying the name of the crate we want to publish.\n\nFor additional practice, add an `add_two` crate to this workspace in a similar way as the `add_one` crate!\n\nAs your project grows, consider using a workspace: it‚Äôs easier to understand smaller, individual components than one big blob of code. Furthermore, keeping the crates in a workspace can make coordination between crates easier if they are often changed at the same time.\n\n## [Installing Binaries with `cargo install`](#installing-binaries-with-cargo-install)\n\nThe `cargo install` command allows you to install and use binary crates locally. This isn‚Äôt intended to replace system packages; it‚Äôs meant to be a convenient way for Rust developers to install tools that others have shared on [crates.io](https://crates.io/). Note that you can only install packages that have binary targets. A _binary target_ is the runnable program that is created if the crate has a _src/main.rs_ file or another file specified as a binary, as opposed to a library target that isn‚Äôt runnable on its own but is suitable for including within other programs. Usually, crates have information in the _README_ file about whether a crate is a library, has a binary target, or both.\n\nAll binaries installed with `cargo install` are stored in the installation root‚Äôs _bin_ folder. If you installed Rust using _rustup.rs_ and don‚Äôt have any custom configurations, this directory will be _$HOME/.cargo/bin_. Ensure that directory is in your `$PATH` to be able to run programs you‚Äôve installed with `cargo install`.\n\nFor example, in Chapter 12 we mentioned that there‚Äôs a Rust implementation of the `grep` tool called `ripgrep` for searching files. To install `ripgrep`, we can run the following:\n\n```console\n$ cargo install ripgrep\n    Updating crates.io index\n  Downloaded ripgrep v13.0.0\n  Downloaded 1 crate (243.3 KB) in 0.88s\n  Installing ripgrep v13.0.0\n--snip--\n   Compiling ripgrep v13.0.0\n    Finished release [optimized + debuginfo] target(s) in 3m 10s\n  Installing ~/.cargo/bin/rg\n   Installed package `ripgrep v13.0.0` (executable `rg`)\n\n```\n\nThe second-to-last line of the output shows the location and the name of the installed binary, which in the case of `ripgrep` is `rg`. As long as the installation directory is in your `$PATH`, as mentioned previously, you can then run `rg --help` and start using a faster, rustier tool for searching files!\n\n## [Extending Cargo with Custom Commands](#extending-cargo-with-custom-commands)\n\nCargo is designed so you can extend it with new subcommands without having to modify Cargo. If a binary in your `$PATH` is named `cargo-something`, you can run it as if it was a Cargo subcommand by running `cargo something`. Custom commands like this are also listed when you run `cargo --list`. Being able to use `cargo install` to install extensions and then run them just like the built-in Cargo tools is a super convenient benefit of Cargo‚Äôs design!\n\n## [Summary](#summary-13)\n\nSharing code with Cargo and [crates.io](https://crates.io/) is part of what makes the Rust ecosystem useful for many different tasks. Rust‚Äôs standard library is small and stable, but crates are easy to share, use, and improve on a timeline different from that of the language. Don‚Äôt be shy about sharing code that‚Äôs useful to you on [crates.io](https://crates.io/); it‚Äôs likely that it will be useful to someone else as well!\n\n## [Smart Pointers](#smart-pointers)\n\nA _pointer_ is a general concept for a variable that contains an address in memory. This address refers to, or ‚Äúpoints at,‚Äù some other data. The most common kind of pointer in Rust is a reference, which you learned about in Chapter 4. References are indicated by the `&` symbol and borrow the value they point to. They don‚Äôt have any special capabilities other than referring to data, and have no overhead.\n\n_Smart pointers_, on the other hand, are data structures that act like a pointer but also have additional metadata and capabilities. The concept of smart pointers isn‚Äôt unique to Rust: smart pointers originated in C++ and exist in other languages as well. Rust has a variety of smart pointers defined in the standard library that provide functionality beyond that provided by references. To explore the general concept, we‚Äôll look at a couple of different examples of smart pointers, including a _reference counting_ smart pointer type. This pointer enables you to allow data to have multiple owners by keeping track of the number of owners and, when no owners remain, cleaning up the data.\n\nRust, with its concept of ownership and borrowing, has an additional difference between references and smart pointers: while references only borrow data, in many cases, smart pointers _own_ the data they point to.\n\nThough we didn‚Äôt call them as such at the time, we‚Äôve already encountered a few smart pointers in this book, including `String` and `Vec<T>` in Chapter 8. Both these types count as smart pointers because they own some memory and allow you to manipulate it. They also have metadata and extra capabilities or guarantees. `String`, for example, stores its capacity as metadata and has the extra ability to ensure its data will always be valid UTF-8.\n\nSmart pointers are usually implemented using structs. Unlike an ordinary struct, smart pointers implement the `Deref` and `Drop` traits. The `Deref` trait allows an instance of the smart pointer struct to behave like a reference so you can write your code to work with either references or smart pointers. The `Drop` trait allows you to customize the code that‚Äôs run when an instance of the smart pointer goes out of scope. In this chapter, we‚Äôll discuss both traits and demonstrate why they‚Äôre important to smart pointers.\n\nGiven that the smart pointer pattern is a general design pattern used frequently in Rust, this chapter won‚Äôt cover every existing smart pointer. Many libraries have their own smart pointers, and you can even write your own. We‚Äôll cover the most common smart pointers in the standard library:\n\n-   `Box<T>` for allocating values on the heap\n-   `Rc<T>`, a reference counting type that enables multiple ownership\n-   `Ref<T>` and `RefMut<T>`, accessed through `RefCell<T>`, a type that enforces the borrowing rules at runtime instead of compile time\n\nIn addition, we‚Äôll cover the _interior mutability_ pattern where an immutable type exposes an API for mutating an interior value. We‚Äôll also discuss _reference cycles_: how they can leak memory and how to prevent them.\n\nLet‚Äôs dive in!\n\n## [Using `Box<T>` to Point to Data on the Heap](#using-boxt-to-point-to-data-on-the-heap)\n\nThe most straightforward smart pointer is a _box_, whose type is written `Box<T>`. Boxes allow you to store data on the heap rather than the stack. What remains on the stack is the pointer to the heap data. Refer to Chapter 4 to review the difference between the stack and the heap.\n\nBoxes don‚Äôt have performance overhead, other than storing their data on the heap instead of on the stack. But they don‚Äôt have many extra capabilities either. You‚Äôll use them most often in these situations:\n\n-   When you have a type whose size can‚Äôt be known at compile time and you want to use a value of that type in a context that requires an exact size\n-   When you have a large amount of data and you want to transfer ownership but ensure the data won‚Äôt be copied when you do so\n-   When you want to own a value and you care only that it‚Äôs a type that implements a particular trait rather than being of a specific type\n\nWe‚Äôll demonstrate the first situation in the [‚ÄúEnabling Recursive Types with Boxes‚Äù](about:blank/ch15-01-box.html#enabling-recursive-types-with-boxes) section. In the second case, transferring ownership of a large amount of data can take a long time because the data is copied around on the stack. To improve performance in this situation, we can store the large amount of data on the heap in a box. Then, only the small amount of pointer data is copied around on the stack, while the data it references stays in one place on the heap. The third case is known as a _trait object_, and Chapter 17 devotes an entire section, [‚ÄúUsing Trait Objects That Allow for Values of Different Types,‚Äù](about:blank/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types) just to that topic. So what you learn here you‚Äôll apply again in Chapter 17!\n\n### [Using a `Box<T>` to Store Data on the Heap](#using-a-boxt-to-store-data-on-the-heap)\n\nBefore we discuss the heap storage use case for `Box<T>`, we‚Äôll cover the syntax and how to interact with values stored within a `Box<T>`.\n\nListing 15-1 shows how to use a box to store an `i32` value on the heap:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let b = Box::new(5);\n    println!(\"b = {b}\");\n}\n```\n\nListing 15-1: Storing an `i32` value on the heap using a box\n\nWe define the variable `b` to have the value of a `Box` that points to the value `5`, which is allocated on the heap. This program will print `b = 5`; in this case, we can access the data in the box similar to how we would if this data were on the stack. Just like any owned value, when a box goes out of scope, as `b` does at the end of `main`, it will be deallocated. The deallocation happens both for the box (stored on the stack) and the data it points to (stored on the heap).\n\nPutting a single value on the heap isn‚Äôt very useful, so you won‚Äôt use boxes by themselves in this way very often. Having values like a single `i32` on the stack, where they‚Äôre stored by default, is more appropriate in the majority of situations. Let‚Äôs look at a case where boxes allow us to define types that we wouldn‚Äôt be allowed to if we didn‚Äôt have boxes.\n\n### [Enabling Recursive Types with Boxes](#enabling-recursive-types-with-boxes)\n\nA value of _recursive type_ can have another value of the same type as part of itself. Recursive types pose an issue because at compile time Rust needs to know how much space a type takes up. However, the nesting of values of recursive types could theoretically continue infinitely, so Rust can‚Äôt know how much space the value needs. Because boxes have a known size, we can enable recursive types by inserting a box in the recursive type definition.\n\nAs an example of a recursive type, let‚Äôs explore the _cons list_. This is a data type commonly found in functional programming languages. The cons list type we‚Äôll define is straightforward except for the recursion; therefore, the concepts in the example we‚Äôll work with will be useful any time you get into more complex situations involving recursive types.\n\n#### [More Information About the Cons List](#more-information-about-the-cons-list)\n\nA _cons list_ is a data structure that comes from the Lisp programming language and its dialects and is made up of nested pairs, and is the Lisp version of a linked list. Its name comes from the `cons` function (short for ‚Äúconstruct function‚Äù) in Lisp that constructs a new pair from its two arguments. By calling `cons` on a pair consisting of a value and another pair, we can construct cons lists made up of recursive pairs.\n\nFor example, here‚Äôs a pseudocode representation of a cons list containing the list 1, 2, 3 with each pair in parentheses:\n\n```text\n(1, (2, (3, Nil)))\n\n```\n\nEach item in a cons list contains two elements: the value of the current item and the next item. The last item in the list contains only a value called `Nil` without a next item. A cons list is produced by recursively calling the `cons` function. The canonical name to denote the base case of the recursion is `Nil`. Note that this is not the same as the ‚Äúnull‚Äù or ‚Äúnil‚Äù concept in Chapter 6, which is an invalid or absent value.\n\nThe cons list isn‚Äôt a commonly used data structure in Rust. Most of the time when you have a list of items in Rust, `Vec<T>` is a better choice to use. Other, more complex recursive data types _are_ useful in various situations, but by starting with the cons list in this chapter, we can explore how boxes let us define a recursive data type without much distraction.\n\nListing 15-2 contains an enum definition for a cons list. Note that this code won‚Äôt compile yet because the `List` type doesn‚Äôt have a known size, which we‚Äôll demonstrate.\n\nFilename: src/main.rs\n\n```rust\nenum List {\n    Cons(i32, List),\n    Nil,\n}\n\nfn main() {}\n```\n\nListing 15-2: The first attempt at defining an enum to represent a cons list data structure of `i32` values\n\nNote: We‚Äôre implementing a cons list that holds only `i32` values for the purposes of this example. We could have implemented it using generics, as we discussed in Chapter 10, to define a cons list type that could store values of any type.\n\nUsing the `List` type to store the list `1, 2, 3` would look like the code in Listing 15-3:\n\nFilename: src/main.rs\n\n```rust\nenum List {\n    Cons(i32, List),\n    Nil,\n}\n\nuse crate::List::{Cons, Nil};\n\nfn main() {\n    let list = Cons(1, Cons(2, Cons(3, Nil)));\n}\n```\n\nListing 15-3: Using the `List` enum to store the list `1, 2, 3`\n\nThe first `Cons` value holds `1` and another `List` value. This `List` value is another `Cons` value that holds `2` and another `List` value. This `List` value is one more `Cons` value that holds `3` and a `List` value, which is finally `Nil`, the non-recursive variant that signals the end of the list.\n\nIf we try to compile the code in Listing 15-3, we get the error shown in Listing 15-4:\n\n```console\n$ cargo run\n   Compiling cons-list v0.1.0 (file:///projects/cons-list)\nerror[E0072]: recursive type `List` has infinite size\n --> src/main.rs:1:1\n  |\n1 | enum List {\n  | ^^^^^^^^^\n2 |     Cons(i32, List),\n  |               ---- recursive without indirection\n  |\nhelp: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to break the cycle\n  |\n2 |     Cons(i32, Box<List>),\n  |               ++++    +\n\nerror[E0391]: cycle detected when computing when `List` needs drop\n --> src/main.rs:1:1\n  |\n1 | enum List {\n  | ^^^^^^^^^\n  |\n  = note: ...which immediately requires computing when `List` needs drop again\n  = note: cycle used when computing whether `List` needs drop\n  = note: see https://rustc-dev-guide.rust-lang.org/overview.html#queries and https://rustc-dev-guide.rust-lang.org/query.html for more information\n\nSome errors have detailed explanations: E0072, E0391.\nFor more information about an error, try `rustc --explain E0072`.\nerror: could not compile `cons-list` (bin \"cons-list\") due to 2 previous errors\n\n```\n\nListing 15-4: The error we get when attempting to define a recursive enum\n\nThe error shows this type ‚Äúhas infinite size.‚Äù The reason is that we‚Äôve defined `List` with a variant that is recursive: it holds another value of itself directly. As a result, Rust can‚Äôt figure out how much space it needs to store a `List` value. Let‚Äôs break down why we get this error. First, we‚Äôll look at how Rust decides how much space it needs to store a value of a non-recursive type.\n\n#### [Computing the Size of a Non-Recursive Type](#computing-the-size-of-a-non-recursive-type)\n\nRecall the `Message` enum we defined in Listing 6-2 when we discussed enum definitions in Chapter 6:\n\n```rust\nenum Message {\n    Quit,\n    Move { x: i32, y: i32 },\n    Write(String),\n    ChangeColor(i32, i32, i32),\n}\n\nfn main() {}\n```\n\nTo determine how much space to allocate for a `Message` value, Rust goes through each of the variants to see which variant needs the most space. Rust sees that `Message::Quit` doesn‚Äôt need any space, `Message::Move` needs enough space to store two `i32` values, and so forth. Because only one variant will be used, the most space a `Message` value will need is the space it would take to store the largest of its variants.\n\nContrast this with what happens when Rust tries to determine how much space a recursive type like the `List` enum in Listing 15-2 needs. The compiler starts by looking at the `Cons` variant, which holds a value of type `i32` and a value of type `List`. Therefore, `Cons` needs an amount of space equal to the size of an `i32` plus the size of a `List`. To figure out how much memory the `List` type needs, the compiler looks at the variants, starting with the `Cons` variant. The `Cons` variant holds a value of type `i32` and a value of type `List`, and this process continues infinitely, as shown in Figure 15-1.\n\n![An infinite Cons list](img/trpl15-01.svg)\n\nFigure 15-1: An infinite `List` consisting of infinite `Cons` variants\n\n#### [Using `Box<T>` to Get a Recursive Type with a Known Size](#using-boxt-to-get-a-recursive-type-with-a-known-size)\n\nBecause Rust can‚Äôt figure out how much space to allocate for recursively defined types, the compiler gives an error with this helpful suggestion:\n\n```text\nhelp: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to break the cycle\n  |\n2 |     Cons(i32, Box<List>),\n  |               ++++    +\n\n```\n\nIn this suggestion, ‚Äúindirection‚Äù means that instead of storing a value directly, we should change the data structure to store the value indirectly by storing a pointer to the value instead.\n\nBecause a `Box<T>` is a pointer, Rust always knows how much space a `Box<T>` needs: a pointer‚Äôs size doesn‚Äôt change based on the amount of data it‚Äôs pointing to. This means we can put a `Box<T>` inside the `Cons` variant instead of another `List` value directly. The `Box<T>` will point to the next `List` value that will be on the heap rather than inside the `Cons` variant. Conceptually, we still have a list, created with lists holding other lists, but this implementation is now more like placing the items next to one another rather than inside one another.\n\nWe can change the definition of the `List` enum in Listing 15-2 and the usage of the `List` in Listing 15-3 to the code in Listing 15-5, which will compile:\n\nFilename: src/main.rs\n\n```rust\nenum List {\n    Cons(i32, Box<List>),\n    Nil,\n}\n\nuse crate::List::{Cons, Nil};\n\nfn main() {\n    let list = Cons(1, Box::new(Cons(2, Box::new(Cons(3, Box::new(Nil))))));\n}\n```\n\nListing 15-5: Definition of `List` that uses `Box<T>` in order to have a known size\n\nThe `Cons` variant needs the size of an `i32` plus the space to store the box‚Äôs pointer data. The `Nil` variant stores no values, so it needs less space than the `Cons` variant. We now know that any `List` value will take up the size of an `i32` plus the size of a box‚Äôs pointer data. By using a box, we‚Äôve broken the infinite, recursive chain, so the compiler can figure out the size it needs to store a `List` value. Figure 15-2 shows what the `Cons` variant looks like now.\n\n![A finite Cons list](img/trpl15-02.svg)\n\nFigure 15-2: A `List` that is not infinitely sized because `Cons` holds a `Box`\n\nBoxes provide only the indirection and heap allocation; they don‚Äôt have any other special capabilities, like those we‚Äôll see with the other smart pointer types. They also don‚Äôt have the performance overhead that these special capabilities incur, so they can be useful in cases like the cons list where the indirection is the only feature we need. We‚Äôll look at more use cases for boxes in Chapter 17, too.\n\nThe `Box<T>` type is a smart pointer because it implements the `Deref` trait, which allows `Box<T>` values to be treated like references. When a `Box<T>` value goes out of scope, the heap data that the box is pointing to is cleaned up as well because of the `Drop` trait implementation. These two traits will be even more important to the functionality provided by the other smart pointer types we‚Äôll discuss in the rest of this chapter. Let‚Äôs explore these two traits in more detail.\n\n## [Treating Smart Pointers Like Regular References with the `Deref` Trait](#treating-smart-pointers-like-regular-references-with-the-deref-trait)\n\nImplementing the `Deref` trait allows you to customize the behavior of the _dereference operator_ `*` (not to be confused with the multiplication or glob operator). By implementing `Deref` in such a way that a smart pointer can be treated like a regular reference, you can write code that operates on references and use that code with smart pointers too.\n\nLet‚Äôs first look at how the dereference operator works with regular references. Then we‚Äôll try to define a custom type that behaves like `Box<T>`, and see why the dereference operator doesn‚Äôt work like a reference on our newly defined type. We‚Äôll explore how implementing the `Deref` trait makes it possible for smart pointers to work in ways similar to references. Then we‚Äôll look at Rust‚Äôs _deref coercion_ feature and how it lets us work with either references or smart pointers.\n\nNote: There‚Äôs one big difference between the `MyBox<T>` type we‚Äôre about to build and the real `Box<T>`: our version will not store its data on the heap. We are focusing this example on `Deref`, so where the data is actually stored is less important than the pointer-like behavior.\n\n### [Following the Pointer to the Value](#following-the-pointer-to-the-value)\n\nA regular reference is a type of pointer, and one way to think of a pointer is as an arrow to a value stored somewhere else. In Listing 15-6, we create a reference to an `i32` value and then use the dereference operator to follow the reference to the value:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let x = 5;\n    let y = &x;\n\n    assert_eq!(5, x);\n    assert_eq!(5, *y);\n}\n```\n\nListing 15-6: Using the dereference operator to follow a reference to an `i32` value\n\nThe variable `x` holds an `i32` value `5`. We set `y` equal to a reference to `x`. We can assert that `x` is equal to `5`. However, if we want to make an assertion about the value in `y`, we have to use `*y` to follow the reference to the value it‚Äôs pointing to (hence _dereference_) so the compiler can compare the actual value. Once we dereference `y`, we have access to the integer value `y` is pointing to that we can compare with `5`.\n\nIf we tried to write `assert_eq!(5, y);` instead, we would get this compilation error:\n\n```console\n$ cargo run\n   Compiling deref-example v0.1.0 (file:///projects/deref-example)\nerror[E0277]: can't compare `{integer}` with `&{integer}`\n --> src/main.rs:6:5\n  |\n6 |     assert_eq!(5, y);\n  |     ^^^^^^^^^^^^^^^^ no implementation for `{integer} == &{integer}`\n  |\n  = help: the trait `PartialEq<&{integer}>` is not implemented for `{integer}`\n  = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nFor more information about this error, try `rustc --explain E0277`.\nerror: could not compile `deref-example` (bin \"deref-example\") due to 1 previous error\n\n```\n\nComparing a number and a reference to a number isn‚Äôt allowed because they‚Äôre different types. We must use the dereference operator to follow the reference to the value it‚Äôs pointing to.\n\n### [Using `Box<T>` Like a Reference](#using-boxt-like-a-reference)\n\nWe can rewrite the code in Listing 15-6 to use a `Box<T>` instead of a reference; the dereference operator used on the `Box<T>` in Listing 15-7 functions in the same way as the dereference operator used on the reference in Listing 15-6:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let x = 5;\n    let y = Box::new(x);\n\n    assert_eq!(5, x);\n    assert_eq!(5, *y);\n}\n```\n\nListing 15-7: Using the dereference operator on a `Box<i32>`\n\nThe main difference between Listing 15-7 and Listing 15-6 is that here we set `y` to be an instance of a `Box<T>` pointing to a copied value of `x` rather than a reference pointing to the value of `x`. In the last assertion, we can use the dereference operator to follow the pointer of the `Box<T>` in the same way that we did when `y` was a reference. Next, we‚Äôll explore what is special about `Box<T>` that enables us to use the dereference operator by defining our own type.\n\n### [Defining Our Own Smart Pointer](#defining-our-own-smart-pointer)\n\nLet‚Äôs build a smart pointer similar to the `Box<T>` type provided by the standard library to experience how smart pointers behave differently from references by default. Then we‚Äôll look at how to add the ability to use the dereference operator.\n\nThe `Box<T>` type is ultimately defined as a tuple struct with one element, so Listing 15-8 defines a `MyBox<T>` type in the same way. We‚Äôll also define a `new` function to match the `new` function defined on `Box<T>`.\n\nFilename: src/main.rs\n\n```rust\nstruct MyBox<T>(T);\n\nimpl<T> MyBox<T> {\n    fn new(x: T) -> MyBox<T> {\n        MyBox(x)\n    }\n}\n\nfn main() {}\n```\n\nListing 15-8: Defining a `MyBox<T>` type\n\nWe define a struct named `MyBox` and declare a generic parameter `T`, because we want our type to hold values of any type. The `MyBox` type is a tuple struct with one element of type `T`. The `MyBox::new` function takes one parameter of type `T` and returns a `MyBox` instance that holds the value passed in.\n\nLet‚Äôs try adding the `main` function in Listing 15-7 to Listing 15-8 and changing it to use the `MyBox<T>` type we‚Äôve defined instead of `Box<T>`. The code in Listing 15-9 won‚Äôt compile because Rust doesn‚Äôt know how to dereference `MyBox`.\n\nFilename: src/main.rs\n\n```rust\nstruct MyBox<T>(T);\n\nimpl<T> MyBox<T> {\n    fn new(x: T) -> MyBox<T> {\n        MyBox(x)\n    }\n}\n\nfn main() {\n    let x = 5;\n    let y = MyBox::new(x);\n\n    assert_eq!(5, x);\n    assert_eq!(5, *y);\n}\n```\n\nListing 15-9: Attempting to use `MyBox<T>` in the same way we used references and `Box<T>`\n\nHere‚Äôs the resulting compilation error:\n\n```console\n$ cargo run\n   Compiling deref-example v0.1.0 (file:///projects/deref-example)\nerror[E0614]: type `MyBox<{integer}>` cannot be dereferenced\n  --> src/main.rs:14:19\n   |\n14 |     assert_eq!(5, *y);\n   |                   ^^\n\nFor more information about this error, try `rustc --explain E0614`.\nerror: could not compile `deref-example` (bin \"deref-example\") due to 1 previous error\n\n```\n\nOur `MyBox<T>` type can‚Äôt be dereferenced because we haven‚Äôt implemented that ability on our type. To enable dereferencing with the `*` operator, we implement the `Deref` trait.\n\n### [Treating a Type Like a Reference by Implementing the `Deref` Trait](#treating-a-type-like-a-reference-by-implementing-the-deref-trait)\n\nAs discussed in the [‚ÄúImplementing a Trait on a Type‚Äù](about:blank/ch10-02-traits.html#implementing-a-trait-on-a-type) section of Chapter 10, to implement a trait, we need to provide implementations for the trait‚Äôs required methods. The `Deref` trait, provided by the standard library, requires us to implement one method named `deref` that borrows `self` and returns a reference to the inner data. Listing 15-10 contains an implementation of `Deref` to add to the definition of `MyBox`:\n\nFilename: src/main.rs\n\n```rust\nuse std::ops::Deref;\n\nimpl<T> Deref for MyBox<T> {\n    type Target = T;\n\n    fn deref(&self) -> &Self::Target {\n        &self.0\n    }\n}\n\nstruct MyBox<T>(T);\n\nimpl<T> MyBox<T> {\n    fn new(x: T) -> MyBox<T> {\n        MyBox(x)\n    }\n}\n\nfn main() {\n    let x = 5;\n    let y = MyBox::new(x);\n\n    assert_eq!(5, x);\n    assert_eq!(5, *y);\n}\n```\n\nListing 15-10: Implementing `Deref` on `MyBox<T>`\n\nThe `type Target = T;` syntax defines an associated type for the `Deref` trait to use. Associated types are a slightly different way of declaring a generic parameter, but you don‚Äôt need to worry about them for now; we‚Äôll cover them in more detail in Chapter 19.\n\nWe fill in the body of the `deref` method with `&self.0` so `deref` returns a reference to the value we want to access with the `*` operator; recall from the [‚ÄúUsing Tuple Structs without Named Fields to Create Different Types‚Äù](about:blank/ch05-01-defining-structs.html#using-tuple-structs-without-named-fields-to-create-different-types) section of Chapter 5 that `.0` accesses the first value in a tuple struct. The `main` function in Listing 15-9 that calls `*` on the `MyBox<T>` value now compiles, and the assertions pass!\n\nWithout the `Deref` trait, the compiler can only dereference `&` references. The `deref` method gives the compiler the ability to take a value of any type that implements `Deref` and call the `deref` method to get a `&` reference that it knows how to dereference.\n\nWhen we entered `*y` in Listing 15-9, behind the scenes Rust actually ran this code:\n\n```rust\n*(y.deref())\n```\n\nRust substitutes the `*` operator with a call to the `deref` method and then a plain dereference so we don‚Äôt have to think about whether or not we need to call the `deref` method. This Rust feature lets us write code that functions identically whether we have a regular reference or a type that implements `Deref`.\n\nThe reason the `deref` method returns a reference to a value, and that the plain dereference outside the parentheses in `*(y.deref())` is still necessary, is to do with the ownership system. If the `deref` method returned the value directly instead of a reference to the value, the value would be moved out of `self`. We don‚Äôt want to take ownership of the inner value inside `MyBox<T>` in this case or in most cases where we use the dereference operator.\n\nNote that the `*` operator is replaced with a call to the `deref` method and then a call to the `*` operator just once, each time we use a `*` in our code. Because the substitution of the `*` operator does not recurse infinitely, we end up with data of type `i32`, which matches the `5` in `assert_eq!` in Listing 15-9.\n\n### [Implicit Deref Coercions with Functions and Methods](#implicit-deref-coercions-with-functions-and-methods)\n\n_Deref coercion_ converts a reference to a type that implements the `Deref` trait into a reference to another type. For example, deref coercion can convert `&String` to `&str` because `String` implements the `Deref` trait such that it returns `&str`. Deref coercion is a convenience Rust performs on arguments to functions and methods, and works only on types that implement the `Deref` trait. It happens automatically when we pass a reference to a particular type‚Äôs value as an argument to a function or method that doesn‚Äôt match the parameter type in the function or method definition. A sequence of calls to the `deref` method converts the type we provided into the type the parameter needs.\n\nDeref coercion was added to Rust so that programmers writing function and method calls don‚Äôt need to add as many explicit references and dereferences with `&` and `*`. The deref coercion feature also lets us write more code that can work for either references or smart pointers.\n\nTo see deref coercion in action, let‚Äôs use the `MyBox<T>` type we defined in Listing 15-8 as well as the implementation of `Deref` that we added in Listing 15-10. Listing 15-11 shows the definition of a function that has a string slice parameter:\n\nFilename: src/main.rs\n\n```rust\nfn hello(name: &str) {\n    println!(\"Hello, {name}!\");\n}\n\nfn main() {}\n```\n\nListing 15-11: A `hello` function that has the parameter `name` of type `&str`\n\nWe can call the `hello` function with a string slice as an argument, such as `hello(\"Rust\");` for example. Deref coercion makes it possible to call `hello` with a reference to a value of type `MyBox<String>`, as shown in Listing 15-12:\n\nFilename: src/main.rs\n\n```rust\nuse std::ops::Deref;\n\nimpl<T> Deref for MyBox<T> {\n    type Target = T;\n\n    fn deref(&self) -> &T {\n        &self.0\n    }\n}\n\nstruct MyBox<T>(T);\n\nimpl<T> MyBox<T> {\n    fn new(x: T) -> MyBox<T> {\n        MyBox(x)\n    }\n}\n\nfn hello(name: &str) {\n    println!(\"Hello, {name}!\");\n}\n\nfn main() {\n    let m = MyBox::new(String::from(\"Rust\"));\n    hello(&m);\n}\n```\n\nListing 15-12: Calling `hello` with a reference to a `MyBox<String>` value, which works because of deref coercion\n\nHere we‚Äôre calling the `hello` function with the argument `&m`, which is a reference to a `MyBox<String>` value. Because we implemented the `Deref` trait on `MyBox<T>` in Listing 15-10, Rust can turn `&MyBox<String>` into `&String` by calling `deref`. The standard library provides an implementation of `Deref` on `String` that returns a string slice, and this is in the API documentation for `Deref`. Rust calls `deref` again to turn the `&String` into `&str`, which matches the `hello` function‚Äôs definition.\n\nIf Rust didn‚Äôt implement deref coercion, we would have to write the code in Listing 15-13 instead of the code in Listing 15-12 to call `hello` with a value of type `&MyBox<String>`.\n\nFilename: src/main.rs\n\n```rust\nuse std::ops::Deref;\n\nimpl<T> Deref for MyBox<T> {\n    type Target = T;\n\n    fn deref(&self) -> &T {\n        &self.0\n    }\n}\n\nstruct MyBox<T>(T);\n\nimpl<T> MyBox<T> {\n    fn new(x: T) -> MyBox<T> {\n        MyBox(x)\n    }\n}\n\nfn hello(name: &str) {\n    println!(\"Hello, {name}!\");\n}\n\nfn main() {\n    let m = MyBox::new(String::from(\"Rust\"));\n    hello(&(*m)[..]);\n}\n```\n\nListing 15-13: The code we would have to write if Rust didn‚Äôt have deref coercion\n\nThe `(*m)` dereferences the `MyBox<String>` into a `String`. Then the `&` and `[..]` take a string slice of the `String` that is equal to the whole string to match the signature of `hello`. This code without deref coercions is harder to read, write, and understand with all of these symbols involved. Deref coercion allows Rust to handle these conversions for us automatically.\n\nWhen the `Deref` trait is defined for the types involved, Rust will analyze the types and use `Deref::deref` as many times as necessary to get a reference to match the parameter‚Äôs type. The number of times that `Deref::deref` needs to be inserted is resolved at compile time, so there is no runtime penalty for taking advantage of deref coercion!\n\n### [How Deref Coercion Interacts with Mutability](#how-deref-coercion-interacts-with-mutability)\n\nSimilar to how you use the `Deref` trait to override the `*` operator on immutable references, you can use the `DerefMut` trait to override the `*` operator on mutable references.\n\nRust does deref coercion when it finds types and trait implementations in three cases:\n\n-   From `&T` to `&U` when `T: Deref<Target=U>`\n-   From `&mut T` to `&mut U` when `T: DerefMut<Target=U>`\n-   From `&mut T` to `&U` when `T: Deref<Target=U>`\n\nThe first two cases are the same as each other except that the second implements mutability. The first case states that if you have a `&T`, and `T` implements `Deref` to some type `U`, you can get a `&U` transparently. The second case states that the same deref coercion happens for mutable references.\n\nThe third case is trickier: Rust will also coerce a mutable reference to an immutable one. But the reverse is _not_ possible: immutable references will never coerce to mutable references. Because of the borrowing rules, if you have a mutable reference, that mutable reference must be the only reference to that data (otherwise, the program wouldn‚Äôt compile). Converting one mutable reference to one immutable reference will never break the borrowing rules. Converting an immutable reference to a mutable reference would require that the initial immutable reference is the only immutable reference to that data, but the borrowing rules don‚Äôt guarantee that. Therefore, Rust can‚Äôt make the assumption that converting an immutable reference to a mutable reference is possible.\n\n## [Running Code on Cleanup with the `Drop` Trait](#running-code-on-cleanup-with-the-drop-trait)\n\nThe second trait important to the smart pointer pattern is `Drop`, which lets you customize what happens when a value is about to go out of scope. You can provide an implementation for the `Drop` trait on any type, and that code can be used to release resources like files or network connections.\n\nWe‚Äôre introducing `Drop` in the context of smart pointers because the functionality of the `Drop` trait is almost always used when implementing a smart pointer. For example, when a `Box<T>` is dropped it will deallocate the space on the heap that the box points to.\n\nIn some languages, for some types, the programmer must call code to free memory or resources every time they finish using an instance of those types. Examples include file handles, sockets, or locks. If they forget, the system might become overloaded and crash. In Rust, you can specify that a particular bit of code be run whenever a value goes out of scope, and the compiler will insert this code automatically. As a result, you don‚Äôt need to be careful about placing cleanup code everywhere in a program that an instance of a particular type is finished with‚Äîyou still won‚Äôt leak resources!\n\nYou specify the code to run when a value goes out of scope by implementing the `Drop` trait. The `Drop` trait requires you to implement one method named `drop` that takes a mutable reference to `self`. To see when Rust calls `drop`, let‚Äôs implement `drop` with `println!` statements for now.\n\nListing 15-14 shows a `CustomSmartPointer` struct whose only custom functionality is that it will print `Dropping CustomSmartPointer!` when the instance goes out of scope, to show when Rust runs the `drop` function.\n\nFilename: src/main.rs\n\n```rust\nstruct CustomSmartPointer {\n    data: String,\n}\n\nimpl Drop for CustomSmartPointer {\n    fn drop(&mut self) {\n        println!(\"Dropping CustomSmartPointer with data `{}`!\", self.data);\n    }\n}\n\nfn main() {\n    let c = CustomSmartPointer {\n        data: String::from(\"my stuff\"),\n    };\n    let d = CustomSmartPointer {\n        data: String::from(\"other stuff\"),\n    };\n    println!(\"CustomSmartPointers created.\");\n}\n```\n\nListing 15-14: A `CustomSmartPointer` struct that implements the `Drop` trait where we would put our cleanup code\n\nThe `Drop` trait is included in the prelude, so we don‚Äôt need to bring it into scope. We implement the `Drop` trait on `CustomSmartPointer` and provide an implementation for the `drop` method that calls `println!`. The body of the `drop` function is where you would place any logic that you wanted to run when an instance of your type goes out of scope. We‚Äôre printing some text here to demonstrate visually when Rust will call `drop`.\n\nIn `main`, we create two instances of `CustomSmartPointer` and then print `CustomSmartPointers created`. At the end of `main`, our instances of `CustomSmartPointer` will go out of scope, and Rust will call the code we put in the `drop` method, printing our final message. Note that we didn‚Äôt need to call the `drop` method explicitly.\n\nWhen we run this program, we‚Äôll see the following output:\n\n```console\n$ cargo run\n   Compiling drop-example v0.1.0 (file:///projects/drop-example)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.60s\n     Running `target/debug/drop-example`\nCustomSmartPointers created.\nDropping CustomSmartPointer with data `other stuff`!\nDropping CustomSmartPointer with data `my stuff`!\n\n```\n\nRust automatically called `drop` for us when our instances went out of scope, calling the code we specified. Variables are dropped in the reverse order of their creation, so `d` was dropped before `c`. This example‚Äôs purpose is to give you a visual guide to how the `drop` method works; usually you would specify the cleanup code that your type needs to run rather than a print message.\n\n### [Dropping a Value Early with `std::mem::drop`](#dropping-a-value-early-with-stdmemdrop)\n\nUnfortunately, it‚Äôs not straightforward to disable the automatic `drop` functionality. Disabling `drop` isn‚Äôt usually necessary; the whole point of the `Drop` trait is that it‚Äôs taken care of automatically. Occasionally, however, you might want to clean up a value early. One example is when using smart pointers that manage locks: you might want to force the `drop` method that releases the lock so that other code in the same scope can acquire the lock. Rust doesn‚Äôt let you call the `Drop` trait‚Äôs `drop` method manually; instead you have to call the `std::mem::drop` function provided by the standard library if you want to force a value to be dropped before the end of its scope.\n\nIf we try to call the `Drop` trait‚Äôs `drop` method manually by modifying the `main` function from Listing 15-14, as shown in Listing 15-15, we‚Äôll get a compiler error:\n\nFilename: src/main.rs\n\n```rust\nstruct CustomSmartPointer {\n    data: String,\n}\n\nimpl Drop for CustomSmartPointer {\n    fn drop(&mut self) {\n        println!(\"Dropping CustomSmartPointer with data `{}`!\", self.data);\n    }\n}\n\nfn main() {\n    let c = CustomSmartPointer {\n        data: String::from(\"some data\"),\n    };\n    println!(\"CustomSmartPointer created.\");\n    c.drop();\n    println!(\"CustomSmartPointer dropped before the end of main.\");\n}\n```\n\nListing 15-15: Attempting to call the `drop` method from the `Drop` trait manually to clean up early\n\nWhen we try to compile this code, we‚Äôll get this error:\n\n```console\n$ cargo run\n   Compiling drop-example v0.1.0 (file:///projects/drop-example)\nerror[E0040]: explicit use of destructor method\n  --> src/main.rs:16:7\n   |\n16 |     c.drop();\n   |       ^^^^ explicit destructor calls not allowed\n   |\nhelp: consider using `drop` function\n   |\n16 |     drop(c);\n   |     +++++ ~\n\nFor more information about this error, try `rustc --explain E0040`.\nerror: could not compile `drop-example` (bin \"drop-example\") due to 1 previous error\n\n```\n\nThis error message states that we‚Äôre not allowed to explicitly call `drop`. The error message uses the term _destructor_, which is the general programming term for a function that cleans up an instance. A _destructor_ is analogous to a _constructor_, which creates an instance. The `drop` function in Rust is one particular destructor.\n\nRust doesn‚Äôt let us call `drop` explicitly because Rust would still automatically call `drop` on the value at the end of `main`. This would cause a _double free_ error because Rust would be trying to clean up the same value twice.\n\nWe can‚Äôt disable the automatic insertion of `drop` when a value goes out of scope, and we can‚Äôt call the `drop` method explicitly. So, if we need to force a value to be cleaned up early, we use the `std::mem::drop` function.\n\nThe `std::mem::drop` function is different from the `drop` method in the `Drop` trait. We call it by passing as an argument the value we want to force drop. The function is in the prelude, so we can modify `main` in Listing 15-15 to call the `drop` function, as shown in Listing 15-16:\n\nFilename: src/main.rs\n\n```rust\nstruct CustomSmartPointer {\n    data: String,\n}\n\nimpl Drop for CustomSmartPointer {\n    fn drop(&mut self) {\n        println!(\"Dropping CustomSmartPointer with data `{}`!\", self.data);\n    }\n}\n\nfn main() {\n    let c = CustomSmartPointer {\n        data: String::from(\"some data\"),\n    };\n    println!(\"CustomSmartPointer created.\");\n    drop(c);\n    println!(\"CustomSmartPointer dropped before the end of main.\");\n}\n```\n\nListing 15-16: Calling `std::mem::drop` to explicitly drop a value before it goes out of scope\n\nRunning this code will print the following:\n\n```console\n$ cargo run\n   Compiling drop-example v0.1.0 (file:///projects/drop-example)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.73s\n     Running `target/debug/drop-example`\nCustomSmartPointer created.\nDropping CustomSmartPointer with data `some data`!\nCustomSmartPointer dropped before the end of main.\n\n```\n\nThe text ``Dropping CustomSmartPointer with data `some data`!`` is printed between the `CustomSmartPointer created.` and `CustomSmartPointer dropped before the end of main.` text, showing that the `drop` method code is called to drop `c` at that point.\n\nYou can use code specified in a `Drop` trait implementation in many ways to make cleanup convenient and safe: for instance, you could use it to create your own memory allocator! With the `Drop` trait and Rust‚Äôs ownership system, you don‚Äôt have to remember to clean up because Rust does it automatically.\n\nYou also don‚Äôt have to worry about problems resulting from accidentally cleaning up values still in use: the ownership system that makes sure references are always valid also ensures that `drop` gets called only once when the value is no longer being used.\n\nNow that we‚Äôve examined `Box<T>` and some of the characteristics of smart pointers, let‚Äôs look at a few other smart pointers defined in the standard library.\n\n## [`Rc<T>`, the Reference Counted Smart Pointer](#rct-the-reference-counted-smart-pointer)\n\nIn the majority of cases, ownership is clear: you know exactly which variable owns a given value. However, there are cases when a single value might have multiple owners. For example, in graph data structures, multiple edges might point to the same node, and that node is conceptually owned by all of the edges that point to it. A node shouldn‚Äôt be cleaned up unless it doesn‚Äôt have any edges pointing to it and so has no owners.\n\nYou have to enable multiple ownership explicitly by using the Rust type `Rc<T>`, which is an abbreviation for _reference counting_. The `Rc<T>` type keeps track of the number of references to a value to determine whether or not the value is still in use. If there are zero references to a value, the value can be cleaned up without any references becoming invalid.\n\nImagine `Rc<T>` as a TV in a family room. When one person enters to watch TV, they turn it on. Others can come into the room and watch the TV. When the last person leaves the room, they turn off the TV because it‚Äôs no longer being used. If someone turns off the TV while others are still watching it, there would be uproar from the remaining TV watchers!\n\nWe use the `Rc<T>` type when we want to allocate some data on the heap for multiple parts of our program to read and we can‚Äôt determine at compile time which part will finish using the data last. If we knew which part would finish last, we could just make that part the data‚Äôs owner, and the normal ownership rules enforced at compile time would take effect.\n\nNote that `Rc<T>` is only for use in single-threaded scenarios. When we discuss concurrency in Chapter 16, we‚Äôll cover how to do reference counting in multithreaded programs.\n\nLet‚Äôs return to our cons list example in Listing 15-5. Recall that we defined it using `Box<T>`. This time, we‚Äôll create two lists that both share ownership of a third list. Conceptually, this looks similar to Figure 15-3:\n\n![Two lists that share ownership of a third list](img/trpl15-03.svg)\n\nFigure 15-3: Two lists, `b` and `c`, sharing ownership of a third list, `a`\n\nWe‚Äôll create list `a` that contains 5 and then 10. Then we‚Äôll make two more lists: `b` that starts with 3 and `c` that starts with 4. Both `b` and `c` lists will then continue on to the first `a` list containing 5 and 10. In other words, both lists will share the first list containing 5 and 10.\n\nTrying to implement this scenario using our definition of `List` with `Box<T>` won‚Äôt work, as shown in Listing 15-17:\n\nFilename: src/main.rs\n\n```rust\nenum List {\n    Cons(i32, Box<List>),\n    Nil,\n}\n\nuse crate::List::{Cons, Nil};\n\nfn main() {\n    let a = Cons(5, Box::new(Cons(10, Box::new(Nil))));\n    let b = Cons(3, Box::new(a));\n    let c = Cons(4, Box::new(a));\n}\n```\n\nListing 15-17: Demonstrating we‚Äôre not allowed to have two lists using `Box<T>` that try to share ownership of a third list\n\nWhen we compile this code, we get this error:\n\n```console\n$ cargo run\n   Compiling cons-list v0.1.0 (file:///projects/cons-list)\nerror[E0382]: use of moved value: `a`\n  --> src/main.rs:11:30\n   |\n9  |     let a = Cons(5, Box::new(Cons(10, Box::new(Nil))));\n   |         - move occurs because `a` has type `List`, which does not implement the `Copy` trait\n10 |     let b = Cons(3, Box::new(a));\n   |                              - value moved here\n11 |     let c = Cons(4, Box::new(a));\n   |                              ^ value used here after move\n\nFor more information about this error, try `rustc --explain E0382`.\nerror: could not compile `cons-list` (bin \"cons-list\") due to 1 previous error\n\n```\n\nThe `Cons` variants own the data they hold, so when we create the `b` list, `a` is moved into `b` and `b` owns `a`. Then, when we try to use `a` again when creating `c`, we‚Äôre not allowed to because `a` has been moved.\n\nWe could change the definition of `Cons` to hold references instead, but then we would have to specify lifetime parameters. By specifying lifetime parameters, we would be specifying that every element in the list will live at least as long as the entire list. This is the case for the elements and lists in Listing 15-17, but not in every scenario.\n\nInstead, we‚Äôll change our definition of `List` to use `Rc<T>` in place of `Box<T>`, as shown in Listing 15-18. Each `Cons` variant will now hold a value and an `Rc<T>` pointing to a `List`. When we create `b`, instead of taking ownership of `a`, we‚Äôll clone the `Rc<List>` that `a` is holding, thereby increasing the number of references from one to two and letting `a` and `b` share ownership of the data in that `Rc<List>`. We‚Äôll also clone `a` when creating `c`, increasing the number of references from two to three. Every time we call `Rc::clone`, the reference count to the data within the `Rc<List>` will increase, and the data won‚Äôt be cleaned up unless there are zero references to it.\n\nFilename: src/main.rs\n\n```rust\nenum List {\n    Cons(i32, Rc<List>),\n    Nil,\n}\n\nuse crate::List::{Cons, Nil};\nuse std::rc::Rc;\n\nfn main() {\n    let a = Rc::new(Cons(5, Rc::new(Cons(10, Rc::new(Nil)))));\n    let b = Cons(3, Rc::clone(&a));\n    let c = Cons(4, Rc::clone(&a));\n}\n```\n\nListing 15-18: A definition of `List` that uses `Rc<T>`\n\nWe need to add a `use` statement to bring `Rc<T>` into scope because it‚Äôs not in the prelude. In `main`, we create the list holding 5 and 10 and store it in a new `Rc<List>` in `a`. Then when we create `b` and `c`, we call the `Rc::clone` function and pass a reference to the `Rc<List>` in `a` as an argument.\n\nWe could have called `a.clone()` rather than `Rc::clone(&a)`, but Rust‚Äôs convention is to use `Rc::clone` in this case. The implementation of `Rc::clone` doesn‚Äôt make a deep copy of all the data like most types‚Äô implementations of `clone` do. The call to `Rc::clone` only increments the reference count, which doesn‚Äôt take much time. Deep copies of data can take a lot of time. By using `Rc::clone` for reference counting, we can visually distinguish between the deep-copy kinds of clones and the kinds of clones that increase the reference count. When looking for performance problems in the code, we only need to consider the deep-copy clones and can disregard calls to `Rc::clone`.\n\n### [Cloning an `Rc<T>` Increases the Reference Count](#cloning-an-rct-increases-the-reference-count)\n\nLet‚Äôs change our working example in Listing 15-18 so we can see the reference counts changing as we create and drop references to the `Rc<List>` in `a`.\n\nIn Listing 15-19, we‚Äôll change `main` so it has an inner scope around list `c`; then we can see how the reference count changes when `c` goes out of scope.\n\nFilename: src/main.rs\n\n```rust\nenum List {\n    Cons(i32, Rc<List>),\n    Nil,\n}\n\nuse crate::List::{Cons, Nil};\nuse std::rc::Rc;\n\nfn main() {\n    let a = Rc::new(Cons(5, Rc::new(Cons(10, Rc::new(Nil)))));\n    println!(\"count after creating a = {}\", Rc::strong_count(&a));\n    let b = Cons(3, Rc::clone(&a));\n    println!(\"count after creating b = {}\", Rc::strong_count(&a));\n    {\n        let c = Cons(4, Rc::clone(&a));\n        println!(\"count after creating c = {}\", Rc::strong_count(&a));\n    }\n    println!(\"count after c goes out of scope = {}\", Rc::strong_count(&a));\n}\n```\n\nListing 15-19: Printing the reference count\n\nAt each point in the program where the reference count changes, we print the reference count, which we get by calling the `Rc::strong_count` function. This function is named `strong_count` rather than `count` because the `Rc<T>` type also has a `weak_count`; we‚Äôll see what `weak_count` is used for in the [‚ÄúPreventing Reference Cycles: Turning an `Rc<T>` into a `Weak<T>`‚Äù](about:blank/ch15-06-reference-cycles.html#preventing-reference-cycles-turning-an-rct-into-a-weakt) section.\n\nThis code prints the following:\n\n```console\n$ cargo run\n   Compiling cons-list v0.1.0 (file:///projects/cons-list)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.45s\n     Running `target/debug/cons-list`\ncount after creating a = 1\ncount after creating b = 2\ncount after creating c = 3\ncount after c goes out of scope = 2\n\n```\n\nWe can see that the `Rc<List>` in `a` has an initial reference count of 1; then each time we call `clone`, the count goes up by 1. When `c` goes out of scope, the count goes down by 1. We don‚Äôt have to call a function to decrease the reference count like we have to call `Rc::clone` to increase the reference count: the implementation of the `Drop` trait decreases the reference count automatically when an `Rc<T>` value goes out of scope.\n\nWhat we can‚Äôt see in this example is that when `b` and then `a` go out of scope at the end of `main`, the count is then 0, and the `Rc<List>` is cleaned up completely. Using `Rc<T>` allows a single value to have multiple owners, and the count ensures that the value remains valid as long as any of the owners still exist.\n\nVia immutable references, `Rc<T>` allows you to share data between multiple parts of your program for reading only. If `Rc<T>` allowed you to have multiple mutable references too, you might violate one of the borrowing rules discussed in Chapter 4: multiple mutable borrows to the same place can cause data races and inconsistencies. But being able to mutate data is very useful! In the next section, we‚Äôll discuss the interior mutability pattern and the `RefCell<T>` type that you can use in conjunction with an `Rc<T>` to work with this immutability restriction.\n\n## [`RefCell<T>` and the Interior Mutability Pattern](#refcellt-and-the-interior-mutability-pattern)\n\n_Interior mutability_ is a design pattern in Rust that allows you to mutate data even when there are immutable references to that data; normally, this action is disallowed by the borrowing rules. To mutate data, the pattern uses `unsafe` code inside a data structure to bend Rust‚Äôs usual rules that govern mutation and borrowing. Unsafe code indicates to the compiler that we‚Äôre checking the rules manually instead of relying on the compiler to check them for us; we will discuss unsafe code more in Chapter 19.\n\nWe can use types that use the interior mutability pattern only when we can ensure that the borrowing rules will be followed at runtime, even though the compiler can‚Äôt guarantee that. The `unsafe` code involved is then wrapped in a safe API, and the outer type is still immutable.\n\nLet‚Äôs explore this concept by looking at the `RefCell<T>` type that follows the interior mutability pattern.\n\n### [Enforcing Borrowing Rules at Runtime with `RefCell<T>`](#enforcing-borrowing-rules-at-runtime-with-refcellt)\n\nUnlike `Rc<T>`, the `RefCell<T>` type represents single ownership over the data it holds. So, what makes `RefCell<T>` different from a type like `Box<T>`? Recall the borrowing rules you learned in Chapter 4:\n\n-   At any given time, you can have _either_ (but not both) one mutable reference or any number of immutable references.\n-   References must always be valid.\n\nWith references and `Box<T>`, the borrowing rules‚Äô invariants are enforced at compile time. With `RefCell<T>`, these invariants are enforced _at runtime_. With references, if you break these rules, you‚Äôll get a compiler error. With `RefCell<T>`, if you break these rules, your program will panic and exit.\n\nThe advantages of checking the borrowing rules at compile time are that errors will be caught sooner in the development process, and there is no impact on runtime performance because all the analysis is completed beforehand. For those reasons, checking the borrowing rules at compile time is the best choice in the majority of cases, which is why this is Rust‚Äôs default.\n\nThe advantage of checking the borrowing rules at runtime instead is that certain memory-safe scenarios are then allowed, where they would‚Äôve been disallowed by the compile-time checks. Static analysis, like the Rust compiler, is inherently conservative. Some properties of code are impossible to detect by analyzing the code: the most famous example is the Halting Problem, which is beyond the scope of this book but is an interesting topic to research.\n\nBecause some analysis is impossible, if the Rust compiler can‚Äôt be sure the code complies with the ownership rules, it might reject a correct program; in this way, it‚Äôs conservative. If Rust accepted an incorrect program, users wouldn‚Äôt be able to trust in the guarantees Rust makes. However, if Rust rejects a correct program, the programmer will be inconvenienced, but nothing catastrophic can occur. The `RefCell<T>` type is useful when you‚Äôre sure your code follows the borrowing rules but the compiler is unable to understand and guarantee that.\n\nSimilar to `Rc<T>`, `RefCell<T>` is only for use in single-threaded scenarios and will give you a compile-time error if you try using it in a multithreaded context. We‚Äôll talk about how to get the functionality of `RefCell<T>` in a multithreaded program in Chapter 16.\n\nHere is a recap of the reasons to choose `Box<T>`, `Rc<T>`, or `RefCell<T>`:\n\n-   `Rc<T>` enables multiple owners of the same data; `Box<T>` and `RefCell<T>` have single owners.\n-   `Box<T>` allows immutable or mutable borrows checked at compile time; `Rc<T>` allows only immutable borrows checked at compile time; `RefCell<T>` allows immutable or mutable borrows checked at runtime.\n-   Because `RefCell<T>` allows mutable borrows checked at runtime, you can mutate the value inside the `RefCell<T>` even when the `RefCell<T>` is immutable.\n\nMutating the value inside an immutable value is the _interior mutability_ pattern. Let‚Äôs look at a situation in which interior mutability is useful and examine how it‚Äôs possible.\n\n### [Interior Mutability: A Mutable Borrow to an Immutable Value](#interior-mutability-a-mutable-borrow-to-an-immutable-value)\n\nA consequence of the borrowing rules is that when you have an immutable value, you can‚Äôt borrow it mutably. For example, this code won‚Äôt compile:\n\n```rust\nfn main() {\n    let x = 5;\n    let y = &mut x;\n}\n```\n\nIf you tried to compile this code, you‚Äôd get the following error:\n\n```console\n$ cargo run\n   Compiling borrowing v0.1.0 (file:///projects/borrowing)\nerror[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n --> src/main.rs:3:13\n  |\n3 |     let y = &mut x;\n  |             ^^^^^^ cannot borrow as mutable\n  |\nhelp: consider changing this to be mutable\n  |\n2 |     let mut x = 5;\n  |         +++\n\nFor more information about this error, try `rustc --explain E0596`.\nerror: could not compile `borrowing` (bin \"borrowing\") due to 1 previous error\n\n```\n\nHowever, there are situations in which it would be useful for a value to mutate itself in its methods but appear immutable to other code. Code outside the value‚Äôs methods would not be able to mutate the value. Using `RefCell<T>` is one way to get the ability to have interior mutability, but `RefCell<T>` doesn‚Äôt get around the borrowing rules completely: the borrow checker in the compiler allows this interior mutability, and the borrowing rules are checked at runtime instead. If you violate the rules, you‚Äôll get a `panic!` instead of a compiler error.\n\nLet‚Äôs work through a practical example where we can use `RefCell<T>` to mutate an immutable value and see why that is useful.\n\n#### [A Use Case for Interior Mutability: Mock Objects](#a-use-case-for-interior-mutability-mock-objects)\n\nSometimes during testing a programmer will use a type in place of another type, in order to observe particular behavior and assert it‚Äôs implemented correctly. This placeholder type is called a _test double_. Think of it in the sense of a ‚Äústunt double‚Äù in filmmaking, where a person steps in and substitutes for an actor to do a particular tricky scene. Test doubles stand in for other types when we‚Äôre running tests. _Mock objects_ are specific types of test doubles that record what happens during a test so you can assert that the correct actions took place.\n\nRust doesn‚Äôt have objects in the same sense as other languages have objects, and Rust doesn‚Äôt have mock object functionality built into the standard library as some other languages do. However, you can definitely create a struct that will serve the same purposes as a mock object.\n\nHere‚Äôs the scenario we‚Äôll test: we‚Äôll create a library that tracks a value against a maximum value and sends messages based on how close to the maximum value the current value is. This library could be used to keep track of a user‚Äôs quota for the number of API calls they‚Äôre allowed to make, for example.\n\nOur library will only provide the functionality of tracking how close to the maximum a value is and what the messages should be at what times. Applications that use our library will be expected to provide the mechanism for sending the messages: the application could put a message in the application, send an email, send a text message, or something else. The library doesn‚Äôt need to know that detail. All it needs is something that implements a trait we‚Äôll provide called `Messenger`. Listing 15-20 shows the library code:\n\nFilename: src/lib.rs\n\n```rust\npub trait Messenger {\n    fn send(&self, msg: &str);\n}\n\npub struct LimitTracker<'a, T: Messenger> {\n    messenger: &'a T,\n    value: usize,\n    max: usize,\n}\n\nimpl<'a, T> LimitTracker<'a, T>\nwhere\n    T: Messenger,\n{\n    pub fn new(messenger: &'a T, max: usize) -> LimitTracker<'a, T> {\n        LimitTracker {\n            messenger,\n            value: 0,\n            max,\n        }\n    }\n\n    pub fn set_value(&mut self, value: usize) {\n        self.value = value;\n\n        let percentage_of_max = self.value as f64 / self.max as f64;\n\n        if percentage_of_max >= 1.0 {\n            self.messenger.send(\"Error: You are over your quota!\");\n        } else if percentage_of_max >= 0.9 {\n            self.messenger\n                .send(\"Urgent warning: You've used up over 90% of your quota!\");\n        } else if percentage_of_max >= 0.75 {\n            self.messenger\n                .send(\"Warning: You've used up over 75% of your quota!\");\n        }\n    }\n}\n```\n\nListing 15-20: A library to keep track of how close a value is to a maximum value and warn when the value is at certain levels\n\nOne important part of this code is that the `Messenger` trait has one method called `send` that takes an immutable reference to `self` and the text of the message. This trait is the interface our mock object needs to implement so that the mock can be used in the same way a real object is. The other important part is that we want to test the behavior of the `set_value` method on the `LimitTracker`. We can change what we pass in for the `value` parameter, but `set_value` doesn‚Äôt return anything for us to make assertions on. We want to be able to say that if we create a `LimitTracker` with something that implements the `Messenger` trait and a particular value for `max`, when we pass different numbers for `value`, the messenger is told to send the appropriate messages.\n\nWe need a mock object that, instead of sending an email or text message when we call `send`, will only keep track of the messages it‚Äôs told to send. We can create a new instance of the mock object, create a `LimitTracker` that uses the mock object, call the `set_value` method on `LimitTracker`, and then check that the mock object has the messages we expect. Listing 15-21 shows an attempt to implement a mock object to do just that, but the borrow checker won‚Äôt allow it:\n\nFilename: src/lib.rs\n\n```rust\npub trait Messenger {\n    fn send(&self, msg: &str);\n}\n\npub struct LimitTracker<'a, T: Messenger> {\n    messenger: &'a T,\n    value: usize,\n    max: usize,\n}\n\nimpl<'a, T> LimitTracker<'a, T>\nwhere\n    T: Messenger,\n{\n    pub fn new(messenger: &'a T, max: usize) -> LimitTracker<'a, T> {\n        LimitTracker {\n            messenger,\n            value: 0,\n            max,\n        }\n    }\n\n    pub fn set_value(&mut self, value: usize) {\n        self.value = value;\n\n        let percentage_of_max = self.value as f64 / self.max as f64;\n\n        if percentage_of_max >= 1.0 {\n            self.messenger.send(\"Error: You are over your quota!\");\n        } else if percentage_of_max >= 0.9 {\n            self.messenger\n                .send(\"Urgent warning: You've used up over 90% of your quota!\");\n        } else if percentage_of_max >= 0.75 {\n            self.messenger\n                .send(\"Warning: You've used up over 75% of your quota!\");\n        }\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    struct MockMessenger {\n        sent_messages: Vec<String>,\n    }\n\n    impl MockMessenger {\n        fn new() -> MockMessenger {\n            MockMessenger {\n                sent_messages: vec![],\n            }\n        }\n    }\n\n    impl Messenger for MockMessenger {\n        fn send(&self, message: &str) {\n            self.sent_messages.push(String::from(message));\n        }\n    }\n\n    #[test]\n    fn it_sends_an_over_75_percent_warning_message() {\n        let mock_messenger = MockMessenger::new();\n        let mut limit_tracker = LimitTracker::new(&mock_messenger, 100);\n\n        limit_tracker.set_value(80);\n\n        assert_eq!(mock_messenger.sent_messages.len(), 1);\n    }\n}\n```\n\nListing 15-21: An attempt to implement a `MockMessenger` that isn‚Äôt allowed by the borrow checker\n\nThis test code defines a `MockMessenger` struct that has a `sent_messages` field with a `Vec` of `String` values to keep track of the messages it‚Äôs told to send. We also define an associated function `new` to make it convenient to create new `MockMessenger` values that start with an empty list of messages. We then implement the `Messenger` trait for `MockMessenger` so we can give a `MockMessenger` to a `LimitTracker`. In the definition of the `send` method, we take the message passed in as a parameter and store it in the `MockMessenger` list of `sent_messages`.\n\nIn the test, we‚Äôre testing what happens when the `LimitTracker` is told to set `value` to something that is more than 75 percent of the `max` value. First, we create a new `MockMessenger`, which will start with an empty list of messages. Then we create a new `LimitTracker` and give it a reference to the new `MockMessenger` and a `max` value of 100. We call the `set_value` method on the `LimitTracker` with a value of 80, which is more than 75 percent of 100. Then we assert that the list of messages that the `MockMessenger` is keeping track of should now have one message in it.\n\nHowever, there‚Äôs one problem with this test, as shown here:\n\n```console\n$ cargo test\n   Compiling limit-tracker v0.1.0 (file:///projects/limit-tracker)\nerror[E0596]: cannot borrow `self.sent_messages` as mutable, as it is behind a `&` reference\n  --> src/lib.rs:58:13\n   |\n58 |             self.sent_messages.push(String::from(message));\n   |             ^^^^^^^^^^^^^^^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n   |\nhelp: consider changing this to be a mutable reference\n   |\n2  |     fn send(&mut self, msg: &str);\n   |             ~~~~~~~~~\n\nFor more information about this error, try `rustc --explain E0596`.\nerror: could not compile `limit-tracker` (lib test) due to 1 previous error\n\n```\n\nWe can‚Äôt modify the `MockMessenger` to keep track of the messages, because the `send` method takes an immutable reference to `self`. We also can‚Äôt take the suggestion from the error text to use `&mut self` instead, because then the signature of `send` wouldn‚Äôt match the signature in the `Messenger` trait definition (feel free to try and see what error message you get).\n\nThis is a situation in which interior mutability can help! We‚Äôll store the `sent_messages` within a `RefCell<T>`, and then the `send` method will be able to modify `sent_messages` to store the messages we‚Äôve seen. Listing 15-22 shows what that looks like:\n\nFilename: src/lib.rs\n\n```rust\npub trait Messenger {\n    fn send(&self, msg: &str);\n}\n\npub struct LimitTracker<'a, T: Messenger> {\n    messenger: &'a T,\n    value: usize,\n    max: usize,\n}\n\nimpl<'a, T> LimitTracker<'a, T>\nwhere\n    T: Messenger,\n{\n    pub fn new(messenger: &'a T, max: usize) -> LimitTracker<'a, T> {\n        LimitTracker {\n            messenger,\n            value: 0,\n            max,\n        }\n    }\n\n    pub fn set_value(&mut self, value: usize) {\n        self.value = value;\n\n        let percentage_of_max = self.value as f64 / self.max as f64;\n\n        if percentage_of_max >= 1.0 {\n            self.messenger.send(\"Error: You are over your quota!\");\n        } else if percentage_of_max >= 0.9 {\n            self.messenger\n                .send(\"Urgent warning: You've used up over 90% of your quota!\");\n        } else if percentage_of_max >= 0.75 {\n            self.messenger\n                .send(\"Warning: You've used up over 75% of your quota!\");\n        }\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n    use std::cell::RefCell;\n\n    struct MockMessenger {\n        sent_messages: RefCell<Vec<String>>,\n    }\n\n    impl MockMessenger {\n        fn new() -> MockMessenger {\n            MockMessenger {\n                sent_messages: RefCell::new(vec![]),\n            }\n        }\n    }\n\n    impl Messenger for MockMessenger {\n        fn send(&self, message: &str) {\n            self.sent_messages.borrow_mut().push(String::from(message));\n        }\n    }\n\n    #[test]\n    fn it_sends_an_over_75_percent_warning_message() {\n        // --snip--\n        let mock_messenger = MockMessenger::new();\n        let mut limit_tracker = LimitTracker::new(&mock_messenger, 100);\n\n        limit_tracker.set_value(80);\n\n        assert_eq!(mock_messenger.sent_messages.borrow().len(), 1);\n    }\n}\n```\n\nListing 15-22: Using `RefCell<T>` to mutate an inner value while the outer value is considered immutable\n\nThe `sent_messages` field is now of type `RefCell<Vec<String>>` instead of `Vec<String>`. In the `new` function, we create a new `RefCell<Vec<String>>` instance around the empty vector.\n\nFor the implementation of the `send` method, the first parameter is still an immutable borrow of `self`, which matches the trait definition. We call `borrow_mut` on the `RefCell<Vec<String>>` in `self.sent_messages` to get a mutable reference to the value inside the `RefCell<Vec<String>>`, which is the vector. Then we can call `push` on the mutable reference to the vector to keep track of the messages sent during the test.\n\nThe last change we have to make is in the assertion: to see how many items are in the inner vector, we call `borrow` on the `RefCell<Vec<String>>` to get an immutable reference to the vector.\n\nNow that you‚Äôve seen how to use `RefCell<T>`, let‚Äôs dig into how it works!\n\n#### [Keeping Track of Borrows at Runtime with `RefCell<T>`](#keeping-track-of-borrows-at-runtime-with-refcellt)\n\nWhen creating immutable and mutable references, we use the `&` and `&mut` syntax, respectively. With `RefCell<T>`, we use the `borrow` and `borrow_mut` methods, which are part of the safe API that belongs to `RefCell<T>`. The `borrow` method returns the smart pointer type `Ref<T>`, and `borrow_mut` returns the smart pointer type `RefMut<T>`. Both types implement `Deref`, so we can treat them like regular references.\n\nThe `RefCell<T>` keeps track of how many `Ref<T>` and `RefMut<T>` smart pointers are currently active. Every time we call `borrow`, the `RefCell<T>` increases its count of how many immutable borrows are active. When a `Ref<T>` value goes out of scope, the count of immutable borrows goes down by one. Just like the compile-time borrowing rules, `RefCell<T>` lets us have many immutable borrows or one mutable borrow at any point in time.\n\nIf we try to violate these rules, rather than getting a compiler error as we would with references, the implementation of `RefCell<T>` will panic at runtime. Listing 15-23 shows a modification of the implementation of `send` in Listing 15-22. We‚Äôre deliberately trying to create two mutable borrows active for the same scope to illustrate that `RefCell<T>` prevents us from doing this at runtime.\n\nFilename: src/lib.rs\n\n```rust\npub trait Messenger {\n    fn send(&self, msg: &str);\n}\n\npub struct LimitTracker<'a, T: Messenger> {\n    messenger: &'a T,\n    value: usize,\n    max: usize,\n}\n\nimpl<'a, T> LimitTracker<'a, T>\nwhere\n    T: Messenger,\n{\n    pub fn new(messenger: &'a T, max: usize) -> LimitTracker<'a, T> {\n        LimitTracker {\n            messenger,\n            value: 0,\n            max,\n        }\n    }\n\n    pub fn set_value(&mut self, value: usize) {\n        self.value = value;\n\n        let percentage_of_max = self.value as f64 / self.max as f64;\n\n        if percentage_of_max >= 1.0 {\n            self.messenger.send(\"Error: You are over your quota!\");\n        } else if percentage_of_max >= 0.9 {\n            self.messenger\n                .send(\"Urgent warning: You've used up over 90% of your quota!\");\n        } else if percentage_of_max >= 0.75 {\n            self.messenger\n                .send(\"Warning: You've used up over 75% of your quota!\");\n        }\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n    use std::cell::RefCell;\n\n    struct MockMessenger {\n        sent_messages: RefCell<Vec<String>>,\n    }\n\n    impl MockMessenger {\n        fn new() -> MockMessenger {\n            MockMessenger {\n                sent_messages: RefCell::new(vec![]),\n            }\n        }\n    }\n\n    impl Messenger for MockMessenger {\n        fn send(&self, message: &str) {\n            let mut one_borrow = self.sent_messages.borrow_mut();\n            let mut two_borrow = self.sent_messages.borrow_mut();\n\n            one_borrow.push(String::from(message));\n            two_borrow.push(String::from(message));\n        }\n    }\n\n    #[test]\n    fn it_sends_an_over_75_percent_warning_message() {\n        let mock_messenger = MockMessenger::new();\n        let mut limit_tracker = LimitTracker::new(&mock_messenger, 100);\n\n        limit_tracker.set_value(80);\n\n        assert_eq!(mock_messenger.sent_messages.borrow().len(), 1);\n    }\n}\n```\n\nListing 15-23: Creating two mutable references in the same scope to see that `RefCell<T>` will panic\n\nWe create a variable `one_borrow` for the `RefMut<T>` smart pointer returned from `borrow_mut`. Then we create another mutable borrow in the same way in the variable `two_borrow`. This makes two mutable references in the same scope, which isn‚Äôt allowed. When we run the tests for our library, the code in Listing 15-23 will compile without any errors, but the test will fail:\n\n```console\n$ cargo test\n   Compiling limit-tracker v0.1.0 (file:///projects/limit-tracker)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.91s\n     Running unittests src/lib.rs (target/debug/deps/limit_tracker-e599811fa246dbde)\n\nrunning 1 test\ntest tests::it_sends_an_over_75_percent_warning_message ... FAILED\n\nfailures:\n\n---- tests::it_sends_an_over_75_percent_warning_message stdout ----\nthread 'tests::it_sends_an_over_75_percent_warning_message' panicked at src/lib.rs:60:53:\nalready borrowed: BorrowMutError\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\n\nfailures:\n    tests::it_sends_an_over_75_percent_warning_message\n\ntest result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\nerror: test failed, to rerun pass `--lib`\n\n```\n\nNotice that the code panicked with the message `already borrowed: BorrowMutError`. This is how `RefCell<T>` handles violations of the borrowing rules at runtime.\n\nChoosing to catch borrowing errors at runtime rather than compile time, as we‚Äôve done here, means you‚Äôd potentially be finding mistakes in your code later in the development process: possibly not until your code was deployed to production. Also, your code would incur a small runtime performance penalty as a result of keeping track of the borrows at runtime rather than compile time. However, using `RefCell<T>` makes it possible to write a mock object that can modify itself to keep track of the messages it has seen while you‚Äôre using it in a context where only immutable values are allowed. You can use `RefCell<T>` despite its trade-offs to get more functionality than regular references provide.\n\n### [Having Multiple Owners of Mutable Data by Combining `Rc<T>` and `RefCell<T>`](#having-multiple-owners-of-mutable-data-by-combining-rct-and-refcellt)\n\nA common way to use `RefCell<T>` is in combination with `Rc<T>`. Recall that `Rc<T>` lets you have multiple owners of some data, but it only gives immutable access to that data. If you have an `Rc<T>` that holds a `RefCell<T>`, you can get a value that can have multiple owners _and_ that you can mutate!\n\nFor example, recall the cons list example in Listing 15-18 where we used `Rc<T>` to allow multiple lists to share ownership of another list. Because `Rc<T>` holds only immutable values, we can‚Äôt change any of the values in the list once we‚Äôve created them. Let‚Äôs add in `RefCell<T>` to gain the ability to change the values in the lists. Listing 15-24 shows that by using a `RefCell<T>` in the `Cons` definition, we can modify the value stored in all the lists:\n\nFilename: src/main.rs\n\n```rust\n#[derive(Debug)]\nenum List {\n    Cons(Rc<RefCell<i32>>, Rc<List>),\n    Nil,\n}\n\nuse crate::List::{Cons, Nil};\nuse std::cell::RefCell;\nuse std::rc::Rc;\n\nfn main() {\n    let value = Rc::new(RefCell::new(5));\n\n    let a = Rc::new(Cons(Rc::clone(&value), Rc::new(Nil)));\n\n    let b = Cons(Rc::new(RefCell::new(3)), Rc::clone(&a));\n    let c = Cons(Rc::new(RefCell::new(4)), Rc::clone(&a));\n\n    *value.borrow_mut() += 10;\n\n    println!(\"a after = {a:?}\");\n    println!(\"b after = {b:?}\");\n    println!(\"c after = {c:?}\");\n}\n```\n\nListing 15-24: Using `Rc<RefCell<i32>>` to create a `List` that we can mutate\n\nWe create a value that is an instance of `Rc<RefCell<i32>>` and store it in a variable named `value` so we can access it directly later. Then we create a `List` in `a` with a `Cons` variant that holds `value`. We need to clone `value` so both `a` and `value` have ownership of the inner `5` value rather than transferring ownership from `value` to `a` or having `a` borrow from `value`.\n\nWe wrap the list `a` in an `Rc<T>` so when we create lists `b` and `c`, they can both refer to `a`, which is what we did in Listing 15-18.\n\nAfter we‚Äôve created the lists in `a`, `b`, and `c`, we want to add 10 to the value in `value`. We do this by calling `borrow_mut` on `value`, which uses the automatic dereferencing feature we discussed in Chapter 5 (see the section [‚ÄúWhere‚Äôs the `->` Operator?‚Äù](about:blank/ch05-03-method-syntax.html#wheres-the---operator)) to dereference the `Rc<T>` to the inner `RefCell<T>` value. The `borrow_mut` method returns a `RefMut<T>` smart pointer, and we use the dereference operator on it and change the inner value.\n\nWhen we print `a`, `b`, and `c`, we can see that they all have the modified value of 15 rather than 5:\n\n```console\n$ cargo run\n   Compiling cons-list v0.1.0 (file:///projects/cons-list)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.63s\n     Running `target/debug/cons-list`\na after = Cons(RefCell { value: 15 }, Nil)\nb after = Cons(RefCell { value: 3 }, Cons(RefCell { value: 15 }, Nil))\nc after = Cons(RefCell { value: 4 }, Cons(RefCell { value: 15 }, Nil))\n\n```\n\nThis technique is pretty neat! By using `RefCell<T>`, we have an outwardly immutable `List` value. But we can use the methods on `RefCell<T>` that provide access to its interior mutability so we can modify our data when we need to. The runtime checks of the borrowing rules protect us from data races, and it‚Äôs sometimes worth trading a bit of speed for this flexibility in our data structures. Note that `RefCell<T>` does not work for multithreaded code! `Mutex<T>` is the thread-safe version of `RefCell<T>` and we‚Äôll discuss `Mutex<T>` in Chapter 16.\n\n## [Reference Cycles Can Leak Memory](#reference-cycles-can-leak-memory)\n\nRust‚Äôs memory safety guarantees make it difficult, but not impossible, to accidentally create memory that is never cleaned up (known as a _memory leak_). Preventing memory leaks entirely is not one of Rust‚Äôs guarantees, meaning memory leaks are memory safe in Rust. We can see that Rust allows memory leaks by using `Rc<T>` and `RefCell<T>`: it‚Äôs possible to create references where items refer to each other in a cycle. This creates memory leaks because the reference count of each item in the cycle will never reach 0, and the values will never be dropped.\n\n### [Creating a Reference Cycle](#creating-a-reference-cycle)\n\nLet‚Äôs look at how a reference cycle might happen and how to prevent it, starting with the definition of the `List` enum and a `tail` method in Listing 15-25:\n\nFilename: src/main.rs\n\n```rust\nuse crate::List::{Cons, Nil};\nuse std::cell::RefCell;\nuse std::rc::Rc;\n\n#[derive(Debug)]\nenum List {\n    Cons(i32, RefCell<Rc<List>>),\n    Nil,\n}\n\nimpl List {\n    fn tail(&self) -> Option<&RefCell<Rc<List>>> {\n        match self {\n            Cons(_, item) => Some(item),\n            Nil => None,\n        }\n    }\n}\n\nfn main() {}\n```\n\nListing 15-25: A cons list definition that holds a `RefCell<T>` so we can modify what a `Cons` variant is referring to\n\nWe‚Äôre using another variation of the `List` definition from Listing 15-5. The second element in the `Cons` variant is now `RefCell<Rc<List>>`, meaning that instead of having the ability to modify the `i32` value as we did in Listing 15-24, we want to modify the `List` value a `Cons` variant is pointing to. We‚Äôre also adding a `tail` method to make it convenient for us to access the second item if we have a `Cons` variant.\n\nIn Listing 15-26, we‚Äôre adding a `main` function that uses the definitions in Listing 15-25. This code creates a list in `a` and a list in `b` that points to the list in `a`. Then it modifies the list in `a` to point to `b`, creating a reference cycle. There are `println!` statements along the way to show what the reference counts are at various points in this process.\n\nFilename: src/main.rs\n\n```rust\nuse crate::List::{Cons, Nil};\nuse std::cell::RefCell;\nuse std::rc::Rc;\n\n#[derive(Debug)]\nenum List {\n    Cons(i32, RefCell<Rc<List>>),\n    Nil,\n}\n\nimpl List {\n    fn tail(&self) -> Option<&RefCell<Rc<List>>> {\n        match self {\n            Cons(_, item) => Some(item),\n            Nil => None,\n        }\n    }\n}\n\nfn main() {\n    let a = Rc::new(Cons(5, RefCell::new(Rc::new(Nil))));\n\n    println!(\"a initial rc count = {}\", Rc::strong_count(&a));\n    println!(\"a next item = {:?}\", a.tail());\n\n    let b = Rc::new(Cons(10, RefCell::new(Rc::clone(&a))));\n\n    println!(\"a rc count after b creation = {}\", Rc::strong_count(&a));\n    println!(\"b initial rc count = {}\", Rc::strong_count(&b));\n    println!(\"b next item = {:?}\", b.tail());\n\n    if let Some(link) = a.tail() {\n        *link.borrow_mut() = Rc::clone(&b);\n    }\n\n    println!(\"b rc count after changing a = {}\", Rc::strong_count(&b));\n    println!(\"a rc count after changing a = {}\", Rc::strong_count(&a));\n\n    // Uncomment the next line to see that we have a cycle;\n    // it will overflow the stack\n    // println!(\"a next item = {:?}\", a.tail());\n}\n```\n\nListing 15-26: Creating a reference cycle of two `List` values pointing to each other\n\nWe create an `Rc<List>` instance holding a `List` value in the variable `a` with an initial list of `5, Nil`. We then create an `Rc<List>` instance holding another `List` value in the variable `b` that contains the value 10 and points to the list in `a`.\n\nWe modify `a` so it points to `b` instead of `Nil`, creating a cycle. We do that by using the `tail` method to get a reference to the `RefCell<Rc<List>>` in `a`, which we put in the variable `link`. Then we use the `borrow_mut` method on the `RefCell<Rc<List>>` to change the value inside from an `Rc<List>` that holds a `Nil` value to the `Rc<List>` in `b`.\n\nWhen we run this code, keeping the last `println!` commented out for the moment, we‚Äôll get this output:\n\n```console\n$ cargo run\n   Compiling cons-list v0.1.0 (file:///projects/cons-list)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.53s\n     Running `target/debug/cons-list`\na initial rc count = 1\na next item = Some(RefCell { value: Nil })\na rc count after b creation = 2\nb initial rc count = 1\nb next item = Some(RefCell { value: Cons(5, RefCell { value: Nil }) })\nb rc count after changing a = 2\na rc count after changing a = 2\n\n```\n\nThe reference count of the `Rc<List>` instances in both `a` and `b` are 2 after we change the list in `a` to point to `b`. At the end of `main`, Rust drops the variable `b`, which decreases the reference count of the `b` `Rc<List>` instance from 2 to 1. The memory that `Rc<List>` has on the heap won‚Äôt be dropped at this point, because its reference count is 1, not 0. Then Rust drops `a`, which decreases the reference count of the `a` `Rc<List>` instance from 2 to 1 as well. This instance‚Äôs memory can‚Äôt be dropped either, because the other `Rc<List>` instance still refers to it. The memory allocated to the list will remain uncollected forever. To visualize this reference cycle, we‚Äôve created a diagram in Figure 15-4.\n\n![Reference cycle of lists](img/trpl15-04.svg)\n\nFigure 15-4: A reference cycle of lists `a` and `b` pointing to each other\n\nIf you uncomment the last `println!` and run the program, Rust will try to print this cycle with `a` pointing to `b` pointing to `a` and so forth until it overflows the stack.\n\nCompared to a real-world program, the consequences of creating a reference cycle in this example aren‚Äôt very dire: right after we create the reference cycle, the program ends. However, if a more complex program allocated lots of memory in a cycle and held onto it for a long time, the program would use more memory than it needed and might overwhelm the system, causing it to run out of available memory.\n\nCreating reference cycles is not easily done, but it‚Äôs not impossible either. If you have `RefCell<T>` values that contain `Rc<T>` values or similar nested combinations of types with interior mutability and reference counting, you must ensure that you don‚Äôt create cycles; you can‚Äôt rely on Rust to catch them. Creating a reference cycle would be a logic bug in your program that you should use automated tests, code reviews, and other software development practices to minimize.\n\nAnother solution for avoiding reference cycles is reorganizing your data structures so that some references express ownership and some references don‚Äôt. As a result, you can have cycles made up of some ownership relationships and some non-ownership relationships, and only the ownership relationships affect whether or not a value can be dropped. In Listing 15-25, we always want `Cons` variants to own their list, so reorganizing the data structure isn‚Äôt possible. Let‚Äôs look at an example using graphs made up of parent nodes and child nodes to see when non-ownership relationships are an appropriate way to prevent reference cycles.\n\n### [Preventing Reference Cycles: Turning an `Rc<T>` into a `Weak<T>`](#preventing-reference-cycles-turning-an-rct-into-a-weakt)\n\nSo far, we‚Äôve demonstrated that calling `Rc::clone` increases the `strong_count` of an `Rc<T>` instance, and an `Rc<T>` instance is only cleaned up if its `strong_count` is 0. You can also create a _weak reference_ to the value within an `Rc<T>` instance by calling `Rc::downgrade` and passing a reference to the `Rc<T>`. Strong references are how you can share ownership of an `Rc<T>` instance. Weak references don‚Äôt express an ownership relationship, and their count doesn‚Äôt affect when an `Rc<T>` instance is cleaned up. They won‚Äôt cause a reference cycle because any cycle involving some weak references will be broken once the strong reference count of values involved is 0.\n\nWhen you call `Rc::downgrade`, you get a smart pointer of type `Weak<T>`. Instead of increasing the `strong_count` in the `Rc<T>` instance by 1, calling `Rc::downgrade` increases the `weak_count` by 1. The `Rc<T>` type uses `weak_count` to keep track of how many `Weak<T>` references exist, similar to `strong_count`. The difference is the `weak_count` doesn‚Äôt need to be 0 for the `Rc<T>` instance to be cleaned up.\n\nBecause the value that `Weak<T>` references might have been dropped, to do anything with the value that a `Weak<T>` is pointing to, you must make sure the value still exists. Do this by calling the `upgrade` method on a `Weak<T>` instance, which will return an `Option<Rc<T>>`. You‚Äôll get a result of `Some` if the `Rc<T>` value has not been dropped yet and a result of `None` if the `Rc<T>` value has been dropped. Because `upgrade` returns an `Option<Rc<T>>`, Rust will ensure that the `Some` case and the `None` case are handled, and there won‚Äôt be an invalid pointer.\n\nAs an example, rather than using a list whose items know only about the next item, we‚Äôll create a tree whose items know about their children items _and_ their parent items.\n\n#### [Creating a Tree Data Structure: a `Node` with Child Nodes](#creating-a-tree-data-structure-a-node-with-child-nodes)\n\nTo start, we‚Äôll build a tree with nodes that know about their child nodes. We‚Äôll create a struct named `Node` that holds its own `i32` value as well as references to its children `Node` values:\n\nFilename: src/main.rs\n\n```rust\nuse std::cell::RefCell;\nuse std::rc::Rc;\n\n#[derive(Debug)]\nstruct Node {\n    value: i32,\n    children: RefCell<Vec<Rc<Node>>>,\n}\n\nfn main() {\n    let leaf = Rc::new(Node {\n        value: 3,\n        children: RefCell::new(vec![]),\n    });\n\n    let branch = Rc::new(Node {\n        value: 5,\n        children: RefCell::new(vec![Rc::clone(&leaf)]),\n    });\n}\n```\n\nWe want a `Node` to own its children, and we want to share that ownership with variables so we can access each `Node` in the tree directly. To do this, we define the `Vec<T>` items to be values of type `Rc<Node>`. We also want to modify which nodes are children of another node, so we have a `RefCell<T>` in `children` around the `Vec<Rc<Node>>`.\n\nNext, we‚Äôll use our struct definition and create one `Node` instance named `leaf` with the value 3 and no children, and another instance named `branch` with the value 5 and `leaf` as one of its children, as shown in Listing 15-27:\n\nFilename: src/main.rs\n\n```rust\nuse std::cell::RefCell;\nuse std::rc::Rc;\n\n#[derive(Debug)]\nstruct Node {\n    value: i32,\n    children: RefCell<Vec<Rc<Node>>>,\n}\n\nfn main() {\n    let leaf = Rc::new(Node {\n        value: 3,\n        children: RefCell::new(vec![]),\n    });\n\n    let branch = Rc::new(Node {\n        value: 5,\n        children: RefCell::new(vec![Rc::clone(&leaf)]),\n    });\n}\n```\n\nListing 15-27: Creating a `leaf` node with no children and a `branch` node with `leaf` as one of its children\n\nWe clone the `Rc<Node>` in `leaf` and store that in `branch`, meaning the `Node` in `leaf` now has two owners: `leaf` and `branch`. We can get from `branch` to `leaf` through `branch.children`, but there‚Äôs no way to get from `leaf` to `branch`. The reason is that `leaf` has no reference to `branch` and doesn‚Äôt know they‚Äôre related. We want `leaf` to know that `branch` is its parent. We‚Äôll do that next.\n\n#### [Adding a Reference from a Child to Its Parent](#adding-a-reference-from-a-child-to-its-parent)\n\nTo make the child node aware of its parent, we need to add a `parent` field to our `Node` struct definition. The trouble is in deciding what the type of `parent` should be. We know it can‚Äôt contain an `Rc<T>`, because that would create a reference cycle with `leaf.parent` pointing to `branch` and `branch.children` pointing to `leaf`, which would cause their `strong_count` values to never be 0.\n\nThinking about the relationships another way, a parent node should own its children: if a parent node is dropped, its child nodes should be dropped as well. However, a child should not own its parent: if we drop a child node, the parent should still exist. This is a case for weak references!\n\nSo instead of `Rc<T>`, we‚Äôll make the type of `parent` use `Weak<T>`, specifically a `RefCell<Weak<Node>>`. Now our `Node` struct definition looks like this:\n\nFilename: src/main.rs\n\n```rust\nuse std::cell::RefCell;\nuse std::rc::{Rc, Weak};\n\n#[derive(Debug)]\nstruct Node {\n    value: i32,\n    parent: RefCell<Weak<Node>>,\n    children: RefCell<Vec<Rc<Node>>>,\n}\n\nfn main() {\n    let leaf = Rc::new(Node {\n        value: 3,\n        parent: RefCell::new(Weak::new()),\n        children: RefCell::new(vec![]),\n    });\n\n    println!(\"leaf parent = {:?}\", leaf.parent.borrow().upgrade());\n\n    let branch = Rc::new(Node {\n        value: 5,\n        parent: RefCell::new(Weak::new()),\n        children: RefCell::new(vec![Rc::clone(&leaf)]),\n    });\n\n    *leaf.parent.borrow_mut() = Rc::downgrade(&branch);\n\n    println!(\"leaf parent = {:?}\", leaf.parent.borrow().upgrade());\n}\n```\n\nA node will be able to refer to its parent node but doesn‚Äôt own its parent. In Listing 15-28, we update `main` to use this new definition so the `leaf` node will have a way to refer to its parent, `branch`:\n\nFilename: src/main.rs\n\n```rust\nuse std::cell::RefCell;\nuse std::rc::{Rc, Weak};\n\n#[derive(Debug)]\nstruct Node {\n    value: i32,\n    parent: RefCell<Weak<Node>>,\n    children: RefCell<Vec<Rc<Node>>>,\n}\n\nfn main() {\n    let leaf = Rc::new(Node {\n        value: 3,\n        parent: RefCell::new(Weak::new()),\n        children: RefCell::new(vec![]),\n    });\n\n    println!(\"leaf parent = {:?}\", leaf.parent.borrow().upgrade());\n\n    let branch = Rc::new(Node {\n        value: 5,\n        parent: RefCell::new(Weak::new()),\n        children: RefCell::new(vec![Rc::clone(&leaf)]),\n    });\n\n    *leaf.parent.borrow_mut() = Rc::downgrade(&branch);\n\n    println!(\"leaf parent = {:?}\", leaf.parent.borrow().upgrade());\n}\n```\n\nListing 15-28: A `leaf` node with a weak reference to its parent node `branch`\n\nCreating the `leaf` node looks similar to Listing 15-27 with the exception of the `parent` field: `leaf` starts out without a parent, so we create a new, empty `Weak<Node>` reference instance.\n\nAt this point, when we try to get a reference to the parent of `leaf` by using the `upgrade` method, we get a `None` value. We see this in the output from the first `println!` statement:\n\n```text\nleaf parent = None\n\n```\n\nWhen we create the `branch` node, it will also have a new `Weak<Node>` reference in the `parent` field, because `branch` doesn‚Äôt have a parent node. We still have `leaf` as one of the children of `branch`. Once we have the `Node` instance in `branch`, we can modify `leaf` to give it a `Weak<Node>` reference to its parent. We use the `borrow_mut` method on the `RefCell<Weak<Node>>` in the `parent` field of `leaf`, and then we use the `Rc::downgrade` function to create a `Weak<Node>` reference to `branch` from the `Rc<Node>` in `branch.`\n\nWhen we print the parent of `leaf` again, this time we‚Äôll get a `Some` variant holding `branch`: now `leaf` can access its parent! When we print `leaf`, we also avoid the cycle that eventually ended in a stack overflow like we had in Listing 15-26; the `Weak<Node>` references are printed as `(Weak)`:\n\n```text\nleaf parent = Some(Node { value: 5, parent: RefCell { value: (Weak) },\nchildren: RefCell { value: [Node { value: 3, parent: RefCell { value: (Weak) },\nchildren: RefCell { value: [] } }] } })\n\n```\n\nThe lack of infinite output indicates that this code didn‚Äôt create a reference cycle. We can also tell this by looking at the values we get from calling `Rc::strong_count` and `Rc::weak_count`.\n\n#### [Visualizing Changes to `strong_count` and `weak_count`](#visualizing-changes-to-strong_count-and-weak_count)\n\nLet‚Äôs look at how the `strong_count` and `weak_count` values of the `Rc<Node>` instances change by creating a new inner scope and moving the creation of `branch` into that scope. By doing so, we can see what happens when `branch` is created and then dropped when it goes out of scope. The modifications are shown in Listing 15-29:\n\nFilename: src/main.rs\n\n```rust\nuse std::cell::RefCell;\nuse std::rc::{Rc, Weak};\n\n#[derive(Debug)]\nstruct Node {\n    value: i32,\n    parent: RefCell<Weak<Node>>,\n    children: RefCell<Vec<Rc<Node>>>,\n}\n\nfn main() {\n    let leaf = Rc::new(Node {\n        value: 3,\n        parent: RefCell::new(Weak::new()),\n        children: RefCell::new(vec![]),\n    });\n\n    println!(\n        \"leaf strong = {}, weak = {}\",\n        Rc::strong_count(&leaf),\n        Rc::weak_count(&leaf),\n    );\n\n    {\n        let branch = Rc::new(Node {\n            value: 5,\n            parent: RefCell::new(Weak::new()),\n            children: RefCell::new(vec![Rc::clone(&leaf)]),\n        });\n\n        *leaf.parent.borrow_mut() = Rc::downgrade(&branch);\n\n        println!(\n            \"branch strong = {}, weak = {}\",\n            Rc::strong_count(&branch),\n            Rc::weak_count(&branch),\n        );\n\n        println!(\n            \"leaf strong = {}, weak = {}\",\n            Rc::strong_count(&leaf),\n            Rc::weak_count(&leaf),\n        );\n    }\n\n    println!(\"leaf parent = {:?}\", leaf.parent.borrow().upgrade());\n    println!(\n        \"leaf strong = {}, weak = {}\",\n        Rc::strong_count(&leaf),\n        Rc::weak_count(&leaf),\n    );\n}\n```\n\nListing 15-29: Creating `branch` in an inner scope and examining strong and weak reference counts\n\nAfter `leaf` is created, its `Rc<Node>` has a strong count of 1 and a weak count of 0. In the inner scope, we create `branch` and associate it with `leaf`, at which point when we print the counts, the `Rc<Node>` in `branch` will have a strong count of 1 and a weak count of 1 (for `leaf.parent` pointing to `branch` with a `Weak<Node>`). When we print the counts in `leaf`, we‚Äôll see it will have a strong count of 2, because `branch` now has a clone of the `Rc<Node>` of `leaf` stored in `branch.children`, but will still have a weak count of 0.\n\nWhen the inner scope ends, `branch` goes out of scope and the strong count of the `Rc<Node>` decreases to 0, so its `Node` is dropped. The weak count of 1 from `leaf.parent` has no bearing on whether or not `Node` is dropped, so we don‚Äôt get any memory leaks!\n\nIf we try to access the parent of `leaf` after the end of the scope, we‚Äôll get `None` again. At the end of the program, the `Rc<Node>` in `leaf` has a strong count of 1 and a weak count of 0, because the variable `leaf` is now the only reference to the `Rc<Node>` again.\n\nAll of the logic that manages the counts and value dropping is built into `Rc<T>` and `Weak<T>` and their implementations of the `Drop` trait. By specifying that the relationship from a child to its parent should be a `Weak<T>` reference in the definition of `Node`, you‚Äôre able to have parent nodes point to child nodes and vice versa without creating a reference cycle and memory leaks.\n\n## [Summary](#summary-14)\n\nThis chapter covered how to use smart pointers to make different guarantees and trade-offs from those Rust makes by default with regular references. The `Box<T>` type has a known size and points to data allocated on the heap. The `Rc<T>` type keeps track of the number of references to data on the heap so that data can have multiple owners. The `RefCell<T>` type with its interior mutability gives us a type that we can use when we need an immutable type but need to change an inner value of that type; it also enforces the borrowing rules at runtime instead of at compile time.\n\nAlso discussed were the `Deref` and `Drop` traits, which enable a lot of the functionality of smart pointers. We explored reference cycles that can cause memory leaks and how to prevent them using `Weak<T>`.\n\nIf this chapter has piqued your interest and you want to implement your own smart pointers, check out [‚ÄúThe Rustonomicon‚Äù](../nomicon/index.html) for more useful information.\n\nNext, we‚Äôll talk about concurrency in Rust. You‚Äôll even learn about a few new smart pointers.\n\n## [Fearless Concurrency](#fearless-concurrency)\n\nHandling concurrent programming safely and efficiently is another of Rust‚Äôs major goals. _Concurrent programming_, where different parts of a program execute independently, and _parallel programming_, where different parts of a program execute at the same time, are becoming increasingly important as more computers take advantage of their multiple processors. Historically, programming in these contexts has been difficult and error prone: Rust hopes to change that.\n\nInitially, the Rust team thought that ensuring memory safety and preventing concurrency problems were two separate challenges to be solved with different methods. Over time, the team discovered that the ownership and type systems are a powerful set of tools to help manage memory safety _and_ concurrency problems! By leveraging ownership and type checking, many concurrency errors are compile-time errors in Rust rather than runtime errors. Therefore, rather than making you spend lots of time trying to reproduce the exact circumstances under which a runtime concurrency bug occurs, incorrect code will refuse to compile and present an error explaining the problem. As a result, you can fix your code while you‚Äôre working on it rather than potentially after it has been shipped to production. We‚Äôve nicknamed this aspect of Rust _fearless_ _concurrency_. Fearless concurrency allows you to write code that is free of subtle bugs and is easy to refactor without introducing new bugs.\n\nNote: For simplicity‚Äôs sake, we‚Äôll refer to many of the problems as _concurrent_ rather than being more precise by saying _concurrent and/or parallel_. If this book were about concurrency and/or parallelism, we‚Äôd be more specific. For this chapter, please mentally substitute _concurrent and/or parallel_ whenever we use _concurrent_.\n\nMany languages are dogmatic about the solutions they offer for handling concurrent problems. For example, Erlang has elegant functionality for message-passing concurrency but has only obscure ways to share state between threads. Supporting only a subset of possible solutions is a reasonable strategy for higher-level languages, because a higher-level language promises benefits from giving up some control to gain abstractions. However, lower-level languages are expected to provide the solution with the best performance in any given situation and have fewer abstractions over the hardware. Therefore, Rust offers a variety of tools for modeling problems in whatever way is appropriate for your situation and requirements.\n\nHere are the topics we‚Äôll cover in this chapter:\n\n-   How to create threads to run multiple pieces of code at the same time\n-   _Message-passing_ concurrency, where channels send messages between threads\n-   _Shared-state_ concurrency, where multiple threads have access to some piece of data\n-   The `Sync` and `Send` traits, which extend Rust‚Äôs concurrency guarantees to user-defined types as well as types provided by the standard library\n\n## [Using Threads to Run Code Simultaneously](#using-threads-to-run-code-simultaneously)\n\nIn most current operating systems, an executed program‚Äôs code is run in a _process_, and the operating system will manage multiple processes at once. Within a program, you can also have independent parts that run simultaneously. The features that run these independent parts are called _threads_. For example, a web server could have multiple threads so that it could respond to more than one request at the same time.\n\nSplitting the computation in your program into multiple threads to run multiple tasks at the same time can improve performance, but it also adds complexity. Because threads can run simultaneously, there‚Äôs no inherent guarantee about the order in which parts of your code on different threads will run. This can lead to problems, such as:\n\n-   Race conditions, where threads are accessing data or resources in an inconsistent order\n-   Deadlocks, where two threads are waiting for each other, preventing both threads from continuing\n-   Bugs that happen only in certain situations and are hard to reproduce and fix reliably\n\nRust attempts to mitigate the negative effects of using threads, but programming in a multithreaded context still takes careful thought and requires a code structure that is different from that in programs running in a single thread.\n\nProgramming languages implement threads in a few different ways, and many operating systems provide an API the language can call for creating new threads. The Rust standard library uses a _1:1_ model of thread implementation, whereby a program uses one operating system thread per one language thread. There are crates that implement other models of threading that make different tradeoffs to the 1:1 model.\n\n### [Creating a New Thread with `spawn`](#creating-a-new-thread-with-spawn)\n\nTo create a new thread, we call the `thread::spawn` function and pass it a closure (we talked about closures in Chapter 13) containing the code we want to run in the new thread. The example in Listing 16-1 prints some text from a main thread and other text from a new thread:\n\nFilename: src/main.rs\n\n```rust\nuse std::thread;\nuse std::time::Duration;\n\nfn main() {\n    thread::spawn(|| {\n        for i in 1..10 {\n            println!(\"hi number {i} from the spawned thread!\");\n            thread::sleep(Duration::from_millis(1));\n        }\n    });\n\n    for i in 1..5 {\n        println!(\"hi number {i} from the main thread!\");\n        thread::sleep(Duration::from_millis(1));\n    }\n}\n```\n\nListing 16-1: Creating a new thread to print one thing while the main thread prints something else\n\nNote that when the main thread of a Rust program completes, all spawned threads are shut down, whether or not they have finished running. The output from this program might be a little different every time, but it will look similar to the following:\n\n```text\nhi number 1 from the main thread!\nhi number 1 from the spawned thread!\nhi number 2 from the main thread!\nhi number 2 from the spawned thread!\nhi number 3 from the main thread!\nhi number 3 from the spawned thread!\nhi number 4 from the main thread!\nhi number 4 from the spawned thread!\nhi number 5 from the spawned thread!\n\n```\n\nThe calls to `thread::sleep` force a thread to stop its execution for a short duration, allowing a different thread to run. The threads will probably take turns, but that isn‚Äôt guaranteed: it depends on how your operating system schedules the threads. In this run, the main thread printed first, even though the print statement from the spawned thread appears first in the code. And even though we told the spawned thread to print until `i` is 9, it only got to 5 before the main thread shut down.\n\nIf you run this code and only see output from the main thread, or don‚Äôt see any overlap, try increasing the numbers in the ranges to create more opportunities for the operating system to switch between the threads.\n\n### [Waiting for All Threads to Finish Using `join` Handles](#waiting-for-all-threads-to-finish-using-join-handles)\n\nThe code in Listing 16-1 not only stops the spawned thread prematurely most of the time due to the main thread ending, but because there is no guarantee on the order in which threads run, we also can‚Äôt guarantee that the spawned thread will get to run at all!\n\nWe can fix the problem of the spawned thread not running or ending prematurely by saving the return value of `thread::spawn` in a variable. The return type of `thread::spawn` is `JoinHandle`. A `JoinHandle` is an owned value that, when we call the `join` method on it, will wait for its thread to finish. Listing 16-2 shows how to use the `JoinHandle` of the thread we created in Listing 16-1 and call `join` to make sure the spawned thread finishes before `main` exits:\n\nFilename: src/main.rs\n\n```rust\nuse std::thread;\nuse std::time::Duration;\n\nfn main() {\n    let handle = thread::spawn(|| {\n        for i in 1..10 {\n            println!(\"hi number {i} from the spawned thread!\");\n            thread::sleep(Duration::from_millis(1));\n        }\n    });\n\n    for i in 1..5 {\n        println!(\"hi number {i} from the main thread!\");\n        thread::sleep(Duration::from_millis(1));\n    }\n\n    handle.join().unwrap();\n}\n```\n\nListing 16-2: Saving a `JoinHandle` from `thread::spawn` to guarantee the thread is run to completion\n\nCalling `join` on the handle blocks the thread currently running until the thread represented by the handle terminates. _Blocking_ a thread means that thread is prevented from performing work or exiting. Because we‚Äôve put the call to `join` after the main thread‚Äôs `for` loop, running Listing 16-2 should produce output similar to this:\n\n```text\nhi number 1 from the main thread!\nhi number 2 from the main thread!\nhi number 1 from the spawned thread!\nhi number 3 from the main thread!\nhi number 2 from the spawned thread!\nhi number 4 from the main thread!\nhi number 3 from the spawned thread!\nhi number 4 from the spawned thread!\nhi number 5 from the spawned thread!\nhi number 6 from the spawned thread!\nhi number 7 from the spawned thread!\nhi number 8 from the spawned thread!\nhi number 9 from the spawned thread!\n\n```\n\nThe two threads continue alternating, but the main thread waits because of the call to `handle.join()` and does not end until the spawned thread is finished.\n\nBut let‚Äôs see what happens when we instead move `handle.join()` before the `for` loop in `main`, like this:\n\nFilename: src/main.rs\n\n```rust\nuse std::thread;\nuse std::time::Duration;\n\nfn main() {\n    let handle = thread::spawn(|| {\n        for i in 1..10 {\n            println!(\"hi number {i} from the spawned thread!\");\n            thread::sleep(Duration::from_millis(1));\n        }\n    });\n\n    handle.join().unwrap();\n\n    for i in 1..5 {\n        println!(\"hi number {i} from the main thread!\");\n        thread::sleep(Duration::from_millis(1));\n    }\n}\n```\n\nThe main thread will wait for the spawned thread to finish and then run its `for` loop, so the output won‚Äôt be interleaved anymore, as shown here:\n\n```text\nhi number 1 from the spawned thread!\nhi number 2 from the spawned thread!\nhi number 3 from the spawned thread!\nhi number 4 from the spawned thread!\nhi number 5 from the spawned thread!\nhi number 6 from the spawned thread!\nhi number 7 from the spawned thread!\nhi number 8 from the spawned thread!\nhi number 9 from the spawned thread!\nhi number 1 from the main thread!\nhi number 2 from the main thread!\nhi number 3 from the main thread!\nhi number 4 from the main thread!\n\n```\n\nSmall details, such as where `join` is called, can affect whether or not your threads run at the same time.\n\n### [Using `move` Closures with Threads](#using-move-closures-with-threads)\n\nWe‚Äôll often use the `move` keyword with closures passed to `thread::spawn` because the closure will then take ownership of the values it uses from the environment, thus transferring ownership of those values from one thread to another. In the [‚ÄúCapturing References or Moving Ownership‚Äù](about:blank/ch13-01-closures.html#capturing-references-or-moving-ownership) section of Chapter 13, we discussed `move` in the context of closures. Now, we‚Äôll concentrate more on the interaction between `move` and `thread::spawn`.\n\nNotice in Listing 16-1 that the closure we pass to `thread::spawn` takes no arguments: we‚Äôre not using any data from the main thread in the spawned thread‚Äôs code. To use data from the main thread in the spawned thread, the spawned thread‚Äôs closure must capture the values it needs. Listing 16-3 shows an attempt to create a vector in the main thread and use it in the spawned thread. However, this won‚Äôt yet work, as you‚Äôll see in a moment.\n\nFilename: src/main.rs\n\n```rust\nuse std::thread;\n\nfn main() {\n    let v = vec![1, 2, 3];\n\n    let handle = thread::spawn(|| {\n        println!(\"Here's a vector: {v:?}\");\n    });\n\n    handle.join().unwrap();\n}\n```\n\nListing 16-3: Attempting to use a vector created by the main thread in another thread\n\nThe closure uses `v`, so it will capture `v` and make it part of the closure‚Äôs environment. Because `thread::spawn` runs this closure in a new thread, we should be able to access `v` inside that new thread. But when we compile this example, we get the following error:\n\n```console\n$ cargo run\n   Compiling threads v0.1.0 (file:///projects/threads)\nerror[E0373]: closure may outlive the current function, but it borrows `v`, which is owned by the current function\n --> src/main.rs:6:32\n  |\n6 |     let handle = thread::spawn(|| {\n  |                                ^^ may outlive borrowed value `v`\n7 |         println!(\"Here's a vector: {v:?}\");\n  |                                     - `v` is borrowed here\n  |\nnote: function requires argument type to outlive `'static`\n --> src/main.rs:6:18\n  |\n6 |       let handle = thread::spawn(|| {\n  |  __________________^\n7 | |         println!(\"Here's a vector: {v:?}\");\n8 | |     });\n  | |______^\nhelp: to force the closure to take ownership of `v` (and any other referenced variables), use the `move` keyword\n  |\n6 |     let handle = thread::spawn(move || {\n  |                                ++++\n\nFor more information about this error, try `rustc --explain E0373`.\nerror: could not compile `threads` (bin \"threads\") due to 1 previous error\n\n```\n\nRust _infers_ how to capture `v`, and because `println!` only needs a reference to `v`, the closure tries to borrow `v`. However, there‚Äôs a problem: Rust can‚Äôt tell how long the spawned thread will run, so it doesn‚Äôt know if the reference to `v` will always be valid.\n\nListing 16-4 provides a scenario that‚Äôs more likely to have a reference to `v` that won‚Äôt be valid:\n\nFilename: src/main.rs\n\n```rust\nuse std::thread;\n\nfn main() {\n    let v = vec![1, 2, 3];\n\n    let handle = thread::spawn(|| {\n        println!(\"Here's a vector: {v:?}\");\n    });\n\n    drop(v); // oh no!\n\n    handle.join().unwrap();\n}\n```\n\nListing 16-4: A thread with a closure that attempts to capture a reference to `v` from a main thread that drops `v`\n\nIf Rust allowed us to run this code, there‚Äôs a possibility the spawned thread would be immediately put in the background without running at all. The spawned thread has a reference to `v` inside, but the main thread immediately drops `v`, using the `drop` function we discussed in Chapter 15. Then, when the spawned thread starts to execute, `v` is no longer valid, so a reference to it is also invalid. Oh no!\n\nTo fix the compiler error in Listing 16-3, we can use the error message‚Äôs advice:\n\n```text\nhelp: to force the closure to take ownership of `v` (and any other referenced variables), use the `move` keyword\n  |\n6 |     let handle = thread::spawn(move || {\n  |                                ++++\n\n```\n\nBy adding the `move` keyword before the closure, we force the closure to take ownership of the values it‚Äôs using rather than allowing Rust to infer that it should borrow the values. The modification to Listing 16-3 shown in Listing 16-5 will compile and run as we intend:\n\nFilename: src/main.rs\n\n```rust\nuse std::thread;\n\nfn main() {\n    let v = vec![1, 2, 3];\n\n    let handle = thread::spawn(move || {\n        println!(\"Here's a vector: {v:?}\");\n    });\n\n    handle.join().unwrap();\n}\n```\n\nListing 16-5: Using the `move` keyword to force a closure to take ownership of the values it uses\n\nWe might be tempted to try the same thing to fix the code in Listing 16-4 where the main thread called `drop` by using a `move` closure. However, this fix will not work because what Listing 16-4 is trying to do is disallowed for a different reason. If we added `move` to the closure, we would move `v` into the closure‚Äôs environment, and we could no longer call `drop` on it in the main thread. We would get this compiler error instead:\n\n```console\n$ cargo run\n   Compiling threads v0.1.0 (file:///projects/threads)\nerror[E0382]: use of moved value: `v`\n  --> src/main.rs:10:10\n   |\n4  |     let v = vec![1, 2, 3];\n   |         - move occurs because `v` has type `Vec<i32>`, which does not implement the `Copy` trait\n5  |\n6  |     let handle = thread::spawn(move || {\n   |                                ------- value moved into closure here\n7  |         println!(\"Here's a vector: {v:?}\");\n   |                                     - variable moved due to use in closure\n...\n10 |     drop(v); // oh no!\n   |          ^ value used here after move\n\nFor more information about this error, try `rustc --explain E0382`.\nerror: could not compile `threads` (bin \"threads\") due to 1 previous error\n\n```\n\nRust‚Äôs ownership rules have saved us again! We got an error from the code in Listing 16-3 because Rust was being conservative and only borrowing `v` for the thread, which meant the main thread could theoretically invalidate the spawned thread‚Äôs reference. By telling Rust to move ownership of `v` to the spawned thread, we‚Äôre guaranteeing Rust that the main thread won‚Äôt use `v` anymore. If we change Listing 16-4 in the same way, we‚Äôre then violating the ownership rules when we try to use `v` in the main thread. The `move` keyword overrides Rust‚Äôs conservative default of borrowing; it doesn‚Äôt let us violate the ownership rules.\n\nWith a basic understanding of threads and the thread API, let‚Äôs look at what we can _do_ with threads.\n\n## [Using Message Passing to Transfer Data Between Threads](#using-message-passing-to-transfer-data-between-threads)\n\nOne increasingly popular approach to ensuring safe concurrency is _message passing_, where threads or actors communicate by sending each other messages containing data. Here‚Äôs the idea in a slogan from [the Go language documentation](https://golang.org/doc/effective_go.html#concurrency): ‚ÄúDo not communicate by sharing memory; instead, share memory by communicating.‚Äù\n\nTo accomplish message-sending concurrency, Rust‚Äôs standard library provides an implementation of _channels_. A channel is a general programming concept by which data is sent from one thread to another.\n\nYou can imagine a channel in programming as being like a directional channel of water, such as a stream or a river. If you put something like a rubber duck into a river, it will travel downstream to the end of the waterway.\n\nA channel has two halves: a transmitter and a receiver. The transmitter half is the upstream location where you put rubber ducks into the river, and the receiver half is where the rubber duck ends up downstream. One part of your code calls methods on the transmitter with the data you want to send, and another part checks the receiving end for arriving messages. A channel is said to be _closed_ if either the transmitter or receiver half is dropped.\n\nHere, we‚Äôll work up to a program that has one thread to generate values and send them down a channel, and another thread that will receive the values and print them out. We‚Äôll be sending simple values between threads using a channel to illustrate the feature. Once you‚Äôre familiar with the technique, you could use channels for any threads that need to communicate between each other, such as a chat system or a system where many threads perform parts of a calculation and send the parts to one thread that aggregates the results.\n\nFirst, in Listing 16-6, we‚Äôll create a channel but not do anything with it. Note that this won‚Äôt compile yet because Rust can‚Äôt tell what type of values we want to send over the channel.\n\nFilename: src/main.rs\n\n```rust\nuse std::sync::mpsc;\n\nfn main() {\n    let (tx, rx) = mpsc::channel();\n}\n```\n\nListing 16-6: Creating a channel and assigning the two halves to `tx` and `rx`\n\nWe create a new channel using the `mpsc::channel` function; `mpsc` stands for _multiple producer, single consumer_. In short, the way Rust‚Äôs standard library implements channels means a channel can have multiple _sending_ ends that produce values but only one _receiving_ end that consumes those values. Imagine multiple streams flowing together into one big river: everything sent down any of the streams will end up in one river at the end. We‚Äôll start with a single producer for now, but we‚Äôll add multiple producers when we get this example working.\n\nThe `mpsc::channel` function returns a tuple, the first element of which is the sending end‚Äîthe transmitter‚Äîand the second element is the receiving end‚Äîthe receiver. The abbreviations `tx` and `rx` are traditionally used in many fields for _transmitter_ and _receiver_ respectively, so we name our variables as such to indicate each end. We‚Äôre using a `let` statement with a pattern that destructures the tuples; we‚Äôll discuss the use of patterns in `let` statements and destructuring in Chapter 18. For now, know that using a `let` statement this way is a convenient approach to extract the pieces of the tuple returned by `mpsc::channel`.\n\nLet‚Äôs move the transmitting end into a spawned thread and have it send one string so the spawned thread is communicating with the main thread, as shown in Listing 16-7. This is like putting a rubber duck in the river upstream or sending a chat message from one thread to another.\n\nFilename: src/main.rs\n\n```rust\nuse std::sync::mpsc;\nuse std::thread;\n\nfn main() {\n    let (tx, rx) = mpsc::channel();\n\n    thread::spawn(move || {\n        let val = String::from(\"hi\");\n        tx.send(val).unwrap();\n    });\n}\n```\n\nListing 16-7: Moving `tx` to a spawned thread and sending ‚Äúhi‚Äù\n\nAgain, we‚Äôre using `thread::spawn` to create a new thread and then using `move` to move `tx` into the closure so the spawned thread owns `tx`. The spawned thread needs to own the transmitter to be able to send messages through the channel. The transmitter has a `send` method that takes the value we want to send. The `send` method returns a `Result<T, E>` type, so if the receiver has already been dropped and there‚Äôs nowhere to send a value, the send operation will return an error. In this example, we‚Äôre calling `unwrap` to panic in case of an error. But in a real application, we would handle it properly: return to Chapter 9 to review strategies for proper error handling.\n\nIn Listing 16-8, we‚Äôll get the value from the receiver in the main thread. This is like retrieving the rubber duck from the water at the end of the river or receiving a chat message.\n\nFilename: src/main.rs\n\n```rust\nuse std::sync::mpsc;\nuse std::thread;\n\nfn main() {\n    let (tx, rx) = mpsc::channel();\n\n    thread::spawn(move || {\n        let val = String::from(\"hi\");\n        tx.send(val).unwrap();\n    });\n\n    let received = rx.recv().unwrap();\n    println!(\"Got: {received}\");\n}\n```\n\nListing 16-8: Receiving the value ‚Äúhi‚Äù in the main thread and printing it\n\nThe receiver has two useful methods: `recv` and `try_recv`. We‚Äôre using `recv`, short for _receive_, which will block the main thread‚Äôs execution and wait until a value is sent down the channel. Once a value is sent, `recv` will return it in a `Result<T, E>`. When the transmitter closes, `recv` will return an error to signal that no more values will be coming.\n\nThe `try_recv` method doesn‚Äôt block, but will instead return a `Result<T, E>` immediately: an `Ok` value holding a message if one is available and an `Err` value if there aren‚Äôt any messages this time. Using `try_recv` is useful if this thread has other work to do while waiting for messages: we could write a loop that calls `try_recv` every so often, handles a message if one is available, and otherwise does other work for a little while until checking again.\n\nWe‚Äôve used `recv` in this example for simplicity; we don‚Äôt have any other work for the main thread to do other than wait for messages, so blocking the main thread is appropriate.\n\nWhen we run the code in Listing 16-8, we‚Äôll see the value printed from the main thread:\n\n```text\nGot: hi\n\n```\n\nPerfect!\n\n### [Channels and Ownership Transference](#channels-and-ownership-transference)\n\nThe ownership rules play a vital role in message sending because they help you write safe, concurrent code. Preventing errors in concurrent programming is the advantage of thinking about ownership throughout your Rust programs. Let‚Äôs do an experiment to show how channels and ownership work together to prevent problems: we‚Äôll try to use a `val` value in the spawned thread _after_ we‚Äôve sent it down the channel. Try compiling the code in Listing 16-9 to see why this code isn‚Äôt allowed:\n\nFilename: src/main.rs\n\n```rust\nuse std::sync::mpsc;\nuse std::thread;\n\nfn main() {\n    let (tx, rx) = mpsc::channel();\n\n    thread::spawn(move || {\n        let val = String::from(\"hi\");\n        tx.send(val).unwrap();\n        println!(\"val is {val}\");\n    });\n\n    let received = rx.recv().unwrap();\n    println!(\"Got: {received}\");\n}\n```\n\nListing 16-9: Attempting to use `val` after we‚Äôve sent it down the channel\n\nHere, we try to print `val` after we‚Äôve sent it down the channel via `tx.send`. Allowing this would be a bad idea: once the value has been sent to another thread, that thread could modify or drop it before we try to use the value again. Potentially, the other thread‚Äôs modifications could cause errors or unexpected results due to inconsistent or nonexistent data. However, Rust gives us an error if we try to compile the code in Listing 16-9:\n\n```console\n$ cargo run\n   Compiling message-passing v0.1.0 (file:///projects/message-passing)\nerror[E0382]: borrow of moved value: `val`\n  --> src/main.rs:10:26\n   |\n8  |         let val = String::from(\"hi\");\n   |             --- move occurs because `val` has type `String`, which does not implement the `Copy` trait\n9  |         tx.send(val).unwrap();\n   |                 --- value moved here\n10 |         println!(\"val is {val}\");\n   |                          ^^^^^ value borrowed here after move\n   |\n   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider cloning the value if the performance cost is acceptable\n   |\n9  |         tx.send(val.clone()).unwrap();\n   |                    ++++++++\n\nFor more information about this error, try `rustc --explain E0382`.\nerror: could not compile `message-passing` (bin \"message-passing\") due to 1 previous error\n\n```\n\nOur concurrency mistake has caused a compile time error. The `send` function takes ownership of its parameter, and when the value is moved, the receiver takes ownership of it. This stops us from accidentally using the value again after sending it; the ownership system checks that everything is okay.\n\n### [Sending Multiple Values and Seeing the Receiver Waiting](#sending-multiple-values-and-seeing-the-receiver-waiting)\n\nThe code in Listing 16-8 compiled and ran, but it didn‚Äôt clearly show us that two separate threads were talking to each other over the channel. In Listing 16-10 we‚Äôve made some modifications that will prove the code in Listing 16-8 is running concurrently: the spawned thread will now send multiple messages and pause for a second between each message.\n\nFilename: src/main.rs\n\n```rust\nuse std::sync::mpsc;\nuse std::thread;\nuse std::time::Duration;\n\nfn main() {\n    let (tx, rx) = mpsc::channel();\n\n    thread::spawn(move || {\n        let vals = vec![\n            String::from(\"hi\"),\n            String::from(\"from\"),\n            String::from(\"the\"),\n            String::from(\"thread\"),\n        ];\n\n        for val in vals {\n            tx.send(val).unwrap();\n            thread::sleep(Duration::from_secs(1));\n        }\n    });\n\n    for received in rx {\n        println!(\"Got: {received}\");\n    }\n}\n```\n\nListing 16-10: Sending multiple messages and pausing between each\n\nThis time, the spawned thread has a vector of strings that we want to send to the main thread. We iterate over them, sending each individually, and pause between each by calling the `thread::sleep` function with a `Duration` value of 1 second.\n\nIn the main thread, we‚Äôre not calling the `recv` function explicitly anymore: instead, we‚Äôre treating `rx` as an iterator. For each value received, we‚Äôre printing it. When the channel is closed, iteration will end.\n\nWhen running the code in Listing 16-10, you should see the following output with a 1-second pause in between each line:\n\n```text\nGot: hi\nGot: from\nGot: the\nGot: thread\n\n```\n\nBecause we don‚Äôt have any code that pauses or delays in the `for` loop in the main thread, we can tell that the main thread is waiting to receive values from the spawned thread.\n\n### [Creating Multiple Producers by Cloning the Transmitter](#creating-multiple-producers-by-cloning-the-transmitter)\n\nEarlier we mentioned that `mpsc` was an acronym for _multiple producer, single consumer_. Let‚Äôs put `mpsc` to use and expand the code in Listing 16-10 to create multiple threads that all send values to the same receiver. We can do so by cloning the transmitter, as shown in Listing 16-11:\n\nFilename: src/main.rs\n\n```rust\nuse std::sync::mpsc;\nuse std::thread;\nuse std::time::Duration;\n\nfn main() {\n    // --snip--\n\n    let (tx, rx) = mpsc::channel();\n\n    let tx1 = tx.clone();\n    thread::spawn(move || {\n        let vals = vec![\n            String::from(\"hi\"),\n            String::from(\"from\"),\n            String::from(\"the\"),\n            String::from(\"thread\"),\n        ];\n\n        for val in vals {\n            tx1.send(val).unwrap();\n            thread::sleep(Duration::from_secs(1));\n        }\n    });\n\n    thread::spawn(move || {\n        let vals = vec![\n            String::from(\"more\"),\n            String::from(\"messages\"),\n            String::from(\"for\"),\n            String::from(\"you\"),\n        ];\n\n        for val in vals {\n            tx.send(val).unwrap();\n            thread::sleep(Duration::from_secs(1));\n        }\n    });\n\n    for received in rx {\n        println!(\"Got: {received}\");\n    }\n\n    // --snip--\n}\n```\n\nListing 16-11: Sending multiple messages from multiple producers\n\nThis time, before we create the first spawned thread, we call `clone` on the transmitter. This will give us a new transmitter we can pass to the first spawned thread. We pass the original transmitter to a second spawned thread. This gives us two threads, each sending different messages to the one receiver.\n\nWhen you run the code, your output should look something like this:\n\n```text\nGot: hi\nGot: more\nGot: from\nGot: messages\nGot: for\nGot: the\nGot: thread\nGot: you\n\n```\n\nYou might see the values in another order, depending on your system. This is what makes concurrency interesting as well as difficult. If you experiment with `thread::sleep`, giving it various values in the different threads, each run will be more nondeterministic and create different output each time.\n\nNow that we‚Äôve looked at how channels work, let‚Äôs look at a different method of concurrency.\n\nMessage passing is a fine way of handling concurrency, but it‚Äôs not the only one. Another method would be for multiple threads to access the same shared data. Consider this part of the slogan from the Go language documentation again: ‚Äúdo not communicate by sharing memory.‚Äù\n\nWhat would communicating by sharing memory look like? In addition, why would message-passing enthusiasts caution not to use memory sharing?\n\nIn a way, channels in any programming language are similar to single ownership, because once you transfer a value down a channel, you should no longer use that value. Shared memory concurrency is like multiple ownership: multiple threads can access the same memory location at the same time. As you saw in Chapter 15, where smart pointers made multiple ownership possible, multiple ownership can add complexity because these different owners need managing. Rust‚Äôs type system and ownership rules greatly assist in getting this management correct. For an example, let‚Äôs look at mutexes, one of the more common concurrency primitives for shared memory.\n\n### [Using Mutexes to Allow Access to Data from One Thread at a Time](#using-mutexes-to-allow-access-to-data-from-one-thread-at-a-time)\n\n_Mutex_ is an abbreviation for _mutual exclusion_, as in, a mutex allows only one thread to access some data at any given time. To access the data in a mutex, a thread must first signal that it wants access by asking to acquire the mutex‚Äôs _lock_. The lock is a data structure that is part of the mutex that keeps track of who currently has exclusive access to the data. Therefore, the mutex is described as _guarding_ the data it holds via the locking system.\n\nMutexes have a reputation for being difficult to use because you have to remember two rules:\n\n-   You must attempt to acquire the lock before using the data.\n-   When you‚Äôre done with the data that the mutex guards, you must unlock the data so other threads can acquire the lock.\n\nFor a real-world metaphor for a mutex, imagine a panel discussion at a conference with only one microphone. Before a panelist can speak, they have to ask or signal that they want to use the microphone. When they get the microphone, they can talk for as long as they want to and then hand the microphone to the next panelist who requests to speak. If a panelist forgets to hand the microphone off when they‚Äôre finished with it, no one else is able to speak. If management of the shared microphone goes wrong, the panel won‚Äôt work as planned!\n\nManagement of mutexes can be incredibly tricky to get right, which is why so many people are enthusiastic about channels. However, thanks to Rust‚Äôs type system and ownership rules, you can‚Äôt get locking and unlocking wrong.\n\n#### [The API of `Mutex<T>`](#the-api-of-mutext)\n\nAs an example of how to use a mutex, let‚Äôs start by using a mutex in a single-threaded context, as shown in Listing 16-12:\n\nFilename: src/main.rs\n\n```rust\nuse std::sync::Mutex;\n\nfn main() {\n    let m = Mutex::new(5);\n\n    {\n        let mut num = m.lock().unwrap();\n        *num = 6;\n    }\n\n    println!(\"m = {m:?}\");\n}\n```\n\nListing 16-12: Exploring the API of `Mutex<T>` in a single-threaded context for simplicity\n\nAs with many types, we create a `Mutex<T>` using the associated function `new`. To access the data inside the mutex, we use the `lock` method to acquire the lock. This call will block the current thread so it can‚Äôt do any work until it‚Äôs our turn to have the lock.\n\nThe call to `lock` would fail if another thread holding the lock panicked. In that case, no one would ever be able to get the lock, so we‚Äôve chosen to `unwrap` and have this thread panic if we‚Äôre in that situation.\n\nAfter we‚Äôve acquired the lock, we can treat the return value, named `num` in this case, as a mutable reference to the data inside. The type system ensures that we acquire a lock before using the value in `m`. The type of `m` is `Mutex<i32>`, not `i32`, so we _must_ call `lock` to be able to use the `i32` value. We can‚Äôt forget; the type system won‚Äôt let us access the inner `i32` otherwise.\n\nAs you might suspect, `Mutex<T>` is a smart pointer. More accurately, the call to `lock` _returns_ a smart pointer called `MutexGuard`, wrapped in a `LockResult` that we handled with the call to `unwrap`. The `MutexGuard` smart pointer implements `Deref` to point at our inner data; the smart pointer also has a `Drop` implementation that releases the lock automatically when a `MutexGuard` goes out of scope, which happens at the end of the inner scope. As a result, we don‚Äôt risk forgetting to release the lock and blocking the mutex from being used by other threads, because the lock release happens automatically.\n\nAfter dropping the lock, we can print the mutex value and see that we were able to change the inner `i32` to 6.\n\n#### [Sharing a `Mutex<T>` Between Multiple Threads](#sharing-a-mutext-between-multiple-threads)\n\nNow, let‚Äôs try to share a value between multiple threads using `Mutex<T>`. We‚Äôll spin up 10 threads and have them each increment a counter value by 1, so the counter goes from 0 to 10. The next example in Listing 16-13 will have a compiler error, and we‚Äôll use that error to learn more about using `Mutex<T>` and how Rust helps us use it correctly.\n\nFilename: src/main.rs\n\n```rust\nuse std::sync::Mutex;\nuse std::thread;\n\nfn main() {\n    let counter = Mutex::new(0);\n    let mut handles = vec![];\n\n    for _ in 0..10 {\n        let handle = thread::spawn(move || {\n            let mut num = counter.lock().unwrap();\n\n            *num += 1;\n        });\n        handles.push(handle);\n    }\n\n    for handle in handles {\n        handle.join().unwrap();\n    }\n\n    println!(\"Result: {}\", *counter.lock().unwrap());\n}\n```\n\nListing 16-13: Ten threads each increment a counter guarded by a `Mutex<T>`\n\nWe create a `counter` variable to hold an `i32` inside a `Mutex<T>`, as we did in Listing 16-12. Next, we create 10 threads by iterating over a range of numbers. We use `thread::spawn` and give all the threads the same closure: one that moves the counter into the thread, acquires a lock on the `Mutex<T>` by calling the `lock` method, and then adds 1 to the value in the mutex. When a thread finishes running its closure, `num` will go out of scope and release the lock so another thread can acquire it.\n\nIn the main thread, we collect all the join handles. Then, as we did in Listing 16-2, we call `join` on each handle to make sure all the threads finish. At that point, the main thread will acquire the lock and print the result of this program.\n\nWe hinted that this example wouldn‚Äôt compile. Now let‚Äôs find out why!\n\n```console\n$ cargo run\n   Compiling shared-state v0.1.0 (file:///projects/shared-state)\nerror[E0382]: borrow of moved value: `counter`\n  --> src/main.rs:21:29\n   |\n5  |     let counter = Mutex::new(0);\n   |         ------- move occurs because `counter` has type `Mutex<i32>`, which does not implement the `Copy` trait\n...\n9  |         let handle = thread::spawn(move || {\n   |                                    ------- value moved into closure here, in previous iteration of loop\n...\n21 |     println!(\"Result: {}\", *counter.lock().unwrap());\n   |                             ^^^^^^^ value borrowed here after move\n\nFor more information about this error, try `rustc --explain E0382`.\nerror: could not compile `shared-state` (bin \"shared-state\") due to 1 previous error\n\n```\n\nThe error message states that the `counter` value was moved in the previous iteration of the loop. Rust is telling us that we can‚Äôt move the ownership of `counter` into multiple threads. Let‚Äôs fix the compiler error with a multiple-ownership method we discussed in Chapter 15.\n\n#### [Multiple Ownership with Multiple Threads](#multiple-ownership-with-multiple-threads)\n\nIn Chapter 15, we gave a value multiple owners by using the smart pointer `Rc<T>` to create a reference counted value. Let‚Äôs do the same here and see what happens. We‚Äôll wrap the `Mutex<T>` in `Rc<T>` in Listing 16-14 and clone the `Rc<T>` before moving ownership to the thread.\n\nFilename: src/main.rs\n\n```rust\nuse std::rc::Rc;\nuse std::sync::Mutex;\nuse std::thread;\n\nfn main() {\n    let counter = Rc::new(Mutex::new(0));\n    let mut handles = vec![];\n\n    for _ in 0..10 {\n        let counter = Rc::clone(&counter);\n        let handle = thread::spawn(move || {\n            let mut num = counter.lock().unwrap();\n\n            *num += 1;\n        });\n        handles.push(handle);\n    }\n\n    for handle in handles {\n        handle.join().unwrap();\n    }\n\n    println!(\"Result: {}\", *counter.lock().unwrap());\n}\n```\n\nListing 16-14: Attempting to use `Rc<T>` to allow multiple threads to own the `Mutex<T>`\n\nOnce again, we compile and get‚Ä¶ different errors! The compiler is teaching us a lot.\n\n```console\n$ cargo run\n   Compiling shared-state v0.1.0 (file:///projects/shared-state)\nerror[E0277]: `Rc<Mutex<i32>>` cannot be sent between threads safely\n  --> src/main.rs:11:36\n   |\n11 |           let handle = thread::spawn(move || {\n   |                        ------------- ^------\n   |                        |             |\n   |  ______________________|_____________within this `{closure@src/main.rs:11:36: 11:43}`\n   | |                      |\n   | |                      required by a bound introduced by this call\n12 | |             let mut num = counter.lock().unwrap();\n13 | |\n14 | |             *num += 1;\n15 | |         });\n   | |_________^ `Rc<Mutex<i32>>` cannot be sent between threads safely\n   |\n   = help: within `{closure@src/main.rs:11:36: 11:43}`, the trait `Send` is not implemented for `Rc<Mutex<i32>>`, which is required by `{closure@src/main.rs:11:36: 11:43}: Send`\nnote: required because it's used within this closure\n  --> src/main.rs:11:36\n   |\n11 |         let handle = thread::spawn(move || {\n   |                                    ^^^^^^^\nnote: required by a bound in `spawn`\n  --> /rustc/9b00956e56009bab2aa15d7bff10916599e3d6d6/library/std/src/thread/mod.rs:677:1\n\nFor more information about this error, try `rustc --explain E0277`.\nerror: could not compile `shared-state` (bin \"shared-state\") due to 1 previous error\n\n```\n\nWow, that error message is very wordy! Here‚Äôs the important part to focus on: `` `Rc<Mutex<i32>>` cannot be sent between threads safely``. The compiler is also telling us the reason why: ``the trait `Send` is not implemented for `Rc<Mutex<i32>>` `` . We‚Äôll talk about `Send` in the next section: it‚Äôs one of the traits that ensures the types we use with threads are meant for use in concurrent situations.\n\nUnfortunately, `Rc<T>` is not safe to share across threads. When `Rc<T>` manages the reference count, it adds to the count for each call to `clone` and subtracts from the count when each clone is dropped. But it doesn‚Äôt use any concurrency primitives to make sure that changes to the count can‚Äôt be interrupted by another thread. This could lead to wrong counts‚Äîsubtle bugs that could in turn lead to memory leaks or a value being dropped before we‚Äôre done with it. What we need is a type exactly like `Rc<T>` but one that makes changes to the reference count in a thread-safe way.\n\n#### [Atomic Reference Counting with `Arc<T>`](#atomic-reference-counting-with-arct)\n\nFortunately, `Arc<T>` _is_ a type like `Rc<T>` that is safe to use in concurrent situations. The _a_ stands for _atomic_, meaning it‚Äôs an _atomically reference counted_ type. Atomics are an additional kind of concurrency primitive that we won‚Äôt cover in detail here: see the standard library documentation for [`std::sync::atomic`](../std/sync/atomic/index.html) for more details. At this point, you just need to know that atomics work like primitive types but are safe to share across threads.\n\nYou might then wonder why all primitive types aren‚Äôt atomic and why standard library types aren‚Äôt implemented to use `Arc<T>` by default. The reason is that thread safety comes with a performance penalty that you only want to pay when you really need to. If you‚Äôre just performing operations on values within a single thread, your code can run faster if it doesn‚Äôt have to enforce the guarantees atomics provide.\n\nLet‚Äôs return to our example: `Arc<T>` and `Rc<T>` have the same API, so we fix our program by changing the `use` line, the call to `new`, and the call to `clone`. The code in Listing 16-15 will finally compile and run:\n\nFilename: src/main.rs\n\n```rust\nuse std::sync::{Arc, Mutex};\nuse std::thread;\n\nfn main() {\n    let counter = Arc::new(Mutex::new(0));\n    let mut handles = vec![];\n\n    for _ in 0..10 {\n        let counter = Arc::clone(&counter);\n        let handle = thread::spawn(move || {\n            let mut num = counter.lock().unwrap();\n\n            *num += 1;\n        });\n        handles.push(handle);\n    }\n\n    for handle in handles {\n        handle.join().unwrap();\n    }\n\n    println!(\"Result: {}\", *counter.lock().unwrap());\n}\n```\n\nListing 16-15: Using an `Arc<T>` to wrap the `Mutex<T>` to be able to share ownership across multiple threads\n\nThis code will print the following:\n\n```text\nResult: 10\n\n```\n\nWe did it! We counted from 0 to 10, which may not seem very impressive, but it did teach us a lot about `Mutex<T>` and thread safety. You could also use this program‚Äôs structure to do more complicated operations than just incrementing a counter. Using this strategy, you can divide a calculation into independent parts, split those parts across threads, and then use a `Mutex<T>` to have each thread update the final result with its part.\n\nNote that if you are doing simple numerical operations, there are types simpler than `Mutex<T>` types provided by the [`std::sync::atomic` module of the standard library](../std/sync/atomic/index.html). These types provide safe, concurrent, atomic access to primitive types. We chose to use `Mutex<T>` with a primitive type for this example so we could concentrate on how `Mutex<T>` works.\n\n### [Similarities Between `RefCell<T>`/`Rc<T>` and `Mutex<T>`/`Arc<T>`](#similarities-between-refcelltrct-and-mutextarct)\n\nYou might have noticed that `counter` is immutable but we could get a mutable reference to the value inside it; this means `Mutex<T>` provides interior mutability, as the `Cell` family does. In the same way we used `RefCell<T>` in Chapter 15 to allow us to mutate contents inside an `Rc<T>`, we use `Mutex<T>` to mutate contents inside an `Arc<T>`.\n\nAnother detail to note is that Rust can‚Äôt protect you from all kinds of logic errors when you use `Mutex<T>`. Recall in Chapter 15 that using `Rc<T>` came with the risk of creating reference cycles, where two `Rc<T>` values refer to each other, causing memory leaks. Similarly, `Mutex<T>` comes with the risk of creating _deadlocks_. These occur when an operation needs to lock two resources and two threads have each acquired one of the locks, causing them to wait for each other forever. If you‚Äôre interested in deadlocks, try creating a Rust program that has a deadlock; then research deadlock mitigation strategies for mutexes in any language and have a go at implementing them in Rust. The standard library API documentation for `Mutex<T>` and `MutexGuard` offers useful information.\n\nWe‚Äôll round out this chapter by talking about the `Send` and `Sync` traits and how we can use them with custom types.\n\n## [Extensible Concurrency with the `Sync` and `Send` Traits](#extensible-concurrency-with-the-sync-and-send-traits)\n\nInterestingly, the Rust language has _very_ few concurrency features. Almost every concurrency feature we‚Äôve talked about so far in this chapter has been part of the standard library, not the language. Your options for handling concurrency are not limited to the language or the standard library; you can write your own concurrency features or use those written by others.\n\nHowever, two concurrency concepts are embedded in the language: the `std::marker` traits `Sync` and `Send`.\n\n### [Allowing Transference of Ownership Between Threads with `Send`](#allowing-transference-of-ownership-between-threads-with-send)\n\nThe `Send` marker trait indicates that ownership of values of the type implementing `Send` can be transferred between threads. Almost every Rust type is `Send`, but there are some exceptions, including `Rc<T>`: this cannot be `Send` because if you cloned an `Rc<T>` value and tried to transfer ownership of the clone to another thread, both threads might update the reference count at the same time. For this reason, `Rc<T>` is implemented for use in single-threaded situations where you don‚Äôt want to pay the thread-safe performance penalty.\n\nTherefore, Rust‚Äôs type system and trait bounds ensure that you can never accidentally send an `Rc<T>` value across threads unsafely. When we tried to do this in Listing 16-14, we got the error `the trait Send is not implemented for Rc<Mutex<i32>>`. When we switched to `Arc<T>`, which is `Send`, the code compiled.\n\nAny type composed entirely of `Send` types is automatically marked as `Send` as well. Almost all primitive types are `Send`, aside from raw pointers, which we‚Äôll discuss in Chapter 19.\n\n### [Allowing Access from Multiple Threads with `Sync`](#allowing-access-from-multiple-threads-with-sync)\n\nThe `Sync` marker trait indicates that it is safe for the type implementing `Sync` to be referenced from multiple threads. In other words, any type `T` is `Sync` if `&T` (an immutable reference to `T`) is `Send`, meaning the reference can be sent safely to another thread. Similar to `Send`, primitive types are `Sync`, and types composed entirely of types that are `Sync` are also `Sync`.\n\nThe smart pointer `Rc<T>` is also not `Sync` for the same reasons that it‚Äôs not `Send`. The `RefCell<T>` type (which we talked about in Chapter 15) and the family of related `Cell<T>` types are not `Sync`. The implementation of borrow checking that `RefCell<T>` does at runtime is not thread-safe. The smart pointer `Mutex<T>` is `Sync` and can be used to share access with multiple threads as you saw in the [‚ÄúSharing a `Mutex<T>` Between Multiple Threads‚Äù](about:blank/ch16-03-shared-state.html#sharing-a-mutext-between-multiple-threads) section.\n\n### [Implementing `Send` and `Sync` Manually Is Unsafe](#implementing-send-and-sync-manually-is-unsafe)\n\nBecause types that are made up of `Send` and `Sync` traits are automatically also `Send` and `Sync`, we don‚Äôt have to implement those traits manually. As marker traits, they don‚Äôt even have any methods to implement. They‚Äôre just useful for enforcing invariants related to concurrency.\n\nManually implementing these traits involves implementing unsafe Rust code. We‚Äôll talk about using unsafe Rust code in Chapter 19; for now, the important information is that building new concurrent types not made up of `Send` and `Sync` parts requires careful thought to uphold the safety guarantees. [‚ÄúThe Rustonomicon‚Äù](../nomicon/index.html) has more information about these guarantees and how to uphold them.\n\n## [Summary](#summary-15)\n\nThis isn‚Äôt the last you‚Äôll see of concurrency in this book: the project in Chapter 20 will use the concepts in this chapter in a more realistic situation than the smaller examples discussed here.\n\nAs mentioned earlier, because very little of how Rust handles concurrency is part of the language, many concurrency solutions are implemented as crates. These evolve more quickly than the standard library, so be sure to search online for the current, state-of-the-art crates to use in multithreaded situations.\n\nThe Rust standard library provides channels for message passing and smart pointer types, such as `Mutex<T>` and `Arc<T>`, that are safe to use in concurrent contexts. The type system and the borrow checker ensure that the code using these solutions won‚Äôt end up with data races or invalid references. Once you get your code to compile, you can rest assured that it will happily run on multiple threads without the kinds of hard-to-track-down bugs common in other languages. Concurrent programming is no longer a concept to be afraid of: go forth and make your programs concurrent, fearlessly!\n\nNext, we‚Äôll talk about idiomatic ways to model problems and structure solutions as your Rust programs get bigger. In addition, we‚Äôll discuss how Rust‚Äôs idioms relate to those you might be familiar with from object-oriented programming.\n\n## [Object-Oriented Programming Features of Rust](#object-oriented-programming-features-of-rust)\n\nObject-oriented programming (OOP) is a way of modeling programs. Objects as a programmatic concept were introduced in the programming language Simula in the 1960s. Those objects influenced Alan Kay‚Äôs programming architecture in which objects pass messages to each other. To describe this architecture, he coined the term _object-oriented programming_ in 1967. Many competing definitions describe what OOP is, and by some of these definitions Rust is object-oriented, but by others it is not. In this chapter, we‚Äôll explore certain characteristics that are commonly considered object-oriented and how those characteristics translate to idiomatic Rust. We‚Äôll then show you how to implement an object-oriented design pattern in Rust and discuss the trade-offs of doing so versus implementing a solution using some of Rust‚Äôs strengths instead.\n\n## [Characteristics of Object-Oriented Languages](#characteristics-of-object-oriented-languages)\n\nThere is no consensus in the programming community about what features a language must have to be considered object-oriented. Rust is influenced by many programming paradigms, including OOP; for example, we explored the features that came from functional programming in Chapter 13. Arguably, OOP languages share certain common characteristics, namely objects, encapsulation, and inheritance. Let‚Äôs look at what each of those characteristics means and whether Rust supports it.\n\n### [Objects Contain Data and Behavior](#objects-contain-data-and-behavior)\n\nThe book _Design Patterns: Elements of Reusable Object-Oriented Software_ by Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides (Addison-Wesley Professional, 1994), colloquially referred to as _The Gang of Four_ book, is a catalog of object-oriented design patterns. It defines OOP this way:\n\n> Object-oriented programs are made up of objects. An _object_ packages both data and the procedures that operate on that data. The procedures are typically called _methods_ or _operations_.\n\nUsing this definition, Rust is object-oriented: structs and enums have data, and `impl` blocks provide methods on structs and enums. Even though structs and enums with methods aren‚Äôt _called_ objects, they provide the same functionality, according to the Gang of Four‚Äôs definition of objects.\n\n### [Encapsulation that Hides Implementation Details](#encapsulation-that-hides-implementation-details)\n\nAnother aspect commonly associated with OOP is the idea of _encapsulation_, which means that the implementation details of an object aren‚Äôt accessible to code using that object. Therefore, the only way to interact with an object is through its public API; code using the object shouldn‚Äôt be able to reach into the object‚Äôs internals and change data or behavior directly. This enables the programmer to change and refactor an object‚Äôs internals without needing to change the code that uses the object.\n\nWe discussed how to control encapsulation in Chapter 7: we can use the `pub` keyword to decide which modules, types, functions, and methods in our code should be public, and by default everything else is private. For example, we can define a struct `AveragedCollection` that has a field containing a vector of `i32` values. The struct can also have a field that contains the average of the values in the vector, meaning the average doesn‚Äôt have to be computed on demand whenever anyone needs it. In other words, `AveragedCollection` will cache the calculated average for us. Listing 17-1 has the definition of the `AveragedCollection` struct:\n\nFilename: src/lib.rs\n\n```rust\npub struct AveragedCollection {\n    list: Vec<i32>,\n    average: f64,\n}\n```\n\nListing 17-1: An `AveragedCollection` struct that maintains a list of integers and the average of the items in the collection\n\nThe struct is marked `pub` so that other code can use it, but the fields within the struct remain private. This is important in this case because we want to ensure that whenever a value is added or removed from the list, the average is also updated. We do this by implementing `add`, `remove`, and `average` methods on the struct, as shown in Listing 17-2:\n\nFilename: src/lib.rs\n\n```rust\npub struct AveragedCollection {\n    list: Vec<i32>,\n    average: f64,\n}\n\nimpl AveragedCollection {\n    pub fn add(&mut self, value: i32) {\n        self.list.push(value);\n        self.update_average();\n    }\n\n    pub fn remove(&mut self) -> Option<i32> {\n        let result = self.list.pop();\n        match result {\n            Some(value) => {\n                self.update_average();\n                Some(value)\n            }\n            None => None,\n        }\n    }\n\n    pub fn average(&self) -> f64 {\n        self.average\n    }\n\n    fn update_average(&mut self) {\n        let total: i32 = self.list.iter().sum();\n        self.average = total as f64 / self.list.len() as f64;\n    }\n}\n```\n\nListing 17-2: Implementations of the public methods `add`, `remove`, and `average` on `AveragedCollection`\n\nThe public methods `add`, `remove`, and `average` are the only ways to access or modify data in an instance of `AveragedCollection`. When an item is added to `list` using the `add` method or removed using the `remove` method, the implementations of each call the private `update_average` method that handles updating the `average` field as well.\n\nWe leave the `list` and `average` fields private so there is no way for external code to add or remove items to or from the `list` field directly; otherwise, the `average` field might become out of sync when the `list` changes. The `average` method returns the value in the `average` field, allowing external code to read the `average` but not modify it.\n\nBecause we‚Äôve encapsulated the implementation details of the struct `AveragedCollection`, we can easily change aspects, such as the data structure, in the future. For instance, we could use a `HashSet<i32>` instead of a `Vec<i32>` for the `list` field. As long as the signatures of the `add`, `remove`, and `average` public methods stay the same, code using `AveragedCollection` wouldn‚Äôt need to change in order to compile. If we made `list` public instead, this wouldn‚Äôt necessarily be the case: `HashSet<i32>` and `Vec<i32>` have different methods for adding and removing items, so the external code would likely have to change if it were modifying `list` directly.\n\nIf encapsulation is a required aspect for a language to be considered object-oriented, then Rust meets that requirement. The option to use `pub` or not for different parts of code enables encapsulation of implementation details.\n\n### [Inheritance as a Type System and as Code Sharing](#inheritance-as-a-type-system-and-as-code-sharing)\n\n_Inheritance_ is a mechanism whereby an object can inherit elements from another object‚Äôs definition, thus gaining the parent object‚Äôs data and behavior without you having to define them again.\n\nIf a language must have inheritance to be an object-oriented language, then Rust is not one. There is no way to define a struct that inherits the parent struct‚Äôs fields and method implementations without using a macro.\n\nHowever, if you‚Äôre used to having inheritance in your programming toolbox, you can use other solutions in Rust, depending on your reason for reaching for inheritance in the first place.\n\nYou would choose inheritance for two main reasons. One is for reuse of code: you can implement particular behavior for one type, and inheritance enables you to reuse that implementation for a different type. You can do this in a limited way in Rust code using default trait method implementations, which you saw in Listing 10-14 when we added a default implementation of the `summarize` method on the `Summary` trait. Any type implementing the `Summary` trait would have the `summarize` method available on it without any further code. This is similar to a parent class having an implementation of a method and an inheriting child class also having the implementation of the method. We can also override the default implementation of the `summarize` method when we implement the `Summary` trait, which is similar to a child class overriding the implementation of a method inherited from a parent class.\n\nThe other reason to use inheritance relates to the type system: to enable a child type to be used in the same places as the parent type. This is also called _polymorphism_, which means that you can substitute multiple objects for each other at runtime if they share certain characteristics.\n\n### [Polymorphism](#polymorphism)\n\nTo many people, polymorphism is synonymous with inheritance. But it‚Äôs actually a more general concept that refers to code that can work with data of multiple types. For inheritance, those types are generally subclasses.\n\nRust instead uses generics to abstract over different possible types and trait bounds to impose constraints on what those types must provide. This is sometimes called _bounded parametric polymorphism_.\n\nInheritance has recently fallen out of favor as a programming design solution in many programming languages because it‚Äôs often at risk of sharing more code than necessary. Subclasses shouldn‚Äôt always share all characteristics of their parent class but will do so with inheritance. This can make a program‚Äôs design less flexible. It also introduces the possibility of calling methods on subclasses that don‚Äôt make sense or that cause errors because the methods don‚Äôt apply to the subclass. In addition, some languages will only allow single inheritance (meaning a subclass can only inherit from one class), further restricting the flexibility of a program‚Äôs design.\n\nFor these reasons, Rust takes the different approach of using trait objects instead of inheritance. Let‚Äôs look at how trait objects enable polymorphism in Rust.\n\n## [Using Trait Objects That Allow for Values of Different Types](#using-trait-objects-that-allow-for-values-of-different-types)\n\nIn Chapter 8, we mentioned that one limitation of vectors is that they can store elements of only one type. We created a workaround in Listing 8-9 where we defined a `SpreadsheetCell` enum that had variants to hold integers, floats, and text. This meant we could store different types of data in each cell and still have a vector that represented a row of cells. This is a perfectly good solution when our interchangeable items are a fixed set of types that we know when our code is compiled.\n\nHowever, sometimes we want our library user to be able to extend the set of types that are valid in a particular situation. To show how we might achieve this, we‚Äôll create an example graphical user interface (GUI) tool that iterates through a list of items, calling a `draw` method on each one to draw it to the screen‚Äîa common technique for GUI tools. We‚Äôll create a library crate called `gui` that contains the structure of a GUI library. This crate might include some types for people to use, such as `Button` or `TextField`. In addition, `gui` users will want to create their own types that can be drawn: for instance, one programmer might add an `Image` and another might add a `SelectBox`.\n\nWe won‚Äôt implement a fully fledged GUI library for this example but will show how the pieces would fit together. At the time of writing the library, we can‚Äôt know and define all the types other programmers might want to create. But we do know that `gui` needs to keep track of many values of different types, and it needs to call a `draw` method on each of these differently typed values. It doesn‚Äôt need to know exactly what will happen when we call the `draw` method, just that the value will have that method available for us to call.\n\nTo do this in a language with inheritance, we might define a class named `Component` that has a method named `draw` on it. The other classes, such as `Button`, `Image`, and `SelectBox`, would inherit from `Component` and thus inherit the `draw` method. They could each override the `draw` method to define their custom behavior, but the framework could treat all of the types as if they were `Component` instances and call `draw` on them. But because Rust doesn‚Äôt have inheritance, we need another way to structure the `gui` library to allow users to extend it with new types.\n\n### [Defining a Trait for Common Behavior](#defining-a-trait-for-common-behavior)\n\nTo implement the behavior we want `gui` to have, we‚Äôll define a trait named `Draw` that will have one method named `draw`. Then we can define a vector that takes a _trait object_. A trait object points to both an instance of a type implementing our specified trait and a table used to look up trait methods on that type at runtime. We create a trait object by specifying some sort of pointer, such as a `&` reference or a `Box<T>` smart pointer, then the `dyn` keyword, and then specifying the relevant trait. (We‚Äôll talk about the reason trait objects must use a pointer in Chapter 19 in the section [‚ÄúDynamically Sized Types and the `Sized` Trait.‚Äù](about:blank/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait)) We can use trait objects in place of a generic or concrete type. Wherever we use a trait object, Rust‚Äôs type system will ensure at compile time that any value used in that context will implement the trait object‚Äôs trait. Consequently, we don‚Äôt need to know all the possible types at compile time.\n\nWe‚Äôve mentioned that, in Rust, we refrain from calling structs and enums ‚Äúobjects‚Äù to distinguish them from other languages‚Äô objects. In a struct or enum, the data in the struct fields and the behavior in `impl` blocks are separated, whereas in other languages, the data and behavior combined into one concept is often labeled an object. However, trait objects _are_ more like objects in other languages in the sense that they combine data and behavior. But trait objects differ from traditional objects in that we can‚Äôt add data to a trait object. Trait objects aren‚Äôt as generally useful as objects in other languages: their specific purpose is to allow abstraction across common behavior.\n\nListing 17-3 shows how to define a trait named `Draw` with one method named `draw`:\n\nFilename: src/lib.rs\n\n```rust\npub trait Draw {\n    fn draw(&self);\n}\n```\n\nListing 17-3: Definition of the `Draw` trait\n\nThis syntax should look familiar from our discussions on how to define traits in Chapter 10. Next comes some new syntax: Listing 17-4 defines a struct named `Screen` that holds a vector named `components`. This vector is of type `Box<dyn Draw>`, which is a trait object; it‚Äôs a stand-in for any type inside a `Box` that implements the `Draw` trait.\n\nFilename: src/lib.rs\n\n```rust\npub trait Draw {\n    fn draw(&self);\n}\n\npub struct Screen {\n    pub components: Vec<Box<dyn Draw>>,\n}\n```\n\nListing 17-4: Definition of the `Screen` struct with a `components` field holding a vector of trait objects that implement the `Draw` trait\n\nOn the `Screen` struct, we‚Äôll define a method named `run` that will call the `draw` method on each of its `components`, as shown in Listing 17-5:\n\nFilename: src/lib.rs\n\n```rust\npub trait Draw {\n    fn draw(&self);\n}\n\npub struct Screen {\n    pub components: Vec<Box<dyn Draw>>,\n}\n\nimpl Screen {\n    pub fn run(&self) {\n        for component in self.components.iter() {\n            component.draw();\n        }\n    }\n}\n```\n\nListing 17-5: A `run` method on `Screen` that calls the `draw` method on each component\n\nThis works differently from defining a struct that uses a generic type parameter with trait bounds. A generic type parameter can only be substituted with one concrete type at a time, whereas trait objects allow for multiple concrete types to fill in for the trait object at runtime. For example, we could have defined the `Screen` struct using a generic type and a trait bound as in Listing 17-6:\n\nFilename: src/lib.rs\n\n```rust\npub trait Draw {\n    fn draw(&self);\n}\n\npub struct Screen<T: Draw> {\n    pub components: Vec<T>,\n}\n\nimpl<T> Screen<T>\nwhere\n    T: Draw,\n{\n    pub fn run(&self) {\n        for component in self.components.iter() {\n            component.draw();\n        }\n    }\n}\n```\n\nListing 17-6: An alternate implementation of the `Screen` struct and its `run` method using generics and trait bounds\n\nThis restricts us to a `Screen` instance that has a list of components all of type `Button` or all of type `TextField`. If you‚Äôll only ever have homogeneous collections, using generics and trait bounds is preferable because the definitions will be monomorphized at compile time to use the concrete types.\n\nOn the other hand, with the method using trait objects, one `Screen` instance can hold a `Vec<T>` that contains a `Box<Button>` as well as a `Box<TextField>`. Let‚Äôs look at how this works, and then we‚Äôll talk about the runtime performance implications.\n\n### [Implementing the Trait](#implementing-the-trait)\n\nNow we‚Äôll add some types that implement the `Draw` trait. We‚Äôll provide the `Button` type. Again, actually implementing a GUI library is beyond the scope of this book, so the `draw` method won‚Äôt have any useful implementation in its body. To imagine what the implementation might look like, a `Button` struct might have fields for `width`, `height`, and `label`, as shown in Listing 17-7:\n\nFilename: src/lib.rs\n\n```rust\npub trait Draw {\n    fn draw(&self);\n}\n\npub struct Screen {\n    pub components: Vec<Box<dyn Draw>>,\n}\n\nimpl Screen {\n    pub fn run(&self) {\n        for component in self.components.iter() {\n            component.draw();\n        }\n    }\n}\n\npub struct Button {\n    pub width: u32,\n    pub height: u32,\n    pub label: String,\n}\n\nimpl Draw for Button {\n    fn draw(&self) {\n        // code to actually draw a button\n    }\n}\n```\n\nListing 17-7: A `Button` struct that implements the `Draw` trait\n\nThe `width`, `height`, and `label` fields on `Button` will differ from the fields on other components; for example, a `TextField` type might have those same fields plus a `placeholder` field. Each of the types we want to draw on the screen will implement the `Draw` trait but will use different code in the `draw` method to define how to draw that particular type, as `Button` has here (without the actual GUI code, as mentioned). The `Button` type, for instance, might have an additional `impl` block containing methods related to what happens when a user clicks the button. These kinds of methods won‚Äôt apply to types like `TextField`.\n\nIf someone using our library decides to implement a `SelectBox` struct that has `width`, `height`, and `options` fields, they implement the `Draw` trait on the `SelectBox` type as well, as shown in Listing 17-8:\n\nFilename: src/main.rs\n\n```rust\nuse gui::Draw;\n\nstruct SelectBox {\n    width: u32,\n    height: u32,\n    options: Vec<String>,\n}\n\nimpl Draw for SelectBox {\n    fn draw(&self) {\n        // code to actually draw a select box\n    }\n}\n\nfn main() {}\n```\n\nListing 17-8: Another crate using `gui` and implementing the `Draw` trait on a `SelectBox` struct\n\nOur library‚Äôs user can now write their `main` function to create a `Screen` instance. To the `Screen` instance, they can add a `SelectBox` and a `Button` by putting each in a `Box<T>` to become a trait object. They can then call the `run` method on the `Screen` instance, which will call `draw` on each of the components. Listing 17-9 shows this implementation:\n\nFilename: src/main.rs\n\n```rust\nuse gui::Draw;\n\nstruct SelectBox {\n    width: u32,\n    height: u32,\n    options: Vec<String>,\n}\n\nimpl Draw for SelectBox {\n    fn draw(&self) {\n        // code to actually draw a select box\n    }\n}\n\nuse gui::{Button, Screen};\n\nfn main() {\n    let screen = Screen {\n        components: vec![\n            Box::new(SelectBox {\n                width: 75,\n                height: 10,\n                options: vec![\n                    String::from(\"Yes\"),\n                    String::from(\"Maybe\"),\n                    String::from(\"No\"),\n                ],\n            }),\n            Box::new(Button {\n                width: 50,\n                height: 10,\n                label: String::from(\"OK\"),\n            }),\n        ],\n    };\n\n    screen.run();\n}\n```\n\nListing 17-9: Using trait objects to store values of different types that implement the same trait\n\nWhen we wrote the library, we didn‚Äôt know that someone might add the `SelectBox` type, but our `Screen` implementation was able to operate on the new type and draw it because `SelectBox` implements the `Draw` trait, which means it implements the `draw` method.\n\nThis concept‚Äîof being concerned only with the messages a value responds to rather than the value‚Äôs concrete type‚Äîis similar to the concept of _duck typing_ in dynamically typed languages: if it walks like a duck and quacks like a duck, then it must be a duck! In the implementation of `run` on `Screen` in Listing 17-5, `run` doesn‚Äôt need to know what the concrete type of each component is. It doesn‚Äôt check whether a component is an instance of a `Button` or a `SelectBox`, it just calls the `draw` method on the component. By specifying `Box<dyn Draw>` as the type of the values in the `components` vector, we‚Äôve defined `Screen` to need values that we can call the `draw` method on.\n\nThe advantage of using trait objects and Rust‚Äôs type system to write code similar to code using duck typing is that we never have to check whether a value implements a particular method at runtime or worry about getting errors if a value doesn‚Äôt implement a method but we call it anyway. Rust won‚Äôt compile our code if the values don‚Äôt implement the traits that the trait objects need.\n\nFor example, Listing 17-10 shows what happens if we try to create a `Screen` with a `String` as a component:\n\nFilename: src/main.rs\n\n```rust\nuse gui::Screen;\n\nfn main() {\n    let screen = Screen {\n        components: vec![Box::new(String::from(\"Hi\"))],\n    };\n\n    screen.run();\n}\n```\n\nListing 17-10: Attempting to use a type that doesn‚Äôt implement the trait object‚Äôs trait\n\nWe‚Äôll get this error because `String` doesn‚Äôt implement the `Draw` trait:\n\n```console\n$ cargo run\n   Compiling gui v0.1.0 (file:///projects/gui)\nerror[E0277]: the trait bound `String: Draw` is not satisfied\n --> src/main.rs:5:26\n  |\n5 |         components: vec![Box::new(String::from(\"Hi\"))],\n  |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Draw` is not implemented for `String`\n  |\n  = help: the trait `Draw` is implemented for `Button`\n  = note: required for the cast from `Box<String>` to `Box<dyn Draw>`\n\nFor more information about this error, try `rustc --explain E0277`.\nerror: could not compile `gui` (bin \"gui\") due to 1 previous error\n\n```\n\nThis error lets us know that either we‚Äôre passing something to `Screen` we didn‚Äôt mean to pass and so should pass a different type or we should implement `Draw` on `String` so that `Screen` is able to call `draw` on it.\n\n### [Trait Objects Perform Dynamic Dispatch](#trait-objects-perform-dynamic-dispatch)\n\nRecall in the [‚ÄúPerformance of Code Using Generics‚Äù](about:blank/ch10-01-syntax.html#performance-of-code-using-generics) section in Chapter 10 our discussion on the monomorphization process performed by the compiler when we use trait bounds on generics: the compiler generates nongeneric implementations of functions and methods for each concrete type that we use in place of a generic type parameter. The code that results from monomorphization is doing _static dispatch_, which is when the compiler knows what method you‚Äôre calling at compile time. This is opposed to _dynamic dispatch_, which is when the compiler can‚Äôt tell at compile time which method you‚Äôre calling. In dynamic dispatch cases, the compiler emits code that at runtime will figure out which method to call.\n\nWhen we use trait objects, Rust must use dynamic dispatch. The compiler doesn‚Äôt know all the types that might be used with the code that‚Äôs using trait objects, so it doesn‚Äôt know which method implemented on which type to call. Instead, at runtime, Rust uses the pointers inside the trait object to know which method to call. This lookup incurs a runtime cost that doesn‚Äôt occur with static dispatch. Dynamic dispatch also prevents the compiler from choosing to inline a method‚Äôs code, which in turn prevents some optimizations. However, we did get extra flexibility in the code that we wrote in Listing 17-5 and were able to support in Listing 17-9, so it‚Äôs a trade-off to consider.\n\n## [Implementing an Object-Oriented Design Pattern](#implementing-an-object-oriented-design-pattern)\n\nThe _state pattern_ is an object-oriented design pattern. The crux of the pattern is that we define a set of states a value can have internally. The states are represented by a set of _state objects_, and the value‚Äôs behavior changes based on its state. We‚Äôre going to work through an example of a blog post struct that has a field to hold its state, which will be a state object from the set ‚Äúdraft‚Äù, ‚Äúreview‚Äù, or ‚Äúpublished‚Äù.\n\nThe state objects share functionality: in Rust, of course, we use structs and traits rather than objects and inheritance. Each state object is responsible for its own behavior and for governing when it should change into another state. The value that holds a state object knows nothing about the different behavior of the states or when to transition between states.\n\nThe advantage of using the state pattern is that, when the business requirements of the program change, we won‚Äôt need to change the code of the value holding the state or the code that uses the value. We‚Äôll only need to update the code inside one of the state objects to change its rules or perhaps add more state objects.\n\nFirst, we‚Äôre going to implement the state pattern in a more traditional object-oriented way, then we‚Äôll use an approach that‚Äôs a bit more natural in Rust. Let‚Äôs dig in to incrementally implementing a blog post workflow using the state pattern.\n\nThe final functionality will look like this:\n\n1.  A blog post starts as an empty draft.\n2.  When the draft is done, a review of the post is requested.\n3.  When the post is approved, it gets published.\n4.  Only published blog posts return content to print, so unapproved posts can‚Äôt accidentally be published.\n\nAny other changes attempted on a post should have no effect. For example, if we try to approve a draft blog post before we‚Äôve requested a review, the post should remain an unpublished draft.\n\nListing 17-11 shows this workflow in code form: this is an example usage of the API we‚Äôll implement in a library crate named `blog`. This won‚Äôt compile yet because we haven‚Äôt implemented the `blog` crate.\n\nFilename: src/main.rs\n\n```rust\nuse blog::Post;\n\nfn main() {\n    let mut post = Post::new();\n\n    post.add_text(\"I ate a salad for lunch today\");\n    assert_eq!(\"\", post.content());\n\n    post.request_review();\n    assert_eq!(\"\", post.content());\n\n    post.approve();\n    assert_eq!(\"I ate a salad for lunch today\", post.content());\n}\n```\n\nListing 17-11: Code that demonstrates the desired behavior we want our `blog` crate to have\n\nWe want to allow the user to create a new draft blog post with `Post::new`. We want to allow text to be added to the blog post. If we try to get the post‚Äôs content immediately, before approval, we shouldn‚Äôt get any text because the post is still a draft. We‚Äôve added `assert_eq!` in the code for demonstration purposes. An excellent unit test for this would be to assert that a draft blog post returns an empty string from the `content` method, but we‚Äôre not going to write tests for this example.\n\nNext, we want to enable a request for a review of the post, and we want `content` to return an empty string while waiting for the review. When the post receives approval, it should get published, meaning the text of the post will be returned when `content` is called.\n\nNotice that the only type we‚Äôre interacting with from the crate is the `Post` type. This type will use the state pattern and will hold a value that will be one of three state objects representing the various states a post can be in‚Äîdraft, waiting for review, or published. Changing from one state to another will be managed internally within the `Post` type. The states change in response to the methods called by our library‚Äôs users on the `Post` instance, but they don‚Äôt have to manage the state changes directly. Also, users can‚Äôt make a mistake with the states, like publishing a post before it‚Äôs reviewed.\n\n### [Defining `Post` and Creating a New Instance in the Draft State](#defining-post-and-creating-a-new-instance-in-the-draft-state)\n\nLet‚Äôs get started on the implementation of the library! We know we need a public `Post` struct that holds some content, so we‚Äôll start with the definition of the struct and an associated public `new` function to create an instance of `Post`, as shown in Listing 17-12. We‚Äôll also make a private `State` trait that will define the behavior that all state objects for a `Post` must have.\n\nThen `Post` will hold a trait object of `Box<dyn State>` inside an `Option<T>` in a private field named `state` to hold the state object. You‚Äôll see why the `Option<T>` is necessary in a bit.\n\nFilename: src/lib.rs\n\n```rust\npub struct Post {\n    state: Option<Box<dyn State>>,\n    content: String,\n}\n\nimpl Post {\n    pub fn new() -> Post {\n        Post {\n            state: Some(Box::new(Draft {})),\n            content: String::new(),\n        }\n    }\n}\n\ntrait State {}\n\nstruct Draft {}\n\nimpl State for Draft {}\n```\n\nListing 17-12: Definition of a `Post` struct and a `new` function that creates a new `Post` instance, a `State` trait, and a `Draft` struct\n\nThe `State` trait defines the behavior shared by different post states. The state objects are `Draft`, `PendingReview`, and `Published`, and they will all implement the `State` trait. For now, the trait doesn‚Äôt have any methods, and we‚Äôll start by defining just the `Draft` state because that is the state we want a post to start in.\n\nWhen we create a new `Post`, we set its `state` field to a `Some` value that holds a `Box`. This `Box` points to a new instance of the `Draft` struct. This ensures whenever we create a new instance of `Post`, it will start out as a draft. Because the `state` field of `Post` is private, there is no way to create a `Post` in any other state! In the `Post::new` function, we set the `content` field to a new, empty `String`.\n\n### [Storing the Text of the Post Content](#storing-the-text-of-the-post-content)\n\nWe saw in Listing 17-11 that we want to be able to call a method named `add_text` and pass it a `&str` that is then added as the text content of the blog post. We implement this as a method, rather than exposing the `content` field as `pub`, so that later we can implement a method that will control how the `content` field‚Äôs data is read. The `add_text` method is pretty straightforward, so let‚Äôs add the implementation in Listing 17-13 to the `impl Post` block:\n\nFilename: src/lib.rs\n\n```rust\npub struct Post {\n    state: Option<Box<dyn State>>,\n    content: String,\n}\n\nimpl Post {\n    // --snip--\n    pub fn new() -> Post {\n        Post {\n            state: Some(Box::new(Draft {})),\n            content: String::new(),\n        }\n    }\n\n    pub fn add_text(&mut self, text: &str) {\n        self.content.push_str(text);\n    }\n}\n\ntrait State {}\n\nstruct Draft {}\n\nimpl State for Draft {}\n```\n\nListing 17-13: Implementing the `add_text` method to add text to a post‚Äôs `content`\n\nThe `add_text` method takes a mutable reference to `self`, because we‚Äôre changing the `Post` instance that we‚Äôre calling `add_text` on. We then call `push_str` on the `String` in `content` and pass the `text` argument to add to the saved `content`. This behavior doesn‚Äôt depend on the state the post is in, so it‚Äôs not part of the state pattern. The `add_text` method doesn‚Äôt interact with the `state` field at all, but it is part of the behavior we want to support.\n\n### [Ensuring the Content of a Draft Post Is Empty](#ensuring-the-content-of-a-draft-post-is-empty)\n\nEven after we‚Äôve called `add_text` and added some content to our post, we still want the `content` method to return an empty string slice because the post is still in the draft state, as shown on line 7 of Listing 17-11. For now, let‚Äôs implement the `content` method with the simplest thing that will fulfill this requirement: always returning an empty string slice. We‚Äôll change this later once we implement the ability to change a post‚Äôs state so it can be published. So far, posts can only be in the draft state, so the post content should always be empty. Listing 17-14 shows this placeholder implementation:\n\nFilename: src/lib.rs\n\n```rust\npub struct Post {\n    state: Option<Box<dyn State>>,\n    content: String,\n}\n\nimpl Post {\n    // --snip--\n    pub fn new() -> Post {\n        Post {\n            state: Some(Box::new(Draft {})),\n            content: String::new(),\n        }\n    }\n\n    pub fn add_text(&mut self, text: &str) {\n        self.content.push_str(text);\n    }\n\n    pub fn content(&self) -> &str {\n        \"\"\n    }\n}\n\ntrait State {}\n\nstruct Draft {}\n\nimpl State for Draft {}\n```\n\nListing 17-14: Adding a placeholder implementation for the `content` method on `Post` that always returns an empty string slice\n\nWith this added `content` method, everything in Listing 17-11 up to line 7 works as intended.\n\n### [Requesting a Review of the Post Changes Its State](#requesting-a-review-of-the-post-changes-its-state)\n\nNext, we need to add functionality to request a review of a post, which should change its state from `Draft` to `PendingReview`. Listing 17-15 shows this code:\n\nFilename: src/lib.rs\n\n```rust\npub struct Post {\n    state: Option<Box<dyn State>>,\n    content: String,\n}\n\nimpl Post {\n    // --snip--\n    pub fn new() -> Post {\n        Post {\n            state: Some(Box::new(Draft {})),\n            content: String::new(),\n        }\n    }\n\n    pub fn add_text(&mut self, text: &str) {\n        self.content.push_str(text);\n    }\n\n    pub fn content(&self) -> &str {\n        \"\"\n    }\n\n    pub fn request_review(&mut self) {\n        if let Some(s) = self.state.take() {\n            self.state = Some(s.request_review())\n        }\n    }\n}\n\ntrait State {\n    fn request_review(self: Box<Self>) -> Box<dyn State>;\n}\n\nstruct Draft {}\n\nimpl State for Draft {\n    fn request_review(self: Box<Self>) -> Box<dyn State> {\n        Box::new(PendingReview {})\n    }\n}\n\nstruct PendingReview {}\n\nimpl State for PendingReview {\n    fn request_review(self: Box<Self>) -> Box<dyn State> {\n        self\n    }\n}\n```\n\nListing 17-15: Implementing `request_review` methods on `Post` and the `State` trait\n\nWe give `Post` a public method named `request_review` that will take a mutable reference to `self`. Then we call an internal `request_review` method on the current state of `Post`, and this second `request_review` method consumes the current state and returns a new state.\n\nWe add the `request_review` method to the `State` trait; all types that implement the trait will now need to implement the `request_review` method. Note that rather than having `self`, `&self`, or `&mut self` as the first parameter of the method, we have `self: Box<Self>`. This syntax means the method is only valid when called on a `Box` holding the type. This syntax takes ownership of `Box<Self>`, invalidating the old state so the state value of the `Post` can transform into a new state.\n\nTo consume the old state, the `request_review` method needs to take ownership of the state value. This is where the `Option` in the `state` field of `Post` comes in: we call the `take` method to take the `Some` value out of the `state` field and leave a `None` in its place, because Rust doesn‚Äôt let us have unpopulated fields in structs. This lets us move the `state` value out of `Post` rather than borrowing it. Then we‚Äôll set the post‚Äôs `state` value to the result of this operation.\n\nWe need to set `state` to `None` temporarily rather than setting it directly with code like `self.state = self.state.request_review();` to get ownership of the `state` value. This ensures `Post` can‚Äôt use the old `state` value after we‚Äôve transformed it into a new state.\n\nThe `request_review` method on `Draft` returns a new, boxed instance of a new `PendingReview` struct, which represents the state when a post is waiting for a review. The `PendingReview` struct also implements the `request_review` method but doesn‚Äôt do any transformations. Rather, it returns itself, because when we request a review on a post already in the `PendingReview` state, it should stay in the `PendingReview` state.\n\nNow we can start seeing the advantages of the state pattern: the `request_review` method on `Post` is the same no matter its `state` value. Each state is responsible for its own rules.\n\nWe‚Äôll leave the `content` method on `Post` as is, returning an empty string slice. We can now have a `Post` in the `PendingReview` state as well as in the `Draft` state, but we want the same behavior in the `PendingReview` state. Listing 17-11 now works up to line 10!\n\n### [Adding `approve` to Change the Behavior of `content`](#adding-approve-to-change-the-behavior-of-content)\n\nThe `approve` method will be similar to the `request_review` method: it will set `state` to the value that the current state says it should have when that state is approved, as shown in Listing 17-16:\n\nFilename: src/lib.rs\n\n```rust\npub struct Post {\n    state: Option<Box<dyn State>>,\n    content: String,\n}\n\nimpl Post {\n    // --snip--\n    pub fn new() -> Post {\n        Post {\n            state: Some(Box::new(Draft {})),\n            content: String::new(),\n        }\n    }\n\n    pub fn add_text(&mut self, text: &str) {\n        self.content.push_str(text);\n    }\n\n    pub fn content(&self) -> &str {\n        \"\"\n    }\n\n    pub fn request_review(&mut self) {\n        if let Some(s) = self.state.take() {\n            self.state = Some(s.request_review())\n        }\n    }\n\n    pub fn approve(&mut self) {\n        if let Some(s) = self.state.take() {\n            self.state = Some(s.approve())\n        }\n    }\n}\n\ntrait State {\n    fn request_review(self: Box<Self>) -> Box<dyn State>;\n    fn approve(self: Box<Self>) -> Box<dyn State>;\n}\n\nstruct Draft {}\n\nimpl State for Draft {\n    // --snip--\n    fn request_review(self: Box<Self>) -> Box<dyn State> {\n        Box::new(PendingReview {})\n    }\n\n    fn approve(self: Box<Self>) -> Box<dyn State> {\n        self\n    }\n}\n\nstruct PendingReview {}\n\nimpl State for PendingReview {\n    // --snip--\n    fn request_review(self: Box<Self>) -> Box<dyn State> {\n        self\n    }\n\n    fn approve(self: Box<Self>) -> Box<dyn State> {\n        Box::new(Published {})\n    }\n}\n\nstruct Published {}\n\nimpl State for Published {\n    fn request_review(self: Box<Self>) -> Box<dyn State> {\n        self\n    }\n\n    fn approve(self: Box<Self>) -> Box<dyn State> {\n        self\n    }\n}\n```\n\nListing 17-16: Implementing the `approve` method on `Post` and the `State` trait\n\nWe add the `approve` method to the `State` trait and add a new struct that implements `State`, the `Published` state.\n\nSimilar to the way `request_review` on `PendingReview` works, if we call the `approve` method on a `Draft`, it will have no effect because `approve` will return `self`. When we call `approve` on `PendingReview`, it returns a new, boxed instance of the `Published` struct. The `Published` struct implements the `State` trait, and for both the `request_review` method and the `approve` method, it returns itself, because the post should stay in the `Published` state in those cases.\n\nNow we need to update the `content` method on `Post`. We want the value returned from `content` to depend on the current state of the `Post`, so we‚Äôre going to have the `Post` delegate to a `content` method defined on its `state`, as shown in Listing 17-17:\n\nFilename: src/lib.rs\n\n```rust\npub struct Post {\n    state: Option<Box<dyn State>>,\n    content: String,\n}\n\nimpl Post {\n    // --snip--\n    pub fn new() -> Post {\n        Post {\n            state: Some(Box::new(Draft {})),\n            content: String::new(),\n        }\n    }\n\n    pub fn add_text(&mut self, text: &str) {\n        self.content.push_str(text);\n    }\n\n    pub fn content(&self) -> &str {\n        self.state.as_ref().unwrap().content(self)\n    }\n    // --snip--\n\n    pub fn request_review(&mut self) {\n        if let Some(s) = self.state.take() {\n            self.state = Some(s.request_review())\n        }\n    }\n\n    pub fn approve(&mut self) {\n        if let Some(s) = self.state.take() {\n            self.state = Some(s.approve())\n        }\n    }\n}\n\ntrait State {\n    fn request_review(self: Box<Self>) -> Box<dyn State>;\n    fn approve(self: Box<Self>) -> Box<dyn State>;\n}\n\nstruct Draft {}\n\nimpl State for Draft {\n    fn request_review(self: Box<Self>) -> Box<dyn State> {\n        Box::new(PendingReview {})\n    }\n\n    fn approve(self: Box<Self>) -> Box<dyn State> {\n        self\n    }\n}\n\nstruct PendingReview {}\n\nimpl State for PendingReview {\n    fn request_review(self: Box<Self>) -> Box<dyn State> {\n        self\n    }\n\n    fn approve(self: Box<Self>) -> Box<dyn State> {\n        Box::new(Published {})\n    }\n}\n\nstruct Published {}\n\nimpl State for Published {\n    fn request_review(self: Box<Self>) -> Box<dyn State> {\n        self\n    }\n\n    fn approve(self: Box<Self>) -> Box<dyn State> {\n        self\n    }\n}\n```\n\nListing 17-17: Updating the `content` method on `Post` to delegate to a `content` method on `State`\n\nBecause the goal is to keep all these rules inside the structs that implement `State`, we call a `content` method on the value in `state` and pass the post instance (that is, `self`) as an argument. Then we return the value that‚Äôs returned from using the `content` method on the `state` value.\n\nWe call the `as_ref` method on the `Option` because we want a reference to the value inside the `Option` rather than ownership of the value. Because `state` is an `Option<Box<dyn State>>`, when we call `as_ref`, an `Option<&Box<dyn State>>` is returned. If we didn‚Äôt call `as_ref`, we would get an error because we can‚Äôt move `state` out of the borrowed `&self` of the function parameter.\n\nWe then call the `unwrap` method, which we know will never panic, because we know the methods on `Post` ensure that `state` will always contain a `Some` value when those methods are done. This is one of the cases we talked about in the [‚ÄúCases In Which You Have More Information Than the Compiler‚Äù](about:blank/ch09-03-to-panic-or-not-to-panic.html#cases-in-which-you-have-more-information-than-the-compiler) section of Chapter 9 when we know that a `None` value is never possible, even though the compiler isn‚Äôt able to understand that.\n\nAt this point, when we call `content` on the `&Box<dyn State>`, deref coercion will take effect on the `&` and the `Box` so the `content` method will ultimately be called on the type that implements the `State` trait. That means we need to add `content` to the `State` trait definition, and that is where we‚Äôll put the logic for what content to return depending on which state we have, as shown in Listing 17-18:\n\nFilename: src/lib.rs\n\n```rust\npub struct Post {\n    state: Option<Box<dyn State>>,\n    content: String,\n}\n\nimpl Post {\n    pub fn new() -> Post {\n        Post {\n            state: Some(Box::new(Draft {})),\n            content: String::new(),\n        }\n    }\n\n    pub fn add_text(&mut self, text: &str) {\n        self.content.push_str(text);\n    }\n\n    pub fn content(&self) -> &str {\n        self.state.as_ref().unwrap().content(self)\n    }\n\n    pub fn request_review(&mut self) {\n        if let Some(s) = self.state.take() {\n            self.state = Some(s.request_review())\n        }\n    }\n\n    pub fn approve(&mut self) {\n        if let Some(s) = self.state.take() {\n            self.state = Some(s.approve())\n        }\n    }\n}\n\ntrait State {\n    // --snip--\n    fn request_review(self: Box<Self>) -> Box<dyn State>;\n    fn approve(self: Box<Self>) -> Box<dyn State>;\n\n    fn content<'a>(&self, post: &'a Post) -> &'a str {\n        \"\"\n    }\n}\n\n// --snip--\n\nstruct Draft {}\n\nimpl State for Draft {\n    fn request_review(self: Box<Self>) -> Box<dyn State> {\n        Box::new(PendingReview {})\n    }\n\n    fn approve(self: Box<Self>) -> Box<dyn State> {\n        self\n    }\n}\n\nstruct PendingReview {}\n\nimpl State for PendingReview {\n    fn request_review(self: Box<Self>) -> Box<dyn State> {\n        self\n    }\n\n    fn approve(self: Box<Self>) -> Box<dyn State> {\n        Box::new(Published {})\n    }\n}\n\nstruct Published {}\n\nimpl State for Published {\n    // --snip--\n    fn request_review(self: Box<Self>) -> Box<dyn State> {\n        self\n    }\n\n    fn approve(self: Box<Self>) -> Box<dyn State> {\n        self\n    }\n\n    fn content<'a>(&self, post: &'a Post) -> &'a str {\n        &post.content\n    }\n}\n```\n\nListing 17-18: Adding the `content` method to the `State` trait\n\nWe add a default implementation for the `content` method that returns an empty string slice. That means we don‚Äôt need to implement `content` on the `Draft` and `PendingReview` structs. The `Published` struct will override the `content` method and return the value in `post.content`.\n\nNote that we need lifetime annotations on this method, as we discussed in Chapter 10. We‚Äôre taking a reference to a `post` as an argument and returning a reference to part of that `post`, so the lifetime of the returned reference is related to the lifetime of the `post` argument.\n\nAnd we‚Äôre done‚Äîall of Listing 17-11 now works! We‚Äôve implemented the state pattern with the rules of the blog post workflow. The logic related to the rules lives in the state objects rather than being scattered throughout `Post`.\n\n#### [Why Not An Enum?](#why-not-an-enum)\n\nYou may have been wondering why we didn‚Äôt use an `enum` with the different possible post states as variants. That‚Äôs certainly a possible solution, try it and compare the end results to see which you prefer! One disadvantage of using an enum is every place that checks the value of the enum will need a `match` expression or similar to handle every possible variant. This could get more repetitive than this trait object solution.\n\n### [Trade-offs of the State Pattern](#trade-offs-of-the-state-pattern)\n\nWe‚Äôve shown that Rust is capable of implementing the object-oriented state pattern to encapsulate the different kinds of behavior a post should have in each state. The methods on `Post` know nothing about the various behaviors. The way we organized the code, we have to look in only one place to know the different ways a published post can behave: the implementation of the `State` trait on the `Published` struct.\n\nIf we were to create an alternative implementation that didn‚Äôt use the state pattern, we might instead use `match` expressions in the methods on `Post` or even in the `main` code that checks the state of the post and changes behavior in those places. That would mean we would have to look in several places to understand all the implications of a post being in the published state! This would only increase the more states we added: each of those `match` expressions would need another arm.\n\nWith the state pattern, the `Post` methods and the places we use `Post` don‚Äôt need `match` expressions, and to add a new state, we would only need to add a new struct and implement the trait methods on that one struct.\n\nThe implementation using the state pattern is easy to extend to add more functionality. To see the simplicity of maintaining code that uses the state pattern, try a few of these suggestions:\n\n-   Add a `reject` method that changes the post‚Äôs state from `PendingReview` back to `Draft`.\n-   Require two calls to `approve` before the state can be changed to `Published`.\n-   Allow users to add text content only when a post is in the `Draft` state. Hint: have the state object responsible for what might change about the content but not responsible for modifying the `Post`.\n\nOne downside of the state pattern is that, because the states implement the transitions between states, some of the states are coupled to each other. If we add another state between `PendingReview` and `Published`, such as `Scheduled`, we would have to change the code in `PendingReview` to transition to `Scheduled` instead. It would be less work if `PendingReview` didn‚Äôt need to change with the addition of a new state, but that would mean switching to another design pattern.\n\nAnother downside is that we‚Äôve duplicated some logic. To eliminate some of the duplication, we might try to make default implementations for the `request_review` and `approve` methods on the `State` trait that return `self`; however, this would violate object safety, because the trait doesn‚Äôt know what the concrete `self` will be exactly. We want to be able to use `State` as a trait object, so we need its methods to be object safe.\n\nOther duplication includes the similar implementations of the `request_review` and `approve` methods on `Post`. Both methods delegate to the implementation of the same method on the value in the `state` field of `Option` and set the new value of the `state` field to the result. If we had a lot of methods on `Post` that followed this pattern, we might consider defining a macro to eliminate the repetition (see the [‚ÄúMacros‚Äù](about:blank/ch19-06-macros.html#macros) section in Chapter 19).\n\nBy implementing the state pattern exactly as it‚Äôs defined for object-oriented languages, we‚Äôre not taking as full advantage of Rust‚Äôs strengths as we could. Let‚Äôs look at some changes we can make to the `blog` crate that can make invalid states and transitions into compile time errors.\n\n#### [Encoding States and Behavior as Types](#encoding-states-and-behavior-as-types)\n\nWe‚Äôll show you how to rethink the state pattern to get a different set of trade-offs. Rather than encapsulating the states and transitions completely so outside code has no knowledge of them, we‚Äôll encode the states into different types. Consequently, Rust‚Äôs type checking system will prevent attempts to use draft posts where only published posts are allowed by issuing a compiler error.\n\nLet‚Äôs consider the first part of `main` in Listing 17-11:\n\nFilename: src/main.rs\n\n```rust\nuse blog::Post;\n\nfn main() {\n    let mut post = Post::new();\n\n    post.add_text(\"I ate a salad for lunch today\");\n    assert_eq!(\"\", post.content());\n\n    post.request_review();\n    assert_eq!(\"\", post.content());\n\n    post.approve();\n    assert_eq!(\"I ate a salad for lunch today\", post.content());\n}\n```\n\nWe still enable the creation of new posts in the draft state using `Post::new` and the ability to add text to the post‚Äôs content. But instead of having a `content` method on a draft post that returns an empty string, we‚Äôll make it so draft posts don‚Äôt have the `content` method at all. That way, if we try to get a draft post‚Äôs content, we‚Äôll get a compiler error telling us the method doesn‚Äôt exist. As a result, it will be impossible for us to accidentally display draft post content in production, because that code won‚Äôt even compile. Listing 17-19 shows the definition of a `Post` struct and a `DraftPost` struct, as well as methods on each:\n\nFilename: src/lib.rs\n\n```rust\npub struct Post {\n    content: String,\n}\n\npub struct DraftPost {\n    content: String,\n}\n\nimpl Post {\n    pub fn new() -> DraftPost {\n        DraftPost {\n            content: String::new(),\n        }\n    }\n\n    pub fn content(&self) -> &str {\n        &self.content\n    }\n}\n\nimpl DraftPost {\n    pub fn add_text(&mut self, text: &str) {\n        self.content.push_str(text);\n    }\n}\n```\n\nListing 17-19: A `Post` with a `content` method and a `DraftPost` without a `content` method\n\nBoth the `Post` and `DraftPost` structs have a private `content` field that stores the blog post text. The structs no longer have the `state` field because we‚Äôre moving the encoding of the state to the types of the structs. The `Post` struct will represent a published post, and it has a `content` method that returns the `content`.\n\nWe still have a `Post::new` function, but instead of returning an instance of `Post`, it returns an instance of `DraftPost`. Because `content` is private and there aren‚Äôt any functions that return `Post`, it‚Äôs not possible to create an instance of `Post` right now.\n\nThe `DraftPost` struct has an `add_text` method, so we can add text to `content` as before, but note that `DraftPost` does not have a `content` method defined! So now the program ensures all posts start as draft posts, and draft posts don‚Äôt have their content available for display. Any attempt to get around these constraints will result in a compiler error.\n\n#### [Implementing Transitions as Transformations into Different Types](#implementing-transitions-as-transformations-into-different-types)\n\nSo how do we get a published post? We want to enforce the rule that a draft post has to be reviewed and approved before it can be published. A post in the pending review state should still not display any content. Let‚Äôs implement these constraints by adding another struct, `PendingReviewPost`, defining the `request_review` method on `DraftPost` to return a `PendingReviewPost`, and defining an `approve` method on `PendingReviewPost` to return a `Post`, as shown in Listing 17-20:\n\nFilename: src/lib.rs\n\n```rust\npub struct Post {\n    content: String,\n}\n\npub struct DraftPost {\n    content: String,\n}\n\nimpl Post {\n    pub fn new() -> DraftPost {\n        DraftPost {\n            content: String::new(),\n        }\n    }\n\n    pub fn content(&self) -> &str {\n        &self.content\n    }\n}\n\nimpl DraftPost {\n    // --snip--\n    pub fn add_text(&mut self, text: &str) {\n        self.content.push_str(text);\n    }\n\n    pub fn request_review(self) -> PendingReviewPost {\n        PendingReviewPost {\n            content: self.content,\n        }\n    }\n}\n\npub struct PendingReviewPost {\n    content: String,\n}\n\nimpl PendingReviewPost {\n    pub fn approve(self) -> Post {\n        Post {\n            content: self.content,\n        }\n    }\n}\n```\n\nListing 17-20: A `PendingReviewPost` that gets created by calling `request_review` on `DraftPost` and an `approve` method that turns a `PendingReviewPost` into a published `Post`\n\nThe `request_review` and `approve` methods take ownership of `self`, thus consuming the `DraftPost` and `PendingReviewPost` instances and transforming them into a `PendingReviewPost` and a published `Post`, respectively. This way, we won‚Äôt have any lingering `DraftPost` instances after we‚Äôve called `request_review` on them, and so forth. The `PendingReviewPost` struct doesn‚Äôt have a `content` method defined on it, so attempting to read its content results in a compiler error, as with `DraftPost`. Because the only way to get a published `Post` instance that does have a `content` method defined is to call the `approve` method on a `PendingReviewPost`, and the only way to get a `PendingReviewPost` is to call the `request_review` method on a `DraftPost`, we‚Äôve now encoded the blog post workflow into the type system.\n\nBut we also have to make some small changes to `main`. The `request_review` and `approve` methods return new instances rather than modifying the struct they‚Äôre called on, so we need to add more `let post =` shadowing assignments to save the returned instances. We also can‚Äôt have the assertions about the draft and pending review posts‚Äô contents be empty strings, nor do we need them: we can‚Äôt compile code that tries to use the content of posts in those states any longer. The updated code in `main` is shown in Listing 17-21:\n\nFilename: src/main.rs\n\n```rust\nuse blog::Post;\n\nfn main() {\n    let mut post = Post::new();\n\n    post.add_text(\"I ate a salad for lunch today\");\n\n    let post = post.request_review();\n\n    let post = post.approve();\n\n    assert_eq!(\"I ate a salad for lunch today\", post.content());\n}\n```\n\nListing 17-21: Modifications to `main` to use the new implementation of the blog post workflow\n\nThe changes we needed to make to `main` to reassign `post` mean that this implementation doesn‚Äôt quite follow the object-oriented state pattern anymore: the transformations between the states are no longer encapsulated entirely within the `Post` implementation. However, our gain is that invalid states are now impossible because of the type system and the type checking that happens at compile time! This ensures that certain bugs, such as display of the content of an unpublished post, will be discovered before they make it to production.\n\nTry the tasks suggested at the start of this section on the `blog` crate as it is after Listing 17-21 to see what you think about the design of this version of the code. Note that some of the tasks might be completed already in this design.\n\nWe‚Äôve seen that even though Rust is capable of implementing object-oriented design patterns, other patterns, such as encoding state into the type system, are also available in Rust. These patterns have different trade-offs. Although you might be very familiar with object-oriented patterns, rethinking the problem to take advantage of Rust‚Äôs features can provide benefits, such as preventing some bugs at compile time. Object-oriented patterns won‚Äôt always be the best solution in Rust due to certain features, like ownership, that object-oriented languages don‚Äôt have.\n\n## [Summary](#summary-16)\n\nNo matter whether or not you think Rust is an object-oriented language after reading this chapter, you now know that you can use trait objects to get some object-oriented features in Rust. Dynamic dispatch can give your code some flexibility in exchange for a bit of runtime performance. You can use this flexibility to implement object-oriented patterns that can help your code‚Äôs maintainability. Rust also has other features, like ownership, that object-oriented languages don‚Äôt have. An object-oriented pattern won‚Äôt always be the best way to take advantage of Rust‚Äôs strengths, but is an available option.\n\nNext, we‚Äôll look at patterns, which are another of Rust‚Äôs features that enable lots of flexibility. We‚Äôve looked at them briefly throughout the book but haven‚Äôt seen their full capability yet. Let‚Äôs go!\n\n## [Patterns and Matching](#patterns-and-matching)\n\n_Patterns_ are a special syntax in Rust for matching against the structure of types, both complex and simple. Using patterns in conjunction with `match` expressions and other constructs gives you more control over a program‚Äôs control flow. A pattern consists of some combination of the following:\n\n-   Literals\n-   Destructured arrays, enums, structs, or tuples\n-   Variables\n-   Wildcards\n-   Placeholders\n\nSome example patterns include `x`, `(a, 3)`, and `Some(Color::Red)`. In the contexts in which patterns are valid, these components describe the shape of data. Our program then matches values against the patterns to determine whether it has the correct shape of data to continue running a particular piece of code.\n\nTo use a pattern, we compare it to some value. If the pattern matches the value, we use the value parts in our code. Recall the `match` expressions in Chapter 6 that used patterns, such as the coin-sorting machine example. If the value fits the shape of the pattern, we can use the named pieces. If it doesn‚Äôt, the code associated with the pattern won‚Äôt run.\n\nThis chapter is a reference on all things related to patterns. We‚Äôll cover the valid places to use patterns, the difference between refutable and irrefutable patterns, and the different kinds of pattern syntax that you might see. By the end of the chapter, you‚Äôll know how to use patterns to express many concepts in a clear way.\n\n## [All the Places Patterns Can Be Used](#all-the-places-patterns-can-be-used)\n\nPatterns pop up in a number of places in Rust, and you‚Äôve been using them a lot without realizing it! This section discusses all the places where patterns are valid.\n\n### [`match` Arms](#match-arms)\n\nAs discussed in Chapter 6, we use patterns in the arms of `match` expressions. Formally, `match` expressions are defined as the keyword `match`, a value to match on, and one or more match arms that consist of a pattern and an expression to run if the value matches that arm‚Äôs pattern, like this:\n\n```text\nmatch VALUE {\n    PATTERN => EXPRESSION,\n    PATTERN => EXPRESSION,\n    PATTERN => EXPRESSION,\n}\n\n```\n\nFor example, here‚Äôs the `match` expression from Listing 6-5 that matches on an `Option<i32>` value in the variable `x`:\n\n```rust\nmatch x {\n    None => None,\n    Some(i) => Some(i + 1),\n}\n```\n\nThe patterns in this `match` expression are the `None` and `Some(i)` on the left of each arrow.\n\nOne requirement for `match` expressions is that they need to be _exhaustive_ in the sense that all possibilities for the value in the `match` expression must be accounted for. One way to ensure you‚Äôve covered every possibility is to have a catchall pattern for the last arm: for example, a variable name matching any value can never fail and thus covers every remaining case.\n\nThe particular pattern `_` will match anything, but it never binds to a variable, so it‚Äôs often used in the last match arm. The `_` pattern can be useful when you want to ignore any value not specified, for example. We‚Äôll cover the `_` pattern in more detail in the [‚ÄúIgnoring Values in a Pattern‚Äù](about:blank/ch18-03-pattern-syntax.html#ignoring-values-in-a-pattern) section later in this chapter.\n\n### [Conditional `if let` Expressions](#conditional-if-let-expressions)\n\nIn Chapter 6 we discussed how to use `if let` expressions mainly as a shorter way to write the equivalent of a `match` that only matches one case. Optionally, `if let` can have a corresponding `else` containing code to run if the pattern in the `if let` doesn‚Äôt match.\n\nListing 18-1 shows that it‚Äôs also possible to mix and match `if let`, `else if`, and `else if let` expressions. Doing so gives us more flexibility than a `match` expression in which we can express only one value to compare with the patterns. Also, Rust doesn‚Äôt require that the conditions in a series of `if let`, `else if`, `else if let` arms relate to each other.\n\nThe code in Listing 18-1 determines what color to make your background based on a series of checks for several conditions. For this example, we‚Äôve created variables with hardcoded values that a real program might receive from user input.\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let favorite_color: Option<&str> = None;\n    let is_tuesday = false;\n    let age: Result<u8, _> = \"34\".parse();\n\n    if let Some(color) = favorite_color {\n        println!(\"Using your favorite color, {color}, as the background\");\n    } else if is_tuesday {\n        println!(\"Tuesday is green day!\");\n    } else if let Ok(age) = age {\n        if age > 30 {\n            println!(\"Using purple as the background color\");\n        } else {\n            println!(\"Using orange as the background color\");\n        }\n    } else {\n        println!(\"Using blue as the background color\");\n    }\n}\n```\n\nListing 18-1: Mixing `if let`, `else if`, `else if let`, and `else`\n\nIf the user specifies a favorite color, that color is used as the background. If no favorite color is specified and today is Tuesday, the background color is green. Otherwise, if the user specifies their age as a string and we can parse it as a number successfully, the color is either purple or orange depending on the value of the number. If none of these conditions apply, the background color is blue.\n\nThis conditional structure lets us support complex requirements. With the hardcoded values we have here, this example will print `Using purple as the background color`.\n\nYou can see that `if let` can also introduce shadowed variables in the same way that `match` arms can: the line `if let Ok(age) = age` introduces a new shadowed `age` variable that contains the value inside the `Ok` variant. This means we need to place the `if age > 30` condition within that block: we can‚Äôt combine these two conditions into `if let Ok(age) = age && age > 30`. The shadowed `age` we want to compare to 30 isn‚Äôt valid until the new scope starts with the curly bracket.\n\nThe downside of using `if let` expressions is that the compiler doesn‚Äôt check for exhaustiveness, whereas with `match` expressions it does. If we omitted the last `else` block and therefore missed handling some cases, the compiler would not alert us to the possible logic bug.\n\n### [`while let` Conditional Loops](#while-let-conditional-loops)\n\nSimilar in construction to `if let`, the `while let` conditional loop allows a `while` loop to run for as long as a pattern continues to match. In Listing 18-2 we code a `while let` loop that uses a vector as a stack and prints the values in the vector in the opposite order in which they were pushed.\n\n```rust\nfn main() {\n    let mut stack = Vec::new();\n\n    stack.push(1);\n    stack.push(2);\n    stack.push(3);\n\n    while let Some(top) = stack.pop() {\n        println!(\"{top}\");\n    }\n}\n```\n\nListing 18-2: Using a `while let` loop to print values for as long as `stack.pop()` returns `Some`\n\nThis example prints 3, 2, and then 1. The `pop` method takes the last element out of the vector and returns `Some(value)`. If the vector is empty, `pop` returns `None`. The `while` loop continues running the code in its block as long as `pop` returns `Some`. When `pop` returns `None`, the loop stops. We can use `while let` to pop every element off our stack.\n\n### [`for` Loops](#for-loops)\n\nIn a `for` loop, the value that directly follows the keyword `for` is a pattern. For example, in `for x in y` the `x` is the pattern. Listing 18-3 demonstrates how to use a pattern in a `for` loop to destructure, or break apart, a tuple as part of the `for` loop.\n\n```rust\nfn main() {\n    let v = vec!['a', 'b', 'c'];\n\n    for (index, value) in v.iter().enumerate() {\n        println!(\"{value} is at index {index}\");\n    }\n}\n```\n\nListing 18-3: Using a pattern in a `for` loop to destructure a tuple\n\nThe code in Listing 18-3 will print the following:\n\n```console\n$ cargo run\n   Compiling patterns v0.1.0 (file:///projects/patterns)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.52s\n     Running `target/debug/patterns`\na is at index 0\nb is at index 1\nc is at index 2\n\n```\n\nWe adapt an iterator using the `enumerate` method so it produces a value and the index for that value, placed into a tuple. The first value produced is the tuple `(0, 'a')`. When this value is matched to the pattern `(index, value)`, `index` will be `0` and `value` will be `'a'`, printing the first line of the output.\n\n### [`let` Statements](#let-statements)\n\nPrior to this chapter, we had only explicitly discussed using patterns with `match` and `if let`, but in fact, we‚Äôve used patterns in other places as well, including in `let` statements. For example, consider this straightforward variable assignment with `let`:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet x = 5;\n}\n```\n\nEvery time you‚Äôve used a `let` statement like this you‚Äôve been using patterns, although you might not have realized it! More formally, a `let` statement looks like this:\n\n```text\nlet PATTERN = EXPRESSION;\n\n```\n\nIn statements like `let x = 5;` with a variable name in the `PATTERN` slot, the variable name is just a particularly simple form of a pattern. Rust compares the expression against the pattern and assigns any names it finds. So in the `let x = 5;` example, `x` is a pattern that means ‚Äúbind what matches here to the variable `x`.‚Äù Because the name `x` is the whole pattern, this pattern effectively means ‚Äúbind everything to the variable `x`, whatever the value is.‚Äù\n\nTo see the pattern matching aspect of `let` more clearly, consider Listing 18-4, which uses a pattern with `let` to destructure a tuple.\n\n```rust\nfn main() {\n    let (x, y, z) = (1, 2, 3);\n}\n```\n\nListing 18-4: Using a pattern to destructure a tuple and create three variables at once\n\nHere, we match a tuple against a pattern. Rust compares the value `(1, 2, 3)` to the pattern `(x, y, z)` and sees that the value matches the pattern, so Rust binds `1` to `x`, `2` to `y`, and `3` to `z`. You can think of this tuple pattern as nesting three individual variable patterns inside it.\n\nIf the number of elements in the pattern doesn‚Äôt match the number of elements in the tuple, the overall type won‚Äôt match and we‚Äôll get a compiler error. For example, Listing 18-5 shows an attempt to destructure a tuple with three elements into two variables, which won‚Äôt work.\n\n```rust\nfn main() {\n    let (x, y) = (1, 2, 3);\n}\n```\n\nListing 18-5: Incorrectly constructing a pattern whose variables don‚Äôt match the number of elements in the tuple\n\nAttempting to compile this code results in this type error:\n\n```console\n$ cargo run\n   Compiling patterns v0.1.0 (file:///projects/patterns)\nerror[E0308]: mismatched types\n --> src/main.rs:2:9\n  |\n2 |     let (x, y) = (1, 2, 3);\n  |         ^^^^^^   --------- this expression has type `({integer}, {integer}, {integer})`\n  |         |\n  |         expected a tuple with 3 elements, found one with 2 elements\n  |\n  = note: expected tuple `({integer}, {integer}, {integer})`\n             found tuple `(_, _)`\n\nFor more information about this error, try `rustc --explain E0308`.\nerror: could not compile `patterns` (bin \"patterns\") due to 1 previous error\n\n```\n\nTo fix the error, we could ignore one or more of the values in the tuple using `_` or `..`, as you‚Äôll see in the [‚ÄúIgnoring Values in a Pattern‚Äù](about:blank/ch18-03-pattern-syntax.html#ignoring-values-in-a-pattern) section. If the problem is that we have too many variables in the pattern, the solution is to make the types match by removing variables so the number of variables equals the number of elements in the tuple.\n\n### [Function Parameters](#function-parameters)\n\nFunction parameters can also be patterns. The code in Listing 18-6, which declares a function named `foo` that takes one parameter named `x` of type `i32`, should by now look familiar.\n\n```rust\nfn foo(x: i32) {\n    // code goes here\n}\n\nfn main() {}\n```\n\nListing 18-6: A function signature uses patterns in the parameters\n\nThe `x` part is a pattern! As we did with `let`, we could match a tuple in a function‚Äôs arguments to the pattern. Listing 18-7 splits the values in a tuple as we pass it to a function.\n\nFilename: src/main.rs\n\n```rust\nfn print_coordinates(&(x, y): &(i32, i32)) {\n    println!(\"Current location: ({x}, {y})\");\n}\n\nfn main() {\n    let point = (3, 5);\n    print_coordinates(&point);\n}\n```\n\nListing 18-7: A function with parameters that destructure a tuple\n\nThis code prints `Current location: (3, 5)`. The values `&(3, 5)` match the pattern `&(x, y)`, so `x` is the value `3` and `y` is the value `5`.\n\nWe can also use patterns in closure parameter lists in the same way as in function parameter lists, because closures are similar to functions, as discussed in Chapter 13.\n\nAt this point, you‚Äôve seen several ways of using patterns, but patterns don‚Äôt work the same in every place we can use them. In some places, the patterns must be irrefutable; in other circumstances, they can be refutable. We‚Äôll discuss these two concepts next.\n\n## [Refutability: Whether a Pattern Might Fail to Match](#refutability-whether-a-pattern-might-fail-to-match)\n\nPatterns come in two forms: refutable and irrefutable. Patterns that will match for any possible value passed are _irrefutable_. An example would be `x` in the statement `let x = 5;` because `x` matches anything and therefore cannot fail to match. Patterns that can fail to match for some possible value are _refutable_. An example would be `Some(x)` in the expression `if let Some(x) = a_value` because if the value in the `a_value` variable is `None` rather than `Some`, the `Some(x)` pattern will not match.\n\nFunction parameters, `let` statements, and `for` loops can only accept irrefutable patterns, because the program cannot do anything meaningful when values don‚Äôt match. The `if let` and `while let` expressions accept refutable and irrefutable patterns, but the compiler warns against irrefutable patterns because by definition they‚Äôre intended to handle possible failure: the functionality of a conditional is in its ability to perform differently depending on success or failure.\n\nIn general, you shouldn‚Äôt have to worry about the distinction between refutable and irrefutable patterns; however, you do need to be familiar with the concept of refutability so you can respond when you see it in an error message. In those cases, you‚Äôll need to change either the pattern or the construct you‚Äôre using the pattern with, depending on the intended behavior of the code.\n\nLet‚Äôs look at an example of what happens when we try to use a refutable pattern where Rust requires an irrefutable pattern and vice versa. Listing 18-8 shows a `let` statement, but for the pattern we‚Äôve specified `Some(x)`, a refutable pattern. As you might expect, this code will not compile.\n\n```rust\nfn main() {\n    let some_option_value: Option<i32> = None;\n    let Some(x) = some_option_value;\n}\n```\n\nListing 18-8: Attempting to use a refutable pattern with `let`\n\nIf `some_option_value` was a `None` value, it would fail to match the pattern `Some(x)`, meaning the pattern is refutable. However, the `let` statement can only accept an irrefutable pattern because there is nothing valid the code can do with a `None` value. At compile time, Rust will complain that we‚Äôve tried to use a refutable pattern where an irrefutable pattern is required:\n\n```console\n$ cargo run\n   Compiling patterns v0.1.0 (file:///projects/patterns)\nerror[E0005]: refutable pattern in local binding\n --> src/main.rs:3:9\n  |\n3 |     let Some(x) = some_option_value;\n  |         ^^^^^^^ pattern `None` not covered\n  |\n  = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n  = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n  = note: the matched value is of type `Option<i32>`\nhelp: you might want to use `let else` to handle the variant that isn't matched\n  |\n3 |     let Some(x) = some_option_value else { todo!() };\n  |                                     ++++++++++++++++\n\nFor more information about this error, try `rustc --explain E0005`.\nerror: could not compile `patterns` (bin \"patterns\") due to 1 previous error\n\n```\n\nBecause we didn‚Äôt cover (and couldn‚Äôt cover!) every valid value with the pattern `Some(x)`, Rust rightfully produces a compiler error.\n\nIf we have a refutable pattern where an irrefutable pattern is needed, we can fix it by changing the code that uses the pattern: instead of using `let`, we can use `if let`. Then if the pattern doesn‚Äôt match, the code will just skip the code in the curly brackets, giving it a way to continue validly. Listing 18-9 shows how to fix the code in Listing 18-8.\n\n```rust\nfn main() {\n    let some_option_value: Option<i32> = None;\n    if let Some(x) = some_option_value {\n        println!(\"{x}\");\n    }\n}\n```\n\nListing 18-9: Using `if let` and a block with refutable patterns instead of `let`\n\nWe‚Äôve given the code an out! This code is perfectly valid now. However, if we give `if let` an irrefutable pattern (a pattern that will always match), such as `x`, as shown in Listing 18-10, the compiler will give a warning.\n\n```rust\nfn main() {\n    if let x = 5 {\n        println!(\"{x}\");\n    };\n}\n```\n\nListing 18-10: Attempting to use an irrefutable pattern with `if let`\n\nRust complains that it doesn‚Äôt make sense to use `if let` with an irrefutable pattern:\n\n```console\n$ cargo run\n   Compiling patterns v0.1.0 (file:///projects/patterns)\nwarning: irrefutable `if let` pattern\n --> src/main.rs:2:8\n  |\n2 |     if let x = 5 {\n  |        ^^^^^^^^^\n  |\n  = note: this pattern will always match, so the `if let` is useless\n  = help: consider replacing the `if let` with a `let`\n  = note: `#[warn(irrefutable_let_patterns)]` on by default\n\nwarning: `patterns` (bin \"patterns\") generated 1 warning\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.39s\n     Running `target/debug/patterns`\n5\n\n```\n\nFor this reason, match arms must use refutable patterns, except for the last arm, which should match any remaining values with an irrefutable pattern. Rust allows us to use an irrefutable pattern in a `match` with only one arm, but this syntax isn‚Äôt particularly useful and could be replaced with a simpler `let` statement.\n\nNow that you know where to use patterns and the difference between refutable and irrefutable patterns, let‚Äôs cover all the syntax we can use to create patterns.\n\n## [Pattern Syntax](#pattern-syntax)\n\nIn this section, we gather all the syntax valid in patterns and discuss why and when you might want to use each one.\n\n### [Matching Literals](#matching-literals)\n\nAs you saw in Chapter 6, you can match patterns against literals directly. The following code gives some examples:\n\n```rust\nfn main() {\n    let x = 1;\n\n    match x {\n        1 => println!(\"one\"),\n        2 => println!(\"two\"),\n        3 => println!(\"three\"),\n        _ => println!(\"anything\"),\n    }\n}\n```\n\nThis code prints `one` because the value in `x` is 1. This syntax is useful when you want your code to take an action if it gets a particular concrete value.\n\n### [Matching Named Variables](#matching-named-variables)\n\nNamed variables are irrefutable patterns that match any value, and we‚Äôve used them many times in the book. However, there is a complication when you use named variables in `match` expressions. Because `match` starts a new scope, variables declared as part of a pattern inside the `match` expression will shadow those with the same name outside the `match` construct, as is the case with all variables. In Listing 18-11, we declare a variable named `x` with the value `Some(5)` and a variable `y` with the value `10`. We then create a `match` expression on the value `x`. Look at the patterns in the match arms and `println!` at the end, and try to figure out what the code will print before running this code or reading further.\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let x = Some(5);\n    let y = 10;\n\n    match x {\n        Some(50) => println!(\"Got 50\"),\n        Some(y) => println!(\"Matched, y = {y}\"),\n        _ => println!(\"Default case, x = {x:?}\"),\n    }\n\n    println!(\"at the end: x = {x:?}, y = {y}\");\n}\n```\n\nListing 18-11: A `match` expression with an arm that introduces a shadowed variable `y`\n\nLet‚Äôs walk through what happens when the `match` expression runs. The pattern in the first match arm doesn‚Äôt match the defined value of `x`, so the code continues.\n\nThe pattern in the second match arm introduces a new variable named `y` that will match any value inside a `Some` value. Because we‚Äôre in a new scope inside the `match` expression, this is a new `y` variable, not the `y` we declared at the beginning with the value 10. This new `y` binding will match any value inside a `Some`, which is what we have in `x`. Therefore, this new `y` binds to the inner value of the `Some` in `x`. That value is `5`, so the expression for that arm executes and prints `Matched, y = 5`.\n\nIf `x` had been a `None` value instead of `Some(5)`, the patterns in the first two arms wouldn‚Äôt have matched, so the value would have matched to the underscore. We didn‚Äôt introduce the `x` variable in the pattern of the underscore arm, so the `x` in the expression is still the outer `x` that hasn‚Äôt been shadowed. In this hypothetical case, the `match` would print `Default case, x = None`.\n\nWhen the `match` expression is done, its scope ends, and so does the scope of the inner `y`. The last `println!` produces `at the end: x = Some(5), y = 10`.\n\nTo create a `match` expression that compares the values of the outer `x` and `y`, rather than introducing a shadowed variable, we would need to use a match guard conditional instead. We‚Äôll talk about match guards later in the [‚ÄúExtra Conditionals with Match Guards‚Äù](about:blank/ch18-03-pattern-syntax.html#extra-conditionals-with-match-guards) section.\n\n### [Multiple Patterns](#multiple-patterns)\n\nIn `match` expressions, you can match multiple patterns using the `|` syntax, which is the pattern _or_ operator. For example, in the following code we match the value of `x` against the match arms, the first of which has an _or_ option, meaning if the value of `x` matches either of the values in that arm, that arm‚Äôs code will run:\n\n```rust\nfn main() {\n    let x = 1;\n\n    match x {\n        1 | 2 => println!(\"one or two\"),\n        3 => println!(\"three\"),\n        _ => println!(\"anything\"),\n    }\n}\n```\n\nThis code prints `one or two`.\n\n### [Matching Ranges of Values with `..=`](#matching-ranges-of-values-with-)\n\nThe `..=` syntax allows us to match to an inclusive range of values. In the following code, when a pattern matches any of the values within the given range, that arm will execute:\n\n```rust\nfn main() {\n    let x = 5;\n\n    match x {\n        1..=5 => println!(\"one through five\"),\n        _ => println!(\"something else\"),\n    }\n}\n```\n\nIf `x` is 1, 2, 3, 4, or 5, the first arm will match. This syntax is more convenient for multiple match values than using the `|` operator to express the same idea; if we were to use `|` we would have to specify `1 | 2 | 3 | 4 | 5`. Specifying a range is much shorter, especially if we want to match, say, any number between 1 and 1,000!\n\nThe compiler checks that the range isn‚Äôt empty at compile time, and because the only types for which Rust can tell if a range is empty or not are `char` and numeric values, ranges are only allowed with numeric or `char` values.\n\nHere is an example using ranges of `char` values:\n\n```rust\nfn main() {\n    let x = 'c';\n\n    match x {\n        'a'..='j' => println!(\"early ASCII letter\"),\n        'k'..='z' => println!(\"late ASCII letter\"),\n        _ => println!(\"something else\"),\n    }\n}\n```\n\nRust can tell that `'c'` is within the first pattern‚Äôs range and prints `early ASCII letter`.\n\n### [Destructuring to Break Apart Values](#destructuring-to-break-apart-values)\n\nWe can also use patterns to destructure structs, enums, and tuples to use different parts of these values. Let‚Äôs walk through each value.\n\n#### [Destructuring Structs](#destructuring-structs)\n\nListing 18-12 shows a `Point` struct with two fields, `x` and `y`, that we can break apart using a pattern with a `let` statement.\n\nFilename: src/main.rs\n\n```rust\nstruct Point {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let p = Point { x: 0, y: 7 };\n\n    let Point { x: a, y: b } = p;\n    assert_eq!(0, a);\n    assert_eq!(7, b);\n}\n```\n\nListing 18-12: Destructuring a struct‚Äôs fields into separate variables\n\nThis code creates the variables `a` and `b` that match the values of the `x` and `y` fields of the `p` struct. This example shows that the names of the variables in the pattern don‚Äôt have to match the field names of the struct. However, it‚Äôs common to match the variable names to the field names to make it easier to remember which variables came from which fields. Because of this common usage, and because writing `let Point { x: x, y: y } = p;` contains a lot of duplication, Rust has a shorthand for patterns that match struct fields: you only need to list the name of the struct field, and the variables created from the pattern will have the same names. Listing 18-13 behaves in the same way as the code in Listing 18-12, but the variables created in the `let` pattern are `x` and `y` instead of `a` and `b`.\n\nFilename: src/main.rs\n\n```rust\nstruct Point {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let p = Point { x: 0, y: 7 };\n\n    let Point { x, y } = p;\n    assert_eq!(0, x);\n    assert_eq!(7, y);\n}\n```\n\nListing 18-13: Destructuring struct fields using struct field shorthand\n\nThis code creates the variables `x` and `y` that match the `x` and `y` fields of the `p` variable. The outcome is that the variables `x` and `y` contain the values from the `p` struct.\n\nWe can also destructure with literal values as part of the struct pattern rather than creating variables for all the fields. Doing so allows us to test some of the fields for particular values while creating variables to destructure the other fields.\n\nIn Listing 18-14, we have a `match` expression that separates `Point` values into three cases: points that lie directly on the `x` axis (which is true when `y = 0`), on the `y` axis (`x = 0`), or neither.\n\nFilename: src/main.rs\n\n```rust\nstruct Point {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let p = Point { x: 0, y: 7 };\n\n    match p {\n        Point { x, y: 0 } => println!(\"On the x axis at {x}\"),\n        Point { x: 0, y } => println!(\"On the y axis at {y}\"),\n        Point { x, y } => {\n            println!(\"On neither axis: ({x}, {y})\");\n        }\n    }\n}\n```\n\nListing 18-14: Destructuring and matching literal values in one pattern\n\nThe first arm will match any point that lies on the `x` axis by specifying that the `y` field matches if its value matches the literal `0`. The pattern still creates an `x` variable that we can use in the code for this arm.\n\nSimilarly, the second arm matches any point on the `y` axis by specifying that the `x` field matches if its value is `0` and creates a variable `y` for the value of the `y` field. The third arm doesn‚Äôt specify any literals, so it matches any other `Point` and creates variables for both the `x` and `y` fields.\n\nIn this example, the value `p` matches the second arm by virtue of `x` containing a 0, so this code will print `On the y axis at 7`.\n\nRemember that a `match` expression stops checking arms once it has found the first matching pattern, so even though `Point { x: 0, y: 0}` is on the `x` axis and the `y` axis, this code would only print `On the x axis at 0`.\n\n#### [Destructuring Enums](#destructuring-enums)\n\nWe‚Äôve destructured enums in this book (for example, Listing 6-5 in Chapter 6), but haven‚Äôt yet explicitly discussed that the pattern to destructure an enum corresponds to the way the data stored within the enum is defined. As an example, in Listing 18-15 we use the `Message` enum from Listing 6-2 and write a `match` with patterns that will destructure each inner value.\n\nFilename: src/main.rs\n\n```rust\nenum Message {\n    Quit,\n    Move { x: i32, y: i32 },\n    Write(String),\n    ChangeColor(i32, i32, i32),\n}\n\nfn main() {\n    let msg = Message::ChangeColor(0, 160, 255);\n\n    match msg {\n        Message::Quit => {\n            println!(\"The Quit variant has no data to destructure.\");\n        }\n        Message::Move { x, y } => {\n            println!(\"Move in the x direction {x} and in the y direction {y}\");\n        }\n        Message::Write(text) => {\n            println!(\"Text message: {text}\");\n        }\n        Message::ChangeColor(r, g, b) => {\n            println!(\"Change the color to red {r}, green {g}, and blue {b}\")\n        }\n    }\n}\n```\n\nListing 18-15: Destructuring enum variants that hold different kinds of values\n\nThis code will print `Change the color to red 0, green 160, and blue 255`. Try changing the value of `msg` to see the code from the other arms run.\n\nFor enum variants without any data, like `Message::Quit`, we can‚Äôt destructure the value any further. We can only match on the literal `Message::Quit` value, and no variables are in that pattern.\n\nFor struct-like enum variants, such as `Message::Move`, we can use a pattern similar to the pattern we specify to match structs. After the variant name, we place curly brackets and then list the fields with variables so we break apart the pieces to use in the code for this arm. Here we use the shorthand form as we did in Listing 18-13.\n\nFor tuple-like enum variants, like `Message::Write` that holds a tuple with one element and `Message::ChangeColor` that holds a tuple with three elements, the pattern is similar to the pattern we specify to match tuples. The number of variables in the pattern must match the number of elements in the variant we‚Äôre matching.\n\n#### [Destructuring Nested Structs and Enums](#destructuring-nested-structs-and-enums)\n\nSo far, our examples have all been matching structs or enums one level deep, but matching can work on nested items too! For example, we can refactor the code in Listing 18-15 to support RGB and HSV colors in the `ChangeColor` message, as shown in Listing 18-16.\n\n```rust\nenum Color {\n    Rgb(i32, i32, i32),\n    Hsv(i32, i32, i32),\n}\n\nenum Message {\n    Quit,\n    Move { x: i32, y: i32 },\n    Write(String),\n    ChangeColor(Color),\n}\n\nfn main() {\n    let msg = Message::ChangeColor(Color::Hsv(0, 160, 255));\n\n    match msg {\n        Message::ChangeColor(Color::Rgb(r, g, b)) => {\n            println!(\"Change color to red {r}, green {g}, and blue {b}\");\n        }\n        Message::ChangeColor(Color::Hsv(h, s, v)) => {\n            println!(\"Change color to hue {h}, saturation {s}, value {v}\")\n        }\n        _ => (),\n    }\n}\n```\n\nListing 18-16: Matching on nested enums\n\nThe pattern of the first arm in the `match` expression matches a `Message::ChangeColor` enum variant that contains a `Color::Rgb` variant; then the pattern binds to the three inner `i32` values. The pattern of the second arm also matches a `Message::ChangeColor` enum variant, but the inner enum matches `Color::Hsv` instead. We can specify these complex conditions in one `match` expression, even though two enums are involved.\n\n#### [Destructuring Structs and Tuples](#destructuring-structs-and-tuples)\n\nWe can mix, match, and nest destructuring patterns in even more complex ways. The following example shows a complicated destructure where we nest structs and tuples inside a tuple and destructure all the primitive values out:\n\n```rust\nfn main() {\n    struct Point {\n        x: i32,\n        y: i32,\n    }\n\n    let ((feet, inches), Point { x, y }) = ((3, 10), Point { x: 3, y: -10 });\n}\n```\n\nThis code lets us break complex types into their component parts so we can use the values we‚Äôre interested in separately.\n\nDestructuring with patterns is a convenient way to use pieces of values, such as the value from each field in a struct, separately from each other.\n\n### [Ignoring Values in a Pattern](#ignoring-values-in-a-pattern)\n\nYou‚Äôve seen that it‚Äôs sometimes useful to ignore values in a pattern, such as in the last arm of a `match`, to get a catchall that doesn‚Äôt actually do anything but does account for all remaining possible values. There are a few ways to ignore entire values or parts of values in a pattern: using the `_` pattern (which you‚Äôve seen), using the `_` pattern within another pattern, using a name that starts with an underscore, or using `..` to ignore remaining parts of a value. Let‚Äôs explore how and why to use each of these patterns.\n\n#### [Ignoring an Entire Value with `_`](#ignoring-an-entire-value-with-_)\n\nWe‚Äôve used the underscore as a wildcard pattern that will match any value but not bind to the value. This is especially useful as the last arm in a `match` expression, but we can also use it in any pattern, including function parameters, as shown in Listing 18-17.\n\nFilename: src/main.rs\n\n```rust\nfn foo(_: i32, y: i32) {\n    println!(\"This code only uses the y parameter: {y}\");\n}\n\nfn main() {\n    foo(3, 4);\n}\n```\n\nListing 18-17: Using `_` in a function signature\n\nThis code will completely ignore the value `3` passed as the first argument, and will print `This code only uses the y parameter: 4`.\n\nIn most cases when you no longer need a particular function parameter, you would change the signature so it doesn‚Äôt include the unused parameter. Ignoring a function parameter can be especially useful in cases when, for example, you‚Äôre implementing a trait when you need a certain type signature but the function body in your implementation doesn‚Äôt need one of the parameters. You then avoid getting a compiler warning about unused function parameters, as you would if you used a name instead.\n\n#### [Ignoring Parts of a Value with a Nested `_`](#ignoring-parts-of-a-value-with-a-nested-_)\n\nWe can also use `_` inside another pattern to ignore just part of a value, for example, when we want to test for only part of a value but have no use for the other parts in the corresponding code we want to run. Listing 18-18 shows code responsible for managing a setting‚Äôs value. The business requirements are that the user should not be allowed to overwrite an existing customization of a setting but can unset the setting and give it a value if it is currently unset.\n\n```rust\nfn main() {\n    let mut setting_value = Some(5);\n    let new_setting_value = Some(10);\n\n    match (setting_value, new_setting_value) {\n        (Some(_), Some(_)) => {\n            println!(\"Can't overwrite an existing customized value\");\n        }\n        _ => {\n            setting_value = new_setting_value;\n        }\n    }\n\n    println!(\"setting is {setting_value:?}\");\n}\n```\n\nListing 18-18: Using an underscore within patterns that match `Some` variants when we don‚Äôt need to use the value inside the `Some`\n\nThis code will print `Can't overwrite an existing customized value` and then `setting is Some(5)`. In the first match arm, we don‚Äôt need to match on or use the values inside either `Some` variant, but we do need to test for the case when `setting_value` and `new_setting_value` are the `Some` variant. In that case, we print the reason for not changing `setting_value`, and it doesn‚Äôt get changed.\n\nIn all other cases (if either `setting_value` or `new_setting_value` are `None`) expressed by the `_` pattern in the second arm, we want to allow `new_setting_value` to become `setting_value`.\n\nWe can also use underscores in multiple places within one pattern to ignore particular values. Listing 18-19 shows an example of ignoring the second and fourth values in a tuple of five items.\n\n```rust\nfn main() {\n    let numbers = (2, 4, 8, 16, 32);\n\n    match numbers {\n        (first, _, third, _, fifth) => {\n            println!(\"Some numbers: {first}, {third}, {fifth}\")\n        }\n    }\n}\n```\n\nListing 18-19: Ignoring multiple parts of a tuple\n\nThis code will print `Some numbers: 2, 8, 32`, and the values 4 and 16 will be ignored.\n\n#### [Ignoring an Unused Variable by Starting Its Name with `_`](#ignoring-an-unused-variable-by-starting-its-name-with-_)\n\nIf you create a variable but don‚Äôt use it anywhere, Rust will usually issue a warning because an unused variable could be a bug. However, sometimes it‚Äôs useful to be able to create a variable you won‚Äôt use yet, such as when you‚Äôre prototyping or just starting a project. In this situation, you can tell Rust not to warn you about the unused variable by starting the name of the variable with an underscore. In Listing 18-20, we create two unused variables, but when we compile this code, we should only get a warning about one of them.\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let _x = 5;\n    let y = 10;\n}\n```\n\nListing 18-20: Starting a variable name with an underscore to avoid getting unused variable warnings\n\nHere we get a warning about not using the variable `y`, but we don‚Äôt get a warning about not using `_x`.\n\nNote that there is a subtle difference between using only `_` and using a name that starts with an underscore. The syntax `_x` still binds the value to the variable, whereas `_` doesn‚Äôt bind at all. To show a case where this distinction matters, Listing 18-21 will provide us with an error.\n\n```rust\nfn main() {\n    let s = Some(String::from(\"Hello!\"));\n\n    if let Some(_s) = s {\n        println!(\"found a string\");\n    }\n\n    println!(\"{s:?}\");\n}\n```\n\nListing 18-21: An unused variable starting with an underscore still binds the value, which might take ownership of the value\n\nWe‚Äôll receive an error because the `s` value will still be moved into `_s`, which prevents us from using `s` again. However, using the underscore by itself doesn‚Äôt ever bind to the value. Listing 18-22 will compile without any errors because `s` doesn‚Äôt get moved into `_`.\n\n```rust\nfn main() {\n    let s = Some(String::from(\"Hello!\"));\n\n    if let Some(_) = s {\n        println!(\"found a string\");\n    }\n\n    println!(\"{s:?}\");\n}\n```\n\nListing 18-22: Using an underscore does not bind the value\n\nThis code works just fine because we never bind `s` to anything; it isn‚Äôt moved.\n\n#### [Ignoring Remaining Parts of a Value with `..`](#ignoring-remaining-parts-of-a-value-with-)\n\nWith values that have many parts, we can use the `..` syntax to use specific parts and ignore the rest, avoiding the need to list underscores for each ignored value. The `..` pattern ignores any parts of a value that we haven‚Äôt explicitly matched in the rest of the pattern. In Listing 18-23, we have a `Point` struct that holds a coordinate in three-dimensional space. In the `match` expression, we want to operate only on the `x` coordinate and ignore the values in the `y` and `z` fields.\n\n```rust\nfn main() {\n    struct Point {\n        x: i32,\n        y: i32,\n        z: i32,\n    }\n\n    let origin = Point { x: 0, y: 0, z: 0 };\n\n    match origin {\n        Point { x, .. } => println!(\"x is {x}\"),\n    }\n}\n```\n\nListing 18-23: Ignoring all fields of a `Point` except for `x` by using `..`\n\nWe list the `x` value and then just include the `..` pattern. This is quicker than having to list `y: _` and `z: _`, particularly when we‚Äôre working with structs that have lots of fields in situations where only one or two fields are relevant.\n\nThe syntax `..` will expand to as many values as it needs to be. Listing 18-24 shows how to use `..` with a tuple.\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let numbers = (2, 4, 8, 16, 32);\n\n    match numbers {\n        (first, .., last) => {\n            println!(\"Some numbers: {first}, {last}\");\n        }\n    }\n}\n```\n\nListing 18-24: Matching only the first and last values in a tuple and ignoring all other values\n\nIn this code, the first and last value are matched with `first` and `last`. The `..` will match and ignore everything in the middle.\n\nHowever, using `..` must be unambiguous. If it is unclear which values are intended for matching and which should be ignored, Rust will give us an error. Listing 18-25 shows an example of using `..` ambiguously, so it will not compile.\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let numbers = (2, 4, 8, 16, 32);\n\n    match numbers {\n        (.., second, ..) => {\n            println!(\"Some numbers: {second}\")\n        },\n    }\n}\n```\n\nListing 18-25: An attempt to use `..` in an ambiguous way\n\nWhen we compile this example, we get this error:\n\n```console\n$ cargo run\n   Compiling patterns v0.1.0 (file:///projects/patterns)\nerror: `..` can only be used once per tuple pattern\n --> src/main.rs:5:22\n  |\n5 |         (.., second, ..) => {\n  |          --          ^^ can only be used once per tuple pattern\n  |          |\n  |          previously used here\n\nerror: could not compile `patterns` (bin \"patterns\") due to 1 previous error\n\n```\n\nIt‚Äôs impossible for Rust to determine how many values in the tuple to ignore before matching a value with `second` and then how many further values to ignore thereafter. This code could mean that we want to ignore `2`, bind `second` to `4`, and then ignore `8`, `16`, and `32`; or that we want to ignore `2` and `4`, bind `second` to `8`, and then ignore `16` and `32`; and so forth. The variable name `second` doesn‚Äôt mean anything special to Rust, so we get a compiler error because using `..` in two places like this is ambiguous.\n\nA _match guard_ is an additional `if` condition, specified after the pattern in a `match` arm, that must also match for that arm to be chosen. Match guards are useful for expressing more complex ideas than a pattern alone allows.\n\nThe condition can use variables created in the pattern. Listing 18-26 shows a `match` where the first arm has the pattern `Some(x)` and also has a match guard of `if x % 2 == 0` (which will be true if the number is even).\n\n```rust\nfn main() {\n    let num = Some(4);\n\n    match num {\n        Some(x) if x % 2 == 0 => println!(\"The number {x} is even\"),\n        Some(x) => println!(\"The number {x} is odd\"),\n        None => (),\n    }\n}\n```\n\nListing 18-26: Adding a match guard to a pattern\n\nThis example will print `The number 4 is even`. When `num` is compared to the pattern in the first arm, it matches, because `Some(4)` matches `Some(x)`. Then the match guard checks whether the remainder of dividing `x` by 2 is equal to 0, and because it is, the first arm is selected.\n\nIf `num` had been `Some(5)` instead, the match guard in the first arm would have been false because the remainder of 5 divided by 2 is 1, which is not equal to 0. Rust would then go to the second arm, which would match because the second arm doesn‚Äôt have a match guard and therefore matches any `Some` variant.\n\nThere is no way to express the `if x % 2 == 0` condition within a pattern, so the match guard gives us the ability to express this logic. The downside of this additional expressiveness is that the compiler doesn‚Äôt try to check for exhaustiveness when match guard expressions are involved.\n\nIn Listing 18-11, we mentioned that we could use match guards to solve our pattern-shadowing problem. Recall that we created a new variable inside the pattern in the `match` expression instead of using the variable outside the `match`. That new variable meant we couldn‚Äôt test against the value of the outer variable. Listing 18-27 shows how we can use a match guard to fix this problem.\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let x = Some(5);\n    let y = 10;\n\n    match x {\n        Some(50) => println!(\"Got 50\"),\n        Some(n) if n == y => println!(\"Matched, n = {n}\"),\n        _ => println!(\"Default case, x = {x:?}\"),\n    }\n\n    println!(\"at the end: x = {x:?}, y = {y}\");\n}\n```\n\nListing 18-27: Using a match guard to test for equality with an outer variable\n\nThis code will now print `Default case, x = Some(5)`. The pattern in the second match arm doesn‚Äôt introduce a new variable `y` that would shadow the outer `y`, meaning we can use the outer `y` in the match guard. Instead of specifying the pattern as `Some(y)`, which would have shadowed the outer `y`, we specify `Some(n)`. This creates a new variable `n` that doesn‚Äôt shadow anything because there is no `n` variable outside the `match`.\n\nThe match guard `if n == y` is not a pattern and therefore doesn‚Äôt introduce new variables. This `y` _is_ the outer `y` rather than a new shadowed `y`, and we can look for a value that has the same value as the outer `y` by comparing `n` to `y`.\n\nYou can also use the _or_ operator `|` in a match guard to specify multiple patterns; the match guard condition will apply to all the patterns. Listing 18-28 shows the precedence when combining a pattern that uses `|` with a match guard. The important part of this example is that the `if y` match guard applies to `4`, `5`, _and_ `6`, even though it might look like `if y` only applies to `6`.\n\n```rust\nfn main() {\n    let x = 4;\n    let y = false;\n\n    match x {\n        4 | 5 | 6 if y => println!(\"yes\"),\n        _ => println!(\"no\"),\n    }\n}\n```\n\nListing 18-28: Combining multiple patterns with a match guard\n\nThe match condition states that the arm only matches if the value of `x` is equal to `4`, `5`, or `6` _and_ if `y` is `true`. When this code runs, the pattern of the first arm matches because `x` is `4`, but the match guard `if y` is false, so the first arm is not chosen. The code moves on to the second arm, which does match, and this program prints `no`. The reason is that the `if` condition applies to the whole pattern `4 | 5 | 6`, not only to the last value `6`. In other words, the precedence of a match guard in relation to a pattern behaves like this:\n\n```text\n(4 | 5 | 6) if y => ...\n\n```\n\nrather than this:\n\n```text\n4 | 5 | (6 if y) => ...\n\n```\n\nAfter running the code, the precedence behavior is evident: if the match guard were applied only to the final value in the list of values specified using the `|` operator, the arm would have matched and the program would have printed `yes`.\n\n### [`@` Bindings](#-bindings)\n\nThe _at_ operator `@` lets us create a variable that holds a value at the same time as we‚Äôre testing that value for a pattern match. In Listing 18-29, we want to test that a `Message::Hello` `id` field is within the range `3..=7`. We also want to bind the value to the variable `id_variable` so we can use it in the code associated with the arm. We could name this variable `id`, the same as the field, but for this example we‚Äôll use a different name.\n\n```rust\nfn main() {\n    enum Message {\n        Hello { id: i32 },\n    }\n\n    let msg = Message::Hello { id: 5 };\n\n    match msg {\n        Message::Hello {\n            id: id_variable @ 3..=7,\n        } => println!(\"Found an id in range: {id_variable}\"),\n        Message::Hello { id: 10..=12 } => {\n            println!(\"Found an id in another range\")\n        }\n        Message::Hello { id } => println!(\"Found some other id: {id}\"),\n    }\n}\n```\n\nListing 18-29: Using `@` to bind to a value in a pattern while also testing it\n\nThis example will print `Found an id in range: 5`. By specifying `id_variable @` before the range `3..=7`, we‚Äôre capturing whatever value matched the range while also testing that the value matched the range pattern.\n\nIn the second arm, where we only have a range specified in the pattern, the code associated with the arm doesn‚Äôt have a variable that contains the actual value of the `id` field. The `id` field‚Äôs value could have been 10, 11, or 12, but the code that goes with that pattern doesn‚Äôt know which it is. The pattern code isn‚Äôt able to use the value from the `id` field, because we haven‚Äôt saved the `id` value in a variable.\n\nIn the last arm, where we‚Äôve specified a variable without a range, we do have the value available to use in the arm‚Äôs code in a variable named `id`. The reason is that we‚Äôve used the struct field shorthand syntax. But we haven‚Äôt applied any test to the value in the `id` field in this arm, as we did with the first two arms: any value would match this pattern.\n\nUsing `@` lets us test a value and save it in a variable within one pattern.\n\n## [Summary](#summary-17)\n\nRust‚Äôs patterns are very useful in distinguishing between different kinds of data. When used in `match` expressions, Rust ensures your patterns cover every possible value, or your program won‚Äôt compile. Patterns in `let` statements and function parameters make those constructs more useful, enabling the destructuring of values into smaller parts at the same time as assigning to variables. We can create simple or complex patterns to suit our needs.\n\nNext, for the penultimate chapter of the book, we‚Äôll look at some advanced aspects of a variety of Rust‚Äôs features.\n\n## [Advanced Features](#advanced-features)\n\nBy now, you‚Äôve learned the most commonly used parts of the Rust programming language. Before we do one more project in Chapter 20, we‚Äôll look at a few aspects of the language you might run into every once in a while, but may not use every day. You can use this chapter as a reference for when you encounter any unknowns. The features covered here are useful in very specific situations. Although you might not reach for them often, we want to make sure you have a grasp of all the features Rust has to offer.\n\nIn this chapter, we‚Äôll cover:\n\n-   Unsafe Rust: how to opt out of some of Rust‚Äôs guarantees and take responsibility for manually upholding those guarantees\n-   Advanced traits: associated types, default type parameters, fully qualified syntax, supertraits, and the newtype pattern in relation to traits\n-   Advanced types: more about the newtype pattern, type aliases, the never type, and dynamically sized types\n-   Advanced functions and closures: function pointers and returning closures\n-   Macros: ways to define code that defines more code at compile time\n\nIt‚Äôs a panoply of Rust features with something for everyone! Let‚Äôs dive in!\n\n## [Unsafe Rust](#unsafe-rust)\n\nAll the code we‚Äôve discussed so far has had Rust‚Äôs memory safety guarantees enforced at compile time. However, Rust has a second language hidden inside it that doesn‚Äôt enforce these memory safety guarantees: it‚Äôs called _unsafe Rust_ and works just like regular Rust, but gives us extra superpowers.\n\nUnsafe Rust exists because, by nature, static analysis is conservative. When the compiler tries to determine whether or not code upholds the guarantees, it‚Äôs better for it to reject some valid programs than to accept some invalid programs. Although the code _might_ be okay, if the Rust compiler doesn‚Äôt have enough information to be confident, it will reject the code. In these cases, you can use unsafe code to tell the compiler, ‚ÄúTrust me, I know what I‚Äôm doing.‚Äù Be warned, however, that you use unsafe Rust at your own risk: if you use unsafe code incorrectly, problems can occur due to memory unsafety, such as null pointer dereferencing.\n\nAnother reason Rust has an unsafe alter ego is that the underlying computer hardware is inherently unsafe. If Rust didn‚Äôt let you do unsafe operations, you couldn‚Äôt do certain tasks. Rust needs to allow you to do low-level systems programming, such as directly interacting with the operating system or even writing your own operating system. Working with low-level systems programming is one of the goals of the language. Let‚Äôs explore what we can do with unsafe Rust and how to do it.\n\n### [Unsafe Superpowers](#unsafe-superpowers)\n\nTo switch to unsafe Rust, use the `unsafe` keyword and then start a new block that holds the unsafe code. You can take five actions in unsafe Rust that you can‚Äôt in safe Rust, which we call _unsafe superpowers_. Those superpowers include the ability to:\n\n-   Dereference a raw pointer\n-   Call an unsafe function or method\n-   Access or modify a mutable static variable\n-   Implement an unsafe trait\n-   Access fields of a `union`\n\nIt‚Äôs important to understand that `unsafe` doesn‚Äôt turn off the borrow checker or disable any other of Rust‚Äôs safety checks: if you use a reference in unsafe code, it will still be checked. The `unsafe` keyword only gives you access to these five features that are then not checked by the compiler for memory safety. You‚Äôll still get some degree of safety inside of an unsafe block.\n\nIn addition, `unsafe` does not mean the code inside the block is necessarily dangerous or that it will definitely have memory safety problems: the intent is that as the programmer, you‚Äôll ensure the code inside an `unsafe` block will access memory in a valid way.\n\nPeople are fallible, and mistakes will happen, but by requiring these five unsafe operations to be inside blocks annotated with `unsafe` you‚Äôll know that any errors related to memory safety must be within an `unsafe` block. Keep `unsafe` blocks small; you‚Äôll be thankful later when you investigate memory bugs.\n\nTo isolate unsafe code as much as possible, it‚Äôs best to enclose unsafe code within a safe abstraction and provide a safe API, which we‚Äôll discuss later in the chapter when we examine unsafe functions and methods. Parts of the standard library are implemented as safe abstractions over unsafe code that has been audited. Wrapping unsafe code in a safe abstraction prevents uses of `unsafe` from leaking out into all the places that you or your users might want to use the functionality implemented with `unsafe` code, because using a safe abstraction is safe.\n\nLet‚Äôs look at each of the five unsafe superpowers in turn. We‚Äôll also look at some abstractions that provide a safe interface to unsafe code.\n\n### [Dereferencing a Raw Pointer](#dereferencing-a-raw-pointer)\n\nIn Chapter 4, in the [‚ÄúDangling References‚Äù](about:blank/ch04-02-references-and-borrowing.html#dangling-references) section, we mentioned that the compiler ensures references are always valid. Unsafe Rust has two new types called _raw pointers_ that are similar to references. As with references, raw pointers can be immutable or mutable and are written as `*const T` and `*mut T`, respectively. The asterisk isn‚Äôt the dereference operator; it‚Äôs part of the type name. In the context of raw pointers, _immutable_ means that the pointer can‚Äôt be directly assigned to after being dereferenced.\n\nDifferent from references and smart pointers, raw pointers:\n\n-   Are allowed to ignore the borrowing rules by having both immutable and mutable pointers or multiple mutable pointers to the same location\n-   Aren‚Äôt guaranteed to point to valid memory\n-   Are allowed to be null\n-   Don‚Äôt implement any automatic cleanup\n\nBy opting out of having Rust enforce these guarantees, you can give up guaranteed safety in exchange for greater performance or the ability to interface with another language or hardware where Rust‚Äôs guarantees don‚Äôt apply.\n\nListing 19-1 shows how to create an immutable and a mutable raw pointer from references.\n\n```rust\nfn main() {\n    let mut num = 5;\n\n    let r1 = &num as *const i32;\n    let r2 = &mut num as *mut i32;\n}\n```\n\nListing 19-1: Creating raw pointers from references\n\nNotice that we don‚Äôt include the `unsafe` keyword in this code. We can create raw pointers in safe code; we just can‚Äôt dereference raw pointers outside an unsafe block, as you‚Äôll see in a bit.\n\nWe‚Äôve created raw pointers by using `as` to cast an immutable and a mutable reference into their corresponding raw pointer types. Because we created them directly from references guaranteed to be valid, we know these particular raw pointers are valid, but we can‚Äôt make that assumption about just any raw pointer.\n\nTo demonstrate this, next we‚Äôll create a raw pointer whose validity we can‚Äôt be so certain of. Listing 19-2 shows how to create a raw pointer to an arbitrary location in memory. Trying to use arbitrary memory is undefined: there might be data at that address or there might not, the compiler might optimize the code so there is no memory access, or the program might error with a segmentation fault. Usually, there is no good reason to write code like this, but it is possible.\n\n```rust\nfn main() {\n    let address = 0x012345usize;\n    let r = address as *const i32;\n}\n```\n\nListing 19-2: Creating a raw pointer to an arbitrary memory address\n\nRecall that we can create raw pointers in safe code, but we can‚Äôt _dereference_ raw pointers and read the data being pointed to. In Listing 19-3, we use the dereference operator `*` on a raw pointer that requires an `unsafe` block.\n\n```rust\nfn main() {\n    let mut num = 5;\n\n    let r1 = &num as *const i32;\n    let r2 = &mut num as *mut i32;\n\n    unsafe {\n        println!(\"r1 is: {}\", *r1);\n        println!(\"r2 is: {}\", *r2);\n    }\n}\n```\n\nListing 19-3: Dereferencing raw pointers within an `unsafe` block\n\nCreating a pointer does no harm; it‚Äôs only when we try to access the value that it points at that we might end up dealing with an invalid value.\n\nNote also that in Listing 19-1 and 19-3, we created `*const i32` and `*mut i32` raw pointers that both pointed to the same memory location, where `num` is stored. If we instead tried to create an immutable and a mutable reference to `num`, the code would not have compiled because Rust‚Äôs ownership rules don‚Äôt allow a mutable reference at the same time as any immutable references. With raw pointers, we can create a mutable pointer and an immutable pointer to the same location and change data through the mutable pointer, potentially creating a data race. Be careful!\n\nWith all of these dangers, why would you ever use raw pointers? One major use case is when interfacing with C code, as you‚Äôll see in the next section, [‚ÄúCalling an Unsafe Function or Method.‚Äù](about:blank/ch19-01-unsafe-rust.html#calling-an-unsafe-function-or-method) Another case is when building up safe abstractions that the borrow checker doesn‚Äôt understand. We‚Äôll introduce unsafe functions and then look at an example of a safe abstraction that uses unsafe code.\n\n### [Calling an Unsafe Function or Method](#calling-an-unsafe-function-or-method)\n\nThe second type of operation you can perform in an unsafe block is calling unsafe functions. Unsafe functions and methods look exactly like regular functions and methods, but they have an extra `unsafe` before the rest of the definition. The `unsafe` keyword in this context indicates the function has requirements we need to uphold when we call this function, because Rust can‚Äôt guarantee we‚Äôve met these requirements. By calling an unsafe function within an `unsafe` block, we‚Äôre saying that we‚Äôve read this function‚Äôs documentation and take responsibility for upholding the function‚Äôs contracts.\n\nHere is an unsafe function named `dangerous` that doesn‚Äôt do anything in its body:\n\n```rust\nfn main() {\n    unsafe fn dangerous() {}\n\n    unsafe {\n        dangerous();\n    }\n}\n```\n\nWe must call the `dangerous` function within a separate `unsafe` block. If we try to call `dangerous` without the `unsafe` block, we‚Äôll get an error:\n\n```console\n$ cargo run\n   Compiling unsafe-example v0.1.0 (file:///projects/unsafe-example)\nerror[E0133]: call to unsafe function `dangerous` is unsafe and requires unsafe function or block\n --> src/main.rs:4:5\n  |\n4 |     dangerous();\n  |     ^^^^^^^^^^^ call to unsafe function\n  |\n  = note: consult the function's documentation for information on how to avoid undefined behavior\n\nFor more information about this error, try `rustc --explain E0133`.\nerror: could not compile `unsafe-example` (bin \"unsafe-example\") due to 1 previous error\n\n```\n\nWith the `unsafe` block, we‚Äôre asserting to Rust that we‚Äôve read the function‚Äôs documentation, we understand how to use it properly, and we‚Äôve verified that we‚Äôre fulfilling the contract of the function.\n\nBodies of unsafe functions are effectively `unsafe` blocks, so to perform other unsafe operations within an unsafe function, we don‚Äôt need to add another `unsafe` block.\n\n#### [Creating a Safe Abstraction over Unsafe Code](#creating-a-safe-abstraction-over-unsafe-code)\n\nJust because a function contains unsafe code doesn‚Äôt mean we need to mark the entire function as unsafe. In fact, wrapping unsafe code in a safe function is a common abstraction. As an example, let‚Äôs study the `split_at_mut` function from the standard library, which requires some unsafe code. We‚Äôll explore how we might implement it. This safe method is defined on mutable slices: it takes one slice and makes it two by splitting the slice at the index given as an argument. Listing 19-4 shows how to use `split_at_mut`.\n\n```rust\nfn main() {\n    let mut v = vec![1, 2, 3, 4, 5, 6];\n\n    let r = &mut v[..];\n\n    let (a, b) = r.split_at_mut(3);\n\n    assert_eq!(a, &mut [1, 2, 3]);\n    assert_eq!(b, &mut [4, 5, 6]);\n}\n```\n\nListing 19-4: Using the safe `split_at_mut` function\n\nWe can‚Äôt implement this function using only safe Rust. An attempt might look something like Listing 19-5, which won‚Äôt compile. For simplicity, we‚Äôll implement `split_at_mut` as a function rather than a method and only for slices of `i32` values rather than for a generic type `T`.\n\n```rust\nfn split_at_mut(values: &mut [i32], mid: usize) -> (&mut [i32], &mut [i32]) {\n    let len = values.len();\n\n    assert!(mid <= len);\n\n    (&mut values[..mid], &mut values[mid..])\n}\n\nfn main() {\n    let mut vector = vec![1, 2, 3, 4, 5, 6];\n    let (left, right) = split_at_mut(&mut vector, 3);\n}\n```\n\nListing 19-5: An attempted implementation of `split_at_mut` using only safe Rust\n\nThis function first gets the total length of the slice. Then it asserts that the index given as a parameter is within the slice by checking whether it‚Äôs less than or equal to the length. The assertion means that if we pass an index that is greater than the length to split the slice at, the function will panic before it attempts to use that index.\n\nThen we return two mutable slices in a tuple: one from the start of the original slice to the `mid` index and another from `mid` to the end of the slice.\n\nWhen we try to compile the code in Listing 19-5, we‚Äôll get an error.\n\n```console\n$ cargo run\n   Compiling unsafe-example v0.1.0 (file:///projects/unsafe-example)\nerror[E0499]: cannot borrow `*values` as mutable more than once at a time\n --> src/main.rs:6:31\n  |\n1 | fn split_at_mut(values: &mut [i32], mid: usize) -> (&mut [i32], &mut [i32]) {\n  |                         - let's call the lifetime of this reference `'1`\n...\n6 |     (&mut values[..mid], &mut values[mid..])\n  |     --------------------------^^^^^^--------\n  |     |     |                   |\n  |     |     |                   second mutable borrow occurs here\n  |     |     first mutable borrow occurs here\n  |     returning this value requires that `*values` is borrowed for `'1`\n\nFor more information about this error, try `rustc --explain E0499`.\nerror: could not compile `unsafe-example` (bin \"unsafe-example\") due to 1 previous error\n\n```\n\nRust‚Äôs borrow checker can‚Äôt understand that we‚Äôre borrowing different parts of the slice; it only knows that we‚Äôre borrowing from the same slice twice. Borrowing different parts of a slice is fundamentally okay because the two slices aren‚Äôt overlapping, but Rust isn‚Äôt smart enough to know this. When we know code is okay, but Rust doesn‚Äôt, it‚Äôs time to reach for unsafe code.\n\nListing 19-6 shows how to use an `unsafe` block, a raw pointer, and some calls to unsafe functions to make the implementation of `split_at_mut` work.\n\n```rust\nuse std::slice;\n\nfn split_at_mut(values: &mut [i32], mid: usize) -> (&mut [i32], &mut [i32]) {\n    let len = values.len();\n    let ptr = values.as_mut_ptr();\n\n    assert!(mid <= len);\n\n    unsafe {\n        (\n            slice::from_raw_parts_mut(ptr, mid),\n            slice::from_raw_parts_mut(ptr.add(mid), len - mid),\n        )\n    }\n}\n\nfn main() {\n    let mut vector = vec![1, 2, 3, 4, 5, 6];\n    let (left, right) = split_at_mut(&mut vector, 3);\n}\n```\n\nListing 19-6: Using unsafe code in the implementation of the `split_at_mut` function\n\nRecall from [‚ÄúThe Slice Type‚Äù](about:blank/ch04-03-slices.html#the-slice-type) section in Chapter 4 that slices are a pointer to some data and the length of the slice. We use the `len` method to get the length of a slice and the `as_mut_ptr` method to access the raw pointer of a slice. In this case, because we have a mutable slice to `i32` values, `as_mut_ptr` returns a raw pointer with the type `*mut i32`, which we‚Äôve stored in the variable `ptr`.\n\nWe keep the assertion that the `mid` index is within the slice. Then we get to the unsafe code: the `slice::from_raw_parts_mut` function takes a raw pointer and a length, and it creates a slice. We use this function to create a slice that starts from `ptr` and is `mid` items long. Then we call the `add` method on `ptr` with `mid` as an argument to get a raw pointer that starts at `mid`, and we create a slice using that pointer and the remaining number of items after `mid` as the length.\n\nThe function `slice::from_raw_parts_mut` is unsafe because it takes a raw pointer and must trust that this pointer is valid. The `add` method on raw pointers is also unsafe, because it must trust that the offset location is also a valid pointer. Therefore, we had to put an `unsafe` block around our calls to `slice::from_raw_parts_mut` and `add` so we could call them. By looking at the code and by adding the assertion that `mid` must be less than or equal to `len`, we can tell that all the raw pointers used within the `unsafe` block will be valid pointers to data within the slice. This is an acceptable and appropriate use of `unsafe`.\n\nNote that we don‚Äôt need to mark the resulting `split_at_mut` function as `unsafe`, and we can call this function from safe Rust. We‚Äôve created a safe abstraction to the unsafe code with an implementation of the function that uses `unsafe` code in a safe way, because it creates only valid pointers from the data this function has access to.\n\nIn contrast, the use of `slice::from_raw_parts_mut` in Listing 19-7 would likely crash when the slice is used. This code takes an arbitrary memory location and creates a slice 10,000 items long.\n\n```rust\nfn main() {\n    use std::slice;\n\n    let address = 0x01234usize;\n    let r = address as *mut i32;\n\n    let values: &[i32] = unsafe { slice::from_raw_parts_mut(r, 10000) };\n}\n```\n\nListing 19-7: Creating a slice from an arbitrary memory location\n\nWe don‚Äôt own the memory at this arbitrary location, and there is no guarantee that the slice this code creates contains valid `i32` values. Attempting to use `values` as though it‚Äôs a valid slice results in undefined behavior.\n\n#### [Using `extern` Functions to Call External Code](#using-extern-functions-to-call-external-code)\n\nSometimes, your Rust code might need to interact with code written in another language. For this, Rust has the keyword `extern` that facilitates the creation and use of a _Foreign Function Interface (FFI)_. An FFI is a way for a programming language to define functions and enable a different (foreign) programming language to call those functions.\n\nListing 19-8 demonstrates how to set up an integration with the `abs` function from the C standard library. Functions declared within `extern` blocks are always unsafe to call from Rust code. The reason is that other languages don‚Äôt enforce Rust‚Äôs rules and guarantees, and Rust can‚Äôt check them, so responsibility falls on the programmer to ensure safety.\n\nFilename: src/main.rs\n\n```rust\nextern \"C\" {\n    fn abs(input: i32) -> i32;\n}\n\nfn main() {\n    unsafe {\n        println!(\"Absolute value of -3 according to C: {}\", abs(-3));\n    }\n}\n```\n\nListing 19-8: Declaring and calling an `extern` function defined in another language\n\nWithin the `extern \"C\"` block, we list the names and signatures of external functions from another language we want to call. The `\"C\"` part defines which _application binary interface (ABI)_ the external function uses: the ABI defines how to call the function at the assembly level. The `\"C\"` ABI is the most common and follows the C programming language‚Äôs ABI.\n\n#### [Calling Rust Functions from Other Languages](#calling-rust-functions-from-other-languages)\n\nWe can also use `extern` to create an interface that allows other languages to call Rust functions. Instead of creating a whole `extern` block, we add the `extern` keyword and specify the ABI to use just before the `fn` keyword for the relevant function. We also need to add a `#[no_mangle]` annotation to tell the Rust compiler not to mangle the name of this function. _Mangling_ is when a compiler changes the name we‚Äôve given a function to a different name that contains more information for other parts of the compilation process to consume but is less human readable. Every programming language compiler mangles names slightly differently, so for a Rust function to be nameable by other languages, we must disable the Rust compiler‚Äôs name mangling.\n\nIn the following example, we make the `call_from_c` function accessible from C code, after it‚Äôs compiled to a shared library and linked from C:\n\n```rust\n#![allow(unused)]\nfn main() {\n#[no_mangle]\npub extern \"C\" fn call_from_c() {\n    println!(\"Just called a Rust function from C!\");\n}\n}\n```\n\nThis usage of `extern` does not require `unsafe`.\n\n### [Accessing or Modifying a Mutable Static Variable](#accessing-or-modifying-a-mutable-static-variable)\n\nIn this book, we‚Äôve not yet talked about _global variables_, which Rust does support but can be problematic with Rust‚Äôs ownership rules. If two threads are accessing the same mutable global variable, it can cause a data race.\n\nIn Rust, global variables are called _static_ variables. Listing 19-9 shows an example declaration and use of a static variable with a string slice as a value.\n\nFilename: src/main.rs\n\n```rust\nstatic HELLO_WORLD: &str = \"Hello, world!\";\n\nfn main() {\n    println!(\"name is: {HELLO_WORLD}\");\n}\n```\n\nListing 19-9: Defining and using an immutable static variable\n\nStatic variables are similar to constants, which we discussed in the [‚ÄúDifferences Between Variables and Constants‚Äù](about:blank/ch03-01-variables-and-mutability.html#constants) section in Chapter 3. The names of static variables are in `SCREAMING_SNAKE_CASE` by convention. Static variables can only store references with the `'static` lifetime, which means the Rust compiler can figure out the lifetime and we aren‚Äôt required to annotate it explicitly. Accessing an immutable static variable is safe.\n\nA subtle difference between constants and immutable static variables is that values in a static variable have a fixed address in memory. Using the value will always access the same data. Constants, on the other hand, are allowed to duplicate their data whenever they‚Äôre used. Another difference is that static variables can be mutable. Accessing and modifying mutable static variables is _unsafe_. Listing 19-10 shows how to declare, access, and modify a mutable static variable named `COUNTER`.\n\nFilename: src/main.rs\n\n```rust\nstatic mut COUNTER: u32 = 0;\n\nfn add_to_count(inc: u32) {\n    unsafe {\n        COUNTER += inc;\n    }\n}\n\nfn main() {\n    add_to_count(3);\n\n    unsafe {\n        println!(\"COUNTER: {COUNTER}\");\n    }\n}\n```\n\nListing 19-10: Reading from or writing to a mutable static variable is unsafe\n\nAs with regular variables, we specify mutability using the `mut` keyword. Any code that reads or writes from `COUNTER` must be within an `unsafe` block. This code compiles and prints `COUNTER: 3` as we would expect because it‚Äôs single threaded. Having multiple threads access `COUNTER` would likely result in data races.\n\nWith mutable data that is globally accessible, it‚Äôs difficult to ensure there are no data races, which is why Rust considers mutable static variables to be unsafe. Where possible, it‚Äôs preferable to use the concurrency techniques and thread-safe smart pointers we discussed in Chapter 16 so the compiler checks that data accessed from different threads is done safely.\n\n### [Implementing an Unsafe Trait](#implementing-an-unsafe-trait)\n\nWe can use `unsafe` to implement an unsafe trait. A trait is unsafe when at least one of its methods has some invariant that the compiler can‚Äôt verify. We declare that a trait is `unsafe` by adding the `unsafe` keyword before `trait` and marking the implementation of the trait as `unsafe` too, as shown in Listing 19-11.\n\n```rust\nunsafe trait Foo {\n    // methods go here\n}\n\nunsafe impl Foo for i32 {\n    // method implementations go here\n}\n\nfn main() {}\n```\n\nListing 19-11: Defining and implementing an unsafe trait\n\nBy using `unsafe impl`, we‚Äôre promising that we‚Äôll uphold the invariants that the compiler can‚Äôt verify.\n\nAs an example, recall the `Sync` and `Send` marker traits we discussed in the [‚ÄúExtensible Concurrency with the `Sync` and `Send` Traits‚Äù](about:blank/ch16-04-extensible-concurrency-sync-and-send.html#extensible-concurrency-with-the-sync-and-send-traits) section in Chapter 16: the compiler implements these traits automatically if our types are composed entirely of `Send` and `Sync` types. If we implement a type that contains a type that is not `Send` or `Sync`, such as raw pointers, and we want to mark that type as `Send` or `Sync`, we must use `unsafe`. Rust can‚Äôt verify that our type upholds the guarantees that it can be safely sent across threads or accessed from multiple threads; therefore, we need to do those checks manually and indicate as such with `unsafe`.\n\n### [Accessing Fields of a Union](#accessing-fields-of-a-union)\n\nThe final action that works only with `unsafe` is accessing fields of a _union_. A `union` is similar to a `struct`, but only one declared field is used in a particular instance at one time. Unions are primarily used to interface with unions in C code. Accessing union fields is unsafe because Rust can‚Äôt guarantee the type of the data currently being stored in the union instance. You can learn more about unions in [the Rust Reference](../reference/items/unions.html).\n\n### [When to Use Unsafe Code](#when-to-use-unsafe-code)\n\nUsing `unsafe` to take one of the five actions (superpowers) just discussed isn‚Äôt wrong or even frowned upon. But it is trickier to get `unsafe` code correct because the compiler can‚Äôt help uphold memory safety. When you have a reason to use `unsafe` code, you can do so, and having the explicit `unsafe` annotation makes it easier to track down the source of problems when they occur.\n\n## [Advanced Traits](#advanced-traits)\n\nWe first covered traits in the [‚ÄúTraits: Defining Shared Behavior‚Äù](about:blank/ch10-02-traits.html#traits-defining-shared-behavior) section of Chapter 10, but we didn‚Äôt discuss the more advanced details. Now that you know more about Rust, we can get into the nitty-gritty.\n\n### [Specifying Placeholder Types in Trait Definitions with Associated Types](#specifying-placeholder-types-in-trait-definitions-with-associated-types)\n\n_Associated types_ connect a type placeholder with a trait such that the trait method definitions can use these placeholder types in their signatures. The implementor of a trait will specify the concrete type to be used instead of the placeholder type for the particular implementation. That way, we can define a trait that uses some types without needing to know exactly what those types are until the trait is implemented.\n\nWe‚Äôve described most of the advanced features in this chapter as being rarely needed. Associated types are somewhere in the middle: they‚Äôre used more rarely than features explained in the rest of the book but more commonly than many of the other features discussed in this chapter.\n\nOne example of a trait with an associated type is the `Iterator` trait that the standard library provides. The associated type is named `Item` and stands in for the type of the values the type implementing the `Iterator` trait is iterating over. The definition of the `Iterator` trait is as shown in Listing 19-12.\n\n```rust\npub trait Iterator {\n    type Item;\n\n    fn next(&mut self) -> Option<Self::Item>;\n}\n```\n\nListing 19-12: The definition of the `Iterator` trait that has an associated type `Item`\n\nThe type `Item` is a placeholder, and the `next` method‚Äôs definition shows that it will return values of type `Option<Self::Item>`. Implementors of the `Iterator` trait will specify the concrete type for `Item`, and the `next` method will return an `Option` containing a value of that concrete type.\n\nAssociated types might seem like a similar concept to generics, in that the latter allow us to define a function without specifying what types it can handle. To examine the difference between the two concepts, we‚Äôll look at an implementation of the `Iterator` trait on a type named `Counter` that specifies the `Item` type is `u32`:\n\nFilename: src/lib.rs\n\n```rust\nstruct Counter {\n    count: u32,\n}\n\nimpl Counter {\n    fn new() -> Counter {\n        Counter { count: 0 }\n    }\n}\n\nimpl Iterator for Counter {\n    type Item = u32;\n\n    fn next(&mut self) -> Option<Self::Item> {\n        // --snip--\n        if self.count < 5 {\n            self.count += 1;\n            Some(self.count)\n        } else {\n            None\n        }\n    }\n}\n```\n\nThis syntax seems comparable to that of generics. So why not just define the `Iterator` trait with generics, as shown in Listing 19-13?\n\n```rust\npub trait Iterator<T> {\n    fn next(&mut self) -> Option<T>;\n}\n```\n\nListing 19-13: A hypothetical definition of the `Iterator` trait using generics\n\nThe difference is that when using generics, as in Listing 19-13, we must annotate the types in each implementation; because we can also implement `Iterator<String> for Counter` or any other type, we could have multiple implementations of `Iterator` for `Counter`. In other words, when a trait has a generic parameter, it can be implemented for a type multiple times, changing the concrete types of the generic type parameters each time. When we use the `next` method on `Counter`, we would have to provide type annotations to indicate which implementation of `Iterator` we want to use.\n\nWith associated types, we don‚Äôt need to annotate types because we can‚Äôt implement a trait on a type multiple times. In Listing 19-12 with the definition that uses associated types, we can only choose what the type of `Item` will be once, because there can only be one `impl Iterator for Counter`. We don‚Äôt have to specify that we want an iterator of `u32` values everywhere that we call `next` on `Counter`.\n\nAssociated types also become part of the trait‚Äôs contract: implementors of the trait must provide a type to stand in for the associated type placeholder. Associated types often have a name that describes how the type will be used, and documenting the associated type in the API documentation is good practice.\n\n### [Default Generic Type Parameters and Operator Overloading](#default-generic-type-parameters-and-operator-overloading)\n\nWhen we use generic type parameters, we can specify a default concrete type for the generic type. This eliminates the need for implementors of the trait to specify a concrete type if the default type works. You specify a default type when declaring a generic type with the `<PlaceholderType=ConcreteType>` syntax.\n\nA great example of a situation where this technique is useful is with _operator overloading_, in which you customize the behavior of an operator (such as `+`) in particular situations.\n\nRust doesn‚Äôt allow you to create your own operators or overload arbitrary operators. But you can overload the operations and corresponding traits listed in `std::ops` by implementing the traits associated with the operator. For example, in Listing 19-14 we overload the `+` operator to add two `Point` instances together. We do this by implementing the `Add` trait on a `Point` struct:\n\nFilename: src/main.rs\n\n```rust\nuse std::ops::Add;\n\n#[derive(Debug, Copy, Clone, PartialEq)]\nstruct Point {\n    x: i32,\n    y: i32,\n}\n\nimpl Add for Point {\n    type Output = Point;\n\n    fn add(self, other: Point) -> Point {\n        Point {\n            x: self.x + other.x,\n            y: self.y + other.y,\n        }\n    }\n}\n\nfn main() {\n    assert_eq!(\n        Point { x: 1, y: 0 } + Point { x: 2, y: 3 },\n        Point { x: 3, y: 3 }\n    );\n}\n```\n\nListing 19-14: Implementing the `Add` trait to overload the `+` operator for `Point` instances\n\nThe `add` method adds the `x` values of two `Point` instances and the `y` values of two `Point` instances to create a new `Point`. The `Add` trait has an associated type named `Output` that determines the type returned from the `add` method.\n\nThe default generic type in this code is within the `Add` trait. Here is its definition:\n\n```rust\n#![allow(unused)]\nfn main() {\ntrait Add<Rhs=Self> {\n    type Output;\n\n    fn add(self, rhs: Rhs) -> Self::Output;\n}\n}\n```\n\nThis code should look generally familiar: a trait with one method and an associated type. The new part is `Rhs=Self`: this syntax is called _default type parameters_. The `Rhs` generic type parameter (short for ‚Äúright hand side‚Äù) defines the type of the `rhs` parameter in the `add` method. If we don‚Äôt specify a concrete type for `Rhs` when we implement the `Add` trait, the type of `Rhs` will default to `Self`, which will be the type we‚Äôre implementing `Add` on.\n\nWhen we implemented `Add` for `Point`, we used the default for `Rhs` because we wanted to add two `Point` instances. Let‚Äôs look at an example of implementing the `Add` trait where we want to customize the `Rhs` type rather than using the default.\n\nWe have two structs, `Millimeters` and `Meters`, holding values in different units. This thin wrapping of an existing type in another struct is known as the _newtype pattern_, which we describe in more detail in the [‚ÄúUsing the Newtype Pattern to Implement External Traits on External Types‚Äù](about:blank/ch19-03-advanced-traits.html#using-the-newtype-pattern-to-implement-external-traits-on-external-types) section. We want to add values in millimeters to values in meters and have the implementation of `Add` do the conversion correctly. We can implement `Add` for `Millimeters` with `Meters` as the `Rhs`, as shown in Listing 19-15.\n\nFilename: src/lib.rs\n\n```rust\nuse std::ops::Add;\n\nstruct Millimeters(u32);\nstruct Meters(u32);\n\nimpl Add<Meters> for Millimeters {\n    type Output = Millimeters;\n\n    fn add(self, other: Meters) -> Millimeters {\n        Millimeters(self.0 + (other.0 * 1000))\n    }\n}\n```\n\nListing 19-15: Implementing the `Add` trait on `Millimeters` to add `Millimeters` to `Meters`\n\nTo add `Millimeters` and `Meters`, we specify `impl Add<Meters>` to set the value of the `Rhs` type parameter instead of using the default of `Self`.\n\nYou‚Äôll use default type parameters in two main ways:\n\n-   To extend a type without breaking existing code\n-   To allow customization in specific cases most users won‚Äôt need\n\nThe standard library‚Äôs `Add` trait is an example of the second purpose: usually, you‚Äôll add two like types, but the `Add` trait provides the ability to customize beyond that. Using a default type parameter in the `Add` trait definition means you don‚Äôt have to specify the extra parameter most of the time. In other words, a bit of implementation boilerplate isn‚Äôt needed, making it easier to use the trait.\n\nThe first purpose is similar to the second but in reverse: if you want to add a type parameter to an existing trait, you can give it a default to allow extension of the functionality of the trait without breaking the existing implementation code.\n\n### [Fully Qualified Syntax for Disambiguation: Calling Methods with the Same Name](#fully-qualified-syntax-for-disambiguation-calling-methods-with-the-same-name)\n\nNothing in Rust prevents a trait from having a method with the same name as another trait‚Äôs method, nor does Rust prevent you from implementing both traits on one type. It‚Äôs also possible to implement a method directly on the type with the same name as methods from traits.\n\nWhen calling methods with the same name, you‚Äôll need to tell Rust which one you want to use. Consider the code in Listing 19-16 where we‚Äôve defined two traits, `Pilot` and `Wizard`, that both have a method called `fly`. We then implement both traits on a type `Human` that already has a method named `fly` implemented on it. Each `fly` method does something different.\n\nFilename: src/main.rs\n\n```rust\ntrait Pilot {\n    fn fly(&self);\n}\n\ntrait Wizard {\n    fn fly(&self);\n}\n\nstruct Human;\n\nimpl Pilot for Human {\n    fn fly(&self) {\n        println!(\"This is your captain speaking.\");\n    }\n}\n\nimpl Wizard for Human {\n    fn fly(&self) {\n        println!(\"Up!\");\n    }\n}\n\nimpl Human {\n    fn fly(&self) {\n        println!(\"*waving arms furiously*\");\n    }\n}\n\nfn main() {}\n```\n\nListing 19-16: Two traits are defined to have a `fly` method and are implemented on the `Human` type, and a `fly` method is implemented on `Human` directly\n\nWhen we call `fly` on an instance of `Human`, the compiler defaults to calling the method that is directly implemented on the type, as shown in Listing 19-17.\n\nFilename: src/main.rs\n\n```rust\ntrait Pilot {\n    fn fly(&self);\n}\n\ntrait Wizard {\n    fn fly(&self);\n}\n\nstruct Human;\n\nimpl Pilot for Human {\n    fn fly(&self) {\n        println!(\"This is your captain speaking.\");\n    }\n}\n\nimpl Wizard for Human {\n    fn fly(&self) {\n        println!(\"Up!\");\n    }\n}\n\nimpl Human {\n    fn fly(&self) {\n        println!(\"*waving arms furiously*\");\n    }\n}\n\nfn main() {\n    let person = Human;\n    person.fly();\n}\n```\n\nListing 19-17: Calling `fly` on an instance of `Human`\n\nRunning this code will print `*waving arms furiously*`, showing that Rust called the `fly` method implemented on `Human` directly.\n\nTo call the `fly` methods from either the `Pilot` trait or the `Wizard` trait, we need to use more explicit syntax to specify which `fly` method we mean. Listing 19-18 demonstrates this syntax.\n\nFilename: src/main.rs\n\n```rust\ntrait Pilot {\n    fn fly(&self);\n}\n\ntrait Wizard {\n    fn fly(&self);\n}\n\nstruct Human;\n\nimpl Pilot for Human {\n    fn fly(&self) {\n        println!(\"This is your captain speaking.\");\n    }\n}\n\nimpl Wizard for Human {\n    fn fly(&self) {\n        println!(\"Up!\");\n    }\n}\n\nimpl Human {\n    fn fly(&self) {\n        println!(\"*waving arms furiously*\");\n    }\n}\n\nfn main() {\n    let person = Human;\n    Pilot::fly(&person);\n    Wizard::fly(&person);\n    person.fly();\n}\n```\n\nListing 19-18: Specifying which trait‚Äôs `fly` method we want to call\n\nSpecifying the trait name before the method name clarifies to Rust which implementation of `fly` we want to call. We could also write `Human::fly(&person)`, which is equivalent to the `person.fly()` that we used in Listing 19-18, but this is a bit longer to write if we don‚Äôt need to disambiguate.\n\nRunning this code prints the following:\n\n```console\n$ cargo run\n   Compiling traits-example v0.1.0 (file:///projects/traits-example)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.46s\n     Running `target/debug/traits-example`\nThis is your captain speaking.\nUp!\n*waving arms furiously*\n\n```\n\nBecause the `fly` method takes a `self` parameter, if we had two _types_ that both implement one _trait_, Rust could figure out which implementation of a trait to use based on the type of `self`.\n\nHowever, associated functions that are not methods don‚Äôt have a `self` parameter. When there are multiple types or traits that define non-method functions with the same function name, Rust doesn‚Äôt always know which type you mean unless you use _fully qualified syntax_. For example, in Listing 19-19 we create a trait for an animal shelter that wants to name all baby dogs _Spot_. We make an `Animal` trait with an associated non-method function `baby_name`. The `Animal` trait is implemented for the struct `Dog`, on which we also provide an associated non-method function `baby_name` directly.\n\nFilename: src/main.rs\n\n```rust\ntrait Animal {\n    fn baby_name() -> String;\n}\n\nstruct Dog;\n\nimpl Dog {\n    fn baby_name() -> String {\n        String::from(\"Spot\")\n    }\n}\n\nimpl Animal for Dog {\n    fn baby_name() -> String {\n        String::from(\"puppy\")\n    }\n}\n\nfn main() {\n    println!(\"A baby dog is called a {}\", Dog::baby_name());\n}\n```\n\nListing 19-19: A trait with an associated function and a type with an associated function of the same name that also implements the trait\n\nWe implement the code for naming all puppies Spot in the `baby_name` associated function that is defined on `Dog`. The `Dog` type also implements the trait `Animal`, which describes characteristics that all animals have. Baby dogs are called puppies, and that is expressed in the implementation of the `Animal` trait on `Dog` in the `baby_name` function associated with the `Animal` trait.\n\nIn `main`, we call the `Dog::baby_name` function, which calls the associated function defined on `Dog` directly. This code prints the following:\n\n```console\n$ cargo run\n   Compiling traits-example v0.1.0 (file:///projects/traits-example)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.54s\n     Running `target/debug/traits-example`\nA baby dog is called a Spot\n\n```\n\nThis output isn‚Äôt what we wanted. We want to call the `baby_name` function that is part of the `Animal` trait that we implemented on `Dog` so the code prints `A baby dog is called a puppy`. The technique of specifying the trait name that we used in Listing 19-18 doesn‚Äôt help here; if we change `main` to the code in Listing 19-20, we‚Äôll get a compilation error.\n\nFilename: src/main.rs\n\n```rust\ntrait Animal {\n    fn baby_name() -> String;\n}\n\nstruct Dog;\n\nimpl Dog {\n    fn baby_name() -> String {\n        String::from(\"Spot\")\n    }\n}\n\nimpl Animal for Dog {\n    fn baby_name() -> String {\n        String::from(\"puppy\")\n    }\n}\n\nfn main() {\n    println!(\"A baby dog is called a {}\", Animal::baby_name());\n}\n```\n\nListing 19-20: Attempting to call the `baby_name` function from the `Animal` trait, but Rust doesn‚Äôt know which implementation to use\n\nBecause `Animal::baby_name` doesn‚Äôt have a `self` parameter, and there could be other types that implement the `Animal` trait, Rust can‚Äôt figure out which implementation of `Animal::baby_name` we want. We‚Äôll get this compiler error:\n\n```console\n$ cargo run\n   Compiling traits-example v0.1.0 (file:///projects/traits-example)\nerror[E0790]: cannot call associated function on trait without specifying the corresponding `impl` type\n  --> src/main.rs:20:43\n   |\n2  |     fn baby_name() -> String;\n   |     ------------------------- `Animal::baby_name` defined here\n...\n20 |     println!(\"A baby dog is called a {}\", Animal::baby_name());\n   |                                           ^^^^^^^^^^^^^^^^^^^ cannot call associated function of trait\n   |\nhelp: use the fully-qualified path to the only available implementation\n   |\n20 |     println!(\"A baby dog is called a {}\", <Dog as Animal>::baby_name());\n   |                                           +++++++       +\n\nFor more information about this error, try `rustc --explain E0790`.\nerror: could not compile `traits-example` (bin \"traits-example\") due to 1 previous error\n\n```\n\nTo disambiguate and tell Rust that we want to use the implementation of `Animal` for `Dog` as opposed to the implementation of `Animal` for some other type, we need to use fully qualified syntax. Listing 19-21 demonstrates how to use fully qualified syntax.\n\nFilename: src/main.rs\n\n```rust\ntrait Animal {\n    fn baby_name() -> String;\n}\n\nstruct Dog;\n\nimpl Dog {\n    fn baby_name() -> String {\n        String::from(\"Spot\")\n    }\n}\n\nimpl Animal for Dog {\n    fn baby_name() -> String {\n        String::from(\"puppy\")\n    }\n}\n\nfn main() {\n    println!(\"A baby dog is called a {}\", <Dog as Animal>::baby_name());\n}\n```\n\nListing 19-21: Using fully qualified syntax to specify that we want to call the `baby_name` function from the `Animal` trait as implemented on `Dog`\n\nWe‚Äôre providing Rust with a type annotation within the angle brackets, which indicates we want to call the `baby_name` method from the `Animal` trait as implemented on `Dog` by saying that we want to treat the `Dog` type as an `Animal` for this function call. This code will now print what we want:\n\n```console\n$ cargo run\n   Compiling traits-example v0.1.0 (file:///projects/traits-example)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.48s\n     Running `target/debug/traits-example`\nA baby dog is called a puppy\n\n```\n\nIn general, fully qualified syntax is defined as follows:\n\n```rust\n<Type as Trait>::function(receiver_if_method, next_arg, ...);\n```\n\nFor associated functions that aren‚Äôt methods, there would not be a `receiver`: there would only be the list of other arguments. You could use fully qualified syntax everywhere that you call functions or methods. However, you‚Äôre allowed to omit any part of this syntax that Rust can figure out from other information in the program. You only need to use this more verbose syntax in cases where there are multiple implementations that use the same name and Rust needs help to identify which implementation you want to call.\n\n### [Using Supertraits to Require One Trait‚Äôs Functionality Within Another Trait](#using-supertraits-to-require-one-traits-functionality-within-another-trait)\n\nSometimes, you might write a trait definition that depends on another trait: for a type to implement the first trait, you want to require that type to also implement the second trait. You would do this so that your trait definition can make use of the associated items of the second trait. The trait your trait definition is relying on is called a _supertrait_ of your trait.\n\nFor example, let‚Äôs say we want to make an `OutlinePrint` trait with an `outline_print` method that will print a given value formatted so that it‚Äôs framed in asterisks. That is, given a `Point` struct that implements the standard library trait `Display` to result in `(x, y)`, when we call `outline_print` on a `Point` instance that has `1` for `x` and `3` for `y`, it should print the following:\n\n```text\n**********\n*        *\n* (1, 3) *\n*        *\n**********\n\n```\n\nIn the implementation of the `outline_print` method, we want to use the `Display` trait‚Äôs functionality. Therefore, we need to specify that the `OutlinePrint` trait will work only for types that also implement `Display` and provide the functionality that `OutlinePrint` needs. We can do that in the trait definition by specifying `OutlinePrint: Display`. This technique is similar to adding a trait bound to the trait. Listing 19-22 shows an implementation of the `OutlinePrint` trait.\n\nFilename: src/main.rs\n\n```rust\nuse std::fmt;\n\ntrait OutlinePrint: fmt::Display {\n    fn outline_print(&self) {\n        let output = self.to_string();\n        let len = output.len();\n        println!(\"{}\", \"*\".repeat(len + 4));\n        println!(\"*{}*\", \" \".repeat(len + 2));\n        println!(\"* {output} *\");\n        println!(\"*{}*\", \" \".repeat(len + 2));\n        println!(\"{}\", \"*\".repeat(len + 4));\n    }\n}\n\nfn main() {}\n```\n\nListing 19-22: Implementing the `OutlinePrint` trait that requires the functionality from `Display`\n\nBecause we‚Äôve specified that `OutlinePrint` requires the `Display` trait, we can use the `to_string` function that is automatically implemented for any type that implements `Display`. If we tried to use `to_string` without adding a colon and specifying the `Display` trait after the trait name, we‚Äôd get an error saying that no method named `to_string` was found for the type `&Self` in the current scope.\n\nLet‚Äôs see what happens when we try to implement `OutlinePrint` on a type that doesn‚Äôt implement `Display`, such as the `Point` struct:\n\nFilename: src/main.rs\n\n```rust\nuse std::fmt;\n\ntrait OutlinePrint: fmt::Display {\n    fn outline_print(&self) {\n        let output = self.to_string();\n        let len = output.len();\n        println!(\"{}\", \"*\".repeat(len + 4));\n        println!(\"*{}*\", \" \".repeat(len + 2));\n        println!(\"* {output} *\");\n        println!(\"*{}*\", \" \".repeat(len + 2));\n        println!(\"{}\", \"*\".repeat(len + 4));\n    }\n}\n\nstruct Point {\n    x: i32,\n    y: i32,\n}\n\nimpl OutlinePrint for Point {}\n\nfn main() {\n    let p = Point { x: 1, y: 3 };\n    p.outline_print();\n}\n```\n\nWe get an error saying that `Display` is required but not implemented:\n\n```console\n$ cargo run\n   Compiling traits-example v0.1.0 (file:///projects/traits-example)\nerror[E0277]: `Point` doesn't implement `std::fmt::Display`\n  --> src/main.rs:20:23\n   |\n20 | impl OutlinePrint for Point {}\n   |                       ^^^^^ `Point` cannot be formatted with the default formatter\n   |\n   = help: the trait `std::fmt::Display` is not implemented for `Point`\n   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\nnote: required by a bound in `OutlinePrint`\n  --> src/main.rs:3:21\n   |\n3  | trait OutlinePrint: fmt::Display {\n   |                     ^^^^^^^^^^^^ required by this bound in `OutlinePrint`\n\nerror[E0277]: `Point` doesn't implement `std::fmt::Display`\n  --> src/main.rs:24:7\n   |\n24 |     p.outline_print();\n   |       ^^^^^^^^^^^^^ `Point` cannot be formatted with the default formatter\n   |\n   = help: the trait `std::fmt::Display` is not implemented for `Point`\n   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\nnote: required by a bound in `OutlinePrint::outline_print`\n  --> src/main.rs:3:21\n   |\n3  | trait OutlinePrint: fmt::Display {\n   |                     ^^^^^^^^^^^^ required by this bound in `OutlinePrint::outline_print`\n4  |     fn outline_print(&self) {\n   |        ------------- required by a bound in this associated function\n\nFor more information about this error, try `rustc --explain E0277`.\nerror: could not compile `traits-example` (bin \"traits-example\") due to 2 previous errors\n\n```\n\nTo fix this, we implement `Display` on `Point` and satisfy the constraint that `OutlinePrint` requires, like so:\n\nFilename: src/main.rs\n\n```rust\ntrait OutlinePrint: fmt::Display {\n    fn outline_print(&self) {\n        let output = self.to_string();\n        let len = output.len();\n        println!(\"{}\", \"*\".repeat(len + 4));\n        println!(\"*{}*\", \" \".repeat(len + 2));\n        println!(\"* {output} *\");\n        println!(\"*{}*\", \" \".repeat(len + 2));\n        println!(\"{}\", \"*\".repeat(len + 4));\n    }\n}\n\nstruct Point {\n    x: i32,\n    y: i32,\n}\n\nimpl OutlinePrint for Point {}\n\nuse std::fmt;\n\nimpl fmt::Display for Point {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        write!(f, \"({}, {})\", self.x, self.y)\n    }\n}\n\nfn main() {\n    let p = Point { x: 1, y: 3 };\n    p.outline_print();\n}\n```\n\nThen implementing the `OutlinePrint` trait on `Point` will compile successfully, and we can call `outline_print` on a `Point` instance to display it within an outline of asterisks.\n\n### [Using the Newtype Pattern to Implement External Traits on External Types](#using-the-newtype-pattern-to-implement-external-traits-on-external-types)\n\nIn Chapter 10 in the [‚ÄúImplementing a Trait on a Type‚Äù](about:blank/ch10-02-traits.html#implementing-a-trait-on-a-type) section, we mentioned the orphan rule that states we‚Äôre only allowed to implement a trait on a type if either the trait or the type are local to our crate. It‚Äôs possible to get around this restriction using the _newtype pattern_, which involves creating a new type in a tuple struct. (We covered tuple structs in the [‚ÄúUsing Tuple Structs without Named Fields to Create Different Types‚Äù](about:blank/ch05-01-defining-structs.html#using-tuple-structs-without-named-fields-to-create-different-types) section of Chapter 5.) The tuple struct will have one field and be a thin wrapper around the type we want to implement a trait for. Then the wrapper type is local to our crate, and we can implement the trait on the wrapper. _Newtype_ is a term that originates from the Haskell programming language. There is no runtime performance penalty for using this pattern, and the wrapper type is elided at compile time.\n\nAs an example, let‚Äôs say we want to implement `Display` on `Vec<T>`, which the orphan rule prevents us from doing directly because the `Display` trait and the `Vec<T>` type are defined outside our crate. We can make a `Wrapper` struct that holds an instance of `Vec<T>`; then we can implement `Display` on `Wrapper` and use the `Vec<T>` value, as shown in Listing 19-23.\n\nFilename: src/main.rs\n\n```rust\nuse std::fmt;\n\nstruct Wrapper(Vec<String>);\n\nimpl fmt::Display for Wrapper {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        write!(f, \"[{}]\", self.0.join(\", \"))\n    }\n}\n\nfn main() {\n    let w = Wrapper(vec![String::from(\"hello\"), String::from(\"world\")]);\n    println!(\"w = {w}\");\n}\n```\n\nListing 19-23: Creating a `Wrapper` type around `Vec<String>` to implement `Display`\n\nThe implementation of `Display` uses `self.0` to access the inner `Vec<T>`, because `Wrapper` is a tuple struct and `Vec<T>` is the item at index 0 in the tuple. Then we can use the functionality of the `Display` trait on `Wrapper`.\n\nThe downside of using this technique is that `Wrapper` is a new type, so it doesn‚Äôt have the methods of the value it‚Äôs holding. We would have to implement all the methods of `Vec<T>` directly on `Wrapper` such that the methods delegate to `self.0`, which would allow us to treat `Wrapper` exactly like a `Vec<T>`. If we wanted the new type to have every method the inner type has, implementing the `Deref` trait (discussed in Chapter 15 in the [‚ÄúTreating Smart Pointers Like Regular References with the `Deref` Trait‚Äù](about:blank/ch15-02-deref.html#treating-smart-pointers-like-regular-references-with-the-deref-trait) section) on the `Wrapper` to return the inner type would be a solution. If we don‚Äôt want the `Wrapper` type to have all the methods of the inner type‚Äîfor example, to restrict the `Wrapper` type‚Äôs behavior‚Äîwe would have to implement just the methods we do want manually.\n\nThis newtype pattern is also useful even when traits are not involved. Let‚Äôs switch focus and look at some advanced ways to interact with Rust‚Äôs type system.\n\n## [Advanced Types](#advanced-types)\n\nThe Rust type system has some features that we‚Äôve so far mentioned but haven‚Äôt yet discussed. We‚Äôll start by discussing newtypes in general as we examine why newtypes are useful as types. Then we‚Äôll move on to type aliases, a feature similar to newtypes but with slightly different semantics. We‚Äôll also discuss the `!` type and dynamically sized types.\n\n### [Using the Newtype Pattern for Type Safety and Abstraction](#using-the-newtype-pattern-for-type-safety-and-abstraction)\n\nNote: This section assumes you‚Äôve read the earlier section [‚ÄúUsing the Newtype Pattern to Implement External Traits on External Types.‚Äù](about:blank/ch19-03-advanced-traits.html#using-the-newtype-pattern-to-implement-external-traits-on-external-types)\n\nThe newtype pattern is also useful for tasks beyond those we‚Äôve discussed so far, including statically enforcing that values are never confused and indicating the units of a value. You saw an example of using newtypes to indicate units in Listing 19-15: recall that the `Millimeters` and `Meters` structs wrapped `u32` values in a newtype. If we wrote a function with a parameter of type `Millimeters`, we couldn‚Äôt compile a program that accidentally tried to call that function with a value of type `Meters` or a plain `u32`.\n\nWe can also use the newtype pattern to abstract away some implementation details of a type: the new type can expose a public API that is different from the API of the private inner type.\n\nNewtypes can also hide internal implementation. For example, we could provide a `People` type to wrap a `HashMap<i32, String>` that stores a person‚Äôs ID associated with their name. Code using `People` would only interact with the public API we provide, such as a method to add a name string to the `People` collection; that code wouldn‚Äôt need to know that we assign an `i32` ID to names internally. The newtype pattern is a lightweight way to achieve encapsulation to hide implementation details, which we discussed in the [‚ÄúEncapsulation that Hides Implementation Details‚Äù](about:blank/ch17-01-what-is-oo.html#encapsulation-that-hides-implementation-details) section of Chapter 17.\n\n### [Creating Type Synonyms with Type Aliases](#creating-type-synonyms-with-type-aliases)\n\nRust provides the ability to declare a _type alias_ to give an existing type another name. For this we use the `type` keyword. For example, we can create the alias `Kilometers` to `i32` like so:\n\n```rust\nfn main() {\n    type Kilometers = i32;\n\n    let x: i32 = 5;\n    let y: Kilometers = 5;\n\n    println!(\"x + y = {}\", x + y);\n}\n```\n\nNow, the alias `Kilometers` is a _synonym_ for `i32`; unlike the `Millimeters` and `Meters` types we created in Listing 19-15, `Kilometers` is not a separate, new type. Values that have the type `Kilometers` will be treated the same as values of type `i32`:\n\n```rust\nfn main() {\n    type Kilometers = i32;\n\n    let x: i32 = 5;\n    let y: Kilometers = 5;\n\n    println!(\"x + y = {}\", x + y);\n}\n```\n\nBecause `Kilometers` and `i32` are the same type, we can add values of both types and we can pass `Kilometers` values to functions that take `i32` parameters. However, using this method, we don‚Äôt get the type checking benefits that we get from the newtype pattern discussed earlier. In other words, if we mix up `Kilometers` and `i32` values somewhere, the compiler will not give us an error.\n\nThe main use case for type synonyms is to reduce repetition. For example, we might have a lengthy type like this:\n\n```rust\nBox<dyn Fn() + Send + 'static>\n```\n\nWriting this lengthy type in function signatures and as type annotations all over the code can be tiresome and error prone. Imagine having a project full of code like that in Listing 19-24.\n\n```rust\nfn main() {\n    let f: Box<dyn Fn() + Send + 'static> = Box::new(|| println!(\"hi\"));\n\n    fn takes_long_type(f: Box<dyn Fn() + Send + 'static>) {\n        // --snip--\n    }\n\n    fn returns_long_type() -> Box<dyn Fn() + Send + 'static> {\n        // --snip--\n        Box::new(|| ())\n    }\n}\n```\n\nListing 19-24: Using a long type in many places\n\nA type alias makes this code more manageable by reducing the repetition. In Listing 19-25, we‚Äôve introduced an alias named `Thunk` for the verbose type and can replace all uses of the type with the shorter alias `Thunk`.\n\n```rust\nfn main() {\n    type Thunk = Box<dyn Fn() + Send + 'static>;\n\n    let f: Thunk = Box::new(|| println!(\"hi\"));\n\n    fn takes_long_type(f: Thunk) {\n        // --snip--\n    }\n\n    fn returns_long_type() -> Thunk {\n        // --snip--\n        Box::new(|| ())\n    }\n}\n```\n\nListing 19-25: Introducing a type alias `Thunk` to reduce repetition\n\nThis code is much easier to read and write! Choosing a meaningful name for a type alias can help communicate your intent as well (_thunk_ is a word for code to be evaluated at a later time, so it‚Äôs an appropriate name for a closure that gets stored).\n\nType aliases are also commonly used with the `Result<T, E>` type for reducing repetition. Consider the `std::io` module in the standard library. I/O operations often return a `Result<T, E>` to handle situations when operations fail to work. This library has a `std::io::Error` struct that represents all possible I/O errors. Many of the functions in `std::io` will be returning `Result<T, E>` where the `E` is `std::io::Error`, such as these functions in the `Write` trait:\n\n```rust\nuse std::fmt;\nuse std::io::Error;\n\npub trait Write {\n    fn write(&mut self, buf: &[u8]) -> Result<usize, Error>;\n    fn flush(&mut self) -> Result<(), Error>;\n\n    fn write_all(&mut self, buf: &[u8]) -> Result<(), Error>;\n    fn write_fmt(&mut self, fmt: fmt::Arguments) -> Result<(), Error>;\n}\n```\n\nThe `Result<..., Error>` is repeated a lot. As such, `std::io` has this type alias declaration:\n\n```rust\nuse std::fmt;\n\ntype Result<T> = std::result::Result<T, std::io::Error>;\n\npub trait Write {\n    fn write(&mut self, buf: &[u8]) -> Result<usize>;\n    fn flush(&mut self) -> Result<()>;\n\n    fn write_all(&mut self, buf: &[u8]) -> Result<()>;\n    fn write_fmt(&mut self, fmt: fmt::Arguments) -> Result<()>;\n}\n```\n\nBecause this declaration is in the `std::io` module, we can use the fully qualified alias `std::io::Result<T>`; that is, a `Result<T, E>` with the `E` filled in as `std::io::Error`. The `Write` trait function signatures end up looking like this:\n\n```rust\nuse std::fmt;\n\ntype Result<T> = std::result::Result<T, std::io::Error>;\n\npub trait Write {\n    fn write(&mut self, buf: &[u8]) -> Result<usize>;\n    fn flush(&mut self) -> Result<()>;\n\n    fn write_all(&mut self, buf: &[u8]) -> Result<()>;\n    fn write_fmt(&mut self, fmt: fmt::Arguments) -> Result<()>;\n}\n```\n\nThe type alias helps in two ways: it makes code easier to write _and_ it gives us a consistent interface across all of `std::io`. Because it‚Äôs an alias, it‚Äôs just another `Result<T, E>`, which means we can use any methods that work on `Result<T, E>` with it, as well as special syntax like the `?` operator.\n\n### [The Never Type that Never Returns](#the-never-type-that-never-returns)\n\nRust has a special type named `!` that‚Äôs known in type theory lingo as the _empty type_ because it has no values. We prefer to call it the _never type_ because it stands in the place of the return type when a function will never return. Here is an example:\n\n```rust\nfn bar() -> ! {\n    // --snip--\n    panic!();\n}\n```\n\nThis code is read as ‚Äúthe function `bar` returns never.‚Äù Functions that return never are called _diverging functions_. We can‚Äôt create values of the type `!` so `bar` can never possibly return.\n\nBut what use is a type you can never create values for? Recall the code from Listing 2-5, part of the number guessing game; we‚Äôve reproduced a bit of it here in Listing 19-26.\n\n```rust\nuse rand::Rng;\nuse std::cmp::Ordering;\nuse std::io;\n\nfn main() {\n    println!(\"Guess the number!\");\n\n    let secret_number = rand::thread_rng().gen_range(1..=100);\n\n    println!(\"The secret number is: {secret_number}\");\n\n    loop {\n        println!(\"Please input your guess.\");\n\n        let mut guess = String::new();\n\n        // --snip--\n\n        io::stdin()\n            .read_line(&mut guess)\n            .expect(\"Failed to read line\");\n\n        let guess: u32 = match guess.trim().parse() {\n            Ok(num) => num,\n            Err(_) => continue,\n        };\n\n        println!(\"You guessed: {guess}\");\n\n        // --snip--\n\n        match guess.cmp(&secret_number) {\n            Ordering::Less => println!(\"Too small!\"),\n            Ordering::Greater => println!(\"Too big!\"),\n            Ordering::Equal => {\n                println!(\"You win!\");\n                break;\n            }\n        }\n    }\n}\n```\n\nListing 19-26: A `match` with an arm that ends in `continue`\n\nAt the time, we skipped over some details in this code. In Chapter 6 in [‚ÄúThe `match` Control Flow Operator‚Äù](about:blank/ch06-02-match.html#the-match-control-flow-operator) section, we discussed that `match` arms must all return the same type. So, for example, the following code doesn‚Äôt work:\n\n```rust\nfn main() {\n    let guess = \"3\";\n    let guess = match guess.trim().parse() {\n        Ok(_) => 5,\n        Err(_) => \"hello\",\n    };\n}\n```\n\nThe type of `guess` in this code would have to be an integer _and_ a string, and Rust requires that `guess` have only one type. So what does `continue` return? How were we allowed to return a `u32` from one arm and have another arm that ends with `continue` in Listing 19-26?\n\nAs you might have guessed, `continue` has a `!` value. That is, when Rust computes the type of `guess`, it looks at both match arms, the former with a value of `u32` and the latter with a `!` value. Because `!` can never have a value, Rust decides that the type of `guess` is `u32`.\n\nThe formal way of describing this behavior is that expressions of type `!` can be coerced into any other type. We‚Äôre allowed to end this `match` arm with `continue` because `continue` doesn‚Äôt return a value; instead, it moves control back to the top of the loop, so in the `Err` case, we never assign a value to `guess`.\n\nThe never type is useful with the `panic!` macro as well. Recall the `unwrap` function that we call on `Option<T>` values to produce a value or panic with this definition:\n\n```rust\nenum Option<T> {\n    Some(T),\n    None,\n}\n\nuse crate::Option::*;\n\nimpl<T> Option<T> {\n    pub fn unwrap(self) -> T {\n        match self {\n            Some(val) => val,\n            None => panic!(\"called `Option::unwrap()` on a `None` value\"),\n        }\n    }\n}\n```\n\nIn this code, the same thing happens as in the `match` in Listing 19-26: Rust sees that `val` has the type `T` and `panic!` has the type `!`, so the result of the overall `match` expression is `T`. This code works because `panic!` doesn‚Äôt produce a value; it ends the program. In the `None` case, we won‚Äôt be returning a value from `unwrap`, so this code is valid.\n\nOne final expression that has the type `!` is a `loop`:\n\n```rust\nfn main() {\n    print!(\"forever \");\n\n    loop {\n        print!(\"and ever \");\n    }\n}\n```\n\nHere, the loop never ends, so `!` is the value of the expression. However, this wouldn‚Äôt be true if we included a `break`, because the loop would terminate when it got to the `break`.\n\n### [Dynamically Sized Types and the `Sized` Trait](#dynamically-sized-types-and-the-sized-trait)\n\nRust needs to know certain details about its types, such as how much space to allocate for a value of a particular type. This leaves one corner of its type system a little confusing at first: the concept of _dynamically sized types_. Sometimes referred to as _DSTs_ or _unsized types_, these types let us write code using values whose size we can know only at runtime.\n\nLet‚Äôs dig into the details of a dynamically sized type called `str`, which we‚Äôve been using throughout the book. That‚Äôs right, not `&str`, but `str` on its own, is a DST. We can‚Äôt know how long the string is until runtime, meaning we can‚Äôt create a variable of type `str`, nor can we take an argument of type `str`. Consider the following code, which does not work:\n\n```rust\nfn main() {\n    let s1: str = \"Hello there!\";\n    let s2: str = \"How's it going?\";\n}\n```\n\nRust needs to know how much memory to allocate for any value of a particular type, and all values of a type must use the same amount of memory. If Rust allowed us to write this code, these two `str` values would need to take up the same amount of space. But they have different lengths: `s1` needs 12 bytes of storage and `s2` needs 15. This is why it‚Äôs not possible to create a variable holding a dynamically sized type.\n\nSo what do we do? In this case, you already know the answer: we make the types of `s1` and `s2` a `&str` rather than a `str`. Recall from the [‚ÄúString Slices‚Äù](about:blank/ch04-03-slices.html#string-slices) section of Chapter 4 that the slice data structure just stores the starting position and the length of the slice. So although a `&T` is a single value that stores the memory address of where the `T` is located, a `&str` is _two_ values: the address of the `str` and its length. As such, we can know the size of a `&str` value at compile time: it‚Äôs twice the length of a `usize`. That is, we always know the size of a `&str`, no matter how long the string it refers to is. In general, this is the way in which dynamically sized types are used in Rust: they have an extra bit of metadata that stores the size of the dynamic information. The golden rule of dynamically sized types is that we must always put values of dynamically sized types behind a pointer of some kind.\n\nWe can combine `str` with all kinds of pointers: for example, `Box<str>` or `Rc<str>`. In fact, you‚Äôve seen this before but with a different dynamically sized type: traits. Every trait is a dynamically sized type we can refer to by using the name of the trait. In Chapter 17 in the [‚ÄúUsing Trait Objects That Allow for Values of Different Types‚Äù](about:blank/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types) section, we mentioned that to use traits as trait objects, we must put them behind a pointer, such as `&dyn Trait` or `Box<dyn Trait>` (`Rc<dyn Trait>` would work too).\n\nTo work with DSTs, Rust provides the `Sized` trait to determine whether or not a type‚Äôs size is known at compile time. This trait is automatically implemented for everything whose size is known at compile time. In addition, Rust implicitly adds a bound on `Sized` to every generic function. That is, a generic function definition like this:\n\n```rust\nfn generic<T>(t: T) {\n    // --snip--\n}\n```\n\nis actually treated as though we had written this:\n\n```rust\nfn generic<T: Sized>(t: T) {\n    // --snip--\n}\n```\n\nBy default, generic functions will work only on types that have a known size at compile time. However, you can use the following special syntax to relax this restriction:\n\n```rust\nfn generic<T: ?Sized>(t: &T) {\n    // --snip--\n}\n```\n\nA trait bound on `?Sized` means ‚Äú`T` may or may not be `Sized`‚Äù and this notation overrides the default that generic types must have a known size at compile time. The `?Trait` syntax with this meaning is only available for `Sized`, not any other traits.\n\nAlso note that we switched the type of the `t` parameter from `T` to `&T`. Because the type might not be `Sized`, we need to use it behind some kind of pointer. In this case, we‚Äôve chosen a reference.\n\nNext, we‚Äôll talk about functions and closures!\n\n## [Advanced Functions and Closures](#advanced-functions-and-closures)\n\nThis section explores some advanced features related to functions and closures, including function pointers and returning closures.\n\n### [Function Pointers](#function-pointers)\n\nWe‚Äôve talked about how to pass closures to functions; you can also pass regular functions to functions! This technique is useful when you want to pass a function you‚Äôve already defined rather than defining a new closure. Functions coerce to the type `fn` (with a lowercase f), not to be confused with the `Fn` closure trait. The `fn` type is called a _function pointer_. Passing functions with function pointers will allow you to use functions as arguments to other functions.\n\nThe syntax for specifying that a parameter is a function pointer is similar to that of closures, as shown in Listing 19-27, where we‚Äôve defined a function `add_one` that adds one to its parameter. The function `do_twice` takes two parameters: a function pointer to any function that takes an `i32` parameter and returns an `i32`, and one `i32` value. The `do_twice` function calls the function `f` twice, passing it the `arg` value, then adds the two function call results together. The `main` function calls `do_twice` with the arguments `add_one` and `5`.\n\nFilename: src/main.rs\n\n```rust\nfn add_one(x: i32) -> i32 {\n    x + 1\n}\n\nfn do_twice(f: fn(i32) -> i32, arg: i32) -> i32 {\n    f(arg) + f(arg)\n}\n\nfn main() {\n    let answer = do_twice(add_one, 5);\n\n    println!(\"The answer is: {answer}\");\n}\n```\n\nListing 19-27: Using the `fn` type to accept a function pointer as an argument\n\nThis code prints `The answer is: 12`. We specify that the parameter `f` in `do_twice` is an `fn` that takes one parameter of type `i32` and returns an `i32`. We can then call `f` in the body of `do_twice`. In `main`, we can pass the function name `add_one` as the first argument to `do_twice`.\n\nUnlike closures, `fn` is a type rather than a trait, so we specify `fn` as the parameter type directly rather than declaring a generic type parameter with one of the `Fn` traits as a trait bound.\n\nFunction pointers implement all three of the closure traits (`Fn`, `FnMut`, and `FnOnce`), meaning you can always pass a function pointer as an argument for a function that expects a closure. It‚Äôs best to write functions using a generic type and one of the closure traits so your functions can accept either functions or closures.\n\nThat said, one example of where you would want to only accept `fn` and not closures is when interfacing with external code that doesn‚Äôt have closures: C functions can accept functions as arguments, but C doesn‚Äôt have closures.\n\nAs an example of where you could use either a closure defined inline or a named function, let‚Äôs look at a use of the `map` method provided by the `Iterator` trait in the standard library. To use the `map` function to turn a vector of numbers into a vector of strings, we could use a closure, like this:\n\n```rust\nfn main() {\n    let list_of_numbers = vec![1, 2, 3];\n    let list_of_strings: Vec<String> =\n        list_of_numbers.iter().map(|i| i.to_string()).collect();\n}\n```\n\nOr we could name a function as the argument to `map` instead of the closure, like this:\n\n```rust\nfn main() {\n    let list_of_numbers = vec![1, 2, 3];\n    let list_of_strings: Vec<String> =\n        list_of_numbers.iter().map(ToString::to_string).collect();\n}\n```\n\nNote that we must use the fully qualified syntax that we talked about earlier in the [‚ÄúAdvanced Traits‚Äù](about:blank/ch19-03-advanced-traits.html#advanced-traits) section because there are multiple functions available named `to_string`. Here, we‚Äôre using the `to_string` function defined in the `ToString` trait, which the standard library has implemented for any type that implements `Display`.\n\nRecall from the [‚ÄúEnum values‚Äù](about:blank/ch06-01-defining-an-enum.html#enum-values) section of Chapter 6 that the name of each enum variant that we define also becomes an initializer function. We can use these initializer functions as function pointers that implement the closure traits, which means we can specify the initializer functions as arguments for methods that take closures, like so:\n\n```rust\nfn main() {\n    enum Status {\n        Value(u32),\n        Stop,\n    }\n\n    let list_of_statuses: Vec<Status> = (0u32..20).map(Status::Value).collect();\n}\n```\n\nHere we create `Status::Value` instances using each `u32` value in the range that `map` is called on by using the initializer function of `Status::Value`. Some people prefer this style, and some people prefer to use closures. They compile to the same code, so use whichever style is clearer to you.\n\n### [Returning Closures](#returning-closures)\n\nClosures are represented by traits, which means you can‚Äôt return closures directly. In most cases where you might want to return a trait, you can instead use the concrete type that implements the trait as the return value of the function. However, you can‚Äôt do that with closures because they don‚Äôt have a concrete type that is returnable; you‚Äôre not allowed to use the function pointer `fn` as a return type, for example.\n\nThe following code tries to return a closure directly, but it won‚Äôt compile:\n\n```rust\nfn returns_closure() -> dyn Fn(i32) -> i32 {\n    |x| x + 1\n}\n```\n\nThe compiler error is as follows:\n\n```console\n$ cargo build\n   Compiling functions-example v0.1.0 (file:///projects/functions-example)\nerror[E0746]: return type cannot have an unboxed trait object\n --> src/lib.rs:1:25\n  |\n1 | fn returns_closure() -> dyn Fn(i32) -> i32 {\n  |                         ^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n  |\nhelp: return an `impl Trait` instead of a `dyn Trait`, if all returned values are the same type\n  |\n1 | fn returns_closure() -> impl Fn(i32) -> i32 {\n  |                         ~~~~\nhelp: box the return type, and wrap all of the returned values in `Box::new`\n  |\n1 ~ fn returns_closure() -> Box<dyn Fn(i32) -> i32> {\n2 ~     Box::new(|x| x + 1)\n  |\n\nFor more information about this error, try `rustc --explain E0746`.\nerror: could not compile `functions-example` (lib) due to 1 previous error\n\n```\n\nThe error references the `Sized` trait again! Rust doesn‚Äôt know how much space it will need to store the closure. We saw a solution to this problem earlier. We can use a trait object:\n\n```rust\nfn returns_closure() -> Box<dyn Fn(i32) -> i32> {\n    Box::new(|x| x + 1)\n}\n```\n\nThis code will compile just fine. For more about trait objects, refer to the section [‚ÄúUsing Trait Objects That Allow for Values of Different Types‚Äù](about:blank/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types) in Chapter 17.\n\nNext, let‚Äôs look at macros!\n\n## [Macros](#macros)\n\nWe‚Äôve used macros like `println!` throughout this book, but we haven‚Äôt fully explored what a macro is and how it works. The term _macro_ refers to a family of features in Rust: _declarative_ macros with `macro_rules!` and three kinds of _procedural_ macros:\n\n-   Custom `#[derive]` macros that specify code added with the `derive` attribute used on structs and enums\n-   Attribute-like macros that define custom attributes usable on any item\n-   Function-like macros that look like function calls but operate on the tokens specified as their argument\n\nWe‚Äôll talk about each of these in turn, but first, let‚Äôs look at why we even need macros when we already have functions.\n\n### [The Difference Between Macros and Functions](#the-difference-between-macros-and-functions)\n\nFundamentally, macros are a way of writing code that writes other code, which is known as _metaprogramming_. In Appendix C, we discuss the `derive` attribute, which generates an implementation of various traits for you. We‚Äôve also used the `println!` and `vec!` macros throughout the book. All of these macros _expand_ to produce more code than the code you‚Äôve written manually.\n\nMetaprogramming is useful for reducing the amount of code you have to write and maintain, which is also one of the roles of functions. However, macros have some additional powers that functions don‚Äôt.\n\nA function signature must declare the number and type of parameters the function has. Macros, on the other hand, can take a variable number of parameters: we can call `println!(\"hello\")` with one argument or `println!(\"hello {}\", name)` with two arguments. Also, macros are expanded before the compiler interprets the meaning of the code, so a macro can, for example, implement a trait on a given type. A function can‚Äôt, because it gets called at runtime and a trait needs to be implemented at compile time.\n\nThe downside to implementing a macro instead of a function is that macro definitions are more complex than function definitions because you‚Äôre writing Rust code that writes Rust code. Due to this indirection, macro definitions are generally more difficult to read, understand, and maintain than function definitions.\n\nAnother important difference between macros and functions is that you must define macros or bring them into scope _before_ you call them in a file, as opposed to functions you can define anywhere and call anywhere.\n\n### [Declarative Macros with `macro_rules!` for General Metaprogramming](#declarative-macros-with-macro_rules-for-general-metaprogramming)\n\nThe most widely used form of macros in Rust is the _declarative macro_. These are also sometimes referred to as ‚Äúmacros by example,‚Äù ‚Äú`macro_rules!` macros,‚Äù or just plain ‚Äúmacros.‚Äù At their core, declarative macros allow you to write something similar to a Rust `match` expression. As discussed in Chapter 6, `match` expressions are control structures that take an expression, compare the resulting value of the expression to patterns, and then run the code associated with the matching pattern. Macros also compare a value to patterns that are associated with particular code: in this situation, the value is the literal Rust source code passed to the macro; the patterns are compared with the structure of that source code; and the code associated with each pattern, when matched, replaces the code passed to the macro. This all happens during compilation.\n\nTo define a macro, you use the `macro_rules!` construct. Let‚Äôs explore how to use `macro_rules!` by looking at how the `vec!` macro is defined. Chapter 8 covered how we can use the `vec!` macro to create a new vector with particular values. For example, the following macro creates a new vector containing three integers:\n\n```rust\n#![allow(unused)]\nfn main() {\nlet v: Vec<u32> = vec![1, 2, 3];\n}\n```\n\nWe could also use the `vec!` macro to make a vector of two integers or a vector of five string slices. We wouldn‚Äôt be able to use a function to do the same because we wouldn‚Äôt know the number or type of values up front.\n\nListing 19-28 shows a slightly simplified definition of the `vec!` macro.\n\nFilename: src/lib.rs\n\n```rust\n#[macro_export]\nmacro_rules! vec {\n    ( $( $x:expr ),* ) => {\n        {\n            let mut temp_vec = Vec::new();\n            $(\n                temp_vec.push($x);\n            )*\n            temp_vec\n        }\n    };\n}\n```\n\nListing 19-28: A simplified version of the `vec!` macro definition\n\nNote: The actual definition of the `vec!` macro in the standard library includes code to preallocate the correct amount of memory up front. That code is an optimization that we don‚Äôt include here to make the example simpler.\n\nThe `#[macro_export]` annotation indicates that this macro should be made available whenever the crate in which the macro is defined is brought into scope. Without this annotation, the macro can‚Äôt be brought into scope.\n\nWe then start the macro definition with `macro_rules!` and the name of the macro we‚Äôre defining _without_ the exclamation mark. The name, in this case `vec`, is followed by curly brackets denoting the body of the macro definition.\n\nThe structure in the `vec!` body is similar to the structure of a `match` expression. Here we have one arm with the pattern `( $( $x:expr ),* )`, followed by `=>` and the block of code associated with this pattern. If the pattern matches, the associated block of code will be emitted. Given that this is the only pattern in this macro, there is only one valid way to match; any other pattern will result in an error. More complex macros will have more than one arm.\n\nValid pattern syntax in macro definitions is different than the pattern syntax covered in Chapter 18 because macro patterns are matched against Rust code structure rather than values. Let‚Äôs walk through what the pattern pieces in Listing 19-28 mean; for the full macro pattern syntax, see the [Rust Reference](../reference/macros-by-example.html).\n\nFirst, we use a set of parentheses to encompass the whole pattern. We use a dollar sign (`$`) to declare a variable in the macro system that will contain the Rust code matching the pattern. The dollar sign makes it clear this is a macro variable as opposed to a regular Rust variable. Next comes a set of parentheses that captures values that match the pattern within the parentheses for use in the replacement code. Within `$()` is `$x:expr`, which matches any Rust expression and gives the expression the name `$x`.\n\nThe comma following `$()` indicates that a literal comma separator character could optionally appear after the code that matches the code in `$()`. The `*` specifies that the pattern matches zero or more of whatever precedes the `*`.\n\nWhen we call this macro with `vec![1, 2, 3];`, the `$x` pattern matches three times with the three expressions `1`, `2`, and `3`.\n\nNow let‚Äôs look at the pattern in the body of the code associated with this arm: `temp_vec.push()` within `$()*` is generated for each part that matches `$()` in the pattern zero or more times depending on how many times the pattern matches. The `$x` is replaced with each expression matched. When we call this macro with `vec![1, 2, 3];`, the code generated that replaces this macro call will be the following:\n\n```rust\n{\n    let mut temp_vec = Vec::new();\n    temp_vec.push(1);\n    temp_vec.push(2);\n    temp_vec.push(3);\n    temp_vec\n}\n```\n\nWe‚Äôve defined a macro that can take any number of arguments of any type and can generate code to create a vector containing the specified elements.\n\nTo learn more about how to write macros, consult the online documentation or other resources, such as [‚ÄúThe Little Book of Rust Macros‚Äù](https://veykril.github.io/tlborm/) started by Daniel Keep and continued by Lukas Wirth.\n\n### [Procedural Macros for Generating Code from Attributes](#procedural-macros-for-generating-code-from-attributes)\n\nThe second form of macros is the _procedural macro_, which acts more like a function (and is a type of procedure). Procedural macros accept some code as an input, operate on that code, and produce some code as an output rather than matching against patterns and replacing the code with other code as declarative macros do. The three kinds of procedural macros are custom derive, attribute-like, and function-like, and all work in a similar fashion.\n\nWhen creating procedural macros, the definitions must reside in their own crate with a special crate type. This is for complex technical reasons that we hope to eliminate in the future. In Listing 19-29, we show how to define a procedural macro, where `some_attribute` is a placeholder for using a specific macro variety.\n\nFilename: src/lib.rs\n\n```rust\nuse proc_macro;\n\n#[some_attribute]\npub fn some_name(input: TokenStream) -> TokenStream {\n}\n```\n\nListing 19-29: An example of defining a procedural macro\n\nThe function that defines a procedural macro takes a `TokenStream` as an input and produces a `TokenStream` as an output. The `TokenStream` type is defined by the `proc_macro` crate that is included with Rust and represents a sequence of tokens. This is the core of the macro: the source code that the macro is operating on makes up the input `TokenStream`, and the code the macro produces is the output `TokenStream`. The function also has an attribute attached to it that specifies which kind of procedural macro we‚Äôre creating. We can have multiple kinds of procedural macros in the same crate.\n\nLet‚Äôs look at the different kinds of procedural macros. We‚Äôll start with a custom derive macro and then explain the small dissimilarities that make the other forms different.\n\n### [How to Write a Custom `derive` Macro](#how-to-write-a-custom-derive-macro)\n\nLet‚Äôs create a crate named `hello_macro` that defines a trait named `HelloMacro` with one associated function named `hello_macro`. Rather than making our users implement the `HelloMacro` trait for each of their types, we‚Äôll provide a procedural macro so users can annotate their type with `#[derive(HelloMacro)]` to get a default implementation of the `hello_macro` function. The default implementation will print `Hello, Macro! My name is TypeName!` where `TypeName` is the name of the type on which this trait has been defined. In other words, we‚Äôll write a crate that enables another programmer to write code like Listing 19-30 using our crate.\n\nFilename: src/main.rs\n\n```rust\nuse hello_macro::HelloMacro;\nuse hello_macro_derive::HelloMacro;\n\n#[derive(HelloMacro)]\nstruct Pancakes;\n\nfn main() {\n    Pancakes::hello_macro();\n}\n```\n\nListing 19-30: The code a user of our crate will be able to write when using our procedural macro\n\nThis code will print `Hello, Macro! My name is Pancakes!` when we‚Äôre done. The first step is to make a new library crate, like this:\n\n```console\n$ cargo new hello_macro --lib\n\n```\n\nNext, we‚Äôll define the `HelloMacro` trait and its associated function:\n\nFilename: src/lib.rs\n\n```rust\npub trait HelloMacro {\n    fn hello_macro();\n}\n```\n\nWe have a trait and its function. At this point, our crate user could implement the trait to achieve the desired functionality, like so:\n\n```rust\nuse hello_macro::HelloMacro;\n\nstruct Pancakes;\n\nimpl HelloMacro for Pancakes {\n    fn hello_macro() {\n        println!(\"Hello, Macro! My name is Pancakes!\");\n    }\n}\n\nfn main() {\n    Pancakes::hello_macro();\n}\n```\n\nHowever, they would need to write the implementation block for each type they wanted to use with `hello_macro`; we want to spare them from having to do this work.\n\nAdditionally, we can‚Äôt yet provide the `hello_macro` function with default implementation that will print the name of the type the trait is implemented on: Rust doesn‚Äôt have reflection capabilities, so it can‚Äôt look up the type‚Äôs name at runtime. We need a macro to generate code at compile time.\n\nThe next step is to define the procedural macro. At the time of this writing, procedural macros need to be in their own crate. Eventually, this restriction might be lifted. The convention for structuring crates and macro crates is as follows: for a crate named `foo`, a custom derive procedural macro crate is called `foo_derive`. Let‚Äôs start a new crate called `hello_macro_derive` inside our `hello_macro` project:\n\n```console\n$ cargo new hello_macro_derive --lib\n\n```\n\nOur two crates are tightly related, so we create the procedural macro crate within the directory of our `hello_macro` crate. If we change the trait definition in `hello_macro`, we‚Äôll have to change the implementation of the procedural macro in `hello_macro_derive` as well. The two crates will need to be published separately, and programmers using these crates will need to add both as dependencies and bring them both into scope. We could instead have the `hello_macro` crate use `hello_macro_derive` as a dependency and re-export the procedural macro code. However, the way we‚Äôve structured the project makes it possible for programmers to use `hello_macro` even if they don‚Äôt want the `derive` functionality.\n\nWe need to declare the `hello_macro_derive` crate as a procedural macro crate. We‚Äôll also need functionality from the `syn` and `quote` crates, as you‚Äôll see in a moment, so we need to add them as dependencies. Add the following to the _Cargo.toml_ file for `hello_macro_derive`:\n\nFilename: hello\\_macro\\_derive/Cargo.toml\n\n```toml\n[lib]\nproc-macro = true\n\n[dependencies]\nsyn = \"2.0\"\nquote = \"1.0\"\n\n```\n\nTo start defining the procedural macro, place the code in Listing 19-31 into your _src/lib.rs_ file for the `hello_macro_derive` crate. Note that this code won‚Äôt compile until we add a definition for the `impl_hello_macro` function.\n\nFilename: hello\\_macro\\_derive/src/lib.rs\n\n```rust\nuse proc_macro::TokenStream;\nuse quote::quote;\n\n#[proc_macro_derive(HelloMacro)]\npub fn hello_macro_derive(input: TokenStream) -> TokenStream {\n    // Construct a representation of Rust code as a syntax tree\n    // that we can manipulate\n    let ast = syn::parse(input).unwrap();\n\n    // Build the trait implementation\n    impl_hello_macro(&ast)\n}\n```\n\nListing 19-31: Code that most procedural macro crates will require in order to process Rust code\n\nNotice that we‚Äôve split the code into the `hello_macro_derive` function, which is responsible for parsing the `TokenStream`, and the `impl_hello_macro` function, which is responsible for transforming the syntax tree: this makes writing a procedural macro more convenient. The code in the outer function (`hello_macro_derive` in this case) will be the same for almost every procedural macro crate you see or create. The code you specify in the body of the inner function (`impl_hello_macro` in this case) will be different depending on your procedural macro‚Äôs purpose.\n\nWe‚Äôve introduced three new crates: `proc_macro`, [`syn`](https://crates.io/crates/syn), and [`quote`](https://crates.io/crates/quote). The `proc_macro` crate comes with Rust, so we didn‚Äôt need to add that to the dependencies in _Cargo.toml_. The `proc_macro` crate is the compiler‚Äôs API that allows us to read and manipulate Rust code from our code.\n\nThe `syn` crate parses Rust code from a string into a data structure that we can perform operations on. The `quote` crate turns `syn` data structures back into Rust code. These crates make it much simpler to parse any sort of Rust code we might want to handle: writing a full parser for Rust code is no simple task.\n\nThe `hello_macro_derive` function will be called when a user of our library specifies `#[derive(HelloMacro)]` on a type. This is possible because we‚Äôve annotated the `hello_macro_derive` function here with `proc_macro_derive` and specified the name `HelloMacro`, which matches our trait name; this is the convention most procedural macros follow.\n\nThe `hello_macro_derive` function first converts the `input` from a `TokenStream` to a data structure that we can then interpret and perform operations on. This is where `syn` comes into play. The `parse` function in `syn` takes a `TokenStream` and returns a `DeriveInput` struct representing the parsed Rust code. Listing 19-32 shows the relevant parts of the `DeriveInput` struct we get from parsing the `struct Pancakes;` string:\n\n```rust\nDeriveInput {\n    // --snip--\n\n    ident: Ident {\n        ident: \"Pancakes\",\n        span: #0 bytes(95..103)\n    },\n    data: Struct(\n        DataStruct {\n            struct_token: Struct,\n            fields: Unit,\n            semi_token: Some(\n                Semi\n            )\n        }\n    )\n}\n```\n\nListing 19-32: The `DeriveInput` instance we get when parsing the code that has the macro‚Äôs attribute in Listing 19-30\n\nThe fields of this struct show that the Rust code we‚Äôve parsed is a unit struct with the `ident` (identifier, meaning the name) of `Pancakes`. There are more fields on this struct for describing all sorts of Rust code; check the [`syn` documentation for `DeriveInput`](https://docs.rs/syn/2.0/syn/struct.DeriveInput.html) for more information.\n\nSoon we‚Äôll define the `impl_hello_macro` function, which is where we‚Äôll build the new Rust code we want to include. But before we do, note that the output for our derive macro is also a `TokenStream`. The returned `TokenStream` is added to the code that our crate users write, so when they compile their crate, they‚Äôll get the extra functionality that we provide in the modified `TokenStream`.\n\nYou might have noticed that we‚Äôre calling `unwrap` to cause the `hello_macro_derive` function to panic if the call to the `syn::parse` function fails here. It‚Äôs necessary for our procedural macro to panic on errors because `proc_macro_derive` functions must return `TokenStream` rather than `Result` to conform to the procedural macro API. We‚Äôve simplified this example by using `unwrap`; in production code, you should provide more specific error messages about what went wrong by using `panic!` or `expect`.\n\nNow that we have the code to turn the annotated Rust code from a `TokenStream` into a `DeriveInput` instance, let‚Äôs generate the code that implements the `HelloMacro` trait on the annotated type, as shown in Listing 19-33.\n\nFilename: hello\\_macro\\_derive/src/lib.rs\n\n```rust\nuse proc_macro::TokenStream;\nuse quote::quote;\n\n#[proc_macro_derive(HelloMacro)]\npub fn hello_macro_derive(input: TokenStream) -> TokenStream {\n    // Construct a representation of Rust code as a syntax tree\n    // that we can manipulate\n    let ast = syn::parse(input).unwrap();\n\n    // Build the trait implementation\n    impl_hello_macro(&ast)\n}\n\nfn impl_hello_macro(ast: &syn::DeriveInput) -> TokenStream {\n    let name = &ast.ident;\n    let gen = quote! {\n        impl HelloMacro for #name {\n            fn hello_macro() {\n                println!(\"Hello, Macro! My name is {}!\", stringify!(#name));\n            }\n        }\n    };\n    gen.into()\n}\n```\n\nListing 19-33: Implementing the `HelloMacro` trait using the parsed Rust code\n\nWe get an `Ident` struct instance containing the name (identifier) of the annotated type using `ast.ident`. The struct in Listing 19-32 shows that when we run the `impl_hello_macro` function on the code in Listing 19-30, the `ident` we get will have the `ident` field with a value of `\"Pancakes\"`. Thus, the `name` variable in Listing 19-33 will contain an `Ident` struct instance that, when printed, will be the string `\"Pancakes\"`, the name of the struct in Listing 19-30.\n\nThe `quote!` macro lets us define the Rust code that we want to return. The compiler expects something different to the direct result of the `quote!` macro‚Äôs execution, so we need to convert it to a `TokenStream`. We do this by calling the `into` method, which consumes this intermediate representation and returns a value of the required `TokenStream` type.\n\nThe `quote!` macro also provides some very cool templating mechanics: we can enter `#name`, and `quote!` will replace it with the value in the variable `name`. You can even do some repetition similar to the way regular macros work. Check out [the `quote` crate‚Äôs docs](https://docs.rs/quote) for a thorough introduction.\n\nWe want our procedural macro to generate an implementation of our `HelloMacro` trait for the type the user annotated, which we can get by using `#name`. The trait implementation has the one function `hello_macro`, whose body contains the functionality we want to provide: printing `Hello, Macro! My name is` and then the name of the annotated type.\n\nThe `stringify!` macro used here is built into Rust. It takes a Rust expression, such as `1 + 2`, and at compile time turns the expression into a string literal, such as `\"1 + 2\"`. This is different than `format!` or `println!`, macros which evaluate the expression and then turn the result into a `String`. There is a possibility that the `#name` input might be an expression to print literally, so we use `stringify!`. Using `stringify!` also saves an allocation by converting `#name` to a string literal at compile time.\n\nAt this point, `cargo build` should complete successfully in both `hello_macro` and `hello_macro_derive`. Let‚Äôs hook up these crates to the code in Listing 19-30 to see the procedural macro in action! Create a new binary project in your _projects_ directory using `cargo new pancakes`. We need to add `hello_macro` and `hello_macro_derive` as dependencies in the `pancakes` crate‚Äôs _Cargo.toml_. If you‚Äôre publishing your versions of `hello_macro` and `hello_macro_derive` to [crates.io](https://crates.io/), they would be regular dependencies; if not, you can specify them as `path` dependencies as follows:\n\n```toml\nhello_macro = { path = \"../hello_macro\" }\nhello_macro_derive = { path = \"../hello_macro/hello_macro_derive\" }\n\n```\n\nPut the code in Listing 19-30 into _src/main.rs_, and run `cargo run`: it should print `Hello, Macro! My name is Pancakes!` The implementation of the `HelloMacro` trait from the procedural macro was included without the `pancakes` crate needing to implement it; the `#[derive(HelloMacro)]` added the trait implementation.\n\nNext, let‚Äôs explore how the other kinds of procedural macros differ from custom derive macros.\n\n### [Attribute-like macros](#attribute-like-macros)\n\nAttribute-like macros are similar to custom derive macros, but instead of generating code for the `derive` attribute, they allow you to create new attributes. They‚Äôre also more flexible: `derive` only works for structs and enums; attributes can be applied to other items as well, such as functions. Here‚Äôs an example of using an attribute-like macro: say you have an attribute named `route` that annotates functions when using a web application framework:\n\n```rust\n#[route(GET, \"/\")]\nfn index() {\n```\n\nThis `#[route]` attribute would be defined by the framework as a procedural macro. The signature of the macro definition function would look like this:\n\n```rust\n#[proc_macro_attribute]\npub fn route(attr: TokenStream, item: TokenStream) -> TokenStream {\n```\n\nHere, we have two parameters of type `TokenStream`. The first is for the contents of the attribute: the `GET, \"/\"` part. The second is the body of the item the attribute is attached to: in this case, `fn index() {}` and the rest of the function‚Äôs body.\n\nOther than that, attribute-like macros work the same way as custom derive macros: you create a crate with the `proc-macro` crate type and implement a function that generates the code you want!\n\n### [Function-like macros](#function-like-macros)\n\nFunction-like macros define macros that look like function calls. Similarly to `macro_rules!` macros, they‚Äôre more flexible than functions; for example, they can take an unknown number of arguments. However, `macro_rules!` macros can be defined only using the match-like syntax we discussed in the section [‚ÄúDeclarative Macros with `macro_rules!` for General Metaprogramming‚Äù](about:blank/ch19-06-macros.html#declarative-macros-with-macro_rules-for-general-metaprogramming) earlier. Function-like macros take a `TokenStream` parameter and their definition manipulates that `TokenStream` using Rust code as the other two types of procedural macros do. An example of a function-like macro is an `sql!` macro that might be called like so:\n\n```rust\nlet sql = sql!(SELECT * FROM posts WHERE id=1);\n```\n\nThis macro would parse the SQL statement inside it and check that it‚Äôs syntactically correct, which is much more complex processing than a `macro_rules!` macro can do. The `sql!` macro would be defined like this:\n\n```rust\n#[proc_macro]\npub fn sql(input: TokenStream) -> TokenStream {\n```\n\nThis definition is similar to the custom derive macro‚Äôs signature: we receive the tokens that are inside the parentheses and return the code we wanted to generate.\n\n## [Summary](#summary-18)\n\nWhew! Now you have some Rust features in your toolbox that you likely won‚Äôt use often, but you‚Äôll know they‚Äôre available in very particular circumstances. We‚Äôve introduced several complex topics so that when you encounter them in error message suggestions or in other peoples‚Äô code, you‚Äôll be able to recognize these concepts and syntax. Use this chapter as a reference to guide you to solutions.\n\nNext, we‚Äôll put everything we‚Äôve discussed throughout the book into practice and do one more project!\n\n## [Final Project: Building a Multithreaded Web Server](#final-project-building-a-multithreaded-web-server)\n\nIt‚Äôs been a long journey, but we‚Äôve reached the end of the book. In this chapter, we‚Äôll build one more project together to demonstrate some of the concepts we covered in the final chapters, as well as recap some earlier lessons.\n\nFor our final project, we‚Äôll make a web server that says ‚Äúhello‚Äù and looks like Figure 20-1 in a web browser.\n\n![hello from rust](img/trpl20-01.png)\n\nFigure 20-1: Our final shared project\n\nHere is our plan for building the web server:\n\n1.  Learn a bit about TCP and HTTP.\n2.  Listen for TCP connections on a socket.\n3.  Parse a small number of HTTP requests.\n4.  Create a proper HTTP response.\n5.  Improve the throughput of our server with a thread pool.\n\nBefore we get started, we should mention one detail: the method we‚Äôll use won‚Äôt be the best way to build a web server with Rust. Community members have published a number of production-ready crates available on [crates.io](https://crates.io/) that provide more complete web server and thread pool implementations than we‚Äôll build. However, our intention in this chapter is to help you learn, not to take the easy route. Because Rust is a systems programming language, we can choose the level of abstraction we want to work with and can go to a lower level than is possible or practical in other languages. We‚Äôll therefore write the basic HTTP server and thread pool manually so you can learn the general ideas and techniques behind the crates you might use in the future.\n\n## [Building a Single-Threaded Web Server](#building-a-single-threaded-web-server)\n\nWe‚Äôll start by getting a single-threaded web server working. Before we begin, let‚Äôs look at a quick overview of the protocols involved in building web servers. The details of these protocols are beyond the scope of this book, but a brief overview will give you the information you need.\n\nThe two main protocols involved in web servers are _Hypertext Transfer Protocol_ _(HTTP)_ and _Transmission Control Protocol_ _(TCP)_. Both protocols are _request-response_ protocols, meaning a _client_ initiates requests and a _server_ listens to the requests and provides a response to the client. The contents of those requests and responses are defined by the protocols.\n\nTCP is the lower-level protocol that describes the details of how information gets from one server to another but doesn‚Äôt specify what that information is. HTTP builds on top of TCP by defining the contents of the requests and responses. It‚Äôs technically possible to use HTTP with other protocols, but in the vast majority of cases, HTTP sends its data over TCP. We‚Äôll work with the raw bytes of TCP and HTTP requests and responses.\n\n### [Listening to the TCP Connection](#listening-to-the-tcp-connection)\n\nOur web server needs to listen to a TCP connection, so that‚Äôs the first part we‚Äôll work on. The standard library offers a `std::net` module that lets us do this. Let‚Äôs make a new project in the usual fashion:\n\n```console\n$ cargo new hello\n     Created binary (application) `hello` project\n$ cd hello\n\n```\n\nNow enter the code in Listing 20-1 in _src/main.rs_ to start. This code will listen at the local address `127.0.0.1:7878` for incoming TCP streams. When it gets an incoming stream, it will print `Connection established!`.\n\nFilename: src/main.rs\n\n```rust\nuse std::net::TcpListener;\n\nfn main() {\n    let listener = TcpListener::bind(\"127.0.0.1:7878\").unwrap();\n\n    for stream in listener.incoming() {\n        let stream = stream.unwrap();\n\n        println!(\"Connection established!\");\n    }\n}\n```\n\nListing 20-1: Listening for incoming streams and printing a message when we receive a stream\n\nUsing `TcpListener`, we can listen for TCP connections at the address `127.0.0.1:7878`. In the address, the section before the colon is an IP address representing your computer (this is the same on every computer and doesn‚Äôt represent the authors‚Äô computer specifically), and `7878` is the port. We‚Äôve chosen this port for two reasons: HTTP isn‚Äôt normally accepted on this port so our server is unlikely to conflict with any other web server you might have running on your machine, and 7878 is _rust_ typed on a telephone.\n\nThe `bind` function in this scenario works like the `new` function in that it will return a new `TcpListener` instance. The function is called `bind` because, in networking, connecting to a port to listen to is known as ‚Äúbinding to a port.‚Äù\n\nThe `bind` function returns a `Result<T, E>`, which indicates that it‚Äôs possible for binding to fail. For example, connecting to port 80 requires administrator privileges (nonadministrators can listen only on ports higher than 1023), so if we tried to connect to port 80 without being an administrator, binding wouldn‚Äôt work. Binding also wouldn‚Äôt work, for example, if we ran two instances of our program and so had two programs listening to the same port. Because we‚Äôre writing a basic server just for learning purposes, we won‚Äôt worry about handling these kinds of errors; instead, we use `unwrap` to stop the program if errors happen.\n\nThe `incoming` method on `TcpListener` returns an iterator that gives us a sequence of streams (more specifically, streams of type `TcpStream`). A single _stream_ represents an open connection between the client and the server. A _connection_ is the name for the full request and response process in which a client connects to the server, the server generates a response, and the server closes the connection. As such, we will read from the `TcpStream` to see what the client sent and then write our response to the stream to send data back to the client. Overall, this `for` loop will process each connection in turn and produce a series of streams for us to handle.\n\nFor now, our handling of the stream consists of calling `unwrap` to terminate our program if the stream has any errors; if there aren‚Äôt any errors, the program prints a message. We‚Äôll add more functionality for the success case in the next listing. The reason we might receive errors from the `incoming` method when a client connects to the server is that we‚Äôre not actually iterating over connections. Instead, we‚Äôre iterating over _connection attempts_. The connection might not be successful for a number of reasons, many of them operating system specific. For example, many operating systems have a limit to the number of simultaneous open connections they can support; new connection attempts beyond that number will produce an error until some of the open connections are closed.\n\nLet‚Äôs try running this code! Invoke `cargo run` in the terminal and then load _127.0.0.1:7878_ in a web browser. The browser should show an error message like ‚ÄúConnection reset,‚Äù because the server isn‚Äôt currently sending back any data. But when you look at your terminal, you should see several messages that were printed when the browser connected to the server!\n\n```text\n     Running `target/debug/hello`\nConnection established!\nConnection established!\nConnection established!\n\n```\n\nSometimes, you‚Äôll see multiple messages printed for one browser request; the reason might be that the browser is making a request for the page as well as a request for other resources, like the _favicon.ico_ icon that appears in the browser tab.\n\nIt could also be that the browser is trying to connect to the server multiple times because the server isn‚Äôt responding with any data. When `stream` goes out of scope and is dropped at the end of the loop, the connection is closed as part of the `drop` implementation. Browsers sometimes deal with closed connections by retrying, because the problem might be temporary. The important factor is that we‚Äôve successfully gotten a handle to a TCP connection!\n\nRemember to stop the program by pressing ctrl\\-c when you‚Äôre done running a particular version of the code. Then restart the program by invoking the `cargo run` command after you‚Äôve made each set of code changes to make sure you‚Äôre running the newest code.\n\n### [Reading the Request](#reading-the-request)\n\nLet‚Äôs implement the functionality to read the request from the browser! To separate the concerns of first getting a connection and then taking some action with the connection, we‚Äôll start a new function for processing connections. In this new `handle_connection` function, we‚Äôll read data from the TCP stream and print it so we can see the data being sent from the browser. Change the code to look like Listing 20-2.\n\nFilename: src/main.rs\n\n```rust\nuse std::{\n    io::{prelude::*, BufReader},\n    net::{TcpListener, TcpStream},\n};\n\nfn main() {\n    let listener = TcpListener::bind(\"127.0.0.1:7878\").unwrap();\n\n    for stream in listener.incoming() {\n        let stream = stream.unwrap();\n\n        handle_connection(stream);\n    }\n}\n\nfn handle_connection(mut stream: TcpStream) {\n    let buf_reader = BufReader::new(&mut stream);\n    let http_request: Vec<_> = buf_reader\n        .lines()\n        .map(|result| result.unwrap())\n        .take_while(|line| !line.is_empty())\n        .collect();\n\n    println!(\"Request: {http_request:#?}\");\n}\n```\n\nListing 20-2: Reading from the `TcpStream` and printing the data\n\nWe bring `std::io::prelude` and `std::io::BufReader` into scope to get access to traits and types that let us read from and write to the stream. In the `for` loop in the `main` function, instead of printing a message that says we made a connection, we now call the new `handle_connection` function and pass the `stream` to it.\n\nIn the `handle_connection` function, we create a new `BufReader` instance that wraps a mutable reference to the `stream`. `BufReader` adds buffering by managing calls to the `std::io::Read` trait methods for us.\n\nWe create a variable named `http_request` to collect the lines of the request the browser sends to our server. We indicate that we want to collect these lines in a vector by adding the `Vec<_>` type annotation.\n\n`BufReader` implements the `std::io::BufRead` trait, which provides the `lines` method. The `lines` method returns an iterator of `Result<String, std::io::Error>` by splitting the stream of data whenever it sees a newline byte. To get each `String`, we map and `unwrap` each `Result`. The `Result` might be an error if the data isn‚Äôt valid UTF-8 or if there was a problem reading from the stream. Again, a production program should handle these errors more gracefully, but we‚Äôre choosing to stop the program in the error case for simplicity.\n\nThe browser signals the end of an HTTP request by sending two newline characters in a row, so to get one request from the stream, we take lines until we get a line that is the empty string. Once we‚Äôve collected the lines into the vector, we‚Äôre printing them out using pretty debug formatting so we can take a look at the instructions the web browser is sending to our server.\n\nLet‚Äôs try this code! Start the program and make a request in a web browser again. Note that we‚Äôll still get an error page in the browser, but our program‚Äôs output in the terminal will now look similar to this:\n\n```console\n$ cargo run\n   Compiling hello v0.1.0 (file:///projects/hello)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.42s\n     Running `target/debug/hello`\nRequest: [\n    \"GET / HTTP/1.1\",\n    \"Host: 127.0.0.1:7878\",\n    \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:99.0) Gecko/20100101 Firefox/99.0\",\n    \"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\",\n    \"Accept-Language: en-US,en;q=0.5\",\n    \"Accept-Encoding: gzip, deflate, br\",\n    \"DNT: 1\",\n    \"Connection: keep-alive\",\n    \"Upgrade-Insecure-Requests: 1\",\n    \"Sec-Fetch-Dest: document\",\n    \"Sec-Fetch-Mode: navigate\",\n    \"Sec-Fetch-Site: none\",\n    \"Sec-Fetch-User: ?1\",\n    \"Cache-Control: max-age=0\",\n]\n\n```\n\nDepending on your browser, you might get slightly different output. Now that we‚Äôre printing the request data, we can see why we get multiple connections from one browser request by looking at the path after `GET` in the first line of the request. If the repeated connections are all requesting _/_, we know the browser is trying to fetch _/_ repeatedly because it‚Äôs not getting a response from our program.\n\nLet‚Äôs break down this request data to understand what the browser is asking of our program.\n\n### [A Closer Look at an HTTP Request](#a-closer-look-at-an-http-request)\n\nHTTP is a text-based protocol, and a request takes this format:\n\n```text\nMethod Request-URI HTTP-Version CRLF\nheaders CRLF\nmessage-body\n\n```\n\nThe first line is the _request line_ that holds information about what the client is requesting. The first part of the request line indicates the _method_ being used, such as `GET` or `POST`, which describes how the client is making this request. Our client used a `GET` request, which means it is asking for information.\n\nThe next part of the request line is _/_, which indicates the _Uniform Resource Identifier_ _(URI)_ the client is requesting: a URI is almost, but not quite, the same as a _Uniform Resource Locator_ _(URL)_. The difference between URIs and URLs isn‚Äôt important for our purposes in this chapter, but the HTTP spec uses the term URI, so we can just mentally substitute URL for URI here.\n\nThe last part is the HTTP version the client uses, and then the request line ends in a _CRLF sequence_. (CRLF stands for _carriage return_ and _line feed_, which are terms from the typewriter days!) The CRLF sequence can also be written as `\\r\\n`, where `\\r` is a carriage return and `\\n` is a line feed. The CRLF sequence separates the request line from the rest of the request data. Note that when the CRLF is printed, we see a new line start rather than `\\r\\n`.\n\nLooking at the request line data we received from running our program so far, we see that `GET` is the method, _/_ is the request URI, and `HTTP/1.1` is the version.\n\nAfter the request line, the remaining lines starting from `Host:` onward are headers. `GET` requests have no body.\n\nTry making a request from a different browser or asking for a different address, such as _127.0.0.1:7878/test_, to see how the request data changes.\n\nNow that we know what the browser is asking for, let‚Äôs send back some data!\n\n### [Writing a Response](#writing-a-response)\n\nWe‚Äôre going to implement sending data in response to a client request. Responses have the following format:\n\n```text\nHTTP-Version Status-Code Reason-Phrase CRLF\nheaders CRLF\nmessage-body\n\n```\n\nThe first line is a _status line_ that contains the HTTP version used in the response, a numeric status code that summarizes the result of the request, and a reason phrase that provides a text description of the status code. After the CRLF sequence are any headers, another CRLF sequence, and the body of the response.\n\nHere is an example response that uses HTTP version 1.1, has a status code of 200, an OK reason phrase, no headers, and no body:\n\n```text\nHTTP/1.1 200 OK\\r\\n\\r\\n\n\n```\n\nThe status code 200 is the standard success response. The text is a tiny successful HTTP response. Let‚Äôs write this to the stream as our response to a successful request! From the `handle_connection` function, remove the `println!` that was printing the request data and replace it with the code in Listing 20-3.\n\nFilename: src/main.rs\n\n```rust\nuse std::{\n    io::{prelude::*, BufReader},\n    net::{TcpListener, TcpStream},\n};\n\nfn main() {\n    let listener = TcpListener::bind(\"127.0.0.1:7878\").unwrap();\n\n    for stream in listener.incoming() {\n        let stream = stream.unwrap();\n\n        handle_connection(stream);\n    }\n}\n\nfn handle_connection(mut stream: TcpStream) {\n    let buf_reader = BufReader::new(&mut stream);\n    let http_request: Vec<_> = buf_reader\n        .lines()\n        .map(|result| result.unwrap())\n        .take_while(|line| !line.is_empty())\n        .collect();\n\n    let response = \"HTTP/1.1 200 OK\\r\\n\\r\\n\";\n\n    stream.write_all(response.as_bytes()).unwrap();\n}\n```\n\nListing 20-3: Writing a tiny successful HTTP response to the stream\n\nThe first new line defines the `response` variable that holds the success message‚Äôs data. Then we call `as_bytes` on our `response` to convert the string data to bytes. The `write_all` method on `stream` takes a `&[u8]` and sends those bytes directly down the connection. Because the `write_all` operation could fail, we use `unwrap` on any error result as before. Again, in a real application you would add error handling here.\n\nWith these changes, let‚Äôs run our code and make a request. We‚Äôre no longer printing any data to the terminal, so we won‚Äôt see any output other than the output from Cargo. When you load _127.0.0.1:7878_ in a web browser, you should get a blank page instead of an error. You‚Äôve just hand-coded receiving an HTTP request and sending a response!\n\n### [Returning Real HTML](#returning-real-html)\n\nLet‚Äôs implement the functionality for returning more than a blank page. Create the new file _hello.html_ in the root of your project directory, not in the _src_ directory. You can input any HTML you want; Listing 20-4 shows one possibility.\n\nFilename: hello.html\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Hello!</title>\n  </head>\n  <body>\n    <h1>Hello!</h1>\n    <p>Hi from Rust</p>\n  </body>\n</html>\n\n```\n\nListing 20-4: A sample HTML file to return in a response\n\nThis is a minimal HTML5 document with a heading and some text. To return this from the server when a request is received, we‚Äôll modify `handle_connection` as shown in Listing 20-5 to read the HTML file, add it to the response as a body, and send it.\n\nFilename: src/main.rs\n\n```rust\nuse std::{\n    fs,\n    io::{prelude::*, BufReader},\n    net::{TcpListener, TcpStream},\n};\n// --snip--\n\nfn main() {\n    let listener = TcpListener::bind(\"127.0.0.1:7878\").unwrap();\n\n    for stream in listener.incoming() {\n        let stream = stream.unwrap();\n\n        handle_connection(stream);\n    }\n}\n\nfn handle_connection(mut stream: TcpStream) {\n    let buf_reader = BufReader::new(&mut stream);\n    let http_request: Vec<_> = buf_reader\n        .lines()\n        .map(|result| result.unwrap())\n        .take_while(|line| !line.is_empty())\n        .collect();\n\n    let status_line = \"HTTP/1.1 200 OK\";\n    let contents = fs::read_to_string(\"hello.html\").unwrap();\n    let length = contents.len();\n\n    let response =\n        format!(\"{status_line}\\r\\nContent-Length: {length}\\r\\n\\r\\n{contents}\");\n\n    stream.write_all(response.as_bytes()).unwrap();\n}\n```\n\nListing 20-5: Sending the contents of _hello.html_ as the body of the response\n\nWe‚Äôve added `fs` to the `use` statement to bring the standard library‚Äôs filesystem module into scope. The code for reading the contents of a file to a string should look familiar; we used it in Chapter 12 when we read the contents of a file for our I/O project in Listing 12-4.\n\nNext, we use `format!` to add the file‚Äôs contents as the body of the success response. To ensure a valid HTTP response, we add the `Content-Length` header which is set to the size of our response body, in this case the size of `hello.html`.\n\nRun this code with `cargo run` and load _127.0.0.1:7878_ in your browser; you should see your HTML rendered!\n\nCurrently, we‚Äôre ignoring the request data in `http_request` and just sending back the contents of the HTML file unconditionally. That means if you try requesting _127.0.0.1:7878/something-else_ in your browser, you‚Äôll still get back this same HTML response. At the moment, our server is very limited and does not do what most web servers do. We want to customize our responses depending on the request and only send back the HTML file for a well-formed request to _/_.\n\n### [Validating the Request and Selectively Responding](#validating-the-request-and-selectively-responding)\n\nRight now, our web server will return the HTML in the file no matter what the client requested. Let‚Äôs add functionality to check that the browser is requesting _/_ before returning the HTML file and return an error if the browser requests anything else. For this we need to modify `handle_connection`, as shown in Listing 20-6. This new code checks the content of the request received against what we know a request for _/_ looks like and adds `if` and `else` blocks to treat requests differently.\n\nFilename: src/main.rs\n\n```rust\nuse std::{\n    fs,\n    io::{prelude::*, BufReader},\n    net::{TcpListener, TcpStream},\n};\n\nfn main() {\n    let listener = TcpListener::bind(\"127.0.0.1:7878\").unwrap();\n\n    for stream in listener.incoming() {\n        let stream = stream.unwrap();\n\n        handle_connection(stream);\n    }\n}\n// --snip--\n\nfn handle_connection(mut stream: TcpStream) {\n    let buf_reader = BufReader::new(&mut stream);\n    let request_line = buf_reader.lines().next().unwrap().unwrap();\n\n    if request_line == \"GET / HTTP/1.1\" {\n        let status_line = \"HTTP/1.1 200 OK\";\n        let contents = fs::read_to_string(\"hello.html\").unwrap();\n        let length = contents.len();\n\n        let response = format!(\n            \"{status_line}\\r\\nContent-Length: {length}\\r\\n\\r\\n{contents}\"\n        );\n\n        stream.write_all(response.as_bytes()).unwrap();\n    } else {\n        // some other request\n    }\n}\n```\n\nListing 20-6: Handling requests to _/_ differently from other requests\n\nWe‚Äôre only going to be looking at the first line of the HTTP request, so rather than reading the entire request into a vector, we‚Äôre calling `next` to get the first item from the iterator. The first `unwrap` takes care of the `Option` and stops the program if the iterator has no items. The second `unwrap` handles the `Result` and has the same effect as the `unwrap` that was in the `map` added in Listing 20-2.\n\nNext, we check the `request_line` to see if it equals the request line of a GET request to the _/_ path. If it does, the `if` block returns the contents of our HTML file.\n\nIf the `request_line` does _not_ equal the GET request to the _/_ path, it means we‚Äôve received some other request. We‚Äôll add code to the `else` block in a moment to respond to all other requests.\n\nRun this code now and request _127.0.0.1:7878_; you should get the HTML in _hello.html_. If you make any other request, such as _127.0.0.1:7878/something-else_, you‚Äôll get a connection error like those you saw when running the code in Listing 20-1 and Listing 20-2.\n\nNow let‚Äôs add the code in Listing 20-7 to the `else` block to return a response with the status code 404, which signals that the content for the request was not found. We‚Äôll also return some HTML for a page to render in the browser indicating the response to the end user.\n\nFilename: src/main.rs\n\n```rust\nuse std::{\n    fs,\n    io::{prelude::*, BufReader},\n    net::{TcpListener, TcpStream},\n};\n\nfn main() {\n    let listener = TcpListener::bind(\"127.0.0.1:7878\").unwrap();\n\n    for stream in listener.incoming() {\n        let stream = stream.unwrap();\n\n        handle_connection(stream);\n    }\n}\n\nfn handle_connection(mut stream: TcpStream) {\n    let buf_reader = BufReader::new(&mut stream);\n    let request_line = buf_reader.lines().next().unwrap().unwrap();\n\n    if request_line == \"GET / HTTP/1.1\" {\n        let status_line = \"HTTP/1.1 200 OK\";\n        let contents = fs::read_to_string(\"hello.html\").unwrap();\n        let length = contents.len();\n\n        let response = format!(\n            \"{status_line}\\r\\nContent-Length: {length}\\r\\n\\r\\n{contents}\"\n        );\n\n        stream.write_all(response.as_bytes()).unwrap();\n    // --snip--\n    } else {\n        let status_line = \"HTTP/1.1 404 NOT FOUND\";\n        let contents = fs::read_to_string(\"404.html\").unwrap();\n        let length = contents.len();\n\n        let response = format!(\n            \"{status_line}\\r\\nContent-Length: {length}\\r\\n\\r\\n{contents}\"\n        );\n\n        stream.write_all(response.as_bytes()).unwrap();\n    }\n}\n```\n\nListing 20-7: Responding with status code 404 and an error page if anything other than _/_ was requested\n\nHere, our response has a status line with status code 404 and the reason phrase `NOT FOUND`. The body of the response will be the HTML in the file _404.html_. You‚Äôll need to create a _404.html_ file next to _hello.html_ for the error page; again feel free to use any HTML you want or use the example HTML in Listing 20-8.\n\nFilename: 404.html\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Hello!</title>\n  </head>\n  <body>\n    <h1>Oops!</h1>\n    <p>Sorry, I don't know what you're asking for.</p>\n  </body>\n</html>\n\n```\n\nListing 20-8: Sample content for the page to send back with any 404 response\n\nWith these changes, run your server again. Requesting _127.0.0.1:7878_ should return the contents of _hello.html_, and any other request, like _127.0.0.1:7878/foo_, should return the error HTML from _404.html_.\n\n### [A Touch of Refactoring](#a-touch-of-refactoring)\n\nAt the moment the `if` and `else` blocks have a lot of repetition: they‚Äôre both reading files and writing the contents of the files to the stream. The only differences are the status line and the filename. Let‚Äôs make the code more concise by pulling out those differences into separate `if` and `else` lines that will assign the values of the status line and the filename to variables; we can then use those variables unconditionally in the code to read the file and write the response. Listing 20-9 shows the resulting code after replacing the large `if` and `else` blocks.\n\nFilename: src/main.rs\n\n```rust\nuse std::{\n    fs,\n    io::{prelude::*, BufReader},\n    net::{TcpListener, TcpStream},\n};\n\nfn main() {\n    let listener = TcpListener::bind(\"127.0.0.1:7878\").unwrap();\n\n    for stream in listener.incoming() {\n        let stream = stream.unwrap();\n\n        handle_connection(stream);\n    }\n}\n// --snip--\n\nfn handle_connection(mut stream: TcpStream) {\n    // --snip--\n    let buf_reader = BufReader::new(&mut stream);\n    let request_line = buf_reader.lines().next().unwrap().unwrap();\n\n    let (status_line, filename) = if request_line == \"GET / HTTP/1.1\" {\n        (\"HTTP/1.1 200 OK\", \"hello.html\")\n    } else {\n        (\"HTTP/1.1 404 NOT FOUND\", \"404.html\")\n    };\n\n    let contents = fs::read_to_string(filename).unwrap();\n    let length = contents.len();\n\n    let response =\n        format!(\"{status_line}\\r\\nContent-Length: {length}\\r\\n\\r\\n{contents}\");\n\n    stream.write_all(response.as_bytes()).unwrap();\n}\n```\n\nListing 20-9: Refactoring the `if` and `else` blocks to contain only the code that differs between the two cases\n\nNow the `if` and `else` blocks only return the appropriate values for the status line and filename in a tuple; we then use destructuring to assign these two values to `status_line` and `filename` using a pattern in the `let` statement, as discussed in Chapter 18.\n\nThe previously duplicated code is now outside the `if` and `else` blocks and uses the `status_line` and `filename` variables. This makes it easier to see the difference between the two cases, and it means we have only one place to update the code if we want to change how the file reading and response writing work. The behavior of the code in Listing 20-9 will be the same as that in Listing 20-7.\n\nAwesome! We now have a simple web server in approximately 40 lines of Rust code that responds to one request with a page of content and responds to all other requests with a 404 response.\n\nCurrently, our server runs in a single thread, meaning it can only serve one request at a time. Let‚Äôs examine how that can be a problem by simulating some slow requests. Then we‚Äôll fix it so our server can handle multiple requests at once.\n\n## [Turning Our Single-Threaded Server into a Multithreaded Server](#turning-our-single-threaded-server-into-a-multithreaded-server)\n\nRight now, the server will process each request in turn, meaning it won‚Äôt process a second connection until the first is finished processing. If the server received more and more requests, this serial execution would be less and less optimal. If the server receives a request that takes a long time to process, subsequent requests will have to wait until the long request is finished, even if the new requests can be processed quickly. We‚Äôll need to fix this, but first, we‚Äôll look at the problem in action.\n\n### [Simulating a Slow Request in the Current Server Implementation](#simulating-a-slow-request-in-the-current-server-implementation)\n\nWe‚Äôll look at how a slow-processing request can affect other requests made to our current server implementation. Listing 20-10 implements handling a request to _/sleep_ with a simulated slow response that will cause the server to sleep for 5 seconds before responding.\n\nFilename: src/main.rs\n\n```rust\nuse std::{\n    fs,\n    io::{prelude::*, BufReader},\n    net::{TcpListener, TcpStream},\n    thread,\n    time::Duration,\n};\n// --snip--\n\nfn main() {\n    let listener = TcpListener::bind(\"127.0.0.1:7878\").unwrap();\n\n    for stream in listener.incoming() {\n        let stream = stream.unwrap();\n\n        handle_connection(stream);\n    }\n}\n\nfn handle_connection(mut stream: TcpStream) {\n    // --snip--\n\n    let buf_reader = BufReader::new(&mut stream);\n    let request_line = buf_reader.lines().next().unwrap().unwrap();\n\n    let (status_line, filename) = match &request_line[..] {\n        \"GET / HTTP/1.1\" => (\"HTTP/1.1 200 OK\", \"hello.html\"),\n        \"GET /sleep HTTP/1.1\" => {\n            thread::sleep(Duration::from_secs(5));\n            (\"HTTP/1.1 200 OK\", \"hello.html\")\n        }\n        _ => (\"HTTP/1.1 404 NOT FOUND\", \"404.html\"),\n    };\n\n    // --snip--\n\n    let contents = fs::read_to_string(filename).unwrap();\n    let length = contents.len();\n\n    let response =\n        format!(\"{status_line}\\r\\nContent-Length: {length}\\r\\n\\r\\n{contents}\");\n\n    stream.write_all(response.as_bytes()).unwrap();\n}\n```\n\nListing 20-10: Simulating a slow request by sleeping for 5 seconds\n\nWe switched from `if` to `match` now that we have three cases. We need to explicitly match on a slice of `request_line` to pattern match against the string literal values; `match` doesn‚Äôt do automatic referencing and dereferencing like the equality method does.\n\nThe first arm is the same as the `if` block from Listing 20-9. The second arm matches a request to _/sleep_. When that request is received, the server will sleep for 5 seconds before rendering the successful HTML page. The third arm is the same as the `else` block from Listing 20-9.\n\nYou can see how primitive our server is: real libraries would handle the recognition of multiple requests in a much less verbose way!\n\nStart the server using `cargo run`. Then open two browser windows: one for _http://127.0.0.1:7878/_ and the other for _http://127.0.0.1:7878/sleep_. If you enter the _/_ URI a few times, as before, you‚Äôll see it respond quickly. But if you enter _/sleep_ and then load _/_, you‚Äôll see that _/_ waits until `sleep` has slept for its full 5 seconds before loading.\n\nThere are multiple techniques we could use to avoid requests backing up behind a slow request; the one we‚Äôll implement is a thread pool.\n\n### [Improving Throughput with a Thread Pool](#improving-throughput-with-a-thread-pool)\n\nA _thread pool_ is a group of spawned threads that are waiting and ready to handle a task. When the program receives a new task, it assigns one of the threads in the pool to the task, and that thread will process the task. The remaining threads in the pool are available to handle any other tasks that come in while the first thread is processing. When the first thread is done processing its task, it‚Äôs returned to the pool of idle threads, ready to handle a new task. A thread pool allows you to process connections concurrently, increasing the throughput of your server.\n\nWe‚Äôll limit the number of threads in the pool to a small number to protect us from Denial of Service (DoS) attacks; if we had our program create a new thread for each request as it came in, someone making 10 million requests to our server could create havoc by using up all our server‚Äôs resources and grinding the processing of requests to a halt.\n\nRather than spawning unlimited threads, then, we‚Äôll have a fixed number of threads waiting in the pool. Requests that come in are sent to the pool for processing. The pool will maintain a queue of incoming requests. Each of the threads in the pool will pop off a request from this queue, handle the request, and then ask the queue for another request. With this design, we can process up to `N` requests concurrently, where `N` is the number of threads. If each thread is responding to a long-running request, subsequent requests can still back up in the queue, but we‚Äôve increased the number of long-running requests we can handle before reaching that point.\n\nThis technique is just one of many ways to improve the throughput of a web server. Other options you might explore are the _fork/join model_, the _single-threaded async I/O model_, or the _multi-threaded async I/O model_. If you‚Äôre interested in this topic, you can read more about other solutions and try to implement them; with a low-level language like Rust, all of these options are possible.\n\nBefore we begin implementing a thread pool, let‚Äôs talk about what using the pool should look like. When you‚Äôre trying to design code, writing the client interface first can help guide your design. Write the API of the code so it‚Äôs structured in the way you want to call it; then implement the functionality within that structure rather than implementing the functionality and then designing the public API.\n\nSimilar to how we used test-driven development in the project in Chapter 12, we‚Äôll use compiler-driven development here. We‚Äôll write the code that calls the functions we want, and then we‚Äôll look at errors from the compiler to determine what we should change next to get the code to work. Before we do that, however, we‚Äôll explore the technique we‚Äôre not going to use as a starting point.\n\n#### [Spawning a Thread for Each Request](#spawning-a-thread-for-each-request)\n\nFirst, let‚Äôs explore how our code might look if it did create a new thread for every connection. As mentioned earlier, this isn‚Äôt our final plan due to the problems with potentially spawning an unlimited number of threads, but it is a starting point to get a working multithreaded server first. Then we‚Äôll add the thread pool as an improvement, and contrasting the two solutions will be easier. Listing 20-11 shows the changes to make to `main` to spawn a new thread to handle each stream within the `for` loop.\n\nFilename: src/main.rs\n\n```rust\nuse std::{\n    fs,\n    io::{prelude::*, BufReader},\n    net::{TcpListener, TcpStream},\n    thread,\n    time::Duration,\n};\n\nfn main() {\n    let listener = TcpListener::bind(\"127.0.0.1:7878\").unwrap();\n\n    for stream in listener.incoming() {\n        let stream = stream.unwrap();\n\n        thread::spawn(|| {\n            handle_connection(stream);\n        });\n    }\n}\n\nfn handle_connection(mut stream: TcpStream) {\n    let buf_reader = BufReader::new(&mut stream);\n    let request_line = buf_reader.lines().next().unwrap().unwrap();\n\n    let (status_line, filename) = match &request_line[..] {\n        \"GET / HTTP/1.1\" => (\"HTTP/1.1 200 OK\", \"hello.html\"),\n        \"GET /sleep HTTP/1.1\" => {\n            thread::sleep(Duration::from_secs(5));\n            (\"HTTP/1.1 200 OK\", \"hello.html\")\n        }\n        _ => (\"HTTP/1.1 404 NOT FOUND\", \"404.html\"),\n    };\n\n    let contents = fs::read_to_string(filename).unwrap();\n    let length = contents.len();\n\n    let response =\n        format!(\"{status_line}\\r\\nContent-Length: {length}\\r\\n\\r\\n{contents}\");\n\n    stream.write_all(response.as_bytes()).unwrap();\n}\n```\n\nListing 20-11: Spawning a new thread for each stream\n\nAs you learned in Chapter 16, `thread::spawn` will create a new thread and then run the code in the closure in the new thread. If you run this code and load _/sleep_ in your browser, then _/_ in two more browser tabs, you‚Äôll indeed see that the requests to _/_ don‚Äôt have to wait for _/sleep_ to finish. However, as we mentioned, this will eventually overwhelm the system because you‚Äôd be making new threads without any limit.\n\n#### [Creating a Finite Number of Threads](#creating-a-finite-number-of-threads)\n\nWe want our thread pool to work in a similar, familiar way so switching from threads to a thread pool doesn‚Äôt require large changes to the code that uses our API. Listing 20-12 shows the hypothetical interface for a `ThreadPool` struct we want to use instead of `thread::spawn`.\n\nFilename: src/main.rs\n\n```rust\nuse std::{\n    fs,\n    io::{prelude::*, BufReader},\n    net::{TcpListener, TcpStream},\n    thread,\n    time::Duration,\n};\n\nfn main() {\n    let listener = TcpListener::bind(\"127.0.0.1:7878\").unwrap();\n    let pool = ThreadPool::new(4);\n\n    for stream in listener.incoming() {\n        let stream = stream.unwrap();\n\n        pool.execute(|| {\n            handle_connection(stream);\n        });\n    }\n}\n\nfn handle_connection(mut stream: TcpStream) {\n    let buf_reader = BufReader::new(&mut stream);\n    let request_line = buf_reader.lines().next().unwrap().unwrap();\n\n    let (status_line, filename) = match &request_line[..] {\n        \"GET / HTTP/1.1\" => (\"HTTP/1.1 200 OK\", \"hello.html\"),\n        \"GET /sleep HTTP/1.1\" => {\n            thread::sleep(Duration::from_secs(5));\n            (\"HTTP/1.1 200 OK\", \"hello.html\")\n        }\n        _ => (\"HTTP/1.1 404 NOT FOUND\", \"404.html\"),\n    };\n\n    let contents = fs::read_to_string(filename).unwrap();\n    let length = contents.len();\n\n    let response =\n        format!(\"{status_line}\\r\\nContent-Length: {length}\\r\\n\\r\\n{contents}\");\n\n    stream.write_all(response.as_bytes()).unwrap();\n}\n```\n\nListing 20-12: Our ideal `ThreadPool` interface\n\nWe use `ThreadPool::new` to create a new thread pool with a configurable number of threads, in this case four. Then, in the `for` loop, `pool.execute` has a similar interface as `thread::spawn` in that it takes a closure the pool should run for each stream. We need to implement `pool.execute` so it takes the closure and gives it to a thread in the pool to run. This code won‚Äôt yet compile, but we‚Äôll try so the compiler can guide us in how to fix it.\n\n#### [Building `ThreadPool` Using Compiler Driven Development](#building-threadpool-using-compiler-driven-development)\n\nMake the changes in Listing 20-12 to _src/main.rs_, and then let‚Äôs use the compiler errors from `cargo check` to drive our development. Here is the first error we get:\n\n```console\n$ cargo check\n    Checking hello v0.1.0 (file:///projects/hello)\nerror[E0433]: failed to resolve: use of undeclared type `ThreadPool`\n  --> src/main.rs:11:16\n   |\n11 |     let pool = ThreadPool::new(4);\n   |                ^^^^^^^^^^ use of undeclared type `ThreadPool`\n\nFor more information about this error, try `rustc --explain E0433`.\nerror: could not compile `hello` (bin \"hello\") due to 1 previous error\n\n```\n\nGreat! This error tells us we need a `ThreadPool` type or module, so we‚Äôll build one now. Our `ThreadPool` implementation will be independent of the kind of work our web server is doing. So, let‚Äôs switch the `hello` crate from a binary crate to a library crate to hold our `ThreadPool` implementation. After we change to a library crate, we could also use the separate thread pool library for any work we want to do using a thread pool, not just for serving web requests.\n\nCreate a _src/lib.rs_ that contains the following, which is the simplest definition of a `ThreadPool` struct that we can have for now:\n\nFilename: src/lib.rs\n\n```rust\npub struct ThreadPool;\n```\n\nThen edit _main.rs_ file to bring `ThreadPool` into scope from the library crate by adding the following code to the top of _src/main.rs_:\n\nFilename: src/main.rs\n\n```rust\nuse hello::ThreadPool;\nuse std::{\n    fs,\n    io::{prelude::*, BufReader},\n    net::{TcpListener, TcpStream},\n    thread,\n    time::Duration,\n};\n\nfn main() {\n    let listener = TcpListener::bind(\"127.0.0.1:7878\").unwrap();\n    let pool = ThreadPool::new(4);\n\n    for stream in listener.incoming() {\n        let stream = stream.unwrap();\n\n        pool.execute(|| {\n            handle_connection(stream);\n        });\n    }\n}\n\nfn handle_connection(mut stream: TcpStream) {\n    let buf_reader = BufReader::new(&mut stream);\n    let request_line = buf_reader.lines().next().unwrap().unwrap();\n\n    let (status_line, filename) = match &request_line[..] {\n        \"GET / HTTP/1.1\" => (\"HTTP/1.1 200 OK\", \"hello.html\"),\n        \"GET /sleep HTTP/1.1\" => {\n            thread::sleep(Duration::from_secs(5));\n            (\"HTTP/1.1 200 OK\", \"hello.html\")\n        }\n        _ => (\"HTTP/1.1 404 NOT FOUND\", \"404.html\"),\n    };\n\n    let contents = fs::read_to_string(filename).unwrap();\n    let length = contents.len();\n\n    let response =\n        format!(\"{status_line}\\r\\nContent-Length: {length}\\r\\n\\r\\n{contents}\");\n\n    stream.write_all(response.as_bytes()).unwrap();\n}\n```\n\nThis code still won‚Äôt work, but let‚Äôs check it again to get the next error that we need to address:\n\n```console\n$ cargo check\n    Checking hello v0.1.0 (file:///projects/hello)\nerror[E0599]: no function or associated item named `new` found for struct `ThreadPool` in the current scope\n  --> src/main.rs:12:28\n   |\n12 |     let pool = ThreadPool::new(4);\n   |                            ^^^ function or associated item not found in `ThreadPool`\n\nFor more information about this error, try `rustc --explain E0599`.\nerror: could not compile `hello` (bin \"hello\") due to 1 previous error\n\n```\n\nThis error indicates that next we need to create an associated function named `new` for `ThreadPool`. We also know that `new` needs to have one parameter that can accept `4` as an argument and should return a `ThreadPool` instance. Let‚Äôs implement the simplest `new` function that will have those characteristics:\n\nFilename: src/lib.rs\n\n```rust\npub struct ThreadPool;\n\nimpl ThreadPool {\n    pub fn new(size: usize) -> ThreadPool {\n        ThreadPool\n    }\n}\n```\n\nWe chose `usize` as the type of the `size` parameter, because we know that a negative number of threads doesn‚Äôt make any sense. We also know we‚Äôll use this 4 as the number of elements in a collection of threads, which is what the `usize` type is for, as discussed in the [‚ÄúInteger Types‚Äù](about:blank/ch03-02-data-types.html#integer-types) section of Chapter 3.\n\nLet‚Äôs check the code again:\n\n```console\n$ cargo check\n    Checking hello v0.1.0 (file:///projects/hello)\nerror[E0599]: no method named `execute` found for struct `ThreadPool` in the current scope\n  --> src/main.rs:17:14\n   |\n17 |         pool.execute(|| {\n   |         -----^^^^^^^ method not found in `ThreadPool`\n\nFor more information about this error, try `rustc --explain E0599`.\nerror: could not compile `hello` (bin \"hello\") due to 1 previous error\n\n```\n\nNow the error occurs because we don‚Äôt have an `execute` method on `ThreadPool`. Recall from the [‚ÄúCreating a Finite Number of Threads‚Äù](about:blank/ch20-02-multithreaded.html#creating-a-finite-number-of-threads) section that we decided our thread pool should have an interface similar to `thread::spawn`. In addition, we‚Äôll implement the `execute` function so it takes the closure it‚Äôs given and gives it to an idle thread in the pool to run.\n\nWe‚Äôll define the `execute` method on `ThreadPool` to take a closure as a parameter. Recall from the [‚ÄúMoving Captured Values Out of the Closure and the `Fn` Traits‚Äù](about:blank/ch13-01-closures.html#moving-captured-values-out-of-the-closure-and-the-fn-traits) section in Chapter 13 that we can take closures as parameters with three different traits: `Fn`, `FnMut`, and `FnOnce`. We need to decide which kind of closure to use here. We know we‚Äôll end up doing something similar to the standard library `thread::spawn` implementation, so we can look at what bounds the signature of `thread::spawn` has on its parameter. The documentation shows us the following:\n\n```rust\npub fn spawn<F, T>(f: F) -> JoinHandle<T>\n    where\n        F: FnOnce() -> T,\n        F: Send + 'static,\n        T: Send + 'static,\n```\n\nThe `F` type parameter is the one we‚Äôre concerned with here; the `T` type parameter is related to the return value, and we‚Äôre not concerned with that. We can see that `spawn` uses `FnOnce` as the trait bound on `F`. This is probably what we want as well, because we‚Äôll eventually pass the argument we get in `execute` to `spawn`. We can be further confident that `FnOnce` is the trait we want to use because the thread for running a request will only execute that request‚Äôs closure one time, which matches the `Once` in `FnOnce`.\n\nThe `F` type parameter also has the trait bound `Send` and the lifetime bound `'static`, which are useful in our situation: we need `Send` to transfer the closure from one thread to another and `'static` because we don‚Äôt know how long the thread will take to execute. Let‚Äôs create an `execute` method on `ThreadPool` that will take a generic parameter of type `F` with these bounds:\n\nFilename: src/lib.rs\n\n```rust\npub struct ThreadPool;\n\nimpl ThreadPool {\n    // --snip--\n    pub fn new(size: usize) -> ThreadPool {\n        ThreadPool\n    }\n\n    pub fn execute<F>(&self, f: F)\n    where\n        F: FnOnce() + Send + 'static,\n    {\n    }\n}\n```\n\nWe still use the `()` after `FnOnce` because this `FnOnce` represents a closure that takes no parameters and returns the unit type `()`. Just like function definitions, the return type can be omitted from the signature, but even if we have no parameters, we still need the parentheses.\n\nAgain, this is the simplest implementation of the `execute` method: it does nothing, but we‚Äôre trying only to make our code compile. Let‚Äôs check it again:\n\n```console\n$ cargo check\n    Checking hello v0.1.0 (file:///projects/hello)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.24s\n\n```\n\nIt compiles! But note that if you try `cargo run` and make a request in the browser, you‚Äôll see the errors in the browser that we saw at the beginning of the chapter. Our library isn‚Äôt actually calling the closure passed to `execute` yet!\n\nNote: A saying you might hear about languages with strict compilers, such as Haskell and Rust, is ‚Äúif the code compiles, it works.‚Äù But this saying is not universally true. Our project compiles, but it does absolutely nothing! If we were building a real, complete project, this would be a good time to start writing unit tests to check that the code compiles _and_ has the behavior we want.\n\n#### [Validating the Number of Threads in `new`](#validating-the-number-of-threads-in-new)\n\nWe aren‚Äôt doing anything with the parameters to `new` and `execute`. Let‚Äôs implement the bodies of these functions with the behavior we want. To start, let‚Äôs think about `new`. Earlier we chose an unsigned type for the `size` parameter, because a pool with a negative number of threads makes no sense. However, a pool with zero threads also makes no sense, yet zero is a perfectly valid `usize`. We‚Äôll add code to check that `size` is greater than zero before we return a `ThreadPool` instance and have the program panic if it receives a zero by using the `assert!` macro, as shown in Listing 20-13.\n\nFilename: src/lib.rs\n\n```rust\npub struct ThreadPool;\n\nimpl ThreadPool {\n    /// Create a new ThreadPool.\n    ///\n    /// The size is the number of threads in the pool.\n    ///\n    /// # Panics\n    ///\n    /// The `new` function will panic if the size is zero.\n    pub fn new(size: usize) -> ThreadPool {\n        assert!(size > 0);\n\n        ThreadPool\n    }\n\n    // --snip--\n    pub fn execute<F>(&self, f: F)\n    where\n        F: FnOnce() + Send + 'static,\n    {\n    }\n}\n```\n\nListing 20-13: Implementing `ThreadPool::new` to panic if `size` is zero\n\nWe‚Äôve also added some documentation for our `ThreadPool` with doc comments. Note that we followed good documentation practices by adding a section that calls out the situations in which our function can panic, as discussed in Chapter 14. Try running `cargo doc --open` and clicking the `ThreadPool` struct to see what the generated docs for `new` look like!\n\nInstead of adding the `assert!` macro as we‚Äôve done here, we could change `new` into `build` and return a `Result` like we did with `Config::build` in the I/O project in Listing 12-9. But we‚Äôve decided in this case that trying to create a thread pool without any threads should be an unrecoverable error. If you‚Äôre feeling ambitious, try to write a function named `build` with the following signature to compare with the `new` function:\n\n```rust\npub fn build(size: usize) -> Result<ThreadPool, PoolCreationError> {\n```\n\n#### [Creating Space to Store the Threads](#creating-space-to-store-the-threads)\n\nNow that we have a way to know we have a valid number of threads to store in the pool, we can create those threads and store them in the `ThreadPool` struct before returning the struct. But how do we ‚Äústore‚Äù a thread? Let‚Äôs take another look at the `thread::spawn` signature:\n\n```rust\npub fn spawn<F, T>(f: F) -> JoinHandle<T>\n    where\n        F: FnOnce() -> T,\n        F: Send + 'static,\n        T: Send + 'static,\n```\n\nThe `spawn` function returns a `JoinHandle<T>`, where `T` is the type that the closure returns. Let‚Äôs try using `JoinHandle` too and see what happens. In our case, the closures we‚Äôre passing to the thread pool will handle the connection and not return anything, so `T` will be the unit type `()`.\n\nThe code in Listing 20-14 will compile but doesn‚Äôt create any threads yet. We‚Äôve changed the definition of `ThreadPool` to hold a vector of `thread::JoinHandle<()>` instances, initialized the vector with a capacity of `size`, set up a `for` loop that will run some code to create the threads, and returned a `ThreadPool` instance containing them.\n\nFilename: src/lib.rs\n\n```rust\nuse std::thread;\n\npub struct ThreadPool {\n    threads: Vec<thread::JoinHandle<()>>,\n}\n\nimpl ThreadPool {\n    // --snip--\n    /// Create a new ThreadPool.\n    ///\n    /// The size is the number of threads in the pool.\n    ///\n    /// # Panics\n    ///\n    /// The `new` function will panic if the size is zero.\n    pub fn new(size: usize) -> ThreadPool {\n        assert!(size > 0);\n\n        let mut threads = Vec::with_capacity(size);\n\n        for _ in 0..size {\n            // create some threads and store them in the vector\n        }\n\n        ThreadPool { threads }\n    }\n    // --snip--\n\n    pub fn execute<F>(&self, f: F)\n    where\n        F: FnOnce() + Send + 'static,\n    {\n    }\n}\n```\n\nListing 20-14: Creating a vector for `ThreadPool` to hold the threads\n\nWe‚Äôve brought `std::thread` into scope in the library crate, because we‚Äôre using `thread::JoinHandle` as the type of the items in the vector in `ThreadPool`.\n\nOnce a valid size is received, our `ThreadPool` creates a new vector that can hold `size` items. The `with_capacity` function performs the same task as `Vec::new` but with an important difference: it preallocates space in the vector. Because we know we need to store `size` elements in the vector, doing this allocation up front is slightly more efficient than using `Vec::new`, which resizes itself as elements are inserted.\n\nWhen you run `cargo check` again, it should succeed.\n\n#### [A `Worker` Struct Responsible for Sending Code from the `ThreadPool` to a Thread](#a-worker-struct-responsible-for-sending-code-from-the-threadpool-to-a-thread)\n\nWe left a comment in the `for` loop in Listing 20-14 regarding the creation of threads. Here, we‚Äôll look at how we actually create threads. The standard library provides `thread::spawn` as a way to create threads, and `thread::spawn` expects to get some code the thread should run as soon as the thread is created. However, in our case, we want to create the threads and have them _wait_ for code that we‚Äôll send later. The standard library‚Äôs implementation of threads doesn‚Äôt include any way to do that; we have to implement it manually.\n\nWe‚Äôll implement this behavior by introducing a new data structure between the `ThreadPool` and the threads that will manage this new behavior. We‚Äôll call this data structure _Worker_, which is a common term in pooling implementations. The Worker picks up code that needs to be run and runs the code in the Worker‚Äôs thread. Think of people working in the kitchen at a restaurant: the workers wait until orders come in from customers, and then they‚Äôre responsible for taking those orders and fulfilling them.\n\nInstead of storing a vector of `JoinHandle<()>` instances in the thread pool, we‚Äôll store instances of the `Worker` struct. Each `Worker` will store a single `JoinHandle<()>` instance. Then we‚Äôll implement a method on `Worker` that will take a closure of code to run and send it to the already running thread for execution. We‚Äôll also give each worker an `id` so we can distinguish between the different workers in the pool when logging or debugging.\n\nHere is the new process that will happen when we create a `ThreadPool`. We‚Äôll implement the code that sends the closure to the thread after we have `Worker` set up in this way:\n\n1.  Define a `Worker` struct that holds an `id` and a `JoinHandle<()>`.\n2.  Change `ThreadPool` to hold a vector of `Worker` instances.\n3.  Define a `Worker::new` function that takes an `id` number and returns a `Worker` instance that holds the `id` and a thread spawned with an empty closure.\n4.  In `ThreadPool::new`, use the `for` loop counter to generate an `id`, create a new `Worker` with that `id`, and store the worker in the vector.\n\nIf you‚Äôre up for a challenge, try implementing these changes on your own before looking at the code in Listing 20-15.\n\nReady? Here is Listing 20-15 with one way to make the preceding modifications.\n\nFilename: src/lib.rs\n\n```rust\nuse std::thread;\n\npub struct ThreadPool {\n    workers: Vec<Worker>,\n}\n\nimpl ThreadPool {\n    // --snip--\n    /// Create a new ThreadPool.\n    ///\n    /// The size is the number of threads in the pool.\n    ///\n    /// # Panics\n    ///\n    /// The `new` function will panic if the size is zero.\n    pub fn new(size: usize) -> ThreadPool {\n        assert!(size > 0);\n\n        let mut workers = Vec::with_capacity(size);\n\n        for id in 0..size {\n            workers.push(Worker::new(id));\n        }\n\n        ThreadPool { workers }\n    }\n    // --snip--\n\n    pub fn execute<F>(&self, f: F)\n    where\n        F: FnOnce() + Send + 'static,\n    {\n    }\n}\n\nstruct Worker {\n    id: usize,\n    thread: thread::JoinHandle<()>,\n}\n\nimpl Worker {\n    fn new(id: usize) -> Worker {\n        let thread = thread::spawn(|| {});\n\n        Worker { id, thread }\n    }\n}\n```\n\nListing 20-15: Modifying `ThreadPool` to hold `Worker` instances instead of holding threads directly\n\nWe‚Äôve changed the name of the field on `ThreadPool` from `threads` to `workers` because it‚Äôs now holding `Worker` instances instead of `JoinHandle<()>` instances. We use the counter in the `for` loop as an argument to `Worker::new`, and we store each new `Worker` in the vector named `workers`.\n\nExternal code (like our server in _src/main.rs_) doesn‚Äôt need to know the implementation details regarding using a `Worker` struct within `ThreadPool`, so we make the `Worker` struct and its `new` function private. The `Worker::new` function uses the `id` we give it and stores a `JoinHandle<()>` instance that is created by spawning a new thread using an empty closure.\n\nNote: If the operating system can‚Äôt create a thread because there aren‚Äôt enough system resources, `thread::spawn` will panic. That will cause our whole server to panic, even though the creation of some threads might succeed. For simplicity‚Äôs sake, this behavior is fine, but in a production thread pool implementation, you‚Äôd likely want to use [`std::thread::Builder`](../std/thread/struct.Builder.html) and its [`spawn`](about:blank/std/thread/struct.Builder.html#method.spawn) method that returns `Result` instead.\n\nThis code will compile and will store the number of `Worker` instances we specified as an argument to `ThreadPool::new`. But we‚Äôre _still_ not processing the closure that we get in `execute`. Let‚Äôs look at how to do that next.\n\n#### [Sending Requests to Threads via Channels](#sending-requests-to-threads-via-channels)\n\nThe next problem we‚Äôll tackle is that the closures given to `thread::spawn` do absolutely nothing. Currently, we get the closure we want to execute in the `execute` method. But we need to give `thread::spawn` a closure to run when we create each `Worker` during the creation of the `ThreadPool`.\n\nWe want the `Worker` structs that we just created to fetch the code to run from a queue held in the `ThreadPool` and send that code to its thread to run.\n\nThe channels we learned about in Chapter 16‚Äîa simple way to communicate between two threads‚Äîwould be perfect for this use case. We‚Äôll use a channel to function as the queue of jobs, and `execute` will send a job from the `ThreadPool` to the `Worker` instances, which will send the job to its thread. Here is the plan:\n\n1.  The `ThreadPool` will create a channel and hold on to the sender.\n2.  Each `Worker` will hold on to the receiver.\n3.  We‚Äôll create a new `Job` struct that will hold the closures we want to send down the channel.\n4.  The `execute` method will send the job it wants to execute through the sender.\n5.  In its thread, the `Worker` will loop over its receiver and execute the closures of any jobs it receives.\n\nLet‚Äôs start by creating a channel in `ThreadPool::new` and holding the sender in the `ThreadPool` instance, as shown in Listing 20-16. The `Job` struct doesn‚Äôt hold anything for now but will be the type of item we‚Äôre sending down the channel.\n\nFilename: src/lib.rs\n\n```rust\nuse std::{sync::mpsc, thread};\n\npub struct ThreadPool {\n    workers: Vec<Worker>,\n    sender: mpsc::Sender<Job>,\n}\n\nstruct Job;\n\nimpl ThreadPool {\n    // --snip--\n    /// Create a new ThreadPool.\n    ///\n    /// The size is the number of threads in the pool.\n    ///\n    /// # Panics\n    ///\n    /// The `new` function will panic if the size is zero.\n    pub fn new(size: usize) -> ThreadPool {\n        assert!(size > 0);\n\n        let (sender, receiver) = mpsc::channel();\n\n        let mut workers = Vec::with_capacity(size);\n\n        for id in 0..size {\n            workers.push(Worker::new(id));\n        }\n\n        ThreadPool { workers, sender }\n    }\n    // --snip--\n\n    pub fn execute<F>(&self, f: F)\n    where\n        F: FnOnce() + Send + 'static,\n    {\n    }\n}\n\nstruct Worker {\n    id: usize,\n    thread: thread::JoinHandle<()>,\n}\n\nimpl Worker {\n    fn new(id: usize) -> Worker {\n        let thread = thread::spawn(|| {});\n\n        Worker { id, thread }\n    }\n}\n```\n\nListing 20-16: Modifying `ThreadPool` to store the sender of a channel that transmits `Job` instances\n\nIn `ThreadPool::new`, we create our new channel and have the pool hold the sender. This will successfully compile.\n\nLet‚Äôs try passing a receiver of the channel into each worker as the thread pool creates the channel. We know we want to use the receiver in the thread that the workers spawn, so we‚Äôll reference the `receiver` parameter in the closure. The code in Listing 20-17 won‚Äôt quite compile yet.\n\nFilename: src/lib.rs\n\n```rust\nuse std::{sync::mpsc, thread};\n\npub struct ThreadPool {\n    workers: Vec<Worker>,\n    sender: mpsc::Sender<Job>,\n}\n\nstruct Job;\n\nimpl ThreadPool {\n    // --snip--\n    /// Create a new ThreadPool.\n    ///\n    /// The size is the number of threads in the pool.\n    ///\n    /// # Panics\n    ///\n    /// The `new` function will panic if the size is zero.\n    pub fn new(size: usize) -> ThreadPool {\n        assert!(size > 0);\n\n        let (sender, receiver) = mpsc::channel();\n\n        let mut workers = Vec::with_capacity(size);\n\n        for id in 0..size {\n            workers.push(Worker::new(id, receiver));\n        }\n\n        ThreadPool { workers, sender }\n    }\n    // --snip--\n\n    pub fn execute<F>(&self, f: F)\n    where\n        F: FnOnce() + Send + 'static,\n    {\n    }\n}\n\n// --snip--\n\n\nstruct Worker {\n    id: usize,\n    thread: thread::JoinHandle<()>,\n}\n\nimpl Worker {\n    fn new(id: usize, receiver: mpsc::Receiver<Job>) -> Worker {\n        let thread = thread::spawn(|| {\n            receiver;\n        });\n\n        Worker { id, thread }\n    }\n}\n```\n\nListing 20-17: Passing the receiver to the workers\n\nWe‚Äôve made some small and straightforward changes: we pass the receiver into `Worker::new`, and then we use it inside the closure.\n\nWhen we try to check this code, we get this error:\n\n```console\n$ cargo check\n    Checking hello v0.1.0 (file:///projects/hello)\nerror[E0382]: use of moved value: `receiver`\n  --> src/lib.rs:26:42\n   |\n21 |         let (sender, receiver) = mpsc::channel();\n   |                      -------- move occurs because `receiver` has type `std::sync::mpsc::Receiver<Job>`, which does not implement the `Copy` trait\n...\n25 |         for id in 0..size {\n   |         ----------------- inside of this loop\n26 |             workers.push(Worker::new(id, receiver));\n   |                                          ^^^^^^^^ value moved here, in previous iteration of loop\n   |\nnote: consider changing this parameter type in method `new` to borrow instead if owning the value isn't necessary\n  --> src/lib.rs:47:33\n   |\n47 |     fn new(id: usize, receiver: mpsc::Receiver<Job>) -> Worker {\n   |        --- in this method       ^^^^^^^^^^^^^^^^^^^ this parameter takes ownership of the value\n\nFor more information about this error, try `rustc --explain E0382`.\nerror: could not compile `hello` (lib) due to 1 previous error\n\n```\n\nThe code is trying to pass `receiver` to multiple `Worker` instances. This won‚Äôt work, as you‚Äôll recall from Chapter 16: the channel implementation that Rust provides is multiple _producer_, single _consumer_. This means we can‚Äôt just clone the consuming end of the channel to fix this code. We also don‚Äôt want to send a message multiple times to multiple consumers; we want one list of messages with multiple workers such that each message gets processed once.\n\nAdditionally, taking a job off the channel queue involves mutating the `receiver`, so the threads need a safe way to share and modify `receiver`; otherwise, we might get race conditions (as covered in Chapter 16).\n\nRecall the thread-safe smart pointers discussed in Chapter 16: to share ownership across multiple threads and allow the threads to mutate the value, we need to use `Arc<Mutex<T>>`. The `Arc` type will let multiple workers own the receiver, and `Mutex` will ensure that only one worker gets a job from the receiver at a time. Listing 20-18 shows the changes we need to make.\n\nFilename: src/lib.rs\n\n```rust\nuse std::{\n    sync::{mpsc, Arc, Mutex},\n    thread,\n};\n// --snip--\n\npub struct ThreadPool {\n    workers: Vec<Worker>,\n    sender: mpsc::Sender<Job>,\n}\n\nstruct Job;\n\nimpl ThreadPool {\n    // --snip--\n    /// Create a new ThreadPool.\n    ///\n    /// The size is the number of threads in the pool.\n    ///\n    /// # Panics\n    ///\n    /// The `new` function will panic if the size is zero.\n    pub fn new(size: usize) -> ThreadPool {\n        assert!(size > 0);\n\n        let (sender, receiver) = mpsc::channel();\n\n        let receiver = Arc::new(Mutex::new(receiver));\n\n        let mut workers = Vec::with_capacity(size);\n\n        for id in 0..size {\n            workers.push(Worker::new(id, Arc::clone(&receiver)));\n        }\n\n        ThreadPool { workers, sender }\n    }\n\n    // --snip--\n\n    pub fn execute<F>(&self, f: F)\n    where\n        F: FnOnce() + Send + 'static,\n    {\n    }\n}\n\n// --snip--\n\nstruct Worker {\n    id: usize,\n    thread: thread::JoinHandle<()>,\n}\n\nimpl Worker {\n    fn new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Job>>>) -> Worker {\n        // --snip--\n        let thread = thread::spawn(|| {\n            receiver;\n        });\n\n        Worker { id, thread }\n    }\n}\n```\n\nListing 20-18: Sharing the receiver among the workers using `Arc` and `Mutex`\n\nIn `ThreadPool::new`, we put the receiver in an `Arc` and a `Mutex`. For each new worker, we clone the `Arc` to bump the reference count so the workers can share ownership of the receiver.\n\nWith these changes, the code compiles! We‚Äôre getting there!\n\n#### [Implementing the `execute` Method](#implementing-the-execute-method)\n\nLet‚Äôs finally implement the `execute` method on `ThreadPool`. We‚Äôll also change `Job` from a struct to a type alias for a trait object that holds the type of closure that `execute` receives. As discussed in the [‚ÄúCreating Type Synonyms with Type Aliases‚Äù](about:blank/ch19-04-advanced-types.html#creating-type-synonyms-with-type-aliases) section of Chapter 19, type aliases allow us to make long types shorter for ease of use. Look at Listing 20-19.\n\nFilename: src/lib.rs\n\n```rust\nuse std::{\n    sync::{mpsc, Arc, Mutex},\n    thread,\n};\n\npub struct ThreadPool {\n    workers: Vec<Worker>,\n    sender: mpsc::Sender<Job>,\n}\n\n// --snip--\n\ntype Job = Box<dyn FnOnce() + Send + 'static>;\n\nimpl ThreadPool {\n    // --snip--\n    /// Create a new ThreadPool.\n    ///\n    /// The size is the number of threads in the pool.\n    ///\n    /// # Panics\n    ///\n    /// The `new` function will panic if the size is zero.\n    pub fn new(size: usize) -> ThreadPool {\n        assert!(size > 0);\n\n        let (sender, receiver) = mpsc::channel();\n\n        let receiver = Arc::new(Mutex::new(receiver));\n\n        let mut workers = Vec::with_capacity(size);\n\n        for id in 0..size {\n            workers.push(Worker::new(id, Arc::clone(&receiver)));\n        }\n\n        ThreadPool { workers, sender }\n    }\n\n    pub fn execute<F>(&self, f: F)\n    where\n        F: FnOnce() + Send + 'static,\n    {\n        let job = Box::new(f);\n\n        self.sender.send(job).unwrap();\n    }\n}\n\n// --snip--\n\nstruct Worker {\n    id: usize,\n    thread: thread::JoinHandle<()>,\n}\n\nimpl Worker {\n    fn new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Job>>>) -> Worker {\n        let thread = thread::spawn(|| {\n            receiver;\n        });\n\n        Worker { id, thread }\n    }\n}\n```\n\nListing 20-19: Creating a `Job` type alias for a `Box` that holds each closure and then sending the job down the channel\n\nAfter creating a new `Job` instance using the closure we get in `execute`, we send that job down the sending end of the channel. We‚Äôre calling `unwrap` on `send` for the case that sending fails. This might happen if, for example, we stop all our threads from executing, meaning the receiving end has stopped receiving new messages. At the moment, we can‚Äôt stop our threads from executing: our threads continue executing as long as the pool exists. The reason we use `unwrap` is that we know the failure case won‚Äôt happen, but the compiler doesn‚Äôt know that.\n\nBut we‚Äôre not quite done yet! In the worker, our closure being passed to `thread::spawn` still only _references_ the receiving end of the channel. Instead, we need the closure to loop forever, asking the receiving end of the channel for a job and running the job when it gets one. Let‚Äôs make the change shown in Listing 20-20 to `Worker::new`.\n\nFilename: src/lib.rs\n\n```rust\nuse std::{\n    sync::{mpsc, Arc, Mutex},\n    thread,\n};\n\npub struct ThreadPool {\n    workers: Vec<Worker>,\n    sender: mpsc::Sender<Job>,\n}\n\ntype Job = Box<dyn FnOnce() + Send + 'static>;\n\nimpl ThreadPool {\n    /// Create a new ThreadPool.\n    ///\n    /// The size is the number of threads in the pool.\n    ///\n    /// # Panics\n    ///\n    /// The `new` function will panic if the size is zero.\n    pub fn new(size: usize) -> ThreadPool {\n        assert!(size > 0);\n\n        let (sender, receiver) = mpsc::channel();\n\n        let receiver = Arc::new(Mutex::new(receiver));\n\n        let mut workers = Vec::with_capacity(size);\n\n        for id in 0..size {\n            workers.push(Worker::new(id, Arc::clone(&receiver)));\n        }\n\n        ThreadPool { workers, sender }\n    }\n\n    pub fn execute<F>(&self, f: F)\n    where\n        F: FnOnce() + Send + 'static,\n    {\n        let job = Box::new(f);\n\n        self.sender.send(job).unwrap();\n    }\n}\n\nstruct Worker {\n    id: usize,\n    thread: thread::JoinHandle<()>,\n}\n\n// --snip--\n\nimpl Worker {\n    fn new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Job>>>) -> Worker {\n        let thread = thread::spawn(move || loop {\n            let job = receiver.lock().unwrap().recv().unwrap();\n\n            println!(\"Worker {id} got a job; executing.\");\n\n            job();\n        });\n\n        Worker { id, thread }\n    }\n}\n```\n\nListing 20-20: Receiving and executing the jobs in the worker‚Äôs thread\n\nHere, we first call `lock` on the `receiver` to acquire the mutex, and then we call `unwrap` to panic on any errors. Acquiring a lock might fail if the mutex is in a _poisoned_ state, which can happen if some other thread panicked while holding the lock rather than releasing the lock. In this situation, calling `unwrap` to have this thread panic is the correct action to take. Feel free to change this `unwrap` to an `expect` with an error message that is meaningful to you.\n\nIf we get the lock on the mutex, we call `recv` to receive a `Job` from the channel. A final `unwrap` moves past any errors here as well, which might occur if the thread holding the sender has shut down, similar to how the `send` method returns `Err` if the receiver shuts down.\n\nThe call to `recv` blocks, so if there is no job yet, the current thread will wait until a job becomes available. The `Mutex<T>` ensures that only one `Worker` thread at a time is trying to request a job.\n\nOur thread pool is now in a working state! Give it a `cargo run` and make some requests:\n\n```console\n$ cargo run\n   Compiling hello v0.1.0 (file:///projects/hello)\nwarning: field is never read: `workers`\n --> src/lib.rs:7:5\n  |\n7 |     workers: Vec<Worker>,\n  |     ^^^^^^^^^^^^^^^^^^^^\n  |\n  = note: `#[warn(dead_code)]` on by default\n\nwarning: field is never read: `id`\n  --> src/lib.rs:48:5\n   |\n48 |     id: usize,\n   |     ^^^^^^^^^\n\nwarning: field is never read: `thread`\n  --> src/lib.rs:49:5\n   |\n49 |     thread: thread::JoinHandle<()>,\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning: `hello` (lib) generated 3 warnings\n    Finished dev [unoptimized + debuginfo] target(s) in 1.40s\n     Running `target/debug/hello`\nWorker 0 got a job; executing.\nWorker 2 got a job; executing.\nWorker 1 got a job; executing.\nWorker 3 got a job; executing.\nWorker 0 got a job; executing.\nWorker 2 got a job; executing.\nWorker 1 got a job; executing.\nWorker 3 got a job; executing.\nWorker 0 got a job; executing.\nWorker 2 got a job; executing.\n\n```\n\nSuccess! We now have a thread pool that executes connections asynchronously. There are never more than four threads created, so our system won‚Äôt get overloaded if the server receives a lot of requests. If we make a request to _/sleep_, the server will be able to serve other requests by having another thread run them.\n\nNote: If you open _/sleep_ in multiple browser windows simultaneously, they might load one at a time in 5 second intervals. Some web browsers execute multiple instances of the same request sequentially for caching reasons. This limitation is not caused by our web server.\n\nAfter learning about the `while let` loop in Chapter 18, you might be wondering why we didn‚Äôt write the worker thread code as shown in Listing 20-21.\n\nFilename: src/lib.rs\n\n```rust\nuse std::{\n    sync::{mpsc, Arc, Mutex},\n    thread,\n};\n\npub struct ThreadPool {\n    workers: Vec<Worker>,\n    sender: mpsc::Sender<Job>,\n}\n\ntype Job = Box<dyn FnOnce() + Send + 'static>;\n\nimpl ThreadPool {\n    /// Create a new ThreadPool.\n    ///\n    /// The size is the number of threads in the pool.\n    ///\n    /// # Panics\n    ///\n    /// The `new` function will panic if the size is zero.\n    pub fn new(size: usize) -> ThreadPool {\n        assert!(size > 0);\n\n        let (sender, receiver) = mpsc::channel();\n\n        let receiver = Arc::new(Mutex::new(receiver));\n\n        let mut workers = Vec::with_capacity(size);\n\n        for id in 0..size {\n            workers.push(Worker::new(id, Arc::clone(&receiver)));\n        }\n\n        ThreadPool { workers, sender }\n    }\n\n    pub fn execute<F>(&self, f: F)\n    where\n        F: FnOnce() + Send + 'static,\n    {\n        let job = Box::new(f);\n\n        self.sender.send(job).unwrap();\n    }\n}\n\nstruct Worker {\n    id: usize,\n    thread: thread::JoinHandle<()>,\n}\n// --snip--\n\nimpl Worker {\n    fn new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Job>>>) -> Worker {\n        let thread = thread::spawn(move || {\n            while let Ok(job) = receiver.lock().unwrap().recv() {\n                println!(\"Worker {id} got a job; executing.\");\n\n                job();\n            }\n        });\n\n        Worker { id, thread }\n    }\n}\n```\n\nListing 20-21: An alternative implementation of `Worker::new` using `while let`\n\nThis code compiles and runs but doesn‚Äôt result in the desired threading behavior: a slow request will still cause other requests to wait to be processed. The reason is somewhat subtle: the `Mutex` struct has no public `unlock` method because the ownership of the lock is based on the lifetime of the `MutexGuard<T>` within the `LockResult<MutexGuard<T>>` that the `lock` method returns. At compile time, the borrow checker can then enforce the rule that a resource guarded by a `Mutex` cannot be accessed unless we hold the lock. However, this implementation can also result in the lock being held longer than intended if we aren‚Äôt mindful of the lifetime of the `MutexGuard<T>`.\n\nThe code in Listing 20-20 that uses `let job = receiver.lock().unwrap().recv().unwrap();` works because with `let`, any temporary values used in the expression on the right hand side of the equals sign are immediately dropped when the `let` statement ends. However, `while let` (and `if let` and `match`) does not drop temporary values until the end of the associated block. In Listing 20-21, the lock remains held for the duration of the call to `job()`, meaning other workers cannot receive jobs.\n\n## [Graceful Shutdown and Cleanup](#graceful-shutdown-and-cleanup)\n\nThe code in Listing 20-20 is responding to requests asynchronously through the use of a thread pool, as we intended. We get some warnings about the `workers`, `id`, and `thread` fields that we‚Äôre not using in a direct way that reminds us we‚Äôre not cleaning up anything. When we use the less elegant ctrl\\-c method to halt the main thread, all other threads are stopped immediately as well, even if they‚Äôre in the middle of serving a request.\n\nNext, then, we‚Äôll implement the `Drop` trait to call `join` on each of the threads in the pool so they can finish the requests they‚Äôre working on before closing. Then we‚Äôll implement a way to tell the threads they should stop accepting new requests and shut down. To see this code in action, we‚Äôll modify our server to accept only two requests before gracefully shutting down its thread pool.\n\n### [Implementing the `Drop` Trait on `ThreadPool`](#implementing-the-drop-trait-on-threadpool)\n\nLet‚Äôs start with implementing `Drop` on our thread pool. When the pool is dropped, our threads should all join to make sure they finish their work. Listing 20-22 shows a first attempt at a `Drop` implementation; this code won‚Äôt quite work yet.\n\nFilename: src/lib.rs\n\n```rust\nuse std::{\n    sync::{mpsc, Arc, Mutex},\n    thread,\n};\n\npub struct ThreadPool {\n    workers: Vec<Worker>,\n    sender: mpsc::Sender<Job>,\n}\n\ntype Job = Box<dyn FnOnce() + Send + 'static>;\n\nimpl ThreadPool {\n    /// Create a new ThreadPool.\n    ///\n    /// The size is the number of threads in the pool.\n    ///\n    /// # Panics\n    ///\n    /// The `new` function will panic if the size is zero.\n    pub fn new(size: usize) -> ThreadPool {\n        assert!(size > 0);\n\n        let (sender, receiver) = mpsc::channel();\n\n        let receiver = Arc::new(Mutex::new(receiver));\n\n        let mut workers = Vec::with_capacity(size);\n\n        for id in 0..size {\n            workers.push(Worker::new(id, Arc::clone(&receiver)));\n        }\n\n        ThreadPool { workers, sender }\n    }\n\n    pub fn execute<F>(&self, f: F)\n    where\n        F: FnOnce() + Send + 'static,\n    {\n        let job = Box::new(f);\n\n        self.sender.send(job).unwrap();\n    }\n}\n\nimpl Drop for ThreadPool {\n    fn drop(&mut self) {\n        for worker in &mut self.workers {\n            println!(\"Shutting down worker {}\", worker.id);\n\n            worker.thread.join().unwrap();\n        }\n    }\n}\n\nstruct Worker {\n    id: usize,\n    thread: thread::JoinHandle<()>,\n}\n\nimpl Worker {\n    fn new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Job>>>) -> Worker {\n        let thread = thread::spawn(move || loop {\n            let job = receiver.lock().unwrap().recv().unwrap();\n\n            println!(\"Worker {id} got a job; executing.\");\n\n            job();\n        });\n\n        Worker { id, thread }\n    }\n}\n```\n\nListing 20-22: Joining each thread when the thread pool goes out of scope\n\nFirst, we loop through each of the thread pool `workers`. We use `&mut` for this because `self` is a mutable reference, and we also need to be able to mutate `worker`. For each worker, we print a message saying that this particular worker is shutting down, and then we call `join` on that worker‚Äôs thread. If the call to `join` fails, we use `unwrap` to make Rust panic and go into an ungraceful shutdown.\n\nHere is the error we get when we compile this code:\n\n```console\n$ cargo check\n    Checking hello v0.1.0 (file:///projects/hello)\nerror[E0507]: cannot move out of `worker.thread` which is behind a mutable reference\n  --> src/lib.rs:52:13\n   |\n52 |             worker.thread.join().unwrap();\n   |             ^^^^^^^^^^^^^ ------ `worker.thread` moved due to this method call\n   |             |\n   |             move occurs because `worker.thread` has type `JoinHandle<()>`, which does not implement the `Copy` trait\n   |\nnote: `JoinHandle::<T>::join` takes ownership of the receiver `self`, which moves `worker.thread`\n  --> /rustc/9b00956e56009bab2aa15d7bff10916599e3d6d6/library/std/src/thread/mod.rs:1657:17\n\nFor more information about this error, try `rustc --explain E0507`.\nerror: could not compile `hello` (lib) due to 1 previous error\n\n```\n\nThe error tells us we can‚Äôt call `join` because we only have a mutable borrow of each `worker` and `join` takes ownership of its argument. To solve this issue, we need to move the thread out of the `Worker` instance that owns `thread` so `join` can consume the thread. We did this in Listing 17-15: if `Worker` holds an `Option<thread::JoinHandle<()>>` instead, we can call the `take` method on the `Option` to move the value out of the `Some` variant and leave a `None` variant in its place. In other words, a `Worker` that is running will have a `Some` variant in `thread`, and when we want to clean up a `Worker`, we‚Äôll replace `Some` with `None` so the `Worker` doesn‚Äôt have a thread to run.\n\nSo we know we want to update the definition of `Worker` like this:\n\nFilename: src/lib.rs\n\n```rust\nuse std::{\n    sync::{mpsc, Arc, Mutex},\n    thread,\n};\n\npub struct ThreadPool {\n    workers: Vec<Worker>,\n    sender: mpsc::Sender<Job>,\n}\n\ntype Job = Box<dyn FnOnce() + Send + 'static>;\n\nimpl ThreadPool {\n    /// Create a new ThreadPool.\n    ///\n    /// The size is the number of threads in the pool.\n    ///\n    /// # Panics\n    ///\n    /// The `new` function will panic if the size is zero.\n    pub fn new(size: usize) -> ThreadPool {\n        assert!(size > 0);\n\n        let (sender, receiver) = mpsc::channel();\n\n        let receiver = Arc::new(Mutex::new(receiver));\n\n        let mut workers = Vec::with_capacity(size);\n\n        for id in 0..size {\n            workers.push(Worker::new(id, Arc::clone(&receiver)));\n        }\n\n        ThreadPool { workers, sender }\n    }\n\n    pub fn execute<F>(&self, f: F)\n    where\n        F: FnOnce() + Send + 'static,\n    {\n        let job = Box::new(f);\n\n        self.sender.send(job).unwrap();\n    }\n}\n\nimpl Drop for ThreadPool {\n    fn drop(&mut self) {\n        for worker in &mut self.workers {\n            println!(\"Shutting down worker {}\", worker.id);\n\n            worker.thread.join().unwrap();\n        }\n    }\n}\n\nstruct Worker {\n    id: usize,\n    thread: Option<thread::JoinHandle<()>>,\n}\n\nimpl Worker {\n    fn new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Job>>>) -> Worker {\n        let thread = thread::spawn(move || loop {\n            let job = receiver.lock().unwrap().recv().unwrap();\n\n            println!(\"Worker {id} got a job; executing.\");\n\n            job();\n        });\n\n        Worker { id, thread }\n    }\n}\n```\n\nNow let‚Äôs lean on the compiler to find the other places that need to change. Checking this code, we get two errors:\n\n```console\n$ cargo check\n    Checking hello v0.1.0 (file:///projects/hello)\nerror[E0599]: no method named `join` found for enum `Option` in the current scope\n  --> src/lib.rs:52:27\n   |\n52 |             worker.thread.join().unwrap();\n   |                           ^^^^ method not found in `Option<JoinHandle<()>>`\n   |\nnote: the method `join` exists on the type `JoinHandle<()>`\n  --> /rustc/9b00956e56009bab2aa15d7bff10916599e3d6d6/library/std/src/thread/mod.rs:1657:5\nhelp: consider using `Option::expect` to unwrap the `JoinHandle<()>` value, panicking if the value is an `Option::None`\n   |\n52 |             worker.thread.expect(\"REASON\").join().unwrap();\n   |                          +++++++++++++++++\n\nerror[E0308]: mismatched types\n  --> src/lib.rs:72:22\n   |\n72 |         Worker { id, thread }\n   |                      ^^^^^^ expected `Option<JoinHandle<()>>`, found `JoinHandle<_>`\n   |\n   = note: expected enum `Option<JoinHandle<()>>`\n            found struct `JoinHandle<_>`\nhelp: try wrapping the expression in `Some`\n   |\n72 |         Worker { id, thread: Some(thread) }\n   |                      +++++++++++++      +\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\nerror: could not compile `hello` (lib) due to 2 previous errors\n\n```\n\nLet‚Äôs address the second error, which points to the code at the end of `Worker::new`; we need to wrap the `thread` value in `Some` when we create a new `Worker`. Make the following changes to fix this error:\n\nFilename: src/lib.rs\n\n```rust\nuse std::{\n    sync::{mpsc, Arc, Mutex},\n    thread,\n};\n\npub struct ThreadPool {\n    workers: Vec<Worker>,\n    sender: mpsc::Sender<Job>,\n}\n\ntype Job = Box<dyn FnOnce() + Send + 'static>;\n\nimpl ThreadPool {\n    /// Create a new ThreadPool.\n    ///\n    /// The size is the number of threads in the pool.\n    ///\n    /// # Panics\n    ///\n    /// The `new` function will panic if the size is zero.\n    pub fn new(size: usize) -> ThreadPool {\n        assert!(size > 0);\n\n        let (sender, receiver) = mpsc::channel();\n\n        let receiver = Arc::new(Mutex::new(receiver));\n\n        let mut workers = Vec::with_capacity(size);\n\n        for id in 0..size {\n            workers.push(Worker::new(id, Arc::clone(&receiver)));\n        }\n\n        ThreadPool { workers, sender }\n    }\n\n    pub fn execute<F>(&self, f: F)\n    where\n        F: FnOnce() + Send + 'static,\n    {\n        let job = Box::new(f);\n\n        self.sender.send(job).unwrap();\n    }\n}\n\nimpl Drop for ThreadPool {\n    fn drop(&mut self) {\n        for worker in &mut self.workers {\n            println!(\"Shutting down worker {}\", worker.id);\n\n            worker.thread.join().unwrap();\n        }\n    }\n}\n\nstruct Worker {\n    id: usize,\n    thread: Option<thread::JoinHandle<()>>,\n}\n\nimpl Worker {\n    fn new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Job>>>) -> Worker {\n        // --snip--\n\n        let thread = thread::spawn(move || loop {\n            let job = receiver.lock().unwrap().recv().unwrap();\n\n            println!(\"Worker {id} got a job; executing.\");\n\n            job();\n        });\n\n        Worker {\n            id,\n            thread: Some(thread),\n        }\n    }\n}\n```\n\nThe first error is in our `Drop` implementation. We mentioned earlier that we intended to call `take` on the `Option` value to move `thread` out of `worker`. The following changes will do so:\n\nFilename: src/lib.rs\n\n```rust\nuse std::{\n    sync::{mpsc, Arc, Mutex},\n    thread,\n};\n\npub struct ThreadPool {\n    workers: Vec<Worker>,\n    sender: mpsc::Sender<Job>,\n}\n\ntype Job = Box<dyn FnOnce() + Send + 'static>;\n\nimpl ThreadPool {\n    /// Create a new ThreadPool.\n    ///\n    /// The size is the number of threads in the pool.\n    ///\n    /// # Panics\n    ///\n    /// The `new` function will panic if the size is zero.\n    pub fn new(size: usize) -> ThreadPool {\n        assert!(size > 0);\n\n        let (sender, receiver) = mpsc::channel();\n\n        let receiver = Arc::new(Mutex::new(receiver));\n\n        let mut workers = Vec::with_capacity(size);\n\n        for id in 0..size {\n            workers.push(Worker::new(id, Arc::clone(&receiver)));\n        }\n\n        ThreadPool { workers, sender }\n    }\n\n    pub fn execute<F>(&self, f: F)\n    where\n        F: FnOnce() + Send + 'static,\n    {\n        let job = Box::new(f);\n\n        self.sender.send(job).unwrap();\n    }\n}\n\nimpl Drop for ThreadPool {\n    fn drop(&mut self) {\n        for worker in &mut self.workers {\n            println!(\"Shutting down worker {}\", worker.id);\n\n            if let Some(thread) = worker.thread.take() {\n                thread.join().unwrap();\n            }\n        }\n    }\n}\n\nstruct Worker {\n    id: usize,\n    thread: Option<thread::JoinHandle<()>>,\n}\n\nimpl Worker {\n    fn new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Job>>>) -> Worker {\n        let thread = thread::spawn(move || loop {\n            let job = receiver.lock().unwrap().recv().unwrap();\n\n            println!(\"Worker {id} got a job; executing.\");\n\n            job();\n        });\n\n        Worker {\n            id,\n            thread: Some(thread),\n        }\n    }\n}\n```\n\nAs discussed in Chapter 17, the `take` method on `Option` takes the `Some` variant out and leaves `None` in its place. We‚Äôre using `if let` to destructure the `Some` and get the thread; then we call `join` on the thread. If a worker‚Äôs thread is already `None`, we know that worker has already had its thread cleaned up, so nothing happens in that case.\n\n### [Signaling to the Threads to Stop Listening for Jobs](#signaling-to-the-threads-to-stop-listening-for-jobs)\n\nWith all the changes we‚Äôve made, our code compiles without any warnings. However, the bad news is this code doesn‚Äôt function the way we want it to yet. The key is the logic in the closures run by the threads of the `Worker` instances: at the moment, we call `join`, but that won‚Äôt shut down the threads because they `loop` forever looking for jobs. If we try to drop our `ThreadPool` with our current implementation of `drop`, the main thread will block forever waiting for the first thread to finish.\n\nTo fix this problem, we‚Äôll need a change in the `ThreadPool` `drop` implementation and then a change in the `Worker` loop.\n\nFirst, we‚Äôll change the `ThreadPool` `drop` implementation to explicitly drop the `sender` before waiting for the threads to finish. Listing 20-23 shows the changes to `ThreadPool` to explicitly drop `sender`. We use the same `Option` and `take` technique as we did with the thread to be able to move `sender` out of `ThreadPool`:\n\nFilename: src/lib.rs\n\n```rust\nuse std::{\n    sync::{mpsc, Arc, Mutex},\n    thread,\n};\n\npub struct ThreadPool {\n    workers: Vec<Worker>,\n    sender: Option<mpsc::Sender<Job>>,\n}\n// --snip--\n\ntype Job = Box<dyn FnOnce() + Send + 'static>;\n\nimpl ThreadPool {\n    /// Create a new ThreadPool.\n    ///\n    /// The size is the number of threads in the pool.\n    ///\n    /// # Panics\n    ///\n    /// The `new` function will panic if the size is zero.\n    pub fn new(size: usize) -> ThreadPool {\n        // --snip--\n\n        assert!(size > 0);\n\n        let (sender, receiver) = mpsc::channel();\n\n        let receiver = Arc::new(Mutex::new(receiver));\n\n        let mut workers = Vec::with_capacity(size);\n\n        for id in 0..size {\n            workers.push(Worker::new(id, Arc::clone(&receiver)));\n        }\n\n        ThreadPool {\n            workers,\n            sender: Some(sender),\n        }\n    }\n\n    pub fn execute<F>(&self, f: F)\n    where\n        F: FnOnce() + Send + 'static,\n    {\n        let job = Box::new(f);\n\n        self.sender.as_ref().unwrap().send(job).unwrap();\n    }\n}\n\nimpl Drop for ThreadPool {\n    fn drop(&mut self) {\n        drop(self.sender.take());\n\n        for worker in &mut self.workers {\n            println!(\"Shutting down worker {}\", worker.id);\n\n            if let Some(thread) = worker.thread.take() {\n                thread.join().unwrap();\n            }\n        }\n    }\n}\n\nstruct Worker {\n    id: usize,\n    thread: Option<thread::JoinHandle<()>>,\n}\n\nimpl Worker {\n    fn new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Job>>>) -> Worker {\n        let thread = thread::spawn(move || loop {\n            let job = receiver.lock().unwrap().recv().unwrap();\n\n            println!(\"Worker {id} got a job; executing.\");\n\n            job();\n        });\n\n        Worker {\n            id,\n            thread: Some(thread),\n        }\n    }\n}\n```\n\nListing 20-23: Explicitly drop `sender` before joining the worker threads\n\nDropping `sender` closes the channel, which indicates no more messages will be sent. When that happens, all the calls to `recv` that the workers do in the infinite loop will return an error. In Listing 20-24, we change the `Worker` loop to gracefully exit the loop in that case, which means the threads will finish when the `ThreadPool` `drop` implementation calls `join` on them.\n\nFilename: src/lib.rs\n\n```rust\nuse std::{\n    sync::{mpsc, Arc, Mutex},\n    thread,\n};\n\npub struct ThreadPool {\n    workers: Vec<Worker>,\n    sender: Option<mpsc::Sender<Job>>,\n}\n\ntype Job = Box<dyn FnOnce() + Send + 'static>;\n\nimpl ThreadPool {\n    /// Create a new ThreadPool.\n    ///\n    /// The size is the number of threads in the pool.\n    ///\n    /// # Panics\n    ///\n    /// The `new` function will panic if the size is zero.\n    pub fn new(size: usize) -> ThreadPool {\n        assert!(size > 0);\n\n        let (sender, receiver) = mpsc::channel();\n\n        let receiver = Arc::new(Mutex::new(receiver));\n\n        let mut workers = Vec::with_capacity(size);\n\n        for id in 0..size {\n            workers.push(Worker::new(id, Arc::clone(&receiver)));\n        }\n\n        ThreadPool {\n            workers,\n            sender: Some(sender),\n        }\n    }\n\n    pub fn execute<F>(&self, f: F)\n    where\n        F: FnOnce() + Send + 'static,\n    {\n        let job = Box::new(f);\n\n        self.sender.as_ref().unwrap().send(job).unwrap();\n    }\n}\n\nimpl Drop for ThreadPool {\n    fn drop(&mut self) {\n        drop(self.sender.take());\n\n        for worker in &mut self.workers {\n            println!(\"Shutting down worker {}\", worker.id);\n\n            if let Some(thread) = worker.thread.take() {\n                thread.join().unwrap();\n            }\n        }\n    }\n}\n\nstruct Worker {\n    id: usize,\n    thread: Option<thread::JoinHandle<()>>,\n}\n\nimpl Worker {\n    fn new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Job>>>) -> Worker {\n        let thread = thread::spawn(move || loop {\n            let message = receiver.lock().unwrap().recv();\n\n            match message {\n                Ok(job) => {\n                    println!(\"Worker {id} got a job; executing.\");\n\n                    job();\n                }\n                Err(_) => {\n                    println!(\"Worker {id} disconnected; shutting down.\");\n                    break;\n                }\n            }\n        });\n\n        Worker {\n            id,\n            thread: Some(thread),\n        }\n    }\n}\n```\n\nListing 20-24: Explicitly break out of the loop when `recv` returns an error\n\nTo see this code in action, let‚Äôs modify `main` to accept only two requests before gracefully shutting down the server, as shown in Listing 20-25.\n\nFilename: src/main.rs\n\n```rust\nuse hello::ThreadPool;\nuse std::{\n    fs,\n    io::{prelude::*, BufReader},\n    net::{TcpListener, TcpStream},\n    thread,\n    time::Duration,\n};\n\nfn main() {\n    let listener = TcpListener::bind(\"127.0.0.1:7878\").unwrap();\n    let pool = ThreadPool::new(4);\n\n    for stream in listener.incoming().take(2) {\n        let stream = stream.unwrap();\n\n        pool.execute(|| {\n            handle_connection(stream);\n        });\n    }\n\n    println!(\"Shutting down.\");\n}\n\nfn handle_connection(mut stream: TcpStream) {\n    let buf_reader = BufReader::new(&mut stream);\n    let request_line = buf_reader.lines().next().unwrap().unwrap();\n\n    let (status_line, filename) = match &request_line[..] {\n        \"GET / HTTP/1.1\" => (\"HTTP/1.1 200 OK\", \"hello.html\"),\n        \"GET /sleep HTTP/1.1\" => {\n            thread::sleep(Duration::from_secs(5));\n            (\"HTTP/1.1 200 OK\", \"hello.html\")\n        }\n        _ => (\"HTTP/1.1 404 NOT FOUND\", \"404.html\"),\n    };\n\n    let contents = fs::read_to_string(filename).unwrap();\n    let length = contents.len();\n\n    let response =\n        format!(\"{status_line}\\r\\nContent-Length: {length}\\r\\n\\r\\n{contents}\");\n\n    stream.write_all(response.as_bytes()).unwrap();\n}\n```\n\nListing 20-25: Shut down the server after serving two requests by exiting the loop\n\nYou wouldn‚Äôt want a real-world web server to shut down after serving only two requests. This code just demonstrates that the graceful shutdown and cleanup is in working order.\n\nThe `take` method is defined in the `Iterator` trait and limits the iteration to the first two items at most. The `ThreadPool` will go out of scope at the end of `main`, and the `drop` implementation will run.\n\nStart the server with `cargo run`, and make three requests. The third request should error, and in your terminal you should see output similar to this:\n\n```console\n$ cargo run\n   Compiling hello v0.1.0 (file:///projects/hello)\n    Finished dev [unoptimized + debuginfo] target(s) in 1.0s\n     Running `target/debug/hello`\nWorker 0 got a job; executing.\nShutting down.\nShutting down worker 0\nWorker 3 got a job; executing.\nWorker 1 disconnected; shutting down.\nWorker 2 disconnected; shutting down.\nWorker 3 disconnected; shutting down.\nWorker 0 disconnected; shutting down.\nShutting down worker 1\nShutting down worker 2\nShutting down worker 3\n\n```\n\nYou might see a different ordering of workers and messages printed. We can see how this code works from the messages: workers 0 and 3 got the first two requests. The server stopped accepting connections after the second connection, and the `Drop` implementation on `ThreadPool` starts executing before worker 3 even starts its job. Dropping the `sender` disconnects all the workers and tells them to shut down. The workers each print a message when they disconnect, and then the thread pool calls `join` to wait for each worker thread to finish.\n\nNotice one interesting aspect of this particular execution: the `ThreadPool` dropped the `sender`, and before any worker received an error, we tried to join worker 0. Worker 0 had not yet gotten an error from `recv`, so the main thread blocked waiting for worker 0 to finish. In the meantime, worker 3 received a job and then all threads received an error. When worker 0 finished, the main thread waited for the rest of the workers to finish. At that point, they had all exited their loops and stopped.\n\nCongrats! We‚Äôve now completed our project; we have a basic web server that uses a thread pool to respond asynchronously. We‚Äôre able to perform a graceful shutdown of the server, which cleans up all the threads in the pool.\n\nHere‚Äôs the full code for reference:\n\nFilename: src/main.rs\n\n```rust\nuse hello::ThreadPool;\nuse std::{\n    fs,\n    io::{prelude::*, BufReader},\n    net::{TcpListener, TcpStream},\n    thread,\n    time::Duration,\n};\n\nfn main() {\n    let listener = TcpListener::bind(\"127.0.0.1:7878\").unwrap();\n    let pool = ThreadPool::new(4);\n\n    for stream in listener.incoming().take(2) {\n        let stream = stream.unwrap();\n\n        pool.execute(|| {\n            handle_connection(stream);\n        });\n    }\n\n    println!(\"Shutting down.\");\n}\n\nfn handle_connection(mut stream: TcpStream) {\n    let buf_reader = BufReader::new(&mut stream);\n    let request_line = buf_reader.lines().next().unwrap().unwrap();\n\n    let (status_line, filename) = match &request_line[..] {\n        \"GET / HTTP/1.1\" => (\"HTTP/1.1 200 OK\", \"hello.html\"),\n        \"GET /sleep HTTP/1.1\" => {\n            thread::sleep(Duration::from_secs(5));\n            (\"HTTP/1.1 200 OK\", \"hello.html\")\n        }\n        _ => (\"HTTP/1.1 404 NOT FOUND\", \"404.html\"),\n    };\n\n    let contents = fs::read_to_string(filename).unwrap();\n    let length = contents.len();\n\n    let response =\n        format!(\"{status_line}\\r\\nContent-Length: {length}\\r\\n\\r\\n{contents}\");\n\n    stream.write_all(response.as_bytes()).unwrap();\n}\n```\n\nFilename: src/lib.rs\n\n```rust\nuse std::{\n    sync::{mpsc, Arc, Mutex},\n    thread,\n};\n\npub struct ThreadPool {\n    workers: Vec<Worker>,\n    sender: Option<mpsc::Sender<Job>>,\n}\n\ntype Job = Box<dyn FnOnce() + Send + 'static>;\n\nimpl ThreadPool {\n    /// Create a new ThreadPool.\n    ///\n    /// The size is the number of threads in the pool.\n    ///\n    /// # Panics\n    ///\n    /// The `new` function will panic if the size is zero.\n    pub fn new(size: usize) -> ThreadPool {\n        assert!(size > 0);\n\n        let (sender, receiver) = mpsc::channel();\n\n        let receiver = Arc::new(Mutex::new(receiver));\n\n        let mut workers = Vec::with_capacity(size);\n\n        for id in 0..size {\n            workers.push(Worker::new(id, Arc::clone(&receiver)));\n        }\n\n        ThreadPool {\n            workers,\n            sender: Some(sender),\n        }\n    }\n\n    pub fn execute<F>(&self, f: F)\n    where\n        F: FnOnce() + Send + 'static,\n    {\n        let job = Box::new(f);\n\n        self.sender.as_ref().unwrap().send(job).unwrap();\n    }\n}\n\nimpl Drop for ThreadPool {\n    fn drop(&mut self) {\n        drop(self.sender.take());\n\n        for worker in &mut self.workers {\n            println!(\"Shutting down worker {}\", worker.id);\n\n            if let Some(thread) = worker.thread.take() {\n                thread.join().unwrap();\n            }\n        }\n    }\n}\n\nstruct Worker {\n    id: usize,\n    thread: Option<thread::JoinHandle<()>>,\n}\n\nimpl Worker {\n    fn new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Job>>>) -> Worker {\n        let thread = thread::spawn(move || loop {\n            let message = receiver.lock().unwrap().recv();\n\n            match message {\n                Ok(job) => {\n                    println!(\"Worker {id} got a job; executing.\");\n\n                    job();\n                }\n                Err(_) => {\n                    println!(\"Worker {id} disconnected; shutting down.\");\n                    break;\n                }\n            }\n        });\n\n        Worker {\n            id,\n            thread: Some(thread),\n        }\n    }\n}\n```\n\nWe could do more here! If you want to continue enhancing this project, here are some ideas:\n\n-   Add more documentation to `ThreadPool` and its public methods.\n-   Add tests of the library‚Äôs functionality.\n-   Change calls to `unwrap` to more robust error handling.\n-   Use `ThreadPool` to perform some task other than serving web requests.\n-   Find a thread pool crate on [crates.io](https://crates.io/) and implement a similar web server using the crate instead. Then compare its API and robustness to the thread pool we implemented.\n\n## [Summary](#summary-19)\n\nWell done! You‚Äôve made it to the end of the book! We want to thank you for joining us on this tour of Rust. You‚Äôre now ready to implement your own Rust projects and help with other peoples‚Äô projects. Keep in mind that there is a welcoming community of other Rustaceans who would love to help you with any challenges you encounter on your Rust journey.\n\n## [Appendix](#appendix)\n\nThe following sections contain reference material you may find useful in your Rust journey.\n\n## [Appendix A: Keywords](#appendix-a-keywords)\n\nThe following list contains keywords that are reserved for current or future use by the Rust language. As such, they cannot be used as identifiers (except as raw identifiers as we‚Äôll discuss in the ‚Äú[Raw Identifiers](about:blank/appendix-01-keywords.html#raw-identifiers)‚Äù section). Identifiers are names of functions, variables, parameters, struct fields, modules, crates, constants, macros, static values, attributes, types, traits, or lifetimes.\n\n### [Keywords Currently in Use](#keywords-currently-in-use)\n\nThe following is a list of keywords currently in use, with their functionality described.\n\n-   `as` - perform primitive casting, disambiguate the specific trait containing an item, or rename items in `use` statements\n-   `async` - return a `Future` instead of blocking the current thread\n-   `await` - suspend execution until the result of a `Future` is ready\n-   `break` - exit a loop immediately\n-   `const` - define constant items or constant raw pointers\n-   `continue` - continue to the next loop iteration\n-   `crate` - in a module path, refers to the crate root\n-   `dyn` - dynamic dispatch to a trait object\n-   `else` - fallback for `if` and `if let` control flow constructs\n-   `enum` - define an enumeration\n-   `extern` - link an external function or variable\n-   `false` - Boolean false literal\n-   `fn` - define a function or the function pointer type\n-   `for` - loop over items from an iterator, implement a trait, or specify a higher-ranked lifetime\n-   `if` - branch based on the result of a conditional expression\n-   `impl` - implement inherent or trait functionality\n-   `in` - part of `for` loop syntax\n-   `let` - bind a variable\n-   `loop` - loop unconditionally\n-   `match` - match a value to patterns\n-   `mod` - define a module\n-   `move` - make a closure take ownership of all its captures\n-   `mut` - denote mutability in references, raw pointers, or pattern bindings\n-   `pub` - denote public visibility in struct fields, `impl` blocks, or modules\n-   `ref` - bind by reference\n-   `return` - return from function\n-   `Self` - a type alias for the type we are defining or implementing\n-   `self` - method subject or current module\n-   `static` - global variable or lifetime lasting the entire program execution\n-   `struct` - define a structure\n-   `super` - parent module of the current module\n-   `trait` - define a trait\n-   `true` - Boolean true literal\n-   `type` - define a type alias or associated type\n-   `union` - define a [union](../reference/items/unions.html); is only a keyword when used in a union declaration\n-   `unsafe` - denote unsafe code, functions, traits, or implementations\n-   `use` - bring symbols into scope\n-   `where` - denote clauses that constrain a type\n-   `while` - loop conditionally based on the result of an expression\n\n### [Keywords Reserved for Future Use](#keywords-reserved-for-future-use)\n\nThe following keywords do not yet have any functionality but are reserved by Rust for potential future use.\n\n-   `abstract`\n-   `become`\n-   `box`\n-   `do`\n-   `final`\n-   `macro`\n-   `override`\n-   `priv`\n-   `try`\n-   `typeof`\n-   `unsized`\n-   `virtual`\n-   `yield`\n\n### [Raw Identifiers](#raw-identifiers)\n\n_Raw identifiers_ are the syntax that lets you use keywords where they wouldn‚Äôt normally be allowed. You use a raw identifier by prefixing a keyword with `r#`.\n\nFor example, `match` is a keyword. If you try to compile the following function that uses `match` as its name:\n\nFilename: src/main.rs\n\n```rust\nfn match(needle: &str, haystack: &str) -> bool {\n    haystack.contains(needle)\n}\n```\n\nyou‚Äôll get this error:\n\n```text\nerror: expected identifier, found keyword `match`\n --> src/main.rs:4:4\n  |\n4 | fn match(needle: &str, haystack: &str) -> bool {\n  |    ^^^^^ expected identifier, found keyword\n\n```\n\nThe error shows that you can‚Äôt use the keyword `match` as the function identifier. To use `match` as a function name, you need to use the raw identifier syntax, like this:\n\nFilename: src/main.rs\n\n```rust\nfn r#match(needle: &str, haystack: &str) -> bool {\n    haystack.contains(needle)\n}\n\nfn main() {\n    assert!(r#match(\"foo\", \"foobar\"));\n}\n```\n\nThis code will compile without any errors. Note the `r#` prefix on the function name in its definition as well as where the function is called in `main`.\n\nRaw identifiers allow you to use any word you choose as an identifier, even if that word happens to be a reserved keyword. This gives us more freedom to choose identifier names, as well as lets us integrate with programs written in a language where these words aren‚Äôt keywords. In addition, raw identifiers allow you to use libraries written in a different Rust edition than your crate uses. For example, `try` isn‚Äôt a keyword in the 2015 edition but is in the 2018 edition. If you depend on a library that‚Äôs written using the 2015 edition and has a `try` function, you‚Äôll need to use the raw identifier syntax, `r#try` in this case, to call that function from your 2018 edition code. See [Appendix E](appendix-05-editions.html) for more information on editions.\n\n## [Appendix B: Operators and Symbols](#appendix-b-operators-and-symbols)\n\nThis appendix contains a glossary of Rust‚Äôs syntax, including operators and other symbols that appear by themselves or in the context of paths, generics, trait bounds, macros, attributes, comments, tuples, and brackets.\n\n### [Operators](#operators)\n\nTable B-1 contains the operators in Rust, an example of how the operator would appear in context, a short explanation, and whether that operator is overloadable. If an operator is overloadable, the relevant trait to use to overload that operator is listed.\n\nTable B-1: Operators\n\n| Operator | Example | Explanation | Overloadable? |\n| --- | --- | --- | --- |\n| `!` | `ident!(...)`, `ident!{...}`, `ident![...]` | Macro expansion |  |\n| `!` | `!expr` | Bitwise or logical complement | `Not` |\n| `!=` | `expr != expr` | Nonequality comparison | `PartialEq` |\n| `%` | `expr % expr` | Arithmetic remainder | `Rem` |\n| `%=` | `var %= expr` | Arithmetic remainder and assignment | `RemAssign` |\n| `&` | `&expr`, `&mut expr` | Borrow |  |\n| `&` | `&type`, `&mut type`, `&'a type`, `&'a mut type` | Borrowed pointer type |  |\n| `&` | `expr & expr` | Bitwise AND | `BitAnd` |\n| `&=` | `var &= expr` | Bitwise AND and assignment | `BitAndAssign` |\n| `&&` | `expr && expr` | Short-circuiting logical AND |  |\n| `*` | `expr * expr` | Arithmetic multiplication | `Mul` |\n| `*=` | `var *= expr` | Arithmetic multiplication and assignment | `MulAssign` |\n| `*` | `*expr` | Dereference | `Deref` |\n| `*` | `*const type`, `*mut type` | Raw pointer |  |\n| `+` | `trait + trait`, `'a + trait` | Compound type constraint |  |\n| `+` | `expr + expr` | Arithmetic addition | `Add` |\n| `+=` | `var += expr` | Arithmetic addition and assignment | `AddAssign` |\n| `,` | `expr, expr` | Argument and element separator |  |\n| `-` | `- expr` | Arithmetic negation | `Neg` |\n| `-` | `expr - expr` | Arithmetic subtraction | `Sub` |\n| `-=` | `var -= expr` | Arithmetic subtraction and assignment | `SubAssign` |\n| `->` | `fn(...) -> type`, `|‚Ä¶| -> type` | Function and closure return type |  |\n| `.` | `expr.ident` | Member access |  |\n| `..` | `..`, `expr..`, `..expr`, `expr..expr` | Right-exclusive range literal | `PartialOrd` |\n| `..=` | `..=expr`, `expr..=expr` | Right-inclusive range literal | `PartialOrd` |\n| `..` | `..expr` | Struct literal update syntax |  |\n| `..` | `variant(x, ..)`, `struct_type { x, .. }` | ‚ÄúAnd the rest‚Äù pattern binding |  |\n| `...` | `expr...expr` | (Deprecated, use `..=` instead) In a pattern: inclusive range pattern |  |\n| `/` | `expr / expr` | Arithmetic division | `Div` |\n| `/=` | `var /= expr` | Arithmetic division and assignment | `DivAssign` |\n| `:` | `pat: type`, `ident: type` | Constraints |  |\n| `:` | `ident: expr` | Struct field initializer |  |\n| `:` | `'a: loop {...}` | Loop label |  |\n| `;` | `expr;` | Statement and item terminator |  |\n| `;` | `[...; len]` | Part of fixed-size array syntax |  |\n| `<<` | `expr << expr` | Left-shift | `Shl` |\n| `<<=` | `var <<= expr` | Left-shift and assignment | `ShlAssign` |\n| `<` | `expr < expr` | Less than comparison | `PartialOrd` |\n| `<=` | `expr <= expr` | Less than or equal to comparison | `PartialOrd` |\n| `=` | `var = expr`, `ident = type` | Assignment/equivalence |  |\n| `==` | `expr == expr` | Equality comparison | `PartialEq` |\n| `=>` | `pat => expr` | Part of match arm syntax |  |\n| `>` | `expr > expr` | Greater than comparison | `PartialOrd` |\n| `>=` | `expr >= expr` | Greater than or equal to comparison | `PartialOrd` |\n| `>>` | `expr >> expr` | Right-shift | `Shr` |\n| `>>=` | `var >>= expr` | Right-shift and assignment | `ShrAssign` |\n| `@` | `ident @ pat` | Pattern binding |  |\n| `^` | `expr ^ expr` | Bitwise exclusive OR | `BitXor` |\n| `^=` | `var ^= expr` | Bitwise exclusive OR and assignment | `BitXorAssign` |\n| `|` | `pat | pat` | Pattern alternatives |  |\n| `|` | `expr | expr` | Bitwise OR | `BitOr` |\n| `|=` | `var |= expr` | Bitwise OR and assignment | `BitOrAssign` |\n| `||` | `expr || expr` | Short-circuiting logical OR |  |\n| `?` | `expr?` | Error propagation |  |\n\n### [Non-operator Symbols](#non-operator-symbols)\n\nThe following list contains all symbols that don‚Äôt function as operators; that is, they don‚Äôt behave like a function or method call.\n\nTable B-2 shows symbols that appear on their own and are valid in a variety of locations.\n\nTable B-2: Stand-Alone Syntax\n\n| Symbol | Explanation |\n| --- | --- |\n| `'ident` | Named lifetime or loop label |\n| `...u8`, `...i32`, `...f64`, `...usize`, etc. | Numeric literal of specific type |\n| `\"...\"` | String literal |\n| `r\"...\"`, `r#\"...\"#`, `r##\"...\"##`, etc. | Raw string literal, escape characters not processed |\n| `b\"...\"` | Byte string literal; constructs an array of bytes instead of a string |\n| `br\"...\"`, `br#\"...\"#`, `br##\"...\"##`, etc. | Raw byte string literal, combination of raw and byte string literal |\n| `'...'` | Character literal |\n| `b'...'` | ASCII byte literal |\n| `|‚Ä¶| expr` | Closure |\n| `!` | Always empty bottom type for diverging functions |\n| `_` | ‚ÄúIgnored‚Äù pattern binding; also used to make integer literals readable |\n\nTable B-3 shows symbols that appear in the context of a path through the module hierarchy to an item.\n\nTable B-3: Path-Related Syntax\n\n| Symbol | Explanation |\n| --- | --- |\n| `ident::ident` | Namespace path |\n| `::path` | Path relative to the crate root (i.e., an explicitly absolute path) |\n| `self::path` | Path relative to the current module (i.e., an explicitly relative path). |\n| `super::path` | Path relative to the parent of the current module |\n| `type::ident`, `<type as trait>::ident` | Associated constants, functions, and types |\n| `<type>::...` | Associated item for a type that cannot be directly named (e.g., `<&T>::...`, `<[T]>::...`, etc.) |\n| `trait::method(...)` | Disambiguating a method call by naming the trait that defines it |\n| `type::method(...)` | Disambiguating a method call by naming the type for which it‚Äôs defined |\n| `<type as trait>::method(...)` | Disambiguating a method call by naming the trait and type |\n\nTable B-4 shows symbols that appear in the context of using generic type parameters.\n\nTable B-4: Generics\n\n| Symbol | Explanation |\n| --- | --- |\n| `path<...>` | Specifies parameters to generic type in a type (e.g., `Vec<u8>`) |\n| `path::<...>`, `method::<...>` | Specifies parameters to generic type, function, or method in an expression; often referred to as turbofish (e.g., `\"42\".parse::<i32>()`) |\n| `fn ident<...> ...` | Define generic function |\n| `struct ident<...> ...` | Define generic structure |\n| `enum ident<...> ...` | Define generic enumeration |\n| `impl<...> ...` | Define generic implementation |\n| `for<...> type` | Higher-ranked lifetime bounds |\n| `type<ident=type>` | A generic type where one or more associated types have specific assignments (e.g., `Iterator<Item=T>`) |\n\nTable B-5 shows symbols that appear in the context of constraining generic type parameters with trait bounds.\n\nTable B-5: Trait Bound Constraints\n\n| Symbol | Explanation |\n| --- | --- |\n| `T: U` | Generic parameter `T` constrained to types that implement `U` |\n| `T: 'a` | Generic type `T` must outlive lifetime `'a` (meaning the type cannot transitively contain any references with lifetimes shorter than `'a`) |\n| `T: 'static` | Generic type `T` contains no borrowed references other than `'static` ones |\n| `'b: 'a` | Generic lifetime `'b` must outlive lifetime `'a` |\n| `T: ?Sized` | Allow generic type parameter to be a dynamically sized type |\n| `'a + trait`, `trait + trait` | Compound type constraint |\n\nTable B-6 shows symbols that appear in the context of calling or defining macros and specifying attributes on an item.\n\nTable B-6: Macros and Attributes\n\n| Symbol | Explanation |\n| --- | --- |\n| `#[meta]` | Outer attribute |\n| `#![meta]` | Inner attribute |\n| `$ident` | Macro substitution |\n| `$ident:kind` | Macro capture |\n| `$(‚Ä¶)‚Ä¶` | Macro repetition |\n| `ident!(...)`, `ident!{...}`, `ident![...]` | Macro invocation |\n\nTable B-7 shows symbols that create comments.\n\nTable B-7: Comments\n\n| Symbol | Explanation |\n| --- | --- |\n| `//` | Line comment |\n| `//!` | Inner line doc comment |\n| `///` | Outer line doc comment |\n| `/*...*/` | Block comment |\n| `/*!...*/` | Inner block doc comment |\n| `/**...*/` | Outer block doc comment |\n\nTable B-8 shows symbols that appear in the context of using tuples.\n\nTable B-8: Tuples\n\n| Symbol | Explanation |\n| --- | --- |\n| `()` | Empty tuple (aka unit), both literal and type |\n| `(expr)` | Parenthesized expression |\n| `(expr,)` | Single-element tuple expression |\n| `(type,)` | Single-element tuple type |\n| `(expr, ...)` | Tuple expression |\n| `(type, ...)` | Tuple type |\n| `expr(expr, ...)` | Function call expression; also used to initialize tuple `struct`s and tuple `enum` variants |\n| `expr.0`, `expr.1`, etc. | Tuple indexing |\n\nTable B-9 shows the contexts in which curly braces are used.\n\nTable B-9: Curly Brackets\n\n| Context | Explanation |\n| --- | --- |\n| `{...}` | Block expression |\n| `Type {...}` | `struct` literal |\n\nTable B-10 shows the contexts in which square brackets are used.\n\nTable B-10: Square Brackets\n\n| Context | Explanation |\n| --- | --- |\n| `[...]` | Array literal |\n| `[expr; len]` | Array literal containing `len` copies of `expr` |\n| `[type; len]` | Array type containing `len` instances of `type` |\n| `expr[expr]` | Collection indexing. Overloadable (`Index`, `IndexMut`) |\n| `expr[..]`, `expr[a..]`, `expr[..b]`, `expr[a..b]` | Collection indexing pretending to be collection slicing, using `Range`, `RangeFrom`, `RangeTo`, or `RangeFull` as the ‚Äúindex‚Äù |\n\n## [Appendix C: Derivable Traits](#appendix-c-derivable-traits)\n\nIn various places in the book, we‚Äôve discussed the `derive` attribute, which you can apply to a struct or enum definition. The `derive` attribute generates code that will implement a trait with its own default implementation on the type you‚Äôve annotated with the `derive` syntax.\n\nIn this appendix, we provide a reference of all the traits in the standard library that you can use with `derive`. Each section covers:\n\n-   What operators and methods deriving this trait will enable\n-   What the implementation of the trait provided by `derive` does\n-   What implementing the trait signifies about the type\n-   The conditions in which you‚Äôre allowed or not allowed to implement the trait\n-   Examples of operations that require the trait\n\nIf you want different behavior from that provided by the `derive` attribute, consult the [standard library documentation](../std/index.html) for each trait for details of how to manually implement them.\n\nThese traits listed here are the only ones defined by the standard library that can be implemented on your types using `derive`. Other traits defined in the standard library don‚Äôt have sensible default behavior, so it‚Äôs up to you to implement them in the way that makes sense for what you‚Äôre trying to accomplish.\n\nAn example of a trait that can‚Äôt be derived is `Display`, which handles formatting for end users. You should always consider the appropriate way to display a type to an end user. What parts of the type should an end user be allowed to see? What parts would they find relevant? What format of the data would be most relevant to them? The Rust compiler doesn‚Äôt have this insight, so it can‚Äôt provide appropriate default behavior for you.\n\nThe list of derivable traits provided in this appendix is not comprehensive: libraries can implement `derive` for their own traits, making the list of traits you can use `derive` with truly open-ended. Implementing `derive` involves using a procedural macro, which is covered in the [‚ÄúMacros‚Äù](about:blank/ch19-06-macros.html#macros) section of Chapter 19.\n\n### [`Debug` for Programmer Output](#debug-for-programmer-output)\n\nThe `Debug` trait enables debug formatting in format strings, which you indicate by adding `:?` within `{}` placeholders.\n\nThe `Debug` trait allows you to print instances of a type for debugging purposes, so you and other programmers using your type can inspect an instance at a particular point in a program‚Äôs execution.\n\nThe `Debug` trait is required, for example, in using the `assert_eq!` macro. This macro prints the values of instances given as arguments if the equality assertion fails so programmers can see why the two instances weren‚Äôt equal.\n\n### [`PartialEq` and `Eq` for Equality Comparisons](#partialeq-and-eq-for-equality-comparisons)\n\nThe `PartialEq` trait allows you to compare instances of a type to check for equality and enables use of the `==` and `!=` operators.\n\nDeriving `PartialEq` implements the `eq` method. When `PartialEq` is derived on structs, two instances are equal only if _all_ fields are equal, and the instances are not equal if any fields are not equal. When derived on enums, each variant is equal to itself and not equal to the other variants.\n\nThe `PartialEq` trait is required, for example, with the use of the `assert_eq!` macro, which needs to be able to compare two instances of a type for equality.\n\nThe `Eq` trait has no methods. Its purpose is to signal that for every value of the annotated type, the value is equal to itself. The `Eq` trait can only be applied to types that also implement `PartialEq`, although not all types that implement `PartialEq` can implement `Eq`. One example of this is floating point number types: the implementation of floating point numbers states that two instances of the not-a-number (`NaN`) value are not equal to each other.\n\nAn example of when `Eq` is required is for keys in a `HashMap<K, V>` so the `HashMap<K, V>` can tell whether two keys are the same.\n\n### [`PartialOrd` and `Ord` for Ordering Comparisons](#partialord-and-ord-for-ordering-comparisons)\n\nThe `PartialOrd` trait allows you to compare instances of a type for sorting purposes. A type that implements `PartialOrd` can be used with the `<`, `>`, `<=`, and `>=` operators. You can only apply the `PartialOrd` trait to types that also implement `PartialEq`.\n\nDeriving `PartialOrd` implements the `partial_cmp` method, which returns an `Option<Ordering>` that will be `None` when the values given don‚Äôt produce an ordering. An example of a value that doesn‚Äôt produce an ordering, even though most values of that type can be compared, is the not-a-number (`NaN`) floating point value. Calling `partial_cmp` with any floating point number and the `NaN` floating point value will return `None`.\n\nWhen derived on structs, `PartialOrd` compares two instances by comparing the value in each field in the order in which the fields appear in the struct definition. When derived on enums, variants of the enum declared earlier in the enum definition are considered less than the variants listed later.\n\nThe `PartialOrd` trait is required, for example, for the `gen_range` method from the `rand` crate that generates a random value in the range specified by a range expression.\n\nThe `Ord` trait allows you to know that for any two values of the annotated type, a valid ordering will exist. The `Ord` trait implements the `cmp` method, which returns an `Ordering` rather than an `Option<Ordering>` because a valid ordering will always be possible. You can only apply the `Ord` trait to types that also implement `PartialOrd` and `Eq` (and `Eq` requires `PartialEq`). When derived on structs and enums, `cmp` behaves the same way as the derived implementation for `partial_cmp` does with `PartialOrd`.\n\nAn example of when `Ord` is required is when storing values in a `BTreeSet<T>`, a data structure that stores data based on the sort order of the values.\n\n### [`Clone` and `Copy` for Duplicating Values](#clone-and-copy-for-duplicating-values)\n\nThe `Clone` trait allows you to explicitly create a deep copy of a value, and the duplication process might involve running arbitrary code and copying heap data. See the [‚ÄúWays Variables and Data Interact: Clone‚Äù](about:blank/ch04-01-what-is-ownership.html#ways-variables-and-data-interact-clone) section in Chapter 4 for more information on `Clone`.\n\nDeriving `Clone` implements the `clone` method, which when implemented for the whole type, calls `clone` on each of the parts of the type. This means all the fields or values in the type must also implement `Clone` to derive `Clone`.\n\nAn example of when `Clone` is required is when calling the `to_vec` method on a slice. The slice doesn‚Äôt own the type instances it contains, but the vector returned from `to_vec` will need to own its instances, so `to_vec` calls `clone` on each item. Thus, the type stored in the slice must implement `Clone`.\n\nThe `Copy` trait allows you to duplicate a value by only copying bits stored on the stack; no arbitrary code is necessary. See the [‚ÄúStack-Only Data: Copy‚Äù](about:blank/ch04-01-what-is-ownership.html#stack-only-data-copy) section in Chapter 4 for more information on `Copy`.\n\nThe `Copy` trait doesn‚Äôt define any methods to prevent programmers from overloading those methods and violating the assumption that no arbitrary code is being run. That way, all programmers can assume that copying a value will be very fast.\n\nYou can derive `Copy` on any type whose parts all implement `Copy`. A type that implements `Copy` must also implement `Clone`, because a type that implements `Copy` has a trivial implementation of `Clone` that performs the same task as `Copy`.\n\nThe `Copy` trait is rarely required; types that implement `Copy` have optimizations available, meaning you don‚Äôt have to call `clone`, which makes the code more concise.\n\nEverything possible with `Copy` you can also accomplish with `Clone`, but the code might be slower or have to use `clone` in places.\n\n### [`Hash` for Mapping a Value to a Value of Fixed Size](#hash-for-mapping-a-value-to-a-value-of-fixed-size)\n\nThe `Hash` trait allows you to take an instance of a type of arbitrary size and map that instance to a value of fixed size using a hash function. Deriving `Hash` implements the `hash` method. The derived implementation of the `hash` method combines the result of calling `hash` on each of the parts of the type, meaning all fields or values must also implement `Hash` to derive `Hash`.\n\nAn example of when `Hash` is required is in storing keys in a `HashMap<K, V>` to store data efficiently.\n\n### [`Default` for Default Values](#default-for-default-values)\n\nThe `Default` trait allows you to create a default value for a type. Deriving `Default` implements the `default` function. The derived implementation of the `default` function calls the `default` function on each part of the type, meaning all fields or values in the type must also implement `Default` to derive `Default`.\n\nThe `Default::default` function is commonly used in combination with the struct update syntax discussed in the [‚ÄúCreating Instances From Other Instances With Struct Update Syntax‚Äù](about:blank/ch05-01-defining-structs.html#creating-instances-from-other-instances-with-struct-update-syntax) section in Chapter 5. You can customize a few fields of a struct and then set and use a default value for the rest of the fields by using `..Default::default()`.\n\nThe `Default` trait is required when you use the method `unwrap_or_default` on `Option<T>` instances, for example. If the `Option<T>` is `None`, the method `unwrap_or_default` will return the result of `Default::default` for the type `T` stored in the `Option<T>`.\n\nIn this appendix, we talk about some useful development tools that the Rust project provides. We‚Äôll look at automatic formatting, quick ways to apply warning fixes, a linter, and integrating with IDEs.\n\n### [Automatic Formatting with `rustfmt`](#automatic-formatting-with-rustfmt)\n\nThe `rustfmt` tool reformats your code according to the community code style. Many collaborative projects use `rustfmt` to prevent arguments about which style to use when writing Rust: everyone formats their code using the tool.\n\nTo install `rustfmt`, enter the following:\n\n```console\n$ rustup component add rustfmt\n\n```\n\nThis command gives you `rustfmt` and `cargo-fmt`, similar to how Rust gives you both `rustc` and `cargo`. To format any Cargo project, enter the following:\n\n```console\n$ cargo fmt\n\n```\n\nRunning this command reformats all the Rust code in the current crate. This should only change the code style, not the code semantics. For more information on `rustfmt`, see [its documentation](https://github.com/rust-lang/rustfmt).\n\n### [Fix Your Code with `rustfix`](#fix-your-code-with-rustfix)\n\nThe rustfix tool is included with Rust installations and can automatically fix compiler warnings that have a clear way to correct the problem that‚Äôs likely what you want. It‚Äôs likely you‚Äôve seen compiler warnings before. For example, consider this code:\n\nFilename: src/main.rs\n\n```rust\nfn do_something() {}\n\nfn main() {\n    for i in 0..100 {\n        do_something();\n    }\n}\n```\n\nHere, we‚Äôre calling the `do_something` function 100 times, but we never use the variable `i` in the body of the `for` loop. Rust warns us about that:\n\n```console\n$ cargo build\n   Compiling myprogram v0.1.0 (file:///projects/myprogram)\nwarning: unused variable: `i`\n --> src/main.rs:4:9\n  |\n4 |     for i in 0..100 {\n  |         ^ help: consider using `_i` instead\n  |\n  = note: #[warn(unused_variables)] on by default\n\n    Finished dev [unoptimized + debuginfo] target(s) in 0.50s\n\n```\n\nThe warning suggests that we use `_i` as a name instead: the underscore indicates that we intend for this variable to be unused. We can automatically apply that suggestion using the `rustfix` tool by running the command `cargo fix`:\n\n```console\n$ cargo fix\n    Checking myprogram v0.1.0 (file:///projects/myprogram)\n      Fixing src/main.rs (1 fix)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.59s\n\n```\n\nWhen we look at _src/main.rs_ again, we‚Äôll see that `cargo fix` has changed the code:\n\nFilename: src/main.rs\n\n```rust\nfn do_something() {}\n\nfn main() {\n    for _i in 0..100 {\n        do_something();\n    }\n}\n```\n\nThe `for` loop variable is now named `_i`, and the warning no longer appears.\n\nYou can also use the `cargo fix` command to transition your code between different Rust editions. Editions are covered in [Appendix E](appendix-05-editions.html).\n\n### [More Lints with Clippy](#more-lints-with-clippy)\n\nThe Clippy tool is a collection of lints to analyze your code so you can catch common mistakes and improve your Rust code.\n\nTo install Clippy, enter the following:\n\n```console\n$ rustup component add clippy\n\n```\n\nTo run Clippy‚Äôs lints on any Cargo project, enter the following:\n\n```console\n$ cargo clippy\n\n```\n\nFor example, say you write a program that uses an approximation of a mathematical constant, such as pi, as this program does:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let x = 3.1415;\n    let r = 8.0;\n    println!(\"the area of the circle is {}\", x * r * r);\n}\n```\n\nRunning `cargo clippy` on this project results in this error:\n\n```text\nerror: approximate value of `f{32, 64}::consts::PI` found\n --> src/main.rs:2:13\n  |\n2 |     let x = 3.1415;\n  |             ^^^^^^\n  |\n  = note: `#[deny(clippy::approx_constant)]` on by default\n  = help: consider using the constant directly\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#approx_constant\n\n```\n\nThis error lets you know that Rust already has a more precise `PI` constant defined, and that your program would be more correct if you used the constant instead. You would then change your code to use the `PI` constant. The following code doesn‚Äôt result in any errors or warnings from Clippy:\n\nFilename: src/main.rs\n\n```rust\nfn main() {\n    let x = std::f64::consts::PI;\n    let r = 8.0;\n    println!(\"the area of the circle is {}\", x * r * r);\n}\n```\n\nFor more information on Clippy, see [its documentation](https://github.com/rust-lang/rust-clippy).\n\n### [IDE Integration Using `rust-analyzer`](#ide-integration-using-rust-analyzer)\n\nTo help IDE integration, the Rust community recommends using [`rust-analyzer`](https://rust-analyzer.github.io/). This tool is a set of compiler-centric utilities that speaks the [Language Server Protocol](http://langserver.org/), which is a specification for IDEs and programming languages to communicate with each other. Different clients can use `rust-analyzer`, such as [the Rust analyzer plug-in for Visual Studio Code](https://marketplace.visualstudio.com/items?itemName=rust-lang.rust-analyzer).\n\nVisit the `rust-analyzer` project‚Äôs [home page](https://rust-analyzer.github.io/) for installation instructions, then install the language server support in your particular IDE. Your IDE will gain abilities such as autocompletion, jump to definition, and inline errors.\n\n## [Appendix E - Editions](#appendix-e---editions)\n\nIn Chapter 1, you saw that `cargo new` adds a bit of metadata to your _Cargo.toml_ file about an edition. This appendix talks about what that means!\n\nThe Rust language and compiler have a six-week release cycle, meaning users get a constant stream of new features. Other programming languages release larger changes less often; Rust releases smaller updates more frequently. After a while, all of these tiny changes add up. But from release to release, it can be difficult to look back and say, ‚ÄúWow, between Rust 1.10 and Rust 1.31, Rust has changed a lot!‚Äù\n\nEvery two or three years, the Rust team produces a new Rust _edition_. Each edition brings together the features that have landed into a clear package with fully updated documentation and tooling. New editions ship as part of the usual six-week release process.\n\nEditions serve different purposes for different people:\n\n-   For active Rust users, a new edition brings together incremental changes into an easy-to-understand package.\n-   For non-users, a new edition signals that some major advancements have landed, which might make Rust worth another look.\n-   For those developing Rust, a new edition provides a rallying point for the project as a whole.\n\nAt the time of this writing, three Rust editions are available: Rust 2015, Rust 2018, and Rust 2021. This book is written using Rust 2021 edition idioms.\n\nThe `edition` key in _Cargo.toml_ indicates which edition the compiler should use for your code. If the key doesn‚Äôt exist, Rust uses `2015` as the edition value for backward compatibility reasons.\n\nEach project can opt in to an edition other than the default 2015 edition. Editions can contain incompatible changes, such as including a new keyword that conflicts with identifiers in code. However, unless you opt in to those changes, your code will continue to compile even as you upgrade the Rust compiler version you use.\n\nAll Rust compiler versions support any edition that existed prior to that compiler‚Äôs release, and they can link crates of any supported editions together. Edition changes only affect the way the compiler initially parses code. Therefore, if you‚Äôre using Rust 2015 and one of your dependencies uses Rust 2018, your project will compile and be able to use that dependency. The opposite situation, where your project uses Rust 2018 and a dependency uses Rust 2015, works as well.\n\nTo be clear: most features will be available on all editions. Developers using any Rust edition will continue to see improvements as new stable releases are made. However, in some cases, mainly when new keywords are added, some new features might only be available in later editions. You will need to switch editions if you want to take advantage of such features.\n\nFor more details, the [_Edition Guide_](https://doc.rust-lang.org/stable/edition-guide/) is a complete book about editions that enumerates the differences between editions and explains how to automatically upgrade your code to a new edition via `cargo fix`.\n\n## [Appendix F: Translations of the Book](#appendix-f-translations-of-the-book)\n\nFor resources in languages other than English. Most are still in progress; see [the Translations label](https://github.com/rust-lang/book/issues?q=is%3Aopen+is%3Aissue+label%3ATranslations) to help or let us know about a new translation!\n\n-   [Portugu√™s](https://github.com/rust-br/rust-book-pt-br) (BR)\n-   [Portugu√™s](https://github.com/nunojesus/rust-book-pt-pt) (PT)\n-   [ÁÆÄ‰Ωì‰∏≠Êñá](https://github.com/KaiserY/trpl-zh-cn)\n-   [Ê≠£È´î‰∏≠Êñá](https://github.com/rust-tw/book-tw)\n-   [–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞](https://github.com/pavloslav/rust-book-uk-ua)\n-   [Espa√±ol](https://github.com/thecodix/book), [alternate](https://github.com/ManRR/rust-book-es)\n-   [Italiano](https://github.com/EmanueleGurini/book_it)\n-   [–†—É—Å—Å–∫–∏–π](https://github.com/rust-lang-ru/book)\n-   [ÌïúÍµ≠Ïñ¥](https://github.com/rinthel/rust-lang-book-ko)\n-   [Êó•Êú¨Ë™û](https://github.com/rust-lang-ja/book-ja)\n-   [Fran√ßais](https://github.com/Jimskapt/rust-book-fr)\n-   [Polski](https://github.com/paytchoo/book-pl)\n-   [Cebuano](https://github.com/agentzero1/book)\n-   [Tagalog](https://github.com/josephace135/book)\n-   [Esperanto](https://github.com/psychoslave/Rust-libro)\n-   [ŒµŒªŒªŒ∑ŒΩŒπŒ∫ŒÆ](https://github.com/TChatzigiannakis/rust-book-greek)\n-   [Svenska](https://github.com/sebras/book)\n-   [Farsi](https://github.com/RustFarsi/book)\n-   [Deutsch](https://github.com/rust-lang-de/rustbook-de)\n-   [‡§π‡§ø‡§Ç‡§¶‡•Ä](https://github.com/venkatarun95/rust-book-hindi)\n-   [‡πÑ‡∏ó‡∏¢](https://github.com/rust-lang-th/book-th)\n-   [Danske](https://github.com/DanKHansen/book-dk)\n\n## [Appendix G - How Rust is Made and ‚ÄúNightly Rust‚Äù](#appendix-g---how-rust-is-made-and-nightly-rust)\n\nThis appendix is about how Rust is made and how that affects you as a Rust developer.\n\n### [Stability Without Stagnation](#stability-without-stagnation)\n\nAs a language, Rust cares a _lot_ about the stability of your code. We want Rust to be a rock-solid foundation you can build on, and if things were constantly changing, that would be impossible. At the same time, if we can‚Äôt experiment with new features, we may not find out important flaws until after their release, when we can no longer change things.\n\nOur solution to this problem is what we call ‚Äústability without stagnation‚Äù, and our guiding principle is this: you should never have to fear upgrading to a new version of stable Rust. Each upgrade should be painless, but should also bring you new features, fewer bugs, and faster compile times.\n\n### [Choo, Choo! Release Channels and Riding the Trains](#choo-choo-release-channels-and-riding-the-trains)\n\nRust development operates on a _train schedule_. That is, all development is done on the `master` branch of the Rust repository. Releases follow a software release train model, which has been used by Cisco IOS and other software projects. There are three _release channels_ for Rust:\n\n-   Nightly\n-   Beta\n-   Stable\n\nMost Rust developers primarily use the stable channel, but those who want to try out experimental new features may use nightly or beta.\n\nHere‚Äôs an example of how the development and release process works: let‚Äôs assume that the Rust team is working on the release of Rust 1.5. That release happened in December of 2015, but it will provide us with realistic version numbers. A new feature is added to Rust: a new commit lands on the `master` branch. Each night, a new nightly version of Rust is produced. Every day is a release day, and these releases are created by our release infrastructure automatically. So as time passes, our releases look like this, once a night:\n\n```text\nnightly: * - - * - - *\n\n```\n\nEvery six weeks, it‚Äôs time to prepare a new release! The `beta` branch of the Rust repository branches off from the `master` branch used by nightly. Now, there are two releases:\n\n```text\nnightly: * - - * - - *\n                     |\nbeta:                *\n\n```\n\nMost Rust users do not use beta releases actively, but test against beta in their CI system to help Rust discover possible regressions. In the meantime, there‚Äôs still a nightly release every night:\n\n```text\nnightly: * - - * - - * - - * - - *\n                     |\nbeta:                *\n\n```\n\nLet‚Äôs say a regression is found. Good thing we had some time to test the beta release before the regression snuck into a stable release! The fix is applied to `master`, so that nightly is fixed, and then the fix is backported to the `beta` branch, and a new release of beta is produced:\n\n```text\nnightly: * - - * - - * - - * - - * - - *\n                     |\nbeta:                * - - - - - - - - *\n\n```\n\nSix weeks after the first beta was created, it‚Äôs time for a stable release! The `stable` branch is produced from the `beta` branch:\n\n```text\nnightly: * - - * - - * - - * - - * - - * - * - *\n                     |\nbeta:                * - - - - - - - - *\n                                       |\nstable:                                *\n\n```\n\nHooray! Rust 1.5 is done! However, we‚Äôve forgotten one thing: because the six weeks have gone by, we also need a new beta of the _next_ version of Rust, 1.6. So after `stable` branches off of `beta`, the next version of `beta` branches off of `nightly` again:\n\n```text\nnightly: * - - * - - * - - * - - * - - * - * - *\n                     |                         |\nbeta:                * - - - - - - - - *       *\n                                       |\nstable:                                *\n\n```\n\nThis is called the ‚Äútrain model‚Äù because every six weeks, a release ‚Äúleaves the station‚Äù, but still has to take a journey through the beta channel before it arrives as a stable release.\n\nRust releases every six weeks, like clockwork. If you know the date of one Rust release, you can know the date of the next one: it‚Äôs six weeks later. A nice aspect of having releases scheduled every six weeks is that the next train is coming soon. If a feature happens to miss a particular release, there‚Äôs no need to worry: another one is happening in a short time! This helps reduce pressure to sneak possibly unpolished features in close to the release deadline.\n\nThanks to this process, you can always check out the next build of Rust and verify for yourself that it‚Äôs easy to upgrade to: if a beta release doesn‚Äôt work as expected, you can report it to the team and get it fixed before the next stable release happens! Breakage in a beta release is relatively rare, but `rustc` is still a piece of software, and bugs do exist.\n\n### [Maintenance time](#maintenance-time)\n\nThe Rust project supports the most recent stable version. When a new stable version is released, the old version reaches its end of life (EOL). This means each version is supported for six weeks.\n\n### [Unstable Features](#unstable-features)\n\nThere‚Äôs one more catch with this release model: unstable features. Rust uses a technique called ‚Äúfeature flags‚Äù to determine what features are enabled in a given release. If a new feature is under active development, it lands on `master`, and therefore, in nightly, but behind a _feature flag_. If you, as a user, wish to try out the work-in-progress feature, you can, but you must be using a nightly release of Rust and annotate your source code with the appropriate flag to opt in.\n\nIf you‚Äôre using a beta or stable release of Rust, you can‚Äôt use any feature flags. This is the key that allows us to get practical use with new features before we declare them stable forever. Those who wish to opt into the bleeding edge can do so, and those who want a rock-solid experience can stick with stable and know that their code won‚Äôt break. Stability without stagnation.\n\nThis book only contains information about stable features, as in-progress features are still changing, and surely they‚Äôll be different between when this book was written and when they get enabled in stable builds. You can find documentation for nightly-only features online.\n\n### [Rustup and the Role of Rust Nightly](#rustup-and-the-role-of-rust-nightly)\n\nRustup makes it easy to change between different release channels of Rust, on a global or per-project basis. By default, you‚Äôll have stable Rust installed. To install nightly, for example:\n\n```console\n$ rustup toolchain install nightly\n\n```\n\nYou can see all of the _toolchains_ (releases of Rust and associated components) you have installed with `rustup` as well. Here‚Äôs an example on one of your authors‚Äô Windows computer:\n\n```powershell\n> rustup toolchain list\nstable-x86_64-pc-windows-msvc (default)\nbeta-x86_64-pc-windows-msvc\nnightly-x86_64-pc-windows-msvc\n\n```\n\nAs you can see, the stable toolchain is the default. Most Rust users use stable most of the time. You might want to use stable most of the time, but use nightly on a specific project, because you care about a cutting-edge feature. To do so, you can use `rustup override` in that project‚Äôs directory to set the nightly toolchain as the one `rustup` should use when you‚Äôre in that directory:\n\n```console\n$ cd ~/projects/needs-nightly\n$ rustup override set nightly\n\n```\n\nNow, every time you call `rustc` or `cargo` inside of _~/projects/needs-nightly_, `rustup` will make sure that you are using nightly Rust, rather than your default of stable Rust. This comes in handy when you have a lot of Rust projects!\n\n### [The RFC Process and Teams](#the-rfc-process-and-teams)\n\nSo how do you learn about these new features? Rust‚Äôs development model follows a _Request For Comments (RFC) process_. If you‚Äôd like an improvement in Rust, you can write up a proposal, called an RFC.\n\nAnyone can write RFCs to improve Rust, and the proposals are reviewed and discussed by the Rust team, which is comprised of many topic subteams. There‚Äôs a full list of the teams [on Rust‚Äôs website](https://www.rust-lang.org/governance), which includes teams for each area of the project: language design, compiler implementation, infrastructure, documentation, and more. The appropriate team reads the proposal and the comments, writes some comments of their own, and eventually, there‚Äôs consensus to accept or reject the feature.\n\nIf the feature is accepted, an issue is opened on the Rust repository, and someone can implement it. The person who implements it very well may not be the person who proposed the feature in the first place! When the implementation is ready, it lands on the `master` branch behind a feature gate, as we discussed in the [‚ÄúUnstable Features‚Äù](about:blank/appendix-07-nightly-rust.html#unstable-features) section.\n\nAfter some time, once Rust developers who use nightly releases have been able to try out the new feature, team members will discuss the feature, how it‚Äôs worked out on nightly, and decide if it should make it into stable Rust or not. If the decision is to move forward, the feature gate is removed, and the feature is now considered stable! It rides the trains into a new stable release of Rust.",
	"html": "<!DOCTYPE html><html lang=\"en\" class=\"light\" dir=\"ltr\"><head>\n        <!-- Book generated using mdBook -->\n        <meta charset=\"UTF-8\">\n        <title>The Rust Programming Language</title>\n        <meta name=\"robots\" content=\"noindex\">\n\n\n        <!-- Custom HTML head -->\n        \n        <meta name=\"description\" content=\"\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <meta name=\"theme-color\" content=\"rgb(255, 255, 255)\">\n\n        <link rel=\"icon\" href=\"favicon.svg\">\n        <link rel=\"shortcut icon\" href=\"favicon.png\">\n        <link rel=\"stylesheet\" href=\"css/variables.css\">\n        <link rel=\"stylesheet\" href=\"css/general.css\">\n        <link rel=\"stylesheet\" href=\"css/chrome.css\">\n        <link rel=\"stylesheet\" href=\"css/print.css\" media=\"print\">\n\n        <!-- Fonts -->\n        <link rel=\"stylesheet\" href=\"FontAwesome/css/font-awesome.css\">\n        <link rel=\"stylesheet\" href=\"fonts/fonts.css\">\n\n        <!-- Highlight.js Stylesheets -->\n        <link rel=\"stylesheet\" href=\"highlight.css\">\n        <link rel=\"stylesheet\" href=\"tomorrow-night.css\" disabled=\"\">\n        <link rel=\"stylesheet\" href=\"ayu-highlight.css\" disabled=\"\">\n\n        <!-- Custom theme stylesheets -->\n        <link rel=\"stylesheet\" href=\"ferris.css\">\n        <link rel=\"stylesheet\" href=\"theme/2018-edition.css\">\n        <link rel=\"stylesheet\" href=\"theme/semantic-notes.css\">\n        <link rel=\"stylesheet\" href=\"theme/listing.css\">\n\n    </head>\n    <body class=\"js sidebar-visible\">\n    <div id=\"body-container\">\n        <!-- Provide site root to javascript -->\n        <script>\n            var path_to_root = \"\";\n            var default_theme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"navy\" : \"light\";\n        </script>\n\n        <!-- Work around some values being stored in localStorage wrapped in quotes -->\n        <script>\n            try {\n                var theme = localStorage.getItem('mdbook-theme');\n                var sidebar = localStorage.getItem('mdbook-sidebar');\n\n                if (theme.startsWith('\"') && theme.endsWith('\"')) {\n                    localStorage.setItem('mdbook-theme', theme.slice(1, theme.length - 1));\n                }\n\n                if (sidebar.startsWith('\"') && sidebar.endsWith('\"')) {\n                    localStorage.setItem('mdbook-sidebar', sidebar.slice(1, sidebar.length - 1));\n                }\n            } catch (e) { }\n        </script>\n\n        <!-- Set the theme before any content is loaded, prevents flash -->\n        <script>\n            var theme;\n            try { theme = localStorage.getItem('mdbook-theme'); } catch(e) { }\n            if (theme === null || theme === undefined) { theme = default_theme; }\n            var html = document.querySelector('html');\n            html.classList.remove('light')\n            html.classList.add(theme);\n            var body = document.querySelector('body');\n            body.classList.remove('no-js')\n            body.classList.add('js');\n        </script>\n\n        <input type=\"checkbox\" id=\"sidebar-toggle-anchor\" class=\"hidden\">\n\n        <!-- Hide / unhide sidebar before it is displayed -->\n        <script>\n            var body = document.querySelector('body');\n            var sidebar = null;\n            var sidebar_toggle = document.getElementById(\"sidebar-toggle-anchor\");\n            if (document.body.clientWidth >= 1080) {\n                try { sidebar = localStorage.getItem('mdbook-sidebar'); } catch(e) { }\n                sidebar = sidebar || 'visible';\n            } else {\n                sidebar = 'hidden';\n            }\n            sidebar_toggle.checked = sidebar === 'visible';\n            body.classList.remove('sidebar-visible');\n            body.classList.add(\"sidebar-\" + sidebar);\n        </script>\n\n        <nav id=\"sidebar\" class=\"sidebar\" aria-label=\"Table of contents\" aria-hidden=\"false\">\n            <div class=\"sidebar-scrollbox\">\n                <ol class=\"chapter\"><li class=\"chapter-item expanded affix \"><a href=\"title-page.html\" tabindex=\"0\">The Rust Programming Language</a></li><li class=\"chapter-item expanded affix \"><a href=\"foreword.html\" tabindex=\"0\">Foreword</a></li><li class=\"chapter-item expanded affix \"><a href=\"ch00-00-introduction.html\" tabindex=\"0\">Introduction</a></li><li class=\"chapter-item expanded \"><a href=\"ch01-00-getting-started.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.</strong> Getting Started</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch01-01-installation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.1.</strong> Installation</a></li><li class=\"chapter-item expanded \"><a href=\"ch01-02-hello-world.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.2.</strong> Hello, World!</a></li><li class=\"chapter-item expanded \"><a href=\"ch01-03-hello-cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">1.3.</strong> Hello, Cargo!</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch02-00-guessing-game-tutorial.html\" tabindex=\"0\"><strong aria-hidden=\"true\">2.</strong> Programming a Guessing Game</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-00-common-programming-concepts.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.</strong> Common Programming Concepts</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch03-01-variables-and-mutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.1.</strong> Variables and Mutability</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-02-data-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.2.</strong> Data Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-03-how-functions-work.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.3.</strong> Functions</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-04-comments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.4.</strong> Comments</a></li><li class=\"chapter-item expanded \"><a href=\"ch03-05-control-flow.html\" tabindex=\"0\"><strong aria-hidden=\"true\">3.5.</strong> Control Flow</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch04-00-understanding-ownership.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.</strong> Understanding Ownership</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch04-01-what-is-ownership.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.1.</strong> What is Ownership?</a></li><li class=\"chapter-item expanded \"><a href=\"ch04-02-references-and-borrowing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.2.</strong> References and Borrowing</a></li><li class=\"chapter-item expanded \"><a href=\"ch04-03-slices.html\" tabindex=\"0\"><strong aria-hidden=\"true\">4.3.</strong> The Slice Type</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch05-00-structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.</strong> Using Structs to Structure Related Data</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch05-01-defining-structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.1.</strong> Defining and Instantiating Structs</a></li><li class=\"chapter-item expanded \"><a href=\"ch05-02-example-structs.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.2.</strong> An Example Program Using Structs</a></li><li class=\"chapter-item expanded \"><a href=\"ch05-03-method-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">5.3.</strong> Method Syntax</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch06-00-enums.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.</strong> Enums and Pattern Matching</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch06-01-defining-an-enum.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.1.</strong> Defining an Enum</a></li><li class=\"chapter-item expanded \"><a href=\"ch06-02-match.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.2.</strong> The match Control Flow Construct</a></li><li class=\"chapter-item expanded \"><a href=\"ch06-03-if-let.html\" tabindex=\"0\"><strong aria-hidden=\"true\">6.3.</strong> Concise Control Flow with if let</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch07-00-managing-growing-projects-with-packages-crates-and-modules.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.</strong> Managing Growing Projects with Packages, Crates, and Modules</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch07-01-packages-and-crates.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.1.</strong> Packages and Crates</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-02-defining-modules-to-control-scope-and-privacy.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.2.</strong> Defining Modules to Control Scope and Privacy</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.3.</strong> Paths for Referring to an Item in the Module Tree</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-04-bringing-paths-into-scope-with-the-use-keyword.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.4.</strong> Bringing Paths Into Scope with the use Keyword</a></li><li class=\"chapter-item expanded \"><a href=\"ch07-05-separating-modules-into-different-files.html\" tabindex=\"0\"><strong aria-hidden=\"true\">7.5.</strong> Separating Modules into Different Files</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch08-00-common-collections.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.</strong> Common Collections</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch08-01-vectors.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.1.</strong> Storing Lists of Values with Vectors</a></li><li class=\"chapter-item expanded \"><a href=\"ch08-02-strings.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.2.</strong> Storing UTF-8 Encoded Text with Strings</a></li><li class=\"chapter-item expanded \"><a href=\"ch08-03-hash-maps.html\" tabindex=\"0\"><strong aria-hidden=\"true\">8.3.</strong> Storing Keys with Associated Values in Hash Maps</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch09-00-error-handling.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.</strong> Error Handling</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch09-01-unrecoverable-errors-with-panic.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.1.</strong> Unrecoverable Errors with panic!</a></li><li class=\"chapter-item expanded \"><a href=\"ch09-02-recoverable-errors-with-result.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.2.</strong> Recoverable Errors with Result</a></li><li class=\"chapter-item expanded \"><a href=\"ch09-03-to-panic-or-not-to-panic.html\" tabindex=\"0\"><strong aria-hidden=\"true\">9.3.</strong> To panic! or Not to panic!</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch10-00-generics.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.</strong> Generic Types, Traits, and Lifetimes</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch10-01-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.1.</strong> Generic Data Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch10-02-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.2.</strong> Traits: Defining Shared Behavior</a></li><li class=\"chapter-item expanded \"><a href=\"ch10-03-lifetime-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">10.3.</strong> Validating References with Lifetimes</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch11-00-testing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.</strong> Writing Automated Tests</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch11-01-writing-tests.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.1.</strong> How to Write Tests</a></li><li class=\"chapter-item expanded \"><a href=\"ch11-02-running-tests.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.2.</strong> Controlling How Tests Are Run</a></li><li class=\"chapter-item expanded \"><a href=\"ch11-03-test-organization.html\" tabindex=\"0\"><strong aria-hidden=\"true\">11.3.</strong> Test Organization</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch12-00-an-io-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.</strong> An I/O Project: Building a Command Line Program</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch12-01-accepting-command-line-arguments.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.1.</strong> Accepting Command Line Arguments</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-02-reading-a-file.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.2.</strong> Reading a File</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-03-improving-error-handling-and-modularity.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.3.</strong> Refactoring to Improve Modularity and Error Handling</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-04-testing-the-librarys-functionality.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.4.</strong> Developing the Library‚Äôs Functionality with Test Driven Development</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-05-working-with-environment-variables.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.5.</strong> Working with Environment Variables</a></li><li class=\"chapter-item expanded \"><a href=\"ch12-06-writing-to-stderr-instead-of-stdout.html\" tabindex=\"0\"><strong aria-hidden=\"true\">12.6.</strong> Writing Error Messages to Standard Error Instead of Standard Output</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch13-00-functional-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.</strong> Functional Language Features: Iterators and Closures</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch13-01-closures.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.1.</strong> Closures: Anonymous Functions that Capture Their Environment</a></li><li class=\"chapter-item expanded \"><a href=\"ch13-02-iterators.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.2.</strong> Processing a Series of Items with Iterators</a></li><li class=\"chapter-item expanded \"><a href=\"ch13-03-improving-our-io-project.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.3.</strong> Improving Our I/O Project</a></li><li class=\"chapter-item expanded \"><a href=\"ch13-04-performance.html\" tabindex=\"0\"><strong aria-hidden=\"true\">13.4.</strong> Comparing Performance: Loops vs. Iterators</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch14-00-more-about-cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.</strong> More about Cargo and Crates.io</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch14-01-release-profiles.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.1.</strong> Customizing Builds with Release Profiles</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-02-publishing-to-crates-io.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.2.</strong> Publishing a Crate to Crates.io</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-03-cargo-workspaces.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.3.</strong> Cargo Workspaces</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-04-installing-binaries.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.4.</strong> Installing Binaries from Crates.io with cargo install</a></li><li class=\"chapter-item expanded \"><a href=\"ch14-05-extending-cargo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">14.5.</strong> Extending Cargo with Custom Commands</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch15-00-smart-pointers.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.</strong> Smart Pointers</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch15-01-box.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.1.</strong> Using Box&lt;T&gt; to Point to Data on the Heap</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-02-deref.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.2.</strong> Treating Smart Pointers Like Regular References with the Deref Trait</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-03-drop.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.3.</strong> Running Code on Cleanup with the Drop Trait</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-04-rc.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.4.</strong> Rc&lt;T&gt;, the Reference Counted Smart Pointer</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-05-interior-mutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.5.</strong> RefCell&lt;T&gt; and the Interior Mutability Pattern</a></li><li class=\"chapter-item expanded \"><a href=\"ch15-06-reference-cycles.html\" tabindex=\"0\"><strong aria-hidden=\"true\">15.6.</strong> Reference Cycles Can Leak Memory</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch16-00-concurrency.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.</strong> Fearless Concurrency</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch16-01-threads.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.1.</strong> Using Threads to Run Code Simultaneously</a></li><li class=\"chapter-item expanded \"><a href=\"ch16-02-message-passing.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.2.</strong> Using Message Passing to Transfer Data Between Threads</a></li><li class=\"chapter-item expanded \"><a href=\"ch16-03-shared-state.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.3.</strong> Shared-State Concurrency</a></li><li class=\"chapter-item expanded \"><a href=\"ch16-04-extensible-concurrency-sync-and-send.html\" tabindex=\"0\"><strong aria-hidden=\"true\">16.4.</strong> Extensible Concurrency with the Sync and Send Traits</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch17-00-oop.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.</strong> Object Oriented Programming Features of Rust</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch17-01-what-is-oo.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.1.</strong> Characteristics of Object-Oriented Languages</a></li><li class=\"chapter-item expanded \"><a href=\"ch17-02-trait-objects.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.2.</strong> Using Trait Objects That Allow for Values of Different Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch17-03-oo-design-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">17.3.</strong> Implementing an Object-Oriented Design Pattern</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch18-00-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.</strong> Patterns and Matching</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch18-01-all-the-places-for-patterns.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.1.</strong> All the Places Patterns Can Be Used</a></li><li class=\"chapter-item expanded \"><a href=\"ch18-02-refutability.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.2.</strong> Refutability: Whether a Pattern Might Fail to Match</a></li><li class=\"chapter-item expanded \"><a href=\"ch18-03-pattern-syntax.html\" tabindex=\"0\"><strong aria-hidden=\"true\">18.3.</strong> Pattern Syntax</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch19-00-advanced-features.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.</strong> Advanced Features</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch19-01-unsafe-rust.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.1.</strong> Unsafe Rust</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-03-advanced-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.2.</strong> Advanced Traits</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-04-advanced-types.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.3.</strong> Advanced Types</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-05-advanced-functions-and-closures.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.4.</strong> Advanced Functions and Closures</a></li><li class=\"chapter-item expanded \"><a href=\"ch19-06-macros.html\" tabindex=\"0\"><strong aria-hidden=\"true\">19.5.</strong> Macros</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"ch20-00-final-project-a-web-server.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.</strong> Final Project: Building a Multithreaded Web Server</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"ch20-01-single-threaded.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.1.</strong> Building a Single-Threaded Web Server</a></li><li class=\"chapter-item expanded \"><a href=\"ch20-02-multithreaded.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.2.</strong> Turning Our Single-Threaded Server into a Multithreaded Server</a></li><li class=\"chapter-item expanded \"><a href=\"ch20-03-graceful-shutdown-and-cleanup.html\" tabindex=\"0\"><strong aria-hidden=\"true\">20.3.</strong> Graceful Shutdown and Cleanup</a></li></ol></li><li class=\"chapter-item expanded \"><a href=\"appendix-00.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.</strong> Appendix</a></li><li><ol class=\"section\"><li class=\"chapter-item expanded \"><a href=\"appendix-01-keywords.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.1.</strong> A - Keywords</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-02-operators.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.2.</strong> B - Operators and Symbols</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-03-derivable-traits.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.3.</strong> C - Derivable Traits</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-04-useful-development-tools.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.4.</strong> D - Useful Development Tools</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-05-editions.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.5.</strong> E - Editions</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-06-translation.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.6.</strong> F - Translations of the Book</a></li><li class=\"chapter-item expanded \"><a href=\"appendix-07-nightly-rust.html\" tabindex=\"0\"><strong aria-hidden=\"true\">21.7.</strong> G - How Rust is Made and ‚ÄúNightly Rust‚Äù</a></li></ol></li></ol>\n            </div>\n            <div id=\"sidebar-resize-handle\" class=\"sidebar-resize-handle\">\n                <div class=\"sidebar-resize-indicator\"></div>\n            </div>\n        </nav>\n\n        <!-- Track and set sidebar scroll position -->\n        <script>\n            var sidebarScrollbox = document.querySelector('#sidebar .sidebar-scrollbox');\n            sidebarScrollbox.addEventListener('click', function(e) {\n                if (e.target.tagName === 'A') {\n                    sessionStorage.setItem('sidebar-scroll', sidebarScrollbox.scrollTop);\n                }\n            }, { passive: true });\n            var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');\n            sessionStorage.removeItem('sidebar-scroll');\n            if (sidebarScrollTop) {\n                // preserve sidebar scroll position when navigating via links within sidebar\n                sidebarScrollbox.scrollTop = sidebarScrollTop;\n            } else {\n                // scroll sidebar to current active section when navigating via \"next/previous chapter\" buttons\n                var activeSection = document.querySelector('#sidebar .active');\n                if (activeSection) {\n                    activeSection.scrollIntoView({ block: 'center' });\n                }\n            }\n        </script>\n\n        <div id=\"page-wrapper\" class=\"page-wrapper\">\n\n            <div class=\"page\">\n                                <div id=\"menu-bar-hover-placeholder\"></div>\n                <div id=\"menu-bar\" class=\"menu-bar\" style=\"top: 0px;\">\n                    <div class=\"left-buttons\">\n                        <label id=\"sidebar-toggle\" class=\"icon-button\" for=\"sidebar-toggle-anchor\" title=\"Toggle Table of Contents\" aria-label=\"Toggle Table of Contents\" aria-controls=\"sidebar\" aria-expanded=\"true\">\n                            <i class=\"fa fa-bars\"></i>\n                        </label>\n                        <button id=\"theme-toggle\" class=\"icon-button\" type=\"button\" title=\"Change theme\" aria-label=\"Change theme\" aria-haspopup=\"true\" aria-expanded=\"false\" aria-controls=\"theme-list\">\n                            <i class=\"fa fa-paint-brush\"></i>\n                        </button>\n                        <ul id=\"theme-list\" class=\"theme-popup\" aria-label=\"Themes\" role=\"menu\">\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme theme-selected\" id=\"light\">Light</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"rust\">Rust</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"coal\">Coal</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"navy\">Navy</button></li>\n                            <li role=\"none\"><button role=\"menuitem\" class=\"theme\" id=\"ayu\">Ayu</button></li>\n                        </ul>\n                        <button id=\"search-toggle\" class=\"icon-button\" type=\"button\" title=\"Search. (Shortkey: s)\" aria-label=\"Toggle Searchbar\" aria-expanded=\"false\" aria-keyshortcuts=\"S\" aria-controls=\"searchbar\">\n                            <i class=\"fa fa-search\"></i>\n                        </button>\n                    </div>\n\n                    <h1 class=\"menu-title\">The Rust Programming Language</h1>\n\n                    <div class=\"right-buttons\">\n                        <a href=\"print.html\" title=\"Print this book\" aria-label=\"Print this book\">\n                            <i id=\"print-button\" class=\"fa fa-print\"></i>\n                        </a>\n                        <a href=\"https://github.com/rust-lang/book\" title=\"Git repository\" aria-label=\"Git repository\">\n                            <i id=\"git-repository-button\" class=\"fa fa-github\"></i>\n                        </a>\n\n                    </div>\n                </div>\n\n                <div id=\"search-wrapper\" class=\"hidden\">\n                    <form id=\"searchbar-outer\" class=\"searchbar-outer\">\n                        <input type=\"search\" id=\"searchbar\" name=\"searchbar\" placeholder=\"Search this book ...\" aria-controls=\"searchresults-outer\" aria-describedby=\"searchresults-header\">\n                    </form>\n                    <div id=\"searchresults-outer\" class=\"searchresults-outer hidden\">\n                        <div id=\"searchresults-header\" class=\"searchresults-header\"></div>\n                        <ul id=\"searchresults\">\n                        </ul>\n                    </div>\n                </div>\n\n                <!-- Apply ARIA attributes after the sidebar and the sidebar toggle button are added to the DOM -->\n                <script>\n                    document.getElementById('sidebar-toggle').setAttribute('aria-expanded', sidebar === 'visible');\n                    document.getElementById('sidebar').setAttribute('aria-hidden', sidebar !== 'visible');\n                    Array.from(document.querySelectorAll('#sidebar a')).forEach(function(link) {\n                        link.setAttribute('tabIndex', sidebar === 'visible' ? 0 : -1);\n                    });\n                </script>\n\n                <div id=\"content\" class=\"content\">\n                    <main>\n                        <h1 id=\"the-rust-programming-language\"><a class=\"header\" href=\"#the-rust-programming-language\">The Rust Programming Language</a></h1>\n<p><em>by Steve Klabnik and Carol Nichols, with contributions from the Rust Community</em></p>\n<p>This version of the text assumes you‚Äôre using Rust 1.78.0 (released 2024-05-02)\nor later. See the <a href=\"ch01-01-installation.html\">‚ÄúInstallation‚Äù section of Chapter 1</a><!-- ignore -->\nto install or update Rust.</p>\n<p>The HTML format is available online at\n<a href=\"https://doc.rust-lang.org/stable/book/\">https://doc.rust-lang.org/stable/book/</a>\nand offline with installations of Rust made with <code class=\"hljs\">rustup</code>; run <code class=\"hljs\">rustup doc --book</code> to open.</p>\n<p>Several community <a href=\"appendix-06-translation.html\">translations</a> are also available.</p>\n<p>This text is available in <a href=\"https://nostarch.com/rust-programming-language-2nd-edition\">paperback and ebook format from No Starch\nPress</a>.</p>\n<blockquote>\n<p><strong>üö® Want a more interactive learning experience? Try out a different version\nof the Rust Book, featuring: quizzes, highlighting, visualizations, and\nmore</strong>: <a href=\"https://rust-book.cs.brown.edu\">https://rust-book.cs.brown.edu</a></p>\n</blockquote>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"foreword\"><a class=\"header\" href=\"#foreword\">Foreword</a></h1>\n<p>It wasn‚Äôt always so clear, but the Rust programming language is fundamentally\nabout <em>empowerment</em>: no matter what kind of code you are writing now, Rust\nempowers you to reach farther, to program with confidence in a wider variety of\ndomains than you did before.</p>\n<p>Take, for example, ‚Äúsystems-level‚Äù work that deals with low-level details of\nmemory management, data representation, and concurrency. Traditionally, this\nrealm of programming is seen as arcane, accessible only to a select few who\nhave devoted the necessary years learning to avoid its infamous pitfalls. And\neven those who practice it do so with caution, lest their code be open to\nexploits, crashes, or corruption.</p>\n<p>Rust breaks down these barriers by eliminating the old pitfalls and providing a\nfriendly, polished set of tools to help you along the way. Programmers who need\nto ‚Äúdip down‚Äù into lower-level control can do so with Rust, without taking on\nthe customary risk of crashes or security holes, and without having to learn\nthe fine points of a fickle toolchain. Better yet, the language is designed to\nguide you naturally towards reliable code that is efficient in terms of speed\nand memory usage.</p>\n<p>Programmers who are already working with low-level code can use Rust to raise\ntheir ambitions. For example, introducing parallelism in Rust is a relatively\nlow-risk operation: the compiler will catch the classical mistakes for you. And\nyou can tackle more aggressive optimizations in your code with the confidence\nthat you won‚Äôt accidentally introduce crashes or vulnerabilities.</p>\n<p>But Rust isn‚Äôt limited to low-level systems programming. It‚Äôs expressive and\nergonomic enough to make CLI apps, web servers, and many other kinds of code\nquite pleasant to write ‚Äî you‚Äôll find simple examples of both later in the\nbook. Working with Rust allows you to build skills that transfer from one\ndomain to another; you can learn Rust by writing a web app, then apply those\nsame skills to target your Raspberry Pi.</p>\n<p>This book fully embraces the potential of Rust to empower its users. It‚Äôs a\nfriendly and approachable text intended to help you level up not just your\nknowledge of Rust, but also your reach and confidence as a programmer in\ngeneral. So dive in, get ready to learn‚Äîand welcome to the Rust community!</p>\n<p>‚Äî Nicholas Matsakis and Aaron Turon</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"introduction\"><a class=\"header\" href=\"#introduction\">Introduction</a></h1>\n<section class=\"note\" aria-role=\"note\">\n<p>Note: This edition of the book is the same as <a href=\"https://nostarch.com/rust-programming-language-2nd-edition\">The Rust Programming\nLanguage</a> available in print and ebook format from <a href=\"https://nostarch.com/\">No Starch\nPress</a>.</p>\n</section>\n<p>Welcome to <em>The Rust Programming Language</em>, an introductory book about Rust.\nThe Rust programming language helps you write faster, more reliable software.\nHigh-level ergonomics and low-level control are often at odds in programming\nlanguage design; Rust challenges that conflict. Through balancing powerful\ntechnical capacity and a great developer experience, Rust gives you the option\nto control low-level details (such as memory usage) without all the hassle\ntraditionally associated with such control.</p>\n<h2 id=\"who-rust-is-for\"><a class=\"header\" href=\"#who-rust-is-for\">Who Rust Is For</a></h2>\n<p>Rust is ideal for many people for a variety of reasons. Let‚Äôs look at a few of\nthe most important groups.</p>\n<h3 id=\"teams-of-developers\"><a class=\"header\" href=\"#teams-of-developers\">Teams of Developers</a></h3>\n<p>Rust is proving to be a productive tool for collaborating among large teams of\ndevelopers with varying levels of systems programming knowledge. Low-level code\nis prone to various subtle bugs, which in most other languages can be caught\nonly through extensive testing and careful code review by experienced\ndevelopers. In Rust, the compiler plays a gatekeeper role by refusing to\ncompile code with these elusive bugs, including concurrency bugs. By working\nalongside the compiler, the team can spend their time focusing on the program‚Äôs\nlogic rather than chasing down bugs.</p>\n<p>Rust also brings contemporary developer tools to the systems programming world:</p>\n<ul>\n<li>Cargo, the included dependency manager and build tool, makes adding,\ncompiling, and managing dependencies painless and consistent across the Rust\necosystem.</li>\n<li>The Rustfmt formatting tool ensures a consistent coding style across\ndevelopers.</li>\n<li>The rust-analyzer powers Integrated Development Environment (IDE)\nintegration for code completion and inline error messages.</li>\n</ul>\n<p>By using these and other tools in the Rust ecosystem, developers can be\nproductive while writing systems-level code.</p>\n<h3 id=\"students\"><a class=\"header\" href=\"#students\">Students</a></h3>\n<p>Rust is for students and those who are interested in learning about systems\nconcepts. Using Rust, many people have learned about topics like operating\nsystems development. The community is very welcoming and happy to answer\nstudent questions. Through efforts such as this book, the Rust teams want to\nmake systems concepts more accessible to more people, especially those new to\nprogramming.</p>\n<h3 id=\"companies\"><a class=\"header\" href=\"#companies\">Companies</a></h3>\n<p>Hundreds of companies, large and small, use Rust in production for a variety of\ntasks, including command line tools, web services, DevOps tooling, embedded\ndevices, audio and video analysis and transcoding, cryptocurrencies,\nbioinformatics, search engines, Internet of Things applications, machine\nlearning, and even major parts of the Firefox web browser.</p>\n<h3 id=\"open-source-developers\"><a class=\"header\" href=\"#open-source-developers\">Open Source Developers</a></h3>\n<p>Rust is for people who want to build the Rust programming language, community,\ndeveloper tools, and libraries. We‚Äôd love to have you contribute to the Rust\nlanguage.</p>\n<h3 id=\"people-who-value-speed-and-stability\"><a class=\"header\" href=\"#people-who-value-speed-and-stability\">People Who Value Speed and Stability</a></h3>\n<p>Rust is for people who crave speed and stability in a language. By speed, we\nmean both how quickly Rust code can run and the speed at which Rust lets you\nwrite programs. The Rust compiler‚Äôs checks ensure stability through feature\nadditions and refactoring. This is in contrast to the brittle legacy code in\nlanguages without these checks, which developers are often afraid to modify. By\nstriving for zero-cost abstractions, higher-level features that compile to\nlower-level code as fast as code written manually, Rust endeavors to make safe\ncode be fast code as well.</p>\n<p>The Rust language hopes to support many other users as well; those mentioned\nhere are merely some of the biggest stakeholders. Overall, Rust‚Äôs greatest\nambition is to eliminate the trade-offs that programmers have accepted for\ndecades by providing safety <em>and</em> productivity, speed <em>and</em> ergonomics. Give\nRust a try and see if its choices work for you.</p>\n<h2 id=\"who-this-book-is-for\"><a class=\"header\" href=\"#who-this-book-is-for\">Who This Book Is For</a></h2>\n<p>This book assumes that you‚Äôve written code in another programming language but\ndoesn‚Äôt make any assumptions about which one. We‚Äôve tried to make the material\nbroadly accessible to those from a wide variety of programming backgrounds. We\ndon‚Äôt spend a lot of time talking about what programming <em>is</em> or how to think\nabout it. If you‚Äôre entirely new to programming, you would be better served by\nreading a book that specifically provides an introduction to programming.</p>\n<h2 id=\"how-to-use-this-book\"><a class=\"header\" href=\"#how-to-use-this-book\">How to Use This Book</a></h2>\n<p>In general, this book assumes that you‚Äôre reading it in sequence from front to\nback. Later chapters build on concepts in earlier chapters, and earlier\nchapters might not delve into details on a particular topic but will revisit\nthe topic in a later chapter.</p>\n<p>You‚Äôll find two kinds of chapters in this book: concept chapters and project\nchapters. In concept chapters, you‚Äôll learn about an aspect of Rust. In project\nchapters, we‚Äôll build small programs together, applying what you‚Äôve learned so\nfar. Chapters 2, 12, and 20 are project chapters; the rest are concept chapters.</p>\n<p>Chapter 1 explains how to install Rust, how to write a ‚ÄúHello, world!‚Äù program,\nand how to use Cargo, Rust‚Äôs package manager and build tool. Chapter 2 is a\nhands-on introduction to writing a program in Rust, having you build up a\nnumber guessing game. Here we cover concepts at a high level, and later\nchapters will provide additional detail. If you want to get your hands dirty\nright away, Chapter 2 is the place for that. Chapter 3 covers Rust features\nthat are similar to those of other programming languages, and in Chapter 4\nyou‚Äôll learn about Rust‚Äôs ownership system. If you‚Äôre a particularly meticulous\nlearner who prefers to learn every detail before moving on to the next, you\nmight want to skip Chapter 2 and go straight to Chapter 3, returning to Chapter\n2 when you‚Äôd like to work on a project applying the details you‚Äôve learned.</p>\n<p>Chapter 5 discusses structs and methods, and Chapter 6 covers enums, <code class=\"hljs\">match</code>\nexpressions, and the <code class=\"hljs\">if let</code> control flow construct. You‚Äôll use structs and\nenums to make custom types in Rust.</p>\n<p>In Chapter 7, you‚Äôll learn about Rust‚Äôs module system and about privacy rules\nfor organizing your code and its public Application Programming Interface\n(API). Chapter 8 discusses some common collection data structures that the\nstandard library provides, such as vectors, strings, and hash maps. Chapter 9\nexplores Rust‚Äôs error-handling philosophy and techniques.</p>\n<p>Chapter 10 digs into generics, traits, and lifetimes, which give you the power\nto define code that applies to multiple types. Chapter 11 is all about testing,\nwhich even with Rust‚Äôs safety guarantees is necessary to ensure your program‚Äôs\nlogic is correct. In Chapter 12, we‚Äôll build our own implementation of a subset\nof functionality from the <code class=\"hljs\">grep</code> command line tool that searches for text\nwithin files. For this, we‚Äôll use many of the concepts we discussed in the\nprevious chapters.</p>\n<p>Chapter 13 explores closures and iterators: features of Rust that come from\nfunctional programming languages. In Chapter 14, we‚Äôll examine Cargo in more\ndepth and talk about best practices for sharing your libraries with others.\nChapter 15 discusses smart pointers that the standard library provides and the\ntraits that enable their functionality.</p>\n<p>In Chapter 16, we‚Äôll walk through different models of concurrent programming\nand talk about how Rust helps you to program in multiple threads fearlessly.\nChapter 17 looks at how Rust idioms compare to object-oriented programming\nprinciples you might be familiar with.</p>\n<p>Chapter 18 is a reference on patterns and pattern matching, which are powerful\nways of expressing ideas throughout Rust programs. Chapter 19 contains a\nsmorgasbord of advanced topics of interest, including unsafe Rust, macros, and\nmore about lifetimes, traits, types, functions, and closures.</p>\n<p>In Chapter 20, we‚Äôll complete a project in which we‚Äôll implement a low-level\nmultithreaded web server!</p>\n<p>Finally, some appendices contain useful information about the language in a\nmore reference-like format. Appendix A covers Rust‚Äôs keywords, Appendix B\ncovers Rust‚Äôs operators and symbols, Appendix C covers derivable traits\nprovided by the standard library, Appendix D covers some useful development\ntools, and Appendix E explains Rust editions. In Appendix F, you can find\ntranslations of the book, and in Appendix G we‚Äôll cover how Rust is made and\nwhat nightly Rust is.</p>\n<p>There is no wrong way to read this book: if you want to skip ahead, go for it!\nYou might have to jump back to earlier chapters if you experience any\nconfusion. But do whatever works for you.</p>\n<p><span id=\"ferris\"></span></p>\n<p>An important part of the process of learning Rust is learning how to read the\nerror messages the compiler displays: these will guide you toward working code.\nAs such, we‚Äôll provide many examples that don‚Äôt compile along with the error\nmessage the compiler will show you in each situation. Know that if you enter\nand run a random example, it may not compile! Make sure you read the\nsurrounding text to see whether the example you‚Äôre trying to run is meant to\nerror. Ferris will also help you distinguish code that isn‚Äôt meant to work:</p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Ferris</th><th>Meaning</th></tr></thead><tbody>\n<tr><td><img src=\"img/ferris/does_not_compile.svg\" class=\"ferris-explain\" alt=\"Ferris with a question mark\"></td><td>This code does not compile!</td></tr>\n<tr><td><img src=\"img/ferris/panics.svg\" class=\"ferris-explain\" alt=\"Ferris throwing up their hands\"></td><td>This code panics!</td></tr>\n<tr><td><img src=\"img/ferris/not_desired_behavior.svg\" class=\"ferris-explain\" alt=\"Ferris with one claw up, shrugging\"></td><td>This code does not produce the desired behavior.</td></tr>\n</tbody></table>\n</div>\n<p>In most situations, we‚Äôll lead you to the correct version of any code that\ndoesn‚Äôt compile.</p>\n<h2 id=\"source-code\"><a class=\"header\" href=\"#source-code\">Source Code</a></h2>\n<p>The source files from which this book is generated can be found on\n<a href=\"https://github.com/rust-lang/book/tree/main/src\">GitHub</a>.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"getting-started\"><a class=\"header\" href=\"#getting-started\">Getting Started</a></h1>\n<p>Let‚Äôs start your Rust journey! There‚Äôs a lot to learn, but every journey starts\nsomewhere. In this chapter, we‚Äôll discuss:</p>\n<ul>\n<li>Installing Rust on Linux, macOS, and Windows</li>\n<li>Writing a program that prints <code class=\"hljs\">Hello, world!</code></li>\n<li>Using <code class=\"hljs\">cargo</code>, Rust‚Äôs package manager and build system</li>\n</ul>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"installation\"><a class=\"header\" href=\"#installation\">Installation</a></h2>\n<p>The first step is to install Rust. We‚Äôll download Rust through <code class=\"hljs\">rustup</code>, a\ncommand line tool for managing Rust versions and associated tools. You‚Äôll need\nan internet connection for the download.</p>\n<section class=\"note\" aria-role=\"note\">\n<p>Note: If you prefer not to use <code class=\"hljs\">rustup</code> for some reason, please see the\n<a href=\"https://forge.rust-lang.org/infra/other-installation-methods.html\">Other Rust Installation Methods page</a> for more options.</p>\n</section>\n<p>The following steps install the latest stable version of the Rust compiler.\nRust‚Äôs stability guarantees ensure that all the examples in the book that\ncompile will continue to compile with newer Rust versions. The output might\ndiffer slightly between versions because Rust often improves error messages and\nwarnings. In other words, any newer, stable version of Rust you install using\nthese steps should work as expected with the content of this book.</p>\n<section class=\"note\" aria-role=\"note\">\n<h3 id=\"command-line-notation\"><a class=\"header\" href=\"#command-line-notation\">Command Line Notation</a></h3>\n<p>In this chapter and throughout the book, we‚Äôll show some commands used in the\nterminal. Lines that you should enter in a terminal all start with <code class=\"hljs\">$</code>. You\ndon‚Äôt need to type the <code class=\"hljs\">$</code> character; it‚Äôs the command line prompt shown to\nindicate the start of each command. Lines that don‚Äôt start with <code class=\"hljs\">$</code> typically\nshow the output of the previous command. Additionally, PowerShell-specific\nexamples will use <code class=\"hljs\">&gt;</code> rather than <code class=\"hljs\">$</code>.</p>\n</section>\n<h3 id=\"installing-rustup-on-linux-or-macos\"><a class=\"header\" href=\"#installing-rustup-on-linux-or-macos\">Installing <code>rustup</code> on Linux or macOS</a></h3>\n<p>If you‚Äôre using Linux or macOS, open a terminal and enter the following command:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> curl --proto <span class=\"hljs-string\">'=https'</span> --tlsv1.2 https://sh.rustup.rs -sSf | sh</span>\n</code></pre>\n<p>The command downloads a script and starts the installation of the <code class=\"hljs\">rustup</code>\ntool, which installs the latest stable version of Rust. You might be prompted\nfor your password. If the install is successful, the following line will appear:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">Rust is installed now. Great!\n</code></pre>\n<p>You will also need a <em>linker</em>, which is a program that Rust uses to join its\ncompiled outputs into one file. It is likely you already have one. If you get\nlinker errors, you should install a C compiler, which will typically include a\nlinker. A C compiler is also useful because some common Rust packages depend on\nC code and will need a C compiler.</p>\n<p>On macOS, you can get a C compiler by running:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> xcode-select --install</span>\n</code></pre>\n<p>Linux users should generally install GCC or Clang, according to their\ndistribution‚Äôs documentation. For example, if you use Ubuntu, you can install\nthe <code class=\"hljs\">build-essential</code> package.</p>\n<h3 id=\"installing-rustup-on-windows\"><a class=\"header\" href=\"#installing-rustup-on-windows\">Installing <code>rustup</code> on Windows</a></h3>\n<p>On Windows, go to <a href=\"https://www.rust-lang.org/tools/install\">https://www.rust-lang.org/tools/install</a> and follow\nthe instructions for installing Rust. At some point in the installation, you‚Äôll\nbe prompted to install Visual Studio. This provides a linker and the native\nlibraries needed to compile programs. If you need more help with this step, see\n<a href=\"https://rust-lang.github.io/rustup/installation/windows-msvc.html\">https://rust-lang.github.io/rustup/installation/windows-msvc.html</a></p>\n<p>The rest of this book uses commands that work in both <em>cmd.exe</em> and PowerShell.\nIf there are specific differences, we‚Äôll explain which to use.</p>\n<h3 id=\"troubleshooting\"><a class=\"header\" href=\"#troubleshooting\">Troubleshooting</a></h3>\n<p>To check whether you have Rust installed correctly, open a shell and enter this\nline:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> rustc --version</span>\n</code></pre>\n<p>You should see the version number, commit hash, and commit date for the latest\nstable version that has been released, in the following format:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">rustc x.y.z (abcabcabc yyyy-mm-dd)\n</code></pre>\n<p>If you see this information, you have installed Rust successfully! If you don‚Äôt\nsee this information, check that Rust is in your <code class=\"hljs\">%PATH%</code> system variable as\nfollows.</p>\n<p>In Windows CMD, use:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">&gt;</span><span class=\"bash\"> <span class=\"hljs-built_in\">echo</span> %PATH%</span>\n</code></pre>\n<p>In PowerShell, use:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-powershell hljs\">&gt; echo $env:Path\n</code></pre>\n<p>In Linux and macOS, use:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$PATH</span></span>\n</code></pre>\n<p>If that‚Äôs all correct and Rust still isn‚Äôt working, there are a number of\nplaces you can get help. Find out how to get in touch with other Rustaceans (a\nsilly nickname we call ourselves) on <a href=\"https://www.rust-lang.org/community\">the community page</a>.</p>\n<h3 id=\"updating-and-uninstalling\"><a class=\"header\" href=\"#updating-and-uninstalling\">Updating and Uninstalling</a></h3>\n<p>Once Rust is installed via <code class=\"hljs\">rustup</code>, updating to a newly released version is\neasy. From your shell, run the following update script:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> rustup update</span>\n</code></pre>\n<p>To uninstall Rust and <code class=\"hljs\">rustup</code>, run the following uninstall script from your\nshell:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> rustup self uninstall</span>\n</code></pre>\n<h3 id=\"local-documentation\"><a class=\"header\" href=\"#local-documentation\">Local Documentation</a></h3>\n<p>The installation of Rust also includes a local copy of the documentation so\nthat you can read it offline. Run <code class=\"hljs\">rustup doc</code> to open the local documentation\nin your browser.</p>\n<p>Any time a type or function is provided by the standard library and you‚Äôre not\nsure what it does or how to use it, use the application programming interface\n(API) documentation to find out!</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"hello-world\"><a class=\"header\" href=\"#hello-world\">Hello, World!</a></h2>\n<p>Now that you‚Äôve installed Rust, it‚Äôs time to write your first Rust program.\nIt‚Äôs traditional when learning a new language to write a little program that\nprints the text <code class=\"hljs\">Hello, world!</code> to the screen, so we‚Äôll do the same here!</p>\n<section class=\"note\" aria-role=\"note\">\n<p>Note: This book assumes basic familiarity with the command line. Rust makes\nno specific demands about your editing or tooling or where your code lives, so\nif you prefer to use an integrated development environment (IDE) instead of\nthe command line, feel free to use your favorite IDE. Many IDEs now have some\ndegree of Rust support; check the IDE‚Äôs documentation for details. The Rust\nteam has been focusing on enabling great IDE support via <code class=\"hljs\">rust-analyzer</code>. See\n<a href=\"appendix-04-useful-development-tools.html\">Appendix D</a><!-- ignore --> for more details.</p>\n</section>\n<h3 id=\"creating-a-project-directory\"><a class=\"header\" href=\"#creating-a-project-directory\">Creating a Project Directory</a></h3>\n<p>You‚Äôll start by making a directory to store your Rust code. It doesn‚Äôt matter\nto Rust where your code lives, but for the exercises and projects in this book,\nwe suggest making a <em>projects</em> directory in your home directory and keeping all\nyour projects there.</p>\n<p>Open a terminal and enter the following commands to make a <em>projects</em> directory\nand a directory for the ‚ÄúHello, world!‚Äù project within the <em>projects</em> directory.</p>\n<p>For Linux, macOS, and PowerShell on Windows, enter this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> mkdir ~/projects</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> <span class=\"hljs-built_in\">cd</span> ~/projects</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> mkdir hello_world</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> <span class=\"hljs-built_in\">cd</span> hello_world</span>\n</code></pre>\n<p>For Windows CMD, enter this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-cmd hljs\">&gt; mkdir \"%USERPROFILE%\\projects\"\n&gt; cd /d \"%USERPROFILE%\\projects\"\n&gt; mkdir hello_world\n&gt; cd hello_world\n</code></pre>\n<h3 id=\"writing-and-running-a-rust-program\"><a class=\"header\" href=\"#writing-and-running-a-rust-program\">Writing and Running a Rust Program</a></h3>\n<p>Next, make a new source file and call it <em>main.rs</em>. Rust files always end with\nthe <em>.rs</em> extension. If you‚Äôre using more than one word in your filename, the\nconvention is to use an underscore to separate them. For example, use\n<em>hello_world.rs</em> rather than <em>helloworld.rs</em>.</p>\n<p>Now open the <em>main.rs</em> file you just created and enter the code in Listing 1-1.</p>\n<figure class=\"listing\">\n<span class=\"file-name\">Filename: main.rs</span>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Hello, world!\"</span>);\n}</code></pre></pre>\n<figcaption>Listing 1-1: A program that prints <code class=\"hljs\">Hello, world!</code></figcaption>\n</figure>\n<p>Save the file and go back to your terminal window in the\n<em>~/projects/hello_world</em> directory. On Linux or macOS, enter the following\ncommands to compile and run the file:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> rustc main.rs</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> ./main</span>\nHello, world!\n</code></pre>\n<p>On Windows, enter the command <code class=\"hljs\">.\\main.exe</code> instead of <code class=\"hljs\">./main</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-powershell hljs\">&gt; rustc main.rs\n&gt; .\\main.exe\nHello, world!\n</code></pre>\n<p>Regardless of your operating system, the string <code class=\"hljs\">Hello, world!</code> should print to\nthe terminal. If you don‚Äôt see this output, refer back to the\n<a href=\"ch01-01-installation.html#troubleshooting\">‚ÄúTroubleshooting‚Äù</a><!-- ignore --> part of the Installation\nsection for ways to get help.</p>\n<p>If <code class=\"hljs\">Hello, world!</code> did print, congratulations! You‚Äôve officially written a Rust\nprogram. That makes you a Rust programmer‚Äîwelcome!</p>\n<h3 id=\"anatomy-of-a-rust-program\"><a class=\"header\" href=\"#anatomy-of-a-rust-program\">Anatomy of a Rust Program</a></h3>\n<p>Let‚Äôs review this ‚ÄúHello, world!‚Äù program in detail. Here‚Äôs the first piece of\nthe puzzle:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n\n}</code></pre></pre>\n<p>These lines define a function named <code class=\"hljs\">main</code>. The <code class=\"hljs\">main</code> function is special: it\nis always the first code that runs in every executable Rust program. Here, the\nfirst line declares a function named <code class=\"hljs\">main</code> that has no parameters and returns\nnothing. If there were parameters, they would go inside the parentheses <code class=\"hljs\">()</code>.</p>\n<p>The function body is wrapped in <code class=\"hljs\">{}</code>. Rust requires curly brackets around all\nfunction bodies. It‚Äôs good style to place the opening curly bracket on the same\nline as the function declaration, adding one space in between.</p>\n<section class=\"note\" aria-role=\"note\">\n<p>Note: If you want to stick to a standard style across Rust projects, you can\nuse an automatic formatter tool called <code class=\"hljs\">rustfmt</code> to format your code in a\nparticular style (more on <code class=\"hljs\">rustfmt</code> in\n<a href=\"appendix-04-useful-development-tools.html\">Appendix D</a><!-- ignore -->). The Rust team has included this tool\nwith the standard Rust distribution, as <code class=\"hljs\">rustc</code> is, so it should already be\ninstalled on your computer!</p>\n</section>\n<p>The body of the <code class=\"hljs\">main</code> function holds the following code:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Hello, world!\"</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<p>This line does all the work in this little program: it prints text to the\nscreen. There are four important details to notice here.</p>\n<p>First, Rust style is to indent with four spaces, not a tab.</p>\n<p>Second, <code class=\"hljs\">println!</code> calls a Rust macro. If it had called a function instead, it\nwould be entered as <code class=\"hljs\">println</code> (without the <code class=\"hljs\">!</code>). We‚Äôll discuss Rust macros in\nmore detail in Chapter 19. For now, you just need to know that using a <code class=\"hljs\">!</code>\nmeans that you‚Äôre calling a macro instead of a normal function and that macros\ndon‚Äôt always follow the same rules as functions.</p>\n<p>Third, you see the <code class=\"hljs\">\"Hello, world!\"</code> string. We pass this string as an argument\nto <code class=\"hljs\">println!</code>, and the string is printed to the screen.</p>\n<p>Fourth, we end the line with a semicolon (<code class=\"hljs\">;</code>), which indicates that this\nexpression is over and the next one is ready to begin. Most lines of Rust code\nend with a semicolon.</p>\n<h3 id=\"compiling-and-running-are-separate-steps\"><a class=\"header\" href=\"#compiling-and-running-are-separate-steps\">Compiling and Running Are Separate Steps</a></h3>\n<p>You‚Äôve just run a newly created program, so let‚Äôs examine each step in the\nprocess.</p>\n<p>Before running a Rust program, you must compile it using the Rust compiler by\nentering the <code class=\"hljs\">rustc</code> command and passing it the name of your source file, like\nthis:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> rustc main.rs</span>\n</code></pre>\n<p>If you have a C or C++ background, you‚Äôll notice that this is similar to <code class=\"hljs\">gcc</code>\nor <code class=\"hljs\">clang</code>. After compiling successfully, Rust outputs a binary executable.</p>\n<p>On Linux, macOS, and PowerShell on Windows, you can see the executable by\nentering the <code class=\"hljs\">ls</code> command in your shell:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> ls</span>\nmain  main.rs\n</code></pre>\n<p>On Linux and macOS, you‚Äôll see two files. With PowerShell on Windows, you‚Äôll\nsee the same three files that you would see using CMD. With CMD on Windows, you\nwould enter the following:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-cmd hljs\">&gt; dir /B %= the /B option says to only show the file names =%\nmain.exe\nmain.pdb\nmain.rs\n</code></pre>\n<p>This shows the source code file with the <em>.rs</em> extension, the executable file\n(<em>main.exe</em> on Windows, but <em>main</em> on all other platforms), and, when using\nWindows, a file containing debugging information with the <em>.pdb</em> extension.\nFrom here, you run the <em>main</em> or <em>main.exe</em> file, like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> ./main <span class=\"hljs-comment\"># or .\\main.exe on Windows</span></span>\n</code></pre>\n<p>If your <em>main.rs</em> is your ‚ÄúHello, world!‚Äù program, this line prints <code class=\"hljs\">Hello, world!</code> to your terminal.</p>\n<p>If you‚Äôre more familiar with a dynamic language, such as Ruby, Python, or\nJavaScript, you might not be used to compiling and running a program as\nseparate steps. Rust is an <em>ahead-of-time compiled</em> language, meaning you can\ncompile a program and give the executable to someone else, and they can run it\neven without having Rust installed. If you give someone a <em>.rb</em>, <em>.py</em>, or\n<em>.js</em> file, they need to have a Ruby, Python, or JavaScript implementation\ninstalled (respectively). But in those languages, you only need one command to\ncompile and run your program. Everything is a trade-off in language design.</p>\n<p>Just compiling with <code class=\"hljs\">rustc</code> is fine for simple programs, but as your project\ngrows, you‚Äôll want to manage all the options and make it easy to share your\ncode. Next, we‚Äôll introduce you to the Cargo tool, which will help you write\nreal-world Rust programs.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"hello-cargo\"><a class=\"header\" href=\"#hello-cargo\">Hello, Cargo!</a></h2>\n<p>Cargo is Rust‚Äôs build system and package manager. Most Rustaceans use this tool\nto manage their Rust projects because Cargo handles a lot of tasks for you,\nsuch as building your code, downloading the libraries your code depends on, and\nbuilding those libraries. (We call the libraries that your code needs\n<em>dependencies</em>.)</p>\n<p>The simplest Rust programs, like the one we‚Äôve written so far, don‚Äôt have any\ndependencies. If we had built the ‚ÄúHello, world!‚Äù project with Cargo, it would\nonly use the part of Cargo that handles building your code. As you write more\ncomplex Rust programs, you‚Äôll add dependencies, and if you start a project\nusing Cargo, adding dependencies will be much easier to do.</p>\n<p>Because the vast majority of Rust projects use Cargo, the rest of this book\nassumes that you‚Äôre using Cargo too. Cargo comes installed with Rust if you\nused the official installers discussed in the\n<a href=\"ch01-01-installation.html#installation\">‚ÄúInstallation‚Äù</a><!-- ignore --> section. If you installed Rust\nthrough some other means, check whether Cargo is installed by entering the\nfollowing in your terminal:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo --version</span>\n</code></pre>\n<p>If you see a version number, you have it! If you see an error, such as <code class=\"hljs\">command not found</code>, look at the documentation for your method of installation to\ndetermine how to install Cargo separately.</p>\n<h3 id=\"creating-a-project-with-cargo\"><a class=\"header\" href=\"#creating-a-project-with-cargo\">Creating a Project with Cargo</a></h3>\n<p>Let‚Äôs create a new project using Cargo and look at how it differs from our\noriginal ‚ÄúHello, world!‚Äù project. Navigate back to your <em>projects</em> directory\n(or wherever you decided to store your code). Then, on any operating system,\nrun the following:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo new hello_cargo</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> <span class=\"hljs-built_in\">cd</span> hello_cargo</span>\n</code></pre>\n<p>The first command creates a new directory and project called <em>hello_cargo</em>.\nWe‚Äôve named our project <em>hello_cargo</em>, and Cargo creates its files in a\ndirectory of the same name.</p>\n<p>Go into the <em>hello_cargo</em> directory and list the files. You‚Äôll see that Cargo\nhas generated two files and one directory for us: a <em>Cargo.toml</em> file and a\n<em>src</em> directory with a <em>main.rs</em> file inside.</p>\n<p>It has also initialized a new Git repository along with a <em>.gitignore</em> file.\nGit files won‚Äôt be generated if you run <code class=\"hljs\">cargo new</code> within an existing Git\nrepository; you can override this behavior by using <code class=\"hljs\">cargo new --vcs=git</code>.</p>\n<section class=\"note\" aria-role=\"note\">\n<p>Note: Git is a common version control system. You can change <code class=\"hljs\">cargo new</code> to\nuse a different version control system or no version control system by using\nthe <code class=\"hljs\">--vcs</code> flag. Run <code class=\"hljs\">cargo new --help</code> to see the available options.</p>\n</section>\n<p>Open <em>Cargo.toml</em> in your text editor of choice. It should look similar to the\ncode in Listing 1-2.</p>\n<figure class=\"listing\">\n<span class=\"file-name\">Filename: Cargo.toml</span>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"hello_cargo\"</span>\n<span class=\"hljs-attr\">version</span> = <span class=\"hljs-string\">\"0.1.0\"</span>\n<span class=\"hljs-attr\">edition</span> = <span class=\"hljs-string\">\"2021\"</span>\n\n<span class=\"hljs-comment\"># See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html</span>\n\n<span class=\"hljs-section\">[dependencies]</span>\n</code></pre>\n<figcaption>Listing 1-2: Contents of <em>Cargo.toml</em> generated by <code class=\"hljs\">cargo new</code></figcaption>\n</figure>\n<p>This file is in the <a href=\"https://toml.io\"><em>TOML</em></a><!-- ignore --> (<em>Tom‚Äôs Obvious, Minimal\nLanguage</em>) format, which is Cargo‚Äôs configuration format.</p>\n<p>The first line, <code class=\"hljs\">[package]</code>, is a section heading that indicates that the\nfollowing statements are configuring a package. As we add more information to\nthis file, we‚Äôll add other sections.</p>\n<p>The next three lines set the configuration information Cargo needs to compile\nyour program: the name, the version, and the edition of Rust to use. We‚Äôll talk\nabout the <code class=\"hljs\">edition</code> key in <a href=\"appendix-05-editions.html\">Appendix E</a><!-- ignore -->.</p>\n<p>The last line, <code class=\"hljs\">[dependencies]</code>, is the start of a section for you to list any\nof your project‚Äôs dependencies. In Rust, packages of code are referred to as\n<em>crates</em>. We won‚Äôt need any other crates for this project, but we will in the\nfirst project in Chapter 2, so we‚Äôll use this dependencies section then.</p>\n<p>Now open <em>src/main.rs</em> and take a look:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Hello, world!\"</span>);\n}</code></pre></pre>\n<p>Cargo has generated a ‚ÄúHello, world!‚Äù program for you, just like the one we\nwrote in Listing 1-1! So far, the differences between our project and the\nproject Cargo generated are that Cargo placed the code in the <em>src</em> directory\nand we have a <em>Cargo.toml</em> configuration file in the top directory.</p>\n<p>Cargo expects your source files to live inside the <em>src</em> directory. The\ntop-level project directory is just for README files, license information,\nconfiguration files, and anything else not related to your code. Using Cargo\nhelps you organize your projects. There‚Äôs a place for everything, and\neverything is in its place.</p>\n<p>If you started a project that doesn‚Äôt use Cargo, as we did with the ‚ÄúHello,\nworld!‚Äù project, you can convert it to a project that does use Cargo. Move the\nproject code into the <em>src</em> directory and create an appropriate <em>Cargo.toml</em>\nfile.</p>\n<h3 id=\"building-and-running-a-cargo-project\"><a class=\"header\" href=\"#building-and-running-a-cargo-project\">Building and Running a Cargo Project</a></h3>\n<p>Now let‚Äôs look at what‚Äôs different when we build and run the ‚ÄúHello, world!‚Äù\nprogram with Cargo! From your <em>hello_cargo</em> directory, build your project by\nentering the following command:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo build</span>\n   Compiling hello_cargo v0.1.0 (file:///projects/hello_cargo)\n    Finished dev [unoptimized + debuginfo] target(s) in 2.85 secs\n</code></pre>\n<p>This command creates an executable file in <em>target/debug/hello_cargo</em> (or\n<em>target\\debug\\hello_cargo.exe</em> on Windows) rather than in your current\ndirectory. Because the default build is a debug build, Cargo puts the binary in\na directory named <em>debug</em>. You can run the executable with this command:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> ./target/debug/hello_cargo <span class=\"hljs-comment\"># or .\\target\\debug\\hello_cargo.exe on Windows</span></span>\nHello, world!\n</code></pre>\n<p>If all goes well, <code class=\"hljs\">Hello, world!</code> should print to the terminal. Running <code class=\"hljs\">cargo build</code> for the first time also causes Cargo to create a new file at the top\nlevel: <em>Cargo.lock</em>. This file keeps track of the exact versions of\ndependencies in your project. This project doesn‚Äôt have dependencies, so the\nfile is a bit sparse. You won‚Äôt ever need to change this file manually; Cargo\nmanages its contents for you.</p>\n<p>We just built a project with <code class=\"hljs\">cargo build</code> and ran it with\n<code class=\"hljs\">./target/debug/hello_cargo</code>, but we can also use <code class=\"hljs\">cargo run</code> to compile the\ncode and then run the resultant executable all in one command:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n    Finished dev [unoptimized + debuginfo] target(s) in 0.0 secs\n     Running `target/debug/hello_cargo`\nHello, world!\n</code></pre>\n<p>Using <code class=\"hljs\">cargo run</code> is more convenient than having to remember to run <code class=\"hljs\">cargo build</code> and then use the whole path to the binary, so most developers use <code class=\"hljs\">cargo run</code>.</p>\n<p>Notice that this time we didn‚Äôt see output indicating that Cargo was compiling\n<code class=\"hljs\">hello_cargo</code>. Cargo figured out that the files hadn‚Äôt changed, so it didn‚Äôt\nrebuild but just ran the binary. If you had modified your source code, Cargo\nwould have rebuilt the project before running it, and you would have seen this\noutput:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling hello_cargo v0.1.0 (file:///projects/hello_cargo)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.33 secs\n     Running `target/debug/hello_cargo`\nHello, world!\n</code></pre>\n<p>Cargo also provides a command called <code class=\"hljs\">cargo check</code>. This command quickly checks\nyour code to make sure it compiles but doesn‚Äôt produce an executable:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo check</span>\n   Checking hello_cargo v0.1.0 (file:///projects/hello_cargo)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.32 secs\n</code></pre>\n<p>Why would you not want an executable? Often, <code class=\"hljs\">cargo check</code> is much faster than\n<code class=\"hljs\">cargo build</code> because it skips the step of producing an executable. If you‚Äôre\ncontinually checking your work while writing the code, using <code class=\"hljs\">cargo check</code> will\nspeed up the process of letting you know if your project is still compiling! As\nsuch, many Rustaceans run <code class=\"hljs\">cargo check</code> periodically as they write their\nprogram to make sure it compiles. Then they run <code class=\"hljs\">cargo build</code> when they‚Äôre\nready to use the executable.</p>\n<p>Let‚Äôs recap what we‚Äôve learned so far about Cargo:</p>\n<ul>\n<li>We can create a project using <code class=\"hljs\">cargo new</code>.</li>\n<li>We can build a project using <code class=\"hljs\">cargo build</code>.</li>\n<li>We can build and run a project in one step using <code class=\"hljs\">cargo run</code>.</li>\n<li>We can build a project without producing a binary to check for errors using\n<code class=\"hljs\">cargo check</code>.</li>\n<li>Instead of saving the result of the build in the same directory as our code,\nCargo stores it in the <em>target/debug</em> directory.</li>\n</ul>\n<p>An additional advantage of using Cargo is that the commands are the same no\nmatter which operating system you‚Äôre working on. So, at this point, we‚Äôll no\nlonger provide specific instructions for Linux and macOS versus Windows.</p>\n<h3 id=\"building-for-release\"><a class=\"header\" href=\"#building-for-release\">Building for Release</a></h3>\n<p>When your project is finally ready for release, you can use <code class=\"hljs\">cargo build --release</code> to compile it with optimizations. This command will create an\nexecutable in <em>target/release</em> instead of <em>target/debug</em>. The optimizations\nmake your Rust code run faster, but turning them on lengthens the time it takes\nfor your program to compile. This is why there are two different profiles: one\nfor development, when you want to rebuild quickly and often, and another for\nbuilding the final program you‚Äôll give to a user that won‚Äôt be rebuilt\nrepeatedly and that will run as fast as possible. If you‚Äôre benchmarking your\ncode‚Äôs running time, be sure to run <code class=\"hljs\">cargo build --release</code> and benchmark with\nthe executable in <em>target/release</em>.</p>\n<h3 id=\"cargo-as-convention\"><a class=\"header\" href=\"#cargo-as-convention\">Cargo as Convention</a></h3>\n<p>With simple projects, Cargo doesn‚Äôt provide a lot of value over just using\n<code class=\"hljs\">rustc</code>, but it will prove its worth as your programs become more intricate.\nOnce programs grow to multiple files or need a dependency, it‚Äôs much easier to\nlet Cargo coordinate the build.</p>\n<p>Even though the <code class=\"hljs\">hello_cargo</code> project is simple, it now uses much of the real\ntooling you‚Äôll use in the rest of your Rust career. In fact, to work on any\nexisting projects, you can use the following commands to check out the code\nusing Git, change to that project‚Äôs directory, and build:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> git <span class=\"hljs-built_in\">clone</span> example.org/someproject</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> <span class=\"hljs-built_in\">cd</span> someproject</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo build</span>\n</code></pre>\n<p>For more information about Cargo, check out <a href=\"https://doc.rust-lang.org/cargo/\">its documentation</a>.</p>\n<h2 id=\"summary\"><a class=\"header\" href=\"#summary\">Summary</a></h2>\n<p>You‚Äôre already off to a great start on your Rust journey! In this chapter,\nyou‚Äôve learned how to:</p>\n<ul>\n<li>Install the latest stable version of Rust using <code class=\"hljs\">rustup</code></li>\n<li>Update to a newer Rust version</li>\n<li>Open locally installed documentation</li>\n<li>Write and run a ‚ÄúHello, world!‚Äù program using <code class=\"hljs\">rustc</code> directly</li>\n<li>Create and run a new project using the conventions of Cargo</li>\n</ul>\n<p>This is a great time to build a more substantial program to get used to reading\nand writing Rust code. So, in Chapter 2, we‚Äôll build a guessing game program.\nIf you would rather start by learning how common programming concepts work in\nRust, see Chapter 3 and then return to Chapter 2.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"programming-a-guessing-game\"><a class=\"header\" href=\"#programming-a-guessing-game\">Programming a Guessing Game</a></h1>\n<p>Let‚Äôs jump into Rust by working through a hands-on project together! This\nchapter introduces you to a few common Rust concepts by showing you how to use\nthem in a real program. You‚Äôll learn about <code class=\"hljs\">let</code>, <code class=\"hljs\">match</code>, methods, associated\nfunctions, external crates, and more! In the following chapters, we‚Äôll explore\nthese ideas in more detail. In this chapter, you‚Äôll just practice the\nfundamentals.</p>\n<p>We‚Äôll implement a classic beginner programming problem: a guessing game. Here‚Äôs\nhow it works: the program will generate a random integer between 1 and 100. It\nwill then prompt the player to enter a guess. After a guess is entered, the\nprogram will indicate whether the guess is too low or too high. If the guess is\ncorrect, the game will print a congratulatory message and exit.</p>\n<h2 id=\"setting-up-a-new-project\"><a class=\"header\" href=\"#setting-up-a-new-project\">Setting Up a New Project</a></h2>\n<p>To set up a new project, go to the <em>projects</em> directory that you created in\nChapter 1 and make a new project using Cargo, like so:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo new guessing_game</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> <span class=\"hljs-built_in\">cd</span> guessing_game</span>\n</code></pre>\n<p>The first command, <code class=\"hljs\">cargo new</code>, takes the name of the project (<code class=\"hljs\">guessing_game</code>)\nas the first argument. The second command changes to the new project‚Äôs\ndirectory.</p>\n<p>Look at the generated <em>Cargo.toml</em> file:</p>\n<!-- manual-regeneration\ncd listings/ch02-guessing-game-tutorial\nrm -rf no-listing-01-cargo-new\ncargo new no-listing-01-cargo-new --name guessing_game\ncd no-listing-01-cargo-new\ncargo run > output.txt 2>&1\ncd ../../..\n-->\n<p><span class=\"filename\">Filename: Cargo.toml</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"guessing_game\"</span>\n<span class=\"hljs-attr\">version</span> = <span class=\"hljs-string\">\"0.1.0\"</span>\n<span class=\"hljs-attr\">edition</span> = <span class=\"hljs-string\">\"2021\"</span>\n\n<span class=\"hljs-comment\"># See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html</span>\n\n<span class=\"hljs-section\">[dependencies]</span>\n</code></pre>\n<p>As you saw in Chapter 1, <code class=\"hljs\">cargo new</code> generates a ‚ÄúHello, world!‚Äù program for\nyou. Check out the <em>src/main.rs</em> file:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Hello, world!\"</span>);\n}</code></pre></pre>\n<p>Now let‚Äôs compile this ‚ÄúHello, world!‚Äù program and run it in the same step\nusing the <code class=\"hljs\">cargo run</code> command:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 1.50s\n     Running `target/debug/guessing_game`\nHello, world!\n</code></pre>\n<p>The <code class=\"hljs\">run</code> command comes in handy when you need to rapidly iterate on a project,\nas we‚Äôll do in this game, quickly testing each iteration before moving on to\nthe next one.</p>\n<p>Reopen the <em>src/main.rs</em> file. You‚Äôll be writing all the code in this file.</p>\n<h2 id=\"processing-a-guess\"><a class=\"header\" href=\"#processing-a-guess\">Processing a Guess</a></h2>\n<p>The first part of the guessing game program will ask for user input, process\nthat input, and check that the input is in the expected form. To start, we‚Äôll\nallow the player to input a guess. Enter the code in Listing 2-1 into\n<em>src/main.rs</em>.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">use</span> std::io;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Guess the number!\"</span>);\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Please input your guess.\"</span>);\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> guess = <span class=\"hljs-built_in\">String</span>::new();\n\n    io::stdin()\n        .read_line(&amp;<span class=\"hljs-keyword\">mut</span> guess)\n        .expect(<span class=\"hljs-string\">\"Failed to read line\"</span>);\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"You guessed: {}\"</span>, guess);\n}</code></pre>\n<p><span class=\"caption\">Listing 2-1: Code that gets a guess from the user and\nprints it</span></p>\n<p>This code contains a lot of information, so let‚Äôs go over it line by line. To\nobtain user input and then print the result as output, we need to bring the\n<code class=\"hljs\">io</code> input/output library into scope. The <code class=\"hljs\">io</code> library comes from the standard\nlibrary, known as <code class=\"hljs\">std</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"hljs-keyword\">use</span> std::io;\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Guess the number!\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Please input your guess.\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> guess = <span class=\"hljs-built_in\">String</span>::new();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    io::stdin()\n</span><span class=\"boring\">        .read_line(&amp;<span class=\"hljs-keyword\">mut</span> guess)\n</span><span class=\"boring\">        .expect(<span class=\"hljs-string\">\"Failed to read line\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"You guessed: {}\"</span>, guess);\n</span><span class=\"boring\">}</span></code></pre>\n<p>By default, Rust has a set of items defined in the standard library that it\nbrings into the scope of every program. This set is called the <em>prelude</em>, and\nyou can see everything in it <a href=\"../std/prelude/index.html\">in the standard library documentation</a>.</p>\n<p>If a type you want to use isn‚Äôt in the prelude, you have to bring that type\ninto scope explicitly with a <code class=\"hljs\">use</code> statement. Using the <code class=\"hljs\">std::io</code> library\nprovides you with a number of useful features, including the ability to accept\nuser input.</p>\n<p>As you saw in Chapter 1, the <code class=\"hljs\">main</code> function is the entry point into the\nprogram:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::io;\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n<span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Guess the number!\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Please input your guess.\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> guess = <span class=\"hljs-built_in\">String</span>::new();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    io::stdin()\n</span><span class=\"boring\">        .read_line(&amp;<span class=\"hljs-keyword\">mut</span> guess)\n</span><span class=\"boring\">        .expect(<span class=\"hljs-string\">\"Failed to read line\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"You guessed: {}\"</span>, guess);\n</span><span class=\"boring\">}</span></code></pre>\n<p>The <code class=\"hljs\">fn</code> syntax declares a new function; the parentheses, <code class=\"hljs\">()</code>, indicate there\nare no parameters; and the curly bracket, <code class=\"hljs\">{</code>, starts the body of the function.</p>\n<p>As you also learned in Chapter 1, <code class=\"hljs\">println!</code> is a macro that prints a string to\nthe screen:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::io;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Guess the number!\"</span>);\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Please input your guess.\"</span>);\n<span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> guess = <span class=\"hljs-built_in\">String</span>::new();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    io::stdin()\n</span><span class=\"boring\">        .read_line(&amp;<span class=\"hljs-keyword\">mut</span> guess)\n</span><span class=\"boring\">        .expect(<span class=\"hljs-string\">\"Failed to read line\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"You guessed: {}\"</span>, guess);\n</span><span class=\"boring\">}</span></code></pre>\n<p>This code is printing a prompt stating what the game is and requesting input\nfrom the user.</p>\n<h3 id=\"storing-values-with-variables\"><a class=\"header\" href=\"#storing-values-with-variables\">Storing Values with Variables</a></h3>\n<p>Next, we‚Äôll create a <em>variable</em> to store the user input, like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::io;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Guess the number!\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Please input your guess.\"</span>);\n</span><span class=\"boring\">\n</span>    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> guess = <span class=\"hljs-built_in\">String</span>::new();\n<span class=\"boring\">\n</span><span class=\"boring\">    io::stdin()\n</span><span class=\"boring\">        .read_line(&amp;<span class=\"hljs-keyword\">mut</span> guess)\n</span><span class=\"boring\">        .expect(<span class=\"hljs-string\">\"Failed to read line\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"You guessed: {}\"</span>, guess);\n</span><span class=\"boring\">}</span></code></pre>\n<p>Now the program is getting interesting! There‚Äôs a lot going on in this little\nline. We use the <code class=\"hljs\">let</code> statement to create the variable. Here‚Äôs another example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">let</span> apples = <span class=\"hljs-number\">5</span>;</code></pre>\n<p>This line creates a new variable named <code class=\"hljs\">apples</code> and binds it to the value 5. In\nRust, variables are immutable by default, meaning once we give the variable a\nvalue, the value won‚Äôt change. We‚Äôll be discussing this concept in detail in\nthe <a href=\"ch03-01-variables-and-mutability.html#variables-and-mutability\">‚ÄúVariables and Mutability‚Äù</a><!-- ignore -->\nsection in Chapter 3. To make a variable mutable, we add <code class=\"hljs\">mut</code> before the\nvariable name:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">let</span> apples = <span class=\"hljs-number\">5</span>; <span class=\"hljs-comment\">// immutable</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> bananas = <span class=\"hljs-number\">5</span>; <span class=\"hljs-comment\">// mutable</span></code></pre>\n<section class=\"note\" aria-role=\"note\">\n<p>Note: The <code class=\"hljs\">//</code> syntax starts a comment that continues until the end of the\nline. Rust ignores everything in comments. We‚Äôll discuss comments in more\ndetail in <a href=\"ch03-04-comments.html\">Chapter 3</a><!-- ignore -->.</p>\n</section>\n<p>Returning to the guessing game program, you now know that <code class=\"hljs\">let mut guess</code> will\nintroduce a mutable variable named <code class=\"hljs\">guess</code>. The equal sign (<code class=\"hljs\">=</code>) tells Rust we\nwant to bind something to the variable now. On the right of the equal sign is\nthe value that <code class=\"hljs\">guess</code> is bound to, which is the result of calling\n<code class=\"hljs\">String::new</code>, a function that returns a new instance of a <code class=\"hljs\">String</code>.\n<a href=\"../std/string/struct.String.html\"><code class=\"hljs\">String</code></a><!-- ignore --> is a string type provided by the standard\nlibrary that is a growable, UTF-8 encoded bit of text.</p>\n<p>The <code class=\"hljs\">::</code> syntax in the <code class=\"hljs\">::new</code> line indicates that <code class=\"hljs\">new</code> is an associated\nfunction of the <code class=\"hljs\">String</code> type. An <em>associated function</em> is a function that‚Äôs\nimplemented on a type, in this case <code class=\"hljs\">String</code>. This <code class=\"hljs\">new</code> function creates a\nnew, empty string. You‚Äôll find a <code class=\"hljs\">new</code> function on many types because it‚Äôs a\ncommon name for a function that makes a new value of some kind.</p>\n<p>In full, the <code class=\"hljs\">let mut guess = String::new();</code> line has created a mutable\nvariable that is currently bound to a new, empty instance of a <code class=\"hljs\">String</code>. Whew!</p>\n<h3 id=\"receiving-user-input\"><a class=\"header\" href=\"#receiving-user-input\">Receiving User Input</a></h3>\n<p>Recall that we included the input/output functionality from the standard\nlibrary with <code class=\"hljs\">use std::io;</code> on the first line of the program. Now we‚Äôll call\nthe <code class=\"hljs\">stdin</code> function from the <code class=\"hljs\">io</code> module, which will allow us to handle user\ninput:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::io;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Guess the number!\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Please input your guess.\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> guess = <span class=\"hljs-built_in\">String</span>::new();\n</span><span class=\"boring\">\n</span>    io::stdin()\n        .read_line(&amp;<span class=\"hljs-keyword\">mut</span> guess)\n<span class=\"boring\">        .expect(<span class=\"hljs-string\">\"Failed to read line\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"You guessed: {}\"</span>, guess);\n</span><span class=\"boring\">}</span></code></pre>\n<p>If we hadn‚Äôt imported the <code class=\"hljs\">io</code> library with <code class=\"hljs\">use std::io;</code> at the beginning of\nthe program, we could still use the function by writing this function call as\n<code class=\"hljs\">std::io::stdin</code>. The <code class=\"hljs\">stdin</code> function returns an instance of\n<a href=\"../std/io/struct.Stdin.html\"><code class=\"hljs\">std::io::Stdin</code></a><!-- ignore -->, which is a type that represents a\nhandle to the standard input for your terminal.</p>\n<p>Next, the line <code class=\"hljs\">.read_line(&amp;mut guess)</code> calls the <a href=\"../std/io/struct.Stdin.html#method.read_line\"><code class=\"hljs\">read_line</code></a><!--\nignore --> method on the standard input handle to get input from the user.\nWe‚Äôre also passing <code class=\"hljs\">&amp;mut guess</code> as the argument to <code class=\"hljs\">read_line</code> to tell it what\nstring to store the user input in. The full job of <code class=\"hljs\">read_line</code> is to take\nwhatever the user types into standard input and append that into a string\n(without overwriting its contents), so we therefore pass that string as an\nargument. The string argument needs to be mutable so the method can change the\nstring‚Äôs content.</p>\n<p>The <code class=\"hljs\">&amp;</code> indicates that this argument is a <em>reference</em>, which gives you a way to\nlet multiple parts of your code access one piece of data without needing to\ncopy that data into memory multiple times. References are a complex feature,\nand one of Rust‚Äôs major advantages is how safe and easy it is to use\nreferences. You don‚Äôt need to know a lot of those details to finish this\nprogram. For now, all you need to know is that, like variables, references are\nimmutable by default. Hence, you need to write <code class=\"hljs\">&amp;mut guess</code> rather than\n<code class=\"hljs\">&amp;guess</code> to make it mutable. (Chapter 4 will explain references more\nthoroughly.)</p>\n<!-- Old heading. Do not remove or links may break. -->\n<p><a id=\"handling-potential-failure-with-the-result-type\"></a></p>\n<h3 id=\"handling-potential-failure-with-result\"><a class=\"header\" href=\"#handling-potential-failure-with-result\">Handling Potential Failure with <code>Result</code></a></h3>\n<p>We‚Äôre still working on this line of code. We‚Äôre now discussing a third line of\ntext, but note that it‚Äôs still part of a single logical line of code. The next\npart is this method:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::io;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Guess the number!\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Please input your guess.\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> guess = <span class=\"hljs-built_in\">String</span>::new();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    io::stdin()\n</span><span class=\"boring\">        .read_line(&amp;<span class=\"hljs-keyword\">mut</span> guess)\n</span>        .expect(<span class=\"hljs-string\">\"Failed to read line\"</span>);\n<span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"You guessed: {}\"</span>, guess);\n</span><span class=\"boring\">}</span></code></pre>\n<p>We could have written this code as:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\">io::stdin().read_line(&amp;<span class=\"hljs-keyword\">mut</span> guess).expect(<span class=\"hljs-string\">\"Failed to read line\"</span>);</code></pre>\n<p>However, one long line is difficult to read, so it‚Äôs best to divide it. It‚Äôs\noften wise to introduce a newline and other whitespace to help break up long\nlines when you call a method with the <code class=\"hljs\">.method_name()</code> syntax. Now let‚Äôs\ndiscuss what this line does.</p>\n<p>As mentioned earlier, <code class=\"hljs\">read_line</code> puts whatever the user enters into the string\nwe pass to it, but it also returns a <code class=\"hljs\">Result</code> value. <a href=\"../std/result/enum.Result.html\"><code class=\"hljs\">Result</code></a><!--\nignore --> is an <a href=\"ch06-00-enums.html\"><em>enumeration</em></a><!-- ignore -->, often called an <em>enum</em>,\nwhich is a type that can be in one of multiple possible states. We call each\npossible state a <em>variant</em>.</p>\n<p><a href=\"ch06-00-enums.html\">Chapter 6</a><!-- ignore --> will cover enums in more detail. The purpose\nof these <code class=\"hljs\">Result</code> types is to encode error-handling information.</p>\n<p><code class=\"hljs\">Result</code>‚Äôs variants are <code class=\"hljs\">Ok</code> and <code class=\"hljs\">Err</code>. The <code class=\"hljs\">Ok</code> variant indicates the\noperation was successful, and inside <code class=\"hljs\">Ok</code> is the successfully generated value.\nThe <code class=\"hljs\">Err</code> variant means the operation failed, and <code class=\"hljs\">Err</code> contains information\nabout how or why the operation failed.</p>\n<p>Values of the <code class=\"hljs\">Result</code> type, like values of any type, have methods defined on\nthem. An instance of <code class=\"hljs\">Result</code> has an <a href=\"../std/result/enum.Result.html#method.expect\"><code class=\"hljs\">expect</code> method</a><!-- ignore -->\nthat you can call. If this instance of <code class=\"hljs\">Result</code> is an <code class=\"hljs\">Err</code> value, <code class=\"hljs\">expect</code>\nwill cause the program to crash and display the message that you passed as an\nargument to <code class=\"hljs\">expect</code>. If the <code class=\"hljs\">read_line</code> method returns an <code class=\"hljs\">Err</code>, it would\nlikely be the result of an error coming from the underlying operating system.\nIf this instance of <code class=\"hljs\">Result</code> is an <code class=\"hljs\">Ok</code> value, <code class=\"hljs\">expect</code> will take the return\nvalue that <code class=\"hljs\">Ok</code> is holding and return just that value to you so you can use it.\nIn this case, that value is the number of bytes in the user‚Äôs input.</p>\n<p>If you don‚Äôt call <code class=\"hljs\">expect</code>, the program will compile, but you‚Äôll get a warning:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo build</span>\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\nwarning: unused `Result` that must be used\n<span class=\"hljs-meta\">  --&gt;</span><span class=\"bash\"> src/main.rs:10:5</span>\n   |\n10 |     io::stdin().read_line(&amp;mut guess);\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: this `Result` may be an `Err` variant, which should be handled\n   = note: `#[warn(unused_must_use)]` on by default\nhelp: use `let _ = ...` to ignore the resulting value\n   |\n10 |     let _ = io::stdin().read_line(&amp;mut guess);\n   |     +++++++\n\nwarning: `guessing_game` (bin \"guessing_game\") generated 1 warning\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.59s\n</code></pre>\n<p>Rust warns that you haven‚Äôt used the <code class=\"hljs\">Result</code> value returned from <code class=\"hljs\">read_line</code>,\nindicating that the program hasn‚Äôt handled a possible error.</p>\n<p>The right way to suppress the warning is to actually write error-handling code,\nbut in our case we just want to crash this program when a problem occurs, so we\ncan use <code class=\"hljs\">expect</code>. You‚Äôll learn about recovering from errors in <a href=\"ch09-02-recoverable-errors-with-result.html\">Chapter\n9</a><!-- ignore -->.</p>\n<h3 id=\"printing-values-with-println-placeholders\"><a class=\"header\" href=\"#printing-values-with-println-placeholders\">Printing Values with <code>println!</code> Placeholders</a></h3>\n<p>Aside from the closing curly bracket, there‚Äôs only one more line to discuss in\nthe code so far:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::io;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Guess the number!\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Please input your guess.\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> guess = <span class=\"hljs-built_in\">String</span>::new();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    io::stdin()\n</span><span class=\"boring\">        .read_line(&amp;<span class=\"hljs-keyword\">mut</span> guess)\n</span><span class=\"boring\">        .expect(<span class=\"hljs-string\">\"Failed to read line\"</span>);\n</span><span class=\"boring\">\n</span>    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"You guessed: {}\"</span>, guess);\n<span class=\"boring\">}</span></code></pre>\n<p>This line prints the string that now contains the user‚Äôs input. The <code class=\"hljs\">{}</code> set of\ncurly brackets is a placeholder: think of <code class=\"hljs\">{}</code> as little crab pincers that hold\na value in place. When printing the value of a variable, the variable name can\ngo inside the curly brackets. When printing the result of evaluating an\nexpression, place empty curly brackets in the format string, then follow the\nformat string with a comma-separated list of expressions to print in each empty\ncurly bracket placeholder in the same order. Printing a variable and the result\nof an expression in one call to <code class=\"hljs\">println!</code> would look like this:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">5</span>;\n<span class=\"hljs-keyword\">let</span> y = <span class=\"hljs-number\">10</span>;\n\n<span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"x = {x} and y + 2 = {}\"</span>, y + <span class=\"hljs-number\">2</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<p>This code would print <code class=\"hljs\">x = 5 and y + 2 = 12</code>.</p>\n<h3 id=\"testing-the-first-part\"><a class=\"header\" href=\"#testing-the-first-part\">Testing the First Part</a></h3>\n<p>Let‚Äôs test the first part of the guessing game. Run it using <code class=\"hljs\">cargo run</code>:</p>\n<!-- manual-regeneration\ncd listings/ch02-guessing-game-tutorial/listing-02-01/\ncargo clean\ncargo run\ninput 6 -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 6.44s\n     Running `target/debug/guessing_game`\nGuess the number!\nPlease input your guess.\n6\nYou guessed: 6\n</code></pre>\n<p>At this point, the first part of the game is done: we‚Äôre getting input from the\nkeyboard and then printing it.</p>\n<h2 id=\"generating-a-secret-number\"><a class=\"header\" href=\"#generating-a-secret-number\">Generating a Secret Number</a></h2>\n<p>Next, we need to generate a secret number that the user will try to guess. The\nsecret number should be different every time so the game is fun to play more\nthan once. We‚Äôll use a random number between 1 and 100 so the game isn‚Äôt too\ndifficult. Rust doesn‚Äôt yet include random number functionality in its standard\nlibrary. However, the Rust team does provide a <a href=\"https://crates.io/crates/rand\"><code class=\"hljs\">rand</code> crate</a> with\nsaid functionality.</p>\n<h3 id=\"using-a-crate-to-get-more-functionality\"><a class=\"header\" href=\"#using-a-crate-to-get-more-functionality\">Using a Crate to Get More Functionality</a></h3>\n<p>Remember that a crate is a collection of Rust source code files. The project\nwe‚Äôve been building is a <em>binary crate</em>, which is an executable. The <code class=\"hljs\">rand</code>\ncrate is a <em>library crate</em>, which contains code that is intended to be used in\nother programs and can‚Äôt be executed on its own.</p>\n<p>Cargo‚Äôs coordination of external crates is where Cargo really shines. Before we\ncan write code that uses <code class=\"hljs\">rand</code>, we need to modify the <em>Cargo.toml</em> file to\ninclude the <code class=\"hljs\">rand</code> crate as a dependency. Open that file now and add the\nfollowing line to the bottom, beneath the <code class=\"hljs\">[dependencies]</code> section header that\nCargo created for you. Be sure to specify <code class=\"hljs\">rand</code> exactly as we have here, with\nthis version number, or the code examples in this tutorial may not work:</p>\n<!-- When updating the version of `rand` used, also update the version of\n`rand` used in these files so they all match:\n* ch07-04-bringing-paths-into-scope-with-the-use-keyword.md\n* ch14-03-cargo-workspaces.md\n-->\n<p><span class=\"filename\">Filename: Cargo.toml</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">rand</span> = <span class=\"hljs-string\">\"0.8.5\"</span>\n</code></pre>\n<p>In the <em>Cargo.toml</em> file, everything that follows a header is part of that\nsection that continues until another section starts. In <code class=\"hljs\">[dependencies]</code> you\ntell Cargo which external crates your project depends on and which versions of\nthose crates you require. In this case, we specify the <code class=\"hljs\">rand</code> crate with the\nsemantic version specifier <code class=\"hljs\">0.8.5</code>. Cargo understands <a href=\"http://semver.org\">Semantic\nVersioning</a><!-- ignore --> (sometimes called <em>SemVer</em>), which is a\nstandard for writing version numbers. The specifier <code class=\"hljs\">0.8.5</code> is actually\nshorthand for <code class=\"hljs\">^0.8.5</code>, which means any version that is at least 0.8.5 but\nbelow 0.9.0.</p>\n<p>Cargo considers these versions to have public APIs compatible with version\n0.8.5, and this specification ensures you‚Äôll get the latest patch release that\nwill still compile with the code in this chapter. Any version 0.9.0 or greater\nis not guaranteed to have the same API as what the following examples use.</p>\n<p>Now, without changing any of the code, let‚Äôs build the project, as shown in\nListing 2-2.</p>\n<!-- manual-regeneration\ncd listings/ch02-guessing-game-tutorial/listing-02-02/\nrm Cargo.lock\ncargo clean\ncargo build -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo build</span>\n    Updating crates.io index\n  Downloaded rand v0.8.5\n  Downloaded libc v0.2.127\n  Downloaded getrandom v0.2.7\n  Downloaded cfg-if v1.0.0\n  Downloaded ppv-lite86 v0.2.16\n  Downloaded rand_chacha v0.3.1\n  Downloaded rand_core v0.6.3\n   Compiling libc v0.2.127\n   Compiling getrandom v0.2.7\n   Compiling cfg-if v1.0.0\n   Compiling ppv-lite86 v0.2.16\n   Compiling rand_core v0.6.3\n   Compiling rand_chacha v0.3.1\n   Compiling rand v0.8.5\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 2.53s\n</code></pre>\n<p><span class=\"caption\">Listing 2-2: The output from running <code class=\"hljs\">cargo build</code> after\nadding the rand crate as a dependency</span></p>\n<p>You may see different version numbers (but they will all be compatible with the\ncode, thanks to SemVer!) and different lines (depending on the operating\nsystem), and the lines may be in a different order.</p>\n<p>When we include an external dependency, Cargo fetches the latest versions of\neverything that dependency needs from the <em>registry</em>, which is a copy of data\nfrom <a href=\"https://crates.io/\">Crates.io</a>. Crates.io is where people in the Rust ecosystem\npost their open source Rust projects for others to use.</p>\n<p>After updating the registry, Cargo checks the <code class=\"hljs\">[dependencies]</code> section and\ndownloads any crates listed that aren‚Äôt already downloaded. In this case,\nalthough we only listed <code class=\"hljs\">rand</code> as a dependency, Cargo also grabbed other crates\nthat <code class=\"hljs\">rand</code> depends on to work. After downloading the crates, Rust compiles\nthem and then compiles the project with the dependencies available.</p>\n<p>If you immediately run <code class=\"hljs\">cargo build</code> again without making any changes, you\nwon‚Äôt get any output aside from the <code class=\"hljs\">Finished</code> line. Cargo knows it has already\ndownloaded and compiled the dependencies, and you haven‚Äôt changed anything\nabout them in your <em>Cargo.toml</em> file. Cargo also knows that you haven‚Äôt changed\nanything about your code, so it doesn‚Äôt recompile that either. With nothing to\ndo, it simply exits.</p>\n<p>If you open the <em>src/main.rs</em> file, make a trivial change, and then save it and\nbuild again, you‚Äôll only see two lines of output:</p>\n<!-- manual-regeneration\ncd listings/ch02-guessing-game-tutorial/listing-02-02/\ntouch src/main.rs\ncargo build -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo build</span>\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 2.53 secs\n</code></pre>\n<p>These lines show that Cargo only updates the build with your tiny change to the\n<em>src/main.rs</em> file. Your dependencies haven‚Äôt changed, so Cargo knows it can\nreuse what it has already downloaded and compiled for those.</p>\n<h4 id=\"ensuring-reproducible-builds-with-the-cargolock-file\"><a class=\"header\" href=\"#ensuring-reproducible-builds-with-the-cargolock-file\">Ensuring Reproducible Builds with the <em>Cargo.lock</em> File</a></h4>\n<p>Cargo has a mechanism that ensures you can rebuild the same artifact every time\nyou or anyone else builds your code: Cargo will use only the versions of the\ndependencies you specified until you indicate otherwise. For example, say that\nnext week version 0.8.6 of the <code class=\"hljs\">rand</code> crate comes out, and that version\ncontains an important bug fix, but it also contains a regression that will\nbreak your code. To handle this, Rust creates the <em>Cargo.lock</em> file the first\ntime you run <code class=\"hljs\">cargo build</code>, so we now have this in the <em>guessing_game</em>\ndirectory.</p>\n<p>When you build a project for the first time, Cargo figures out all the versions\nof the dependencies that fit the criteria and then writes them to the\n<em>Cargo.lock</em> file. When you build your project in the future, Cargo will see\nthat the <em>Cargo.lock</em> file exists and will use the versions specified there\nrather than doing all the work of figuring out versions again. This lets you\nhave a reproducible build automatically. In other words, your project will\nremain at 0.8.5 until you explicitly upgrade, thanks to the <em>Cargo.lock</em> file.\nBecause the <em>Cargo.lock</em> file is important for reproducible builds, it‚Äôs often\nchecked into source control with the rest of the code in your project.</p>\n<h4 id=\"updating-a-crate-to-get-a-new-version\"><a class=\"header\" href=\"#updating-a-crate-to-get-a-new-version\">Updating a Crate to Get a New Version</a></h4>\n<p>When you <em>do</em> want to update a crate, Cargo provides the command <code class=\"hljs\">update</code>,\nwhich will ignore the <em>Cargo.lock</em> file and figure out all the latest versions\nthat fit your specifications in <em>Cargo.toml</em>. Cargo will then write those\nversions to the <em>Cargo.lock</em> file. In this case, Cargo will only look for\nversions greater than 0.8.5 and less than 0.9.0. If the <code class=\"hljs\">rand</code> crate has\nreleased the two new versions 0.8.6 and 0.9.0, you would see the following if\nyou ran <code class=\"hljs\">cargo update</code>:</p>\n<!-- manual-regeneration\ncd listings/ch02-guessing-game-tutorial/listing-02-02/\ncargo update\nassuming there is a new 0.8.x version of rand; otherwise use another update\nas a guide to creating the hypothetical output shown here -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo update</span>\n    Updating crates.io index\n    Updating rand v0.8.5 -&gt; v0.8.6\n</code></pre>\n<p>Cargo ignores the 0.9.0 release. At this point, you would also notice a change\nin your <em>Cargo.lock</em> file noting that the version of the <code class=\"hljs\">rand</code> crate you are\nnow using is 0.8.6. To use <code class=\"hljs\">rand</code> version 0.9.0 or any version in the 0.9.<em>x</em>\nseries, you‚Äôd have to update the <em>Cargo.toml</em> file to look like this instead:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">rand</span> = <span class=\"hljs-string\">\"0.9.0\"</span>\n</code></pre>\n<p>The next time you run <code class=\"hljs\">cargo build</code>, Cargo will update the registry of crates\navailable and reevaluate your <code class=\"hljs\">rand</code> requirements according to the new version\nyou have specified.</p>\n<p>There‚Äôs a lot more to say about <a href=\"https://doc.rust-lang.org/cargo/\">Cargo</a><!-- ignore --> and <a href=\"https://doc.rust-lang.org/cargo/reference/publishing.html\">its\necosystem</a><!-- ignore -->, which we‚Äôll discuss in Chapter 14, but\nfor now, that‚Äôs all you need to know. Cargo makes it very easy to reuse\nlibraries, so Rustaceans are able to write smaller projects that are assembled\nfrom a number of packages.</p>\n<h3 id=\"generating-a-random-number\"><a class=\"header\" href=\"#generating-a-random-number\">Generating a Random Number</a></h3>\n<p>Let‚Äôs start using <code class=\"hljs\">rand</code> to generate a number to guess. The next step is to\nupdate <em>src/main.rs</em>, as shown in Listing 2-3.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">use</span> std::io;\n<span class=\"hljs-keyword\">use</span> rand::Rng;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Guess the number!\"</span>);\n\n    <span class=\"hljs-keyword\">let</span> secret_number = rand::thread_rng().gen_range(<span class=\"hljs-number\">1</span>..=<span class=\"hljs-number\">100</span>);\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The secret number is: {secret_number}\"</span>);\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Please input your guess.\"</span>);\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> guess = <span class=\"hljs-built_in\">String</span>::new();\n\n    io::stdin()\n        .read_line(&amp;<span class=\"hljs-keyword\">mut</span> guess)\n        .expect(<span class=\"hljs-string\">\"Failed to read line\"</span>);\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"You guessed: {guess}\"</span>);\n}</code></pre>\n<p><span class=\"caption\">Listing 2-3: Adding code to generate a random\nnumber</span></p>\n<p>First we add the line <code class=\"hljs\">use rand::Rng;</code>. The <code class=\"hljs\">Rng</code> trait defines methods that\nrandom number generators implement, and this trait must be in scope for us to\nuse those methods. Chapter 10 will cover traits in detail.</p>\n<p>Next, we‚Äôre adding two lines in the middle. In the first line, we call the\n<code class=\"hljs\">rand::thread_rng</code> function that gives us the particular random number\ngenerator we‚Äôre going to use: one that is local to the current thread of\nexecution and is seeded by the operating system. Then we call the <code class=\"hljs\">gen_range</code>\nmethod on the random number generator. This method is defined by the <code class=\"hljs\">Rng</code>\ntrait that we brought into scope with the <code class=\"hljs\">use rand::Rng;</code> statement. The\n<code class=\"hljs\">gen_range</code> method takes a range expression as an argument and generates a\nrandom number in the range. The kind of range expression we‚Äôre using here takes\nthe form <code class=\"hljs\">start..=end</code> and is inclusive on the lower and upper bounds, so we\nneed to specify <code class=\"hljs\">1..=100</code> to request a number between 1 and 100.</p>\n<section class=\"note\" aria-role=\"note\">\n<p>Note: You won‚Äôt just know which traits to use and which methods and functions\nto call from a crate, so each crate has documentation with instructions for\nusing it. Another neat feature of Cargo is that running the <code class=\"hljs\">cargo doc --open</code> command will build documentation provided by all your dependencies\nlocally and open it in your browser. If you‚Äôre interested in other\nfunctionality in the <code class=\"hljs\">rand</code> crate, for example, run <code class=\"hljs\">cargo doc --open</code> and\nclick <code class=\"hljs\">rand</code> in the sidebar on the left.</p>\n</section>\n<p>The second new line prints the secret number. This is useful while we‚Äôre\ndeveloping the program to be able to test it, but we‚Äôll delete it from the\nfinal version. It‚Äôs not much of a game if the program prints the answer as soon\nas it starts!</p>\n<p>Try running the program a few times:</p>\n<!-- manual-regeneration\ncd listings/ch02-guessing-game-tutorial/listing-02-03/\ncargo run\n4\ncargo run\n5\n-->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 2.53s\n     Running `target/debug/guessing_game`\nGuess the number!\nThe secret number is: 7\nPlease input your guess.\n4\nYou guessed: 4\n<span class=\"hljs-meta\">\n$</span><span class=\"bash\"> cargo run</span>\n    Finished dev [unoptimized + debuginfo] target(s) in 0.02s\n     Running `target/debug/guessing_game`\nGuess the number!\nThe secret number is: 83\nPlease input your guess.\n5\nYou guessed: 5\n</code></pre>\n<p>You should get different random numbers, and they should all be numbers between\n1 and 100. Great job!</p>\n<h2 id=\"comparing-the-guess-to-the-secret-number\"><a class=\"header\" href=\"#comparing-the-guess-to-the-secret-number\">Comparing the Guess to the Secret Number</a></h2>\n<p>Now that we have user input and a random number, we can compare them. That step\nis shown in Listing 2-4. Note that this code won‚Äôt compile just yet, as we will\nexplain.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"hljs-keyword\">use</span> rand::Rng;\n<span class=\"hljs-keyword\">use</span> std::cmp::Ordering;\n<span class=\"hljs-keyword\">use</span> std::io;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Guess the number!\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> secret_number = rand::thread_rng().gen_range(<span class=\"hljs-number\">1</span>..=<span class=\"hljs-number\">100</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The secret number is: {secret_number}\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Please input your guess.\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> guess = <span class=\"hljs-built_in\">String</span>::new();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    io::stdin()\n</span><span class=\"boring\">        .read_line(&amp;<span class=\"hljs-keyword\">mut</span> guess)\n</span><span class=\"boring\">        .expect(<span class=\"hljs-string\">\"Failed to read line\"</span>);\n</span>\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"You guessed: {guess}\"</span>);\n\n    <span class=\"hljs-keyword\">match</span> guess.cmp(&amp;secret_number) {\n        Ordering::Less =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Too small!\"</span>),\n        Ordering::Greater =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Too big!\"</span>),\n        Ordering::Equal =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"You win!\"</span>),\n    }\n}</code></pre>\n<p><span class=\"caption\">Listing 2-4: Handling the possible return values of\ncomparing two numbers</span></p>\n<p>First we add another <code class=\"hljs\">use</code> statement, bringing a type called\n<code class=\"hljs\">std::cmp::Ordering</code> into scope from the standard library. The <code class=\"hljs\">Ordering</code> type\nis another enum and has the variants <code class=\"hljs\">Less</code>, <code class=\"hljs\">Greater</code>, and <code class=\"hljs\">Equal</code>. These are\nthe three outcomes that are possible when you compare two values.</p>\n<p>Then we add five new lines at the bottom that use the <code class=\"hljs\">Ordering</code> type. The\n<code class=\"hljs\">cmp</code> method compares two values and can be called on anything that can be\ncompared. It takes a reference to whatever you want to compare with: here it‚Äôs\ncomparing <code class=\"hljs\">guess</code> to <code class=\"hljs\">secret_number</code>. Then it returns a variant of the\n<code class=\"hljs\">Ordering</code> enum we brought into scope with the <code class=\"hljs\">use</code> statement. We use a\n<a href=\"ch06-02-match.html\"><code class=\"hljs\">match</code></a><!-- ignore --> expression to decide what to do next based on\nwhich variant of <code class=\"hljs\">Ordering</code> was returned from the call to <code class=\"hljs\">cmp</code> with the values\nin <code class=\"hljs\">guess</code> and <code class=\"hljs\">secret_number</code>.</p>\n<p>A <code class=\"hljs\">match</code> expression is made up of <em>arms</em>. An arm consists of a <em>pattern</em> to\nmatch against, and the code that should be run if the value given to <code class=\"hljs\">match</code>\nfits that arm‚Äôs pattern. Rust takes the value given to <code class=\"hljs\">match</code> and looks\nthrough each arm‚Äôs pattern in turn. Patterns and the <code class=\"hljs\">match</code> construct are\npowerful Rust features: they let you express a variety of situations your code\nmight encounter and they make sure you handle them all. These features will be\ncovered in detail in Chapter 6 and Chapter 18, respectively.</p>\n<p>Let‚Äôs walk through an example with the <code class=\"hljs\">match</code> expression we use here. Say that\nthe user has guessed 50 and the randomly generated secret number this time is\n38.</p>\n<p>When the code compares 50 to 38, the <code class=\"hljs\">cmp</code> method will return\n<code class=\"hljs\">Ordering::Greater</code> because 50 is greater than 38. The <code class=\"hljs\">match</code> expression gets\nthe <code class=\"hljs\">Ordering::Greater</code> value and starts checking each arm‚Äôs pattern. It looks\nat the first arm‚Äôs pattern, <code class=\"hljs\">Ordering::Less</code>, and sees that the value\n<code class=\"hljs\">Ordering::Greater</code> does not match <code class=\"hljs\">Ordering::Less</code>, so it ignores the code in\nthat arm and moves to the next arm. The next arm‚Äôs pattern is\n<code class=\"hljs\">Ordering::Greater</code>, which <em>does</em> match <code class=\"hljs\">Ordering::Greater</code>! The associated\ncode in that arm will execute and print <code class=\"hljs\">Too big!</code> to the screen. The <code class=\"hljs\">match</code>\nexpression ends after the first successful match, so it won‚Äôt look at the last\narm in this scenario.</p>\n<p>However, the code in Listing 2-4 won‚Äôt compile yet. Let‚Äôs try it:</p>\n<!--\nThe error numbers in this output should be that of the code **WITHOUT** the\nanchor or snip comments\n-->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo build</span>\n   Compiling libc v0.2.86\n   Compiling getrandom v0.2.2\n   Compiling cfg-if v1.0.0\n   Compiling ppv-lite86 v0.2.10\n   Compiling rand_core v0.6.2\n   Compiling rand_chacha v0.3.0\n   Compiling rand v0.8.5\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\nerror[E0308]: mismatched types\n<span class=\"hljs-meta\">  --&gt;</span><span class=\"bash\"> src/main.rs:22:21</span>\n   |\n22 |     match guess.cmp(&amp;secret_number) {\n   |                 --- ^^^^^^^^^^^^^^ expected `&amp;String`, found `&amp;{integer}`\n   |                 |\n   |                 arguments to this method are incorrect\n   |\n   = note: expected reference `&amp;String`\n              found reference `&amp;{integer}`\nnote: method defined here\n<span class=\"hljs-meta\">  --&gt;</span><span class=\"bash\"> /rustc/9b00956e56009bab2aa15d7bff10916599e3d6d6/library/core/src/cmp.rs:836:8</span>\n\nFor more information about this error, try `rustc --explain E0308`.\nerror: could not compile `guessing_game` (bin \"guessing_game\") due to 1 previous error\n</code></pre>\n<p>The core of the error states that there are <em>mismatched types</em>. Rust has a\nstrong, static type system. However, it also has type inference. When we wrote\n<code class=\"hljs\">let mut guess = String::new()</code>, Rust was able to infer that <code class=\"hljs\">guess</code> should be\na <code class=\"hljs\">String</code> and didn‚Äôt make us write the type. The <code class=\"hljs\">secret_number</code>, on the other\nhand, is a number type. A few of Rust‚Äôs number types can have a value between 1\nand 100: <code class=\"hljs\">i32</code>, a 32-bit number; <code class=\"hljs\">u32</code>, an unsigned 32-bit number; <code class=\"hljs\">i64</code>, a\n64-bit number; as well as others. Unless otherwise specified, Rust defaults to\nan <code class=\"hljs\">i32</code>, which is the type of <code class=\"hljs\">secret_number</code> unless you add type information\nelsewhere that would cause Rust to infer a different numerical type. The reason\nfor the error is that Rust cannot compare a string and a number type.</p>\n<p>Ultimately, we want to convert the <code class=\"hljs\">String</code> the program reads as input into a\nnumber type so we can compare it numerically to the secret number. We do so by\nadding this line to the <code class=\"hljs\">main</code> function body:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> rand::Rng;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::cmp::Ordering;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::io;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Guess the number!\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> secret_number = rand::thread_rng().gen_range(<span class=\"hljs-number\">1</span>..=<span class=\"hljs-number\">100</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The secret number is: {secret_number}\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Please input your guess.\"</span>);\n</span><span class=\"boring\">\n</span>    <span class=\"hljs-comment\">// --snip--</span>\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> guess = <span class=\"hljs-built_in\">String</span>::new();\n\n    io::stdin()\n        .read_line(&amp;<span class=\"hljs-keyword\">mut</span> guess)\n        .expect(<span class=\"hljs-string\">\"Failed to read line\"</span>);\n\n    <span class=\"hljs-keyword\">let</span> guess: <span class=\"hljs-built_in\">u32</span> = guess.trim().parse().expect(<span class=\"hljs-string\">\"Please type a number!\"</span>);\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"You guessed: {guess}\"</span>);\n\n    <span class=\"hljs-keyword\">match</span> guess.cmp(&amp;secret_number) {\n        Ordering::Less =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Too small!\"</span>),\n        Ordering::Greater =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Too big!\"</span>),\n        Ordering::Equal =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"You win!\"</span>),\n    }\n<span class=\"boring\">}</span></code></pre>\n<p>The line is:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">let</span> guess: <span class=\"hljs-built_in\">u32</span> = guess.trim().parse().expect(<span class=\"hljs-string\">\"Please type a number!\"</span>);</code></pre>\n<p>We create a variable named <code class=\"hljs\">guess</code>. But wait, doesn‚Äôt the program already have\na variable named <code class=\"hljs\">guess</code>? It does, but helpfully Rust allows us to shadow the\nprevious value of <code class=\"hljs\">guess</code> with a new one. <em>Shadowing</em> lets us reuse the <code class=\"hljs\">guess</code>\nvariable name rather than forcing us to create two unique variables, such as\n<code class=\"hljs\">guess_str</code> and <code class=\"hljs\">guess</code>, for example. We‚Äôll cover this in more detail in\n<a href=\"ch03-01-variables-and-mutability.html#shadowing\">Chapter 3</a><!-- ignore -->, but for now, know that this feature is\noften used when you want to convert a value from one type to another type.</p>\n<p>We bind this new variable to the expression <code class=\"hljs\">guess.trim().parse()</code>. The <code class=\"hljs\">guess</code>\nin the expression refers to the original <code class=\"hljs\">guess</code> variable that contained the\ninput as a string. The <code class=\"hljs\">trim</code> method on a <code class=\"hljs\">String</code> instance will eliminate any\nwhitespace at the beginning and end, which we must do to be able to compare the\nstring to the <code class=\"hljs\">u32</code>, which can only contain numerical data. The user must press\n<kbd>enter</kbd> to satisfy <code class=\"hljs\">read_line</code> and input their guess, which adds a\nnewline character to the string. For example, if the user types <kbd>5</kbd> and\npresses <kbd>enter</kbd>, <code class=\"hljs\">guess</code> looks like this: <code class=\"hljs\">5\\n</code>. The <code class=\"hljs\">\\n</code> represents\n‚Äúnewline.‚Äù (On Windows, pressing <kbd>enter</kbd> results in a carriage return\nand a newline, <code class=\"hljs\">\\r\\n</code>.) The <code class=\"hljs\">trim</code> method eliminates <code class=\"hljs\">\\n</code> or <code class=\"hljs\">\\r\\n</code>, resulting\nin just <code class=\"hljs\">5</code>.</p>\n<p>The <a href=\"../std/primitive.str.html#method.parse\"><code class=\"hljs\">parse</code> method on strings</a><!-- ignore --> converts a string to\nanother type. Here, we use it to convert from a string to a number. We need to\ntell Rust the exact number type we want by using <code class=\"hljs\">let guess: u32</code>. The colon\n(<code class=\"hljs\">:</code>) after <code class=\"hljs\">guess</code> tells Rust we‚Äôll annotate the variable‚Äôs type. Rust has a\nfew built-in number types; the <code class=\"hljs\">u32</code> seen here is an unsigned, 32-bit integer.\nIt‚Äôs a good default choice for a small positive number. You‚Äôll learn about\nother number types in <a href=\"ch03-02-data-types.html#integer-types\">Chapter 3</a><!-- ignore -->.</p>\n<p>Additionally, the <code class=\"hljs\">u32</code> annotation in this example program and the comparison\nwith <code class=\"hljs\">secret_number</code> means Rust will infer that <code class=\"hljs\">secret_number</code> should be a\n<code class=\"hljs\">u32</code> as well. So now the comparison will be between two values of the same\ntype!</p>\n<p>The <code class=\"hljs\">parse</code> method will only work on characters that can logically be converted\ninto numbers and so can easily cause errors. If, for example, the string\ncontained <code class=\"hljs\">Aüëç%</code>, there would be no way to convert that to a number. Because it\nmight fail, the <code class=\"hljs\">parse</code> method returns a <code class=\"hljs\">Result</code> type, much as the <code class=\"hljs\">read_line</code>\nmethod does (discussed earlier in <a href=\"ch02-00-guessing-game-tutorial.html#handling-potential-failure-with-result\">‚ÄúHandling Potential Failure with\n<code class=\"hljs\">Result</code>‚Äù</a><!-- ignore-->). We‚Äôll treat\nthis <code class=\"hljs\">Result</code> the same way by using the <code class=\"hljs\">expect</code> method again. If <code class=\"hljs\">parse</code>\nreturns an <code class=\"hljs\">Err</code> <code class=\"hljs\">Result</code> variant because it couldn‚Äôt create a number from the\nstring, the <code class=\"hljs\">expect</code> call will crash the game and print the message we give it.\nIf <code class=\"hljs\">parse</code> can successfully convert the string to a number, it will return the\n<code class=\"hljs\">Ok</code> variant of <code class=\"hljs\">Result</code>, and <code class=\"hljs\">expect</code> will return the number that we want from\nthe <code class=\"hljs\">Ok</code> value.</p>\n<p>Let‚Äôs run the program now:</p>\n<!-- manual-regeneration\ncd listings/ch02-guessing-game-tutorial/no-listing-03-convert-string-to-number/\ncargo run\n  76\n-->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.43s\n     Running `target/debug/guessing_game`\nGuess the number!\nThe secret number is: 58\nPlease input your guess.\n  76\nYou guessed: 76\nToo big!\n</code></pre>\n<p>Nice! Even though spaces were added before the guess, the program still figured\nout that the user guessed 76. Run the program a few times to verify the\ndifferent behavior with different kinds of input: guess the number correctly,\nguess a number that is too high, and guess a number that is too low.</p>\n<p>We have most of the game working now, but the user can make only one guess.\nLet‚Äôs change that by adding a loop!</p>\n<h2 id=\"allowing-multiple-guesses-with-looping\"><a class=\"header\" href=\"#allowing-multiple-guesses-with-looping\">Allowing Multiple Guesses with Looping</a></h2>\n<p>The <code class=\"hljs\">loop</code> keyword creates an infinite loop. We‚Äôll add a loop to give users\nmore chances at guessing the number:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> rand::Rng;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::cmp::Ordering;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::io;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Guess the number!\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> secret_number = rand::thread_rng().gen_range(<span class=\"hljs-number\">1</span>..=<span class=\"hljs-number\">100</span>);\n</span><span class=\"boring\">\n</span>    <span class=\"hljs-comment\">// --snip--</span>\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The secret number is: {secret_number}\"</span>);\n\n    <span class=\"hljs-keyword\">loop</span> {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Please input your guess.\"</span>);\n\n        <span class=\"hljs-comment\">// --snip--</span>\n\n<span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> guess = <span class=\"hljs-built_in\">String</span>::new();\n</span><span class=\"boring\">\n</span><span class=\"boring\">        io::stdin()\n</span><span class=\"boring\">            .read_line(&amp;<span class=\"hljs-keyword\">mut</span> guess)\n</span><span class=\"boring\">            .expect(<span class=\"hljs-string\">\"Failed to read line\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> guess: <span class=\"hljs-built_in\">u32</span> = guess.trim().parse().expect(<span class=\"hljs-string\">\"Please type a number!\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"You guessed: {guess}\"</span>);\n</span><span class=\"boring\">\n</span>        <span class=\"hljs-keyword\">match</span> guess.cmp(&amp;secret_number) {\n            Ordering::Less =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Too small!\"</span>),\n            Ordering::Greater =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Too big!\"</span>),\n            Ordering::Equal =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"You win!\"</span>),\n        }\n    }\n}</code></pre>\n<p>As you can see, we‚Äôve moved everything from the guess input prompt onward into\na loop. Be sure to indent the lines inside the loop another four spaces each\nand run the program again. The program will now ask for another guess forever,\nwhich actually introduces a new problem. It doesn‚Äôt seem like the user can quit!</p>\n<p>The user could always interrupt the program by using the keyboard shortcut\n<kbd>ctrl</kbd>-<kbd>c</kbd>. But there‚Äôs another way to escape this insatiable\nmonster, as mentioned in the <code class=\"hljs\">parse</code> discussion in <a href=\"ch02-00-guessing-game-tutorial.html#comparing-the-guess-to-the-secret-number\">‚ÄúComparing the Guess to the\nSecret Number‚Äù</a><!-- ignore -->: if\nthe user enters a non-number answer, the program will crash. We can take\nadvantage of that to allow the user to quit, as shown here:</p>\n<!-- manual-regeneration\ncd listings/ch02-guessing-game-tutorial/no-listing-04-looping/\ncargo run\n(too small guess)\n(too big guess)\n(correct guess)\nquit\n-->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 1.50s\n     Running `target/debug/guessing_game`\nGuess the number!\nThe secret number is: 59\nPlease input your guess.\n45\nYou guessed: 45\nToo small!\nPlease input your guess.\n60\nYou guessed: 60\nToo big!\nPlease input your guess.\n59\nYou guessed: 59\nYou win!\nPlease input your guess.\nquit\nthread 'main' panicked at 'Please type a number!: ParseIntError { kind: InvalidDigit }', src/main.rs:28:47\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre>\n<p>Typing <code class=\"hljs\">quit</code> will quit the game, but as you‚Äôll notice, so will entering any\nother non-number input. This is suboptimal, to say the least; we want the game\nto also stop when the correct number is guessed.</p>\n<h3 id=\"quitting-after-a-correct-guess\"><a class=\"header\" href=\"#quitting-after-a-correct-guess\">Quitting After a Correct Guess</a></h3>\n<p>Let‚Äôs program the game to quit when the user wins by adding a <code class=\"hljs\">break</code> statement:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> rand::Rng;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::cmp::Ordering;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::io;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Guess the number!\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> secret_number = rand::thread_rng().gen_range(<span class=\"hljs-number\">1</span>..=<span class=\"hljs-number\">100</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The secret number is: {secret_number}\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">loop</span> {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Please input your guess.\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> guess = <span class=\"hljs-built_in\">String</span>::new();\n</span><span class=\"boring\">\n</span><span class=\"boring\">        io::stdin()\n</span><span class=\"boring\">            .read_line(&amp;<span class=\"hljs-keyword\">mut</span> guess)\n</span><span class=\"boring\">            .expect(<span class=\"hljs-string\">\"Failed to read line\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> guess: <span class=\"hljs-built_in\">u32</span> = guess.trim().parse().expect(<span class=\"hljs-string\">\"Please type a number!\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"You guessed: {guess}\"</span>);\n</span><span class=\"boring\">\n</span>        <span class=\"hljs-comment\">// --snip--</span>\n\n        <span class=\"hljs-keyword\">match</span> guess.cmp(&amp;secret_number) {\n            Ordering::Less =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Too small!\"</span>),\n            Ordering::Greater =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Too big!\"</span>),\n            Ordering::Equal =&gt; {\n                <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"You win!\"</span>);\n                <span class=\"hljs-keyword\">break</span>;\n            }\n        }\n    }\n}</code></pre>\n<p>Adding the <code class=\"hljs\">break</code> line after <code class=\"hljs\">You win!</code> makes the program exit the loop when\nthe user guesses the secret number correctly. Exiting the loop also means\nexiting the program, because the loop is the last part of <code class=\"hljs\">main</code>.</p>\n<h3 id=\"handling-invalid-input\"><a class=\"header\" href=\"#handling-invalid-input\">Handling Invalid Input</a></h3>\n<p>To further refine the game‚Äôs behavior, rather than crashing the program when\nthe user inputs a non-number, let‚Äôs make the game ignore a non-number so the\nuser can continue guessing. We can do that by altering the line where <code class=\"hljs\">guess</code>\nis converted from a <code class=\"hljs\">String</code> to a <code class=\"hljs\">u32</code>, as shown in Listing 2-5.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> rand::Rng;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::cmp::Ordering;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::io;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Guess the number!\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> secret_number = rand::thread_rng().gen_range(<span class=\"hljs-number\">1</span>..=<span class=\"hljs-number\">100</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The secret number is: {secret_number}\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">loop</span> {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Please input your guess.\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> guess = <span class=\"hljs-built_in\">String</span>::new();\n</span><span class=\"boring\">\n</span>        <span class=\"hljs-comment\">// --snip--</span>\n\n        io::stdin()\n            .read_line(&amp;<span class=\"hljs-keyword\">mut</span> guess)\n            .expect(<span class=\"hljs-string\">\"Failed to read line\"</span>);\n\n        <span class=\"hljs-keyword\">let</span> guess: <span class=\"hljs-built_in\">u32</span> = <span class=\"hljs-keyword\">match</span> guess.trim().parse() {\n            <span class=\"hljs-literal\">Ok</span>(num) =&gt; num,\n            <span class=\"hljs-literal\">Err</span>(_) =&gt; <span class=\"hljs-keyword\">continue</span>,\n        };\n\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"You guessed: {guess}\"</span>);\n\n        <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">match</span> guess.cmp(&amp;secret_number) {\n</span><span class=\"boring\">            Ordering::Less =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Too small!\"</span>),\n</span><span class=\"boring\">            Ordering::Greater =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Too big!\"</span>),\n</span><span class=\"boring\">            Ordering::Equal =&gt; {\n</span><span class=\"boring\">                <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"You win!\"</span>);\n</span><span class=\"boring\">                <span class=\"hljs-keyword\">break</span>;\n</span><span class=\"boring\">            }\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre>\n<p><span class=\"caption\">Listing 2-5: Ignoring a non-number guess and asking for\nanother guess instead of crashing the program</span></p>\n<p>We switch from an <code class=\"hljs\">expect</code> call to a <code class=\"hljs\">match</code> expression to move from crashing\non an error to handling the error. Remember that <code class=\"hljs\">parse</code> returns a <code class=\"hljs\">Result</code>\ntype and <code class=\"hljs\">Result</code> is an enum that has the variants <code class=\"hljs\">Ok</code> and <code class=\"hljs\">Err</code>. We‚Äôre using\na <code class=\"hljs\">match</code> expression here, as we did with the <code class=\"hljs\">Ordering</code> result of the <code class=\"hljs\">cmp</code>\nmethod.</p>\n<p>If <code class=\"hljs\">parse</code> is able to successfully turn the string into a number, it will\nreturn an <code class=\"hljs\">Ok</code> value that contains the resultant number. That <code class=\"hljs\">Ok</code> value will\nmatch the first arm‚Äôs pattern, and the <code class=\"hljs\">match</code> expression will just return the\n<code class=\"hljs\">num</code> value that <code class=\"hljs\">parse</code> produced and put inside the <code class=\"hljs\">Ok</code> value. That number\nwill end up right where we want it in the new <code class=\"hljs\">guess</code> variable we‚Äôre creating.</p>\n<p>If <code class=\"hljs\">parse</code> is <em>not</em> able to turn the string into a number, it will return an\n<code class=\"hljs\">Err</code> value that contains more information about the error. The <code class=\"hljs\">Err</code> value\ndoes not match the <code class=\"hljs\">Ok(num)</code> pattern in the first <code class=\"hljs\">match</code> arm, but it does\nmatch the <code class=\"hljs\">Err(_)</code> pattern in the second arm. The underscore, <code class=\"hljs\">_</code>, is a\ncatchall value; in this example, we‚Äôre saying we want to match all <code class=\"hljs\">Err</code>\nvalues, no matter what information they have inside them. So the program will\nexecute the second arm‚Äôs code, <code class=\"hljs\">continue</code>, which tells the program to go to the\nnext iteration of the <code class=\"hljs\">loop</code> and ask for another guess. So, effectively, the\nprogram ignores all errors that <code class=\"hljs\">parse</code> might encounter!</p>\n<p>Now everything in the program should work as expected. Let‚Äôs try it:</p>\n<!-- manual-regeneration\ncd listings/ch02-guessing-game-tutorial/listing-02-05/\ncargo run\n(too small guess)\n(too big guess)\nfoo\n(correct guess)\n-->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 4.45s\n     Running `target/debug/guessing_game`\nGuess the number!\nThe secret number is: 61\nPlease input your guess.\n10\nYou guessed: 10\nToo small!\nPlease input your guess.\n99\nYou guessed: 99\nToo big!\nPlease input your guess.\nfoo\nPlease input your guess.\n61\nYou guessed: 61\nYou win!\n</code></pre>\n<p>Awesome! With one tiny final tweak, we will finish the guessing game. Recall\nthat the program is still printing the secret number. That worked well for\ntesting, but it ruins the game. Let‚Äôs delete the <code class=\"hljs\">println!</code> that outputs the\nsecret number. Listing 2-6 shows the final code.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">use</span> rand::Rng;\n<span class=\"hljs-keyword\">use</span> std::cmp::Ordering;\n<span class=\"hljs-keyword\">use</span> std::io;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Guess the number!\"</span>);\n\n    <span class=\"hljs-keyword\">let</span> secret_number = rand::thread_rng().gen_range(<span class=\"hljs-number\">1</span>..=<span class=\"hljs-number\">100</span>);\n\n    <span class=\"hljs-keyword\">loop</span> {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Please input your guess.\"</span>);\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> guess = <span class=\"hljs-built_in\">String</span>::new();\n\n        io::stdin()\n            .read_line(&amp;<span class=\"hljs-keyword\">mut</span> guess)\n            .expect(<span class=\"hljs-string\">\"Failed to read line\"</span>);\n\n        <span class=\"hljs-keyword\">let</span> guess: <span class=\"hljs-built_in\">u32</span> = <span class=\"hljs-keyword\">match</span> guess.trim().parse() {\n            <span class=\"hljs-literal\">Ok</span>(num) =&gt; num,\n            <span class=\"hljs-literal\">Err</span>(_) =&gt; <span class=\"hljs-keyword\">continue</span>,\n        };\n\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"You guessed: {guess}\"</span>);\n\n        <span class=\"hljs-keyword\">match</span> guess.cmp(&amp;secret_number) {\n            Ordering::Less =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Too small!\"</span>),\n            Ordering::Greater =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Too big!\"</span>),\n            Ordering::Equal =&gt; {\n                <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"You win!\"</span>);\n                <span class=\"hljs-keyword\">break</span>;\n            }\n        }\n    }\n}</code></pre>\n<p><span class=\"caption\">Listing 2-6: Complete guessing game code</span></p>\n<p>At this point, you‚Äôve successfully built the guessing game. Congratulations!</p>\n<h2 id=\"summary-1\"><a class=\"header\" href=\"#summary-1\">Summary</a></h2>\n<p>This project was a hands-on way to introduce you to many new Rust concepts:\n<code class=\"hljs\">let</code>, <code class=\"hljs\">match</code>, functions, the use of external crates, and more. In the next\nfew chapters, you‚Äôll learn about these concepts in more detail. Chapter 3\ncovers concepts that most programming languages have, such as variables, data\ntypes, and functions, and shows how to use them in Rust. Chapter 4 explores\nownership, a feature that makes Rust different from other languages. Chapter 5\ndiscusses structs and method syntax, and Chapter 6 explains how enums work.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"common-programming-concepts\"><a class=\"header\" href=\"#common-programming-concepts\">Common Programming Concepts</a></h1>\n<p>This chapter covers concepts that appear in almost every programming language\nand how they work in Rust. Many programming languages have much in common at\ntheir core. None of the concepts presented in this chapter are unique to Rust,\nbut we‚Äôll discuss them in the context of Rust and explain the conventions\naround using these concepts.</p>\n<p>Specifically, you‚Äôll learn about variables, basic types, functions, comments,\nand control flow. These foundations will be in every Rust program, and learning\nthem early will give you a strong core to start from.</p>\n<section class=\"note\" aria-role=\"note\">\n<h4 id=\"keywords\"><a class=\"header\" href=\"#keywords\">Keywords</a></h4>\n<p>The Rust language has a set of <em>keywords</em> that are reserved for use by the\nlanguage only, much as in other languages. Keep in mind that you cannot use\nthese words as names of variables or functions. Most of the keywords have\nspecial meanings, and you‚Äôll be using them to do various tasks in your Rust\nprograms; a few have no current functionality associated with them but have\nbeen reserved for functionality that might be added to Rust in the future. You\ncan find a list of the keywords in <a href=\"appendix-01-keywords.html\">Appendix A</a><!-- ignore -->.</p>\n</section><div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"variables-and-mutability\"><a class=\"header\" href=\"#variables-and-mutability\">Variables and Mutability</a></h2>\n<p>As mentioned in the <a href=\"ch02-00-guessing-game-tutorial.html#storing-values-with-variables\">‚ÄúStoring Values with\nVariables‚Äù</a><!-- ignore --> section, by default,\nvariables are immutable. This is one of many nudges Rust gives you to write\nyour code in a way that takes advantage of the safety and easy concurrency that\nRust offers. However, you still have the option to make your variables mutable.\nLet‚Äôs explore how and why Rust encourages you to favor immutability and why\nsometimes you might want to opt out.</p>\n<p>When a variable is immutable, once a value is bound to a name, you can‚Äôt change\nthat value. To illustrate this, generate a new project called <em>variables</em> in\nyour <em>projects</em> directory by using <code class=\"hljs\">cargo new variables</code>.</p>\n<p>Then, in your new <em>variables</em> directory, open <em>src/main.rs</em> and replace its\ncode with the following code, which won‚Äôt compile just yet:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">5</span>;\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The value of x is: {x}\"</span>);\n    x = <span class=\"hljs-number\">6</span>;\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The value of x is: {x}\"</span>);\n}</code></pre>\n<p>Save and run the program using <code class=\"hljs\">cargo run</code>. You should receive an error message\nregarding an immutability error, as shown in this output:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling variables v0.1.0 (file:///projects/variables)\nerror[E0384]: cannot assign twice to immutable variable `x`\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/main.rs:4:5</span>\n  |\n2 |     let x = 5;\n  |         -\n  |         |\n  |         first assignment to `x`\n  |         help: consider making this binding mutable: `mut x`\n3 |     println!(\"The value of x is: {x}\");\n4 |     x = 6;\n  |     ^^^^^ cannot assign twice to immutable variable\n\nFor more information about this error, try `rustc --explain E0384`.\nerror: could not compile `variables` (bin \"variables\") due to 1 previous error\n</code></pre>\n<p>This example shows how the compiler helps you find errors in your programs.\nCompiler errors can be frustrating, but really they only mean your program\nisn‚Äôt safely doing what you want it to do yet; they do <em>not</em> mean that you‚Äôre\nnot a good programmer! Experienced Rustaceans still get compiler errors.</p>\n<p>You received the error message <code class=\"hljs\">cannot assign twice to immutable variable `x`</code> because you tried to assign a second value to the immutable <code class=\"hljs\">x</code> variable.</p>\n<p>It‚Äôs important that we get compile-time errors when we attempt to change a\nvalue that‚Äôs designated as immutable because this very situation can lead to\nbugs. If one part of our code operates on the assumption that a value will\nnever change and another part of our code changes that value, it‚Äôs possible\nthat the first part of the code won‚Äôt do what it was designed to do. The cause\nof this kind of bug can be difficult to track down after the fact, especially\nwhen the second piece of code changes the value only <em>sometimes</em>. The Rust\ncompiler guarantees that when you state that a value won‚Äôt change, it really\nwon‚Äôt change, so you don‚Äôt have to keep track of it yourself. Your code is thus\neasier to reason through.</p>\n<p>But mutability can be very useful, and can make code more convenient to write.\nAlthough variables are immutable by default, you can make them mutable by\nadding <code class=\"hljs\">mut</code> in front of the variable name as you did in <a href=\"ch02-00-guessing-game-tutorial.html#storing-values-with-variables\">Chapter\n2</a><!-- ignore -->. Adding <code class=\"hljs\">mut</code> also conveys\nintent to future readers of the code by indicating that other parts of the code\nwill be changing this variable‚Äôs value.</p>\n<p>For example, let‚Äôs change <em>src/main.rs</em> to the following:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> x = <span class=\"hljs-number\">5</span>;\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The value of x is: {x}\"</span>);\n    x = <span class=\"hljs-number\">6</span>;\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The value of x is: {x}\"</span>);\n}</code></pre></pre>\n<p>When we run the program now, we get this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling variables v0.1.0 (file:///projects/variables)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.30s\n     Running `target/debug/variables`\nThe value of x is: 5\nThe value of x is: 6\n</code></pre>\n<p>We‚Äôre allowed to change the value bound to <code class=\"hljs\">x</code> from <code class=\"hljs\">5</code> to <code class=\"hljs\">6</code> when <code class=\"hljs\">mut</code> is\nused. Ultimately, deciding whether to use mutability or not is up to you and\ndepends on what you think is clearest in that particular situation.</p>\n<h3 id=\"constants\"><a class=\"header\" href=\"#constants\">Constants</a></h3>\n<p>Like immutable variables, <em>constants</em> are values that are bound to a name and\nare not allowed to change, but there are a few differences between constants\nand variables.</p>\n<p>First, you aren‚Äôt allowed to use <code class=\"hljs\">mut</code> with constants. Constants aren‚Äôt just\nimmutable by default‚Äîthey‚Äôre always immutable. You declare constants using the\n<code class=\"hljs\">const</code> keyword instead of the <code class=\"hljs\">let</code> keyword, and the type of the value <em>must</em>\nbe annotated. We‚Äôll cover types and type annotations in the next section,\n<a href=\"ch03-02-data-types.html#data-types\">‚ÄúData Types‚Äù</a><!-- ignore -->, so don‚Äôt worry about the details\nright now. Just know that you must always annotate the type.</p>\n<p>Constants can be declared in any scope, including the global scope, which makes\nthem useful for values that many parts of code need to know about.</p>\n<p>The last difference is that constants may be set only to a constant expression,\nnot the result of a value that could only be computed at runtime.</p>\n<p>Here‚Äôs an example of a constant declaration:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">const</span> THREE_HOURS_IN_SECONDS: <span class=\"hljs-built_in\">u32</span> = <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">3</span>;\n<span class=\"boring\">}</span></code></pre></pre>\n<p>The constant‚Äôs name is <code class=\"hljs\">THREE_HOURS_IN_SECONDS</code> and its value is set to the\nresult of multiplying 60 (the number of seconds in a minute) by 60 (the number\nof minutes in an hour) by 3 (the number of hours we want to count in this\nprogram). Rust‚Äôs naming convention for constants is to use all uppercase with\nunderscores between words. The compiler is able to evaluate a limited set of\noperations at compile time, which lets us choose to write out this value in a\nway that‚Äôs easier to understand and verify, rather than setting this constant\nto the value 10,800. See the <a href=\"../reference/const_eval.html\">Rust Reference‚Äôs section on constant\nevaluation</a> for more information on what operations can be used\nwhen declaring constants.</p>\n<p>Constants are valid for the entire time a program runs, within the scope in\nwhich they were declared. This property makes constants useful for values in\nyour application domain that multiple parts of the program might need to know\nabout, such as the maximum number of points any player of a game is allowed to\nearn, or the speed of light.</p>\n<p>Naming hardcoded values used throughout your program as constants is useful in\nconveying the meaning of that value to future maintainers of the code. It also\nhelps to have only one place in your code you would need to change if the\nhardcoded value needed to be updated in the future.</p>\n<h3 id=\"shadowing\"><a class=\"header\" href=\"#shadowing\">Shadowing</a></h3>\n<p>As you saw in the guessing game tutorial in <a href=\"ch02-00-guessing-game-tutorial.html#comparing-the-guess-to-the-secret-number\">Chapter\n2</a><!-- ignore -->, you can declare a\nnew variable with the same name as a previous variable. Rustaceans say that the\nfirst variable is <em>shadowed</em> by the second, which means that the second\nvariable is what the compiler will see when you use the name of the variable.\nIn effect, the second variable overshadows the first, taking any uses of the\nvariable name to itself until either it itself is shadowed or the scope ends.\nWe can shadow a variable by using the same variable‚Äôs name and repeating the\nuse of the <code class=\"hljs\">let</code> keyword as follows:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">5</span>;\n\n    <span class=\"hljs-keyword\">let</span> x = x + <span class=\"hljs-number\">1</span>;\n\n    {\n        <span class=\"hljs-keyword\">let</span> x = x * <span class=\"hljs-number\">2</span>;\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The value of x in the inner scope is: {x}\"</span>);\n    }\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The value of x is: {x}\"</span>);\n}</code></pre></pre>\n<p>This program first binds <code class=\"hljs\">x</code> to a value of <code class=\"hljs\">5</code>. Then it creates a new variable\n<code class=\"hljs\">x</code> by repeating <code class=\"hljs\">let x =</code>, taking the original value and adding <code class=\"hljs\">1</code> so the\nvalue of <code class=\"hljs\">x</code> is then <code class=\"hljs\">6</code>. Then, within an inner scope created with the curly\nbrackets, the third <code class=\"hljs\">let</code> statement also shadows <code class=\"hljs\">x</code> and creates a new\nvariable, multiplying the previous value by <code class=\"hljs\">2</code> to give <code class=\"hljs\">x</code> a value of <code class=\"hljs\">12</code>.\nWhen that scope is over, the inner shadowing ends and <code class=\"hljs\">x</code> returns to being <code class=\"hljs\">6</code>.\nWhen we run this program, it will output the following:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling variables v0.1.0 (file:///projects/variables)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.31s\n     Running `target/debug/variables`\nThe value of x in the inner scope is: 12\nThe value of x is: 6\n</code></pre>\n<p>Shadowing is different from marking a variable as <code class=\"hljs\">mut</code> because we‚Äôll get a\ncompile-time error if we accidentally try to reassign to this variable without\nusing the <code class=\"hljs\">let</code> keyword. By using <code class=\"hljs\">let</code>, we can perform a few transformations\non a value but have the variable be immutable after those transformations have\nbeen completed.</p>\n<p>The other difference between <code class=\"hljs\">mut</code> and shadowing is that because we‚Äôre\neffectively creating a new variable when we use the <code class=\"hljs\">let</code> keyword again, we can\nchange the type of the value but reuse the same name. For example, say our\nprogram asks a user to show how many spaces they want between some text by\ninputting space characters, and then we want to store that input as a number:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> spaces = <span class=\"hljs-string\">\"   \"</span>;\n    <span class=\"hljs-keyword\">let</span> spaces = spaces.len();\n<span class=\"boring\">}</span></code></pre></pre>\n<p>The first <code class=\"hljs\">spaces</code> variable is a string type and the second <code class=\"hljs\">spaces</code> variable\nis a number type. Shadowing thus spares us from having to come up with\ndifferent names, such as <code class=\"hljs\">spaces_str</code> and <code class=\"hljs\">spaces_num</code>; instead, we can reuse\nthe simpler <code class=\"hljs\">spaces</code> name. However, if we try to use <code class=\"hljs\">mut</code> for this, as shown\nhere, we‚Äôll get a compile-time error:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-small\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> spaces = <span class=\"hljs-string\">\"   \"</span>;\n    spaces = spaces.len();\n<span class=\"boring\">}</span></code></pre>\n<p>The error says we‚Äôre not allowed to mutate a variable‚Äôs type:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling variables v0.1.0 (file:///projects/variables)\nerror[E0308]: mismatched types\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/main.rs:3:14</span>\n  |\n2 |     let mut spaces = \"   \";\n  |                      ----- expected due to this value\n3 |     spaces = spaces.len();\n  |              ^^^^^^^^^^^^ expected `&amp;str`, found `usize`\n\nFor more information about this error, try `rustc --explain E0308`.\nerror: could not compile `variables` (bin \"variables\") due to 1 previous error\n</code></pre>\n<p>Now that we‚Äôve explored how variables work, let‚Äôs look at more data types they\ncan have.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"data-types\"><a class=\"header\" href=\"#data-types\">Data Types</a></h2>\n<p>Every value in Rust is of a certain <em>data type</em>, which tells Rust what kind of\ndata is being specified so it knows how to work with that data. We‚Äôll look at\ntwo data type subsets: scalar and compound.</p>\n<p>Keep in mind that Rust is a <em>statically typed</em> language, which means that it\nmust know the types of all variables at compile time. The compiler can usually\ninfer what type we want to use based on the value and how we use it. In cases\nwhen many types are possible, such as when we converted a <code class=\"hljs\">String</code> to a numeric\ntype using <code class=\"hljs\">parse</code> in the <a href=\"ch02-00-guessing-game-tutorial.html#comparing-the-guess-to-the-secret-number\">‚ÄúComparing the Guess to the Secret\nNumber‚Äù</a><!-- ignore --> section in\nChapter 2, we must add a type annotation, like this:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> guess: <span class=\"hljs-built_in\">u32</span> = <span class=\"hljs-string\">\"42\"</span>.parse().expect(<span class=\"hljs-string\">\"Not a number!\"</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<p>If we don‚Äôt add the <code class=\"hljs\">: u32</code> type annotation shown in the preceding code, Rust\nwill display the following error, which means the compiler needs more\ninformation from us to know which type we want to use:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo build</span>\n   Compiling no_type_annotations v0.1.0 (file:///projects/no_type_annotations)\nerror[E0284]: type annotations needed\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/main.rs:2:9</span>\n  |\n2 |     let guess = \"42\".parse().expect(\"Not a number!\");\n  |         ^^^^^        ----- type must be known at this point\n  |\n  = note: cannot satisfy `&lt;_ as FromStr&gt;::Err == _`\nhelp: consider giving `guess` an explicit type\n  |\n2 |     let guess: /* Type */ = \"42\".parse().expect(\"Not a number!\");\n  |              ++++++++++++\n\nFor more information about this error, try `rustc --explain E0284`.\nerror: could not compile `no_type_annotations` (bin \"no_type_annotations\") due to 1 previous error\n</code></pre>\n<p>You‚Äôll see different type annotations for other data types.</p>\n<h3 id=\"scalar-types\"><a class=\"header\" href=\"#scalar-types\">Scalar Types</a></h3>\n<p>A <em>scalar</em> type represents a single value. Rust has four primary scalar types:\nintegers, floating-point numbers, Booleans, and characters. You may recognize\nthese from other programming languages. Let‚Äôs jump into how they work in Rust.</p>\n<h4 id=\"integer-types\"><a class=\"header\" href=\"#integer-types\">Integer Types</a></h4>\n<p>An <em>integer</em> is a number without a fractional component. We used one integer\ntype in Chapter 2, the <code class=\"hljs\">u32</code> type. This type declaration indicates that the\nvalue it‚Äôs associated with should be an unsigned integer (signed integer types\nstart with <code class=\"hljs\">i</code> instead of <code class=\"hljs\">u</code>) that takes up 32 bits of space. Table 3-1 shows\nthe built-in integer types in Rust. We can use any of these variants to declare\nthe type of an integer value.</p>\n<p><span class=\"caption\">Table 3-1: Integer Types in Rust</span></p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Length</th><th>Signed</th><th>Unsigned</th></tr></thead><tbody>\n<tr><td>8-bit</td><td><code class=\"hljs\">i8</code></td><td><code class=\"hljs\">u8</code></td></tr>\n<tr><td>16-bit</td><td><code class=\"hljs\">i16</code></td><td><code class=\"hljs\">u16</code></td></tr>\n<tr><td>32-bit</td><td><code class=\"hljs\">i32</code></td><td><code class=\"hljs\">u32</code></td></tr>\n<tr><td>64-bit</td><td><code class=\"hljs\">i64</code></td><td><code class=\"hljs\">u64</code></td></tr>\n<tr><td>128-bit</td><td><code class=\"hljs\">i128</code></td><td><code class=\"hljs\">u128</code></td></tr>\n<tr><td>arch</td><td><code class=\"hljs\">isize</code></td><td><code class=\"hljs\">usize</code></td></tr>\n</tbody></table>\n</div>\n<p>Each variant can be either signed or unsigned and has an explicit size.\n<em>Signed</em> and <em>unsigned</em> refer to whether it‚Äôs possible for the number to be\nnegative‚Äîin other words, whether the number needs to have a sign with it\n(signed) or whether it will only ever be positive and can therefore be\nrepresented without a sign (unsigned). It‚Äôs like writing numbers on paper: when\nthe sign matters, a number is shown with a plus sign or a minus sign; however,\nwhen it‚Äôs safe to assume the number is positive, it‚Äôs shown with no sign.\nSigned numbers are stored using <a href=\"https://en.wikipedia.org/wiki/Two%27s_complement\">two‚Äôs complement</a><!-- ignore\n--> representation.</p>\n<p>Each signed variant can store numbers from -(2<sup>n - 1</sup>) to 2<sup>n -\n1</sup> - 1 inclusive, where <em>n</em> is the number of bits that variant uses. So an\n<code class=\"hljs\">i8</code> can store numbers from -(2<sup>7</sup>) to 2<sup>7</sup> - 1, which equals\n-128 to 127. Unsigned variants can store numbers from 0 to 2<sup>n</sup> - 1,\nso a <code class=\"hljs\">u8</code> can store numbers from 0 to 2<sup>8</sup> - 1, which equals 0 to 255.</p>\n<p>Additionally, the <code class=\"hljs\">isize</code> and <code class=\"hljs\">usize</code> types depend on the architecture of the\ncomputer your program is running on, which is denoted in the table as ‚Äúarch‚Äù:\n64 bits if you‚Äôre on a 64-bit architecture and 32 bits if you‚Äôre on a 32-bit\narchitecture.</p>\n<p>You can write integer literals in any of the forms shown in Table 3-2. Note\nthat number literals that can be multiple numeric types allow a type suffix,\nsuch as <code class=\"hljs\">57u8</code>, to designate the type. Number literals can also use <code class=\"hljs\">_</code> as a\nvisual separator to make the number easier to read, such as <code class=\"hljs\">1_000</code>, which will\nhave the same value as if you had specified <code class=\"hljs\">1000</code>.</p>\n<p><span class=\"caption\">Table 3-2: Integer Literals in Rust</span></p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Number literals</th><th>Example</th></tr></thead><tbody>\n<tr><td>Decimal</td><td><code class=\"hljs\">98_222</code></td></tr>\n<tr><td>Hex</td><td><code class=\"hljs\">0xff</code></td></tr>\n<tr><td>Octal</td><td><code class=\"hljs\">0o77</code></td></tr>\n<tr><td>Binary</td><td><code class=\"hljs\">0b1111_0000</code></td></tr>\n<tr><td>Byte (<code class=\"hljs\">u8</code> only)</td><td><code class=\"hljs\">b'A'</code></td></tr>\n</tbody></table>\n</div>\n<p>So how do you know which type of integer to use? If you‚Äôre unsure, Rust‚Äôs\ndefaults are generally good places to start: integer types default to <code class=\"hljs\">i32</code>.\nThe primary situation in which you‚Äôd use <code class=\"hljs\">isize</code> or <code class=\"hljs\">usize</code> is when indexing\nsome sort of collection.</p>\n<section class=\"note\" aria-role=\"note\">\n<h5 id=\"integer-overflow\"><a class=\"header\" href=\"#integer-overflow\">Integer Overflow</a></h5>\n<p>Let‚Äôs say you have a variable of type <code class=\"hljs\">u8</code> that can hold values between 0 and\n255. If you try to change the variable to a value outside that range, such as\n256, <em>integer overflow</em> will occur, which can result in one of two behaviors.\nWhen you‚Äôre compiling in debug mode, Rust includes checks for integer overflow\nthat cause your program to <em>panic</em> at runtime if this behavior occurs. Rust\nuses the term <em>panicking</em> when a program exits with an error; we‚Äôll discuss\npanics in more depth in the <a href=\"ch09-01-unrecoverable-errors-with-panic.html\">‚ÄúUnrecoverable Errors with\n<code class=\"hljs\">panic!</code>‚Äù</a><!-- ignore --> section in Chapter\n9.</p>\n<p>When you‚Äôre compiling in release mode with the <code class=\"hljs\">--release</code> flag, Rust does\n<em>not</em> include checks for integer overflow that cause panics. Instead, if\noverflow occurs, Rust performs <em>two‚Äôs complement wrapping</em>. In short, values\ngreater than the maximum value the type can hold ‚Äúwrap around‚Äù to the minimum\nof the values the type can hold. In the case of a <code class=\"hljs\">u8</code>, the value 256 becomes\n0, the value 257 becomes 1, and so on. The program won‚Äôt panic, but the\nvariable will have a value that probably isn‚Äôt what you were expecting it to\nhave. Relying on integer overflow‚Äôs wrapping behavior is considered an error.</p>\n<p>To explicitly handle the possibility of overflow, you can use these families\nof methods provided by the standard library for primitive numeric types:</p>\n<ul>\n<li>Wrap in all modes with the <code class=\"hljs\">wrapping_*</code> methods, such as <code class=\"hljs\">wrapping_add</code>.</li>\n<li>Return the <code class=\"hljs\">None</code> value if there is overflow with the <code class=\"hljs\">checked_*</code> methods.</li>\n<li>Return the value and a boolean indicating whether there was overflow with\nthe <code class=\"hljs\">overflowing_*</code> methods.</li>\n<li>Saturate at the value‚Äôs minimum or maximum values with the <code class=\"hljs\">saturating_*</code>\nmethods.</li>\n</ul>\n</section>\n<h4 id=\"floating-point-types\"><a class=\"header\" href=\"#floating-point-types\">Floating-Point Types</a></h4>\n<p>Rust also has two primitive types for <em>floating-point numbers</em>, which are\nnumbers with decimal points. Rust‚Äôs floating-point types are <code class=\"hljs\">f32</code> and <code class=\"hljs\">f64</code>,\nwhich are 32 bits and 64 bits in size, respectively. The default type is <code class=\"hljs\">f64</code>\nbecause on modern CPUs, it‚Äôs roughly the same speed as <code class=\"hljs\">f32</code> but is capable of\nmore precision. All floating-point types are signed.</p>\n<p>Here‚Äôs an example that shows floating-point numbers in action:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">2.0</span>; <span class=\"hljs-comment\">// f64</span>\n\n    <span class=\"hljs-keyword\">let</span> y: <span class=\"hljs-built_in\">f32</span> = <span class=\"hljs-number\">3.0</span>; <span class=\"hljs-comment\">// f32</span>\n}</code></pre></pre>\n<p>Floating-point numbers are represented according to the IEEE-754 standard. The\n<code class=\"hljs\">f32</code> type is a single-precision float, and <code class=\"hljs\">f64</code> has double precision.</p>\n<h4 id=\"numeric-operations\"><a class=\"header\" href=\"#numeric-operations\">Numeric Operations</a></h4>\n<p>Rust supports the basic mathematical operations you‚Äôd expect for all the number\ntypes: addition, subtraction, multiplication, division, and remainder. Integer\ndivision truncates toward zero to the nearest integer. The following code shows\nhow you‚Äôd use each numeric operation in a <code class=\"hljs\">let</code> statement:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-comment\">// addition</span>\n    <span class=\"hljs-keyword\">let</span> sum = <span class=\"hljs-number\">5</span> + <span class=\"hljs-number\">10</span>;\n\n    <span class=\"hljs-comment\">// subtraction</span>\n    <span class=\"hljs-keyword\">let</span> difference = <span class=\"hljs-number\">95.5</span> - <span class=\"hljs-number\">4.3</span>;\n\n    <span class=\"hljs-comment\">// multiplication</span>\n    <span class=\"hljs-keyword\">let</span> product = <span class=\"hljs-number\">4</span> * <span class=\"hljs-number\">30</span>;\n\n    <span class=\"hljs-comment\">// division</span>\n    <span class=\"hljs-keyword\">let</span> quotient = <span class=\"hljs-number\">56.7</span> / <span class=\"hljs-number\">32.2</span>;\n    <span class=\"hljs-keyword\">let</span> truncated = -<span class=\"hljs-number\">5</span> / <span class=\"hljs-number\">3</span>; <span class=\"hljs-comment\">// Results in -1</span>\n\n    <span class=\"hljs-comment\">// remainder</span>\n    <span class=\"hljs-keyword\">let</span> remainder = <span class=\"hljs-number\">43</span> % <span class=\"hljs-number\">5</span>;\n}</code></pre></pre>\n<p>Each expression in these statements uses a mathematical operator and evaluates\nto a single value, which is then bound to a variable. <a href=\"appendix-02-operators.html\">Appendix\nB</a><!-- ignore --> contains a list of all operators that Rust\nprovides.</p>\n<h4 id=\"the-boolean-type\"><a class=\"header\" href=\"#the-boolean-type\">The Boolean Type</a></h4>\n<p>As in most other programming languages, a Boolean type in Rust has two possible\nvalues: <code class=\"hljs\">true</code> and <code class=\"hljs\">false</code>. Booleans are one byte in size. The Boolean type in\nRust is specified using <code class=\"hljs\">bool</code>. For example:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> t = <span class=\"hljs-literal\">true</span>;\n\n    <span class=\"hljs-keyword\">let</span> f: <span class=\"hljs-built_in\">bool</span> = <span class=\"hljs-literal\">false</span>; <span class=\"hljs-comment\">// with explicit type annotation</span>\n}</code></pre></pre>\n<p>The main way to use Boolean values is through conditionals, such as an <code class=\"hljs\">if</code>\nexpression. We‚Äôll cover how <code class=\"hljs\">if</code> expressions work in Rust in the <a href=\"ch03-05-control-flow.html#control-flow\">‚ÄúControl\nFlow‚Äù</a><!-- ignore --> section.</p>\n<h4 id=\"the-character-type\"><a class=\"header\" href=\"#the-character-type\">The Character Type</a></h4>\n<p>Rust‚Äôs <code class=\"hljs\">char</code> type is the language‚Äôs most primitive alphabetic type. Here are\nsome examples of declaring <code class=\"hljs\">char</code> values:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> c = <span class=\"hljs-string\">'z'</span>;\n    <span class=\"hljs-keyword\">let</span> z: <span class=\"hljs-built_in\">char</span> = <span class=\"hljs-string\">'‚Ñ§'</span>; <span class=\"hljs-comment\">// with explicit type annotation</span>\n    <span class=\"hljs-keyword\">let</span> heart_eyed_cat = 'üòª';\n}</code></pre></pre>\n<p>Note that we specify <code class=\"hljs\">char</code> literals with single quotes, as opposed to string\nliterals, which use double quotes. Rust‚Äôs <code class=\"hljs\">char</code> type is four bytes in size and\nrepresents a Unicode Scalar Value, which means it can represent a lot more than\njust ASCII. Accented letters; Chinese, Japanese, and Korean characters; emoji;\nand zero-width spaces are all valid <code class=\"hljs\">char</code> values in Rust. Unicode Scalar\nValues range from <code class=\"hljs\">U+0000</code> to <code class=\"hljs\">U+D7FF</code> and <code class=\"hljs\">U+E000</code> to <code class=\"hljs\">U+10FFFF</code> inclusive.\nHowever, a ‚Äúcharacter‚Äù isn‚Äôt really a concept in Unicode, so your human\nintuition for what a ‚Äúcharacter‚Äù is may not match up with what a <code class=\"hljs\">char</code> is in\nRust. We‚Äôll discuss this topic in detail in <a href=\"ch08-02-strings.html#storing-utf-8-encoded-text-with-strings\">‚ÄúStoring UTF-8 Encoded Text with\nStrings‚Äù</a><!-- ignore --> in Chapter 8.</p>\n<h3 id=\"compound-types\"><a class=\"header\" href=\"#compound-types\">Compound Types</a></h3>\n<p><em>Compound types</em> can group multiple values into one type. Rust has two\nprimitive compound types: tuples and arrays.</p>\n<h4 id=\"the-tuple-type\"><a class=\"header\" href=\"#the-tuple-type\">The Tuple Type</a></h4>\n<p>A <em>tuple</em> is a general way of grouping together a number of values with a\nvariety of types into one compound type. Tuples have a fixed length: once\ndeclared, they cannot grow or shrink in size.</p>\n<p>We create a tuple by writing a comma-separated list of values inside\nparentheses. Each position in the tuple has a type, and the types of the\ndifferent values in the tuple don‚Äôt have to be the same. We‚Äôve added optional\ntype annotations in this example:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> tup: (<span class=\"hljs-built_in\">i32</span>, <span class=\"hljs-built_in\">f64</span>, <span class=\"hljs-built_in\">u8</span>) = (<span class=\"hljs-number\">500</span>, <span class=\"hljs-number\">6.4</span>, <span class=\"hljs-number\">1</span>);\n}</code></pre></pre>\n<p>The variable <code class=\"hljs\">tup</code> binds to the entire tuple because a tuple is considered a\nsingle compound element. To get the individual values out of a tuple, we can\nuse pattern matching to destructure a tuple value, like this:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> tup = (<span class=\"hljs-number\">500</span>, <span class=\"hljs-number\">6.4</span>, <span class=\"hljs-number\">1</span>);\n\n    <span class=\"hljs-keyword\">let</span> (x, y, z) = tup;\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The value of y is: {y}\"</span>);\n}</code></pre></pre>\n<p>This program first creates a tuple and binds it to the variable <code class=\"hljs\">tup</code>. It then\nuses a pattern with <code class=\"hljs\">let</code> to take <code class=\"hljs\">tup</code> and turn it into three separate\nvariables, <code class=\"hljs\">x</code>, <code class=\"hljs\">y</code>, and <code class=\"hljs\">z</code>. This is called <em>destructuring</em> because it breaks\nthe single tuple into three parts. Finally, the program prints the value of\n<code class=\"hljs\">y</code>, which is <code class=\"hljs\">6.4</code>.</p>\n<p>We can also access a tuple element directly by using a period (<code class=\"hljs\">.</code>) followed by\nthe index of the value we want to access. For example:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> x: (<span class=\"hljs-built_in\">i32</span>, <span class=\"hljs-built_in\">f64</span>, <span class=\"hljs-built_in\">u8</span>) = (<span class=\"hljs-number\">500</span>, <span class=\"hljs-number\">6.4</span>, <span class=\"hljs-number\">1</span>);\n\n    <span class=\"hljs-keyword\">let</span> five_hundred = x.<span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-keyword\">let</span> six_point_four = x.<span class=\"hljs-number\">1</span>;\n\n    <span class=\"hljs-keyword\">let</span> one = x.<span class=\"hljs-number\">2</span>;\n}</code></pre></pre>\n<p>This program creates the tuple <code class=\"hljs\">x</code> and then accesses each element of the tuple\nusing their respective indices. As with most programming languages, the first\nindex in a tuple is 0.</p>\n<p>The tuple without any values has a special name, <em>unit</em>. This value and its\ncorresponding type are both written <code class=\"hljs\">()</code> and represent an empty value or an\nempty return type. Expressions implicitly return the unit value if they don‚Äôt\nreturn any other value.</p>\n<h4 id=\"the-array-type\"><a class=\"header\" href=\"#the-array-type\">The Array Type</a></h4>\n<p>Another way to have a collection of multiple values is with an <em>array</em>. Unlike\na tuple, every element of an array must have the same type. Unlike arrays in\nsome other languages, arrays in Rust have a fixed length.</p>\n<p>We write the values in an array as a comma-separated list inside square\nbrackets:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> a = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\n}</code></pre></pre>\n<p>Arrays are useful when you want your data allocated on the stack rather than\nthe heap (we will discuss the stack and the heap more in <a href=\"ch04-01-what-is-ownership.html#the-stack-and-the-heap\">Chapter\n4</a><!-- ignore -->) or when you want to ensure you always have a\nfixed number of elements. An array isn‚Äôt as flexible as the vector type,\nthough. A <em>vector</em> is a similar collection type provided by the standard\nlibrary that <em>is</em> allowed to grow or shrink in size. If you‚Äôre unsure whether\nto use an array or a vector, chances are you should use a vector. <a href=\"ch08-01-vectors.html\">Chapter\n8</a><!-- ignore --> discusses vectors in more detail.</p>\n<p>However, arrays are more useful when you know the number of elements will not\nneed to change. For example, if you were using the names of the month in a\nprogram, you would probably use an array rather than a vector because you know\nit will always contain 12 elements:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> months = [<span class=\"hljs-string\">\"January\"</span>, <span class=\"hljs-string\">\"February\"</span>, <span class=\"hljs-string\">\"March\"</span>, <span class=\"hljs-string\">\"April\"</span>, <span class=\"hljs-string\">\"May\"</span>, <span class=\"hljs-string\">\"June\"</span>, <span class=\"hljs-string\">\"July\"</span>,\n              <span class=\"hljs-string\">\"August\"</span>, <span class=\"hljs-string\">\"September\"</span>, <span class=\"hljs-string\">\"October\"</span>, <span class=\"hljs-string\">\"November\"</span>, <span class=\"hljs-string\">\"December\"</span>];\n<span class=\"boring\">}</span></code></pre></pre>\n<p>You write an array‚Äôs type using square brackets with the type of each element,\na semicolon, and then the number of elements in the array, like so:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> a: [<span class=\"hljs-built_in\">i32</span>; <span class=\"hljs-number\">5</span>] = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Here, <code class=\"hljs\">i32</code> is the type of each element. After the semicolon, the number <code class=\"hljs\">5</code>\nindicates the array contains five elements.</p>\n<p>You can also initialize an array to contain the same value for each element by\nspecifying the initial value, followed by a semicolon, and then the length of\nthe array in square brackets, as shown here:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> a = [<span class=\"hljs-number\">3</span>; <span class=\"hljs-number\">5</span>];\n<span class=\"boring\">}</span></code></pre></pre>\n<p>The array named <code class=\"hljs\">a</code> will contain <code class=\"hljs\">5</code> elements that will all be set to the value\n<code class=\"hljs\">3</code> initially. This is the same as writing <code class=\"hljs\">let a = [3, 3, 3, 3, 3];</code> but in a\nmore concise way.</p>\n<h5 id=\"accessing-array-elements\"><a class=\"header\" href=\"#accessing-array-elements\">Accessing Array Elements</a></h5>\n<p>An array is a single chunk of memory of a known, fixed size that can be\nallocated on the stack. You can access elements of an array using indexing,\nlike this:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> a = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\n\n    <span class=\"hljs-keyword\">let</span> first = a[<span class=\"hljs-number\">0</span>];\n    <span class=\"hljs-keyword\">let</span> second = a[<span class=\"hljs-number\">1</span>];\n}</code></pre></pre>\n<p>In this example, the variable named <code class=\"hljs\">first</code> will get the value <code class=\"hljs\">1</code> because that\nis the value at index <code class=\"hljs\">[0]</code> in the array. The variable named <code class=\"hljs\">second</code> will get\nthe value <code class=\"hljs\">2</code> from index <code class=\"hljs\">[1]</code> in the array.</p>\n<h5 id=\"invalid-array-element-access\"><a class=\"header\" href=\"#invalid-array-element-access\">Invalid Array Element Access</a></h5>\n<p>Let‚Äôs see what happens if you try to access an element of an array that is past\nthe end of the array. Say you run this code, similar to the guessing game in\nChapter 2, to get an array index from the user:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/panics.svg\" title=\"This code panics!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore panics hljs\"><span class=\"hljs-keyword\">use</span> std::io;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> a = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Please enter an array index.\"</span>);\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> index = <span class=\"hljs-built_in\">String</span>::new();\n\n    io::stdin()\n        .read_line(&amp;<span class=\"hljs-keyword\">mut</span> index)\n        .expect(<span class=\"hljs-string\">\"Failed to read line\"</span>);\n\n    <span class=\"hljs-keyword\">let</span> index: <span class=\"hljs-built_in\">usize</span> = index\n        .trim()\n        .parse()\n        .expect(<span class=\"hljs-string\">\"Index entered was not a number\"</span>);\n\n    <span class=\"hljs-keyword\">let</span> element = a[index];\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The value of the element at index {index} is: {element}\"</span>);\n}</code></pre>\n<p>This code compiles successfully. If you run this code using <code class=\"hljs\">cargo run</code> and\nenter <code class=\"hljs\">0</code>, <code class=\"hljs\">1</code>, <code class=\"hljs\">2</code>, <code class=\"hljs\">3</code>, or <code class=\"hljs\">4</code>, the program will print out the corresponding\nvalue at that index in the array. If you instead enter a number past the end of\nthe array, such as <code class=\"hljs\">10</code>, you‚Äôll see output like this:</p>\n<!-- manual-regeneration\ncd listings/ch03-common-programming-concepts/no-listing-15-invalid-array-access\ncargo run\n10\n-->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\">thread 'main' panicked at src/main.rs:19:19:\nindex out of bounds: the len is 5 but the index is 10\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre>\n<p>The program resulted in a <em>runtime</em> error at the point of using an invalid\nvalue in the indexing operation. The program exited with an error message and\ndidn‚Äôt execute the final <code class=\"hljs\">println!</code> statement. When you attempt to access an\nelement using indexing, Rust will check that the index you‚Äôve specified is less\nthan the array length. If the index is greater than or equal to the length,\nRust will panic. This check has to happen at runtime, especially in this case,\nbecause the compiler can‚Äôt possibly know what value a user will enter when they\nrun the code later.</p>\n<p>This is an example of Rust‚Äôs memory safety principles in action. In many\nlow-level languages, this kind of check is not done, and when you provide an\nincorrect index, invalid memory can be accessed. Rust protects you against this\nkind of error by immediately exiting instead of allowing the memory access and\ncontinuing. Chapter 9 discusses more of Rust‚Äôs error handling and how you can\nwrite readable, safe code that neither panics nor allows invalid memory access.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"functions\"><a class=\"header\" href=\"#functions\">Functions</a></h2>\n<p>Functions are prevalent in Rust code. You‚Äôve already seen one of the most\nimportant functions in the language: the <code class=\"hljs\">main</code> function, which is the entry\npoint of many programs. You‚Äôve also seen the <code class=\"hljs\">fn</code> keyword, which allows you to\ndeclare new functions.</p>\n<p>Rust code uses <em>snake case</em> as the conventional style for function and variable\nnames, in which all letters are lowercase and underscores separate words.\nHere‚Äôs a program that contains an example function definition:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Hello, world!\"</span>);\n\n    another_function();\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">another_function</span></span>() {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Another function.\"</span>);\n}</code></pre></pre>\n<p>We define a function in Rust by entering <code class=\"hljs\">fn</code> followed by a function name and a\nset of parentheses. The curly brackets tell the compiler where the function\nbody begins and ends.</p>\n<p>We can call any function we‚Äôve defined by entering its name followed by a set\nof parentheses. Because <code class=\"hljs\">another_function</code> is defined in the program, it can be\ncalled from inside the <code class=\"hljs\">main</code> function. Note that we defined <code class=\"hljs\">another_function</code>\n<em>after</em> the <code class=\"hljs\">main</code> function in the source code; we could have defined it before\nas well. Rust doesn‚Äôt care where you define your functions, only that they‚Äôre\ndefined somewhere in a scope that can be seen by the caller.</p>\n<p>Let‚Äôs start a new binary project named <em>functions</em> to explore functions\nfurther. Place the <code class=\"hljs\">another_function</code> example in <em>src/main.rs</em> and run it. You\nshould see the following output:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling functions v0.1.0 (file:///projects/functions)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.28s\n     Running `target/debug/functions`\nHello, world!\nAnother function.\n</code></pre>\n<p>The lines execute in the order in which they appear in the <code class=\"hljs\">main</code> function.\nFirst the ‚ÄúHello, world!‚Äù message prints, and then <code class=\"hljs\">another_function</code> is called\nand its message is printed.</p>\n<h3 id=\"parameters\"><a class=\"header\" href=\"#parameters\">Parameters</a></h3>\n<p>We can define functions to have <em>parameters</em>, which are special variables that\nare part of a function‚Äôs signature. When a function has parameters, you can\nprovide it with concrete values for those parameters. Technically, the concrete\nvalues are called <em>arguments</em>, but in casual conversation, people tend to use\nthe words <em>parameter</em> and <em>argument</em> interchangeably for either the variables\nin a function‚Äôs definition or the concrete values passed in when you call a\nfunction.</p>\n<p>In this version of <code class=\"hljs\">another_function</code> we add a parameter:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    another_function(<span class=\"hljs-number\">5</span>);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">another_function</span></span>(x: <span class=\"hljs-built_in\">i32</span>) {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The value of x is: {x}\"</span>);\n}</code></pre></pre>\n<p>Try running this program; you should get the following output:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling functions v0.1.0 (file:///projects/functions)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 1.21s\n     Running `target/debug/functions`\nThe value of x is: 5\n</code></pre>\n<p>The declaration of <code class=\"hljs\">another_function</code> has one parameter named <code class=\"hljs\">x</code>. The type of\n<code class=\"hljs\">x</code> is specified as <code class=\"hljs\">i32</code>. When we pass <code class=\"hljs\">5</code> in to <code class=\"hljs\">another_function</code>, the\n<code class=\"hljs\">println!</code> macro puts <code class=\"hljs\">5</code> where the pair of curly brackets containing <code class=\"hljs\">x</code> was\nin the format string.</p>\n<p>In function signatures, you <em>must</em> declare the type of each parameter. This is\na deliberate decision in Rust‚Äôs design: requiring type annotations in function\ndefinitions means the compiler almost never needs you to use them elsewhere in\nthe code to figure out what type you mean. The compiler is also able to give\nmore helpful error messages if it knows what types the function expects.</p>\n<p>When defining multiple parameters, separate the parameter declarations with\ncommas, like this:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    print_labeled_measurement(<span class=\"hljs-number\">5</span>, <span class=\"hljs-string\">'h'</span>);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">print_labeled_measurement</span></span>(value: <span class=\"hljs-built_in\">i32</span>, unit_label: <span class=\"hljs-built_in\">char</span>) {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The measurement is: {value}{unit_label}\"</span>);\n}</code></pre></pre>\n<p>This example creates a function named <code class=\"hljs\">print_labeled_measurement</code> with two\nparameters. The first parameter is named <code class=\"hljs\">value</code> and is an <code class=\"hljs\">i32</code>. The second is\nnamed <code class=\"hljs\">unit_label</code> and is type <code class=\"hljs\">char</code>. The function then prints text containing\nboth the <code class=\"hljs\">value</code> and the <code class=\"hljs\">unit_label</code>.</p>\n<p>Let‚Äôs try running this code. Replace the program currently in your <em>functions</em>\nproject‚Äôs <em>src/main.rs</em> file with the preceding example and run it using <code class=\"hljs\">cargo run</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling functions v0.1.0 (file:///projects/functions)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.31s\n     Running `target/debug/functions`\nThe measurement is: 5h\n</code></pre>\n<p>Because we called the function with <code class=\"hljs\">5</code> as the value for <code class=\"hljs\">value</code> and <code class=\"hljs\">'h'</code> as\nthe value for <code class=\"hljs\">unit_label</code>, the program output contains those values.</p>\n<h3 id=\"statements-and-expressions\"><a class=\"header\" href=\"#statements-and-expressions\">Statements and Expressions</a></h3>\n<p>Function bodies are made up of a series of statements optionally ending in an\nexpression. So far, the functions we‚Äôve covered haven‚Äôt included an ending\nexpression, but you have seen an expression as part of a statement. Because\nRust is an expression-based language, this is an important distinction to\nunderstand. Other languages don‚Äôt have the same distinctions, so let‚Äôs look at\nwhat statements and expressions are and how their differences affect the bodies\nof functions.</p>\n<ul>\n<li><strong>Statements</strong> are instructions that perform some action and do not return\na value.</li>\n<li><strong>Expressions</strong> evaluate to a resultant value. Let‚Äôs look at some examples.</li>\n</ul>\n<p>We‚Äôve actually already used statements and expressions. Creating a variable and\nassigning a value to it with the <code class=\"hljs\">let</code> keyword is a statement. In Listing 3-1,\n<code class=\"hljs\">let y = 6;</code> is a statement.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> y = <span class=\"hljs-number\">6</span>;\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 3-1: A <code class=\"hljs\">main</code> function declaration containing one statement</span></p>\n<p>Function definitions are also statements; the entire preceding example is a\nstatement in itself.</p>\n<p>Statements do not return values. Therefore, you can‚Äôt assign a <code class=\"hljs\">let</code> statement\nto another variable, as the following code tries to do; you‚Äôll get an error:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-small\"></a></div><code class=\"language-rust ignore does_not_compile hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> x = (<span class=\"hljs-keyword\">let</span> y = <span class=\"hljs-number\">6</span>);\n}</code></pre>\n<p>When you run this program, the error you‚Äôll get looks like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling functions v0.1.0 (file:///projects/functions)\nerror: expected expression, found `let` statement\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/main.rs:2:14</span>\n  |\n2 |     let x = (let y = 6);\n  |              ^^^\n  |\n  = note: only supported directly in conditions of `if` and `while` expressions\n\nwarning: unnecessary parentheses around assigned value\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/main.rs:2:13</span>\n  |\n2 |     let x = (let y = 6);\n  |             ^         ^\n  |\n  = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n  |\n2 -     let x = (let y = 6);\n2 +     let x = let y = 6;\n  |\n\nwarning: `functions` (bin \"functions\") generated 1 warning\nerror: could not compile `functions` (bin \"functions\") due to 1 previous error; 1 warning emitted\n</code></pre>\n<p>The <code class=\"hljs\">let y = 6</code> statement does not return a value, so there isn‚Äôt anything for\n<code class=\"hljs\">x</code> to bind to. This is different from what happens in other languages, such as\nC and Ruby, where the assignment returns the value of the assignment. In those\nlanguages, you can write <code class=\"hljs\">x = y = 6</code> and have both <code class=\"hljs\">x</code> and <code class=\"hljs\">y</code> have the value\n<code class=\"hljs\">6</code>; that is not the case in Rust.</p>\n<p>Expressions evaluate to a value and make up most of the rest of the code that\nyou‚Äôll write in Rust. Consider a math operation, such as <code class=\"hljs\">5 + 6</code>, which is an\nexpression that evaluates to the value <code class=\"hljs\">11</code>. Expressions can be part of\nstatements: in Listing 3-1, the <code class=\"hljs\">6</code> in the statement <code class=\"hljs\">let y = 6;</code> is an\nexpression that evaluates to the value <code class=\"hljs\">6</code>. Calling a function is an\nexpression. Calling a macro is an expression. A new scope block created with\ncurly brackets is an expression, for example:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> y = {\n        <span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">3</span>;\n        x + <span class=\"hljs-number\">1</span>\n    };\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The value of y is: {y}\"</span>);\n}</code></pre></pre>\n<p>This expression:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\">{\n    <span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">3</span>;\n    x + <span class=\"hljs-number\">1</span>\n}</code></pre>\n<p>is a block that, in this case, evaluates to <code class=\"hljs\">4</code>. That value gets bound to <code class=\"hljs\">y</code>\nas part of the <code class=\"hljs\">let</code> statement. Note that the <code class=\"hljs\">x + 1</code> line doesn‚Äôt have a\nsemicolon at the end, which is unlike most of the lines you‚Äôve seen so far.\nExpressions do not include ending semicolons. If you add a semicolon to the end\nof an expression, you turn it into a statement, and it will then not return a\nvalue. Keep this in mind as you explore function return values and expressions\nnext.</p>\n<h3 id=\"functions-with-return-values\"><a class=\"header\" href=\"#functions-with-return-values\">Functions with Return Values</a></h3>\n<p>Functions can return values to the code that calls them. We don‚Äôt name return\nvalues, but we must declare their type after an arrow (<code class=\"hljs\">-&gt;</code>). In Rust, the\nreturn value of the function is synonymous with the value of the final\nexpression in the block of the body of a function. You can return early from a\nfunction by using the <code class=\"hljs\">return</code> keyword and specifying a value, but most\nfunctions return the last expression implicitly. Here‚Äôs an example of a\nfunction that returns a value:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">five</span></span>() -&gt; <span class=\"hljs-built_in\">i32</span> {\n    <span class=\"hljs-number\">5</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> x = five();\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The value of x is: {x}\"</span>);\n}</code></pre></pre>\n<p>There are no function calls, macros, or even <code class=\"hljs\">let</code> statements in the <code class=\"hljs\">five</code>\nfunction‚Äîjust the number <code class=\"hljs\">5</code> by itself. That‚Äôs a perfectly valid function in\nRust. Note that the function‚Äôs return type is specified too, as <code class=\"hljs\">-&gt; i32</code>. Try\nrunning this code; the output should look like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling functions v0.1.0 (file:///projects/functions)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.30s\n     Running `target/debug/functions`\nThe value of x is: 5\n</code></pre>\n<p>The <code class=\"hljs\">5</code> in <code class=\"hljs\">five</code> is the function‚Äôs return value, which is why the return type\nis <code class=\"hljs\">i32</code>. Let‚Äôs examine this in more detail. There are two important bits:\nfirst, the line <code class=\"hljs\">let x = five();</code> shows that we‚Äôre using the return value of a\nfunction to initialize a variable. Because the function <code class=\"hljs\">five</code> returns a <code class=\"hljs\">5</code>,\nthat line is the same as the following:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">5</span>;\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Second, the <code class=\"hljs\">five</code> function has no parameters and defines the type of the\nreturn value, but the body of the function is a lonely <code class=\"hljs\">5</code> with no semicolon\nbecause it‚Äôs an expression whose value we want to return.</p>\n<p>Let‚Äôs look at another example:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> x = plus_one(<span class=\"hljs-number\">5</span>);\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The value of x is: {x}\"</span>);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">plus_one</span></span>(x: <span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span> {\n    x + <span class=\"hljs-number\">1</span>\n}</code></pre></pre>\n<p>Running this code will print <code class=\"hljs\">The value of x is: 6</code>. But if we place a\nsemicolon at the end of the line containing <code class=\"hljs\">x + 1</code>, changing it from an\nexpression to a statement, we‚Äôll get an error:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> x = plus_one(<span class=\"hljs-number\">5</span>);\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The value of x is: {x}\"</span>);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">plus_one</span></span>(x: <span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span> {\n    x + <span class=\"hljs-number\">1</span>;\n}</code></pre>\n<p>Compiling this code produces an error, as follows:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling functions v0.1.0 (file:///projects/functions)\nerror[E0308]: mismatched types\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/main.rs:7:24</span>\n  |\n7 | fn plus_one(x: i32) -&gt; i32 {\n  |    --------            ^^^ expected `i32`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n8 |     x + 1;\n  |          - help: remove this semicolon to return this value\n\nFor more information about this error, try `rustc --explain E0308`.\nerror: could not compile `functions` (bin \"functions\") due to 1 previous error\n</code></pre>\n<p>The main error message, <code class=\"hljs\">mismatched types</code>, reveals the core issue with this\ncode. The definition of the function <code class=\"hljs\">plus_one</code> says that it will return an\n<code class=\"hljs\">i32</code>, but statements don‚Äôt evaluate to a value, which is expressed by <code class=\"hljs\">()</code>,\nthe unit type. Therefore, nothing is returned, which contradicts the function\ndefinition and results in an error. In this output, Rust provides a message to\npossibly help rectify this issue: it suggests removing the semicolon, which\nwould fix the error.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"comments\"><a class=\"header\" href=\"#comments\">Comments</a></h2>\n<p>All programmers strive to make their code easy to understand, but sometimes\nextra explanation is warranted. In these cases, programmers leave <em>comments</em> in\ntheir source code that the compiler will ignore but people reading the source\ncode may find useful.</p>\n<p>Here‚Äôs a simple comment:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// hello, world</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<p>In Rust, the idiomatic comment style starts a comment with two slashes, and the\ncomment continues until the end of the line. For comments that extend beyond a\nsingle line, you‚Äôll need to include <code class=\"hljs\">//</code> on each line, like this:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-comment\">// So we‚Äôre doing something complicated here, long enough that we need</span>\n<span class=\"hljs-comment\">// multiple lines of comments to do it! Whew! Hopefully, this comment will</span>\n<span class=\"hljs-comment\">// explain what‚Äôs going on.</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Comments can also be placed at the end of lines containing code:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> lucky_number = <span class=\"hljs-number\">7</span>; <span class=\"hljs-comment\">// I‚Äôm feeling lucky today</span>\n}</code></pre></pre>\n<p>But you‚Äôll more often see them used in this format, with the comment on a\nseparate line above the code it‚Äôs annotating:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-comment\">// I‚Äôm feeling lucky today</span>\n    <span class=\"hljs-keyword\">let</span> lucky_number = <span class=\"hljs-number\">7</span>;\n}</code></pre></pre>\n<p>Rust also has another kind of comment, documentation comments, which we‚Äôll\ndiscuss in the <a href=\"ch14-02-publishing-to-crates-io.html\">‚ÄúPublishing a Crate to Crates.io‚Äù</a><!-- ignore -->\nsection of Chapter 14.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"control-flow\"><a class=\"header\" href=\"#control-flow\">Control Flow</a></h2>\n<p>The ability to run some code depending on whether a condition is <code class=\"hljs\">true</code> and to\nrun some code repeatedly while a condition is <code class=\"hljs\">true</code> are basic building blocks\nin most programming languages. The most common constructs that let you control\nthe flow of execution of Rust code are <code class=\"hljs\">if</code> expressions and loops.</p>\n<h3 id=\"if-expressions\"><a class=\"header\" href=\"#if-expressions\"><code>if</code> Expressions</a></h3>\n<p>An <code class=\"hljs\">if</code> expression allows you to branch your code depending on conditions. You\nprovide a condition and then state, ‚ÄúIf this condition is met, run this block\nof code. If the condition is not met, do not run this block of code.‚Äù</p>\n<p>Create a new project called <em>branches</em> in your <em>projects</em> directory to explore\nthe <code class=\"hljs\">if</code> expression. In the <em>src/main.rs</em> file, input the following:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> number = <span class=\"hljs-number\">3</span>;\n\n    <span class=\"hljs-keyword\">if</span> number &lt; <span class=\"hljs-number\">5</span> {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"condition was true\"</span>);\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"condition was false\"</span>);\n    }\n}</code></pre></pre>\n<p>All <code class=\"hljs\">if</code> expressions start with the keyword <code class=\"hljs\">if</code>, followed by a condition. In\nthis case, the condition checks whether or not the variable <code class=\"hljs\">number</code> has a\nvalue less than 5. We place the block of code to execute if the condition is\n<code class=\"hljs\">true</code> immediately after the condition inside curly brackets. Blocks of code\nassociated with the conditions in <code class=\"hljs\">if</code> expressions are sometimes called <em>arms</em>,\njust like the arms in <code class=\"hljs\">match</code> expressions that we discussed in the <a href=\"ch02-00-guessing-game-tutorial.html#comparing-the-guess-to-the-secret-number\">‚ÄúComparing\nthe Guess to the Secret Number‚Äù</a><!--\nignore --> section of Chapter 2.</p>\n<p>Optionally, we can also include an <code class=\"hljs\">else</code> expression, which we chose to do\nhere, to give the program an alternative block of code to execute should the\ncondition evaluate to <code class=\"hljs\">false</code>. If you don‚Äôt provide an <code class=\"hljs\">else</code> expression and\nthe condition is <code class=\"hljs\">false</code>, the program will just skip the <code class=\"hljs\">if</code> block and move on\nto the next bit of code.</p>\n<p>Try running this code; you should see the following output:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling branches v0.1.0 (file:///projects/branches)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.31s\n     Running `target/debug/branches`\ncondition was true\n</code></pre>\n<p>Let‚Äôs try changing the value of <code class=\"hljs\">number</code> to a value that makes the condition\n<code class=\"hljs\">false</code> to see what happens:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> number = <span class=\"hljs-number\">7</span>;\n<span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">if</span> number &lt; <span class=\"hljs-number\">5</span> {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"condition was true\"</span>);\n</span><span class=\"boring\">    } <span class=\"hljs-keyword\">else</span> {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"condition was false\"</span>);\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre>\n<p>Run the program again, and look at the output:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling branches v0.1.0 (file:///projects/branches)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.31s\n     Running `target/debug/branches`\ncondition was false\n</code></pre>\n<p>It‚Äôs also worth noting that the condition in this code <em>must</em> be a <code class=\"hljs\">bool</code>. If\nthe condition isn‚Äôt a <code class=\"hljs\">bool</code>, we‚Äôll get an error. For example, try running the\nfollowing code:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> number = <span class=\"hljs-number\">3</span>;\n\n    <span class=\"hljs-keyword\">if</span> number {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"number was three\"</span>);\n    }\n}</code></pre>\n<p>The <code class=\"hljs\">if</code> condition evaluates to a value of <code class=\"hljs\">3</code> this time, and Rust throws an\nerror:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling branches v0.1.0 (file:///projects/branches)\nerror[E0308]: mismatched types\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/main.rs:4:8</span>\n  |\n4 |     if number {\n  |        ^^^^^^ expected `bool`, found integer\n\nFor more information about this error, try `rustc --explain E0308`.\nerror: could not compile `branches` (bin \"branches\") due to 1 previous error\n</code></pre>\n<p>The error indicates that Rust expected a <code class=\"hljs\">bool</code> but got an integer. Unlike\nlanguages such as Ruby and JavaScript, Rust will not automatically try to\nconvert non-Boolean types to a Boolean. You must be explicit and always provide\n<code class=\"hljs\">if</code> with a Boolean as its condition. If we want the <code class=\"hljs\">if</code> code block to run\nonly when a number is not equal to <code class=\"hljs\">0</code>, for example, we can change the <code class=\"hljs\">if</code>\nexpression to the following:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> number = <span class=\"hljs-number\">3</span>;\n\n    <span class=\"hljs-keyword\">if</span> number != <span class=\"hljs-number\">0</span> {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"number was something other than zero\"</span>);\n    }\n}</code></pre></pre>\n<p>Running this code will print <code class=\"hljs\">number was something other than zero</code>.</p>\n<h4 id=\"handling-multiple-conditions-with-else-if\"><a class=\"header\" href=\"#handling-multiple-conditions-with-else-if\">Handling Multiple Conditions with <code>else if</code></a></h4>\n<p>You can use multiple conditions by combining <code class=\"hljs\">if</code> and <code class=\"hljs\">else</code> in an <code class=\"hljs\">else if</code>\nexpression. For example:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> number = <span class=\"hljs-number\">6</span>;\n\n    <span class=\"hljs-keyword\">if</span> number % <span class=\"hljs-number\">4</span> == <span class=\"hljs-number\">0</span> {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"number is divisible by 4\"</span>);\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> number % <span class=\"hljs-number\">3</span> == <span class=\"hljs-number\">0</span> {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"number is divisible by 3\"</span>);\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> number % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span> {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"number is divisible by 2\"</span>);\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"number is not divisible by 4, 3, or 2\"</span>);\n    }\n}</code></pre></pre>\n<p>This program has four possible paths it can take. After running it, you should\nsee the following output:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling branches v0.1.0 (file:///projects/branches)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.31s\n     Running `target/debug/branches`\nnumber is divisible by 3\n</code></pre>\n<p>When this program executes, it checks each <code class=\"hljs\">if</code> expression in turn and executes\nthe first body for which the condition evaluates to <code class=\"hljs\">true</code>. Note that even\nthough 6 is divisible by 2, we don‚Äôt see the output <code class=\"hljs\">number is divisible by 2</code>,\nnor do we see the <code class=\"hljs\">number is not divisible by 4, 3, or 2</code> text from the <code class=\"hljs\">else</code>\nblock. That‚Äôs because Rust only executes the block for the first <code class=\"hljs\">true</code>\ncondition, and once it finds one, it doesn‚Äôt even check the rest.</p>\n<p>Using too many <code class=\"hljs\">else if</code> expressions can clutter your code, so if you have more\nthan one, you might want to refactor your code. Chapter 6 describes a powerful\nRust branching construct called <code class=\"hljs\">match</code> for these cases.</p>\n<h4 id=\"using-if-in-a-let-statement\"><a class=\"header\" href=\"#using-if-in-a-let-statement\">Using <code>if</code> in a <code>let</code> Statement</a></h4>\n<p>Because <code class=\"hljs\">if</code> is an expression, we can use it on the right side of a <code class=\"hljs\">let</code>\nstatement to assign the outcome to a variable, as in Listing 3-2.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> condition = <span class=\"hljs-literal\">true</span>;\n    <span class=\"hljs-keyword\">let</span> number = <span class=\"hljs-keyword\">if</span> condition { <span class=\"hljs-number\">5</span> } <span class=\"hljs-keyword\">else</span> { <span class=\"hljs-number\">6</span> };\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The value of number is: {number}\"</span>);\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 3-2: Assigning the result of an <code class=\"hljs\">if</code> expression\nto a variable</span></p>\n<p>The <code class=\"hljs\">number</code> variable will be bound to a value based on the outcome of the <code class=\"hljs\">if</code>\nexpression. Run this code to see what happens:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling branches v0.1.0 (file:///projects/branches)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.30s\n     Running `target/debug/branches`\nThe value of number is: 5\n</code></pre>\n<p>Remember that blocks of code evaluate to the last expression in them, and\nnumbers by themselves are also expressions. In this case, the value of the\nwhole <code class=\"hljs\">if</code> expression depends on which block of code executes. This means the\nvalues that have the potential to be results from each arm of the <code class=\"hljs\">if</code> must be\nthe same type; in Listing 3-2, the results of both the <code class=\"hljs\">if</code> arm and the <code class=\"hljs\">else</code>\narm were <code class=\"hljs\">i32</code> integers. If the types are mismatched, as in the following\nexample, we‚Äôll get an error:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> condition = <span class=\"hljs-literal\">true</span>;\n\n    <span class=\"hljs-keyword\">let</span> number = <span class=\"hljs-keyword\">if</span> condition { <span class=\"hljs-number\">5</span> } <span class=\"hljs-keyword\">else</span> { <span class=\"hljs-string\">\"six\"</span> };\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The value of number is: {number}\"</span>);\n}</code></pre>\n<p>When we try to compile this code, we‚Äôll get an error. The <code class=\"hljs\">if</code> and <code class=\"hljs\">else</code> arms\nhave value types that are incompatible, and Rust indicates exactly where to\nfind the problem in the program:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling branches v0.1.0 (file:///projects/branches)\nerror[E0308]: `if` and `else` have incompatible types\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/main.rs:4:44</span>\n  |\n4 |     let number = if condition { 5 } else { \"six\" };\n  |                                 -          ^^^^^ expected integer, found `&amp;str`\n  |                                 |\n  |                                 expected because of this\n\nFor more information about this error, try `rustc --explain E0308`.\nerror: could not compile `branches` (bin \"branches\") due to 1 previous error\n</code></pre>\n<p>The expression in the <code class=\"hljs\">if</code> block evaluates to an integer, and the expression in\nthe <code class=\"hljs\">else</code> block evaluates to a string. This won‚Äôt work because variables must\nhave a single type, and Rust needs to know at compile time what type the\n<code class=\"hljs\">number</code> variable is, definitively. Knowing the type of <code class=\"hljs\">number</code> lets the\ncompiler verify the type is valid everywhere we use <code class=\"hljs\">number</code>. Rust wouldn‚Äôt be\nable to do that if the type of <code class=\"hljs\">number</code> was only determined at runtime; the\ncompiler would be more complex and would make fewer guarantees about the code\nif it had to keep track of multiple hypothetical types for any variable.</p>\n<h3 id=\"repetition-with-loops\"><a class=\"header\" href=\"#repetition-with-loops\">Repetition with Loops</a></h3>\n<p>It‚Äôs often useful to execute a block of code more than once. For this task,\nRust provides several <em>loops</em>, which will run through the code inside the loop\nbody to the end and then start immediately back at the beginning. To experiment\nwith loops, let‚Äôs make a new project called <em>loops</em>.</p>\n<p>Rust has three kinds of loops: <code class=\"hljs\">loop</code>, <code class=\"hljs\">while</code>, and <code class=\"hljs\">for</code>. Let‚Äôs try each one.</p>\n<h4 id=\"repeating-code-with-loop\"><a class=\"header\" href=\"#repeating-code-with-loop\">Repeating Code with <code>loop</code></a></h4>\n<p>The <code class=\"hljs\">loop</code> keyword tells Rust to execute a block of code over and over again\nforever or until you explicitly tell it to stop.</p>\n<p>As an example, change the <em>src/main.rs</em> file in your <em>loops</em> directory to look\nlike this:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">loop</span> {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"again!\"</span>);\n    }\n}</code></pre>\n<p>When we run this program, we‚Äôll see <code class=\"hljs\">again!</code> printed over and over continuously\nuntil we stop the program manually. Most terminals support the keyboard shortcut\n<kbd>ctrl</kbd>-<kdb>c to interrupt a program that is stuck in a continual\nloop. Give it a try:</kdb></p>\n<!-- manual-regeneration\ncd listings/ch03-common-programming-concepts/no-listing-32-loop\ncargo run\nCTRL-C\n-->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling loops v0.1.0 (file:///projects/loops)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.29s\n     Running `target/debug/loops`\nagain!\nagain!\nagain!\nagain!\n^Cagain!\n</code></pre>\n<p>The symbol <code class=\"hljs\">^C</code> represents where you pressed <kbd>ctrl</kbd>-<kbd>c</kbd>. You\nmay or may not see the word <code class=\"hljs\">again!</code> printed after the <code class=\"hljs\">^C</code>, depending on where\nthe code was in the loop when it received the interrupt signal.</p>\n<p>Fortunately, Rust also provides a way to break out of a loop using code. You\ncan place the <code class=\"hljs\">break</code> keyword within the loop to tell the program when to stop\nexecuting the loop. Recall that we did this in the guessing game in the\n<a href=\"ch02-00-guessing-game-tutorial.html#quitting-after-a-correct-guess\">‚ÄúQuitting After a Correct Guess‚Äù</a><!-- ignore\n--> section of Chapter 2 to exit the program when the user won the game by\nguessing the correct number.</p>\n<p>We also used <code class=\"hljs\">continue</code> in the guessing game, which in a loop tells the program\nto skip over any remaining code in this iteration of the loop and go to the\nnext iteration.</p>\n<h4 id=\"returning-values-from-loops\"><a class=\"header\" href=\"#returning-values-from-loops\">Returning Values from Loops</a></h4>\n<p>One of the uses of a <code class=\"hljs\">loop</code> is to retry an operation you know might fail, such\nas checking whether a thread has completed its job. You might also need to pass\nthe result of that operation out of the loop to the rest of your code. To do\nthis, you can add the value you want returned after the <code class=\"hljs\">break</code> expression you\nuse to stop the loop; that value will be returned out of the loop so you can\nuse it, as shown here:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> counter = <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-keyword\">let</span> result = <span class=\"hljs-keyword\">loop</span> {\n        counter += <span class=\"hljs-number\">1</span>;\n\n        <span class=\"hljs-keyword\">if</span> counter == <span class=\"hljs-number\">10</span> {\n            <span class=\"hljs-keyword\">break</span> counter * <span class=\"hljs-number\">2</span>;\n        }\n    };\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The result is {result}\"</span>);\n}</code></pre></pre>\n<p>Before the loop, we declare a variable named <code class=\"hljs\">counter</code> and initialize it to\n<code class=\"hljs\">0</code>. Then we declare a variable named <code class=\"hljs\">result</code> to hold the value returned from\nthe loop. On every iteration of the loop, we add <code class=\"hljs\">1</code> to the <code class=\"hljs\">counter</code> variable,\nand then check whether the <code class=\"hljs\">counter</code> is equal to <code class=\"hljs\">10</code>. When it is, we use the\n<code class=\"hljs\">break</code> keyword with the value <code class=\"hljs\">counter * 2</code>. After the loop, we use a\nsemicolon to end the statement that assigns the value to <code class=\"hljs\">result</code>. Finally, we\nprint the value in <code class=\"hljs\">result</code>, which in this case is <code class=\"hljs\">20</code>.</p>\n<p>You can also <code class=\"hljs\">return</code> from inside a loop. While <code class=\"hljs\">break</code> only exits the current\nloop, <code class=\"hljs\">return</code> always exits the current function.</p>\n<h4 id=\"loop-labels-to-disambiguate-between-multiple-loops\"><a class=\"header\" href=\"#loop-labels-to-disambiguate-between-multiple-loops\">Loop Labels to Disambiguate Between Multiple Loops</a></h4>\n<p>If you have loops within loops, <code class=\"hljs\">break</code> and <code class=\"hljs\">continue</code> apply to the innermost\nloop at that point. You can optionally specify a <em>loop label</em> on a loop that\nyou can then use with <code class=\"hljs\">break</code> or <code class=\"hljs\">continue</code> to specify that those keywords\napply to the labeled loop instead of the innermost loop. Loop labels must begin\nwith a single quote. Here‚Äôs an example with two nested loops:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> count = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-symbol\">'counting_up</span>: <span class=\"hljs-keyword\">loop</span> {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"count = {count}\"</span>);\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> remaining = <span class=\"hljs-number\">10</span>;\n\n        <span class=\"hljs-keyword\">loop</span> {\n            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"remaining = {remaining}\"</span>);\n            <span class=\"hljs-keyword\">if</span> remaining == <span class=\"hljs-number\">9</span> {\n                <span class=\"hljs-keyword\">break</span>;\n            }\n            <span class=\"hljs-keyword\">if</span> count == <span class=\"hljs-number\">2</span> {\n                <span class=\"hljs-keyword\">break</span> <span class=\"hljs-symbol\">'counting_up</span>;\n            }\n            remaining -= <span class=\"hljs-number\">1</span>;\n        }\n\n        count += <span class=\"hljs-number\">1</span>;\n    }\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"End count = {count}\"</span>);\n}</code></pre></pre>\n<p>The outer loop has the label <code class=\"hljs\">'counting_up</code>, and it will count up from 0 to 2.\nThe inner loop without a label counts down from 10 to 9. The first <code class=\"hljs\">break</code> that\ndoesn‚Äôt specify a label will exit the inner loop only. The <code class=\"hljs\">break 'counting_up;</code> statement will exit the outer loop. This code prints:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling loops v0.1.0 (file:///projects/loops)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.58s\n     Running `target/debug/loops`\ncount = 0\nremaining = 10\nremaining = 9\ncount = 1\nremaining = 10\nremaining = 9\ncount = 2\nremaining = 10\nEnd count = 2\n</code></pre>\n<h4 id=\"conditional-loops-with-while\"><a class=\"header\" href=\"#conditional-loops-with-while\">Conditional Loops with <code>while</code></a></h4>\n<p>A program will often need to evaluate a condition within a loop. While the\ncondition is <code class=\"hljs\">true</code>, the loop runs. When the condition ceases to be <code class=\"hljs\">true</code>, the\nprogram calls <code class=\"hljs\">break</code>, stopping the loop. It‚Äôs possible to implement behavior\nlike this using a combination of <code class=\"hljs\">loop</code>, <code class=\"hljs\">if</code>, <code class=\"hljs\">else</code>, and <code class=\"hljs\">break</code>; you could\ntry that now in a program, if you‚Äôd like. However, this pattern is so common\nthat Rust has a built-in language construct for it, called a <code class=\"hljs\">while</code> loop. In\nListing 3-3, we use <code class=\"hljs\">while</code> to loop the program three times, counting down each\ntime, and then, after the loop, print a message and exit.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> number = <span class=\"hljs-number\">3</span>;\n\n    <span class=\"hljs-keyword\">while</span> number != <span class=\"hljs-number\">0</span> {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{number}!\"</span>);\n\n        number -= <span class=\"hljs-number\">1</span>;\n    }\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"LIFTOFF!!!\"</span>);\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 3-3: Using a <code class=\"hljs\">while</code> loop to run code while a\ncondition holds true</span></p>\n<p>This construct eliminates a lot of nesting that would be necessary if you used\n<code class=\"hljs\">loop</code>, <code class=\"hljs\">if</code>, <code class=\"hljs\">else</code>, and <code class=\"hljs\">break</code>, and it‚Äôs clearer. While a condition\nevaluates to <code class=\"hljs\">true</code>, the code runs; otherwise, it exits the loop.</p>\n<h4 id=\"looping-through-a-collection-with-for\"><a class=\"header\" href=\"#looping-through-a-collection-with-for\">Looping Through a Collection with <code>for</code></a></h4>\n<p>You can also use the <code class=\"hljs\">while</code> construct to loop over the elements of a\ncollection, such as an array. For example, the loop in Listing 3-4 prints each\nelement in the array <code class=\"hljs\">a</code>.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> a = [<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">50</span>];\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> index = <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-keyword\">while</span> index &lt; <span class=\"hljs-number\">5</span> {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"the value is: {}\"</span>, a[index]);\n\n        index += <span class=\"hljs-number\">1</span>;\n    }\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 3-4: Looping through each element of a collection\nusing a <code class=\"hljs\">while</code> loop</span></p>\n<p>Here, the code counts up through the elements in the array. It starts at index\n<code class=\"hljs\">0</code>, and then loops until it reaches the final index in the array (that is,\nwhen <code class=\"hljs\">index &lt; 5</code> is no longer <code class=\"hljs\">true</code>). Running this code will print every\nelement in the array:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling loops v0.1.0 (file:///projects/loops)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.32s\n     Running `target/debug/loops`\nthe value is: 10\nthe value is: 20\nthe value is: 30\nthe value is: 40\nthe value is: 50\n</code></pre>\n<p>All five array values appear in the terminal, as expected. Even though <code class=\"hljs\">index</code>\nwill reach a value of <code class=\"hljs\">5</code> at some point, the loop stops executing before trying\nto fetch a sixth value from the array.</p>\n<p>However, this approach is error prone; we could cause the program to panic if\nthe index value or test condition is incorrect. For example, if you changed the\ndefinition of the <code class=\"hljs\">a</code> array to have four elements but forgot to update the\ncondition to <code class=\"hljs\">while index &lt; 4</code>, the code would panic. It‚Äôs also slow, because\nthe compiler adds runtime code to perform the conditional check of whether the\nindex is within the bounds of the array on every iteration through the loop.</p>\n<p>As a more concise alternative, you can use a <code class=\"hljs\">for</code> loop and execute some code\nfor each item in a collection. A <code class=\"hljs\">for</code> loop looks like the code in Listing 3-5.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> a = [<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">50</span>];\n\n    <span class=\"hljs-keyword\">for</span> element <span class=\"hljs-keyword\">in</span> a {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"the value is: {element}\"</span>);\n    }\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 3-5: Looping through each element of a collection\nusing a <code class=\"hljs\">for</code> loop</span></p>\n<p>When we run this code, we‚Äôll see the same output as in Listing 3-4. More\nimportantly, we‚Äôve now increased the safety of the code and eliminated the\nchance of bugs that might result from going beyond the end of the array or not\ngoing far enough and missing some items.</p>\n<p>Using the <code class=\"hljs\">for</code> loop, you wouldn‚Äôt need to remember to change any other code if\nyou changed the number of values in the array, as you would with the method\nused in Listing 3-4.</p>\n<p>The safety and conciseness of <code class=\"hljs\">for</code> loops make them the most commonly used loop\nconstruct in Rust. Even in situations in which you want to run some code a\ncertain number of times, as in the countdown example that used a <code class=\"hljs\">while</code> loop\nin Listing 3-3, most Rustaceans would use a <code class=\"hljs\">for</code> loop. The way to do that\nwould be to use a <code class=\"hljs\">Range</code>, provided by the standard library, which generates\nall numbers in sequence starting from one number and ending before another\nnumber.</p>\n<p>Here‚Äôs what the countdown would look like using a <code class=\"hljs\">for</code> loop and another method\nwe‚Äôve not yet talked about, <code class=\"hljs\">rev</code>, to reverse the range:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">for</span> number <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-number\">1</span>..<span class=\"hljs-number\">4</span>).rev() {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{number}!\"</span>);\n    }\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"LIFTOFF!!!\"</span>);\n}</code></pre></pre>\n<p>This code is a bit nicer, isn‚Äôt it?</p>\n<h2 id=\"summary-2\"><a class=\"header\" href=\"#summary-2\">Summary</a></h2>\n<p>You made it! This was a sizable chapter: you learned about variables, scalar\nand compound data types, functions, comments, <code class=\"hljs\">if</code> expressions, and loops! To\npractice with the concepts discussed in this chapter, try building programs to\ndo the following:</p>\n<ul>\n<li>Convert temperatures between Fahrenheit and Celsius.</li>\n<li>Generate the <em>n</em>th Fibonacci number.</li>\n<li>Print the lyrics to the Christmas carol ‚ÄúThe Twelve Days of Christmas,‚Äù\ntaking advantage of the repetition in the song.</li>\n</ul>\n<p>When you‚Äôre ready to move on, we‚Äôll talk about a concept in Rust that <em>doesn‚Äôt</em>\ncommonly exist in other programming languages: ownership.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"understanding-ownership\"><a class=\"header\" href=\"#understanding-ownership\">Understanding Ownership</a></h1>\n<p>Ownership is Rust‚Äôs most unique feature and has deep implications for the rest\nof the language. It enables Rust to make memory safety guarantees without\nneeding a garbage collector, so it‚Äôs important to understand how ownership\nworks. In this chapter, we‚Äôll talk about ownership as well as several related\nfeatures: borrowing, slices, and how Rust lays data out in memory.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"what-is-ownership\"><a class=\"header\" href=\"#what-is-ownership\">What Is Ownership?</a></h2>\n<p><em>Ownership</em> is a set of rules that govern how a Rust program manages memory.\nAll programs have to manage the way they use a computer‚Äôs memory while running.\nSome languages have garbage collection that regularly looks for no-longer-used\nmemory as the program runs; in other languages, the programmer must explicitly\nallocate and free the memory. Rust uses a third approach: memory is managed\nthrough a system of ownership with a set of rules that the compiler checks. If\nany of the rules are violated, the program won‚Äôt compile. None of the features\nof ownership will slow down your program while it‚Äôs running.</p>\n<p>Because ownership is a new concept for many programmers, it does take some time\nto get used to. The good news is that the more experienced you become with Rust\nand the rules of the ownership system, the easier you‚Äôll find it to naturally\ndevelop code that is safe and efficient. Keep at it!</p>\n<p>When you understand ownership, you‚Äôll have a solid foundation for understanding\nthe features that make Rust unique. In this chapter, you‚Äôll learn ownership by\nworking through some examples that focus on a very common data structure:\nstrings.</p>\n<section class=\"note\" aria-role=\"note\">\n<h3 id=\"the-stack-and-the-heap\"><a class=\"header\" href=\"#the-stack-and-the-heap\">The Stack and the Heap</a></h3>\n<p>Many programming languages don‚Äôt require you to think about the stack and the\nheap very often. But in a systems programming language like Rust, whether a\nvalue is on the stack or the heap affects how the language behaves and why\nyou have to make certain decisions. Parts of ownership will be described in\nrelation to the stack and the heap later in this chapter, so here is a brief\nexplanation in preparation.</p>\n<p>Both the stack and the heap are parts of memory available to your code to use\nat runtime, but they are structured in different ways. The stack stores\nvalues in the order it gets them and removes the values in the opposite\norder. This is referred to as <em>last in, first out</em>. Think of a stack of\nplates: when you add more plates, you put them on top of the pile, and when\nyou need a plate, you take one off the top. Adding or removing plates from\nthe middle or bottom wouldn‚Äôt work as well! Adding data is called <em>pushing\nonto the stack</em>, and removing data is called <em>popping off the stack</em>. All\ndata stored on the stack must have a known, fixed size. Data with an unknown\nsize at compile time or a size that might change must be stored on the heap\ninstead.</p>\n<p>The heap is less organized: when you put data on the heap, you request a\ncertain amount of space. The memory allocator finds an empty spot in the heap\nthat is big enough, marks it as being in use, and returns a <em>pointer</em>, which\nis the address of that location. This process is called <em>allocating on the\nheap</em> and is sometimes abbreviated as just <em>allocating</em> (pushing values onto\nthe stack is not considered allocating). Because the pointer to the heap is a\nknown, fixed size, you can store the pointer on the stack, but when you want\nthe actual data, you must follow the pointer. Think of being seated at a\nrestaurant. When you enter, you state the number of people in your group, and\nthe host finds an empty table that fits everyone and leads you there. If\nsomeone in your group comes late, they can ask where you‚Äôve been seated to\nfind you.</p>\n<p>Pushing to the stack is faster than allocating on the heap because the\nallocator never has to search for a place to store new data; that location is\nalways at the top of the stack. Comparatively, allocating space on the heap\nrequires more work because the allocator must first find a big enough space\nto hold the data and then perform bookkeeping to prepare for the next\nallocation.</p>\n<p>Accessing data in the heap is slower than accessing data on the stack because\nyou have to follow a pointer to get there. Contemporary processors are faster\nif they jump around less in memory. Continuing the analogy, consider a server\nat a restaurant taking orders from many tables. It‚Äôs most efficient to get\nall the orders at one table before moving on to the next table. Taking an\norder from table A, then an order from table B, then one from A again, and\nthen one from B again would be a much slower process. By the same token, a\nprocessor can do its job better if it works on data that‚Äôs close to other\ndata (as it is on the stack) rather than farther away (as it can be on the\nheap).</p>\n<p>When your code calls a function, the values passed into the function\n(including, potentially, pointers to data on the heap) and the function‚Äôs\nlocal variables get pushed onto the stack. When the function is over, those\nvalues get popped off the stack.</p>\n<p>Keeping track of what parts of code are using what data on the heap,\nminimizing the amount of duplicate data on the heap, and cleaning up unused\ndata on the heap so you don‚Äôt run out of space are all problems that ownership\naddresses. Once you understand ownership, you won‚Äôt need to think about the\nstack and the heap very often, but knowing that the main purpose of ownership\nis to manage heap data can help explain why it works the way it does.</p>\n</section>\n<h3 id=\"ownership-rules\"><a class=\"header\" href=\"#ownership-rules\">Ownership Rules</a></h3>\n<p>First, let‚Äôs take a look at the ownership rules. Keep these rules in mind as we\nwork through the examples that illustrate them:</p>\n<ul>\n<li>Each value in Rust has an <em>owner</em>.</li>\n<li>There can only be one owner at a time.</li>\n<li>When the owner goes out of scope, the value will be dropped.</li>\n</ul>\n<h3 id=\"variable-scope\"><a class=\"header\" href=\"#variable-scope\">Variable Scope</a></h3>\n<p>Now that we‚Äôre past basic Rust syntax, we won‚Äôt include all the <code class=\"hljs\">fn main() {</code>\ncode in examples, so if you‚Äôre following along, make sure to put the following\nexamples inside a <code class=\"hljs\">main</code> function manually. As a result, our examples will be a\nbit more concise, letting us focus on the actual details rather than\nboilerplate code.</p>\n<p>As a first example of ownership, we‚Äôll look at the <em>scope</em> of some variables. A\nscope is the range within a program for which an item is valid. Take the\nfollowing variable:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> s = <span class=\"hljs-string\">\"hello\"</span>;\n<span class=\"boring\">}</span></code></pre></pre>\n<p>The variable <code class=\"hljs\">s</code> refers to a string literal, where the value of the string is\nhardcoded into the text of our program. The variable is valid from the point at\nwhich it‚Äôs declared until the end of the current <em>scope</em>. Listing 4-1 shows a\nprogram with comments annotating where the variable <code class=\"hljs\">s</code> would be valid.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    {                      <span class=\"hljs-comment\">// s is not valid here, it‚Äôs not yet declared</span>\n        <span class=\"hljs-keyword\">let</span> s = <span class=\"hljs-string\">\"hello\"</span>;   <span class=\"hljs-comment\">// s is valid from this point forward</span>\n\n        <span class=\"hljs-comment\">// do stuff with s</span>\n    }                      <span class=\"hljs-comment\">// this scope is now over, and s is no longer valid</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 4-1: A variable and the scope in which it is\nvalid</span></p>\n<p>In other words, there are two important points in time here:</p>\n<ul>\n<li>When <code class=\"hljs\">s</code> comes <em>into</em> scope, it is valid.</li>\n<li>It remains valid until it goes <em>out of</em> scope.</li>\n</ul>\n<p>At this point, the relationship between scopes and when variables are valid is\nsimilar to that in other programming languages. Now we‚Äôll build on top of this\nunderstanding by introducing the <code class=\"hljs\">String</code> type.</p>\n<h3 id=\"the-string-type\"><a class=\"header\" href=\"#the-string-type\">The <code>String</code> Type</a></h3>\n<p>To illustrate the rules of ownership, we need a data type that is more complex\nthan those we covered in the <a href=\"ch03-02-data-types.html#data-types\">‚ÄúData Types‚Äù</a><!-- ignore --> section\nof Chapter 3. The types covered previously are of a known size, can be stored\non the stack and popped off the stack when their scope is over, and can be\nquickly and trivially copied to make a new, independent instance if another\npart of code needs to use the same value in a different scope. But we want to\nlook at data that is stored on the heap and explore how Rust knows when to\nclean up that data, and the <code class=\"hljs\">String</code> type is a great example.</p>\n<p>We‚Äôll concentrate on the parts of <code class=\"hljs\">String</code> that relate to ownership. These\naspects also apply to other complex data types, whether they are provided by\nthe standard library or created by you. We‚Äôll discuss <code class=\"hljs\">String</code> in more depth in\n<a href=\"ch08-02-strings.html\">Chapter 8</a><!-- ignore -->.</p>\n<p>We‚Äôve already seen string literals, where a string value is hardcoded into our\nprogram. String literals are convenient, but they aren‚Äôt suitable for every\nsituation in which we may want to use text. One reason is that they‚Äôre\nimmutable. Another is that not every string value can be known when we write\nour code: for example, what if we want to take user input and store it? For\nthese situations, Rust has a second string type, <code class=\"hljs\">String</code>. This type manages\ndata allocated on the heap and as such is able to store an amount of text that\nis unknown to us at compile time. You can create a <code class=\"hljs\">String</code> from a string\nliteral using the <code class=\"hljs\">from</code> function, like so:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> s = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"hello\"</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<p>The double colon <code class=\"hljs\">::</code> operator allows us to namespace this particular <code class=\"hljs\">from</code>\nfunction under the <code class=\"hljs\">String</code> type rather than using some sort of name like\n<code class=\"hljs\">string_from</code>. We‚Äôll discuss this syntax more in the <a href=\"ch05-03-method-syntax.html#method-syntax\">‚ÄúMethod\nSyntax‚Äù</a><!-- ignore --> section of Chapter 5, and when we talk\nabout namespacing with modules in <a href=\"ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html\">‚ÄúPaths for Referring to an Item in the\nModule Tree‚Äù</a><!-- ignore --> in Chapter 7.</p>\n<p>This kind of string <em>can</em> be mutated:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> s = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"hello\"</span>);\n\n    s.push_str(<span class=\"hljs-string\">\", world!\"</span>); <span class=\"hljs-comment\">// push_str() appends a literal to a String</span>\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{s}\"</span>); <span class=\"hljs-comment\">// This will print `hello, world!`</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<p>So, what‚Äôs the difference here? Why can <code class=\"hljs\">String</code> be mutated but literals\ncannot? The difference is in how these two types deal with memory.</p>\n<h3 id=\"memory-and-allocation\"><a class=\"header\" href=\"#memory-and-allocation\">Memory and Allocation</a></h3>\n<p>In the case of a string literal, we know the contents at compile time, so the\ntext is hardcoded directly into the final executable. This is why string\nliterals are fast and efficient. But these properties only come from the string\nliteral‚Äôs immutability. Unfortunately, we can‚Äôt put a blob of memory into the\nbinary for each piece of text whose size is unknown at compile time and whose\nsize might change while running the program.</p>\n<p>With the <code class=\"hljs\">String</code> type, in order to support a mutable, growable piece of text,\nwe need to allocate an amount of memory on the heap, unknown at compile time,\nto hold the contents. This means:</p>\n<ul>\n<li>The memory must be requested from the memory allocator at runtime.</li>\n<li>We need a way of returning this memory to the allocator when we‚Äôre done with\nour <code class=\"hljs\">String</code>.</li>\n</ul>\n<p>That first part is done by us: when we call <code class=\"hljs\">String::from</code>, its implementation\nrequests the memory it needs. This is pretty much universal in programming\nlanguages.</p>\n<p>However, the second part is different. In languages with a <em>garbage collector\n(GC)</em>, the GC keeps track of and cleans up memory that isn‚Äôt being used\nanymore, and we don‚Äôt need to think about it. In most languages without a GC,\nit‚Äôs our responsibility to identify when memory is no longer being used and to\ncall code to explicitly free it, just as we did to request it. Doing this\ncorrectly has historically been a difficult programming problem. If we forget,\nwe‚Äôll waste memory. If we do it too early, we‚Äôll have an invalid variable. If\nwe do it twice, that‚Äôs a bug too. We need to pair exactly one <code class=\"hljs\">allocate</code> with\nexactly one <code class=\"hljs\">free</code>.</p>\n<p>Rust takes a different path: the memory is automatically returned once the\nvariable that owns it goes out of scope. Here‚Äôs a version of our scope example\nfrom Listing 4-1 using a <code class=\"hljs\">String</code> instead of a string literal:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    {\n        <span class=\"hljs-keyword\">let</span> s = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"hello\"</span>); <span class=\"hljs-comment\">// s is valid from this point forward</span>\n\n        <span class=\"hljs-comment\">// do stuff with s</span>\n    }                                  <span class=\"hljs-comment\">// this scope is now over, and s is no</span>\n                                       <span class=\"hljs-comment\">// longer valid</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<p>There is a natural point at which we can return the memory our <code class=\"hljs\">String</code> needs\nto the allocator: when <code class=\"hljs\">s</code> goes out of scope. When a variable goes out of\nscope, Rust calls a special function for us. This function is called\n<a href=\"../std/ops/trait.Drop.html#tymethod.drop\"><code class=\"hljs\">drop</code></a><!-- ignore -->, and it‚Äôs where the author of <code class=\"hljs\">String</code> can put\nthe code to return the memory. Rust calls <code class=\"hljs\">drop</code> automatically at the closing\ncurly bracket.</p>\n<section class=\"note\" aria-role=\"note\">\n<p>Note: In C++, this pattern of deallocating resources at the end of an item‚Äôs\nlifetime is sometimes called <em>Resource Acquisition Is Initialization (RAII)</em>.\nThe <code class=\"hljs\">drop</code> function in Rust will be familiar to you if you‚Äôve used RAII\npatterns.</p>\n</section>\n<p>This pattern has a profound impact on the way Rust code is written. It may seem\nsimple right now, but the behavior of code can be unexpected in more\ncomplicated situations when we want to have multiple variables use the data\nwe‚Äôve allocated on the heap. Let‚Äôs explore some of those situations now.</p>\n<!-- Old heading. Do not remove or links may break. -->\n<p><a id=\"ways-variables-and-data-interact-move\"></a></p>\n<h4 id=\"variables-and-data-interacting-with-move\"><a class=\"header\" href=\"#variables-and-data-interacting-with-move\">Variables and Data Interacting with Move</a></h4>\n<p>Multiple variables can interact with the same data in different ways in Rust.\nLet‚Äôs look at an example using an integer in Listing 4-2.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">5</span>;\n    <span class=\"hljs-keyword\">let</span> y = x;\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 4-2: Assigning the integer value of variable <code class=\"hljs\">x</code>\nto <code class=\"hljs\">y</code></span></p>\n<p>We can probably guess what this is doing: ‚Äúbind the value <code class=\"hljs\">5</code> to <code class=\"hljs\">x</code>; then make\na copy of the value in <code class=\"hljs\">x</code> and bind it to <code class=\"hljs\">y</code>.‚Äù We now have two variables, <code class=\"hljs\">x</code>\nand <code class=\"hljs\">y</code>, and both equal <code class=\"hljs\">5</code>. This is indeed what is happening, because integers\nare simple values with a known, fixed size, and these two <code class=\"hljs\">5</code> values are pushed\nonto the stack.</p>\n<p>Now let‚Äôs look at the <code class=\"hljs\">String</code> version:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> s1 = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"hello\"</span>);\n    <span class=\"hljs-keyword\">let</span> s2 = s1;\n<span class=\"boring\">}</span></code></pre></pre>\n<p>This looks very similar, so we might assume that the way it works would be the\nsame: that is, the second line would make a copy of the value in <code class=\"hljs\">s1</code> and bind\nit to <code class=\"hljs\">s2</code>. But this isn‚Äôt quite what happens.</p>\n<p>Take a look at Figure 4-1 to see what is happening to <code class=\"hljs\">String</code> under the\ncovers. A <code class=\"hljs\">String</code> is made up of three parts, shown on the left: a pointer to\nthe memory that holds the contents of the string, a length, and a capacity.\nThis group of data is stored on the stack. On the right is the memory on the\nheap that holds the contents.</p>\n<p><img alt=\"Two tables: the first table contains the representation of s1 on the\nstack, consisting of its length (5), capacity (5), and a pointer to the first\nvalue in the second table. The second table contains the representation of the\nstring data on the heap, byte by byte.\" src=\"img/trpl04-01.svg\" class=\"center\" style=\"width: 50%;\"></p>\n<p><span class=\"caption\">Figure 4-1: Representation in memory of a <code class=\"hljs\">String</code>\nholding the value <code class=\"hljs\">\"hello\"</code> bound to <code class=\"hljs\">s1</code></span></p>\n<p>The length is how much memory, in bytes, the contents of the <code class=\"hljs\">String</code> are\ncurrently using. The capacity is the total amount of memory, in bytes, that the\n<code class=\"hljs\">String</code> has received from the allocator. The difference between length and\ncapacity matters, but not in this context, so for now, it‚Äôs fine to ignore the\ncapacity.</p>\n<p>When we assign <code class=\"hljs\">s1</code> to <code class=\"hljs\">s2</code>, the <code class=\"hljs\">String</code> data is copied, meaning we copy the\npointer, the length, and the capacity that are on the stack. We do not copy the\ndata on the heap that the pointer refers to. In other words, the data\nrepresentation in memory looks like Figure 4-2.</p>\n<p><img alt=\"Three tables: tables s1 and s2 representing those strings on the\nstack, respectively, and both pointing to the same string data on the heap.\" src=\"img/trpl04-02.svg\" class=\"center\" style=\"width: 50%;\"></p>\n<p><span class=\"caption\">Figure 4-2: Representation in memory of the variable <code class=\"hljs\">s2</code>\nthat has a copy of the pointer, length, and capacity of <code class=\"hljs\">s1</code></span></p>\n<p>The representation does <em>not</em> look like Figure 4-3, which is what memory would\nlook like if Rust instead copied the heap data as well. If Rust did this, the\noperation <code class=\"hljs\">s2 = s1</code> could be very expensive in terms of runtime performance if\nthe data on the heap were large.</p>\n<p><img alt=\"Four tables: two tables representing the stack data for s1 and s2,\nand each points to its own copy of string data on the heap.\" src=\"img/trpl04-03.svg\" class=\"center\" style=\"width: 50%;\"></p>\n<p><span class=\"caption\">Figure 4-3: Another possibility for what <code class=\"hljs\">s2 = s1</code> might\ndo if Rust copied the heap data as well</span></p>\n<p>Earlier, we said that when a variable goes out of scope, Rust automatically\ncalls the <code class=\"hljs\">drop</code> function and cleans up the heap memory for that variable. But\nFigure 4-2 shows both data pointers pointing to the same location. This is a\nproblem: when <code class=\"hljs\">s2</code> and <code class=\"hljs\">s1</code> go out of scope, they will both try to free the\nsame memory. This is known as a <em>double free</em> error and is one of the memory\nsafety bugs we mentioned previously. Freeing memory twice can lead to memory\ncorruption, which can potentially lead to security vulnerabilities.</p>\n<p>To ensure memory safety, after the line <code class=\"hljs\">let s2 = s1;</code>, Rust considers <code class=\"hljs\">s1</code> as\nno longer valid. Therefore, Rust doesn‚Äôt need to free anything when <code class=\"hljs\">s1</code> goes\nout of scope. Check out what happens when you try to use <code class=\"hljs\">s1</code> after <code class=\"hljs\">s2</code> is\ncreated; it won‚Äôt work:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> s1 = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"hello\"</span>);\n    <span class=\"hljs-keyword\">let</span> s2 = s1;\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{s1}, world!\"</span>);\n<span class=\"boring\">}</span></code></pre>\n<p>You‚Äôll get an error like this because Rust prevents you from using the\ninvalidated reference:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling ownership v0.1.0 (file:///projects/ownership)\nerror[E0382]: borrow of moved value: `s1`\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/main.rs:5:15</span>\n  |\n2 |     let s1 = String::from(\"hello\");\n  |         -- move occurs because `s1` has type `String`, which does not implement the `Copy` trait\n3 |     let s2 = s1;\n  |              -- value moved here\n4 |\n5 |     println!(\"{s1}, world!\");\n  |               ^^^^ value borrowed here after move\n  |\n  = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider cloning the value if the performance cost is acceptable\n  |\n3 |     let s2 = s1.clone();\n  |                ++++++++\n\nFor more information about this error, try `rustc --explain E0382`.\nerror: could not compile `ownership` (bin \"ownership\") due to 1 previous error\n</code></pre>\n<p>If you‚Äôve heard the terms <em>shallow copy</em> and <em>deep copy</em> while working with\nother languages, the concept of copying the pointer, length, and capacity\nwithout copying the data probably sounds like making a shallow copy. But\nbecause Rust also invalidates the first variable, instead of being called a\nshallow copy, it‚Äôs known as a <em>move</em>. In this example, we would say that <code class=\"hljs\">s1</code>\nwas <em>moved</em> into <code class=\"hljs\">s2</code>. So, what actually happens is shown in Figure 4-4.</p>\n<p><img alt=\"Three tables: tables s1 and s2 representing those strings on the\nstack, respectively, and both pointing to the same string data on the heap.\nTable s1 is grayed out be-cause s1 is no longer valid; only s2 can be used to\naccess the heap data.\" src=\"img/trpl04-04.svg\" class=\"center\" style=\"width:\n50%;\"></p>\n<p><span class=\"caption\">Figure 4-4: Representation in memory after <code class=\"hljs\">s1</code> has been\ninvalidated</span></p>\n<p>That solves our problem! With only <code class=\"hljs\">s2</code> valid, when it goes out of scope it\nalone will free the memory, and we‚Äôre done.</p>\n<p>In addition, there‚Äôs a design choice that‚Äôs implied by this: Rust will never\nautomatically create ‚Äúdeep‚Äù copies of your data. Therefore, any <em>automatic</em>\ncopying can be assumed to be inexpensive in terms of runtime performance.</p>\n<!-- Old heading. Do not remove or links may break. -->\n<p><a id=\"ways-variables-and-data-interact-clone\"></a></p>\n<h4 id=\"variables-and-data-interacting-with-clone\"><a class=\"header\" href=\"#variables-and-data-interacting-with-clone\">Variables and Data Interacting with Clone</a></h4>\n<p>If we <em>do</em> want to deeply copy the heap data of the <code class=\"hljs\">String</code>, not just the\nstack data, we can use a common method called <code class=\"hljs\">clone</code>. We‚Äôll discuss method\nsyntax in Chapter 5, but because methods are a common feature in many\nprogramming languages, you‚Äôve probably seen them before.</p>\n<p>Here‚Äôs an example of the <code class=\"hljs\">clone</code> method in action:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> s1 = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"hello\"</span>);\n    <span class=\"hljs-keyword\">let</span> s2 = s1.clone();\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"s1 = {s1}, s2 = {s2}\"</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<p>This works just fine and explicitly produces the behavior shown in Figure 4-3,\nwhere the heap data <em>does</em> get copied.</p>\n<p>When you see a call to <code class=\"hljs\">clone</code>, you know that some arbitrary code is being\nexecuted and that code may be expensive. It‚Äôs a visual indicator that something\ndifferent is going on.</p>\n<h4 id=\"stack-only-data-copy\"><a class=\"header\" href=\"#stack-only-data-copy\">Stack-Only Data: Copy</a></h4>\n<p>There‚Äôs another wrinkle we haven‚Äôt talked about yet. This code using\nintegers‚Äîpart of which was shown in Listing 4-2‚Äîworks and is valid:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">5</span>;\n    <span class=\"hljs-keyword\">let</span> y = x;\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"x = {x}, y = {y}\"</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<p>But this code seems to contradict what we just learned: we don‚Äôt have a call to\n<code class=\"hljs\">clone</code>, but <code class=\"hljs\">x</code> is still valid and wasn‚Äôt moved into <code class=\"hljs\">y</code>.</p>\n<p>The reason is that types such as integers that have a known size at compile\ntime are stored entirely on the stack, so copies of the actual values are quick\nto make. That means there‚Äôs no reason we would want to prevent <code class=\"hljs\">x</code> from being\nvalid after we create the variable <code class=\"hljs\">y</code>. In other words, there‚Äôs no difference\nbetween deep and shallow copying here, so calling <code class=\"hljs\">clone</code> wouldn‚Äôt do anything\ndifferent from the usual shallow copying, and we can leave it out.</p>\n<p>Rust has a special annotation called the <code class=\"hljs\">Copy</code> trait that we can place on\ntypes that are stored on the stack, as integers are (we‚Äôll talk more about\ntraits in <a href=\"ch10-02-traits.html\">Chapter 10</a><!-- ignore -->). If a type implements the <code class=\"hljs\">Copy</code>\ntrait, variables that use it do not move, but rather are trivially copied,\nmaking them still valid after assignment to another variable.</p>\n<p>Rust won‚Äôt let us annotate a type with <code class=\"hljs\">Copy</code> if the type, or any of its parts,\nhas implemented the <code class=\"hljs\">Drop</code> trait. If the type needs something special to happen\nwhen the value goes out of scope and we add the <code class=\"hljs\">Copy</code> annotation to that type,\nwe‚Äôll get a compile-time error. To learn about how to add the <code class=\"hljs\">Copy</code> annotation\nto your type to implement the trait, see <a href=\"appendix-03-derivable-traits.html\">‚ÄúDerivable\nTraits‚Äù</a><!-- ignore --> in Appendix C.</p>\n<p>So, what types implement the <code class=\"hljs\">Copy</code> trait? You can check the documentation for\nthe given type to be sure, but as a general rule, any group of simple scalar\nvalues can implement <code class=\"hljs\">Copy</code>, and nothing that requires allocation or is some\nform of resource can implement <code class=\"hljs\">Copy</code>. Here are some of the types that\nimplement <code class=\"hljs\">Copy</code>:</p>\n<ul>\n<li>All the integer types, such as <code class=\"hljs\">u32</code>.</li>\n<li>The Boolean type, <code class=\"hljs\">bool</code>, with values <code class=\"hljs\">true</code> and <code class=\"hljs\">false</code>.</li>\n<li>All the floating-point types, such as <code class=\"hljs\">f64</code>.</li>\n<li>The character type, <code class=\"hljs\">char</code>.</li>\n<li>Tuples, if they only contain types that also implement <code class=\"hljs\">Copy</code>. For example,\n<code class=\"hljs\">(i32, i32)</code> implements <code class=\"hljs\">Copy</code>, but <code class=\"hljs\">(i32, String)</code> does not.</li>\n</ul>\n<h3 id=\"ownership-and-functions\"><a class=\"header\" href=\"#ownership-and-functions\">Ownership and Functions</a></h3>\n<p>The mechanics of passing a value to a function are similar to those when\nassigning a value to a variable. Passing a variable to a function will move or\ncopy, just as assignment does. Listing 4-3 has an example with some annotations\nshowing where variables go into and out of scope.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> s = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"hello\"</span>);  <span class=\"hljs-comment\">// s comes into scope</span>\n\n    takes_ownership(s);             <span class=\"hljs-comment\">// s's value moves into the function...</span>\n                                    <span class=\"hljs-comment\">// ... and so is no longer valid here</span>\n\n    <span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">5</span>;                      <span class=\"hljs-comment\">// x comes into scope</span>\n\n    makes_copy(x);                  <span class=\"hljs-comment\">// x would move into the function,</span>\n                                    <span class=\"hljs-comment\">// but i32 is Copy, so it's okay to still</span>\n                                    <span class=\"hljs-comment\">// use x afterward</span>\n\n} <span class=\"hljs-comment\">// Here, x goes out of scope, then s. But because s's value was moved, nothing</span>\n  <span class=\"hljs-comment\">// special happens.</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">takes_ownership</span></span>(some_string: <span class=\"hljs-built_in\">String</span>) { <span class=\"hljs-comment\">// some_string comes into scope</span>\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{some_string}\"</span>);\n} <span class=\"hljs-comment\">// Here, some_string goes out of scope and `drop` is called. The backing</span>\n  <span class=\"hljs-comment\">// memory is freed.</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">makes_copy</span></span>(some_integer: <span class=\"hljs-built_in\">i32</span>) { <span class=\"hljs-comment\">// some_integer comes into scope</span>\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{some_integer}\"</span>);\n} <span class=\"hljs-comment\">// Here, some_integer goes out of scope. Nothing special happens.</span></code></pre></pre>\n<p><span class=\"caption\">Listing 4-3: Functions with ownership and scope\nannotated</span></p>\n<p>If we tried to use <code class=\"hljs\">s</code> after the call to <code class=\"hljs\">takes_ownership</code>, Rust would throw a\ncompile-time error. These static checks protect us from mistakes. Try adding\ncode to <code class=\"hljs\">main</code> that uses <code class=\"hljs\">s</code> and <code class=\"hljs\">x</code> to see where you can use them and where\nthe ownership rules prevent you from doing so.</p>\n<h3 id=\"return-values-and-scope\"><a class=\"header\" href=\"#return-values-and-scope\">Return Values and Scope</a></h3>\n<p>Returning values can also transfer ownership. Listing 4-4 shows an example of a\nfunction that returns some value, with similar annotations as those in Listing\n4-3.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> s1 = gives_ownership();         <span class=\"hljs-comment\">// gives_ownership moves its return</span>\n                                        <span class=\"hljs-comment\">// value into s1</span>\n\n    <span class=\"hljs-keyword\">let</span> s2 = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"hello\"</span>);     <span class=\"hljs-comment\">// s2 comes into scope</span>\n\n    <span class=\"hljs-keyword\">let</span> s3 = takes_and_gives_back(s2);  <span class=\"hljs-comment\">// s2 is moved into</span>\n                                        <span class=\"hljs-comment\">// takes_and_gives_back, which also</span>\n                                        <span class=\"hljs-comment\">// moves its return value into s3</span>\n} <span class=\"hljs-comment\">// Here, s3 goes out of scope and is dropped. s2 was moved, so nothing</span>\n  <span class=\"hljs-comment\">// happens. s1 goes out of scope and is dropped.</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">gives_ownership</span></span>() -&gt; <span class=\"hljs-built_in\">String</span> {             <span class=\"hljs-comment\">// gives_ownership will move its</span>\n                                             <span class=\"hljs-comment\">// return value into the function</span>\n                                             <span class=\"hljs-comment\">// that calls it</span>\n\n    <span class=\"hljs-keyword\">let</span> some_string = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"yours\"</span>); <span class=\"hljs-comment\">// some_string comes into scope</span>\n\n    some_string                              <span class=\"hljs-comment\">// some_string is returned and</span>\n                                             <span class=\"hljs-comment\">// moves out to the calling</span>\n                                             <span class=\"hljs-comment\">// function</span>\n}\n\n<span class=\"hljs-comment\">// This function takes a String and returns one</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">takes_and_gives_back</span></span>(a_string: <span class=\"hljs-built_in\">String</span>) -&gt; <span class=\"hljs-built_in\">String</span> { <span class=\"hljs-comment\">// a_string comes into</span>\n                                                      <span class=\"hljs-comment\">// scope</span>\n\n    a_string  <span class=\"hljs-comment\">// a_string is returned and moves out to the calling function</span>\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 4-4: Transferring ownership of return\nvalues</span></p>\n<p>The ownership of a variable follows the same pattern every time: assigning a\nvalue to another variable moves it. When a variable that includes data on the\nheap goes out of scope, the value will be cleaned up by <code class=\"hljs\">drop</code> unless ownership\nof the data has been moved to another variable.</p>\n<p>While this works, taking ownership and then returning ownership with every\nfunction is a bit tedious. What if we want to let a function use a value but\nnot take ownership? It‚Äôs quite annoying that anything we pass in also needs to\nbe passed back if we want to use it again, in addition to any data resulting\nfrom the body of the function that we might want to return as well.</p>\n<p>Rust does let us return multiple values using a tuple, as shown in Listing 4-5.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> s1 = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"hello\"</span>);\n\n    <span class=\"hljs-keyword\">let</span> (s2, len) = calculate_length(s1);\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The length of '{s2}' is {len}.\"</span>);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">calculate_length</span></span>(s: <span class=\"hljs-built_in\">String</span>) -&gt; (<span class=\"hljs-built_in\">String</span>, <span class=\"hljs-built_in\">usize</span>) {\n    <span class=\"hljs-keyword\">let</span> length = s.len(); <span class=\"hljs-comment\">// len() returns the length of a String</span>\n\n    (s, length)\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 4-5: Returning ownership of parameters</span></p>\n<p>But this is too much ceremony and a lot of work for a concept that should be\ncommon. Luckily for us, Rust has a feature for using a value without\ntransferring ownership, called <em>references</em>.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"references-and-borrowing\"><a class=\"header\" href=\"#references-and-borrowing\">References and Borrowing</a></h2>\n<p>The issue with the tuple code in Listing 4-5 is that we have to return the\n<code class=\"hljs\">String</code> to the calling function so we can still use the <code class=\"hljs\">String</code> after the\ncall to <code class=\"hljs\">calculate_length</code>, because the <code class=\"hljs\">String</code> was moved into\n<code class=\"hljs\">calculate_length</code>. Instead, we can provide a reference to the <code class=\"hljs\">String</code> value.\nA <em>reference</em> is like a pointer in that it‚Äôs an address we can follow to access\nthe data stored at that address; that data is owned by some other variable.\nUnlike a pointer, a reference is guaranteed to point to a valid value of a\nparticular type for the life of that reference.</p>\n<p>Here is how you would define and use a <code class=\"hljs\">calculate_length</code> function that has a\nreference to an object as a parameter instead of taking ownership of the value:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> s1 = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"hello\"</span>);\n\n    <span class=\"hljs-keyword\">let</span> len = calculate_length(&amp;s1);\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The length of '{s1}' is {len}.\"</span>);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">calculate_length</span></span>(s: &amp;<span class=\"hljs-built_in\">String</span>) -&gt; <span class=\"hljs-built_in\">usize</span> {\n    s.len()\n}</code></pre></pre>\n<p>First, notice that all the tuple code in the variable declaration and the\nfunction return value is gone. Second, note that we pass <code class=\"hljs\">&amp;s1</code> into\n<code class=\"hljs\">calculate_length</code> and, in its definition, we take <code class=\"hljs\">&amp;String</code> rather than\n<code class=\"hljs\">String</code>. These ampersands represent <em>references</em>, and they allow you to refer\nto some value without taking ownership of it. Figure 4-5 depicts this concept.</p>\n<p><img alt=\"Three tables: the table for s contains only a pointer to the table\nfor s1. The table for s1 contains the stack data for s1 and points to the\nstring data on the heap.\" src=\"img/trpl04-05.svg\" class=\"center\"></p>\n<p><span class=\"caption\">Figure 4-5: A diagram of <code class=\"hljs\">&amp;String s</code> pointing at <code class=\"hljs\">String s1</code></span></p>\n<section class=\"note\" aria-role=\"note\">\n<p>Note: The opposite of referencing by using <code class=\"hljs\">&amp;</code> is <em>dereferencing</em>, which is\naccomplished with the dereference operator, <code class=\"hljs\">*</code>. We‚Äôll see some uses of the\ndereference operator in Chapter 8 and discuss details of dereferencing in\nChapter 15.</p>\n</section>\n<p>Let‚Äôs take a closer look at the function call here:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> s1 = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"hello\"</span>);\n\n    <span class=\"hljs-keyword\">let</span> len = calculate_length(&amp;s1);\n<span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The length of '{s1}' is {len}.\"</span>);\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">calculate_length</span></span>(s: &amp;<span class=\"hljs-built_in\">String</span>) -&gt; <span class=\"hljs-built_in\">usize</span> {\n</span><span class=\"boring\">    s.len()\n</span><span class=\"boring\">}</span></code></pre></pre>\n<p>The <code class=\"hljs\">&amp;s1</code> syntax lets us create a reference that <em>refers</em> to the value of <code class=\"hljs\">s1</code>\nbut does not own it. Because it does not own it, the value it points to will\nnot be dropped when the reference stops being used.</p>\n<p>Likewise, the signature of the function uses <code class=\"hljs\">&amp;</code> to indicate that the type of\nthe parameter <code class=\"hljs\">s</code> is a reference. Let‚Äôs add some explanatory annotations:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> s1 = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"hello\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> len = calculate_length(&amp;s1);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The length of '{s1}' is {len}.\"</span>);\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">calculate_length</span></span>(s: &amp;<span class=\"hljs-built_in\">String</span>) -&gt; <span class=\"hljs-built_in\">usize</span> { <span class=\"hljs-comment\">// s is a reference to a String</span>\n    s.len()\n} <span class=\"hljs-comment\">// Here, s goes out of scope. But because it does not have ownership of what</span>\n  <span class=\"hljs-comment\">// it refers to, it is not dropped.</span></code></pre></pre>\n<p>The scope in which the variable <code class=\"hljs\">s</code> is valid is the same as any function\nparameter‚Äôs scope, but the value pointed to by the reference is not dropped\nwhen <code class=\"hljs\">s</code> stops being used, because <code class=\"hljs\">s</code> doesn‚Äôt have ownership. When functions\nhave references as parameters instead of the actual values, we won‚Äôt need to\nreturn the values in order to give back ownership, because we never had\nownership.</p>\n<p>We call the action of creating a reference <em>borrowing</em>. As in real life, if a\nperson owns something, you can borrow it from them. When you‚Äôre done, you have\nto give it back. You don‚Äôt own it.</p>\n<p>So, what happens if we try to modify something we‚Äôre borrowing? Try the code in\nListing 4-6. Spoiler alert: it doesn‚Äôt work!</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> s = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"hello\"</span>);\n\n    change(&amp;s);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">change</span></span>(some_string: &amp;<span class=\"hljs-built_in\">String</span>) {\n    some_string.push_str(<span class=\"hljs-string\">\", world\"</span>);\n}</code></pre>\n<p><span class=\"caption\">Listing 4-6: Attempting to modify a borrowed value</span></p>\n<p>Here‚Äôs the error:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling ownership v0.1.0 (file:///projects/ownership)\nerror[E0596]: cannot borrow `*some_string` as mutable, as it is behind a `&amp;` reference\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/main.rs:8:5</span>\n  |\n8 |     some_string.push_str(\", world\");\n  |     ^^^^^^^^^^^ `some_string` is a `&amp;` reference, so the data it refers to cannot be borrowed as mutable\n  |\nhelp: consider changing this to be a mutable reference\n  |\n7 | fn change(some_string: &amp;mut String) {\n  |                         +++\n\nFor more information about this error, try `rustc --explain E0596`.\nerror: could not compile `ownership` (bin \"ownership\") due to 1 previous error\n</code></pre>\n<p>Just as variables are immutable by default, so are references. We‚Äôre not\nallowed to modify something we have a reference to.</p>\n<h3 id=\"mutable-references\"><a class=\"header\" href=\"#mutable-references\">Mutable References</a></h3>\n<p>We can fix the code from Listing 4-6 to allow us to modify a borrowed value\nwith just a few small tweaks that use, instead, a <em>mutable reference</em>:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> s = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"hello\"</span>);\n\n    change(&amp;<span class=\"hljs-keyword\">mut</span> s);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">change</span></span>(some_string: &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-built_in\">String</span>) {\n    some_string.push_str(<span class=\"hljs-string\">\", world\"</span>);\n}</code></pre></pre>\n<p>First we change <code class=\"hljs\">s</code> to be <code class=\"hljs\">mut</code>. Then we create a mutable reference with <code class=\"hljs\">&amp;mut s</code> where we call the <code class=\"hljs\">change</code> function, and update the function signature to\naccept a mutable reference with <code class=\"hljs\">some_string: &amp;mut String</code>. This makes it very\nclear that the <code class=\"hljs\">change</code> function will mutate the value it borrows.</p>\n<p>Mutable references have one big restriction: if you have a mutable reference to\na value, you can have no other references to that value. This code that\nattempts to create two mutable references to <code class=\"hljs\">s</code> will fail:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> s = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"hello\"</span>);\n\n    <span class=\"hljs-keyword\">let</span> r1 = &amp;<span class=\"hljs-keyword\">mut</span> s;\n    <span class=\"hljs-keyword\">let</span> r2 = &amp;<span class=\"hljs-keyword\">mut</span> s;\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}, {}\"</span>, r1, r2);\n<span class=\"boring\">}</span></code></pre>\n<p>Here‚Äôs the error:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling ownership v0.1.0 (file:///projects/ownership)\nerror[E0499]: cannot borrow `s` as mutable more than once at a time\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/main.rs:5:14</span>\n  |\n4 |     let r1 = &amp;mut s;\n  |              ------ first mutable borrow occurs here\n5 |     let r2 = &amp;mut s;\n  |              ^^^^^^ second mutable borrow occurs here\n6 |\n7 |     println!(\"{}, {}\", r1, r2);\n  |                        -- first borrow later used here\n\nFor more information about this error, try `rustc --explain E0499`.\nerror: could not compile `ownership` (bin \"ownership\") due to 1 previous error\n</code></pre>\n<p>This error says that this code is invalid because we cannot borrow <code class=\"hljs\">s</code> as\nmutable more than once at a time. The first mutable borrow is in <code class=\"hljs\">r1</code> and must\nlast until it‚Äôs used in the <code class=\"hljs\">println!</code>, but between the creation of that\nmutable reference and its usage, we tried to create another mutable reference\nin <code class=\"hljs\">r2</code> that borrows the same data as <code class=\"hljs\">r1</code>.</p>\n<p>The restriction preventing multiple mutable references to the same data at the\nsame time allows for mutation but in a very controlled fashion. It‚Äôs something\nthat new Rustaceans struggle with because most languages let you mutate\nwhenever you‚Äôd like. The benefit of having this restriction is that Rust can\nprevent data races at compile time. A <em>data race</em> is similar to a race\ncondition and happens when these three behaviors occur:</p>\n<ul>\n<li>Two or more pointers access the same data at the same time.</li>\n<li>At least one of the pointers is being used to write to the data.</li>\n<li>There‚Äôs no mechanism being used to synchronize access to the data.</li>\n</ul>\n<p>Data races cause undefined behavior and can be difficult to diagnose and fix\nwhen you‚Äôre trying to track them down at runtime; Rust prevents this problem by\nrefusing to compile code with data races!</p>\n<p>As always, we can use curly brackets to create a new scope, allowing for\nmultiple mutable references, just not <em>simultaneous</em> ones:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> s = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"hello\"</span>);\n\n    {\n        <span class=\"hljs-keyword\">let</span> r1 = &amp;<span class=\"hljs-keyword\">mut</span> s;\n    } <span class=\"hljs-comment\">// r1 goes out of scope here, so we can make a new reference with no problems.</span>\n\n    <span class=\"hljs-keyword\">let</span> r2 = &amp;<span class=\"hljs-keyword\">mut</span> s;\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Rust enforces a similar rule for combining mutable and immutable references.\nThis code results in an error:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> s = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"hello\"</span>);\n\n    <span class=\"hljs-keyword\">let</span> r1 = &amp;s; <span class=\"hljs-comment\">// no problem</span>\n    <span class=\"hljs-keyword\">let</span> r2 = &amp;s; <span class=\"hljs-comment\">// no problem</span>\n    <span class=\"hljs-keyword\">let</span> r3 = &amp;<span class=\"hljs-keyword\">mut</span> s; <span class=\"hljs-comment\">// BIG PROBLEM</span>\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}, {}, and {}\"</span>, r1, r2, r3);\n<span class=\"boring\">}</span></code></pre>\n<p>Here‚Äôs the error:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling ownership v0.1.0 (file:///projects/ownership)\nerror[E0502]: cannot borrow `s` as mutable because it is also borrowed as immutable\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/main.rs:6:14</span>\n  |\n4 |     let r1 = &amp;s; // no problem\n  |              -- immutable borrow occurs here\n5 |     let r2 = &amp;s; // no problem\n6 |     let r3 = &amp;mut s; // BIG PROBLEM\n  |              ^^^^^^ mutable borrow occurs here\n7 |\n8 |     println!(\"{}, {}, and {}\", r1, r2, r3);\n  |                                -- immutable borrow later used here\n\nFor more information about this error, try `rustc --explain E0502`.\nerror: could not compile `ownership` (bin \"ownership\") due to 1 previous error\n</code></pre>\n<p>Whew! We <em>also</em> cannot have a mutable reference while we have an immutable one\nto the same value.</p>\n<p>Users of an immutable reference don‚Äôt expect the value to suddenly change out\nfrom under them! However, multiple immutable references are allowed because no\none who is just reading the data has the ability to affect anyone else‚Äôs\nreading of the data.</p>\n<p>Note that a reference‚Äôs scope starts from where it is introduced and continues\nthrough the last time that reference is used. For instance, this code will\ncompile because the last usage of the immutable references, the <code class=\"hljs\">println!</code>,\noccurs before the mutable reference is introduced:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust edition2021 hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> s = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"hello\"</span>);\n\n    <span class=\"hljs-keyword\">let</span> r1 = &amp;s; <span class=\"hljs-comment\">// no problem</span>\n    <span class=\"hljs-keyword\">let</span> r2 = &amp;s; <span class=\"hljs-comment\">// no problem</span>\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{r1} and {r2}\"</span>);\n    <span class=\"hljs-comment\">// variables r1 and r2 will not be used after this point</span>\n\n    <span class=\"hljs-keyword\">let</span> r3 = &amp;<span class=\"hljs-keyword\">mut</span> s; <span class=\"hljs-comment\">// no problem</span>\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{r3}\"</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<p>The scopes of the immutable references <code class=\"hljs\">r1</code> and <code class=\"hljs\">r2</code> end after the <code class=\"hljs\">println!</code>\nwhere they are last used, which is before the mutable reference <code class=\"hljs\">r3</code> is\ncreated. These scopes don‚Äôt overlap, so this code is allowed: the compiler can\ntell that the reference is no longer being used at a point before the end of\nthe scope.</p>\n<p>Even though borrowing errors may be frustrating at times, remember that it‚Äôs\nthe Rust compiler pointing out a potential bug early (at compile time rather\nthan at runtime) and showing you exactly where the problem is. Then you don‚Äôt\nhave to track down why your data isn‚Äôt what you thought it was.</p>\n<h3 id=\"dangling-references\"><a class=\"header\" href=\"#dangling-references\">Dangling References</a></h3>\n<p>In languages with pointers, it‚Äôs easy to erroneously create a <em>dangling\npointer</em>‚Äîa pointer that references a location in memory that may have been\ngiven to someone else‚Äîby freeing some memory while preserving a pointer to that\nmemory. In Rust, by contrast, the compiler guarantees that references will\nnever be dangling references: if you have a reference to some data, the\ncompiler will ensure that the data will not go out of scope before the\nreference to the data does.</p>\n<p>Let‚Äôs try to create a dangling reference to see how Rust prevents them with a\ncompile-time error:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> reference_to_nothing = dangle();\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">dangle</span></span>() -&gt; &amp;<span class=\"hljs-built_in\">String</span> {\n    <span class=\"hljs-keyword\">let</span> s = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"hello\"</span>);\n\n    &amp;s\n}</code></pre>\n<p>Here‚Äôs the error:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling ownership v0.1.0 (file:///projects/ownership)\nerror[E0106]: missing lifetime specifier\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/main.rs:5:16</span>\n  |\n5 | fn dangle() -&gt; &amp;String {\n  |                ^ expected named lifetime parameter\n  |\n  = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\nhelp: consider using the `'static` lifetime, but this is uncommon unless you're returning a borrowed value from a `const` or a `static`\n  |\n5 | fn dangle() -&gt; &amp;'static String {\n  |                 +++++++\nhelp: instead, you are more likely to want to return an owned value\n  |\n5 - fn dangle() -&gt; &amp;String {\n5 + fn dangle() -&gt; String {\n  |\n\nerror[E0515]: cannot return reference to local variable `s`\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/main.rs:8:5</span>\n  |\n8 |     &amp;s\n  |     ^^ returns a reference to data owned by the current function\n\nSome errors have detailed explanations: E0106, E0515.\nFor more information about an error, try `rustc --explain E0106`.\nerror: could not compile `ownership` (bin \"ownership\") due to 2 previous errors\n</code></pre>\n<p>This error message refers to a feature we haven‚Äôt covered yet: lifetimes. We‚Äôll\ndiscuss lifetimes in detail in Chapter 10. But, if you disregard the parts\nabout lifetimes, the message does contain the key to why this code is a problem:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">this function's return type contains a borrowed value, but there is no value\nfor it to be borrowed from\n</code></pre>\n<p>Let‚Äôs take a closer look at exactly what‚Äôs happening at each stage of our\n<code class=\"hljs\">dangle</code> code:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> reference_to_nothing = dangle();\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">dangle</span></span>() -&gt; &amp;<span class=\"hljs-built_in\">String</span> { <span class=\"hljs-comment\">// dangle returns a reference to a String</span>\n\n    <span class=\"hljs-keyword\">let</span> s = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"hello\"</span>); <span class=\"hljs-comment\">// s is a new String</span>\n\n    &amp;s <span class=\"hljs-comment\">// we return a reference to the String, s</span>\n} <span class=\"hljs-comment\">// Here, s goes out of scope, and is dropped. Its memory goes away.</span>\n  <span class=\"hljs-comment\">// Danger!</span></code></pre>\n<p>Because <code class=\"hljs\">s</code> is created inside <code class=\"hljs\">dangle</code>, when the code of <code class=\"hljs\">dangle</code> is finished,\n<code class=\"hljs\">s</code> will be deallocated. But we tried to return a reference to it. That means\nthis reference would be pointing to an invalid <code class=\"hljs\">String</code>. That‚Äôs no good! Rust\nwon‚Äôt let us do this.</p>\n<p>The solution here is to return the <code class=\"hljs\">String</code> directly:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> string = no_dangle();\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">no_dangle</span></span>() -&gt; <span class=\"hljs-built_in\">String</span> {\n    <span class=\"hljs-keyword\">let</span> s = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"hello\"</span>);\n\n    s\n}</code></pre></pre>\n<p>This works without any problems. Ownership is moved out, and nothing is\ndeallocated.</p>\n<h3 id=\"the-rules-of-references\"><a class=\"header\" href=\"#the-rules-of-references\">The Rules of References</a></h3>\n<p>Let‚Äôs recap what we‚Äôve discussed about references:</p>\n<ul>\n<li>At any given time, you can have <em>either</em> one mutable reference <em>or</em> any\nnumber of immutable references.</li>\n<li>References must always be valid.</li>\n</ul>\n<p>Next, we‚Äôll look at a different kind of reference: slices.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"the-slice-type\"><a class=\"header\" href=\"#the-slice-type\">The Slice Type</a></h2>\n<p><em>Slices</em> let you reference a contiguous sequence of elements in a\n<a href=\"ch08-00-common-collections.html\">collection</a> rather than the whole collection. A\nslice is a kind of reference, so it does not have ownership.</p>\n<p>Here‚Äôs a small programming problem: write a function that takes a string of\nwords separated by spaces and returns the first word it finds in that string.\nIf the function doesn‚Äôt find a space in the string, the whole string must be\none word, so the entire string should be returned.</p>\n<p>Let‚Äôs work through how we‚Äôd write the signature of this function without using\nslices, to understand the problem that slices will solve:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">first_word</span></span>(s: &amp;<span class=\"hljs-built_in\">String</span>) -&gt; ?</code></pre>\n<p>The <code class=\"hljs\">first_word</code> function has a <code class=\"hljs\">&amp;String</code> as a parameter. We don‚Äôt want\nownership, so this is fine. But what should we return? We don‚Äôt really have a\nway to talk about <em>part</em> of a string. However, we could return the index of the\nend of the word, indicated by a space. Let‚Äôs try that, as shown in Listing 4-7.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">first_word</span></span>(s: &amp;<span class=\"hljs-built_in\">String</span>) -&gt; <span class=\"hljs-built_in\">usize</span> {\n    <span class=\"hljs-keyword\">let</span> bytes = s.as_bytes();\n\n    <span class=\"hljs-keyword\">for</span> (i, &amp;item) <span class=\"hljs-keyword\">in</span> bytes.iter().enumerate() {\n        <span class=\"hljs-keyword\">if</span> item == <span class=\"hljs-string\">b' '</span> {\n            <span class=\"hljs-keyword\">return</span> i;\n        }\n    }\n\n    s.len()\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 4-7: The <code class=\"hljs\">first_word</code> function that returns a\nbyte index value into the <code class=\"hljs\">String</code> parameter</span></p>\n<p>Because we need to go through the <code class=\"hljs\">String</code> element by element and check whether\na value is a space, we‚Äôll convert our <code class=\"hljs\">String</code> to an array of bytes using the\n<code class=\"hljs\">as_bytes</code> method.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">first_word</span></span>(s: &amp;<span class=\"hljs-built_in\">String</span>) -&gt; <span class=\"hljs-built_in\">usize</span> {\n</span>    <span class=\"hljs-keyword\">let</span> bytes = s.as_bytes();\n<span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">for</span> (i, &amp;item) <span class=\"hljs-keyword\">in</span> bytes.iter().enumerate() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> item == <span class=\"hljs-string\">b' '</span> {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">return</span> i;\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    s.len()\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}</span></code></pre>\n<p>Next, we create an iterator over the array of bytes using the <code class=\"hljs\">iter</code> method:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">first_word</span></span>(s: &amp;<span class=\"hljs-built_in\">String</span>) -&gt; <span class=\"hljs-built_in\">usize</span> {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> bytes = s.as_bytes();\n</span><span class=\"boring\">\n</span>    <span class=\"hljs-keyword\">for</span> (i, &amp;item) <span class=\"hljs-keyword\">in</span> bytes.iter().enumerate() {\n<span class=\"boring\">        <span class=\"hljs-keyword\">if</span> item == <span class=\"hljs-string\">b' '</span> {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">return</span> i;\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    s.len()\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}</span></code></pre>\n<p>We‚Äôll discuss iterators in more detail in <a href=\"ch13-02-iterators.html\">Chapter 13</a><!-- ignore -->.\nFor now, know that <code class=\"hljs\">iter</code> is a method that returns each element in a collection\nand that <code class=\"hljs\">enumerate</code> wraps the result of <code class=\"hljs\">iter</code> and returns each element as\npart of a tuple instead. The first element of the tuple returned from\n<code class=\"hljs\">enumerate</code> is the index, and the second element is a reference to the element.\nThis is a bit more convenient than calculating the index ourselves.</p>\n<p>Because the <code class=\"hljs\">enumerate</code> method returns a tuple, we can use patterns to\ndestructure that tuple. We‚Äôll be discussing patterns more in <a href=\"ch06-02-match.html#patterns-that-bind-to-values\">Chapter\n6</a><!-- ignore -->. In the <code class=\"hljs\">for</code> loop, we specify a pattern that has <code class=\"hljs\">i</code>\nfor the index in the tuple and <code class=\"hljs\">&amp;item</code> for the single byte in the tuple.\nBecause we get a reference to the element from <code class=\"hljs\">.iter().enumerate()</code>, we use\n<code class=\"hljs\">&amp;</code> in the pattern.</p>\n<p>Inside the <code class=\"hljs\">for</code> loop, we search for the byte that represents the space by\nusing the byte literal syntax. If we find a space, we return the position.\nOtherwise, we return the length of the string by using <code class=\"hljs\">s.len()</code>.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">first_word</span></span>(s: &amp;<span class=\"hljs-built_in\">String</span>) -&gt; <span class=\"hljs-built_in\">usize</span> {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> bytes = s.as_bytes();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">for</span> (i, &amp;item) <span class=\"hljs-keyword\">in</span> bytes.iter().enumerate() {\n</span>        <span class=\"hljs-keyword\">if</span> item == <span class=\"hljs-string\">b' '</span> {\n            <span class=\"hljs-keyword\">return</span> i;\n        }\n    }\n\n    s.len()\n<span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}</span></code></pre>\n<p>We now have a way to find out the index of the end of the first word in the\nstring, but there‚Äôs a problem. We‚Äôre returning a <code class=\"hljs\">usize</code> on its own, but it‚Äôs\nonly a meaningful number in the context of the <code class=\"hljs\">&amp;String</code>. In other words,\nbecause it‚Äôs a separate value from the <code class=\"hljs\">String</code>, there‚Äôs no guarantee that it\nwill still be valid in the future. Consider the program in Listing 4-8 that\nuses the <code class=\"hljs\">first_word</code> function from Listing 4-7.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">first_word</span></span>(s: &amp;<span class=\"hljs-built_in\">String</span>) -&gt; <span class=\"hljs-built_in\">usize</span> {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> bytes = s.as_bytes();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">for</span> (i, &amp;item) <span class=\"hljs-keyword\">in</span> bytes.iter().enumerate() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> item == <span class=\"hljs-string\">b' '</span> {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">return</span> i;\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    s.len()\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> s = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"hello world\"</span>);\n\n    <span class=\"hljs-keyword\">let</span> word = first_word(&amp;s); <span class=\"hljs-comment\">// word will get the value 5</span>\n\n    s.clear(); <span class=\"hljs-comment\">// this empties the String, making it equal to \"\"</span>\n\n    <span class=\"hljs-comment\">// word still has the value 5 here, but there's no more string that</span>\n    <span class=\"hljs-comment\">// we could meaningfully use the value 5 with. word is now totally invalid!</span>\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 4-8: Storing the result from calling the\n<code class=\"hljs\">first_word</code> function and then changing the <code class=\"hljs\">String</code> contents</span></p>\n<p>This program compiles without any errors and would also do so if we used <code class=\"hljs\">word</code>\nafter calling <code class=\"hljs\">s.clear()</code>. Because <code class=\"hljs\">word</code> isn‚Äôt connected to the state of <code class=\"hljs\">s</code>\nat all, <code class=\"hljs\">word</code> still contains the value <code class=\"hljs\">5</code>. We could use that value <code class=\"hljs\">5</code> with\nthe variable <code class=\"hljs\">s</code> to try to extract the first word out, but this would be a bug\nbecause the contents of <code class=\"hljs\">s</code> have changed since we saved <code class=\"hljs\">5</code> in <code class=\"hljs\">word</code>.</p>\n<p>Having to worry about the index in <code class=\"hljs\">word</code> getting out of sync with the data in\n<code class=\"hljs\">s</code> is tedious and error prone! Managing these indices is even more brittle if\nwe write a <code class=\"hljs\">second_word</code> function. Its signature would have to look like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">second_word</span></span>(s: &amp;<span class=\"hljs-built_in\">String</span>) -&gt; (<span class=\"hljs-built_in\">usize</span>, <span class=\"hljs-built_in\">usize</span>) {</code></pre>\n<p>Now we‚Äôre tracking a starting <em>and</em> an ending index, and we have even more\nvalues that were calculated from data in a particular state but aren‚Äôt tied to\nthat state at all. We have three unrelated variables floating around that need\nto be kept in sync.</p>\n<p>Luckily, Rust has a solution to this problem: string slices.</p>\n<h3 id=\"string-slices\"><a class=\"header\" href=\"#string-slices\">String Slices</a></h3>\n<p>A <em>string slice</em> is a reference to part of a <code class=\"hljs\">String</code>, and it looks like this:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> s = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"hello world\"</span>);\n\n    <span class=\"hljs-keyword\">let</span> hello = &amp;s[<span class=\"hljs-number\">0</span>..<span class=\"hljs-number\">5</span>];\n    <span class=\"hljs-keyword\">let</span> world = &amp;s[<span class=\"hljs-number\">6</span>..<span class=\"hljs-number\">11</span>];\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Rather than a reference to the entire <code class=\"hljs\">String</code>, <code class=\"hljs\">hello</code> is a reference to a\nportion of the <code class=\"hljs\">String</code>, specified in the extra <code class=\"hljs\">[0..5]</code> bit. We create slices\nusing a range within brackets by specifying <code class=\"hljs\">[starting_index..ending_index]</code>,\nwhere <code class=\"hljs\">starting_index</code> is the first position in the slice and <code class=\"hljs\">ending_index</code> is\none more than the last position in the slice. Internally, the slice data\nstructure stores the starting position and the length of the slice, which\ncorresponds to <code class=\"hljs\">ending_index</code> minus <code class=\"hljs\">starting_index</code>. So, in the case of <code class=\"hljs\">let world = &amp;s[6..11];</code>, <code class=\"hljs\">world</code> would be a slice that contains a pointer to the\nbyte at index 6 of <code class=\"hljs\">s</code> with a length value of <code class=\"hljs\">5</code>.</p>\n<p>Figure 4-6 shows this in a diagram.</p>\n<p><img alt=\"Three tables: a table representing the stack data of s, which points\nto the byte at index 0 in a table of the string data &quot;hello world&quot; on\nthe heap. The third table rep-resents the stack data of the slice world, which\nhas a length value of 5 and points to byte 6 of the heap data table.\" src=\"img/trpl04-06.svg\" class=\"center\" style=\"width: 50%;\"></p>\n<p><span class=\"caption\">Figure 4-6: String slice referring to part of a\n<code class=\"hljs\">String</code></span></p>\n<p>With Rust‚Äôs <code class=\"hljs\">..</code> range syntax, if you want to start at index 0, you can drop\nthe value before the two periods. In other words, these are equal:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> s = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"hello\"</span>);\n\n<span class=\"hljs-keyword\">let</span> slice = &amp;s[<span class=\"hljs-number\">0</span>..<span class=\"hljs-number\">2</span>];\n<span class=\"hljs-keyword\">let</span> slice = &amp;s[..<span class=\"hljs-number\">2</span>];\n<span class=\"boring\">}</span></code></pre></pre>\n<p>By the same token, if your slice includes the last byte of the <code class=\"hljs\">String</code>, you\ncan drop the trailing number. That means these are equal:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> s = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"hello\"</span>);\n\n<span class=\"hljs-keyword\">let</span> len = s.len();\n\n<span class=\"hljs-keyword\">let</span> slice = &amp;s[<span class=\"hljs-number\">3</span>..len];\n<span class=\"hljs-keyword\">let</span> slice = &amp;s[<span class=\"hljs-number\">3</span>..];\n<span class=\"boring\">}</span></code></pre></pre>\n<p>You can also drop both values to take a slice of the entire string. So these\nare equal:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> s = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"hello\"</span>);\n\n<span class=\"hljs-keyword\">let</span> len = s.len();\n\n<span class=\"hljs-keyword\">let</span> slice = &amp;s[<span class=\"hljs-number\">0</span>..len];\n<span class=\"hljs-keyword\">let</span> slice = &amp;s[..];\n<span class=\"boring\">}</span></code></pre></pre>\n<section class=\"note\" aria-role=\"note\">\n<p>Note: String slice range indices must occur at valid UTF-8 character\nboundaries. If you attempt to create a string slice in the middle of a\nmultibyte character, your program will exit with an error. For the purposes\nof introducing string slices, we are assuming ASCII only in this section; a\nmore thorough discussion of UTF-8 handling is in the <a href=\"ch08-02-strings.html#storing-utf-8-encoded-text-with-strings\">‚ÄúStoring UTF-8 Encoded\nText with Strings‚Äù</a><!-- ignore --> section of Chapter 8.</p>\n</section>\n<p>With all this information in mind, let‚Äôs rewrite <code class=\"hljs\">first_word</code> to return a\nslice. The type that signifies ‚Äústring slice‚Äù is written as <code class=\"hljs\">&amp;str</code>:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">first_word</span></span>(s: &amp;<span class=\"hljs-built_in\">String</span>) -&gt; &amp;<span class=\"hljs-built_in\">str</span> {\n    <span class=\"hljs-keyword\">let</span> bytes = s.as_bytes();\n\n    <span class=\"hljs-keyword\">for</span> (i, &amp;item) <span class=\"hljs-keyword\">in</span> bytes.iter().enumerate() {\n        <span class=\"hljs-keyword\">if</span> item == <span class=\"hljs-string\">b' '</span> {\n            <span class=\"hljs-keyword\">return</span> &amp;s[<span class=\"hljs-number\">0</span>..i];\n        }\n    }\n\n    &amp;s[..]\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}</span></code></pre></pre>\n<p>We get the index for the end of the word the same way we did in Listing 4-7, by\nlooking for the first occurrence of a space. When we find a space, we return a\nstring slice using the start of the string and the index of the space as the\nstarting and ending indices.</p>\n<p>Now when we call <code class=\"hljs\">first_word</code>, we get back a single value that is tied to the\nunderlying data. The value is made up of a reference to the starting point of\nthe slice and the number of elements in the slice.</p>\n<p>Returning a slice would also work for a <code class=\"hljs\">second_word</code> function:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">second_word</span></span>(s: &amp;<span class=\"hljs-built_in\">String</span>) -&gt; &amp;<span class=\"hljs-built_in\">str</span> {</code></pre>\n<p>We now have a straightforward API that‚Äôs much harder to mess up because the\ncompiler will ensure the references into the <code class=\"hljs\">String</code> remain valid. Remember\nthe bug in the program in Listing 4-8, when we got the index to the end of the\nfirst word but then cleared the string so our index was invalid? That code was\nlogically incorrect but didn‚Äôt show any immediate errors. The problems would\nshow up later if we kept trying to use the first word index with an emptied\nstring. Slices make this bug impossible and let us know we have a problem with\nour code much sooner. Using the slice version of <code class=\"hljs\">first_word</code> will throw a\ncompile-time error:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">first_word</span></span>(s: &amp;<span class=\"hljs-built_in\">String</span>) -&gt; &amp;<span class=\"hljs-built_in\">str</span> {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> bytes = s.as_bytes();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">for</span> (i, &amp;item) <span class=\"hljs-keyword\">in</span> bytes.iter().enumerate() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> item == <span class=\"hljs-string\">b' '</span> {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">return</span> &amp;s[<span class=\"hljs-number\">0</span>..i];\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    &amp;s[..]\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> s = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"hello world\"</span>);\n\n    <span class=\"hljs-keyword\">let</span> word = first_word(&amp;s);\n\n    s.clear(); <span class=\"hljs-comment\">// error!</span>\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"the first word is: {word}\"</span>);\n}</code></pre>\n<p>Here‚Äôs the compiler error:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling ownership v0.1.0 (file:///projects/ownership)\nerror[E0502]: cannot borrow `s` as mutable because it is also borrowed as immutable\n<span class=\"hljs-meta\">  --&gt;</span><span class=\"bash\"> src/main.rs:18:5</span>\n   |\n16 |     let word = first_word(&amp;s);\n   |                           -- immutable borrow occurs here\n17 |\n18 |     s.clear(); // error!\n   |     ^^^^^^^^^ mutable borrow occurs here\n19 |\n20 |     println!(\"the first word is: {word}\");\n   |                                  ------ immutable borrow later used here\n\nFor more information about this error, try `rustc --explain E0502`.\nerror: could not compile `ownership` (bin \"ownership\") due to 1 previous error\n</code></pre>\n<p>Recall from the borrowing rules that if we have an immutable reference to\nsomething, we cannot also take a mutable reference. Because <code class=\"hljs\">clear</code> needs to\ntruncate the <code class=\"hljs\">String</code>, it needs to get a mutable reference. The <code class=\"hljs\">println!</code>\nafter the call to <code class=\"hljs\">clear</code> uses the reference in <code class=\"hljs\">word</code>, so the immutable\nreference must still be active at that point. Rust disallows the mutable\nreference in <code class=\"hljs\">clear</code> and the immutable reference in <code class=\"hljs\">word</code> from existing at the\nsame time, and compilation fails. Not only has Rust made our API easier to use,\nbut it has also eliminated an entire class of errors at compile time!</p>\n<!-- Old heading. Do not remove or links may break. -->\n<p><a id=\"string-literals-are-slices\"></a></p>\n<h4 id=\"string-literals-as-slices\"><a class=\"header\" href=\"#string-literals-as-slices\">String Literals as Slices</a></h4>\n<p>Recall that we talked about string literals being stored inside the binary. Now\nthat we know about slices, we can properly understand string literals:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> s = <span class=\"hljs-string\">\"Hello, world!\"</span>;\n<span class=\"boring\">}</span></code></pre></pre>\n<p>The type of <code class=\"hljs\">s</code> here is <code class=\"hljs\">&amp;str</code>: it‚Äôs a slice pointing to that specific point of\nthe binary. This is also why string literals are immutable; <code class=\"hljs\">&amp;str</code> is an\nimmutable reference.</p>\n<h4 id=\"string-slices-as-parameters\"><a class=\"header\" href=\"#string-slices-as-parameters\">String Slices as Parameters</a></h4>\n<p>Knowing that you can take slices of literals and <code class=\"hljs\">String</code> values leads us to\none more improvement on <code class=\"hljs\">first_word</code>, and that‚Äôs its signature:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">first_word</span></span>(s: &amp;<span class=\"hljs-built_in\">String</span>) -&gt; &amp;<span class=\"hljs-built_in\">str</span> {</code></pre>\n<p>A more experienced Rustacean would write the signature shown in Listing 4-9\ninstead because it allows us to use the same function on both <code class=\"hljs\">&amp;String</code> values\nand <code class=\"hljs\">&amp;str</code> values.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">first_word</span></span>(s: &amp;<span class=\"hljs-built_in\">str</span>) -&gt; &amp;<span class=\"hljs-built_in\">str</span> {\n<span class=\"boring\">    <span class=\"hljs-keyword\">let</span> bytes = s.as_bytes();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">for</span> (i, &amp;item) <span class=\"hljs-keyword\">in</span> bytes.iter().enumerate() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> item == <span class=\"hljs-string\">b' '</span> {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">return</span> &amp;s[<span class=\"hljs-number\">0</span>..i];\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    &amp;s[..]\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> my_string = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"hello world\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-comment\">// `first_word` works on slices of `String`s, whether partial or whole</span>\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> word = first_word(&amp;my_string[<span class=\"hljs-number\">0</span>..<span class=\"hljs-number\">6</span>]);\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> word = first_word(&amp;my_string[..]);\n</span><span class=\"boring\">    <span class=\"hljs-comment\">// `first_word` also works on references to `String`s, which are equivalent</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">// to whole slices of `String`s</span>\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> word = first_word(&amp;my_string);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> my_string_literal = <span class=\"hljs-string\">\"hello world\"</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-comment\">// `first_word` works on slices of string literals, whether partial or whole</span>\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> word = first_word(&amp;my_string_literal[<span class=\"hljs-number\">0</span>..<span class=\"hljs-number\">6</span>]);\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> word = first_word(&amp;my_string_literal[..]);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-comment\">// Because string literals *are* string slices already,</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">// this works too, without the slice syntax!</span>\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> word = first_word(my_string_literal);\n</span><span class=\"boring\">}</span></code></pre>\n<p><span class=\"caption\">Listing 4-9: Improving the <code class=\"hljs\">first_word</code> function by using\na string slice for the type of the <code class=\"hljs\">s</code> parameter</span></p>\n<p>If we have a string slice, we can pass that directly. If we have a <code class=\"hljs\">String</code>, we\ncan pass a slice of the <code class=\"hljs\">String</code> or a reference to the <code class=\"hljs\">String</code>. This\nflexibility takes advantage of <em>deref coercions</em>, a feature we will cover in the\n<a href=\"ch15-02-deref.html#implicit-deref-coercions-with-functions-and-methods\">‚ÄúImplicit Deref Coercions with Functions and\nMethods‚Äù</a><!--ignore--> section of Chapter 15.</p>\n<p>Defining a function to take a string slice instead of a reference to a <code class=\"hljs\">String</code>\nmakes our API more general and useful without losing any functionality:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">first_word</span></span>(s: &amp;<span class=\"hljs-built_in\">str</span>) -&gt; &amp;<span class=\"hljs-built_in\">str</span> {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> bytes = s.as_bytes();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">for</span> (i, &amp;item) <span class=\"hljs-keyword\">in</span> bytes.iter().enumerate() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> item == <span class=\"hljs-string\">b' '</span> {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">return</span> &amp;s[<span class=\"hljs-number\">0</span>..i];\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    &amp;s[..]\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> my_string = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"hello world\"</span>);\n\n    <span class=\"hljs-comment\">// `first_word` works on slices of `String`s, whether partial or whole</span>\n    <span class=\"hljs-keyword\">let</span> word = first_word(&amp;my_string[<span class=\"hljs-number\">0</span>..<span class=\"hljs-number\">6</span>]);\n    <span class=\"hljs-keyword\">let</span> word = first_word(&amp;my_string[..]);\n    <span class=\"hljs-comment\">// `first_word` also works on references to `String`s, which are equivalent</span>\n    <span class=\"hljs-comment\">// to whole slices of `String`s</span>\n    <span class=\"hljs-keyword\">let</span> word = first_word(&amp;my_string);\n\n    <span class=\"hljs-keyword\">let</span> my_string_literal = <span class=\"hljs-string\">\"hello world\"</span>;\n\n    <span class=\"hljs-comment\">// `first_word` works on slices of string literals, whether partial or whole</span>\n    <span class=\"hljs-keyword\">let</span> word = first_word(&amp;my_string_literal[<span class=\"hljs-number\">0</span>..<span class=\"hljs-number\">6</span>]);\n    <span class=\"hljs-keyword\">let</span> word = first_word(&amp;my_string_literal[..]);\n\n    <span class=\"hljs-comment\">// Because string literals *are* string slices already,</span>\n    <span class=\"hljs-comment\">// this works too, without the slice syntax!</span>\n    <span class=\"hljs-keyword\">let</span> word = first_word(my_string_literal);\n}</code></pre></pre>\n<h3 id=\"other-slices\"><a class=\"header\" href=\"#other-slices\">Other Slices</a></h3>\n<p>String slices, as you might imagine, are specific to strings. But there‚Äôs a\nmore general slice type too. Consider this array:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> a = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Just as we might want to refer to part of a string, we might want to refer to\npart of an array. We‚Äôd do so like this:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> a = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\n\n<span class=\"hljs-keyword\">let</span> slice = &amp;a[<span class=\"hljs-number\">1</span>..<span class=\"hljs-number\">3</span>];\n\n<span class=\"hljs-built_in\">assert_eq!</span>(slice, &amp;[<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]);\n<span class=\"boring\">}</span></code></pre></pre>\n<p>This slice has the type <code class=\"hljs\">&amp;[i32]</code>. It works the same way as string slices do, by\nstoring a reference to the first element and a length. You‚Äôll use this kind of\nslice for all sorts of other collections. We‚Äôll discuss these collections in\ndetail when we talk about vectors in Chapter 8.</p>\n<h2 id=\"summary-3\"><a class=\"header\" href=\"#summary-3\">Summary</a></h2>\n<p>The concepts of ownership, borrowing, and slices ensure memory safety in Rust\nprograms at compile time. The Rust language gives you control over your memory\nusage in the same way as other systems programming languages, but having the\nowner of data automatically clean up that data when the owner goes out of scope\nmeans you don‚Äôt have to write and debug extra code to get this control.</p>\n<p>Ownership affects how lots of other parts of Rust work, so we‚Äôll talk about\nthese concepts further throughout the rest of the book. Let‚Äôs move on to\nChapter 5 and look at grouping pieces of data together in a <code class=\"hljs\">struct</code>.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"using-structs-to-structure-related-data\"><a class=\"header\" href=\"#using-structs-to-structure-related-data\">Using Structs to Structure Related Data</a></h1>\n<p>A <em>struct</em>, or <em>structure</em>, is a custom data type that lets you package\ntogether and name multiple related values that make up a meaningful group. If\nyou‚Äôre familiar with an object-oriented language, a <em>struct</em> is like an\nobject‚Äôs data attributes. In this chapter, we‚Äôll compare and contrast tuples\nwith structs to build on what you already know and demonstrate when structs are\na better way to group data.</p>\n<p>We‚Äôll demonstrate how to define and instantiate structs. We‚Äôll discuss how to\ndefine associated functions, especially the kind of associated functions called\n<em>methods</em>, to specify behavior associated with a struct type. Structs and enums\n(discussed in Chapter 6) are the building blocks for creating new types in your\nprogram‚Äôs domain to take full advantage of Rust‚Äôs compile-time type checking.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"defining-and-instantiating-structs\"><a class=\"header\" href=\"#defining-and-instantiating-structs\">Defining and Instantiating Structs</a></h2>\n<p>Structs are similar to tuples, discussed in <a href=\"ch03-02-data-types.html#the-tuple-type\">‚ÄúThe Tuple Type‚Äù</a><!--\nignore --> section, in that both hold multiple related values. Like tuples, the\npieces of a struct can be different types. Unlike with tuples, in a struct\nyou‚Äôll name each piece of data so it‚Äôs clear what the values mean. Adding these\nnames means that structs are more flexible than tuples: you don‚Äôt have to rely\non the order of the data to specify or access the values of an instance.</p>\n<p>To define a struct, we enter the keyword <code class=\"hljs\">struct</code> and name the entire struct. A\nstruct‚Äôs name should describe the significance of the pieces of data being\ngrouped together. Then, inside curly brackets, we define the names and types of\nthe pieces of data, which we call <em>fields</em>. For example, Listing 5-1 shows a\nstruct that stores information about a user account.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">User</span></span> {\n    active: <span class=\"hljs-built_in\">bool</span>,\n    username: <span class=\"hljs-built_in\">String</span>,\n    email: <span class=\"hljs-built_in\">String</span>,\n    sign_in_count: <span class=\"hljs-built_in\">u64</span>,\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 5-1: A <code class=\"hljs\">User</code> struct definition</span></p>\n<p>To use a struct after we‚Äôve defined it, we create an <em>instance</em> of that struct\nby specifying concrete values for each of the fields. We create an instance by\nstating the name of the struct and then add curly brackets containing <em>key:\nvalue</em> pairs, where the keys are the names of the fields and the values are the\ndata we want to store in those fields. We don‚Äôt have to specify the fields in\nthe same order in which we declared them in the struct. In other words, the\nstruct definition is like a general template for the type, and instances fill\nin that template with particular data to create values of the type. For\nexample, we can declare a particular user as shown in Listing 5-2.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">User</span></span> {\n</span><span class=\"boring\">    active: <span class=\"hljs-built_in\">bool</span>,\n</span><span class=\"boring\">    username: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    email: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    sign_in_count: <span class=\"hljs-built_in\">u64</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> user1 = User {\n        active: <span class=\"hljs-literal\">true</span>,\n        username: <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"someusername123\"</span>),\n        email: <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"someone@example.com\"</span>),\n        sign_in_count: <span class=\"hljs-number\">1</span>,\n    };\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 5-2: Creating an instance of the <code class=\"hljs\">User</code>\nstruct</span></p>\n<p>To get a specific value from a struct, we use dot notation. For example, to\naccess this user‚Äôs email address, we use <code class=\"hljs\">user1.email</code>. If the instance is\nmutable, we can change a value by using the dot notation and assigning into a\nparticular field. Listing 5-3 shows how to change the value in the <code class=\"hljs\">email</code>\nfield of a mutable <code class=\"hljs\">User</code> instance.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">User</span></span> {\n</span><span class=\"boring\">    active: <span class=\"hljs-built_in\">bool</span>,\n</span><span class=\"boring\">    username: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    email: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    sign_in_count: <span class=\"hljs-built_in\">u64</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> user1 = User {\n        active: <span class=\"hljs-literal\">true</span>,\n        username: <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"someusername123\"</span>),\n        email: <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"someone@example.com\"</span>),\n        sign_in_count: <span class=\"hljs-number\">1</span>,\n    };\n\n    user1.email = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"anotheremail@example.com\"</span>);\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 5-3: Changing the value in the <code class=\"hljs\">email</code> field of a\n<code class=\"hljs\">User</code> instance</span></p>\n<p>Note that the entire instance must be mutable; Rust doesn‚Äôt allow us to mark\nonly certain fields as mutable. As with any expression, we can construct a new\ninstance of the struct as the last expression in the function body to\nimplicitly return that new instance.</p>\n<p>Listing 5-4 shows a <code class=\"hljs\">build_user</code> function that returns a <code class=\"hljs\">User</code> instance with\nthe given email and username. The <code class=\"hljs\">active</code> field gets the value of <code class=\"hljs\">true</code>, and\nthe <code class=\"hljs\">sign_in_count</code> gets a value of <code class=\"hljs\">1</code>.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">User</span></span> {\n</span><span class=\"boring\">    active: <span class=\"hljs-built_in\">bool</span>,\n</span><span class=\"boring\">    username: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    email: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    sign_in_count: <span class=\"hljs-built_in\">u64</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">build_user</span></span>(email: <span class=\"hljs-built_in\">String</span>, username: <span class=\"hljs-built_in\">String</span>) -&gt; User {\n    User {\n        active: <span class=\"hljs-literal\">true</span>,\n        username: username,\n        email: email,\n        sign_in_count: <span class=\"hljs-number\">1</span>,\n    }\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> user1 = build_user(\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"someone@example.com\"</span>),\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"someusername123\"</span>),\n</span><span class=\"boring\">    );\n</span><span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 5-4: A <code class=\"hljs\">build_user</code> function that takes an email\nand username and returns a <code class=\"hljs\">User</code> instance</span></p>\n<p>It makes sense to name the function parameters with the same name as the struct\nfields, but having to repeat the <code class=\"hljs\">email</code> and <code class=\"hljs\">username</code> field names and\nvariables is a bit tedious. If the struct had more fields, repeating each name\nwould get even more annoying. Luckily, there‚Äôs a convenient shorthand!</p>\n<!-- Old heading. Do not remove or links may break. -->\n<p><a id=\"using-the-field-init-shorthand-when-variables-and-fields-have-the-same-name\"></a></p>\n<h3 id=\"using-the-field-init-shorthand\"><a class=\"header\" href=\"#using-the-field-init-shorthand\">Using the Field Init Shorthand</a></h3>\n<p>Because the parameter names and the struct field names are exactly the same in\nListing 5-4, we can use the <em>field init shorthand</em> syntax to rewrite\n<code class=\"hljs\">build_user</code> so it behaves exactly the same but doesn‚Äôt have the repetition of\n<code class=\"hljs\">username</code> and <code class=\"hljs\">email</code>, as shown in Listing 5-5.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">User</span></span> {\n</span><span class=\"boring\">    active: <span class=\"hljs-built_in\">bool</span>,\n</span><span class=\"boring\">    username: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    email: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    sign_in_count: <span class=\"hljs-built_in\">u64</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">build_user</span></span>(email: <span class=\"hljs-built_in\">String</span>, username: <span class=\"hljs-built_in\">String</span>) -&gt; User {\n    User {\n        active: <span class=\"hljs-literal\">true</span>,\n        username,\n        email,\n        sign_in_count: <span class=\"hljs-number\">1</span>,\n    }\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> user1 = build_user(\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"someone@example.com\"</span>),\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"someusername123\"</span>),\n</span><span class=\"boring\">    );\n</span><span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 5-5: A <code class=\"hljs\">build_user</code> function that uses field init\nshorthand because the <code class=\"hljs\">username</code> and <code class=\"hljs\">email</code> parameters have the same name as\nstruct fields</span></p>\n<p>Here, we‚Äôre creating a new instance of the <code class=\"hljs\">User</code> struct, which has a field\nnamed <code class=\"hljs\">email</code>. We want to set the <code class=\"hljs\">email</code> field‚Äôs value to the value in the\n<code class=\"hljs\">email</code> parameter of the <code class=\"hljs\">build_user</code> function. Because the <code class=\"hljs\">email</code> field and\nthe <code class=\"hljs\">email</code> parameter have the same name, we only need to write <code class=\"hljs\">email</code> rather\nthan <code class=\"hljs\">email: email</code>.</p>\n<h3 id=\"creating-instances-from-other-instances-with-struct-update-syntax\"><a class=\"header\" href=\"#creating-instances-from-other-instances-with-struct-update-syntax\">Creating Instances from Other Instances with Struct Update Syntax</a></h3>\n<p>It‚Äôs often useful to create a new instance of a struct that includes most of\nthe values from another instance, but changes some. You can do this using\n<em>struct update syntax</em>.</p>\n<p>First, in Listing 5-6 we show how to create a new <code class=\"hljs\">User</code> instance in <code class=\"hljs\">user2</code>\nregularly, without the update syntax. We set a new value for <code class=\"hljs\">email</code> but\notherwise use the same values from <code class=\"hljs\">user1</code> that we created in Listing 5-2.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">User</span></span> {\n</span><span class=\"boring\">    active: <span class=\"hljs-built_in\">bool</span>,\n</span><span class=\"boring\">    username: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    email: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    sign_in_count: <span class=\"hljs-built_in\">u64</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> user1 = User {\n</span><span class=\"boring\">        email: <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"someone@example.com\"</span>),\n</span><span class=\"boring\">        username: <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"someusername123\"</span>),\n</span><span class=\"boring\">        active: <span class=\"hljs-literal\">true</span>,\n</span><span class=\"boring\">        sign_in_count: <span class=\"hljs-number\">1</span>,\n</span><span class=\"boring\">    };\n</span>\n    <span class=\"hljs-keyword\">let</span> user2 = User {\n        active: user1.active,\n        username: user1.username,\n        email: <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"another@example.com\"</span>),\n        sign_in_count: user1.sign_in_count,\n    };\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 5-6: Creating a new <code class=\"hljs\">User</code> instance using all but one of\nthe values from <code class=\"hljs\">user1</code></span></p>\n<p>Using struct update syntax, we can achieve the same effect with less code, as\nshown in Listing 5-7. The syntax <code class=\"hljs\">..</code> specifies that the remaining fields not\nexplicitly set should have the same value as the fields in the given instance.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">User</span></span> {\n</span><span class=\"boring\">    active: <span class=\"hljs-built_in\">bool</span>,\n</span><span class=\"boring\">    username: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    email: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    sign_in_count: <span class=\"hljs-built_in\">u64</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> user1 = User {\n</span><span class=\"boring\">        email: <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"someone@example.com\"</span>),\n</span><span class=\"boring\">        username: <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"someusername123\"</span>),\n</span><span class=\"boring\">        active: <span class=\"hljs-literal\">true</span>,\n</span><span class=\"boring\">        sign_in_count: <span class=\"hljs-number\">1</span>,\n</span><span class=\"boring\">    };\n</span>\n    <span class=\"hljs-keyword\">let</span> user2 = User {\n        email: <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"another@example.com\"</span>),\n        ..user1\n    };\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 5-7: Using struct update syntax to set a new\n<code class=\"hljs\">email</code> value for a <code class=\"hljs\">User</code> instance but to use the rest of the values from\n<code class=\"hljs\">user1</code></span></p>\n<p>The code in Listing 5-7 also creates an instance in <code class=\"hljs\">user2</code> that has a\ndifferent value for <code class=\"hljs\">email</code> but has the same values for the <code class=\"hljs\">username</code>,\n<code class=\"hljs\">active</code>, and <code class=\"hljs\">sign_in_count</code> fields from <code class=\"hljs\">user1</code>. The <code class=\"hljs\">..user1</code> must come last\nto specify that any remaining fields should get their values from the\ncorresponding fields in <code class=\"hljs\">user1</code>, but we can choose to specify values for as\nmany fields as we want in any order, regardless of the order of the fields in\nthe struct‚Äôs definition.</p>\n<p>Note that the struct update syntax uses <code class=\"hljs\">=</code> like an assignment; this is because\nit moves the data, just as we saw in the <a href=\"ch04-01-what-is-ownership.html#variables-and-data-interacting-with-move\">‚ÄúVariables and Data Interacting with\nMove‚Äù</a><!-- ignore --> section. In this example, we can no longer use\n<code class=\"hljs\">user1</code> as a whole after creating <code class=\"hljs\">user2</code> because the <code class=\"hljs\">String</code> in the\n<code class=\"hljs\">username</code> field of <code class=\"hljs\">user1</code> was moved into <code class=\"hljs\">user2</code>. If we had given <code class=\"hljs\">user2</code> new\n<code class=\"hljs\">String</code> values for both <code class=\"hljs\">email</code> and <code class=\"hljs\">username</code>, and thus only used the\n<code class=\"hljs\">active</code> and <code class=\"hljs\">sign_in_count</code> values from <code class=\"hljs\">user1</code>, then <code class=\"hljs\">user1</code> would still be\nvalid after creating <code class=\"hljs\">user2</code>. Both <code class=\"hljs\">active</code> and <code class=\"hljs\">sign_in_count</code> are types that\nimplement the <code class=\"hljs\">Copy</code> trait, so the behavior we discussed in the <a href=\"ch04-01-what-is-ownership.html#stack-only-data-copy\">‚ÄúStack-Only\nData: Copy‚Äù</a><!-- ignore --> section would apply.</p>\n<h3 id=\"using-tuple-structs-without-named-fields-to-create-different-types\"><a class=\"header\" href=\"#using-tuple-structs-without-named-fields-to-create-different-types\">Using Tuple Structs Without Named Fields to Create Different Types</a></h3>\n<p>Rust also supports structs that look similar to tuples, called <em>tuple structs</em>.\nTuple structs have the added meaning the struct name provides but don‚Äôt have\nnames associated with their fields; rather, they just have the types of the\nfields. Tuple structs are useful when you want to give the whole tuple a name\nand make the tuple a different type from other tuples, and when naming each\nfield as in a regular struct would be verbose or redundant.</p>\n<p>To define a tuple struct, start with the <code class=\"hljs\">struct</code> keyword and the struct name\nfollowed by the types in the tuple. For example, here we define and use two\ntuple structs named <code class=\"hljs\">Color</code> and <code class=\"hljs\">Point</code>:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Color</span></span>(<span class=\"hljs-built_in\">i32</span>, <span class=\"hljs-built_in\">i32</span>, <span class=\"hljs-built_in\">i32</span>);\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Point</span></span>(<span class=\"hljs-built_in\">i32</span>, <span class=\"hljs-built_in\">i32</span>, <span class=\"hljs-built_in\">i32</span>);\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> black = Color(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>);\n    <span class=\"hljs-keyword\">let</span> origin = Point(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>);\n}</code></pre></pre>\n<p>Note that the <code class=\"hljs\">black</code> and <code class=\"hljs\">origin</code> values are different types because they‚Äôre\ninstances of different tuple structs. Each struct you define is its own type,\neven though the fields within the struct might have the same types. For\nexample, a function that takes a parameter of type <code class=\"hljs\">Color</code> cannot take a\n<code class=\"hljs\">Point</code> as an argument, even though both types are made up of three <code class=\"hljs\">i32</code>\nvalues. Otherwise, tuple struct instances are similar to tuples in that you can\ndestructure them into their individual pieces, and you can use a <code class=\"hljs\">.</code> followed\nby the index to access an individual value.</p>\n<h3 id=\"unit-like-structs-without-any-fields\"><a class=\"header\" href=\"#unit-like-structs-without-any-fields\">Unit-Like Structs Without Any Fields</a></h3>\n<p>You can also define structs that don‚Äôt have any fields! These are called\n<em>unit-like structs</em> because they behave similarly to <code class=\"hljs\">()</code>, the unit type that\nwe mentioned in <a href=\"ch03-02-data-types.html#the-tuple-type\">‚ÄúThe Tuple Type‚Äù</a><!-- ignore --> section. Unit-like\nstructs can be useful when you need to implement a trait on some type but don‚Äôt\nhave any data that you want to store in the type itself. We‚Äôll discuss traits\nin Chapter 10. Here‚Äôs an example of declaring and instantiating a unit struct\nnamed <code class=\"hljs\">AlwaysEqual</code>:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">AlwaysEqual</span></span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> subject = AlwaysEqual;\n}</code></pre></pre>\n<p>To define <code class=\"hljs\">AlwaysEqual</code>, we use the <code class=\"hljs\">struct</code> keyword, the name we want, and\nthen a semicolon. No need for curly brackets or parentheses! Then we can get an\ninstance of <code class=\"hljs\">AlwaysEqual</code> in the <code class=\"hljs\">subject</code> variable in a similar way: using the\nname we defined, without any curly brackets or parentheses. Imagine that later\nwe‚Äôll implement behavior for this type such that every instance of\n<code class=\"hljs\">AlwaysEqual</code> is always equal to every instance of any other type, perhaps to\nhave a known result for testing purposes. We wouldn‚Äôt need any data to\nimplement that behavior! You‚Äôll see in Chapter 10 how to define traits and\nimplement them on any type, including unit-like structs.</p>\n<section class=\"note\" aria-role=\"note\">\n<h3 id=\"ownership-of-struct-data\"><a class=\"header\" href=\"#ownership-of-struct-data\">Ownership of Struct Data</a></h3>\n<p>In the <code class=\"hljs\">User</code> struct definition in Listing 5-1, we used the owned <code class=\"hljs\">String</code>\ntype rather than the <code class=\"hljs\">&amp;str</code> string slice type. This is a deliberate choice\nbecause we want each instance of this struct to own all of its data and for\nthat data to be valid for as long as the entire struct is valid.</p>\n<p>It‚Äôs also possible for structs to store references to data owned by something\nelse, but to do so requires the use of <em>lifetimes</em>, a Rust feature that we‚Äôll\ndiscuss in Chapter 10. Lifetimes ensure that the data referenced by a struct\nis valid for as long as the struct is. Let‚Äôs say you try to store a reference\nin a struct without specifying lifetimes, like the following; this won‚Äôt work:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<!-- CAN'T EXTRACT SEE https://github.com/rust-lang/mdBook/issues/1127 -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">User</span></span> {\n    active: <span class=\"hljs-built_in\">bool</span>,\n    username: &amp;<span class=\"hljs-built_in\">str</span>,\n    email: &amp;<span class=\"hljs-built_in\">str</span>,\n    sign_in_count: <span class=\"hljs-built_in\">u64</span>,\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> user1 = User {\n        active: <span class=\"hljs-literal\">true</span>,\n        username: <span class=\"hljs-string\">\"someusername123\"</span>,\n        email: <span class=\"hljs-string\">\"someone@example.com\"</span>,\n        sign_in_count: <span class=\"hljs-number\">1</span>,\n    };\n}</code></pre>\n<p>The compiler will complain that it needs lifetime specifiers:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling structs v0.1.0 (file:///projects/structs)\nerror[E0106]: missing lifetime specifier\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/main.rs:3:15</span>\n  |\n3 |     username: &amp;str,\n  |               ^ expected named lifetime parameter\n  |\nhelp: consider introducing a named lifetime parameter\n  |\n1 ~ struct User&lt;'a&gt; {\n2 |     active: bool,\n3 ~     username: &amp;'a str,\n  |\n\nerror[E0106]: missing lifetime specifier\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/main.rs:4:12</span>\n  |\n4 |     email: &amp;str,\n  |            ^ expected named lifetime parameter\n  |\nhelp: consider introducing a named lifetime parameter\n  |\n1 ~ struct User&lt;'a&gt; {\n2 |     active: bool,\n3 |     username: &amp;str,\n4 ~     email: &amp;'a str,\n  |\n\nFor more information about this error, try `rustc --explain E0106`.\nerror: could not compile `structs` (bin \"structs\") due to 2 previous errors\n</code></pre>\n<p>In Chapter 10, we‚Äôll discuss how to fix these errors so you can store\nreferences in structs, but for now, we‚Äôll fix errors like these using owned\ntypes like <code class=\"hljs\">String</code> instead of references like <code class=\"hljs\">&amp;str</code>.</p>\n</section>\n<!-- manual-regeneration\nfor the error above\nafter running update-rustc.sh:\npbcopy < listings/ch05-using-structs-to-structure-related-data/no-listing-02-reference-in-struct/output.txt\npaste above\nadd `> ` before every line -->\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"an-example-program-using-structs\"><a class=\"header\" href=\"#an-example-program-using-structs\">An Example Program Using Structs</a></h2>\n<p>To understand when we might want to use structs, let‚Äôs write a program that\ncalculates the area of a rectangle. We‚Äôll start by using single variables, and\nthen refactor the program until we‚Äôre using structs instead.</p>\n<p>Let‚Äôs make a new binary project with Cargo called <em>rectangles</em> that will take\nthe width and height of a rectangle specified in pixels and calculate the area\nof the rectangle. Listing 5-8 shows a short program with one way of doing\nexactly that in our project‚Äôs <em>src/main.rs</em>.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> width1 = <span class=\"hljs-number\">30</span>;\n    <span class=\"hljs-keyword\">let</span> height1 = <span class=\"hljs-number\">50</span>;\n\n    <span class=\"hljs-built_in\">println!</span>(\n        <span class=\"hljs-string\">\"The area of the rectangle is {} square pixels.\"</span>,\n        area(width1, height1)\n    );\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">area</span></span>(width: <span class=\"hljs-built_in\">u32</span>, height: <span class=\"hljs-built_in\">u32</span>) -&gt; <span class=\"hljs-built_in\">u32</span> {\n    width * height\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 5-8: Calculating the area of a rectangle\nspecified by separate width and height variables</span></p>\n<p>Now, run this program using <code class=\"hljs\">cargo run</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling rectangles v0.1.0 (file:///projects/rectangles)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.42s\n     Running `target/debug/rectangles`\nThe area of the rectangle is 1500 square pixels.\n</code></pre>\n<p>This code succeeds in figuring out the area of the rectangle by calling the\n<code class=\"hljs\">area</code> function with each dimension, but we can do more to make this code clear\nand readable.</p>\n<p>The issue with this code is evident in the signature of <code class=\"hljs\">area</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> width1 = <span class=\"hljs-number\">30</span>;\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> height1 = <span class=\"hljs-number\">50</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(\n</span><span class=\"boring\">        <span class=\"hljs-string\">\"The area of the rectangle is {} square pixels.\"</span>,\n</span><span class=\"boring\">        area(width1, height1)\n</span><span class=\"boring\">    );\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">area</span></span>(width: <span class=\"hljs-built_in\">u32</span>, height: <span class=\"hljs-built_in\">u32</span>) -&gt; <span class=\"hljs-built_in\">u32</span> {\n<span class=\"boring\">    width * height\n</span><span class=\"boring\">}</span></code></pre>\n<p>The <code class=\"hljs\">area</code> function is supposed to calculate the area of one rectangle, but the\nfunction we wrote has two parameters, and it‚Äôs not clear anywhere in our\nprogram that the parameters are related. It would be more readable and more\nmanageable to group width and height together. We‚Äôve already discussed one way\nwe might do that in <a href=\"ch03-02-data-types.html#the-tuple-type\">‚ÄúThe Tuple Type‚Äù</a><!-- ignore --> section\nof Chapter 3: by using tuples.</p>\n<h3 id=\"refactoring-with-tuples\"><a class=\"header\" href=\"#refactoring-with-tuples\">Refactoring with Tuples</a></h3>\n<p>Listing 5-9 shows another version of our program that uses tuples.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> rect1 = (<span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">50</span>);\n\n    <span class=\"hljs-built_in\">println!</span>(\n        <span class=\"hljs-string\">\"The area of the rectangle is {} square pixels.\"</span>,\n        area(rect1)\n    );\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">area</span></span>(dimensions: (<span class=\"hljs-built_in\">u32</span>, <span class=\"hljs-built_in\">u32</span>)) -&gt; <span class=\"hljs-built_in\">u32</span> {\n    dimensions.<span class=\"hljs-number\">0</span> * dimensions.<span class=\"hljs-number\">1</span>\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 5-9: Specifying the width and height of the\nrectangle with a tuple</span></p>\n<p>In one way, this program is better. Tuples let us add a bit of structure, and\nwe‚Äôre now passing just one argument. But in another way, this version is less\nclear: tuples don‚Äôt name their elements, so we have to index into the parts of\nthe tuple, making our calculation less obvious.</p>\n<p>Mixing up the width and height wouldn‚Äôt matter for the area calculation, but if\nwe want to draw the rectangle on the screen, it would matter! We would have to\nkeep in mind that <code class=\"hljs\">width</code> is the tuple index <code class=\"hljs\">0</code> and <code class=\"hljs\">height</code> is the tuple\nindex <code class=\"hljs\">1</code>. This would be even harder for someone else to figure out and keep in\nmind if they were to use our code. Because we haven‚Äôt conveyed the meaning of\nour data in our code, it‚Äôs now easier to introduce errors.</p>\n<h3 id=\"refactoring-with-structs-adding-more-meaning\"><a class=\"header\" href=\"#refactoring-with-structs-adding-more-meaning\">Refactoring with Structs: Adding More Meaning</a></h3>\n<p>We use structs to add meaning by labeling the data. We can transform the tuple\nwe‚Äôre using into a struct with a name for the whole as well as names for the\nparts, as shown in Listing 5-10.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Rectangle</span></span> {\n    width: <span class=\"hljs-built_in\">u32</span>,\n    height: <span class=\"hljs-built_in\">u32</span>,\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> rect1 = Rectangle {\n        width: <span class=\"hljs-number\">30</span>,\n        height: <span class=\"hljs-number\">50</span>,\n    };\n\n    <span class=\"hljs-built_in\">println!</span>(\n        <span class=\"hljs-string\">\"The area of the rectangle is {} square pixels.\"</span>,\n        area(&amp;rect1)\n    );\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">area</span></span>(rectangle: &amp;Rectangle) -&gt; <span class=\"hljs-built_in\">u32</span> {\n    rectangle.width * rectangle.height\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 5-10: Defining a <code class=\"hljs\">Rectangle</code> struct</span></p>\n<p>Here we‚Äôve defined a struct and named it <code class=\"hljs\">Rectangle</code>. Inside the curly\nbrackets, we defined the fields as <code class=\"hljs\">width</code> and <code class=\"hljs\">height</code>, both of which have\ntype <code class=\"hljs\">u32</code>. Then, in <code class=\"hljs\">main</code>, we created a particular instance of <code class=\"hljs\">Rectangle</code>\nthat has a width of <code class=\"hljs\">30</code> and a height of <code class=\"hljs\">50</code>.</p>\n<p>Our <code class=\"hljs\">area</code> function is now defined with one parameter, which we‚Äôve named\n<code class=\"hljs\">rectangle</code>, whose type is an immutable borrow of a struct <code class=\"hljs\">Rectangle</code>\ninstance. As mentioned in Chapter 4, we want to borrow the struct rather than\ntake ownership of it. This way, <code class=\"hljs\">main</code> retains its ownership and can continue\nusing <code class=\"hljs\">rect1</code>, which is the reason we use the <code class=\"hljs\">&amp;</code> in the function signature and\nwhere we call the function.</p>\n<p>The <code class=\"hljs\">area</code> function accesses the <code class=\"hljs\">width</code> and <code class=\"hljs\">height</code> fields of the <code class=\"hljs\">Rectangle</code>\ninstance (note that accessing fields of a borrowed struct instance does not\nmove the field values, which is why you often see borrows of structs). Our\nfunction signature for <code class=\"hljs\">area</code> now says exactly what we mean: calculate the area\nof <code class=\"hljs\">Rectangle</code>, using its <code class=\"hljs\">width</code> and <code class=\"hljs\">height</code> fields. This conveys that the\nwidth and height are related to each other, and it gives descriptive names to\nthe values rather than using the tuple index values of <code class=\"hljs\">0</code> and <code class=\"hljs\">1</code>. This is a\nwin for clarity.</p>\n<h3 id=\"adding-useful-functionality-with-derived-traits\"><a class=\"header\" href=\"#adding-useful-functionality-with-derived-traits\">Adding Useful Functionality with Derived Traits</a></h3>\n<p>It‚Äôd be useful to be able to print an instance of <code class=\"hljs\">Rectangle</code> while we‚Äôre\ndebugging our program and see the values for all its fields. Listing 5-11 tries\nusing the <a href=\"../std/macro.println.html\"><code class=\"hljs\">println!</code> macro</a><!-- ignore --> as we have used in\nprevious chapters. This won‚Äôt work, however.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Rectangle</span></span> {\n    width: <span class=\"hljs-built_in\">u32</span>,\n    height: <span class=\"hljs-built_in\">u32</span>,\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> rect1 = Rectangle {\n        width: <span class=\"hljs-number\">30</span>,\n        height: <span class=\"hljs-number\">50</span>,\n    };\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"rect1 is {}\"</span>, rect1);\n}</code></pre>\n<p><span class=\"caption\">Listing 5-11: Attempting to print a <code class=\"hljs\">Rectangle</code>\ninstance</span></p>\n<p>When we compile this code, we get an error with this core message:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">error[E0277]: `Rectangle` doesn't implement `std::fmt::Display`\n</code></pre>\n<p>The <code class=\"hljs\">println!</code> macro can do many kinds of formatting, and by default, the curly\nbrackets tell <code class=\"hljs\">println!</code> to use formatting known as <code class=\"hljs\">Display</code>: output intended\nfor direct end user consumption. The primitive types we‚Äôve seen so far\nimplement <code class=\"hljs\">Display</code> by default because there‚Äôs only one way you‚Äôd want to show\na <code class=\"hljs\">1</code> or any other primitive type to a user. But with structs, the way\n<code class=\"hljs\">println!</code> should format the output is less clear because there are more\ndisplay possibilities: Do you want commas or not? Do you want to print the\ncurly brackets? Should all the fields be shown? Due to this ambiguity, Rust\ndoesn‚Äôt try to guess what we want, and structs don‚Äôt have a provided\nimplementation of <code class=\"hljs\">Display</code> to use with <code class=\"hljs\">println!</code> and the <code class=\"hljs\">{}</code> placeholder.</p>\n<p>If we continue reading the errors, we‚Äôll find this helpful note:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">   = help: the trait `std::fmt::Display` is not implemented for `Rectangle`\n   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n</code></pre>\n<p>Let‚Äôs try it! The <code class=\"hljs\">println!</code> macro call will now look like <code class=\"hljs\">println!(\"rect1 is {rect1:?}\");</code>. Putting the specifier <code class=\"hljs\">:?</code> inside the curly brackets tells\n<code class=\"hljs\">println!</code> we want to use an output format called <code class=\"hljs\">Debug</code>. The <code class=\"hljs\">Debug</code> trait\nenables us to print our struct in a way that is useful for developers so we can\nsee its value while we‚Äôre debugging our code.</p>\n<p>Compile the code with this change. Drat! We still get an error:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">error[E0277]: `Rectangle` doesn't implement `Debug`\n</code></pre>\n<p>But again, the compiler gives us a helpful note:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">   = help: the trait `Debug` is not implemented for `Rectangle`\n   = note: add `#[derive(Debug)]` to `Rectangle` or manually `impl Debug for Rectangle`\n</code></pre>\n<p>Rust <em>does</em> include functionality to print out debugging information, but we\nhave to explicitly opt in to make that functionality available for our struct.\nTo do that, we add the outer attribute <code class=\"hljs\">#[derive(Debug)]</code> just before the\nstruct definition, as shown in Listing 5-12.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-meta\">#[derive(Debug)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Rectangle</span></span> {\n    width: <span class=\"hljs-built_in\">u32</span>,\n    height: <span class=\"hljs-built_in\">u32</span>,\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> rect1 = Rectangle {\n        width: <span class=\"hljs-number\">30</span>,\n        height: <span class=\"hljs-number\">50</span>,\n    };\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"rect1 is {rect1:?}\"</span>);\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 5-12: Adding the attribute to derive the <code class=\"hljs\">Debug</code>\ntrait and printing the <code class=\"hljs\">Rectangle</code> instance using debug formatting</span></p>\n<p>Now when we run the program, we won‚Äôt get any errors, and we‚Äôll see the\nfollowing output:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling rectangles v0.1.0 (file:///projects/rectangles)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.48s\n     Running `target/debug/rectangles`\nrect1 is Rectangle { width: 30, height: 50 }\n</code></pre>\n<p>Nice! It‚Äôs not the prettiest output, but it shows the values of all the fields\nfor this instance, which would definitely help during debugging. When we have\nlarger structs, it‚Äôs useful to have output that‚Äôs a bit easier to read; in\nthose cases, we can use <code class=\"hljs\">{:#?}</code> instead of <code class=\"hljs\">{:?}</code> in the <code class=\"hljs\">println!</code> string. In\nthis example, using the <code class=\"hljs\">{:#?}</code> style will output the following:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling rectangles v0.1.0 (file:///projects/rectangles)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.48s\n     Running `target/debug/rectangles`\nrect1 is Rectangle {\n    width: 30,\n    height: 50,\n}\n</code></pre>\n<p>Another way to print out a value using the <code class=\"hljs\">Debug</code> format is to use the <a href=\"../std/macro.dbg.html\"><code class=\"hljs\">dbg!</code>\nmacro</a><!-- ignore -->, which takes ownership of an expression (as opposed\nto <code class=\"hljs\">println!</code>, which takes a reference), prints the file and line number of\nwhere that <code class=\"hljs\">dbg!</code> macro call occurs in your code along with the resultant value\nof that expression, and returns ownership of the value.</p>\n<section class=\"note\" aria-role=\"note\">\n<p>Note: Calling the <code class=\"hljs\">dbg!</code> macro prints to the standard error console stream\n(<code class=\"hljs\">stderr</code>), as opposed to <code class=\"hljs\">println!</code>, which prints to the standard output\nconsole stream (<code class=\"hljs\">stdout</code>). We‚Äôll talk more about <code class=\"hljs\">stderr</code> and <code class=\"hljs\">stdout</code> in the\n<a href=\"ch12-06-writing-to-stderr-instead-of-stdout.html\">‚ÄúWriting Error Messages to Standard Error Instead of Standard Output‚Äù\nsection in Chapter 12</a><!-- ignore -->.</p>\n</section>\n<p>Here‚Äôs an example where we‚Äôre interested in the value that gets assigned to the\n<code class=\"hljs\">width</code> field, as well as the value of the whole struct in <code class=\"hljs\">rect1</code>:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-meta\">#[derive(Debug)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Rectangle</span></span> {\n    width: <span class=\"hljs-built_in\">u32</span>,\n    height: <span class=\"hljs-built_in\">u32</span>,\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> scale = <span class=\"hljs-number\">2</span>;\n    <span class=\"hljs-keyword\">let</span> rect1 = Rectangle {\n        width: dbg!(<span class=\"hljs-number\">30</span> * scale),\n        height: <span class=\"hljs-number\">50</span>,\n    };\n\n    dbg!(&amp;rect1);\n}</code></pre></pre>\n<p>We can put <code class=\"hljs\">dbg!</code> around the expression <code class=\"hljs\">30 * scale</code> and, because <code class=\"hljs\">dbg!</code>\nreturns ownership of the expression‚Äôs value, the <code class=\"hljs\">width</code> field will get the\nsame value as if we didn‚Äôt have the <code class=\"hljs\">dbg!</code> call there. We don‚Äôt want <code class=\"hljs\">dbg!</code> to\ntake ownership of <code class=\"hljs\">rect1</code>, so we use a reference to <code class=\"hljs\">rect1</code> in the next call.\nHere‚Äôs what the output of this example looks like:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling rectangles v0.1.0 (file:///projects/rectangles)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.61s\n     Running `target/debug/rectangles`\n[src/main.rs:10:16] 30 * scale = 60\n[src/main.rs:14:5] &amp;rect1 = Rectangle {\n    width: 60,\n    height: 50,\n}\n</code></pre>\n<p>We can see the first bit of output came from <em>src/main.rs</em> line 10 where we‚Äôre\ndebugging the expression <code class=\"hljs\">30 * scale</code>, and its resultant value is <code class=\"hljs\">60</code> (the\n<code class=\"hljs\">Debug</code> formatting implemented for integers is to print only their value). The\n<code class=\"hljs\">dbg!</code> call on line 14 of <em>src/main.rs</em> outputs the value of <code class=\"hljs\">&amp;rect1</code>, which is\nthe <code class=\"hljs\">Rectangle</code> struct. This output uses the pretty <code class=\"hljs\">Debug</code> formatting of the\n<code class=\"hljs\">Rectangle</code> type. The <code class=\"hljs\">dbg!</code> macro can be really helpful when you‚Äôre trying to\nfigure out what your code is doing!</p>\n<p>In addition to the <code class=\"hljs\">Debug</code> trait, Rust has provided a number of traits for us\nto use with the <code class=\"hljs\">derive</code> attribute that can add useful behavior to our custom\ntypes. Those traits and their behaviors are listed in <a href=\"appendix-03-derivable-traits.html\">Appendix C</a><!--\nignore -->. We‚Äôll cover how to implement these traits with custom behavior as\nwell as how to create your own traits in Chapter 10. There are also many\nattributes other than <code class=\"hljs\">derive</code>; for more information, see <a href=\"../reference/attributes.html\">the ‚ÄúAttributes‚Äù\nsection of the Rust Reference</a>.</p>\n<p>Our <code class=\"hljs\">area</code> function is very specific: it only computes the area of rectangles.\nIt would be helpful to tie this behavior more closely to our <code class=\"hljs\">Rectangle</code> struct\nbecause it won‚Äôt work with any other type. Let‚Äôs look at how we can continue to\nrefactor this code by turning the <code class=\"hljs\">area</code> function into an <code class=\"hljs\">area</code> <em>method</em>\ndefined on our <code class=\"hljs\">Rectangle</code> type.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"method-syntax\"><a class=\"header\" href=\"#method-syntax\">Method Syntax</a></h2>\n<p><em>Methods</em> are similar to functions: we declare them with the <code class=\"hljs\">fn</code> keyword and a\nname, they can have parameters and a return value, and they contain some code\nthat‚Äôs run when the method is called from somewhere else. Unlike functions,\nmethods are defined within the context of a struct (or an enum or a trait\nobject, which we cover in <a href=\"ch06-00-enums.html\">Chapter 6</a><!-- ignore --> and <a href=\"ch17-02-trait-objects.html\">Chapter\n17</a><!-- ignore -->, respectively), and their first parameter is\nalways <code class=\"hljs\">self</code>, which represents the instance of the struct the method is being\ncalled on.</p>\n<h3 id=\"defining-methods\"><a class=\"header\" href=\"#defining-methods\">Defining Methods</a></h3>\n<p>Let‚Äôs change the <code class=\"hljs\">area</code> function that has a <code class=\"hljs\">Rectangle</code> instance as a parameter\nand instead make an <code class=\"hljs\">area</code> method defined on the <code class=\"hljs\">Rectangle</code> struct, as shown\nin Listing 5-13.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-meta\">#[derive(Debug)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Rectangle</span></span> {\n    width: <span class=\"hljs-built_in\">u32</span>,\n    height: <span class=\"hljs-built_in\">u32</span>,\n}\n\n<span class=\"hljs-keyword\">impl</span> Rectangle {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">area</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">u32</span> {\n        <span class=\"hljs-keyword\">self</span>.width * <span class=\"hljs-keyword\">self</span>.height\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> rect1 = Rectangle {\n        width: <span class=\"hljs-number\">30</span>,\n        height: <span class=\"hljs-number\">50</span>,\n    };\n\n    <span class=\"hljs-built_in\">println!</span>(\n        <span class=\"hljs-string\">\"The area of the rectangle is {} square pixels.\"</span>,\n        rect1.area()\n    );\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 5-13: Defining an <code class=\"hljs\">area</code> method on the\n<code class=\"hljs\">Rectangle</code> struct</span></p>\n<p>To define the function within the context of <code class=\"hljs\">Rectangle</code>, we start an <code class=\"hljs\">impl</code>\n(implementation) block for <code class=\"hljs\">Rectangle</code>. Everything within this <code class=\"hljs\">impl</code> block\nwill be associated with the <code class=\"hljs\">Rectangle</code> type. Then we move the <code class=\"hljs\">area</code> function\nwithin the <code class=\"hljs\">impl</code> curly brackets and change the first (and in this case, only)\nparameter to be <code class=\"hljs\">self</code> in the signature and everywhere within the body. In\n<code class=\"hljs\">main</code>, where we called the <code class=\"hljs\">area</code> function and passed <code class=\"hljs\">rect1</code> as an argument,\nwe can instead use <em>method syntax</em> to call the <code class=\"hljs\">area</code> method on our <code class=\"hljs\">Rectangle</code>\ninstance. The method syntax goes after an instance: we add a dot followed by\nthe method name, parentheses, and any arguments.</p>\n<p>In the signature for <code class=\"hljs\">area</code>, we use <code class=\"hljs\">&amp;self</code> instead of <code class=\"hljs\">rectangle: &amp;Rectangle</code>.\nThe <code class=\"hljs\">&amp;self</code> is actually short for <code class=\"hljs\">self: &amp;Self</code>. Within an <code class=\"hljs\">impl</code> block, the\ntype <code class=\"hljs\">Self</code> is an alias for the type that the <code class=\"hljs\">impl</code> block is for. Methods must\nhave a parameter named <code class=\"hljs\">self</code> of type <code class=\"hljs\">Self</code> for their first parameter, so Rust\nlets you abbreviate this with only the name <code class=\"hljs\">self</code> in the first parameter spot.\nNote that we still need to use the <code class=\"hljs\">&amp;</code> in front of the <code class=\"hljs\">self</code> shorthand to\nindicate that this method borrows the <code class=\"hljs\">Self</code> instance, just as we did in\n<code class=\"hljs\">rectangle: &amp;Rectangle</code>. Methods can take ownership of <code class=\"hljs\">self</code>, borrow <code class=\"hljs\">self</code>\nimmutably, as we‚Äôve done here, or borrow <code class=\"hljs\">self</code> mutably, just as they can any\nother parameter.</p>\n<p>We chose <code class=\"hljs\">&amp;self</code> here for the same reason we used <code class=\"hljs\">&amp;Rectangle</code> in the function\nversion: we don‚Äôt want to take ownership, and we just want to read the data in\nthe struct, not write to it. If we wanted to change the instance that we‚Äôve\ncalled the method on as part of what the method does, we‚Äôd use <code class=\"hljs\">&amp;mut self</code> as\nthe first parameter. Having a method that takes ownership of the instance by\nusing just <code class=\"hljs\">self</code> as the first parameter is rare; this technique is usually\nused when the method transforms <code class=\"hljs\">self</code> into something else and you want to\nprevent the caller from using the original instance after the transformation.</p>\n<p>The main reason for using methods instead of functions, in addition to\nproviding method syntax and not having to repeat the type of <code class=\"hljs\">self</code> in every\nmethod‚Äôs signature, is for organization. We‚Äôve put all the things we can do\nwith an instance of a type in one <code class=\"hljs\">impl</code> block rather than making future users\nof our code search for capabilities of <code class=\"hljs\">Rectangle</code> in various places in the\nlibrary we provide.</p>\n<p>Note that we can choose to give a method the same name as one of the struct‚Äôs\nfields. For example, we can define a method on <code class=\"hljs\">Rectangle</code> that is also named\n<code class=\"hljs\">width</code>:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#[derive(Debug)]</span>\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Rectangle</span></span> {\n</span><span class=\"boring\">    width: <span class=\"hljs-built_in\">u32</span>,\n</span><span class=\"boring\">    height: <span class=\"hljs-built_in\">u32</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">impl</span> Rectangle {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">width</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">bool</span> {\n        <span class=\"hljs-keyword\">self</span>.width &gt; <span class=\"hljs-number\">0</span>\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> rect1 = Rectangle {\n        width: <span class=\"hljs-number\">30</span>,\n        height: <span class=\"hljs-number\">50</span>,\n    };\n\n    <span class=\"hljs-keyword\">if</span> rect1.width() {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The rectangle has a nonzero width; it is {}\"</span>, rect1.width);\n    }\n}</code></pre></pre>\n<p>Here, we‚Äôre choosing to make the <code class=\"hljs\">width</code> method return <code class=\"hljs\">true</code> if the value in\nthe instance‚Äôs <code class=\"hljs\">width</code> field is greater than <code class=\"hljs\">0</code> and <code class=\"hljs\">false</code> if the value is\n<code class=\"hljs\">0</code>: we can use a field within a method of the same name for any purpose. In\n<code class=\"hljs\">main</code>, when we follow <code class=\"hljs\">rect1.width</code> with parentheses, Rust knows we mean the\nmethod <code class=\"hljs\">width</code>. When we don‚Äôt use parentheses, Rust knows we mean the field\n<code class=\"hljs\">width</code>.</p>\n<p>Often, but not always, when we give a method the same name as a field we want\nit to only return the value in the field and do nothing else. Methods like this\nare called <em>getters</em>, and Rust does not implement them automatically for struct\nfields as some other languages do. Getters are useful because you can make the\nfield private but the method public, and thus enable read-only access to that\nfield as part of the type‚Äôs public API. We will discuss what public and private\nare and how to designate a field or method as public or private in <a href=\"ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html#exposing-paths-with-the-pub-keyword\">Chapter\n7</a><!-- ignore -->.</p>\n<section class=\"note\" aria-role=\"note\">\n<h3 id=\"wheres-the---operator\"><a class=\"header\" href=\"#wheres-the---operator\">Where‚Äôs the <code>-&gt;</code> Operator?</a></h3>\n<p>In C and C++, two different operators are used for calling methods: you use\n<code class=\"hljs\">.</code> if you‚Äôre calling a method on the object directly and <code class=\"hljs\">-&gt;</code> if you‚Äôre\ncalling the method on a pointer to the object and need to dereference the\npointer first. In other words, if <code class=\"hljs\">object</code> is a pointer,\n<code class=\"hljs\">object-&gt;something()</code> is similar to <code class=\"hljs\">(*object).something()</code>.</p>\n<p>Rust doesn‚Äôt have an equivalent to the <code class=\"hljs\">-&gt;</code> operator; instead, Rust has a\nfeature called <em>automatic referencing and dereferencing</em>. Calling methods is\none of the few places in Rust that has this behavior.</p>\n<p>Here‚Äôs how it works: when you call a method with <code class=\"hljs\">object.something()</code>, Rust\nautomatically adds in <code class=\"hljs\">&amp;</code>, <code class=\"hljs\">&amp;mut</code>, or <code class=\"hljs\">*</code> so <code class=\"hljs\">object</code> matches the signature of\nthe method. In other words, the following are the same:</p>\n<!-- CAN'T EXTRACT SEE BUG https://github.com/rust-lang/mdBook/issues/1127 -->\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\"><span class=\"hljs-meta\">#[derive(Debug,Copy,Clone)]</span>\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Point</span></span> {\n</span><span class=\"boring\">    x: <span class=\"hljs-built_in\">f64</span>,\n</span><span class=\"boring\">    y: <span class=\"hljs-built_in\">f64</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Point {\n</span><span class=\"boring\">   <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">distance</span></span>(&amp;<span class=\"hljs-keyword\">self</span>, other: &amp;Point) -&gt; <span class=\"hljs-built_in\">f64</span> {\n</span><span class=\"boring\">       <span class=\"hljs-keyword\">let</span> x_squared = <span class=\"hljs-built_in\">f64</span>::powi(other.x - <span class=\"hljs-keyword\">self</span>.x, <span class=\"hljs-number\">2</span>);\n</span><span class=\"boring\">       <span class=\"hljs-keyword\">let</span> y_squared = <span class=\"hljs-built_in\">f64</span>::powi(other.y - <span class=\"hljs-keyword\">self</span>.y, <span class=\"hljs-number\">2</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">       <span class=\"hljs-built_in\">f64</span>::sqrt(x_squared + y_squared)\n</span><span class=\"boring\">   }\n</span><span class=\"boring\">}\n</span><span class=\"boring\"><span class=\"hljs-keyword\">let</span> p1 = Point { x: <span class=\"hljs-number\">0.0</span>, y: <span class=\"hljs-number\">0.0</span> };\n</span><span class=\"boring\"><span class=\"hljs-keyword\">let</span> p2 = Point { x: <span class=\"hljs-number\">5.0</span>, y: <span class=\"hljs-number\">6.5</span> };\n</span>p1.distance(&amp;p2);\n(&amp;p1).distance(&amp;p2);\n<span class=\"boring\">}</span></code></pre></pre>\n<p>The first one looks much cleaner. This automatic referencing behavior works\nbecause methods have a clear receiver‚Äîthe type of <code class=\"hljs\">self</code>. Given the receiver\nand name of a method, Rust can figure out definitively whether the method is\nreading (<code class=\"hljs\">&amp;self</code>), mutating (<code class=\"hljs\">&amp;mut self</code>), or consuming (<code class=\"hljs\">self</code>). The fact\nthat Rust makes borrowing implicit for method receivers is a big part of\nmaking ownership ergonomic in practice.</p>\n</section>\n<h3 id=\"methods-with-more-parameters\"><a class=\"header\" href=\"#methods-with-more-parameters\">Methods with More Parameters</a></h3>\n<p>Let‚Äôs practice using methods by implementing a second method on the <code class=\"hljs\">Rectangle</code>\nstruct. This time we want an instance of <code class=\"hljs\">Rectangle</code> to take another instance\nof <code class=\"hljs\">Rectangle</code> and return <code class=\"hljs\">true</code> if the second <code class=\"hljs\">Rectangle</code> can fit completely\nwithin <code class=\"hljs\">self</code> (the first <code class=\"hljs\">Rectangle</code>); otherwise, it should return <code class=\"hljs\">false</code>.\nThat is, once we‚Äôve defined the <code class=\"hljs\">can_hold</code> method, we want to be able to write\nthe program shown in Listing 5-14.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> rect1 = Rectangle {\n        width: <span class=\"hljs-number\">30</span>,\n        height: <span class=\"hljs-number\">50</span>,\n    };\n    <span class=\"hljs-keyword\">let</span> rect2 = Rectangle {\n        width: <span class=\"hljs-number\">10</span>,\n        height: <span class=\"hljs-number\">40</span>,\n    };\n    <span class=\"hljs-keyword\">let</span> rect3 = Rectangle {\n        width: <span class=\"hljs-number\">60</span>,\n        height: <span class=\"hljs-number\">45</span>,\n    };\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Can rect1 hold rect2? {}\"</span>, rect1.can_hold(&amp;rect2));\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Can rect1 hold rect3? {}\"</span>, rect1.can_hold(&amp;rect3));\n}</code></pre>\n<p><span class=\"caption\">Listing 5-14: Using the as-yet-unwritten <code class=\"hljs\">can_hold</code>\nmethod</span></p>\n<p>The expected output would look like the following because both dimensions of\n<code class=\"hljs\">rect2</code> are smaller than the dimensions of <code class=\"hljs\">rect1</code>, but <code class=\"hljs\">rect3</code> is wider than\n<code class=\"hljs\">rect1</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">Can rect1 hold rect2? true\nCan rect1 hold rect3? false\n</code></pre>\n<p>We know we want to define a method, so it will be within the <code class=\"hljs\">impl Rectangle</code>\nblock. The method name will be <code class=\"hljs\">can_hold</code>, and it will take an immutable borrow\nof another <code class=\"hljs\">Rectangle</code> as a parameter. We can tell what the type of the\nparameter will be by looking at the code that calls the method:\n<code class=\"hljs\">rect1.can_hold(&amp;rect2)</code> passes in <code class=\"hljs\">&amp;rect2</code>, which is an immutable borrow to\n<code class=\"hljs\">rect2</code>, an instance of <code class=\"hljs\">Rectangle</code>. This makes sense because we only need to\nread <code class=\"hljs\">rect2</code> (rather than write, which would mean we‚Äôd need a mutable borrow),\nand we want <code class=\"hljs\">main</code> to retain ownership of <code class=\"hljs\">rect2</code> so we can use it again after\ncalling the <code class=\"hljs\">can_hold</code> method. The return value of <code class=\"hljs\">can_hold</code> will be a\nBoolean, and the implementation will check whether the width and height of\n<code class=\"hljs\">self</code> are greater than the width and height of the other <code class=\"hljs\">Rectangle</code>,\nrespectively. Let‚Äôs add the new <code class=\"hljs\">can_hold</code> method to the <code class=\"hljs\">impl</code> block from\nListing 5-13, shown in Listing 5-15.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#[derive(Debug)]</span>\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Rectangle</span></span> {\n</span><span class=\"boring\">    width: <span class=\"hljs-built_in\">u32</span>,\n</span><span class=\"boring\">    height: <span class=\"hljs-built_in\">u32</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">impl</span> Rectangle {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">area</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">u32</span> {\n        <span class=\"hljs-keyword\">self</span>.width * <span class=\"hljs-keyword\">self</span>.height\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">can_hold</span></span>(&amp;<span class=\"hljs-keyword\">self</span>, other: &amp;Rectangle) -&gt; <span class=\"hljs-built_in\">bool</span> {\n        <span class=\"hljs-keyword\">self</span>.width &gt; other.width &amp;&amp; <span class=\"hljs-keyword\">self</span>.height &gt; other.height\n    }\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> rect1 = Rectangle {\n</span><span class=\"boring\">        width: <span class=\"hljs-number\">30</span>,\n</span><span class=\"boring\">        height: <span class=\"hljs-number\">50</span>,\n</span><span class=\"boring\">    };\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> rect2 = Rectangle {\n</span><span class=\"boring\">        width: <span class=\"hljs-number\">10</span>,\n</span><span class=\"boring\">        height: <span class=\"hljs-number\">40</span>,\n</span><span class=\"boring\">    };\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> rect3 = Rectangle {\n</span><span class=\"boring\">        width: <span class=\"hljs-number\">60</span>,\n</span><span class=\"boring\">        height: <span class=\"hljs-number\">45</span>,\n</span><span class=\"boring\">    };\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Can rect1 hold rect2? {}\"</span>, rect1.can_hold(&amp;rect2));\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Can rect1 hold rect3? {}\"</span>, rect1.can_hold(&amp;rect3));\n</span><span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 5-15: Implementing the <code class=\"hljs\">can_hold</code> method on\n<code class=\"hljs\">Rectangle</code> that takes another <code class=\"hljs\">Rectangle</code> instance as a parameter</span></p>\n<p>When we run this code with the <code class=\"hljs\">main</code> function in Listing 5-14, we‚Äôll get our\ndesired output. Methods can take multiple parameters that we add to the\nsignature after the <code class=\"hljs\">self</code> parameter, and those parameters work just like\nparameters in functions.</p>\n<h3 id=\"associated-functions\"><a class=\"header\" href=\"#associated-functions\">Associated Functions</a></h3>\n<p>All functions defined within an <code class=\"hljs\">impl</code> block are called <em>associated functions</em>\nbecause they‚Äôre associated with the type named after the <code class=\"hljs\">impl</code>. We can define\nassociated functions that don‚Äôt have <code class=\"hljs\">self</code> as their first parameter (and thus\nare not methods) because they don‚Äôt need an instance of the type to work with.\nWe‚Äôve already used one function like this: the <code class=\"hljs\">String::from</code> function that‚Äôs\ndefined on the <code class=\"hljs\">String</code> type.</p>\n<p>Associated functions that aren‚Äôt methods are often used for constructors that\nwill return a new instance of the struct. These are often called <code class=\"hljs\">new</code>, but\n<code class=\"hljs\">new</code> isn‚Äôt a special name and isn‚Äôt built into the language. For example, we\ncould choose to provide an associated function named <code class=\"hljs\">square</code> that would have\none dimension parameter and use that as both width and height, thus making it\neasier to create a square <code class=\"hljs\">Rectangle</code> rather than having to specify the same\nvalue twice:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#[derive(Debug)]</span>\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Rectangle</span></span> {\n</span><span class=\"boring\">    width: <span class=\"hljs-built_in\">u32</span>,\n</span><span class=\"boring\">    height: <span class=\"hljs-built_in\">u32</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">impl</span> Rectangle {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">square</span></span>(size: <span class=\"hljs-built_in\">u32</span>) -&gt; <span class=\"hljs-keyword\">Self</span> {\n        <span class=\"hljs-keyword\">Self</span> {\n            width: size,\n            height: size,\n        }\n    }\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> sq = Rectangle::square(<span class=\"hljs-number\">3</span>);\n</span><span class=\"boring\">}</span></code></pre></pre>\n<p>The <code class=\"hljs\">Self</code> keywords in the return type and in the body of the function are\naliases for the type that appears after the <code class=\"hljs\">impl</code> keyword, which in this case\nis <code class=\"hljs\">Rectangle</code>.</p>\n<p>To call this associated function, we use the <code class=\"hljs\">::</code> syntax with the struct name;\n<code class=\"hljs\">let sq = Rectangle::square(3);</code> is an example. This function is namespaced by\nthe struct: the <code class=\"hljs\">::</code> syntax is used for both associated functions and\nnamespaces created by modules. We‚Äôll discuss modules in <a href=\"ch07-02-defining-modules-to-control-scope-and-privacy.html\">Chapter\n7</a><!-- ignore -->.</p>\n<h3 id=\"multiple-impl-blocks\"><a class=\"header\" href=\"#multiple-impl-blocks\">Multiple <code>impl</code> Blocks</a></h3>\n<p>Each struct is allowed to have multiple <code class=\"hljs\">impl</code> blocks. For example, Listing\n5-15 is equivalent to the code shown in Listing 5-16, which has each method in\nits own <code class=\"hljs\">impl</code> block.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#[derive(Debug)]</span>\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Rectangle</span></span> {\n</span><span class=\"boring\">    width: <span class=\"hljs-built_in\">u32</span>,\n</span><span class=\"boring\">    height: <span class=\"hljs-built_in\">u32</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">impl</span> Rectangle {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">area</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">u32</span> {\n        <span class=\"hljs-keyword\">self</span>.width * <span class=\"hljs-keyword\">self</span>.height\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span> Rectangle {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">can_hold</span></span>(&amp;<span class=\"hljs-keyword\">self</span>, other: &amp;Rectangle) -&gt; <span class=\"hljs-built_in\">bool</span> {\n        <span class=\"hljs-keyword\">self</span>.width &gt; other.width &amp;&amp; <span class=\"hljs-keyword\">self</span>.height &gt; other.height\n    }\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> rect1 = Rectangle {\n</span><span class=\"boring\">        width: <span class=\"hljs-number\">30</span>,\n</span><span class=\"boring\">        height: <span class=\"hljs-number\">50</span>,\n</span><span class=\"boring\">    };\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> rect2 = Rectangle {\n</span><span class=\"boring\">        width: <span class=\"hljs-number\">10</span>,\n</span><span class=\"boring\">        height: <span class=\"hljs-number\">40</span>,\n</span><span class=\"boring\">    };\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> rect3 = Rectangle {\n</span><span class=\"boring\">        width: <span class=\"hljs-number\">60</span>,\n</span><span class=\"boring\">        height: <span class=\"hljs-number\">45</span>,\n</span><span class=\"boring\">    };\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Can rect1 hold rect2? {}\"</span>, rect1.can_hold(&amp;rect2));\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Can rect1 hold rect3? {}\"</span>, rect1.can_hold(&amp;rect3));\n</span><span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 5-16: Rewriting Listing 5-15 using multiple <code class=\"hljs\">impl</code>\nblocks</span></p>\n<p>There‚Äôs no reason to separate these methods into multiple <code class=\"hljs\">impl</code> blocks here,\nbut this is valid syntax. We‚Äôll see a case in which multiple <code class=\"hljs\">impl</code> blocks are\nuseful in Chapter 10, where we discuss generic types and traits.</p>\n<h2 id=\"summary-4\"><a class=\"header\" href=\"#summary-4\">Summary</a></h2>\n<p>Structs let you create custom types that are meaningful for your domain. By\nusing structs, you can keep associated pieces of data connected to each other\nand name each piece to make your code clear. In <code class=\"hljs\">impl</code> blocks, you can define\nfunctions that are associated with your type, and methods are a kind of\nassociated function that let you specify the behavior that instances of your\nstructs have.</p>\n<p>But structs aren‚Äôt the only way you can create custom types: let‚Äôs turn to\nRust‚Äôs enum feature to add another tool to your toolbox.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"enums-and-pattern-matching\"><a class=\"header\" href=\"#enums-and-pattern-matching\">Enums and Pattern Matching</a></h1>\n<p>In this chapter, we‚Äôll look at <em>enumerations</em>, also referred to as <em>enums</em>.\nEnums allow you to define a type by enumerating its possible <em>variants</em>. First\nwe‚Äôll define and use an enum to show how an enum can encode meaning along with\ndata. Next, we‚Äôll explore a particularly useful enum, called <code class=\"hljs\">Option</code>, which\nexpresses that a value can be either something or nothing. Then we‚Äôll look at\nhow pattern matching in the <code class=\"hljs\">match</code> expression makes it easy to run different\ncode for different values of an enum. Finally, we‚Äôll cover how the <code class=\"hljs\">if let</code>\nconstruct is another convenient and concise idiom available to handle enums in\nyour code.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"defining-an-enum\"><a class=\"header\" href=\"#defining-an-enum\">Defining an Enum</a></h2>\n<p>Where structs give you a way of grouping together related fields and data, like\na <code class=\"hljs\">Rectangle</code> with its <code class=\"hljs\">width</code> and <code class=\"hljs\">height</code>, enums give you a way of saying a\nvalue is one of a possible set of values. For example, we may want to say that\n<code class=\"hljs\">Rectangle</code> is one of a set of possible shapes that also includes <code class=\"hljs\">Circle</code> and\n<code class=\"hljs\">Triangle</code>. To do this, Rust allows us to encode these possibilities as an enum.</p>\n<p>Let‚Äôs look at a situation we might want to express in code and see why enums\nare useful and more appropriate than structs in this case. Say we need to work\nwith IP addresses. Currently, two major standards are used for IP addresses:\nversion four and version six. Because these are the only possibilities for an\nIP address that our program will come across, we can <em>enumerate</em> all possible\nvariants, which is where enumeration gets its name.</p>\n<p>Any IP address can be either a version four or a version six address, but not\nboth at the same time. That property of IP addresses makes the enum data\nstructure appropriate because an enum value can only be one of its variants.\nBoth version four and version six addresses are still fundamentally IP\naddresses, so they should be treated as the same type when the code is handling\nsituations that apply to any kind of IP address.</p>\n<p>We can express this concept in code by defining an <code class=\"hljs\">IpAddrKind</code> enumeration and\nlisting the possible kinds an IP address can be, <code class=\"hljs\">V4</code> and <code class=\"hljs\">V6</code>. These are the\nvariants of the enum:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">IpAddrKind</span></span> {\n    V4,\n    V6,\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> four = IpAddrKind::V4;\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> six = IpAddrKind::V6;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    route(IpAddrKind::V4);\n</span><span class=\"boring\">    route(IpAddrKind::V6);\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">route</span></span>(ip_kind: IpAddrKind) {}</span></code></pre></pre>\n<p><code class=\"hljs\">IpAddrKind</code> is now a custom data type that we can use elsewhere in our code.</p>\n<h3 id=\"enum-values\"><a class=\"header\" href=\"#enum-values\">Enum Values</a></h3>\n<p>We can create instances of each of the two variants of <code class=\"hljs\">IpAddrKind</code> like this:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">IpAddrKind</span></span> {\n</span><span class=\"boring\">    V4,\n</span><span class=\"boring\">    V6,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> four = IpAddrKind::V4;\n    <span class=\"hljs-keyword\">let</span> six = IpAddrKind::V6;\n<span class=\"boring\">\n</span><span class=\"boring\">    route(IpAddrKind::V4);\n</span><span class=\"boring\">    route(IpAddrKind::V6);\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">route</span></span>(ip_kind: IpAddrKind) {}</span></code></pre></pre>\n<p>Note that the variants of the enum are namespaced under its identifier, and we\nuse a double colon to separate the two. This is useful because now both values\n<code class=\"hljs\">IpAddrKind::V4</code> and <code class=\"hljs\">IpAddrKind::V6</code> are of the same type: <code class=\"hljs\">IpAddrKind</code>. We\ncan then, for instance, define a function that takes any <code class=\"hljs\">IpAddrKind</code>:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">IpAddrKind</span></span> {\n</span><span class=\"boring\">    V4,\n</span><span class=\"boring\">    V6,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> four = IpAddrKind::V4;\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> six = IpAddrKind::V6;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    route(IpAddrKind::V4);\n</span><span class=\"boring\">    route(IpAddrKind::V6);\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">route</span></span>(ip_kind: IpAddrKind) {}</code></pre></pre>\n<p>And we can call this function with either variant:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">IpAddrKind</span></span> {\n</span><span class=\"boring\">    V4,\n</span><span class=\"boring\">    V6,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> four = IpAddrKind::V4;\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> six = IpAddrKind::V6;\n</span><span class=\"boring\">\n</span>    route(IpAddrKind::V4);\n    route(IpAddrKind::V6);\n<span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">route</span></span>(ip_kind: IpAddrKind) {}</span></code></pre></pre>\n<p>Using enums has even more advantages. Thinking more about our IP address type,\nat the moment we don‚Äôt have a way to store the actual IP address <em>data</em>; we\nonly know what <em>kind</em> it is. Given that you just learned about structs in\nChapter 5, you might be tempted to tackle this problem with structs as shown in\nListing 6-1.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">IpAddrKind</span></span> {\n        V4,\n        V6,\n    }\n\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">IpAddr</span></span> {\n        kind: IpAddrKind,\n        address: <span class=\"hljs-built_in\">String</span>,\n    }\n\n    <span class=\"hljs-keyword\">let</span> home = IpAddr {\n        kind: IpAddrKind::V4,\n        address: <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"127.0.0.1\"</span>),\n    };\n\n    <span class=\"hljs-keyword\">let</span> loopback = IpAddr {\n        kind: IpAddrKind::V6,\n        address: <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"::1\"</span>),\n    };\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 6-1: Storing the data and <code class=\"hljs\">IpAddrKind</code> variant of\nan IP address using a <code class=\"hljs\">struct</code></span></p>\n<p>Here, we‚Äôve defined a struct <code class=\"hljs\">IpAddr</code> that has two fields: a <code class=\"hljs\">kind</code> field that\nis of type <code class=\"hljs\">IpAddrKind</code> (the enum we defined previously) and an <code class=\"hljs\">address</code> field\nof type <code class=\"hljs\">String</code>. We have two instances of this struct. The first is <code class=\"hljs\">home</code>,\nand it has the value <code class=\"hljs\">IpAddrKind::V4</code> as its <code class=\"hljs\">kind</code> with associated address\ndata of <code class=\"hljs\">127.0.0.1</code>. The second instance is <code class=\"hljs\">loopback</code>. It has the other\nvariant of <code class=\"hljs\">IpAddrKind</code> as its <code class=\"hljs\">kind</code> value, <code class=\"hljs\">V6</code>, and has address <code class=\"hljs\">::1</code>\nassociated with it. We‚Äôve used a struct to bundle the <code class=\"hljs\">kind</code> and <code class=\"hljs\">address</code>\nvalues together, so now the variant is associated with the value.</p>\n<p>However, representing the same concept using just an enum is more concise:\nrather than an enum inside a struct, we can put data directly into each enum\nvariant. This new definition of the <code class=\"hljs\">IpAddr</code> enum says that both <code class=\"hljs\">V4</code> and <code class=\"hljs\">V6</code>\nvariants will have associated <code class=\"hljs\">String</code> values:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">IpAddr</span></span> {\n        V4(<span class=\"hljs-built_in\">String</span>),\n        V6(<span class=\"hljs-built_in\">String</span>),\n    }\n\n    <span class=\"hljs-keyword\">let</span> home = IpAddr::V4(<span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"127.0.0.1\"</span>));\n\n    <span class=\"hljs-keyword\">let</span> loopback = IpAddr::V6(<span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"::1\"</span>));\n<span class=\"boring\">}</span></code></pre></pre>\n<p>We attach data to each variant of the enum directly, so there is no need for an\nextra struct. Here, it‚Äôs also easier to see another detail of how enums work:\nthe name of each enum variant that we define also becomes a function that\nconstructs an instance of the enum. That is, <code class=\"hljs\">IpAddr::V4()</code> is a function call\nthat takes a <code class=\"hljs\">String</code> argument and returns an instance of the <code class=\"hljs\">IpAddr</code> type. We\nautomatically get this constructor function defined as a result of defining the\nenum.</p>\n<p>There‚Äôs another advantage to using an enum rather than a struct: each variant\ncan have different types and amounts of associated data. Version four IP\naddresses will always have four numeric components that will have values\nbetween 0 and 255. If we wanted to store <code class=\"hljs\">V4</code> addresses as four <code class=\"hljs\">u8</code> values but\nstill express <code class=\"hljs\">V6</code> addresses as one <code class=\"hljs\">String</code> value, we wouldn‚Äôt be able to with\na struct. Enums handle this case with ease:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">IpAddr</span></span> {\n        V4(<span class=\"hljs-built_in\">u8</span>, <span class=\"hljs-built_in\">u8</span>, <span class=\"hljs-built_in\">u8</span>, <span class=\"hljs-built_in\">u8</span>),\n        V6(<span class=\"hljs-built_in\">String</span>),\n    }\n\n    <span class=\"hljs-keyword\">let</span> home = IpAddr::V4(<span class=\"hljs-number\">127</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>);\n\n    <span class=\"hljs-keyword\">let</span> loopback = IpAddr::V6(<span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"::1\"</span>));\n<span class=\"boring\">}</span></code></pre></pre>\n<p>We‚Äôve shown several different ways to define data structures to store version\nfour and version six IP addresses. However, as it turns out, wanting to store\nIP addresses and encode which kind they are is so common that <a href=\"../std/net/enum.IpAddr.html\">the standard\nlibrary has a definition we can use!</a><!-- ignore --> Let‚Äôs look at how\nthe standard library defines <code class=\"hljs\">IpAddr</code>: it has the exact enum and variants that\nwe‚Äôve defined and used, but it embeds the address data inside the variants in\nthe form of two different structs, which are defined differently for each\nvariant:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Ipv4Addr</span></span> {\n    <span class=\"hljs-comment\">// --snip--</span>\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Ipv6Addr</span></span> {\n    <span class=\"hljs-comment\">// --snip--</span>\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">IpAddr</span></span> {\n    V4(Ipv4Addr),\n    V6(Ipv6Addr),\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>This code illustrates that you can put any kind of data inside an enum variant:\nstrings, numeric types, or structs, for example. You can even include another\nenum! Also, standard library types are often not much more complicated than\nwhat you might come up with.</p>\n<p>Note that even though the standard library contains a definition for <code class=\"hljs\">IpAddr</code>,\nwe can still create and use our own definition without conflict because we\nhaven‚Äôt brought the standard library‚Äôs definition into our scope. We‚Äôll talk\nmore about bringing types into scope in Chapter 7.</p>\n<p>Let‚Äôs look at another example of an enum in Listing 6-2: this one has a wide\nvariety of types embedded in its variants.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Message</span></span> {\n    Quit,\n    Move { x: <span class=\"hljs-built_in\">i32</span>, y: <span class=\"hljs-built_in\">i32</span> },\n    Write(<span class=\"hljs-built_in\">String</span>),\n    ChangeColor(<span class=\"hljs-built_in\">i32</span>, <span class=\"hljs-built_in\">i32</span>, <span class=\"hljs-built_in\">i32</span>),\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 6-2: A <code class=\"hljs\">Message</code> enum whose variants each store\ndifferent amounts and types of values</span></p>\n<p>This enum has four variants with different types:</p>\n<ul>\n<li><code class=\"hljs\">Quit</code> has no data associated with it at all.</li>\n<li><code class=\"hljs\">Move</code> has named fields, like a struct does.</li>\n<li><code class=\"hljs\">Write</code> includes a single <code class=\"hljs\">String</code>.</li>\n<li><code class=\"hljs\">ChangeColor</code> includes three <code class=\"hljs\">i32</code> values.</li>\n</ul>\n<p>Defining an enum with variants such as the ones in Listing 6-2 is similar to\ndefining different kinds of struct definitions, except the enum doesn‚Äôt use the\n<code class=\"hljs\">struct</code> keyword and all the variants are grouped together under the <code class=\"hljs\">Message</code>\ntype. The following structs could hold the same data that the preceding enum\nvariants hold:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">QuitMessage</span></span>; <span class=\"hljs-comment\">// unit struct</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">MoveMessage</span></span> {\n    x: <span class=\"hljs-built_in\">i32</span>,\n    y: <span class=\"hljs-built_in\">i32</span>,\n}\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">WriteMessage</span></span>(<span class=\"hljs-built_in\">String</span>); <span class=\"hljs-comment\">// tuple struct</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ChangeColorMessage</span></span>(<span class=\"hljs-built_in\">i32</span>, <span class=\"hljs-built_in\">i32</span>, <span class=\"hljs-built_in\">i32</span>); <span class=\"hljs-comment\">// tuple struct</span>\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}</span></code></pre></pre>\n<p>But if we used the different structs, each of which has its own type, we\ncouldn‚Äôt as easily define a function to take any of these kinds of messages as\nwe could with the <code class=\"hljs\">Message</code> enum defined in Listing 6-2, which is a single type.</p>\n<p>There is one more similarity between enums and structs: just as we‚Äôre able to\ndefine methods on structs using <code class=\"hljs\">impl</code>, we‚Äôre also able to define methods on\nenums. Here‚Äôs a method named <code class=\"hljs\">call</code> that we could define on our <code class=\"hljs\">Message</code> enum:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Message</span></span> {\n</span><span class=\"boring\">        Quit,\n</span><span class=\"boring\">        Move { x: <span class=\"hljs-built_in\">i32</span>, y: <span class=\"hljs-built_in\">i32</span> },\n</span><span class=\"boring\">        Write(<span class=\"hljs-built_in\">String</span>),\n</span><span class=\"boring\">        ChangeColor(<span class=\"hljs-built_in\">i32</span>, <span class=\"hljs-built_in\">i32</span>, <span class=\"hljs-built_in\">i32</span>),\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span>    <span class=\"hljs-keyword\">impl</span> Message {\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">call</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) {\n            <span class=\"hljs-comment\">// method body would be defined here</span>\n        }\n    }\n\n    <span class=\"hljs-keyword\">let</span> m = Message::Write(<span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"hello\"</span>));\n    m.call();\n<span class=\"boring\">}</span></code></pre></pre>\n<p>The body of the method would use <code class=\"hljs\">self</code> to get the value that we called the\nmethod on. In this example, we‚Äôve created a variable <code class=\"hljs\">m</code> that has the value\n<code class=\"hljs\">Message::Write(String::from(\"hello\"))</code>, and that is what <code class=\"hljs\">self</code> will be in the\nbody of the <code class=\"hljs\">call</code> method when <code class=\"hljs\">m.call()</code> runs.</p>\n<p>Let‚Äôs look at another enum in the standard library that is very common and\nuseful: <code class=\"hljs\">Option</code>.</p>\n<h3 id=\"the-option-enum-and-its-advantages-over-null-values\"><a class=\"header\" href=\"#the-option-enum-and-its-advantages-over-null-values\">The <code>Option</code> Enum and Its Advantages Over Null Values</a></h3>\n<p>This section explores a case study of <code class=\"hljs\">Option</code>, which is another enum defined\nby the standard library. The <code class=\"hljs\">Option</code> type encodes the very common scenario in\nwhich a value could be something or it could be nothing.</p>\n<p>For example, if you request the first item in a non-empty list, you would get\na value. If you request the first item in an empty list, you would get nothing.\nExpressing this concept in terms of the type system means the compiler can\ncheck whether you‚Äôve handled all the cases you should be handling; this\nfunctionality can prevent bugs that are extremely common in other programming\nlanguages.</p>\n<p>Programming language design is often thought of in terms of which features you\ninclude, but the features you exclude are important too. Rust doesn‚Äôt have the\nnull feature that many other languages have. <em>Null</em> is a value that means there\nis no value there. In languages with null, variables can always be in one of\ntwo states: null or not-null.</p>\n<p>In his 2009 presentation ‚ÄúNull References: The Billion Dollar Mistake,‚Äù Tony\nHoare, the inventor of null, has this to say:</p>\n<blockquote>\n<p>I call it my billion-dollar mistake. At that time, I was designing the first\ncomprehensive type system for references in an object-oriented language. My\ngoal was to ensure that all use of references should be absolutely safe, with\nchecking performed automatically by the compiler. But I couldn‚Äôt resist the\ntemptation to put in a null reference, simply because it was so easy to\nimplement. This has led to innumerable errors, vulnerabilities, and system\ncrashes, which have probably caused a billion dollars of pain and damage in\nthe last forty years.</p>\n</blockquote>\n<p>The problem with null values is that if you try to use a null value as a\nnot-null value, you‚Äôll get an error of some kind. Because this null or not-null\nproperty is pervasive, it‚Äôs extremely easy to make this kind of error.</p>\n<p>However, the concept that null is trying to express is still a useful one: a\nnull is a value that is currently invalid or absent for some reason.</p>\n<p>The problem isn‚Äôt really with the concept but with the particular\nimplementation. As such, Rust does not have nulls, but it does have an enum\nthat can encode the concept of a value being present or absent. This enum is\n<code class=\"hljs\">Option&lt;T&gt;</code>, and it is <a href=\"../std/option/enum.Option.html\">defined by the standard library</a><!-- ignore -->\nas follows:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Option</span></span>&lt;T&gt; {\n    <span class=\"hljs-literal\">None</span>,\n    <span class=\"hljs-literal\">Some</span>(T),\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>The <code class=\"hljs\">Option&lt;T&gt;</code> enum is so useful that it‚Äôs even included in the prelude; you\ndon‚Äôt need to bring it into scope explicitly. Its variants are also included in\nthe prelude: you can use <code class=\"hljs\">Some</code> and <code class=\"hljs\">None</code> directly without the <code class=\"hljs\">Option::</code>\nprefix. The <code class=\"hljs\">Option&lt;T&gt;</code> enum is still just a regular enum, and <code class=\"hljs\">Some(T)</code> and\n<code class=\"hljs\">None</code> are still variants of type <code class=\"hljs\">Option&lt;T&gt;</code>.</p>\n<p>The <code class=\"hljs\">&lt;T&gt;</code> syntax is a feature of Rust we haven‚Äôt talked about yet. It‚Äôs a\ngeneric type parameter, and we‚Äôll cover generics in more detail in Chapter 10.\nFor now, all you need to know is that <code class=\"hljs\">&lt;T&gt;</code> means that the <code class=\"hljs\">Some</code> variant of\nthe <code class=\"hljs\">Option</code> enum can hold one piece of data of any type, and that each\nconcrete type that gets used in place of <code class=\"hljs\">T</code> makes the overall <code class=\"hljs\">Option&lt;T&gt;</code> type\na different type. Here are some examples of using <code class=\"hljs\">Option</code> values to hold\nnumber types and string types:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> some_number = <span class=\"hljs-literal\">Some</span>(<span class=\"hljs-number\">5</span>);\n    <span class=\"hljs-keyword\">let</span> some_char = <span class=\"hljs-literal\">Some</span>(<span class=\"hljs-string\">'e'</span>);\n\n    <span class=\"hljs-keyword\">let</span> absent_number: <span class=\"hljs-built_in\">Option</span>&lt;<span class=\"hljs-built_in\">i32</span>&gt; = <span class=\"hljs-literal\">None</span>;\n<span class=\"boring\">}</span></code></pre></pre>\n<p>The type of <code class=\"hljs\">some_number</code> is <code class=\"hljs\">Option&lt;i32&gt;</code>. The type of <code class=\"hljs\">some_char</code> is\n<code class=\"hljs\">Option&lt;char&gt;</code>, which is a different type. Rust can infer these types because\nwe‚Äôve specified a value inside the <code class=\"hljs\">Some</code> variant. For <code class=\"hljs\">absent_number</code>, Rust\nrequires us to annotate the overall <code class=\"hljs\">Option</code> type: the compiler can‚Äôt infer the\ntype that the corresponding <code class=\"hljs\">Some</code> variant will hold by looking only at a\n<code class=\"hljs\">None</code> value. Here, we tell Rust that we mean for <code class=\"hljs\">absent_number</code> to be of type\n<code class=\"hljs\">Option&lt;i32&gt;</code>.</p>\n<p>When we have a <code class=\"hljs\">Some</code> value, we know that a value is present and the value is\nheld within the <code class=\"hljs\">Some</code>. When we have a <code class=\"hljs\">None</code> value, in some sense it means the\nsame thing as null: we don‚Äôt have a valid value. So why is having <code class=\"hljs\">Option&lt;T&gt;</code>\nany better than having null?</p>\n<p>In short, because <code class=\"hljs\">Option&lt;T&gt;</code> and <code class=\"hljs\">T</code> (where <code class=\"hljs\">T</code> can be any type) are different\ntypes, the compiler won‚Äôt let us use an <code class=\"hljs\">Option&lt;T&gt;</code> value as if it were\ndefinitely a valid value. For example, this code won‚Äôt compile, because it‚Äôs\ntrying to add an <code class=\"hljs\">i8</code> to an <code class=\"hljs\">Option&lt;i8&gt;</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> x: <span class=\"hljs-built_in\">i8</span> = <span class=\"hljs-number\">5</span>;\n    <span class=\"hljs-keyword\">let</span> y: <span class=\"hljs-built_in\">Option</span>&lt;<span class=\"hljs-built_in\">i8</span>&gt; = <span class=\"hljs-literal\">Some</span>(<span class=\"hljs-number\">5</span>);\n\n    <span class=\"hljs-keyword\">let</span> sum = x + y;\n<span class=\"boring\">}</span></code></pre>\n<p>If we run this code, we get an error message like this one:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling enums v0.1.0 (file:///projects/enums)\nerror[E0277]: cannot add `Option&lt;i8&gt;` to `i8`\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/main.rs:5:17</span>\n  |\n5 |     let sum = x + y;\n  |                 ^ no implementation for `i8 + Option&lt;i8&gt;`\n  |\n  = help: the trait `Add&lt;Option&lt;i8&gt;&gt;` is not implemented for `i8`\n  = help: the following other types implement trait `Add&lt;Rhs&gt;`:\n            &lt;i8 as Add&gt;\n            &lt;i8 as Add&lt;&amp;i8&gt;&gt;\n            &lt;&amp;'a i8 as Add&lt;i8&gt;&gt;\n            &lt;&amp;i8 as Add&lt;&amp;i8&gt;&gt;\n\nFor more information about this error, try `rustc --explain E0277`.\nerror: could not compile `enums` (bin \"enums\") due to 1 previous error\n</code></pre>\n<p>Intense! In effect, this error message means that Rust doesn‚Äôt understand how\nto add an <code class=\"hljs\">i8</code> and an <code class=\"hljs\">Option&lt;i8&gt;</code>, because they‚Äôre different types. When we\nhave a value of a type like <code class=\"hljs\">i8</code> in Rust, the compiler will ensure that we\nalways have a valid value. We can proceed confidently without having to check\nfor null before using that value. Only when we have an <code class=\"hljs\">Option&lt;i8&gt;</code> (or\nwhatever type of value we‚Äôre working with) do we have to worry about possibly\nnot having a value, and the compiler will make sure we handle that case before\nusing the value.</p>\n<p>In other words, you have to convert an <code class=\"hljs\">Option&lt;T&gt;</code> to a <code class=\"hljs\">T</code> before you can\nperform <code class=\"hljs\">T</code> operations with it. Generally, this helps catch one of the most\ncommon issues with null: assuming that something isn‚Äôt null when it actually is.</p>\n<p>Eliminating the risk of incorrectly assuming a not-null value helps you to be\nmore confident in your code. In order to have a value that can possibly be\nnull, you must explicitly opt in by making the type of that value <code class=\"hljs\">Option&lt;T&gt;</code>.\nThen, when you use that value, you are required to explicitly handle the case\nwhen the value is null. Everywhere that a value has a type that isn‚Äôt an\n<code class=\"hljs\">Option&lt;T&gt;</code>, you <em>can</em> safely assume that the value isn‚Äôt null. This was a\ndeliberate design decision for Rust to limit null‚Äôs pervasiveness and increase\nthe safety of Rust code.</p>\n<p>So how do you get the <code class=\"hljs\">T</code> value out of a <code class=\"hljs\">Some</code> variant when you have a value\nof type <code class=\"hljs\">Option&lt;T&gt;</code> so that you can use that value? The <code class=\"hljs\">Option&lt;T&gt;</code> enum has a\nlarge number of methods that are useful in a variety of situations; you can\ncheck them out in <a href=\"../std/option/enum.Option.html\">its documentation</a><!-- ignore -->. Becoming familiar\nwith the methods on <code class=\"hljs\">Option&lt;T&gt;</code> will be extremely useful in your journey with\nRust.</p>\n<p>In general, in order to use an <code class=\"hljs\">Option&lt;T&gt;</code> value, you want to have code that\nwill handle each variant. You want some code that will run only when you have a\n<code class=\"hljs\">Some(T)</code> value, and this code is allowed to use the inner <code class=\"hljs\">T</code>. You want some\nother code to run only if you have a <code class=\"hljs\">None</code> value, and that code doesn‚Äôt have a\n<code class=\"hljs\">T</code> value available. The <code class=\"hljs\">match</code> expression is a control flow construct that\ndoes just this when used with enums: it will run different code depending on\nwhich variant of the enum it has, and that code can use the data inside the\nmatching value.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><!-- Old heading. Do not remove or links may break. -->\n<p><a id=\"the-match-control-flow-operator\"></a></p>\n<h2 id=\"the-match-control-flow-construct\"><a class=\"header\" href=\"#the-match-control-flow-construct\">The <code>match</code> Control Flow Construct</a></h2>\n<p>Rust has an extremely powerful control flow construct called <code class=\"hljs\">match</code> that\nallows you to compare a value against a series of patterns and then execute\ncode based on which pattern matches. Patterns can be made up of literal values,\nvariable names, wildcards, and many other things; <a href=\"ch18-00-patterns.html\">Chapter\n18</a><!-- ignore --> covers all the different kinds of patterns\nand what they do. The power of <code class=\"hljs\">match</code> comes from the expressiveness of the\npatterns and the fact that the compiler confirms that all possible cases are\nhandled.</p>\n<p>Think of a <code class=\"hljs\">match</code> expression as being like a coin-sorting machine: coins slide\ndown a track with variously sized holes along it, and each coin falls through\nthe first hole it encounters that it fits into. In the same way, values go\nthrough each pattern in a <code class=\"hljs\">match</code>, and at the first pattern the value ‚Äúfits,‚Äù\nthe value falls into the associated code block to be used during execution.</p>\n<p>Speaking of coins, let‚Äôs use them as an example using <code class=\"hljs\">match</code>! We can write a\nfunction that takes an unknown US coin and, in a similar way as the counting\nmachine, determines which coin it is and returns its value in cents, as shown\nin Listing 6-3.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Coin</span></span> {\n    Penny,\n    Nickel,\n    Dime,\n    Quarter,\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">value_in_cents</span></span>(coin: Coin) -&gt; <span class=\"hljs-built_in\">u8</span> {\n    <span class=\"hljs-keyword\">match</span> coin {\n        Coin::Penny =&gt; <span class=\"hljs-number\">1</span>,\n        Coin::Nickel =&gt; <span class=\"hljs-number\">5</span>,\n        Coin::Dime =&gt; <span class=\"hljs-number\">10</span>,\n        Coin::Quarter =&gt; <span class=\"hljs-number\">25</span>,\n    }\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 6-3: An enum and a <code class=\"hljs\">match</code> expression that has\nthe variants of the enum as its patterns</span></p>\n<p>Let‚Äôs break down the <code class=\"hljs\">match</code> in the <code class=\"hljs\">value_in_cents</code> function. First we list\nthe <code class=\"hljs\">match</code> keyword followed by an expression, which in this case is the value\n<code class=\"hljs\">coin</code>. This seems very similar to a conditional expression used with <code class=\"hljs\">if</code>, but\nthere‚Äôs a big difference: with <code class=\"hljs\">if</code>, the condition needs to evaluate to a\nBoolean value, but here it can be any type. The type of <code class=\"hljs\">coin</code> in this example\nis the <code class=\"hljs\">Coin</code> enum that we defined on the first line.</p>\n<p>Next are the <code class=\"hljs\">match</code> arms. An arm has two parts: a pattern and some code. The\nfirst arm here has a pattern that is the value <code class=\"hljs\">Coin::Penny</code> and then the <code class=\"hljs\">=&gt;</code>\noperator that separates the pattern and the code to run. The code in this case\nis just the value <code class=\"hljs\">1</code>. Each arm is separated from the next with a comma.</p>\n<p>When the <code class=\"hljs\">match</code> expression executes, it compares the resultant value against\nthe pattern of each arm, in order. If a pattern matches the value, the code\nassociated with that pattern is executed. If that pattern doesn‚Äôt match the\nvalue, execution continues to the next arm, much as in a coin-sorting machine.\nWe can have as many arms as we need: in Listing 6-3, our <code class=\"hljs\">match</code> has four arms.</p>\n<p>The code associated with each arm is an expression, and the resultant value of\nthe expression in the matching arm is the value that gets returned for the\nentire <code class=\"hljs\">match</code> expression.</p>\n<p>We don‚Äôt typically use curly brackets if the match arm code is short, as it is\nin Listing 6-3 where each arm just returns a value. If you want to run multiple\nlines of code in a match arm, you must use curly brackets, and the comma\nfollowing the arm is then optional. For example, the following code prints\n‚ÄúLucky penny!‚Äù every time the method is called with a <code class=\"hljs\">Coin::Penny</code>, but still\nreturns the last value of the block, <code class=\"hljs\">1</code>:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Coin</span></span> {\n</span><span class=\"boring\">    Penny,\n</span><span class=\"boring\">    Nickel,\n</span><span class=\"boring\">    Dime,\n</span><span class=\"boring\">    Quarter,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">value_in_cents</span></span>(coin: Coin) -&gt; <span class=\"hljs-built_in\">u8</span> {\n    <span class=\"hljs-keyword\">match</span> coin {\n        Coin::Penny =&gt; {\n            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Lucky penny!\"</span>);\n            <span class=\"hljs-number\">1</span>\n        }\n        Coin::Nickel =&gt; <span class=\"hljs-number\">5</span>,\n        Coin::Dime =&gt; <span class=\"hljs-number\">10</span>,\n        Coin::Quarter =&gt; <span class=\"hljs-number\">25</span>,\n    }\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}</span></code></pre></pre>\n<h3 id=\"patterns-that-bind-to-values\"><a class=\"header\" href=\"#patterns-that-bind-to-values\">Patterns That Bind to Values</a></h3>\n<p>Another useful feature of match arms is that they can bind to the parts of the\nvalues that match the pattern. This is how we can extract values out of enum\nvariants.</p>\n<p>As an example, let‚Äôs change one of our enum variants to hold data inside it.\nFrom 1999 through 2008, the United States minted quarters with different\ndesigns for each of the 50 states on one side. No other coins got state\ndesigns, so only quarters have this extra value. We can add this information to\nour <code class=\"hljs\">enum</code> by changing the <code class=\"hljs\">Quarter</code> variant to include a <code class=\"hljs\">UsState</code> value\nstored inside it, which we‚Äôve done in Listing 6-4.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"hljs-meta\">#[derive(Debug)]</span> <span class=\"hljs-comment\">// so we can inspect the state in a minute</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">UsState</span></span> {\n    Alabama,\n    Alaska,\n    <span class=\"hljs-comment\">// --snip--</span>\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Coin</span></span> {\n    Penny,\n    Nickel,\n    Dime,\n    Quarter(UsState),\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 6-4: A <code class=\"hljs\">Coin</code> enum in which the <code class=\"hljs\">Quarter</code> variant\nalso holds a <code class=\"hljs\">UsState</code> value</span></p>\n<p>Let‚Äôs imagine that a friend is trying to collect all 50 state quarters. While\nwe sort our loose change by coin type, we‚Äôll also call out the name of the\nstate associated with each quarter so that if it‚Äôs one our friend doesn‚Äôt have,\nthey can add it to their collection.</p>\n<p>In the match expression for this code, we add a variable called <code class=\"hljs\">state</code> to the\npattern that matches values of the variant <code class=\"hljs\">Coin::Quarter</code>. When a\n<code class=\"hljs\">Coin::Quarter</code> matches, the <code class=\"hljs\">state</code> variable will bind to the value of that\nquarter‚Äôs state. Then we can use <code class=\"hljs\">state</code> in the code for that arm, like so:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#[derive(Debug)]</span>\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">UsState</span></span> {\n</span><span class=\"boring\">    Alabama,\n</span><span class=\"boring\">    Alaska,\n</span><span class=\"boring\">    <span class=\"hljs-comment\">// --snip--</span>\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Coin</span></span> {\n</span><span class=\"boring\">    Penny,\n</span><span class=\"boring\">    Nickel,\n</span><span class=\"boring\">    Dime,\n</span><span class=\"boring\">    Quarter(UsState),\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">value_in_cents</span></span>(coin: Coin) -&gt; <span class=\"hljs-built_in\">u8</span> {\n    <span class=\"hljs-keyword\">match</span> coin {\n        Coin::Penny =&gt; <span class=\"hljs-number\">1</span>,\n        Coin::Nickel =&gt; <span class=\"hljs-number\">5</span>,\n        Coin::Dime =&gt; <span class=\"hljs-number\">10</span>,\n        Coin::Quarter(state) =&gt; {\n            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"State quarter from {state:?}!\"</span>);\n            <span class=\"hljs-number\">25</span>\n        }\n    }\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    value_in_cents(Coin::Quarter(UsState::Alaska));\n</span><span class=\"boring\">}</span></code></pre></pre>\n<p>If we were to call <code class=\"hljs\">value_in_cents(Coin::Quarter(UsState::Alaska))</code>, <code class=\"hljs\">coin</code>\nwould be <code class=\"hljs\">Coin::Quarter(UsState::Alaska)</code>. When we compare that value with each\nof the match arms, none of them match until we reach <code class=\"hljs\">Coin::Quarter(state)</code>. At\nthat point, the binding for <code class=\"hljs\">state</code> will be the value <code class=\"hljs\">UsState::Alaska</code>. We can\nthen use that binding in the <code class=\"hljs\">println!</code> expression, thus getting the inner\nstate value out of the <code class=\"hljs\">Coin</code> enum variant for <code class=\"hljs\">Quarter</code>.</p>\n<h3 id=\"matching-with-optiont\"><a class=\"header\" href=\"#matching-with-optiont\">Matching with <code>Option&lt;T&gt;</code></a></h3>\n<p>In the previous section, we wanted to get the inner <code class=\"hljs\">T</code> value out of the <code class=\"hljs\">Some</code>\ncase when using <code class=\"hljs\">Option&lt;T&gt;</code>; we can also handle <code class=\"hljs\">Option&lt;T&gt;</code> using <code class=\"hljs\">match</code>, as\nwe did with the <code class=\"hljs\">Coin</code> enum! Instead of comparing coins, we‚Äôll compare the\nvariants of <code class=\"hljs\">Option&lt;T&gt;</code>, but the way the <code class=\"hljs\">match</code> expression works remains the\nsame.</p>\n<p>Let‚Äôs say we want to write a function that takes an <code class=\"hljs\">Option&lt;i32&gt;</code> and, if\nthere‚Äôs a value inside, adds 1 to that value. If there isn‚Äôt a value inside,\nthe function should return the <code class=\"hljs\">None</code> value and not attempt to perform any\noperations.</p>\n<p>This function is very easy to write, thanks to <code class=\"hljs\">match</code>, and will look like\nListing 6-5.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">plus_one</span></span>(x: <span class=\"hljs-built_in\">Option</span>&lt;<span class=\"hljs-built_in\">i32</span>&gt;) -&gt; <span class=\"hljs-built_in\">Option</span>&lt;<span class=\"hljs-built_in\">i32</span>&gt; {\n        <span class=\"hljs-keyword\">match</span> x {\n            <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-literal\">None</span>,\n            <span class=\"hljs-literal\">Some</span>(i) =&gt; <span class=\"hljs-literal\">Some</span>(i + <span class=\"hljs-number\">1</span>),\n        }\n    }\n\n    <span class=\"hljs-keyword\">let</span> five = <span class=\"hljs-literal\">Some</span>(<span class=\"hljs-number\">5</span>);\n    <span class=\"hljs-keyword\">let</span> six = plus_one(five);\n    <span class=\"hljs-keyword\">let</span> none = plus_one(<span class=\"hljs-literal\">None</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 6-5: A function that uses a <code class=\"hljs\">match</code> expression on\nan <code class=\"hljs\">Option&lt;i32&gt;</code></span></p>\n<p>Let‚Äôs examine the first execution of <code class=\"hljs\">plus_one</code> in more detail. When we call\n<code class=\"hljs\">plus_one(five)</code>, the variable <code class=\"hljs\">x</code> in the body of <code class=\"hljs\">plus_one</code> will have the\nvalue <code class=\"hljs\">Some(5)</code>. We then compare that against each match arm:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">plus_one</span></span>(x: <span class=\"hljs-built_in\">Option</span>&lt;<span class=\"hljs-built_in\">i32</span>&gt;) -&gt; <span class=\"hljs-built_in\">Option</span>&lt;<span class=\"hljs-built_in\">i32</span>&gt; {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">match</span> x {\n</span>            <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-literal\">None</span>,\n<span class=\"boring\">            <span class=\"hljs-literal\">Some</span>(i) =&gt; <span class=\"hljs-literal\">Some</span>(i + <span class=\"hljs-number\">1</span>),\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> five = <span class=\"hljs-literal\">Some</span>(<span class=\"hljs-number\">5</span>);\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> six = plus_one(five);\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> none = plus_one(<span class=\"hljs-literal\">None</span>);\n</span><span class=\"boring\">}</span></code></pre>\n<p>The <code class=\"hljs\">Some(5)</code> value doesn‚Äôt match the pattern <code class=\"hljs\">None</code>, so we continue to the\nnext arm:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">plus_one</span></span>(x: <span class=\"hljs-built_in\">Option</span>&lt;<span class=\"hljs-built_in\">i32</span>&gt;) -&gt; <span class=\"hljs-built_in\">Option</span>&lt;<span class=\"hljs-built_in\">i32</span>&gt; {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">match</span> x {\n</span><span class=\"boring\">            <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-literal\">None</span>,\n</span>            <span class=\"hljs-literal\">Some</span>(i) =&gt; <span class=\"hljs-literal\">Some</span>(i + <span class=\"hljs-number\">1</span>),\n<span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> five = <span class=\"hljs-literal\">Some</span>(<span class=\"hljs-number\">5</span>);\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> six = plus_one(five);\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> none = plus_one(<span class=\"hljs-literal\">None</span>);\n</span><span class=\"boring\">}</span></code></pre>\n<p>Does <code class=\"hljs\">Some(5)</code> match <code class=\"hljs\">Some(i)</code>? It does! We have the same variant. The <code class=\"hljs\">i</code>\nbinds to the value contained in <code class=\"hljs\">Some</code>, so <code class=\"hljs\">i</code> takes the value <code class=\"hljs\">5</code>. The code in\nthe match arm is then executed, so we add 1 to the value of <code class=\"hljs\">i</code> and create a\nnew <code class=\"hljs\">Some</code> value with our total <code class=\"hljs\">6</code> inside.</p>\n<p>Now let‚Äôs consider the second call of <code class=\"hljs\">plus_one</code> in Listing 6-5, where <code class=\"hljs\">x</code> is\n<code class=\"hljs\">None</code>. We enter the <code class=\"hljs\">match</code> and compare to the first arm:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">plus_one</span></span>(x: <span class=\"hljs-built_in\">Option</span>&lt;<span class=\"hljs-built_in\">i32</span>&gt;) -&gt; <span class=\"hljs-built_in\">Option</span>&lt;<span class=\"hljs-built_in\">i32</span>&gt; {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">match</span> x {\n</span>            <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-literal\">None</span>,\n<span class=\"boring\">            <span class=\"hljs-literal\">Some</span>(i) =&gt; <span class=\"hljs-literal\">Some</span>(i + <span class=\"hljs-number\">1</span>),\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> five = <span class=\"hljs-literal\">Some</span>(<span class=\"hljs-number\">5</span>);\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> six = plus_one(five);\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> none = plus_one(<span class=\"hljs-literal\">None</span>);\n</span><span class=\"boring\">}</span></code></pre>\n<p>It matches! There‚Äôs no value to add to, so the program stops and returns the\n<code class=\"hljs\">None</code> value on the right side of <code class=\"hljs\">=&gt;</code>. Because the first arm matched, no other\narms are compared.</p>\n<p>Combining <code class=\"hljs\">match</code> and enums is useful in many situations. You‚Äôll see this\npattern a lot in Rust code: <code class=\"hljs\">match</code> against an enum, bind a variable to the\ndata inside, and then execute code based on it. It‚Äôs a bit tricky at first, but\nonce you get used to it, you‚Äôll wish you had it in all languages. It‚Äôs\nconsistently a user favorite.</p>\n<h3 id=\"matches-are-exhaustive\"><a class=\"header\" href=\"#matches-are-exhaustive\">Matches Are Exhaustive</a></h3>\n<p>There‚Äôs one other aspect of <code class=\"hljs\">match</code> we need to discuss: the arms‚Äô patterns must\ncover all possibilities. Consider this version of our <code class=\"hljs\">plus_one</code> function,\nwhich has a bug and won‚Äôt compile:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">plus_one</span></span>(x: <span class=\"hljs-built_in\">Option</span>&lt;<span class=\"hljs-built_in\">i32</span>&gt;) -&gt; <span class=\"hljs-built_in\">Option</span>&lt;<span class=\"hljs-built_in\">i32</span>&gt; {\n        <span class=\"hljs-keyword\">match</span> x {\n            <span class=\"hljs-literal\">Some</span>(i) =&gt; <span class=\"hljs-literal\">Some</span>(i + <span class=\"hljs-number\">1</span>),\n        }\n    }\n<span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> five = <span class=\"hljs-literal\">Some</span>(<span class=\"hljs-number\">5</span>);\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> six = plus_one(five);\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> none = plus_one(<span class=\"hljs-literal\">None</span>);\n</span><span class=\"boring\">}</span></code></pre>\n<p>We didn‚Äôt handle the <code class=\"hljs\">None</code> case, so this code will cause a bug. Luckily, it‚Äôs\na bug Rust knows how to catch. If we try to compile this code, we‚Äôll get this\nerror:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling enums v0.1.0 (file:///projects/enums)\nerror[E0004]: non-exhaustive patterns: `None` not covered\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/main.rs:3:15</span>\n  |\n3 |         match x {\n  |               ^ pattern `None` not covered\n  |\nnote: `Option&lt;i32&gt;` defined here\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> /rustc/9b00956e56009bab2aa15d7bff10916599e3d6d6/library/core/src/option.rs:572:1</span>\n ::: /rustc/9b00956e56009bab2aa15d7bff10916599e3d6d6/library/core/src/option.rs:576:5\n  |\n  = note: not covered\n  = note: the matched value is of type `Option&lt;i32&gt;`\nhelp: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n  |\n4 ~             Some(i) =&gt; Some(i + 1),\n5 ~             None =&gt; todo!(),\n  |\n\nFor more information about this error, try `rustc --explain E0004`.\nerror: could not compile `enums` (bin \"enums\") due to 1 previous error\n</code></pre>\n<p>Rust knows that we didn‚Äôt cover every possible case, and even knows which\npattern we forgot! Matches in Rust are <em>exhaustive</em>: we must exhaust every last\npossibility in order for the code to be valid. Especially in the case of\n<code class=\"hljs\">Option&lt;T&gt;</code>, when Rust prevents us from forgetting to explicitly handle the\n<code class=\"hljs\">None</code> case, it protects us from assuming that we have a value when we might\nhave null, thus making the billion-dollar mistake discussed earlier impossible.</p>\n<h3 id=\"catch-all-patterns-and-the-_-placeholder\"><a class=\"header\" href=\"#catch-all-patterns-and-the-_-placeholder\">Catch-all Patterns and the <code>_</code> Placeholder</a></h3>\n<p>Using enums, we can also take special actions for a few particular values, but\nfor all other values take one default action. Imagine we‚Äôre implementing a game\nwhere, if you roll a 3 on a dice roll, your player doesn‚Äôt move, but instead\ngets a new fancy hat. If you roll a 7, your player loses a fancy hat. For all\nother values, your player moves that number of spaces on the game board. Here‚Äôs\na <code class=\"hljs\">match</code> that implements that logic, with the result of the dice roll\nhardcoded rather than a random value, and all other logic represented by\nfunctions without bodies because actually implementing them is out of scope for\nthis example:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> dice_roll = <span class=\"hljs-number\">9</span>;\n    <span class=\"hljs-keyword\">match</span> dice_roll {\n        <span class=\"hljs-number\">3</span> =&gt; add_fancy_hat(),\n        <span class=\"hljs-number\">7</span> =&gt; remove_fancy_hat(),\n        other =&gt; move_player(other),\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add_fancy_hat</span></span>() {}\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">remove_fancy_hat</span></span>() {}\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">move_player</span></span>(num_spaces: <span class=\"hljs-built_in\">u8</span>) {}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>For the first two arms, the patterns are the literal values <code class=\"hljs\">3</code> and <code class=\"hljs\">7</code>. For\nthe last arm that covers every other possible value, the pattern is the\nvariable we‚Äôve chosen to name <code class=\"hljs\">other</code>. The code that runs for the <code class=\"hljs\">other</code> arm\nuses the variable by passing it to the <code class=\"hljs\">move_player</code> function.</p>\n<p>This code compiles, even though we haven‚Äôt listed all the possible values a\n<code class=\"hljs\">u8</code> can have, because the last pattern will match all values not specifically\nlisted. This catch-all pattern meets the requirement that <code class=\"hljs\">match</code> must be\nexhaustive. Note that we have to put the catch-all arm last because the\npatterns are evaluated in order. If we put the catch-all arm earlier, the other\narms would never run, so Rust will warn us if we add arms after a catch-all!</p>\n<p>Rust also has a pattern we can use when we want a catch-all but don‚Äôt want to\n<em>use</em> the value in the catch-all pattern: <code class=\"hljs\">_</code> is a special pattern that matches\nany value and does not bind to that value. This tells Rust we aren‚Äôt going to\nuse the value, so Rust won‚Äôt warn us about an unused variable.</p>\n<p>Let‚Äôs change the rules of the game: now, if you roll anything other than a 3 or\na 7, you must roll again. We no longer need to use the catch-all value, so we\ncan change our code to use <code class=\"hljs\">_</code> instead of the variable named <code class=\"hljs\">other</code>:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> dice_roll = <span class=\"hljs-number\">9</span>;\n    <span class=\"hljs-keyword\">match</span> dice_roll {\n        <span class=\"hljs-number\">3</span> =&gt; add_fancy_hat(),\n        <span class=\"hljs-number\">7</span> =&gt; remove_fancy_hat(),\n        _ =&gt; reroll(),\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add_fancy_hat</span></span>() {}\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">remove_fancy_hat</span></span>() {}\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">reroll</span></span>() {}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>This example also meets the exhaustiveness requirement because we‚Äôre explicitly\nignoring all other values in the last arm; we haven‚Äôt forgotten anything.</p>\n<p>Finally, we‚Äôll change the rules of the game one more time so that nothing else\nhappens on your turn if you roll anything other than a 3 or a 7. We can express\nthat by using the unit value (the empty tuple type we mentioned in <a href=\"ch03-02-data-types.html#the-tuple-type\">‚ÄúThe Tuple\nType‚Äù</a><!-- ignore --> section) as the code that goes with the <code class=\"hljs\">_</code> arm:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> dice_roll = <span class=\"hljs-number\">9</span>;\n    <span class=\"hljs-keyword\">match</span> dice_roll {\n        <span class=\"hljs-number\">3</span> =&gt; add_fancy_hat(),\n        <span class=\"hljs-number\">7</span> =&gt; remove_fancy_hat(),\n        _ =&gt; (),\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add_fancy_hat</span></span>() {}\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">remove_fancy_hat</span></span>() {}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Here, we‚Äôre telling Rust explicitly that we aren‚Äôt going to use any other value\nthat doesn‚Äôt match a pattern in an earlier arm, and we don‚Äôt want to run any\ncode in this case.</p>\n<p>There‚Äôs more about patterns and matching that we‚Äôll cover in <a href=\"ch18-00-patterns.html\">Chapter\n18</a><!-- ignore -->. For now, we‚Äôre going to move on to the\n<code class=\"hljs\">if let</code> syntax, which can be useful in situations where the <code class=\"hljs\">match</code> expression\nis a bit wordy.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"concise-control-flow-with-if-let\"><a class=\"header\" href=\"#concise-control-flow-with-if-let\">Concise Control Flow with <code>if let</code></a></h2>\n<p>The <code class=\"hljs\">if let</code> syntax lets you combine <code class=\"hljs\">if</code> and <code class=\"hljs\">let</code> into a less verbose way to\nhandle values that match one pattern while ignoring the rest. Consider the\nprogram in Listing 6-6 that matches on an <code class=\"hljs\">Option&lt;u8&gt;</code> value in the\n<code class=\"hljs\">config_max</code> variable but only wants to execute code if the value is the <code class=\"hljs\">Some</code>\nvariant.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> config_max = <span class=\"hljs-literal\">Some</span>(<span class=\"hljs-number\">3u8</span>);\n    <span class=\"hljs-keyword\">match</span> config_max {\n        <span class=\"hljs-literal\">Some</span>(max) =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The maximum is configured to be {max}\"</span>),\n        _ =&gt; (),\n    }\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 6-6: A <code class=\"hljs\">match</code> that only cares about executing\ncode when the value is <code class=\"hljs\">Some</code></span></p>\n<p>If the value is <code class=\"hljs\">Some</code>, we print out the value in the <code class=\"hljs\">Some</code> variant by binding\nthe value to the variable <code class=\"hljs\">max</code> in the pattern. We don‚Äôt want to do anything\nwith the <code class=\"hljs\">None</code> value. To satisfy the <code class=\"hljs\">match</code> expression, we have to add <code class=\"hljs\">_ =&gt; ()</code> after processing just one variant, which is annoying boilerplate code to\nadd.</p>\n<p>Instead, we could write this in a shorter way using <code class=\"hljs\">if let</code>. The following\ncode behaves the same as the <code class=\"hljs\">match</code> in Listing 6-6:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> config_max = <span class=\"hljs-literal\">Some</span>(<span class=\"hljs-number\">3u8</span>);\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-literal\">Some</span>(max) = config_max {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The maximum is configured to be {max}\"</span>);\n    }\n<span class=\"boring\">}</span></code></pre></pre>\n<p>The syntax <code class=\"hljs\">if let</code> takes a pattern and an expression separated by an equal\nsign. It works the same way as a <code class=\"hljs\">match</code>, where the expression is given to the\n<code class=\"hljs\">match</code> and the pattern is its first arm. In this case, the pattern is\n<code class=\"hljs\">Some(max)</code>, and the <code class=\"hljs\">max</code> binds to the value inside the <code class=\"hljs\">Some</code>. We can then\nuse <code class=\"hljs\">max</code> in the body of the <code class=\"hljs\">if let</code> block in the same way we used <code class=\"hljs\">max</code> in\nthe corresponding <code class=\"hljs\">match</code> arm. The code in the <code class=\"hljs\">if let</code> block isn‚Äôt run if the\nvalue doesn‚Äôt match the pattern.</p>\n<p>Using <code class=\"hljs\">if let</code> means less typing, less indentation, and less boilerplate code.\nHowever, you lose the exhaustive checking that <code class=\"hljs\">match</code> enforces. Choosing\nbetween <code class=\"hljs\">match</code> and <code class=\"hljs\">if let</code> depends on what you‚Äôre doing in your particular\nsituation and whether gaining conciseness is an appropriate trade-off for\nlosing exhaustive checking.</p>\n<p>In other words, you can think of <code class=\"hljs\">if let</code> as syntax sugar for a <code class=\"hljs\">match</code> that\nruns code when the value matches one pattern and then ignores all other values.</p>\n<p>We can include an <code class=\"hljs\">else</code> with an <code class=\"hljs\">if let</code>. The block of code that goes with the\n<code class=\"hljs\">else</code> is the same as the block of code that would go with the <code class=\"hljs\">_</code> case in the\n<code class=\"hljs\">match</code> expression that is equivalent to the <code class=\"hljs\">if let</code> and <code class=\"hljs\">else</code>. Recall the\n<code class=\"hljs\">Coin</code> enum definition in Listing 6-4, where the <code class=\"hljs\">Quarter</code> variant also held a\n<code class=\"hljs\">UsState</code> value. If we wanted to count all non-quarter coins we see while also\nannouncing the state of the quarters, we could do that with a <code class=\"hljs\">match</code>\nexpression, like this:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#[derive(Debug)]</span>\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">UsState</span></span> {\n</span><span class=\"boring\">    Alabama,\n</span><span class=\"boring\">    Alaska,\n</span><span class=\"boring\">    <span class=\"hljs-comment\">// --snip--</span>\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Coin</span></span> {\n</span><span class=\"boring\">    Penny,\n</span><span class=\"boring\">    Nickel,\n</span><span class=\"boring\">    Dime,\n</span><span class=\"boring\">    Quarter(UsState),\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> coin = Coin::Penny;\n</span>    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> count = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">match</span> coin {\n        Coin::Quarter(state) =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"State quarter from {state:?}!\"</span>),\n        _ =&gt; count += <span class=\"hljs-number\">1</span>,\n    }\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Or we could use an <code class=\"hljs\">if let</code> and <code class=\"hljs\">else</code> expression, like this:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#[derive(Debug)]</span>\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">UsState</span></span> {\n</span><span class=\"boring\">    Alabama,\n</span><span class=\"boring\">    Alaska,\n</span><span class=\"boring\">    <span class=\"hljs-comment\">// --snip--</span>\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Coin</span></span> {\n</span><span class=\"boring\">    Penny,\n</span><span class=\"boring\">    Nickel,\n</span><span class=\"boring\">    Dime,\n</span><span class=\"boring\">    Quarter(UsState),\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> coin = Coin::Penny;\n</span>    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> count = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> Coin::Quarter(state) = coin {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"State quarter from {state:?}!\"</span>);\n    } <span class=\"hljs-keyword\">else</span> {\n        count += <span class=\"hljs-number\">1</span>;\n    }\n<span class=\"boring\">}</span></code></pre></pre>\n<p>If you have a situation in which your program has logic that is too verbose to\nexpress using a <code class=\"hljs\">match</code>, remember that <code class=\"hljs\">if let</code> is in your Rust toolbox as well.</p>\n<h2 id=\"summary-5\"><a class=\"header\" href=\"#summary-5\">Summary</a></h2>\n<p>We‚Äôve now covered how to use enums to create custom types that can be one of a\nset of enumerated values. We‚Äôve shown how the standard library‚Äôs <code class=\"hljs\">Option&lt;T&gt;</code>\ntype helps you use the type system to prevent errors. When enum values have\ndata inside them, you can use <code class=\"hljs\">match</code> or <code class=\"hljs\">if let</code> to extract and use those\nvalues, depending on how many cases you need to handle.</p>\n<p>Your Rust programs can now express concepts in your domain using structs and\nenums. Creating custom types to use in your API ensures type safety: the\ncompiler will make certain your functions only get values of the type each\nfunction expects.</p>\n<p>In order to provide a well-organized API to your users that is straightforward\nto use and only exposes exactly what your users will need, let‚Äôs now turn to\nRust‚Äôs modules.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"managing-growing-projects-with-packages-crates-and-modules\"><a class=\"header\" href=\"#managing-growing-projects-with-packages-crates-and-modules\">Managing Growing Projects with Packages, Crates, and Modules</a></h1>\n<p>As you write large programs, organizing your code will become increasingly\nimportant. By grouping related functionality and separating code with distinct\nfeatures, you‚Äôll clarify where to find code that implements a particular\nfeature and where to go to change how a feature works.</p>\n<p>The programs we‚Äôve written so far have been in one module in one file. As a\nproject grows, you should organize code by splitting it into multiple modules\nand then multiple files. A package can contain multiple binary crates and\noptionally one library crate. As a package grows, you can extract parts into\nseparate crates that become external dependencies. This chapter covers all\nthese techniques. For very large projects comprising a set of interrelated\npackages that evolve together, Cargo provides <em>workspaces</em>, which we‚Äôll cover\nin the <a href=\"ch14-03-cargo-workspaces.html\">‚ÄúCargo Workspaces‚Äù</a><!-- ignore --> section in Chapter 14.</p>\n<p>We‚Äôll also discuss encapsulating implementation details, which lets you reuse\ncode at a higher level: once you‚Äôve implemented an operation, other code can\ncall your code via its public interface without having to know how the\nimplementation works. The way you write code defines which parts are public for\nother code to use and which parts are private implementation details that you\nreserve the right to change. This is another way to limit the amount of detail\nyou have to keep in your head.</p>\n<p>A related concept is scope: the nested context in which code is written has a\nset of names that are defined as ‚Äúin scope.‚Äù When reading, writing, and\ncompiling code, programmers and compilers need to know whether a particular\nname at a particular spot refers to a variable, function, struct, enum, module,\nconstant, or other item and what that item means. You can create scopes and\nchange which names are in or out of scope. You can‚Äôt have two items with the\nsame name in the same scope; tools are available to resolve name conflicts.</p>\n<p>Rust has a number of features that allow you to manage your code‚Äôs\norganization, including which details are exposed, which details are private,\nand what names are in each scope in your programs. These features, sometimes\ncollectively referred to as the <em>module system</em>, include:</p>\n<ul>\n<li><strong>Packages:</strong> A Cargo feature that lets you build, test, and share crates</li>\n<li><strong>Crates:</strong> A tree of modules that produces a library or executable</li>\n<li><strong>Modules</strong> and <strong>use:</strong> Let you control the organization, scope, and\nprivacy of paths</li>\n<li><strong>Paths:</strong> A way of naming an item, such as a struct, function, or module</li>\n</ul>\n<p>In this chapter, we‚Äôll cover all these features, discuss how they interact, and\nexplain how to use them to manage scope. By the end, you should have a solid\nunderstanding of the module system and be able to work with scopes like a pro!</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"packages-and-crates\"><a class=\"header\" href=\"#packages-and-crates\">Packages and Crates</a></h2>\n<p>The first parts of the module system we‚Äôll cover are packages and crates.</p>\n<p>A <em>crate</em> is the smallest amount of code that the Rust compiler considers at a\ntime. Even if you run <code class=\"hljs\">rustc</code> rather than <code class=\"hljs\">cargo</code> and pass a single source code\nfile (as we did all the way back in the ‚ÄúWriting and Running a Rust Program‚Äù\nsection of Chapter 1), the compiler considers that file to be a crate. Crates\ncan contain modules, and the modules may be defined in other files that get\ncompiled with the crate, as we‚Äôll see in the coming sections.</p>\n<p>A crate can come in one of two forms: a binary crate or a library crate.\n<em>Binary crates</em> are programs you can compile to an executable that you can run,\nsuch as a command-line program or a server. Each must have a function called\n<code class=\"hljs\">main</code> that defines what happens when the executable runs. All the crates we‚Äôve\ncreated so far have been binary crates.</p>\n<p><em>Library crates</em> don‚Äôt have a <code class=\"hljs\">main</code> function, and they don‚Äôt compile to an\nexecutable. Instead, they define functionality intended to be shared with\nmultiple projects. For example, the <code class=\"hljs\">rand</code> crate we used in <a href=\"ch02-00-guessing-game-tutorial.html#generating-a-random-number\">Chapter\n2</a><!-- ignore --> provides functionality that generates random numbers.\nMost of the time when Rustaceans say ‚Äúcrate‚Äù, they mean library crate, and they\nuse ‚Äúcrate‚Äù interchangeably with the general programming concept of a ‚Äúlibrary‚Äú.</p>\n<p>The <em>crate root</em> is a source file that the Rust compiler starts from and makes\nup the root module of your crate (we‚Äôll explain modules in depth in the\n<a href=\"ch07-02-defining-modules-to-control-scope-and-privacy.html\">‚ÄúDefining Modules to Control Scope and Privacy‚Äù</a><!-- ignore -->\nsection).</p>\n<p>A <em>package</em> is a bundle of one or more crates that provides a set of\nfunctionality. A package contains a <em>Cargo.toml</em> file that describes how to\nbuild those crates. Cargo is actually a package that contains the binary crate\nfor the command-line tool you‚Äôve been using to build your code. The Cargo\npackage also contains a library crate that the binary crate depends on. Other\nprojects can depend on the Cargo library crate to use the same logic the Cargo\ncommand-line tool uses.</p>\n<p>A crate can come in one of two forms: a binary crate or a library crate. A\npackage can contain as many binary crates as you like, but at most only one\nlibrary crate. A package must contain at least one crate, whether that‚Äôs a\nlibrary or binary crate.</p>\n<p>Let‚Äôs walk through what happens when we create a package. First we enter the\ncommand <code class=\"hljs\">cargo new my-project</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo new my-project</span>\n     Created binary (application) `my-project` package\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> ls my-project</span>\nCargo.toml\nsrc\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> ls my-project/src</span>\nmain.rs\n</code></pre>\n<p>After we run <code class=\"hljs\">cargo new my-project</code>, we use <code class=\"hljs\">ls</code> to see what Cargo creates. In\nthe project directory, there‚Äôs a <em>Cargo.toml</em> file, giving us a package.\nThere‚Äôs also a <em>src</em> directory that contains <em>main.rs</em>. Open <em>Cargo.toml</em> in\nyour text editor, and note there‚Äôs no mention of <em>src/main.rs</em>. Cargo follows a\nconvention that <em>src/main.rs</em> is the crate root of a binary crate with the same\nname as the package. Likewise, Cargo knows that if the package directory\ncontains <em>src/lib.rs</em>, the package contains a library crate with the same name\nas the package, and <em>src/lib.rs</em> is its crate root. Cargo passes the crate root\nfiles to <code class=\"hljs\">rustc</code> to build the library or binary.</p>\n<p>Here, we have a package that only contains <em>src/main.rs</em>, meaning it only\ncontains a binary crate named <code class=\"hljs\">my-project</code>. If a package contains <em>src/main.rs</em>\nand <em>src/lib.rs</em>, it has two crates: a binary and a library, both with the same\nname as the package. A package can have multiple binary crates by placing files\nin the <em>src/bin</em> directory: each file will be a separate binary crate.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"defining-modules-to-control-scope-and-privacy\"><a class=\"header\" href=\"#defining-modules-to-control-scope-and-privacy\">Defining Modules to Control Scope and Privacy</a></h2>\n<p>In this section, we‚Äôll talk about modules and other parts of the module system,\nnamely <em>paths</em>, which allow you to name items; the <code class=\"hljs\">use</code> keyword that brings a\npath into scope; and the <code class=\"hljs\">pub</code> keyword to make items public. We‚Äôll also discuss\nthe <code class=\"hljs\">as</code> keyword, external packages, and the glob operator.</p>\n<h3 id=\"modules-cheat-sheet\"><a class=\"header\" href=\"#modules-cheat-sheet\">Modules Cheat Sheet</a></h3>\n<p>Before we get to the details of modules and paths, here we provide a quick\nreference on how modules, paths, the <code class=\"hljs\">use</code> keyword, and the <code class=\"hljs\">pub</code> keyword work\nin the compiler, and how most developers organize their code. We‚Äôll be going\nthrough examples of each of these rules throughout this chapter, but this is a\ngreat place to refer to as a reminder of how modules work.</p>\n<ul>\n<li><strong>Start from the crate root</strong>: When compiling a crate, the compiler first\nlooks in the crate root file (usually <em>src/lib.rs</em> for a library crate or\n<em>src/main.rs</em> for a binary crate) for code to compile.</li>\n<li><strong>Declaring modules</strong>: In the crate root file, you can declare new modules;\nsay you declare a ‚Äúgarden‚Äù module with <code class=\"hljs\">mod garden;</code>. The compiler will look\nfor the module‚Äôs code in these places:\n<ul>\n<li>Inline, within curly brackets that replace the semicolon following <code class=\"hljs\">mod garden</code></li>\n<li>In the file <em>src/garden.rs</em></li>\n<li>In the file <em>src/garden/mod.rs</em></li>\n</ul>\n</li>\n<li><strong>Declaring submodules</strong>: In any file other than the crate root, you can\ndeclare submodules. For example, you might declare <code class=\"hljs\">mod vegetables;</code> in\n<em>src/garden.rs</em>. The compiler will look for the submodule‚Äôs code within the\ndirectory named for the parent module in these places:\n<ul>\n<li>Inline, directly following <code class=\"hljs\">mod vegetables</code>, within curly brackets instead\nof the semicolon</li>\n<li>In the file <em>src/garden/vegetables.rs</em></li>\n<li>In the file <em>src/garden/vegetables/mod.rs</em></li>\n</ul>\n</li>\n<li><strong>Paths to code in modules</strong>: Once a module is part of your crate, you can\nrefer to code in that module from anywhere else in that same crate, as long\nas the privacy rules allow, using the path to the code. For example, an\n<code class=\"hljs\">Asparagus</code> type in the garden vegetables module would be found at\n<code class=\"hljs\">crate::garden::vegetables::Asparagus</code>.</li>\n<li><strong>Private vs. public</strong>: Code within a module is private from its parent\nmodules by default. To make a module public, declare it with <code class=\"hljs\">pub mod</code>\ninstead of <code class=\"hljs\">mod</code>. To make items within a public module public as well, use\n<code class=\"hljs\">pub</code> before their declarations.</li>\n<li><strong>The <code class=\"hljs\">use</code> keyword</strong>: Within a scope, the <code class=\"hljs\">use</code> keyword creates shortcuts to\nitems to reduce repetition of long paths. In any scope that can refer to\n<code class=\"hljs\">crate::garden::vegetables::Asparagus</code>, you can create a shortcut with <code class=\"hljs\">use crate::garden::vegetables::Asparagus;</code> and from then on you only need to\nwrite <code class=\"hljs\">Asparagus</code> to make use of that type in the scope.</li>\n</ul>\n<p>Here, we create a binary crate named <code class=\"hljs\">backyard</code> that illustrates these rules.\nThe crate‚Äôs directory, also named <code class=\"hljs\">backyard</code>, contains these files and\ndirectories:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">backyard\n‚îú‚îÄ‚îÄ Cargo.lock\n‚îú‚îÄ‚îÄ Cargo.toml\n‚îî‚îÄ‚îÄ src\n    ‚îú‚îÄ‚îÄ garden\n    ‚îÇ&nbsp;&nbsp; ‚îî‚îÄ‚îÄ vegetables.rs\n    ‚îú‚îÄ‚îÄ garden.rs\n    ‚îî‚îÄ‚îÄ main.rs\n</code></pre>\n<p>The crate root file in this case is <em>src/main.rs</em>, and it contains:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust noplayground ignore hljs\"><span class=\"hljs-keyword\">use</span> crate::garden::vegetables::Asparagus;\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">mod</span> garden;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> plant = Asparagus {};\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"I'm growing {plant:?}!\"</span>);\n}</code></pre>\n<p>The <code class=\"hljs\">pub mod garden;</code> line tells the compiler to include the code it finds in\n<em>src/garden.rs</em>, which is:</p>\n<p><span class=\"filename\">Filename: src/garden.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust noplayground ignore hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">mod</span> vegetables;</code></pre>\n<p>Here, <code class=\"hljs\">pub mod vegetables;</code> means the code in <em>src/garden/vegetables.rs</em> is\nincluded too. That code is:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust noplayground ignore hljs\"><span class=\"hljs-meta\">#[derive(Debug)]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Asparagus</span></span> {}</code></pre>\n<p>Now let‚Äôs get into the details of these rules and demonstrate them in action!</p>\n<h3 id=\"grouping-related-code-in-modules\"><a class=\"header\" href=\"#grouping-related-code-in-modules\">Grouping Related Code in Modules</a></h3>\n<p><em>Modules</em> let us organize code within a crate for readability and easy reuse.\nModules also allow us to control the <em>privacy</em> of items because code within a\nmodule is private by default. Private items are internal implementation details\nnot available for outside use. We can choose to make modules and the items\nwithin them public, which exposes them to allow external code to use and depend\non them.</p>\n<p>As an example, let‚Äôs write a library crate that provides the functionality of a\nrestaurant. We‚Äôll define the signatures of functions but leave their bodies\nempty to concentrate on the organization of the code rather than the\nimplementation of a restaurant.</p>\n<p>In the restaurant industry, some parts of a restaurant are referred to as\n<em>front of house</em> and others as <em>back of house</em>. Front of house is where\ncustomers are; this encompasses where the hosts seat customers, servers take\norders and payment, and bartenders make drinks. Back of house is where the\nchefs and cooks work in the kitchen, dishwashers clean up, and managers do\nadministrative work.</p>\n<p>To structure our crate in this way, we can organize its functions into nested\nmodules. Create a new library named <code class=\"hljs\">restaurant</code> by running <code class=\"hljs\">cargo new restaurant --lib</code>. Then enter the code in Listing 7-1 into <em>src/lib.rs</em> to\ndefine some modules and function signatures; this code is the front of house\nsection.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust noplayground hljs\"><span class=\"hljs-keyword\">mod</span> front_of_house {\n    <span class=\"hljs-keyword\">mod</span> hosting {\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add_to_waitlist</span></span>() {}\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">seat_at_table</span></span>() {}\n    }\n\n    <span class=\"hljs-keyword\">mod</span> serving {\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">take_order</span></span>() {}\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">serve_order</span></span>() {}\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">take_payment</span></span>() {}\n    }\n}</code></pre>\n<p><span class=\"caption\">Listing 7-1: A <code class=\"hljs\">front_of_house</code> module containing other\nmodules that then contain functions</span></p>\n<p>We define a module with the <code class=\"hljs\">mod</code> keyword followed by the name of the module\n(in this case, <code class=\"hljs\">front_of_house</code>). The body of the module then goes inside curly\nbrackets. Inside modules, we can place other modules, as in this case with the\nmodules <code class=\"hljs\">hosting</code> and <code class=\"hljs\">serving</code>. Modules can also hold definitions for other\nitems, such as structs, enums, constants, traits, and‚Äîas in Listing\n7-1‚Äîfunctions.</p>\n<p>By using modules, we can group related definitions together and name why\nthey‚Äôre related. Programmers using this code can navigate the code based on the\ngroups rather than having to read through all the definitions, making it easier\nto find the definitions relevant to them. Programmers adding new functionality\nto this code would know where to place the code to keep the program organized.</p>\n<p>Earlier, we mentioned that <em>src/main.rs</em> and <em>src/lib.rs</em> are called crate\nroots. The reason for their name is that the contents of either of these two\nfiles form a module named <code class=\"hljs\">crate</code> at the root of the crate‚Äôs module structure,\nknown as the <em>module tree</em>.</p>\n<p>Listing 7-2 shows the module tree for the structure in Listing 7-1.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">crate\n ‚îî‚îÄ‚îÄ front_of_house\n     ‚îú‚îÄ‚îÄ hosting\n     ‚îÇ   ‚îú‚îÄ‚îÄ add_to_waitlist\n     ‚îÇ   ‚îî‚îÄ‚îÄ seat_at_table\n     ‚îî‚îÄ‚îÄ serving\n         ‚îú‚îÄ‚îÄ take_order\n         ‚îú‚îÄ‚îÄ serve_order\n         ‚îî‚îÄ‚îÄ take_payment\n</code></pre>\n<p><span class=\"caption\">Listing 7-2: The module tree for the code in Listing\n7-1</span></p>\n<p>This tree shows how some of the modules nest inside other modules; for example,\n<code class=\"hljs\">hosting</code> nests inside <code class=\"hljs\">front_of_house</code>. The tree also shows that some modules\nare <em>siblings</em>, meaning they‚Äôre defined in the same module; <code class=\"hljs\">hosting</code> and\n<code class=\"hljs\">serving</code> are siblings defined within <code class=\"hljs\">front_of_house</code>. If module A is\ncontained inside module B, we say that module A is the <em>child</em> of module B and\nthat module B is the <em>parent</em> of module A. Notice that the entire module tree\nis rooted under the implicit module named <code class=\"hljs\">crate</code>.</p>\n<p>The module tree might remind you of the filesystem‚Äôs directory tree on your\ncomputer; this is a very apt comparison! Just like directories in a filesystem,\nyou use modules to organize your code. And just like files in a directory, we\nneed a way to find our modules.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"paths-for-referring-to-an-item-in-the-module-tree\"><a class=\"header\" href=\"#paths-for-referring-to-an-item-in-the-module-tree\">Paths for Referring to an Item in the Module Tree</a></h2>\n<p>To show Rust where to find an item in a module tree, we use a path in the same\nway we use a path when navigating a filesystem. To call a function, we need to\nknow its path.</p>\n<p>A path can take two forms:</p>\n<ul>\n<li>An <em>absolute path</em> is the full path starting from a crate root; for code\nfrom an external crate, the absolute path begins with the crate name, and for\ncode from the current crate, it starts with the literal <code class=\"hljs\">crate</code>.</li>\n<li>A <em>relative path</em> starts from the current module and uses <code class=\"hljs\">self</code>, <code class=\"hljs\">super</code>, or\nan identifier in the current module.</li>\n</ul>\n<p>Both absolute and relative paths are followed by one or more identifiers\nseparated by double colons (<code class=\"hljs\">::</code>).</p>\n<p>Returning to Listing 7-1, say we want to call the <code class=\"hljs\">add_to_waitlist</code> function.\nThis is the same as asking: what‚Äôs the path of the <code class=\"hljs\">add_to_waitlist</code> function?\nListing 7-3 contains Listing 7-1 with some of the modules and functions\nremoved.</p>\n<p>We‚Äôll show two ways to call the <code class=\"hljs\">add_to_waitlist</code> function from a new function,\n<code class=\"hljs\">eat_at_restaurant</code>, defined in the crate root. These paths are correct, but\nthere‚Äôs another problem remaining that will prevent this example from compiling\nas is. We‚Äôll explain why in a bit.</p>\n<p>The <code class=\"hljs\">eat_at_restaurant</code> function is part of our library crate‚Äôs public API, so\nwe mark it with the <code class=\"hljs\">pub</code> keyword. In the <a href=\"ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html#exposing-paths-with-the-pub-keyword\">‚ÄúExposing Paths with the <code class=\"hljs\">pub</code>\nKeyword‚Äù</a><!-- ignore --> section, we‚Äôll go into more detail about <code class=\"hljs\">pub</code>.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs\"><span class=\"hljs-keyword\">mod</span> front_of_house {\n    <span class=\"hljs-keyword\">mod</span> hosting {\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add_to_waitlist</span></span>() {}\n    }\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">eat_at_restaurant</span></span>() {\n    <span class=\"hljs-comment\">// Absolute path</span>\n    crate::front_of_house::hosting::add_to_waitlist();\n\n    <span class=\"hljs-comment\">// Relative path</span>\n    front_of_house::hosting::add_to_waitlist();\n}</code></pre>\n<p><span class=\"caption\">Listing 7-3: Calling the <code class=\"hljs\">add_to_waitlist</code> function using\nabsolute and relative paths</span></p>\n<p>The first time we call the <code class=\"hljs\">add_to_waitlist</code> function in <code class=\"hljs\">eat_at_restaurant</code>,\nwe use an absolute path. The <code class=\"hljs\">add_to_waitlist</code> function is defined in the same\ncrate as <code class=\"hljs\">eat_at_restaurant</code>, which means we can use the <code class=\"hljs\">crate</code> keyword to\nstart an absolute path. We then include each of the successive modules until we\nmake our way to <code class=\"hljs\">add_to_waitlist</code>. You can imagine a filesystem with the same\nstructure: we‚Äôd specify the path <code class=\"hljs\">/front_of_house/hosting/add_to_waitlist</code> to\nrun the <code class=\"hljs\">add_to_waitlist</code> program; using the <code class=\"hljs\">crate</code> name to start from the\ncrate root is like using <code class=\"hljs\">/</code> to start from the filesystem root in your shell.</p>\n<p>The second time we call <code class=\"hljs\">add_to_waitlist</code> in <code class=\"hljs\">eat_at_restaurant</code>, we use a\nrelative path. The path starts with <code class=\"hljs\">front_of_house</code>, the name of the module\ndefined at the same level of the module tree as <code class=\"hljs\">eat_at_restaurant</code>. Here the\nfilesystem equivalent would be using the path\n<code class=\"hljs\">front_of_house/hosting/add_to_waitlist</code>. Starting with a module name means\nthat the path is relative.</p>\n<p>Choosing whether to use a relative or absolute path is a decision you‚Äôll make\nbased on your project, and it depends on whether you‚Äôre more likely to move\nitem definition code separately from or together with the code that uses the\nitem. For example, if we moved the <code class=\"hljs\">front_of_house</code> module and the\n<code class=\"hljs\">eat_at_restaurant</code> function into a module named <code class=\"hljs\">customer_experience</code>, we‚Äôd\nneed to update the absolute path to <code class=\"hljs\">add_to_waitlist</code>, but the relative path\nwould still be valid. However, if we moved the <code class=\"hljs\">eat_at_restaurant</code> function\nseparately into a module named <code class=\"hljs\">dining</code>, the absolute path to the\n<code class=\"hljs\">add_to_waitlist</code> call would stay the same, but the relative path would need to\nbe updated. Our preference in general is to specify absolute paths because it‚Äôs\nmore likely we‚Äôll want to move code definitions and item calls independently of\neach other.</p>\n<p>Let‚Äôs try to compile Listing 7-3 and find out why it won‚Äôt compile yet! The\nerrors we get are shown in Listing 7-4.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo build</span>\n   Compiling restaurant v0.1.0 (file:///projects/restaurant)\nerror[E0603]: module `hosting` is private\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/lib.rs:9:28</span>\n  |\n9 |     crate::front_of_house::hosting::add_to_waitlist();\n  |                            ^^^^^^^  --------------- function `add_to_waitlist` is not publicly re-exported\n  |                            |\n  |                            private module\n  |\nnote: the module `hosting` is defined here\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/lib.rs:2:5</span>\n  |\n2 |     mod hosting {\n  |     ^^^^^^^^^^^\n\nerror[E0603]: module `hosting` is private\n<span class=\"hljs-meta\">  --&gt;</span><span class=\"bash\"> src/lib.rs:12:21</span>\n   |\n12 |     front_of_house::hosting::add_to_waitlist();\n   |                     ^^^^^^^  --------------- function `add_to_waitlist` is not publicly re-exported\n   |                     |\n   |                     private module\n   |\nnote: the module `hosting` is defined here\n<span class=\"hljs-meta\">  --&gt;</span><span class=\"bash\"> src/lib.rs:2:5</span>\n   |\n2  |     mod hosting {\n   |     ^^^^^^^^^^^\n\nFor more information about this error, try `rustc --explain E0603`.\nerror: could not compile `restaurant` (lib) due to 2 previous errors\n</code></pre>\n<p><span class=\"caption\">Listing 7-4: Compiler errors from building the code in\nListing 7-3</span></p>\n<p>The error messages say that module <code class=\"hljs\">hosting</code> is private. In other words, we\nhave the correct paths for the <code class=\"hljs\">hosting</code> module and the <code class=\"hljs\">add_to_waitlist</code>\nfunction, but Rust won‚Äôt let us use them because it doesn‚Äôt have access to the\nprivate sections. In Rust, all items (functions, methods, structs, enums,\nmodules, and constants) are private to parent modules by default. If you want\nto make an item like a function or struct private, you put it in a module.</p>\n<p>Items in a parent module can‚Äôt use the private items inside child modules, but\nitems in child modules can use the items in their ancestor modules. This is\nbecause child modules wrap and hide their implementation details, but the child\nmodules can see the context in which they‚Äôre defined. To continue with our\nmetaphor, think of the privacy rules as being like the back office of a\nrestaurant: what goes on in there is private to restaurant customers, but\noffice managers can see and do everything in the restaurant they operate.</p>\n<p>Rust chose to have the module system function this way so that hiding inner\nimplementation details is the default. That way, you know which parts of the\ninner code you can change without breaking outer code. However, Rust does give\nyou the option to expose inner parts of child modules‚Äô code to outer ancestor\nmodules by using the <code class=\"hljs\">pub</code> keyword to make an item public.</p>\n<h3 id=\"exposing-paths-with-the-pub-keyword\"><a class=\"header\" href=\"#exposing-paths-with-the-pub-keyword\">Exposing Paths with the <code>pub</code> Keyword</a></h3>\n<p>Let‚Äôs return to the error in Listing 7-4 that told us the <code class=\"hljs\">hosting</code> module is\nprivate. We want the <code class=\"hljs\">eat_at_restaurant</code> function in the parent module to have\naccess to the <code class=\"hljs\">add_to_waitlist</code> function in the child module, so we mark the\n<code class=\"hljs\">hosting</code> module with the <code class=\"hljs\">pub</code> keyword, as shown in Listing 7-5.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs\"><span class=\"hljs-keyword\">mod</span> front_of_house {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">mod</span> hosting {\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add_to_waitlist</span></span>() {}\n    }\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">eat_at_restaurant</span></span>() {\n    <span class=\"hljs-comment\">// Absolute path</span>\n    crate::front_of_house::hosting::add_to_waitlist();\n\n    <span class=\"hljs-comment\">// Relative path</span>\n    front_of_house::hosting::add_to_waitlist();\n}</code></pre>\n<p><span class=\"caption\">Listing 7-5: Declaring the <code class=\"hljs\">hosting</code> module as <code class=\"hljs\">pub</code> to\nuse it from <code class=\"hljs\">eat_at_restaurant</code></span></p>\n<p>Unfortunately, the code in Listing 7-5 still results in compiler errors, as\nshown in Listing 7-6.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo build</span>\n   Compiling restaurant v0.1.0 (file:///projects/restaurant)\nerror[E0603]: function `add_to_waitlist` is private\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/lib.rs:9:37</span>\n  |\n9 |     crate::front_of_house::hosting::add_to_waitlist();\n  |                                     ^^^^^^^^^^^^^^^ private function\n  |\nnote: the function `add_to_waitlist` is defined here\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/lib.rs:3:9</span>\n  |\n3 |         fn add_to_waitlist() {}\n  |         ^^^^^^^^^^^^^^^^^^^^\n\nerror[E0603]: function `add_to_waitlist` is private\n<span class=\"hljs-meta\">  --&gt;</span><span class=\"bash\"> src/lib.rs:12:30</span>\n   |\n12 |     front_of_house::hosting::add_to_waitlist();\n   |                              ^^^^^^^^^^^^^^^ private function\n   |\nnote: the function `add_to_waitlist` is defined here\n<span class=\"hljs-meta\">  --&gt;</span><span class=\"bash\"> src/lib.rs:3:9</span>\n   |\n3  |         fn add_to_waitlist() {}\n   |         ^^^^^^^^^^^^^^^^^^^^\n\nFor more information about this error, try `rustc --explain E0603`.\nerror: could not compile `restaurant` (lib) due to 2 previous errors\n</code></pre>\n<p><span class=\"caption\">Listing 7-6: Compiler errors from building the code in\nListing 7-5</span></p>\n<p>What happened? Adding the <code class=\"hljs\">pub</code> keyword in front of <code class=\"hljs\">mod hosting</code> makes the\nmodule public. With this change, if we can access <code class=\"hljs\">front_of_house</code>, we can\naccess <code class=\"hljs\">hosting</code>. But the <em>contents</em> of <code class=\"hljs\">hosting</code> are still private; making the\nmodule public doesn‚Äôt make its contents public. The <code class=\"hljs\">pub</code> keyword on a module\nonly lets code in its ancestor modules refer to it, not access its inner code.\nBecause modules are containers, there‚Äôs not much we can do by only making the\nmodule public; we need to go further and choose to make one or more of the\nitems within the module public as well.</p>\n<p>The errors in Listing 7-6 say that the <code class=\"hljs\">add_to_waitlist</code> function is private.\nThe privacy rules apply to structs, enums, functions, and methods as well as\nmodules.</p>\n<p>Let‚Äôs also make the <code class=\"hljs\">add_to_waitlist</code> function public by adding the <code class=\"hljs\">pub</code>\nkeyword before its definition, as in Listing 7-7.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust noplayground test_harness hljs\"><span class=\"hljs-keyword\">mod</span> front_of_house {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">mod</span> hosting {\n        <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add_to_waitlist</span></span>() {}\n    }\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">eat_at_restaurant</span></span>() {\n    <span class=\"hljs-comment\">// Absolute path</span>\n    crate::front_of_house::hosting::add_to_waitlist();\n\n    <span class=\"hljs-comment\">// Relative path</span>\n    front_of_house::hosting::add_to_waitlist();\n}</code></pre>\n<p><span class=\"caption\">Listing 7-7: Adding the <code class=\"hljs\">pub</code> keyword to <code class=\"hljs\">mod hosting</code>\nand <code class=\"hljs\">fn add_to_waitlist</code> lets us call the function from\n<code class=\"hljs\">eat_at_restaurant</code></span></p>\n<p>Now the code will compile! To see why adding the <code class=\"hljs\">pub</code> keyword lets us use\nthese paths in <code class=\"hljs\">eat_at_restaurant</code> with respect to the privacy rules, let‚Äôs look\nat the absolute and the relative paths.</p>\n<p>In the absolute path, we start with <code class=\"hljs\">crate</code>, the root of our crate‚Äôs module\ntree. The <code class=\"hljs\">front_of_house</code> module is defined in the crate root. While\n<code class=\"hljs\">front_of_house</code> isn‚Äôt public, because the <code class=\"hljs\">eat_at_restaurant</code> function is\ndefined in the same module as <code class=\"hljs\">front_of_house</code> (that is, <code class=\"hljs\">eat_at_restaurant</code>\nand <code class=\"hljs\">front_of_house</code> are siblings), we can refer to <code class=\"hljs\">front_of_house</code> from\n<code class=\"hljs\">eat_at_restaurant</code>. Next is the <code class=\"hljs\">hosting</code> module marked with <code class=\"hljs\">pub</code>. We can\naccess the parent module of <code class=\"hljs\">hosting</code>, so we can access <code class=\"hljs\">hosting</code>. Finally, the\n<code class=\"hljs\">add_to_waitlist</code> function is marked with <code class=\"hljs\">pub</code> and we can access its parent\nmodule, so this function call works!</p>\n<p>In the relative path, the logic is the same as the absolute path except for the\nfirst step: rather than starting from the crate root, the path starts from\n<code class=\"hljs\">front_of_house</code>. The <code class=\"hljs\">front_of_house</code> module is defined within the same module\nas <code class=\"hljs\">eat_at_restaurant</code>, so the relative path starting from the module in which\n<code class=\"hljs\">eat_at_restaurant</code> is defined works. Then, because <code class=\"hljs\">hosting</code> and\n<code class=\"hljs\">add_to_waitlist</code> are marked with <code class=\"hljs\">pub</code>, the rest of the path works, and this\nfunction call is valid!</p>\n<p>If you plan on sharing your library crate so other projects can use your code,\nyour public API is your contract with users of your crate that determines how\nthey can interact with your code. There are many considerations around managing\nchanges to your public API to make it easier for people to depend on your\ncrate. These considerations are out of the scope of this book; if you‚Äôre\ninterested in this topic, see <a href=\"https://rust-lang.github.io/api-guidelines/\">The Rust API Guidelines</a>.</p>\n<section class=\"note\" aria-role=\"note\">\n<h4 id=\"best-practices-for-packages-with-a-binary-and-a-library\"><a class=\"header\" href=\"#best-practices-for-packages-with-a-binary-and-a-library\">Best Practices for Packages with a Binary and a Library</a></h4>\n<p>We mentioned that a package can contain both a <em>src/main.rs</em> binary crate\nroot as well as a <em>src/lib.rs</em> library crate root, and both crates will have\nthe package name by default. Typically, packages with this pattern of\ncontaining both a library and a binary crate will have just enough code in the\nbinary crate to start an executable that calls code within the library crate.\nThis lets other projects benefit from most of the functionality that the\npackage provides because the library crate‚Äôs code can be shared.</p>\n<p>The module tree should be defined in <em>src/lib.rs</em>. Then, any public items can\nbe used in the binary crate by starting paths with the name of the package.\nThe binary crate becomes a user of the library crate just like a completely\nexternal crate would use the library crate: it can only use the public API.\nThis helps you design a good API; not only are you the author, you‚Äôre also a\nclient!</p>\n<p>In <a href=\"ch12-00-an-io-project.html\">Chapter 12</a><!-- ignore -->, we‚Äôll demonstrate this organizational\npractice with a command-line program that will contain both a binary crate\nand a library crate.</p>\n</section>\n<h3 id=\"starting-relative-paths-with-super\"><a class=\"header\" href=\"#starting-relative-paths-with-super\">Starting Relative Paths with <code>super</code></a></h3>\n<p>We can construct relative paths that begin in the parent module, rather than\nthe current module or the crate root, by using <code class=\"hljs\">super</code> at the start of the\npath. This is like starting a filesystem path with the <code class=\"hljs\">..</code> syntax. Using\n<code class=\"hljs\">super</code> allows us to reference an item that we know is in the parent module,\nwhich can make rearranging the module tree easier when the module is closely\nrelated to the parent but the parent might be moved elsewhere in the module\ntree someday.</p>\n<p>Consider the code in Listing 7-8 that models the situation in which a chef\nfixes an incorrect order and personally brings it out to the customer. The\nfunction <code class=\"hljs\">fix_incorrect_order</code> defined in the <code class=\"hljs\">back_of_house</code> module calls the\nfunction <code class=\"hljs\">deliver_order</code> defined in the parent module by specifying the path to\n<code class=\"hljs\">deliver_order</code>, starting with <code class=\"hljs\">super</code>.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust noplayground test_harness hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">deliver_order</span></span>() {}\n\n<span class=\"hljs-keyword\">mod</span> back_of_house {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">fix_incorrect_order</span></span>() {\n        cook_order();\n        super::deliver_order();\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">cook_order</span></span>() {}\n}</code></pre>\n<p><span class=\"caption\">Listing 7-8: Calling a function using a relative path\nstarting with <code class=\"hljs\">super</code></span></p>\n<p>The <code class=\"hljs\">fix_incorrect_order</code> function is in the <code class=\"hljs\">back_of_house</code> module, so we can\nuse <code class=\"hljs\">super</code> to go to the parent module of <code class=\"hljs\">back_of_house</code>, which in this case\nis <code class=\"hljs\">crate</code>, the root. From there, we look for <code class=\"hljs\">deliver_order</code> and find it.\nSuccess! We think the <code class=\"hljs\">back_of_house</code> module and the <code class=\"hljs\">deliver_order</code> function\nare likely to stay in the same relationship to each other and get moved\ntogether should we decide to reorganize the crate‚Äôs module tree. Therefore, we\nused <code class=\"hljs\">super</code> so we‚Äôll have fewer places to update code in the future if this\ncode gets moved to a different module.</p>\n<h3 id=\"making-structs-and-enums-public\"><a class=\"header\" href=\"#making-structs-and-enums-public\">Making Structs and Enums Public</a></h3>\n<p>We can also use <code class=\"hljs\">pub</code> to designate structs and enums as public, but there are a\nfew extra details to the usage of <code class=\"hljs\">pub</code> with structs and enums. If we use <code class=\"hljs\">pub</code>\nbefore a struct definition, we make the struct public, but the struct‚Äôs fields\nwill still be private. We can make each field public or not on a case-by-case\nbasis. In Listing 7-9, we‚Äôve defined a public <code class=\"hljs\">back_of_house::Breakfast</code> struct\nwith a public <code class=\"hljs\">toast</code> field but a private <code class=\"hljs\">seasonal_fruit</code> field. This models\nthe case in a restaurant where the customer can pick the type of bread that\ncomes with a meal, but the chef decides which fruit accompanies the meal based\non what‚Äôs in season and in stock. The available fruit changes quickly, so\ncustomers can‚Äôt choose the fruit or even see which fruit they‚Äôll get.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust noplayground hljs\"><span class=\"hljs-keyword\">mod</span> back_of_house {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Breakfast</span></span> {\n        <span class=\"hljs-keyword\">pub</span> toast: <span class=\"hljs-built_in\">String</span>,\n        seasonal_fruit: <span class=\"hljs-built_in\">String</span>,\n    }\n\n    <span class=\"hljs-keyword\">impl</span> Breakfast {\n        <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">summer</span></span>(toast: &amp;<span class=\"hljs-built_in\">str</span>) -&gt; Breakfast {\n            Breakfast {\n                toast: <span class=\"hljs-built_in\">String</span>::from(toast),\n                seasonal_fruit: <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"peaches\"</span>),\n            }\n        }\n    }\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">eat_at_restaurant</span></span>() {\n    <span class=\"hljs-comment\">// Order a breakfast in the summer with Rye toast</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> meal = back_of_house::Breakfast::summer(<span class=\"hljs-string\">\"Rye\"</span>);\n    <span class=\"hljs-comment\">// Change our mind about what bread we'd like</span>\n    meal.toast = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Wheat\"</span>);\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"I'd like {} toast please\"</span>, meal.toast);\n\n    <span class=\"hljs-comment\">// The next line won't compile if we uncomment it; we're not allowed</span>\n    <span class=\"hljs-comment\">// to see or modify the seasonal fruit that comes with the meal</span>\n    <span class=\"hljs-comment\">// meal.seasonal_fruit = String::from(\"blueberries\");</span>\n}</code></pre>\n<p><span class=\"caption\">Listing 7-9: A struct with some public fields and some\nprivate fields</span></p>\n<p>Because the <code class=\"hljs\">toast</code> field in the <code class=\"hljs\">back_of_house::Breakfast</code> struct is public,\nin <code class=\"hljs\">eat_at_restaurant</code> we can write and read to the <code class=\"hljs\">toast</code> field using dot\nnotation. Notice that we can‚Äôt use the <code class=\"hljs\">seasonal_fruit</code> field in\n<code class=\"hljs\">eat_at_restaurant</code>, because <code class=\"hljs\">seasonal_fruit</code> is private. Try uncommenting the\nline modifying the <code class=\"hljs\">seasonal_fruit</code> field value to see what error you get!</p>\n<p>Also, note that because <code class=\"hljs\">back_of_house::Breakfast</code> has a private field, the\nstruct needs to provide a public associated function that constructs an\ninstance of <code class=\"hljs\">Breakfast</code> (we‚Äôve named it <code class=\"hljs\">summer</code> here). If <code class=\"hljs\">Breakfast</code> didn‚Äôt\nhave such a function, we couldn‚Äôt create an instance of <code class=\"hljs\">Breakfast</code> in\n<code class=\"hljs\">eat_at_restaurant</code> because we couldn‚Äôt set the value of the private\n<code class=\"hljs\">seasonal_fruit</code> field in <code class=\"hljs\">eat_at_restaurant</code>.</p>\n<p>In contrast, if we make an enum public, all of its variants are then public. We\nonly need the <code class=\"hljs\">pub</code> before the <code class=\"hljs\">enum</code> keyword, as shown in Listing 7-10.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust noplayground hljs\"><span class=\"hljs-keyword\">mod</span> back_of_house {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Appetizer</span></span> {\n        Soup,\n        Salad,\n    }\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">eat_at_restaurant</span></span>() {\n    <span class=\"hljs-keyword\">let</span> order1 = back_of_house::Appetizer::Soup;\n    <span class=\"hljs-keyword\">let</span> order2 = back_of_house::Appetizer::Salad;\n}</code></pre>\n<p><span class=\"caption\">Listing 7-10: Designating an enum as public makes all its\nvariants public</span></p>\n<p>Because we made the <code class=\"hljs\">Appetizer</code> enum public, we can use the <code class=\"hljs\">Soup</code> and <code class=\"hljs\">Salad</code>\nvariants in <code class=\"hljs\">eat_at_restaurant</code>.</p>\n<p>Enums aren‚Äôt very useful unless their variants are public; it would be annoying\nto have to annotate all enum variants with <code class=\"hljs\">pub</code> in every case, so the default\nfor enum variants is to be public. Structs are often useful without their\nfields being public, so struct fields follow the general rule of everything\nbeing private by default unless annotated with <code class=\"hljs\">pub</code>.</p>\n<p>There‚Äôs one more situation involving <code class=\"hljs\">pub</code> that we haven‚Äôt covered, and that is\nour last module system feature: the <code class=\"hljs\">use</code> keyword. We‚Äôll cover <code class=\"hljs\">use</code> by itself\nfirst, and then we‚Äôll show how to combine <code class=\"hljs\">pub</code> and <code class=\"hljs\">use</code>.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"bringing-paths-into-scope-with-the-use-keyword\"><a class=\"header\" href=\"#bringing-paths-into-scope-with-the-use-keyword\">Bringing Paths into Scope with the <code>use</code> Keyword</a></h2>\n<p>Having to write out the paths to call functions can feel inconvenient and\nrepetitive. In Listing 7-7, whether we chose the absolute or relative path to\nthe <code class=\"hljs\">add_to_waitlist</code> function, every time we wanted to call <code class=\"hljs\">add_to_waitlist</code>\nwe had to specify <code class=\"hljs\">front_of_house</code> and <code class=\"hljs\">hosting</code> too. Fortunately, there‚Äôs a\nway to simplify this process: we can create a shortcut to a path with the <code class=\"hljs\">use</code>\nkeyword once, and then use the shorter name everywhere else in the scope.</p>\n<p>In Listing 7-11, we bring the <code class=\"hljs\">crate::front_of_house::hosting</code> module into the\nscope of the <code class=\"hljs\">eat_at_restaurant</code> function so we only have to specify\n<code class=\"hljs\">hosting::add_to_waitlist</code> to call the <code class=\"hljs\">add_to_waitlist</code> function in\n<code class=\"hljs\">eat_at_restaurant</code>.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust noplayground test_harness hljs\"><span class=\"hljs-keyword\">mod</span> front_of_house {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">mod</span> hosting {\n        <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add_to_waitlist</span></span>() {}\n    }\n}\n\n<span class=\"hljs-keyword\">use</span> crate::front_of_house::hosting;\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">eat_at_restaurant</span></span>() {\n    hosting::add_to_waitlist();\n}</code></pre>\n<p><span class=\"caption\">Listing 7-11: Bringing a module into scope with\n<code class=\"hljs\">use</code></span></p>\n<p>Adding <code class=\"hljs\">use</code> and a path in a scope is similar to creating a symbolic link in\nthe filesystem. By adding <code class=\"hljs\">use crate::front_of_house::hosting</code> in the crate\nroot, <code class=\"hljs\">hosting</code> is now a valid name in that scope, just as though the <code class=\"hljs\">hosting</code>\nmodule had been defined in the crate root. Paths brought into scope with <code class=\"hljs\">use</code>\nalso check privacy, like any other paths.</p>\n<p>Note that <code class=\"hljs\">use</code> only creates the shortcut for the particular scope in which the\n<code class=\"hljs\">use</code> occurs. Listing 7-12 moves the <code class=\"hljs\">eat_at_restaurant</code> function into a new\nchild module named <code class=\"hljs\">customer</code>, which is then a different scope than the <code class=\"hljs\">use</code>\nstatement, so the function body won‚Äôt compile.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust noplayground test_harness does_not_compile ignore hljs\"><span class=\"hljs-keyword\">mod</span> front_of_house {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">mod</span> hosting {\n        <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add_to_waitlist</span></span>() {}\n    }\n}\n\n<span class=\"hljs-keyword\">use</span> crate::front_of_house::hosting;\n\n<span class=\"hljs-keyword\">mod</span> customer {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">eat_at_restaurant</span></span>() {\n        hosting::add_to_waitlist();\n    }\n}</code></pre>\n<p><span class=\"caption\">Listing 7-12: A <code class=\"hljs\">use</code> statement only applies in the scope\nit‚Äôs in</span></p>\n<p>The compiler error shows that the shortcut no longer applies within the\n<code class=\"hljs\">customer</code> module:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo build</span>\n   Compiling restaurant v0.1.0 (file:///projects/restaurant)\nerror[E0433]: failed to resolve: use of undeclared crate or module `hosting`\n<span class=\"hljs-meta\">  --&gt;</span><span class=\"bash\"> src/lib.rs:11:9</span>\n   |\n11 |         hosting::add_to_waitlist();\n   |         ^^^^^^^ use of undeclared crate or module `hosting`\n   |\nhelp: consider importing this module through its public re-export\n   |\n10 +     use crate::hosting;\n   |\n\nwarning: unused import: `crate::front_of_house::hosting`\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/lib.rs:7:5</span>\n  |\n7 | use crate::front_of_house::hosting;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\n  = note: `#[warn(unused_imports)]` on by default\n\nFor more information about this error, try `rustc --explain E0433`.\nwarning: `restaurant` (lib) generated 1 warning\nerror: could not compile `restaurant` (lib) due to 1 previous error; 1 warning emitted\n</code></pre>\n<p>Notice there‚Äôs also a warning that the <code class=\"hljs\">use</code> is no longer used in its scope! To\nfix this problem, move the <code class=\"hljs\">use</code> within the <code class=\"hljs\">customer</code> module too, or reference\nthe shortcut in the parent module with <code class=\"hljs\">super::hosting</code> within the child\n<code class=\"hljs\">customer</code> module.</p>\n<h3 id=\"creating-idiomatic-use-paths\"><a class=\"header\" href=\"#creating-idiomatic-use-paths\">Creating Idiomatic <code>use</code> Paths</a></h3>\n<p>In Listing 7-11, you might have wondered why we specified <code class=\"hljs\">use crate::front_of_house::hosting</code> and then called <code class=\"hljs\">hosting::add_to_waitlist</code> in\n<code class=\"hljs\">eat_at_restaurant</code>, rather than specifying the <code class=\"hljs\">use</code> path all the way out to\nthe <code class=\"hljs\">add_to_waitlist</code> function to achieve the same result, as in Listing 7-13.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust noplayground test_harness hljs\"><span class=\"hljs-keyword\">mod</span> front_of_house {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">mod</span> hosting {\n        <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add_to_waitlist</span></span>() {}\n    }\n}\n\n<span class=\"hljs-keyword\">use</span> crate::front_of_house::hosting::add_to_waitlist;\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">eat_at_restaurant</span></span>() {\n    add_to_waitlist();\n}</code></pre>\n<p><span class=\"caption\">Listing 7-13: Bringing the <code class=\"hljs\">add_to_waitlist</code> function\ninto scope with <code class=\"hljs\">use</code>, which is unidiomatic</span></p>\n<p>Although both Listing 7-11 and Listing 7-13 accomplish the same task, Listing\n7-11 is the idiomatic way to bring a function into scope with <code class=\"hljs\">use</code>. Bringing\nthe function‚Äôs parent module into scope with <code class=\"hljs\">use</code> means we have to specify the\nparent module when calling the function. Specifying the parent module when\ncalling the function makes it clear that the function isn‚Äôt locally defined\nwhile still minimizing repetition of the full path. The code in Listing 7-13 is\nunclear as to where <code class=\"hljs\">add_to_waitlist</code> is defined.</p>\n<p>On the other hand, when bringing in structs, enums, and other items with <code class=\"hljs\">use</code>,\nit‚Äôs idiomatic to specify the full path. Listing 7-14 shows the idiomatic way\nto bring the standard library‚Äôs <code class=\"hljs\">HashMap</code> struct into the scope of a binary\ncrate.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-keyword\">use</span> std::collections::HashMap;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> map = HashMap::new();\n    map.insert(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 7-14: Bringing <code class=\"hljs\">HashMap</code> into scope in an\nidiomatic way</span></p>\n<p>There‚Äôs no strong reason behind this idiom: it‚Äôs just the convention that has\nemerged, and folks have gotten used to reading and writing Rust code this way.</p>\n<p>The exception to this idiom is if we‚Äôre bringing two items with the same name\ninto scope with <code class=\"hljs\">use</code> statements, because Rust doesn‚Äôt allow that. Listing 7-15\nshows how to bring two <code class=\"hljs\">Result</code> types into scope that have the same name but\ndifferent parent modules, and how to refer to them.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground hljs hide-boring\"><span class=\"hljs-keyword\">use</span> std::fmt;\n<span class=\"hljs-keyword\">use</span> std::io;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">function1</span></span>() -&gt; fmt::<span class=\"hljs-built_in\">Result</span> {\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">    <span class=\"hljs-literal\">Ok</span>(())\n</span>}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">function2</span></span>() -&gt; io::<span class=\"hljs-built_in\">Result</span>&lt;()&gt; {\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">    <span class=\"hljs-literal\">Ok</span>(())\n</span>}</code></pre>\n<p><span class=\"caption\">Listing 7-15: Bringing two types with the same name into\nthe same scope requires using their parent modules.</span></p>\n<p>As you can see, using the parent modules distinguishes the two <code class=\"hljs\">Result</code> types.\nIf instead we specified <code class=\"hljs\">use std::fmt::Result</code> and <code class=\"hljs\">use std::io::Result</code>, we‚Äôd\nhave two <code class=\"hljs\">Result</code> types in the same scope, and Rust wouldn‚Äôt know which one we\nmeant when we used <code class=\"hljs\">Result</code>.</p>\n<h3 id=\"providing-new-names-with-the-as-keyword\"><a class=\"header\" href=\"#providing-new-names-with-the-as-keyword\">Providing New Names with the <code>as</code> Keyword</a></h3>\n<p>There‚Äôs another solution to the problem of bringing two types of the same name\ninto the same scope with <code class=\"hljs\">use</code>: after the path, we can specify <code class=\"hljs\">as</code> and a new\nlocal name, or <em>alias</em>, for the type. Listing 7-16 shows another way to write\nthe code in Listing 7-15 by renaming one of the two <code class=\"hljs\">Result</code> types using <code class=\"hljs\">as</code>.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground hljs hide-boring\"><span class=\"hljs-keyword\">use</span> std::fmt::<span class=\"hljs-built_in\">Result</span>;\n<span class=\"hljs-keyword\">use</span> std::io::<span class=\"hljs-built_in\">Result</span> <span class=\"hljs-keyword\">as</span> IoResult;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">function1</span></span>() -&gt; <span class=\"hljs-built_in\">Result</span> {\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">    <span class=\"hljs-literal\">Ok</span>(())\n</span>}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">function2</span></span>() -&gt; IoResult&lt;()&gt; {\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">    <span class=\"hljs-literal\">Ok</span>(())\n</span>}</code></pre>\n<p><span class=\"caption\">Listing 7-16: Renaming a type when it‚Äôs brought into\nscope with the <code class=\"hljs\">as</code> keyword</span></p>\n<p>In the second <code class=\"hljs\">use</code> statement, we chose the new name <code class=\"hljs\">IoResult</code> for the\n<code class=\"hljs\">std::io::Result</code> type, which won‚Äôt conflict with the <code class=\"hljs\">Result</code> from <code class=\"hljs\">std::fmt</code>\nthat we‚Äôve also brought into scope. Listing 7-15 and Listing 7-16 are\nconsidered idiomatic, so the choice is up to you!</p>\n<h3 id=\"re-exporting-names-with-pub-use\"><a class=\"header\" href=\"#re-exporting-names-with-pub-use\">Re-exporting Names with <code>pub use</code></a></h3>\n<p>When we bring a name into scope with the <code class=\"hljs\">use</code> keyword, the name available in\nthe new scope is private. To enable the code that calls our code to refer to\nthat name as if it had been defined in that code‚Äôs scope, we can combine <code class=\"hljs\">pub</code>\nand <code class=\"hljs\">use</code>. This technique is called <em>re-exporting</em> because we‚Äôre bringing an\nitem into scope but also making that item available for others to bring into\ntheir scope.</p>\n<p>Listing 7-17 shows the code in Listing 7-11 with <code class=\"hljs\">use</code> in the root module\nchanged to <code class=\"hljs\">pub use</code>.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust noplayground test_harness hljs\"><span class=\"hljs-keyword\">mod</span> front_of_house {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">mod</span> hosting {\n        <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add_to_waitlist</span></span>() {}\n    }\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">use</span> crate::front_of_house::hosting;\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">eat_at_restaurant</span></span>() {\n    hosting::add_to_waitlist();\n}</code></pre>\n<p><span class=\"caption\">Listing 7-17: Making a name available for any code to use\nfrom a new scope with <code class=\"hljs\">pub use</code></span></p>\n<p>Before this change, external code would have to call the <code class=\"hljs\">add_to_waitlist</code>\nfunction by using the path\n<code class=\"hljs\">restaurant::front_of_house::hosting::add_to_waitlist()</code>, which also would have\nrequired the <code class=\"hljs\">front_of_house</code> module to be marked as <code class=\"hljs\">pub</code>. Now that this <code class=\"hljs\">pub use</code> has re-exported the <code class=\"hljs\">hosting</code> module from the root module, external code\ncan use the path <code class=\"hljs\">restaurant::hosting::add_to_waitlist()</code> instead.</p>\n<p>Re-exporting is useful when the internal structure of your code is different\nfrom how programmers calling your code would think about the domain. For\nexample, in this restaurant metaphor, the people running the restaurant think\nabout ‚Äúfront of house‚Äù and ‚Äúback of house.‚Äù But customers visiting a restaurant\nprobably won‚Äôt think about the parts of the restaurant in those terms. With\n<code class=\"hljs\">pub use</code>, we can write our code with one structure but expose a different\nstructure. Doing so makes our library well organized for programmers working on\nthe library and programmers calling the library. We‚Äôll look at another example\nof <code class=\"hljs\">pub use</code> and how it affects your crate‚Äôs documentation in the <a href=\"ch14-02-publishing-to-crates-io.html#exporting-a-convenient-public-api-with-pub-use\">‚ÄúExporting a\nConvenient Public API with <code class=\"hljs\">pub use</code>‚Äù</a><!-- ignore --> section of\nChapter 14.</p>\n<h3 id=\"using-external-packages\"><a class=\"header\" href=\"#using-external-packages\">Using External Packages</a></h3>\n<p>In Chapter 2, we programmed a guessing game project that used an external\npackage called <code class=\"hljs\">rand</code> to get random numbers. To use <code class=\"hljs\">rand</code> in our project, we\nadded this line to <em>Cargo.toml</em>:</p>\n<!-- When updating the version of `rand` used, also update the version of\n`rand` used in these files so they all match:\n* ch02-00-guessing-game-tutorial.md\n* ch14-03-cargo-workspaces.md\n-->\n<p><span class=\"filename\">Filename: Cargo.toml</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-attr\">rand</span> = <span class=\"hljs-string\">\"0.8.5\"</span>\n</code></pre>\n<p>Adding <code class=\"hljs\">rand</code> as a dependency in <em>Cargo.toml</em> tells Cargo to download the\n<code class=\"hljs\">rand</code> package and any dependencies from <a href=\"https://crates.io/\">crates.io</a> and\nmake <code class=\"hljs\">rand</code> available to our project.</p>\n<p>Then, to bring <code class=\"hljs\">rand</code> definitions into the scope of our package, we added a\n<code class=\"hljs\">use</code> line starting with the name of the crate, <code class=\"hljs\">rand</code>, and listed the items\nwe wanted to bring into scope. Recall that in the <a href=\"ch02-00-guessing-game-tutorial.html#generating-a-random-number\">‚ÄúGenerating a Random\nNumber‚Äù</a><!-- ignore --> section in Chapter 2, we brought the <code class=\"hljs\">Rng</code> trait\ninto scope and called the <code class=\"hljs\">rand::thread_rng</code> function:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::io;\n</span><span class=\"hljs-keyword\">use</span> rand::Rng;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n<span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Guess the number!\"</span>);\n</span><span class=\"boring\">\n</span>    <span class=\"hljs-keyword\">let</span> secret_number = rand::thread_rng().gen_range(<span class=\"hljs-number\">1</span>..=<span class=\"hljs-number\">100</span>);\n<span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The secret number is: {secret_number}\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Please input your guess.\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> guess = <span class=\"hljs-built_in\">String</span>::new();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    io::stdin()\n</span><span class=\"boring\">        .read_line(&amp;<span class=\"hljs-keyword\">mut</span> guess)\n</span><span class=\"boring\">        .expect(<span class=\"hljs-string\">\"Failed to read line\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"You guessed: {guess}\"</span>);\n</span>}</code></pre>\n<p>Members of the Rust community have made many packages available at\n<a href=\"https://crates.io/\">crates.io</a>, and pulling any of them into your package\ninvolves these same steps: listing them in your package‚Äôs <em>Cargo.toml</em> file and\nusing <code class=\"hljs\">use</code> to bring items from their crates into scope.</p>\n<p>Note that the standard <code class=\"hljs\">std</code> library is also a crate that‚Äôs external to our\npackage. Because the standard library is shipped with the Rust language, we\ndon‚Äôt need to change <em>Cargo.toml</em> to include <code class=\"hljs\">std</code>. But we do need to refer to\nit with <code class=\"hljs\">use</code> to bring items from there into our package‚Äôs scope. For example,\nwith <code class=\"hljs\">HashMap</code> we would use this line:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">use</span> std::collections::HashMap;\n<span class=\"boring\">}</span></code></pre></pre>\n<p>This is an absolute path starting with <code class=\"hljs\">std</code>, the name of the standard library\ncrate.</p>\n<h3 id=\"using-nested-paths-to-clean-up-large-use-lists\"><a class=\"header\" href=\"#using-nested-paths-to-clean-up-large-use-lists\">Using Nested Paths to Clean Up Large <code>use</code> Lists</a></h3>\n<p>If we‚Äôre using multiple items defined in the same crate or same module, listing\neach item on its own line can take up a lot of vertical space in our files. For\nexample, these two <code class=\"hljs\">use</code> statements we had in the guessing game in Listing 2-4\nbring items from <code class=\"hljs\">std</code> into scope:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> rand::Rng;\n</span><span class=\"hljs-comment\">// --snip--</span>\n<span class=\"hljs-keyword\">use</span> std::cmp::Ordering;\n<span class=\"hljs-keyword\">use</span> std::io;\n<span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Guess the number!\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> secret_number = rand::thread_rng().gen_range(<span class=\"hljs-number\">1</span>..=<span class=\"hljs-number\">100</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The secret number is: {secret_number}\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Please input your guess.\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> guess = <span class=\"hljs-built_in\">String</span>::new();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    io::stdin()\n</span><span class=\"boring\">        .read_line(&amp;<span class=\"hljs-keyword\">mut</span> guess)\n</span><span class=\"boring\">        .expect(<span class=\"hljs-string\">\"Failed to read line\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"You guessed: {guess}\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">match</span> guess.cmp(&amp;secret_number) {\n</span><span class=\"boring\">        Ordering::Less =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Too small!\"</span>),\n</span><span class=\"boring\">        Ordering::Greater =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Too big!\"</span>),\n</span><span class=\"boring\">        Ordering::Equal =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"You win!\"</span>),\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre>\n<p>Instead, we can use nested paths to bring the same items into scope in one\nline. We do this by specifying the common part of the path, followed by two\ncolons, and then curly brackets around a list of the parts of the paths that\ndiffer, as shown in Listing 7-18.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> rand::Rng;\n</span><span class=\"hljs-comment\">// --snip--</span>\n<span class=\"hljs-keyword\">use</span> std::{cmp::Ordering, io};\n<span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Guess the number!\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> secret_number = rand::thread_rng().gen_range(<span class=\"hljs-number\">1</span>..=<span class=\"hljs-number\">100</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The secret number is: {secret_number}\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Please input your guess.\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> guess = <span class=\"hljs-built_in\">String</span>::new();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    io::stdin()\n</span><span class=\"boring\">        .read_line(&amp;<span class=\"hljs-keyword\">mut</span> guess)\n</span><span class=\"boring\">        .expect(<span class=\"hljs-string\">\"Failed to read line\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> guess: <span class=\"hljs-built_in\">u32</span> = guess.trim().parse().expect(<span class=\"hljs-string\">\"Please type a number!\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"You guessed: {guess}\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">match</span> guess.cmp(&amp;secret_number) {\n</span><span class=\"boring\">        Ordering::Less =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Too small!\"</span>),\n</span><span class=\"boring\">        Ordering::Greater =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Too big!\"</span>),\n</span><span class=\"boring\">        Ordering::Equal =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"You win!\"</span>),\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre>\n<p><span class=\"caption\">Listing 7-18: Specifying a nested path to bring multiple\nitems with the same prefix into scope</span></p>\n<p>In bigger programs, bringing many items into scope from the same crate or\nmodule using nested paths can reduce the number of separate <code class=\"hljs\">use</code> statements\nneeded by a lot!</p>\n<p>We can use a nested path at any level in a path, which is useful when combining\ntwo <code class=\"hljs\">use</code> statements that share a subpath. For example, Listing 7-19 shows two\n<code class=\"hljs\">use</code> statements: one that brings <code class=\"hljs\">std::io</code> into scope and one that brings\n<code class=\"hljs\">std::io::Write</code> into scope.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust noplayground hljs\"><span class=\"hljs-keyword\">use</span> std::io;\n<span class=\"hljs-keyword\">use</span> std::io::Write;</code></pre>\n<p><span class=\"caption\">Listing 7-19: Two <code class=\"hljs\">use</code> statements where one is a subpath\nof the other</span></p>\n<p>The common part of these two paths is <code class=\"hljs\">std::io</code>, and that‚Äôs the complete first\npath. To merge these two paths into one <code class=\"hljs\">use</code> statement, we can use <code class=\"hljs\">self</code> in\nthe nested path, as shown in Listing 7-20.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust noplayground hljs\"><span class=\"hljs-keyword\">use</span> std::io::{<span class=\"hljs-keyword\">self</span>, Write};</code></pre>\n<p><span class=\"caption\">Listing 7-20: Combining the paths in Listing 7-19 into\none <code class=\"hljs\">use</code> statement</span></p>\n<p>This line brings <code class=\"hljs\">std::io</code> and <code class=\"hljs\">std::io::Write</code> into scope.</p>\n<h3 id=\"the-glob-operator\"><a class=\"header\" href=\"#the-glob-operator\">The Glob Operator</a></h3>\n<p>If we want to bring <em>all</em> public items defined in a path into scope, we can\nspecify that path followed by the <code class=\"hljs\">*</code> glob operator:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">use</span> std::collections::*;\n<span class=\"boring\">}</span></code></pre></pre>\n<p>This <code class=\"hljs\">use</code> statement brings all public items defined in <code class=\"hljs\">std::collections</code> into\nthe current scope. Be careful when using the glob operator! Glob can make it\nharder to tell what names are in scope and where a name used in your program\nwas defined.</p>\n<p>The glob operator is often used when testing to bring everything under test\ninto the <code class=\"hljs\">tests</code> module; we‚Äôll talk about that in the <a href=\"ch11-01-writing-tests.html#how-to-write-tests\">‚ÄúHow to Write\nTests‚Äù</a><!-- ignore --> section in Chapter 11. The glob operator\nis also sometimes used as part of the prelude pattern: see <a href=\"../std/prelude/index.html#other-preludes\">the standard\nlibrary documentation</a><!-- ignore -->\nfor more information on that pattern.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"separating-modules-into-different-files\"><a class=\"header\" href=\"#separating-modules-into-different-files\">Separating Modules into Different Files</a></h2>\n<p>So far, all the examples in this chapter defined multiple modules in one file.\nWhen modules get large, you might want to move their definitions to a separate\nfile to make the code easier to navigate.</p>\n<p>For example, let‚Äôs start from the code in Listing 7-17 that had multiple\nrestaurant modules. We‚Äôll extract modules into files instead of having all the\nmodules defined in the crate root file. In this case, the crate root file is\n<em>src/lib.rs</em>, but this procedure also works with binary crates whose crate root\nfile is <em>src/main.rs</em>.</p>\n<p>First we‚Äôll extract the <code class=\"hljs\">front_of_house</code> module to its own file. Remove the\ncode inside the curly brackets for the <code class=\"hljs\">front_of_house</code> module, leaving only\nthe <code class=\"hljs\">mod front_of_house;</code> declaration, so that <em>src/lib.rs</em> contains the code\nshown in Listing 7-21. Note that this won‚Äôt compile until we create the\n<em>src/front_of_house.rs</em> file in Listing 7-22.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs\"><span class=\"hljs-keyword\">mod</span> front_of_house;\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">use</span> crate::front_of_house::hosting;\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">eat_at_restaurant</span></span>() {\n    hosting::add_to_waitlist();\n}</code></pre>\n<p><span class=\"caption\">Listing 7-21: Declaring the <code class=\"hljs\">front_of_house</code> module whose\nbody will be in <em>src/front_of_house.rs</em></span></p>\n<p>Next, place the code that was in the curly brackets into a new file named\n<em>src/front_of_house.rs</em>, as shown in Listing 7-22. The compiler knows to look\nin this file because it came across the module declaration in the crate root\nwith the name <code class=\"hljs\">front_of_house</code>.</p>\n<p><span class=\"filename\">Filename: src/front_of_house.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">mod</span> hosting {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add_to_waitlist</span></span>() {}\n}</code></pre>\n<p><span class=\"caption\">Listing 7-22: Definitions inside the <code class=\"hljs\">front_of_house</code>\nmodule in <em>src/front_of_house.rs</em></span></p>\n<p>Note that you only need to load a file using a <code class=\"hljs\">mod</code> declaration <em>once</em> in your\nmodule tree. Once the compiler knows the file is part of the project (and knows\nwhere in the module tree the code resides because of where you‚Äôve put the <code class=\"hljs\">mod</code>\nstatement), other files in your project should refer to the loaded file‚Äôs code\nusing a path to where it was declared, as covered in the <a href=\"ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html\">‚ÄúPaths for Referring\nto an Item in the Module Tree‚Äù</a><!-- ignore --> section. In other words,\n<code class=\"hljs\">mod</code> is <em>not</em> an ‚Äúinclude‚Äù operation that you may have seen in other\nprogramming languages.</p>\n<p>Next, we‚Äôll extract the <code class=\"hljs\">hosting</code> module to its own file. The process is a bit\ndifferent because <code class=\"hljs\">hosting</code> is a child module of <code class=\"hljs\">front_of_house</code>, not of the\nroot module. We‚Äôll place the file for <code class=\"hljs\">hosting</code> in a new directory that will be\nnamed for its ancestors in the module tree, in this case <em>src/front_of_house</em>.</p>\n<p>To start moving <code class=\"hljs\">hosting</code>, we change <em>src/front_of_house.rs</em> to contain only\nthe declaration of the <code class=\"hljs\">hosting</code> module:</p>\n<p><span class=\"filename\">Filename: src/front_of_house.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">mod</span> hosting;</code></pre>\n<p>Then we create a <em>src/front_of_house</em> directory and a <em>hosting.rs</em> file to\ncontain the definitions made in the <code class=\"hljs\">hosting</code> module:</p>\n<p><span class=\"filename\">Filename: src/front_of_house/hosting.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add_to_waitlist</span></span>() {}</code></pre>\n<p>If we instead put <em>hosting.rs</em> in the <em>src</em> directory, the compiler would\nexpect the <em>hosting.rs</em> code to be in a <code class=\"hljs\">hosting</code> module declared in the crate\nroot, and not declared as a child of the <code class=\"hljs\">front_of_house</code> module. The\ncompiler‚Äôs rules for which files to check for which modules‚Äô code mean the\ndirectories and files more closely match the module tree.</p>\n<section class=\"note\" aria-role=\"note\">\n<h3 id=\"alternate-file-paths\"><a class=\"header\" href=\"#alternate-file-paths\">Alternate File Paths</a></h3>\n<p>So far we‚Äôve covered the most idiomatic file paths the Rust compiler uses,\nbut Rust also supports an older style of file path. For a module named\n<code class=\"hljs\">front_of_house</code> declared in the crate root, the compiler will look for the\nmodule‚Äôs code in:</p>\n<ul>\n<li><em>src/front_of_house.rs</em> (what we covered)</li>\n<li><em>src/front_of_house/mod.rs</em> (older style, still supported path)</li>\n</ul>\n<p>For a module named <code class=\"hljs\">hosting</code> that is a submodule of <code class=\"hljs\">front_of_house</code>, the\ncompiler will look for the module‚Äôs code in:</p>\n<ul>\n<li><em>src/front_of_house/hosting.rs</em> (what we covered)</li>\n<li><em>src/front_of_house/hosting/mod.rs</em> (older style, still supported path)</li>\n</ul>\n<p>If you use both styles for the same module, you‚Äôll get a compiler error.\nUsing a mix of both styles for different modules in the same project is\nallowed, but might be confusing for people navigating your project.</p>\n<p>The main downside to the style that uses files named <em>mod.rs</em> is that your\nproject can end up with many files named <em>mod.rs</em>, which can get confusing\nwhen you have them open in your editor at the same time.</p>\n</section>\n<p>We‚Äôve moved each module‚Äôs code to a separate file, and the module tree remains\nthe same. The function calls in <code class=\"hljs\">eat_at_restaurant</code> will work without any\nmodification, even though the definitions live in different files. This\ntechnique lets you move modules to new files as they grow in size.</p>\n<p>Note that the <code class=\"hljs\">pub use crate::front_of_house::hosting</code> statement in\n<em>src/lib.rs</em> also hasn‚Äôt changed, nor does <code class=\"hljs\">use</code> have any impact on what files\nare compiled as part of the crate. The <code class=\"hljs\">mod</code> keyword declares modules, and Rust\nlooks in a file with the same name as the module for the code that goes into\nthat module.</p>\n<h2 id=\"summary-6\"><a class=\"header\" href=\"#summary-6\">Summary</a></h2>\n<p>Rust lets you split a package into multiple crates and a crate into modules so\nyou can refer to items defined in one module from another module. You can do\nthis by specifying absolute or relative paths. These paths can be brought into\nscope with a <code class=\"hljs\">use</code> statement so you can use a shorter path for multiple uses of\nthe item in that scope. Module code is private by default, but you can make\ndefinitions public by adding the <code class=\"hljs\">pub</code> keyword.</p>\n<p>In the next chapter, we‚Äôll look at some collection data structures in the\nstandard library that you can use in your neatly organized code.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"common-collections\"><a class=\"header\" href=\"#common-collections\">Common Collections</a></h1>\n<p>Rust‚Äôs standard library includes a number of very useful data structures called\n<em>collections</em>. Most other data types represent one specific value, but\ncollections can contain multiple values. Unlike the built-in array and tuple\ntypes, the data these collections point to is stored on the heap, which means\nthe amount of data does not need to be known at compile time and can grow or\nshrink as the program runs. Each kind of collection has different capabilities\nand costs, and choosing an appropriate one for your current situation is a\nskill you‚Äôll develop over time. In this chapter, we‚Äôll discuss three\ncollections that are used very often in Rust programs:</p>\n<ul>\n<li>A <em>vector</em> allows you to store a variable number of values next to each other.</li>\n<li>A <em>string</em> is a collection of characters. We‚Äôve mentioned the <code class=\"hljs\">String</code> type\npreviously, but in this chapter we‚Äôll talk about it in depth.</li>\n<li>A <em>hash map</em> allows you to associate a value with a specific key. It‚Äôs a\nparticular implementation of the more general data structure called a <em>map</em>.</li>\n</ul>\n<p>To learn about the other kinds of collections provided by the standard library,\nsee <a href=\"../std/collections/index.html\">the documentation</a>.</p>\n<p>We‚Äôll discuss how to create and update vectors, strings, and hash maps, as well\nas what makes each special.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"storing-lists-of-values-with-vectors\"><a class=\"header\" href=\"#storing-lists-of-values-with-vectors\">Storing Lists of Values with Vectors</a></h2>\n<p>The first collection type we‚Äôll look at is <code class=\"hljs\">Vec&lt;T&gt;</code>, also known as a <em>vector</em>.\nVectors allow you to store more than one value in a single data structure that\nputs all the values next to each other in memory. Vectors can only store values\nof the same type. They are useful when you have a list of items, such as the\nlines of text in a file or the prices of items in a shopping cart.</p>\n<h3 id=\"creating-a-new-vector\"><a class=\"header\" href=\"#creating-a-new-vector\">Creating a New Vector</a></h3>\n<p>To create a new empty vector, we call the <code class=\"hljs\">Vec::new</code> function, as shown in\nListing 8-1.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> v: <span class=\"hljs-built_in\">Vec</span>&lt;<span class=\"hljs-built_in\">i32</span>&gt; = <span class=\"hljs-built_in\">Vec</span>::new();\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 8-1: Creating a new, empty vector to hold values\nof type <code class=\"hljs\">i32</code></span></p>\n<p>Note that we added a type annotation here. Because we aren‚Äôt inserting any\nvalues into this vector, Rust doesn‚Äôt know what kind of elements we intend to\nstore. This is an important point. Vectors are implemented using generics;\nwe‚Äôll cover how to use generics with your own types in Chapter 10. For now,\nknow that the <code class=\"hljs\">Vec&lt;T&gt;</code> type provided by the standard library can hold any type.\nWhen we create a vector to hold a specific type, we can specify the type within\nangle brackets. In Listing 8-1, we‚Äôve told Rust that the <code class=\"hljs\">Vec&lt;T&gt;</code> in <code class=\"hljs\">v</code> will\nhold elements of the <code class=\"hljs\">i32</code> type.</p>\n<p>More often, you‚Äôll create a <code class=\"hljs\">Vec&lt;T&gt;</code> with initial values and Rust will infer\nthe type of value you want to store, so you rarely need to do this type\nannotation. Rust conveniently provides the <code class=\"hljs\">vec!</code> macro, which will create a\nnew vector that holds the values you give it. Listing 8-2 creates a new\n<code class=\"hljs\">Vec&lt;i32&gt;</code> that holds the values <code class=\"hljs\">1</code>, <code class=\"hljs\">2</code>, and <code class=\"hljs\">3</code>. The integer type is <code class=\"hljs\">i32</code>\nbecause that‚Äôs the default integer type, as we discussed in the <a href=\"ch03-02-data-types.html#data-types\">‚ÄúData\nTypes‚Äù</a><!-- ignore --> section of Chapter 3.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> v = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 8-2: Creating a new vector containing\nvalues</span></p>\n<p>Because we‚Äôve given initial <code class=\"hljs\">i32</code> values, Rust can infer that the type of <code class=\"hljs\">v</code>\nis <code class=\"hljs\">Vec&lt;i32&gt;</code>, and the type annotation isn‚Äôt necessary. Next, we‚Äôll look at how\nto modify a vector.</p>\n<h3 id=\"updating-a-vector\"><a class=\"header\" href=\"#updating-a-vector\">Updating a Vector</a></h3>\n<p>To create a vector and then add elements to it, we can use the <code class=\"hljs\">push</code> method,\nas shown in Listing 8-3.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> v = <span class=\"hljs-built_in\">Vec</span>::new();\n\n    v.push(<span class=\"hljs-number\">5</span>);\n    v.push(<span class=\"hljs-number\">6</span>);\n    v.push(<span class=\"hljs-number\">7</span>);\n    v.push(<span class=\"hljs-number\">8</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 8-3: Using the <code class=\"hljs\">push</code> method to add values to a\nvector</span></p>\n<p>As with any variable, if we want to be able to change its value, we need to\nmake it mutable using the <code class=\"hljs\">mut</code> keyword, as discussed in Chapter 3. The numbers\nwe place inside are all of type <code class=\"hljs\">i32</code>, and Rust infers this from the data, so\nwe don‚Äôt need the <code class=\"hljs\">Vec&lt;i32&gt;</code> annotation.</p>\n<h3 id=\"reading-elements-of-vectors\"><a class=\"header\" href=\"#reading-elements-of-vectors\">Reading Elements of Vectors</a></h3>\n<p>There are two ways to reference a value stored in a vector: via indexing or by\nusing the <code class=\"hljs\">get</code> method. In the following examples, we‚Äôve annotated the types of\nthe values that are returned from these functions for extra clarity.</p>\n<p>Listing 8-4 shows both methods of accessing a value in a vector, with indexing\nsyntax and the <code class=\"hljs\">get</code> method.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> v = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\n\n    <span class=\"hljs-keyword\">let</span> third: &amp;<span class=\"hljs-built_in\">i32</span> = &amp;v[<span class=\"hljs-number\">2</span>];\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The third element is {third}\"</span>);\n\n    <span class=\"hljs-keyword\">let</span> third: <span class=\"hljs-built_in\">Option</span>&lt;&amp;<span class=\"hljs-built_in\">i32</span>&gt; = v.get(<span class=\"hljs-number\">2</span>);\n    <span class=\"hljs-keyword\">match</span> third {\n        <span class=\"hljs-literal\">Some</span>(third) =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The third element is {third}\"</span>),\n        <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"There is no third element.\"</span>),\n    }\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 8-4: Using indexing syntax and using the <code class=\"hljs\">get</code>\nmethod to access an item in a vector</span></p>\n<p>Note a few details here. We use the index value of <code class=\"hljs\">2</code> to get the third element\nbecause vectors are indexed by number, starting at zero. Using <code class=\"hljs\">&amp;</code> and <code class=\"hljs\">[]</code>\ngives us a reference to the element at the index value. When we use the <code class=\"hljs\">get</code>\nmethod with the index passed as an argument, we get an <code class=\"hljs\">Option&lt;&amp;T&gt;</code> that we can\nuse with <code class=\"hljs\">match</code>.</p>\n<p>Rust provides these two ways to reference an element so you can choose how the\nprogram behaves when you try to use an index value outside the range of\nexisting elements. As an example, let‚Äôs see what happens when we have a vector\nof five elements and then we try to access an element at index 100 with each\ntechnique, as shown in Listing 8-5.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/panics.svg\" title=\"This code panics!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust should_panic panics hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> v = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\n\n    <span class=\"hljs-keyword\">let</span> does_not_exist = &amp;v[<span class=\"hljs-number\">100</span>];\n    <span class=\"hljs-keyword\">let</span> does_not_exist = v.get(<span class=\"hljs-number\">100</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 8-5: Attempting to access the element at index\n100 in a vector containing five elements</span></p>\n<p>When we run this code, the first <code class=\"hljs\">[]</code> method will cause the program to panic\nbecause it references a nonexistent element. This method is best used when you\nwant your program to crash if there‚Äôs an attempt to access an element past the\nend of the vector.</p>\n<p>When the <code class=\"hljs\">get</code> method is passed an index that is outside the vector, it returns\n<code class=\"hljs\">None</code> without panicking. You would use this method if accessing an element\nbeyond the range of the vector may happen occasionally under normal\ncircumstances. Your code will then have logic to handle having either\n<code class=\"hljs\">Some(&amp;element)</code> or <code class=\"hljs\">None</code>, as discussed in Chapter 6. For example, the index\ncould be coming from a person entering a number. If they accidentally enter a\nnumber that‚Äôs too large and the program gets a <code class=\"hljs\">None</code> value, you could tell the\nuser how many items are in the current vector and give them another chance to\nenter a valid value. That would be more user-friendly than crashing the program\ndue to a typo!</p>\n<p>When the program has a valid reference, the borrow checker enforces the\nownership and borrowing rules (covered in Chapter 4) to ensure this reference\nand any other references to the contents of the vector remain valid. Recall the\nrule that states you can‚Äôt have mutable and immutable references in the same\nscope. That rule applies in Listing 8-6, where we hold an immutable reference\nto the first element in a vector and try to add an element to the end. This\nprogram won‚Äôt work if we also try to refer to that element later in the\nfunction.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> v = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\n\n    <span class=\"hljs-keyword\">let</span> first = &amp;v[<span class=\"hljs-number\">0</span>];\n\n    v.push(<span class=\"hljs-number\">6</span>);\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The first element is: {first}\"</span>);\n<span class=\"boring\">}</span></code></pre>\n<p><span class=\"caption\">Listing 8-6: Attempting to add an element to a vector\nwhile holding a reference to an item</span></p>\n<p>Compiling this code will result in this error:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling collections v0.1.0 (file:///projects/collections)\nerror[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/main.rs:6:5</span>\n  |\n4 |     let first = &amp;v[0];\n  |                  - immutable borrow occurs here\n5 |\n6 |     v.push(6);\n  |     ^^^^^^^^^ mutable borrow occurs here\n7 |\n8 |     println!(\"The first element is: {first}\");\n  |                                     ------- immutable borrow later used here\n\nFor more information about this error, try `rustc --explain E0502`.\nerror: could not compile `collections` (bin \"collections\") due to 1 previous error\n</code></pre>\n<p>The code in Listing 8-6 might look like it should work: why should a reference\nto the first element care about changes at the end of the vector? This error is\ndue to the way vectors work: because vectors put the values next to each other\nin memory, adding a new element onto the end of the vector might require\nallocating new memory and copying the old elements to the new space, if there\nisn‚Äôt enough room to put all the elements next to each other where the vector\nis currently stored. In that case, the reference to the first element would be\npointing to deallocated memory. The borrowing rules prevent programs from\nending up in that situation.</p>\n<section class=\"note\" aria-role=\"note\">\n<p>Note: For more on the implementation details of the <code class=\"hljs\">Vec&lt;T&gt;</code> type, see <a href=\"../nomicon/vec/vec.html\">‚ÄúThe\nRustonomicon‚Äù</a>.</p>\n</section>\n<h3 id=\"iterating-over-the-values-in-a-vector\"><a class=\"header\" href=\"#iterating-over-the-values-in-a-vector\">Iterating Over the Values in a Vector</a></h3>\n<p>To access each element in a vector in turn, we would iterate through all of the\nelements rather than use indices to access one at a time. Listing 8-7 shows how\nto use a <code class=\"hljs\">for</code> loop to get immutable references to each element in a vector of\n<code class=\"hljs\">i32</code> values and print them.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> v = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">32</span>, <span class=\"hljs-number\">57</span>];\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> &amp;v {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{i}\"</span>);\n    }\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 8-7: Printing each element in a vector by\niterating over the elements using a <code class=\"hljs\">for</code> loop</span></p>\n<p>We can also iterate over mutable references to each element in a mutable vector\nin order to make changes to all the elements. The <code class=\"hljs\">for</code> loop in Listing 8-8\nwill add <code class=\"hljs\">50</code> to each element.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> v = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">32</span>, <span class=\"hljs-number\">57</span>];\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> &amp;<span class=\"hljs-keyword\">mut</span> v {\n        *i += <span class=\"hljs-number\">50</span>;\n    }\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 8-8: Iterating over mutable references to\nelements in a vector</span></p>\n<p>To change the value that the mutable reference refers to, we have to use the\n<code class=\"hljs\">*</code> dereference operator to get to the value in <code class=\"hljs\">i</code> before we can use the <code class=\"hljs\">+=</code>\noperator. We‚Äôll talk more about the dereference operator in the <a href=\"ch15-02-deref.html#following-the-pointer-to-the-value-with-the-dereference-operator\">‚ÄúFollowing the\nPointer to the Value with the Dereference Operator‚Äù</a><!-- ignore -->\nsection of Chapter 15.</p>\n<p>Iterating over a vector, whether immutably or mutably, is safe because of the\nborrow checker‚Äôs rules. If we attempted to insert or remove items in the <code class=\"hljs\">for</code>\nloop bodies in Listing 8-7 and Listing 8-8, we would get a compiler error\nsimilar to the one we got with the code in Listing 8-6. The reference to the\nvector that the <code class=\"hljs\">for</code> loop holds prevents simultaneous modification of the\nwhole vector.</p>\n<h3 id=\"using-an-enum-to-store-multiple-types\"><a class=\"header\" href=\"#using-an-enum-to-store-multiple-types\">Using an Enum to Store Multiple Types</a></h3>\n<p>Vectors can only store values that are of the same type. This can be\ninconvenient; there are definitely use cases for needing to store a list of\nitems of different types. Fortunately, the variants of an enum are defined\nunder the same enum type, so when we need one type to represent elements of\ndifferent types, we can define and use an enum!</p>\n<p>For example, say we want to get values from a row in a spreadsheet in which\nsome of the columns in the row contain integers, some floating-point numbers,\nand some strings. We can define an enum whose variants will hold the different\nvalue types, and all the enum variants will be considered the same type: that\nof the enum. Then we can create a vector to hold that enum and so, ultimately,\nhold different types. We‚Äôve demonstrated this in Listing 8-9.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">SpreadsheetCell</span></span> {\n        Int(<span class=\"hljs-built_in\">i32</span>),\n        Float(<span class=\"hljs-built_in\">f64</span>),\n        Text(<span class=\"hljs-built_in\">String</span>),\n    }\n\n    <span class=\"hljs-keyword\">let</span> row = <span class=\"hljs-built_in\">vec!</span>[\n        SpreadsheetCell::Int(<span class=\"hljs-number\">3</span>),\n        SpreadsheetCell::Text(<span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"blue\"</span>)),\n        SpreadsheetCell::Float(<span class=\"hljs-number\">10.12</span>),\n    ];\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 8-9: Defining an <code class=\"hljs\">enum</code> to store values of\ndifferent types in one vector</span></p>\n<p>Rust needs to know what types will be in the vector at compile time so it knows\nexactly how much memory on the heap will be needed to store each element. We\nmust also be explicit about what types are allowed in this vector. If Rust\nallowed a vector to hold any type, there would be a chance that one or more of\nthe types would cause errors with the operations performed on the elements of\nthe vector. Using an enum plus a <code class=\"hljs\">match</code> expression means that Rust will ensure\nat compile time that every possible case is handled, as discussed in Chapter 6.</p>\n<p>If you don‚Äôt know the exhaustive set of types a program will get at runtime to\nstore in a vector, the enum technique won‚Äôt work. Instead, you can use a trait\nobject, which we‚Äôll cover in Chapter 17.</p>\n<p>Now that we‚Äôve discussed some of the most common ways to use vectors, be sure\nto review <a href=\"../std/vec/struct.Vec.html\">the API documentation</a><!-- ignore --> for all of the many\nuseful methods defined on <code class=\"hljs\">Vec&lt;T&gt;</code> by the standard library. For example, in\naddition to <code class=\"hljs\">push</code>, a <code class=\"hljs\">pop</code> method removes and returns the last element.</p>\n<h3 id=\"dropping-a-vector-drops-its-elements\"><a class=\"header\" href=\"#dropping-a-vector-drops-its-elements\">Dropping a Vector Drops Its Elements</a></h3>\n<p>Like any other <code class=\"hljs\">struct</code>, a vector is freed when it goes out of scope, as\nannotated in Listing 8-10.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    {\n        <span class=\"hljs-keyword\">let</span> v = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>];\n\n        <span class=\"hljs-comment\">// do stuff with v</span>\n    } <span class=\"hljs-comment\">// &lt;- v goes out of scope and is freed here</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 8-10: Showing where the vector and its elements\nare dropped</span></p>\n<p>When the vector gets dropped, all of its contents are also dropped, meaning the\nintegers it holds will be cleaned up. The borrow checker ensures that any\nreferences to contents of a vector are only used while the vector itself is\nvalid.</p>\n<p>Let‚Äôs move on to the next collection type: <code class=\"hljs\">String</code>!</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"storing-utf-8-encoded-text-with-strings\"><a class=\"header\" href=\"#storing-utf-8-encoded-text-with-strings\">Storing UTF-8 Encoded Text with Strings</a></h2>\n<p>We talked about strings in Chapter 4, but we‚Äôll look at them in more depth now.\nNew Rustaceans commonly get stuck on strings for a combination of three\nreasons: Rust‚Äôs propensity for exposing possible errors, strings being a more\ncomplicated data structure than many programmers give them credit for, and\nUTF-8. These factors combine in a way that can seem difficult when you‚Äôre\ncoming from other programming languages.</p>\n<p>We discuss strings in the context of collections because strings are\nimplemented as a collection of bytes, plus some methods to provide useful\nfunctionality when those bytes are interpreted as text. In this section, we‚Äôll\ntalk about the operations on <code class=\"hljs\">String</code> that every collection type has, such as\ncreating, updating, and reading. We‚Äôll also discuss the ways in which <code class=\"hljs\">String</code>\nis different from the other collections, namely how indexing into a <code class=\"hljs\">String</code> is\ncomplicated by the differences between how people and computers interpret\n<code class=\"hljs\">String</code> data.</p>\n<h3 id=\"what-is-a-string\"><a class=\"header\" href=\"#what-is-a-string\">What Is a String?</a></h3>\n<p>We‚Äôll first define what we mean by the term <em>string</em>. Rust has only one string\ntype in the core language, which is the string slice <code class=\"hljs\">str</code> that is usually seen\nin its borrowed form <code class=\"hljs\">&amp;str</code>. In Chapter 4, we talked about <em>string slices</em>,\nwhich are references to some UTF-8 encoded string data stored elsewhere. String\nliterals, for example, are stored in the program‚Äôs binary and are therefore\nstring slices.</p>\n<p>The <code class=\"hljs\">String</code> type, which is provided by Rust‚Äôs standard library rather than\ncoded into the core language, is a growable, mutable, owned, UTF-8 encoded\nstring type. When Rustaceans refer to ‚Äústrings‚Äù in Rust, they might be\nreferring to either the <code class=\"hljs\">String</code> or the string slice <code class=\"hljs\">&amp;str</code> types, not just one\nof those types. Although this section is largely about <code class=\"hljs\">String</code>, both types are\nused heavily in Rust‚Äôs standard library, and both <code class=\"hljs\">String</code> and string slices\nare UTF-8 encoded.</p>\n<h3 id=\"creating-a-new-string\"><a class=\"header\" href=\"#creating-a-new-string\">Creating a New String</a></h3>\n<p>Many of the same operations available with <code class=\"hljs\">Vec&lt;T&gt;</code> are available with <code class=\"hljs\">String</code>\nas well because <code class=\"hljs\">String</code> is actually implemented as a wrapper around a vector\nof bytes with some extra guarantees, restrictions, and capabilities. An example\nof a function that works the same way with <code class=\"hljs\">Vec&lt;T&gt;</code> and <code class=\"hljs\">String</code> is the <code class=\"hljs\">new</code>\nfunction to create an instance, shown in Listing 8-11.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> s = <span class=\"hljs-built_in\">String</span>::new();\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 8-11: Creating a new, empty <code class=\"hljs\">String</code></span></p>\n<p>This line creates a new, empty string called <code class=\"hljs\">s</code>, into which we can then load\ndata. Often, we‚Äôll have some initial data with which we want to start the\nstring. For that, we use the <code class=\"hljs\">to_string</code> method, which is available on any type\nthat implements the <code class=\"hljs\">Display</code> trait, as string literals do. Listing 8-12 shows\ntwo examples.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> data = <span class=\"hljs-string\">\"initial contents\"</span>;\n\n    <span class=\"hljs-keyword\">let</span> s = data.to_string();\n\n    <span class=\"hljs-comment\">// the method also works on a literal directly:</span>\n    <span class=\"hljs-keyword\">let</span> s = <span class=\"hljs-string\">\"initial contents\"</span>.to_string();\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 8-12: Using the <code class=\"hljs\">to_string</code> method to create a\n<code class=\"hljs\">String</code> from a string literal</span></p>\n<p>This code creates a string containing <code class=\"hljs\">initial contents</code>.</p>\n<p>We can also use the function <code class=\"hljs\">String::from</code> to create a <code class=\"hljs\">String</code> from a string\nliteral. The code in Listing 8-13 is equivalent to the code in Listing 8-12\nthat uses <code class=\"hljs\">to_string</code>.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> s = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"initial contents\"</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 8-13: Using the <code class=\"hljs\">String::from</code> function to create\na <code class=\"hljs\">String</code> from a string literal</span></p>\n<p>Because strings are used for so many things, we can use many different generic\nAPIs for strings, providing us with a lot of options. Some of them can seem\nredundant, but they all have their place! In this case, <code class=\"hljs\">String::from</code> and\n<code class=\"hljs\">to_string</code> do the same thing, so which one you choose is a matter of style and\nreadability.</p>\n<p>Remember that strings are UTF-8 encoded, so we can include any properly encoded\ndata in them, as shown in Listing 8-14.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> hello = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"ÿßŸÑÿ≥ŸÑÿßŸÖ ÿπŸÑŸäŸÉŸÖ\"</span>);\n    <span class=\"hljs-keyword\">let</span> hello = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Dobr√Ω den\"</span>);\n    <span class=\"hljs-keyword\">let</span> hello = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Hello\"</span>);\n    <span class=\"hljs-keyword\">let</span> hello = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"◊©◊ú◊ï◊ù\"</span>);\n    <span class=\"hljs-keyword\">let</span> hello = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"‡§®‡§Æ‡§∏‡•ç‡§§‡•á\"</span>);\n    <span class=\"hljs-keyword\">let</span> hello = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"„Åì„Çì„Å´„Å°„ÅØ\"</span>);\n    <span class=\"hljs-keyword\">let</span> hello = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"ÏïàÎÖïÌïòÏÑ∏Ïöî\"</span>);\n    <span class=\"hljs-keyword\">let</span> hello = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"‰Ω†Â•Ω\"</span>);\n    <span class=\"hljs-keyword\">let</span> hello = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Ol√°\"</span>);\n    <span class=\"hljs-keyword\">let</span> hello = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ\"</span>);\n    <span class=\"hljs-keyword\">let</span> hello = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Hola\"</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 8-14: Storing greetings in different languages in\nstrings</span></p>\n<p>All of these are valid <code class=\"hljs\">String</code> values.</p>\n<h3 id=\"updating-a-string\"><a class=\"header\" href=\"#updating-a-string\">Updating a String</a></h3>\n<p>A <code class=\"hljs\">String</code> can grow in size and its contents can change, just like the contents\nof a <code class=\"hljs\">Vec&lt;T&gt;</code>, if you push more data into it. In addition, you can conveniently\nuse the <code class=\"hljs\">+</code> operator or the <code class=\"hljs\">format!</code> macro to concatenate <code class=\"hljs\">String</code> values.</p>\n<h4 id=\"appending-to-a-string-with-push_str-and-push\"><a class=\"header\" href=\"#appending-to-a-string-with-push_str-and-push\">Appending to a String with <code>push_str</code> and <code>push</code></a></h4>\n<p>We can grow a <code class=\"hljs\">String</code> by using the <code class=\"hljs\">push_str</code> method to append a string slice,\nas shown in Listing 8-15.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> s = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"foo\"</span>);\n    s.push_str(<span class=\"hljs-string\">\"bar\"</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 8-15: Appending a string slice to a <code class=\"hljs\">String</code>\nusing the <code class=\"hljs\">push_str</code> method</span></p>\n<p>After these two lines, <code class=\"hljs\">s</code> will contain <code class=\"hljs\">foobar</code>. The <code class=\"hljs\">push_str</code> method takes a\nstring slice because we don‚Äôt necessarily want to take ownership of the\nparameter. For example, in the code in Listing 8-16, we want to be able to use\n<code class=\"hljs\">s2</code> after appending its contents to <code class=\"hljs\">s1</code>.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> s1 = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"foo\"</span>);\n    <span class=\"hljs-keyword\">let</span> s2 = <span class=\"hljs-string\">\"bar\"</span>;\n    s1.push_str(s2);\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"s2 is {s2}\"</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 8-16: Using a string slice after appending its\ncontents to a <code class=\"hljs\">String</code></span></p>\n<p>If the <code class=\"hljs\">push_str</code> method took ownership of <code class=\"hljs\">s2</code>, we wouldn‚Äôt be able to print\nits value on the last line. However, this code works as we‚Äôd expect!</p>\n<p>The <code class=\"hljs\">push</code> method takes a single character as a parameter and adds it to the\n<code class=\"hljs\">String</code>. Listing 8-17 adds the letter <em>l</em> to a <code class=\"hljs\">String</code> using the <code class=\"hljs\">push</code>\nmethod.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> s = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"lo\"</span>);\n    s.push(<span class=\"hljs-string\">'l'</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 8-17: Adding one character to a <code class=\"hljs\">String</code> value\nusing <code class=\"hljs\">push</code></span></p>\n<p>As a result, <code class=\"hljs\">s</code> will contain <code class=\"hljs\">lol</code>.</p>\n<h4 id=\"concatenation-with-the--operator-or-the-format-macro\"><a class=\"header\" href=\"#concatenation-with-the--operator-or-the-format-macro\">Concatenation with the <code>+</code> Operator or the <code>format!</code> Macro</a></h4>\n<p>Often, you‚Äôll want to combine two existing strings. One way to do so is to use\nthe <code class=\"hljs\">+</code> operator, as shown in Listing 8-18.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> s1 = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Hello, \"</span>);\n    <span class=\"hljs-keyword\">let</span> s2 = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"world!\"</span>);\n    <span class=\"hljs-keyword\">let</span> s3 = s1 + &amp;s2; <span class=\"hljs-comment\">// note s1 has been moved here and can no longer be used</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 8-18: Using the <code class=\"hljs\">+</code> operator to combine two\n<code class=\"hljs\">String</code> values into a new <code class=\"hljs\">String</code> value</span></p>\n<p>The string <code class=\"hljs\">s3</code> will contain <code class=\"hljs\">Hello, world!</code>. The reason <code class=\"hljs\">s1</code> is no longer\nvalid after the addition, and the reason we used a reference to <code class=\"hljs\">s2</code>, has to do\nwith the signature of the method that‚Äôs called when we use the <code class=\"hljs\">+</code> operator.\nThe <code class=\"hljs\">+</code> operator uses the <code class=\"hljs\">add</code> method, whose signature looks something like\nthis:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add</span></span>(<span class=\"hljs-keyword\">self</span>, s: &amp;<span class=\"hljs-built_in\">str</span>) -&gt; <span class=\"hljs-built_in\">String</span> {</code></pre>\n<p>In the standard library, you‚Äôll see <code class=\"hljs\">add</code> defined using generics and associated\ntypes. Here, we‚Äôve substituted in concrete types, which is what happens when we\ncall this method with <code class=\"hljs\">String</code> values. We‚Äôll discuss generics in Chapter 10.\nThis signature gives us the clues we need in order to understand the tricky\nbits of the <code class=\"hljs\">+</code> operator.</p>\n<p>First, <code class=\"hljs\">s2</code> has an <code class=\"hljs\">&amp;</code>, meaning that we‚Äôre adding a <em>reference</em> of the second\nstring to the first string. This is because of the <code class=\"hljs\">s</code> parameter in the <code class=\"hljs\">add</code>\nfunction: we can only add a <code class=\"hljs\">&amp;str</code> to a <code class=\"hljs\">String</code>; we can‚Äôt add two <code class=\"hljs\">String</code>\nvalues together. But wait‚Äîthe type of <code class=\"hljs\">&amp;s2</code> is <code class=\"hljs\">&amp;String</code>, not <code class=\"hljs\">&amp;str</code>, as\nspecified in the second parameter to <code class=\"hljs\">add</code>. So why does Listing 8-18 compile?</p>\n<p>The reason we‚Äôre able to use <code class=\"hljs\">&amp;s2</code> in the call to <code class=\"hljs\">add</code> is that the compiler\ncan <em>coerce</em> the <code class=\"hljs\">&amp;String</code> argument into a <code class=\"hljs\">&amp;str</code>. When we call the <code class=\"hljs\">add</code>\nmethod, Rust uses a <em>deref coercion</em>, which here turns <code class=\"hljs\">&amp;s2</code> into <code class=\"hljs\">&amp;s2[..]</code>.\nWe‚Äôll discuss deref coercion in more depth in Chapter 15. Because <code class=\"hljs\">add</code> does\nnot take ownership of the <code class=\"hljs\">s</code> parameter, <code class=\"hljs\">s2</code> will still be a valid <code class=\"hljs\">String</code>\nafter this operation.</p>\n<p>Second, we can see in the signature that <code class=\"hljs\">add</code> takes ownership of <code class=\"hljs\">self</code>\nbecause <code class=\"hljs\">self</code> does <em>not</em> have an <code class=\"hljs\">&amp;</code>. This means <code class=\"hljs\">s1</code> in Listing 8-18 will be\nmoved into the <code class=\"hljs\">add</code> call and will no longer be valid after that. So, although\n<code class=\"hljs\">let s3 = s1 + &amp;s2;</code> looks like it will copy both strings and create a new one,\nthis statement actually takes ownership of <code class=\"hljs\">s1</code>, appends a copy of the contents\nof <code class=\"hljs\">s2</code>, and then returns ownership of the result. In other words, it looks\nlike it‚Äôs making a lot of copies, but it isn‚Äôt; the implementation is more\nefficient than copying.</p>\n<p>If we need to concatenate multiple strings, the behavior of the <code class=\"hljs\">+</code> operator\ngets unwieldy:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> s1 = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"tic\"</span>);\n    <span class=\"hljs-keyword\">let</span> s2 = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"tac\"</span>);\n    <span class=\"hljs-keyword\">let</span> s3 = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"toe\"</span>);\n\n    <span class=\"hljs-keyword\">let</span> s = s1 + <span class=\"hljs-string\">\"-\"</span> + &amp;s2 + <span class=\"hljs-string\">\"-\"</span> + &amp;s3;\n<span class=\"boring\">}</span></code></pre></pre>\n<p>At this point, <code class=\"hljs\">s</code> will be <code class=\"hljs\">tic-tac-toe</code>. With all of the <code class=\"hljs\">+</code> and <code class=\"hljs\">\"</code>\ncharacters, it‚Äôs difficult to see what‚Äôs going on. For combining strings in\nmore complicated ways, we can instead use the <code class=\"hljs\">format!</code> macro:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> s1 = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"tic\"</span>);\n    <span class=\"hljs-keyword\">let</span> s2 = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"tac\"</span>);\n    <span class=\"hljs-keyword\">let</span> s3 = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"toe\"</span>);\n\n    <span class=\"hljs-keyword\">let</span> s = <span class=\"hljs-built_in\">format!</span>(<span class=\"hljs-string\">\"{s1}-{s2}-{s3}\"</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<p>This code also sets <code class=\"hljs\">s</code> to <code class=\"hljs\">tic-tac-toe</code>. The <code class=\"hljs\">format!</code> macro works like\n<code class=\"hljs\">println!</code>, but instead of printing the output to the screen, it returns a\n<code class=\"hljs\">String</code> with the contents. The version of the code using <code class=\"hljs\">format!</code> is much\neasier to read, and the code generated by the <code class=\"hljs\">format!</code> macro uses references\nso that this call doesn‚Äôt take ownership of any of its parameters.</p>\n<h3 id=\"indexing-into-strings\"><a class=\"header\" href=\"#indexing-into-strings\">Indexing into Strings</a></h3>\n<p>In many other programming languages, accessing individual characters in a\nstring by referencing them by index is a valid and common operation. However,\nif you try to access parts of a <code class=\"hljs\">String</code> using indexing syntax in Rust, you‚Äôll\nget an error. Consider the invalid code in Listing 8-19.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-small\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> s1 = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"hello\"</span>);\n    <span class=\"hljs-keyword\">let</span> h = s1[<span class=\"hljs-number\">0</span>];\n<span class=\"boring\">}</span></code></pre>\n<p><span class=\"caption\">Listing 8-19: Attempting to use indexing syntax with a\nString</span></p>\n<p>This code will result in the following error:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling collections v0.1.0 (file:///projects/collections)\nerror[E0277]: the type `str` cannot be indexed by `{integer}`\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/main.rs:3:16</span>\n  |\n3 |     let h = s1[0];\n  |                ^ string indices are ranges of `usize`\n  |\n  = help: the trait `SliceIndex&lt;str&gt;` is not implemented for `{integer}`, which is required by `String: Index&lt;_&gt;`\n  = note: you can use `.chars().nth()` or `.bytes().nth()`\n          for more information, see chapter 8 in The Book: &lt;https://doc.rust-lang.org/book/ch08-02-strings.html#indexing-into-strings&gt;\n  = help: the trait `SliceIndex&lt;[_]&gt;` is implemented for `usize`\n  = help: for that trait implementation, expected `[_]`, found `str`\n  = note: required for `String` to implement `Index&lt;{integer}&gt;`\n\nFor more information about this error, try `rustc --explain E0277`.\nerror: could not compile `collections` (bin \"collections\") due to 1 previous error\n</code></pre>\n<p>The error and the note tell the story: Rust strings don‚Äôt support indexing. But\nwhy not? To answer that question, we need to discuss how Rust stores strings in\nmemory.</p>\n<h4 id=\"internal-representation\"><a class=\"header\" href=\"#internal-representation\">Internal Representation</a></h4>\n<p>A <code class=\"hljs\">String</code> is a wrapper over a <code class=\"hljs\">Vec&lt;u8&gt;</code>. Let‚Äôs look at some of our properly\nencoded UTF-8 example strings from Listing 8-14. First, this one:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> hello = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"ÿßŸÑÿ≥ŸÑÿßŸÖ ÿπŸÑŸäŸÉŸÖ\"</span>);\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> hello = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Dobr√Ω den\"</span>);\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> hello = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Hello\"</span>);\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> hello = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"◊©◊ú◊ï◊ù\"</span>);\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> hello = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"‡§®‡§Æ‡§∏‡•ç‡§§‡•á\"</span>);\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> hello = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"„Åì„Çì„Å´„Å°„ÅØ\"</span>);\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> hello = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"ÏïàÎÖïÌïòÏÑ∏Ïöî\"</span>);\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> hello = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"‰Ω†Â•Ω\"</span>);\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> hello = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Ol√°\"</span>);\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> hello = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ\"</span>);\n</span>    <span class=\"hljs-keyword\">let</span> hello = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Hola\"</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<p>In this case, <code class=\"hljs\">len</code> will be <code class=\"hljs\">4</code>, which means the vector storing the string\n<code class=\"hljs\">\"Hola\"</code> is 4 bytes long. Each of these letters takes one byte when encoded in\nUTF-8. The following line, however, may surprise you (note that this string\nbegins with the capital Cyrillic letter <em>Ze</em>, not the number 3):</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> hello = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"ÿßŸÑÿ≥ŸÑÿßŸÖ ÿπŸÑŸäŸÉŸÖ\"</span>);\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> hello = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Dobr√Ω den\"</span>);\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> hello = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Hello\"</span>);\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> hello = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"◊©◊ú◊ï◊ù\"</span>);\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> hello = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"‡§®‡§Æ‡§∏‡•ç‡§§‡•á\"</span>);\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> hello = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"„Åì„Çì„Å´„Å°„ÅØ\"</span>);\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> hello = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"ÏïàÎÖïÌïòÏÑ∏Ïöî\"</span>);\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> hello = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"‰Ω†Â•Ω\"</span>);\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> hello = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Ol√°\"</span>);\n</span>    <span class=\"hljs-keyword\">let</span> hello = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ\"</span>);\n<span class=\"boring\">    <span class=\"hljs-keyword\">let</span> hello = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Hola\"</span>);\n</span><span class=\"boring\">}</span></code></pre></pre>\n<p>If you were asked how long the string is, you might say 12. In fact, Rust‚Äôs\nanswer is 24: that‚Äôs the number of bytes it takes to encode ‚Äú–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ‚Äù in\nUTF-8, because each Unicode scalar value in that string takes 2 bytes of\nstorage. Therefore, an index into the string‚Äôs bytes will not always correlate\nto a valid Unicode scalar value. To demonstrate, consider this invalid Rust\ncode:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-small\"></a></div><code class=\"language-rust ignore does_not_compile hljs\"><span class=\"hljs-keyword\">let</span> hello = <span class=\"hljs-string\">\"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ\"</span>;\n<span class=\"hljs-keyword\">let</span> answer = &amp;hello[<span class=\"hljs-number\">0</span>];</code></pre>\n<p>You already know that <code class=\"hljs\">answer</code> will not be <code class=\"hljs\">–ó</code>, the first letter. When encoded\nin UTF-8, the first byte of <code class=\"hljs\">–ó</code> is <code class=\"hljs\">208</code> and the second is <code class=\"hljs\">151</code>, so it would\nseem that <code class=\"hljs\">answer</code> should in fact be <code class=\"hljs\">208</code>, but <code class=\"hljs\">208</code> is not a valid character\non its own. Returning <code class=\"hljs\">208</code> is likely not what a user would want if they asked\nfor the first letter of this string; however, that‚Äôs the only data that Rust\nhas at byte index 0. Users generally don‚Äôt want the byte value returned, even\nif the string contains only Latin letters: if <code class=\"hljs\">&amp;\"hello\"[0]</code> were valid code\nthat returned the byte value, it would return <code class=\"hljs\">104</code>, not <code class=\"hljs\">h</code>.</p>\n<p>The answer, then, is that to avoid returning an unexpected value and causing\nbugs that might not be discovered immediately, Rust doesn‚Äôt compile this code\nat all and prevents misunderstandings early in the development process.</p>\n<h4 id=\"bytes-and-scalar-values-and-grapheme-clusters-oh-my\"><a class=\"header\" href=\"#bytes-and-scalar-values-and-grapheme-clusters-oh-my\">Bytes and Scalar Values and Grapheme Clusters! Oh My!</a></h4>\n<p>Another point about UTF-8 is that there are actually three relevant ways to\nlook at strings from Rust‚Äôs perspective: as bytes, scalar values, and grapheme\nclusters (the closest thing to what we would call <em>letters</em>).</p>\n<p>If we look at the Hindi word ‚Äú‡§®‡§Æ‡§∏‡•ç‡§§‡•á‚Äù written in the Devanagari script, it is\nstored as a vector of <code class=\"hljs\">u8</code> values that looks like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">[224, 164, 168, 224, 164, 174, 224, 164, 184, 224, 165, 141, 224, 164, 164,\n224, 165, 135]\n</code></pre>\n<p>That‚Äôs 18 bytes and is how computers ultimately store this data. If we look at\nthem as Unicode scalar values, which are what Rust‚Äôs <code class=\"hljs\">char</code> type is, those\nbytes look like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">['‡§®', '‡§Æ', '‡§∏', '‡•ç', '‡§§', '‡•á']\n</code></pre>\n<p>There are six <code class=\"hljs\">char</code> values here, but the fourth and sixth are not letters:\nthey‚Äôre diacritics that don‚Äôt make sense on their own. Finally, if we look at\nthem as grapheme clusters, we‚Äôd get what a person would call the four letters\nthat make up the Hindi word:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">[\"‡§®\", \"‡§Æ\", \"‡§∏‡•ç\", \"‡§§‡•á\"]\n</code></pre>\n<p>Rust provides different ways of interpreting the raw string data that computers\nstore so that each program can choose the interpretation it needs, no matter\nwhat human language the data is in.</p>\n<p>A final reason Rust doesn‚Äôt allow us to index into a <code class=\"hljs\">String</code> to get a\ncharacter is that indexing operations are expected to always take constant time\n(O(1)). But it isn‚Äôt possible to guarantee that performance with a <code class=\"hljs\">String</code>,\nbecause Rust would have to walk through the contents from the beginning to the\nindex to determine how many valid characters there were.</p>\n<h3 id=\"slicing-strings\"><a class=\"header\" href=\"#slicing-strings\">Slicing Strings</a></h3>\n<p>Indexing into a string is often a bad idea because it‚Äôs not clear what the\nreturn type of the string-indexing operation should be: a byte value, a\ncharacter, a grapheme cluster, or a string slice. If you really need to use\nindices to create string slices, therefore, Rust asks you to be more specific.</p>\n<p>Rather than indexing using <code class=\"hljs\">[]</code> with a single number, you can use <code class=\"hljs\">[]</code> with a\nrange to create a string slice containing particular bytes:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> hello = <span class=\"hljs-string\">\"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ\"</span>;\n\n<span class=\"hljs-keyword\">let</span> s = &amp;hello[<span class=\"hljs-number\">0</span>..<span class=\"hljs-number\">4</span>];\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Here, <code class=\"hljs\">s</code> will be a <code class=\"hljs\">&amp;str</code> that contains the first four bytes of the string.\nEarlier, we mentioned that each of these characters was two bytes, which means\n<code class=\"hljs\">s</code> will be <code class=\"hljs\">–ó–¥</code>.</p>\n<p>If we were to try to slice only part of a character‚Äôs bytes with something like\n<code class=\"hljs\">&amp;hello[0..1]</code>, Rust would panic at runtime in the same way as if an invalid\nindex were accessed in a vector:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling collections v0.1.0 (file:///projects/collections)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.43s\n     Running `target/debug/collections`\nthread 'main' panicked at src/main.rs:4:19:\nbyte index 1 is not a char boundary; it is inside '–ó' (bytes 0..2) of `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ`\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre>\n<p>You should use caution when creating string slices with ranges, because doing\nso can crash your program.</p>\n<h3 id=\"methods-for-iterating-over-strings\"><a class=\"header\" href=\"#methods-for-iterating-over-strings\">Methods for Iterating Over Strings</a></h3>\n<p>The best way to operate on pieces of strings is to be explicit about whether\nyou want characters or bytes. For individual Unicode scalar values, use the\n<code class=\"hljs\">chars</code> method. Calling <code class=\"hljs\">chars</code> on ‚Äú–ó–¥‚Äù separates out and returns two values of\ntype <code class=\"hljs\">char</code>, and you can iterate over the result to access each element:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> <span class=\"hljs-string\">\"–ó–¥\"</span>.chars() {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{c}\"</span>);\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>This code will print the following:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">–ó\n–¥\n</code></pre>\n<p>Alternatively, the <code class=\"hljs\">bytes</code> method returns each raw byte, which might be\nappropriate for your domain:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">for</span> b <span class=\"hljs-keyword\">in</span> <span class=\"hljs-string\">\"–ó–¥\"</span>.bytes() {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{b}\"</span>);\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>This code will print the four bytes that make up this string:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">208\n151\n208\n180\n</code></pre>\n<p>But be sure to remember that valid Unicode scalar values may be made up of more\nthan one byte.</p>\n<p>Getting grapheme clusters from strings, as with the Devanagari script, is\ncomplex, so this functionality is not provided by the standard library. Crates\nare available on <a href=\"https://crates.io/\">crates.io</a><!-- ignore --> if this is the\nfunctionality you need.</p>\n<h3 id=\"strings-are-not-so-simple\"><a class=\"header\" href=\"#strings-are-not-so-simple\">Strings Are Not So Simple</a></h3>\n<p>To summarize, strings are complicated. Different programming languages make\ndifferent choices about how to present this complexity to the programmer. Rust\nhas chosen to make the correct handling of <code class=\"hljs\">String</code> data the default behavior\nfor all Rust programs, which means programmers have to put more thought into\nhandling UTF-8 data up front. This trade-off exposes more of the complexity of\nstrings than is apparent in other programming languages, but it prevents you\nfrom having to handle errors involving non-ASCII characters later in your\ndevelopment life cycle.</p>\n<p>The good news is that the standard library offers a lot of functionality built\noff the <code class=\"hljs\">String</code> and <code class=\"hljs\">&amp;str</code> types to help handle these complex situations\ncorrectly. Be sure to check out the documentation for useful methods like\n<code class=\"hljs\">contains</code> for searching in a string and <code class=\"hljs\">replace</code> for substituting parts of a\nstring with another string.</p>\n<p>Let‚Äôs switch to something a bit less complex: hash maps!</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"storing-keys-with-associated-values-in-hash-maps\"><a class=\"header\" href=\"#storing-keys-with-associated-values-in-hash-maps\">Storing Keys with Associated Values in Hash Maps</a></h2>\n<p>The last of our common collections is the <em>hash map</em>. The type <code class=\"hljs\">HashMap&lt;K, V&gt;</code>\nstores a mapping of keys of type <code class=\"hljs\">K</code> to values of type <code class=\"hljs\">V</code> using a <em>hashing\nfunction</em>, which determines how it places these keys and values into memory.\nMany programming languages support this kind of data structure, but they often\nuse a different name, such as <em>hash</em>, <em>map</em>, <em>object</em>, <em>hash table</em>,\n<em>dictionary</em>, or <em>associative array</em>, just to name a few.</p>\n<p>Hash maps are useful when you want to look up data not by using an index, as\nyou can with vectors, but by using a key that can be of any type. For example,\nin a game, you could keep track of each team‚Äôs score in a hash map in which\neach key is a team‚Äôs name and the values are each team‚Äôs score. Given a team\nname, you can retrieve its score.</p>\n<p>We‚Äôll go over the basic API of hash maps in this section, but many more goodies\nare hiding in the functions defined on <code class=\"hljs\">HashMap&lt;K, V&gt;</code> by the standard library.\nAs always, check the standard library documentation for more information.</p>\n<h3 id=\"creating-a-new-hash-map\"><a class=\"header\" href=\"#creating-a-new-hash-map\">Creating a New Hash Map</a></h3>\n<p>One way to create an empty hash map is to use <code class=\"hljs\">new</code> and to add elements with\n<code class=\"hljs\">insert</code>. In Listing 8-20, we‚Äôre keeping track of the scores of two teams whose\nnames are <em>Blue</em> and <em>Yellow</em>. The Blue team starts with 10 points, and the\nYellow team starts with 50.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">use</span> std::collections::HashMap;\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> scores = HashMap::new();\n\n    scores.insert(<span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Blue\"</span>), <span class=\"hljs-number\">10</span>);\n    scores.insert(<span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Yellow\"</span>), <span class=\"hljs-number\">50</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 8-20: Creating a new hash map and inserting some\nkeys and values</span></p>\n<p>Note that we need to first <code class=\"hljs\">use</code> the <code class=\"hljs\">HashMap</code> from the collections portion of\nthe standard library. Of our three common collections, this one is the least\noften used, so it‚Äôs not included in the features brought into scope\nautomatically in the prelude. Hash maps also have less support from the\nstandard library; there‚Äôs no built-in macro to construct them, for example.</p>\n<p>Just like vectors, hash maps store their data on the heap. This <code class=\"hljs\">HashMap</code> has\nkeys of type <code class=\"hljs\">String</code> and values of type <code class=\"hljs\">i32</code>. Like vectors, hash maps are\nhomogeneous: all of the keys must have the same type, and all of the values\nmust have the same type.</p>\n<h3 id=\"accessing-values-in-a-hash-map\"><a class=\"header\" href=\"#accessing-values-in-a-hash-map\">Accessing Values in a Hash Map</a></h3>\n<p>We can get a value out of the hash map by providing its key to the <code class=\"hljs\">get</code>\nmethod, as shown in Listing 8-21.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">use</span> std::collections::HashMap;\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> scores = HashMap::new();\n\n    scores.insert(<span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Blue\"</span>), <span class=\"hljs-number\">10</span>);\n    scores.insert(<span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Yellow\"</span>), <span class=\"hljs-number\">50</span>);\n\n    <span class=\"hljs-keyword\">let</span> team_name = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Blue\"</span>);\n    <span class=\"hljs-keyword\">let</span> score = scores.get(&amp;team_name).copied().unwrap_or(<span class=\"hljs-number\">0</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 8-21: Accessing the score for the Blue team\nstored in the hash map</span></p>\n<p>Here, <code class=\"hljs\">score</code> will have the value that‚Äôs associated with the Blue team, and the\nresult will be <code class=\"hljs\">10</code>. The <code class=\"hljs\">get</code> method returns an <code class=\"hljs\">Option&lt;&amp;V&gt;</code>; if there‚Äôs no\nvalue for that key in the hash map, <code class=\"hljs\">get</code> will return <code class=\"hljs\">None</code>. This program\nhandles the <code class=\"hljs\">Option</code> by calling <code class=\"hljs\">copied</code> to get an <code class=\"hljs\">Option&lt;i32&gt;</code> rather than an\n<code class=\"hljs\">Option&lt;&amp;i32&gt;</code>, then <code class=\"hljs\">unwrap_or</code> to set <code class=\"hljs\">score</code> to zero if <code class=\"hljs\">scores</code> doesn‚Äôt\nhave an entry for the key.</p>\n<p>We can iterate over each key‚Äìvalue pair in a hash map in a similar manner as we\ndo with vectors, using a <code class=\"hljs\">for</code> loop:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">use</span> std::collections::HashMap;\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> scores = HashMap::new();\n\n    scores.insert(<span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Blue\"</span>), <span class=\"hljs-number\">10</span>);\n    scores.insert(<span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Yellow\"</span>), <span class=\"hljs-number\">50</span>);\n\n    <span class=\"hljs-keyword\">for</span> (key, value) <span class=\"hljs-keyword\">in</span> &amp;scores {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{key}: {value}\"</span>);\n    }\n<span class=\"boring\">}</span></code></pre></pre>\n<p>This code will print each pair in an arbitrary order:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">Yellow: 50\nBlue: 10\n</code></pre>\n<h3 id=\"hash-maps-and-ownership\"><a class=\"header\" href=\"#hash-maps-and-ownership\">Hash Maps and Ownership</a></h3>\n<p>For types that implement the <code class=\"hljs\">Copy</code> trait, like <code class=\"hljs\">i32</code>, the values are copied\ninto the hash map. For owned values like <code class=\"hljs\">String</code>, the values will be moved and\nthe hash map will be the owner of those values, as demonstrated in Listing 8-22.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">use</span> std::collections::HashMap;\n\n    <span class=\"hljs-keyword\">let</span> field_name = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Favorite color\"</span>);\n    <span class=\"hljs-keyword\">let</span> field_value = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Blue\"</span>);\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> map = HashMap::new();\n    map.insert(field_name, field_value);\n    <span class=\"hljs-comment\">// field_name and field_value are invalid at this point, try using them and</span>\n    <span class=\"hljs-comment\">// see what compiler error you get!</span>\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 8-22: Showing that keys and values are owned by\nthe hash map once they‚Äôre inserted</span></p>\n<p>We aren‚Äôt able to use the variables <code class=\"hljs\">field_name</code> and <code class=\"hljs\">field_value</code> after\nthey‚Äôve been moved into the hash map with the call to <code class=\"hljs\">insert</code>.</p>\n<p>If we insert references to values into the hash map, the values won‚Äôt be moved\ninto the hash map. The values that the references point to must be valid for at\nleast as long as the hash map is valid. We‚Äôll talk more about these issues in\nthe <a href=\"ch10-03-lifetime-syntax.html#validating-references-with-lifetimes\">‚ÄúValidating References with\nLifetimes‚Äù</a><!-- ignore --> section in\nChapter 10.</p>\n<h3 id=\"updating-a-hash-map\"><a class=\"header\" href=\"#updating-a-hash-map\">Updating a Hash Map</a></h3>\n<p>Although the number of key and value pairs is growable, each unique key can\nonly have one value associated with it at a time (but not vice versa: for\nexample, both the Blue team and the Yellow team could have the value <code class=\"hljs\">10</code>\nstored in the <code class=\"hljs\">scores</code> hash map).</p>\n<p>When you want to change the data in a hash map, you have to decide how to\nhandle the case when a key already has a value assigned. You could replace the\nold value with the new value, completely disregarding the old value. You could\nkeep the old value and ignore the new value, only adding the new value if the\nkey <em>doesn‚Äôt</em> already have a value. Or you could combine the old value and the\nnew value. Let‚Äôs look at how to do each of these!</p>\n<h4 id=\"overwriting-a-value\"><a class=\"header\" href=\"#overwriting-a-value\">Overwriting a Value</a></h4>\n<p>If we insert a key and a value into a hash map and then insert that same key\nwith a different value, the value associated with that key will be replaced.\nEven though the code in Listing 8-23 calls <code class=\"hljs\">insert</code> twice, the hash map will\nonly contain one key‚Äìvalue pair because we‚Äôre inserting the value for the Blue\nteam‚Äôs key both times.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">use</span> std::collections::HashMap;\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> scores = HashMap::new();\n\n    scores.insert(<span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Blue\"</span>), <span class=\"hljs-number\">10</span>);\n    scores.insert(<span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Blue\"</span>), <span class=\"hljs-number\">25</span>);\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{scores:?}\"</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 8-23: Replacing a value stored with a particular\nkey</span></p>\n<p>This code will print <code class=\"hljs\">{\"Blue\": 25}</code>. The original value of <code class=\"hljs\">10</code> has been\noverwritten.</p>\n<!-- Old headings. Do not remove or links may break. -->\n<p><a id=\"only-inserting-a-value-if-the-key-has-no-value\"></a></p>\n<h4 id=\"adding-a-key-and-value-only-if-a-key-isnt-present\"><a class=\"header\" href=\"#adding-a-key-and-value-only-if-a-key-isnt-present\">Adding a Key and Value Only If a Key Isn‚Äôt Present</a></h4>\n<p>It‚Äôs common to check whether a particular key already exists in the hash map\nwith a value and then to take the following actions: if the key does exist in\nthe hash map, the existing value should remain the way it is; if the key\ndoesn‚Äôt exist, insert it and a value for it.</p>\n<p>Hash maps have a special API for this called <code class=\"hljs\">entry</code> that takes the key you\nwant to check as a parameter. The return value of the <code class=\"hljs\">entry</code> method is an enum\ncalled <code class=\"hljs\">Entry</code> that represents a value that might or might not exist. Let‚Äôs say\nwe want to check whether the key for the Yellow team has a value associated\nwith it. If it doesn‚Äôt, we want to insert the value <code class=\"hljs\">50</code>, and the same for the\nBlue team. Using the <code class=\"hljs\">entry</code> API, the code looks like Listing 8-24.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">use</span> std::collections::HashMap;\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> scores = HashMap::new();\n    scores.insert(<span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Blue\"</span>), <span class=\"hljs-number\">10</span>);\n\n    scores.entry(<span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Yellow\"</span>)).or_insert(<span class=\"hljs-number\">50</span>);\n    scores.entry(<span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Blue\"</span>)).or_insert(<span class=\"hljs-number\">50</span>);\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{scores:?}\"</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 8-24: Using the <code class=\"hljs\">entry</code> method to only insert if\nthe key does not already have a value</span></p>\n<p>The <code class=\"hljs\">or_insert</code> method on <code class=\"hljs\">Entry</code> is defined to return a mutable reference to\nthe value for the corresponding <code class=\"hljs\">Entry</code> key if that key exists, and if not, it\ninserts the parameter as the new value for this key and returns a mutable\nreference to the new value. This technique is much cleaner than writing the\nlogic ourselves and, in addition, plays more nicely with the borrow checker.</p>\n<p>Running the code in Listing 8-24 will print <code class=\"hljs\">{\"Yellow\": 50, \"Blue\": 10}</code>. The\nfirst call to <code class=\"hljs\">entry</code> will insert the key for the Yellow team with the value\n<code class=\"hljs\">50</code> because the Yellow team doesn‚Äôt have a value already. The second call to\n<code class=\"hljs\">entry</code> will not change the hash map because the Blue team already has the\nvalue <code class=\"hljs\">10</code>.</p>\n<h4 id=\"updating-a-value-based-on-the-old-value\"><a class=\"header\" href=\"#updating-a-value-based-on-the-old-value\">Updating a Value Based on the Old Value</a></h4>\n<p>Another common use case for hash maps is to look up a key‚Äôs value and then\nupdate it based on the old value. For instance, Listing 8-25 shows code that\ncounts how many times each word appears in some text. We use a hash map with\nthe words as keys and increment the value to keep track of how many times we‚Äôve\nseen that word. If it‚Äôs the first time we‚Äôve seen a word, we‚Äôll first insert\nthe value <code class=\"hljs\">0</code>.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">use</span> std::collections::HashMap;\n\n    <span class=\"hljs-keyword\">let</span> text = <span class=\"hljs-string\">\"hello world wonderful world\"</span>;\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> map = HashMap::new();\n\n    <span class=\"hljs-keyword\">for</span> word <span class=\"hljs-keyword\">in</span> text.split_whitespace() {\n        <span class=\"hljs-keyword\">let</span> count = map.entry(word).or_insert(<span class=\"hljs-number\">0</span>);\n        *count += <span class=\"hljs-number\">1</span>;\n    }\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{map:?}\"</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 8-25: Counting occurrences of words using a hash\nmap that stores words and counts</span></p>\n<p>This code will print <code class=\"hljs\">{\"world\": 2, \"hello\": 1, \"wonderful\": 1}</code>. You might see\nthe same key‚Äìvalue pairs printed in a different order: recall from the\n<a href=\"ch08-03-hash-maps.html#accessing-values-in-a-hash-map\">‚ÄúAccessing Values in a Hash Map‚Äù</a><!-- ignore --> section that\niterating over a hash map happens in an arbitrary order.</p>\n<p>The <code class=\"hljs\">split_whitespace</code> method returns an iterator over subslices, separated by\nwhitespace, of the value in <code class=\"hljs\">text</code>. The <code class=\"hljs\">or_insert</code> method returns a mutable\nreference (<code class=\"hljs\">&amp;mut V</code>) to the value for the specified key. Here, we store that\nmutable reference in the <code class=\"hljs\">count</code> variable, so in order to assign to that value,\nwe must first dereference <code class=\"hljs\">count</code> using the asterisk (<code class=\"hljs\">*</code>). The mutable\nreference goes out of scope at the end of the <code class=\"hljs\">for</code> loop, so all of these\nchanges are safe and allowed by the borrowing rules.</p>\n<h3 id=\"hashing-functions\"><a class=\"header\" href=\"#hashing-functions\">Hashing Functions</a></h3>\n<p>By default, <code class=\"hljs\">HashMap</code> uses a hashing function called <em>SipHash</em> that can provide\nresistance to denial-of-service (DoS) attacks involving hash\ntables<sup class=\"footnote-reference\"><a href=\"#siphash\">1</a></sup><!-- ignore -->. This is not the fastest hashing algorithm\navailable, but the trade-off for better security that comes with the drop in\nperformance is worth it. If you profile your code and find that the default\nhash function is too slow for your purposes, you can switch to another function\nby specifying a different hasher. A <em>hasher</em> is a type that implements the\n<code class=\"hljs\">BuildHasher</code> trait. We‚Äôll talk about traits and how to implement them in\n<a href=\"ch10-02-traits.html\">Chapter 10</a><!-- ignore -->. You don‚Äôt necessarily have to implement\nyour own hasher from scratch; <a href=\"https://crates.io/\">crates.io</a><!-- ignore -->\nhas libraries shared by other Rust users that provide hashers implementing many\ncommon hashing algorithms.</p>\n<div class=\"footnote-definition\" id=\"siphash\"><sup class=\"footnote-definition-label\">1</sup>\n<p><a href=\"https://en.wikipedia.org/wiki/SipHash\">https://en.wikipedia.org/wiki/SipHash</a></p>\n</div>\n<h2 id=\"summary-7\"><a class=\"header\" href=\"#summary-7\">Summary</a></h2>\n<p>Vectors, strings, and hash maps will provide a large amount of functionality\nnecessary in programs when you need to store, access, and modify data. Here are\nsome exercises you should now be equipped to solve:</p>\n<ol>\n<li>Given a list of integers, use a vector and return the median (when sorted,\nthe value in the middle position) and mode (the value that occurs most\noften; a hash map will be helpful here) of the list.</li>\n<li>Convert strings to pig latin. The first consonant of each word is moved to\nthe end of the word and <em>ay</em> is added, so <em>first</em> becomes <em>irst-fay</em>. Words\nthat start with a vowel have <em>hay</em> added to the end instead (<em>apple</em> becomes\n<em>apple-hay</em>). Keep in mind the details about UTF-8 encoding!</li>\n<li>Using a hash map and vectors, create a text interface to allow a user to add\nemployee names to a department in a company; for example, ‚ÄúAdd Sally to\nEngineering‚Äù or ‚ÄúAdd Amir to Sales.‚Äù Then let the user retrieve a list of all\npeople in a department or all people in the company by department, sorted\nalphabetically.</li>\n</ol>\n<p>The standard library API documentation describes methods that vectors, strings,\nand hash maps have that will be helpful for these exercises!</p>\n<p>We‚Äôre getting into more complex programs in which operations can fail, so it‚Äôs\na perfect time to discuss error handling. We‚Äôll do that next!</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"error-handling\"><a class=\"header\" href=\"#error-handling\">Error Handling</a></h1>\n<p>Errors are a fact of life in software, so Rust has a number of features for\nhandling situations in which something goes wrong. In many cases, Rust requires\nyou to acknowledge the possibility of an error and take some action before your\ncode will compile. This requirement makes your program more robust by ensuring\nthat you‚Äôll discover errors and handle them appropriately before you‚Äôve\ndeployed your code to production!</p>\n<p>Rust groups errors into two major categories: <em>recoverable</em> and <em>unrecoverable</em>\nerrors. For a recoverable error, such as a <em>file not found</em> error, we most\nlikely just want to report the problem to the user and retry the operation.\nUnrecoverable errors are always symptoms of bugs, such as trying to access a\nlocation beyond the end of an array, and so we want to immediately stop the\nprogram.</p>\n<p>Most languages don‚Äôt distinguish between these two kinds of errors and handle\nboth in the same way, using mechanisms such as exceptions. Rust doesn‚Äôt have\nexceptions. Instead, it has the type <code class=\"hljs\">Result&lt;T, E&gt;</code> for recoverable errors and\nthe <code class=\"hljs\">panic!</code> macro that stops execution when the program encounters an\nunrecoverable error. This chapter covers calling <code class=\"hljs\">panic!</code> first and then talks\nabout returning <code class=\"hljs\">Result&lt;T, E&gt;</code> values. Additionally, we‚Äôll explore\nconsiderations when deciding whether to try to recover from an error or to stop\nexecution.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"unrecoverable-errors-with-panic\"><a class=\"header\" href=\"#unrecoverable-errors-with-panic\">Unrecoverable Errors with <code>panic!</code></a></h2>\n<p>Sometimes bad things happen in your code, and there‚Äôs nothing you can do about\nit. In these cases, Rust has the <code class=\"hljs\">panic!</code> macro. There are two ways to cause a\npanic in practice: by taking an action that causes our code to panic (such as\naccessing an array past the end) or by explicitly calling the <code class=\"hljs\">panic!</code> macro.\nIn both cases, we cause a panic in our program. By default, these panics will\nprint a failure message, unwind, clean up the stack, and quit. Via an\nenvironment variable, you can also have Rust display the call stack when a\npanic occurs to make it easier to track down the source of the panic.</p>\n<section class=\"note\" aria-role=\"note\">\n<h3 id=\"unwinding-the-stack-or-aborting-in-response-to-a-panic\"><a class=\"header\" href=\"#unwinding-the-stack-or-aborting-in-response-to-a-panic\">Unwinding the Stack or Aborting in Response to a Panic</a></h3>\n<p>By default, when a panic occurs the program starts <em>unwinding</em>, which means\nRust walks back up the stack and cleans up the data from each function it\nencounters. However, walking back and cleaning up is a lot of work. Rust,\ntherefore, allows you to choose the alternative of immediately <em>aborting</em>,\nwhich ends the program without cleaning up.</p>\n<p>Memory that the program was using will then need to be cleaned up by the\noperating system. If in your project you need to make the resultant binary as\nsmall as possible, you can switch from unwinding to aborting upon a panic by\nadding <code class=\"hljs\">panic = 'abort'</code> to the appropriate <code class=\"hljs\">[profile]</code> sections in your\n<em>Cargo.toml</em> file. For example, if you want to abort on panic in release mode,\nadd this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[profile.release]</span>\n<span class=\"hljs-attr\">panic</span> = <span class=\"hljs-string\">'abort'</span>\n</code></pre>\n</section>\n<p>Let‚Äôs try calling <code class=\"hljs\">panic!</code> in a simple program:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/panics.svg\" title=\"This code panics!\" class=\"ferris ferris-small\"></a></div><code class=\"language-rust should_panic panics hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">\"crash and burn\"</span>);\n}</code></pre></pre>\n<p>When you run the program, you‚Äôll see something like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling panic v0.1.0 (file:///projects/panic)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.25s\n     Running `target/debug/panic`\nthread 'main' panicked at src/main.rs:2:5:\ncrash and burn\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre>\n<p>The call to <code class=\"hljs\">panic!</code> causes the error message contained in the last two lines.\nThe first line shows our panic message and the place in our source code where\nthe panic occurred: <em>src/main.rs:2:5</em> indicates that it‚Äôs the second line,\nfifth character of our <em>src/main.rs</em> file.</p>\n<p>In this case, the line indicated is part of our code, and if we go to that\nline, we see the <code class=\"hljs\">panic!</code> macro call. In other cases, the <code class=\"hljs\">panic!</code> call might\nbe in code that our code calls, and the filename and line number reported by\nthe error message will be someone else‚Äôs code where the <code class=\"hljs\">panic!</code> macro is\ncalled, not the line of our code that eventually led to the <code class=\"hljs\">panic!</code> call.</p>\n<!-- Old heading. Do not remove or links may break. -->\n<p><a id=\"using-a-panic-backtrace\"></a></p>\n<p>We can use the backtrace of the functions the <code class=\"hljs\">panic!</code> call came from to figure\nout the part of our code that is causing the problem. To understand how to use\na <code class=\"hljs\">panic!</code> backtrace, let‚Äôs look at another example and see what it‚Äôs like when\na <code class=\"hljs\">panic!</code> call comes from a library because of a bug in our code instead of\nfrom our code calling the macro directly. Listing 9-1 has some code that\nattempts to access an index in a vector beyond the range of valid indexes.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/panics.svg\" title=\"This code panics!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust should_panic panics hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> v = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n\n    v[<span class=\"hljs-number\">99</span>];\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 9-1: Attempting to access an element beyond the\nend of a vector, which will cause a call to <code class=\"hljs\">panic!</code></span></p>\n<p>Here, we‚Äôre attempting to access the 100th element of our vector (which is at\nindex 99 because indexing starts at zero), but the vector has only three\nelements. In this situation, Rust will panic. Using <code class=\"hljs\">[]</code> is supposed to return\nan element, but if you pass an invalid index, there‚Äôs no element that Rust\ncould return here that would be correct.</p>\n<p>In C, attempting to read beyond the end of a data structure is undefined\nbehavior. You might get whatever is at the location in memory that would\ncorrespond to that element in the data structure, even though the memory\ndoesn‚Äôt belong to that structure. This is called a <em>buffer overread</em> and can\nlead to security vulnerabilities if an attacker is able to manipulate the index\nin such a way as to read data they shouldn‚Äôt be allowed to that is stored after\nthe data structure.</p>\n<p>To protect your program from this sort of vulnerability, if you try to read an\nelement at an index that doesn‚Äôt exist, Rust will stop execution and refuse to\ncontinue. Let‚Äôs try it and see:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling panic v0.1.0 (file:///projects/panic)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.27s\n     Running `target/debug/panic`\nthread 'main' panicked at src/main.rs:4:6:\nindex out of bounds: the len is 3 but the index is 99\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre>\n<p>This error points at line 4 of our <em>main.rs</em> where we attempt to access index\n<code class=\"hljs\">99</code> of the vector in <code class=\"hljs\">v</code>.</p>\n<p>The <code class=\"hljs\">note:</code> line tells us that we can set the <code class=\"hljs\">RUST_BACKTRACE</code> environment\nvariable to get a backtrace of exactly what happened to cause the error. A\n<em>backtrace</em> is a list of all the functions that have been called to get to this\npoint. Backtraces in Rust work as they do in other languages: the key to\nreading the backtrace is to start from the top and read until you see files you\nwrote. That‚Äôs the spot where the problem originated. The lines above that spot\nare code that your code has called; the lines below are code that called your\ncode. These before-and-after lines might include core Rust code, standard\nlibrary code, or crates that you‚Äôre using. Let‚Äôs try getting a backtrace by\nsetting the <code class=\"hljs\">RUST_BACKTRACE</code> environment variable to any value except <code class=\"hljs\">0</code>.\nListing 9-2 shows output similar to what you‚Äôll see.</p>\n<!-- manual-regeneration\ncd listings/ch09-error-handling/listing-09-01\nRUST_BACKTRACE=1 cargo run\ncopy the backtrace output below\ncheck the backtrace number mentioned in the text below the listing\n-->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> RUST_BACKTRACE=1 cargo run</span>\nthread 'main' panicked at src/main.rs:4:6:\nindex out of bounds: the len is 3 but the index is 99\nstack backtrace:\n   0: rust_begin_unwind\n             at /rustc/07dca489ac2d933c78d3c5158e3f43beefeb02ce/library/std/src/panicking.rs:645:5\n   1: core::panicking::panic_fmt\n             at /rustc/07dca489ac2d933c78d3c5158e3f43beefeb02ce/library/core/src/panicking.rs:72:14\n   2: core::panicking::panic_bounds_check\n             at /rustc/07dca489ac2d933c78d3c5158e3f43beefeb02ce/library/core/src/panicking.rs:208:5\n   3: &lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index\n             at /rustc/07dca489ac2d933c78d3c5158e3f43beefeb02ce/library/core/src/slice/index.rs:255:10\n   4: core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index\n             at /rustc/07dca489ac2d933c78d3c5158e3f43beefeb02ce/library/core/src/slice/index.rs:18:9\n   5: &lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index\n             at /rustc/07dca489ac2d933c78d3c5158e3f43beefeb02ce/library/alloc/src/vec/mod.rs:2770:9\n   6: panic::main\n             at ./src/main.rs:4:6\n   7: core::ops::function::FnOnce::call_once\n             at /rustc/07dca489ac2d933c78d3c5158e3f43beefeb02ce/library/core/src/ops/function.rs:250:5\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\n</code></pre>\n<p><span class=\"caption\">Listing 9-2: The backtrace generated by a call to\n<code class=\"hljs\">panic!</code> displayed when the environment variable <code class=\"hljs\">RUST_BACKTRACE</code> is set</span></p>\n<p>That‚Äôs a lot of output! The exact output you see might be different depending\non your operating system and Rust version. In order to get backtraces with this\ninformation, debug symbols must be enabled. Debug symbols are enabled by\ndefault when using <code class=\"hljs\">cargo build</code> or <code class=\"hljs\">cargo run</code> without the <code class=\"hljs\">--release</code> flag,\nas we have here.</p>\n<p>In the output in Listing 9-2, line 6 of the backtrace points to the line in our\nproject that‚Äôs causing the problem: line 4 of <em>src/main.rs</em>. If we don‚Äôt want\nour program to panic, we should start our investigation at the location pointed\nto by the first line mentioning a file we wrote. In Listing 9-1, where we\ndeliberately wrote code that would panic, the way to fix the panic is to not\nrequest an element beyond the range of the vector indexes. When your code\npanics in the future, you‚Äôll need to figure out what action the code is taking\nwith what values to cause the panic and what the code should do instead.</p>\n<p>We‚Äôll come back to <code class=\"hljs\">panic!</code> and when we should and should not use <code class=\"hljs\">panic!</code> to\nhandle error conditions in the <a href=\"ch09-03-to-panic-or-not-to-panic.html#to-panic-or-not-to-panic\">‚ÄúTo <code class=\"hljs\">panic!</code> or Not to\n<code class=\"hljs\">panic!</code>‚Äù</a><!-- ignore --> section later in this\nchapter. Next, we‚Äôll look at how to recover from an error using <code class=\"hljs\">Result</code>.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"recoverable-errors-with-result\"><a class=\"header\" href=\"#recoverable-errors-with-result\">Recoverable Errors with <code>Result</code></a></h2>\n<p>Most errors aren‚Äôt serious enough to require the program to stop entirely.\nSometimes when a function fails it‚Äôs for a reason that you can easily interpret\nand respond to. For example, if you try to open a file and that operation fails\nbecause the file doesn‚Äôt exist, you might want to create the file instead of\nterminating the process.</p>\n<p>Recall from <a href=\"ch02-00-guessing-game-tutorial.html#handling-potential-failure-with-result\">‚ÄúHandling Potential Failure with <code class=\"hljs\">Result</code>‚Äù</a><!--\nignore --> in Chapter 2 that the <code class=\"hljs\">Result</code> enum is defined as having two\nvariants, <code class=\"hljs\">Ok</code> and <code class=\"hljs\">Err</code>, as follows:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Result</span></span>&lt;T, E&gt; {\n    <span class=\"hljs-literal\">Ok</span>(T),\n    <span class=\"hljs-literal\">Err</span>(E),\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>The <code class=\"hljs\">T</code> and <code class=\"hljs\">E</code> are generic type parameters: we‚Äôll discuss generics in more\ndetail in Chapter 10. What you need to know right now is that <code class=\"hljs\">T</code> represents\nthe type of the value that will be returned in a success case within the <code class=\"hljs\">Ok</code>\nvariant, and <code class=\"hljs\">E</code> represents the type of the error that will be returned in a\nfailure case within the <code class=\"hljs\">Err</code> variant. Because <code class=\"hljs\">Result</code> has these generic type\nparameters, we can use the <code class=\"hljs\">Result</code> type and the functions defined on it in\nmany different situations where the success value and error value we want to\nreturn may differ.</p>\n<p>Let‚Äôs call a function that returns a <code class=\"hljs\">Result</code> value because the function could\nfail. In Listing 9-3 we try to open a file.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-keyword\">use</span> std::fs::File;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> greeting_file_result = File::open(<span class=\"hljs-string\">\"hello.txt\"</span>);\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 9-3: Opening a file</span></p>\n<p>The return type of <code class=\"hljs\">File::open</code> is a <code class=\"hljs\">Result&lt;T, E&gt;</code>. The generic parameter <code class=\"hljs\">T</code>\nhas been filled in by the implementation of <code class=\"hljs\">File::open</code> with the type of the\nsuccess value, <code class=\"hljs\">std::fs::File</code>, which is a file handle. The type of <code class=\"hljs\">E</code> used in\nthe error value is <code class=\"hljs\">std::io::Error</code>. This return type means the call to\n<code class=\"hljs\">File::open</code> might succeed and return a file handle that we can read from or\nwrite to. The function call also might fail: for example, the file might not\nexist, or we might not have permission to access the file. The <code class=\"hljs\">File::open</code>\nfunction needs to have a way to tell us whether it succeeded or failed and at\nthe same time give us either the file handle or error information. This\ninformation is exactly what the <code class=\"hljs\">Result</code> enum conveys.</p>\n<p>In the case where <code class=\"hljs\">File::open</code> succeeds, the value in the variable\n<code class=\"hljs\">greeting_file_result</code> will be an instance of <code class=\"hljs\">Ok</code> that contains a file handle.\nIn the case where it fails, the value in <code class=\"hljs\">greeting_file_result</code> will be an\ninstance of <code class=\"hljs\">Err</code> that contains more information about the kind of error that\noccurred.</p>\n<p>We need to add to the code in Listing 9-3 to take different actions depending\non the value <code class=\"hljs\">File::open</code> returns. Listing 9-4 shows one way to handle the\n<code class=\"hljs\">Result</code> using a basic tool, the <code class=\"hljs\">match</code> expression that we discussed in\nChapter 6.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust should_panic hljs\"><span class=\"hljs-keyword\">use</span> std::fs::File;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> greeting_file_result = File::open(<span class=\"hljs-string\">\"hello.txt\"</span>);\n\n    <span class=\"hljs-keyword\">let</span> greeting_file = <span class=\"hljs-keyword\">match</span> greeting_file_result {\n        <span class=\"hljs-literal\">Ok</span>(file) =&gt; file,\n        <span class=\"hljs-literal\">Err</span>(error) =&gt; <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">\"Problem opening the file: {error:?}\"</span>),\n    };\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 9-4: Using a <code class=\"hljs\">match</code> expression to handle the\n<code class=\"hljs\">Result</code> variants that might be returned</span></p>\n<p>Note that, like the <code class=\"hljs\">Option</code> enum, the <code class=\"hljs\">Result</code> enum and its variants have been\nbrought into scope by the prelude, so we don‚Äôt need to specify <code class=\"hljs\">Result::</code>\nbefore the <code class=\"hljs\">Ok</code> and <code class=\"hljs\">Err</code> variants in the <code class=\"hljs\">match</code> arms.</p>\n<p>When the result is <code class=\"hljs\">Ok</code>, this code will return the inner <code class=\"hljs\">file</code> value out of\nthe <code class=\"hljs\">Ok</code> variant, and we then assign that file handle value to the variable\n<code class=\"hljs\">greeting_file</code>. After the <code class=\"hljs\">match</code>, we can use the file handle for reading or\nwriting.</p>\n<p>The other arm of the <code class=\"hljs\">match</code> handles the case where we get an <code class=\"hljs\">Err</code> value from\n<code class=\"hljs\">File::open</code>. In this example, we‚Äôve chosen to call the <code class=\"hljs\">panic!</code> macro. If\nthere‚Äôs no file named <em>hello.txt</em> in our current directory and we run this\ncode, we‚Äôll see the following output from the <code class=\"hljs\">panic!</code> macro:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling error-handling v0.1.0 (file:///projects/error-handling)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.73s\n     Running `target/debug/error-handling`\nthread 'main' panicked at src/main.rs:8:23:\nProblem opening the file: Os { code: 2, kind: NotFound, message: \"No such file or directory\" }\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre>\n<p>As usual, this output tells us exactly what has gone wrong.</p>\n<h3 id=\"matching-on-different-errors\"><a class=\"header\" href=\"#matching-on-different-errors\">Matching on Different Errors</a></h3>\n<p>The code in Listing 9-4 will <code class=\"hljs\">panic!</code> no matter why <code class=\"hljs\">File::open</code> failed.\nHowever, we want to take different actions for different failure reasons. If\n<code class=\"hljs\">File::open</code> failed because the file doesn‚Äôt exist, we want to create the file\nand return the handle to the new file. If <code class=\"hljs\">File::open</code> failed for any other\nreason‚Äîfor example, because we didn‚Äôt have permission to open the file‚Äîwe still\nwant the code to <code class=\"hljs\">panic!</code> in the same way it did in Listing 9-4. For this, we\nadd an inner <code class=\"hljs\">match</code> expression, shown in Listing 9-5.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<!-- ignore this test because otherwise it creates hello.txt which causes other\ntests to fail lol -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">use</span> std::fs::File;\n<span class=\"hljs-keyword\">use</span> std::io::ErrorKind;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> greeting_file_result = File::open(<span class=\"hljs-string\">\"hello.txt\"</span>);\n\n    <span class=\"hljs-keyword\">let</span> greeting_file = <span class=\"hljs-keyword\">match</span> greeting_file_result {\n        <span class=\"hljs-literal\">Ok</span>(file) =&gt; file,\n        <span class=\"hljs-literal\">Err</span>(error) =&gt; <span class=\"hljs-keyword\">match</span> error.kind() {\n            ErrorKind::NotFound =&gt; <span class=\"hljs-keyword\">match</span> File::create(<span class=\"hljs-string\">\"hello.txt\"</span>) {\n                <span class=\"hljs-literal\">Ok</span>(fc) =&gt; fc,\n                <span class=\"hljs-literal\">Err</span>(e) =&gt; <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">\"Problem creating the file: {e:?}\"</span>),\n            },\n            other_error =&gt; {\n                <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">\"Problem opening the file: {other_error:?}\"</span>);\n            }\n        },\n    };\n}</code></pre>\n<p><span class=\"caption\">Listing 9-5: Handling different kinds of errors in\ndifferent ways</span></p>\n<p>The type of the value that <code class=\"hljs\">File::open</code> returns inside the <code class=\"hljs\">Err</code> variant is\n<code class=\"hljs\">io::Error</code>, which is a struct provided by the standard library. This struct\nhas a method <code class=\"hljs\">kind</code> that we can call to get an <code class=\"hljs\">io::ErrorKind</code> value. The enum\n<code class=\"hljs\">io::ErrorKind</code> is provided by the standard library and has variants\nrepresenting the different kinds of errors that might result from an <code class=\"hljs\">io</code>\noperation. The variant we want to use is <code class=\"hljs\">ErrorKind::NotFound</code>, which indicates\nthe file we‚Äôre trying to open doesn‚Äôt exist yet. So we match on\n<code class=\"hljs\">greeting_file_result</code>, but we also have an inner match on <code class=\"hljs\">error.kind()</code>.</p>\n<p>The condition we want to check in the inner match is whether the value returned\nby <code class=\"hljs\">error.kind()</code> is the <code class=\"hljs\">NotFound</code> variant of the <code class=\"hljs\">ErrorKind</code> enum. If it is,\nwe try to create the file with <code class=\"hljs\">File::create</code>. However, because <code class=\"hljs\">File::create</code>\ncould also fail, we need a second arm in the inner <code class=\"hljs\">match</code> expression. When the\nfile can‚Äôt be created, a different error message is printed. The second arm of\nthe outer <code class=\"hljs\">match</code> stays the same, so the program panics on any error besides\nthe missing file error.</p>\n<section class=\"note\" aria-role=\"note\">\n<h4 id=\"alternatives-to-using-match-with-resultt-e\"><a class=\"header\" href=\"#alternatives-to-using-match-with-resultt-e\">Alternatives to Using <code>match</code> with <code>Result&lt;T, E&gt;</code></a></h4>\n<p>That‚Äôs a lot of <code class=\"hljs\">match</code>! The <code class=\"hljs\">match</code> expression is very useful but also very\nmuch a primitive. In Chapter 13, you‚Äôll learn about closures, which are used\nwith many of the methods defined on <code class=\"hljs\">Result&lt;T, E&gt;</code>. These methods can be more\nconcise than using <code class=\"hljs\">match</code> when handling <code class=\"hljs\">Result&lt;T, E&gt;</code> values in your code.</p>\n<p>For example, here‚Äôs another way to write the same logic as shown in Listing\n9-5, this time using closures and the <code class=\"hljs\">unwrap_or_else</code> method:</p>\n<!-- CAN'T EXTRACT SEE https://github.com/rust-lang/mdBook/issues/1127 -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">use</span> std::fs::File;\n<span class=\"hljs-keyword\">use</span> std::io::ErrorKind;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> greeting_file = File::open(<span class=\"hljs-string\">\"hello.txt\"</span>).unwrap_or_else(|error| {\n        <span class=\"hljs-keyword\">if</span> error.kind() == ErrorKind::NotFound {\n            File::create(<span class=\"hljs-string\">\"hello.txt\"</span>).unwrap_or_else(|error| {\n                <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">\"Problem creating the file: {error:?}\"</span>);\n            })\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">\"Problem opening the file: {error:?}\"</span>);\n        }\n    });\n}</code></pre>\n<p>Although this code has the same behavior as Listing 9-5, it doesn‚Äôt contain\nany <code class=\"hljs\">match</code> expressions and is cleaner to read. Come back to this example\nafter you‚Äôve read Chapter 13, and look up the <code class=\"hljs\">unwrap_or_else</code> method in the\nstandard library documentation. Many more of these methods can clean up huge\nnested <code class=\"hljs\">match</code> expressions when you‚Äôre dealing with errors.</p>\n</section>\n<h4 id=\"shortcuts-for-panic-on-error-unwrap-and-expect\"><a class=\"header\" href=\"#shortcuts-for-panic-on-error-unwrap-and-expect\">Shortcuts for Panic on Error: <code>unwrap</code> and <code>expect</code></a></h4>\n<p>Using <code class=\"hljs\">match</code> works well enough, but it can be a bit verbose and doesn‚Äôt always\ncommunicate intent well. The <code class=\"hljs\">Result&lt;T, E&gt;</code> type has many helper methods\ndefined on it to do various, more specific tasks. The <code class=\"hljs\">unwrap</code> method is a\nshortcut method implemented just like the <code class=\"hljs\">match</code> expression we wrote in\nListing 9-4. If the <code class=\"hljs\">Result</code> value is the <code class=\"hljs\">Ok</code> variant, <code class=\"hljs\">unwrap</code> will return\nthe value inside the <code class=\"hljs\">Ok</code>. If the <code class=\"hljs\">Result</code> is the <code class=\"hljs\">Err</code> variant, <code class=\"hljs\">unwrap</code> will\ncall the <code class=\"hljs\">panic!</code> macro for us. Here is an example of <code class=\"hljs\">unwrap</code> in action:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust should_panic hljs\"><span class=\"hljs-keyword\">use</span> std::fs::File;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> greeting_file = File::open(<span class=\"hljs-string\">\"hello.txt\"</span>).unwrap();\n}</code></pre></pre>\n<p>If we run this code without a <em>hello.txt</em> file, we‚Äôll see an error message from\nthe <code class=\"hljs\">panic!</code> call that the <code class=\"hljs\">unwrap</code> method makes:</p>\n<!-- manual-regeneration\ncd listings/ch09-error-handling/no-listing-04-unwrap\ncargo run\ncopy and paste relevant text\n-->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">thread 'main' panicked at src/main.rs:4:49:\ncalled `Result::unwrap()` on an `Err` value: Os { code: 2, kind: NotFound, message: \"No such file or directory\" }\n</code></pre>\n<p>Similarly, the <code class=\"hljs\">expect</code> method lets us also choose the <code class=\"hljs\">panic!</code> error message.\nUsing <code class=\"hljs\">expect</code> instead of <code class=\"hljs\">unwrap</code> and providing good error messages can convey\nyour intent and make tracking down the source of a panic easier. The syntax of\n<code class=\"hljs\">expect</code> looks like this:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust should_panic hljs\"><span class=\"hljs-keyword\">use</span> std::fs::File;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> greeting_file = File::open(<span class=\"hljs-string\">\"hello.txt\"</span>)\n        .expect(<span class=\"hljs-string\">\"hello.txt should be included in this project\"</span>);\n}</code></pre></pre>\n<p>We use <code class=\"hljs\">expect</code> in the same way as <code class=\"hljs\">unwrap</code>: to return the file handle or call\nthe <code class=\"hljs\">panic!</code> macro. The error message used by <code class=\"hljs\">expect</code> in its call to <code class=\"hljs\">panic!</code>\nwill be the parameter that we pass to <code class=\"hljs\">expect</code>, rather than the default\n<code class=\"hljs\">panic!</code> message that <code class=\"hljs\">unwrap</code> uses. Here‚Äôs what it looks like:</p>\n<!-- manual-regeneration\ncd listings/ch09-error-handling/no-listing-05-expect\ncargo run\ncopy and paste relevant text\n-->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">thread 'main' panicked at src/main.rs:5:10:\nhello.txt should be included in this project: Os { code: 2, kind: NotFound, message: \"No such file or directory\" }\n</code></pre>\n<p>In production-quality code, most Rustaceans choose <code class=\"hljs\">expect</code> rather than\n<code class=\"hljs\">unwrap</code> and give more context about why the operation is expected to always\nsucceed. That way, if your assumptions are ever proven wrong, you have more\ninformation to use in debugging.</p>\n<h3 id=\"propagating-errors\"><a class=\"header\" href=\"#propagating-errors\">Propagating Errors</a></h3>\n<p>When a function‚Äôs implementation calls something that might fail, instead of\nhandling the error within the function itself you can return the error to the\ncalling code so that it can decide what to do. This is known as <em>propagating</em>\nthe error and gives more control to the calling code, where there might be more\ninformation or logic that dictates how the error should be handled than what\nyou have available in the context of your code.</p>\n<p>For example, Listing 9-6 shows a function that reads a username from a file. If\nthe file doesn‚Äôt exist or can‚Äôt be read, this function will return those errors\nto the code that called the function.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<!-- Deliberately not using rustdoc_include here; the `main` function in the\nfile panics. We do want to include it for reader experimentation purposes, but\ndon't want to include it for rustdoc testing purposes. -->\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">use</span> std::fs::File;\n<span class=\"hljs-keyword\">use</span> std::io::{<span class=\"hljs-keyword\">self</span>, Read};\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">read_username_from_file</span></span>() -&gt; <span class=\"hljs-built_in\">Result</span>&lt;<span class=\"hljs-built_in\">String</span>, io::Error&gt; {\n    <span class=\"hljs-keyword\">let</span> username_file_result = File::open(<span class=\"hljs-string\">\"hello.txt\"</span>);\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> username_file = <span class=\"hljs-keyword\">match</span> username_file_result {\n        <span class=\"hljs-literal\">Ok</span>(file) =&gt; file,\n        <span class=\"hljs-literal\">Err</span>(e) =&gt; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">Err</span>(e),\n    };\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> username = <span class=\"hljs-built_in\">String</span>::new();\n\n    <span class=\"hljs-keyword\">match</span> username_file.read_to_string(&amp;<span class=\"hljs-keyword\">mut</span> username) {\n        <span class=\"hljs-literal\">Ok</span>(_) =&gt; <span class=\"hljs-literal\">Ok</span>(username),\n        <span class=\"hljs-literal\">Err</span>(e) =&gt; <span class=\"hljs-literal\">Err</span>(e),\n    }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 9-6: A function that returns errors to the\ncalling code using <code class=\"hljs\">match</code></span></p>\n<p>This function can be written in a much shorter way, but we‚Äôre going to start by\ndoing a lot of it manually in order to explore error handling; at the end,\nwe‚Äôll show the shorter way. Let‚Äôs look at the return type of the function\nfirst: <code class=\"hljs\">Result&lt;String, io::Error&gt;</code>. This means the function is returning a\nvalue of the type <code class=\"hljs\">Result&lt;T, E&gt;</code>, where the generic parameter <code class=\"hljs\">T</code> has been\nfilled in with the concrete type <code class=\"hljs\">String</code> and the generic type <code class=\"hljs\">E</code> has been\nfilled in with the concrete type <code class=\"hljs\">io::Error</code>.</p>\n<p>If this function succeeds without any problems, the code that calls this\nfunction will receive an <code class=\"hljs\">Ok</code> value that holds a <code class=\"hljs\">String</code>‚Äîthe <code class=\"hljs\">username</code> that\nthis function read from the file. If this function encounters any problems, the\ncalling code will receive an <code class=\"hljs\">Err</code> value that holds an instance of <code class=\"hljs\">io::Error</code>\nthat contains more information about what the problems were. We chose\n<code class=\"hljs\">io::Error</code> as the return type of this function because that happens to be the\ntype of the error value returned from both of the operations we‚Äôre calling in\nthis function‚Äôs body that might fail: the <code class=\"hljs\">File::open</code> function and the\n<code class=\"hljs\">read_to_string</code> method.</p>\n<p>The body of the function starts by calling the <code class=\"hljs\">File::open</code> function. Then we\nhandle the <code class=\"hljs\">Result</code> value with a <code class=\"hljs\">match</code> similar to the <code class=\"hljs\">match</code> in Listing 9-4.\nIf <code class=\"hljs\">File::open</code> succeeds, the file handle in the pattern variable <code class=\"hljs\">file</code>\nbecomes the value in the mutable variable <code class=\"hljs\">username_file</code> and the function\ncontinues. In the <code class=\"hljs\">Err</code> case, instead of calling <code class=\"hljs\">panic!</code>, we use the <code class=\"hljs\">return</code>\nkeyword to return early out of the function entirely and pass the error value\nfrom <code class=\"hljs\">File::open</code>, now in the pattern variable <code class=\"hljs\">e</code>, back to the calling code as\nthis function‚Äôs error value.</p>\n<p>So, if we have a file handle in <code class=\"hljs\">username_file</code>, the function then creates a\nnew <code class=\"hljs\">String</code> in variable <code class=\"hljs\">username</code> and calls the <code class=\"hljs\">read_to_string</code> method on\nthe file handle in <code class=\"hljs\">username_file</code> to read the contents of the file into\n<code class=\"hljs\">username</code>. The <code class=\"hljs\">read_to_string</code> method also returns a <code class=\"hljs\">Result</code> because it\nmight fail, even though <code class=\"hljs\">File::open</code> succeeded. So we need another <code class=\"hljs\">match</code> to\nhandle that <code class=\"hljs\">Result</code>: if <code class=\"hljs\">read_to_string</code> succeeds, then our function has\nsucceeded, and we return the username from the file that‚Äôs now in <code class=\"hljs\">username</code>\nwrapped in an <code class=\"hljs\">Ok</code>. If <code class=\"hljs\">read_to_string</code> fails, we return the error value in the\nsame way that we returned the error value in the <code class=\"hljs\">match</code> that handled the\nreturn value of <code class=\"hljs\">File::open</code>. However, we don‚Äôt need to explicitly say\n<code class=\"hljs\">return</code>, because this is the last expression in the function.</p>\n<p>The code that calls this code will then handle getting either an <code class=\"hljs\">Ok</code> value\nthat contains a username or an <code class=\"hljs\">Err</code> value that contains an <code class=\"hljs\">io::Error</code>. It‚Äôs\nup to the calling code to decide what to do with those values. If the calling\ncode gets an <code class=\"hljs\">Err</code> value, it could call <code class=\"hljs\">panic!</code> and crash the program, use a\ndefault username, or look up the username from somewhere other than a file, for\nexample. We don‚Äôt have enough information on what the calling code is actually\ntrying to do, so we propagate all the success or error information upward for\nit to handle appropriately.</p>\n<p>This pattern of propagating errors is so common in Rust that Rust provides the\nquestion mark operator <code class=\"hljs\">?</code> to make this easier.</p>\n<h4 id=\"a-shortcut-for-propagating-errors-the--operator\"><a class=\"header\" href=\"#a-shortcut-for-propagating-errors-the--operator\">A Shortcut for Propagating Errors: the <code>?</code> Operator</a></h4>\n<p>Listing 9-7 shows an implementation of <code class=\"hljs\">read_username_from_file</code> that has the\nsame functionality as in Listing 9-6, but this implementation uses the <code class=\"hljs\">?</code>\noperator.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<!-- Deliberately not using rustdoc_include here; the `main` function in the\nfile panics. We do want to include it for reader experimentation purposes, but\ndon't want to include it for rustdoc testing purposes. -->\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">use</span> std::fs::File;\n<span class=\"hljs-keyword\">use</span> std::io::{<span class=\"hljs-keyword\">self</span>, Read};\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">read_username_from_file</span></span>() -&gt; <span class=\"hljs-built_in\">Result</span>&lt;<span class=\"hljs-built_in\">String</span>, io::Error&gt; {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> username_file = File::open(<span class=\"hljs-string\">\"hello.txt\"</span>)?;\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> username = <span class=\"hljs-built_in\">String</span>::new();\n    username_file.read_to_string(&amp;<span class=\"hljs-keyword\">mut</span> username)?;\n    <span class=\"hljs-literal\">Ok</span>(username)\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 9-7: A function that returns errors to the\ncalling code using the <code class=\"hljs\">?</code> operator</span></p>\n<p>The <code class=\"hljs\">?</code> placed after a <code class=\"hljs\">Result</code> value is defined to work in almost the same way\nas the <code class=\"hljs\">match</code> expressions we defined to handle the <code class=\"hljs\">Result</code> values in Listing\n9-6. If the value of the <code class=\"hljs\">Result</code> is an <code class=\"hljs\">Ok</code>, the value inside the <code class=\"hljs\">Ok</code> will\nget returned from this expression, and the program will continue. If the value\nis an <code class=\"hljs\">Err</code>, the <code class=\"hljs\">Err</code> will be returned from the whole function as if we had\nused the <code class=\"hljs\">return</code> keyword so the error value gets propagated to the calling\ncode.</p>\n<p>There is a difference between what the <code class=\"hljs\">match</code> expression from Listing 9-6 does\nand what the <code class=\"hljs\">?</code> operator does: error values that have the <code class=\"hljs\">?</code> operator called\non them go through the <code class=\"hljs\">from</code> function, defined in the <code class=\"hljs\">From</code> trait in the\nstandard library, which is used to convert values from one type into another.\nWhen the <code class=\"hljs\">?</code> operator calls the <code class=\"hljs\">from</code> function, the error type received is\nconverted into the error type defined in the return type of the current\nfunction. This is useful when a function returns one error type to represent\nall the ways a function might fail, even if parts might fail for many different\nreasons.</p>\n<p>For example, we could change the <code class=\"hljs\">read_username_from_file</code> function in Listing\n9-7 to return a custom error type named <code class=\"hljs\">OurError</code> that we define. If we also\ndefine <code class=\"hljs\">impl From&lt;io::Error&gt; for OurError</code> to construct an instance of\n<code class=\"hljs\">OurError</code> from an <code class=\"hljs\">io::Error</code>, then the <code class=\"hljs\">?</code> operator calls in the body of\n<code class=\"hljs\">read_username_from_file</code> will call <code class=\"hljs\">from</code> and convert the error types without\nneeding to add any more code to the function.</p>\n<p>In the context of Listing 9-7, the <code class=\"hljs\">?</code> at the end of the <code class=\"hljs\">File::open</code> call will\nreturn the value inside an <code class=\"hljs\">Ok</code> to the variable <code class=\"hljs\">username_file</code>. If an error\noccurs, the <code class=\"hljs\">?</code> operator will return early out of the whole function and give\nany <code class=\"hljs\">Err</code> value to the calling code. The same thing applies to the <code class=\"hljs\">?</code> at the\nend of the <code class=\"hljs\">read_to_string</code> call.</p>\n<p>The <code class=\"hljs\">?</code> operator eliminates a lot of boilerplate and makes this function‚Äôs\nimplementation simpler. We could even shorten this code further by chaining\nmethod calls immediately after the <code class=\"hljs\">?</code>, as shown in Listing 9-8.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<!-- Deliberately not using rustdoc_include here; the `main` function in the\nfile panics. We do want to include it for reader experimentation purposes, but\ndon't want to include it for rustdoc testing purposes. -->\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">use</span> std::fs::File;\n<span class=\"hljs-keyword\">use</span> std::io::{<span class=\"hljs-keyword\">self</span>, Read};\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">read_username_from_file</span></span>() -&gt; <span class=\"hljs-built_in\">Result</span>&lt;<span class=\"hljs-built_in\">String</span>, io::Error&gt; {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> username = <span class=\"hljs-built_in\">String</span>::new();\n\n    File::open(<span class=\"hljs-string\">\"hello.txt\"</span>)?.read_to_string(&amp;<span class=\"hljs-keyword\">mut</span> username)?;\n\n    <span class=\"hljs-literal\">Ok</span>(username)\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 9-8: Chaining method calls after the <code class=\"hljs\">?</code>\noperator</span></p>\n<p>We‚Äôve moved the creation of the new <code class=\"hljs\">String</code> in <code class=\"hljs\">username</code> to the beginning of\nthe function; that part hasn‚Äôt changed. Instead of creating a variable\n<code class=\"hljs\">username_file</code>, we‚Äôve chained the call to <code class=\"hljs\">read_to_string</code> directly onto the\nresult of <code class=\"hljs\">File::open(\"hello.txt\")?</code>. We still have a <code class=\"hljs\">?</code> at the end of the\n<code class=\"hljs\">read_to_string</code> call, and we still return an <code class=\"hljs\">Ok</code> value containing <code class=\"hljs\">username</code>\nwhen both <code class=\"hljs\">File::open</code> and <code class=\"hljs\">read_to_string</code> succeed rather than returning\nerrors. The functionality is again the same as in Listing 9-6 and Listing 9-7;\nthis is just a different, more ergonomic way to write it.</p>\n<p>Listing 9-9 shows a way to make this even shorter using <code class=\"hljs\">fs::read_to_string</code>.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<!-- Deliberately not using rustdoc_include here; the `main` function in the\nfile panics. We do want to include it for reader experimentation purposes, but\ndon't want to include it for rustdoc testing purposes. -->\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">use</span> std::fs;\n<span class=\"hljs-keyword\">use</span> std::io;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">read_username_from_file</span></span>() -&gt; <span class=\"hljs-built_in\">Result</span>&lt;<span class=\"hljs-built_in\">String</span>, io::Error&gt; {\n    fs::read_to_string(<span class=\"hljs-string\">\"hello.txt\"</span>)\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 9-9: Using <code class=\"hljs\">fs::read_to_string</code> instead of\nopening and then reading the file</span></p>\n<p>Reading a file into a string is a fairly common operation, so the standard\nlibrary provides the convenient <code class=\"hljs\">fs::read_to_string</code> function that opens the\nfile, creates a new <code class=\"hljs\">String</code>, reads the contents of the file, puts the contents\ninto that <code class=\"hljs\">String</code>, and returns it. Of course, using <code class=\"hljs\">fs::read_to_string</code>\ndoesn‚Äôt give us the opportunity to explain all the error handling, so we did it\nthe longer way first.</p>\n<h4 id=\"where-the--operator-can-be-used\"><a class=\"header\" href=\"#where-the--operator-can-be-used\">Where The <code>?</code> Operator Can Be Used</a></h4>\n<p>The <code class=\"hljs\">?</code> operator can only be used in functions whose return type is compatible\nwith the value the <code class=\"hljs\">?</code> is used on. This is because the <code class=\"hljs\">?</code> operator is defined\nto perform an early return of a value out of the function, in the same manner\nas the <code class=\"hljs\">match</code> expression we defined in Listing 9-6. In Listing 9-6, the\n<code class=\"hljs\">match</code> was using a <code class=\"hljs\">Result</code> value, and the early return arm returned an\n<code class=\"hljs\">Err(e)</code> value. The return type of the function has to be a <code class=\"hljs\">Result</code> so that\nit‚Äôs compatible with this <code class=\"hljs\">return</code>.</p>\n<p>In Listing 9-10, let‚Äôs look at the error we‚Äôll get if we use the <code class=\"hljs\">?</code> operator\nin a <code class=\"hljs\">main</code> function with a return type that is incompatible with the type of\nthe value we use <code class=\"hljs\">?</code> on.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs\"><span class=\"hljs-keyword\">use</span> std::fs::File;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> greeting_file = File::open(<span class=\"hljs-string\">\"hello.txt\"</span>)?;\n}</code></pre>\n<p><span class=\"caption\">Listing 9-10: Attempting to use the <code class=\"hljs\">?</code> in the <code class=\"hljs\">main</code>\nfunction that returns <code class=\"hljs\">()</code> won‚Äôt compile.</span></p>\n<p>This code opens a file, which might fail. The <code class=\"hljs\">?</code> operator follows the <code class=\"hljs\">Result</code>\nvalue returned by <code class=\"hljs\">File::open</code>, but this <code class=\"hljs\">main</code> function has the return type of\n<code class=\"hljs\">()</code>, not <code class=\"hljs\">Result</code>. When we compile this code, we get the following error\nmessage:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling error-handling v0.1.0 (file:///projects/error-handling)\nerror[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/main.rs:4:48</span>\n  |\n3 | fn main() {\n  | --------- this function should return `Result` or `Option` to accept `?`\n4 |     let greeting_file = File::open(\"hello.txt\")?;\n  |                                                ^ cannot use the `?` operator in a function that returns `()`\n  |\n  = help: the trait `FromResidual&lt;Result&lt;Infallible, std::io::Error&gt;&gt;` is not implemented for `()`\n\nFor more information about this error, try `rustc --explain E0277`.\nerror: could not compile `error-handling` (bin \"error-handling\") due to 1 previous error\n</code></pre>\n<p>This error points out that we‚Äôre only allowed to use the <code class=\"hljs\">?</code> operator in a\nfunction that returns <code class=\"hljs\">Result</code>, <code class=\"hljs\">Option</code>, or another type that implements\n<code class=\"hljs\">FromResidual</code>.</p>\n<p>To fix the error, you have two choices. One choice is to change the return type\nof your function to be compatible with the value you‚Äôre using the <code class=\"hljs\">?</code> operator\non as long as you have no restrictions preventing that. The other choice is to\nuse a <code class=\"hljs\">match</code> or one of the <code class=\"hljs\">Result&lt;T, E&gt;</code> methods to handle the <code class=\"hljs\">Result&lt;T, E&gt;</code>\nin whatever way is appropriate.</p>\n<p>The error message also mentioned that <code class=\"hljs\">?</code> can be used with <code class=\"hljs\">Option&lt;T&gt;</code> values\nas well. As with using <code class=\"hljs\">?</code> on <code class=\"hljs\">Result</code>, you can only use <code class=\"hljs\">?</code> on <code class=\"hljs\">Option</code> in a\nfunction that returns an <code class=\"hljs\">Option</code>. The behavior of the <code class=\"hljs\">?</code> operator when called\non an <code class=\"hljs\">Option&lt;T&gt;</code> is similar to its behavior when called on a <code class=\"hljs\">Result&lt;T, E&gt;</code>:\nif the value is <code class=\"hljs\">None</code>, the <code class=\"hljs\">None</code> will be returned early from the function at\nthat point. If the value is <code class=\"hljs\">Some</code>, the value inside the <code class=\"hljs\">Some</code> is the\nresultant value of the expression, and the function continues. Listing 9-11 has\nan example of a function that finds the last character of the first line in the\ngiven text.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">last_char_of_first_line</span></span>(text: &amp;<span class=\"hljs-built_in\">str</span>) -&gt; <span class=\"hljs-built_in\">Option</span>&lt;<span class=\"hljs-built_in\">char</span>&gt; {\n    text.lines().next()?.chars().last()\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">assert_eq!</span>(\n</span><span class=\"boring\">        last_char_of_first_line(<span class=\"hljs-string\">\"Hello, world\\nHow are you today?\"</span>),\n</span><span class=\"boring\">        <span class=\"hljs-literal\">Some</span>(<span class=\"hljs-string\">'d'</span>)\n</span><span class=\"boring\">    );\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">assert_eq!</span>(last_char_of_first_line(<span class=\"hljs-string\">\"\"</span>), <span class=\"hljs-literal\">None</span>);\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">assert_eq!</span>(last_char_of_first_line(<span class=\"hljs-string\">\"\\nhi\"</span>), <span class=\"hljs-literal\">None</span>);\n</span><span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 9-11: Using the <code class=\"hljs\">?</code> operator on an <code class=\"hljs\">Option&lt;T&gt;</code>\nvalue</span></p>\n<p>This function returns <code class=\"hljs\">Option&lt;char&gt;</code> because it‚Äôs possible that there is a\ncharacter there, but it‚Äôs also possible that there isn‚Äôt. This code takes the\n<code class=\"hljs\">text</code> string slice argument and calls the <code class=\"hljs\">lines</code> method on it, which returns\nan iterator over the lines in the string. Because this function wants to\nexamine the first line, it calls <code class=\"hljs\">next</code> on the iterator to get the first value\nfrom the iterator. If <code class=\"hljs\">text</code> is the empty string, this call to <code class=\"hljs\">next</code> will\nreturn <code class=\"hljs\">None</code>, in which case we use <code class=\"hljs\">?</code> to stop and return <code class=\"hljs\">None</code> from\n<code class=\"hljs\">last_char_of_first_line</code>. If <code class=\"hljs\">text</code> is not the empty string, <code class=\"hljs\">next</code> will\nreturn a <code class=\"hljs\">Some</code> value containing a string slice of the first line in <code class=\"hljs\">text</code>.</p>\n<p>The <code class=\"hljs\">?</code> extracts the string slice, and we can call <code class=\"hljs\">chars</code> on that string slice\nto get an iterator of its characters. We‚Äôre interested in the last character in\nthis first line, so we call <code class=\"hljs\">last</code> to return the last item in the iterator.\nThis is an <code class=\"hljs\">Option</code> because it‚Äôs possible that the first line is the empty\nstring; for example, if <code class=\"hljs\">text</code> starts with a blank line but has characters on\nother lines, as in <code class=\"hljs\">\"\\nhi\"</code>. However, if there is a last character on the first\nline, it will be returned in the <code class=\"hljs\">Some</code> variant. The <code class=\"hljs\">?</code> operator in the middle\ngives us a concise way to express this logic, allowing us to implement the\nfunction in one line. If we couldn‚Äôt use the <code class=\"hljs\">?</code> operator on <code class=\"hljs\">Option</code>, we‚Äôd\nhave to implement this logic using more method calls or a <code class=\"hljs\">match</code> expression.</p>\n<p>Note that you can use the <code class=\"hljs\">?</code> operator on a <code class=\"hljs\">Result</code> in a function that returns\n<code class=\"hljs\">Result</code>, and you can use the <code class=\"hljs\">?</code> operator on an <code class=\"hljs\">Option</code> in a function that\nreturns <code class=\"hljs\">Option</code>, but you can‚Äôt mix and match. The <code class=\"hljs\">?</code> operator won‚Äôt\nautomatically convert a <code class=\"hljs\">Result</code> to an <code class=\"hljs\">Option</code> or vice versa; in those cases,\nyou can use methods like the <code class=\"hljs\">ok</code> method on <code class=\"hljs\">Result</code> or the <code class=\"hljs\">ok_or</code> method on\n<code class=\"hljs\">Option</code> to do the conversion explicitly.</p>\n<p>So far, all the <code class=\"hljs\">main</code> functions we‚Äôve used return <code class=\"hljs\">()</code>. The <code class=\"hljs\">main</code> function is\nspecial because it‚Äôs the entry point and exit point of an executable program,\nand there are restrictions on what its return type can be for the program to\nbehave as expected.</p>\n<p>Luckily, <code class=\"hljs\">main</code> can also return a <code class=\"hljs\">Result&lt;(), E&gt;</code>. Listing 9-12 has the code\nfrom Listing 9-10, but we‚Äôve changed the return type of <code class=\"hljs\">main</code> to be\n<code class=\"hljs\">Result&lt;(), Box&lt;dyn Error&gt;&gt;</code> and added a return value <code class=\"hljs\">Ok(())</code> to the end. This\ncode will now compile.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">use</span> std::error::Error;\n<span class=\"hljs-keyword\">use</span> std::fs::File;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() -&gt; <span class=\"hljs-built_in\">Result</span>&lt;(), <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> Error&gt;&gt; {\n    <span class=\"hljs-keyword\">let</span> greeting_file = File::open(<span class=\"hljs-string\">\"hello.txt\"</span>)?;\n\n    <span class=\"hljs-literal\">Ok</span>(())\n}</code></pre>\n<p><span class=\"caption\">Listing 9-12: Changing <code class=\"hljs\">main</code> to return <code class=\"hljs\">Result&lt;(), E&gt;</code>\nallows the use of the <code class=\"hljs\">?</code> operator on <code class=\"hljs\">Result</code> values.</span></p>\n<p>The <code class=\"hljs\">Box&lt;dyn Error&gt;</code> type is a <em>trait object</em>, which we‚Äôll talk about in the\n<a href=\"ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types\">‚ÄúUsing Trait Objects that Allow for Values of Different\nTypes‚Äù</a><!-- ignore --> section in Chapter 17. For now, you can\nread <code class=\"hljs\">Box&lt;dyn Error&gt;</code> to mean ‚Äúany kind of error.‚Äù Using <code class=\"hljs\">?</code> on a <code class=\"hljs\">Result</code>\nvalue in a <code class=\"hljs\">main</code> function with the error type <code class=\"hljs\">Box&lt;dyn Error&gt;</code> is allowed\nbecause it allows any <code class=\"hljs\">Err</code> value to be returned early. Even though the body of\nthis <code class=\"hljs\">main</code> function will only ever return errors of type <code class=\"hljs\">std::io::Error</code>, by\nspecifying <code class=\"hljs\">Box&lt;dyn Error&gt;</code>, this signature will continue to be correct even if\nmore code that returns other errors is added to the body of <code class=\"hljs\">main</code>.</p>\n<p>When a <code class=\"hljs\">main</code> function returns a <code class=\"hljs\">Result&lt;(), E&gt;</code>, the executable will exit with\na value of <code class=\"hljs\">0</code> if <code class=\"hljs\">main</code> returns <code class=\"hljs\">Ok(())</code> and will exit with a nonzero value if\n<code class=\"hljs\">main</code> returns an <code class=\"hljs\">Err</code> value. Executables written in C return integers when\nthey exit: programs that exit successfully return the integer <code class=\"hljs\">0</code>, and programs\nthat error return some integer other than <code class=\"hljs\">0</code>. Rust also returns integers from\nexecutables to be compatible with this convention.</p>\n<p>The <code class=\"hljs\">main</code> function may return any types that implement <a href=\"../std/process/trait.Termination.html\">the\n<code class=\"hljs\">std::process::Termination</code> trait</a><!-- ignore -->, which contains\na function <code class=\"hljs\">report</code> that returns an <code class=\"hljs\">ExitCode</code>. Consult the standard library\ndocumentation for more information on implementing the <code class=\"hljs\">Termination</code> trait for\nyour own types.</p>\n<p>Now that we‚Äôve discussed the details of calling <code class=\"hljs\">panic!</code> or returning <code class=\"hljs\">Result</code>,\nlet‚Äôs return to the topic of how to decide which is appropriate to use in which\ncases.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"to-panic-or-not-to-panic\"><a class=\"header\" href=\"#to-panic-or-not-to-panic\">To <code>panic!</code> or Not to <code>panic!</code></a></h2>\n<p>So how do you decide when you should call <code class=\"hljs\">panic!</code> and when you should return\n<code class=\"hljs\">Result</code>? When code panics, there‚Äôs no way to recover. You could call <code class=\"hljs\">panic!</code>\nfor any error situation, whether there‚Äôs a possible way to recover or not, but\nthen you‚Äôre making the decision that a situation is unrecoverable on behalf of\nthe calling code. When you choose to return a <code class=\"hljs\">Result</code> value, you give the\ncalling code options. The calling code could choose to attempt to recover in a\nway that‚Äôs appropriate for its situation, or it could decide that an <code class=\"hljs\">Err</code>\nvalue in this case is unrecoverable, so it can call <code class=\"hljs\">panic!</code> and turn your\nrecoverable error into an unrecoverable one. Therefore, returning <code class=\"hljs\">Result</code> is a\ngood default choice when you‚Äôre defining a function that might fail.</p>\n<p>In situations such as examples, prototype code, and tests, it‚Äôs more\nappropriate to write code that panics instead of returning a <code class=\"hljs\">Result</code>. Let‚Äôs\nexplore why, then discuss situations in which the compiler can‚Äôt tell that\nfailure is impossible, but you as a human can. The chapter will conclude with\nsome general guidelines on how to decide whether to panic in library code.</p>\n<h3 id=\"examples-prototype-code-and-tests\"><a class=\"header\" href=\"#examples-prototype-code-and-tests\">Examples, Prototype Code, and Tests</a></h3>\n<p>When you‚Äôre writing an example to illustrate some concept, also including\nrobust error-handling code can make the example less clear. In examples, it‚Äôs\nunderstood that a call to a method like <code class=\"hljs\">unwrap</code> that could panic is meant as a\nplaceholder for the way you‚Äôd want your application to handle errors, which can\ndiffer based on what the rest of your code is doing.</p>\n<p>Similarly, the <code class=\"hljs\">unwrap</code> and <code class=\"hljs\">expect</code> methods are very handy when prototyping,\nbefore you‚Äôre ready to decide how to handle errors. They leave clear markers in\nyour code for when you‚Äôre ready to make your program more robust.</p>\n<p>If a method call fails in a test, you‚Äôd want the whole test to fail, even if\nthat method isn‚Äôt the functionality under test. Because <code class=\"hljs\">panic!</code> is how a test\nis marked as a failure, calling <code class=\"hljs\">unwrap</code> or <code class=\"hljs\">expect</code> is exactly what should\nhappen.</p>\n<h3 id=\"cases-in-which-you-have-more-information-than-the-compiler\"><a class=\"header\" href=\"#cases-in-which-you-have-more-information-than-the-compiler\">Cases in Which You Have More Information Than the Compiler</a></h3>\n<p>It would also be appropriate to call <code class=\"hljs\">unwrap</code> or <code class=\"hljs\">expect</code> when you have some\nother logic that ensures the <code class=\"hljs\">Result</code> will have an <code class=\"hljs\">Ok</code> value, but the logic\nisn‚Äôt something the compiler understands. You‚Äôll still have a <code class=\"hljs\">Result</code> value\nthat you need to handle: whatever operation you‚Äôre calling still has the\npossibility of failing in general, even though it‚Äôs logically impossible in\nyour particular situation. If you can ensure by manually inspecting the code\nthat you‚Äôll never have an <code class=\"hljs\">Err</code> variant, it‚Äôs perfectly acceptable to call\n<code class=\"hljs\">unwrap</code>, and even better to document the reason you think you‚Äôll never have an\n<code class=\"hljs\">Err</code> variant in the <code class=\"hljs\">expect</code> text. Here‚Äôs an example:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">use</span> std::net::IpAddr;\n\n    <span class=\"hljs-keyword\">let</span> home: IpAddr = <span class=\"hljs-string\">\"127.0.0.1\"</span>\n        .parse()\n        .expect(<span class=\"hljs-string\">\"Hardcoded IP address should be valid\"</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<p>We‚Äôre creating an <code class=\"hljs\">IpAddr</code> instance by parsing a hardcoded string. We can see\nthat <code class=\"hljs\">127.0.0.1</code> is a valid IP address, so it‚Äôs acceptable to use <code class=\"hljs\">expect</code>\nhere. However, having a hardcoded, valid string doesn‚Äôt change the return type\nof the <code class=\"hljs\">parse</code> method: we still get a <code class=\"hljs\">Result</code> value, and the compiler will\nstill make us handle the <code class=\"hljs\">Result</code> as if the <code class=\"hljs\">Err</code> variant is a possibility\nbecause the compiler isn‚Äôt smart enough to see that this string is always a\nvalid IP address. If the IP address string came from a user rather than being\nhardcoded into the program and therefore <em>did</em> have a possibility of failure,\nwe‚Äôd definitely want to handle the <code class=\"hljs\">Result</code> in a more robust way instead.\nMentioning the assumption that this IP address is hardcoded will prompt us to\nchange <code class=\"hljs\">expect</code> to better error-handling code if, in the future, we need to get\nthe IP address from some other source instead.</p>\n<h3 id=\"guidelines-for-error-handling\"><a class=\"header\" href=\"#guidelines-for-error-handling\">Guidelines for Error Handling</a></h3>\n<p>It‚Äôs advisable to have your code panic when it‚Äôs possible that your code could\nend up in a bad state. In this context, a <em>bad state</em> is when some assumption,\nguarantee, contract, or invariant has been broken, such as when invalid values,\ncontradictory values, or missing values are passed to your code‚Äîplus one or\nmore of the following:</p>\n<ul>\n<li>The bad state is something that is unexpected, as opposed to something that\nwill likely happen occasionally, like a user entering data in the wrong\nformat.</li>\n<li>Your code after this point needs to rely on not being in this bad state,\nrather than checking for the problem at every step.</li>\n<li>There‚Äôs not a good way to encode this information in the types you use. We‚Äôll\nwork through an example of what we mean in the <a href=\"ch17-03-oo-design-patterns.html#encoding-states-and-behavior-as-types\">‚ÄúEncoding States and Behavior\nas Types‚Äù</a><!-- ignore --> section of Chapter 17.</li>\n</ul>\n<p>If someone calls your code and passes in values that don‚Äôt make sense, it‚Äôs\nbest to return an error if you can so the user of the library can decide what\nthey want to do in that case. However, in cases where continuing could be\ninsecure or harmful, the best choice might be to call <code class=\"hljs\">panic!</code> and alert the\nperson using your library to the bug in their code so they can fix it during\ndevelopment. Similarly, <code class=\"hljs\">panic!</code> is often appropriate if you‚Äôre calling\nexternal code that is out of your control and it returns an invalid state that\nyou have no way of fixing.</p>\n<p>However, when failure is expected, it‚Äôs more appropriate to return a <code class=\"hljs\">Result</code>\nthan to make a <code class=\"hljs\">panic!</code> call. Examples include a parser being given malformed\ndata or an HTTP request returning a status that indicates you have hit a rate\nlimit. In these cases, returning a <code class=\"hljs\">Result</code> indicates that failure is an\nexpected possibility that the calling code must decide how to handle.</p>\n<p>When your code performs an operation that could put a user at risk if it‚Äôs\ncalled using invalid values, your code should verify the values are valid first\nand panic if the values aren‚Äôt valid. This is mostly for safety reasons:\nattempting to operate on invalid data can expose your code to vulnerabilities.\nThis is the main reason the standard library will call <code class=\"hljs\">panic!</code> if you attempt\nan out-of-bounds memory access: trying to access memory that doesn‚Äôt belong to\nthe current data structure is a common security problem. Functions often have\n<em>contracts</em>: their behavior is only guaranteed if the inputs meet particular\nrequirements. Panicking when the contract is violated makes sense because a\ncontract violation always indicates a caller-side bug, and it‚Äôs not a kind of\nerror you want the calling code to have to explicitly handle. In fact, there‚Äôs\nno reasonable way for calling code to recover; the calling <em>programmers</em> need\nto fix the code. Contracts for a function, especially when a violation will\ncause a panic, should be explained in the API documentation for the function.</p>\n<p>However, having lots of error checks in all of your functions would be verbose\nand annoying. Fortunately, you can use Rust‚Äôs type system (and thus the type\nchecking done by the compiler) to do many of the checks for you. If your\nfunction has a particular type as a parameter, you can proceed with your code‚Äôs\nlogic knowing that the compiler has already ensured you have a valid value. For\nexample, if you have a type rather than an <code class=\"hljs\">Option</code>, your program expects to\nhave <em>something</em> rather than <em>nothing</em>. Your code then doesn‚Äôt have to handle\ntwo cases for the <code class=\"hljs\">Some</code> and <code class=\"hljs\">None</code> variants: it will only have one case for\ndefinitely having a value. Code trying to pass nothing to your function won‚Äôt\neven compile, so your function doesn‚Äôt have to check for that case at runtime.\nAnother example is using an unsigned integer type such as <code class=\"hljs\">u32</code>, which ensures\nthe parameter is never negative.</p>\n<h3 id=\"creating-custom-types-for-validation\"><a class=\"header\" href=\"#creating-custom-types-for-validation\">Creating Custom Types for Validation</a></h3>\n<p>Let‚Äôs take the idea of using Rust‚Äôs type system to ensure we have a valid value\none step further and look at creating a custom type for validation. Recall the\nguessing game in Chapter 2 in which our code asked the user to guess a number\nbetween 1 and 100. We never validated that the user‚Äôs guess was between those\nnumbers before checking it against our secret number; we only validated that\nthe guess was positive. In this case, the consequences were not very dire: our\noutput of ‚ÄúToo high‚Äù or ‚ÄúToo low‚Äù would still be correct. But it would be a\nuseful enhancement to guide the user toward valid guesses and have different\nbehavior when the user guesses a number that‚Äôs out of range versus when the\nuser types, for example, letters instead.</p>\n<p>One way to do this would be to parse the guess as an <code class=\"hljs\">i32</code> instead of only a\n<code class=\"hljs\">u32</code> to allow potentially negative numbers, and then add a check for the\nnumber being in range, like so:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> rand::Rng;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::cmp::Ordering;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::io;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Guess the number!\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> secret_number = rand::thread_rng().gen_range(<span class=\"hljs-number\">1</span>..=<span class=\"hljs-number\">100</span>);\n</span><span class=\"boring\">\n</span>    <span class=\"hljs-keyword\">loop</span> {\n        <span class=\"hljs-comment\">// --snip--</span>\n\n<span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Please input your guess.\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> guess = <span class=\"hljs-built_in\">String</span>::new();\n</span><span class=\"boring\">\n</span><span class=\"boring\">        io::stdin()\n</span><span class=\"boring\">            .read_line(&amp;<span class=\"hljs-keyword\">mut</span> guess)\n</span><span class=\"boring\">            .expect(<span class=\"hljs-string\">\"Failed to read line\"</span>);\n</span><span class=\"boring\">\n</span>        <span class=\"hljs-keyword\">let</span> guess: <span class=\"hljs-built_in\">i32</span> = <span class=\"hljs-keyword\">match</span> guess.trim().parse() {\n            <span class=\"hljs-literal\">Ok</span>(num) =&gt; num,\n            <span class=\"hljs-literal\">Err</span>(_) =&gt; <span class=\"hljs-keyword\">continue</span>,\n        };\n\n        <span class=\"hljs-keyword\">if</span> guess &lt; <span class=\"hljs-number\">1</span> || guess &gt; <span class=\"hljs-number\">100</span> {\n            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The secret number will be between 1 and 100.\"</span>);\n            <span class=\"hljs-keyword\">continue</span>;\n        }\n\n        <span class=\"hljs-keyword\">match</span> guess.cmp(&amp;secret_number) {\n            <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">            Ordering::Less =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Too small!\"</span>),\n</span><span class=\"boring\">            Ordering::Greater =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Too big!\"</span>),\n</span><span class=\"boring\">            Ordering::Equal =&gt; {\n</span><span class=\"boring\">                <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"You win!\"</span>);\n</span><span class=\"boring\">                <span class=\"hljs-keyword\">break</span>;\n</span><span class=\"boring\">            }\n</span><span class=\"boring\">        }\n</span>    }\n<span class=\"boring\">}</span></code></pre>\n<p>The <code class=\"hljs\">if</code> expression checks whether our value is out of range, tells the user\nabout the problem, and calls <code class=\"hljs\">continue</code> to start the next iteration of the loop\nand ask for another guess. After the <code class=\"hljs\">if</code> expression, we can proceed with the\ncomparisons between <code class=\"hljs\">guess</code> and the secret number knowing that <code class=\"hljs\">guess</code> is\nbetween 1 and 100.</p>\n<p>However, this is not an ideal solution: if it were absolutely critical that the\nprogram only operated on values between 1 and 100, and it had many functions\nwith this requirement, having a check like this in every function would be\ntedious (and might impact performance).</p>\n<p>Instead, we can make a new type and put the validations in a function to create\nan instance of the type rather than repeating the validations everywhere. That\nway, it‚Äôs safe for functions to use the new type in their signatures and\nconfidently use the values they receive. Listing 9-13 shows one way to define a\n<code class=\"hljs\">Guess</code> type that will only create an instance of <code class=\"hljs\">Guess</code> if the <code class=\"hljs\">new</code> function\nreceives a value between 1 and 100.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Guess</span></span> {\n    value: <span class=\"hljs-built_in\">i32</span>,\n}\n\n<span class=\"hljs-keyword\">impl</span> Guess {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(value: <span class=\"hljs-built_in\">i32</span>) -&gt; Guess {\n        <span class=\"hljs-keyword\">if</span> value &lt; <span class=\"hljs-number\">1</span> || value &gt; <span class=\"hljs-number\">100</span> {\n            <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">\"Guess value must be between 1 and 100, got {value}.\"</span>);\n        }\n\n        Guess { value }\n    }\n\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">value</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">i32</span> {\n        <span class=\"hljs-keyword\">self</span>.value\n    }\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 9-13: A <code class=\"hljs\">Guess</code> type that will only continue with\nvalues between 1 and 100</span></p>\n<p>First we define a struct named <code class=\"hljs\">Guess</code> that has a field named <code class=\"hljs\">value</code> that\nholds an <code class=\"hljs\">i32</code>. This is where the number will be stored.</p>\n<p>Then we implement an associated function named <code class=\"hljs\">new</code> on <code class=\"hljs\">Guess</code> that creates\ninstances of <code class=\"hljs\">Guess</code> values. The <code class=\"hljs\">new</code> function is defined to have one\nparameter named <code class=\"hljs\">value</code> of type <code class=\"hljs\">i32</code> and to return a <code class=\"hljs\">Guess</code>. The code in the\nbody of the <code class=\"hljs\">new</code> function tests <code class=\"hljs\">value</code> to make sure it‚Äôs between 1 and 100.\nIf <code class=\"hljs\">value</code> doesn‚Äôt pass this test, we make a <code class=\"hljs\">panic!</code> call, which will alert\nthe programmer who is writing the calling code that they have a bug they need\nto fix, because creating a <code class=\"hljs\">Guess</code> with a <code class=\"hljs\">value</code> outside this range would\nviolate the contract that <code class=\"hljs\">Guess::new</code> is relying on. The conditions in which\n<code class=\"hljs\">Guess::new</code> might panic should be discussed in its public-facing API\ndocumentation; we‚Äôll cover documentation conventions indicating the possibility\nof a <code class=\"hljs\">panic!</code> in the API documentation that you create in Chapter 14. If\n<code class=\"hljs\">value</code> does pass the test, we create a new <code class=\"hljs\">Guess</code> with its <code class=\"hljs\">value</code> field set\nto the <code class=\"hljs\">value</code> parameter and return the <code class=\"hljs\">Guess</code>.</p>\n<p>Next, we implement a method named <code class=\"hljs\">value</code> that borrows <code class=\"hljs\">self</code>, doesn‚Äôt have any\nother parameters, and returns an <code class=\"hljs\">i32</code>. This kind of method is sometimes called\na <em>getter</em> because its purpose is to get some data from its fields and return\nit. This public method is necessary because the <code class=\"hljs\">value</code> field of the <code class=\"hljs\">Guess</code>\nstruct is private. It‚Äôs important that the <code class=\"hljs\">value</code> field be private so code\nusing the <code class=\"hljs\">Guess</code> struct is not allowed to set <code class=\"hljs\">value</code> directly: code outside\nthe module <em>must</em> use the <code class=\"hljs\">Guess::new</code> function to create an instance of\n<code class=\"hljs\">Guess</code>, thereby ensuring there‚Äôs no way for a <code class=\"hljs\">Guess</code> to have a <code class=\"hljs\">value</code> that\nhasn‚Äôt been checked by the conditions in the <code class=\"hljs\">Guess::new</code> function.</p>\n<p>A function that has a parameter or returns only numbers between 1 and 100 could\nthen declare in its signature that it takes or returns a <code class=\"hljs\">Guess</code> rather than an\n<code class=\"hljs\">i32</code> and wouldn‚Äôt need to do any additional checks in its body.</p>\n<h2 id=\"summary-8\"><a class=\"header\" href=\"#summary-8\">Summary</a></h2>\n<p>Rust‚Äôs error-handling features are designed to help you write more robust code.\nThe <code class=\"hljs\">panic!</code> macro signals that your program is in a state it can‚Äôt handle and\nlets you tell the process to stop instead of trying to proceed with invalid or\nincorrect values. The <code class=\"hljs\">Result</code> enum uses Rust‚Äôs type system to indicate that\noperations might fail in a way that your code could recover from. You can use\n<code class=\"hljs\">Result</code> to tell code that calls your code that it needs to handle potential\nsuccess or failure as well. Using <code class=\"hljs\">panic!</code> and <code class=\"hljs\">Result</code> in the appropriate\nsituations will make your code more reliable in the face of inevitable problems.</p>\n<p>Now that you‚Äôve seen useful ways that the standard library uses generics with\nthe <code class=\"hljs\">Option</code> and <code class=\"hljs\">Result</code> enums, we‚Äôll talk about how generics work and how you\ncan use them in your code.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"generic-types-traits-and-lifetimes\"><a class=\"header\" href=\"#generic-types-traits-and-lifetimes\">Generic Types, Traits, and Lifetimes</a></h1>\n<p>Every programming language has tools for effectively handling the duplication\nof concepts. In Rust, one such tool is <em>generics</em>: abstract stand-ins for\nconcrete types or other properties. We can express the behavior of generics or\nhow they relate to other generics without knowing what will be in their place\nwhen compiling and running the code.</p>\n<p>Functions can take parameters of some generic type, instead of a concrete type\nlike <code class=\"hljs\">i32</code> or <code class=\"hljs\">String</code>, in the same way they take parameters with unknown\nvalues to run the same code on multiple concrete values. In fact, we‚Äôve already\nused generics in Chapter 6 with <code class=\"hljs\">Option&lt;T&gt;</code>, in Chapter 8 with <code class=\"hljs\">Vec&lt;T&gt;</code> and\n<code class=\"hljs\">HashMap&lt;K, V&gt;</code>, and in Chapter 9 with <code class=\"hljs\">Result&lt;T, E&gt;</code>. In this chapter, you‚Äôll\nexplore how to define your own types, functions, and methods with generics!</p>\n<p>First we‚Äôll review how to extract a function to reduce code duplication. We‚Äôll\nthen use the same technique to make a generic function from two functions that\ndiffer only in the types of their parameters. We‚Äôll also explain how to use\ngeneric types in struct and enum definitions.</p>\n<p>Then you‚Äôll learn how to use <em>traits</em> to define behavior in a generic way. You\ncan combine traits with generic types to constrain a generic type to accept\nonly those types that have a particular behavior, as opposed to just any type.</p>\n<p>Finally, we‚Äôll discuss <em>lifetimes</em>: a variety of generics that give the\ncompiler information about how references relate to each other. Lifetimes allow\nus to give the compiler enough information about borrowed values so that it can\nensure references will be valid in more situations than it could without our\nhelp.</p>\n<h2 id=\"removing-duplication-by-extracting-a-function\"><a class=\"header\" href=\"#removing-duplication-by-extracting-a-function\">Removing Duplication by Extracting a Function</a></h2>\n<p>Generics allow us to replace specific types with a placeholder that represents\nmultiple types to remove code duplication. Before diving into generics syntax,\nlet‚Äôs first look at how to remove duplication in a way that doesn‚Äôt involve\ngeneric types by extracting a function that replaces specific values with a\nplaceholder that represents multiple values. Then we‚Äôll apply the same\ntechnique to extract a generic function! By looking at how to recognize\nduplicated code you can extract into a function, you‚Äôll start to recognize\nduplicated code that can use generics.</p>\n<p>We‚Äôll begin with the short program in Listing 10-1 that finds the largest\nnumber in a list.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> number_list = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">34</span>, <span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">25</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">65</span>];\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> largest = &amp;number_list[<span class=\"hljs-number\">0</span>];\n\n    <span class=\"hljs-keyword\">for</span> number <span class=\"hljs-keyword\">in</span> &amp;number_list {\n        <span class=\"hljs-keyword\">if</span> number &gt; largest {\n            largest = number;\n        }\n    }\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The largest number is {largest}\"</span>);\n<span class=\"boring\">    <span class=\"hljs-built_in\">assert_eq!</span>(*largest, <span class=\"hljs-number\">100</span>);\n</span>}</code></pre></pre>\n<p><span class=\"caption\">Listing 10-1: Finding the largest number in a list of\nnumbers</span></p>\n<p>We store a list of integers in the variable <code class=\"hljs\">number_list</code> and place a reference\nto the first number in the list in a variable named <code class=\"hljs\">largest</code>. We then iterate\nthrough all the numbers in the list, and if the current number is greater than\nthe number stored in <code class=\"hljs\">largest</code>, we replace the reference in that variable.\nHowever, if the current number is less than or equal to the largest number seen\nso far, the variable doesn‚Äôt change, and the code moves on to the next number\nin the list. After considering all the numbers in the list, <code class=\"hljs\">largest</code> should\nrefer to the largest number, which in this case is 100.</p>\n<p>We‚Äôve now been tasked with finding the largest number in two different lists of\nnumbers. To do so, we can choose to duplicate the code in Listing 10-1 and use\nthe same logic at two different places in the program, as shown in Listing 10-2.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> number_list = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">34</span>, <span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">25</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">65</span>];\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> largest = &amp;number_list[<span class=\"hljs-number\">0</span>];\n\n    <span class=\"hljs-keyword\">for</span> number <span class=\"hljs-keyword\">in</span> &amp;number_list {\n        <span class=\"hljs-keyword\">if</span> number &gt; largest {\n            largest = number;\n        }\n    }\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The largest number is {largest}\"</span>);\n\n    <span class=\"hljs-keyword\">let</span> number_list = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">102</span>, <span class=\"hljs-number\">34</span>, <span class=\"hljs-number\">6000</span>, <span class=\"hljs-number\">89</span>, <span class=\"hljs-number\">54</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">43</span>, <span class=\"hljs-number\">8</span>];\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> largest = &amp;number_list[<span class=\"hljs-number\">0</span>];\n\n    <span class=\"hljs-keyword\">for</span> number <span class=\"hljs-keyword\">in</span> &amp;number_list {\n        <span class=\"hljs-keyword\">if</span> number &gt; largest {\n            largest = number;\n        }\n    }\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The largest number is {largest}\"</span>);\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 10-2: Code to find the largest number in <em>two</em>\nlists of numbers</span></p>\n<p>Although this code works, duplicating code is tedious and error prone. We also\nhave to remember to update the code in multiple places when we want to change\nit.</p>\n<p>To eliminate this duplication, we‚Äôll create an abstraction by defining a\nfunction that operates on any list of integers passed in a parameter. This\nsolution makes our code clearer and lets us express the concept of finding the\nlargest number in a list abstractly.</p>\n<p>In Listing 10-3, we extract the code that finds the largest number into a\nfunction named <code class=\"hljs\">largest</code>. Then we call the function to find the largest number\nin the two lists from Listing 10-2. We could also use the function on any other\nlist of <code class=\"hljs\">i32</code> values we might have in the future.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">largest</span></span>(list: &amp;[<span class=\"hljs-built_in\">i32</span>]) -&gt; &amp;<span class=\"hljs-built_in\">i32</span> {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> largest = &amp;list[<span class=\"hljs-number\">0</span>];\n\n    <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> list {\n        <span class=\"hljs-keyword\">if</span> item &gt; largest {\n            largest = item;\n        }\n    }\n\n    largest\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> number_list = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">34</span>, <span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">25</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">65</span>];\n\n    <span class=\"hljs-keyword\">let</span> result = largest(&amp;number_list);\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The largest number is {result}\"</span>);\n<span class=\"boring\">    <span class=\"hljs-built_in\">assert_eq!</span>(*result, <span class=\"hljs-number\">100</span>);\n</span>\n    <span class=\"hljs-keyword\">let</span> number_list = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">102</span>, <span class=\"hljs-number\">34</span>, <span class=\"hljs-number\">6000</span>, <span class=\"hljs-number\">89</span>, <span class=\"hljs-number\">54</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">43</span>, <span class=\"hljs-number\">8</span>];\n\n    <span class=\"hljs-keyword\">let</span> result = largest(&amp;number_list);\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The largest number is {result}\"</span>);\n<span class=\"boring\">    <span class=\"hljs-built_in\">assert_eq!</span>(*result, <span class=\"hljs-number\">6000</span>);\n</span>}</code></pre></pre>\n<p><span class=\"caption\">Listing 10-3: Abstracted code to find the largest number\nin two lists</span></p>\n<p>The <code class=\"hljs\">largest</code> function has a parameter called <code class=\"hljs\">list</code>, which represents any\nconcrete slice of <code class=\"hljs\">i32</code> values we might pass into the function. As a result,\nwhen we call the function, the code runs on the specific values that we pass\nin.</p>\n<p>In summary, here are the steps we took to change the code from Listing 10-2 to\nListing 10-3:</p>\n<ol>\n<li>Identify duplicate code.</li>\n<li>Extract the duplicate code into the body of the function, and specify the\ninputs and return values of that code in the function signature.</li>\n<li>Update the two instances of duplicated code to call the function instead.</li>\n</ol>\n<p>Next, we‚Äôll use these same steps with generics to reduce code duplication. In\nthe same way that the function body can operate on an abstract <code class=\"hljs\">list</code> instead\nof specific values, generics allow code to operate on abstract types.</p>\n<p>For example, say we had two functions: one that finds the largest item in a\nslice of <code class=\"hljs\">i32</code> values and one that finds the largest item in a slice of <code class=\"hljs\">char</code>\nvalues. How would we eliminate that duplication? Let‚Äôs find out!</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"generic-data-types\"><a class=\"header\" href=\"#generic-data-types\">Generic Data Types</a></h2>\n<p>We use generics to create definitions for items like function signatures or\nstructs, which we can then use with many different concrete data types. Let‚Äôs\nfirst look at how to define functions, structs, enums, and methods using\ngenerics. Then we‚Äôll discuss how generics affect code performance.</p>\n<h3 id=\"in-function-definitions\"><a class=\"header\" href=\"#in-function-definitions\">In Function Definitions</a></h3>\n<p>When defining a function that uses generics, we place the generics in the\nsignature of the function where we would usually specify the data types of the\nparameters and return value. Doing so makes our code more flexible and provides\nmore functionality to callers of our function while preventing code duplication.</p>\n<p>Continuing with our <code class=\"hljs\">largest</code> function, Listing 10-4 shows two functions that\nboth find the largest value in a slice. We‚Äôll then combine these into a single\nfunction that uses generics.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">largest_i32</span></span>(list: &amp;[<span class=\"hljs-built_in\">i32</span>]) -&gt; &amp;<span class=\"hljs-built_in\">i32</span> {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> largest = &amp;list[<span class=\"hljs-number\">0</span>];\n\n    <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> list {\n        <span class=\"hljs-keyword\">if</span> item &gt; largest {\n            largest = item;\n        }\n    }\n\n    largest\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">largest_char</span></span>(list: &amp;[<span class=\"hljs-built_in\">char</span>]) -&gt; &amp;<span class=\"hljs-built_in\">char</span> {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> largest = &amp;list[<span class=\"hljs-number\">0</span>];\n\n    <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> list {\n        <span class=\"hljs-keyword\">if</span> item &gt; largest {\n            largest = item;\n        }\n    }\n\n    largest\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> number_list = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">34</span>, <span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">25</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">65</span>];\n\n    <span class=\"hljs-keyword\">let</span> result = largest_i32(&amp;number_list);\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The largest number is {result}\"</span>);\n<span class=\"boring\">    <span class=\"hljs-built_in\">assert_eq!</span>(*result, <span class=\"hljs-number\">100</span>);\n</span>\n    <span class=\"hljs-keyword\">let</span> char_list = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">'y'</span>, <span class=\"hljs-string\">'m'</span>, <span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'q'</span>];\n\n    <span class=\"hljs-keyword\">let</span> result = largest_char(&amp;char_list);\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The largest char is {result}\"</span>);\n<span class=\"boring\">    <span class=\"hljs-built_in\">assert_eq!</span>(*result, <span class=\"hljs-string\">'y'</span>);\n</span>}</code></pre></pre>\n<p><span class=\"caption\">Listing 10-4: Two functions that differ only in their\nnames and in the types in their signatures</span></p>\n<p>The <code class=\"hljs\">largest_i32</code> function is the one we extracted in Listing 10-3 that finds\nthe largest <code class=\"hljs\">i32</code> in a slice. The <code class=\"hljs\">largest_char</code> function finds the largest\n<code class=\"hljs\">char</code> in a slice. The function bodies have the same code, so let‚Äôs eliminate\nthe duplication by introducing a generic type parameter in a single function.</p>\n<p>To parameterize the types in a new single function, we need to name the type\nparameter, just as we do for the value parameters to a function. You can use\nany identifier as a type parameter name. But we‚Äôll use <code class=\"hljs\">T</code> because, by\nconvention, type parameter names in Rust are short, often just one letter, and\nRust‚Äôs type-naming convention is UpperCamelCase. Short for <em>type</em>, <code class=\"hljs\">T</code> is the\ndefault choice of most Rust programmers.</p>\n<p>When we use a parameter in the body of the function, we have to declare the\nparameter name in the signature so the compiler knows what that name means.\nSimilarly, when we use a type parameter name in a function signature, we have\nto declare the type parameter name before we use it. To define the generic\n<code class=\"hljs\">largest</code> function, we place type name declarations inside angle brackets,\n<code class=\"hljs\">&lt;&gt;</code>, between the name of the function and the parameter list, like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">largest</span></span>&lt;T&gt;(list: &amp;[T]) -&gt; &amp;T {</code></pre>\n<p>We read this definition as: the function <code class=\"hljs\">largest</code> is generic over some type\n<code class=\"hljs\">T</code>. This function has one parameter named <code class=\"hljs\">list</code>, which is a slice of values\nof type <code class=\"hljs\">T</code>. The <code class=\"hljs\">largest</code> function will return a reference to a value of the\nsame type <code class=\"hljs\">T</code>.</p>\n<p>Listing 10-5 shows the combined <code class=\"hljs\">largest</code> function definition using the generic\ndata type in its signature. The listing also shows how we can call the function\nwith either a slice of <code class=\"hljs\">i32</code> values or <code class=\"hljs\">char</code> values. Note that this code won‚Äôt\ncompile yet, but we‚Äôll fix it later in this chapter.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">largest</span></span>&lt;T&gt;(list: &amp;[T]) -&gt; &amp;T {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> largest = &amp;list[<span class=\"hljs-number\">0</span>];\n\n    <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> list {\n        <span class=\"hljs-keyword\">if</span> item &gt; largest {\n            largest = item;\n        }\n    }\n\n    largest\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> number_list = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">34</span>, <span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">25</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">65</span>];\n\n    <span class=\"hljs-keyword\">let</span> result = largest(&amp;number_list);\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The largest number is {result}\"</span>);\n\n    <span class=\"hljs-keyword\">let</span> char_list = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">'y'</span>, <span class=\"hljs-string\">'m'</span>, <span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'q'</span>];\n\n    <span class=\"hljs-keyword\">let</span> result = largest(&amp;char_list);\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The largest char is {result}\"</span>);\n}</code></pre>\n<p><span class=\"caption\">Listing 10-5: The <code class=\"hljs\">largest</code> function using generic type\nparameters; this doesn‚Äôt compile yet</span></p>\n<p>If we compile this code right now, we‚Äôll get this error:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling chapter10 v0.1.0 (file:///projects/chapter10)\nerror[E0369]: binary operation `&gt;` cannot be applied to type `&amp;T`\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/main.rs:5:17</span>\n  |\n5 |         if item &gt; largest {\n  |            ---- ^ ------- &amp;T\n  |            |\n  |            &amp;T\n  |\nhelp: consider restricting type parameter `T`\n  |\n1 | fn largest&lt;T: std::cmp::PartialOrd&gt;(list: &amp;[T]) -&gt; &amp;T {\n  |             ++++++++++++++++++++++\n\nFor more information about this error, try `rustc --explain E0369`.\nerror: could not compile `chapter10` (bin \"chapter10\") due to 1 previous error\n</code></pre>\n<p>The help text mentions <code class=\"hljs\">std::cmp::PartialOrd</code>, which is a <em>trait</em>, and we‚Äôre\ngoing to talk about traits in the next section. For now, know that this error\nstates that the body of <code class=\"hljs\">largest</code> won‚Äôt work for all possible types that <code class=\"hljs\">T</code>\ncould be. Because we want to compare values of type <code class=\"hljs\">T</code> in the body, we can\nonly use types whose values can be ordered. To enable comparisons, the standard\nlibrary has the <code class=\"hljs\">std::cmp::PartialOrd</code> trait that you can implement on types\n(see Appendix C for more on this trait). By following the help text‚Äôs\nsuggestion, we restrict the types valid for <code class=\"hljs\">T</code> to only those that implement\n<code class=\"hljs\">PartialOrd</code> and this example will compile, because the standard library\nimplements <code class=\"hljs\">PartialOrd</code> on both <code class=\"hljs\">i32</code> and <code class=\"hljs\">char</code>.</p>\n<h3 id=\"in-struct-definitions\"><a class=\"header\" href=\"#in-struct-definitions\">In Struct Definitions</a></h3>\n<p>We can also define structs to use a generic type parameter in one or more\nfields using the <code class=\"hljs\">&lt;&gt;</code> syntax. Listing 10-6 defines a <code class=\"hljs\">Point&lt;T&gt;</code> struct to hold\n<code class=\"hljs\">x</code> and <code class=\"hljs\">y</code> coordinate values of any type.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Point</span></span>&lt;T&gt; {\n    x: T,\n    y: T,\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> integer = Point { x: <span class=\"hljs-number\">5</span>, y: <span class=\"hljs-number\">10</span> };\n    <span class=\"hljs-keyword\">let</span> float = Point { x: <span class=\"hljs-number\">1.0</span>, y: <span class=\"hljs-number\">4.0</span> };\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 10-6: A <code class=\"hljs\">Point&lt;T&gt;</code> struct that holds <code class=\"hljs\">x</code> and <code class=\"hljs\">y</code>\nvalues of type <code class=\"hljs\">T</code></span></p>\n<p>The syntax for using generics in struct definitions is similar to that used in\nfunction definitions. First we declare the name of the type parameter inside\nangle brackets just after the name of the struct. Then we use the generic\ntype in the struct definition where we would otherwise specify concrete data\ntypes.</p>\n<p>Note that because we‚Äôve used only one generic type to define <code class=\"hljs\">Point&lt;T&gt;</code>, this\ndefinition says that the <code class=\"hljs\">Point&lt;T&gt;</code> struct is generic over some type <code class=\"hljs\">T</code>, and\nthe fields <code class=\"hljs\">x</code> and <code class=\"hljs\">y</code> are <em>both</em> that same type, whatever that type may be. If\nwe create an instance of a <code class=\"hljs\">Point&lt;T&gt;</code> that has values of different types, as in\nListing 10-7, our code won‚Äôt compile.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Point</span></span>&lt;T&gt; {\n    x: T,\n    y: T,\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> wont_work = Point { x: <span class=\"hljs-number\">5</span>, y: <span class=\"hljs-number\">4.0</span> };\n}</code></pre>\n<p><span class=\"caption\">Listing 10-7: The fields <code class=\"hljs\">x</code> and <code class=\"hljs\">y</code> must be the same\ntype because both have the same generic data type <code class=\"hljs\">T</code>.</span></p>\n<p>In this example, when we assign the integer value <code class=\"hljs\">5</code> to <code class=\"hljs\">x</code>, we let the\ncompiler know that the generic type <code class=\"hljs\">T</code> will be an integer for this instance of\n<code class=\"hljs\">Point&lt;T&gt;</code>. Then when we specify <code class=\"hljs\">4.0</code> for <code class=\"hljs\">y</code>, which we‚Äôve defined to have the\nsame type as <code class=\"hljs\">x</code>, we‚Äôll get a type mismatch error like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling chapter10 v0.1.0 (file:///projects/chapter10)\nerror[E0308]: mismatched types\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/main.rs:7:38</span>\n  |\n7 |     let wont_work = Point { x: 5, y: 4.0 };\n  |                                      ^^^ expected integer, found floating-point number\n\nFor more information about this error, try `rustc --explain E0308`.\nerror: could not compile `chapter10` (bin \"chapter10\") due to 1 previous error\n</code></pre>\n<p>To define a <code class=\"hljs\">Point</code> struct where <code class=\"hljs\">x</code> and <code class=\"hljs\">y</code> are both generics but could have\ndifferent types, we can use multiple generic type parameters. For example, in\nListing 10-8, we change the definition of <code class=\"hljs\">Point</code> to be generic over types <code class=\"hljs\">T</code>\nand <code class=\"hljs\">U</code> where <code class=\"hljs\">x</code> is of type <code class=\"hljs\">T</code> and <code class=\"hljs\">y</code> is of type <code class=\"hljs\">U</code>.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Point</span></span>&lt;T, U&gt; {\n    x: T,\n    y: U,\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> both_integer = Point { x: <span class=\"hljs-number\">5</span>, y: <span class=\"hljs-number\">10</span> };\n    <span class=\"hljs-keyword\">let</span> both_float = Point { x: <span class=\"hljs-number\">1.0</span>, y: <span class=\"hljs-number\">4.0</span> };\n    <span class=\"hljs-keyword\">let</span> integer_and_float = Point { x: <span class=\"hljs-number\">5</span>, y: <span class=\"hljs-number\">4.0</span> };\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 10-8: A <code class=\"hljs\">Point&lt;T, U&gt;</code> generic over two types so\nthat <code class=\"hljs\">x</code> and <code class=\"hljs\">y</code> can be values of different types</span></p>\n<p>Now all the instances of <code class=\"hljs\">Point</code> shown are allowed! You can use as many generic\ntype parameters in a definition as you want, but using more than a few makes\nyour code hard to read. If you‚Äôre finding you need lots of generic types in\nyour code, it could indicate that your code needs restructuring into smaller\npieces.</p>\n<h3 id=\"in-enum-definitions\"><a class=\"header\" href=\"#in-enum-definitions\">In Enum Definitions</a></h3>\n<p>As we did with structs, we can define enums to hold generic data types in their\nvariants. Let‚Äôs take another look at the <code class=\"hljs\">Option&lt;T&gt;</code> enum that the standard\nlibrary provides, which we used in Chapter 6:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Option</span></span>&lt;T&gt; {\n    <span class=\"hljs-literal\">Some</span>(T),\n    <span class=\"hljs-literal\">None</span>,\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>This definition should now make more sense to you. As you can see, the\n<code class=\"hljs\">Option&lt;T&gt;</code> enum is generic over type <code class=\"hljs\">T</code> and has two variants: <code class=\"hljs\">Some</code>, which\nholds one value of type <code class=\"hljs\">T</code>, and a <code class=\"hljs\">None</code> variant that doesn‚Äôt hold any value.\nBy using the <code class=\"hljs\">Option&lt;T&gt;</code> enum, we can express the abstract concept of an\noptional value, and because <code class=\"hljs\">Option&lt;T&gt;</code> is generic, we can use this abstraction\nno matter what the type of the optional value is.</p>\n<p>Enums can use multiple generic types as well. The definition of the <code class=\"hljs\">Result</code>\nenum that we used in Chapter 9 is one example:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Result</span></span>&lt;T, E&gt; {\n    <span class=\"hljs-literal\">Ok</span>(T),\n    <span class=\"hljs-literal\">Err</span>(E),\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>The <code class=\"hljs\">Result</code> enum is generic over two types, <code class=\"hljs\">T</code> and <code class=\"hljs\">E</code>, and has two variants:\n<code class=\"hljs\">Ok</code>, which holds a value of type <code class=\"hljs\">T</code>, and <code class=\"hljs\">Err</code>, which holds a value of type\n<code class=\"hljs\">E</code>. This definition makes it convenient to use the <code class=\"hljs\">Result</code> enum anywhere we\nhave an operation that might succeed (return a value of some type <code class=\"hljs\">T</code>) or fail\n(return an error of some type <code class=\"hljs\">E</code>). In fact, this is what we used to open a\nfile in Listing 9-3, where <code class=\"hljs\">T</code> was filled in with the type <code class=\"hljs\">std::fs::File</code> when\nthe file was opened successfully and <code class=\"hljs\">E</code> was filled in with the type\n<code class=\"hljs\">std::io::Error</code> when there were problems opening the file.</p>\n<p>When you recognize situations in your code with multiple struct or enum\ndefinitions that differ only in the types of the values they hold, you can\navoid duplication by using generic types instead.</p>\n<h3 id=\"in-method-definitions\"><a class=\"header\" href=\"#in-method-definitions\">In Method Definitions</a></h3>\n<p>We can implement methods on structs and enums (as we did in Chapter 5) and use\ngeneric types in their definitions too. Listing 10-9 shows the <code class=\"hljs\">Point&lt;T&gt;</code>\nstruct we defined in Listing 10-6 with a method named <code class=\"hljs\">x</code> implemented on it.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Point</span></span>&lt;T&gt; {\n    x: T,\n    y: T,\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; Point&lt;T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">x</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; &amp;T {\n        &amp;<span class=\"hljs-keyword\">self</span>.x\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> p = Point { x: <span class=\"hljs-number\">5</span>, y: <span class=\"hljs-number\">10</span> };\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"p.x = {}\"</span>, p.x());\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 10-9: Implementing a method named <code class=\"hljs\">x</code> on the\n<code class=\"hljs\">Point&lt;T&gt;</code> struct that will return a reference to the <code class=\"hljs\">x</code> field of type\n<code class=\"hljs\">T</code></span></p>\n<p>Here, we‚Äôve defined a method named <code class=\"hljs\">x</code> on <code class=\"hljs\">Point&lt;T&gt;</code> that returns a reference\nto the data in the field <code class=\"hljs\">x</code>.</p>\n<p>Note that we have to declare <code class=\"hljs\">T</code> just after <code class=\"hljs\">impl</code> so we can use <code class=\"hljs\">T</code> to specify\nthat we‚Äôre implementing methods on the type <code class=\"hljs\">Point&lt;T&gt;</code>. By declaring <code class=\"hljs\">T</code> as a\ngeneric type after <code class=\"hljs\">impl</code>, Rust can identify that the type in the angle\nbrackets in <code class=\"hljs\">Point</code> is a generic type rather than a concrete type. We could\nhave chosen a different name for this generic parameter than the generic\nparameter declared in the struct definition, but using the same name is\nconventional. Methods written within an <code class=\"hljs\">impl</code> that declares the generic type\nwill be defined on any instance of the type, no matter what concrete type ends\nup substituting for the generic type.</p>\n<p>We can also specify constraints on generic types when defining methods on the\ntype. We could, for example, implement methods only on <code class=\"hljs\">Point&lt;f32&gt;</code> instances\nrather than on <code class=\"hljs\">Point&lt;T&gt;</code> instances with any generic type. In Listing 10-10 we\nuse the concrete type <code class=\"hljs\">f32</code>, meaning we don‚Äôt declare any types after <code class=\"hljs\">impl</code>.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Point</span></span>&lt;T&gt; {\n</span><span class=\"boring\">    x: T,\n</span><span class=\"boring\">    y: T,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span>&lt;T&gt; Point&lt;T&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">x</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; &amp;T {\n</span><span class=\"boring\">        &amp;<span class=\"hljs-keyword\">self</span>.x\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">impl</span> Point&lt;<span class=\"hljs-built_in\">f32</span>&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">distance_from_origin</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">f32</span> {\n        (<span class=\"hljs-keyword\">self</span>.x.powi(<span class=\"hljs-number\">2</span>) + <span class=\"hljs-keyword\">self</span>.y.powi(<span class=\"hljs-number\">2</span>)).sqrt()\n    }\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> p = Point { x: <span class=\"hljs-number\">5</span>, y: <span class=\"hljs-number\">10</span> };\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"p.x = {}\"</span>, p.x());\n</span><span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 10-10: An <code class=\"hljs\">impl</code> block that only applies to a\nstruct with a particular concrete type for the generic type parameter <code class=\"hljs\">T</code></span></p>\n<p>This code means the type <code class=\"hljs\">Point&lt;f32&gt;</code> will have a <code class=\"hljs\">distance_from_origin</code>\nmethod; other instances of <code class=\"hljs\">Point&lt;T&gt;</code> where <code class=\"hljs\">T</code> is not of type <code class=\"hljs\">f32</code> will not\nhave this method defined. The method measures how far our point is from the\npoint at coordinates (0.0, 0.0) and uses mathematical operations that are\navailable only for floating-point types.</p>\n<p>Generic type parameters in a struct definition aren‚Äôt always the same as those\nyou use in that same struct‚Äôs method signatures. Listing 10-11 uses the generic\ntypes <code class=\"hljs\">X1</code> and <code class=\"hljs\">Y1</code> for the <code class=\"hljs\">Point</code> struct and <code class=\"hljs\">X2</code> <code class=\"hljs\">Y2</code> for the <code class=\"hljs\">mixup</code> method\nsignature to make the example clearer. The method creates a new <code class=\"hljs\">Point</code>\ninstance with the <code class=\"hljs\">x</code> value from the <code class=\"hljs\">self</code> <code class=\"hljs\">Point</code> (of type <code class=\"hljs\">X1</code>) and the <code class=\"hljs\">y</code>\nvalue from the passed-in <code class=\"hljs\">Point</code> (of type <code class=\"hljs\">Y2</code>).</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Point</span></span>&lt;X1, Y1&gt; {\n    x: X1,\n    y: Y1,\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;X1, Y1&gt; Point&lt;X1, Y1&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">mixup</span></span>&lt;X2, Y2&gt;(<span class=\"hljs-keyword\">self</span>, other: Point&lt;X2, Y2&gt;) -&gt; Point&lt;X1, Y2&gt; {\n        Point {\n            x: <span class=\"hljs-keyword\">self</span>.x,\n            y: other.y,\n        }\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> p1 = Point { x: <span class=\"hljs-number\">5</span>, y: <span class=\"hljs-number\">10.4</span> };\n    <span class=\"hljs-keyword\">let</span> p2 = Point { x: <span class=\"hljs-string\">\"Hello\"</span>, y: <span class=\"hljs-string\">'c'</span> };\n\n    <span class=\"hljs-keyword\">let</span> p3 = p1.mixup(p2);\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"p3.x = {}, p3.y = {}\"</span>, p3.x, p3.y);\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 10-11: A method that uses generic types different\nfrom its struct‚Äôs definition</span></p>\n<p>In <code class=\"hljs\">main</code>, we‚Äôve defined a <code class=\"hljs\">Point</code> that has an <code class=\"hljs\">i32</code> for <code class=\"hljs\">x</code> (with value <code class=\"hljs\">5</code>)\nand an <code class=\"hljs\">f64</code> for <code class=\"hljs\">y</code> (with value <code class=\"hljs\">10.4</code>). The <code class=\"hljs\">p2</code> variable is a <code class=\"hljs\">Point</code> struct\nthat has a string slice for <code class=\"hljs\">x</code> (with value <code class=\"hljs\">\"Hello\"</code>) and a <code class=\"hljs\">char</code> for <code class=\"hljs\">y</code>\n(with value <code class=\"hljs\">c</code>). Calling <code class=\"hljs\">mixup</code> on <code class=\"hljs\">p1</code> with the argument <code class=\"hljs\">p2</code> gives us <code class=\"hljs\">p3</code>,\nwhich will have an <code class=\"hljs\">i32</code> for <code class=\"hljs\">x</code> because <code class=\"hljs\">x</code> came from <code class=\"hljs\">p1</code>. The <code class=\"hljs\">p3</code> variable\nwill have a <code class=\"hljs\">char</code> for <code class=\"hljs\">y</code> because <code class=\"hljs\">y</code> came from <code class=\"hljs\">p2</code>. The <code class=\"hljs\">println!</code> macro\ncall will print <code class=\"hljs\">p3.x = 5, p3.y = c</code>.</p>\n<p>The purpose of this example is to demonstrate a situation in which some generic\nparameters are declared with <code class=\"hljs\">impl</code> and some are declared with the method\ndefinition. Here, the generic parameters <code class=\"hljs\">X1</code> and <code class=\"hljs\">Y1</code> are declared after\n<code class=\"hljs\">impl</code> because they go with the struct definition. The generic parameters <code class=\"hljs\">X2</code>\nand <code class=\"hljs\">Y2</code> are declared after <code class=\"hljs\">fn mixup</code> because they‚Äôre only relevant to the\nmethod.</p>\n<h3 id=\"performance-of-code-using-generics\"><a class=\"header\" href=\"#performance-of-code-using-generics\">Performance of Code Using Generics</a></h3>\n<p>You might be wondering whether there is a runtime cost when using generic type\nparameters. The good news is that using generic types won‚Äôt make your program\nrun any slower than it would with concrete types.</p>\n<p>Rust accomplishes this by performing monomorphization of the code using\ngenerics at compile time. <em>Monomorphization</em> is the process of turning generic\ncode into specific code by filling in the concrete types that are used when\ncompiled. In this process, the compiler does the opposite of the steps we used\nto create the generic function in Listing 10-5: the compiler looks at all the\nplaces where generic code is called and generates code for the concrete types\nthe generic code is called with.</p>\n<p>Let‚Äôs look at how this works by using the standard library‚Äôs generic\n<code class=\"hljs\">Option&lt;T&gt;</code> enum:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> integer = <span class=\"hljs-literal\">Some</span>(<span class=\"hljs-number\">5</span>);\n<span class=\"hljs-keyword\">let</span> float = <span class=\"hljs-literal\">Some</span>(<span class=\"hljs-number\">5.0</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<p>When Rust compiles this code, it performs monomorphization. During that\nprocess, the compiler reads the values that have been used in <code class=\"hljs\">Option&lt;T&gt;</code>\ninstances and identifies two kinds of <code class=\"hljs\">Option&lt;T&gt;</code>: one is <code class=\"hljs\">i32</code> and the other\nis <code class=\"hljs\">f64</code>. As such, it expands the generic definition of <code class=\"hljs\">Option&lt;T&gt;</code> into two\ndefinitions specialized to <code class=\"hljs\">i32</code> and <code class=\"hljs\">f64</code>, thereby replacing the generic\ndefinition with the specific ones.</p>\n<p>The monomorphized version of the code looks similar to the following (the\ncompiler uses different names than what we‚Äôre using here for illustration):</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Option_i32</span></span> {\n    <span class=\"hljs-literal\">Some</span>(<span class=\"hljs-built_in\">i32</span>),\n    <span class=\"hljs-literal\">None</span>,\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Option_f64</span></span> {\n    <span class=\"hljs-literal\">Some</span>(<span class=\"hljs-built_in\">f64</span>),\n    <span class=\"hljs-literal\">None</span>,\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> integer = Option_i32::<span class=\"hljs-literal\">Some</span>(<span class=\"hljs-number\">5</span>);\n    <span class=\"hljs-keyword\">let</span> float = Option_f64::<span class=\"hljs-literal\">Some</span>(<span class=\"hljs-number\">5.0</span>);\n}</code></pre></pre>\n<p>The generic <code class=\"hljs\">Option&lt;T&gt;</code> is replaced with the specific definitions created by\nthe compiler. Because Rust compiles generic code into code that specifies the\ntype in each instance, we pay no runtime cost for using generics. When the code\nruns, it performs just as it would if we had duplicated each definition by\nhand. The process of monomorphization makes Rust‚Äôs generics extremely efficient\nat runtime.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"traits-defining-shared-behavior\"><a class=\"header\" href=\"#traits-defining-shared-behavior\">Traits: Defining Shared Behavior</a></h2>\n<p>A <em>trait</em> defines the functionality a particular type has and can share with\nother types. We can use traits to define shared behavior in an abstract way. We\ncan use <em>trait bounds</em> to specify that a generic type can be any type that has\ncertain behavior.</p>\n<section class=\"note\" aria-role=\"note\">\n<p>Note: Traits are similar to a feature often called <em>interfaces</em> in other\nlanguages, although with some differences.</p>\n</section>\n<h3 id=\"defining-a-trait\"><a class=\"header\" href=\"#defining-a-trait\">Defining a Trait</a></h3>\n<p>A type‚Äôs behavior consists of the methods we can call on that type. Different\ntypes share the same behavior if we can call the same methods on all of those\ntypes. Trait definitions are a way to group method signatures together to\ndefine a set of behaviors necessary to accomplish some purpose.</p>\n<p>For example, let‚Äôs say we have multiple structs that hold various kinds and\namounts of text: a <code class=\"hljs\">NewsArticle</code> struct that holds a news story filed in a\nparticular location and a <code class=\"hljs\">Tweet</code> that can have, at most, 280 characters along\nwith metadata that indicates whether it was a new tweet, a retweet, or a reply\nto another tweet.</p>\n<p>We want to make a media aggregator library crate named <code class=\"hljs\">aggregator</code> that can\ndisplay summaries of data that might be stored in a <code class=\"hljs\">NewsArticle</code> or <code class=\"hljs\">Tweet</code>\ninstance. To do this, we need a summary from each type, and we‚Äôll request that\nsummary by calling a <code class=\"hljs\">summarize</code> method on an instance. Listing 10-12 shows the\ndefinition of a public <code class=\"hljs\">Summary</code> trait that expresses this behavior.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust noplayground hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Summary</span></span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">summarize</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">String</span>;\n}</code></pre>\n<p><span class=\"caption\">Listing 10-12: A <code class=\"hljs\">Summary</code> trait that consists of the\nbehavior provided by a <code class=\"hljs\">summarize</code> method</span></p>\n<p>Here, we declare a trait using the <code class=\"hljs\">trait</code> keyword and then the trait‚Äôs name,\nwhich is <code class=\"hljs\">Summary</code> in this case. We also declare the trait as <code class=\"hljs\">pub</code> so that\ncrates depending on this crate can make use of this trait too, as we‚Äôll see in\na few examples. Inside the curly brackets, we declare the method signatures\nthat describe the behaviors of the types that implement this trait, which in\nthis case is <code class=\"hljs\">fn summarize(&amp;self) -&gt; String</code>.</p>\n<p>After the method signature, instead of providing an implementation within curly\nbrackets, we use a semicolon. Each type implementing this trait must provide\nits own custom behavior for the body of the method. The compiler will enforce\nthat any type that has the <code class=\"hljs\">Summary</code> trait will have the method <code class=\"hljs\">summarize</code>\ndefined with this signature exactly.</p>\n<p>A trait can have multiple methods in its body: the method signatures are listed\none per line, and each line ends in a semicolon.</p>\n<h3 id=\"implementing-a-trait-on-a-type\"><a class=\"header\" href=\"#implementing-a-trait-on-a-type\">Implementing a Trait on a Type</a></h3>\n<p>Now that we‚Äôve defined the desired signatures of the <code class=\"hljs\">Summary</code> trait‚Äôs methods,\nwe can implement it on the types in our media aggregator. Listing 10-13 shows\nan implementation of the <code class=\"hljs\">Summary</code> trait on the <code class=\"hljs\">NewsArticle</code> struct that uses\nthe headline, the author, and the location to create the return value of\n<code class=\"hljs\">summarize</code>. For the <code class=\"hljs\">Tweet</code> struct, we define <code class=\"hljs\">summarize</code> as the username\nfollowed by the entire text of the tweet, assuming that the tweet content is\nalready limited to 280 characters.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Summary</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">summarize</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">String</span>;\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">NewsArticle</span></span> {\n    <span class=\"hljs-keyword\">pub</span> headline: <span class=\"hljs-built_in\">String</span>,\n    <span class=\"hljs-keyword\">pub</span> location: <span class=\"hljs-built_in\">String</span>,\n    <span class=\"hljs-keyword\">pub</span> author: <span class=\"hljs-built_in\">String</span>,\n    <span class=\"hljs-keyword\">pub</span> content: <span class=\"hljs-built_in\">String</span>,\n}\n\n<span class=\"hljs-keyword\">impl</span> Summary <span class=\"hljs-keyword\">for</span> NewsArticle {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">summarize</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">String</span> {\n        <span class=\"hljs-built_in\">format!</span>(<span class=\"hljs-string\">\"{}, by {} ({})\"</span>, <span class=\"hljs-keyword\">self</span>.headline, <span class=\"hljs-keyword\">self</span>.author, <span class=\"hljs-keyword\">self</span>.location)\n    }\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Tweet</span></span> {\n    <span class=\"hljs-keyword\">pub</span> username: <span class=\"hljs-built_in\">String</span>,\n    <span class=\"hljs-keyword\">pub</span> content: <span class=\"hljs-built_in\">String</span>,\n    <span class=\"hljs-keyword\">pub</span> reply: <span class=\"hljs-built_in\">bool</span>,\n    <span class=\"hljs-keyword\">pub</span> retweet: <span class=\"hljs-built_in\">bool</span>,\n}\n\n<span class=\"hljs-keyword\">impl</span> Summary <span class=\"hljs-keyword\">for</span> Tweet {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">summarize</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">String</span> {\n        <span class=\"hljs-built_in\">format!</span>(<span class=\"hljs-string\">\"{}: {}\"</span>, <span class=\"hljs-keyword\">self</span>.username, <span class=\"hljs-keyword\">self</span>.content)\n    }\n}</code></pre>\n<p><span class=\"caption\">Listing 10-13: Implementing the <code class=\"hljs\">Summary</code> trait on the\n<code class=\"hljs\">NewsArticle</code> and <code class=\"hljs\">Tweet</code> types</span></p>\n<p>Implementing a trait on a type is similar to implementing regular methods. The\ndifference is that after <code class=\"hljs\">impl</code>, we put the trait name we want to implement,\nthen use the <code class=\"hljs\">for</code> keyword, and then specify the name of the type we want to\nimplement the trait for. Within the <code class=\"hljs\">impl</code> block, we put the method signatures\nthat the trait definition has defined. Instead of adding a semicolon after each\nsignature, we use curly brackets and fill in the method body with the specific\nbehavior that we want the methods of the trait to have for the particular type.</p>\n<p>Now that the library has implemented the <code class=\"hljs\">Summary</code> trait on <code class=\"hljs\">NewsArticle</code> and\n<code class=\"hljs\">Tweet</code>, users of the crate can call the trait methods on instances of\n<code class=\"hljs\">NewsArticle</code> and <code class=\"hljs\">Tweet</code> in the same way we call regular methods. The only\ndifference is that the user must bring the trait into scope as well as the\ntypes. Here‚Äôs an example of how a binary crate could use our <code class=\"hljs\">aggregator</code>\nlibrary crate:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">use</span> aggregator::{Summary, Tweet};\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> tweet = Tweet {\n        username: <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"horse_ebooks\"</span>),\n        content: <span class=\"hljs-built_in\">String</span>::from(\n            <span class=\"hljs-string\">\"of course, as you probably already know, people\"</span>,\n        ),\n        reply: <span class=\"hljs-literal\">false</span>,\n        retweet: <span class=\"hljs-literal\">false</span>,\n    };\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"1 new tweet: {}\"</span>, tweet.summarize());\n}</code></pre>\n<p>This code prints <code class=\"hljs\">1 new tweet: horse_ebooks: of course, as you probably already know, people</code>.</p>\n<p>Other crates that depend on the <code class=\"hljs\">aggregator</code> crate can also bring the <code class=\"hljs\">Summary</code>\ntrait into scope to implement <code class=\"hljs\">Summary</code> on their own types. One restriction to\nnote is that we can implement a trait on a type only if either the trait or the\ntype, or both, are local to our crate. For example, we can implement standard\nlibrary traits like <code class=\"hljs\">Display</code> on a custom type like <code class=\"hljs\">Tweet</code> as part of our\n<code class=\"hljs\">aggregator</code> crate functionality because the type <code class=\"hljs\">Tweet</code> is local to our\n<code class=\"hljs\">aggregator</code> crate. We can also implement <code class=\"hljs\">Summary</code> on <code class=\"hljs\">Vec&lt;T&gt;</code> in our\n<code class=\"hljs\">aggregator</code> crate because the trait <code class=\"hljs\">Summary</code> is local to our <code class=\"hljs\">aggregator</code>\ncrate.</p>\n<p>But we can‚Äôt implement external traits on external types. For example, we can‚Äôt\nimplement the <code class=\"hljs\">Display</code> trait on <code class=\"hljs\">Vec&lt;T&gt;</code> within our <code class=\"hljs\">aggregator</code> crate because\n<code class=\"hljs\">Display</code> and <code class=\"hljs\">Vec&lt;T&gt;</code> are both defined in the standard library and aren‚Äôt\nlocal to our <code class=\"hljs\">aggregator</code> crate. This restriction is part of a property called\n<em>coherence</em>, and more specifically the <em>orphan rule</em>, so named because the\nparent type is not present. This rule ensures that other people‚Äôs code can‚Äôt\nbreak your code and vice versa. Without the rule, two crates could implement\nthe same trait for the same type, and Rust wouldn‚Äôt know which implementation\nto use.</p>\n<h3 id=\"default-implementations\"><a class=\"header\" href=\"#default-implementations\">Default Implementations</a></h3>\n<p>Sometimes it‚Äôs useful to have default behavior for some or all of the methods\nin a trait instead of requiring implementations for all methods on every type.\nThen, as we implement the trait on a particular type, we can keep or override\neach method‚Äôs default behavior.</p>\n<p>In Listing 10-14, we specify a default string for the <code class=\"hljs\">summarize</code> method of the\n<code class=\"hljs\">Summary</code> trait instead of only defining the method signature, as we did in\nListing 10-12.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground hljs hide-boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Summary</span></span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">summarize</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">String</span> {\n        <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"(Read more...)\"</span>)\n    }\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">NewsArticle</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> headline: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> location: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> author: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> content: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Summary <span class=\"hljs-keyword\">for</span> NewsArticle {}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Tweet</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> username: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> content: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> reply: <span class=\"hljs-built_in\">bool</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> retweet: <span class=\"hljs-built_in\">bool</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Summary <span class=\"hljs-keyword\">for</span> Tweet {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">summarize</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">String</span> {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">format!</span>(<span class=\"hljs-string\">\"{}: {}\"</span>, <span class=\"hljs-keyword\">self</span>.username, <span class=\"hljs-keyword\">self</span>.content)\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre>\n<p><span class=\"caption\">Listing 10-14: Defining a <code class=\"hljs\">Summary</code> trait with a default\nimplementation of the <code class=\"hljs\">summarize</code> method</span></p>\n<p>To use a default implementation to summarize instances of <code class=\"hljs\">NewsArticle</code>, we\nspecify an empty <code class=\"hljs\">impl</code> block with <code class=\"hljs\">impl Summary for NewsArticle {}</code>.</p>\n<p>Even though we‚Äôre no longer defining the <code class=\"hljs\">summarize</code> method on <code class=\"hljs\">NewsArticle</code>\ndirectly, we‚Äôve provided a default implementation and specified that\n<code class=\"hljs\">NewsArticle</code> implements the <code class=\"hljs\">Summary</code> trait. As a result, we can still call\nthe <code class=\"hljs\">summarize</code> method on an instance of <code class=\"hljs\">NewsArticle</code>, like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> aggregator::{<span class=\"hljs-keyword\">self</span>, NewsArticle, Summary};\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> article = NewsArticle {\n        headline: <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Penguins win the Stanley Cup Championship!\"</span>),\n        location: <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Pittsburgh, PA, USA\"</span>),\n        author: <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Iceburgh\"</span>),\n        content: <span class=\"hljs-built_in\">String</span>::from(\n            <span class=\"hljs-string\">\"The Pittsburgh Penguins once again are the best \\\n             hockey team in the NHL.\"</span>,\n        ),\n    };\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"New article available! {}\"</span>, article.summarize());\n<span class=\"boring\">}</span></code></pre>\n<p>This code prints <code class=\"hljs\">New article available! (Read more...)</code>.</p>\n<p>Creating a default implementation doesn‚Äôt require us to change anything about\nthe implementation of <code class=\"hljs\">Summary</code> on <code class=\"hljs\">Tweet</code> in Listing 10-13. The reason is that\nthe syntax for overriding a default implementation is the same as the syntax\nfor implementing a trait method that doesn‚Äôt have a default implementation.</p>\n<p>Default implementations can call other methods in the same trait, even if those\nother methods don‚Äôt have a default implementation. In this way, a trait can\nprovide a lot of useful functionality and only require implementors to specify\na small part of it. For example, we could define the <code class=\"hljs\">Summary</code> trait to have a\n<code class=\"hljs\">summarize_author</code> method whose implementation is required, and then define a\n<code class=\"hljs\">summarize</code> method that has a default implementation that calls the\n<code class=\"hljs\">summarize_author</code> method:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground hljs hide-boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Summary</span></span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">summarize_author</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">String</span>;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">summarize</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">String</span> {\n        <span class=\"hljs-built_in\">format!</span>(<span class=\"hljs-string\">\"(Read more from {}...)\"</span>, <span class=\"hljs-keyword\">self</span>.summarize_author())\n    }\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Tweet</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> username: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> content: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> reply: <span class=\"hljs-built_in\">bool</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> retweet: <span class=\"hljs-built_in\">bool</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Summary <span class=\"hljs-keyword\">for</span> Tweet {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">summarize_author</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">String</span> {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">format!</span>(<span class=\"hljs-string\">\"@{}\"</span>, <span class=\"hljs-keyword\">self</span>.username)\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre>\n<p>To use this version of <code class=\"hljs\">Summary</code>, we only need to define <code class=\"hljs\">summarize_author</code>\nwhen we implement the trait on a type:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Summary</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">summarize_author</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">String</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">summarize</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">String</span> {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">format!</span>(<span class=\"hljs-string\">\"(Read more from {}...)\"</span>, <span class=\"hljs-keyword\">self</span>.summarize_author())\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Tweet</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> username: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> content: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> reply: <span class=\"hljs-built_in\">bool</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> retweet: <span class=\"hljs-built_in\">bool</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">impl</span> Summary <span class=\"hljs-keyword\">for</span> Tweet {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">summarize_author</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">String</span> {\n        <span class=\"hljs-built_in\">format!</span>(<span class=\"hljs-string\">\"@{}\"</span>, <span class=\"hljs-keyword\">self</span>.username)\n    }\n}</code></pre>\n<p>After we define <code class=\"hljs\">summarize_author</code>, we can call <code class=\"hljs\">summarize</code> on instances of the\n<code class=\"hljs\">Tweet</code> struct, and the default implementation of <code class=\"hljs\">summarize</code> will call the\ndefinition of <code class=\"hljs\">summarize_author</code> that we‚Äôve provided. Because we‚Äôve implemented\n<code class=\"hljs\">summarize_author</code>, the <code class=\"hljs\">Summary</code> trait has given us the behavior of the\n<code class=\"hljs\">summarize</code> method without requiring us to write any more code. Here‚Äôs what\nthat looks like:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> aggregator::{<span class=\"hljs-keyword\">self</span>, Summary, Tweet};\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> tweet = Tweet {\n        username: <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"horse_ebooks\"</span>),\n        content: <span class=\"hljs-built_in\">String</span>::from(\n            <span class=\"hljs-string\">\"of course, as you probably already know, people\"</span>,\n        ),\n        reply: <span class=\"hljs-literal\">false</span>,\n        retweet: <span class=\"hljs-literal\">false</span>,\n    };\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"1 new tweet: {}\"</span>, tweet.summarize());\n<span class=\"boring\">}</span></code></pre>\n<p>This code prints <code class=\"hljs\">1 new tweet: (Read more from @horse_ebooks...)</code>.</p>\n<p>Note that it isn‚Äôt possible to call the default implementation from an\noverriding implementation of that same method.</p>\n<h3 id=\"traits-as-parameters\"><a class=\"header\" href=\"#traits-as-parameters\">Traits as Parameters</a></h3>\n<p>Now that you know how to define and implement traits, we can explore how to use\ntraits to define functions that accept many different types. We‚Äôll use the\n<code class=\"hljs\">Summary</code> trait we implemented on the <code class=\"hljs\">NewsArticle</code> and <code class=\"hljs\">Tweet</code> types in\nListing 10-13 to define a <code class=\"hljs\">notify</code> function that calls the <code class=\"hljs\">summarize</code> method\non its <code class=\"hljs\">item</code> parameter, which is of some type that implements the <code class=\"hljs\">Summary</code>\ntrait. To do this, we use the <code class=\"hljs\">impl Trait</code> syntax, like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Summary</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">summarize</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">String</span>;\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">NewsArticle</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> headline: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> location: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> author: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> content: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Summary <span class=\"hljs-keyword\">for</span> NewsArticle {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">summarize</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">String</span> {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">format!</span>(<span class=\"hljs-string\">\"{}, by {} ({})\"</span>, <span class=\"hljs-keyword\">self</span>.headline, <span class=\"hljs-keyword\">self</span>.author, <span class=\"hljs-keyword\">self</span>.location)\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Tweet</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> username: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> content: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> reply: <span class=\"hljs-built_in\">bool</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> retweet: <span class=\"hljs-built_in\">bool</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Summary <span class=\"hljs-keyword\">for</span> Tweet {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">summarize</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">String</span> {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">format!</span>(<span class=\"hljs-string\">\"{}: {}\"</span>, <span class=\"hljs-keyword\">self</span>.username, <span class=\"hljs-keyword\">self</span>.content)\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">notify</span></span>(item: &amp;<span class=\"hljs-keyword\">impl</span> Summary) {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Breaking news! {}\"</span>, item.summarize());\n}</code></pre>\n<p>Instead of a concrete type for the <code class=\"hljs\">item</code> parameter, we specify the <code class=\"hljs\">impl</code>\nkeyword and the trait name. This parameter accepts any type that implements the\nspecified trait. In the body of <code class=\"hljs\">notify</code>, we can call any methods on <code class=\"hljs\">item</code>\nthat come from the <code class=\"hljs\">Summary</code> trait, such as <code class=\"hljs\">summarize</code>. We can call <code class=\"hljs\">notify</code>\nand pass in any instance of <code class=\"hljs\">NewsArticle</code> or <code class=\"hljs\">Tweet</code>. Code that calls the\nfunction with any other type, such as a <code class=\"hljs\">String</code> or an <code class=\"hljs\">i32</code>, won‚Äôt compile\nbecause those types don‚Äôt implement <code class=\"hljs\">Summary</code>.</p>\n<!-- Old headings. Do not remove or links may break. -->\n<p><a id=\"fixing-the-largest-function-with-trait-bounds\"></a></p>\n<h4 id=\"trait-bound-syntax\"><a class=\"header\" href=\"#trait-bound-syntax\">Trait Bound Syntax</a></h4>\n<p>The <code class=\"hljs\">impl Trait</code> syntax works for straightforward cases but is actually syntax\nsugar for a longer form known as a <em>trait bound</em>; it looks like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">notify</span></span>&lt;T: Summary&gt;(item: &amp;T) {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Breaking news! {}\"</span>, item.summarize());\n}</code></pre>\n<p>This longer form is equivalent to the example in the previous section but is\nmore verbose. We place trait bounds with the declaration of the generic type\nparameter after a colon and inside angle brackets.</p>\n<p>The <code class=\"hljs\">impl Trait</code> syntax is convenient and makes for more concise code in simple\ncases, while the fuller trait bound syntax can express more complexity in other\ncases. For example, we can have two parameters that implement <code class=\"hljs\">Summary</code>. Doing\nso with the <code class=\"hljs\">impl Trait</code> syntax looks like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">notify</span></span>(item1: &amp;<span class=\"hljs-keyword\">impl</span> Summary, item2: &amp;<span class=\"hljs-keyword\">impl</span> Summary) {</code></pre>\n<p>Using <code class=\"hljs\">impl Trait</code> is appropriate if we want this function to allow <code class=\"hljs\">item1</code> and\n<code class=\"hljs\">item2</code> to have different types (as long as both types implement <code class=\"hljs\">Summary</code>). If\nwe want to force both parameters to have the same type, however, we must use a\ntrait bound, like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">notify</span></span>&lt;T: Summary&gt;(item1: &amp;T, item2: &amp;T) {</code></pre>\n<p>The generic type <code class=\"hljs\">T</code> specified as the type of the <code class=\"hljs\">item1</code> and <code class=\"hljs\">item2</code>\nparameters constrains the function such that the concrete type of the value\npassed as an argument for <code class=\"hljs\">item1</code> and <code class=\"hljs\">item2</code> must be the same.</p>\n<h4 id=\"specifying-multiple-trait-bounds-with-the--syntax\"><a class=\"header\" href=\"#specifying-multiple-trait-bounds-with-the--syntax\">Specifying Multiple Trait Bounds with the <code>+</code> Syntax</a></h4>\n<p>We can also specify more than one trait bound. Say we wanted <code class=\"hljs\">notify</code> to use\ndisplay formatting as well as <code class=\"hljs\">summarize</code> on <code class=\"hljs\">item</code>: we specify in the <code class=\"hljs\">notify</code>\ndefinition that <code class=\"hljs\">item</code> must implement both <code class=\"hljs\">Display</code> and <code class=\"hljs\">Summary</code>. We can do\nso using the <code class=\"hljs\">+</code> syntax:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">notify</span></span>(item: &amp;(<span class=\"hljs-keyword\">impl</span> Summary + Display)) {</code></pre>\n<p>The <code class=\"hljs\">+</code> syntax is also valid with trait bounds on generic types:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">notify</span></span>&lt;T: Summary + Display&gt;(item: &amp;T) {</code></pre>\n<p>With the two trait bounds specified, the body of <code class=\"hljs\">notify</code> can call <code class=\"hljs\">summarize</code>\nand use <code class=\"hljs\">{}</code> to format <code class=\"hljs\">item</code>.</p>\n<h4 id=\"clearer-trait-bounds-with-where-clauses\"><a class=\"header\" href=\"#clearer-trait-bounds-with-where-clauses\">Clearer Trait Bounds with <code>where</code> Clauses</a></h4>\n<p>Using too many trait bounds has its downsides. Each generic has its own trait\nbounds, so functions with multiple generic type parameters can contain lots of\ntrait bound information between the function‚Äôs name and its parameter list,\nmaking the function signature hard to read. For this reason, Rust has alternate\nsyntax for specifying trait bounds inside a <code class=\"hljs\">where</code> clause after the function\nsignature. So, instead of writing this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">some_function</span></span>&lt;T: Display + <span class=\"hljs-built_in\">Clone</span>, U: <span class=\"hljs-built_in\">Clone</span> + <span class=\"hljs-built_in\">Debug</span>&gt;(t: &amp;T, u: &amp;U) -&gt; <span class=\"hljs-built_in\">i32</span> {</code></pre>\n<p>we can use a <code class=\"hljs\">where</code> clause, like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">some_function</span></span>&lt;T, U&gt;(t: &amp;T, u: &amp;U) -&gt; <span class=\"hljs-built_in\">i32</span>\n<span class=\"hljs-keyword\">where</span>\n    T: Display + <span class=\"hljs-built_in\">Clone</span>,\n    U: <span class=\"hljs-built_in\">Clone</span> + <span class=\"hljs-built_in\">Debug</span>,\n{\n<span class=\"boring\">    <span class=\"hljs-built_in\">unimplemented!</span>()\n</span><span class=\"boring\">}</span></code></pre>\n<p>This function‚Äôs signature is less cluttered: the function name, parameter list,\nand return type are close together, similar to a function without lots of trait\nbounds.</p>\n<h3 id=\"returning-types-that-implement-traits\"><a class=\"header\" href=\"#returning-types-that-implement-traits\">Returning Types That Implement Traits</a></h3>\n<p>We can also use the <code class=\"hljs\">impl Trait</code> syntax in the return position to return a\nvalue of some type that implements a trait, as shown here:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Summary</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">summarize</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">String</span>;\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">NewsArticle</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> headline: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> location: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> author: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> content: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Summary <span class=\"hljs-keyword\">for</span> NewsArticle {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">summarize</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">String</span> {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">format!</span>(<span class=\"hljs-string\">\"{}, by {} ({})\"</span>, <span class=\"hljs-keyword\">self</span>.headline, <span class=\"hljs-keyword\">self</span>.author, <span class=\"hljs-keyword\">self</span>.location)\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Tweet</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> username: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> content: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> reply: <span class=\"hljs-built_in\">bool</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> retweet: <span class=\"hljs-built_in\">bool</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Summary <span class=\"hljs-keyword\">for</span> Tweet {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">summarize</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">String</span> {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">format!</span>(<span class=\"hljs-string\">\"{}: {}\"</span>, <span class=\"hljs-keyword\">self</span>.username, <span class=\"hljs-keyword\">self</span>.content)\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">returns_summarizable</span></span>() -&gt; <span class=\"hljs-keyword\">impl</span> Summary {\n    Tweet {\n        username: <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"horse_ebooks\"</span>),\n        content: <span class=\"hljs-built_in\">String</span>::from(\n            <span class=\"hljs-string\">\"of course, as you probably already know, people\"</span>,\n        ),\n        reply: <span class=\"hljs-literal\">false</span>,\n        retweet: <span class=\"hljs-literal\">false</span>,\n    }\n}</code></pre>\n<p>By using <code class=\"hljs\">impl Summary</code> for the return type, we specify that the\n<code class=\"hljs\">returns_summarizable</code> function returns some type that implements the <code class=\"hljs\">Summary</code>\ntrait without naming the concrete type. In this case, <code class=\"hljs\">returns_summarizable</code>\nreturns a <code class=\"hljs\">Tweet</code>, but the code calling this function doesn‚Äôt need to know that.</p>\n<p>The ability to specify a return type only by the trait it implements is\nespecially useful in the context of closures and iterators, which we cover in\nChapter 13. Closures and iterators create types that only the compiler knows or\ntypes that are very long to specify. The <code class=\"hljs\">impl Trait</code> syntax lets you concisely\nspecify that a function returns some type that implements the <code class=\"hljs\">Iterator</code> trait\nwithout needing to write out a very long type.</p>\n<p>However, you can only use <code class=\"hljs\">impl Trait</code> if you‚Äôre returning a single type. For\nexample, this code that returns either a <code class=\"hljs\">NewsArticle</code> or a <code class=\"hljs\">Tweet</code> with the\nreturn type specified as <code class=\"hljs\">impl Summary</code> wouldn‚Äôt work:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Summary</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">summarize</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">String</span>;\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">NewsArticle</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> headline: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> location: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> author: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> content: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Summary <span class=\"hljs-keyword\">for</span> NewsArticle {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">summarize</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">String</span> {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">format!</span>(<span class=\"hljs-string\">\"{}, by {} ({})\"</span>, <span class=\"hljs-keyword\">self</span>.headline, <span class=\"hljs-keyword\">self</span>.author, <span class=\"hljs-keyword\">self</span>.location)\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Tweet</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> username: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> content: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> reply: <span class=\"hljs-built_in\">bool</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> retweet: <span class=\"hljs-built_in\">bool</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Summary <span class=\"hljs-keyword\">for</span> Tweet {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">summarize</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">String</span> {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">format!</span>(<span class=\"hljs-string\">\"{}: {}\"</span>, <span class=\"hljs-keyword\">self</span>.username, <span class=\"hljs-keyword\">self</span>.content)\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">returns_summarizable</span></span>(switch: <span class=\"hljs-built_in\">bool</span>) -&gt; <span class=\"hljs-keyword\">impl</span> Summary {\n    <span class=\"hljs-keyword\">if</span> switch {\n        NewsArticle {\n            headline: <span class=\"hljs-built_in\">String</span>::from(\n                <span class=\"hljs-string\">\"Penguins win the Stanley Cup Championship!\"</span>,\n            ),\n            location: <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Pittsburgh, PA, USA\"</span>),\n            author: <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Iceburgh\"</span>),\n            content: <span class=\"hljs-built_in\">String</span>::from(\n                <span class=\"hljs-string\">\"The Pittsburgh Penguins once again are the best \\\n                 hockey team in the NHL.\"</span>,\n            ),\n        }\n    } <span class=\"hljs-keyword\">else</span> {\n        Tweet {\n            username: <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"horse_ebooks\"</span>),\n            content: <span class=\"hljs-built_in\">String</span>::from(\n                <span class=\"hljs-string\">\"of course, as you probably already know, people\"</span>,\n            ),\n            reply: <span class=\"hljs-literal\">false</span>,\n            retweet: <span class=\"hljs-literal\">false</span>,\n        }\n    }\n}</code></pre>\n<p>Returning either a <code class=\"hljs\">NewsArticle</code> or a <code class=\"hljs\">Tweet</code> isn‚Äôt allowed due to restrictions\naround how the <code class=\"hljs\">impl Trait</code> syntax is implemented in the compiler. We‚Äôll cover\nhow to write a function with this behavior in the <a href=\"ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types\">‚ÄúUsing Trait Objects That\nAllow for Values of Different\nTypes‚Äù</a><!--\nignore --> section of Chapter 17.</p>\n<h3 id=\"using-trait-bounds-to-conditionally-implement-methods\"><a class=\"header\" href=\"#using-trait-bounds-to-conditionally-implement-methods\">Using Trait Bounds to Conditionally Implement Methods</a></h3>\n<p>By using a trait bound with an <code class=\"hljs\">impl</code> block that uses generic type parameters,\nwe can implement methods conditionally for types that implement the specified\ntraits. For example, the type <code class=\"hljs\">Pair&lt;T&gt;</code> in Listing 10-15 always implements the\n<code class=\"hljs\">new</code> function to return a new instance of <code class=\"hljs\">Pair&lt;T&gt;</code> (recall from the\n<a href=\"ch05-03-method-syntax.html#defining-methods\">‚ÄúDefining Methods‚Äù</a><!-- ignore --> section of Chapter 5 that <code class=\"hljs\">Self</code>\nis a type alias for the type of the <code class=\"hljs\">impl</code> block, which in this case is\n<code class=\"hljs\">Pair&lt;T&gt;</code>). But in the next <code class=\"hljs\">impl</code> block, <code class=\"hljs\">Pair&lt;T&gt;</code> only implements the\n<code class=\"hljs\">cmp_display</code> method if its inner type <code class=\"hljs\">T</code> implements the <code class=\"hljs\">PartialOrd</code> trait\nthat enables comparison <em>and</em> the <code class=\"hljs\">Display</code> trait that enables printing.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust noplayground hljs\"><span class=\"hljs-keyword\">use</span> std::fmt::Display;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Pair</span></span>&lt;T&gt; {\n    x: T,\n    y: T,\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; Pair&lt;T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(x: T, y: T) -&gt; <span class=\"hljs-keyword\">Self</span> {\n        <span class=\"hljs-keyword\">Self</span> { x, y }\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T: Display + <span class=\"hljs-built_in\">PartialOrd</span>&gt; Pair&lt;T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">cmp_display</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.x &gt;= <span class=\"hljs-keyword\">self</span>.y {\n            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The largest member is x = {}\"</span>, <span class=\"hljs-keyword\">self</span>.x);\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The largest member is y = {}\"</span>, <span class=\"hljs-keyword\">self</span>.y);\n        }\n    }\n}</code></pre>\n<p><span class=\"caption\">Listing 10-15: Conditionally implementing methods on a\ngeneric type depending on trait bounds</span></p>\n<p>We can also conditionally implement a trait for any type that implements\nanother trait. Implementations of a trait on any type that satisfies the trait\nbounds are called <em>blanket implementations</em> and are used extensively in the\nRust standard library. For example, the standard library implements the\n<code class=\"hljs\">ToString</code> trait on any type that implements the <code class=\"hljs\">Display</code> trait. The <code class=\"hljs\">impl</code>\nblock in the standard library looks similar to this code:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">impl</span>&lt;T: Display&gt; <span class=\"hljs-built_in\">ToString</span> <span class=\"hljs-keyword\">for</span> T {\n    <span class=\"hljs-comment\">// --snip--</span>\n}</code></pre>\n<p>Because the standard library has this blanket implementation, we can call the\n<code class=\"hljs\">to_string</code> method defined by the <code class=\"hljs\">ToString</code> trait on any type that implements\nthe <code class=\"hljs\">Display</code> trait. For example, we can turn integers into their corresponding\n<code class=\"hljs\">String</code> values like this because integers implement <code class=\"hljs\">Display</code>:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> s = <span class=\"hljs-number\">3</span>.to_string();\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Blanket implementations appear in the documentation for the trait in the\n‚ÄúImplementors‚Äù section.</p>\n<p>Traits and trait bounds let us write code that uses generic type parameters to\nreduce duplication but also specify to the compiler that we want the generic\ntype to have particular behavior. The compiler can then use the trait bound\ninformation to check that all the concrete types used with our code provide the\ncorrect behavior. In dynamically typed languages, we would get an error at\nruntime if we called a method on a type which didn‚Äôt define the method. But\nRust moves these errors to compile time so we‚Äôre forced to fix the problems\nbefore our code is even able to run. Additionally, we don‚Äôt have to write code\nthat checks for behavior at runtime because we‚Äôve already checked at compile\ntime. Doing so improves performance without having to give up the flexibility\nof generics.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"validating-references-with-lifetimes\"><a class=\"header\" href=\"#validating-references-with-lifetimes\">Validating References with Lifetimes</a></h2>\n<p>Lifetimes are another kind of generic that we‚Äôve already been using. Rather\nthan ensuring that a type has the behavior we want, lifetimes ensure that\nreferences are valid as long as we need them to be.</p>\n<p>One detail we didn‚Äôt discuss in the <a href=\"ch04-02-references-and-borrowing.html#references-and-borrowing\">‚ÄúReferences and\nBorrowing‚Äù</a><!-- ignore --> section in Chapter 4 is\nthat every reference in Rust has a <em>lifetime</em>, which is the scope for which\nthat reference is valid. Most of the time, lifetimes are implicit and inferred,\njust like most of the time, types are inferred. We must annotate types only\nwhen multiple types are possible. In a similar way, we must annotate lifetimes\nwhen the lifetimes of references could be related in a few different ways. Rust\nrequires us to annotate the relationships using generic lifetime parameters to\nensure the actual references used at runtime will definitely be valid.</p>\n<p>Annotating lifetimes is not a concept most other programming languages have, so\nthis is going to feel unfamiliar. Although we won‚Äôt cover lifetimes in their\nentirety in this chapter, we‚Äôll discuss common ways you might encounter\nlifetime syntax so you can get comfortable with the concept.</p>\n<h3 id=\"preventing-dangling-references-with-lifetimes\"><a class=\"header\" href=\"#preventing-dangling-references-with-lifetimes\">Preventing Dangling References with Lifetimes</a></h3>\n<p>The main aim of lifetimes is to prevent <em>dangling references</em>, which cause a\nprogram to reference data other than the data it‚Äôs intended to reference.\nConsider the program in Listing 10-16, which has an outer scope and an inner\nscope.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> r;\n\n    {\n        <span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">5</span>;\n        r = &amp;x;\n    }\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"r: {r}\"</span>);\n}</code></pre>\n<p><span class=\"caption\">Listing 10-16: An attempt to use a reference whose value\nhas gone out of scope</span></p>\n<section class=\"note\" aria-role=\"note\">\n<p>Note: The examples in Listing 10-16, 10-17, and 10-23 declare variables\nwithout giving them an initial value, so the variable name exists in the outer\nscope. At first glance, this might appear to be in conflict with Rust‚Äôs having\nno null values. However, if we try to use a variable before giving it a value,\nwe‚Äôll get a compile-time error, which shows that Rust indeed does not allow\nnull values.</p>\n</section>\n<p>The outer scope declares a variable named <code class=\"hljs\">r</code> with no initial value, and the\ninner scope declares a variable named <code class=\"hljs\">x</code> with the initial value of <code class=\"hljs\">5</code>. Inside\nthe inner scope, we attempt to set the value of <code class=\"hljs\">r</code> as a reference to <code class=\"hljs\">x</code>. Then\nthe inner scope ends, and we attempt to print the value in <code class=\"hljs\">r</code>. This code won‚Äôt\ncompile because the value that <code class=\"hljs\">r</code> is referring to has gone out of scope before\nwe try to use it. Here is the error message:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling chapter10 v0.1.0 (file:///projects/chapter10)\nerror[E0597]: `x` does not live long enough\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/main.rs:6:13</span>\n  |\n5 |         let x = 5;\n  |             - binding `x` declared here\n6 |         r = &amp;x;\n  |             ^^ borrowed value does not live long enough\n7 |     }\n  |     - `x` dropped here while still borrowed\n8 |\n9 |     println!(\"r: {r}\");\n  |                  --- borrow later used here\n\nFor more information about this error, try `rustc --explain E0597`.\nerror: could not compile `chapter10` (bin \"chapter10\") due to 1 previous error\n</code></pre>\n<p>The error message says that the variable <code class=\"hljs\">x</code> ‚Äúdoes not live long enough.‚Äù The\nreason is that <code class=\"hljs\">x</code> will be out of scope when the inner scope ends on line 7.\nBut <code class=\"hljs\">r</code> is still valid for the outer scope; because its scope is larger, we say\nthat it ‚Äúlives longer.‚Äù If Rust allowed this code to work, <code class=\"hljs\">r</code> would be\nreferencing memory that was deallocated when <code class=\"hljs\">x</code> went out of scope, and\nanything we tried to do with <code class=\"hljs\">r</code> wouldn‚Äôt work correctly. So how does Rust\ndetermine that this code is invalid? It uses a borrow checker.</p>\n<h3 id=\"the-borrow-checker\"><a class=\"header\" href=\"#the-borrow-checker\">The Borrow Checker</a></h3>\n<p>The Rust compiler has a <em>borrow checker</em> that compares scopes to determine\nwhether all borrows are valid. Listing 10-17 shows the same code as Listing\n10-16 but with annotations showing the lifetimes of the variables.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> r;                <span class=\"hljs-comment\">// ---------+-- 'a</span>\n                          <span class=\"hljs-comment\">//          |</span>\n    {                     <span class=\"hljs-comment\">//          |</span>\n        <span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">5</span>;        <span class=\"hljs-comment\">// -+-- 'b  |</span>\n        r = &amp;x;           <span class=\"hljs-comment\">//  |       |</span>\n    }                     <span class=\"hljs-comment\">// -+       |</span>\n                          <span class=\"hljs-comment\">//          |</span>\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"r: {r}\"</span>);   <span class=\"hljs-comment\">//          |</span>\n}                         <span class=\"hljs-comment\">// ---------+</span></code></pre>\n<p><span class=\"caption\">Listing 10-17: Annotations of the lifetimes of <code class=\"hljs\">r</code> and\n<code class=\"hljs\">x</code>, named <code class=\"hljs\">'a</code> and <code class=\"hljs\">'b</code>, respectively</span></p>\n<p>Here, we‚Äôve annotated the lifetime of <code class=\"hljs\">r</code> with <code class=\"hljs\">'a</code> and the lifetime of <code class=\"hljs\">x</code>\nwith <code class=\"hljs\">'b</code>. As you can see, the inner <code class=\"hljs\">'b</code> block is much smaller than the outer\n<code class=\"hljs\">'a</code> lifetime block. At compile time, Rust compares the size of the two\nlifetimes and sees that <code class=\"hljs\">r</code> has a lifetime of <code class=\"hljs\">'a</code> but that it refers to memory\nwith a lifetime of <code class=\"hljs\">'b</code>. The program is rejected because <code class=\"hljs\">'b</code> is shorter than\n<code class=\"hljs\">'a</code>: the subject of the reference doesn‚Äôt live as long as the reference.</p>\n<p>Listing 10-18 fixes the code so it doesn‚Äôt have a dangling reference and it\ncompiles without any errors.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">5</span>;            <span class=\"hljs-comment\">// ----------+-- 'b</span>\n                          <span class=\"hljs-comment\">//           |</span>\n    <span class=\"hljs-keyword\">let</span> r = &amp;x;           <span class=\"hljs-comment\">// --+-- 'a  |</span>\n                          <span class=\"hljs-comment\">//   |       |</span>\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"r: {r}\"</span>);   <span class=\"hljs-comment\">//   |       |</span>\n                          <span class=\"hljs-comment\">// --+       |</span>\n}                         <span class=\"hljs-comment\">// ----------+</span></code></pre></pre>\n<p><span class=\"caption\">Listing 10-18: A valid reference because the data has a\nlonger lifetime than the reference</span></p>\n<p>Here, <code class=\"hljs\">x</code> has the lifetime <code class=\"hljs\">'b</code>, which in this case is larger than <code class=\"hljs\">'a</code>. This\nmeans <code class=\"hljs\">r</code> can reference <code class=\"hljs\">x</code> because Rust knows that the reference in <code class=\"hljs\">r</code> will\nalways be valid while <code class=\"hljs\">x</code> is valid.</p>\n<p>Now that you know what the lifetimes of references are and how Rust analyzes\nlifetimes to ensure references will always be valid, let‚Äôs explore generic\nlifetimes of parameters and return values in the context of functions.</p>\n<h3 id=\"generic-lifetimes-in-functions\"><a class=\"header\" href=\"#generic-lifetimes-in-functions\">Generic Lifetimes in Functions</a></h3>\n<p>We‚Äôll write a function that returns the longer of two string slices. This\nfunction will take two string slices and return a single string slice. After\nwe‚Äôve implemented the <code class=\"hljs\">longest</code> function, the code in Listing 10-19 should\nprint <code class=\"hljs\">The longest string is abcd</code>.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> string1 = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"abcd\"</span>);\n    <span class=\"hljs-keyword\">let</span> string2 = <span class=\"hljs-string\">\"xyz\"</span>;\n\n    <span class=\"hljs-keyword\">let</span> result = longest(string1.as_str(), string2);\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The longest string is {result}\"</span>);\n}</code></pre>\n<p><span class=\"caption\">Listing 10-19: A <code class=\"hljs\">main</code> function that calls the <code class=\"hljs\">longest</code>\nfunction to find the longer of two string slices</span></p>\n<p>Note that we want the function to take string slices, which are references,\nrather than strings, because we don‚Äôt want the <code class=\"hljs\">longest</code> function to take\nownership of its parameters. Refer to the <a href=\"ch04-03-slices.html#string-slices-as-parameters\">‚ÄúString Slices as\nParameters‚Äù</a><!-- ignore --> section in Chapter 4\nfor more discussion about why the parameters we use in Listing 10-19 are the\nones we want.</p>\n<p>If we try to implement the <code class=\"hljs\">longest</code> function as shown in Listing 10-20, it\nwon‚Äôt compile.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> string1 = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"abcd\"</span>);\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> string2 = <span class=\"hljs-string\">\"xyz\"</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> result = longest(string1.as_str(), string2);\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The longest string is {result}\"</span>);\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">longest</span></span>(x: &amp;<span class=\"hljs-built_in\">str</span>, y: &amp;<span class=\"hljs-built_in\">str</span>) -&gt; &amp;<span class=\"hljs-built_in\">str</span> {\n    <span class=\"hljs-keyword\">if</span> x.len() &gt; y.len() {\n        x\n    } <span class=\"hljs-keyword\">else</span> {\n        y\n    }\n}</code></pre>\n<p><span class=\"caption\">Listing 10-20: An implementation of the <code class=\"hljs\">longest</code>\nfunction that returns the longer of two string slices but does not yet\ncompile</span></p>\n<p>Instead, we get the following error that talks about lifetimes:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling chapter10 v0.1.0 (file:///projects/chapter10)\nerror[E0106]: missing lifetime specifier\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/main.rs:9:33</span>\n  |\n9 | fn longest(x: &amp;str, y: &amp;str) -&gt; &amp;str {\n  |               ----     ----     ^ expected named lifetime parameter\n  |\n  = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `x` or `y`\nhelp: consider introducing a named lifetime parameter\n  |\n9 | fn longest&lt;'a&gt;(x: &amp;'a str, y: &amp;'a str) -&gt; &amp;'a str {\n  |           ++++     ++          ++          ++\n\nerror: lifetime may not live long enough\n<span class=\"hljs-meta\">  --&gt;</span><span class=\"bash\"> src/main.rs:11:9</span>\n   |\n9  | fn longest(x: &amp;str, y: &amp;str) -&gt; &amp;str {\n   |               - let's call the lifetime of this reference `'1`\n10 |     if x.len() &gt; y.len() {\n11 |         x\n   |         ^ returning this value requires that `'1` must outlive `'static`\n\nerror: lifetime may not live long enough\n<span class=\"hljs-meta\">  --&gt;</span><span class=\"bash\"> src/main.rs:13:9</span>\n   |\n9  | fn longest(x: &amp;str, y: &amp;str) -&gt; &amp;str {\n   |                        - let's call the lifetime of this reference `'2`\n...\n13 |         y\n   |         ^ returning this value requires that `'2` must outlive `'static`\n\nFor more information about this error, try `rustc --explain E0106`.\nerror: could not compile `chapter10` (bin \"chapter10\") due to 3 previous errors\n</code></pre>\n<p>The help text reveals that the return type needs a generic lifetime parameter\non it because Rust can‚Äôt tell whether the reference being returned refers to\n<code class=\"hljs\">x</code> or <code class=\"hljs\">y</code>. Actually, we don‚Äôt know either, because the <code class=\"hljs\">if</code> block in the body\nof this function returns a reference to <code class=\"hljs\">x</code> and the <code class=\"hljs\">else</code> block returns a\nreference to <code class=\"hljs\">y</code>!</p>\n<p>When we‚Äôre defining this function, we don‚Äôt know the concrete values that will\nbe passed into this function, so we don‚Äôt know whether the <code class=\"hljs\">if</code> case or the\n<code class=\"hljs\">else</code> case will execute. We also don‚Äôt know the concrete lifetimes of the\nreferences that will be passed in, so we can‚Äôt look at the scopes as we did in\nListings 10-17 and 10-18 to determine whether the reference we return will\nalways be valid. The borrow checker can‚Äôt determine this either, because it\ndoesn‚Äôt know how the lifetimes of <code class=\"hljs\">x</code> and <code class=\"hljs\">y</code> relate to the lifetime of the\nreturn value. To fix this error, we‚Äôll add generic lifetime parameters that\ndefine the relationship between the references so the borrow checker can\nperform its analysis.</p>\n<h3 id=\"lifetime-annotation-syntax\"><a class=\"header\" href=\"#lifetime-annotation-syntax\">Lifetime Annotation Syntax</a></h3>\n<p>Lifetime annotations don‚Äôt change how long any of the references live. Rather,\nthey describe the relationships of the lifetimes of multiple references to each\nother without affecting the lifetimes. Just as functions can accept any type\nwhen the signature specifies a generic type parameter, functions can accept\nreferences with any lifetime by specifying a generic lifetime parameter.</p>\n<p>Lifetime annotations have a slightly unusual syntax: the names of lifetime\nparameters must start with an apostrophe (<code class=\"hljs\">'</code>) and are usually all lowercase\nand very short, like generic types. Most people use the name <code class=\"hljs\">'a</code> for the first\nlifetime annotation. We place lifetime parameter annotations after the <code class=\"hljs\">&amp;</code> of a\nreference, using a space to separate the annotation from the reference‚Äôs type.</p>\n<p>Here are some examples: a reference to an <code class=\"hljs\">i32</code> without a lifetime parameter, a\nreference to an <code class=\"hljs\">i32</code> that has a lifetime parameter named <code class=\"hljs\">'a</code>, and a mutable\nreference to an <code class=\"hljs\">i32</code> that also has the lifetime <code class=\"hljs\">'a</code>.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\">&amp;<span class=\"hljs-built_in\">i32</span>        <span class=\"hljs-comment\">// a reference</span>\n&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">i32</span>     <span class=\"hljs-comment\">// a reference with an explicit lifetime</span>\n&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-keyword\">mut</span> <span class=\"hljs-built_in\">i32</span> <span class=\"hljs-comment\">// a mutable reference with an explicit lifetime</span></code></pre>\n<p>One lifetime annotation by itself doesn‚Äôt have much meaning because the\nannotations are meant to tell Rust how generic lifetime parameters of multiple\nreferences relate to each other. Let‚Äôs examine how the lifetime annotations\nrelate to each other in the context of the <code class=\"hljs\">longest</code> function.</p>\n<h3 id=\"lifetime-annotations-in-function-signatures\"><a class=\"header\" href=\"#lifetime-annotations-in-function-signatures\">Lifetime Annotations in Function Signatures</a></h3>\n<p>To use lifetime annotations in function signatures, we need to declare the\ngeneric <em>lifetime</em> parameters inside angle brackets between the function name\nand the parameter list, just as we did with generic <em>type</em> parameters.</p>\n<p>We want the signature to express the following constraint: the returned\nreference will be valid as long as both the parameters are valid. This is the\nrelationship between lifetimes of the parameters and the return value. We‚Äôll\nname the lifetime <code class=\"hljs\">'a</code> and then add it to each reference, as shown in Listing\n10-21.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> string1 = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"abcd\"</span>);\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> string2 = <span class=\"hljs-string\">\"xyz\"</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> result = longest(string1.as_str(), string2);\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The longest string is {result}\"</span>);\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">longest</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(x: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>, y: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>) -&gt; &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span> {\n    <span class=\"hljs-keyword\">if</span> x.len() &gt; y.len() {\n        x\n    } <span class=\"hljs-keyword\">else</span> {\n        y\n    }\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 10-21: The <code class=\"hljs\">longest</code> function definition\nspecifying that all the references in the signature must have the same lifetime\n<code class=\"hljs\">'a</code></span></p>\n<p>This code should compile and produce the result we want when we use it with the\n<code class=\"hljs\">main</code> function in Listing 10-19.</p>\n<p>The function signature now tells Rust that for some lifetime <code class=\"hljs\">'a</code>, the function\ntakes two parameters, both of which are string slices that live at least as\nlong as lifetime <code class=\"hljs\">'a</code>. The function signature also tells Rust that the string\nslice returned from the function will live at least as long as lifetime <code class=\"hljs\">'a</code>.\nIn practice, it means that the lifetime of the reference returned by the\n<code class=\"hljs\">longest</code> function is the same as the smaller of the lifetimes of the values\nreferred to by the function arguments. These relationships are what we want\nRust to use when analyzing this code.</p>\n<p>Remember, when we specify the lifetime parameters in this function signature,\nwe‚Äôre not changing the lifetimes of any values passed in or returned. Rather,\nwe‚Äôre specifying that the borrow checker should reject any values that don‚Äôt\nadhere to these constraints. Note that the <code class=\"hljs\">longest</code> function doesn‚Äôt need to\nknow exactly how long <code class=\"hljs\">x</code> and <code class=\"hljs\">y</code> will live, only that some scope can be\nsubstituted for <code class=\"hljs\">'a</code> that will satisfy this signature.</p>\n<p>When annotating lifetimes in functions, the annotations go in the function\nsignature, not in the function body. The lifetime annotations become part of\nthe contract of the function, much like the types in the signature. Having\nfunction signatures contain the lifetime contract means the analysis the Rust\ncompiler does can be simpler. If there‚Äôs a problem with the way a function is\nannotated or the way it is called, the compiler errors can point to the part of\nour code and the constraints more precisely. If, instead, the Rust compiler\nmade more inferences about what we intended the relationships of the lifetimes\nto be, the compiler might only be able to point to a use of our code many steps\naway from the cause of the problem.</p>\n<p>When we pass concrete references to <code class=\"hljs\">longest</code>, the concrete lifetime that is\nsubstituted for <code class=\"hljs\">'a</code> is the part of the scope of <code class=\"hljs\">x</code> that overlaps with the\nscope of <code class=\"hljs\">y</code>. In other words, the generic lifetime <code class=\"hljs\">'a</code> will get the concrete\nlifetime that is equal to the smaller of the lifetimes of <code class=\"hljs\">x</code> and <code class=\"hljs\">y</code>. Because\nwe‚Äôve annotated the returned reference with the same lifetime parameter <code class=\"hljs\">'a</code>,\nthe returned reference will also be valid for the length of the smaller of the\nlifetimes of <code class=\"hljs\">x</code> and <code class=\"hljs\">y</code>.</p>\n<p>Let‚Äôs look at how the lifetime annotations restrict the <code class=\"hljs\">longest</code> function by\npassing in references that have different concrete lifetimes. Listing 10-22 is\na straightforward example.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> string1 = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"long string is long\"</span>);\n\n    {\n        <span class=\"hljs-keyword\">let</span> string2 = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"xyz\"</span>);\n        <span class=\"hljs-keyword\">let</span> result = longest(string1.as_str(), string2.as_str());\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The longest string is {result}\"</span>);\n    }\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">longest</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(x: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>, y: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>) -&gt; &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span> {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">if</span> x.len() &gt; y.len() {\n</span><span class=\"boring\">        x\n</span><span class=\"boring\">    } <span class=\"hljs-keyword\">else</span> {\n</span><span class=\"boring\">        y\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 10-22: Using the <code class=\"hljs\">longest</code> function with\nreferences to <code class=\"hljs\">String</code> values that have different concrete lifetimes</span></p>\n<p>In this example, <code class=\"hljs\">string1</code> is valid until the end of the outer scope, <code class=\"hljs\">string2</code>\nis valid until the end of the inner scope, and <code class=\"hljs\">result</code> references something\nthat is valid until the end of the inner scope. Run this code and you‚Äôll see\nthat the borrow checker approves; it will compile and print <code class=\"hljs\">The longest string is long string is long</code>.</p>\n<p>Next, let‚Äôs try an example that shows that the lifetime of the reference in\n<code class=\"hljs\">result</code> must be the smaller lifetime of the two arguments. We‚Äôll move the\ndeclaration of the <code class=\"hljs\">result</code> variable outside the inner scope but leave the\nassignment of the value to the <code class=\"hljs\">result</code> variable inside the scope with\n<code class=\"hljs\">string2</code>. Then we‚Äôll move the <code class=\"hljs\">println!</code> that uses <code class=\"hljs\">result</code> to outside the\ninner scope, after the inner scope has ended. The code in Listing 10-23 will\nnot compile.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> string1 = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"long string is long\"</span>);\n    <span class=\"hljs-keyword\">let</span> result;\n    {\n        <span class=\"hljs-keyword\">let</span> string2 = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"xyz\"</span>);\n        result = longest(string1.as_str(), string2.as_str());\n    }\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The longest string is {result}\"</span>);\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">longest</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(x: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>, y: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>) -&gt; &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span> {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">if</span> x.len() &gt; y.len() {\n</span><span class=\"boring\">        x\n</span><span class=\"boring\">    } <span class=\"hljs-keyword\">else</span> {\n</span><span class=\"boring\">        y\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre>\n<p><span class=\"caption\">Listing 10-23: Attempting to use <code class=\"hljs\">result</code> after <code class=\"hljs\">string2</code>\nhas gone out of scope</span></p>\n<p>When we try to compile this code, we get this error:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling chapter10 v0.1.0 (file:///projects/chapter10)\nerror[E0597]: `string2` does not live long enough\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/main.rs:6:44</span>\n  |\n5 |         let string2 = String::from(\"xyz\");\n  |             ------- binding `string2` declared here\n6 |         result = longest(string1.as_str(), string2.as_str());\n  |                                            ^^^^^^^ borrowed value does not live long enough\n7 |     }\n  |     - `string2` dropped here while still borrowed\n8 |     println!(\"The longest string is {result}\");\n  |                                     -------- borrow later used here\n\nFor more information about this error, try `rustc --explain E0597`.\nerror: could not compile `chapter10` (bin \"chapter10\") due to 1 previous error\n</code></pre>\n<p>The error shows that for <code class=\"hljs\">result</code> to be valid for the <code class=\"hljs\">println!</code> statement,\n<code class=\"hljs\">string2</code> would need to be valid until the end of the outer scope. Rust knows\nthis because we annotated the lifetimes of the function parameters and return\nvalues using the same lifetime parameter <code class=\"hljs\">'a</code>.</p>\n<p>As humans, we can look at this code and see that <code class=\"hljs\">string1</code> is longer than\n<code class=\"hljs\">string2</code>, and therefore, <code class=\"hljs\">result</code> will contain a reference to <code class=\"hljs\">string1</code>.\nBecause <code class=\"hljs\">string1</code> has not gone out of scope yet, a reference to <code class=\"hljs\">string1</code> will\nstill be valid for the <code class=\"hljs\">println!</code> statement. However, the compiler can‚Äôt see\nthat the reference is valid in this case. We‚Äôve told Rust that the lifetime of\nthe reference returned by the <code class=\"hljs\">longest</code> function is the same as the smaller of\nthe lifetimes of the references passed in. Therefore, the borrow checker\ndisallows the code in Listing 10-23 as possibly having an invalid reference.</p>\n<p>Try designing more experiments that vary the values and lifetimes of the\nreferences passed in to the <code class=\"hljs\">longest</code> function and how the returned reference\nis used. Make hypotheses about whether or not your experiments will pass the\nborrow checker before you compile; then check to see if you‚Äôre right!</p>\n<h3 id=\"thinking-in-terms-of-lifetimes\"><a class=\"header\" href=\"#thinking-in-terms-of-lifetimes\">Thinking in Terms of Lifetimes</a></h3>\n<p>The way in which you need to specify lifetime parameters depends on what your\nfunction is doing. For example, if we changed the implementation of the\n<code class=\"hljs\">longest</code> function to always return the first parameter rather than the longest\nstring slice, we wouldn‚Äôt need to specify a lifetime on the <code class=\"hljs\">y</code> parameter. The\nfollowing code will compile:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> string1 = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"abcd\"</span>);\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> string2 = <span class=\"hljs-string\">\"efghijklmnopqrstuvwxyz\"</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> result = longest(string1.as_str(), string2);\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The longest string is {result}\"</span>);\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">longest</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(x: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>, y: &amp;<span class=\"hljs-built_in\">str</span>) -&gt; &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span> {\n    x\n}</code></pre></pre>\n<p>We‚Äôve specified a lifetime parameter <code class=\"hljs\">'a</code> for the parameter <code class=\"hljs\">x</code> and the return\ntype, but not for the parameter <code class=\"hljs\">y</code>, because the lifetime of <code class=\"hljs\">y</code> does not have\nany relationship with the lifetime of <code class=\"hljs\">x</code> or the return value.</p>\n<p>When returning a reference from a function, the lifetime parameter for the\nreturn type needs to match the lifetime parameter for one of the parameters. If\nthe reference returned does <em>not</em> refer to one of the parameters, it must refer\nto a value created within this function. However, this would be a dangling\nreference because the value will go out of scope at the end of the function.\nConsider this attempted implementation of the <code class=\"hljs\">longest</code> function that won‚Äôt\ncompile:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> string1 = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"abcd\"</span>);\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> string2 = <span class=\"hljs-string\">\"xyz\"</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> result = longest(string1.as_str(), string2);\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The longest string is {result}\"</span>);\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">longest</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(x: &amp;<span class=\"hljs-built_in\">str</span>, y: &amp;<span class=\"hljs-built_in\">str</span>) -&gt; &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span> {\n    <span class=\"hljs-keyword\">let</span> result = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"really long string\"</span>);\n    result.as_str()\n}</code></pre>\n<p>Here, even though we‚Äôve specified a lifetime parameter <code class=\"hljs\">'a</code> for the return\ntype, this implementation will fail to compile because the return value\nlifetime is not related to the lifetime of the parameters at all. Here is the\nerror message we get:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling chapter10 v0.1.0 (file:///projects/chapter10)\nerror[E0515]: cannot return value referencing local variable `result`\n<span class=\"hljs-meta\">  --&gt;</span><span class=\"bash\"> src/main.rs:11:5</span>\n   |\n11 |     result.as_str()\n   |     ------^^^^^^^^^\n   |     |\n   |     returns a value referencing data owned by the current function\n   |     `result` is borrowed here\n\nFor more information about this error, try `rustc --explain E0515`.\nerror: could not compile `chapter10` (bin \"chapter10\") due to 1 previous error\n</code></pre>\n<p>The problem is that <code class=\"hljs\">result</code> goes out of scope and gets cleaned up at the end\nof the <code class=\"hljs\">longest</code> function. We‚Äôre also trying to return a reference to <code class=\"hljs\">result</code>\nfrom the function. There is no way we can specify lifetime parameters that\nwould change the dangling reference, and Rust won‚Äôt let us create a dangling\nreference. In this case, the best fix would be to return an owned data type\nrather than a reference so the calling function is then responsible for\ncleaning up the value.</p>\n<p>Ultimately, lifetime syntax is about connecting the lifetimes of various\nparameters and return values of functions. Once they‚Äôre connected, Rust has\nenough information to allow memory-safe operations and disallow operations that\nwould create dangling pointers or otherwise violate memory safety.</p>\n<h3 id=\"lifetime-annotations-in-struct-definitions\"><a class=\"header\" href=\"#lifetime-annotations-in-struct-definitions\">Lifetime Annotations in Struct Definitions</a></h3>\n<p>So far, the structs we‚Äôve defined all hold owned types. We can define structs\nto hold references, but in that case we would need to add a lifetime annotation\non every reference in the struct‚Äôs definition. Listing 10-24 has a struct named\n<code class=\"hljs\">ImportantExcerpt</code> that holds a string slice.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ImportantExcerpt</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; {\n    part: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>,\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> novel = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Call me Ishmael. Some years ago...\"</span>);\n    <span class=\"hljs-keyword\">let</span> first_sentence = novel.split(<span class=\"hljs-string\">'.'</span>).next().unwrap();\n    <span class=\"hljs-keyword\">let</span> i = ImportantExcerpt {\n        part: first_sentence,\n    };\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 10-24: A struct that holds a reference, requiring\na lifetime annotation</span></p>\n<p>This struct has the single field <code class=\"hljs\">part</code> that holds a string slice, which is a\nreference. As with generic data types, we declare the name of the generic\nlifetime parameter inside angle brackets after the name of the struct so we can\nuse the lifetime parameter in the body of the struct definition. This\nannotation means an instance of <code class=\"hljs\">ImportantExcerpt</code> can‚Äôt outlive the reference\nit holds in its <code class=\"hljs\">part</code> field.</p>\n<p>The <code class=\"hljs\">main</code> function here creates an instance of the <code class=\"hljs\">ImportantExcerpt</code> struct\nthat holds a reference to the first sentence of the <code class=\"hljs\">String</code> owned by the\nvariable <code class=\"hljs\">novel</code>. The data in <code class=\"hljs\">novel</code> exists before the <code class=\"hljs\">ImportantExcerpt</code>\ninstance is created. In addition, <code class=\"hljs\">novel</code> doesn‚Äôt go out of scope until after\nthe <code class=\"hljs\">ImportantExcerpt</code> goes out of scope, so the reference in the\n<code class=\"hljs\">ImportantExcerpt</code> instance is valid.</p>\n<h3 id=\"lifetime-elision\"><a class=\"header\" href=\"#lifetime-elision\">Lifetime Elision</a></h3>\n<p>You‚Äôve learned that every reference has a lifetime and that you need to specify\nlifetime parameters for functions or structs that use references. However, we\nhad a function in Listing 4-9, shown again in Listing 10-25, that compiled\nwithout lifetime annotations.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">first_word</span></span>(s: &amp;<span class=\"hljs-built_in\">str</span>) -&gt; &amp;<span class=\"hljs-built_in\">str</span> {\n    <span class=\"hljs-keyword\">let</span> bytes = s.as_bytes();\n\n    <span class=\"hljs-keyword\">for</span> (i, &amp;item) <span class=\"hljs-keyword\">in</span> bytes.iter().enumerate() {\n        <span class=\"hljs-keyword\">if</span> item == <span class=\"hljs-string\">b' '</span> {\n            <span class=\"hljs-keyword\">return</span> &amp;s[<span class=\"hljs-number\">0</span>..i];\n        }\n    }\n\n    &amp;s[..]\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> my_string = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"hello world\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-comment\">// first_word works on slices of `String`s</span>\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> word = first_word(&amp;my_string[..]);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> my_string_literal = <span class=\"hljs-string\">\"hello world\"</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-comment\">// first_word works on slices of string literals</span>\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> word = first_word(&amp;my_string_literal[..]);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-comment\">// Because string literals *are* string slices already,</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">// this works too, without the slice syntax!</span>\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> word = first_word(my_string_literal);\n</span><span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 10-25: A function we defined in Listing 4-9 that\ncompiled without lifetime annotations, even though the parameter and return\ntype are references</span></p>\n<p>The reason this function compiles without lifetime annotations is historical:\nin early versions (pre-1.0) of Rust, this code wouldn‚Äôt have compiled because\nevery reference needed an explicit lifetime. At that time, the function\nsignature would have been written like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">first_word</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(s: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>) -&gt; &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span> {</code></pre>\n<p>After writing a lot of Rust code, the Rust team found that Rust programmers\nwere entering the same lifetime annotations over and over in particular\nsituations. These situations were predictable and followed a few deterministic\npatterns. The developers programmed these patterns into the compiler‚Äôs code so\nthe borrow checker could infer the lifetimes in these situations and wouldn‚Äôt\nneed explicit annotations.</p>\n<p>This piece of Rust history is relevant because it‚Äôs possible that more\ndeterministic patterns will emerge and be added to the compiler. In the future,\neven fewer lifetime annotations might be required.</p>\n<p>The patterns programmed into Rust‚Äôs analysis of references are called the\n<em>lifetime elision rules</em>. These aren‚Äôt rules for programmers to follow; they‚Äôre\na set of particular cases that the compiler will consider, and if your code\nfits these cases, you don‚Äôt need to write the lifetimes explicitly.</p>\n<p>The elision rules don‚Äôt provide full inference. If there is still ambiguity as\nto what lifetimes the references have after Rust applies the rules, the\ncompiler won‚Äôt guess what the lifetime of the remaining references should be.\nInstead of guessing, the compiler will give you an error that you can resolve\nby adding the lifetime annotations.</p>\n<p>Lifetimes on function or method parameters are called <em>input lifetimes</em>, and\nlifetimes on return values are called <em>output lifetimes</em>.</p>\n<p>The compiler uses three rules to figure out the lifetimes of the references\nwhen there aren‚Äôt explicit annotations. The first rule applies to input\nlifetimes, and the second and third rules apply to output lifetimes. If the\ncompiler gets to the end of the three rules and there are still references for\nwhich it can‚Äôt figure out lifetimes, the compiler will stop with an error.\nThese rules apply to <code class=\"hljs\">fn</code> definitions as well as <code class=\"hljs\">impl</code> blocks.</p>\n<p>The first rule is that the compiler assigns a lifetime parameter to each\nparameter that‚Äôs a reference. In other words, a function with one parameter\ngets one lifetime parameter: <code class=\"hljs\">fn foo&lt;'a&gt;(x: &amp;'a i32)</code>; a function with two\nparameters gets two separate lifetime parameters: <code class=\"hljs\">fn foo&lt;'a, 'b&gt;(x: &amp;'a i32, y: &amp;'b i32)</code>; and so on.</p>\n<p>The second rule is that, if there is exactly one input lifetime parameter, that\nlifetime is assigned to all output lifetime parameters: <code class=\"hljs\">fn foo&lt;'a&gt;(x: &amp;'a i32) -&gt; &amp;'a i32</code>.</p>\n<p>The third rule is that, if there are multiple input lifetime parameters, but\none of them is <code class=\"hljs\">&amp;self</code> or <code class=\"hljs\">&amp;mut self</code> because this is a method, the lifetime of\n<code class=\"hljs\">self</code> is assigned to all output lifetime parameters. This third rule makes\nmethods much nicer to read and write because fewer symbols are necessary.</p>\n<p>Let‚Äôs pretend we‚Äôre the compiler. We‚Äôll apply these rules to figure out the\nlifetimes of the references in the signature of the <code class=\"hljs\">first_word</code> function in\nListing 10-25. The signature starts without any lifetimes associated with the\nreferences:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">first_word</span></span>(s: &amp;<span class=\"hljs-built_in\">str</span>) -&gt; &amp;<span class=\"hljs-built_in\">str</span> {</code></pre>\n<p>Then the compiler applies the first rule, which specifies that each parameter\ngets its own lifetime. We‚Äôll call it <code class=\"hljs\">'a</code> as usual, so now the signature is\nthis:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">first_word</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(s: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>) -&gt; &amp;<span class=\"hljs-built_in\">str</span> {</code></pre>\n<p>The second rule applies because there is exactly one input lifetime. The second\nrule specifies that the lifetime of the one input parameter gets assigned to\nthe output lifetime, so the signature is now this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">first_word</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(s: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>) -&gt; &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span> {</code></pre>\n<p>Now all the references in this function signature have lifetimes, and the\ncompiler can continue its analysis without needing the programmer to annotate\nthe lifetimes in this function signature.</p>\n<p>Let‚Äôs look at another example, this time using the <code class=\"hljs\">longest</code> function that had\nno lifetime parameters when we started working with it in Listing 10-20:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">longest</span></span>(x: &amp;<span class=\"hljs-built_in\">str</span>, y: &amp;<span class=\"hljs-built_in\">str</span>) -&gt; &amp;<span class=\"hljs-built_in\">str</span> {</code></pre>\n<p>Let‚Äôs apply the first rule: each parameter gets its own lifetime. This time we\nhave two parameters instead of one, so we have two lifetimes:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">longest</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, <span class=\"hljs-symbol\">'b</span>&gt;(x: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>, y: &amp;<span class=\"hljs-symbol\">'b</span> <span class=\"hljs-built_in\">str</span>) -&gt; &amp;<span class=\"hljs-built_in\">str</span> {</code></pre>\n<p>You can see that the second rule doesn‚Äôt apply because there is more than one\ninput lifetime. The third rule doesn‚Äôt apply either, because <code class=\"hljs\">longest</code> is a\nfunction rather than a method, so none of the parameters are <code class=\"hljs\">self</code>. After\nworking through all three rules, we still haven‚Äôt figured out what the return\ntype‚Äôs lifetime is. This is why we got an error trying to compile the code in\nListing 10-20: the compiler worked through the lifetime elision rules but still\ncouldn‚Äôt figure out all the lifetimes of the references in the signature.</p>\n<p>Because the third rule really only applies in method signatures, we‚Äôll look at\nlifetimes in that context next to see why the third rule means we don‚Äôt have to\nannotate lifetimes in method signatures very often.</p>\n<h3 id=\"lifetime-annotations-in-method-definitions\"><a class=\"header\" href=\"#lifetime-annotations-in-method-definitions\">Lifetime Annotations in Method Definitions</a></h3>\n<p>When we implement methods on a struct with lifetimes, we use the same syntax as\nthat of generic type parameters shown in Listing 10-11. Where we declare and\nuse the lifetime parameters depends on whether they‚Äôre related to the struct\nfields or the method parameters and return values.</p>\n<p>Lifetime names for struct fields always need to be declared after the <code class=\"hljs\">impl</code>\nkeyword and then used after the struct‚Äôs name because those lifetimes are part\nof the struct‚Äôs type.</p>\n<p>In method signatures inside the <code class=\"hljs\">impl</code> block, references might be tied to the\nlifetime of references in the struct‚Äôs fields, or they might be independent. In\naddition, the lifetime elision rules often make it so that lifetime annotations\naren‚Äôt necessary in method signatures. Let‚Äôs look at some examples using the\nstruct named <code class=\"hljs\">ImportantExcerpt</code> that we defined in Listing 10-24.</p>\n<p>First we‚Äôll use a method named <code class=\"hljs\">level</code> whose only parameter is a reference to\n<code class=\"hljs\">self</code> and whose return value is an <code class=\"hljs\">i32</code>, which is not a reference to anything:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ImportantExcerpt</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; {\n</span><span class=\"boring\">    part: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; ImportantExcerpt&lt;<span class=\"hljs-symbol\">'a</span>&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">level</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">i32</span> {\n        <span class=\"hljs-number\">3</span>\n    }\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; ImportantExcerpt&lt;<span class=\"hljs-symbol\">'a</span>&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">announce_and_return_part</span></span>(&amp;<span class=\"hljs-keyword\">self</span>, announcement: &amp;<span class=\"hljs-built_in\">str</span>) -&gt; &amp;<span class=\"hljs-built_in\">str</span> {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Attention please: {announcement}\"</span>);\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">self</span>.part\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> novel = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Call me Ishmael. Some years ago...\"</span>);\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> first_sentence = novel.split(<span class=\"hljs-string\">'.'</span>).next().unwrap();\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> i = ImportantExcerpt {\n</span><span class=\"boring\">        part: first_sentence,\n</span><span class=\"boring\">    };\n</span><span class=\"boring\">}</span></code></pre></pre>\n<p>The lifetime parameter declaration after <code class=\"hljs\">impl</code> and its use after the type name\nare required, but we‚Äôre not required to annotate the lifetime of the reference\nto <code class=\"hljs\">self</code> because of the first elision rule.</p>\n<p>Here is an example where the third lifetime elision rule applies:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ImportantExcerpt</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; {\n</span><span class=\"boring\">    part: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; ImportantExcerpt&lt;<span class=\"hljs-symbol\">'a</span>&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">level</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">i32</span> {\n</span><span class=\"boring\">        <span class=\"hljs-number\">3</span>\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">'a</span>&gt; ImportantExcerpt&lt;<span class=\"hljs-symbol\">'a</span>&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">announce_and_return_part</span></span>(&amp;<span class=\"hljs-keyword\">self</span>, announcement: &amp;<span class=\"hljs-built_in\">str</span>) -&gt; &amp;<span class=\"hljs-built_in\">str</span> {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Attention please: {announcement}\"</span>);\n        <span class=\"hljs-keyword\">self</span>.part\n    }\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> novel = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Call me Ishmael. Some years ago...\"</span>);\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> first_sentence = novel.split(<span class=\"hljs-string\">'.'</span>).next().unwrap();\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> i = ImportantExcerpt {\n</span><span class=\"boring\">        part: first_sentence,\n</span><span class=\"boring\">    };\n</span><span class=\"boring\">}</span></code></pre></pre>\n<p>There are two input lifetimes, so Rust applies the first lifetime elision rule\nand gives both <code class=\"hljs\">&amp;self</code> and <code class=\"hljs\">announcement</code> their own lifetimes. Then, because\none of the parameters is <code class=\"hljs\">&amp;self</code>, the return type gets the lifetime of <code class=\"hljs\">&amp;self</code>,\nand all lifetimes have been accounted for.</p>\n<h3 id=\"the-static-lifetime\"><a class=\"header\" href=\"#the-static-lifetime\">The Static Lifetime</a></h3>\n<p>One special lifetime we need to discuss is <code class=\"hljs\">'static</code>, which denotes that the\naffected reference <em>can</em> live for the entire duration of the program. All\nstring literals have the <code class=\"hljs\">'static</code> lifetime, which we can annotate as follows:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> s: &amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span> = <span class=\"hljs-string\">\"I have a static lifetime.\"</span>;\n<span class=\"boring\">}</span></code></pre></pre>\n<p>The text of this string is stored directly in the program‚Äôs binary, which is\nalways available. Therefore, the lifetime of all string literals is <code class=\"hljs\">'static</code>.</p>\n<p>You might see suggestions to use the <code class=\"hljs\">'static</code> lifetime in error messages. But\nbefore specifying <code class=\"hljs\">'static</code> as the lifetime for a reference, think about\nwhether the reference you have actually lives the entire lifetime of your\nprogram or not, and whether you want it to. Most of the time, an error message\nsuggesting the <code class=\"hljs\">'static</code> lifetime results from attempting to create a dangling\nreference or a mismatch of the available lifetimes. In such cases, the solution\nis to fix those problems, not to specify the <code class=\"hljs\">'static</code> lifetime.</p>\n<h2 id=\"generic-type-parameters-trait-bounds-and-lifetimes-together\"><a class=\"header\" href=\"#generic-type-parameters-trait-bounds-and-lifetimes-together\">Generic Type Parameters, Trait Bounds, and Lifetimes Together</a></h2>\n<p>Let‚Äôs briefly look at the syntax of specifying generic type parameters, trait\nbounds, and lifetimes all in one function!</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> string1 = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"abcd\"</span>);\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> string2 = <span class=\"hljs-string\">\"xyz\"</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> result = longest_with_an_announcement(\n</span><span class=\"boring\">        string1.as_str(),\n</span><span class=\"boring\">        string2,\n</span><span class=\"boring\">        <span class=\"hljs-string\">\"Today is someone's birthday!\"</span>,\n</span><span class=\"boring\">    );\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The longest string is {result}\"</span>);\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">use</span> std::fmt::Display;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">longest_with_an_announcement</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, T&gt;(\n    x: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>,\n    y: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>,\n    ann: T,\n) -&gt; &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>\n<span class=\"hljs-keyword\">where</span>\n    T: Display,\n{\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Announcement! {ann}\"</span>);\n    <span class=\"hljs-keyword\">if</span> x.len() &gt; y.len() {\n        x\n    } <span class=\"hljs-keyword\">else</span> {\n        y\n    }\n}</code></pre></pre>\n<p>This is the <code class=\"hljs\">longest</code> function from Listing 10-21 that returns the longer of\ntwo string slices. But now it has an extra parameter named <code class=\"hljs\">ann</code> of the generic\ntype <code class=\"hljs\">T</code>, which can be filled in by any type that implements the <code class=\"hljs\">Display</code>\ntrait as specified by the <code class=\"hljs\">where</code> clause. This extra parameter will be printed\nusing <code class=\"hljs\">{}</code>, which is why the <code class=\"hljs\">Display</code> trait bound is necessary. Because\nlifetimes are a type of generic, the declarations of the lifetime parameter\n<code class=\"hljs\">'a</code> and the generic type parameter <code class=\"hljs\">T</code> go in the same list inside the angle\nbrackets after the function name.</p>\n<h2 id=\"summary-9\"><a class=\"header\" href=\"#summary-9\">Summary</a></h2>\n<p>We covered a lot in this chapter! Now that you know about generic type\nparameters, traits and trait bounds, and generic lifetime parameters, you‚Äôre\nready to write code without repetition that works in many different situations.\nGeneric type parameters let you apply the code to different types. Traits and\ntrait bounds ensure that even though the types are generic, they‚Äôll have the\nbehavior the code needs. You learned how to use lifetime annotations to ensure\nthat this flexible code won‚Äôt have any dangling references. And all of this\nanalysis happens at compile time, which doesn‚Äôt affect runtime performance!</p>\n<p>Believe it or not, there is much more to learn on the topics we discussed in\nthis chapter: Chapter 17 discusses trait objects, which are another way to use\ntraits. There are also more complex scenarios involving lifetime annotations\nthat you will only need in very advanced scenarios; for those, you should read\nthe <a href=\"../reference/index.html\">Rust Reference</a>. But next, you‚Äôll learn how to write tests in\nRust so you can make sure your code is working the way it should.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"writing-automated-tests\"><a class=\"header\" href=\"#writing-automated-tests\">Writing Automated Tests</a></h1>\n<p>In his 1972 essay ‚ÄúThe Humble Programmer,‚Äù Edsger W. Dijkstra said that\n‚ÄúProgram testing can be a very effective way to show the presence of bugs, but\nit is hopelessly inadequate for showing their absence.‚Äù That doesn‚Äôt mean we\nshouldn‚Äôt try to test as much as we can!</p>\n<p>Correctness in our programs is the extent to which our code does what we intend\nit to do. Rust is designed with a high degree of concern about the correctness\nof programs, but correctness is complex and not easy to prove. Rust‚Äôs type\nsystem shoulders a huge part of this burden, but the type system cannot catch\neverything. As such, Rust includes support for writing automated software tests.</p>\n<p>Say we write a function <code class=\"hljs\">add_two</code> that adds 2 to whatever number is passed to\nit. This function‚Äôs signature accepts an integer as a parameter and returns an\ninteger as a result. When we implement and compile that function, Rust does all\nthe type checking and borrow checking that you‚Äôve learned so far to ensure\nthat, for instance, we aren‚Äôt passing a <code class=\"hljs\">String</code> value or an invalid reference\nto this function. But Rust <em>can‚Äôt</em> check that this function will do precisely\nwhat we intend, which is return the parameter plus 2 rather than, say, the\nparameter plus 10 or the parameter minus 50! That‚Äôs where tests come in.</p>\n<p>We can write tests that assert, for example, that when we pass <code class=\"hljs\">3</code> to the\n<code class=\"hljs\">add_two</code> function, the returned value is <code class=\"hljs\">5</code>. We can run these tests whenever\nwe make changes to our code to make sure any existing correct behavior has not\nchanged.</p>\n<p>Testing is a complex skill: although we can‚Äôt cover every detail about how to\nwrite good tests in one chapter, we‚Äôll discuss the mechanics of Rust‚Äôs testing\nfacilities. We‚Äôll talk about the annotations and macros available to you when\nwriting your tests, the default behavior and options provided for running your\ntests, and how to organize tests into unit tests and integration tests.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"how-to-write-tests\"><a class=\"header\" href=\"#how-to-write-tests\">How to Write Tests</a></h2>\n<p>Tests are Rust functions that verify that the non-test code is functioning in\nthe expected manner. The bodies of test functions typically perform these three\nactions:</p>\n<ol>\n<li>Set up any needed data or state.</li>\n<li>Run the code you want to test.</li>\n<li>Assert the results are what you expect.</li>\n</ol>\n<p>Let‚Äôs look at the features Rust provides specifically for writing tests that\ntake these actions, which include the <code class=\"hljs\">test</code> attribute, a few macros, and the\n<code class=\"hljs\">should_panic</code> attribute.</p>\n<h3 id=\"the-anatomy-of-a-test-function\"><a class=\"header\" href=\"#the-anatomy-of-a-test-function\">The Anatomy of a Test Function</a></h3>\n<p>At its simplest, a test in Rust is a function that‚Äôs annotated with the <code class=\"hljs\">test</code>\nattribute. Attributes are metadata about pieces of Rust code; one example is\nthe <code class=\"hljs\">derive</code> attribute we used with structs in Chapter 5. To change a function\ninto a test function, add <code class=\"hljs\">#[test]</code> on the line before <code class=\"hljs\">fn</code>. When you run your\ntests with the <code class=\"hljs\">cargo test</code> command, Rust builds a test runner binary that runs\nthe annotated functions and reports on whether each\ntest function passes or fails.</p>\n<p>Whenever we make a new library project with Cargo, a test module with a test\nfunction in it is automatically generated for us. This module gives you a\ntemplate for writing your tests so you don‚Äôt have to look up the exact\nstructure and syntax every time you start a new project. You can add as many\nadditional test functions and as many test modules as you want!</p>\n<p>We‚Äôll explore some aspects of how tests work by experimenting with the template\ntest before we actually test any code. Then we‚Äôll write some real-world tests\nthat call some code that we‚Äôve written and assert that its behavior is correct.</p>\n<p>Let‚Äôs create a new library project called <code class=\"hljs\">adder</code> that will add two numbers:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo new adder --lib</span>\n     Created library `adder` project\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> <span class=\"hljs-built_in\">cd</span> adder</span>\n</code></pre>\n<p>The contents of the <em>src/lib.rs</em> file in your <code class=\"hljs\">adder</code> library should look like\nListing 11-1.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<!-- manual-regeneration\ncd listings/ch11-writing-automated-tests\nrm -rf listing-11-01\ncargo new listing-11-01 --lib --name adder\ncd listing-11-01\ncargo test\ngit co output.txt\ncd ../../..\n-->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust noplayground hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add</span></span>(left: <span class=\"hljs-built_in\">usize</span>, right: <span class=\"hljs-built_in\">usize</span>) -&gt; <span class=\"hljs-built_in\">usize</span> {\n    left + right\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::*;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">it_works</span></span>() {\n        <span class=\"hljs-keyword\">let</span> result = add(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(result, <span class=\"hljs-number\">4</span>);\n    }\n}</code></pre>\n<p><span class=\"caption\">Listing 11-1: The test module and function generated\nautomatically by <code class=\"hljs\">cargo new</code></span></p>\n<p>For now, let‚Äôs focus solely on the <code class=\"hljs\">it_works()</code> function. Note the\n<code class=\"hljs\">#[test]</code> annotation: this attribute indicates this is a test function, so the\ntest runner knows to treat this function as a test. We might also have non-test\nfunctions in the <code class=\"hljs\">tests</code> module to help set up common scenarios or perform\ncommon operations, so we always need to indicate which functions are tests.</p>\n<p>The example function body uses the <code class=\"hljs\">assert_eq!</code> macro to assert that <code class=\"hljs\">result</code>,\nwhich contains the result of adding 2 and 2, equals 4. This assertion serves as\nan example of the format for a typical test. Let‚Äôs run it to see that this test\npasses.</p>\n<p>The <code class=\"hljs\">cargo test</code> command runs all tests in our project, as shown in Listing\n11-2.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo <span class=\"hljs-built_in\">test</span></span>\n   Compiling adder v0.1.0 (file:///projects/adder)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.57s\n     Running unittests src/lib.rs (target/debug/deps/adder-92948b65e88960b4)\n\nrunning 1 test\ntest tests::it_works ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n   Doc-tests adder\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n</code></pre>\n<p><span class=\"caption\">Listing 11-2: The output from running the automatically\ngenerated test</span></p>\n<p>Cargo compiled and ran the test. We see the line <code class=\"hljs\">running 1 test</code>. The next\nline shows the name of the generated test function, called <code class=\"hljs\">it_works</code>, and that\nthe result of running that test is <code class=\"hljs\">ok</code>. The overall summary <code class=\"hljs\">test result: ok.</code>\nmeans that all the tests passed, and the portion that reads <code class=\"hljs\">1 passed; 0 failed</code> totals the number of tests that passed or failed.</p>\n<p>It‚Äôs possible to mark a test as ignored so it doesn‚Äôt run in a particular\ninstance; we‚Äôll cover that in the <a href=\"ch11-02-running-tests.html#ignoring-some-tests-unless-specifically-requested\">‚ÄúIgnoring Some Tests Unless Specifically\nRequested‚Äù</a><!-- ignore --> section later in this chapter. Because we\nhaven‚Äôt done that here, the summary shows <code class=\"hljs\">0 ignored</code>. We can also pass an\nargument to the <code class=\"hljs\">cargo test</code> command to run only tests whose name matches a\nstring; this is called <em>filtering</em> and we‚Äôll cover that in the <a href=\"ch11-02-running-tests.html#running-a-subset-of-tests-by-name\">‚ÄúRunning a\nSubset of Tests by Name‚Äù</a><!-- ignore --> section. We also haven‚Äôt\nfiltered the tests being run, so the end of the summary shows <code class=\"hljs\">0 filtered out</code>.</p>\n<p>The <code class=\"hljs\">0 measured</code> statistic is for benchmark tests that measure performance.\nBenchmark tests are, as of this writing, only available in nightly Rust. See\n<a href=\"../unstable-book/library-features/test.html\">the documentation about benchmark tests</a> to learn more.</p>\n<p>The next part of the test output starting at <code class=\"hljs\">Doc-tests adder</code> is for the\nresults of any documentation tests. We don‚Äôt have any documentation tests yet,\nbut Rust can compile any code examples that appear in our API documentation.\nThis feature helps keep your docs and your code in sync! We‚Äôll discuss how to\nwrite documentation tests in the <a href=\"ch14-02-publishing-to-crates-io.html#documentation-comments-as-tests\">‚ÄúDocumentation Comments as\nTests‚Äù</a><!-- ignore --> section of Chapter 14. For now, we‚Äôll\nignore the <code class=\"hljs\">Doc-tests</code> output.</p>\n<p>Let‚Äôs start to customize the test to our own needs. First change the name of\nthe <code class=\"hljs\">it_works</code> function to a different name, such as <code class=\"hljs\">exploration</code>, like so:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust noplayground hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add</span></span>(left: <span class=\"hljs-built_in\">usize</span>, right: <span class=\"hljs-built_in\">usize</span>) -&gt; <span class=\"hljs-built_in\">usize</span> {\n    left + right\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::*;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">exploration</span></span>() {\n        <span class=\"hljs-keyword\">let</span> result = add(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(result, <span class=\"hljs-number\">4</span>);\n    }\n}</code></pre>\n<p>Then run <code class=\"hljs\">cargo test</code> again. The output now shows <code class=\"hljs\">exploration</code> instead of\n<code class=\"hljs\">it_works</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo <span class=\"hljs-built_in\">test</span></span>\n   Compiling adder v0.1.0 (file:///projects/adder)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.59s\n     Running unittests src/lib.rs (target/debug/deps/adder-92948b65e88960b4)\n\nrunning 1 test\ntest tests::exploration ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n   Doc-tests adder\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n</code></pre>\n<p>Now we‚Äôll add another test, but this time we‚Äôll make a test that fails! Tests\nfail when something in the test function panics. Each test is run in a new\nthread, and when the main thread sees that a test thread has died, the test is\nmarked as failed. In Chapter 9, we talked about how the simplest way to panic\nis to call the <code class=\"hljs\">panic!</code> macro. Enter the new test as a function named\n<code class=\"hljs\">another</code>, so your <em>src/lib.rs</em> file looks like Listing 11-3.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/panics.svg\" title=\"This code panics!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust panics noplayground hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add</span></span>(left: <span class=\"hljs-built_in\">usize</span>, right: <span class=\"hljs-built_in\">usize</span>) -&gt; <span class=\"hljs-built_in\">usize</span> {\n    left + right\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::*;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">exploration</span></span>() {\n        <span class=\"hljs-keyword\">let</span> result = add(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(result, <span class=\"hljs-number\">4</span>);\n    }\n    \n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">another</span></span>() {\n        <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">\"Make this test fail\"</span>);\n    }\n}</code></pre>\n<p><span class=\"caption\">Listing 11-3: Adding a second test that will fail because\nwe call the <code class=\"hljs\">panic!</code> macro</span></p>\n<p>Run the tests again using <code class=\"hljs\">cargo test</code>. The output should look like Listing\n11-4, which shows that our <code class=\"hljs\">exploration</code> test passed and <code class=\"hljs\">another</code> failed.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo <span class=\"hljs-built_in\">test</span></span>\n   Compiling adder v0.1.0 (file:///projects/adder)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.72s\n     Running unittests src/lib.rs (target/debug/deps/adder-92948b65e88960b4)\n\nrunning 2 tests\ntest tests::another ... FAILED\ntest tests::exploration ... ok\n\nfailures:\n\n---- tests::another stdout ----\nthread 'tests::another' panicked at src/lib.rs:17:9:\nMake this test fail\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\n\nfailures:\n    tests::another\n\ntest result: FAILED. 1 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\nerror: test failed, to rerun pass `--lib`\n</code></pre>\n<p><span class=\"caption\">Listing 11-4: Test results when one test passes and one\ntest fails</span></p>\n<p>Instead of <code class=\"hljs\">ok</code>, the line <code class=\"hljs\">test tests::another</code> shows <code class=\"hljs\">FAILED</code>. Two new\nsections appear between the individual results and the summary: the first\ndisplays the detailed reason for each test failure. In this case, we get the\ndetails that <code class=\"hljs\">another</code> failed because it <code class=\"hljs\">panicked at 'Make this test fail'</code> on\nline 10 in the <em>src/lib.rs</em> file. The next section lists just the names of all\nthe failing tests, which is useful when there are lots of tests and lots of\ndetailed failing test output. We can use the name of a failing test to run just\nthat test to more easily debug it; we‚Äôll talk more about ways to run tests in\nthe <a href=\"ch11-02-running-tests.html#controlling-how-tests-are-run\">‚ÄúControlling How Tests Are Run‚Äù</a><!-- ignore\n--> section.</p>\n<p>The summary line displays at the end: overall, our test result is <code class=\"hljs\">FAILED</code>. We\nhad one test pass and one test fail.</p>\n<p>Now that you‚Äôve seen what the test results look like in different scenarios,\nlet‚Äôs look at some macros other than <code class=\"hljs\">panic!</code> that are useful in tests.</p>\n<h3 id=\"checking-results-with-the-assert-macro\"><a class=\"header\" href=\"#checking-results-with-the-assert-macro\">Checking Results with the <code>assert!</code> Macro</a></h3>\n<p>The <code class=\"hljs\">assert!</code> macro, provided by the standard library, is useful when you want\nto ensure that some condition in a test evaluates to <code class=\"hljs\">true</code>. We give the\n<code class=\"hljs\">assert!</code> macro an argument that evaluates to a Boolean. If the value is\n<code class=\"hljs\">true</code>, nothing happens and the test passes. If the value is <code class=\"hljs\">false</code>, the\n<code class=\"hljs\">assert!</code> macro calls <code class=\"hljs\">panic!</code> to cause the test to fail. Using the <code class=\"hljs\">assert!</code>\nmacro helps us check that our code is functioning in the way we intend.</p>\n<p>In Chapter 5, Listing 5-15, we used a <code class=\"hljs\">Rectangle</code> struct and a <code class=\"hljs\">can_hold</code>\nmethod, which are repeated here in Listing 11-5. Let‚Äôs put this code in the\n<em>src/lib.rs</em> file, then write some tests for it using the <code class=\"hljs\">assert!</code> macro.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust noplayground hljs\"><span class=\"hljs-meta\">#[derive(Debug)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Rectangle</span></span> {\n    width: <span class=\"hljs-built_in\">u32</span>,\n    height: <span class=\"hljs-built_in\">u32</span>,\n}\n\n<span class=\"hljs-keyword\">impl</span> Rectangle {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">can_hold</span></span>(&amp;<span class=\"hljs-keyword\">self</span>, other: &amp;Rectangle) -&gt; <span class=\"hljs-built_in\">bool</span> {\n        <span class=\"hljs-keyword\">self</span>.width &gt; other.width &amp;&amp; <span class=\"hljs-keyword\">self</span>.height &gt; other.height\n    }\n}</code></pre>\n<p><span class=\"caption\">Listing 11-5: Using the <code class=\"hljs\">Rectangle</code> struct and its\n<code class=\"hljs\">can_hold</code> method from Chapter 5</span></p>\n<p>The <code class=\"hljs\">can_hold</code> method returns a Boolean, which means it‚Äôs a perfect use case\nfor the <code class=\"hljs\">assert!</code> macro. In Listing 11-6, we write a test that exercises the\n<code class=\"hljs\">can_hold</code> method by creating a <code class=\"hljs\">Rectangle</code> instance that has a width of 8 and\na height of 7 and asserting that it can hold another <code class=\"hljs\">Rectangle</code> instance that\nhas a width of 5 and a height of 1.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#[derive(Debug)]</span>\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Rectangle</span></span> {\n</span><span class=\"boring\">    width: <span class=\"hljs-built_in\">u32</span>,\n</span><span class=\"boring\">    height: <span class=\"hljs-built_in\">u32</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Rectangle {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">can_hold</span></span>(&amp;<span class=\"hljs-keyword\">self</span>, other: &amp;Rectangle) -&gt; <span class=\"hljs-built_in\">bool</span> {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">self</span>.width &gt; other.width &amp;&amp; <span class=\"hljs-keyword\">self</span>.height &gt; other.height\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::*;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">larger_can_hold_smaller</span></span>() {\n        <span class=\"hljs-keyword\">let</span> larger = Rectangle {\n            width: <span class=\"hljs-number\">8</span>,\n            height: <span class=\"hljs-number\">7</span>,\n        };\n        <span class=\"hljs-keyword\">let</span> smaller = Rectangle {\n            width: <span class=\"hljs-number\">5</span>,\n            height: <span class=\"hljs-number\">1</span>,\n        };\n\n        <span class=\"hljs-built_in\">assert!</span>(larger.can_hold(&amp;smaller));\n    }\n}</code></pre>\n<p><span class=\"caption\">Listing 11-6: A test for <code class=\"hljs\">can_hold</code> that checks whether a\nlarger rectangle can indeed hold a smaller rectangle</span></p>\n<p>Note that we‚Äôve added a new line inside the <code class=\"hljs\">tests</code> module: <code class=\"hljs\">use super::*;</code>.\nThe <code class=\"hljs\">tests</code> module is a regular module that follows the usual visibility rules\nwe covered in Chapter 7 in the <a href=\"ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html\">‚ÄúPaths for Referring to an Item in the Module\nTree‚Äù</a><!-- ignore -->\nsection. Because the <code class=\"hljs\">tests</code> module is an inner module, we need to bring the\ncode under test in the outer module into the scope of the inner module. We use\na glob here so anything we define in the outer module is available to this\n<code class=\"hljs\">tests</code> module.</p>\n<p>We‚Äôve named our test <code class=\"hljs\">larger_can_hold_smaller</code>, and we‚Äôve created the two\n<code class=\"hljs\">Rectangle</code> instances that we need. Then we called the <code class=\"hljs\">assert!</code> macro and\npassed it the result of calling <code class=\"hljs\">larger.can_hold(&amp;smaller)</code>. This expression is\nsupposed to return <code class=\"hljs\">true</code>, so our test should pass. Let‚Äôs find out!</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo <span class=\"hljs-built_in\">test</span></span>\n   Compiling rectangle v0.1.0 (file:///projects/rectangle)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.66s\n     Running unittests src/lib.rs (target/debug/deps/rectangle-6584c4561e48942e)\n\nrunning 1 test\ntest tests::larger_can_hold_smaller ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n   Doc-tests rectangle\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n</code></pre>\n<p>It does pass! Let‚Äôs add another test, this time asserting that a smaller\nrectangle cannot hold a larger rectangle:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#[derive(Debug)]</span>\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Rectangle</span></span> {\n</span><span class=\"boring\">    width: <span class=\"hljs-built_in\">u32</span>,\n</span><span class=\"boring\">    height: <span class=\"hljs-built_in\">u32</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Rectangle {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">can_hold</span></span>(&amp;<span class=\"hljs-keyword\">self</span>, other: &amp;Rectangle) -&gt; <span class=\"hljs-built_in\">bool</span> {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">self</span>.width &gt; other.width &amp;&amp; <span class=\"hljs-keyword\">self</span>.height &gt; other.height\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::*;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">larger_can_hold_smaller</span></span>() {\n        <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">        <span class=\"hljs-keyword\">let</span> larger = Rectangle {\n</span><span class=\"boring\">            width: <span class=\"hljs-number\">8</span>,\n</span><span class=\"boring\">            height: <span class=\"hljs-number\">7</span>,\n</span><span class=\"boring\">        };\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> smaller = Rectangle {\n</span><span class=\"boring\">            width: <span class=\"hljs-number\">5</span>,\n</span><span class=\"boring\">            height: <span class=\"hljs-number\">1</span>,\n</span><span class=\"boring\">        };\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert!</span>(larger.can_hold(&amp;smaller));\n</span>    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">smaller_cannot_hold_larger</span></span>() {\n        <span class=\"hljs-keyword\">let</span> larger = Rectangle {\n            width: <span class=\"hljs-number\">8</span>,\n            height: <span class=\"hljs-number\">7</span>,\n        };\n        <span class=\"hljs-keyword\">let</span> smaller = Rectangle {\n            width: <span class=\"hljs-number\">5</span>,\n            height: <span class=\"hljs-number\">1</span>,\n        };\n\n        <span class=\"hljs-built_in\">assert!</span>(!smaller.can_hold(&amp;larger));\n    }\n}</code></pre>\n<p>Because the correct result of the <code class=\"hljs\">can_hold</code> function in this case is <code class=\"hljs\">false</code>,\nwe need to negate that result before we pass it to the <code class=\"hljs\">assert!</code> macro. As a\nresult, our test will pass if <code class=\"hljs\">can_hold</code> returns <code class=\"hljs\">false</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo <span class=\"hljs-built_in\">test</span></span>\n   Compiling rectangle v0.1.0 (file:///projects/rectangle)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.66s\n     Running unittests src/lib.rs (target/debug/deps/rectangle-6584c4561e48942e)\n\nrunning 2 tests\ntest tests::larger_can_hold_smaller ... ok\ntest tests::smaller_cannot_hold_larger ... ok\n\ntest result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n   Doc-tests rectangle\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n</code></pre>\n<p>Two tests that pass! Now let‚Äôs see what happens to our test results when we\nintroduce a bug in our code. We‚Äôll change the implementation of the <code class=\"hljs\">can_hold</code>\nmethod by replacing the greater-than sign with a less-than sign when it\ncompares the widths:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/not_desired_behavior.svg\" title=\"This code does not produce the desired behavior.\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust not_desired_behavior noplayground hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#[derive(Debug)]</span>\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Rectangle</span></span> {\n</span><span class=\"boring\">    width: <span class=\"hljs-built_in\">u32</span>,\n</span><span class=\"boring\">    height: <span class=\"hljs-built_in\">u32</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-comment\">// --snip--</span>\n<span class=\"hljs-keyword\">impl</span> Rectangle {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">can_hold</span></span>(&amp;<span class=\"hljs-keyword\">self</span>, other: &amp;Rectangle) -&gt; <span class=\"hljs-built_in\">bool</span> {\n        <span class=\"hljs-keyword\">self</span>.width &lt; other.width &amp;&amp; <span class=\"hljs-keyword\">self</span>.height &gt; other.height\n    }\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-meta\">#[cfg(test)]</span>\n</span><span class=\"boring\"><span class=\"hljs-keyword\">mod</span> tests {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">use</span> super::*;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-meta\">#[test]</span>\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">larger_can_hold_smaller</span></span>() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> larger = Rectangle {\n</span><span class=\"boring\">            width: <span class=\"hljs-number\">8</span>,\n</span><span class=\"boring\">            height: <span class=\"hljs-number\">7</span>,\n</span><span class=\"boring\">        };\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> smaller = Rectangle {\n</span><span class=\"boring\">            width: <span class=\"hljs-number\">5</span>,\n</span><span class=\"boring\">            height: <span class=\"hljs-number\">1</span>,\n</span><span class=\"boring\">        };\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert!</span>(larger.can_hold(&amp;smaller));\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-meta\">#[test]</span>\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">smaller_cannot_hold_larger</span></span>() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> larger = Rectangle {\n</span><span class=\"boring\">            width: <span class=\"hljs-number\">8</span>,\n</span><span class=\"boring\">            height: <span class=\"hljs-number\">7</span>,\n</span><span class=\"boring\">        };\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> smaller = Rectangle {\n</span><span class=\"boring\">            width: <span class=\"hljs-number\">5</span>,\n</span><span class=\"boring\">            height: <span class=\"hljs-number\">1</span>,\n</span><span class=\"boring\">        };\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert!</span>(!smaller.can_hold(&amp;larger));\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre>\n<p>Running the tests now produces the following:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo <span class=\"hljs-built_in\">test</span></span>\n   Compiling rectangle v0.1.0 (file:///projects/rectangle)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.66s\n     Running unittests src/lib.rs (target/debug/deps/rectangle-6584c4561e48942e)\n\nrunning 2 tests\ntest tests::larger_can_hold_smaller ... FAILED\ntest tests::smaller_cannot_hold_larger ... ok\n\nfailures:\n\n---- tests::larger_can_hold_smaller stdout ----\nthread 'tests::larger_can_hold_smaller' panicked at src/lib.rs:28:9:\nassertion failed: larger.can_hold(&amp;smaller)\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\n\nfailures:\n    tests::larger_can_hold_smaller\n\ntest result: FAILED. 1 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\nerror: test failed, to rerun pass `--lib`\n</code></pre>\n<p>Our tests caught the bug! Because <code class=\"hljs\">larger.width</code> is 8 and <code class=\"hljs\">smaller.width</code> is\n5, the comparison of the widths in <code class=\"hljs\">can_hold</code> now returns <code class=\"hljs\">false</code>: 8 is not\nless than 5.</p>\n<h3 id=\"testing-equality-with-the-assert_eq-and-assert_ne-macros\"><a class=\"header\" href=\"#testing-equality-with-the-assert_eq-and-assert_ne-macros\">Testing Equality with the <code>assert_eq!</code> and <code>assert_ne!</code> Macros</a></h3>\n<p>A common way to verify functionality is to test for equality between the result\nof the code under test and the value you expect the code to return. You could\ndo this using the <code class=\"hljs\">assert!</code> macro and passing it an expression using the <code class=\"hljs\">==</code>\noperator. However, this is such a common test that the standard library\nprovides a pair of macros‚Äî<code class=\"hljs\">assert_eq!</code> and <code class=\"hljs\">assert_ne!</code>‚Äîto perform this test\nmore conveniently. These macros compare two arguments for equality or\ninequality, respectively. They‚Äôll also print the two values if the assertion\nfails, which makes it easier to see <em>why</em> the test failed; conversely, the\n<code class=\"hljs\">assert!</code> macro only indicates that it got a <code class=\"hljs\">false</code> value for the <code class=\"hljs\">==</code>\nexpression, without printing the values that led to the <code class=\"hljs\">false</code> value.</p>\n<p>In Listing 11-7, we write a function named <code class=\"hljs\">add_two</code> that adds <code class=\"hljs\">2</code> to its\nparameter, then we test this function using the <code class=\"hljs\">assert_eq!</code> macro.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust noplayground hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add_two</span></span>(a: <span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span> {\n    a + <span class=\"hljs-number\">2</span>\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::*;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">it_adds_two</span></span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">4</span>, add_two(<span class=\"hljs-number\">2</span>));\n    }\n}</code></pre>\n<p><span class=\"caption\">Listing 11-7: Testing the function <code class=\"hljs\">add_two</code> using the\n<code class=\"hljs\">assert_eq!</code> macro</span></p>\n<p>Let‚Äôs check that it passes!</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo <span class=\"hljs-built_in\">test</span></span>\n   Compiling adder v0.1.0 (file:///projects/adder)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.58s\n     Running unittests src/lib.rs (target/debug/deps/adder-92948b65e88960b4)\n\nrunning 1 test\ntest tests::it_adds_two ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n   Doc-tests adder\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n</code></pre>\n<p>We pass <code class=\"hljs\">4</code> as the argument to <code class=\"hljs\">assert_eq!</code>, which is equal to the result of\ncalling <code class=\"hljs\">add_two(2)</code>. The line for this test is <code class=\"hljs\">test tests::it_adds_two ... ok</code>, and the <code class=\"hljs\">ok</code> text indicates that our test passed!</p>\n<p>Let‚Äôs introduce a bug into our code to see what <code class=\"hljs\">assert_eq!</code> looks like when it\nfails. Change the implementation of the <code class=\"hljs\">add_two</code> function to instead add <code class=\"hljs\">3</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/not_desired_behavior.svg\" title=\"This code does not produce the desired behavior.\" class=\"ferris ferris-small\"></a></div><code class=\"language-rust not_desired_behavior noplayground hljs hide-boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add_two</span></span>(a: <span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span> {\n    a + <span class=\"hljs-number\">3</span>\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-meta\">#[cfg(test)]</span>\n</span><span class=\"boring\"><span class=\"hljs-keyword\">mod</span> tests {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">use</span> super::*;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-meta\">#[test]</span>\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">it_adds_two</span></span>() {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">4</span>, add_two(<span class=\"hljs-number\">2</span>));\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre>\n<p>Run the tests again:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo <span class=\"hljs-built_in\">test</span></span>\n   Compiling adder v0.1.0 (file:///projects/adder)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.61s\n     Running unittests src/lib.rs (target/debug/deps/adder-92948b65e88960b4)\n\nrunning 1 test\ntest tests::it_adds_two ... FAILED\n\nfailures:\n\n---- tests::it_adds_two stdout ----\nthread 'tests::it_adds_two' panicked at src/lib.rs:11:9:\nassertion `left == right` failed\n  left: 4\n right: 5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\n\nfailures:\n    tests::it_adds_two\n\ntest result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\nerror: test failed, to rerun pass `--lib`\n</code></pre>\n<p>Our test caught the bug! The <code class=\"hljs\">it_adds_two</code> test failed, and the message tells\nus that the assertion that fails was <code class=\"hljs\">assertion `left == right` failed</code>\nand what the <code class=\"hljs\">left</code> and <code class=\"hljs\">right</code> values are. This message helps us start\ndebugging: the <code class=\"hljs\">left</code> argument was <code class=\"hljs\">4</code> but the <code class=\"hljs\">right</code> argument, where we had\n<code class=\"hljs\">add_two(2)</code>, was <code class=\"hljs\">5</code>. You can imagine that this would be especially helpful\nwhen we have a lot of tests going on.</p>\n<p>Note that in some languages and test frameworks, the parameters to equality\nassertion functions are called <code class=\"hljs\">expected</code> and <code class=\"hljs\">actual</code>, and the order in which\nwe specify the arguments matters. However, in Rust, they‚Äôre called <code class=\"hljs\">left</code> and\n<code class=\"hljs\">right</code>, and the order in which we specify the value we expect and the value\nthe code produces doesn‚Äôt matter. We could write the assertion in this test as\n<code class=\"hljs\">assert_eq!(add_two(2), 4)</code>, which would result in the same failure message\nthat displays <code class=\"hljs\">assertion failed: `(left == right)`</code>.</p>\n<p>The <code class=\"hljs\">assert_ne!</code> macro will pass if the two values we give it are not equal and\nfail if they‚Äôre equal. This macro is most useful for cases when we‚Äôre not sure\nwhat a value <em>will</em> be, but we know what the value definitely <em>shouldn‚Äôt</em> be.\nFor example, if we‚Äôre testing a function that is guaranteed to change its input\nin some way, but the way in which the input is changed depends on the day of\nthe week that we run our tests, the best thing to assert might be that the\noutput of the function is not equal to the input.</p>\n<p>Under the surface, the <code class=\"hljs\">assert_eq!</code> and <code class=\"hljs\">assert_ne!</code> macros use the operators\n<code class=\"hljs\">==</code> and <code class=\"hljs\">!=</code>, respectively. When the assertions fail, these macros print their\narguments using debug formatting, which means the values being compared must\nimplement the <code class=\"hljs\">PartialEq</code> and <code class=\"hljs\">Debug</code> traits. All primitive types and most of\nthe standard library types implement these traits. For structs and enums that\nyou define yourself, you‚Äôll need to implement <code class=\"hljs\">PartialEq</code> to assert equality of\nthose types. You‚Äôll also need to implement <code class=\"hljs\">Debug</code> to print the values when the\nassertion fails. Because both traits are derivable traits, as mentioned in\nListing 5-12 in Chapter 5, this is usually as straightforward as adding the\n<code class=\"hljs\">#[derive(PartialEq, Debug)]</code> annotation to your struct or enum definition. See\nAppendix C, <a href=\"appendix-03-derivable-traits.html\">‚ÄúDerivable Traits,‚Äù</a><!-- ignore --> for more\ndetails about these and other derivable traits.</p>\n<h3 id=\"adding-custom-failure-messages\"><a class=\"header\" href=\"#adding-custom-failure-messages\">Adding Custom Failure Messages</a></h3>\n<p>You can also add a custom message to be printed with the failure message as\noptional arguments to the <code class=\"hljs\">assert!</code>, <code class=\"hljs\">assert_eq!</code>, and <code class=\"hljs\">assert_ne!</code> macros. Any\narguments specified after the required arguments are passed along to the\n<code class=\"hljs\">format!</code> macro (discussed in Chapter 8 in the <a href=\"ch08-02-strings.html#concatenation-with-the--operator-or-the-format-macro\">‚ÄúConcatenation with the <code class=\"hljs\">+</code>\nOperator or the <code class=\"hljs\">format!</code>\nMacro‚Äù</a><!-- ignore -->\nsection), so you can pass a format string that contains <code class=\"hljs\">{}</code> placeholders and\nvalues to go in those placeholders. Custom messages are useful for documenting\nwhat an assertion means; when a test fails, you‚Äôll have a better idea of what\nthe problem is with the code.</p>\n<p>For example, let‚Äôs say we have a function that greets people by name and we\nwant to test that the name we pass into the function appears in the output:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust noplayground hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">greeting</span></span>(name: &amp;<span class=\"hljs-built_in\">str</span>) -&gt; <span class=\"hljs-built_in\">String</span> {\n    <span class=\"hljs-built_in\">format!</span>(<span class=\"hljs-string\">\"Hello {name}!\"</span>)\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::*;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">greeting_contains_name</span></span>() {\n        <span class=\"hljs-keyword\">let</span> result = greeting(<span class=\"hljs-string\">\"Carol\"</span>);\n        <span class=\"hljs-built_in\">assert!</span>(result.contains(<span class=\"hljs-string\">\"Carol\"</span>));\n    }\n}</code></pre>\n<p>The requirements for this program haven‚Äôt been agreed upon yet, and we‚Äôre\npretty sure the <code class=\"hljs\">Hello</code> text at the beginning of the greeting will change. We\ndecided we don‚Äôt want to have to update the test when the requirements change,\nso instead of checking for exact equality to the value returned from the\n<code class=\"hljs\">greeting</code> function, we‚Äôll just assert that the output contains the text of the\ninput parameter.</p>\n<p>Now let‚Äôs introduce a bug into this code by changing <code class=\"hljs\">greeting</code> to exclude\n<code class=\"hljs\">name</code> to see what the default test failure looks like:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/not_desired_behavior.svg\" title=\"This code does not produce the desired behavior.\" class=\"ferris ferris-small\"></a></div><code class=\"language-rust not_desired_behavior noplayground hljs hide-boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">greeting</span></span>(name: &amp;<span class=\"hljs-built_in\">str</span>) -&gt; <span class=\"hljs-built_in\">String</span> {\n    <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Hello!\"</span>)\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-meta\">#[cfg(test)]</span>\n</span><span class=\"boring\"><span class=\"hljs-keyword\">mod</span> tests {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">use</span> super::*;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-meta\">#[test]</span>\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">greeting_contains_name</span></span>() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> result = greeting(<span class=\"hljs-string\">\"Carol\"</span>);\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert!</span>(result.contains(<span class=\"hljs-string\">\"Carol\"</span>));\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre>\n<p>Running this test produces the following:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo <span class=\"hljs-built_in\">test</span></span>\n   Compiling greeter v0.1.0 (file:///projects/greeter)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.91s\n     Running unittests src/lib.rs (target/debug/deps/greeter-170b942eb5bf5e3a)\n\nrunning 1 test\ntest tests::greeting_contains_name ... FAILED\n\nfailures:\n\n---- tests::greeting_contains_name stdout ----\nthread 'tests::greeting_contains_name' panicked at src/lib.rs:12:9:\nassertion failed: result.contains(\"Carol\")\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\n\nfailures:\n    tests::greeting_contains_name\n\ntest result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\nerror: test failed, to rerun pass `--lib`\n</code></pre>\n<p>This result just indicates that the assertion failed and which line the\nassertion is on. A more useful failure message would print the value from the\n<code class=\"hljs\">greeting</code> function. Let‚Äôs add a custom failure message composed of a format\nstring with a placeholder filled in with the actual value we got from the\n<code class=\"hljs\">greeting</code> function:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">greeting</span></span>(name: &amp;<span class=\"hljs-built_in\">str</span>) -&gt; <span class=\"hljs-built_in\">String</span> {\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Hello!\"</span>)\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-meta\">#[cfg(test)]</span>\n</span><span class=\"boring\"><span class=\"hljs-keyword\">mod</span> tests {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">use</span> super::*;\n</span><span class=\"boring\">\n</span>    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">greeting_contains_name</span></span>() {\n        <span class=\"hljs-keyword\">let</span> result = greeting(<span class=\"hljs-string\">\"Carol\"</span>);\n        <span class=\"hljs-built_in\">assert!</span>(\n            result.contains(<span class=\"hljs-string\">\"Carol\"</span>),\n            <span class=\"hljs-string\">\"Greeting did not contain name, value was `{}`\"</span>,\n            result\n        );\n    }\n<span class=\"boring\">}</span></code></pre>\n<p>Now when we run the test, we‚Äôll get a more informative error message:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo <span class=\"hljs-built_in\">test</span></span>\n   Compiling greeter v0.1.0 (file:///projects/greeter)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.93s\n     Running unittests src/lib.rs (target/debug/deps/greeter-170b942eb5bf5e3a)\n\nrunning 1 test\ntest tests::greeting_contains_name ... FAILED\n\nfailures:\n\n---- tests::greeting_contains_name stdout ----\nthread 'tests::greeting_contains_name' panicked at src/lib.rs:12:9:\nGreeting did not contain name, value was `Hello!`\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\n\nfailures:\n    tests::greeting_contains_name\n\ntest result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\nerror: test failed, to rerun pass `--lib`\n</code></pre>\n<p>We can see the value we actually got in the test output, which would help us\ndebug what happened instead of what we were expecting to happen.</p>\n<h3 id=\"checking-for-panics-with-should_panic\"><a class=\"header\" href=\"#checking-for-panics-with-should_panic\">Checking for Panics with <code>should_panic</code></a></h3>\n<p>In addition to checking return values, it‚Äôs important to check that our code\nhandles error conditions as we expect. For example, consider the <code class=\"hljs\">Guess</code> type\nthat we created in Chapter 9, Listing 9-13. Other code that uses <code class=\"hljs\">Guess</code>\ndepends on the guarantee that <code class=\"hljs\">Guess</code> instances will contain only values\nbetween 1 and 100. We can write a test that ensures that attempting to create a\n<code class=\"hljs\">Guess</code> instance with a value outside that range panics.</p>\n<p>We do this by adding the attribute <code class=\"hljs\">should_panic</code> to our test function. The\ntest passes if the code inside the function panics; the test fails if the code\ninside the function doesn‚Äôt panic.</p>\n<p>Listing 11-8 shows a test that checks that the error conditions of <code class=\"hljs\">Guess::new</code>\nhappen when we expect them to.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust noplayground hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Guess</span></span> {\n    value: <span class=\"hljs-built_in\">i32</span>,\n}\n\n<span class=\"hljs-keyword\">impl</span> Guess {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(value: <span class=\"hljs-built_in\">i32</span>) -&gt; Guess {\n        <span class=\"hljs-keyword\">if</span> value &lt; <span class=\"hljs-number\">1</span> || value &gt; <span class=\"hljs-number\">100</span> {\n            <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">\"Guess value must be between 1 and 100, got {value}.\"</span>);\n        }\n\n        Guess { value }\n    }\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::*;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-meta\">#[should_panic]</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">greater_than_100</span></span>() {\n        Guess::new(<span class=\"hljs-number\">200</span>);\n    }\n}</code></pre>\n<p><span class=\"caption\">Listing 11-8: Testing that a condition will cause a\n<code class=\"hljs\">panic!</code></span></p>\n<p>We place the <code class=\"hljs\">#[should_panic]</code> attribute after the <code class=\"hljs\">#[test]</code> attribute and\nbefore the test function it applies to. Let‚Äôs look at the result when this test\npasses:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo <span class=\"hljs-built_in\">test</span></span>\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.58s\n     Running unittests src/lib.rs (target/debug/deps/guessing_game-57d70c3acb738f4d)\n\nrunning 1 test\ntest tests::greater_than_100 - should panic ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n   Doc-tests guessing_game\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n</code></pre>\n<p>Looks good! Now let‚Äôs introduce a bug in our code by removing the condition\nthat the <code class=\"hljs\">new</code> function will panic if the value is greater than 100:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/not_desired_behavior.svg\" title=\"This code does not produce the desired behavior.\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust not_desired_behavior noplayground hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Guess</span></span> {\n</span><span class=\"boring\">    value: <span class=\"hljs-built_in\">i32</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-comment\">// --snip--</span>\n<span class=\"hljs-keyword\">impl</span> Guess {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(value: <span class=\"hljs-built_in\">i32</span>) -&gt; Guess {\n        <span class=\"hljs-keyword\">if</span> value &lt; <span class=\"hljs-number\">1</span> {\n            <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">\"Guess value must be between 1 and 100, got {value}.\"</span>);\n        }\n\n        Guess { value }\n    }\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-meta\">#[cfg(test)]</span>\n</span><span class=\"boring\"><span class=\"hljs-keyword\">mod</span> tests {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">use</span> super::*;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-meta\">#[test]</span>\n</span><span class=\"boring\">    <span class=\"hljs-meta\">#[should_panic]</span>\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">greater_than_100</span></span>() {\n</span><span class=\"boring\">        Guess::new(<span class=\"hljs-number\">200</span>);\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre>\n<p>When we run the test in Listing 11-8, it will fail:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo <span class=\"hljs-built_in\">test</span></span>\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.62s\n     Running unittests src/lib.rs (target/debug/deps/guessing_game-57d70c3acb738f4d)\n\nrunning 1 test\ntest tests::greater_than_100 - should panic ... FAILED\n\nfailures:\n\n---- tests::greater_than_100 stdout ----\nnote: test did not panic as expected\n\nfailures:\n    tests::greater_than_100\n\ntest result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\nerror: test failed, to rerun pass `--lib`\n</code></pre>\n<p>We don‚Äôt get a very helpful message in this case, but when we look at the test\nfunction, we see that it‚Äôs annotated with <code class=\"hljs\">#[should_panic]</code>. The failure we got\nmeans that the code in the test function did not cause a panic.</p>\n<p>Tests that use <code class=\"hljs\">should_panic</code> can be imprecise. A <code class=\"hljs\">should_panic</code> test would\npass even if the test panics for a different reason from the one we were\nexpecting. To make <code class=\"hljs\">should_panic</code> tests more precise, we can add an optional\n<code class=\"hljs\">expected</code> parameter to the <code class=\"hljs\">should_panic</code> attribute. The test harness will\nmake sure that the failure message contains the provided text. For example,\nconsider the modified code for <code class=\"hljs\">Guess</code> in Listing 11-9 where the <code class=\"hljs\">new</code> function\npanics with different messages depending on whether the value is too small or\ntoo large.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Guess</span></span> {\n</span><span class=\"boring\">    value: <span class=\"hljs-built_in\">i32</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-comment\">// --snip--</span>\n\n<span class=\"hljs-keyword\">impl</span> Guess {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(value: <span class=\"hljs-built_in\">i32</span>) -&gt; Guess {\n        <span class=\"hljs-keyword\">if</span> value &lt; <span class=\"hljs-number\">1</span> {\n            <span class=\"hljs-built_in\">panic!</span>(\n                <span class=\"hljs-string\">\"Guess value must be greater than or equal to 1, got {value}.\"</span>\n            );\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> value &gt; <span class=\"hljs-number\">100</span> {\n            <span class=\"hljs-built_in\">panic!</span>(\n                <span class=\"hljs-string\">\"Guess value must be less than or equal to 100, got {value}.\"</span>\n            );\n        }\n\n        Guess { value }\n    }\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::*;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-meta\">#[should_panic(expected = <span class=\"hljs-meta-string\">\"less than or equal to 100\"</span>)]</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">greater_than_100</span></span>() {\n        Guess::new(<span class=\"hljs-number\">200</span>);\n    }\n}</code></pre>\n<p><span class=\"caption\">Listing 11-9: Testing for a <code class=\"hljs\">panic!</code> with a panic message\ncontaining a specified substring</span></p>\n<p>This test will pass because the value we put in the <code class=\"hljs\">should_panic</code> attribute‚Äôs\n<code class=\"hljs\">expected</code> parameter is a substring of the message that the <code class=\"hljs\">Guess::new</code>\nfunction panics with. We could have specified the entire panic message that we\nexpect, which in this case would be <code class=\"hljs\">Guess value must be less than or equal to 100, got 200.</code> What you choose to specify depends on how much of the panic\nmessage is unique or dynamic and how precise you want your test to be. In this\ncase, a substring of the panic message is enough to ensure that the code in the\ntest function executes the <code class=\"hljs\">else if value &gt; 100</code> case.</p>\n<p>To see what happens when a <code class=\"hljs\">should_panic</code> test with an <code class=\"hljs\">expected</code> message\nfails, let‚Äôs again introduce a bug into our code by swapping the bodies of the\n<code class=\"hljs\">if value &lt; 1</code> and the <code class=\"hljs\">else if value &gt; 100</code> blocks:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/not_desired_behavior.svg\" title=\"This code does not produce the desired behavior.\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore not_desired_behavior hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Guess</span></span> {\n</span><span class=\"boring\">    value: <span class=\"hljs-built_in\">i32</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Guess {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(value: <span class=\"hljs-built_in\">i32</span>) -&gt; Guess {\n</span>        <span class=\"hljs-keyword\">if</span> value &lt; <span class=\"hljs-number\">1</span> {\n            <span class=\"hljs-built_in\">panic!</span>(\n                <span class=\"hljs-string\">\"Guess value must be less than or equal to 100, got {value}.\"</span>\n            );\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> value &gt; <span class=\"hljs-number\">100</span> {\n            <span class=\"hljs-built_in\">panic!</span>(\n                <span class=\"hljs-string\">\"Guess value must be greater than or equal to 1, got {value}.\"</span>\n            );\n        }\n<span class=\"boring\">\n</span><span class=\"boring\">        Guess { value }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-meta\">#[cfg(test)]</span>\n</span><span class=\"boring\"><span class=\"hljs-keyword\">mod</span> tests {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">use</span> super::*;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-meta\">#[test]</span>\n</span><span class=\"boring\">    <span class=\"hljs-meta\">#[should_panic(expected = <span class=\"hljs-meta-string\">\"less than or equal to 100\"</span>)]</span>\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">greater_than_100</span></span>() {\n</span><span class=\"boring\">        Guess::new(<span class=\"hljs-number\">200</span>);\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre>\n<p>This time when we run the <code class=\"hljs\">should_panic</code> test, it will fail:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo <span class=\"hljs-built_in\">test</span></span>\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.66s\n     Running unittests src/lib.rs (target/debug/deps/guessing_game-57d70c3acb738f4d)\n\nrunning 1 test\ntest tests::greater_than_100 - should panic ... FAILED\n\nfailures:\n\n---- tests::greater_than_100 stdout ----\nthread 'tests::greater_than_100' panicked at src/lib.rs:12:13:\nGuess value must be greater than or equal to 1, got 200.\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\nnote: panic did not contain expected string\n      panic message: `\"Guess value must be greater than or equal to 1, got 200.\"`,\n expected substring: `\"less than or equal to 100\"`\n\nfailures:\n    tests::greater_than_100\n\ntest result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\nerror: test failed, to rerun pass `--lib`\n</code></pre>\n<p>The failure message indicates that this test did indeed panic as we expected,\nbut the panic message did not include the expected string <code class=\"hljs\">less than or equal to 100</code>. The panic message that we did get in this case was <code class=\"hljs\">Guess value must be greater than or equal to 1, got 200.</code> Now we can start figuring out where\nour bug is!</p>\n<h3 id=\"using-resultt-e-in-tests\"><a class=\"header\" href=\"#using-resultt-e-in-tests\">Using <code>Result&lt;T, E&gt;</code> in Tests</a></h3>\n<p>Our tests so far all panic when they fail. We can also write tests that use\n<code class=\"hljs\">Result&lt;T, E&gt;</code>! Here‚Äôs the test from Listing 11-1, rewritten to use <code class=\"hljs\">Result&lt;T, E&gt;</code> and return an <code class=\"hljs\">Err</code> instead of panicking:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust noplayground hljs\"><span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">it_works</span></span>() -&gt; <span class=\"hljs-built_in\">Result</span>&lt;(), <span class=\"hljs-built_in\">String</span>&gt; {\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">4</span> {\n            <span class=\"hljs-literal\">Ok</span>(())\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-literal\">Err</span>(<span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"two plus two does not equal four\"</span>))\n        }\n    }\n}</code></pre>\n<p>The <code class=\"hljs\">it_works</code> function now has the <code class=\"hljs\">Result&lt;(), String&gt;</code> return type. In the\nbody of the function, rather than calling the <code class=\"hljs\">assert_eq!</code> macro, we return\n<code class=\"hljs\">Ok(())</code> when the test passes and an <code class=\"hljs\">Err</code> with a <code class=\"hljs\">String</code> inside when the test\nfails.</p>\n<p>Writing tests so they return a <code class=\"hljs\">Result&lt;T, E&gt;</code> enables you to use the question\nmark operator in the body of tests, which can be a convenient way to write\ntests that should fail if any operation within them returns an <code class=\"hljs\">Err</code> variant.</p>\n<p>You can‚Äôt use the <code class=\"hljs\">#[should_panic]</code> annotation on tests that use <code class=\"hljs\">Result&lt;T, E&gt;</code>. To assert that an operation returns an <code class=\"hljs\">Err</code> variant, <em>don‚Äôt</em> use the\nquestion mark operator on the <code class=\"hljs\">Result&lt;T, E&gt;</code> value. Instead, use\n<code class=\"hljs\">assert!(value.is_err())</code>.</p>\n<p>Now that you know several ways to write tests, let‚Äôs look at what is happening\nwhen we run our tests and explore the different options we can use with <code class=\"hljs\">cargo test</code>.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"controlling-how-tests-are-run\"><a class=\"header\" href=\"#controlling-how-tests-are-run\">Controlling How Tests Are Run</a></h2>\n<p>Just as <code class=\"hljs\">cargo run</code> compiles your code and then runs the resulting binary,\n<code class=\"hljs\">cargo test</code> compiles your code in test mode and runs the resulting test\nbinary. The default behavior of the binary produced by <code class=\"hljs\">cargo test</code> is to run\nall the tests in parallel and capture output generated during test runs,\npreventing the output from being displayed and making it easier to read the\noutput related to the test results. You can, however, specify command line\noptions to change this default behavior.</p>\n<p>Some command line options go to <code class=\"hljs\">cargo test</code>, and some go to the resulting test\nbinary. To separate these two types of arguments, you list the arguments that\ngo to <code class=\"hljs\">cargo test</code> followed by the separator <code class=\"hljs\">--</code> and then the ones that go to\nthe test binary. Running <code class=\"hljs\">cargo test --help</code> displays the options you can use\nwith <code class=\"hljs\">cargo test</code>, and running <code class=\"hljs\">cargo test -- --help</code> displays the options you\ncan use after the separator.</p>\n<h3 id=\"running-tests-in-parallel-or-consecutively\"><a class=\"header\" href=\"#running-tests-in-parallel-or-consecutively\">Running Tests in Parallel or Consecutively</a></h3>\n<p>When you run multiple tests, by default they run in parallel using threads,\nmeaning they finish running faster and you get feedback quicker. Because the\ntests are running at the same time, you must make sure your tests don‚Äôt depend\non each other or on any shared state, including a shared environment, such as\nthe current working directory or environment variables.</p>\n<p>For example, say each of your tests runs some code that creates a file on disk\nnamed <em>test-output.txt</em> and writes some data to that file. Then each test reads\nthe data in that file and asserts that the file contains a particular value,\nwhich is different in each test. Because the tests run at the same time, one\ntest might overwrite the file in the time between another test writing and\nreading the file. The second test will then fail, not because the code is\nincorrect but because the tests have interfered with each other while running\nin parallel. One solution is to make sure each test writes to a different file;\nanother solution is to run the tests one at a time.</p>\n<p>If you don‚Äôt want to run the tests in parallel or if you want more fine-grained\ncontrol over the number of threads used, you can send the <code class=\"hljs\">--test-threads</code> flag\nand the number of threads you want to use to the test binary. Take a look at\nthe following example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo <span class=\"hljs-built_in\">test</span> -- --<span class=\"hljs-built_in\">test</span>-threads=1</span>\n</code></pre>\n<p>We set the number of test threads to <code class=\"hljs\">1</code>, telling the program not to use any\nparallelism. Running the tests using one thread will take longer than running\nthem in parallel, but the tests won‚Äôt interfere with each other if they share\nstate.</p>\n<h3 id=\"showing-function-output\"><a class=\"header\" href=\"#showing-function-output\">Showing Function Output</a></h3>\n<p>By default, if a test passes, Rust‚Äôs test library captures anything printed to\nstandard output. For example, if we call <code class=\"hljs\">println!</code> in a test and the test\npasses, we won‚Äôt see the <code class=\"hljs\">println!</code> output in the terminal; we‚Äôll see only the\nline that indicates the test passed. If a test fails, we‚Äôll see whatever was\nprinted to standard output with the rest of the failure message.</p>\n<p>As an example, Listing 11-10 has a silly function that prints the value of its\nparameter and returns 10, as well as a test that passes and a test that fails.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/panics.svg\" title=\"This code panics!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust panics noplayground hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">prints_and_returns_10</span></span>(a: <span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span> {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"I got the value {a}\"</span>);\n    <span class=\"hljs-number\">10</span>\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::*;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">this_test_will_pass</span></span>() {\n        <span class=\"hljs-keyword\">let</span> value = prints_and_returns_10(<span class=\"hljs-number\">4</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">10</span>, value);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">this_test_will_fail</span></span>() {\n        <span class=\"hljs-keyword\">let</span> value = prints_and_returns_10(<span class=\"hljs-number\">8</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">5</span>, value);\n    }\n}</code></pre>\n<p><span class=\"caption\">Listing 11-10: Tests for a function that calls\n<code class=\"hljs\">println!</code></span></p>\n<p>When we run these tests with <code class=\"hljs\">cargo test</code>, we‚Äôll see the following output:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo <span class=\"hljs-built_in\">test</span></span>\n   Compiling silly-function v0.1.0 (file:///projects/silly-function)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.58s\n     Running unittests src/lib.rs (target/debug/deps/silly_function-160869f38cff9166)\n\nrunning 2 tests\ntest tests::this_test_will_fail ... FAILED\ntest tests::this_test_will_pass ... ok\n\nfailures:\n\n---- tests::this_test_will_fail stdout ----\nI got the value 8\nthread 'tests::this_test_will_fail' panicked at src/lib.rs:19:9:\nassertion `left == right` failed\n  left: 5\n right: 10\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\n\nfailures:\n    tests::this_test_will_fail\n\ntest result: FAILED. 1 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\nerror: test failed, to rerun pass `--lib`\n</code></pre>\n<p>Note that nowhere in this output do we see <code class=\"hljs\">I got the value 4</code>, which is what\nis printed when the test that passes runs. That output has been captured. The\noutput from the test that failed, <code class=\"hljs\">I got the value 8</code>, appears in the section\nof the test summary output, which also shows the cause of the test failure.</p>\n<p>If we want to see printed values for passing tests as well, we can tell Rust\nto also show the output of successful tests with <code class=\"hljs\">--show-output</code>.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo <span class=\"hljs-built_in\">test</span> -- --show-output</span>\n</code></pre>\n<p>When we run the tests in Listing 11-10 again with the <code class=\"hljs\">--show-output</code> flag, we\nsee the following output:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo <span class=\"hljs-built_in\">test</span> -- --show-output</span>\n   Compiling silly-function v0.1.0 (file:///projects/silly-function)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.60s\n     Running unittests src/lib.rs (target/debug/deps/silly_function-160869f38cff9166)\n\nrunning 2 tests\ntest tests::this_test_will_fail ... FAILED\ntest tests::this_test_will_pass ... ok\n\nsuccesses:\n\n---- tests::this_test_will_pass stdout ----\nI got the value 4\n\n\nsuccesses:\n    tests::this_test_will_pass\n\nfailures:\n\n---- tests::this_test_will_fail stdout ----\nI got the value 8\nthread 'tests::this_test_will_fail' panicked at src/lib.rs:19:9:\nassertion `left == right` failed\n  left: 5\n right: 10\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\n\nfailures:\n    tests::this_test_will_fail\n\ntest result: FAILED. 1 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\nerror: test failed, to rerun pass `--lib`\n</code></pre>\n<h3 id=\"running-a-subset-of-tests-by-name\"><a class=\"header\" href=\"#running-a-subset-of-tests-by-name\">Running a Subset of Tests by Name</a></h3>\n<p>Sometimes, running a full test suite can take a long time. If you‚Äôre working on\ncode in a particular area, you might want to run only the tests pertaining to\nthat code. You can choose which tests to run by passing <code class=\"hljs\">cargo test</code> the name\nor names of the test(s) you want to run as an argument.</p>\n<p>To demonstrate how to run a subset of tests, we‚Äôll first create three tests for\nour <code class=\"hljs\">add_two</code> function, as shown in Listing 11-11, and choose which ones to run.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust noplayground hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add_two</span></span>(a: <span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span> {\n    a + <span class=\"hljs-number\">2</span>\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::*;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add_two_and_two</span></span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">4</span>, add_two(<span class=\"hljs-number\">2</span>));\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add_three_and_two</span></span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">5</span>, add_two(<span class=\"hljs-number\">3</span>));\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">one_hundred</span></span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">102</span>, add_two(<span class=\"hljs-number\">100</span>));\n    }\n}</code></pre>\n<p><span class=\"caption\">Listing 11-11: Three tests with three different\nnames</span></p>\n<p>If we run the tests without passing any arguments, as we saw earlier, all the\ntests will run in parallel:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo <span class=\"hljs-built_in\">test</span></span>\n   Compiling adder v0.1.0 (file:///projects/adder)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.62s\n     Running unittests src/lib.rs (target/debug/deps/adder-92948b65e88960b4)\n\nrunning 3 tests\ntest tests::add_three_and_two ... ok\ntest tests::add_two_and_two ... ok\ntest tests::one_hundred ... ok\n\ntest result: ok. 3 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n   Doc-tests adder\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n</code></pre>\n<h4 id=\"running-single-tests\"><a class=\"header\" href=\"#running-single-tests\">Running Single Tests</a></h4>\n<p>We can pass the name of any test function to <code class=\"hljs\">cargo test</code> to run only that test:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo <span class=\"hljs-built_in\">test</span> one_hundred</span>\n   Compiling adder v0.1.0 (file:///projects/adder)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.69s\n     Running unittests src/lib.rs (target/debug/deps/adder-92948b65e88960b4)\n\nrunning 1 test\ntest tests::one_hundred ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 2 filtered out; finished in 0.00s\n\n</code></pre>\n<p>Only the test with the name <code class=\"hljs\">one_hundred</code> ran; the other two tests didn‚Äôt match\nthat name. The test output lets us know we had more tests that didn‚Äôt run by\ndisplaying <code class=\"hljs\">2 filtered out</code> at the end.</p>\n<p>We can‚Äôt specify the names of multiple tests in this way; only the first value\ngiven to <code class=\"hljs\">cargo test</code> will be used. But there is a way to run multiple tests.</p>\n<h4 id=\"filtering-to-run-multiple-tests\"><a class=\"header\" href=\"#filtering-to-run-multiple-tests\">Filtering to Run Multiple Tests</a></h4>\n<p>We can specify part of a test name, and any test whose name matches that value\nwill be run. For example, because two of our tests‚Äô names contain <code class=\"hljs\">add</code>, we can\nrun those two by running <code class=\"hljs\">cargo test add</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo <span class=\"hljs-built_in\">test</span> add</span>\n   Compiling adder v0.1.0 (file:///projects/adder)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.61s\n     Running unittests src/lib.rs (target/debug/deps/adder-92948b65e88960b4)\n\nrunning 2 tests\ntest tests::add_three_and_two ... ok\ntest tests::add_two_and_two ... ok\n\ntest result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 1 filtered out; finished in 0.00s\n\n</code></pre>\n<p>This command ran all tests with <code class=\"hljs\">add</code> in the name and filtered out the test\nnamed <code class=\"hljs\">one_hundred</code>. Also note that the module in which a test appears becomes\npart of the test‚Äôs name, so we can run all the tests in a module by filtering\non the module‚Äôs name.</p>\n<h3 id=\"ignoring-some-tests-unless-specifically-requested\"><a class=\"header\" href=\"#ignoring-some-tests-unless-specifically-requested\">Ignoring Some Tests Unless Specifically Requested</a></h3>\n<p>Sometimes a few specific tests can be very time-consuming to execute, so you\nmight want to exclude them during most runs of <code class=\"hljs\">cargo test</code>. Rather than\nlisting as arguments all tests you do want to run, you can instead annotate the\ntime-consuming tests using the <code class=\"hljs\">ignore</code> attribute to exclude them, as shown\nhere:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust noplayground hljs\"><span class=\"hljs-meta\">#[test]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">it_works</span></span>() {\n    <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>);\n}\n\n<span class=\"hljs-meta\">#[test]</span>\n<span class=\"hljs-meta\">#[ignore]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">expensive_test</span></span>() {\n    <span class=\"hljs-comment\">// code that takes an hour to run</span>\n}</code></pre>\n<p>After <code class=\"hljs\">#[test]</code> we add the <code class=\"hljs\">#[ignore]</code> line to the test we want to exclude. Now\nwhen we run our tests, <code class=\"hljs\">it_works</code> runs, but <code class=\"hljs\">expensive_test</code> doesn‚Äôt:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo <span class=\"hljs-built_in\">test</span></span>\n   Compiling adder v0.1.0 (file:///projects/adder)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.60s\n     Running unittests src/lib.rs (target/debug/deps/adder-92948b65e88960b4)\n\nrunning 2 tests\ntest expensive_test ... ignored\ntest it_works ... ok\n\ntest result: ok. 1 passed; 0 failed; 1 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n   Doc-tests adder\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n</code></pre>\n<p>The <code class=\"hljs\">expensive_test</code> function is listed as <code class=\"hljs\">ignored</code>. If we want to run only\nthe ignored tests, we can use <code class=\"hljs\">cargo test -- --ignored</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo <span class=\"hljs-built_in\">test</span> -- --ignored</span>\n   Compiling adder v0.1.0 (file:///projects/adder)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.61s\n     Running unittests src/lib.rs (target/debug/deps/adder-92948b65e88960b4)\n\nrunning 1 test\ntest expensive_test ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 1 filtered out; finished in 0.00s\n\n   Doc-tests adder\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n</code></pre>\n<p>By controlling which tests run, you can make sure your <code class=\"hljs\">cargo test</code> results\nwill be fast. When you‚Äôre at a point where it makes sense to check the results\nof the <code class=\"hljs\">ignored</code> tests and you have time to wait for the results, you can run\n<code class=\"hljs\">cargo test -- --ignored</code> instead. If you want to run all tests whether they‚Äôre\nignored or not, you can run <code class=\"hljs\">cargo test -- --include-ignored</code>.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"test-organization\"><a class=\"header\" href=\"#test-organization\">Test Organization</a></h2>\n<p>As mentioned at the start of the chapter, testing is a complex discipline, and\ndifferent people use different terminology and organization. The Rust community\nthinks about tests in terms of two main categories: unit tests and integration\ntests. <em>Unit tests</em> are small and more focused, testing one module in isolation\nat a time, and can test private interfaces. <em>Integration tests</em> are entirely\nexternal to your library and use your code in the same way any other external\ncode would, using only the public interface and potentially exercising multiple\nmodules per test.</p>\n<p>Writing both kinds of tests is important to ensure that the pieces of your\nlibrary are doing what you expect them to, separately and together.</p>\n<h3 id=\"unit-tests\"><a class=\"header\" href=\"#unit-tests\">Unit Tests</a></h3>\n<p>The purpose of unit tests is to test each unit of code in isolation from the\nrest of the code to quickly pinpoint where code is and isn‚Äôt working as\nexpected. You‚Äôll put unit tests in the <em>src</em> directory in each file with the\ncode that they‚Äôre testing. The convention is to create a module named <code class=\"hljs\">tests</code>\nin each file to contain the test functions and to annotate the module with\n<code class=\"hljs\">cfg(test)</code>.</p>\n<h4 id=\"the-tests-module-and-cfgtest\"><a class=\"header\" href=\"#the-tests-module-and-cfgtest\">The Tests Module and <code>#[cfg(test)]</code></a></h4>\n<p>The <code class=\"hljs\">#[cfg(test)]</code> annotation on the tests module tells Rust to compile and run\nthe test code only when you run <code class=\"hljs\">cargo test</code>, not when you run <code class=\"hljs\">cargo build</code>.\nThis saves compile time when you only want to build the library and saves space\nin the resulting compiled artifact because the tests are not included. You‚Äôll\nsee that because integration tests go in a different directory, they don‚Äôt need\nthe <code class=\"hljs\">#[cfg(test)]</code> annotation. However, because unit tests go in the same files\nas the code, you‚Äôll use <code class=\"hljs\">#[cfg(test)]</code> to specify that they shouldn‚Äôt be\nincluded in the compiled result.</p>\n<p>Recall that when we generated the new <code class=\"hljs\">adder</code> project in the first section of\nthis chapter, Cargo generated this code for us:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust noplayground hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add</span></span>(left: <span class=\"hljs-built_in\">usize</span>, right: <span class=\"hljs-built_in\">usize</span>) -&gt; <span class=\"hljs-built_in\">usize</span> {\n    left + right\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::*;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">it_works</span></span>() {\n        <span class=\"hljs-keyword\">let</span> result = add(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(result, <span class=\"hljs-number\">4</span>);\n    }\n}</code></pre>\n<p>This code is the automatically generated test module. The attribute <code class=\"hljs\">cfg</code>\nstands for <em>configuration</em> and tells Rust that the following item should only\nbe included given a certain configuration option. In this case, the\nconfiguration option is <code class=\"hljs\">test</code>, which is provided by Rust for compiling and\nrunning tests. By using the <code class=\"hljs\">cfg</code> attribute, Cargo compiles our test code only\nif we actively run the tests with <code class=\"hljs\">cargo test</code>. This includes any helper\nfunctions that might be within this module, in addition to the functions\nannotated with <code class=\"hljs\">#[test]</code>.</p>\n<h4 id=\"testing-private-functions\"><a class=\"header\" href=\"#testing-private-functions\">Testing Private Functions</a></h4>\n<p>There‚Äôs debate within the testing community about whether or not private\nfunctions should be tested directly, and other languages make it difficult or\nimpossible to test private functions. Regardless of which testing ideology you\nadhere to, Rust‚Äôs privacy rules do allow you to test private functions.\nConsider the code in Listing 11-12 with the private function <code class=\"hljs\">internal_adder</code>.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust noplayground hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add_two</span></span>(a: <span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span> {\n    internal_adder(a, <span class=\"hljs-number\">2</span>)\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">internal_adder</span></span>(a: <span class=\"hljs-built_in\">i32</span>, b: <span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span> {\n    a + b\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::*;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">internal</span></span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">4</span>, internal_adder(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>));\n    }\n}</code></pre>\n<p><span class=\"caption\">Listing 11-12: Testing a private function</span></p>\n<p>Note that the <code class=\"hljs\">internal_adder</code> function is not marked as <code class=\"hljs\">pub</code>. Tests are just\nRust code, and the <code class=\"hljs\">tests</code> module is just another module. As we discussed in\nthe <a href=\"ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html\">‚ÄúPaths for Referring to an Item in the Module Tree‚Äù</a><!-- ignore -->\nsection, items in child modules can use the items in their ancestor modules. In\nthis test, we bring all of the <code class=\"hljs\">tests</code> module‚Äôs parent‚Äôs items into scope with\n<code class=\"hljs\">use super::*</code>, and then the test can call <code class=\"hljs\">internal_adder</code>. If you don‚Äôt think\nprivate functions should be tested, there‚Äôs nothing in Rust that will compel\nyou to do so.</p>\n<h3 id=\"integration-tests\"><a class=\"header\" href=\"#integration-tests\">Integration Tests</a></h3>\n<p>In Rust, integration tests are entirely external to your library. They use your\nlibrary in the same way any other code would, which means they can only call\nfunctions that are part of your library‚Äôs public API. Their purpose is to test\nwhether many parts of your library work together correctly. Units of code that\nwork correctly on their own could have problems when integrated, so test\ncoverage of the integrated code is important as well. To create integration\ntests, you first need a <em>tests</em> directory.</p>\n<h4 id=\"the-tests-directory\"><a class=\"header\" href=\"#the-tests-directory\">The <em>tests</em> Directory</a></h4>\n<p>We create a <em>tests</em> directory at the top level of our project directory, next\nto <em>src</em>. Cargo knows to look for integration test files in this directory. We\ncan then make as many test files as we want, and Cargo will compile each of the\nfiles as an individual crate.</p>\n<p>Let‚Äôs create an integration test. With the code in Listing 11-12 still in the\n<em>src/lib.rs</em> file, make a <em>tests</em> directory, and create a new file named\n<em>tests/integration_test.rs</em>. Your directory structure should look like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">adder\n‚îú‚îÄ‚îÄ Cargo.lock\n‚îú‚îÄ‚îÄ Cargo.toml\n‚îú‚îÄ‚îÄ src\n‚îÇ&nbsp;&nbsp; ‚îî‚îÄ‚îÄ lib.rs\n‚îî‚îÄ‚îÄ tests\n    ‚îî‚îÄ‚îÄ integration_test.rs\n</code></pre>\n<p>Enter the code in Listing 11-13 into the <em>tests/integration_test.rs</em> file:</p>\n<p><span class=\"filename\">Filename: tests/integration_test.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">use</span> adder::add_two;\n\n<span class=\"hljs-meta\">#[test]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">it_adds_two</span></span>() {\n    <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">4</span>, add_two(<span class=\"hljs-number\">2</span>));\n}</code></pre>\n<p><span class=\"caption\">Listing 11-13: An integration test of a function in the\n<code class=\"hljs\">adder</code> crate</span></p>\n<p>Each file in the <code class=\"hljs\">tests</code> directory is a separate crate, so we need to bring our\nlibrary into each test crate‚Äôs scope. For that reason we add <code class=\"hljs\">use adder::add_two</code> at the top of the code, which we didn‚Äôt need in the unit\ntests.</p>\n<p>We don‚Äôt need to annotate any code in <em>tests/integration_test.rs</em> with\n<code class=\"hljs\">#[cfg(test)]</code>. Cargo treats the <code class=\"hljs\">tests</code> directory specially and compiles files\nin this directory only when we run <code class=\"hljs\">cargo test</code>. Run <code class=\"hljs\">cargo test</code> now:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo <span class=\"hljs-built_in\">test</span></span>\n   Compiling adder v0.1.0 (file:///projects/adder)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 1.31s\n     Running unittests src/lib.rs (target/debug/deps/adder-1082c4b063a8fbe6)\n\nrunning 1 test\ntest tests::internal ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n     Running tests/integration_test.rs (target/debug/deps/integration_test-1082c4b063a8fbe6)\n\nrunning 1 test\ntest it_adds_two ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n   Doc-tests adder\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n</code></pre>\n<p>The three sections of output include the unit tests, the integration test, and\nthe doc tests. Note that if any test in a section fails, the following sections\nwill not be run. For example, if a unit test fails, there won‚Äôt be any output\nfor integration and doc tests because those tests will only be run if all unit\ntests are passing.</p>\n<p>The first section for the unit tests is the same as we‚Äôve been seeing: one line\nfor each unit test (one named <code class=\"hljs\">internal</code> that we added in Listing 11-12) and\nthen a summary line for the unit tests.</p>\n<p>The integration tests section starts with the line <code class=\"hljs\">Running tests/integration_test.rs</code>. Next, there is a line for each test function in\nthat integration test and a summary line for the results of the integration\ntest just before the <code class=\"hljs\">Doc-tests adder</code> section starts.</p>\n<p>Each integration test file has its own section, so if we add more files in the\n<em>tests</em> directory, there will be more integration test sections.</p>\n<p>We can still run a particular integration test function by specifying the test\nfunction‚Äôs name as an argument to <code class=\"hljs\">cargo test</code>. To run all the tests in a\nparticular integration test file, use the <code class=\"hljs\">--test</code> argument of <code class=\"hljs\">cargo test</code>\nfollowed by the name of the file:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo <span class=\"hljs-built_in\">test</span> --<span class=\"hljs-built_in\">test</span> integration_test</span>\n   Compiling adder v0.1.0 (file:///projects/adder)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.64s\n     Running tests/integration_test.rs (target/debug/deps/integration_test-82e7799c1bc62298)\n\nrunning 1 test\ntest it_adds_two ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n</code></pre>\n<p>This command runs only the tests in the <em>tests/integration_test.rs</em> file.</p>\n<h4 id=\"submodules-in-integration-tests\"><a class=\"header\" href=\"#submodules-in-integration-tests\">Submodules in Integration Tests</a></h4>\n<p>As you add more integration tests, you might want to make more files in the\n<em>tests</em> directory to help organize them; for example, you can group the test\nfunctions by the functionality they‚Äôre testing. As mentioned earlier, each file\nin the <em>tests</em> directory is compiled as its own separate crate, which is useful\nfor creating separate scopes to more closely imitate the way end users will be\nusing your crate. However, this means files in the <em>tests</em> directory don‚Äôt\nshare the same behavior as files in <em>src</em> do, as you learned in Chapter 7\nregarding how to separate code into modules and files.</p>\n<p>The different behavior of <em>tests</em> directory files is most noticeable when you\nhave a set of helper functions to use in multiple integration test files and\nyou try to follow the steps in the <a href=\"ch07-05-separating-modules-into-different-files.html\">‚ÄúSeparating Modules into Different\nFiles‚Äù</a><!-- ignore --> section of Chapter 7 to\nextract them into a common module. For example, if we create <em>tests/common.rs</em>\nand place a function named <code class=\"hljs\">setup</code> in it, we can add some code to <code class=\"hljs\">setup</code> that\nwe want to call from multiple test functions in multiple test files:</p>\n<p><span class=\"filename\">Filename: tests/common.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust noplayground hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">setup</span></span>() {\n    <span class=\"hljs-comment\">// setup code specific to your library's tests would go here</span>\n}</code></pre>\n<p>When we run the tests again, we‚Äôll see a new section in the test output for the\n<em>common.rs</em> file, even though this file doesn‚Äôt contain any test functions nor\ndid we call the <code class=\"hljs\">setup</code> function from anywhere:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo <span class=\"hljs-built_in\">test</span></span>\n   Compiling adder v0.1.0 (file:///projects/adder)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.89s\n     Running unittests src/lib.rs (target/debug/deps/adder-92948b65e88960b4)\n\nrunning 1 test\ntest tests::internal ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n     Running tests/common.rs (target/debug/deps/common-92948b65e88960b4)\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n     Running tests/integration_test.rs (target/debug/deps/integration_test-92948b65e88960b4)\n\nrunning 1 test\ntest it_adds_two ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n   Doc-tests adder\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n</code></pre>\n<p>Having <code class=\"hljs\">common</code> appear in the test results with <code class=\"hljs\">running 0 tests</code> displayed for\nit is not what we wanted. We just wanted to share some code with the other\nintegration test files.</p>\n<p>To avoid having <code class=\"hljs\">common</code> appear in the test output, instead of creating\n<em>tests/common.rs</em>, we‚Äôll create <em>tests/common/mod.rs</em>. The project directory\nnow looks like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">‚îú‚îÄ‚îÄ Cargo.lock\n‚îú‚îÄ‚îÄ Cargo.toml\n‚îú‚îÄ‚îÄ src\n‚îÇ&nbsp;&nbsp; ‚îî‚îÄ‚îÄ lib.rs\n‚îî‚îÄ‚îÄ tests\n    ‚îú‚îÄ‚îÄ common\n    ‚îÇ&nbsp;&nbsp; ‚îî‚îÄ‚îÄ mod.rs\n    ‚îî‚îÄ‚îÄ integration_test.rs\n</code></pre>\n<p>This is the older naming convention that Rust also understands that we\nmentioned in the <a href=\"ch07-05-separating-modules-into-different-files.html#alternate-file-paths\">‚ÄúAlternate File Paths‚Äù</a><!-- ignore --> section of\nChapter 7. Naming the file this way tells Rust not to treat the <code class=\"hljs\">common</code> module\nas an integration test file. When we move the <code class=\"hljs\">setup</code> function code into\n<em>tests/common/mod.rs</em> and delete the <em>tests/common.rs</em> file, the section in the\ntest output will no longer appear. Files in subdirectories of the <em>tests</em>\ndirectory don‚Äôt get compiled as separate crates or have sections in the test\noutput.</p>\n<p>After we‚Äôve created <em>tests/common/mod.rs</em>, we can use it from any of the\nintegration test files as a module. Here‚Äôs an example of calling the <code class=\"hljs\">setup</code>\nfunction from the <code class=\"hljs\">it_adds_two</code> test in <em>tests/integration_test.rs</em>:</p>\n<p><span class=\"filename\">Filename: tests/integration_test.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">use</span> adder;\n\n<span class=\"hljs-keyword\">mod</span> common;\n\n<span class=\"hljs-meta\">#[test]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">it_adds_two</span></span>() {\n    common::setup();\n    <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">4</span>, adder::add_two(<span class=\"hljs-number\">2</span>));\n}</code></pre>\n<p>Note that the <code class=\"hljs\">mod common;</code> declaration is the same as the module declaration\nwe demonstrated in Listing 7-21. Then in the test function, we can call the\n<code class=\"hljs\">common::setup()</code> function.</p>\n<h4 id=\"integration-tests-for-binary-crates\"><a class=\"header\" href=\"#integration-tests-for-binary-crates\">Integration Tests for Binary Crates</a></h4>\n<p>If our project is a binary crate that only contains a <em>src/main.rs</em> file and\ndoesn‚Äôt have a <em>src/lib.rs</em> file, we can‚Äôt create integration tests in the\n<em>tests</em> directory and bring functions defined in the <em>src/main.rs</em> file into\nscope with a <code class=\"hljs\">use</code> statement. Only library crates expose functions that other\ncrates can use; binary crates are meant to be run on their own.</p>\n<p>This is one of the reasons Rust projects that provide a binary have a\nstraightforward <em>src/main.rs</em> file that calls logic that lives in the\n<em>src/lib.rs</em> file. Using that structure, integration tests <em>can</em> test the\nlibrary crate with <code class=\"hljs\">use</code> to make the important functionality available.\nIf the important functionality works, the small amount of code in the\n<em>src/main.rs</em> file will work as well, and that small amount of code doesn‚Äôt\nneed to be tested.</p>\n<h2 id=\"summary-10\"><a class=\"header\" href=\"#summary-10\">Summary</a></h2>\n<p>Rust‚Äôs testing features provide a way to specify how code should function to\nensure it continues to work as you expect, even as you make changes. Unit tests\nexercise different parts of a library separately and can test private\nimplementation details. Integration tests check that many parts of the library\nwork together correctly, and they use the library‚Äôs public API to test the code\nin the same way external code will use it. Even though Rust‚Äôs type system and\nownership rules help prevent some kinds of bugs, tests are still important to\nreduce logic bugs having to do with how your code is expected to behave.</p>\n<p>Let‚Äôs combine the knowledge you learned in this chapter and in previous\nchapters to work on a project!</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"an-io-project-building-a-command-line-program\"><a class=\"header\" href=\"#an-io-project-building-a-command-line-program\">An I/O Project: Building a Command Line Program</a></h1>\n<p>This chapter is a recap of the many skills you‚Äôve learned so far and an\nexploration of a few more standard library features. We‚Äôll build a command line\ntool that interacts with file and command line input/output to practice some of\nthe Rust concepts you now have under your belt.</p>\n<p>Rust‚Äôs speed, safety, single binary output, and cross-platform support make it\nan ideal language for creating command line tools, so for our project, we‚Äôll\nmake our own version of the classic command line search tool <code class=\"hljs\">grep</code>\n(<strong>g</strong>lobally search a <strong>r</strong>egular <strong>e</strong>xpression and <strong>p</strong>rint). In the\nsimplest use case, <code class=\"hljs\">grep</code> searches a specified file for a specified string. To\ndo so, <code class=\"hljs\">grep</code> takes as its arguments a file path and a string. Then it reads\nthe file, finds lines in that file that contain the string argument, and prints\nthose lines.</p>\n<p>Along the way, we‚Äôll show how to make our command line tool use the terminal\nfeatures that many other command line tools use. We‚Äôll read the value of an\nenvironment variable to allow the user to configure the behavior of our tool.\nWe‚Äôll also print error messages to the standard error console stream (<code class=\"hljs\">stderr</code>)\ninstead of standard output (<code class=\"hljs\">stdout</code>), so, for example, the user can redirect\nsuccessful output to a file while still seeing error messages onscreen.</p>\n<p>One Rust community member, Andrew Gallant, has already created a fully\nfeatured, very fast version of <code class=\"hljs\">grep</code>, called <code class=\"hljs\">ripgrep</code>. By comparison, our\nversion will be fairly simple, but this chapter will give you some of the\nbackground knowledge you need to understand a real-world project such as\n<code class=\"hljs\">ripgrep</code>.</p>\n<p>Our <code class=\"hljs\">grep</code> project will combine a number of concepts you‚Äôve learned so far:</p>\n<ul>\n<li>Organizing code (using what you learned about modules in <a href=\"ch07-00-managing-growing-projects-with-packages-crates-and-modules.html\">Chapter 7</a><!--\n      ignore -->)</li>\n<li>Using vectors and strings (collections, <a href=\"ch08-00-common-collections.html\">Chapter 8</a><!-- ignore -->)</li>\n<li>Handling errors (<a href=\"ch09-00-error-handling.html\">Chapter 9</a><!-- ignore -->)</li>\n<li>Using traits and lifetimes where appropriate (<a href=\"ch10-00-generics.html\">Chapter 10</a><!-- ignore\n      -->)</li>\n<li>Writing tests (<a href=\"ch11-00-testing.html\">Chapter 11</a><!-- ignore -->)</li>\n</ul>\n<p>We‚Äôll also briefly introduce closures, iterators, and trait objects, which\nChapters <a href=\"ch13-00-functional-features.html\">13</a><!-- ignore --> and <a href=\"ch17-00-oop.html\">17</a><!-- ignore --> will cover in\ndetail.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"accepting-command-line-arguments\"><a class=\"header\" href=\"#accepting-command-line-arguments\">Accepting Command Line Arguments</a></h2>\n<p>Let‚Äôs create a new project with, as always, <code class=\"hljs\">cargo new</code>. We‚Äôll call our project\n<code class=\"hljs\">minigrep</code> to distinguish it from the <code class=\"hljs\">grep</code> tool that you might already have\non your system.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo new minigrep</span>\n     Created binary (application) `minigrep` project\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> <span class=\"hljs-built_in\">cd</span> minigrep</span>\n</code></pre>\n<p>The first task is to make <code class=\"hljs\">minigrep</code> accept its two command line arguments: the\nfile path and a string to search for. That is, we want to be able to run our\nprogram with <code class=\"hljs\">cargo run</code>, two hyphens to indicate the following arguments are\nfor our program rather than for <code class=\"hljs\">cargo</code>, a string to search for, and a path to\na file to search in, like so:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run -- searchstring example-filename.txt</span>\n</code></pre>\n<p>Right now, the program generated by <code class=\"hljs\">cargo new</code> cannot process arguments we\ngive it. Some existing libraries on <a href=\"https://crates.io/\">crates.io</a> can help\nwith writing a program that accepts command line arguments, but because you‚Äôre\njust learning this concept, let‚Äôs implement this capability ourselves.</p>\n<h3 id=\"reading-the-argument-values\"><a class=\"header\" href=\"#reading-the-argument-values\">Reading the Argument Values</a></h3>\n<p>To enable <code class=\"hljs\">minigrep</code> to read the values of command line arguments we pass to\nit, we‚Äôll need the <code class=\"hljs\">std::env::args</code> function provided in Rust‚Äôs standard\nlibrary. This function returns an iterator of the command line arguments passed\nto <code class=\"hljs\">minigrep</code>. We‚Äôll cover iterators fully in <a href=\"ch13-00-functional-features.html\">Chapter 13</a><!-- ignore\n-->. For now, you only need to know two details about iterators: iterators\nproduce a series of values, and we can call the <code class=\"hljs\">collect</code> method on an iterator\nto turn it into a collection, such as a vector, that contains all the elements\nthe iterator produces.</p>\n<p>The code in Listing 12-1 allows your <code class=\"hljs\">minigrep</code> program to read any command\nline arguments passed to it and then collect the values into a vector.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-keyword\">use</span> std::env;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> args: <span class=\"hljs-built_in\">Vec</span>&lt;<span class=\"hljs-built_in\">String</span>&gt; = env::args().collect();\n    dbg!(args);\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 12-1: Collecting the command line arguments into\na vector and printing them</span></p>\n<p>First, we bring the <code class=\"hljs\">std::env</code> module into scope with a <code class=\"hljs\">use</code> statement so we\ncan use its <code class=\"hljs\">args</code> function. Notice that the <code class=\"hljs\">std::env::args</code> function is\nnested in two levels of modules. As we discussed in <a href=\"ch07-04-bringing-paths-into-scope-with-the-use-keyword.html#creating-idiomatic-use-paths\">Chapter\n7</a><!-- ignore -->, in cases where the desired function is\nnested in more than one module, we‚Äôve chosen to bring the parent module into\nscope rather than the function. By doing so, we can easily use other functions\nfrom <code class=\"hljs\">std::env</code>. It‚Äôs also less ambiguous than adding <code class=\"hljs\">use std::env::args</code> and\nthen calling the function with just <code class=\"hljs\">args</code>, because <code class=\"hljs\">args</code> might easily be\nmistaken for a function that‚Äôs defined in the current module.</p>\n<section class=\"note\" aria-role=\"note\">\n<h3 id=\"the-args-function-and-invalid-unicode\"><a class=\"header\" href=\"#the-args-function-and-invalid-unicode\">The <code>args</code> Function and Invalid Unicode</a></h3>\n<p>Note that <code class=\"hljs\">std::env::args</code> will panic if any argument contains invalid\nUnicode. If your program needs to accept arguments containing invalid\nUnicode, use <code class=\"hljs\">std::env::args_os</code> instead. That function returns an iterator\nthat produces <code class=\"hljs\">OsString</code> values instead of <code class=\"hljs\">String</code> values. We‚Äôve chosen to\nuse <code class=\"hljs\">std::env::args</code> here for simplicity, because <code class=\"hljs\">OsString</code> values differ\nper platform and are more complex to work with than <code class=\"hljs\">String</code> values.</p>\n</section>\n<p>On the first line of <code class=\"hljs\">main</code>, we call <code class=\"hljs\">env::args</code>, and we immediately use\n<code class=\"hljs\">collect</code> to turn the iterator into a vector containing all the values produced\nby the iterator. We can use the <code class=\"hljs\">collect</code> function to create many kinds of\ncollections, so we explicitly annotate the type of <code class=\"hljs\">args</code> to specify that we\nwant a vector of strings. Although we very rarely need to annotate types in\nRust, <code class=\"hljs\">collect</code> is one function you do often need to annotate because Rust\nisn‚Äôt able to infer the kind of collection you want.</p>\n<p>Finally, we print the vector using the debug macro. Let‚Äôs try running the code\nfirst with no arguments and then with two arguments:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling minigrep v0.1.0 (file:///projects/minigrep)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.61s\n     Running `target/debug/minigrep`\n[src/main.rs:5:5] args = [\n    \"target/debug/minigrep\",\n]\n</code></pre>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run -- needle haystack</span>\n   Compiling minigrep v0.1.0 (file:///projects/minigrep)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 1.57s\n     Running `target/debug/minigrep needle haystack`\n[src/main.rs:5:5] args = [\n    \"target/debug/minigrep\",\n    \"needle\",\n    \"haystack\",\n]\n</code></pre>\n<p>Notice that the first value in the vector is <code class=\"hljs\">\"target/debug/minigrep\"</code>, which\nis the name of our binary. This matches the behavior of the arguments list in\nC, letting programs use the name by which they were invoked in their execution.\nIt‚Äôs often convenient to have access to the program name in case you want to\nprint it in messages or change behavior of the program based on what command\nline alias was used to invoke the program. But for the purposes of this\nchapter, we‚Äôll ignore it and save only the two arguments we need.</p>\n<h3 id=\"saving-the-argument-values-in-variables\"><a class=\"header\" href=\"#saving-the-argument-values-in-variables\">Saving the Argument Values in Variables</a></h3>\n<p>The program is currently able to access the values specified as command line\narguments. Now we need to save the values of the two arguments in variables so\nwe can use the values throughout the rest of the program. We do that in Listing\n12-2.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust should_panic noplayground hljs\"><span class=\"hljs-keyword\">use</span> std::env;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> args: <span class=\"hljs-built_in\">Vec</span>&lt;<span class=\"hljs-built_in\">String</span>&gt; = env::args().collect();\n\n    <span class=\"hljs-keyword\">let</span> query = &amp;args[<span class=\"hljs-number\">1</span>];\n    <span class=\"hljs-keyword\">let</span> file_path = &amp;args[<span class=\"hljs-number\">2</span>];\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Searching for {query}\"</span>);\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"In file {file_path}\"</span>);\n}</code></pre>\n<p><span class=\"caption\">Listing 12-2: Creating variables to hold the query\nargument and file path argument</span></p>\n<p>As we saw when we printed the vector, the program‚Äôs name takes up the first\nvalue in the vector at <code class=\"hljs\">args[0]</code>, so we‚Äôre starting arguments at index <code class=\"hljs\">1</code>. The\nfirst argument <code class=\"hljs\">minigrep</code> takes is the string we‚Äôre searching for, so we put a\nreference to the first argument in the variable <code class=\"hljs\">query</code>. The second argument\nwill be the file path, so we put a reference to the second argument in the\nvariable <code class=\"hljs\">file_path</code>.</p>\n<p>We temporarily print the values of these variables to prove that the code is\nworking as we intend. Let‚Äôs run this program again with the arguments <code class=\"hljs\">test</code>\nand <code class=\"hljs\">sample.txt</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run -- <span class=\"hljs-built_in\">test</span> sample.txt</span>\n   Compiling minigrep v0.1.0 (file:///projects/minigrep)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.0s\n     Running `target/debug/minigrep test sample.txt`\nSearching for test\nIn file sample.txt\n</code></pre>\n<p>Great, the program is working! The values of the arguments we need are being\nsaved into the right variables. Later we‚Äôll add some error handling to deal\nwith certain potential erroneous situations, such as when the user provides no\narguments; for now, we‚Äôll ignore that situation and work on adding file-reading\ncapabilities instead.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"reading-a-file\"><a class=\"header\" href=\"#reading-a-file\">Reading a File</a></h2>\n<p>Now we‚Äôll add functionality to read the file specified in the <code class=\"hljs\">file_path</code>\nargument. First, we need a sample file to test it with: we‚Äôll use a file with a\nsmall amount of text over multiple lines with some repeated words. Listing 12-3\nhas an Emily Dickinson poem that will work well! Create a file called\n<em>poem.txt</em> at the root level of your project, and enter the poem ‚ÄúI‚Äôm Nobody!\nWho are you?‚Äù</p>\n<p><span class=\"filename\">Filename: poem.txt</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">I'm nobody! Who are you?\nAre you nobody, too?\nThen there's a pair of us - don't tell!\nThey'd banish us, you know.\n\nHow dreary to be somebody!\nHow public, like a frog\nTo tell your name the livelong day\nTo an admiring bog!\n</code></pre>\n<p><span class=\"caption\">Listing 12-3: A poem by Emily Dickinson makes a good test\ncase</span></p>\n<p>With the text in place, edit <em>src/main.rs</em> and add code to read the file, as\nshown in Listing 12-4.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust should_panic noplayground hljs hide-boring\"><span class=\"hljs-keyword\">use</span> std::env;\n<span class=\"hljs-keyword\">use</span> std::fs;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">    <span class=\"hljs-keyword\">let</span> args: <span class=\"hljs-built_in\">Vec</span>&lt;<span class=\"hljs-built_in\">String</span>&gt; = env::args().collect();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> query = &amp;args[<span class=\"hljs-number\">1</span>];\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> file_path = &amp;args[<span class=\"hljs-number\">2</span>];\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Searching for {query}\"</span>);\n</span>    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"In file {file_path}\"</span>);\n\n    <span class=\"hljs-keyword\">let</span> contents = fs::read_to_string(file_path)\n        .expect(<span class=\"hljs-string\">\"Should have been able to read the file\"</span>);\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"With text:\\n{contents}\"</span>);\n}</code></pre>\n<p><span class=\"caption\">Listing 12-4: Reading the contents of the file specified\nby the second argument</span></p>\n<p>First, we bring in a relevant part of the standard library with a <code class=\"hljs\">use</code>\nstatement: we need <code class=\"hljs\">std::fs</code> to handle files.</p>\n<p>In <code class=\"hljs\">main</code>, the new statement <code class=\"hljs\">fs::read_to_string</code> takes the <code class=\"hljs\">file_path</code>, opens\nthat file, and returns a <code class=\"hljs\">std::io::Result&lt;String&gt;</code> of the file‚Äôs contents.</p>\n<p>After that, we again add a temporary <code class=\"hljs\">println!</code> statement that prints the value\nof <code class=\"hljs\">contents</code> after the file is read, so we can check that the program is\nworking so far.</p>\n<p>Let‚Äôs run this code with any string as the first command line argument (because\nwe haven‚Äôt implemented the searching part yet) and the <em>poem.txt</em> file as the\nsecond argument:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run -- the poem.txt</span>\n   Compiling minigrep v0.1.0 (file:///projects/minigrep)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.0s\n     Running `target/debug/minigrep the poem.txt`\nSearching for the\nIn file poem.txt\nWith text:\nI'm nobody! Who are you?\nAre you nobody, too?\nThen there's a pair of us - don't tell!\nThey'd banish us, you know.\n\nHow dreary to be somebody!\nHow public, like a frog\nTo tell your name the livelong day\nTo an admiring bog!\n\n</code></pre>\n<p>Great! The code read and then printed the contents of the file. But the code\nhas a few flaws. At the moment, the <code class=\"hljs\">main</code> function has multiple\nresponsibilities: generally, functions are clearer and easier to maintain if\neach function is responsible for only one idea. The other problem is that we‚Äôre\nnot handling errors as well as we could. The program is still small, so these\nflaws aren‚Äôt a big problem, but as the program grows, it will be harder to fix\nthem cleanly. It‚Äôs good practice to begin refactoring early on when developing\na program, because it‚Äôs much easier to refactor smaller amounts of code. We‚Äôll\ndo that next.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"refactoring-to-improve-modularity-and-error-handling\"><a class=\"header\" href=\"#refactoring-to-improve-modularity-and-error-handling\">Refactoring to Improve Modularity and Error Handling</a></h2>\n<p>To improve our program, we‚Äôll fix four problems that have to do with the\nprogram‚Äôs structure and how it‚Äôs handling potential errors. First, our <code class=\"hljs\">main</code>\nfunction now performs two tasks: it parses arguments and reads files. As our\nprogram grows, the number of separate tasks the <code class=\"hljs\">main</code> function handles will\nincrease. As a function gains responsibilities, it becomes more difficult to\nreason about, harder to test, and harder to change without breaking one of its\nparts. It‚Äôs best to separate functionality so each function is responsible for\none task.</p>\n<p>This issue also ties into the second problem: although <code class=\"hljs\">query</code> and <code class=\"hljs\">file_path</code>\nare configuration variables to our program, variables like <code class=\"hljs\">contents</code> are used\nto perform the program‚Äôs logic. The longer <code class=\"hljs\">main</code> becomes, the more variables\nwe‚Äôll need to bring into scope; the more variables we have in scope, the harder\nit will be to keep track of the purpose of each. It‚Äôs best to group the\nconfiguration variables into one structure to make their purpose clear.</p>\n<p>The third problem is that we‚Äôve used <code class=\"hljs\">expect</code> to print an error message when\nreading the file fails, but the error message just prints <code class=\"hljs\">Should have been able to read the file</code>. Reading a file can fail in a number of ways: for\nexample, the file could be missing, or we might not have permission to open it.\nRight now, regardless of the situation, we‚Äôd print the same error message for\neverything, which wouldn‚Äôt give the user any information!</p>\n<p>Fourth, we use <code class=\"hljs\">expect</code> to handle an error, and if the user runs our program\nwithout specifying enough arguments, they‚Äôll get an <code class=\"hljs\">index out of bounds</code> error\nfrom Rust that doesn‚Äôt clearly explain the problem. It would be best if all the\nerror-handling code were in one place so future maintainers had only one place\nto consult the code if the error-handling logic needed to change. Having all the\nerror-handling code in one place will also ensure that we‚Äôre printing messages\nthat will be meaningful to our end users.</p>\n<p>Let‚Äôs address these four problems by refactoring our project.</p>\n<h3 id=\"separation-of-concerns-for-binary-projects\"><a class=\"header\" href=\"#separation-of-concerns-for-binary-projects\">Separation of Concerns for Binary Projects</a></h3>\n<p>The organizational problem of allocating responsibility for multiple tasks to\nthe <code class=\"hljs\">main</code> function is common to many binary projects. As a result, the Rust\ncommunity has developed guidelines for splitting the separate concerns of a\nbinary program when <code class=\"hljs\">main</code> starts getting large. This process has the following\nsteps:</p>\n<ul>\n<li>Split your program into a <em>main.rs</em> and a <em>lib.rs</em> and move your program‚Äôs\nlogic to <em>lib.rs</em>.</li>\n<li>As long as your command line parsing logic is small, it can remain in\n<em>main.rs</em>.</li>\n<li>When the command line parsing logic starts getting complicated, extract it\nfrom <em>main.rs</em> and move it to <em>lib.rs</em>.</li>\n</ul>\n<p>The responsibilities that remain in the <code class=\"hljs\">main</code> function after this process\nshould be limited to the following:</p>\n<ul>\n<li>Calling the command line parsing logic with the argument values</li>\n<li>Setting up any other configuration</li>\n<li>Calling a <code class=\"hljs\">run</code> function in <em>lib.rs</em></li>\n<li>Handling the error if <code class=\"hljs\">run</code> returns an error</li>\n</ul>\n<p>This pattern is about separating concerns: <em>main.rs</em> handles running the\nprogram, and <em>lib.rs</em> handles all the logic of the task at hand. Because you\ncan‚Äôt test the <code class=\"hljs\">main</code> function directly, this structure lets you test all of\nyour program‚Äôs logic by moving it into functions in <em>lib.rs</em>. The code that\nremains in <em>main.rs</em> will be small enough to verify its correctness by reading\nit. Let‚Äôs rework our program by following this process.</p>\n<h4 id=\"extracting-the-argument-parser\"><a class=\"header\" href=\"#extracting-the-argument-parser\">Extracting the Argument Parser</a></h4>\n<p>We‚Äôll extract the functionality for parsing arguments into a function that\n<code class=\"hljs\">main</code> will call to prepare for moving the command line parsing logic to\n<em>src/lib.rs</em>. Listing 12-5 shows the new start of <code class=\"hljs\">main</code> that calls a new\nfunction <code class=\"hljs\">parse_config</code>, which we‚Äôll define in <em>src/main.rs</em> for the moment.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::env;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::fs;\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> args: <span class=\"hljs-built_in\">Vec</span>&lt;<span class=\"hljs-built_in\">String</span>&gt; = env::args().collect();\n\n    <span class=\"hljs-keyword\">let</span> (query, file_path) = parse_config(&amp;args);\n\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Searching for {query}\"</span>);\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"In file {file_path}\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> contents = fs::read_to_string(file_path)\n</span><span class=\"boring\">        .expect(<span class=\"hljs-string\">\"Should have been able to read the file\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"With text:\\n{contents}\"</span>);\n</span>}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">parse_config</span></span>(args: &amp;[<span class=\"hljs-built_in\">String</span>]) -&gt; (&amp;<span class=\"hljs-built_in\">str</span>, &amp;<span class=\"hljs-built_in\">str</span>) {\n    <span class=\"hljs-keyword\">let</span> query = &amp;args[<span class=\"hljs-number\">1</span>];\n    <span class=\"hljs-keyword\">let</span> file_path = &amp;args[<span class=\"hljs-number\">2</span>];\n\n    (query, file_path)\n}</code></pre>\n<p><span class=\"caption\">Listing 12-5: Extracting a <code class=\"hljs\">parse_config</code> function from\n<code class=\"hljs\">main</code></span></p>\n<p>We‚Äôre still collecting the command line arguments into a vector, but instead of\nassigning the argument value at index 1 to the variable <code class=\"hljs\">query</code> and the\nargument value at index 2 to the variable <code class=\"hljs\">file_path</code> within the <code class=\"hljs\">main</code>\nfunction, we pass the whole vector to the <code class=\"hljs\">parse_config</code> function. The\n<code class=\"hljs\">parse_config</code> function then holds the logic that determines which argument\ngoes in which variable and passes the values back to <code class=\"hljs\">main</code>. We still create\nthe <code class=\"hljs\">query</code> and <code class=\"hljs\">file_path</code> variables in <code class=\"hljs\">main</code>, but <code class=\"hljs\">main</code> no longer has the\nresponsibility of determining how the command line arguments and variables\ncorrespond.</p>\n<p>This rework may seem like overkill for our small program, but we‚Äôre refactoring\nin small, incremental steps. After making this change, run the program again to\nverify that the argument parsing still works. It‚Äôs good to check your progress\noften, to help identify the cause of problems when they occur.</p>\n<h4 id=\"grouping-configuration-values\"><a class=\"header\" href=\"#grouping-configuration-values\">Grouping Configuration Values</a></h4>\n<p>We can take another small step to improve the <code class=\"hljs\">parse_config</code> function further.\nAt the moment, we‚Äôre returning a tuple, but then we immediately break that\ntuple into individual parts again. This is a sign that perhaps we don‚Äôt have\nthe right abstraction yet.</p>\n<p>Another indicator that shows there‚Äôs room for improvement is the <code class=\"hljs\">config</code> part\nof <code class=\"hljs\">parse_config</code>, which implies that the two values we return are related and\nare both part of one configuration value. We‚Äôre not currently conveying this\nmeaning in the structure of the data other than by grouping the two values into\na tuple; we‚Äôll instead put the two values into one struct and give each of the\nstruct fields a meaningful name. Doing so will make it easier for future\nmaintainers of this code to understand how the different values relate to each\nother and what their purpose is.</p>\n<p>Listing 12-6 shows the improvements to the <code class=\"hljs\">parse_config</code> function.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust should_panic noplayground hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::env;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::fs;\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> args: <span class=\"hljs-built_in\">Vec</span>&lt;<span class=\"hljs-built_in\">String</span>&gt; = env::args().collect();\n\n    <span class=\"hljs-keyword\">let</span> config = parse_config(&amp;args);\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Searching for {}\"</span>, config.query);\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"In file {}\"</span>, config.file_path);\n\n    <span class=\"hljs-keyword\">let</span> contents = fs::read_to_string(config.file_path)\n        .expect(<span class=\"hljs-string\">\"Should have been able to read the file\"</span>);\n\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"With text:\\n{contents}\"</span>);\n</span>}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Config</span></span> {\n    query: <span class=\"hljs-built_in\">String</span>,\n    file_path: <span class=\"hljs-built_in\">String</span>,\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">parse_config</span></span>(args: &amp;[<span class=\"hljs-built_in\">String</span>]) -&gt; Config {\n    <span class=\"hljs-keyword\">let</span> query = args[<span class=\"hljs-number\">1</span>].clone();\n    <span class=\"hljs-keyword\">let</span> file_path = args[<span class=\"hljs-number\">2</span>].clone();\n\n    Config { query, file_path }\n}</code></pre>\n<p><span class=\"caption\">Listing 12-6: Refactoring <code class=\"hljs\">parse_config</code> to return an\ninstance of a <code class=\"hljs\">Config</code> struct</span></p>\n<p>We‚Äôve added a struct named <code class=\"hljs\">Config</code> defined to have fields named <code class=\"hljs\">query</code> and\n<code class=\"hljs\">file_path</code>. The signature of <code class=\"hljs\">parse_config</code> now indicates that it returns a\n<code class=\"hljs\">Config</code> value. In the body of <code class=\"hljs\">parse_config</code>, where we used to return\nstring slices that reference <code class=\"hljs\">String</code> values in <code class=\"hljs\">args</code>, we now define <code class=\"hljs\">Config</code>\nto contain owned <code class=\"hljs\">String</code> values. The <code class=\"hljs\">args</code> variable in <code class=\"hljs\">main</code> is the owner of\nthe argument values and is only letting the <code class=\"hljs\">parse_config</code> function borrow\nthem, which means we‚Äôd violate Rust‚Äôs borrowing rules if <code class=\"hljs\">Config</code> tried to take\nownership of the values in <code class=\"hljs\">args</code>.</p>\n<p>There are a number of ways we could manage the <code class=\"hljs\">String</code> data; the easiest,\nthough somewhat inefficient, route is to call the <code class=\"hljs\">clone</code> method on the values.\nThis will make a full copy of the data for the <code class=\"hljs\">Config</code> instance to own, which\ntakes more time and memory than storing a reference to the string data.\nHowever, cloning the data also makes our code very straightforward because we\ndon‚Äôt have to manage the lifetimes of the references; in this circumstance,\ngiving up a little performance to gain simplicity is a worthwhile trade-off.</p>\n<section class=\"note\" aria-role=\"note\">\n<h3 id=\"the-trade-offs-of-using-clone\"><a class=\"header\" href=\"#the-trade-offs-of-using-clone\">The Trade-Offs of Using <code>clone</code></a></h3>\n<p>There‚Äôs a tendency among many Rustaceans to avoid using <code class=\"hljs\">clone</code> to fix\nownership problems because of its runtime cost. In\n<a href=\"ch13-00-functional-features.html\">Chapter 13</a><!-- ignore -->, you‚Äôll learn how to use more efficient\nmethods in this type of situation. But for now, it‚Äôs okay to copy a few\nstrings to continue making progress because you‚Äôll make these copies only\nonce and your file path and query string are very small. It‚Äôs better to have\na working program that‚Äôs a bit inefficient than to try to hyperoptimize code\non your first pass. As you become more experienced with Rust, it‚Äôll be\neasier to start with the most efficient solution, but for now, it‚Äôs\nperfectly acceptable to call <code class=\"hljs\">clone</code>.</p>\n</section>\n<p>We‚Äôve updated <code class=\"hljs\">main</code> so it places the instance of <code class=\"hljs\">Config</code> returned by\n<code class=\"hljs\">parse_config</code> into a variable named <code class=\"hljs\">config</code>, and we updated the code that\npreviously used the separate <code class=\"hljs\">query</code> and <code class=\"hljs\">file_path</code> variables so it now uses\nthe fields on the <code class=\"hljs\">Config</code> struct instead.</p>\n<p>Now our code more clearly conveys that <code class=\"hljs\">query</code> and <code class=\"hljs\">file_path</code> are related and\nthat their purpose is to configure how the program will work. Any code that\nuses these values knows to find them in the <code class=\"hljs\">config</code> instance in the fields\nnamed for their purpose.</p>\n<h4 id=\"creating-a-constructor-for-config\"><a class=\"header\" href=\"#creating-a-constructor-for-config\">Creating a Constructor for <code>Config</code></a></h4>\n<p>So far, we‚Äôve extracted the logic responsible for parsing the command line\narguments from <code class=\"hljs\">main</code> and placed it in the <code class=\"hljs\">parse_config</code> function. Doing so\nhelped us to see that the <code class=\"hljs\">query</code> and <code class=\"hljs\">file_path</code> values were related and that\nrelationship should be conveyed in our code. We then added a <code class=\"hljs\">Config</code> struct to\nname the related purpose of <code class=\"hljs\">query</code> and <code class=\"hljs\">file_path</code> and to be able to return the\nvalues‚Äô names as struct field names from the <code class=\"hljs\">parse_config</code> function.</p>\n<p>So now that the purpose of the <code class=\"hljs\">parse_config</code> function is to create a <code class=\"hljs\">Config</code>\ninstance, we can change <code class=\"hljs\">parse_config</code> from a plain function to a function\nnamed <code class=\"hljs\">new</code> that is associated with the <code class=\"hljs\">Config</code> struct. Making this change\nwill make the code more idiomatic. We can create instances of types in the\nstandard library, such as <code class=\"hljs\">String</code>, by calling <code class=\"hljs\">String::new</code>. Similarly, by\nchanging <code class=\"hljs\">parse_config</code> into a <code class=\"hljs\">new</code> function associated with <code class=\"hljs\">Config</code>, we‚Äôll\nbe able to create instances of <code class=\"hljs\">Config</code> by calling <code class=\"hljs\">Config::new</code>. Listing 12-7\nshows the changes we need to make.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust should_panic noplayground hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::env;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::fs;\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> args: <span class=\"hljs-built_in\">Vec</span>&lt;<span class=\"hljs-built_in\">String</span>&gt; = env::args().collect();\n\n    <span class=\"hljs-keyword\">let</span> config = Config::new(&amp;args);\n<span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Searching for {}\"</span>, config.query);\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"In file {}\"</span>, config.file_path);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> contents = fs::read_to_string(config.file_path)\n</span><span class=\"boring\">        .expect(<span class=\"hljs-string\">\"Should have been able to read the file\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"With text:\\n{contents}\"</span>);\n</span>\n    <span class=\"hljs-comment\">// --snip--</span>\n}\n\n<span class=\"hljs-comment\">// --snip--</span>\n\n<span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Config</span></span> {\n</span><span class=\"boring\">    query: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    file_path: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">impl</span> Config {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(args: &amp;[<span class=\"hljs-built_in\">String</span>]) -&gt; Config {\n        <span class=\"hljs-keyword\">let</span> query = args[<span class=\"hljs-number\">1</span>].clone();\n        <span class=\"hljs-keyword\">let</span> file_path = args[<span class=\"hljs-number\">2</span>].clone();\n\n        Config { query, file_path }\n    }\n}</code></pre>\n<p><span class=\"caption\">Listing 12-7: Changing <code class=\"hljs\">parse_config</code> into\n<code class=\"hljs\">Config::new</code></span></p>\n<p>We‚Äôve updated <code class=\"hljs\">main</code> where we were calling <code class=\"hljs\">parse_config</code> to instead call\n<code class=\"hljs\">Config::new</code>. We‚Äôve changed the name of <code class=\"hljs\">parse_config</code> to <code class=\"hljs\">new</code> and moved it\nwithin an <code class=\"hljs\">impl</code> block, which associates the <code class=\"hljs\">new</code> function with <code class=\"hljs\">Config</code>. Try\ncompiling this code again to make sure it works.</p>\n<h3 id=\"fixing-the-error-handling\"><a class=\"header\" href=\"#fixing-the-error-handling\">Fixing the Error Handling</a></h3>\n<p>Now we‚Äôll work on fixing our error handling. Recall that attempting to access\nthe values in the <code class=\"hljs\">args</code> vector at index 1 or index 2 will cause the program to\npanic if the vector contains fewer than three items. Try running the program\nwithout any arguments; it will look like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling minigrep v0.1.0 (file:///projects/minigrep)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.0s\n     Running `target/debug/minigrep`\nthread 'main' panicked at src/main.rs:27:21:\nindex out of bounds: the len is 1 but the index is 1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre>\n<p>The line <code class=\"hljs\">index out of bounds: the len is 1 but the index is 1</code> is an error\nmessage intended for programmers. It won‚Äôt help our end users understand what\nthey should do instead. Let‚Äôs fix that now.</p>\n<h4 id=\"improving-the-error-message\"><a class=\"header\" href=\"#improving-the-error-message\">Improving the Error Message</a></h4>\n<p>In Listing 12-8, we add a check in the <code class=\"hljs\">new</code> function that will verify that the\nslice is long enough before accessing index 1 and 2. If the slice isn‚Äôt long\nenough, the program panics and displays a better error message.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::env;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::fs;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> args: <span class=\"hljs-built_in\">Vec</span>&lt;<span class=\"hljs-built_in\">String</span>&gt; = env::args().collect();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> config = Config::new(&amp;args);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Searching for {}\"</span>, config.query);\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"In file {}\"</span>, config.file_path);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> contents = fs::read_to_string(config.file_path)\n</span><span class=\"boring\">        .expect(<span class=\"hljs-string\">\"Should have been able to read the file\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"With text:\\n{contents}\"</span>);\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Config</span></span> {\n</span><span class=\"boring\">    query: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    file_path: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Config {\n</span>    <span class=\"hljs-comment\">// --snip--</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(args: &amp;[<span class=\"hljs-built_in\">String</span>]) -&gt; Config {\n        <span class=\"hljs-keyword\">if</span> args.len() &lt; <span class=\"hljs-number\">3</span> {\n            <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">\"not enough arguments\"</span>);\n        }\n        <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = args[<span class=\"hljs-number\">1</span>].clone();\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> file_path = args[<span class=\"hljs-number\">2</span>].clone();\n</span><span class=\"boring\">\n</span><span class=\"boring\">        Config { query, file_path }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre>\n<p><span class=\"caption\">Listing 12-8: Adding a check for the number of\narguments</span></p>\n<p>This code is similar to <a href=\"ch09-03-to-panic-or-not-to-panic.html#creating-custom-types-for-validation\">the <code class=\"hljs\">Guess::new</code> function we wrote in Listing\n9-13</a><!-- ignore -->, where we called <code class=\"hljs\">panic!</code> when the\n<code class=\"hljs\">value</code> argument was out of the range of valid values. Instead of checking for\na range of values here, we‚Äôre checking that the length of <code class=\"hljs\">args</code> is at least 3\nand the rest of the function can operate under the assumption that this\ncondition has been met. If <code class=\"hljs\">args</code> has fewer than three items, this condition\nwill be true, and we call the <code class=\"hljs\">panic!</code> macro to end the program immediately.</p>\n<p>With these extra few lines of code in <code class=\"hljs\">new</code>, let‚Äôs run the program without any\narguments again to see what the error looks like now:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling minigrep v0.1.0 (file:///projects/minigrep)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.0s\n     Running `target/debug/minigrep`\nthread 'main' panicked at src/main.rs:26:13:\nnot enough arguments\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre>\n<p>This output is better: we now have a reasonable error message. However, we also\nhave extraneous information we don‚Äôt want to give to our users. Perhaps using\nthe technique we used in Listing 9-13 isn‚Äôt the best to use here: a call to\n<code class=\"hljs\">panic!</code> is more appropriate for a programming problem than a usage problem,\n<a href=\"ch09-03-to-panic-or-not-to-panic.html#guidelines-for-error-handling\">as discussed in Chapter 9</a><!-- ignore -->. Instead,\nwe‚Äôll use the other technique you learned about in Chapter 9‚Äî<a href=\"ch09-02-recoverable-errors-with-result.html\">returning a\n<code class=\"hljs\">Result</code></a><!-- ignore --> that indicates either success or an error.</p>\n<!-- Old headings. Do not remove or links may break. -->\n<p><a id=\"returning-a-result-from-new-instead-of-calling-panic\"></a></p>\n<h4 id=\"returning-a-result-instead-of-calling-panic\"><a class=\"header\" href=\"#returning-a-result-instead-of-calling-panic\">Returning a <code>Result</code> Instead of Calling <code>panic!</code></a></h4>\n<p>We can instead return a <code class=\"hljs\">Result</code> value that will contain a <code class=\"hljs\">Config</code> instance in\nthe successful case and will describe the problem in the error case. We‚Äôre also\ngoing to change the function name from <code class=\"hljs\">new</code> to <code class=\"hljs\">build</code> because many\nprogrammers expect <code class=\"hljs\">new</code> functions to never fail. When <code class=\"hljs\">Config::build</code> is\ncommunicating to <code class=\"hljs\">main</code>, we can use the <code class=\"hljs\">Result</code> type to signal there was a\nproblem. Then we can change <code class=\"hljs\">main</code> to convert an <code class=\"hljs\">Err</code> variant into a more\npractical error for our users without the surrounding text about <code class=\"hljs\">thread 'main'</code> and <code class=\"hljs\">RUST_BACKTRACE</code> that a call to <code class=\"hljs\">panic!</code> causes.</p>\n<p>Listing 12-9 shows the changes we need to make to the return value of the\nfunction we‚Äôre now calling <code class=\"hljs\">Config::build</code> and the body of the function needed\nto return a <code class=\"hljs\">Result</code>. Note that this won‚Äôt compile until we update <code class=\"hljs\">main</code> as\nwell, which we‚Äôll do in the next listing.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::env;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::fs;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> args: <span class=\"hljs-built_in\">Vec</span>&lt;<span class=\"hljs-built_in\">String</span>&gt; = env::args().collect();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> config = Config::new(&amp;args);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Searching for {}\"</span>, config.query);\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"In file {}\"</span>, config.file_path);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> contents = fs::read_to_string(config.file_path)\n</span><span class=\"boring\">        .expect(<span class=\"hljs-string\">\"Should have been able to read the file\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"With text:\\n{contents}\"</span>);\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Config</span></span> {\n</span><span class=\"boring\">    query: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    file_path: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">impl</span> Config {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">build</span></span>(args: &amp;[<span class=\"hljs-built_in\">String</span>]) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;Config, &amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span>&gt; {\n        <span class=\"hljs-keyword\">if</span> args.len() &lt; <span class=\"hljs-number\">3</span> {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">Err</span>(<span class=\"hljs-string\">\"not enough arguments\"</span>);\n        }\n\n        <span class=\"hljs-keyword\">let</span> query = args[<span class=\"hljs-number\">1</span>].clone();\n        <span class=\"hljs-keyword\">let</span> file_path = args[<span class=\"hljs-number\">2</span>].clone();\n\n        <span class=\"hljs-literal\">Ok</span>(Config { query, file_path })\n    }\n}</code></pre>\n<p><span class=\"caption\">Listing 12-9: Returning a <code class=\"hljs\">Result</code> from\n<code class=\"hljs\">Config::build</code></span></p>\n<p>Our <code class=\"hljs\">build</code> function returns a <code class=\"hljs\">Result</code> with a <code class=\"hljs\">Config</code> instance in the success\ncase and a <code class=\"hljs\">&amp;'static str</code> in the error case. Our error values will always be\nstring literals that have the <code class=\"hljs\">'static</code> lifetime.</p>\n<p>We‚Äôve made two changes in the body of the function: instead of calling <code class=\"hljs\">panic!</code>\nwhen the user doesn‚Äôt pass enough arguments, we now return an <code class=\"hljs\">Err</code> value, and\nwe‚Äôve wrapped the <code class=\"hljs\">Config</code> return value in an <code class=\"hljs\">Ok</code>. These changes make the\nfunction conform to its new type signature.</p>\n<p>Returning an <code class=\"hljs\">Err</code> value from <code class=\"hljs\">Config::build</code> allows the <code class=\"hljs\">main</code> function to\nhandle the <code class=\"hljs\">Result</code> value returned from the <code class=\"hljs\">build</code> function and exit the\nprocess more cleanly in the error case.</p>\n<!-- Old headings. Do not remove or links may break. -->\n<p><a id=\"calling-confignew-and-handling-errors\"></a></p>\n<h4 id=\"calling-configbuild-and-handling-errors\"><a class=\"header\" href=\"#calling-configbuild-and-handling-errors\">Calling <code>Config::build</code> and Handling Errors</a></h4>\n<p>To handle the error case and print a user-friendly message, we need to update\n<code class=\"hljs\">main</code> to handle the <code class=\"hljs\">Result</code> being returned by <code class=\"hljs\">Config::build</code>, as shown in\nListing 12-10. We‚Äôll also take the responsibility of exiting the command line\ntool with a nonzero error code away from <code class=\"hljs\">panic!</code> and instead implement it by\nhand. A nonzero exit status is a convention to signal to the process that\ncalled our program that the program exited with an error state.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::env;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::fs;\n</span><span class=\"hljs-keyword\">use</span> std::process;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> args: <span class=\"hljs-built_in\">Vec</span>&lt;<span class=\"hljs-built_in\">String</span>&gt; = env::args().collect();\n\n    <span class=\"hljs-keyword\">let</span> config = Config::build(&amp;args).unwrap_or_else(|err| {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Problem parsing arguments: {err}\"</span>);\n        process::exit(<span class=\"hljs-number\">1</span>);\n    });\n\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Searching for {}\"</span>, config.query);\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"In file {}\"</span>, config.file_path);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> contents = fs::read_to_string(config.file_path)\n</span><span class=\"boring\">        .expect(<span class=\"hljs-string\">\"Should have been able to read the file\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"With text:\\n{contents}\"</span>);\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Config</span></span> {\n</span><span class=\"boring\">    query: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    file_path: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Config {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">build</span></span>(args: &amp;[<span class=\"hljs-built_in\">String</span>]) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;Config, &amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span>&gt; {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> args.len() &lt; <span class=\"hljs-number\">3</span> {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">Err</span>(<span class=\"hljs-string\">\"not enough arguments\"</span>);\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = args[<span class=\"hljs-number\">1</span>].clone();\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> file_path = args[<span class=\"hljs-number\">2</span>].clone();\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-literal\">Ok</span>(Config { query, file_path })\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre>\n<p><span class=\"caption\">Listing 12-10: Exiting with an error code if building a\n<code class=\"hljs\">Config</code> fails</span></p>\n<p>In this listing, we‚Äôve used a method we haven‚Äôt covered in detail yet:\n<code class=\"hljs\">unwrap_or_else</code>, which is defined on <code class=\"hljs\">Result&lt;T, E&gt;</code> by the standard library.\nUsing <code class=\"hljs\">unwrap_or_else</code> allows us to define some custom, non-<code class=\"hljs\">panic!</code> error\nhandling. If the <code class=\"hljs\">Result</code> is an <code class=\"hljs\">Ok</code> value, this method‚Äôs behavior is similar\nto <code class=\"hljs\">unwrap</code>: it returns the inner value <code class=\"hljs\">Ok</code> is wrapping. However, if the value\nis an <code class=\"hljs\">Err</code> value, this method calls the code in the <em>closure</em>, which is an\nanonymous function we define and pass as an argument to <code class=\"hljs\">unwrap_or_else</code>. We‚Äôll\ncover closures in more detail in <a href=\"ch13-00-functional-features.html\">Chapter 13</a><!-- ignore -->. For now,\nyou just need to know that <code class=\"hljs\">unwrap_or_else</code> will pass the inner value of the\n<code class=\"hljs\">Err</code>, which in this case is the static string <code class=\"hljs\">\"not enough arguments\"</code> that we\nadded in Listing 12-9, to our closure in the argument <code class=\"hljs\">err</code> that appears\nbetween the vertical pipes. The code in the closure can then use the <code class=\"hljs\">err</code>\nvalue when it runs.</p>\n<p>We‚Äôve added a new <code class=\"hljs\">use</code> line to bring <code class=\"hljs\">process</code> from the standard library into\nscope. The code in the closure that will be run in the error case is only two\nlines: we print the <code class=\"hljs\">err</code> value and then call <code class=\"hljs\">process::exit</code>. The\n<code class=\"hljs\">process::exit</code> function will stop the program immediately and return the\nnumber that was passed as the exit status code. This is similar to the\n<code class=\"hljs\">panic!</code>-based handling we used in Listing 12-8, but we no longer get all the\nextra output. Let‚Äôs try it:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling minigrep v0.1.0 (file:///projects/minigrep)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.48s\n     Running `target/debug/minigrep`\nProblem parsing arguments: not enough arguments\n</code></pre>\n<p>Great! This output is much friendlier for our users.</p>\n<h3 id=\"extracting-logic-from-main\"><a class=\"header\" href=\"#extracting-logic-from-main\">Extracting Logic from <code>main</code></a></h3>\n<p>Now that we‚Äôve finished refactoring the configuration parsing, let‚Äôs turn to\nthe program‚Äôs logic. As we stated in <a href=\"ch12-03-improving-error-handling-and-modularity.html#separation-of-concerns-for-binary-projects\">‚ÄúSeparation of Concerns for Binary\nProjects‚Äù</a><!-- ignore -->, we‚Äôll\nextract a function named <code class=\"hljs\">run</code> that will hold all the logic currently in the\n<code class=\"hljs\">main</code> function that isn‚Äôt involved with setting up configuration or handling\nerrors. When we‚Äôre done, <code class=\"hljs\">main</code> will be concise and easy to verify by\ninspection, and we‚Äôll be able to write tests for all the other logic.</p>\n<p>Listing 12-11 shows the extracted <code class=\"hljs\">run</code> function. For now, we‚Äôre just making\nthe small, incremental improvement of extracting the function. We‚Äôre still\ndefining the function in <em>src/main.rs</em>.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::env;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::fs;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::process;\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-comment\">// --snip--</span>\n\n<span class=\"boring\">    <span class=\"hljs-keyword\">let</span> args: <span class=\"hljs-built_in\">Vec</span>&lt;<span class=\"hljs-built_in\">String</span>&gt; = env::args().collect();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> config = Config::build(&amp;args).unwrap_or_else(|err| {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Problem parsing arguments: {err}\"</span>);\n</span><span class=\"boring\">        process::exit(<span class=\"hljs-number\">1</span>);\n</span><span class=\"boring\">    });\n</span><span class=\"boring\">\n</span>    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Searching for {}\"</span>, config.query);\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"In file {}\"</span>, config.file_path);\n\n    run(config);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">run</span></span>(config: Config) {\n    <span class=\"hljs-keyword\">let</span> contents = fs::read_to_string(config.file_path)\n        .expect(<span class=\"hljs-string\">\"Should have been able to read the file\"</span>);\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"With text:\\n{contents}\"</span>);\n}\n\n<span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Config</span></span> {\n</span><span class=\"boring\">    query: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    file_path: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Config {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">build</span></span>(args: &amp;[<span class=\"hljs-built_in\">String</span>]) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;Config, &amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span>&gt; {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> args.len() &lt; <span class=\"hljs-number\">3</span> {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">Err</span>(<span class=\"hljs-string\">\"not enough arguments\"</span>);\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = args[<span class=\"hljs-number\">1</span>].clone();\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> file_path = args[<span class=\"hljs-number\">2</span>].clone();\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-literal\">Ok</span>(Config { query, file_path })\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre>\n<p><span class=\"caption\">Listing 12-11: Extracting a <code class=\"hljs\">run</code> function containing the\nrest of the program logic</span></p>\n<p>The <code class=\"hljs\">run</code> function now contains all the remaining logic from <code class=\"hljs\">main</code>, starting\nfrom reading the file. The <code class=\"hljs\">run</code> function takes the <code class=\"hljs\">Config</code> instance as an\nargument.</p>\n<h4 id=\"returning-errors-from-the-run-function\"><a class=\"header\" href=\"#returning-errors-from-the-run-function\">Returning Errors from the <code>run</code> Function</a></h4>\n<p>With the remaining program logic separated into the <code class=\"hljs\">run</code> function, we can\nimprove the error handling, as we did with <code class=\"hljs\">Config::build</code> in Listing 12-9.\nInstead of allowing the program to panic by calling <code class=\"hljs\">expect</code>, the <code class=\"hljs\">run</code>\nfunction will return a <code class=\"hljs\">Result&lt;T, E&gt;</code> when something goes wrong. This will let\nus further consolidate the logic around handling errors into <code class=\"hljs\">main</code> in a\nuser-friendly way. Listing 12-12 shows the changes we need to make to the\nsignature and body of <code class=\"hljs\">run</code>.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::env;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::fs;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::process;\n</span><span class=\"hljs-keyword\">use</span> std::error::Error;\n\n<span class=\"hljs-comment\">// --snip--</span>\n\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> args: <span class=\"hljs-built_in\">Vec</span>&lt;<span class=\"hljs-built_in\">String</span>&gt; = env::args().collect();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> config = Config::build(&amp;args).unwrap_or_else(|err| {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Problem parsing arguments: {err}\"</span>);\n</span><span class=\"boring\">        process::exit(<span class=\"hljs-number\">1</span>);\n</span><span class=\"boring\">    });\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Searching for {}\"</span>, config.query);\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"In file {}\"</span>, config.file_path);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    run(config);\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">run</span></span>(config: Config) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;(), <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> Error&gt;&gt; {\n    <span class=\"hljs-keyword\">let</span> contents = fs::read_to_string(config.file_path)?;\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"With text:\\n{contents}\"</span>);\n\n    <span class=\"hljs-literal\">Ok</span>(())\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Config</span></span> {\n</span><span class=\"boring\">    query: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    file_path: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Config {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">build</span></span>(args: &amp;[<span class=\"hljs-built_in\">String</span>]) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;Config, &amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span>&gt; {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> args.len() &lt; <span class=\"hljs-number\">3</span> {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">Err</span>(<span class=\"hljs-string\">\"not enough arguments\"</span>);\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = args[<span class=\"hljs-number\">1</span>].clone();\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> file_path = args[<span class=\"hljs-number\">2</span>].clone();\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-literal\">Ok</span>(Config { query, file_path })\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre>\n<p><span class=\"caption\">Listing 12-12: Changing the <code class=\"hljs\">run</code> function to return\n<code class=\"hljs\">Result</code></span></p>\n<p>We‚Äôve made three significant changes here. First, we changed the return type of\nthe <code class=\"hljs\">run</code> function to <code class=\"hljs\">Result&lt;(), Box&lt;dyn Error&gt;&gt;</code>. This function previously\nreturned the unit type, <code class=\"hljs\">()</code>, and we keep that as the value returned in the\n<code class=\"hljs\">Ok</code> case.</p>\n<p>For the error type, we used the <em>trait object</em> <code class=\"hljs\">Box&lt;dyn Error&gt;</code> (and we‚Äôve\nbrought <code class=\"hljs\">std::error::Error</code> into scope with a <code class=\"hljs\">use</code> statement at the top).\nWe‚Äôll cover trait objects in <a href=\"ch17-00-oop.html\">Chapter 17</a><!-- ignore -->. For now, just\nknow that <code class=\"hljs\">Box&lt;dyn Error&gt;</code> means the function will return a type that\nimplements the <code class=\"hljs\">Error</code> trait, but we don‚Äôt have to specify what particular type\nthe return value will be. This gives us flexibility to return error values that\nmay be of different types in different error cases. The <code class=\"hljs\">dyn</code> keyword is short\nfor ‚Äúdynamic.‚Äù</p>\n<p>Second, we‚Äôve removed the call to <code class=\"hljs\">expect</code> in favor of the <code class=\"hljs\">?</code> operator, as we\ntalked about in <a href=\"ch09-02-recoverable-errors-with-result.html#a-shortcut-for-propagating-errors-the--operator\">Chapter 9</a><!-- ignore -->. Rather than\n<code class=\"hljs\">panic!</code> on an error, <code class=\"hljs\">?</code> will return the error value from the current function\nfor the caller to handle.</p>\n<p>Third, the <code class=\"hljs\">run</code> function now returns an <code class=\"hljs\">Ok</code> value in the success case.\nWe‚Äôve declared the <code class=\"hljs\">run</code> function‚Äôs success type as <code class=\"hljs\">()</code> in the signature,\nwhich means we need to wrap the unit type value in the <code class=\"hljs\">Ok</code> value. This\n<code class=\"hljs\">Ok(())</code> syntax might look a bit strange at first, but using <code class=\"hljs\">()</code> like this is\nthe idiomatic way to indicate that we‚Äôre calling <code class=\"hljs\">run</code> for its side effects\nonly; it doesn‚Äôt return a value we need.</p>\n<p>When you run this code, it will compile but will display a warning:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run -- the poem.txt</span>\n   Compiling minigrep v0.1.0 (file:///projects/minigrep)\nwarning: unused `Result` that must be used\n<span class=\"hljs-meta\">  --&gt;</span><span class=\"bash\"> src/main.rs:19:5</span>\n   |\n19 |     run(config);\n   |     ^^^^^^^^^^^\n   |\n   = note: this `Result` may be an `Err` variant, which should be handled\n   = note: `#[warn(unused_must_use)]` on by default\nhelp: use `let _ = ...` to ignore the resulting value\n   |\n19 |     let _ = run(config);\n   |     +++++++\n\nwarning: `minigrep` (bin \"minigrep\") generated 1 warning\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.71s\n     Running `target/debug/minigrep the poem.txt`\nSearching for the\nIn file poem.txt\nWith text:\nI'm nobody! Who are you?\nAre you nobody, too?\nThen there's a pair of us - don't tell!\nThey'd banish us, you know.\n\nHow dreary to be somebody!\nHow public, like a frog\nTo tell your name the livelong day\nTo an admiring bog!\n\n</code></pre>\n<p>Rust tells us that our code ignored the <code class=\"hljs\">Result</code> value and the <code class=\"hljs\">Result</code> value\nmight indicate that an error occurred. But we‚Äôre not checking to see whether or\nnot there was an error, and the compiler reminds us that we probably meant to\nhave some error-handling code here! Let‚Äôs rectify that problem now.</p>\n<h4 id=\"handling-errors-returned-from-run-in-main\"><a class=\"header\" href=\"#handling-errors-returned-from-run-in-main\">Handling Errors Returned from <code>run</code> in <code>main</code></a></h4>\n<p>We‚Äôll check for errors and handle them using a technique similar to one we used\nwith <code class=\"hljs\">Config::build</code> in Listing 12-10, but with a slight difference:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::env;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::error::Error;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::fs;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::process;\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-comment\">// --snip--</span>\n\n<span class=\"boring\">    <span class=\"hljs-keyword\">let</span> args: <span class=\"hljs-built_in\">Vec</span>&lt;<span class=\"hljs-built_in\">String</span>&gt; = env::args().collect();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> config = Config::build(&amp;args).unwrap_or_else(|err| {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Problem parsing arguments: {err}\"</span>);\n</span><span class=\"boring\">        process::exit(<span class=\"hljs-number\">1</span>);\n</span><span class=\"boring\">    });\n</span><span class=\"boring\">\n</span>    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Searching for {}\"</span>, config.query);\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"In file {}\"</span>, config.file_path);\n\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-literal\">Err</span>(e) = run(config) {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Application error: {e}\"</span>);\n        process::exit(<span class=\"hljs-number\">1</span>);\n    }\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">run</span></span>(config: Config) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;(), <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> Error&gt;&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> contents = fs::read_to_string(config.file_path)?;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"With text:\\n{contents}\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-literal\">Ok</span>(())\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Config</span></span> {\n</span><span class=\"boring\">    query: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    file_path: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Config {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">build</span></span>(args: &amp;[<span class=\"hljs-built_in\">String</span>]) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;Config, &amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span>&gt; {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> args.len() &lt; <span class=\"hljs-number\">3</span> {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">Err</span>(<span class=\"hljs-string\">\"not enough arguments\"</span>);\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = args[<span class=\"hljs-number\">1</span>].clone();\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> file_path = args[<span class=\"hljs-number\">2</span>].clone();\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-literal\">Ok</span>(Config { query, file_path })\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre>\n<p>We use <code class=\"hljs\">if let</code> rather than <code class=\"hljs\">unwrap_or_else</code> to check whether <code class=\"hljs\">run</code> returns an\n<code class=\"hljs\">Err</code> value and call <code class=\"hljs\">process::exit(1)</code> if it does. The <code class=\"hljs\">run</code> function doesn‚Äôt\nreturn a value that we want to <code class=\"hljs\">unwrap</code> in the same way that <code class=\"hljs\">Config::build</code>\nreturns the <code class=\"hljs\">Config</code> instance. Because <code class=\"hljs\">run</code> returns <code class=\"hljs\">()</code> in the success case,\nwe only care about detecting an error, so we don‚Äôt need <code class=\"hljs\">unwrap_or_else</code> to\nreturn the unwrapped value, which would only be <code class=\"hljs\">()</code>.</p>\n<p>The bodies of the <code class=\"hljs\">if let</code> and the <code class=\"hljs\">unwrap_or_else</code> functions are the same in\nboth cases: we print the error and exit.</p>\n<h3 id=\"splitting-code-into-a-library-crate\"><a class=\"header\" href=\"#splitting-code-into-a-library-crate\">Splitting Code into a Library Crate</a></h3>\n<p>Our <code class=\"hljs\">minigrep</code> project is looking good so far! Now we‚Äôll split the\n<em>src/main.rs</em> file and put some code into the <em>src/lib.rs</em> file. That way we\ncan test the code and have a <em>src/main.rs</em> file with fewer responsibilities.</p>\n<p>Let‚Äôs move all the code that isn‚Äôt the <code class=\"hljs\">main</code> function from <em>src/main.rs</em> to\n<em>src/lib.rs</em>:</p>\n<ul>\n<li>The <code class=\"hljs\">run</code> function definition</li>\n<li>The relevant <code class=\"hljs\">use</code> statements</li>\n<li>The definition of <code class=\"hljs\">Config</code></li>\n<li>The <code class=\"hljs\">Config::build</code> function definition</li>\n</ul>\n<p>The contents of <em>src/lib.rs</em> should have the signatures shown in Listing 12-13\n(we‚Äôve omitted the bodies of the functions for brevity). Note that this won‚Äôt\ncompile until we modify <em>src/main.rs</em> in Listing 12-14.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"hljs-keyword\">use</span> std::error::Error;\n<span class=\"hljs-keyword\">use</span> std::fs;\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Config</span></span> {\n    <span class=\"hljs-keyword\">pub</span> query: <span class=\"hljs-built_in\">String</span>,\n    <span class=\"hljs-keyword\">pub</span> file_path: <span class=\"hljs-built_in\">String</span>,\n}\n\n<span class=\"hljs-keyword\">impl</span> Config {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">build</span></span>(args: &amp;[<span class=\"hljs-built_in\">String</span>]) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;Config, &amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span>&gt; {\n        <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">        <span class=\"hljs-keyword\">if</span> args.len() &lt; <span class=\"hljs-number\">3</span> {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">Err</span>(<span class=\"hljs-string\">\"not enough arguments\"</span>);\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = args[<span class=\"hljs-number\">1</span>].clone();\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> file_path = args[<span class=\"hljs-number\">2</span>].clone();\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-literal\">Ok</span>(Config { query, file_path })\n</span>    }\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">run</span></span>(config: Config) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;(), <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> Error&gt;&gt; {\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">    <span class=\"hljs-keyword\">let</span> contents = fs::read_to_string(config.file_path)?;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"With text:\\n{contents}\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-literal\">Ok</span>(())\n</span>}</code></pre>\n<p><span class=\"caption\">Listing 12-13: Moving <code class=\"hljs\">Config</code> and <code class=\"hljs\">run</code> into\n<em>src/lib.rs</em></span></p>\n<p>We‚Äôve made liberal use of the <code class=\"hljs\">pub</code> keyword: on <code class=\"hljs\">Config</code>, on its fields and its\n<code class=\"hljs\">build</code> method, and on the <code class=\"hljs\">run</code> function. We now have a library crate that has\na public API we can test!</p>\n<p>Now we need to bring the code we moved to <em>src/lib.rs</em> into the scope of the\nbinary crate in <em>src/main.rs</em>, as shown in Listing 12-14.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"hljs-keyword\">use</span> std::env;\n<span class=\"hljs-keyword\">use</span> std::process;\n\n<span class=\"hljs-keyword\">use</span> minigrep::Config;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">    <span class=\"hljs-keyword\">let</span> args: <span class=\"hljs-built_in\">Vec</span>&lt;<span class=\"hljs-built_in\">String</span>&gt; = env::args().collect();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> config = Config::build(&amp;args).unwrap_or_else(|err| {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Problem parsing arguments: {err}\"</span>);\n</span><span class=\"boring\">        process::exit(<span class=\"hljs-number\">1</span>);\n</span><span class=\"boring\">    });\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Searching for {}\"</span>, config.query);\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"In file {}\"</span>, config.file_path);\n</span><span class=\"boring\">\n</span>    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-literal\">Err</span>(e) = minigrep::run(config) {\n        <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Application error: {e}\"</span>);\n</span><span class=\"boring\">        process::exit(<span class=\"hljs-number\">1</span>);\n</span>    }\n}</code></pre>\n<p><span class=\"caption\">Listing 12-14: Using the <code class=\"hljs\">minigrep</code> library crate in\n<em>src/main.rs</em></span></p>\n<p>We add a <code class=\"hljs\">use minigrep::Config</code> line to bring the <code class=\"hljs\">Config</code> type from the\nlibrary crate into the binary crate‚Äôs scope, and we prefix the <code class=\"hljs\">run</code> function\nwith our crate name. Now all the functionality should be connected and should\nwork. Run the program with <code class=\"hljs\">cargo run</code> and make sure everything works\ncorrectly.</p>\n<p>Whew! That was a lot of work, but we‚Äôve set ourselves up for success in the\nfuture. Now it‚Äôs much easier to handle errors, and we‚Äôve made the code more\nmodular. Almost all of our work will be done in <em>src/lib.rs</em> from here on out.</p>\n<p>Let‚Äôs take advantage of this newfound modularity by doing something that would\nhave been difficult with the old code but is easy with the new code: we‚Äôll\nwrite some tests!</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"developing-the-librarys-functionality-with-test-driven-development\"><a class=\"header\" href=\"#developing-the-librarys-functionality-with-test-driven-development\">Developing the Library‚Äôs Functionality with Test-Driven Development</a></h2>\n<p>Now that we‚Äôve extracted the logic into <em>src/lib.rs</em> and left the argument\ncollecting and error handling in <em>src/main.rs</em>, it‚Äôs much easier to write tests\nfor the core functionality of our code. We can call functions directly with\nvarious arguments and check return values without having to call our binary\nfrom the command line.</p>\n<p>In this section, we‚Äôll add the searching logic to the <code class=\"hljs\">minigrep</code> program\nusing the test-driven development (TDD) process with the following steps:</p>\n<ol>\n<li>Write a test that fails and run it to make sure it fails for the reason you\nexpect.</li>\n<li>Write or modify just enough code to make the new test pass.</li>\n<li>Refactor the code you just added or changed and make sure the tests\ncontinue to pass.</li>\n<li>Repeat from step 1!</li>\n</ol>\n<p>Though it‚Äôs just one of many ways to write software, TDD can help drive code\ndesign. Writing the test before you write the code that makes the test pass\nhelps to maintain high test coverage throughout the process.</p>\n<p>We‚Äôll test drive the implementation of the functionality that will actually do\nthe searching for the query string in the file contents and produce a list of\nlines that match the query. We‚Äôll add this functionality in a function called\n<code class=\"hljs\">search</code>.</p>\n<h3 id=\"writing-a-failing-test\"><a class=\"header\" href=\"#writing-a-failing-test\">Writing a Failing Test</a></h3>\n<p>Because we don‚Äôt need them anymore, let‚Äôs remove the <code class=\"hljs\">println!</code> statements from\n<em>src/lib.rs</em> and <em>src/main.rs</em> that we used to check the program‚Äôs behavior.\nThen, in <em>src/lib.rs</em>, add a <code class=\"hljs\">tests</code> module with a test function, as we did in\n<a href=\"ch11-01-writing-tests.html#the-anatomy-of-a-test-function\">Chapter 11</a><!-- ignore -->. The test function specifies the\nbehavior we want the <code class=\"hljs\">search</code> function to have: it will take a query and the\ntext to search, and it will return only the lines from the text that contain\nthe query. Listing 12-15 shows this test, which won‚Äôt compile yet.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::error::Error;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::fs;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Config</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> query: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> file_path: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Config {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">build</span></span>(args: &amp;[<span class=\"hljs-built_in\">String</span>]) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;Config, &amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span>&gt; {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> args.len() &lt; <span class=\"hljs-number\">3</span> {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">Err</span>(<span class=\"hljs-string\">\"not enough arguments\"</span>);\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = args[<span class=\"hljs-number\">1</span>].clone();\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> file_path = args[<span class=\"hljs-number\">2</span>].clone();\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-literal\">Ok</span>(Config { query, file_path })\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">run</span></span>(config: Config) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;(), <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> Error&gt;&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> contents = fs::read_to_string(config.file_path)?;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-literal\">Ok</span>(())\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::*;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">one_result</span></span>() {\n        <span class=\"hljs-keyword\">let</span> query = <span class=\"hljs-string\">\"duct\"</span>;\n        <span class=\"hljs-keyword\">let</span> contents = <span class=\"hljs-string\">\"\\\nRust:\nsafe, fast, productive.\nPick three.\"</span>;\n\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">\"safe, fast, productive.\"</span>], search(query, contents));\n    }\n}</code></pre>\n<p><span class=\"caption\">Listing 12-15: Creating a failing test for the <code class=\"hljs\">search</code>\nfunction we wish we had</span></p>\n<p>This test searches for the string <code class=\"hljs\">\"duct\"</code>. The text we‚Äôre searching is three\nlines, only one of which contains <code class=\"hljs\">\"duct\"</code> (Note that the backslash after the\nopening double quote tells Rust not to put a newline character at the beginning\nof the contents of this string literal). We assert that the value returned from\nthe <code class=\"hljs\">search</code> function contains only the line we expect.</p>\n<p>We aren‚Äôt yet able to run this test and watch it fail because the test doesn‚Äôt\neven compile: the <code class=\"hljs\">search</code> function doesn‚Äôt exist yet! In accordance with TDD\nprinciples, we‚Äôll add just enough code to get the test to compile and run by\nadding a definition of the <code class=\"hljs\">search</code> function that always returns an empty\nvector, as shown in Listing 12-16. Then the test should compile and fail\nbecause an empty vector doesn‚Äôt match a vector containing the line <code class=\"hljs\">\"safe, fast, productive.\"</code></p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::error::Error;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::fs;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Config</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> query: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> file_path: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Config {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">build</span></span>(args: &amp;[<span class=\"hljs-built_in\">String</span>]) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;Config, &amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span>&gt; {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> args.len() &lt; <span class=\"hljs-number\">3</span> {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">Err</span>(<span class=\"hljs-string\">\"not enough arguments\"</span>);\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = args[<span class=\"hljs-number\">1</span>].clone();\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> file_path = args[<span class=\"hljs-number\">2</span>].clone();\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-literal\">Ok</span>(Config { query, file_path })\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">run</span></span>(config: Config) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;(), <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> Error&gt;&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> contents = fs::read_to_string(config.file_path)?;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-literal\">Ok</span>(())\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">search</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(query: &amp;<span class=\"hljs-built_in\">str</span>, contents: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>) -&gt; <span class=\"hljs-built_in\">Vec</span>&lt;&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>&gt; {\n    <span class=\"hljs-built_in\">vec!</span>[]\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-meta\">#[cfg(test)]</span>\n</span><span class=\"boring\"><span class=\"hljs-keyword\">mod</span> tests {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">use</span> super::*;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-meta\">#[test]</span>\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">one_result</span></span>() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = <span class=\"hljs-string\">\"duct\"</span>;\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> contents = <span class=\"hljs-string\">\"\\\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Rust:\n</span></span><span class=\"boring\"><span class=\"hljs-string\">safe, fast, productive.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Pick three.\"</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">\"safe, fast, productive.\"</span>], search(query, contents));\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre>\n<p><span class=\"caption\">Listing 12-16: Defining just enough of the <code class=\"hljs\">search</code>\nfunction so our test will compile</span></p>\n<p>Notice that we need to define an explicit lifetime <code class=\"hljs\">'a</code> in the signature of\n<code class=\"hljs\">search</code> and use that lifetime with the <code class=\"hljs\">contents</code> argument and the return\nvalue. Recall in <a href=\"ch10-03-lifetime-syntax.html\">Chapter 10</a><!-- ignore --> that the lifetime\nparameters specify which argument lifetime is connected to the lifetime of the\nreturn value. In this case, we indicate that the returned vector should contain\nstring slices that reference slices of the argument <code class=\"hljs\">contents</code> (rather than the\nargument <code class=\"hljs\">query</code>).</p>\n<p>In other words, we tell Rust that the data returned by the <code class=\"hljs\">search</code> function\nwill live as long as the data passed into the <code class=\"hljs\">search</code> function in the\n<code class=\"hljs\">contents</code> argument. This is important! The data referenced <em>by</em> a slice needs\nto be valid for the reference to be valid; if the compiler assumes we‚Äôre making\nstring slices of <code class=\"hljs\">query</code> rather than <code class=\"hljs\">contents</code>, it will do its safety checking\nincorrectly.</p>\n<p>If we forget the lifetime annotations and try to compile this function, we‚Äôll\nget this error:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo build</span>\n   Compiling minigrep v0.1.0 (file:///projects/minigrep)\nerror[E0106]: missing lifetime specifier\n<span class=\"hljs-meta\">  --&gt;</span><span class=\"bash\"> src/lib.rs:28:51</span>\n   |\n28 | pub fn search(query: &amp;str, contents: &amp;str) -&gt; Vec&lt;&amp;str&gt; {\n   |                      ----            ----         ^ expected named lifetime parameter\n   |\n   = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `query` or `contents`\nhelp: consider introducing a named lifetime parameter\n   |\n28 | pub fn search&lt;'a&gt;(query: &amp;'a str, contents: &amp;'a str) -&gt; Vec&lt;&amp;'a str&gt; {\n   |              ++++         ++                 ++              ++\n\nFor more information about this error, try `rustc --explain E0106`.\nerror: could not compile `minigrep` (lib) due to 1 previous error\n</code></pre>\n<p>Rust can‚Äôt possibly know which of the two arguments we need, so we need to tell\nit explicitly. Because <code class=\"hljs\">contents</code> is the argument that contains all of our text\nand we want to return the parts of that text that match, we know <code class=\"hljs\">contents</code> is\nthe argument that should be connected to the return value using the lifetime\nsyntax.</p>\n<p>Other programming languages don‚Äôt require you to connect arguments to return\nvalues in the signature, but this practice will get easier over time. You might\nwant to compare this example with the <a href=\"ch10-03-lifetime-syntax.html#validating-references-with-lifetimes\">‚ÄúValidating References with\nLifetimes‚Äù</a><!-- ignore --> section in\nChapter 10.</p>\n<p>Now let‚Äôs run the test:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo <span class=\"hljs-built_in\">test</span></span>\n   Compiling minigrep v0.1.0 (file:///projects/minigrep)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.97s\n     Running unittests src/lib.rs (target/debug/deps/minigrep-9cd200e5fac0fc94)\n\nrunning 1 test\ntest tests::one_result ... FAILED\n\nfailures:\n\n---- tests::one_result stdout ----\nthread 'tests::one_result' panicked at src/lib.rs:44:9:\nassertion `left == right` failed\n  left: [\"safe, fast, productive.\"]\n right: []\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\n\nfailures:\n    tests::one_result\n\ntest result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\nerror: test failed, to rerun pass `--lib`\n</code></pre>\n<p>Great, the test fails, exactly as we expected. Let‚Äôs get the test to pass!</p>\n<h3 id=\"writing-code-to-pass-the-test\"><a class=\"header\" href=\"#writing-code-to-pass-the-test\">Writing Code to Pass the Test</a></h3>\n<p>Currently, our test is failing because we always return an empty vector. To fix\nthat and implement <code class=\"hljs\">search</code>, our program needs to follow these steps:</p>\n<ul>\n<li>Iterate through each line of the contents.</li>\n<li>Check whether the line contains our query string.</li>\n<li>If it does, add it to the list of values we‚Äôre returning.</li>\n<li>If it doesn‚Äôt, do nothing.</li>\n<li>Return the list of results that match.</li>\n</ul>\n<p>Let‚Äôs work through each step, starting with iterating through lines.</p>\n<h4 id=\"iterating-through-lines-with-the-lines-method\"><a class=\"header\" href=\"#iterating-through-lines-with-the-lines-method\">Iterating Through Lines with the <code>lines</code> Method</a></h4>\n<p>Rust has a helpful method to handle line-by-line iteration of strings,\nconveniently named <code class=\"hljs\">lines</code>, that works as shown in Listing 12-17. Note this\nwon‚Äôt compile yet.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::error::Error;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::fs;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Config</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> query: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> file_path: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Config {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">build</span></span>(args: &amp;[<span class=\"hljs-built_in\">String</span>]) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;Config, &amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span>&gt; {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> args.len() &lt; <span class=\"hljs-number\">3</span> {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">Err</span>(<span class=\"hljs-string\">\"not enough arguments\"</span>);\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = args[<span class=\"hljs-number\">1</span>].clone();\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> file_path = args[<span class=\"hljs-number\">2</span>].clone();\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-literal\">Ok</span>(Config { query, file_path })\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">run</span></span>(config: Config) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;(), <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> Error&gt;&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> contents = fs::read_to_string(config.file_path)?;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-literal\">Ok</span>(())\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">search</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(query: &amp;<span class=\"hljs-built_in\">str</span>, contents: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>) -&gt; <span class=\"hljs-built_in\">Vec</span>&lt;&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>&gt; {\n    <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> contents.lines() {\n        <span class=\"hljs-comment\">// do something with line</span>\n    }\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-meta\">#[cfg(test)]</span>\n</span><span class=\"boring\"><span class=\"hljs-keyword\">mod</span> tests {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">use</span> super::*;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-meta\">#[test]</span>\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">one_result</span></span>() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = <span class=\"hljs-string\">\"duct\"</span>;\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> contents = <span class=\"hljs-string\">\"\\\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Rust:\n</span></span><span class=\"boring\"><span class=\"hljs-string\">safe, fast, productive.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Pick three.\"</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">\"safe, fast, productive.\"</span>], search(query, contents));\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre>\n<p><span class=\"caption\">Listing 12-17: Iterating through each line in <code class=\"hljs\">contents</code>\n</span></p>\n<p>The <code class=\"hljs\">lines</code> method returns an iterator. We‚Äôll talk about iterators in depth in\n<a href=\"ch13-02-iterators.html\">Chapter 13</a><!-- ignore -->, but recall that you saw this way\nof using an iterator in <a href=\"ch03-05-control-flow.html#looping-through-a-collection-with-for\">Listing 3-5</a><!-- ignore -->, where we used a\n<code class=\"hljs\">for</code> loop with an iterator to run some code on each item in a collection.</p>\n<h4 id=\"searching-each-line-for-the-query\"><a class=\"header\" href=\"#searching-each-line-for-the-query\">Searching Each Line for the Query</a></h4>\n<p>Next, we‚Äôll check whether the current line contains our query string.\nFortunately, strings have a helpful method named <code class=\"hljs\">contains</code> that does this for\nus! Add a call to the <code class=\"hljs\">contains</code> method in the <code class=\"hljs\">search</code> function, as shown in\nListing 12-18. Note this still won‚Äôt compile yet.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::error::Error;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::fs;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Config</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> query: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> file_path: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Config {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">build</span></span>(args: &amp;[<span class=\"hljs-built_in\">String</span>]) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;Config, &amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span>&gt; {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> args.len() &lt; <span class=\"hljs-number\">3</span> {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">Err</span>(<span class=\"hljs-string\">\"not enough arguments\"</span>);\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = args[<span class=\"hljs-number\">1</span>].clone();\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> file_path = args[<span class=\"hljs-number\">2</span>].clone();\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-literal\">Ok</span>(Config { query, file_path })\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">run</span></span>(config: Config) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;(), <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> Error&gt;&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> contents = fs::read_to_string(config.file_path)?;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-literal\">Ok</span>(())\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">search</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(query: &amp;<span class=\"hljs-built_in\">str</span>, contents: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>) -&gt; <span class=\"hljs-built_in\">Vec</span>&lt;&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>&gt; {\n    <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> contents.lines() {\n        <span class=\"hljs-keyword\">if</span> line.contains(query) {\n            <span class=\"hljs-comment\">// do something with line</span>\n        }\n    }\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-meta\">#[cfg(test)]</span>\n</span><span class=\"boring\"><span class=\"hljs-keyword\">mod</span> tests {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">use</span> super::*;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-meta\">#[test]</span>\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">one_result</span></span>() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = <span class=\"hljs-string\">\"duct\"</span>;\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> contents = <span class=\"hljs-string\">\"\\\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Rust:\n</span></span><span class=\"boring\"><span class=\"hljs-string\">safe, fast, productive.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Pick three.\"</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">\"safe, fast, productive.\"</span>], search(query, contents));\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre>\n<p><span class=\"caption\">Listing 12-18: Adding functionality to see whether the\nline contains the string in <code class=\"hljs\">query</code></span></p>\n<p>At the moment, we‚Äôre building up functionality. To get it to compile, we need\nto return a value from the body as we indicated we would in the function\nsignature.</p>\n<h4 id=\"storing-matching-lines\"><a class=\"header\" href=\"#storing-matching-lines\">Storing Matching Lines</a></h4>\n<p>To finish this function, we need a way to store the matching lines that we want\nto return. For that, we can make a mutable vector before the <code class=\"hljs\">for</code> loop and\ncall the <code class=\"hljs\">push</code> method to store a <code class=\"hljs\">line</code> in the vector. After the <code class=\"hljs\">for</code> loop,\nwe return the vector, as shown in Listing 12-19.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::error::Error;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::fs;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Config</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> query: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> file_path: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Config {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">build</span></span>(args: &amp;[<span class=\"hljs-built_in\">String</span>]) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;Config, &amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span>&gt; {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> args.len() &lt; <span class=\"hljs-number\">3</span> {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">Err</span>(<span class=\"hljs-string\">\"not enough arguments\"</span>);\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = args[<span class=\"hljs-number\">1</span>].clone();\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> file_path = args[<span class=\"hljs-number\">2</span>].clone();\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-literal\">Ok</span>(Config { query, file_path })\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">run</span></span>(config: Config) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;(), <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> Error&gt;&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> contents = fs::read_to_string(config.file_path)?;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-literal\">Ok</span>(())\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">search</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(query: &amp;<span class=\"hljs-built_in\">str</span>, contents: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>) -&gt; <span class=\"hljs-built_in\">Vec</span>&lt;&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>&gt; {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> results = <span class=\"hljs-built_in\">Vec</span>::new();\n\n    <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> contents.lines() {\n        <span class=\"hljs-keyword\">if</span> line.contains(query) {\n            results.push(line);\n        }\n    }\n\n    results\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-meta\">#[cfg(test)]</span>\n</span><span class=\"boring\"><span class=\"hljs-keyword\">mod</span> tests {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">use</span> super::*;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-meta\">#[test]</span>\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">one_result</span></span>() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = <span class=\"hljs-string\">\"duct\"</span>;\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> contents = <span class=\"hljs-string\">\"\\\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Rust:\n</span></span><span class=\"boring\"><span class=\"hljs-string\">safe, fast, productive.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Pick three.\"</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">\"safe, fast, productive.\"</span>], search(query, contents));\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre>\n<p><span class=\"caption\">Listing 12-19: Storing the lines that match so we can\nreturn them</span></p>\n<p>Now the <code class=\"hljs\">search</code> function should return only the lines that contain <code class=\"hljs\">query</code>,\nand our test should pass. Let‚Äôs run the test:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo <span class=\"hljs-built_in\">test</span></span>\n   Compiling minigrep v0.1.0 (file:///projects/minigrep)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 1.22s\n     Running unittests src/lib.rs (target/debug/deps/minigrep-9cd200e5fac0fc94)\n\nrunning 1 test\ntest tests::one_result ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n     Running unittests src/main.rs (target/debug/deps/minigrep-9cd200e5fac0fc94)\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n   Doc-tests minigrep\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n</code></pre>\n<p>Our test passed, so we know it works!</p>\n<p>At this point, we could consider opportunities for refactoring the\nimplementation of the search function while keeping the tests passing to\nmaintain the same functionality. The code in the search function isn‚Äôt too bad,\nbut it doesn‚Äôt take advantage of some useful features of iterators. We‚Äôll\nreturn to this example in <a href=\"ch13-02-iterators.html\">Chapter 13</a><!-- ignore -->, where\nwe‚Äôll explore iterators in detail, and look at how to improve it.</p>\n<h4 id=\"using-the-search-function-in-the-run-function\"><a class=\"header\" href=\"#using-the-search-function-in-the-run-function\">Using the <code>search</code> Function in the <code>run</code> Function</a></h4>\n<p>Now that the <code class=\"hljs\">search</code> function is working and tested, we need to call <code class=\"hljs\">search</code>\nfrom our <code class=\"hljs\">run</code> function. We need to pass the <code class=\"hljs\">config.query</code> value and the\n<code class=\"hljs\">contents</code> that <code class=\"hljs\">run</code> reads from the file to the <code class=\"hljs\">search</code> function. Then <code class=\"hljs\">run</code>\nwill print each line returned from <code class=\"hljs\">search</code>:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::error::Error;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::fs;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Config</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> query: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> file_path: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Config {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">build</span></span>(args: &amp;[<span class=\"hljs-built_in\">String</span>]) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;Config, &amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span>&gt; {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> args.len() &lt; <span class=\"hljs-number\">3</span> {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">Err</span>(<span class=\"hljs-string\">\"not enough arguments\"</span>);\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = args[<span class=\"hljs-number\">1</span>].clone();\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> file_path = args[<span class=\"hljs-number\">2</span>].clone();\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-literal\">Ok</span>(Config { query, file_path })\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">run</span></span>(config: Config) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;(), <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> Error&gt;&gt; {\n    <span class=\"hljs-keyword\">let</span> contents = fs::read_to_string(config.file_path)?;\n\n    <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> search(&amp;config.query, &amp;contents) {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{line}\"</span>);\n    }\n\n    <span class=\"hljs-literal\">Ok</span>(())\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">search</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(query: &amp;<span class=\"hljs-built_in\">str</span>, contents: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>) -&gt; <span class=\"hljs-built_in\">Vec</span>&lt;&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> results = <span class=\"hljs-built_in\">Vec</span>::new();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> contents.lines() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> line.contains(query) {\n</span><span class=\"boring\">            results.push(line);\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    results\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-meta\">#[cfg(test)]</span>\n</span><span class=\"boring\"><span class=\"hljs-keyword\">mod</span> tests {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">use</span> super::*;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-meta\">#[test]</span>\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">one_result</span></span>() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = <span class=\"hljs-string\">\"duct\"</span>;\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> contents = <span class=\"hljs-string\">\"\\\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Rust:\n</span></span><span class=\"boring\"><span class=\"hljs-string\">safe, fast, productive.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Pick three.\"</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">\"safe, fast, productive.\"</span>], search(query, contents));\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre>\n<p>We‚Äôre still using a <code class=\"hljs\">for</code> loop to return each line from <code class=\"hljs\">search</code> and print it.</p>\n<p>Now the entire program should work! Let‚Äôs try it out, first with a word that\nshould return exactly one line from the Emily Dickinson poem, ‚Äúfrog‚Äù:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run -- frog poem.txt</span>\n   Compiling minigrep v0.1.0 (file:///projects/minigrep)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.38s\n     Running `target/debug/minigrep frog poem.txt`\nHow public, like a frog\n</code></pre>\n<p>Cool! Now let‚Äôs try a word that will match multiple lines, like ‚Äúbody‚Äù:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run -- body poem.txt</span>\n   Compiling minigrep v0.1.0 (file:///projects/minigrep)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.0s\n     Running `target/debug/minigrep body poem.txt`\nI'm nobody! Who are you?\nAre you nobody, too?\nHow dreary to be somebody!\n</code></pre>\n<p>And finally, let‚Äôs make sure that we don‚Äôt get any lines when we search for a\nword that isn‚Äôt anywhere in the poem, such as ‚Äúmonomorphization‚Äù:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run -- monomorphization poem.txt</span>\n   Compiling minigrep v0.1.0 (file:///projects/minigrep)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.0s\n     Running `target/debug/minigrep monomorphization poem.txt`\n</code></pre>\n<p>Excellent! We‚Äôve built our own mini version of a classic tool and learned a lot\nabout how to structure applications. We‚Äôve also learned a bit about file input\nand output, lifetimes, testing, and command line parsing.</p>\n<p>To round out this project, we‚Äôll briefly demonstrate how to work with\nenvironment variables and how to print to standard error, both of which are\nuseful when you‚Äôre writing command line programs.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"working-with-environment-variables\"><a class=\"header\" href=\"#working-with-environment-variables\">Working with Environment Variables</a></h2>\n<p>We‚Äôll improve <code class=\"hljs\">minigrep</code> by adding an extra feature: an option for\ncase-insensitive searching that the user can turn on via an environment\nvariable. We could make this feature a command line option and require that\nusers enter it each time they want it to apply, but by instead making it an\nenvironment variable, we allow our users to set the environment variable once\nand have all their searches be case insensitive in that terminal session.</p>\n<h3 id=\"writing-a-failing-test-for-the-case-insensitive-search-function\"><a class=\"header\" href=\"#writing-a-failing-test-for-the-case-insensitive-search-function\">Writing a Failing Test for the Case-Insensitive <code>search</code> Function</a></h3>\n<p>We first add a new <code class=\"hljs\">search_case_insensitive</code> function that will be called when\nthe environment variable has a value. We‚Äôll continue to follow the TDD process,\nso the first step is again to write a failing test. We‚Äôll add a new test for\nthe new <code class=\"hljs\">search_case_insensitive</code> function and rename our old test from\n<code class=\"hljs\">one_result</code> to <code class=\"hljs\">case_sensitive</code> to clarify the differences between the two\ntests, as shown in Listing 12-20.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::error::Error;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::fs;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Config</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> query: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> file_path: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Config {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">build</span></span>(args: &amp;[<span class=\"hljs-built_in\">String</span>]) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;Config, &amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span>&gt; {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> args.len() &lt; <span class=\"hljs-number\">3</span> {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">Err</span>(<span class=\"hljs-string\">\"not enough arguments\"</span>);\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = args[<span class=\"hljs-number\">1</span>].clone();\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> file_path = args[<span class=\"hljs-number\">2</span>].clone();\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-literal\">Ok</span>(Config { query, file_path })\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">run</span></span>(config: Config) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;(), <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> Error&gt;&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> contents = fs::read_to_string(config.file_path)?;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> search(&amp;config.query, &amp;contents) {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{line}\"</span>);\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-literal\">Ok</span>(())\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">search</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(query: &amp;<span class=\"hljs-built_in\">str</span>, contents: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>) -&gt; <span class=\"hljs-built_in\">Vec</span>&lt;&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> results = <span class=\"hljs-built_in\">Vec</span>::new();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> contents.lines() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> line.contains(query) {\n</span><span class=\"boring\">            results.push(line);\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    results\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::*;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">case_sensitive</span></span>() {\n        <span class=\"hljs-keyword\">let</span> query = <span class=\"hljs-string\">\"duct\"</span>;\n        <span class=\"hljs-keyword\">let</span> contents = <span class=\"hljs-string\">\"\\\nRust:\nsafe, fast, productive.\nPick three.\nDuct tape.\"</span>;\n\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">\"safe, fast, productive.\"</span>], search(query, contents));\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">case_insensitive</span></span>() {\n        <span class=\"hljs-keyword\">let</span> query = <span class=\"hljs-string\">\"rUsT\"</span>;\n        <span class=\"hljs-keyword\">let</span> contents = <span class=\"hljs-string\">\"\\\nRust:\nsafe, fast, productive.\nPick three.\nTrust me.\"</span>;\n\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">\"Rust:\"</span>, <span class=\"hljs-string\">\"Trust me.\"</span>],\n            search_case_insensitive(query, contents)\n        );\n    }\n}</code></pre>\n<p><span class=\"caption\">Listing 12-20: Adding a new failing test for the\ncase-insensitive function we‚Äôre about to add</span></p>\n<p>Note that we‚Äôve edited the old test‚Äôs <code class=\"hljs\">contents</code> too. We‚Äôve added a new line\nwith the text <code class=\"hljs\">\"Duct tape.\"</code> using a capital D that shouldn‚Äôt match the query\n<code class=\"hljs\">\"duct\"</code> when we‚Äôre searching in a case-sensitive manner. Changing the old test\nin this way helps ensure that we don‚Äôt accidentally break the case-sensitive\nsearch functionality that we‚Äôve already implemented. This test should pass now\nand should continue to pass as we work on the case-insensitive search.</p>\n<p>The new test for the case-<em>insensitive</em> search uses <code class=\"hljs\">\"rUsT\"</code> as its query. In\nthe <code class=\"hljs\">search_case_insensitive</code> function we‚Äôre about to add, the query <code class=\"hljs\">\"rUsT\"</code>\nshould match the line containing <code class=\"hljs\">\"Rust:\"</code> with a capital R and match the line\n<code class=\"hljs\">\"Trust me.\"</code> even though both have different casing from the query. This is\nour failing test, and it will fail to compile because we haven‚Äôt yet defined\nthe <code class=\"hljs\">search_case_insensitive</code> function. Feel free to add a skeleton\nimplementation that always returns an empty vector, similar to the way we did\nfor the <code class=\"hljs\">search</code> function in Listing 12-16 to see the test compile and fail.</p>\n<h3 id=\"implementing-the-search_case_insensitive-function\"><a class=\"header\" href=\"#implementing-the-search_case_insensitive-function\">Implementing the <code>search_case_insensitive</code> Function</a></h3>\n<p>The <code class=\"hljs\">search_case_insensitive</code> function, shown in Listing 12-21, will be almost\nthe same as the <code class=\"hljs\">search</code> function. The only difference is that we‚Äôll lowercase\nthe <code class=\"hljs\">query</code> and each <code class=\"hljs\">line</code> so whatever the case of the input arguments,\nthey‚Äôll be the same case when we check whether the line contains the query.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::error::Error;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::fs;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Config</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> query: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> file_path: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Config {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">build</span></span>(args: &amp;[<span class=\"hljs-built_in\">String</span>]) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;Config, &amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span>&gt; {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> args.len() &lt; <span class=\"hljs-number\">3</span> {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">Err</span>(<span class=\"hljs-string\">\"not enough arguments\"</span>);\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = args[<span class=\"hljs-number\">1</span>].clone();\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> file_path = args[<span class=\"hljs-number\">2</span>].clone();\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-literal\">Ok</span>(Config { query, file_path })\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">run</span></span>(config: Config) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;(), <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> Error&gt;&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> contents = fs::read_to_string(config.file_path)?;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> search(&amp;config.query, &amp;contents) {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{line}\"</span>);\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-literal\">Ok</span>(())\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">search</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(query: &amp;<span class=\"hljs-built_in\">str</span>, contents: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>) -&gt; <span class=\"hljs-built_in\">Vec</span>&lt;&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> results = <span class=\"hljs-built_in\">Vec</span>::new();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> contents.lines() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> line.contains(query) {\n</span><span class=\"boring\">            results.push(line);\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    results\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">search_case_insensitive</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(\n    query: &amp;<span class=\"hljs-built_in\">str</span>,\n    contents: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>,\n) -&gt; <span class=\"hljs-built_in\">Vec</span>&lt;&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>&gt; {\n    <span class=\"hljs-keyword\">let</span> query = query.to_lowercase();\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> results = <span class=\"hljs-built_in\">Vec</span>::new();\n\n    <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> contents.lines() {\n        <span class=\"hljs-keyword\">if</span> line.to_lowercase().contains(&amp;query) {\n            results.push(line);\n        }\n    }\n\n    results\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-meta\">#[cfg(test)]</span>\n</span><span class=\"boring\"><span class=\"hljs-keyword\">mod</span> tests {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">use</span> super::*;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-meta\">#[test]</span>\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">case_sensitive</span></span>() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = <span class=\"hljs-string\">\"duct\"</span>;\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> contents = <span class=\"hljs-string\">\"\\\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Rust:\n</span></span><span class=\"boring\"><span class=\"hljs-string\">safe, fast, productive.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Pick three.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Duct tape.\"</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">\"safe, fast, productive.\"</span>], search(query, contents));\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-meta\">#[test]</span>\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">case_insensitive</span></span>() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = <span class=\"hljs-string\">\"rUsT\"</span>;\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> contents = <span class=\"hljs-string\">\"\\\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Rust:\n</span></span><span class=\"boring\"><span class=\"hljs-string\">safe, fast, productive.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Pick three.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Trust me.\"</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert_eq!</span>(\n</span><span class=\"boring\">            <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">\"Rust:\"</span>, <span class=\"hljs-string\">\"Trust me.\"</span>],\n</span><span class=\"boring\">            search_case_insensitive(query, contents)\n</span><span class=\"boring\">        );\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre>\n<p><span class=\"caption\">Listing 12-21: Defining the <code class=\"hljs\">search_case_insensitive</code>\nfunction to lowercase the query and the line before comparing them</span></p>\n<p>First, we lowercase the <code class=\"hljs\">query</code> string and store it in a shadowed variable with\nthe same name. Calling <code class=\"hljs\">to_lowercase</code> on the query is necessary so no\nmatter whether the user‚Äôs query is <code class=\"hljs\">\"rust\"</code>, <code class=\"hljs\">\"RUST\"</code>, <code class=\"hljs\">\"Rust\"</code>, or <code class=\"hljs\">\"rUsT\"</code>,\nwe‚Äôll treat the query as if it were <code class=\"hljs\">\"rust\"</code> and be insensitive to the case.\nWhile <code class=\"hljs\">to_lowercase</code> will handle basic Unicode, it won‚Äôt be 100% accurate. If\nwe were writing a real application, we‚Äôd want to do a bit more work here, but\nthis section is about environment variables, not Unicode, so we‚Äôll leave it at\nthat here.</p>\n<p>Note that <code class=\"hljs\">query</code> is now a <code class=\"hljs\">String</code> rather than a string slice, because calling\n<code class=\"hljs\">to_lowercase</code> creates new data rather than referencing existing data. Say the\nquery is <code class=\"hljs\">\"rUsT\"</code>, as an example: that string slice doesn‚Äôt contain a lowercase\n<code class=\"hljs\">u</code> or <code class=\"hljs\">t</code> for us to use, so we have to allocate a new <code class=\"hljs\">String</code> containing\n<code class=\"hljs\">\"rust\"</code>. When we pass <code class=\"hljs\">query</code> as an argument to the <code class=\"hljs\">contains</code> method now, we\nneed to add an ampersand because the signature of <code class=\"hljs\">contains</code> is defined to take\na string slice.</p>\n<p>Next, we add a call to <code class=\"hljs\">to_lowercase</code> on each <code class=\"hljs\">line</code> to lowercase all\ncharacters. Now that we‚Äôve converted <code class=\"hljs\">line</code> and <code class=\"hljs\">query</code> to lowercase, we‚Äôll\nfind matches no matter what the case of the query is.</p>\n<p>Let‚Äôs see if this implementation passes the tests:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo <span class=\"hljs-built_in\">test</span></span>\n   Compiling minigrep v0.1.0 (file:///projects/minigrep)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 1.33s\n     Running unittests src/lib.rs (target/debug/deps/minigrep-9cd200e5fac0fc94)\n\nrunning 2 tests\ntest tests::case_insensitive ... ok\ntest tests::case_sensitive ... ok\n\ntest result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n     Running unittests src/main.rs (target/debug/deps/minigrep-9cd200e5fac0fc94)\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n   Doc-tests minigrep\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n</code></pre>\n<p>Great! They passed. Now, let‚Äôs call the new <code class=\"hljs\">search_case_insensitive</code> function\nfrom the <code class=\"hljs\">run</code> function. First, we‚Äôll add a configuration option to the\n<code class=\"hljs\">Config</code> struct to switch between case-sensitive and case-insensitive search.\nAdding this field will cause compiler errors because we aren‚Äôt initializing\nthis field anywhere yet:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::error::Error;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::fs;\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Config</span></span> {\n    <span class=\"hljs-keyword\">pub</span> query: <span class=\"hljs-built_in\">String</span>,\n    <span class=\"hljs-keyword\">pub</span> file_path: <span class=\"hljs-built_in\">String</span>,\n    <span class=\"hljs-keyword\">pub</span> ignore_case: <span class=\"hljs-built_in\">bool</span>,\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Config {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">build</span></span>(args: &amp;[<span class=\"hljs-built_in\">String</span>]) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;Config, &amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span>&gt; {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> args.len() &lt; <span class=\"hljs-number\">3</span> {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">Err</span>(<span class=\"hljs-string\">\"not enough arguments\"</span>);\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = args[<span class=\"hljs-number\">1</span>].clone();\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> file_path = args[<span class=\"hljs-number\">2</span>].clone();\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-literal\">Ok</span>(Config { query, file_path })\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">run</span></span>(config: Config) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;(), <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> Error&gt;&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> contents = fs::read_to_string(config.file_path)?;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> results = <span class=\"hljs-keyword\">if</span> config.ignore_case {\n</span><span class=\"boring\">        search_case_insensitive(&amp;config.query, &amp;contents)\n</span><span class=\"boring\">    } <span class=\"hljs-keyword\">else</span> {\n</span><span class=\"boring\">        search(&amp;config.query, &amp;contents)\n</span><span class=\"boring\">    };\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> results {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{line}\"</span>);\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-literal\">Ok</span>(())\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">search</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(query: &amp;<span class=\"hljs-built_in\">str</span>, contents: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>) -&gt; <span class=\"hljs-built_in\">Vec</span>&lt;&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> results = <span class=\"hljs-built_in\">Vec</span>::new();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> contents.lines() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> line.contains(query) {\n</span><span class=\"boring\">            results.push(line);\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    results\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">search_case_insensitive</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(\n</span><span class=\"boring\">    query: &amp;<span class=\"hljs-built_in\">str</span>,\n</span><span class=\"boring\">    contents: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>,\n</span><span class=\"boring\">) -&gt; <span class=\"hljs-built_in\">Vec</span>&lt;&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> query = query.to_lowercase();\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> results = <span class=\"hljs-built_in\">Vec</span>::new();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> contents.lines() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> line.to_lowercase().contains(&amp;query) {\n</span><span class=\"boring\">            results.push(line);\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    results\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-meta\">#[cfg(test)]</span>\n</span><span class=\"boring\"><span class=\"hljs-keyword\">mod</span> tests {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">use</span> super::*;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-meta\">#[test]</span>\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">case_sensitive</span></span>() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = <span class=\"hljs-string\">\"duct\"</span>;\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> contents = <span class=\"hljs-string\">\"\\\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Rust:\n</span></span><span class=\"boring\"><span class=\"hljs-string\">safe, fast, productive.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Pick three.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Duct tape.\"</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">\"safe, fast, productive.\"</span>], search(query, contents));\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-meta\">#[test]</span>\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">case_insensitive</span></span>() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = <span class=\"hljs-string\">\"rUsT\"</span>;\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> contents = <span class=\"hljs-string\">\"\\\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Rust:\n</span></span><span class=\"boring\"><span class=\"hljs-string\">safe, fast, productive.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Pick three.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Trust me.\"</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert_eq!</span>(\n</span><span class=\"boring\">            <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">\"Rust:\"</span>, <span class=\"hljs-string\">\"Trust me.\"</span>],\n</span><span class=\"boring\">            search_case_insensitive(query, contents)\n</span><span class=\"boring\">        );\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre>\n<p>We added the <code class=\"hljs\">ignore_case</code> field that holds a Boolean. Next, we need the <code class=\"hljs\">run</code>\nfunction to check the <code class=\"hljs\">ignore_case</code> field‚Äôs value and use that to decide\nwhether to call the <code class=\"hljs\">search</code> function or the <code class=\"hljs\">search_case_insensitive</code>\nfunction, as shown in Listing 12-22. This still won‚Äôt compile yet.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::error::Error;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::fs;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Config</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> query: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> file_path: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> ignore_case: <span class=\"hljs-built_in\">bool</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Config {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">build</span></span>(args: &amp;[<span class=\"hljs-built_in\">String</span>]) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;Config, &amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span>&gt; {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> args.len() &lt; <span class=\"hljs-number\">3</span> {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">Err</span>(<span class=\"hljs-string\">\"not enough arguments\"</span>);\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = args[<span class=\"hljs-number\">1</span>].clone();\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> file_path = args[<span class=\"hljs-number\">2</span>].clone();\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-literal\">Ok</span>(Config { query, file_path })\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">run</span></span>(config: Config) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;(), <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> Error&gt;&gt; {\n    <span class=\"hljs-keyword\">let</span> contents = fs::read_to_string(config.file_path)?;\n\n    <span class=\"hljs-keyword\">let</span> results = <span class=\"hljs-keyword\">if</span> config.ignore_case {\n        search_case_insensitive(&amp;config.query, &amp;contents)\n    } <span class=\"hljs-keyword\">else</span> {\n        search(&amp;config.query, &amp;contents)\n    };\n\n    <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> results {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{line}\"</span>);\n    }\n\n    <span class=\"hljs-literal\">Ok</span>(())\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">search</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(query: &amp;<span class=\"hljs-built_in\">str</span>, contents: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>) -&gt; <span class=\"hljs-built_in\">Vec</span>&lt;&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> results = <span class=\"hljs-built_in\">Vec</span>::new();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> contents.lines() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> line.contains(query) {\n</span><span class=\"boring\">            results.push(line);\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    results\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">search_case_insensitive</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(\n</span><span class=\"boring\">    query: &amp;<span class=\"hljs-built_in\">str</span>,\n</span><span class=\"boring\">    contents: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>,\n</span><span class=\"boring\">) -&gt; <span class=\"hljs-built_in\">Vec</span>&lt;&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> query = query.to_lowercase();\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> results = <span class=\"hljs-built_in\">Vec</span>::new();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> contents.lines() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> line.to_lowercase().contains(&amp;query) {\n</span><span class=\"boring\">            results.push(line);\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    results\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-meta\">#[cfg(test)]</span>\n</span><span class=\"boring\"><span class=\"hljs-keyword\">mod</span> tests {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">use</span> super::*;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-meta\">#[test]</span>\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">case_sensitive</span></span>() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = <span class=\"hljs-string\">\"duct\"</span>;\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> contents = <span class=\"hljs-string\">\"\\\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Rust:\n</span></span><span class=\"boring\"><span class=\"hljs-string\">safe, fast, productive.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Pick three.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Duct tape.\"</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">\"safe, fast, productive.\"</span>], search(query, contents));\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-meta\">#[test]</span>\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">case_insensitive</span></span>() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = <span class=\"hljs-string\">\"rUsT\"</span>;\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> contents = <span class=\"hljs-string\">\"\\\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Rust:\n</span></span><span class=\"boring\"><span class=\"hljs-string\">safe, fast, productive.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Pick three.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Trust me.\"</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert_eq!</span>(\n</span><span class=\"boring\">            <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">\"Rust:\"</span>, <span class=\"hljs-string\">\"Trust me.\"</span>],\n</span><span class=\"boring\">            search_case_insensitive(query, contents)\n</span><span class=\"boring\">        );\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre>\n<p><span class=\"caption\">Listing 12-22: Calling either <code class=\"hljs\">search</code> or\n<code class=\"hljs\">search_case_insensitive</code> based on the value in <code class=\"hljs\">config.ignore_case</code></span></p>\n<p>Finally, we need to check for the environment variable. The functions for\nworking with environment variables are in the <code class=\"hljs\">env</code> module in the standard\nlibrary, so we bring that module into scope at the top of <em>src/lib.rs</em>. Then\nwe‚Äôll use the <code class=\"hljs\">var</code> function from the <code class=\"hljs\">env</code> module to check if any value\nhas been set for an environment variable named <code class=\"hljs\">IGNORE_CASE</code>, as shown in\nListing 12-23.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground hljs hide-boring\"><span class=\"hljs-keyword\">use</span> std::env;\n<span class=\"hljs-comment\">// --snip--</span>\n\n<span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::error::Error;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::fs;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Config</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> query: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> file_path: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> ignore_case: <span class=\"hljs-built_in\">bool</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">impl</span> Config {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">build</span></span>(args: &amp;[<span class=\"hljs-built_in\">String</span>]) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;Config, &amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span>&gt; {\n        <span class=\"hljs-keyword\">if</span> args.len() &lt; <span class=\"hljs-number\">3</span> {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">Err</span>(<span class=\"hljs-string\">\"not enough arguments\"</span>);\n        }\n\n        <span class=\"hljs-keyword\">let</span> query = args[<span class=\"hljs-number\">1</span>].clone();\n        <span class=\"hljs-keyword\">let</span> file_path = args[<span class=\"hljs-number\">2</span>].clone();\n\n        <span class=\"hljs-keyword\">let</span> ignore_case = env::var(<span class=\"hljs-string\">\"IGNORE_CASE\"</span>).is_ok();\n\n        <span class=\"hljs-literal\">Ok</span>(Config {\n            query,\n            file_path,\n            ignore_case,\n        })\n    }\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">run</span></span>(config: Config) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;(), <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> Error&gt;&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> contents = fs::read_to_string(config.file_path)?;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> results = <span class=\"hljs-keyword\">if</span> config.ignore_case {\n</span><span class=\"boring\">        search_case_insensitive(&amp;config.query, &amp;contents)\n</span><span class=\"boring\">    } <span class=\"hljs-keyword\">else</span> {\n</span><span class=\"boring\">        search(&amp;config.query, &amp;contents)\n</span><span class=\"boring\">    };\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> results {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{line}\"</span>);\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-literal\">Ok</span>(())\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">search</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(query: &amp;<span class=\"hljs-built_in\">str</span>, contents: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>) -&gt; <span class=\"hljs-built_in\">Vec</span>&lt;&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> results = <span class=\"hljs-built_in\">Vec</span>::new();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> contents.lines() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> line.contains(query) {\n</span><span class=\"boring\">            results.push(line);\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    results\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">search_case_insensitive</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(\n</span><span class=\"boring\">    query: &amp;<span class=\"hljs-built_in\">str</span>,\n</span><span class=\"boring\">    contents: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>,\n</span><span class=\"boring\">) -&gt; <span class=\"hljs-built_in\">Vec</span>&lt;&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> query = query.to_lowercase();\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> results = <span class=\"hljs-built_in\">Vec</span>::new();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> contents.lines() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> line.to_lowercase().contains(&amp;query) {\n</span><span class=\"boring\">            results.push(line);\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    results\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-meta\">#[cfg(test)]</span>\n</span><span class=\"boring\"><span class=\"hljs-keyword\">mod</span> tests {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">use</span> super::*;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-meta\">#[test]</span>\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">case_sensitive</span></span>() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = <span class=\"hljs-string\">\"duct\"</span>;\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> contents = <span class=\"hljs-string\">\"\\\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Rust:\n</span></span><span class=\"boring\"><span class=\"hljs-string\">safe, fast, productive.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Pick three.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Duct tape.\"</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">\"safe, fast, productive.\"</span>], search(query, contents));\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-meta\">#[test]</span>\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">case_insensitive</span></span>() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = <span class=\"hljs-string\">\"rUsT\"</span>;\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> contents = <span class=\"hljs-string\">\"\\\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Rust:\n</span></span><span class=\"boring\"><span class=\"hljs-string\">safe, fast, productive.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Pick three.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Trust me.\"</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert_eq!</span>(\n</span><span class=\"boring\">            <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">\"Rust:\"</span>, <span class=\"hljs-string\">\"Trust me.\"</span>],\n</span><span class=\"boring\">            search_case_insensitive(query, contents)\n</span><span class=\"boring\">        );\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre>\n<p><span class=\"caption\">Listing 12-23: Checking for any value in an environment\nvariable named <code class=\"hljs\">IGNORE_CASE</code></span></p>\n<p>Here, we create a new variable <code class=\"hljs\">ignore_case</code>. To set its value, we call the\n<code class=\"hljs\">env::var</code> function and pass it the name of the <code class=\"hljs\">IGNORE_CASE</code> environment\nvariable. The <code class=\"hljs\">env::var</code> function returns a <code class=\"hljs\">Result</code> that will be the\nsuccessful <code class=\"hljs\">Ok</code> variant that contains the value of the environment variable if\nthe environment variable is set to any value. It will return the <code class=\"hljs\">Err</code> variant\nif the environment variable is not set.</p>\n<p>We‚Äôre using the <code class=\"hljs\">is_ok</code> method on the <code class=\"hljs\">Result</code> to check whether the environment\nvariable is set, which means the program should do a case-insensitive search.\nIf the <code class=\"hljs\">IGNORE_CASE</code> environment variable isn‚Äôt set to anything, <code class=\"hljs\">is_ok</code> will\nreturn false and the program will perform a case-sensitive search. We don‚Äôt\ncare about the <em>value</em> of the environment variable, just whether it‚Äôs set or\nunset, so we‚Äôre checking <code class=\"hljs\">is_ok</code> rather than using <code class=\"hljs\">unwrap</code>, <code class=\"hljs\">expect</code>, or any\nof the other methods we‚Äôve seen on <code class=\"hljs\">Result</code>.</p>\n<p>We pass the value in the <code class=\"hljs\">ignore_case</code> variable to the <code class=\"hljs\">Config</code> instance so the\n<code class=\"hljs\">run</code> function can read that value and decide whether to call\n<code class=\"hljs\">search_case_insensitive</code> or <code class=\"hljs\">search</code>, as we implemented in Listing 12-22.</p>\n<p>Let‚Äôs give it a try! First, we‚Äôll run our program without the environment\nvariable set and with the query <code class=\"hljs\">to</code>, which should match any line that contains\nthe word ‚Äúto‚Äù in all lowercase:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run -- to poem.txt</span>\n   Compiling minigrep v0.1.0 (file:///projects/minigrep)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.0s\n     Running `target/debug/minigrep to poem.txt`\nAre you nobody, too?\nHow dreary to be somebody!\n</code></pre>\n<p>Looks like that still works! Now, let‚Äôs run the program with <code class=\"hljs\">IGNORE_CASE</code>\nset to <code class=\"hljs\">1</code> but with the same query <code class=\"hljs\">to</code>.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> IGNORE_CASE=1 cargo run -- to poem.txt</span>\n</code></pre>\n<p>If you‚Äôre using PowerShell, you will need to set the environment variable and\nrun the program as separate commands:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">PS&gt;</span><span class=\"bash\"> <span class=\"hljs-variable\">$Env</span>:IGNORE_CASE=1; cargo run -- to poem.txt</span>\n</code></pre>\n<p>This will make <code class=\"hljs\">IGNORE_CASE</code> persist for the remainder of your shell\nsession. It can be unset with the <code class=\"hljs\">Remove-Item</code> cmdlet:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">PS&gt;</span><span class=\"bash\"> Remove-Item Env:IGNORE_CASE</span>\n</code></pre>\n<p>We should get lines that contain ‚Äúto‚Äù that might have uppercase letters:</p>\n<!-- manual-regeneration\ncd listings/ch12-an-io-project/listing-12-23\nIGNORE_CASE=1 cargo run -- to poem.txt\ncan't extract because of the environment variable\n-->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\">Are you nobody, too?\nHow dreary to be somebody!\nTo tell your name the livelong day\nTo an admiring bog!\n</code></pre>\n<p>Excellent, we also got lines containing ‚ÄúTo‚Äù! Our <code class=\"hljs\">minigrep</code> program can now do\ncase-insensitive searching controlled by an environment variable. Now you know\nhow to manage options set using either command line arguments or environment\nvariables.</p>\n<p>Some programs allow arguments <em>and</em> environment variables for the same\nconfiguration. In those cases, the programs decide that one or the other takes\nprecedence. For another exercise on your own, try controlling case sensitivity\nthrough either a command line argument or an environment variable. Decide\nwhether the command line argument or the environment variable should take\nprecedence if the program is run with one set to case sensitive and one set to\nignore case.</p>\n<p>The <code class=\"hljs\">std::env</code> module contains many more useful features for dealing with\nenvironment variables: check out its documentation to see what is available.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"writing-error-messages-to-standard-error-instead-of-standard-output\"><a class=\"header\" href=\"#writing-error-messages-to-standard-error-instead-of-standard-output\">Writing Error Messages to Standard Error Instead of Standard Output</a></h2>\n<p>At the moment, we‚Äôre writing all of our output to the terminal using the\n<code class=\"hljs\">println!</code> macro. In most terminals, there are two kinds of output: <em>standard\noutput</em> (<code class=\"hljs\">stdout</code>) for general information and <em>standard error</em> (<code class=\"hljs\">stderr</code>) for\nerror messages. This distinction enables users to choose to direct the\nsuccessful output of a program to a file but still print error messages to the\nscreen.</p>\n<p>The <code class=\"hljs\">println!</code> macro is only capable of printing to standard output, so we\nhave to use something else to print to standard error.</p>\n<h3 id=\"checking-where-errors-are-written\"><a class=\"header\" href=\"#checking-where-errors-are-written\">Checking Where Errors Are Written</a></h3>\n<p>First, let‚Äôs observe how the content printed by <code class=\"hljs\">minigrep</code> is currently being\nwritten to standard output, including any error messages we want to write to\nstandard error instead. We‚Äôll do that by redirecting the standard output stream\nto a file while intentionally causing an error. We won‚Äôt redirect the standard\nerror stream, so any content sent to standard error will continue to display on\nthe screen.</p>\n<p>Command line programs are expected to send error messages to the standard error\nstream so we can still see error messages on the screen even if we redirect the\nstandard output stream to a file. Our program is not currently well-behaved:\nwe‚Äôre about to see that it saves the error message output to a file instead!</p>\n<p>To demonstrate this behavior, we‚Äôll run the program with <code class=\"hljs\">&gt;</code> and the file path,\n<em>output.txt</em>, that we want to redirect the standard output stream to. We won‚Äôt\npass any arguments, which should cause an error:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run &gt; output.txt</span>\n</code></pre>\n<p>The <code class=\"hljs\">&gt;</code> syntax tells the shell to write the contents of standard output to\n<em>output.txt</em> instead of the screen. We didn‚Äôt see the error message we were\nexpecting printed to the screen, so that means it must have ended up in the\nfile. This is what <em>output.txt</em> contains:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">Problem parsing arguments: not enough arguments\n</code></pre>\n<p>Yup, our error message is being printed to standard output. It‚Äôs much more\nuseful for error messages like this to be printed to standard error so only\ndata from a successful run ends up in the file. We‚Äôll change that.</p>\n<h3 id=\"printing-errors-to-standard-error\"><a class=\"header\" href=\"#printing-errors-to-standard-error\">Printing Errors to Standard Error</a></h3>\n<p>We‚Äôll use the code in Listing 12-24 to change how error messages are printed.\nBecause of the refactoring we did earlier in this chapter, all the code that\nprints error messages is in one function, <code class=\"hljs\">main</code>. The standard library provides\nthe <code class=\"hljs\">eprintln!</code> macro that prints to the standard error stream, so let‚Äôs change\nthe two places we were calling <code class=\"hljs\">println!</code> to print errors to use <code class=\"hljs\">eprintln!</code>\ninstead.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::env;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::process;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> minigrep::Config;\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> args: <span class=\"hljs-built_in\">Vec</span>&lt;<span class=\"hljs-built_in\">String</span>&gt; = env::args().collect();\n\n    <span class=\"hljs-keyword\">let</span> config = Config::build(&amp;args).unwrap_or_else(|err| {\n        eprintln!(<span class=\"hljs-string\">\"Problem parsing arguments: {err}\"</span>);\n        process::exit(<span class=\"hljs-number\">1</span>);\n    });\n\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-literal\">Err</span>(e) = minigrep::run(config) {\n        eprintln!(<span class=\"hljs-string\">\"Application error: {e}\"</span>);\n        process::exit(<span class=\"hljs-number\">1</span>);\n    }\n}</code></pre>\n<p><span class=\"caption\">Listing 12-24: Writing error messages to standard error\ninstead of standard output using <code class=\"hljs\">eprintln!</code></span></p>\n<p>Let‚Äôs now run the program again in the same way, without any arguments and\nredirecting standard output with <code class=\"hljs\">&gt;</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run &gt; output.txt</span>\nProblem parsing arguments: not enough arguments\n</code></pre>\n<p>Now we see the error onscreen and <em>output.txt</em> contains nothing, which is the\nbehavior we expect of command line programs.</p>\n<p>Let‚Äôs run the program again with arguments that don‚Äôt cause an error but still\nredirect standard output to a file, like so:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run -- to poem.txt &gt; output.txt</span>\n</code></pre>\n<p>We won‚Äôt see any output to the terminal, and <em>output.txt</em> will contain our\nresults:</p>\n<p><span class=\"filename\">Filename: output.txt</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">Are you nobody, too?\nHow dreary to be somebody!\n</code></pre>\n<p>This demonstrates that we‚Äôre now using standard output for successful output\nand standard error for error output as appropriate.</p>\n<h2 id=\"summary-11\"><a class=\"header\" href=\"#summary-11\">Summary</a></h2>\n<p>This chapter recapped some of the major concepts you‚Äôve learned so far and\ncovered how to perform common I/O operations in Rust. By using command line\narguments, files, environment variables, and the <code class=\"hljs\">eprintln!</code> macro for printing\nerrors, you‚Äôre now prepared to write command line applications. Combined with\nthe concepts in previous chapters, your code will be well organized, store data\neffectively in the appropriate data structures, handle errors nicely, and be\nwell tested.</p>\n<p>Next, we‚Äôll explore some Rust features that were influenced by functional\nlanguages: closures and iterators.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"functional-language-features-iterators-and-closures\"><a class=\"header\" href=\"#functional-language-features-iterators-and-closures\">Functional Language Features: Iterators and Closures</a></h1>\n<p>Rust‚Äôs design has taken inspiration from many existing languages and\ntechniques, and one significant influence is <em>functional programming</em>.\nProgramming in a functional style often includes using functions as values by\npassing them in arguments, returning them from other functions, assigning them\nto variables for later execution, and so forth.</p>\n<p>In this chapter, we won‚Äôt debate the issue of what functional programming is or\nisn‚Äôt but will instead discuss some features of Rust that are similar to\nfeatures in many languages often referred to as functional.</p>\n<p>More specifically, we‚Äôll cover:</p>\n<ul>\n<li><em>Closures</em>, a function-like construct you can store in a variable</li>\n<li><em>Iterators</em>, a way of processing a series of elements</li>\n<li>How to use closures and iterators to improve the I/O project in Chapter 12</li>\n<li>The performance of closures and iterators (Spoiler alert: they‚Äôre faster than\nyou might think!)</li>\n</ul>\n<p>We‚Äôve already covered some other Rust features, such as pattern matching and\nenums, that are also influenced by the functional style. Because mastering\nclosures and iterators is an important part of writing idiomatic, fast Rust\ncode, we‚Äôll devote this entire chapter to them.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><!-- Old heading. Do not remove or links may break. -->\n<p><a id=\"closures-anonymous-functions-that-can-capture-their-environment\"></a></p>\n<h2 id=\"closures-anonymous-functions-that-capture-their-environment\"><a class=\"header\" href=\"#closures-anonymous-functions-that-capture-their-environment\">Closures: Anonymous Functions that Capture Their Environment</a></h2>\n<p>Rust‚Äôs closures are anonymous functions you can save in a variable or pass as\narguments to other functions. You can create the closure in one place and then\ncall the closure elsewhere to evaluate it in a different context. Unlike\nfunctions, closures can capture values from the scope in which they‚Äôre defined.\nWe‚Äôll demonstrate how these closure features allow for code reuse and behavior\ncustomization.</p>\n<!-- Old headings. Do not remove or links may break. -->\n<p><a id=\"creating-an-abstraction-of-behavior-with-closures\"></a>\n<a id=\"refactoring-using-functions\"></a>\n<a id=\"refactoring-with-closures-to-store-code\"></a></p>\n<h3 id=\"capturing-the-environment-with-closures\"><a class=\"header\" href=\"#capturing-the-environment-with-closures\">Capturing the Environment with Closures</a></h3>\n<p>We‚Äôll first examine how we can use closures to capture values from the\nenvironment they‚Äôre defined in for later use. Here‚Äôs the scenario: Every so\noften, our t-shirt company gives away an exclusive, limited-edition shirt to\nsomeone on our mailing list as a promotion. People on the mailing list can\noptionally add their favorite color to their profile. If the person chosen for\na free shirt has their favorite color set, they get that color shirt. If the\nperson hasn‚Äôt specified a favorite color, they get whatever color the company\ncurrently has the most of.</p>\n<p>There are many ways to implement this. For this example, we‚Äôre going to use an\nenum called <code class=\"hljs\">ShirtColor</code> that has the variants <code class=\"hljs\">Red</code> and <code class=\"hljs\">Blue</code> (limiting the\nnumber of colors available for simplicity). We represent the company‚Äôs\ninventory with an <code class=\"hljs\">Inventory</code> struct that has a field named <code class=\"hljs\">shirts</code> that\ncontains a <code class=\"hljs\">Vec&lt;ShirtColor&gt;</code> representing the shirt colors currently in stock.\nThe method <code class=\"hljs\">giveaway</code> defined on <code class=\"hljs\">Inventory</code> gets the optional shirt\ncolor preference of the free shirt winner, and returns the shirt color the\nperson will get. This setup is shown in Listing 13-1:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust noplayground hljs\"><span class=\"hljs-meta\">#[derive(Debug, PartialEq, Copy, Clone)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">ShirtColor</span></span> {\n    Red,\n    Blue,\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Inventory</span></span> {\n    shirts: <span class=\"hljs-built_in\">Vec</span>&lt;ShirtColor&gt;,\n}\n\n<span class=\"hljs-keyword\">impl</span> Inventory {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">giveaway</span></span>(&amp;<span class=\"hljs-keyword\">self</span>, user_preference: <span class=\"hljs-built_in\">Option</span>&lt;ShirtColor&gt;) -&gt; ShirtColor {\n        user_preference.unwrap_or_else(|| <span class=\"hljs-keyword\">self</span>.most_stocked())\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">most_stocked</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; ShirtColor {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> num_red = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> num_blue = <span class=\"hljs-number\">0</span>;\n\n        <span class=\"hljs-keyword\">for</span> color <span class=\"hljs-keyword\">in</span> &amp;<span class=\"hljs-keyword\">self</span>.shirts {\n            <span class=\"hljs-keyword\">match</span> color {\n                ShirtColor::Red =&gt; num_red += <span class=\"hljs-number\">1</span>,\n                ShirtColor::Blue =&gt; num_blue += <span class=\"hljs-number\">1</span>,\n            }\n        }\n        <span class=\"hljs-keyword\">if</span> num_red &gt; num_blue {\n            ShirtColor::Red\n        } <span class=\"hljs-keyword\">else</span> {\n            ShirtColor::Blue\n        }\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> store = Inventory {\n        shirts: <span class=\"hljs-built_in\">vec!</span>[ShirtColor::Blue, ShirtColor::Red, ShirtColor::Blue],\n    };\n\n    <span class=\"hljs-keyword\">let</span> user_pref1 = <span class=\"hljs-literal\">Some</span>(ShirtColor::Red);\n    <span class=\"hljs-keyword\">let</span> giveaway1 = store.giveaway(user_pref1);\n    <span class=\"hljs-built_in\">println!</span>(\n        <span class=\"hljs-string\">\"The user with preference {:?} gets {:?}\"</span>,\n        user_pref1, giveaway1\n    );\n\n    <span class=\"hljs-keyword\">let</span> user_pref2 = <span class=\"hljs-literal\">None</span>;\n    <span class=\"hljs-keyword\">let</span> giveaway2 = store.giveaway(user_pref2);\n    <span class=\"hljs-built_in\">println!</span>(\n        <span class=\"hljs-string\">\"The user with preference {:?} gets {:?}\"</span>,\n        user_pref2, giveaway2\n    );\n}</code></pre>\n<p><span class=\"caption\">Listing 13-1: Shirt company giveaway situation</span></p>\n<p>The <code class=\"hljs\">store</code> defined in <code class=\"hljs\">main</code> has two blue shirts and one red shirt remaining\nto distribute for this limited-edition promotion. We call the <code class=\"hljs\">giveaway</code> method\nfor a user with a preference for a red shirt and a user without any preference.</p>\n<p>Again, this code could be implemented in many ways, and here, to focus on\nclosures, we‚Äôve stuck to concepts you‚Äôve already learned except for the body of\nthe <code class=\"hljs\">giveaway</code> method that uses a closure. In the <code class=\"hljs\">giveaway</code> method, we get the\nuser preference as a parameter of type <code class=\"hljs\">Option&lt;ShirtColor&gt;</code> and call the\n<code class=\"hljs\">unwrap_or_else</code> method on <code class=\"hljs\">user_preference</code>. The <a href=\"../std/option/enum.Option.html#method.unwrap_or_else\"><code class=\"hljs\">unwrap_or_else</code> method on\n<code class=\"hljs\">Option&lt;T&gt;</code></a><!-- ignore --> is defined by the standard library.\nIt takes one argument: a closure without any arguments that returns a value <code class=\"hljs\">T</code>\n(the same type stored in the <code class=\"hljs\">Some</code> variant of the <code class=\"hljs\">Option&lt;T&gt;</code>, in this case\n<code class=\"hljs\">ShirtColor</code>). If the <code class=\"hljs\">Option&lt;T&gt;</code> is the <code class=\"hljs\">Some</code> variant, <code class=\"hljs\">unwrap_or_else</code>\nreturns the value from within the <code class=\"hljs\">Some</code>. If the <code class=\"hljs\">Option&lt;T&gt;</code> is the <code class=\"hljs\">None</code>\nvariant, <code class=\"hljs\">unwrap_or_else</code> calls the closure and returns the value returned by\nthe closure.</p>\n<p>We specify the closure expression <code class=\"hljs\">|| self.most_stocked()</code> as the argument to\n<code class=\"hljs\">unwrap_or_else</code>. This is a closure that takes no parameters itself (if the\nclosure had parameters, they would appear between the two vertical bars). The\nbody of the closure calls <code class=\"hljs\">self.most_stocked()</code>. We‚Äôre defining the closure\nhere, and the implementation of <code class=\"hljs\">unwrap_or_else</code> will evaluate the closure\nlater if the result is needed.</p>\n<p>Running this code prints:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling shirt-company v0.1.0 (file:///projects/shirt-company)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.27s\n     Running `target/debug/shirt-company`\nThe user with preference Some(Red) gets Red\nThe user with preference None gets Blue\n</code></pre>\n<p>One interesting aspect here is that we‚Äôve passed a closure that calls\n<code class=\"hljs\">self.most_stocked()</code> on the current <code class=\"hljs\">Inventory</code> instance. The standard library\ndidn‚Äôt need to know anything about the <code class=\"hljs\">Inventory</code> or <code class=\"hljs\">ShirtColor</code> types we\ndefined, or the logic we want to use in this scenario. The closure captures an\nimmutable reference to the <code class=\"hljs\">self</code> <code class=\"hljs\">Inventory</code> instance and passes it with the\ncode we specify to the <code class=\"hljs\">unwrap_or_else</code> method. Functions, on the other hand,\nare not able to capture their environment in this way.</p>\n<h3 id=\"closure-type-inference-and-annotation\"><a class=\"header\" href=\"#closure-type-inference-and-annotation\">Closure Type Inference and Annotation</a></h3>\n<p>There are more differences between functions and closures. Closures don‚Äôt\nusually require you to annotate the types of the parameters or the return value\nlike <code class=\"hljs\">fn</code> functions do. Type annotations are required on functions because the\ntypes are part of an explicit interface exposed to your users. Defining this\ninterface rigidly is important for ensuring that everyone agrees on what types\nof values a function uses and returns. Closures, on the other hand, aren‚Äôt used\nin an exposed interface like this: they‚Äôre stored in variables and used without\nnaming them and exposing them to users of our library.</p>\n<p>Closures are typically short and relevant only within a narrow context rather\nthan in any arbitrary scenario. Within these limited contexts, the compiler can\ninfer the types of the parameters and the return type, similar to how it‚Äôs able\nto infer the types of most variables (there are rare cases where the compiler\nneeds closure type annotations too).</p>\n<p>As with variables, we can add type annotations if we want to increase\nexplicitness and clarity at the cost of being more verbose than is strictly\nnecessary. Annotating the types for a closure would look like the definition\nshown in Listing 13-2. In this example, we‚Äôre defining a closure and storing it\nin a variable rather than defining the closure in the spot we pass it as an\nargument as we did in Listing 13-1.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::thread;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::time::Duration;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">generate_workout</span></span>(intensity: <span class=\"hljs-built_in\">u32</span>, random_number: <span class=\"hljs-built_in\">u32</span>) {\n</span>    <span class=\"hljs-keyword\">let</span> expensive_closure = |num: <span class=\"hljs-built_in\">u32</span>| -&gt; <span class=\"hljs-built_in\">u32</span> {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"calculating slowly...\"</span>);\n        thread::sleep(Duration::from_secs(<span class=\"hljs-number\">2</span>));\n        num\n    };\n<span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">if</span> intensity &lt; <span class=\"hljs-number\">25</span> {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Today, do {} pushups!\"</span>, expensive_closure(intensity));\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Next, do {} situps!\"</span>, expensive_closure(intensity));\n</span><span class=\"boring\">    } <span class=\"hljs-keyword\">else</span> {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> random_number == <span class=\"hljs-number\">3</span> {\n</span><span class=\"boring\">            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Take a break today! Remember to stay hydrated!\"</span>);\n</span><span class=\"boring\">        } <span class=\"hljs-keyword\">else</span> {\n</span><span class=\"boring\">            <span class=\"hljs-built_in\">println!</span>(\n</span><span class=\"boring\">                <span class=\"hljs-string\">\"Today, run for {} minutes!\"</span>,\n</span><span class=\"boring\">                expensive_closure(intensity)\n</span><span class=\"boring\">            );\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> simulated_user_specified_value = <span class=\"hljs-number\">10</span>;\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> simulated_random_number = <span class=\"hljs-number\">7</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    generate_workout(simulated_user_specified_value, simulated_random_number);\n</span><span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 13-2: Adding optional type annotations of the\nparameter and return value types in the closure</span></p>\n<p>With type annotations added, the syntax of closures looks more similar to the\nsyntax of functions. Here we define a function that adds 1 to its parameter and\na closure that has the same behavior, for comparison. We‚Äôve added some spaces\nto line up the relevant parts. This illustrates how closure syntax is similar\nto function syntax except for the use of pipes and the amount of syntax that is\noptional:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span>  <span class=\"hljs-title\">add_one_v1</span>   </span>(x: <span class=\"hljs-built_in\">u32</span>) -&gt; <span class=\"hljs-built_in\">u32</span> { x + <span class=\"hljs-number\">1</span> }\n<span class=\"hljs-keyword\">let</span> add_one_v2 = |x: <span class=\"hljs-built_in\">u32</span>| -&gt; <span class=\"hljs-built_in\">u32</span> { x + <span class=\"hljs-number\">1</span> };\n<span class=\"hljs-keyword\">let</span> add_one_v3 = |x|             { x + <span class=\"hljs-number\">1</span> };\n<span class=\"hljs-keyword\">let</span> add_one_v4 = |x|               x + <span class=\"hljs-number\">1</span>  ;</code></pre>\n<p>The first line shows a function definition, and the second line shows a fully\nannotated closure definition. In the third line, we remove the type annotations\nfrom the closure definition. In the fourth line, we remove the brackets, which\nare optional because the closure body has only one expression. These are all\nvalid definitions that will produce the same behavior when they‚Äôre called. The\n<code class=\"hljs\">add_one_v3</code> and <code class=\"hljs\">add_one_v4</code> lines require the closures to be evaluated to be\nable to compile because the types will be inferred from their usage. This is\nsimilar to <code class=\"hljs\">let v = Vec::new();</code> needing either type annotations or values of\nsome type to be inserted into the <code class=\"hljs\">Vec</code> for Rust to be able to infer the type.</p>\n<p>For closure definitions, the compiler will infer one concrete type for each of\ntheir parameters and for their return value. For instance, Listing 13-3 shows\nthe definition of a short closure that just returns the value it receives as a\nparameter. This closure isn‚Äôt very useful except for the purposes of this\nexample. Note that we haven‚Äôt added any type annotations to the definition.\nBecause there are no type annotations, we can call the closure with any type,\nwhich we‚Äôve done here with <code class=\"hljs\">String</code> the first time. If we then try to call\n<code class=\"hljs\">example_closure</code> with an integer, we‚Äôll get an error.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> example_closure = |x| x;\n\n    <span class=\"hljs-keyword\">let</span> s = example_closure(<span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"hello\"</span>));\n    <span class=\"hljs-keyword\">let</span> n = example_closure(<span class=\"hljs-number\">5</span>);\n<span class=\"boring\">}</span></code></pre>\n<p><span class=\"caption\">Listing 13-3: Attempting to call a closure whose types\nare inferred with two different types</span></p>\n<p>The compiler gives us this error:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling closure-example v0.1.0 (file:///projects/closure-example)\nerror[E0308]: mismatched types\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/main.rs:5:29</span>\n  |\n5 |     let n = example_closure(5);\n  |             --------------- ^- help: try using a conversion method: `.to_string()`\n  |             |               |\n  |             |               expected `String`, found integer\n  |             arguments to this function are incorrect\n  |\nnote: expected because the closure was earlier called with an argument of type `String`\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/main.rs:4:29</span>\n  |\n4 |     let s = example_closure(String::from(\"hello\"));\n  |             --------------- ^^^^^^^^^^^^^^^^^^^^^ expected because this argument is of type `String`\n  |             |\n  |             in this closure call\nnote: closure parameter defined here\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/main.rs:2:28</span>\n  |\n2 |     let example_closure = |x| x;\n  |                            ^\n\nFor more information about this error, try `rustc --explain E0308`.\nerror: could not compile `closure-example` (bin \"closure-example\") due to 1 previous error\n</code></pre>\n<p>The first time we call <code class=\"hljs\">example_closure</code> with the <code class=\"hljs\">String</code> value, the compiler\ninfers the type of <code class=\"hljs\">x</code> and the return type of the closure to be <code class=\"hljs\">String</code>. Those\ntypes are then locked into the closure in <code class=\"hljs\">example_closure</code>, and we get a type\nerror when we next try to use a different type with the same closure.</p>\n<h3 id=\"capturing-references-or-moving-ownership\"><a class=\"header\" href=\"#capturing-references-or-moving-ownership\">Capturing References or Moving Ownership</a></h3>\n<p>Closures can capture values from their environment in three ways, which\ndirectly map to the three ways a function can take a parameter: borrowing\nimmutably, borrowing mutably, and taking ownership. The closure will decide\nwhich of these to use based on what the body of the function does with the\ncaptured values.</p>\n<p>In Listing 13-4, we define a closure that captures an immutable reference to\nthe vector named <code class=\"hljs\">list</code> because it only needs an immutable reference to print\nthe value:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> list = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Before defining closure: {list:?}\"</span>);\n\n    <span class=\"hljs-keyword\">let</span> only_borrows = || <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"From closure: {list:?}\"</span>);\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Before calling closure: {list:?}\"</span>);\n    only_borrows();\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"After calling closure: {list:?}\"</span>);\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 13-4: Defining and calling a closure that\ncaptures an immutable reference</span></p>\n<p>This example also illustrates that a variable can bind to a closure definition,\nand we can later call the closure by using the variable name and parentheses as\nif the variable name were a function name.</p>\n<p>Because we can have multiple immutable references to <code class=\"hljs\">list</code> at the same time,\n<code class=\"hljs\">list</code> is still accessible from the code before the closure definition, after\nthe closure definition but before the closure is called, and after the closure\nis called. This code compiles, runs, and prints:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling closure-example v0.1.0 (file:///projects/closure-example)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.43s\n     Running `target/debug/closure-example`\nBefore defining closure: [1, 2, 3]\nBefore calling closure: [1, 2, 3]\nFrom closure: [1, 2, 3]\nAfter calling closure: [1, 2, 3]\n</code></pre>\n<p>Next, in Listing 13-5, we change the closure body so that it adds an element to\nthe <code class=\"hljs\">list</code> vector. The closure now captures a mutable reference:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> list = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Before defining closure: {list:?}\"</span>);\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> borrows_mutably = || list.push(<span class=\"hljs-number\">7</span>);\n\n    borrows_mutably();\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"After calling closure: {list:?}\"</span>);\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 13-5: Defining and calling a closure that\ncaptures a mutable reference</span></p>\n<p>This code compiles, runs, and prints:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling closure-example v0.1.0 (file:///projects/closure-example)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.43s\n     Running `target/debug/closure-example`\nBefore defining closure: [1, 2, 3]\nAfter calling closure: [1, 2, 3, 7]\n</code></pre>\n<p>Note that there‚Äôs no longer a <code class=\"hljs\">println!</code> between the definition and the call of\nthe <code class=\"hljs\">borrows_mutably</code> closure: when <code class=\"hljs\">borrows_mutably</code> is defined, it captures a\nmutable reference to <code class=\"hljs\">list</code>. We don‚Äôt use the closure again after the closure\nis called, so the mutable borrow ends. Between the closure definition and the\nclosure call, an immutable borrow to print isn‚Äôt allowed because no other\nborrows are allowed when there‚Äôs a mutable borrow. Try adding a <code class=\"hljs\">println!</code>\nthere to see what error message you get!</p>\n<p>If you want to force the closure to take ownership of the values it uses in the\nenvironment even though the body of the closure doesn‚Äôt strictly need\nownership, you can use the <code class=\"hljs\">move</code> keyword before the parameter list.</p>\n<p>This technique is mostly useful when passing a closure to a new thread to move\nthe data so that it‚Äôs owned by the new thread. We‚Äôll discuss threads and why\nyou would want to use them in detail in Chapter 16 when we talk about\nconcurrency, but for now, let‚Äôs briefly explore spawning a new thread using a\nclosure that needs the <code class=\"hljs\">move</code> keyword. Listing 13-6 shows Listing 13-4 modified\nto print the vector in a new thread rather than in the main thread:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-keyword\">use</span> std::thread;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> list = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Before defining closure: {list:?}\"</span>);\n\n    thread::spawn(<span class=\"hljs-keyword\">move</span> || <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"From thread: {list:?}\"</span>))\n        .join()\n        .unwrap();\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 13-6: Using <code class=\"hljs\">move</code> to force the closure for the\nthread to take ownership of <code class=\"hljs\">list</code></span></p>\n<p>We spawn a new thread, giving the thread a closure to run as an argument. The\nclosure body prints out the list. In Listing 13-4, the closure only captured\n<code class=\"hljs\">list</code> using an immutable reference because that‚Äôs the least amount of access\nto <code class=\"hljs\">list</code> needed to print it. In this example, even though the closure body\nstill only needs an immutable reference, we need to specify that <code class=\"hljs\">list</code> should\nbe moved into the closure by putting the <code class=\"hljs\">move</code> keyword at the beginning of the\nclosure definition. The new thread might finish before the rest of the main\nthread finishes, or the main thread might finish first. If the main thread\nmaintained ownership of <code class=\"hljs\">list</code> but ended before the new thread did and dropped\n<code class=\"hljs\">list</code>, the immutable reference in the thread would be invalid. Therefore, the\ncompiler requires that <code class=\"hljs\">list</code> be moved into the closure given to the new thread\nso the reference will be valid. Try removing the <code class=\"hljs\">move</code> keyword or using <code class=\"hljs\">list</code>\nin the main thread after the closure is defined to see what compiler errors you\nget!</p>\n<!-- Old headings. Do not remove or links may break. -->\n<p><a id=\"storing-closures-using-generic-parameters-and-the-fn-traits\"></a>\n<a id=\"limitations-of-the-cacher-implementation\"></a>\n<a id=\"moving-captured-values-out-of-the-closure-and-the-fn-traits\"></a></p>\n<h3 id=\"moving-captured-values-out-of-closures-and-the-fn-traits\"><a class=\"header\" href=\"#moving-captured-values-out-of-closures-and-the-fn-traits\">Moving Captured Values Out of Closures and the <code>Fn</code> Traits</a></h3>\n<p>Once a closure has captured a reference or captured ownership of a value from\nthe environment where the closure is defined (thus affecting what, if anything,\nis moved <em>into</em> the closure), the code in the body of the closure defines what\nhappens to the references or values when the closure is evaluated later (thus\naffecting what, if anything, is moved <em>out of</em> the closure). A closure body can\ndo any of the following: move a captured value out of the closure, mutate the\ncaptured value, neither move nor mutate the value, or capture nothing from the\nenvironment to begin with.</p>\n<p>The way a closure captures and handles values from the environment affects\nwhich traits the closure implements, and traits are how functions and structs\ncan specify what kinds of closures they can use. Closures will automatically\nimplement one, two, or all three of these <code class=\"hljs\">Fn</code> traits, in an additive fashion,\ndepending on how the closure‚Äôs body handles the values:</p>\n<ol>\n<li><code class=\"hljs\">FnOnce</code> applies to closures that can be called once. All closures implement\nat least this trait, because all closures can be called. A closure that\nmoves captured values out of its body will only implement <code class=\"hljs\">FnOnce</code> and none\nof the other <code class=\"hljs\">Fn</code> traits, because it can only be called once.</li>\n<li><code class=\"hljs\">FnMut</code> applies to closures that don‚Äôt move captured values out of their\nbody, but that might mutate the captured values. These closures can be\ncalled more than once.</li>\n<li><code class=\"hljs\">Fn</code> applies to closures that don‚Äôt move captured values out of their body\nand that don‚Äôt mutate captured values, as well as closures that capture\nnothing from their environment. These closures can be called more than once\nwithout mutating their environment, which is important in cases such as\ncalling a closure multiple times concurrently.</li>\n</ol>\n<p>Let‚Äôs look at the definition of the <code class=\"hljs\">unwrap_or_else</code> method on <code class=\"hljs\">Option&lt;T&gt;</code> that\nwe used in Listing 13-1:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">Option</span>&lt;T&gt; {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">unwrap_or_else</span></span>&lt;F&gt;(<span class=\"hljs-keyword\">self</span>, f: F) -&gt; T\n    <span class=\"hljs-keyword\">where</span>\n        F: <span class=\"hljs-built_in\">FnOnce</span>() -&gt; T\n    {\n        <span class=\"hljs-keyword\">match</span> <span class=\"hljs-keyword\">self</span> {\n            <span class=\"hljs-literal\">Some</span>(x) =&gt; x,\n            <span class=\"hljs-literal\">None</span> =&gt; f(),\n        }\n    }\n}</code></pre>\n<p>Recall that <code class=\"hljs\">T</code> is the generic type representing the type of the value in the\n<code class=\"hljs\">Some</code> variant of an <code class=\"hljs\">Option</code>. That type <code class=\"hljs\">T</code> is also the return type of the\n<code class=\"hljs\">unwrap_or_else</code> function: code that calls <code class=\"hljs\">unwrap_or_else</code> on an\n<code class=\"hljs\">Option&lt;String&gt;</code>, for example, will get a <code class=\"hljs\">String</code>.</p>\n<p>Next, notice that the <code class=\"hljs\">unwrap_or_else</code> function has the additional generic type\nparameter <code class=\"hljs\">F</code>. The <code class=\"hljs\">F</code> type is the type of the parameter named <code class=\"hljs\">f</code>, which is\nthe closure we provide when calling <code class=\"hljs\">unwrap_or_else</code>.</p>\n<p>The trait bound specified on the generic type <code class=\"hljs\">F</code> is <code class=\"hljs\">FnOnce() -&gt; T</code>, which\nmeans <code class=\"hljs\">F</code> must be able to be called once, take no arguments, and return a <code class=\"hljs\">T</code>.\nUsing <code class=\"hljs\">FnOnce</code> in the trait bound expresses the constraint that\n<code class=\"hljs\">unwrap_or_else</code> is only going to call <code class=\"hljs\">f</code> at most one time. In the body of\n<code class=\"hljs\">unwrap_or_else</code>, we can see that if the <code class=\"hljs\">Option</code> is <code class=\"hljs\">Some</code>, <code class=\"hljs\">f</code> won‚Äôt be\ncalled. If the <code class=\"hljs\">Option</code> is <code class=\"hljs\">None</code>, <code class=\"hljs\">f</code> will be called once. Because all\nclosures implement <code class=\"hljs\">FnOnce</code>, <code class=\"hljs\">unwrap_or_else</code> accepts all three kinds of\nclosures and is as flexible as it can be.</p>\n<section class=\"note\" aria-role=\"note\">\n<p>Note: Functions can implement all three of the <code class=\"hljs\">Fn</code> traits too. If what we\nwant to do doesn‚Äôt require capturing a value from the environment, we can use\nthe name of a function rather than a closure where we need something that\nimplements one of the <code class=\"hljs\">Fn</code> traits. For example, on an <code class=\"hljs\">Option&lt;Vec&lt;T&gt;&gt;</code> value,\nwe could call <code class=\"hljs\">unwrap_or_else(Vec::new)</code> to get a new, empty vector if the\nvalue is <code class=\"hljs\">None</code>.</p>\n</section>\n<p>Now let‚Äôs look at the standard library method <code class=\"hljs\">sort_by_key</code> defined on slices,\nto see how that differs from <code class=\"hljs\">unwrap_or_else</code> and why <code class=\"hljs\">sort_by_key</code> uses\n<code class=\"hljs\">FnMut</code> instead of <code class=\"hljs\">FnOnce</code> for the trait bound. The closure gets one argument\nin the form of a reference to the current item in the slice being considered,\nand returns a value of type <code class=\"hljs\">K</code> that can be ordered. This function is useful\nwhen you want to sort a slice by a particular attribute of each item. In\nListing 13-7, we have a list of <code class=\"hljs\">Rectangle</code> instances and we use <code class=\"hljs\">sort_by_key</code>\nto order them by their <code class=\"hljs\">width</code> attribute from low to high:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-meta\">#[derive(Debug)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Rectangle</span></span> {\n    width: <span class=\"hljs-built_in\">u32</span>,\n    height: <span class=\"hljs-built_in\">u32</span>,\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> list = [\n        Rectangle { width: <span class=\"hljs-number\">10</span>, height: <span class=\"hljs-number\">1</span> },\n        Rectangle { width: <span class=\"hljs-number\">3</span>, height: <span class=\"hljs-number\">5</span> },\n        Rectangle { width: <span class=\"hljs-number\">7</span>, height: <span class=\"hljs-number\">12</span> },\n    ];\n\n    list.sort_by_key(|r| r.width);\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{list:#?}\"</span>);\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 13-7: Using <code class=\"hljs\">sort_by_key</code> to order rectangles by\nwidth</span></p>\n<p>This code prints:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling rectangles v0.1.0 (file:///projects/rectangles)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.41s\n     Running `target/debug/rectangles`\n[\n    Rectangle {\n        width: 3,\n        height: 5,\n    },\n    Rectangle {\n        width: 7,\n        height: 12,\n    },\n    Rectangle {\n        width: 10,\n        height: 1,\n    },\n]\n</code></pre>\n<p>The reason <code class=\"hljs\">sort_by_key</code> is defined to take an <code class=\"hljs\">FnMut</code> closure is that it calls\nthe closure multiple times: once for each item in the slice. The closure <code class=\"hljs\">|r| r.width</code> doesn‚Äôt capture, mutate, or move out anything from its environment, so\nit meets the trait bound requirements.</p>\n<p>In contrast, Listing 13-8 shows an example of a closure that implements just\nthe <code class=\"hljs\">FnOnce</code> trait, because it moves a value out of the environment. The\ncompiler won‚Äôt let us use this closure with <code class=\"hljs\">sort_by_key</code>:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs\"><span class=\"hljs-meta\">#[derive(Debug)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Rectangle</span></span> {\n    width: <span class=\"hljs-built_in\">u32</span>,\n    height: <span class=\"hljs-built_in\">u32</span>,\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> list = [\n        Rectangle { width: <span class=\"hljs-number\">10</span>, height: <span class=\"hljs-number\">1</span> },\n        Rectangle { width: <span class=\"hljs-number\">3</span>, height: <span class=\"hljs-number\">5</span> },\n        Rectangle { width: <span class=\"hljs-number\">7</span>, height: <span class=\"hljs-number\">12</span> },\n    ];\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> sort_operations = <span class=\"hljs-built_in\">vec!</span>[];\n    <span class=\"hljs-keyword\">let</span> value = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"closure called\"</span>);\n\n    list.sort_by_key(|r| {\n        sort_operations.push(value);\n        r.width\n    });\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{list:#?}\"</span>);\n}</code></pre>\n<p><span class=\"caption\">Listing 13-8: Attempting to use an <code class=\"hljs\">FnOnce</code> closure with\n<code class=\"hljs\">sort_by_key</code></span></p>\n<p>This is a contrived, convoluted way (that doesn‚Äôt work) to try and count the\nnumber of times <code class=\"hljs\">sort_by_key</code> calls the closure when sorting <code class=\"hljs\">list</code>. This code\nattempts to do this counting by pushing <code class=\"hljs\">value</code>‚Äîa <code class=\"hljs\">String</code> from the closure‚Äôs\nenvironment‚Äîinto the <code class=\"hljs\">sort_operations</code> vector. The closure captures <code class=\"hljs\">value</code>\nthen moves <code class=\"hljs\">value</code> out of the closure by transferring ownership of <code class=\"hljs\">value</code> to\nthe <code class=\"hljs\">sort_operations</code> vector. This closure can be called once; trying to call\nit a second time wouldn‚Äôt work because <code class=\"hljs\">value</code> would no longer be in the\nenvironment to be pushed into <code class=\"hljs\">sort_operations</code> again! Therefore, this closure\nonly implements <code class=\"hljs\">FnOnce</code>. When we try to compile this code, we get this error\nthat <code class=\"hljs\">value</code> can‚Äôt be moved out of the closure because the closure must\nimplement <code class=\"hljs\">FnMut</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling rectangles v0.1.0 (file:///projects/rectangles)\nerror[E0507]: cannot move out of `value`, a captured variable in an `FnMut` closure\n<span class=\"hljs-meta\">  --&gt;</span><span class=\"bash\"> src/main.rs:18:30</span>\n   |\n15 |     let value = String::from(\"closure called\");\n   |         ----- captured outer variable\n16 |\n17 |     list.sort_by_key(|r| {\n   |                      --- captured by this `FnMut` closure\n18 |         sort_operations.push(value);\n   |                              ^^^^^ move occurs because `value` has type `String`, which does not implement the `Copy` trait\n\nFor more information about this error, try `rustc --explain E0507`.\nerror: could not compile `rectangles` (bin \"rectangles\") due to 1 previous error\n</code></pre>\n<p>The error points to the line in the closure body that moves <code class=\"hljs\">value</code> out of the\nenvironment. To fix this, we need to change the closure body so that it doesn‚Äôt\nmove values out of the environment. To count the number of times the closure\nis called, keeping a counter in the environment and incrementing its value in\nthe closure body is a more straightforward way to calculate that. The closure\nin Listing 13-9 works with <code class=\"hljs\">sort_by_key</code> because it is only capturing a mutable\nreference to the <code class=\"hljs\">num_sort_operations</code> counter and can therefore be called more\nthan once:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-meta\">#[derive(Debug)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Rectangle</span></span> {\n    width: <span class=\"hljs-built_in\">u32</span>,\n    height: <span class=\"hljs-built_in\">u32</span>,\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> list = [\n        Rectangle { width: <span class=\"hljs-number\">10</span>, height: <span class=\"hljs-number\">1</span> },\n        Rectangle { width: <span class=\"hljs-number\">3</span>, height: <span class=\"hljs-number\">5</span> },\n        Rectangle { width: <span class=\"hljs-number\">7</span>, height: <span class=\"hljs-number\">12</span> },\n    ];\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> num_sort_operations = <span class=\"hljs-number\">0</span>;\n    list.sort_by_key(|r| {\n        num_sort_operations += <span class=\"hljs-number\">1</span>;\n        r.width\n    });\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{list:#?}, sorted in {num_sort_operations} operations\"</span>);\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 13-9: Using an <code class=\"hljs\">FnMut</code> closure with <code class=\"hljs\">sort_by_key</code>\nis allowed</span></p>\n<p>The <code class=\"hljs\">Fn</code> traits are important when defining or using functions or types that\nmake use of closures. In the next section, we‚Äôll discuss iterators. Many\niterator methods take closure arguments, so keep these closure details in mind\nas we continue!</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"processing-a-series-of-items-with-iterators\"><a class=\"header\" href=\"#processing-a-series-of-items-with-iterators\">Processing a Series of Items with Iterators</a></h2>\n<p>The iterator pattern allows you to perform some task on a sequence of items in\nturn. An iterator is responsible for the logic of iterating over each item and\ndetermining when the sequence has finished. When you use iterators, you don‚Äôt\nhave to reimplement that logic yourself.</p>\n<p>In Rust, iterators are <em>lazy</em>, meaning they have no effect until you call\nmethods that consume the iterator to use it up. For example, the code in\nListing 13-10 creates an iterator over the items in the vector <code class=\"hljs\">v1</code> by calling\nthe <code class=\"hljs\">iter</code> method defined on <code class=\"hljs\">Vec&lt;T&gt;</code>. This code by itself doesn‚Äôt do anything\nuseful.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> v1 = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n\n    <span class=\"hljs-keyword\">let</span> v1_iter = v1.iter();\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 13-10: Creating an iterator</span></p>\n<p>The iterator is stored in the <code class=\"hljs\">v1_iter</code> variable. Once we‚Äôve created an\niterator, we can use it in a variety of ways. In Listing 3-5 in Chapter 3, we\niterated over an array using a <code class=\"hljs\">for</code> loop to execute some code on each of its\nitems. Under the hood this implicitly created and then consumed an iterator,\nbut we glossed over how exactly that works until now.</p>\n<p>In the example in Listing 13-11, we separate the creation of the iterator from\nthe use of the iterator in the <code class=\"hljs\">for</code> loop. When the <code class=\"hljs\">for</code> loop is called using\nthe iterator in <code class=\"hljs\">v1_iter</code>, each element in the iterator is used in one\niteration of the loop, which prints out each value.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> v1 = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n\n    <span class=\"hljs-keyword\">let</span> v1_iter = v1.iter();\n\n    <span class=\"hljs-keyword\">for</span> val <span class=\"hljs-keyword\">in</span> v1_iter {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Got: {val}\"</span>);\n    }\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 13-11: Using an iterator in a <code class=\"hljs\">for</code> loop</span></p>\n<p>In languages that don‚Äôt have iterators provided by their standard libraries,\nyou would likely write this same functionality by starting a variable at index\n0, using that variable to index into the vector to get a value, and\nincrementing the variable value in a loop until it reached the total number of\nitems in the vector.</p>\n<p>Iterators handle all that logic for you, cutting down on repetitive code you\ncould potentially mess up. Iterators give you more flexibility to use the same\nlogic with many different kinds of sequences, not just data structures you can\nindex into, like vectors. Let‚Äôs examine how iterators do that.</p>\n<h3 id=\"the-iterator-trait-and-the-next-method\"><a class=\"header\" href=\"#the-iterator-trait-and-the-next-method\">The <code>Iterator</code> Trait and the <code>next</code> Method</a></h3>\n<p>All iterators implement a trait named <code class=\"hljs\">Iterator</code> that is defined in the\nstandard library. The definition of the trait looks like this:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Iterator</span></span> {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Item</span></span>;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">next</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">Option</span>&lt;Self::Item&gt;;\n\n    <span class=\"hljs-comment\">// methods with default implementations elided</span>\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Notice this definition uses some new syntax: <code class=\"hljs\">type Item</code> and <code class=\"hljs\">Self::Item</code>,\nwhich are defining an <em>associated type</em> with this trait. We‚Äôll talk about\nassociated types in depth in Chapter 19. For now, all you need to know is that\nthis code says implementing the <code class=\"hljs\">Iterator</code> trait requires that you also define\nan <code class=\"hljs\">Item</code> type, and this <code class=\"hljs\">Item</code> type is used in the return type of the <code class=\"hljs\">next</code>\nmethod. In other words, the <code class=\"hljs\">Item</code> type will be the type returned from the\niterator.</p>\n<p>The <code class=\"hljs\">Iterator</code> trait only requires implementors to define one method: the\n<code class=\"hljs\">next</code> method, which returns one item of the iterator at a time wrapped in\n<code class=\"hljs\">Some</code> and, when iteration is over, returns <code class=\"hljs\">None</code>.</p>\n<p>We can call the <code class=\"hljs\">next</code> method on iterators directly; Listing 13-12 demonstrates\nwhat values are returned from repeated calls to <code class=\"hljs\">next</code> on the iterator created\nfrom the vector.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#[cfg(test)]</span>\n</span><span class=\"boring\"><span class=\"hljs-keyword\">mod</span> tests {\n</span>    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">iterator_demonstration</span></span>() {\n        <span class=\"hljs-keyword\">let</span> v1 = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> v1_iter = v1.iter();\n\n        <span class=\"hljs-built_in\">assert_eq!</span>(v1_iter.next(), <span class=\"hljs-literal\">Some</span>(&amp;<span class=\"hljs-number\">1</span>));\n        <span class=\"hljs-built_in\">assert_eq!</span>(v1_iter.next(), <span class=\"hljs-literal\">Some</span>(&amp;<span class=\"hljs-number\">2</span>));\n        <span class=\"hljs-built_in\">assert_eq!</span>(v1_iter.next(), <span class=\"hljs-literal\">Some</span>(&amp;<span class=\"hljs-number\">3</span>));\n        <span class=\"hljs-built_in\">assert_eq!</span>(v1_iter.next(), <span class=\"hljs-literal\">None</span>);\n    }\n<span class=\"boring\">}</span></code></pre>\n<p><span class=\"caption\">Listing 13-12: Calling the <code class=\"hljs\">next</code> method on an\niterator</span></p>\n<p>Note that we needed to make <code class=\"hljs\">v1_iter</code> mutable: calling the <code class=\"hljs\">next</code> method on an\niterator changes internal state that the iterator uses to keep track of where\nit is in the sequence. In other words, this code <em>consumes</em>, or uses up, the\niterator. Each call to <code class=\"hljs\">next</code> eats up an item from the iterator. We didn‚Äôt need\nto make <code class=\"hljs\">v1_iter</code> mutable when we used a <code class=\"hljs\">for</code> loop because the loop took\nownership of <code class=\"hljs\">v1_iter</code> and made it mutable behind the scenes.</p>\n<p>Also note that the values we get from the calls to <code class=\"hljs\">next</code> are immutable\nreferences to the values in the vector. The <code class=\"hljs\">iter</code> method produces an iterator\nover immutable references. If we want to create an iterator that takes\nownership of <code class=\"hljs\">v1</code> and returns owned values, we can call <code class=\"hljs\">into_iter</code> instead of\n<code class=\"hljs\">iter</code>. Similarly, if we want to iterate over mutable references, we can call\n<code class=\"hljs\">iter_mut</code> instead of <code class=\"hljs\">iter</code>.</p>\n<h3 id=\"methods-that-consume-the-iterator\"><a class=\"header\" href=\"#methods-that-consume-the-iterator\">Methods that Consume the Iterator</a></h3>\n<p>The <code class=\"hljs\">Iterator</code> trait has a number of different methods with default\nimplementations provided by the standard library; you can find out about these\nmethods by looking in the standard library API documentation for the <code class=\"hljs\">Iterator</code>\ntrait. Some of these methods call the <code class=\"hljs\">next</code> method in their definition, which\nis why you‚Äôre required to implement the <code class=\"hljs\">next</code> method when implementing the\n<code class=\"hljs\">Iterator</code> trait.</p>\n<p>Methods that call <code class=\"hljs\">next</code> are called <em>consuming adaptors</em>, because calling them\nuses up the iterator. One example is the <code class=\"hljs\">sum</code> method, which takes ownership of\nthe iterator and iterates through the items by repeatedly calling <code class=\"hljs\">next</code>, thus\nconsuming the iterator. As it iterates through, it adds each item to a running\ntotal and returns the total when iteration is complete. Listing 13-13 has a\ntest illustrating a use of the <code class=\"hljs\">sum</code> method:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#[cfg(test)]</span>\n</span><span class=\"boring\"><span class=\"hljs-keyword\">mod</span> tests {\n</span>    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">iterator_sum</span></span>() {\n        <span class=\"hljs-keyword\">let</span> v1 = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n\n        <span class=\"hljs-keyword\">let</span> v1_iter = v1.iter();\n\n        <span class=\"hljs-keyword\">let</span> total: <span class=\"hljs-built_in\">i32</span> = v1_iter.sum();\n\n        <span class=\"hljs-built_in\">assert_eq!</span>(total, <span class=\"hljs-number\">6</span>);\n    }\n<span class=\"boring\">}</span></code></pre>\n<p><span class=\"caption\">Listing 13-13: Calling the <code class=\"hljs\">sum</code> method to get the total\nof all items in the iterator</span></p>\n<p>We aren‚Äôt allowed to use <code class=\"hljs\">v1_iter</code> after the call to <code class=\"hljs\">sum</code> because <code class=\"hljs\">sum</code> takes\nownership of the iterator we call it on.</p>\n<h3 id=\"methods-that-produce-other-iterators\"><a class=\"header\" href=\"#methods-that-produce-other-iterators\">Methods that Produce Other Iterators</a></h3>\n<p><em>Iterator adaptors</em> are methods defined on the <code class=\"hljs\">Iterator</code> trait that don‚Äôt\nconsume the iterator. Instead, they produce different iterators by changing\nsome aspect of the original iterator.</p>\n<p>Listing 13-14 shows an example of calling the iterator adaptor method <code class=\"hljs\">map</code>,\nwhich takes a closure to call on each item as the items are iterated through.\nThe <code class=\"hljs\">map</code> method returns a new iterator that produces the modified items. The\nclosure here creates a new iterator in which each item from the vector will be\nincremented by 1:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/not_desired_behavior.svg\" title=\"This code does not produce the desired behavior.\" class=\"ferris ferris-small\"></a></div><code class=\"language-rust not_desired_behavior hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> v1: <span class=\"hljs-built_in\">Vec</span>&lt;<span class=\"hljs-built_in\">i32</span>&gt; = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n\n    v1.iter().map(|x| x + <span class=\"hljs-number\">1</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 13-14: Calling the iterator adaptor <code class=\"hljs\">map</code> to\ncreate a new iterator</span></p>\n<p>However, this code produces a warning:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling iterators v0.1.0 (file:///projects/iterators)\nwarning: unused `Map` that must be used\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/main.rs:4:5</span>\n  |\n4 |     v1.iter().map(|x| x + 1);\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^\n  |\n  = note: iterators are lazy and do nothing unless consumed\n  = note: `#[warn(unused_must_use)]` on by default\nhelp: use `let _ = ...` to ignore the resulting value\n  |\n4 |     let _ = v1.iter().map(|x| x + 1);\n  |     +++++++\n\nwarning: `iterators` (bin \"iterators\") generated 1 warning\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.47s\n     Running `target/debug/iterators`\n</code></pre>\n<p>The code in Listing 13-14 doesn‚Äôt do anything; the closure we‚Äôve specified\nnever gets called. The warning reminds us why: iterator adaptors are lazy, and\nwe need to consume the iterator here.</p>\n<p>To fix this warning and consume the iterator, we‚Äôll use the <code class=\"hljs\">collect</code> method,\nwhich we used in Chapter 12 with <code class=\"hljs\">env::args</code> in Listing 12-1. This method\nconsumes the iterator and collects the resulting values into a collection data\ntype.</p>\n<p>In Listing 13-15, we collect the results of iterating over the iterator that‚Äôs\nreturned from the call to <code class=\"hljs\">map</code> into a vector. This vector will end up\ncontaining each item from the original vector incremented by 1.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> v1: <span class=\"hljs-built_in\">Vec</span>&lt;<span class=\"hljs-built_in\">i32</span>&gt; = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n\n    <span class=\"hljs-keyword\">let</span> v2: <span class=\"hljs-built_in\">Vec</span>&lt;_&gt; = v1.iter().map(|x| x + <span class=\"hljs-number\">1</span>).collect();\n\n    <span class=\"hljs-built_in\">assert_eq!</span>(v2, <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]);\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 13-15: Calling the <code class=\"hljs\">map</code> method to create a new\niterator and then calling the <code class=\"hljs\">collect</code> method to consume the new iterator and\ncreate a vector</span></p>\n<p>Because <code class=\"hljs\">map</code> takes a closure, we can specify any operation we want to perform\non each item. This is a great example of how closures let you customize some\nbehavior while reusing the iteration behavior that the <code class=\"hljs\">Iterator</code> trait\nprovides.</p>\n<p>You can chain multiple calls to iterator adaptors to perform complex actions in\na readable way. But because all iterators are lazy, you have to call one of the\nconsuming adaptor methods to get results from calls to iterator adaptors.</p>\n<h3 id=\"using-closures-that-capture-their-environment\"><a class=\"header\" href=\"#using-closures-that-capture-their-environment\">Using Closures that Capture Their Environment</a></h3>\n<p>Many iterator adapters take closures as arguments, and commonly the closures\nwe‚Äôll specify as arguments to iterator adapters will be closures that capture\ntheir environment.</p>\n<p>For this example, we‚Äôll use the <code class=\"hljs\">filter</code> method that takes a closure. The\nclosure gets an item from the iterator and returns a <code class=\"hljs\">bool</code>. If the closure\nreturns <code class=\"hljs\">true</code>, the value will be included in the iteration produced by\n<code class=\"hljs\">filter</code>. If the closure returns <code class=\"hljs\">false</code>, the value won‚Äôt be included.</p>\n<p>In Listing 13-16, we use <code class=\"hljs\">filter</code> with a closure that captures the <code class=\"hljs\">shoe_size</code>\nvariable from its environment to iterate over a collection of <code class=\"hljs\">Shoe</code> struct\ninstances. It will return only shoes that are the specified size.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust noplayground hljs\"><span class=\"hljs-meta\">#[derive(PartialEq, Debug)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Shoe</span></span> {\n    size: <span class=\"hljs-built_in\">u32</span>,\n    style: <span class=\"hljs-built_in\">String</span>,\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">shoes_in_size</span></span>(shoes: <span class=\"hljs-built_in\">Vec</span>&lt;Shoe&gt;, shoe_size: <span class=\"hljs-built_in\">u32</span>) -&gt; <span class=\"hljs-built_in\">Vec</span>&lt;Shoe&gt; {\n    shoes.into_iter().filter(|s| s.size == shoe_size).collect()\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::*;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">filters_by_size</span></span>() {\n        <span class=\"hljs-keyword\">let</span> shoes = <span class=\"hljs-built_in\">vec!</span>[\n            Shoe {\n                size: <span class=\"hljs-number\">10</span>,\n                style: <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"sneaker\"</span>),\n            },\n            Shoe {\n                size: <span class=\"hljs-number\">13</span>,\n                style: <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"sandal\"</span>),\n            },\n            Shoe {\n                size: <span class=\"hljs-number\">10</span>,\n                style: <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"boot\"</span>),\n            },\n        ];\n\n        <span class=\"hljs-keyword\">let</span> in_my_size = shoes_in_size(shoes, <span class=\"hljs-number\">10</span>);\n\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            in_my_size,\n            <span class=\"hljs-built_in\">vec!</span>[\n                Shoe {\n                    size: <span class=\"hljs-number\">10</span>,\n                    style: <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"sneaker\"</span>)\n                },\n                Shoe {\n                    size: <span class=\"hljs-number\">10</span>,\n                    style: <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"boot\"</span>)\n                },\n            ]\n        );\n    }\n}</code></pre>\n<p><span class=\"caption\">Listing 13-16: Using the <code class=\"hljs\">filter</code> method with a closure\nthat captures <code class=\"hljs\">shoe_size</code></span></p>\n<p>The <code class=\"hljs\">shoes_in_size</code> function takes ownership of a vector of shoes and a shoe\nsize as parameters. It returns a vector containing only shoes of the specified\nsize.</p>\n<p>In the body of <code class=\"hljs\">shoes_in_size</code>, we call <code class=\"hljs\">into_iter</code> to create an iterator\nthat takes ownership of the vector. Then we call <code class=\"hljs\">filter</code> to adapt that\niterator into a new iterator that only contains elements for which the closure\nreturns <code class=\"hljs\">true</code>.</p>\n<p>The closure captures the <code class=\"hljs\">shoe_size</code> parameter from the environment and\ncompares the value with each shoe‚Äôs size, keeping only shoes of the size\nspecified. Finally, calling <code class=\"hljs\">collect</code> gathers the values returned by the\nadapted iterator into a vector that‚Äôs returned by the function.</p>\n<p>The test shows that when we call <code class=\"hljs\">shoes_in_size</code>, we get back only shoes\nthat have the same size as the value we specified.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"improving-our-io-project\"><a class=\"header\" href=\"#improving-our-io-project\">Improving Our I/O Project</a></h2>\n<p>With this new knowledge about iterators, we can improve the I/O project in\nChapter 12 by using iterators to make places in the code clearer and more\nconcise. Let‚Äôs look at how iterators can improve our implementation of the\n<code class=\"hljs\">Config::build</code> function and the <code class=\"hljs\">search</code> function.</p>\n<h3 id=\"removing-a-clone-using-an-iterator\"><a class=\"header\" href=\"#removing-a-clone-using-an-iterator\">Removing a <code>clone</code> Using an Iterator</a></h3>\n<p>In Listing 12-6, we added code that took a slice of <code class=\"hljs\">String</code> values and created\nan instance of the <code class=\"hljs\">Config</code> struct by indexing into the slice and cloning the\nvalues, allowing the <code class=\"hljs\">Config</code> struct to own those values. In Listing 13-17,\nwe‚Äôve reproduced the implementation of the <code class=\"hljs\">Config::build</code> function as it was\nin Listing 12-23:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::env;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::error::Error;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::fs;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Config</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> query: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> file_path: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> ignore_case: <span class=\"hljs-built_in\">bool</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">impl</span> Config {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">build</span></span>(args: &amp;[<span class=\"hljs-built_in\">String</span>]) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;Config, &amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span>&gt; {\n        <span class=\"hljs-keyword\">if</span> args.len() &lt; <span class=\"hljs-number\">3</span> {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">Err</span>(<span class=\"hljs-string\">\"not enough arguments\"</span>);\n        }\n\n        <span class=\"hljs-keyword\">let</span> query = args[<span class=\"hljs-number\">1</span>].clone();\n        <span class=\"hljs-keyword\">let</span> file_path = args[<span class=\"hljs-number\">2</span>].clone();\n\n        <span class=\"hljs-keyword\">let</span> ignore_case = env::var(<span class=\"hljs-string\">\"IGNORE_CASE\"</span>).is_ok();\n\n        <span class=\"hljs-literal\">Ok</span>(Config {\n            query,\n            file_path,\n            ignore_case,\n        })\n    }\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">run</span></span>(config: Config) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;(), <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> Error&gt;&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> contents = fs::read_to_string(config.file_path)?;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> results = <span class=\"hljs-keyword\">if</span> config.ignore_case {\n</span><span class=\"boring\">        search_case_insensitive(&amp;config.query, &amp;contents)\n</span><span class=\"boring\">    } <span class=\"hljs-keyword\">else</span> {\n</span><span class=\"boring\">        search(&amp;config.query, &amp;contents)\n</span><span class=\"boring\">    };\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> results {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{line}\"</span>);\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-literal\">Ok</span>(())\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">search</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(query: &amp;<span class=\"hljs-built_in\">str</span>, contents: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>) -&gt; <span class=\"hljs-built_in\">Vec</span>&lt;&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> results = <span class=\"hljs-built_in\">Vec</span>::new();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> contents.lines() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> line.contains(query) {\n</span><span class=\"boring\">            results.push(line);\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    results\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">search_case_insensitive</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(\n</span><span class=\"boring\">    query: &amp;<span class=\"hljs-built_in\">str</span>,\n</span><span class=\"boring\">    contents: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>,\n</span><span class=\"boring\">) -&gt; <span class=\"hljs-built_in\">Vec</span>&lt;&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> query = query.to_lowercase();\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> results = <span class=\"hljs-built_in\">Vec</span>::new();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> contents.lines() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> line.to_lowercase().contains(&amp;query) {\n</span><span class=\"boring\">            results.push(line);\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    results\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-meta\">#[cfg(test)]</span>\n</span><span class=\"boring\"><span class=\"hljs-keyword\">mod</span> tests {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">use</span> super::*;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-meta\">#[test]</span>\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">case_sensitive</span></span>() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = <span class=\"hljs-string\">\"duct\"</span>;\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> contents = <span class=\"hljs-string\">\"\\\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Rust:\n</span></span><span class=\"boring\"><span class=\"hljs-string\">safe, fast, productive.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Pick three.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Duct tape.\"</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">\"safe, fast, productive.\"</span>], search(query, contents));\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-meta\">#[test]</span>\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">case_insensitive</span></span>() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = <span class=\"hljs-string\">\"rUsT\"</span>;\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> contents = <span class=\"hljs-string\">\"\\\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Rust:\n</span></span><span class=\"boring\"><span class=\"hljs-string\">safe, fast, productive.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Pick three.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Trust me.\"</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert_eq!</span>(\n</span><span class=\"boring\">            <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">\"Rust:\"</span>, <span class=\"hljs-string\">\"Trust me.\"</span>],\n</span><span class=\"boring\">            search_case_insensitive(query, contents)\n</span><span class=\"boring\">        );\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre>\n<p><span class=\"caption\">Listing 13-17: Reproduction of the <code class=\"hljs\">Config::build</code>\nfunction from Listing 12-23</span></p>\n<p>At the time, we said not to worry about the inefficient <code class=\"hljs\">clone</code> calls because\nwe would remove them in the future. Well, that time is now!</p>\n<p>We needed <code class=\"hljs\">clone</code> here because we have a slice with <code class=\"hljs\">String</code> elements in the\nparameter <code class=\"hljs\">args</code>, but the <code class=\"hljs\">build</code> function doesn‚Äôt own <code class=\"hljs\">args</code>. To return\nownership of a <code class=\"hljs\">Config</code> instance, we had to clone the values from the <code class=\"hljs\">query</code>\nand <code class=\"hljs\">file_path</code> fields of <code class=\"hljs\">Config</code> so the <code class=\"hljs\">Config</code> instance can own its values.</p>\n<p>With our new knowledge about iterators, we can change the <code class=\"hljs\">build</code> function to\ntake ownership of an iterator as its argument instead of borrowing a slice.\nWe‚Äôll use the iterator functionality instead of the code that checks the length\nof the slice and indexes into specific locations. This will clarify what the\n<code class=\"hljs\">Config::build</code> function is doing because the iterator will access the values.</p>\n<p>Once <code class=\"hljs\">Config::build</code> takes ownership of the iterator and stops using indexing\noperations that borrow, we can move the <code class=\"hljs\">String</code> values from the iterator into\n<code class=\"hljs\">Config</code> rather than calling <code class=\"hljs\">clone</code> and making a new allocation.</p>\n<h4 id=\"using-the-returned-iterator-directly\"><a class=\"header\" href=\"#using-the-returned-iterator-directly\">Using the Returned Iterator Directly</a></h4>\n<p>Open your I/O project‚Äôs <em>src/main.rs</em> file, which should look like this:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::env;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::process;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> minigrep::Config;\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> args: <span class=\"hljs-built_in\">Vec</span>&lt;<span class=\"hljs-built_in\">String</span>&gt; = env::args().collect();\n\n    <span class=\"hljs-keyword\">let</span> config = Config::build(&amp;args).unwrap_or_else(|err| {\n        eprintln!(<span class=\"hljs-string\">\"Problem parsing arguments: {err}\"</span>);\n        process::exit(<span class=\"hljs-number\">1</span>);\n    });\n\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-literal\">Err</span>(e) = minigrep::run(config) {\n</span><span class=\"boring\">        eprintln!(<span class=\"hljs-string\">\"Application error: {e}\"</span>);\n</span><span class=\"boring\">        process::exit(<span class=\"hljs-number\">1</span>);\n</span><span class=\"boring\">    }\n</span>}</code></pre>\n<p>We‚Äôll first change the start of the <code class=\"hljs\">main</code> function that we had in Listing\n12-24 to the code in Listing 13-18, which this time uses an iterator. This\nwon‚Äôt compile until we update <code class=\"hljs\">Config::build</code> as well.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::env;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::process;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> minigrep::Config;\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> config = Config::build(env::args()).unwrap_or_else(|err| {\n        eprintln!(<span class=\"hljs-string\">\"Problem parsing arguments: {err}\"</span>);\n        process::exit(<span class=\"hljs-number\">1</span>);\n    });\n\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-literal\">Err</span>(e) = minigrep::run(config) {\n</span><span class=\"boring\">        eprintln!(<span class=\"hljs-string\">\"Application error: {e}\"</span>);\n</span><span class=\"boring\">        process::exit(<span class=\"hljs-number\">1</span>);\n</span><span class=\"boring\">    }\n</span>}</code></pre>\n<p><span class=\"caption\">Listing 13-18: Passing the return value of <code class=\"hljs\">env::args</code> to\n<code class=\"hljs\">Config::build</code></span></p>\n<p>The <code class=\"hljs\">env::args</code> function returns an iterator! Rather than collecting the\niterator values into a vector and then passing a slice to <code class=\"hljs\">Config::build</code>, now\nwe‚Äôre passing ownership of the iterator returned from <code class=\"hljs\">env::args</code> to\n<code class=\"hljs\">Config::build</code> directly.</p>\n<p>Next, we need to update the definition of <code class=\"hljs\">Config::build</code>. In your I/O\nproject‚Äôs <em>src/lib.rs</em> file, let‚Äôs change the signature of <code class=\"hljs\">Config::build</code> to\nlook like Listing 13-19. This still won‚Äôt compile because we need to update the\nfunction body.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::env;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::error::Error;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::fs;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Config</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> query: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> file_path: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> ignore_case: <span class=\"hljs-built_in\">bool</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">impl</span> Config {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">build</span></span>(\n        <span class=\"hljs-keyword\">mut</span> args: <span class=\"hljs-keyword\">impl</span> <span class=\"hljs-built_in\">Iterator</span>&lt;Item = <span class=\"hljs-built_in\">String</span>&gt;,\n    ) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;Config, &amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span>&gt; {\n        <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">        <span class=\"hljs-keyword\">if</span> args.len() &lt; <span class=\"hljs-number\">3</span> {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">Err</span>(<span class=\"hljs-string\">\"not enough arguments\"</span>);\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = args[<span class=\"hljs-number\">1</span>].clone();\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> file_path = args[<span class=\"hljs-number\">2</span>].clone();\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> ignore_case = env::var(<span class=\"hljs-string\">\"IGNORE_CASE\"</span>).is_ok();\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-literal\">Ok</span>(Config {\n</span><span class=\"boring\">            query,\n</span><span class=\"boring\">            file_path,\n</span><span class=\"boring\">            ignore_case,\n</span><span class=\"boring\">        })\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">run</span></span>(config: Config) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;(), <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> Error&gt;&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> contents = fs::read_to_string(config.file_path)?;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> results = <span class=\"hljs-keyword\">if</span> config.ignore_case {\n</span><span class=\"boring\">        search_case_insensitive(&amp;config.query, &amp;contents)\n</span><span class=\"boring\">    } <span class=\"hljs-keyword\">else</span> {\n</span><span class=\"boring\">        search(&amp;config.query, &amp;contents)\n</span><span class=\"boring\">    };\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> results {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{line}\"</span>);\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-literal\">Ok</span>(())\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">search</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(query: &amp;<span class=\"hljs-built_in\">str</span>, contents: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>) -&gt; <span class=\"hljs-built_in\">Vec</span>&lt;&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> results = <span class=\"hljs-built_in\">Vec</span>::new();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> contents.lines() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> line.contains(query) {\n</span><span class=\"boring\">            results.push(line);\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    results\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">search_case_insensitive</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(\n</span><span class=\"boring\">    query: &amp;<span class=\"hljs-built_in\">str</span>,\n</span><span class=\"boring\">    contents: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>,\n</span><span class=\"boring\">) -&gt; <span class=\"hljs-built_in\">Vec</span>&lt;&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> query = query.to_lowercase();\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> results = <span class=\"hljs-built_in\">Vec</span>::new();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> contents.lines() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> line.to_lowercase().contains(&amp;query) {\n</span><span class=\"boring\">            results.push(line);\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    results\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-meta\">#[cfg(test)]</span>\n</span><span class=\"boring\"><span class=\"hljs-keyword\">mod</span> tests {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">use</span> super::*;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-meta\">#[test]</span>\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">case_sensitive</span></span>() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = <span class=\"hljs-string\">\"duct\"</span>;\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> contents = <span class=\"hljs-string\">\"\\\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Rust:\n</span></span><span class=\"boring\"><span class=\"hljs-string\">safe, fast, productive.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Pick three.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Duct tape.\"</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">\"safe, fast, productive.\"</span>], search(query, contents));\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-meta\">#[test]</span>\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">case_insensitive</span></span>() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = <span class=\"hljs-string\">\"rUsT\"</span>;\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> contents = <span class=\"hljs-string\">\"\\\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Rust:\n</span></span><span class=\"boring\"><span class=\"hljs-string\">safe, fast, productive.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Pick three.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Trust me.\"</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert_eq!</span>(\n</span><span class=\"boring\">            <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">\"Rust:\"</span>, <span class=\"hljs-string\">\"Trust me.\"</span>],\n</span><span class=\"boring\">            search_case_insensitive(query, contents)\n</span><span class=\"boring\">        );\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre>\n<p><span class=\"caption\">Listing 13-19: Updating the signature of <code class=\"hljs\">Config::build</code>\nto expect an iterator</span></p>\n<p>The standard library documentation for the <code class=\"hljs\">env::args</code> function shows that the\ntype of the iterator it returns is <code class=\"hljs\">std::env::Args</code>, and that type implements\nthe <code class=\"hljs\">Iterator</code> trait and returns <code class=\"hljs\">String</code> values.</p>\n<p>We‚Äôve updated the signature of the <code class=\"hljs\">Config::build</code> function so the parameter\n<code class=\"hljs\">args</code> has a generic type with the trait bounds <code class=\"hljs\">impl Iterator&lt;Item = String&gt;</code>\ninstead of <code class=\"hljs\">&amp;[String]</code>. This usage of the <code class=\"hljs\">impl Trait</code> syntax we discussed in\nthe <a href=\"ch10-02-traits.html#traits-as-parameters\">‚ÄúTraits as Parameters‚Äù</a><!-- ignore --> section of Chapter 10\nmeans that <code class=\"hljs\">args</code> can be any type that implements the <code class=\"hljs\">Iterator</code> trait and\nreturns <code class=\"hljs\">String</code> items.</p>\n<p>Because we‚Äôre taking ownership of <code class=\"hljs\">args</code> and we‚Äôll be mutating <code class=\"hljs\">args</code> by\niterating over it, we can add the <code class=\"hljs\">mut</code> keyword into the specification of the\n<code class=\"hljs\">args</code> parameter to make it mutable.</p>\n<h4 id=\"using-iterator-trait-methods-instead-of-indexing\"><a class=\"header\" href=\"#using-iterator-trait-methods-instead-of-indexing\">Using <code>Iterator</code> Trait Methods Instead of Indexing</a></h4>\n<p>Next, we‚Äôll fix the body of <code class=\"hljs\">Config::build</code>. Because <code class=\"hljs\">args</code> implements the\n<code class=\"hljs\">Iterator</code> trait, we know we can call the <code class=\"hljs\">next</code> method on it! Listing 13-20\nupdates the code from Listing 12-23 to use the <code class=\"hljs\">next</code> method:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::env;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::error::Error;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::fs;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Config</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> query: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> file_path: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> ignore_case: <span class=\"hljs-built_in\">bool</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">impl</span> Config {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">build</span></span>(\n        <span class=\"hljs-keyword\">mut</span> args: <span class=\"hljs-keyword\">impl</span> <span class=\"hljs-built_in\">Iterator</span>&lt;Item = <span class=\"hljs-built_in\">String</span>&gt;,\n    ) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;Config, &amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span>&gt; {\n        args.next();\n\n        <span class=\"hljs-keyword\">let</span> query = <span class=\"hljs-keyword\">match</span> args.next() {\n            <span class=\"hljs-literal\">Some</span>(arg) =&gt; arg,\n            <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">Err</span>(<span class=\"hljs-string\">\"Didn't get a query string\"</span>),\n        };\n\n        <span class=\"hljs-keyword\">let</span> file_path = <span class=\"hljs-keyword\">match</span> args.next() {\n            <span class=\"hljs-literal\">Some</span>(arg) =&gt; arg,\n            <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">Err</span>(<span class=\"hljs-string\">\"Didn't get a file path\"</span>),\n        };\n\n        <span class=\"hljs-keyword\">let</span> ignore_case = env::var(<span class=\"hljs-string\">\"IGNORE_CASE\"</span>).is_ok();\n\n        <span class=\"hljs-literal\">Ok</span>(Config {\n            query,\n            file_path,\n            ignore_case,\n        })\n    }\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">run</span></span>(config: Config) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;(), <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> Error&gt;&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> contents = fs::read_to_string(config.file_path)?;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> results = <span class=\"hljs-keyword\">if</span> config.ignore_case {\n</span><span class=\"boring\">        search_case_insensitive(&amp;config.query, &amp;contents)\n</span><span class=\"boring\">    } <span class=\"hljs-keyword\">else</span> {\n</span><span class=\"boring\">        search(&amp;config.query, &amp;contents)\n</span><span class=\"boring\">    };\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> results {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{line}\"</span>);\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-literal\">Ok</span>(())\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">search</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(query: &amp;<span class=\"hljs-built_in\">str</span>, contents: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>) -&gt; <span class=\"hljs-built_in\">Vec</span>&lt;&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> results = <span class=\"hljs-built_in\">Vec</span>::new();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> contents.lines() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> line.contains(query) {\n</span><span class=\"boring\">            results.push(line);\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    results\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">search_case_insensitive</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(\n</span><span class=\"boring\">    query: &amp;<span class=\"hljs-built_in\">str</span>,\n</span><span class=\"boring\">    contents: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>,\n</span><span class=\"boring\">) -&gt; <span class=\"hljs-built_in\">Vec</span>&lt;&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> query = query.to_lowercase();\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> results = <span class=\"hljs-built_in\">Vec</span>::new();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> contents.lines() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> line.to_lowercase().contains(&amp;query) {\n</span><span class=\"boring\">            results.push(line);\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    results\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-meta\">#[cfg(test)]</span>\n</span><span class=\"boring\"><span class=\"hljs-keyword\">mod</span> tests {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">use</span> super::*;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-meta\">#[test]</span>\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">case_sensitive</span></span>() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = <span class=\"hljs-string\">\"duct\"</span>;\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> contents = <span class=\"hljs-string\">\"\\\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Rust:\n</span></span><span class=\"boring\"><span class=\"hljs-string\">safe, fast, productive.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Pick three.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Duct tape.\"</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">\"safe, fast, productive.\"</span>], search(query, contents));\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-meta\">#[test]</span>\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">case_insensitive</span></span>() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = <span class=\"hljs-string\">\"rUsT\"</span>;\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> contents = <span class=\"hljs-string\">\"\\\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Rust:\n</span></span><span class=\"boring\"><span class=\"hljs-string\">safe, fast, productive.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Pick three.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Trust me.\"</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert_eq!</span>(\n</span><span class=\"boring\">            <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">\"Rust:\"</span>, <span class=\"hljs-string\">\"Trust me.\"</span>],\n</span><span class=\"boring\">            search_case_insensitive(query, contents)\n</span><span class=\"boring\">        );\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre>\n<p><span class=\"caption\">Listing 13-20: Changing the body of <code class=\"hljs\">Config::build</code> to use\niterator methods</span></p>\n<p>Remember that the first value in the return value of <code class=\"hljs\">env::args</code> is the name of\nthe program. We want to ignore that and get to the next value, so first we call\n<code class=\"hljs\">next</code> and do nothing with the return value. Second, we call <code class=\"hljs\">next</code> to get the\nvalue we want to put in the <code class=\"hljs\">query</code> field of <code class=\"hljs\">Config</code>. If <code class=\"hljs\">next</code> returns a\n<code class=\"hljs\">Some</code>, we use a <code class=\"hljs\">match</code> to extract the value. If it returns <code class=\"hljs\">None</code>, it means\nnot enough arguments were given and we return early with an <code class=\"hljs\">Err</code> value. We do\nthe same thing for the <code class=\"hljs\">file_path</code> value.</p>\n<h3 id=\"making-code-clearer-with-iterator-adaptors\"><a class=\"header\" href=\"#making-code-clearer-with-iterator-adaptors\">Making Code Clearer with Iterator Adaptors</a></h3>\n<p>We can also take advantage of iterators in the <code class=\"hljs\">search</code> function in our I/O\nproject, which is reproduced here in Listing 13-21 as it was in Listing 12-19:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::error::Error;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::fs;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Config</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> query: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> file_path: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Config {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">build</span></span>(args: &amp;[<span class=\"hljs-built_in\">String</span>]) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;Config, &amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span>&gt; {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> args.len() &lt; <span class=\"hljs-number\">3</span> {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">Err</span>(<span class=\"hljs-string\">\"not enough arguments\"</span>);\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = args[<span class=\"hljs-number\">1</span>].clone();\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> file_path = args[<span class=\"hljs-number\">2</span>].clone();\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-literal\">Ok</span>(Config { query, file_path })\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">run</span></span>(config: Config) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;(), <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> Error&gt;&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> contents = fs::read_to_string(config.file_path)?;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-literal\">Ok</span>(())\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">search</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(query: &amp;<span class=\"hljs-built_in\">str</span>, contents: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>) -&gt; <span class=\"hljs-built_in\">Vec</span>&lt;&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>&gt; {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> results = <span class=\"hljs-built_in\">Vec</span>::new();\n\n    <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> contents.lines() {\n        <span class=\"hljs-keyword\">if</span> line.contains(query) {\n            results.push(line);\n        }\n    }\n\n    results\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-meta\">#[cfg(test)]</span>\n</span><span class=\"boring\"><span class=\"hljs-keyword\">mod</span> tests {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">use</span> super::*;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-meta\">#[test]</span>\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">one_result</span></span>() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = <span class=\"hljs-string\">\"duct\"</span>;\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> contents = <span class=\"hljs-string\">\"\\\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Rust:\n</span></span><span class=\"boring\"><span class=\"hljs-string\">safe, fast, productive.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Pick three.\"</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">\"safe, fast, productive.\"</span>], search(query, contents));\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre>\n<p><span class=\"caption\">Listing 13-21: The implementation of the <code class=\"hljs\">search</code>\nfunction from Listing 12-19</span></p>\n<p>We can write this code in a more concise way using iterator adaptor methods.\nDoing so also lets us avoid having a mutable intermediate <code class=\"hljs\">results</code> vector. The\nfunctional programming style prefers to minimize the amount of mutable state to\nmake code clearer. Removing the mutable state might enable a future enhancement\nto make searching happen in parallel, because we wouldn‚Äôt have to manage\nconcurrent access to the <code class=\"hljs\">results</code> vector. Listing 13-22 shows this change:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::env;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::error::Error;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::fs;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Config</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> query: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> file_path: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> ignore_case: <span class=\"hljs-built_in\">bool</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Config {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">build</span></span>(\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">mut</span> args: <span class=\"hljs-keyword\">impl</span> <span class=\"hljs-built_in\">Iterator</span>&lt;Item = <span class=\"hljs-built_in\">String</span>&gt;,\n</span><span class=\"boring\">    ) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;Config, &amp;<span class=\"hljs-symbol\">'static</span> <span class=\"hljs-built_in\">str</span>&gt; {\n</span><span class=\"boring\">        args.next();\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = <span class=\"hljs-keyword\">match</span> args.next() {\n</span><span class=\"boring\">            <span class=\"hljs-literal\">Some</span>(arg) =&gt; arg,\n</span><span class=\"boring\">            <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">Err</span>(<span class=\"hljs-string\">\"Didn't get a query string\"</span>),\n</span><span class=\"boring\">        };\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> file_path = <span class=\"hljs-keyword\">match</span> args.next() {\n</span><span class=\"boring\">            <span class=\"hljs-literal\">Some</span>(arg) =&gt; arg,\n</span><span class=\"boring\">            <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">Err</span>(<span class=\"hljs-string\">\"Didn't get a file path\"</span>),\n</span><span class=\"boring\">        };\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> ignore_case = env::var(<span class=\"hljs-string\">\"IGNORE_CASE\"</span>).is_ok();\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-literal\">Ok</span>(Config {\n</span><span class=\"boring\">            query,\n</span><span class=\"boring\">            file_path,\n</span><span class=\"boring\">            ignore_case,\n</span><span class=\"boring\">        })\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">run</span></span>(config: Config) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;(), <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> Error&gt;&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> contents = fs::read_to_string(config.file_path)?;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> results = <span class=\"hljs-keyword\">if</span> config.ignore_case {\n</span><span class=\"boring\">        search_case_insensitive(&amp;config.query, &amp;contents)\n</span><span class=\"boring\">    } <span class=\"hljs-keyword\">else</span> {\n</span><span class=\"boring\">        search(&amp;config.query, &amp;contents)\n</span><span class=\"boring\">    };\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> results {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{line}\"</span>);\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-literal\">Ok</span>(())\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">search</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(query: &amp;<span class=\"hljs-built_in\">str</span>, contents: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>) -&gt; <span class=\"hljs-built_in\">Vec</span>&lt;&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>&gt; {\n    contents\n        .lines()\n        .filter(|line| line.contains(query))\n        .collect()\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">search_case_insensitive</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(\n</span><span class=\"boring\">    query: &amp;<span class=\"hljs-built_in\">str</span>,\n</span><span class=\"boring\">    contents: &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>,\n</span><span class=\"boring\">) -&gt; <span class=\"hljs-built_in\">Vec</span>&lt;&amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span>&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> query = query.to_lowercase();\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> results = <span class=\"hljs-built_in\">Vec</span>::new();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> contents.lines() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> line.to_lowercase().contains(&amp;query) {\n</span><span class=\"boring\">            results.push(line);\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    results\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-meta\">#[cfg(test)]</span>\n</span><span class=\"boring\"><span class=\"hljs-keyword\">mod</span> tests {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">use</span> super::*;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-meta\">#[test]</span>\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">case_sensitive</span></span>() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = <span class=\"hljs-string\">\"duct\"</span>;\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> contents = <span class=\"hljs-string\">\"\\\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Rust:\n</span></span><span class=\"boring\"><span class=\"hljs-string\">safe, fast, productive.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Pick three.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Duct tape.\"</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">\"safe, fast, productive.\"</span>], search(query, contents));\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-meta\">#[test]</span>\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">case_insensitive</span></span>() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> query = <span class=\"hljs-string\">\"rUsT\"</span>;\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> contents = <span class=\"hljs-string\">\"\\\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Rust:\n</span></span><span class=\"boring\"><span class=\"hljs-string\">safe, fast, productive.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Pick three.\n</span></span><span class=\"boring\"><span class=\"hljs-string\">Trust me.\"</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert_eq!</span>(\n</span><span class=\"boring\">            <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">\"Rust:\"</span>, <span class=\"hljs-string\">\"Trust me.\"</span>],\n</span><span class=\"boring\">            search_case_insensitive(query, contents)\n</span><span class=\"boring\">        );\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre>\n<p><span class=\"caption\">Listing 13-22: Using iterator adaptor methods in the\nimplementation of the <code class=\"hljs\">search</code> function</span></p>\n<p>Recall that the purpose of the <code class=\"hljs\">search</code> function is to return all lines in\n<code class=\"hljs\">contents</code> that contain the <code class=\"hljs\">query</code>. Similar to the <code class=\"hljs\">filter</code> example in Listing\n13-16, this code uses the <code class=\"hljs\">filter</code> adaptor to keep only the lines that\n<code class=\"hljs\">line.contains(query)</code> returns <code class=\"hljs\">true</code> for. We then collect the matching lines\ninto another vector with <code class=\"hljs\">collect</code>. Much simpler! Feel free to make the same\nchange to use iterator methods in the <code class=\"hljs\">search_case_insensitive</code> function as\nwell.</p>\n<h3 id=\"choosing-between-loops-or-iterators\"><a class=\"header\" href=\"#choosing-between-loops-or-iterators\">Choosing Between Loops or Iterators</a></h3>\n<p>The next logical question is which style you should choose in your own code and\nwhy: the original implementation in Listing 13-21 or the version using\niterators in Listing 13-22. Most Rust programmers prefer to use the iterator\nstyle. It‚Äôs a bit tougher to get the hang of at first, but once you get a feel\nfor the various iterator adaptors and what they do, iterators can be easier to\nunderstand. Instead of fiddling with the various bits of looping and building\nnew vectors, the code focuses on the high-level objective of the loop. This\nabstracts away some of the commonplace code so it‚Äôs easier to see the concepts\nthat are unique to this code, such as the filtering condition each element in\nthe iterator must pass.</p>\n<p>But are the two implementations truly equivalent? The intuitive assumption\nmight be that the more low-level loop will be faster. Let‚Äôs talk about\nperformance.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"comparing-performance-loops-vs-iterators\"><a class=\"header\" href=\"#comparing-performance-loops-vs-iterators\">Comparing Performance: Loops vs. Iterators</a></h2>\n<p>To determine whether to use loops or iterators, you need to know which\nimplementation is faster: the version of the <code class=\"hljs\">search</code> function with an explicit\n<code class=\"hljs\">for</code> loop or the version with iterators.</p>\n<p>We ran a benchmark by loading the entire contents of <em>The Adventures of\nSherlock Holmes</em> by Sir Arthur Conan Doyle into a <code class=\"hljs\">String</code> and looking for the\nword <em>the</em> in the contents. Here are the results of the benchmark on the\nversion of <code class=\"hljs\">search</code> using the <code class=\"hljs\">for</code> loop and the version using iterators:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">test bench_search_for  ... bench:  19,620,300 ns/iter (+/- 915,700)\ntest bench_search_iter ... bench:  19,234,900 ns/iter (+/- 657,200)\n</code></pre>\n<p>The iterator version was slightly faster! We won‚Äôt explain the benchmark code\nhere, because the point is not to prove that the two versions are equivalent\nbut to get a general sense of how these two implementations compare\nperformance-wise.</p>\n<p>For a more comprehensive benchmark, you should check using various texts of\nvarious sizes as the <code class=\"hljs\">contents</code>, different words and words of different lengths\nas the <code class=\"hljs\">query</code>, and all kinds of other variations. The point is this:\niterators, although a high-level abstraction, get compiled down to roughly the\nsame code as if you‚Äôd written the lower-level code yourself. Iterators are one\nof Rust‚Äôs <em>zero-cost abstractions</em>, by which we mean using the abstraction\nimposes no additional runtime overhead. This is analogous to how Bjarne\nStroustrup, the original designer and implementor of C++, defines\n<em>zero-overhead</em> in ‚ÄúFoundations of C++‚Äù (2012):</p>\n<blockquote>\n<p>In general, C++ implementations obey the zero-overhead principle: What you\ndon‚Äôt use, you don‚Äôt pay for. And further: What you do use, you couldn‚Äôt hand\ncode any better.</p>\n</blockquote>\n<p>As another example, the following code is taken from an audio decoder. The\ndecoding algorithm uses the linear prediction mathematical operation to\nestimate future values based on a linear function of the previous samples. This\ncode uses an iterator chain to do some math on three variables in scope: a\n<code class=\"hljs\">buffer</code> slice of data, an array of 12 <code class=\"hljs\">coefficients</code>, and an amount by which\nto shift data in <code class=\"hljs\">qlp_shift</code>. We‚Äôve declared the variables within this example\nbut not given them any values; although this code doesn‚Äôt have much meaning\noutside of its context, it‚Äôs still a concise, real-world example of how Rust\ntranslates high-level ideas to low-level code.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">let</span> buffer: &amp;<span class=\"hljs-keyword\">mut</span> [<span class=\"hljs-built_in\">i32</span>];\n<span class=\"hljs-keyword\">let</span> coefficients: [<span class=\"hljs-built_in\">i64</span>; <span class=\"hljs-number\">12</span>];\n<span class=\"hljs-keyword\">let</span> qlp_shift: <span class=\"hljs-built_in\">i16</span>;\n\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">12</span>..buffer.len() {\n    <span class=\"hljs-keyword\">let</span> prediction = coefficients.iter()\n                                 .zip(&amp;buffer[i - <span class=\"hljs-number\">12</span>..i])\n                                 .map(|(&amp;c, &amp;s)| c * s <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">i64</span>)\n                                 .sum::&lt;<span class=\"hljs-built_in\">i64</span>&gt;() &gt;&gt; qlp_shift;\n    <span class=\"hljs-keyword\">let</span> delta = buffer[i];\n    buffer[i] = prediction <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">i32</span> + delta;\n}</code></pre>\n<p>To calculate the value of <code class=\"hljs\">prediction</code>, this code iterates through each of the\n12 values in <code class=\"hljs\">coefficients</code> and uses the <code class=\"hljs\">zip</code> method to pair the coefficient\nvalues with the previous 12 values in <code class=\"hljs\">buffer</code>. Then, for each pair, we\nmultiply the values together, sum all the results, and shift the bits in the\nsum <code class=\"hljs\">qlp_shift</code> bits to the right.</p>\n<p>Calculations in applications like audio decoders often prioritize performance\nmost highly. Here, we‚Äôre creating an iterator, using two adaptors, and then\nconsuming the value. What assembly code would this Rust code compile to? Well,\nas of this writing, it compiles down to the same assembly you‚Äôd write by hand.\nThere‚Äôs no loop at all corresponding to the iteration over the values in\n<code class=\"hljs\">coefficients</code>: Rust knows that there are 12 iterations, so it ‚Äúunrolls‚Äù the\nloop. <em>Unrolling</em> is an optimization that removes the overhead of the loop\ncontrolling code and instead generates repetitive code for each iteration of\nthe loop.</p>\n<p>All of the coefficients get stored in registers, which means accessing the\nvalues is very fast. There are no bounds checks on the array access at runtime.\nAll these optimizations that Rust is able to apply make the resulting code\nextremely efficient. Now that you know this, you can use iterators and closures\nwithout fear! They make code seem like it‚Äôs higher level but don‚Äôt impose a\nruntime performance penalty for doing so.</p>\n<h2 id=\"summary-12\"><a class=\"header\" href=\"#summary-12\">Summary</a></h2>\n<p>Closures and iterators are Rust features inspired by functional programming\nlanguage ideas. They contribute to Rust‚Äôs capability to clearly express\nhigh-level ideas at low-level performance. The implementations of closures and\niterators are such that runtime performance is not affected. This is part of\nRust‚Äôs goal to strive to provide zero-cost abstractions.</p>\n<p>Now that we‚Äôve improved the expressiveness of our I/O project, let‚Äôs look at\nsome more features of <code class=\"hljs\">cargo</code> that will help us share the project with the\nworld.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"more-about-cargo-and-cratesio\"><a class=\"header\" href=\"#more-about-cargo-and-cratesio\">More About Cargo and Crates.io</a></h1>\n<p>So far we‚Äôve used only the most basic features of Cargo to build, run, and test\nour code, but it can do a lot more. In this chapter, we‚Äôll discuss some of its\nother, more advanced features to show you how to do the following:</p>\n<ul>\n<li>Customize your build through release profiles</li>\n<li>Publish libraries on <a href=\"https://crates.io/\">crates.io</a><!-- ignore --></li>\n<li>Organize large projects with workspaces</li>\n<li>Install binaries from <a href=\"https://crates.io/\">crates.io</a><!-- ignore --></li>\n<li>Extend Cargo using custom commands</li>\n</ul>\n<p>Cargo can do even more than the functionality we cover in this chapter, so for\na full explanation of all its features, see <a href=\"https://doc.rust-lang.org/cargo/\">its\ndocumentation</a>.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"customizing-builds-with-release-profiles\"><a class=\"header\" href=\"#customizing-builds-with-release-profiles\">Customizing Builds with Release Profiles</a></h2>\n<p>In Rust, <em>release profiles</em> are predefined and customizable profiles with\ndifferent configurations that allow a programmer to have more control over\nvarious options for compiling code. Each profile is configured independently of\nthe others.</p>\n<p>Cargo has two main profiles: the <code class=\"hljs\">dev</code> profile Cargo uses when you run <code class=\"hljs\">cargo build</code> and the <code class=\"hljs\">release</code> profile Cargo uses when you run <code class=\"hljs\">cargo build --release</code>. The <code class=\"hljs\">dev</code> profile is defined with good defaults for development,\nand the <code class=\"hljs\">release</code> profile has good defaults for release builds.</p>\n<p>These profile names might be familiar from the output of your builds:</p>\n<!-- manual-regeneration\nanywhere, run:\ncargo build\ncargo build --release\nand ensure output below is accurate\n-->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo build</span>\n    Finished dev [unoptimized + debuginfo] target(s) in 0.0s\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo build --release</span>\n    Finished release [optimized] target(s) in 0.0s\n</code></pre>\n<p>The <code class=\"hljs\">dev</code> and <code class=\"hljs\">release</code> are these different profiles used by the compiler.</p>\n<p>Cargo has default settings for each of the profiles that apply when you haven‚Äôt\nexplicitly added any <code class=\"hljs\">[profile.*]</code> sections in the project‚Äôs <em>Cargo.toml</em> file.\nBy adding <code class=\"hljs\">[profile.*]</code> sections for any profile you want to customize, you\noverride any subset of the default settings. For example, here are the default\nvalues for the <code class=\"hljs\">opt-level</code> setting for the <code class=\"hljs\">dev</code> and <code class=\"hljs\">release</code> profiles:</p>\n<p><span class=\"filename\">Filename: Cargo.toml</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[profile.dev]</span>\n<span class=\"hljs-attr\">opt-level</span> = <span class=\"hljs-number\">0</span>\n\n<span class=\"hljs-section\">[profile.release]</span>\n<span class=\"hljs-attr\">opt-level</span> = <span class=\"hljs-number\">3</span>\n</code></pre>\n<p>The <code class=\"hljs\">opt-level</code> setting controls the number of optimizations Rust will apply to\nyour code, with a range of 0 to 3. Applying more optimizations extends\ncompiling time, so if you‚Äôre in development and compiling your code often,\nyou‚Äôll want fewer optimizations to compile faster even if the resulting code\nruns slower. The default <code class=\"hljs\">opt-level</code> for <code class=\"hljs\">dev</code> is therefore <code class=\"hljs\">0</code>. When you‚Äôre\nready to release your code, it‚Äôs best to spend more time compiling. You‚Äôll only\ncompile in release mode once, but you‚Äôll run the compiled program many times,\nso release mode trades longer compile time for code that runs faster. That is\nwhy the default <code class=\"hljs\">opt-level</code> for the <code class=\"hljs\">release</code> profile is <code class=\"hljs\">3</code>.</p>\n<p>You can override a default setting by adding a different value for it in\n<em>Cargo.toml</em>. For example, if we want to use optimization level 1 in the\ndevelopment profile, we can add these two lines to our project‚Äôs <em>Cargo.toml</em>\nfile:</p>\n<p><span class=\"filename\">Filename: Cargo.toml</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[profile.dev]</span>\n<span class=\"hljs-attr\">opt-level</span> = <span class=\"hljs-number\">1</span>\n</code></pre>\n<p>This code overrides the default setting of <code class=\"hljs\">0</code>. Now when we run <code class=\"hljs\">cargo build</code>,\nCargo will use the defaults for the <code class=\"hljs\">dev</code> profile plus our customization to\n<code class=\"hljs\">opt-level</code>. Because we set <code class=\"hljs\">opt-level</code> to <code class=\"hljs\">1</code>, Cargo will apply more\noptimizations than the default, but not as many as in a release build.</p>\n<p>For the full list of configuration options and defaults for each profile, see\n<a href=\"https://doc.rust-lang.org/cargo/reference/profiles.html\">Cargo‚Äôs documentation</a>.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"publishing-a-crate-to-cratesio\"><a class=\"header\" href=\"#publishing-a-crate-to-cratesio\">Publishing a Crate to Crates.io</a></h2>\n<p>We‚Äôve used packages from <a href=\"https://crates.io/\">crates.io</a><!-- ignore --> as\ndependencies of our project, but you can also share your code with other people\nby publishing your own packages. The crate registry at\n<a href=\"https://crates.io/\">crates.io</a><!-- ignore --> distributes the source code of\nyour packages, so it primarily hosts code that is open source.</p>\n<p>Rust and Cargo have features that make your published package easier for people\nto find and use. We‚Äôll talk about some of these features next and then explain\nhow to publish a package.</p>\n<h3 id=\"making-useful-documentation-comments\"><a class=\"header\" href=\"#making-useful-documentation-comments\">Making Useful Documentation Comments</a></h3>\n<p>Accurately documenting your packages will help other users know how and when to\nuse them, so it‚Äôs worth investing the time to write documentation. In Chapter\n3, we discussed how to comment Rust code using two slashes, <code class=\"hljs\">//</code>. Rust also has\na particular kind of comment for documentation, known conveniently as a\n<em>documentation comment</em>, that will generate HTML documentation. The HTML\ndisplays the contents of documentation comments for public API items intended\nfor programmers interested in knowing how to <em>use</em> your crate as opposed to how\nyour crate is <em>implemented</em>.</p>\n<p>Documentation comments use three slashes, <code class=\"hljs\">///</code>, instead of two and support\nMarkdown notation for formatting the text. Place documentation comments just\nbefore the item they‚Äôre documenting. Listing 14-1 shows documentation comments\nfor an <code class=\"hljs\">add_one</code> function in a crate named <code class=\"hljs\">my_crate</code>.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-comment\">/// Adds one to the number given.</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// # Examples</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// ```</span>\n<span class=\"hljs-comment\">/// let arg = 5;</span>\n<span class=\"hljs-comment\">/// let answer = my_crate::add_one(arg);</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// assert_eq!(6, answer);</span>\n<span class=\"hljs-comment\">/// ```</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add_one</span></span>(x: <span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span> {\n    x + <span class=\"hljs-number\">1</span>\n}</code></pre>\n<p><span class=\"caption\">Listing 14-1: A documentation comment for a\nfunction</span></p>\n<p>Here, we give a description of what the <code class=\"hljs\">add_one</code> function does, start a\nsection with the heading <code class=\"hljs\">Examples</code>, and then provide code that demonstrates\nhow to use the <code class=\"hljs\">add_one</code> function. We can generate the HTML documentation from\nthis documentation comment by running <code class=\"hljs\">cargo doc</code>. This command runs the\n<code class=\"hljs\">rustdoc</code> tool distributed with Rust and puts the generated HTML documentation\nin the <em>target/doc</em> directory.</p>\n<p>For convenience, running <code class=\"hljs\">cargo doc --open</code> will build the HTML for your\ncurrent crate‚Äôs documentation (as well as the documentation for all of your\ncrate‚Äôs dependencies) and open the result in a web browser. Navigate to the\n<code class=\"hljs\">add_one</code> function and you‚Äôll see how the text in the documentation comments is\nrendered, as shown in Figure 14-1:</p>\n<img alt=\"Rendered HTML documentation for the `add_one` function of `my_crate`\" src=\"img/trpl14-01.png\" class=\"center\">\n<p><span class=\"caption\">Figure 14-1: HTML documentation for the <code class=\"hljs\">add_one</code>\nfunction</span></p>\n<h4 id=\"commonly-used-sections\"><a class=\"header\" href=\"#commonly-used-sections\">Commonly Used Sections</a></h4>\n<p>We used the <code class=\"hljs\"># Examples</code> Markdown heading in Listing 14-1 to create a section\nin the HTML with the title ‚ÄúExamples.‚Äù Here are some other sections that crate\nauthors commonly use in their documentation:</p>\n<ul>\n<li><strong>Panics</strong>: The scenarios in which the function being documented could\npanic. Callers of the function who don‚Äôt want their programs to panic should\nmake sure they don‚Äôt call the function in these situations.</li>\n<li><strong>Errors</strong>: If the function returns a <code class=\"hljs\">Result</code>, describing the kinds of\nerrors that might occur and what conditions might cause those errors to be\nreturned can be helpful to callers so they can write code to handle the\ndifferent kinds of errors in different ways.</li>\n<li><strong>Safety</strong>: If the function is <code class=\"hljs\">unsafe</code> to call (we discuss unsafety in\nChapter 19), there should be a section explaining why the function is unsafe\nand covering the invariants that the function expects callers to uphold.</li>\n</ul>\n<p>Most documentation comments don‚Äôt need all of these sections, but this is a\ngood checklist to remind you of the aspects of your code users will be\ninterested in knowing about.</p>\n<h4 id=\"documentation-comments-as-tests\"><a class=\"header\" href=\"#documentation-comments-as-tests\">Documentation Comments as Tests</a></h4>\n<p>Adding example code blocks in your documentation comments can help demonstrate\nhow to use your library, and doing so has an additional bonus: running <code class=\"hljs\">cargo test</code> will run the code examples in your documentation as tests! Nothing is\nbetter than documentation with examples. But nothing is worse than examples\nthat don‚Äôt work because the code has changed since the documentation was\nwritten. If we run <code class=\"hljs\">cargo test</code> with the documentation for the <code class=\"hljs\">add_one</code>\nfunction from Listing 14-1, we will see a section in the test results like this:</p>\n<!-- manual-regeneration\ncd listings/ch14-more-about-cargo/listing-14-01/\ncargo test\ncopy just the doc-tests section below\n-->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">   Doc-tests my_crate\n\nrunning 1 test\ntest src/lib.rs - add_one (line 5) ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.27s\n</code></pre>\n<p>Now if we change either the function or the example so the <code class=\"hljs\">assert_eq!</code> in the\nexample panics and run <code class=\"hljs\">cargo test</code> again, we‚Äôll see that the doc tests catch\nthat the example and the code are out of sync with each other!</p>\n<h4 id=\"commenting-contained-items\"><a class=\"header\" href=\"#commenting-contained-items\">Commenting Contained Items</a></h4>\n<p>The style of doc comment <code class=\"hljs\">//!</code> adds documentation to the item that contains the\ncomments rather than to the items following the comments. We typically use\nthese doc comments inside the crate root file (<em>src/lib.rs</em> by convention) or\ninside a module to document the crate or the module as a whole.</p>\n<p>For example, to add documentation that describes the purpose of the <code class=\"hljs\">my_crate</code>\ncrate that contains the <code class=\"hljs\">add_one</code> function, we add documentation comments that\nstart with <code class=\"hljs\">//!</code> to the beginning of the <em>src/lib.rs</em> file, as shown in Listing\n14-2:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"hljs-comment\">//! # My Crate</span>\n<span class=\"hljs-comment\">//!</span>\n<span class=\"hljs-comment\">//! `my_crate` is a collection of utilities to make performing certain</span>\n<span class=\"hljs-comment\">//! calculations more convenient.</span>\n\n<span class=\"hljs-comment\">/// Adds one to the number given.</span>\n<span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\"><span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\"><span class=\"hljs-comment\">/// # Examples</span>\n</span><span class=\"boring\"><span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\"><span class=\"hljs-comment\">/// ```</span>\n</span><span class=\"boring\"><span class=\"hljs-comment\">/// let arg = 5;</span>\n</span><span class=\"boring\"><span class=\"hljs-comment\">/// let answer = my_crate::add_one(arg);</span>\n</span><span class=\"boring\"><span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\"><span class=\"hljs-comment\">/// assert_eq!(6, answer);</span>\n</span><span class=\"boring\"><span class=\"hljs-comment\">/// ```</span>\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add_one</span></span>(x: <span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span> {\n</span><span class=\"boring\">    x + <span class=\"hljs-number\">1</span>\n</span><span class=\"boring\">}</span></code></pre>\n<p><span class=\"caption\">Listing 14-2: Documentation for the <code class=\"hljs\">my_crate</code> crate as a\nwhole</span></p>\n<p>Notice there isn‚Äôt any code after the last line that begins with <code class=\"hljs\">//!</code>. Because\nwe started the comments with <code class=\"hljs\">//!</code> instead of <code class=\"hljs\">///</code>, we‚Äôre documenting the item\nthat contains this comment rather than an item that follows this comment. In\nthis case, that item is the <em>src/lib.rs</em> file, which is the crate root. These\ncomments describe the entire crate.</p>\n<p>When we run <code class=\"hljs\">cargo doc --open</code>, these comments will display on the front\npage of the documentation for <code class=\"hljs\">my_crate</code> above the list of public items in the\ncrate, as shown in Figure 14-2:</p>\n<img alt=\"Rendered HTML documentation with a comment for the crate as a whole\" src=\"img/trpl14-02.png\" class=\"center\">\n<p><span class=\"caption\">Figure 14-2: Rendered documentation for <code class=\"hljs\">my_crate</code>,\nincluding the comment describing the crate as a whole</span></p>\n<p>Documentation comments within items are useful for describing crates and\nmodules especially. Use them to explain the overall purpose of the container to\nhelp your users understand the crate‚Äôs organization.</p>\n<h3 id=\"exporting-a-convenient-public-api-with-pub-use\"><a class=\"header\" href=\"#exporting-a-convenient-public-api-with-pub-use\">Exporting a Convenient Public API with <code>pub use</code></a></h3>\n<p>The structure of your public API is a major consideration when publishing a\ncrate. People who use your crate are less familiar with the structure than you\nare and might have difficulty finding the pieces they want to use if your crate\nhas a large module hierarchy.</p>\n<p>In Chapter 7, we covered how to make items public using the <code class=\"hljs\">pub</code> keyword, and\nbring items into a scope with the <code class=\"hljs\">use</code> keyword. However, the structure that\nmakes sense to you while you‚Äôre developing a crate might not be very convenient\nfor your users. You might want to organize your structs in a hierarchy\ncontaining multiple levels, but then people who want to use a type you‚Äôve\ndefined deep in the hierarchy might have trouble finding out that type exists.\nThey might also be annoyed at having to enter <code class=\"hljs\">use</code>\n<code class=\"hljs\">my_crate::some_module::another_module::UsefulType;</code> rather than <code class=\"hljs\">use</code>\n<code class=\"hljs\">my_crate::UsefulType;</code>.</p>\n<p>The good news is that if the structure <em>isn‚Äôt</em> convenient for others to use\nfrom another library, you don‚Äôt have to rearrange your internal organization:\ninstead, you can re-export items to make a public structure that‚Äôs different\nfrom your private structure by using <code class=\"hljs\">pub use</code>. Re-exporting takes a public\nitem in one location and makes it public in another location, as if it were\ndefined in the other location instead.</p>\n<p>For example, say we made a library named <code class=\"hljs\">art</code> for modeling artistic concepts.\nWithin this library are two modules: a <code class=\"hljs\">kinds</code> module containing two enums\nnamed <code class=\"hljs\">PrimaryColor</code> and <code class=\"hljs\">SecondaryColor</code> and a <code class=\"hljs\">utils</code> module containing a\nfunction named <code class=\"hljs\">mix</code>, as shown in Listing 14-3:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground test_harness hljs hide-boring\"><span class=\"hljs-comment\">//! # Art</span>\n<span class=\"hljs-comment\">//!</span>\n<span class=\"hljs-comment\">//! A library for modeling artistic concepts.</span>\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">mod</span> kinds {\n    <span class=\"hljs-comment\">/// The primary colors according to the RYB color model.</span>\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">PrimaryColor</span></span> {\n        Red,\n        Yellow,\n        Blue,\n    }\n\n    <span class=\"hljs-comment\">/// The secondary colors according to the RYB color model.</span>\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">SecondaryColor</span></span> {\n        Orange,\n        Green,\n        Purple,\n    }\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">mod</span> utils {\n    <span class=\"hljs-keyword\">use</span> crate::kinds::*;\n\n    <span class=\"hljs-comment\">/// Combines two primary colors in equal amounts to create</span>\n    <span class=\"hljs-comment\">/// a secondary color.</span>\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">mix</span></span>(c1: PrimaryColor, c2: PrimaryColor) -&gt; SecondaryColor {\n        <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">        <span class=\"hljs-built_in\">unimplemented!</span>();\n</span>    }\n}</code></pre>\n<p><span class=\"caption\">Listing 14-3: An <code class=\"hljs\">art</code> library with items organized into\n<code class=\"hljs\">kinds</code> and <code class=\"hljs\">utils</code> modules</span></p>\n<p>Figure 14-3 shows what the front page of the documentation for this crate\ngenerated by <code class=\"hljs\">cargo doc</code> would look like:</p>\n<img alt=\"Rendered documentation for the `art` crate that lists the `kinds` and `utils` modules\" src=\"img/trpl14-03.png\" class=\"center\">\n<p><span class=\"caption\">Figure 14-3: Front page of the documentation for <code class=\"hljs\">art</code>\nthat lists the <code class=\"hljs\">kinds</code> and <code class=\"hljs\">utils</code> modules</span></p>\n<p>Note that the <code class=\"hljs\">PrimaryColor</code> and <code class=\"hljs\">SecondaryColor</code> types aren‚Äôt listed on the\nfront page, nor is the <code class=\"hljs\">mix</code> function. We have to click <code class=\"hljs\">kinds</code> and <code class=\"hljs\">utils</code> to\nsee them.</p>\n<p>Another crate that depends on this library would need <code class=\"hljs\">use</code> statements that\nbring the items from <code class=\"hljs\">art</code> into scope, specifying the module structure that‚Äôs\ncurrently defined. Listing 14-4 shows an example of a crate that uses the\n<code class=\"hljs\">PrimaryColor</code> and <code class=\"hljs\">mix</code> items from the <code class=\"hljs\">art</code> crate:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">use</span> art::kinds::PrimaryColor;\n<span class=\"hljs-keyword\">use</span> art::utils::mix;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> red = PrimaryColor::Red;\n    <span class=\"hljs-keyword\">let</span> yellow = PrimaryColor::Yellow;\n    mix(red, yellow);\n}</code></pre>\n<p><span class=\"caption\">Listing 14-4: A crate using the <code class=\"hljs\">art</code> crate‚Äôs items with\nits internal structure exported</span></p>\n<p>The author of the code in Listing 14-4, which uses the <code class=\"hljs\">art</code> crate, had to\nfigure out that <code class=\"hljs\">PrimaryColor</code> is in the <code class=\"hljs\">kinds</code> module and <code class=\"hljs\">mix</code> is in the\n<code class=\"hljs\">utils</code> module. The module structure of the <code class=\"hljs\">art</code> crate is more relevant to\ndevelopers working on the <code class=\"hljs\">art</code> crate than to those using it. The internal\nstructure doesn‚Äôt contain any useful information for someone trying to\nunderstand how to use the <code class=\"hljs\">art</code> crate, but rather causes confusion because\ndevelopers who use it have to figure out where to look, and must specify the\nmodule names in the <code class=\"hljs\">use</code> statements.</p>\n<p>To remove the internal organization from the public API, we can modify the\n<code class=\"hljs\">art</code> crate code in Listing 14-3 to add <code class=\"hljs\">pub use</code> statements to re-export the\nitems at the top level, as shown in Listing 14-5:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"hljs-comment\">//! # Art</span>\n<span class=\"hljs-comment\">//!</span>\n<span class=\"hljs-comment\">//! A library for modeling artistic concepts.</span>\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">use</span> self::kinds::PrimaryColor;\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">use</span> self::kinds::SecondaryColor;\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">use</span> self::utils::mix;\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">mod</span> kinds {\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">    <span class=\"hljs-comment\">/// The primary colors according to the RYB color model.</span>\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">PrimaryColor</span></span> {\n</span><span class=\"boring\">        Red,\n</span><span class=\"boring\">        Yellow,\n</span><span class=\"boring\">        Blue,\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// The secondary colors according to the RYB color model.</span>\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">SecondaryColor</span></span> {\n</span><span class=\"boring\">        Orange,\n</span><span class=\"boring\">        Green,\n</span><span class=\"boring\">        Purple,\n</span><span class=\"boring\">    }\n</span>}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">mod</span> utils {\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">    <span class=\"hljs-keyword\">use</span> crate::kinds::*;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// Combines two primary colors in equal amounts to create</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// a secondary color.</span>\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">mix</span></span>(c1: PrimaryColor, c2: PrimaryColor) -&gt; SecondaryColor {\n</span><span class=\"boring\">        SecondaryColor::Orange\n</span><span class=\"boring\">    }\n</span>}</code></pre>\n<p><span class=\"caption\">Listing 14-5: Adding <code class=\"hljs\">pub use</code> statements to re-export\nitems</span></p>\n<p>The API documentation that <code class=\"hljs\">cargo doc</code> generates for this crate will now list\nand link re-exports on the front page, as shown in Figure 14-4, making the\n<code class=\"hljs\">PrimaryColor</code> and <code class=\"hljs\">SecondaryColor</code> types and the <code class=\"hljs\">mix</code> function easier to find.</p>\n<img alt=\"Rendered documentation for the `art` crate with the re-exports on the front page\" src=\"img/trpl14-04.png\" class=\"center\">\n<p><span class=\"caption\">Figure 14-4: The front page of the documentation for <code class=\"hljs\">art</code>\nthat lists the re-exports</span></p>\n<p>The <code class=\"hljs\">art</code> crate users can still see and use the internal structure from Listing\n14-3 as demonstrated in Listing 14-4, or they can use the more convenient\nstructure in Listing 14-5, as shown in Listing 14-6:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"hljs-keyword\">use</span> art::mix;\n<span class=\"hljs-keyword\">use</span> art::PrimaryColor;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">    <span class=\"hljs-keyword\">let</span> red = PrimaryColor::Red;\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> yellow = PrimaryColor::Yellow;\n</span><span class=\"boring\">    mix(red, yellow);\n</span>}</code></pre>\n<p><span class=\"caption\">Listing 14-6: A program using the re-exported items from\nthe <code class=\"hljs\">art</code> crate</span></p>\n<p>In cases where there are many nested modules, re-exporting the types at the top\nlevel with <code class=\"hljs\">pub use</code> can make a significant difference in the experience of\npeople who use the crate. Another common use of <code class=\"hljs\">pub use</code> is to re-export\ndefinitions of a dependency in the current crate to make that crate‚Äôs\ndefinitions part of your crate‚Äôs public API.</p>\n<p>Creating a useful public API structure is more of an art than a science, and\nyou can iterate to find the API that works best for your users. Choosing <code class=\"hljs\">pub use</code> gives you flexibility in how you structure your crate internally and\ndecouples that internal structure from what you present to your users. Look at\nsome of the code of crates you‚Äôve installed to see if their internal structure\ndiffers from their public API.</p>\n<h3 id=\"setting-up-a-cratesio-account\"><a class=\"header\" href=\"#setting-up-a-cratesio-account\">Setting Up a Crates.io Account</a></h3>\n<p>Before you can publish any crates, you need to create an account on\n<a href=\"https://crates.io/\">crates.io</a><!-- ignore --> and get an API token. To do so,\nvisit the home page at <a href=\"https://crates.io/\">crates.io</a><!-- ignore --> and log\nin via a GitHub account. (The GitHub account is currently a requirement, but\nthe site might support other ways of creating an account in the future.) Once\nyou‚Äôre logged in, visit your account settings at\n<a href=\"https://crates.io/me/\">https://crates.io/me/</a><!-- ignore --> and retrieve your\nAPI key. Then run the <code class=\"hljs\">cargo login</code> command and paste your API key when prompted, like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo login</span>\nabcdefghijklmnopqrstuvwxyz012345\n</code></pre>\n<p>This command will inform Cargo of your API token and store it locally in\n<em>~/.cargo/credentials</em>. Note that this token is a <em>secret</em>: do not share it\nwith anyone else. If you do share it with anyone for any reason, you should\nrevoke it and generate a new token on <a href=\"https://crates.io/\">crates.io</a><!-- ignore\n-->.</p>\n<h3 id=\"adding-metadata-to-a-new-crate\"><a class=\"header\" href=\"#adding-metadata-to-a-new-crate\">Adding Metadata to a New Crate</a></h3>\n<p>Let‚Äôs say you have a crate you want to publish. Before publishing, you‚Äôll need\nto add some metadata in the <code class=\"hljs\">[package]</code> section of the crate‚Äôs <em>Cargo.toml</em>\nfile.</p>\n<p>Your crate will need a unique name. While you‚Äôre working on a crate locally,\nyou can name a crate whatever you‚Äôd like. However, crate names on\n<a href=\"https://crates.io/\">crates.io</a><!-- ignore --> are allocated on a first-come,\nfirst-served basis. Once a crate name is taken, no one else can publish a crate\nwith that name. Before attempting to publish a crate, search for the name you\nwant to use. If the name has been used, you will need to find another name and\nedit the <code class=\"hljs\">name</code> field in the <em>Cargo.toml</em> file under the <code class=\"hljs\">[package]</code> section to\nuse the new name for publishing, like so:</p>\n<p><span class=\"filename\">Filename: Cargo.toml</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"guessing_game\"</span>\n</code></pre>\n<p>Even if you‚Äôve chosen a unique name, when you run <code class=\"hljs\">cargo publish</code> to publish\nthe crate at this point, you‚Äôll get a warning and then an error:</p>\n<!-- manual-regeneration\ncd listings/ch14-more-about-cargo/listing-14-01/\ncargo publish\ncopy just the relevant lines below\n-->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo publish</span>\n    Updating crates.io index\nwarning: manifest has no description, license, license-file, documentation, homepage or repository.\nSee https://doc.rust-lang.org/cargo/reference/manifest.html#package-metadata for more info.\n--snip--\nerror: failed to publish to registry at https://crates.io\n\nCaused by:\n  the remote server responded with an error: missing or empty metadata fields: description, license. Please see https://doc.rust-lang.org/cargo/reference/manifest.html for how to upload metadata\n</code></pre>\n<p>This errors because you‚Äôre missing some crucial information: a description and\nlicense are required so people will know what your crate does and under what\nterms they can use it. In <em>Cargo.toml</em>, add a description that‚Äôs just a\nsentence or two, because it will appear with your crate in search results. For\nthe <code class=\"hljs\">license</code> field, you need to give a <em>license identifier value</em>. The <a href=\"http://spdx.org/licenses/\">Linux\nFoundation‚Äôs Software Package Data Exchange (SPDX)</a> lists the identifiers\nyou can use for this value. For example, to specify that you‚Äôve licensed your\ncrate using the MIT License, add the <code class=\"hljs\">MIT</code> identifier:</p>\n<p><span class=\"filename\">Filename: Cargo.toml</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"guessing_game\"</span>\n<span class=\"hljs-attr\">license</span> = <span class=\"hljs-string\">\"MIT\"</span>\n</code></pre>\n<p>If you want to use a license that doesn‚Äôt appear in the SPDX, you need to place\nthe text of that license in a file, include the file in your project, and then\nuse <code class=\"hljs\">license-file</code> to specify the name of that file instead of using the\n<code class=\"hljs\">license</code> key.</p>\n<p>Guidance on which license is appropriate for your project is beyond the scope\nof this book. Many people in the Rust community license their projects in the\nsame way as Rust by using a dual license of <code class=\"hljs\">MIT OR Apache-2.0</code>. This practice\ndemonstrates that you can also specify multiple license identifiers separated\nby <code class=\"hljs\">OR</code> to have multiple licenses for your project.</p>\n<p>With a unique name, the version, your description, and a license added, the\n<em>Cargo.toml</em> file for a project that is ready to publish might look like this:</p>\n<p><span class=\"filename\">Filename: Cargo.toml</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[package]</span>\n<span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"guessing_game\"</span>\n<span class=\"hljs-attr\">version</span> = <span class=\"hljs-string\">\"0.1.0\"</span>\n<span class=\"hljs-attr\">edition</span> = <span class=\"hljs-string\">\"2021\"</span>\n<span class=\"hljs-attr\">description</span> = <span class=\"hljs-string\">\"A fun game where you guess what number the computer has chosen.\"</span>\n<span class=\"hljs-attr\">license</span> = <span class=\"hljs-string\">\"MIT OR Apache-2.0\"</span>\n\n<span class=\"hljs-section\">[dependencies]</span>\n</code></pre>\n<p><a href=\"https://doc.rust-lang.org/cargo/\">Cargo‚Äôs documentation</a> describes other\nmetadata you can specify to ensure others can discover and use your crate more\neasily.</p>\n<h3 id=\"publishing-to-cratesio\"><a class=\"header\" href=\"#publishing-to-cratesio\">Publishing to Crates.io</a></h3>\n<p>Now that you‚Äôve created an account, saved your API token, chosen a name for\nyour crate, and specified the required metadata, you‚Äôre ready to publish!\nPublishing a crate uploads a specific version to\n<a href=\"https://crates.io/\">crates.io</a><!-- ignore --> for others to use.</p>\n<p>Be careful, because a publish is <em>permanent</em>. The version can never be\noverwritten, and the code cannot be deleted. One major goal of\n<a href=\"https://crates.io/\">crates.io</a><!-- ignore --> is to act as a permanent archive\nof code so that builds of all projects that depend on crates from\n<a href=\"https://crates.io/\">crates.io</a><!-- ignore --> will continue to work. Allowing\nversion deletions would make fulfilling that goal impossible. However, there is\nno limit to the number of crate versions you can publish.</p>\n<p>Run the <code class=\"hljs\">cargo publish</code> command again. It should succeed now:</p>\n<!-- manual-regeneration\ngo to some valid crate, publish a new version\ncargo publish\ncopy just the relevant lines below\n-->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo publish</span>\n    Updating crates.io index\n   Packaging guessing_game v0.1.0 (file:///projects/guessing_game)\n   Verifying guessing_game v0.1.0 (file:///projects/guessing_game)\n   Compiling guessing_game v0.1.0\n(file:///projects/guessing_game/target/package/guessing_game-0.1.0)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.19s\n   Uploading guessing_game v0.1.0 (file:///projects/guessing_game)\n</code></pre>\n<p>Congratulations! You‚Äôve now shared your code with the Rust community, and\nanyone can easily add your crate as a dependency of their project.</p>\n<h3 id=\"publishing-a-new-version-of-an-existing-crate\"><a class=\"header\" href=\"#publishing-a-new-version-of-an-existing-crate\">Publishing a New Version of an Existing Crate</a></h3>\n<p>When you‚Äôve made changes to your crate and are ready to release a new version,\nyou change the <code class=\"hljs\">version</code> value specified in your <em>Cargo.toml</em> file and\nrepublish. Use the <a href=\"http://semver.org/\">Semantic Versioning rules</a> to decide what an\nappropriate next version number is based on the kinds of changes you‚Äôve made.\nThen run <code class=\"hljs\">cargo publish</code> to upload the new version.</p>\n<!-- Old link, do not remove -->\n<p><a id=\"removing-versions-from-cratesio-with-cargo-yank\"></a></p>\n<h3 id=\"deprecating-versions-from-cratesio-with-cargo-yank\"><a class=\"header\" href=\"#deprecating-versions-from-cratesio-with-cargo-yank\">Deprecating Versions from Crates.io with <code>cargo yank</code></a></h3>\n<p>Although you can‚Äôt remove previous versions of a crate, you can prevent any\nfuture projects from adding them as a new dependency. This is useful when a\ncrate version is broken for one reason or another. In such situations, Cargo\nsupports <em>yanking</em> a crate version.</p>\n<p>Yanking a version prevents new projects from depending on that version while\nallowing all existing projects that depend on it to continue. Essentially, a\nyank means that all projects with a <em>Cargo.lock</em> will not break, and any future\n<em>Cargo.lock</em> files generated will not use the yanked version.</p>\n<p>To yank a version of a crate, in the directory of the crate that you‚Äôve\npreviously published, run <code class=\"hljs\">cargo yank</code> and specify which version you want to\nyank. For example, if we‚Äôve published a crate named <code class=\"hljs\">guessing_game</code> version\n1.0.1 and we want to yank it, in the project directory for <code class=\"hljs\">guessing_game</code> we‚Äôd\nrun:</p>\n<!-- manual-regeneration:\ncargo yank carol-test --version 2.1.0\ncargo yank carol-test --version 2.1.0 --undo\n-->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo yank --vers 1.0.1</span>\n    Updating crates.io index\n        Yank guessing_game@1.0.1\n</code></pre>\n<p>By adding <code class=\"hljs\">--undo</code> to the command, you can also undo a yank and allow projects\nto start depending on a version again:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo yank --vers 1.0.1 --undo</span>\n    Updating crates.io index\n      Unyank guessing_game@1.0.1\n</code></pre>\n<p>A yank <em>does not</em> delete any code. It cannot, for example, delete accidentally\nuploaded secrets. If that happens, you must reset those secrets immediately.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"cargo-workspaces\"><a class=\"header\" href=\"#cargo-workspaces\">Cargo Workspaces</a></h2>\n<p>In Chapter 12, we built a package that included a binary crate and a library\ncrate. As your project develops, you might find that the library crate\ncontinues to get bigger and you want to split your package further into\nmultiple library crates. Cargo offers a feature called <em>workspaces</em> that can\nhelp manage multiple related packages that are developed in tandem.</p>\n<h3 id=\"creating-a-workspace\"><a class=\"header\" href=\"#creating-a-workspace\">Creating a Workspace</a></h3>\n<p>A <em>workspace</em> is a set of packages that share the same <em>Cargo.lock</em> and output\ndirectory. Let‚Äôs make a project using a workspace‚Äîwe‚Äôll use trivial code so we\ncan concentrate on the structure of the workspace. There are multiple ways to\nstructure a workspace, so we‚Äôll just show one common way. We‚Äôll have a\nworkspace containing a binary and two libraries. The binary, which will provide\nthe main functionality, will depend on the two libraries. One library will\nprovide an <code class=\"hljs\">add_one</code> function, and a second library an <code class=\"hljs\">add_two</code> function.\nThese three crates will be part of the same workspace. We‚Äôll start by creating\na new directory for the workspace:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> mkdir add</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> <span class=\"hljs-built_in\">cd</span> add</span>\n</code></pre>\n<p>Next, in the <em>add</em> directory, we create the <em>Cargo.toml</em> file that will\nconfigure the entire workspace. This file won‚Äôt have a <code class=\"hljs\">[package]</code> section.\nInstead, it will start with a <code class=\"hljs\">[workspace]</code> section that will allow us to add\nmembers to the workspace by specifying the path to the package with our binary\ncrate; in this case, that path is <em>adder</em>:</p>\n<p><span class=\"filename\">Filename: Cargo.toml</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[workspace]</span>\n\n<span class=\"hljs-attr\">members</span> = [\n    <span class=\"hljs-string\">\"adder\"</span>,\n]\n</code></pre>\n<p>Next, we‚Äôll create the <code class=\"hljs\">adder</code> binary crate by running <code class=\"hljs\">cargo new</code> within the\n<em>add</em> directory:</p>\n<!-- manual-regeneration\ncd listings/ch14-more-about-cargo/output-only-01-adder-crate/add\nrm -rf adder\ncargo new adder\ncopy output below\n-->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo new adder</span>\n     Created binary (application) `adder` package\n</code></pre>\n<p>At this point, we can build the workspace by running <code class=\"hljs\">cargo build</code>. The files\nin your <em>add</em> directory should look like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">‚îú‚îÄ‚îÄ Cargo.lock\n‚îú‚îÄ‚îÄ Cargo.toml\n‚îú‚îÄ‚îÄ adder\n‚îÇ   ‚îú‚îÄ‚îÄ Cargo.toml\n‚îÇ   ‚îî‚îÄ‚îÄ src\n‚îÇ       ‚îî‚îÄ‚îÄ main.rs\n‚îî‚îÄ‚îÄ target\n</code></pre>\n<p>The workspace has one <em>target</em> directory at the top level that the compiled\nartifacts will be placed into; the <code class=\"hljs\">adder</code> package doesn‚Äôt have its own\n<em>target</em> directory. Even if we were to run <code class=\"hljs\">cargo build</code> from inside the\n<em>adder</em> directory, the compiled artifacts would still end up in <em>add/target</em>\nrather than <em>add/adder/target</em>. Cargo structures the <em>target</em> directory in a\nworkspace like this because the crates in a workspace are meant to depend on\neach other. If each crate had its own <em>target</em> directory, each crate would have\nto recompile each of the other crates in the workspace to place the artifacts\nin its own <em>target</em> directory. By sharing one <em>target</em> directory, the crates\ncan avoid unnecessary rebuilding.</p>\n<h3 id=\"creating-the-second-package-in-the-workspace\"><a class=\"header\" href=\"#creating-the-second-package-in-the-workspace\">Creating the Second Package in the Workspace</a></h3>\n<p>Next, let‚Äôs create another member package in the workspace and call it\n<code class=\"hljs\">add_one</code>. Change the top-level <em>Cargo.toml</em> to specify the <em>add_one</em> path in\nthe <code class=\"hljs\">members</code> list:</p>\n<p><span class=\"filename\">Filename: Cargo.toml</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[workspace]</span>\n\n<span class=\"hljs-attr\">members</span> = [\n    <span class=\"hljs-string\">\"adder\"</span>,\n    <span class=\"hljs-string\">\"add_one\"</span>,\n]\n</code></pre>\n<p>Then generate a new library crate named <code class=\"hljs\">add_one</code>:</p>\n<!-- manual-regeneration\ncd listings/ch14-more-about-cargo/output-only-02-add-one/add\nrm -rf add_one\ncargo new add_one --lib\ncopy output below\n-->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo new add_one --lib</span>\n     Created library `add_one` package\n</code></pre>\n<p>Your <em>add</em> directory should now have these directories and files:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">‚îú‚îÄ‚îÄ Cargo.lock\n‚îú‚îÄ‚îÄ Cargo.toml\n‚îú‚îÄ‚îÄ add_one\n‚îÇ   ‚îú‚îÄ‚îÄ Cargo.toml\n‚îÇ   ‚îî‚îÄ‚îÄ src\n‚îÇ       ‚îî‚îÄ‚îÄ lib.rs\n‚îú‚îÄ‚îÄ adder\n‚îÇ   ‚îú‚îÄ‚îÄ Cargo.toml\n‚îÇ   ‚îî‚îÄ‚îÄ src\n‚îÇ       ‚îî‚îÄ‚îÄ main.rs\n‚îî‚îÄ‚îÄ target\n</code></pre>\n<p>In the <em>add_one/src/lib.rs</em> file, let‚Äôs add an <code class=\"hljs\">add_one</code> function:</p>\n<p><span class=\"filename\">Filename: add_one/src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust noplayground hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add_one</span></span>(x: <span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span> {\n    x + <span class=\"hljs-number\">1</span>\n}</code></pre>\n<p>Now we can have the <code class=\"hljs\">adder</code> package with our binary depend on the <code class=\"hljs\">add_one</code>\npackage that has our library. First, we‚Äôll need to add a path dependency on\n<code class=\"hljs\">add_one</code> to <em>adder/Cargo.toml</em>.</p>\n<p><span class=\"filename\">Filename: adder/Cargo.toml</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">add_one</span> = { path = <span class=\"hljs-string\">\"../add_one\"</span> }\n</code></pre>\n<p>Cargo doesn‚Äôt assume that crates in a workspace will depend on each other, so\nwe need to be explicit about the dependency relationships.</p>\n<p>Next, let‚Äôs use the <code class=\"hljs\">add_one</code> function (from the <code class=\"hljs\">add_one</code> crate) in the\n<code class=\"hljs\">adder</code> crate. Open the <em>adder/src/main.rs</em> file and add a <code class=\"hljs\">use</code> line at the\ntop to bring the new <code class=\"hljs\">add_one</code> library crate into scope. Then change the <code class=\"hljs\">main</code>\nfunction to call the <code class=\"hljs\">add_one</code> function, as in Listing 14-7.</p>\n<p><span class=\"filename\">Filename: adder/src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">use</span> add_one;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> num = <span class=\"hljs-number\">10</span>;\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Hello, world! {num} plus one is {}!\"</span>, add_one::add_one(num));\n}</code></pre>\n<p><span class=\"caption\">Listing 14-7: Using the <code class=\"hljs\">add_one</code> library crate from the\n<code class=\"hljs\">adder</code> crate</span></p>\n<p>Let‚Äôs build the workspace by running <code class=\"hljs\">cargo build</code> in the top-level <em>add</em>\ndirectory!</p>\n<!-- manual-regeneration\ncd listings/ch14-more-about-cargo/listing-14-07/add\ncargo build\ncopy output below; the output updating script doesn't handle subdirectories in paths properly\n-->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo build</span>\n   Compiling add_one v0.1.0 (file:///projects/add/add_one)\n   Compiling adder v0.1.0 (file:///projects/add/adder)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.68s\n</code></pre>\n<p>To run the binary crate from the <em>add</em> directory, we can specify which\npackage in the workspace we want to run by using the <code class=\"hljs\">-p</code> argument and the\npackage name with <code class=\"hljs\">cargo run</code>:</p>\n<!-- manual-regeneration\ncd listings/ch14-more-about-cargo/listing-14-07/add\ncargo run -p adder\ncopy output below; the output updating script doesn't handle subdirectories in paths properly\n-->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run -p adder</span>\n    Finished dev [unoptimized + debuginfo] target(s) in 0.0s\n     Running `target/debug/adder`\nHello, world! 10 plus one is 11!\n</code></pre>\n<p>This runs the code in <em>adder/src/main.rs</em>, which depends on the <code class=\"hljs\">add_one</code> crate.</p>\n<h4 id=\"depending-on-an-external-package-in-a-workspace\"><a class=\"header\" href=\"#depending-on-an-external-package-in-a-workspace\">Depending on an External Package in a Workspace</a></h4>\n<p>Notice that the workspace has only one <em>Cargo.lock</em> file at the top level,\nrather than having a <em>Cargo.lock</em> in each crate‚Äôs directory. This ensures that\nall crates are using the same version of all dependencies. If we add the <code class=\"hljs\">rand</code>\npackage to the <em>adder/Cargo.toml</em> and <em>add_one/Cargo.toml</em> files, Cargo will\nresolve both of those to one version of <code class=\"hljs\">rand</code> and record that in the one\n<em>Cargo.lock</em>. Making all crates in the workspace use the same dependencies\nmeans the crates will always be compatible with each other. Let‚Äôs add the\n<code class=\"hljs\">rand</code> crate to the <code class=\"hljs\">[dependencies]</code> section in the <em>add_one/Cargo.toml</em> file\nso we can use the <code class=\"hljs\">rand</code> crate in the <code class=\"hljs\">add_one</code> crate:</p>\n<!-- When updating the version of `rand` used, also update the version of\n`rand` used in these files so they all match:\n* ch02-00-guessing-game-tutorial.md\n* ch07-04-bringing-paths-into-scope-with-the-use-keyword.md\n-->\n<p><span class=\"filename\">Filename: add_one/Cargo.toml</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">rand</span> = <span class=\"hljs-string\">\"0.8.5\"</span>\n</code></pre>\n<p>We can now add <code class=\"hljs\">use rand;</code> to the <em>add_one/src/lib.rs</em> file, and building the\nwhole workspace by running <code class=\"hljs\">cargo build</code> in the <em>add</em> directory will bring in\nand compile the <code class=\"hljs\">rand</code> crate. We will get one warning because we aren‚Äôt\nreferring to the <code class=\"hljs\">rand</code> we brought into scope:</p>\n<!-- manual-regeneration\ncd listings/ch14-more-about-cargo/no-listing-03-workspace-with-external-dependency/add\ncargo build\ncopy output below; the output updating script doesn't handle subdirectories in paths properly\n-->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo build</span>\n    Updating crates.io index\n  Downloaded rand v0.8.5\n   --snip--\n   Compiling rand v0.8.5\n   Compiling add_one v0.1.0 (file:///projects/add/add_one)\nwarning: unused import: `rand`\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> add_one/src/lib.rs:1:5</span>\n  |\n1 | use rand;\n  |     ^^^^\n  |\n  = note: `#[warn(unused_imports)]` on by default\n\nwarning: `add_one` (lib) generated 1 warning\n   Compiling adder v0.1.0 (file:///projects/add/adder)\n    Finished dev [unoptimized + debuginfo] target(s) in 10.18s\n</code></pre>\n<p>The top-level <em>Cargo.lock</em> now contains information about the dependency of\n<code class=\"hljs\">add_one</code> on <code class=\"hljs\">rand</code>. However, even though <code class=\"hljs\">rand</code> is used somewhere in the\nworkspace, we can‚Äôt use it in other crates in the workspace unless we add\n<code class=\"hljs\">rand</code> to their <em>Cargo.toml</em> files as well. For example, if we add <code class=\"hljs\">use rand;</code>\nto the <em>adder/src/main.rs</em> file for the <code class=\"hljs\">adder</code> package, we‚Äôll get an error:</p>\n<!-- manual-regeneration\ncd listings/ch14-more-about-cargo/output-only-03-use-rand/add\ncargo build\ncopy output below; the output updating script doesn't handle subdirectories in paths properly\n-->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo build</span>\n  --snip--\n   Compiling adder v0.1.0 (file:///projects/add/adder)\nerror[E0432]: unresolved import `rand`\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> adder/src/main.rs:2:5</span>\n  |\n2 | use rand;\n  |     ^^^^ no external crate `rand`\n</code></pre>\n<p>To fix this, edit the <em>Cargo.toml</em> file for the <code class=\"hljs\">adder</code> package and indicate\nthat <code class=\"hljs\">rand</code> is a dependency for it as well. Building the <code class=\"hljs\">adder</code> package will\nadd <code class=\"hljs\">rand</code> to the list of dependencies for <code class=\"hljs\">adder</code> in <em>Cargo.lock</em>, but no\nadditional copies of <code class=\"hljs\">rand</code> will be downloaded. Cargo will ensure that every\ncrate in every package in the workspace using the <code class=\"hljs\">rand</code> package will be using\nthe same version as long as they specify compatible versions of <code class=\"hljs\">rand</code>, saving\nus space and ensuring that the crates in the workspace will be compatible with\neach other.</p>\n<p>If crates in the workspace specify incompatible versions of the same dependency,\nCargo will resolve each of them, but will still try to resolve as few versions\nas possible.</p>\n<h4 id=\"adding-a-test-to-a-workspace\"><a class=\"header\" href=\"#adding-a-test-to-a-workspace\">Adding a Test to a Workspace</a></h4>\n<p>For another enhancement, let‚Äôs add a test of the <code class=\"hljs\">add_one::add_one</code> function\nwithin the <code class=\"hljs\">add_one</code> crate:</p>\n<p><span class=\"filename\">Filename: add_one/src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust noplayground hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add_one</span></span>(x: <span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span> {\n    x + <span class=\"hljs-number\">1</span>\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::*;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">it_works</span></span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">3</span>, add_one(<span class=\"hljs-number\">2</span>));\n    }\n}</code></pre>\n<p>Now run <code class=\"hljs\">cargo test</code> in the top-level <em>add</em> directory. Running <code class=\"hljs\">cargo test</code> in\na workspace structured like this one will run the tests for all the crates in\nthe workspace:</p>\n<!-- manual-regeneration\ncd listings/ch14-more-about-cargo/no-listing-04-workspace-with-tests/add\ncargo test\ncopy output below; the output updating script doesn't handle subdirectories in\npaths properly\n-->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo <span class=\"hljs-built_in\">test</span></span>\n   Compiling add_one v0.1.0 (file:///projects/add/add_one)\n   Compiling adder v0.1.0 (file:///projects/add/adder)\n    Finished test [unoptimized + debuginfo] target(s) in 0.27s\n     Running unittests src/lib.rs (target/debug/deps/add_one-f0253159197f7841)\n\nrunning 1 test\ntest tests::it_works ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n     Running unittests src/main.rs (target/debug/deps/adder-49979ff40686fa8e)\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n   Doc-tests add_one\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n</code></pre>\n<p>The first section of the output shows that the <code class=\"hljs\">it_works</code> test in the <code class=\"hljs\">add_one</code>\ncrate passed. The next section shows that zero tests were found in the <code class=\"hljs\">adder</code>\ncrate, and then the last section shows zero documentation tests were found in\nthe <code class=\"hljs\">add_one</code> crate.</p>\n<p>We can also run tests for one particular crate in a workspace from the\ntop-level directory by using the <code class=\"hljs\">-p</code> flag and specifying the name of the crate\nwe want to test:</p>\n<!-- manual-regeneration\ncd listings/ch14-more-about-cargo/no-listing-04-workspace-with-tests/add\ncargo test -p add_one\ncopy output below; the output updating script doesn't handle subdirectories in paths properly\n-->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo <span class=\"hljs-built_in\">test</span> -p add_one</span>\n    Finished test [unoptimized + debuginfo] target(s) in 0.00s\n     Running unittests src/lib.rs (target/debug/deps/add_one-b3235fea9a156f74)\n\nrunning 1 test\ntest tests::it_works ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\n   Doc-tests add_one\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n</code></pre>\n<p>This output shows <code class=\"hljs\">cargo test</code> only ran the tests for the <code class=\"hljs\">add_one</code> crate and\ndidn‚Äôt run the <code class=\"hljs\">adder</code> crate tests.</p>\n<p>If you publish the crates in the workspace to <a href=\"https://crates.io/\">crates.io</a>,\neach crate in the workspace will need to be published separately. Like <code class=\"hljs\">cargo test</code>, we can publish a particular crate in our workspace by using the <code class=\"hljs\">-p</code>\nflag and specifying the name of the crate we want to publish.</p>\n<p>For additional practice, add an <code class=\"hljs\">add_two</code> crate to this workspace in a similar\nway as the <code class=\"hljs\">add_one</code> crate!</p>\n<p>As your project grows, consider using a workspace: it‚Äôs easier to understand\nsmaller, individual components than one big blob of code. Furthermore, keeping\nthe crates in a workspace can make coordination between crates easier if they\nare often changed at the same time.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><!-- Old link, do not remove -->\n<p><a id=\"installing-binaries-from-cratesio-with-cargo-install\"></a></p>\n<h2 id=\"installing-binaries-with-cargo-install\"><a class=\"header\" href=\"#installing-binaries-with-cargo-install\">Installing Binaries with <code>cargo install</code></a></h2>\n<p>The <code class=\"hljs\">cargo install</code> command allows you to install and use binary crates\nlocally. This isn‚Äôt intended to replace system packages; it‚Äôs meant to be a\nconvenient way for Rust developers to install tools that others have shared on\n<a href=\"https://crates.io/\">crates.io</a><!-- ignore -->. Note that you can only install\npackages that have binary targets. A <em>binary target</em> is the runnable program\nthat is created if the crate has a <em>src/main.rs</em> file or another file specified\nas a binary, as opposed to a library target that isn‚Äôt runnable on its own but\nis suitable for including within other programs. Usually, crates have\ninformation in the <em>README</em> file about whether a crate is a library, has a\nbinary target, or both.</p>\n<p>All binaries installed with <code class=\"hljs\">cargo install</code> are stored in the installation\nroot‚Äôs <em>bin</em> folder. If you installed Rust using <em>rustup.rs</em> and don‚Äôt have any\ncustom configurations, this directory will be <em>$HOME/.cargo/bin</em>. Ensure that\ndirectory is in your <code class=\"hljs\">$PATH</code> to be able to run programs you‚Äôve installed with\n<code class=\"hljs\">cargo install</code>.</p>\n<p>For example, in Chapter 12 we mentioned that there‚Äôs a Rust implementation of\nthe <code class=\"hljs\">grep</code> tool called <code class=\"hljs\">ripgrep</code> for searching files. To install <code class=\"hljs\">ripgrep</code>, we\ncan run the following:</p>\n<!-- manual-regeneration\ncargo install something you don't have, copy relevant output below\n-->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo install ripgrep</span>\n    Updating crates.io index\n  Downloaded ripgrep v13.0.0\n  Downloaded 1 crate (243.3 KB) in 0.88s\n  Installing ripgrep v13.0.0\n--snip--\n   Compiling ripgrep v13.0.0\n    Finished release [optimized + debuginfo] target(s) in 3m 10s\n  Installing ~/.cargo/bin/rg\n   Installed package `ripgrep v13.0.0` (executable `rg`)\n</code></pre>\n<p>The second-to-last line of the output shows the location and the name of the\ninstalled binary, which in the case of <code class=\"hljs\">ripgrep</code> is <code class=\"hljs\">rg</code>. As long as the\ninstallation directory is in your <code class=\"hljs\">$PATH</code>, as mentioned previously, you can\nthen run <code class=\"hljs\">rg --help</code> and start using a faster, rustier tool for searching files!</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"extending-cargo-with-custom-commands\"><a class=\"header\" href=\"#extending-cargo-with-custom-commands\">Extending Cargo with Custom Commands</a></h2>\n<p>Cargo is designed so you can extend it with new subcommands without having to\nmodify Cargo. If a binary in your <code class=\"hljs\">$PATH</code> is named <code class=\"hljs\">cargo-something</code>, you can\nrun it as if it was a Cargo subcommand by running <code class=\"hljs\">cargo something</code>. Custom\ncommands like this are also listed when you run <code class=\"hljs\">cargo --list</code>. Being able to\nuse <code class=\"hljs\">cargo install</code> to install extensions and then run them just like the\nbuilt-in Cargo tools is a super convenient benefit of Cargo‚Äôs design!</p>\n<h2 id=\"summary-13\"><a class=\"header\" href=\"#summary-13\">Summary</a></h2>\n<p>Sharing code with Cargo and <a href=\"https://crates.io/\">crates.io</a><!-- ignore --> is\npart of what makes the Rust ecosystem useful for many different tasks. Rust‚Äôs\nstandard library is small and stable, but crates are easy to share, use, and\nimprove on a timeline different from that of the language. Don‚Äôt be shy about\nsharing code that‚Äôs useful to you on <a href=\"https://crates.io/\">crates.io</a><!-- ignore\n-->; it‚Äôs likely that it will be useful to someone else as well!</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"smart-pointers\"><a class=\"header\" href=\"#smart-pointers\">Smart Pointers</a></h1>\n<p>A <em>pointer</em> is a general concept for a variable that contains an address in\nmemory. This address refers to, or ‚Äúpoints at,‚Äù some other data. The most\ncommon kind of pointer in Rust is a reference, which you learned about in\nChapter 4. References are indicated by the <code class=\"hljs\">&amp;</code> symbol and borrow the value they\npoint to. They don‚Äôt have any special capabilities other than referring to\ndata, and have no overhead.</p>\n<p><em>Smart pointers</em>, on the other hand, are data structures that act like a\npointer but also have additional metadata and capabilities. The concept of\nsmart pointers isn‚Äôt unique to Rust: smart pointers originated in C++ and exist\nin other languages as well. Rust has a variety of smart pointers defined in the\nstandard library that provide functionality beyond that provided by references.\nTo explore the general concept, we‚Äôll look at a couple of different examples of\nsmart pointers, including a <em>reference counting</em> smart pointer type. This\npointer enables you to allow data to have multiple owners by keeping track of\nthe number of owners and, when no owners remain, cleaning up the data.</p>\n<p>Rust, with its concept of ownership and borrowing, has an additional difference\nbetween references and smart pointers: while references only borrow data, in\nmany cases, smart pointers <em>own</em> the data they point to.</p>\n<p>Though we didn‚Äôt call them as such at the time, we‚Äôve already encountered a few\nsmart pointers in this book, including <code class=\"hljs\">String</code> and <code class=\"hljs\">Vec&lt;T&gt;</code> in Chapter 8. Both\nthese types count as smart pointers because they own some memory and allow you\nto manipulate it. They also have metadata and extra capabilities or guarantees.\n<code class=\"hljs\">String</code>, for example, stores its capacity as metadata and has the extra\nability to ensure its data will always be valid UTF-8.</p>\n<p>Smart pointers are usually implemented using structs. Unlike an ordinary\nstruct, smart pointers implement the <code class=\"hljs\">Deref</code> and <code class=\"hljs\">Drop</code> traits. The <code class=\"hljs\">Deref</code>\ntrait allows an instance of the smart pointer struct to behave like a reference\nso you can write your code to work with either references or smart pointers.\nThe <code class=\"hljs\">Drop</code> trait allows you to customize the code that‚Äôs run when an instance\nof the smart pointer goes out of scope. In this chapter, we‚Äôll discuss both\ntraits and demonstrate why they‚Äôre important to smart pointers.</p>\n<p>Given that the smart pointer pattern is a general design pattern used\nfrequently in Rust, this chapter won‚Äôt cover every existing smart pointer. Many\nlibraries have their own smart pointers, and you can even write your own. We‚Äôll\ncover the most common smart pointers in the standard library:</p>\n<ul>\n<li><code class=\"hljs\">Box&lt;T&gt;</code> for allocating values on the heap</li>\n<li><code class=\"hljs\">Rc&lt;T&gt;</code>, a reference counting type that enables multiple ownership</li>\n<li><code class=\"hljs\">Ref&lt;T&gt;</code> and <code class=\"hljs\">RefMut&lt;T&gt;</code>, accessed through <code class=\"hljs\">RefCell&lt;T&gt;</code>, a type that enforces\nthe borrowing rules at runtime instead of compile time</li>\n</ul>\n<p>In addition, we‚Äôll cover the <em>interior mutability</em> pattern where an immutable\ntype exposes an API for mutating an interior value. We‚Äôll also discuss\n<em>reference cycles</em>: how they can leak memory and how to prevent them.</p>\n<p>Let‚Äôs dive in!</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"using-boxt-to-point-to-data-on-the-heap\"><a class=\"header\" href=\"#using-boxt-to-point-to-data-on-the-heap\">Using <code>Box&lt;T&gt;</code> to Point to Data on the Heap</a></h2>\n<p>The most straightforward smart pointer is a <em>box</em>, whose type is written\n<code class=\"hljs\">Box&lt;T&gt;</code>. Boxes allow you to store data on the heap rather than the stack. What\nremains on the stack is the pointer to the heap data. Refer to Chapter 4 to\nreview the difference between the stack and the heap.</p>\n<p>Boxes don‚Äôt have performance overhead, other than storing their data on the\nheap instead of on the stack. But they don‚Äôt have many extra capabilities\neither. You‚Äôll use them most often in these situations:</p>\n<ul>\n<li>When you have a type whose size can‚Äôt be known at compile time and you want\nto use a value of that type in a context that requires an exact size</li>\n<li>When you have a large amount of data and you want to transfer ownership but\nensure the data won‚Äôt be copied when you do so</li>\n<li>When you want to own a value and you care only that it‚Äôs a type that\nimplements a particular trait rather than being of a specific type</li>\n</ul>\n<p>We‚Äôll demonstrate the first situation in the <a href=\"ch15-01-box.html#enabling-recursive-types-with-boxes\">‚ÄúEnabling Recursive Types with\nBoxes‚Äù</a><!-- ignore --> section. In the\nsecond case, transferring ownership of a large amount of data can take a long\ntime because the data is copied around on the stack. To improve performance in\nthis situation, we can store the large amount of data on the heap in a box.\nThen, only the small amount of pointer data is copied around on the stack,\nwhile the data it references stays in one place on the heap. The third case is\nknown as a <em>trait object</em>, and Chapter 17 devotes an entire section, <a href=\"ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types\">‚ÄúUsing\nTrait Objects That Allow for Values of Different Types,‚Äù</a><!--\nignore --> just to that topic. So what you learn here you‚Äôll apply again in\nChapter 17!</p>\n<h3 id=\"using-a-boxt-to-store-data-on-the-heap\"><a class=\"header\" href=\"#using-a-boxt-to-store-data-on-the-heap\">Using a <code>Box&lt;T&gt;</code> to Store Data on the Heap</a></h3>\n<p>Before we discuss the heap storage use case for <code class=\"hljs\">Box&lt;T&gt;</code>, we‚Äôll cover the\nsyntax and how to interact with values stored within a <code class=\"hljs\">Box&lt;T&gt;</code>.</p>\n<p>Listing 15-1 shows how to use a box to store an <code class=\"hljs\">i32</code> value on the heap:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> b = <span class=\"hljs-built_in\">Box</span>::new(<span class=\"hljs-number\">5</span>);\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"b = {b}\"</span>);\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 15-1: Storing an <code class=\"hljs\">i32</code> value on the heap using a\nbox</span></p>\n<p>We define the variable <code class=\"hljs\">b</code> to have the value of a <code class=\"hljs\">Box</code> that points to the\nvalue <code class=\"hljs\">5</code>, which is allocated on the heap. This program will print <code class=\"hljs\">b = 5</code>; in\nthis case, we can access the data in the box similar to how we would if this\ndata were on the stack. Just like any owned value, when a box goes out of\nscope, as <code class=\"hljs\">b</code> does at the end of <code class=\"hljs\">main</code>, it will be deallocated. The\ndeallocation happens both for the box (stored on the stack) and the data it\npoints to (stored on the heap).</p>\n<p>Putting a single value on the heap isn‚Äôt very useful, so you won‚Äôt use boxes by\nthemselves in this way very often. Having values like a single <code class=\"hljs\">i32</code> on the\nstack, where they‚Äôre stored by default, is more appropriate in the majority of\nsituations. Let‚Äôs look at a case where boxes allow us to define types that we\nwouldn‚Äôt be allowed to if we didn‚Äôt have boxes.</p>\n<h3 id=\"enabling-recursive-types-with-boxes\"><a class=\"header\" href=\"#enabling-recursive-types-with-boxes\">Enabling Recursive Types with Boxes</a></h3>\n<p>A value of <em>recursive type</em> can have another value of the same type as part of\nitself. Recursive types pose an issue because at compile time Rust needs to\nknow how much space a type takes up. However, the nesting of values of\nrecursive types could theoretically continue infinitely, so Rust can‚Äôt know how\nmuch space the value needs. Because boxes have a known size, we can enable\nrecursive types by inserting a box in the recursive type definition.</p>\n<p>As an example of a recursive type, let‚Äôs explore the <em>cons list</em>. This is a data\ntype commonly found in functional programming languages. The cons list type\nwe‚Äôll define is straightforward except for the recursion; therefore, the\nconcepts in the example we‚Äôll work with will be useful any time you get into\nmore complex situations involving recursive types.</p>\n<h4 id=\"more-information-about-the-cons-list\"><a class=\"header\" href=\"#more-information-about-the-cons-list\">More Information About the Cons List</a></h4>\n<p>A <em>cons list</em> is a data structure that comes from the Lisp programming language\nand its dialects and is made up of nested pairs, and is the Lisp version of a\nlinked list. Its name comes from the <code class=\"hljs\">cons</code> function (short for ‚Äúconstruct\nfunction‚Äù) in Lisp that constructs a new pair from its two arguments. By\ncalling <code class=\"hljs\">cons</code> on a pair consisting of a value and another pair, we can\nconstruct cons lists made up of recursive pairs.</p>\n<p>For example, here‚Äôs a pseudocode representation of a cons list containing the\nlist 1, 2, 3 with each pair in parentheses:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">(1, (2, (3, Nil)))\n</code></pre>\n<p>Each item in a cons list contains two elements: the value of the current item\nand the next item. The last item in the list contains only a value called <code class=\"hljs\">Nil</code>\nwithout a next item. A cons list is produced by recursively calling the <code class=\"hljs\">cons</code>\nfunction. The canonical name to denote the base case of the recursion is <code class=\"hljs\">Nil</code>.\nNote that this is not the same as the ‚Äúnull‚Äù or ‚Äúnil‚Äù concept in Chapter 6,\nwhich is an invalid or absent value.</p>\n<p>The cons list isn‚Äôt a commonly used data structure in Rust. Most of the time\nwhen you have a list of items in Rust, <code class=\"hljs\">Vec&lt;T&gt;</code> is a better choice to use.\nOther, more complex recursive data types <em>are</em> useful in various situations,\nbut by starting with the cons list in this chapter, we can explore how boxes\nlet us define a recursive data type without much distraction.</p>\n<p>Listing 15-2 contains an enum definition for a cons list. Note that this code\nwon‚Äôt compile yet because the <code class=\"hljs\">List</code> type doesn‚Äôt have a known size, which\nwe‚Äôll demonstrate.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">List</span></span> {\n    Cons(<span class=\"hljs-built_in\">i32</span>, List),\n    Nil,\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}</span></code></pre>\n<p><span class=\"caption\">Listing 15-2: The first attempt at defining an enum to\nrepresent a cons list data structure of <code class=\"hljs\">i32</code> values</span></p>\n<section class=\"note\" aria-role=\"note\">\n<p>Note: We‚Äôre implementing a cons list that holds only <code class=\"hljs\">i32</code> values for the\npurposes of this example. We could have implemented it using generics, as we\ndiscussed in Chapter 10, to define a cons list type that could store values of\nany type.</p>\n</section>\n<p>Using the <code class=\"hljs\">List</code> type to store the list <code class=\"hljs\">1, 2, 3</code> would look like the code in\nListing 15-3:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">List</span></span> {\n</span><span class=\"boring\">    Cons(<span class=\"hljs-built_in\">i32</span>, List),\n</span><span class=\"boring\">    Nil,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">use</span> crate::List::{Cons, Nil};\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> list = Cons(<span class=\"hljs-number\">1</span>, Cons(<span class=\"hljs-number\">2</span>, Cons(<span class=\"hljs-number\">3</span>, Nil)));\n}</code></pre>\n<p><span class=\"caption\">Listing 15-3: Using the <code class=\"hljs\">List</code> enum to store the list <code class=\"hljs\">1, 2, 3</code></span></p>\n<p>The first <code class=\"hljs\">Cons</code> value holds <code class=\"hljs\">1</code> and another <code class=\"hljs\">List</code> value. This <code class=\"hljs\">List</code> value is\nanother <code class=\"hljs\">Cons</code> value that holds <code class=\"hljs\">2</code> and another <code class=\"hljs\">List</code> value. This <code class=\"hljs\">List</code> value\nis one more <code class=\"hljs\">Cons</code> value that holds <code class=\"hljs\">3</code> and a <code class=\"hljs\">List</code> value, which is finally\n<code class=\"hljs\">Nil</code>, the non-recursive variant that signals the end of the list.</p>\n<p>If we try to compile the code in Listing 15-3, we get the error shown in\nListing 15-4:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling cons-list v0.1.0 (file:///projects/cons-list)\nerror[E0072]: recursive type `List` has infinite size\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/main.rs:1:1</span>\n  |\n1 | enum List {\n  | ^^^^^^^^^\n2 |     Cons(i32, List),\n  |               ---- recursive without indirection\n  |\nhelp: insert some indirection (e.g., a `Box`, `Rc`, or `&amp;`) to break the cycle\n  |\n2 |     Cons(i32, Box&lt;List&gt;),\n  |               ++++    +\n\nerror[E0391]: cycle detected when computing when `List` needs drop\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/main.rs:1:1</span>\n  |\n1 | enum List {\n  | ^^^^^^^^^\n  |\n  = note: ...which immediately requires computing when `List` needs drop again\n  = note: cycle used when computing whether `List` needs drop\n  = note: see https://rustc-dev-guide.rust-lang.org/overview.html#queries and https://rustc-dev-guide.rust-lang.org/query.html for more information\n\nSome errors have detailed explanations: E0072, E0391.\nFor more information about an error, try `rustc --explain E0072`.\nerror: could not compile `cons-list` (bin \"cons-list\") due to 2 previous errors\n</code></pre>\n<p><span class=\"caption\">Listing 15-4: The error we get when attempting to define\na recursive enum</span></p>\n<p>The error shows this type ‚Äúhas infinite size.‚Äù The reason is that we‚Äôve defined\n<code class=\"hljs\">List</code> with a variant that is recursive: it holds another value of itself\ndirectly. As a result, Rust can‚Äôt figure out how much space it needs to store a\n<code class=\"hljs\">List</code> value. Let‚Äôs break down why we get this error. First, we‚Äôll look at how\nRust decides how much space it needs to store a value of a non-recursive type.</p>\n<h4 id=\"computing-the-size-of-a-non-recursive-type\"><a class=\"header\" href=\"#computing-the-size-of-a-non-recursive-type\">Computing the Size of a Non-Recursive Type</a></h4>\n<p>Recall the <code class=\"hljs\">Message</code> enum we defined in Listing 6-2 when we discussed enum\ndefinitions in Chapter 6:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Message</span></span> {\n    Quit,\n    Move { x: <span class=\"hljs-built_in\">i32</span>, y: <span class=\"hljs-built_in\">i32</span> },\n    Write(<span class=\"hljs-built_in\">String</span>),\n    ChangeColor(<span class=\"hljs-built_in\">i32</span>, <span class=\"hljs-built_in\">i32</span>, <span class=\"hljs-built_in\">i32</span>),\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}</span></code></pre></pre>\n<p>To determine how much space to allocate for a <code class=\"hljs\">Message</code> value, Rust goes\nthrough each of the variants to see which variant needs the most space. Rust\nsees that <code class=\"hljs\">Message::Quit</code> doesn‚Äôt need any space, <code class=\"hljs\">Message::Move</code> needs enough\nspace to store two <code class=\"hljs\">i32</code> values, and so forth. Because only one variant will be\nused, the most space a <code class=\"hljs\">Message</code> value will need is the space it would take to\nstore the largest of its variants.</p>\n<p>Contrast this with what happens when Rust tries to determine how much space a\nrecursive type like the <code class=\"hljs\">List</code> enum in Listing 15-2 needs. The compiler starts\nby looking at the <code class=\"hljs\">Cons</code> variant, which holds a value of type <code class=\"hljs\">i32</code> and a value\nof type <code class=\"hljs\">List</code>. Therefore, <code class=\"hljs\">Cons</code> needs an amount of space equal to the size of\nan <code class=\"hljs\">i32</code> plus the size of a <code class=\"hljs\">List</code>. To figure out how much memory the <code class=\"hljs\">List</code>\ntype needs, the compiler looks at the variants, starting with the <code class=\"hljs\">Cons</code>\nvariant. The <code class=\"hljs\">Cons</code> variant holds a value of type <code class=\"hljs\">i32</code> and a value of type\n<code class=\"hljs\">List</code>, and this process continues infinitely, as shown in Figure 15-1.</p>\n<img alt=\"An infinite Cons list\" src=\"img/trpl15-01.svg\" class=\"center\" style=\"width: 50%;\">\n<p><span class=\"caption\">Figure 15-1: An infinite <code class=\"hljs\">List</code> consisting of infinite\n<code class=\"hljs\">Cons</code> variants</span></p>\n<h4 id=\"using-boxt-to-get-a-recursive-type-with-a-known-size\"><a class=\"header\" href=\"#using-boxt-to-get-a-recursive-type-with-a-known-size\">Using <code>Box&lt;T&gt;</code> to Get a Recursive Type with a Known Size</a></h4>\n<p>Because Rust can‚Äôt figure out how much space to allocate for recursively\ndefined types, the compiler gives an error with this helpful suggestion:</p>\n<!-- manual-regeneration\nafter doing automatic regeneration, look at listings/ch15-smart-pointers/listing-15-03/output.txt and copy the relevant line\n-->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">help: insert some indirection (e.g., a `Box`, `Rc`, or `&amp;`) to break the cycle\n  |\n2 |     Cons(i32, Box&lt;List&gt;),\n  |               ++++    +\n</code></pre>\n<p>In this suggestion, ‚Äúindirection‚Äù means that instead of storing a value\ndirectly, we should change the data structure to store the value indirectly by\nstoring a pointer to the value instead.</p>\n<p>Because a <code class=\"hljs\">Box&lt;T&gt;</code> is a pointer, Rust always knows how much space a <code class=\"hljs\">Box&lt;T&gt;</code>\nneeds: a pointer‚Äôs size doesn‚Äôt change based on the amount of data it‚Äôs\npointing to. This means we can put a <code class=\"hljs\">Box&lt;T&gt;</code> inside the <code class=\"hljs\">Cons</code> variant instead\nof another <code class=\"hljs\">List</code> value directly. The <code class=\"hljs\">Box&lt;T&gt;</code> will point to the next <code class=\"hljs\">List</code>\nvalue that will be on the heap rather than inside the <code class=\"hljs\">Cons</code> variant.\nConceptually, we still have a list, created with lists holding other lists, but\nthis implementation is now more like placing the items next to one another\nrather than inside one another.</p>\n<p>We can change the definition of the <code class=\"hljs\">List</code> enum in Listing 15-2 and the usage\nof the <code class=\"hljs\">List</code> in Listing 15-3 to the code in Listing 15-5, which will compile:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">List</span></span> {\n    Cons(<span class=\"hljs-built_in\">i32</span>, <span class=\"hljs-built_in\">Box</span>&lt;List&gt;),\n    Nil,\n}\n\n<span class=\"hljs-keyword\">use</span> crate::List::{Cons, Nil};\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> list = Cons(<span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">Box</span>::new(Cons(<span class=\"hljs-number\">2</span>, <span class=\"hljs-built_in\">Box</span>::new(Cons(<span class=\"hljs-number\">3</span>, <span class=\"hljs-built_in\">Box</span>::new(Nil))))));\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 15-5: Definition of <code class=\"hljs\">List</code> that uses <code class=\"hljs\">Box&lt;T&gt;</code> in\norder to have a known size</span></p>\n<p>The <code class=\"hljs\">Cons</code> variant needs the size of an <code class=\"hljs\">i32</code> plus the space to store the\nbox‚Äôs pointer data. The <code class=\"hljs\">Nil</code> variant stores no values, so it needs less space\nthan the <code class=\"hljs\">Cons</code> variant. We now know that any <code class=\"hljs\">List</code> value will take up the\nsize of an <code class=\"hljs\">i32</code> plus the size of a box‚Äôs pointer data. By using a box, we‚Äôve\nbroken the infinite, recursive chain, so the compiler can figure out the size\nit needs to store a <code class=\"hljs\">List</code> value. Figure 15-2 shows what the <code class=\"hljs\">Cons</code> variant\nlooks like now.</p>\n<img alt=\"A finite Cons list\" src=\"img/trpl15-02.svg\" class=\"center\">\n<p><span class=\"caption\">Figure 15-2: A <code class=\"hljs\">List</code> that is not infinitely sized\nbecause <code class=\"hljs\">Cons</code> holds a <code class=\"hljs\">Box</code></span></p>\n<p>Boxes provide only the indirection and heap allocation; they don‚Äôt have any\nother special capabilities, like those we‚Äôll see with the other smart pointer\ntypes. They also don‚Äôt have the performance overhead that these special\ncapabilities incur, so they can be useful in cases like the cons list where the\nindirection is the only feature we need. We‚Äôll look at more use cases for boxes\nin Chapter 17, too.</p>\n<p>The <code class=\"hljs\">Box&lt;T&gt;</code> type is a smart pointer because it implements the <code class=\"hljs\">Deref</code> trait,\nwhich allows <code class=\"hljs\">Box&lt;T&gt;</code> values to be treated like references. When a <code class=\"hljs\">Box&lt;T&gt;</code>\nvalue goes out of scope, the heap data that the box is pointing to is cleaned\nup as well because of the <code class=\"hljs\">Drop</code> trait implementation. These two traits will be\neven more important to the functionality provided by the other smart pointer\ntypes we‚Äôll discuss in the rest of this chapter. Let‚Äôs explore these two traits\nin more detail.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"treating-smart-pointers-like-regular-references-with-the-deref-trait\"><a class=\"header\" href=\"#treating-smart-pointers-like-regular-references-with-the-deref-trait\">Treating Smart Pointers Like Regular References with the <code>Deref</code> Trait</a></h2>\n<p>Implementing the <code class=\"hljs\">Deref</code> trait allows you to customize the behavior of the\n<em>dereference operator</em> <code class=\"hljs\">*</code> (not to be confused with the multiplication or glob\noperator). By implementing <code class=\"hljs\">Deref</code> in such a way that a smart pointer can be\ntreated like a regular reference, you can write code that operates on\nreferences and use that code with smart pointers too.</p>\n<p>Let‚Äôs first look at how the dereference operator works with regular references.\nThen we‚Äôll try to define a custom type that behaves like <code class=\"hljs\">Box&lt;T&gt;</code>, and see why\nthe dereference operator doesn‚Äôt work like a reference on our newly defined\ntype. We‚Äôll explore how implementing the <code class=\"hljs\">Deref</code> trait makes it possible for\nsmart pointers to work in ways similar to references. Then we‚Äôll look at\nRust‚Äôs <em>deref coercion</em> feature and how it lets us work with either references\nor smart pointers.</p>\n<section class=\"note\" aria-role=\"note\">\n<p>Note: There‚Äôs one big difference between the <code class=\"hljs\">MyBox&lt;T&gt;</code> type we‚Äôre about to\nbuild and the real <code class=\"hljs\">Box&lt;T&gt;</code>: our version will not store its data on the heap.\nWe are focusing this example on <code class=\"hljs\">Deref</code>, so where the data is actually stored\nis less important than the pointer-like behavior.</p>\n</section>\n<!-- Old link, do not remove -->\n<p><a id=\"following-the-pointer-to-the-value-with-the-dereference-operator\"></a></p>\n<h3 id=\"following-the-pointer-to-the-value\"><a class=\"header\" href=\"#following-the-pointer-to-the-value\">Following the Pointer to the Value</a></h3>\n<p>A regular reference is a type of pointer, and one way to think of a pointer is\nas an arrow to a value stored somewhere else. In Listing 15-6, we create a\nreference to an <code class=\"hljs\">i32</code> value and then use the dereference operator to follow the\nreference to the value:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">5</span>;\n    <span class=\"hljs-keyword\">let</span> y = &amp;x;\n\n    <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">5</span>, x);\n    <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">5</span>, *y);\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 15-6: Using the dereference operator to follow a\nreference to an <code class=\"hljs\">i32</code> value</span></p>\n<p>The variable <code class=\"hljs\">x</code> holds an <code class=\"hljs\">i32</code> value <code class=\"hljs\">5</code>. We set <code class=\"hljs\">y</code> equal to a reference to\n<code class=\"hljs\">x</code>. We can assert that <code class=\"hljs\">x</code> is equal to <code class=\"hljs\">5</code>. However, if we want to make an\nassertion about the value in <code class=\"hljs\">y</code>, we have to use <code class=\"hljs\">*y</code> to follow the reference\nto the value it‚Äôs pointing to (hence <em>dereference</em>) so the compiler can compare\nthe actual value. Once we dereference <code class=\"hljs\">y</code>, we have access to the integer value\n<code class=\"hljs\">y</code> is pointing to that we can compare with <code class=\"hljs\">5</code>.</p>\n<p>If we tried to write <code class=\"hljs\">assert_eq!(5, y);</code> instead, we would get this compilation\nerror:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling deref-example v0.1.0 (file:///projects/deref-example)\nerror[E0277]: can't compare `{integer}` with `&amp;{integer}`\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/main.rs:6:5</span>\n  |\n6 |     assert_eq!(5, y);\n  |     ^^^^^^^^^^^^^^^^ no implementation for `{integer} == &amp;{integer}`\n  |\n  = help: the trait `PartialEq&lt;&amp;{integer}&gt;` is not implemented for `{integer}`\n  = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n\nFor more information about this error, try `rustc --explain E0277`.\nerror: could not compile `deref-example` (bin \"deref-example\") due to 1 previous error\n</code></pre>\n<p>Comparing a number and a reference to a number isn‚Äôt allowed because they‚Äôre\ndifferent types. We must use the dereference operator to follow the reference\nto the value it‚Äôs pointing to.</p>\n<h3 id=\"using-boxt-like-a-reference\"><a class=\"header\" href=\"#using-boxt-like-a-reference\">Using <code>Box&lt;T&gt;</code> Like a Reference</a></h3>\n<p>We can rewrite the code in Listing 15-6 to use a <code class=\"hljs\">Box&lt;T&gt;</code> instead of a\nreference; the dereference operator used on the <code class=\"hljs\">Box&lt;T&gt;</code> in Listing 15-7\nfunctions in the same way as the dereference operator used on the reference in\nListing 15-6:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">5</span>;\n    <span class=\"hljs-keyword\">let</span> y = <span class=\"hljs-built_in\">Box</span>::new(x);\n\n    <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">5</span>, x);\n    <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">5</span>, *y);\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 15-7: Using the dereference operator on a\n<code class=\"hljs\">Box&lt;i32&gt;</code></span></p>\n<p>The main difference between Listing 15-7 and Listing 15-6 is that here we set\n<code class=\"hljs\">y</code> to be an instance of a <code class=\"hljs\">Box&lt;T&gt;</code> pointing to a copied value of <code class=\"hljs\">x</code> rather\nthan a reference pointing to the value of <code class=\"hljs\">x</code>. In the last assertion, we can\nuse the dereference operator to follow the pointer of the <code class=\"hljs\">Box&lt;T&gt;</code> in the same\nway that we did when <code class=\"hljs\">y</code> was a reference. Next, we‚Äôll explore what is special\nabout <code class=\"hljs\">Box&lt;T&gt;</code> that enables us to use the dereference operator by defining our\nown type.</p>\n<h3 id=\"defining-our-own-smart-pointer\"><a class=\"header\" href=\"#defining-our-own-smart-pointer\">Defining Our Own Smart Pointer</a></h3>\n<p>Let‚Äôs build a smart pointer similar to the <code class=\"hljs\">Box&lt;T&gt;</code> type provided by the\nstandard library to experience how smart pointers behave differently from\nreferences by default. Then we‚Äôll look at how to add the ability to use the\ndereference operator.</p>\n<p>The <code class=\"hljs\">Box&lt;T&gt;</code> type is ultimately defined as a tuple struct with one element, so\nListing 15-8 defines a <code class=\"hljs\">MyBox&lt;T&gt;</code> type in the same way. We‚Äôll also define a\n<code class=\"hljs\">new</code> function to match the <code class=\"hljs\">new</code> function defined on <code class=\"hljs\">Box&lt;T&gt;</code>.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">MyBox</span></span>&lt;T&gt;(T);\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; MyBox&lt;T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(x: T) -&gt; MyBox&lt;T&gt; {\n        MyBox(x)\n    }\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 15-8: Defining a <code class=\"hljs\">MyBox&lt;T&gt;</code> type</span></p>\n<p>We define a struct named <code class=\"hljs\">MyBox</code> and declare a generic parameter <code class=\"hljs\">T</code>, because\nwe want our type to hold values of any type. The <code class=\"hljs\">MyBox</code> type is a tuple struct\nwith one element of type <code class=\"hljs\">T</code>. The <code class=\"hljs\">MyBox::new</code> function takes one parameter of\ntype <code class=\"hljs\">T</code> and returns a <code class=\"hljs\">MyBox</code> instance that holds the value passed in.</p>\n<p>Let‚Äôs try adding the <code class=\"hljs\">main</code> function in Listing 15-7 to Listing 15-8 and\nchanging it to use the <code class=\"hljs\">MyBox&lt;T&gt;</code> type we‚Äôve defined instead of <code class=\"hljs\">Box&lt;T&gt;</code>. The\ncode in Listing 15-9 won‚Äôt compile because Rust doesn‚Äôt know how to dereference\n<code class=\"hljs\">MyBox</code>.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">MyBox</span></span>&lt;T&gt;(T);\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span>&lt;T&gt; MyBox&lt;T&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(x: T) -&gt; MyBox&lt;T&gt; {\n</span><span class=\"boring\">        MyBox(x)\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">5</span>;\n    <span class=\"hljs-keyword\">let</span> y = MyBox::new(x);\n\n    <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">5</span>, x);\n    <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">5</span>, *y);\n}</code></pre>\n<p><span class=\"caption\">Listing 15-9: Attempting to use <code class=\"hljs\">MyBox&lt;T&gt;</code> in the same\nway we used references and <code class=\"hljs\">Box&lt;T&gt;</code></span></p>\n<p>Here‚Äôs the resulting compilation error:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling deref-example v0.1.0 (file:///projects/deref-example)\nerror[E0614]: type `MyBox&lt;{integer}&gt;` cannot be dereferenced\n<span class=\"hljs-meta\">  --&gt;</span><span class=\"bash\"> src/main.rs:14:19</span>\n   |\n14 |     assert_eq!(5, *y);\n   |                   ^^\n\nFor more information about this error, try `rustc --explain E0614`.\nerror: could not compile `deref-example` (bin \"deref-example\") due to 1 previous error\n</code></pre>\n<p>Our <code class=\"hljs\">MyBox&lt;T&gt;</code> type can‚Äôt be dereferenced because we haven‚Äôt implemented that\nability on our type. To enable dereferencing with the <code class=\"hljs\">*</code> operator, we\nimplement the <code class=\"hljs\">Deref</code> trait.</p>\n<h3 id=\"treating-a-type-like-a-reference-by-implementing-the-deref-trait\"><a class=\"header\" href=\"#treating-a-type-like-a-reference-by-implementing-the-deref-trait\">Treating a Type Like a Reference by Implementing the <code>Deref</code> Trait</a></h3>\n<p>As discussed in the <a href=\"ch10-02-traits.html#implementing-a-trait-on-a-type\">‚ÄúImplementing a Trait on a Type‚Äù</a><!-- ignore\n--> section of Chapter 10, to implement a trait, we need to provide\nimplementations for the trait‚Äôs required methods. The <code class=\"hljs\">Deref</code> trait, provided\nby the standard library, requires us to implement one method named <code class=\"hljs\">deref</code> that\nborrows <code class=\"hljs\">self</code> and returns a reference to the inner data. Listing 15-10\ncontains an implementation of <code class=\"hljs\">Deref</code> to add to the definition of <code class=\"hljs\">MyBox</code>:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"hljs-keyword\">use</span> std::ops::Deref;\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; Deref <span class=\"hljs-keyword\">for</span> MyBox&lt;T&gt; {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Target</span></span> = T;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">deref</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; &amp;Self::Target {\n        &amp;<span class=\"hljs-keyword\">self</span>.<span class=\"hljs-number\">0</span>\n    }\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">MyBox</span></span>&lt;T&gt;(T);\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span>&lt;T&gt; MyBox&lt;T&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(x: T) -&gt; MyBox&lt;T&gt; {\n</span><span class=\"boring\">        MyBox(x)\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">5</span>;\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> y = MyBox::new(x);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">5</span>, x);\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">5</span>, *y);\n</span><span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 15-10: Implementing <code class=\"hljs\">Deref</code> on <code class=\"hljs\">MyBox&lt;T&gt;</code></span></p>\n<p>The <code class=\"hljs\">type Target = T;</code> syntax defines an associated type for the <code class=\"hljs\">Deref</code>\ntrait to use. Associated types are a slightly different way of declaring a\ngeneric parameter, but you don‚Äôt need to worry about them for now; we‚Äôll cover\nthem in more detail in Chapter 19.</p>\n<p>We fill in the body of the <code class=\"hljs\">deref</code> method with <code class=\"hljs\">&amp;self.0</code> so <code class=\"hljs\">deref</code> returns a\nreference to the value we want to access with the <code class=\"hljs\">*</code> operator; recall from the\n<a href=\"ch05-01-defining-structs.html#using-tuple-structs-without-named-fields-to-create-different-types\">‚ÄúUsing Tuple Structs without Named Fields to Create Different\nTypes‚Äù</a><!-- ignore --> section of Chapter 5 that <code class=\"hljs\">.0</code> accesses\nthe first value in a tuple struct. The <code class=\"hljs\">main</code> function in Listing 15-9 that\ncalls <code class=\"hljs\">*</code> on the <code class=\"hljs\">MyBox&lt;T&gt;</code> value now compiles, and the assertions pass!</p>\n<p>Without the <code class=\"hljs\">Deref</code> trait, the compiler can only dereference <code class=\"hljs\">&amp;</code> references.\nThe <code class=\"hljs\">deref</code> method gives the compiler the ability to take a value of any type\nthat implements <code class=\"hljs\">Deref</code> and call the <code class=\"hljs\">deref</code> method to get a <code class=\"hljs\">&amp;</code> reference that\nit knows how to dereference.</p>\n<p>When we entered <code class=\"hljs\">*y</code> in Listing 15-9, behind the scenes Rust actually ran this\ncode:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\">*(y.deref())</code></pre>\n<p>Rust substitutes the <code class=\"hljs\">*</code> operator with a call to the <code class=\"hljs\">deref</code> method and then a\nplain dereference so we don‚Äôt have to think about whether or not we need to\ncall the <code class=\"hljs\">deref</code> method. This Rust feature lets us write code that functions\nidentically whether we have a regular reference or a type that implements\n<code class=\"hljs\">Deref</code>.</p>\n<p>The reason the <code class=\"hljs\">deref</code> method returns a reference to a value, and that the\nplain dereference outside the parentheses in <code class=\"hljs\">*(y.deref())</code> is still necessary,\nis to do with the ownership system. If the <code class=\"hljs\">deref</code> method returned the value\ndirectly instead of a reference to the value, the value would be moved out of\n<code class=\"hljs\">self</code>. We don‚Äôt want to take ownership of the inner value inside <code class=\"hljs\">MyBox&lt;T&gt;</code> in\nthis case or in most cases where we use the dereference operator.</p>\n<p>Note that the <code class=\"hljs\">*</code> operator is replaced with a call to the <code class=\"hljs\">deref</code> method and\nthen a call to the <code class=\"hljs\">*</code> operator just once, each time we use a <code class=\"hljs\">*</code> in our code.\nBecause the substitution of the <code class=\"hljs\">*</code> operator does not recurse infinitely, we\nend up with data of type <code class=\"hljs\">i32</code>, which matches the <code class=\"hljs\">5</code> in <code class=\"hljs\">assert_eq!</code> in\nListing 15-9.</p>\n<h3 id=\"implicit-deref-coercions-with-functions-and-methods\"><a class=\"header\" href=\"#implicit-deref-coercions-with-functions-and-methods\">Implicit Deref Coercions with Functions and Methods</a></h3>\n<p><em>Deref coercion</em> converts a reference to a type that implements the <code class=\"hljs\">Deref</code>\ntrait into a reference to another type. For example, deref coercion can convert\n<code class=\"hljs\">&amp;String</code> to <code class=\"hljs\">&amp;str</code> because <code class=\"hljs\">String</code> implements the <code class=\"hljs\">Deref</code> trait such that it\nreturns <code class=\"hljs\">&amp;str</code>. Deref coercion is a convenience Rust performs on arguments to\nfunctions and methods, and works only on types that implement the <code class=\"hljs\">Deref</code>\ntrait. It happens automatically when we pass a reference to a particular type‚Äôs\nvalue as an argument to a function or method that doesn‚Äôt match the parameter\ntype in the function or method definition. A sequence of calls to the <code class=\"hljs\">deref</code>\nmethod converts the type we provided into the type the parameter needs.</p>\n<p>Deref coercion was added to Rust so that programmers writing function and\nmethod calls don‚Äôt need to add as many explicit references and dereferences\nwith <code class=\"hljs\">&amp;</code> and <code class=\"hljs\">*</code>. The deref coercion feature also lets us write more code that\ncan work for either references or smart pointers.</p>\n<p>To see deref coercion in action, let‚Äôs use the <code class=\"hljs\">MyBox&lt;T&gt;</code> type we defined in\nListing 15-8 as well as the implementation of <code class=\"hljs\">Deref</code> that we added in Listing\n15-10. Listing 15-11 shows the definition of a function that has a string slice\nparameter:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">hello</span></span>(name: &amp;<span class=\"hljs-built_in\">str</span>) {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Hello, {name}!\"</span>);\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 15-11: A <code class=\"hljs\">hello</code> function that has the parameter\n<code class=\"hljs\">name</code> of type <code class=\"hljs\">&amp;str</code></span></p>\n<p>We can call the <code class=\"hljs\">hello</code> function with a string slice as an argument, such as\n<code class=\"hljs\">hello(\"Rust\");</code> for example. Deref coercion makes it possible to call <code class=\"hljs\">hello</code>\nwith a reference to a value of type <code class=\"hljs\">MyBox&lt;String&gt;</code>, as shown in Listing 15-12:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::ops::Deref;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span>&lt;T&gt; Deref <span class=\"hljs-keyword\">for</span> MyBox&lt;T&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Target</span></span> = T;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">deref</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; &amp;T {\n</span><span class=\"boring\">        &amp;<span class=\"hljs-keyword\">self</span>.<span class=\"hljs-number\">0</span>\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">MyBox</span></span>&lt;T&gt;(T);\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span>&lt;T&gt; MyBox&lt;T&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(x: T) -&gt; MyBox&lt;T&gt; {\n</span><span class=\"boring\">        MyBox(x)\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">hello</span></span>(name: &amp;<span class=\"hljs-built_in\">str</span>) {\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Hello, {name}!\"</span>);\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> m = MyBox::new(<span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Rust\"</span>));\n    hello(&amp;m);\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 15-12: Calling <code class=\"hljs\">hello</code> with a reference to a\n<code class=\"hljs\">MyBox&lt;String&gt;</code> value, which works because of deref coercion</span></p>\n<p>Here we‚Äôre calling the <code class=\"hljs\">hello</code> function with the argument <code class=\"hljs\">&amp;m</code>, which is a\nreference to a <code class=\"hljs\">MyBox&lt;String&gt;</code> value. Because we implemented the <code class=\"hljs\">Deref</code> trait\non <code class=\"hljs\">MyBox&lt;T&gt;</code> in Listing 15-10, Rust can turn <code class=\"hljs\">&amp;MyBox&lt;String&gt;</code> into <code class=\"hljs\">&amp;String</code>\nby calling <code class=\"hljs\">deref</code>. The standard library provides an implementation of <code class=\"hljs\">Deref</code>\non <code class=\"hljs\">String</code> that returns a string slice, and this is in the API documentation\nfor <code class=\"hljs\">Deref</code>. Rust calls <code class=\"hljs\">deref</code> again to turn the <code class=\"hljs\">&amp;String</code> into <code class=\"hljs\">&amp;str</code>, which\nmatches the <code class=\"hljs\">hello</code> function‚Äôs definition.</p>\n<p>If Rust didn‚Äôt implement deref coercion, we would have to write the code in\nListing 15-13 instead of the code in Listing 15-12 to call <code class=\"hljs\">hello</code> with a value\nof type <code class=\"hljs\">&amp;MyBox&lt;String&gt;</code>.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::ops::Deref;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span>&lt;T&gt; Deref <span class=\"hljs-keyword\">for</span> MyBox&lt;T&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Target</span></span> = T;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">deref</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; &amp;T {\n</span><span class=\"boring\">        &amp;<span class=\"hljs-keyword\">self</span>.<span class=\"hljs-number\">0</span>\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">MyBox</span></span>&lt;T&gt;(T);\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span>&lt;T&gt; MyBox&lt;T&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(x: T) -&gt; MyBox&lt;T&gt; {\n</span><span class=\"boring\">        MyBox(x)\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">hello</span></span>(name: &amp;<span class=\"hljs-built_in\">str</span>) {\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Hello, {name}!\"</span>);\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> m = MyBox::new(<span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Rust\"</span>));\n    hello(&amp;(*m)[..]);\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 15-13: The code we would have to write if Rust\ndidn‚Äôt have deref coercion</span></p>\n<p>The <code class=\"hljs\">(*m)</code> dereferences the <code class=\"hljs\">MyBox&lt;String&gt;</code> into a <code class=\"hljs\">String</code>. Then the <code class=\"hljs\">&amp;</code> and\n<code class=\"hljs\">[..]</code> take a string slice of the <code class=\"hljs\">String</code> that is equal to the whole string to\nmatch the signature of <code class=\"hljs\">hello</code>. This code without deref coercions is harder to\nread, write, and understand with all of these symbols involved. Deref coercion\nallows Rust to handle these conversions for us automatically.</p>\n<p>When the <code class=\"hljs\">Deref</code> trait is defined for the types involved, Rust will analyze the\ntypes and use <code class=\"hljs\">Deref::deref</code> as many times as necessary to get a reference to\nmatch the parameter‚Äôs type. The number of times that <code class=\"hljs\">Deref::deref</code> needs to be\ninserted is resolved at compile time, so there is no runtime penalty for taking\nadvantage of deref coercion!</p>\n<h3 id=\"how-deref-coercion-interacts-with-mutability\"><a class=\"header\" href=\"#how-deref-coercion-interacts-with-mutability\">How Deref Coercion Interacts with Mutability</a></h3>\n<p>Similar to how you use the <code class=\"hljs\">Deref</code> trait to override the <code class=\"hljs\">*</code> operator on\nimmutable references, you can use the <code class=\"hljs\">DerefMut</code> trait to override the <code class=\"hljs\">*</code>\noperator on mutable references.</p>\n<p>Rust does deref coercion when it finds types and trait implementations in three\ncases:</p>\n<ul>\n<li>From <code class=\"hljs\">&amp;T</code> to <code class=\"hljs\">&amp;U</code> when <code class=\"hljs\">T: Deref&lt;Target=U&gt;</code></li>\n<li>From <code class=\"hljs\">&amp;mut T</code> to <code class=\"hljs\">&amp;mut U</code> when <code class=\"hljs\">T: DerefMut&lt;Target=U&gt;</code></li>\n<li>From <code class=\"hljs\">&amp;mut T</code> to <code class=\"hljs\">&amp;U</code> when <code class=\"hljs\">T: Deref&lt;Target=U&gt;</code></li>\n</ul>\n<p>The first two cases are the same as each other except that the second\nimplements mutability. The first case states that if you have a <code class=\"hljs\">&amp;T</code>, and <code class=\"hljs\">T</code>\nimplements <code class=\"hljs\">Deref</code> to some type <code class=\"hljs\">U</code>, you can get a <code class=\"hljs\">&amp;U</code> transparently. The\nsecond case states that the same deref coercion happens for mutable references.</p>\n<p>The third case is trickier: Rust will also coerce a mutable reference to an\nimmutable one. But the reverse is <em>not</em> possible: immutable references will\nnever coerce to mutable references. Because of the borrowing rules, if you have\na mutable reference, that mutable reference must be the only reference to that\ndata (otherwise, the program wouldn‚Äôt compile). Converting one mutable\nreference to one immutable reference will never break the borrowing rules.\nConverting an immutable reference to a mutable reference would require that the\ninitial immutable reference is the only immutable reference to that data, but\nthe borrowing rules don‚Äôt guarantee that. Therefore, Rust can‚Äôt make the\nassumption that converting an immutable reference to a mutable reference is\npossible.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"running-code-on-cleanup-with-the-drop-trait\"><a class=\"header\" href=\"#running-code-on-cleanup-with-the-drop-trait\">Running Code on Cleanup with the <code>Drop</code> Trait</a></h2>\n<p>The second trait important to the smart pointer pattern is <code class=\"hljs\">Drop</code>, which lets\nyou customize what happens when a value is about to go out of scope. You can\nprovide an implementation for the <code class=\"hljs\">Drop</code> trait on any type, and that code can\nbe used to release resources like files or network connections.</p>\n<p>We‚Äôre introducing <code class=\"hljs\">Drop</code> in the context of smart pointers because the\nfunctionality of the <code class=\"hljs\">Drop</code> trait is almost always used when implementing a\nsmart pointer. For example, when a <code class=\"hljs\">Box&lt;T&gt;</code> is dropped it will deallocate the\nspace on the heap that the box points to.</p>\n<p>In some languages, for some types, the programmer must call code to free memory\nor resources every time they finish using an instance of those types. Examples\ninclude file handles, sockets, or locks. If they forget, the system might\nbecome overloaded and crash. In Rust, you can specify that a particular bit of\ncode be run whenever a value goes out of scope, and the compiler will insert\nthis code automatically. As a result, you don‚Äôt need to be careful about\nplacing cleanup code everywhere in a program that an instance of a particular\ntype is finished with‚Äîyou still won‚Äôt leak resources!</p>\n<p>You specify the code to run when a value goes out of scope by implementing the\n<code class=\"hljs\">Drop</code> trait. The <code class=\"hljs\">Drop</code> trait requires you to implement one method named\n<code class=\"hljs\">drop</code> that takes a mutable reference to <code class=\"hljs\">self</code>. To see when Rust calls <code class=\"hljs\">drop</code>,\nlet‚Äôs implement <code class=\"hljs\">drop</code> with <code class=\"hljs\">println!</code> statements for now.</p>\n<p>Listing 15-14 shows a <code class=\"hljs\">CustomSmartPointer</code> struct whose only custom\nfunctionality is that it will print <code class=\"hljs\">Dropping CustomSmartPointer!</code> when the\ninstance goes out of scope, to show when Rust runs the <code class=\"hljs\">drop</code> function.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">CustomSmartPointer</span></span> {\n    data: <span class=\"hljs-built_in\">String</span>,\n}\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-built_in\">Drop</span> <span class=\"hljs-keyword\">for</span> CustomSmartPointer {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">drop</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Dropping CustomSmartPointer with data `{}`!\"</span>, <span class=\"hljs-keyword\">self</span>.data);\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> c = CustomSmartPointer {\n        data: <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"my stuff\"</span>),\n    };\n    <span class=\"hljs-keyword\">let</span> d = CustomSmartPointer {\n        data: <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"other stuff\"</span>),\n    };\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"CustomSmartPointers created.\"</span>);\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 15-14: A <code class=\"hljs\">CustomSmartPointer</code> struct that\nimplements the <code class=\"hljs\">Drop</code> trait where we would put our cleanup code</span></p>\n<p>The <code class=\"hljs\">Drop</code> trait is included in the prelude, so we don‚Äôt need to bring it into\nscope. We implement the <code class=\"hljs\">Drop</code> trait on <code class=\"hljs\">CustomSmartPointer</code> and provide an\nimplementation for the <code class=\"hljs\">drop</code> method that calls <code class=\"hljs\">println!</code>. The body of the\n<code class=\"hljs\">drop</code> function is where you would place any logic that you wanted to run when\nan instance of your type goes out of scope. We‚Äôre printing some text here to\ndemonstrate visually when Rust will call <code class=\"hljs\">drop</code>.</p>\n<p>In <code class=\"hljs\">main</code>, we create two instances of <code class=\"hljs\">CustomSmartPointer</code> and then print\n<code class=\"hljs\">CustomSmartPointers created</code>. At the end of <code class=\"hljs\">main</code>, our instances of\n<code class=\"hljs\">CustomSmartPointer</code> will go out of scope, and Rust will call the code we put\nin the <code class=\"hljs\">drop</code> method, printing our final message. Note that we didn‚Äôt need to\ncall the <code class=\"hljs\">drop</code> method explicitly.</p>\n<p>When we run this program, we‚Äôll see the following output:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling drop-example v0.1.0 (file:///projects/drop-example)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.60s\n     Running `target/debug/drop-example`\nCustomSmartPointers created.\nDropping CustomSmartPointer with data `other stuff`!\nDropping CustomSmartPointer with data `my stuff`!\n</code></pre>\n<p>Rust automatically called <code class=\"hljs\">drop</code> for us when our instances went out of scope,\ncalling the code we specified. Variables are dropped in the reverse order of\ntheir creation, so <code class=\"hljs\">d</code> was dropped before <code class=\"hljs\">c</code>. This example‚Äôs purpose is to\ngive you a visual guide to how the <code class=\"hljs\">drop</code> method works; usually you would\nspecify the cleanup code that your type needs to run rather than a print\nmessage.</p>\n<h3 id=\"dropping-a-value-early-with-stdmemdrop\"><a class=\"header\" href=\"#dropping-a-value-early-with-stdmemdrop\">Dropping a Value Early with <code>std::mem::drop</code></a></h3>\n<p>Unfortunately, it‚Äôs not straightforward to disable the automatic <code class=\"hljs\">drop</code>\nfunctionality. Disabling <code class=\"hljs\">drop</code> isn‚Äôt usually necessary; the whole point of the\n<code class=\"hljs\">Drop</code> trait is that it‚Äôs taken care of automatically. Occasionally, however,\nyou might want to clean up a value early. One example is when using smart\npointers that manage locks: you might want to force the <code class=\"hljs\">drop</code> method that\nreleases the lock so that other code in the same scope can acquire the lock.\nRust doesn‚Äôt let you call the <code class=\"hljs\">Drop</code> trait‚Äôs <code class=\"hljs\">drop</code> method manually; instead\nyou have to call the <code class=\"hljs\">std::mem::drop</code> function provided by the standard library\nif you want to force a value to be dropped before the end of its scope.</p>\n<p>If we try to call the <code class=\"hljs\">Drop</code> trait‚Äôs <code class=\"hljs\">drop</code> method manually by modifying the\n<code class=\"hljs\">main</code> function from Listing 15-14, as shown in Listing 15-15, we‚Äôll get a\ncompiler error:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">CustomSmartPointer</span></span> {\n</span><span class=\"boring\">    data: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> <span class=\"hljs-built_in\">Drop</span> <span class=\"hljs-keyword\">for</span> CustomSmartPointer {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">drop</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Dropping CustomSmartPointer with data `{}`!\"</span>, <span class=\"hljs-keyword\">self</span>.data);\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> c = CustomSmartPointer {\n        data: <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"some data\"</span>),\n    };\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"CustomSmartPointer created.\"</span>);\n    c.<span class=\"hljs-built_in\">drop</span>();\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"CustomSmartPointer dropped before the end of main.\"</span>);\n}</code></pre>\n<p><span class=\"caption\">Listing 15-15: Attempting to call the <code class=\"hljs\">drop</code> method from\nthe <code class=\"hljs\">Drop</code> trait manually to clean up early</span></p>\n<p>When we try to compile this code, we‚Äôll get this error:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling drop-example v0.1.0 (file:///projects/drop-example)\nerror[E0040]: explicit use of destructor method\n<span class=\"hljs-meta\">  --&gt;</span><span class=\"bash\"> src/main.rs:16:7</span>\n   |\n16 |     c.drop();\n   |       ^^^^ explicit destructor calls not allowed\n   |\nhelp: consider using `drop` function\n   |\n16 |     drop(c);\n   |     +++++ ~\n\nFor more information about this error, try `rustc --explain E0040`.\nerror: could not compile `drop-example` (bin \"drop-example\") due to 1 previous error\n</code></pre>\n<p>This error message states that we‚Äôre not allowed to explicitly call <code class=\"hljs\">drop</code>. The\nerror message uses the term <em>destructor</em>, which is the general programming term\nfor a function that cleans up an instance. A <em>destructor</em> is analogous to a\n<em>constructor</em>, which creates an instance. The <code class=\"hljs\">drop</code> function in Rust is one\nparticular destructor.</p>\n<p>Rust doesn‚Äôt let us call <code class=\"hljs\">drop</code> explicitly because Rust would still\nautomatically call <code class=\"hljs\">drop</code> on the value at the end of <code class=\"hljs\">main</code>. This would cause a\n<em>double free</em> error because Rust would be trying to clean up the same value\ntwice.</p>\n<p>We can‚Äôt disable the automatic insertion of <code class=\"hljs\">drop</code> when a value goes out of\nscope, and we can‚Äôt call the <code class=\"hljs\">drop</code> method explicitly. So, if we need to force\na value to be cleaned up early, we use the <code class=\"hljs\">std::mem::drop</code> function.</p>\n<p>The <code class=\"hljs\">std::mem::drop</code> function is different from the <code class=\"hljs\">drop</code> method in the <code class=\"hljs\">Drop</code>\ntrait. We call it by passing as an argument the value we want to force drop.\nThe function is in the prelude, so we can modify <code class=\"hljs\">main</code> in Listing 15-15 to\ncall the <code class=\"hljs\">drop</code> function, as shown in Listing 15-16:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">CustomSmartPointer</span></span> {\n</span><span class=\"boring\">    data: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> <span class=\"hljs-built_in\">Drop</span> <span class=\"hljs-keyword\">for</span> CustomSmartPointer {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">drop</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Dropping CustomSmartPointer with data `{}`!\"</span>, <span class=\"hljs-keyword\">self</span>.data);\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> c = CustomSmartPointer {\n        data: <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"some data\"</span>),\n    };\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"CustomSmartPointer created.\"</span>);\n    <span class=\"hljs-built_in\">drop</span>(c);\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"CustomSmartPointer dropped before the end of main.\"</span>);\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 15-16: Calling <code class=\"hljs\">std::mem::drop</code> to explicitly\ndrop a value before it goes out of scope</span></p>\n<p>Running this code will print the following:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling drop-example v0.1.0 (file:///projects/drop-example)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.73s\n     Running `target/debug/drop-example`\nCustomSmartPointer created.\nDropping CustomSmartPointer with data `some data`!\nCustomSmartPointer dropped before the end of main.\n</code></pre>\n<p>The text <code class=\"hljs\">Dropping CustomSmartPointer with data `some data`!</code> is printed\nbetween the <code class=\"hljs\">CustomSmartPointer created.</code> and <code class=\"hljs\">CustomSmartPointer dropped before the end of main.</code> text, showing that the <code class=\"hljs\">drop</code> method code is called to\ndrop <code class=\"hljs\">c</code> at that point.</p>\n<p>You can use code specified in a <code class=\"hljs\">Drop</code> trait implementation in many ways to\nmake cleanup convenient and safe: for instance, you could use it to create your\nown memory allocator! With the <code class=\"hljs\">Drop</code> trait and Rust‚Äôs ownership system, you\ndon‚Äôt have to remember to clean up because Rust does it automatically.</p>\n<p>You also don‚Äôt have to worry about problems resulting from accidentally\ncleaning up values still in use: the ownership system that makes sure\nreferences are always valid also ensures that <code class=\"hljs\">drop</code> gets called only once when\nthe value is no longer being used.</p>\n<p>Now that we‚Äôve examined <code class=\"hljs\">Box&lt;T&gt;</code> and some of the characteristics of smart\npointers, let‚Äôs look at a few other smart pointers defined in the standard\nlibrary.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"rct-the-reference-counted-smart-pointer\"><a class=\"header\" href=\"#rct-the-reference-counted-smart-pointer\"><code>Rc&lt;T&gt;</code>, the Reference Counted Smart Pointer</a></h2>\n<p>In the majority of cases, ownership is clear: you know exactly which variable\nowns a given value. However, there are cases when a single value might have\nmultiple owners. For example, in graph data structures, multiple edges might\npoint to the same node, and that node is conceptually owned by all of the edges\nthat point to it. A node shouldn‚Äôt be cleaned up unless it doesn‚Äôt have any\nedges pointing to it and so has no owners.</p>\n<p>You have to enable multiple ownership explicitly by using the Rust type\n<code class=\"hljs\">Rc&lt;T&gt;</code>, which is an abbreviation for <em>reference counting</em>. The <code class=\"hljs\">Rc&lt;T&gt;</code> type\nkeeps track of the number of references to a value to determine whether or not\nthe value is still in use. If there are zero references to a value, the value\ncan be cleaned up without any references becoming invalid.</p>\n<p>Imagine <code class=\"hljs\">Rc&lt;T&gt;</code> as a TV in a family room. When one person enters to watch TV,\nthey turn it on. Others can come into the room and watch the TV. When the last\nperson leaves the room, they turn off the TV because it‚Äôs no longer being used.\nIf someone turns off the TV while others are still watching it, there would be\nuproar from the remaining TV watchers!</p>\n<p>We use the <code class=\"hljs\">Rc&lt;T&gt;</code> type when we want to allocate some data on the heap for\nmultiple parts of our program to read and we can‚Äôt determine at compile time\nwhich part will finish using the data last. If we knew which part would finish\nlast, we could just make that part the data‚Äôs owner, and the normal ownership\nrules enforced at compile time would take effect.</p>\n<p>Note that <code class=\"hljs\">Rc&lt;T&gt;</code> is only for use in single-threaded scenarios. When we discuss\nconcurrency in Chapter 16, we‚Äôll cover how to do reference counting in\nmultithreaded programs.</p>\n<h3 id=\"using-rct-to-share-data\"><a class=\"header\" href=\"#using-rct-to-share-data\">Using <code>Rc&lt;T&gt;</code> to Share Data</a></h3>\n<p>Let‚Äôs return to our cons list example in Listing 15-5. Recall that we defined\nit using <code class=\"hljs\">Box&lt;T&gt;</code>. This time, we‚Äôll create two lists that both share ownership\nof a third list. Conceptually, this looks similar to Figure 15-3:</p>\n<img alt=\"Two lists that share ownership of a third list\" src=\"img/trpl15-03.svg\" class=\"center\">\n<p><span class=\"caption\">Figure 15-3: Two lists, <code class=\"hljs\">b</code> and <code class=\"hljs\">c</code>, sharing ownership of\na third list, <code class=\"hljs\">a</code></span></p>\n<p>We‚Äôll create list <code class=\"hljs\">a</code> that contains 5 and then 10. Then we‚Äôll make two more\nlists: <code class=\"hljs\">b</code> that starts with 3 and <code class=\"hljs\">c</code> that starts with 4. Both <code class=\"hljs\">b</code> and <code class=\"hljs\">c</code>\nlists will then continue on to the first <code class=\"hljs\">a</code> list containing 5 and 10. In other\nwords, both lists will share the first list containing 5 and 10.</p>\n<p>Trying to implement this scenario using our definition of <code class=\"hljs\">List</code> with <code class=\"hljs\">Box&lt;T&gt;</code>\nwon‚Äôt work, as shown in Listing 15-17:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">List</span></span> {\n    Cons(<span class=\"hljs-built_in\">i32</span>, <span class=\"hljs-built_in\">Box</span>&lt;List&gt;),\n    Nil,\n}\n\n<span class=\"hljs-keyword\">use</span> crate::List::{Cons, Nil};\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> a = Cons(<span class=\"hljs-number\">5</span>, <span class=\"hljs-built_in\">Box</span>::new(Cons(<span class=\"hljs-number\">10</span>, <span class=\"hljs-built_in\">Box</span>::new(Nil))));\n    <span class=\"hljs-keyword\">let</span> b = Cons(<span class=\"hljs-number\">3</span>, <span class=\"hljs-built_in\">Box</span>::new(a));\n    <span class=\"hljs-keyword\">let</span> c = Cons(<span class=\"hljs-number\">4</span>, <span class=\"hljs-built_in\">Box</span>::new(a));\n}</code></pre>\n<p><span class=\"caption\">Listing 15-17: Demonstrating we‚Äôre not allowed to have\ntwo lists using <code class=\"hljs\">Box&lt;T&gt;</code> that try to share ownership of a third list</span></p>\n<p>When we compile this code, we get this error:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling cons-list v0.1.0 (file:///projects/cons-list)\nerror[E0382]: use of moved value: `a`\n<span class=\"hljs-meta\">  --&gt;</span><span class=\"bash\"> src/main.rs:11:30</span>\n   |\n9  |     let a = Cons(5, Box::new(Cons(10, Box::new(Nil))));\n   |         - move occurs because `a` has type `List`, which does not implement the `Copy` trait\n10 |     let b = Cons(3, Box::new(a));\n   |                              - value moved here\n11 |     let c = Cons(4, Box::new(a));\n   |                              ^ value used here after move\n\nFor more information about this error, try `rustc --explain E0382`.\nerror: could not compile `cons-list` (bin \"cons-list\") due to 1 previous error\n</code></pre>\n<p>The <code class=\"hljs\">Cons</code> variants own the data they hold, so when we create the <code class=\"hljs\">b</code> list, <code class=\"hljs\">a</code>\nis moved into <code class=\"hljs\">b</code> and <code class=\"hljs\">b</code> owns <code class=\"hljs\">a</code>. Then, when we try to use <code class=\"hljs\">a</code> again when\ncreating <code class=\"hljs\">c</code>, we‚Äôre not allowed to because <code class=\"hljs\">a</code> has been moved.</p>\n<p>We could change the definition of <code class=\"hljs\">Cons</code> to hold references instead, but then\nwe would have to specify lifetime parameters. By specifying lifetime\nparameters, we would be specifying that every element in the list will live at\nleast as long as the entire list. This is the case for the elements and lists\nin Listing 15-17, but not in every scenario.</p>\n<p>Instead, we‚Äôll change our definition of <code class=\"hljs\">List</code> to use <code class=\"hljs\">Rc&lt;T&gt;</code> in place of\n<code class=\"hljs\">Box&lt;T&gt;</code>, as shown in Listing 15-18. Each <code class=\"hljs\">Cons</code> variant will now hold a value\nand an <code class=\"hljs\">Rc&lt;T&gt;</code> pointing to a <code class=\"hljs\">List</code>. When we create <code class=\"hljs\">b</code>, instead of taking\nownership of <code class=\"hljs\">a</code>, we‚Äôll clone the <code class=\"hljs\">Rc&lt;List&gt;</code> that <code class=\"hljs\">a</code> is holding, thereby\nincreasing the number of references from one to two and letting <code class=\"hljs\">a</code> and <code class=\"hljs\">b</code>\nshare ownership of the data in that <code class=\"hljs\">Rc&lt;List&gt;</code>. We‚Äôll also clone <code class=\"hljs\">a</code> when\ncreating <code class=\"hljs\">c</code>, increasing the number of references from two to three. Every time\nwe call <code class=\"hljs\">Rc::clone</code>, the reference count to the data within the <code class=\"hljs\">Rc&lt;List&gt;</code> will\nincrease, and the data won‚Äôt be cleaned up unless there are zero references to\nit.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">List</span></span> {\n    Cons(<span class=\"hljs-built_in\">i32</span>, Rc&lt;List&gt;),\n    Nil,\n}\n\n<span class=\"hljs-keyword\">use</span> crate::List::{Cons, Nil};\n<span class=\"hljs-keyword\">use</span> std::rc::Rc;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> a = Rc::new(Cons(<span class=\"hljs-number\">5</span>, Rc::new(Cons(<span class=\"hljs-number\">10</span>, Rc::new(Nil)))));\n    <span class=\"hljs-keyword\">let</span> b = Cons(<span class=\"hljs-number\">3</span>, Rc::clone(&amp;a));\n    <span class=\"hljs-keyword\">let</span> c = Cons(<span class=\"hljs-number\">4</span>, Rc::clone(&amp;a));\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 15-18: A definition of <code class=\"hljs\">List</code> that uses\n<code class=\"hljs\">Rc&lt;T&gt;</code></span></p>\n<p>We need to add a <code class=\"hljs\">use</code> statement to bring <code class=\"hljs\">Rc&lt;T&gt;</code> into scope because it‚Äôs not\nin the prelude. In <code class=\"hljs\">main</code>, we create the list holding 5 and 10 and store it in\na new <code class=\"hljs\">Rc&lt;List&gt;</code> in <code class=\"hljs\">a</code>. Then when we create <code class=\"hljs\">b</code> and <code class=\"hljs\">c</code>, we call the\n<code class=\"hljs\">Rc::clone</code> function and pass a reference to the <code class=\"hljs\">Rc&lt;List&gt;</code> in <code class=\"hljs\">a</code> as an\nargument.</p>\n<p>We could have called <code class=\"hljs\">a.clone()</code> rather than <code class=\"hljs\">Rc::clone(&amp;a)</code>, but Rust‚Äôs\nconvention is to use <code class=\"hljs\">Rc::clone</code> in this case. The implementation of\n<code class=\"hljs\">Rc::clone</code> doesn‚Äôt make a deep copy of all the data like most types‚Äô\nimplementations of <code class=\"hljs\">clone</code> do. The call to <code class=\"hljs\">Rc::clone</code> only increments the\nreference count, which doesn‚Äôt take much time. Deep copies of data can take a\nlot of time. By using <code class=\"hljs\">Rc::clone</code> for reference counting, we can visually\ndistinguish between the deep-copy kinds of clones and the kinds of clones that\nincrease the reference count. When looking for performance problems in the\ncode, we only need to consider the deep-copy clones and can disregard calls to\n<code class=\"hljs\">Rc::clone</code>.</p>\n<h3 id=\"cloning-an-rct-increases-the-reference-count\"><a class=\"header\" href=\"#cloning-an-rct-increases-the-reference-count\">Cloning an <code>Rc&lt;T&gt;</code> Increases the Reference Count</a></h3>\n<p>Let‚Äôs change our working example in Listing 15-18 so we can see the reference\ncounts changing as we create and drop references to the <code class=\"hljs\">Rc&lt;List&gt;</code> in <code class=\"hljs\">a</code>.</p>\n<p>In Listing 15-19, we‚Äôll change <code class=\"hljs\">main</code> so it has an inner scope around list <code class=\"hljs\">c</code>;\nthen we can see how the reference count changes when <code class=\"hljs\">c</code> goes out of scope.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">List</span></span> {\n</span><span class=\"boring\">    Cons(<span class=\"hljs-built_in\">i32</span>, Rc&lt;List&gt;),\n</span><span class=\"boring\">    Nil,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> crate::List::{Cons, Nil};\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::rc::Rc;\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> a = Rc::new(Cons(<span class=\"hljs-number\">5</span>, Rc::new(Cons(<span class=\"hljs-number\">10</span>, Rc::new(Nil)))));\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"count after creating a = {}\"</span>, Rc::strong_count(&amp;a));\n    <span class=\"hljs-keyword\">let</span> b = Cons(<span class=\"hljs-number\">3</span>, Rc::clone(&amp;a));\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"count after creating b = {}\"</span>, Rc::strong_count(&amp;a));\n    {\n        <span class=\"hljs-keyword\">let</span> c = Cons(<span class=\"hljs-number\">4</span>, Rc::clone(&amp;a));\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"count after creating c = {}\"</span>, Rc::strong_count(&amp;a));\n    }\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"count after c goes out of scope = {}\"</span>, Rc::strong_count(&amp;a));\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 15-19: Printing the reference count</span></p>\n<p>At each point in the program where the reference count changes, we print the\nreference count, which we get by calling the <code class=\"hljs\">Rc::strong_count</code> function. This\nfunction is named <code class=\"hljs\">strong_count</code> rather than <code class=\"hljs\">count</code> because the <code class=\"hljs\">Rc&lt;T&gt;</code> type\nalso has a <code class=\"hljs\">weak_count</code>; we‚Äôll see what <code class=\"hljs\">weak_count</code> is used for in the\n<a href=\"ch15-06-reference-cycles.html#preventing-reference-cycles-turning-an-rct-into-a-weakt\">‚ÄúPreventing Reference Cycles: Turning an <code class=\"hljs\">Rc&lt;T&gt;</code> into a\n<code class=\"hljs\">Weak&lt;T&gt;</code>‚Äù</a><!-- ignore --> section.</p>\n<p>This code prints the following:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling cons-list v0.1.0 (file:///projects/cons-list)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.45s\n     Running `target/debug/cons-list`\ncount after creating a = 1\ncount after creating b = 2\ncount after creating c = 3\ncount after c goes out of scope = 2\n</code></pre>\n<p>We can see that the <code class=\"hljs\">Rc&lt;List&gt;</code> in <code class=\"hljs\">a</code> has an initial reference count of 1; then\neach time we call <code class=\"hljs\">clone</code>, the count goes up by 1. When <code class=\"hljs\">c</code> goes out of scope,\nthe count goes down by 1. We don‚Äôt have to call a function to decrease the\nreference count like we have to call <code class=\"hljs\">Rc::clone</code> to increase the reference\ncount: the implementation of the <code class=\"hljs\">Drop</code> trait decreases the reference count\nautomatically when an <code class=\"hljs\">Rc&lt;T&gt;</code> value goes out of scope.</p>\n<p>What we can‚Äôt see in this example is that when <code class=\"hljs\">b</code> and then <code class=\"hljs\">a</code> go out of scope\nat the end of <code class=\"hljs\">main</code>, the count is then 0, and the <code class=\"hljs\">Rc&lt;List&gt;</code> is cleaned up\ncompletely. Using <code class=\"hljs\">Rc&lt;T&gt;</code> allows a single value to have multiple owners, and\nthe count ensures that the value remains valid as long as any of the owners\nstill exist.</p>\n<p>Via immutable references, <code class=\"hljs\">Rc&lt;T&gt;</code> allows you to share data between multiple\nparts of your program for reading only. If <code class=\"hljs\">Rc&lt;T&gt;</code> allowed you to have multiple\nmutable references too, you might violate one of the borrowing rules discussed\nin Chapter 4: multiple mutable borrows to the same place can cause data races\nand inconsistencies. But being able to mutate data is very useful! In the next\nsection, we‚Äôll discuss the interior mutability pattern and the <code class=\"hljs\">RefCell&lt;T&gt;</code>\ntype that you can use in conjunction with an <code class=\"hljs\">Rc&lt;T&gt;</code> to work with this\nimmutability restriction.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"refcellt-and-the-interior-mutability-pattern\"><a class=\"header\" href=\"#refcellt-and-the-interior-mutability-pattern\"><code>RefCell&lt;T&gt;</code> and the Interior Mutability Pattern</a></h2>\n<p><em>Interior mutability</em> is a design pattern in Rust that allows you to mutate\ndata even when there are immutable references to that data; normally, this\naction is disallowed by the borrowing rules. To mutate data, the pattern uses\n<code class=\"hljs\">unsafe</code> code inside a data structure to bend Rust‚Äôs usual rules that govern\nmutation and borrowing. Unsafe code indicates to the compiler that we‚Äôre\nchecking the rules manually instead of relying on the compiler to check them\nfor us; we will discuss unsafe code more in Chapter 19.</p>\n<p>We can use types that use the interior mutability pattern only when we can\nensure that the borrowing rules will be followed at runtime, even though the\ncompiler can‚Äôt guarantee that. The <code class=\"hljs\">unsafe</code> code involved is then wrapped in a\nsafe API, and the outer type is still immutable.</p>\n<p>Let‚Äôs explore this concept by looking at the <code class=\"hljs\">RefCell&lt;T&gt;</code> type that follows the\ninterior mutability pattern.</p>\n<h3 id=\"enforcing-borrowing-rules-at-runtime-with-refcellt\"><a class=\"header\" href=\"#enforcing-borrowing-rules-at-runtime-with-refcellt\">Enforcing Borrowing Rules at Runtime with <code>RefCell&lt;T&gt;</code></a></h3>\n<p>Unlike <code class=\"hljs\">Rc&lt;T&gt;</code>, the <code class=\"hljs\">RefCell&lt;T&gt;</code> type represents single ownership over the data\nit holds. So, what makes <code class=\"hljs\">RefCell&lt;T&gt;</code> different from a type like <code class=\"hljs\">Box&lt;T&gt;</code>?\nRecall the borrowing rules you learned in Chapter 4:</p>\n<ul>\n<li>At any given time, you can have <em>either</em> (but not both) one mutable reference\nor any number of immutable references.</li>\n<li>References must always be valid.</li>\n</ul>\n<p>With references and <code class=\"hljs\">Box&lt;T&gt;</code>, the borrowing rules‚Äô invariants are enforced at\ncompile time. With <code class=\"hljs\">RefCell&lt;T&gt;</code>, these invariants are enforced <em>at runtime</em>.\nWith references, if you break these rules, you‚Äôll get a compiler error. With\n<code class=\"hljs\">RefCell&lt;T&gt;</code>, if you break these rules, your program will panic and exit.</p>\n<p>The advantages of checking the borrowing rules at compile time are that errors\nwill be caught sooner in the development process, and there is no impact on\nruntime performance because all the analysis is completed beforehand. For those\nreasons, checking the borrowing rules at compile time is the best choice in the\nmajority of cases, which is why this is Rust‚Äôs default.</p>\n<p>The advantage of checking the borrowing rules at runtime instead is that\ncertain memory-safe scenarios are then allowed, where they would‚Äôve been\ndisallowed by the compile-time checks. Static analysis, like the Rust compiler,\nis inherently conservative. Some properties of code are impossible to detect by\nanalyzing the code: the most famous example is the Halting Problem, which is\nbeyond the scope of this book but is an interesting topic to research.</p>\n<p>Because some analysis is impossible, if the Rust compiler can‚Äôt be sure the\ncode complies with the ownership rules, it might reject a correct program; in\nthis way, it‚Äôs conservative. If Rust accepted an incorrect program, users\nwouldn‚Äôt be able to trust in the guarantees Rust makes. However, if Rust\nrejects a correct program, the programmer will be inconvenienced, but nothing\ncatastrophic can occur. The <code class=\"hljs\">RefCell&lt;T&gt;</code> type is useful when you‚Äôre sure your\ncode follows the borrowing rules but the compiler is unable to understand and\nguarantee that.</p>\n<p>Similar to <code class=\"hljs\">Rc&lt;T&gt;</code>, <code class=\"hljs\">RefCell&lt;T&gt;</code> is only for use in single-threaded scenarios\nand will give you a compile-time error if you try using it in a multithreaded\ncontext. We‚Äôll talk about how to get the functionality of <code class=\"hljs\">RefCell&lt;T&gt;</code> in a\nmultithreaded program in Chapter 16.</p>\n<p>Here is a recap of the reasons to choose <code class=\"hljs\">Box&lt;T&gt;</code>, <code class=\"hljs\">Rc&lt;T&gt;</code>, or <code class=\"hljs\">RefCell&lt;T&gt;</code>:</p>\n<ul>\n<li><code class=\"hljs\">Rc&lt;T&gt;</code> enables multiple owners of the same data; <code class=\"hljs\">Box&lt;T&gt;</code> and <code class=\"hljs\">RefCell&lt;T&gt;</code>\nhave single owners.</li>\n<li><code class=\"hljs\">Box&lt;T&gt;</code> allows immutable or mutable borrows checked at compile time; <code class=\"hljs\">Rc&lt;T&gt;</code>\nallows only immutable borrows checked at compile time; <code class=\"hljs\">RefCell&lt;T&gt;</code> allows\nimmutable or mutable borrows checked at runtime.</li>\n<li>Because <code class=\"hljs\">RefCell&lt;T&gt;</code> allows mutable borrows checked at runtime, you can\nmutate the value inside the <code class=\"hljs\">RefCell&lt;T&gt;</code> even when the <code class=\"hljs\">RefCell&lt;T&gt;</code> is\nimmutable.</li>\n</ul>\n<p>Mutating the value inside an immutable value is the <em>interior mutability</em>\npattern. Let‚Äôs look at a situation in which interior mutability is useful and\nexamine how it‚Äôs possible.</p>\n<h3 id=\"interior-mutability-a-mutable-borrow-to-an-immutable-value\"><a class=\"header\" href=\"#interior-mutability-a-mutable-borrow-to-an-immutable-value\">Interior Mutability: A Mutable Borrow to an Immutable Value</a></h3>\n<p>A consequence of the borrowing rules is that when you have an immutable value,\nyou can‚Äôt borrow it mutably. For example, this code won‚Äôt compile:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">5</span>;\n    <span class=\"hljs-keyword\">let</span> y = &amp;<span class=\"hljs-keyword\">mut</span> x;\n}</code></pre>\n<p>If you tried to compile this code, you‚Äôd get the following error:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling borrowing v0.1.0 (file:///projects/borrowing)\nerror[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/main.rs:3:13</span>\n  |\n3 |     let y = &amp;mut x;\n  |             ^^^^^^ cannot borrow as mutable\n  |\nhelp: consider changing this to be mutable\n  |\n2 |     let mut x = 5;\n  |         +++\n\nFor more information about this error, try `rustc --explain E0596`.\nerror: could not compile `borrowing` (bin \"borrowing\") due to 1 previous error\n</code></pre>\n<p>However, there are situations in which it would be useful for a value to mutate\nitself in its methods but appear immutable to other code. Code outside the\nvalue‚Äôs methods would not be able to mutate the value. Using <code class=\"hljs\">RefCell&lt;T&gt;</code> is\none way to get the ability to have interior mutability, but <code class=\"hljs\">RefCell&lt;T&gt;</code>\ndoesn‚Äôt get around the borrowing rules completely: the borrow checker in the\ncompiler allows this interior mutability, and the borrowing rules are checked\nat runtime instead. If you violate the rules, you‚Äôll get a <code class=\"hljs\">panic!</code> instead of\na compiler error.</p>\n<p>Let‚Äôs work through a practical example where we can use <code class=\"hljs\">RefCell&lt;T&gt;</code> to mutate\nan immutable value and see why that is useful.</p>\n<h4 id=\"a-use-case-for-interior-mutability-mock-objects\"><a class=\"header\" href=\"#a-use-case-for-interior-mutability-mock-objects\">A Use Case for Interior Mutability: Mock Objects</a></h4>\n<p>Sometimes during testing a programmer will use a type in place of another type,\nin order to observe particular behavior and assert it‚Äôs implemented correctly.\nThis placeholder type is called a <em>test double</em>. Think of it in the sense of a\n‚Äústunt double‚Äù in filmmaking, where a person steps in and substitutes for an\nactor to do a particular tricky scene. Test doubles stand in for other types\nwhen we‚Äôre running tests. <em>Mock objects</em> are specific types of test doubles\nthat record what happens during a test so you can assert that the correct\nactions took place.</p>\n<p>Rust doesn‚Äôt have objects in the same sense as other languages have objects,\nand Rust doesn‚Äôt have mock object functionality built into the standard library\nas some other languages do. However, you can definitely create a struct that\nwill serve the same purposes as a mock object.</p>\n<p>Here‚Äôs the scenario we‚Äôll test: we‚Äôll create a library that tracks a value\nagainst a maximum value and sends messages based on how close to the maximum\nvalue the current value is. This library could be used to keep track of a\nuser‚Äôs quota for the number of API calls they‚Äôre allowed to make, for example.</p>\n<p>Our library will only provide the functionality of tracking how close to the\nmaximum a value is and what the messages should be at what times. Applications\nthat use our library will be expected to provide the mechanism for sending the\nmessages: the application could put a message in the application, send an\nemail, send a text message, or something else. The library doesn‚Äôt need to know\nthat detail. All it needs is something that implements a trait we‚Äôll provide\ncalled <code class=\"hljs\">Messenger</code>. Listing 15-20 shows the library code:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust noplayground hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Messenger</span></span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">send</span></span>(&amp;<span class=\"hljs-keyword\">self</span>, msg: &amp;<span class=\"hljs-built_in\">str</span>);\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">LimitTracker</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, T: Messenger&gt; {\n    messenger: &amp;<span class=\"hljs-symbol\">'a</span> T,\n    value: <span class=\"hljs-built_in\">usize</span>,\n    max: <span class=\"hljs-built_in\">usize</span>,\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; LimitTracker&lt;<span class=\"hljs-symbol\">'a</span>, T&gt;\n<span class=\"hljs-keyword\">where</span>\n    T: Messenger,\n{\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(messenger: &amp;<span class=\"hljs-symbol\">'a</span> T, max: <span class=\"hljs-built_in\">usize</span>) -&gt; LimitTracker&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; {\n        LimitTracker {\n            messenger,\n            value: <span class=\"hljs-number\">0</span>,\n            max,\n        }\n    }\n\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">set_value</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, value: <span class=\"hljs-built_in\">usize</span>) {\n        <span class=\"hljs-keyword\">self</span>.value = value;\n\n        <span class=\"hljs-keyword\">let</span> percentage_of_max = <span class=\"hljs-keyword\">self</span>.value <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">f64</span> / <span class=\"hljs-keyword\">self</span>.max <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">f64</span>;\n\n        <span class=\"hljs-keyword\">if</span> percentage_of_max &gt;= <span class=\"hljs-number\">1.0</span> {\n            <span class=\"hljs-keyword\">self</span>.messenger.send(<span class=\"hljs-string\">\"Error: You are over your quota!\"</span>);\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> percentage_of_max &gt;= <span class=\"hljs-number\">0.9</span> {\n            <span class=\"hljs-keyword\">self</span>.messenger\n                .send(<span class=\"hljs-string\">\"Urgent warning: You've used up over 90% of your quota!\"</span>);\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> percentage_of_max &gt;= <span class=\"hljs-number\">0.75</span> {\n            <span class=\"hljs-keyword\">self</span>.messenger\n                .send(<span class=\"hljs-string\">\"Warning: You've used up over 75% of your quota!\"</span>);\n        }\n    }\n}</code></pre>\n<p><span class=\"caption\">Listing 15-20: A library to keep track of how close a\nvalue is to a maximum value and warn when the value is at certain levels</span></p>\n<p>One important part of this code is that the <code class=\"hljs\">Messenger</code> trait has one method\ncalled <code class=\"hljs\">send</code> that takes an immutable reference to <code class=\"hljs\">self</code> and the text of the\nmessage. This trait is the interface our mock object needs to implement so that\nthe mock can be used in the same way a real object is. The other important part\nis that we want to test the behavior of the <code class=\"hljs\">set_value</code> method on the\n<code class=\"hljs\">LimitTracker</code>. We can change what we pass in for the <code class=\"hljs\">value</code> parameter, but\n<code class=\"hljs\">set_value</code> doesn‚Äôt return anything for us to make assertions on. We want to be\nable to say that if we create a <code class=\"hljs\">LimitTracker</code> with something that implements\nthe <code class=\"hljs\">Messenger</code> trait and a particular value for <code class=\"hljs\">max</code>, when we pass different\nnumbers for <code class=\"hljs\">value</code>, the messenger is told to send the appropriate messages.</p>\n<p>We need a mock object that, instead of sending an email or text message when we\ncall <code class=\"hljs\">send</code>, will only keep track of the messages it‚Äôs told to send. We can\ncreate a new instance of the mock object, create a <code class=\"hljs\">LimitTracker</code> that uses the\nmock object, call the <code class=\"hljs\">set_value</code> method on <code class=\"hljs\">LimitTracker</code>, and then check that\nthe mock object has the messages we expect. Listing 15-21 shows an attempt to\nimplement a mock object to do just that, but the borrow checker won‚Äôt allow it:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Messenger</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">send</span></span>(&amp;<span class=\"hljs-keyword\">self</span>, msg: &amp;<span class=\"hljs-built_in\">str</span>);\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">LimitTracker</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, T: Messenger&gt; {\n</span><span class=\"boring\">    messenger: &amp;<span class=\"hljs-symbol\">'a</span> T,\n</span><span class=\"boring\">    value: <span class=\"hljs-built_in\">usize</span>,\n</span><span class=\"boring\">    max: <span class=\"hljs-built_in\">usize</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; LimitTracker&lt;<span class=\"hljs-symbol\">'a</span>, T&gt;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">where</span>\n</span><span class=\"boring\">    T: Messenger,\n</span><span class=\"boring\">{\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(messenger: &amp;<span class=\"hljs-symbol\">'a</span> T, max: <span class=\"hljs-built_in\">usize</span>) -&gt; LimitTracker&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; {\n</span><span class=\"boring\">        LimitTracker {\n</span><span class=\"boring\">            messenger,\n</span><span class=\"boring\">            value: <span class=\"hljs-number\">0</span>,\n</span><span class=\"boring\">            max,\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">set_value</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, value: <span class=\"hljs-built_in\">usize</span>) {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">self</span>.value = value;\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> percentage_of_max = <span class=\"hljs-keyword\">self</span>.value <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">f64</span> / <span class=\"hljs-keyword\">self</span>.max <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">f64</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> percentage_of_max &gt;= <span class=\"hljs-number\">1.0</span> {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">self</span>.messenger.send(<span class=\"hljs-string\">\"Error: You are over your quota!\"</span>);\n</span><span class=\"boring\">        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> percentage_of_max &gt;= <span class=\"hljs-number\">0.9</span> {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">self</span>.messenger\n</span><span class=\"boring\">                .send(<span class=\"hljs-string\">\"Urgent warning: You've used up over 90% of your quota!\"</span>);\n</span><span class=\"boring\">        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> percentage_of_max &gt;= <span class=\"hljs-number\">0.75</span> {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">self</span>.messenger\n</span><span class=\"boring\">                .send(<span class=\"hljs-string\">\"Warning: You've used up over 75% of your quota!\"</span>);\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::*;\n\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">MockMessenger</span></span> {\n        sent_messages: <span class=\"hljs-built_in\">Vec</span>&lt;<span class=\"hljs-built_in\">String</span>&gt;,\n    }\n\n    <span class=\"hljs-keyword\">impl</span> MockMessenger {\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>() -&gt; MockMessenger {\n            MockMessenger {\n                sent_messages: <span class=\"hljs-built_in\">vec!</span>[],\n            }\n        }\n    }\n\n    <span class=\"hljs-keyword\">impl</span> Messenger <span class=\"hljs-keyword\">for</span> MockMessenger {\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">send</span></span>(&amp;<span class=\"hljs-keyword\">self</span>, message: &amp;<span class=\"hljs-built_in\">str</span>) {\n            <span class=\"hljs-keyword\">self</span>.sent_messages.push(<span class=\"hljs-built_in\">String</span>::from(message));\n        }\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">it_sends_an_over_75_percent_warning_message</span></span>() {\n        <span class=\"hljs-keyword\">let</span> mock_messenger = MockMessenger::new();\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> limit_tracker = LimitTracker::new(&amp;mock_messenger, <span class=\"hljs-number\">100</span>);\n\n        limit_tracker.set_value(<span class=\"hljs-number\">80</span>);\n\n        <span class=\"hljs-built_in\">assert_eq!</span>(mock_messenger.sent_messages.len(), <span class=\"hljs-number\">1</span>);\n    }\n}</code></pre>\n<p><span class=\"caption\">Listing 15-21: An attempt to implement a <code class=\"hljs\">MockMessenger</code>\nthat isn‚Äôt allowed by the borrow checker</span></p>\n<p>This test code defines a <code class=\"hljs\">MockMessenger</code> struct that has a <code class=\"hljs\">sent_messages</code>\nfield with a <code class=\"hljs\">Vec</code> of <code class=\"hljs\">String</code> values to keep track of the messages it‚Äôs told\nto send. We also define an associated function <code class=\"hljs\">new</code> to make it convenient to\ncreate new <code class=\"hljs\">MockMessenger</code> values that start with an empty list of messages. We\nthen implement the <code class=\"hljs\">Messenger</code> trait for <code class=\"hljs\">MockMessenger</code> so we can give a\n<code class=\"hljs\">MockMessenger</code> to a <code class=\"hljs\">LimitTracker</code>. In the definition of the <code class=\"hljs\">send</code> method, we\ntake the message passed in as a parameter and store it in the <code class=\"hljs\">MockMessenger</code>\nlist of <code class=\"hljs\">sent_messages</code>.</p>\n<p>In the test, we‚Äôre testing what happens when the <code class=\"hljs\">LimitTracker</code> is told to set\n<code class=\"hljs\">value</code> to something that is more than 75 percent of the <code class=\"hljs\">max</code> value. First, we\ncreate a new <code class=\"hljs\">MockMessenger</code>, which will start with an empty list of messages.\nThen we create a new <code class=\"hljs\">LimitTracker</code> and give it a reference to the new\n<code class=\"hljs\">MockMessenger</code> and a <code class=\"hljs\">max</code> value of 100. We call the <code class=\"hljs\">set_value</code> method on the\n<code class=\"hljs\">LimitTracker</code> with a value of 80, which is more than 75 percent of 100. Then\nwe assert that the list of messages that the <code class=\"hljs\">MockMessenger</code> is keeping track\nof should now have one message in it.</p>\n<p>However, there‚Äôs one problem with this test, as shown here:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo <span class=\"hljs-built_in\">test</span></span>\n   Compiling limit-tracker v0.1.0 (file:///projects/limit-tracker)\nerror[E0596]: cannot borrow `self.sent_messages` as mutable, as it is behind a `&amp;` reference\n<span class=\"hljs-meta\">  --&gt;</span><span class=\"bash\"> src/lib.rs:58:13</span>\n   |\n58 |             self.sent_messages.push(String::from(message));\n   |             ^^^^^^^^^^^^^^^^^^ `self` is a `&amp;` reference, so the data it refers to cannot be borrowed as mutable\n   |\nhelp: consider changing this to be a mutable reference\n   |\n2  |     fn send(&amp;mut self, msg: &amp;str);\n   |             ~~~~~~~~~\n\nFor more information about this error, try `rustc --explain E0596`.\nerror: could not compile `limit-tracker` (lib test) due to 1 previous error\n</code></pre>\n<p>We can‚Äôt modify the <code class=\"hljs\">MockMessenger</code> to keep track of the messages, because the\n<code class=\"hljs\">send</code> method takes an immutable reference to <code class=\"hljs\">self</code>. We also can‚Äôt take the\nsuggestion from the error text to use <code class=\"hljs\">&amp;mut self</code> instead, because then the\nsignature of <code class=\"hljs\">send</code> wouldn‚Äôt match the signature in the <code class=\"hljs\">Messenger</code> trait\ndefinition (feel free to try and see what error message you get).</p>\n<p>This is a situation in which interior mutability can help! We‚Äôll store the\n<code class=\"hljs\">sent_messages</code> within a <code class=\"hljs\">RefCell&lt;T&gt;</code>, and then the <code class=\"hljs\">send</code> method will be\nable to modify <code class=\"hljs\">sent_messages</code> to store the messages we‚Äôve seen. Listing 15-22\nshows what that looks like:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Messenger</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">send</span></span>(&amp;<span class=\"hljs-keyword\">self</span>, msg: &amp;<span class=\"hljs-built_in\">str</span>);\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">LimitTracker</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, T: Messenger&gt; {\n</span><span class=\"boring\">    messenger: &amp;<span class=\"hljs-symbol\">'a</span> T,\n</span><span class=\"boring\">    value: <span class=\"hljs-built_in\">usize</span>,\n</span><span class=\"boring\">    max: <span class=\"hljs-built_in\">usize</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; LimitTracker&lt;<span class=\"hljs-symbol\">'a</span>, T&gt;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">where</span>\n</span><span class=\"boring\">    T: Messenger,\n</span><span class=\"boring\">{\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(messenger: &amp;<span class=\"hljs-symbol\">'a</span> T, max: <span class=\"hljs-built_in\">usize</span>) -&gt; LimitTracker&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; {\n</span><span class=\"boring\">        LimitTracker {\n</span><span class=\"boring\">            messenger,\n</span><span class=\"boring\">            value: <span class=\"hljs-number\">0</span>,\n</span><span class=\"boring\">            max,\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">set_value</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, value: <span class=\"hljs-built_in\">usize</span>) {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">self</span>.value = value;\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> percentage_of_max = <span class=\"hljs-keyword\">self</span>.value <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">f64</span> / <span class=\"hljs-keyword\">self</span>.max <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">f64</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> percentage_of_max &gt;= <span class=\"hljs-number\">1.0</span> {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">self</span>.messenger.send(<span class=\"hljs-string\">\"Error: You are over your quota!\"</span>);\n</span><span class=\"boring\">        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> percentage_of_max &gt;= <span class=\"hljs-number\">0.9</span> {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">self</span>.messenger\n</span><span class=\"boring\">                .send(<span class=\"hljs-string\">\"Urgent warning: You've used up over 90% of your quota!\"</span>);\n</span><span class=\"boring\">        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> percentage_of_max &gt;= <span class=\"hljs-number\">0.75</span> {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">self</span>.messenger\n</span><span class=\"boring\">                .send(<span class=\"hljs-string\">\"Warning: You've used up over 75% of your quota!\"</span>);\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::*;\n    <span class=\"hljs-keyword\">use</span> std::cell::RefCell;\n\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">MockMessenger</span></span> {\n        sent_messages: RefCell&lt;<span class=\"hljs-built_in\">Vec</span>&lt;<span class=\"hljs-built_in\">String</span>&gt;&gt;,\n    }\n\n    <span class=\"hljs-keyword\">impl</span> MockMessenger {\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>() -&gt; MockMessenger {\n            MockMessenger {\n                sent_messages: RefCell::new(<span class=\"hljs-built_in\">vec!</span>[]),\n            }\n        }\n    }\n\n    <span class=\"hljs-keyword\">impl</span> Messenger <span class=\"hljs-keyword\">for</span> MockMessenger {\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">send</span></span>(&amp;<span class=\"hljs-keyword\">self</span>, message: &amp;<span class=\"hljs-built_in\">str</span>) {\n            <span class=\"hljs-keyword\">self</span>.sent_messages.borrow_mut().push(<span class=\"hljs-built_in\">String</span>::from(message));\n        }\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">it_sends_an_over_75_percent_warning_message</span></span>() {\n        <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">        <span class=\"hljs-keyword\">let</span> mock_messenger = MockMessenger::new();\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> limit_tracker = LimitTracker::new(&amp;mock_messenger, <span class=\"hljs-number\">100</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">        limit_tracker.set_value(<span class=\"hljs-number\">80</span>);\n</span>\n        <span class=\"hljs-built_in\">assert_eq!</span>(mock_messenger.sent_messages.borrow().len(), <span class=\"hljs-number\">1</span>);\n    }\n}</code></pre>\n<p><span class=\"caption\">Listing 15-22: Using <code class=\"hljs\">RefCell&lt;T&gt;</code> to mutate an inner\nvalue while the outer value is considered immutable</span></p>\n<p>The <code class=\"hljs\">sent_messages</code> field is now of type <code class=\"hljs\">RefCell&lt;Vec&lt;String&gt;&gt;</code> instead of\n<code class=\"hljs\">Vec&lt;String&gt;</code>. In the <code class=\"hljs\">new</code> function, we create a new <code class=\"hljs\">RefCell&lt;Vec&lt;String&gt;&gt;</code>\ninstance around the empty vector.</p>\n<p>For the implementation of the <code class=\"hljs\">send</code> method, the first parameter is still an\nimmutable borrow of <code class=\"hljs\">self</code>, which matches the trait definition. We call\n<code class=\"hljs\">borrow_mut</code> on the <code class=\"hljs\">RefCell&lt;Vec&lt;String&gt;&gt;</code> in <code class=\"hljs\">self.sent_messages</code> to get a\nmutable reference to the value inside the <code class=\"hljs\">RefCell&lt;Vec&lt;String&gt;&gt;</code>, which is the\nvector. Then we can call <code class=\"hljs\">push</code> on the mutable reference to the vector to keep\ntrack of the messages sent during the test.</p>\n<p>The last change we have to make is in the assertion: to see how many items are\nin the inner vector, we call <code class=\"hljs\">borrow</code> on the <code class=\"hljs\">RefCell&lt;Vec&lt;String&gt;&gt;</code> to get an\nimmutable reference to the vector.</p>\n<p>Now that you‚Äôve seen how to use <code class=\"hljs\">RefCell&lt;T&gt;</code>, let‚Äôs dig into how it works!</p>\n<h4 id=\"keeping-track-of-borrows-at-runtime-with-refcellt\"><a class=\"header\" href=\"#keeping-track-of-borrows-at-runtime-with-refcellt\">Keeping Track of Borrows at Runtime with <code>RefCell&lt;T&gt;</code></a></h4>\n<p>When creating immutable and mutable references, we use the <code class=\"hljs\">&amp;</code> and <code class=\"hljs\">&amp;mut</code>\nsyntax, respectively. With <code class=\"hljs\">RefCell&lt;T&gt;</code>, we use the <code class=\"hljs\">borrow</code> and <code class=\"hljs\">borrow_mut</code>\nmethods, which are part of the safe API that belongs to <code class=\"hljs\">RefCell&lt;T&gt;</code>. The\n<code class=\"hljs\">borrow</code> method returns the smart pointer type <code class=\"hljs\">Ref&lt;T&gt;</code>, and <code class=\"hljs\">borrow_mut</code>\nreturns the smart pointer type <code class=\"hljs\">RefMut&lt;T&gt;</code>. Both types implement <code class=\"hljs\">Deref</code>, so we\ncan treat them like regular references.</p>\n<p>The <code class=\"hljs\">RefCell&lt;T&gt;</code> keeps track of how many <code class=\"hljs\">Ref&lt;T&gt;</code> and <code class=\"hljs\">RefMut&lt;T&gt;</code> smart\npointers are currently active. Every time we call <code class=\"hljs\">borrow</code>, the <code class=\"hljs\">RefCell&lt;T&gt;</code>\nincreases its count of how many immutable borrows are active. When a <code class=\"hljs\">Ref&lt;T&gt;</code>\nvalue goes out of scope, the count of immutable borrows goes down by one. Just\nlike the compile-time borrowing rules, <code class=\"hljs\">RefCell&lt;T&gt;</code> lets us have many immutable\nborrows or one mutable borrow at any point in time.</p>\n<p>If we try to violate these rules, rather than getting a compiler error as we\nwould with references, the implementation of <code class=\"hljs\">RefCell&lt;T&gt;</code> will panic at\nruntime. Listing 15-23 shows a modification of the implementation of <code class=\"hljs\">send</code> in\nListing 15-22. We‚Äôre deliberately trying to create two mutable borrows active\nfor the same scope to illustrate that <code class=\"hljs\">RefCell&lt;T&gt;</code> prevents us from doing this\nat runtime.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/panics.svg\" title=\"This code panics!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore panics hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Messenger</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">send</span></span>(&amp;<span class=\"hljs-keyword\">self</span>, msg: &amp;<span class=\"hljs-built_in\">str</span>);\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">LimitTracker</span></span>&lt;<span class=\"hljs-symbol\">'a</span>, T: Messenger&gt; {\n</span><span class=\"boring\">    messenger: &amp;<span class=\"hljs-symbol\">'a</span> T,\n</span><span class=\"boring\">    value: <span class=\"hljs-built_in\">usize</span>,\n</span><span class=\"boring\">    max: <span class=\"hljs-built_in\">usize</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span>&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; LimitTracker&lt;<span class=\"hljs-symbol\">'a</span>, T&gt;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">where</span>\n</span><span class=\"boring\">    T: Messenger,\n</span><span class=\"boring\">{\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(messenger: &amp;<span class=\"hljs-symbol\">'a</span> T, max: <span class=\"hljs-built_in\">usize</span>) -&gt; LimitTracker&lt;<span class=\"hljs-symbol\">'a</span>, T&gt; {\n</span><span class=\"boring\">        LimitTracker {\n</span><span class=\"boring\">            messenger,\n</span><span class=\"boring\">            value: <span class=\"hljs-number\">0</span>,\n</span><span class=\"boring\">            max,\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">set_value</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, value: <span class=\"hljs-built_in\">usize</span>) {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">self</span>.value = value;\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> percentage_of_max = <span class=\"hljs-keyword\">self</span>.value <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">f64</span> / <span class=\"hljs-keyword\">self</span>.max <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">f64</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> percentage_of_max &gt;= <span class=\"hljs-number\">1.0</span> {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">self</span>.messenger.send(<span class=\"hljs-string\">\"Error: You are over your quota!\"</span>);\n</span><span class=\"boring\">        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> percentage_of_max &gt;= <span class=\"hljs-number\">0.9</span> {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">self</span>.messenger\n</span><span class=\"boring\">                .send(<span class=\"hljs-string\">\"Urgent warning: You've used up over 90% of your quota!\"</span>);\n</span><span class=\"boring\">        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> percentage_of_max &gt;= <span class=\"hljs-number\">0.75</span> {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">self</span>.messenger\n</span><span class=\"boring\">                .send(<span class=\"hljs-string\">\"Warning: You've used up over 75% of your quota!\"</span>);\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-meta\">#[cfg(test)]</span>\n</span><span class=\"boring\"><span class=\"hljs-keyword\">mod</span> tests {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">use</span> super::*;\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">use</span> std::cell::RefCell;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">MockMessenger</span></span> {\n</span><span class=\"boring\">        sent_messages: RefCell&lt;<span class=\"hljs-built_in\">Vec</span>&lt;<span class=\"hljs-built_in\">String</span>&gt;&gt;,\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">impl</span> MockMessenger {\n</span><span class=\"boring\">        <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>() -&gt; MockMessenger {\n</span><span class=\"boring\">            MockMessenger {\n</span><span class=\"boring\">                sent_messages: RefCell::new(<span class=\"hljs-built_in\">vec!</span>[]),\n</span><span class=\"boring\">            }\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span>    <span class=\"hljs-keyword\">impl</span> Messenger <span class=\"hljs-keyword\">for</span> MockMessenger {\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">send</span></span>(&amp;<span class=\"hljs-keyword\">self</span>, message: &amp;<span class=\"hljs-built_in\">str</span>) {\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> one_borrow = <span class=\"hljs-keyword\">self</span>.sent_messages.borrow_mut();\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> two_borrow = <span class=\"hljs-keyword\">self</span>.sent_messages.borrow_mut();\n\n            one_borrow.push(<span class=\"hljs-built_in\">String</span>::from(message));\n            two_borrow.push(<span class=\"hljs-built_in\">String</span>::from(message));\n        }\n    }\n<span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-meta\">#[test]</span>\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">it_sends_an_over_75_percent_warning_message</span></span>() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> mock_messenger = MockMessenger::new();\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> limit_tracker = LimitTracker::new(&amp;mock_messenger, <span class=\"hljs-number\">100</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">        limit_tracker.set_value(<span class=\"hljs-number\">80</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert_eq!</span>(mock_messenger.sent_messages.borrow().len(), <span class=\"hljs-number\">1</span>);\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre>\n<p><span class=\"caption\">Listing 15-23: Creating two mutable references in the\nsame scope to see that <code class=\"hljs\">RefCell&lt;T&gt;</code> will panic</span></p>\n<p>We create a variable <code class=\"hljs\">one_borrow</code> for the <code class=\"hljs\">RefMut&lt;T&gt;</code> smart pointer returned\nfrom <code class=\"hljs\">borrow_mut</code>. Then we create another mutable borrow in the same way in the\nvariable <code class=\"hljs\">two_borrow</code>. This makes two mutable references in the same scope,\nwhich isn‚Äôt allowed. When we run the tests for our library, the code in Listing\n15-23 will compile without any errors, but the test will fail:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo <span class=\"hljs-built_in\">test</span></span>\n   Compiling limit-tracker v0.1.0 (file:///projects/limit-tracker)\n    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.91s\n     Running unittests src/lib.rs (target/debug/deps/limit_tracker-e599811fa246dbde)\n\nrunning 1 test\ntest tests::it_sends_an_over_75_percent_warning_message ... FAILED\n\nfailures:\n\n---- tests::it_sends_an_over_75_percent_warning_message stdout ----\nthread 'tests::it_sends_an_over_75_percent_warning_message' panicked at src/lib.rs:60:53:\nalready borrowed: BorrowMutError\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\n\nfailures:\n    tests::it_sends_an_over_75_percent_warning_message\n\ntest result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s\n\nerror: test failed, to rerun pass `--lib`\n</code></pre>\n<p>Notice that the code panicked with the message <code class=\"hljs\">already borrowed: BorrowMutError</code>. This is how <code class=\"hljs\">RefCell&lt;T&gt;</code> handles violations of the borrowing\nrules at runtime.</p>\n<p>Choosing to catch borrowing errors at runtime rather than compile time, as\nwe‚Äôve done here, means you‚Äôd potentially be finding mistakes in your code later\nin the development process: possibly not until your code was deployed to\nproduction. Also, your code would incur a small runtime performance penalty as\na result of keeping track of the borrows at runtime rather than compile time.\nHowever, using <code class=\"hljs\">RefCell&lt;T&gt;</code> makes it possible to write a mock object that can\nmodify itself to keep track of the messages it has seen while you‚Äôre using it\nin a context where only immutable values are allowed. You can use <code class=\"hljs\">RefCell&lt;T&gt;</code>\ndespite its trade-offs to get more functionality than regular references\nprovide.</p>\n<h3 id=\"having-multiple-owners-of-mutable-data-by-combining-rct-and-refcellt\"><a class=\"header\" href=\"#having-multiple-owners-of-mutable-data-by-combining-rct-and-refcellt\">Having Multiple Owners of Mutable Data by Combining <code>Rc&lt;T&gt;</code> and <code>RefCell&lt;T&gt;</code></a></h3>\n<p>A common way to use <code class=\"hljs\">RefCell&lt;T&gt;</code> is in combination with <code class=\"hljs\">Rc&lt;T&gt;</code>. Recall that\n<code class=\"hljs\">Rc&lt;T&gt;</code> lets you have multiple owners of some data, but it only gives immutable\naccess to that data. If you have an <code class=\"hljs\">Rc&lt;T&gt;</code> that holds a <code class=\"hljs\">RefCell&lt;T&gt;</code>, you can\nget a value that can have multiple owners <em>and</em> that you can mutate!</p>\n<p>For example, recall the cons list example in Listing 15-18 where we used\n<code class=\"hljs\">Rc&lt;T&gt;</code> to allow multiple lists to share ownership of another list. Because\n<code class=\"hljs\">Rc&lt;T&gt;</code> holds only immutable values, we can‚Äôt change any of the values in the\nlist once we‚Äôve created them. Let‚Äôs add in <code class=\"hljs\">RefCell&lt;T&gt;</code> to gain the ability to\nchange the values in the lists. Listing 15-24 shows that by using a\n<code class=\"hljs\">RefCell&lt;T&gt;</code> in the <code class=\"hljs\">Cons</code> definition, we can modify the value stored in all\nthe lists:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-meta\">#[derive(Debug)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">List</span></span> {\n    Cons(Rc&lt;RefCell&lt;<span class=\"hljs-built_in\">i32</span>&gt;&gt;, Rc&lt;List&gt;),\n    Nil,\n}\n\n<span class=\"hljs-keyword\">use</span> crate::List::{Cons, Nil};\n<span class=\"hljs-keyword\">use</span> std::cell::RefCell;\n<span class=\"hljs-keyword\">use</span> std::rc::Rc;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> value = Rc::new(RefCell::new(<span class=\"hljs-number\">5</span>));\n\n    <span class=\"hljs-keyword\">let</span> a = Rc::new(Cons(Rc::clone(&amp;value), Rc::new(Nil)));\n\n    <span class=\"hljs-keyword\">let</span> b = Cons(Rc::new(RefCell::new(<span class=\"hljs-number\">3</span>)), Rc::clone(&amp;a));\n    <span class=\"hljs-keyword\">let</span> c = Cons(Rc::new(RefCell::new(<span class=\"hljs-number\">4</span>)), Rc::clone(&amp;a));\n\n    *value.borrow_mut() += <span class=\"hljs-number\">10</span>;\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"a after = {a:?}\"</span>);\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"b after = {b:?}\"</span>);\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"c after = {c:?}\"</span>);\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 15-24: Using <code class=\"hljs\">Rc&lt;RefCell&lt;i32&gt;&gt;</code> to create a\n<code class=\"hljs\">List</code> that we can mutate</span></p>\n<p>We create a value that is an instance of <code class=\"hljs\">Rc&lt;RefCell&lt;i32&gt;&gt;</code> and store it in a\nvariable named <code class=\"hljs\">value</code> so we can access it directly later. Then we create a\n<code class=\"hljs\">List</code> in <code class=\"hljs\">a</code> with a <code class=\"hljs\">Cons</code> variant that holds <code class=\"hljs\">value</code>. We need to clone\n<code class=\"hljs\">value</code> so both <code class=\"hljs\">a</code> and <code class=\"hljs\">value</code> have ownership of the inner <code class=\"hljs\">5</code> value rather\nthan transferring ownership from <code class=\"hljs\">value</code> to <code class=\"hljs\">a</code> or having <code class=\"hljs\">a</code> borrow from\n<code class=\"hljs\">value</code>.</p>\n<p>We wrap the list <code class=\"hljs\">a</code> in an <code class=\"hljs\">Rc&lt;T&gt;</code> so when we create lists <code class=\"hljs\">b</code> and <code class=\"hljs\">c</code>, they\ncan both refer to <code class=\"hljs\">a</code>, which is what we did in Listing 15-18.</p>\n<p>After we‚Äôve created the lists in <code class=\"hljs\">a</code>, <code class=\"hljs\">b</code>, and <code class=\"hljs\">c</code>, we want to add 10 to the\nvalue in <code class=\"hljs\">value</code>. We do this by calling <code class=\"hljs\">borrow_mut</code> on <code class=\"hljs\">value</code>, which uses the\nautomatic dereferencing feature we discussed in Chapter 5 (see the section\n<a href=\"ch05-03-method-syntax.html#wheres-the---operator\">‚ÄúWhere‚Äôs the <code class=\"hljs\">-&gt;</code> Operator?‚Äù</a><!-- ignore -->) to\ndereference the <code class=\"hljs\">Rc&lt;T&gt;</code> to the inner <code class=\"hljs\">RefCell&lt;T&gt;</code> value. The <code class=\"hljs\">borrow_mut</code>\nmethod returns a <code class=\"hljs\">RefMut&lt;T&gt;</code> smart pointer, and we use the dereference operator\non it and change the inner value.</p>\n<p>When we print <code class=\"hljs\">a</code>, <code class=\"hljs\">b</code>, and <code class=\"hljs\">c</code>, we can see that they all have the modified\nvalue of 15 rather than 5:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling cons-list v0.1.0 (file:///projects/cons-list)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.63s\n     Running `target/debug/cons-list`\na after = Cons(RefCell { value: 15 }, Nil)\nb after = Cons(RefCell { value: 3 }, Cons(RefCell { value: 15 }, Nil))\nc after = Cons(RefCell { value: 4 }, Cons(RefCell { value: 15 }, Nil))\n</code></pre>\n<p>This technique is pretty neat! By using <code class=\"hljs\">RefCell&lt;T&gt;</code>, we have an outwardly\nimmutable <code class=\"hljs\">List</code> value. But we can use the methods on <code class=\"hljs\">RefCell&lt;T&gt;</code> that provide\naccess to its interior mutability so we can modify our data when we need to.\nThe runtime checks of the borrowing rules protect us from data races, and it‚Äôs\nsometimes worth trading a bit of speed for this flexibility in our data\nstructures. Note that <code class=\"hljs\">RefCell&lt;T&gt;</code> does not work for multithreaded code!\n<code class=\"hljs\">Mutex&lt;T&gt;</code> is the thread-safe version of <code class=\"hljs\">RefCell&lt;T&gt;</code> and we‚Äôll discuss\n<code class=\"hljs\">Mutex&lt;T&gt;</code> in Chapter 16.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"reference-cycles-can-leak-memory\"><a class=\"header\" href=\"#reference-cycles-can-leak-memory\">Reference Cycles Can Leak Memory</a></h2>\n<p>Rust‚Äôs memory safety guarantees make it difficult, but not impossible, to\naccidentally create memory that is never cleaned up (known as a <em>memory leak</em>).\nPreventing memory leaks entirely is not one of Rust‚Äôs guarantees, meaning\nmemory leaks are memory safe in Rust. We can see that Rust allows memory leaks\nby using <code class=\"hljs\">Rc&lt;T&gt;</code> and <code class=\"hljs\">RefCell&lt;T&gt;</code>: it‚Äôs possible to create references where\nitems refer to each other in a cycle. This creates memory leaks because the\nreference count of each item in the cycle will never reach 0, and the values\nwill never be dropped.</p>\n<h3 id=\"creating-a-reference-cycle\"><a class=\"header\" href=\"#creating-a-reference-cycle\">Creating a Reference Cycle</a></h3>\n<p>Let‚Äôs look at how a reference cycle might happen and how to prevent it,\nstarting with the definition of the <code class=\"hljs\">List</code> enum and a <code class=\"hljs\">tail</code> method in Listing\n15-25:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-keyword\">use</span> crate::List::{Cons, Nil};\n<span class=\"hljs-keyword\">use</span> std::cell::RefCell;\n<span class=\"hljs-keyword\">use</span> std::rc::Rc;\n\n<span class=\"hljs-meta\">#[derive(Debug)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">List</span></span> {\n    Cons(<span class=\"hljs-built_in\">i32</span>, RefCell&lt;Rc&lt;List&gt;&gt;),\n    Nil,\n}\n\n<span class=\"hljs-keyword\">impl</span> List {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">tail</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">Option</span>&lt;&amp;RefCell&lt;Rc&lt;List&gt;&gt;&gt; {\n        <span class=\"hljs-keyword\">match</span> <span class=\"hljs-keyword\">self</span> {\n            Cons(_, item) =&gt; <span class=\"hljs-literal\">Some</span>(item),\n            Nil =&gt; <span class=\"hljs-literal\">None</span>,\n        }\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}</code></pre></pre>\n<p><span class=\"caption\">Listing 15-25: A cons list definition that holds a\n<code class=\"hljs\">RefCell&lt;T&gt;</code> so we can modify what a <code class=\"hljs\">Cons</code> variant is referring to</span></p>\n<p>We‚Äôre using another variation of the <code class=\"hljs\">List</code> definition from Listing 15-5. The\nsecond element in the <code class=\"hljs\">Cons</code> variant is now <code class=\"hljs\">RefCell&lt;Rc&lt;List&gt;&gt;</code>, meaning that\ninstead of having the ability to modify the <code class=\"hljs\">i32</code> value as we did in Listing\n15-24, we want to modify the <code class=\"hljs\">List</code> value a <code class=\"hljs\">Cons</code> variant is pointing to.\nWe‚Äôre also adding a <code class=\"hljs\">tail</code> method to make it convenient for us to access the\nsecond item if we have a <code class=\"hljs\">Cons</code> variant.</p>\n<p>In Listing 15-26, we‚Äôre adding a <code class=\"hljs\">main</code> function that uses the definitions in\nListing 15-25. This code creates a list in <code class=\"hljs\">a</code> and a list in <code class=\"hljs\">b</code> that points to\nthe list in <code class=\"hljs\">a</code>. Then it modifies the list in <code class=\"hljs\">a</code> to point to <code class=\"hljs\">b</code>, creating a\nreference cycle. There are <code class=\"hljs\">println!</code> statements along the way to show what the\nreference counts are at various points in this process.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> crate::List::{Cons, Nil};\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::cell::RefCell;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::rc::Rc;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-meta\">#[derive(Debug)]</span>\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">List</span></span> {\n</span><span class=\"boring\">    Cons(<span class=\"hljs-built_in\">i32</span>, RefCell&lt;Rc&lt;List&gt;&gt;),\n</span><span class=\"boring\">    Nil,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> List {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">tail</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">Option</span>&lt;&amp;RefCell&lt;Rc&lt;List&gt;&gt;&gt; {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">match</span> <span class=\"hljs-keyword\">self</span> {\n</span><span class=\"boring\">            Cons(_, item) =&gt; <span class=\"hljs-literal\">Some</span>(item),\n</span><span class=\"boring\">            Nil =&gt; <span class=\"hljs-literal\">None</span>,\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> a = Rc::new(Cons(<span class=\"hljs-number\">5</span>, RefCell::new(Rc::new(Nil))));\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"a initial rc count = {}\"</span>, Rc::strong_count(&amp;a));\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"a next item = {:?}\"</span>, a.tail());\n\n    <span class=\"hljs-keyword\">let</span> b = Rc::new(Cons(<span class=\"hljs-number\">10</span>, RefCell::new(Rc::clone(&amp;a))));\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"a rc count after b creation = {}\"</span>, Rc::strong_count(&amp;a));\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"b initial rc count = {}\"</span>, Rc::strong_count(&amp;b));\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"b next item = {:?}\"</span>, b.tail());\n\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-literal\">Some</span>(link) = a.tail() {\n        *link.borrow_mut() = Rc::clone(&amp;b);\n    }\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"b rc count after changing a = {}\"</span>, Rc::strong_count(&amp;b));\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"a rc count after changing a = {}\"</span>, Rc::strong_count(&amp;a));\n\n    <span class=\"hljs-comment\">// Uncomment the next line to see that we have a cycle;</span>\n    <span class=\"hljs-comment\">// it will overflow the stack</span>\n    <span class=\"hljs-comment\">// println!(\"a next item = {:?}\", a.tail());</span>\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 15-26: Creating a reference cycle of two <code class=\"hljs\">List</code>\nvalues pointing to each other</span></p>\n<p>We create an <code class=\"hljs\">Rc&lt;List&gt;</code> instance holding a <code class=\"hljs\">List</code> value in the variable <code class=\"hljs\">a</code>\nwith an initial list of <code class=\"hljs\">5, Nil</code>. We then create an <code class=\"hljs\">Rc&lt;List&gt;</code> instance holding\nanother <code class=\"hljs\">List</code> value in the variable <code class=\"hljs\">b</code> that contains the value 10 and points\nto the list in <code class=\"hljs\">a</code>.</p>\n<p>We modify <code class=\"hljs\">a</code> so it points to <code class=\"hljs\">b</code> instead of <code class=\"hljs\">Nil</code>, creating a cycle. We do\nthat by using the <code class=\"hljs\">tail</code> method to get a reference to the <code class=\"hljs\">RefCell&lt;Rc&lt;List&gt;&gt;</code>\nin <code class=\"hljs\">a</code>, which we put in the variable <code class=\"hljs\">link</code>. Then we use the <code class=\"hljs\">borrow_mut</code>\nmethod on the <code class=\"hljs\">RefCell&lt;Rc&lt;List&gt;&gt;</code> to change the value inside from an <code class=\"hljs\">Rc&lt;List&gt;</code>\nthat holds a <code class=\"hljs\">Nil</code> value to the <code class=\"hljs\">Rc&lt;List&gt;</code> in <code class=\"hljs\">b</code>.</p>\n<p>When we run this code, keeping the last <code class=\"hljs\">println!</code> commented out for the\nmoment, we‚Äôll get this output:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling cons-list v0.1.0 (file:///projects/cons-list)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.53s\n     Running `target/debug/cons-list`\na initial rc count = 1\na next item = Some(RefCell { value: Nil })\na rc count after b creation = 2\nb initial rc count = 1\nb next item = Some(RefCell { value: Cons(5, RefCell { value: Nil }) })\nb rc count after changing a = 2\na rc count after changing a = 2\n</code></pre>\n<p>The reference count of the <code class=\"hljs\">Rc&lt;List&gt;</code> instances in both <code class=\"hljs\">a</code> and <code class=\"hljs\">b</code> are 2 after\nwe change the list in <code class=\"hljs\">a</code> to point to <code class=\"hljs\">b</code>. At the end of <code class=\"hljs\">main</code>, Rust drops the\nvariable <code class=\"hljs\">b</code>, which decreases the reference count of the <code class=\"hljs\">b</code> <code class=\"hljs\">Rc&lt;List&gt;</code> instance\nfrom 2 to 1. The memory that <code class=\"hljs\">Rc&lt;List&gt;</code> has on the heap won‚Äôt be dropped at\nthis point, because its reference count is 1, not 0. Then Rust drops <code class=\"hljs\">a</code>, which\ndecreases the reference count of the <code class=\"hljs\">a</code> <code class=\"hljs\">Rc&lt;List&gt;</code> instance from 2 to 1 as\nwell. This instance‚Äôs memory can‚Äôt be dropped either, because the other\n<code class=\"hljs\">Rc&lt;List&gt;</code> instance still refers to it. The memory allocated to the list will\nremain uncollected forever. To visualize this reference cycle, we‚Äôve created a\ndiagram in Figure 15-4.</p>\n<img alt=\"Reference cycle of lists\" src=\"img/trpl15-04.svg\" class=\"center\">\n<p><span class=\"caption\">Figure 15-4: A reference cycle of lists <code class=\"hljs\">a</code> and <code class=\"hljs\">b</code>\npointing to each other</span></p>\n<p>If you uncomment the last <code class=\"hljs\">println!</code> and run the program, Rust will try to\nprint this cycle with <code class=\"hljs\">a</code> pointing to <code class=\"hljs\">b</code> pointing to <code class=\"hljs\">a</code> and so forth until it\noverflows the stack.</p>\n<p>Compared to a real-world program, the consequences of creating a reference cycle\nin this example aren‚Äôt very dire: right after we create the reference cycle,\nthe program ends. However, if a more complex program allocated lots of memory\nin a cycle and held onto it for a long time, the program would use more memory\nthan it needed and might overwhelm the system, causing it to run out of\navailable memory.</p>\n<p>Creating reference cycles is not easily done, but it‚Äôs not impossible either.\nIf you have <code class=\"hljs\">RefCell&lt;T&gt;</code> values that contain <code class=\"hljs\">Rc&lt;T&gt;</code> values or similar nested\ncombinations of types with interior mutability and reference counting, you must\nensure that you don‚Äôt create cycles; you can‚Äôt rely on Rust to catch them.\nCreating a reference cycle would be a logic bug in your program that you should\nuse automated tests, code reviews, and other software development practices to\nminimize.</p>\n<p>Another solution for avoiding reference cycles is reorganizing your data\nstructures so that some references express ownership and some references don‚Äôt.\nAs a result, you can have cycles made up of some ownership relationships and\nsome non-ownership relationships, and only the ownership relationships affect\nwhether or not a value can be dropped. In Listing 15-25, we always want <code class=\"hljs\">Cons</code>\nvariants to own their list, so reorganizing the data structure isn‚Äôt possible.\nLet‚Äôs look at an example using graphs made up of parent nodes and child nodes\nto see when non-ownership relationships are an appropriate way to prevent\nreference cycles.</p>\n<h3 id=\"preventing-reference-cycles-turning-an-rct-into-a-weakt\"><a class=\"header\" href=\"#preventing-reference-cycles-turning-an-rct-into-a-weakt\">Preventing Reference Cycles: Turning an <code>Rc&lt;T&gt;</code> into a <code>Weak&lt;T&gt;</code></a></h3>\n<p>So far, we‚Äôve demonstrated that calling <code class=\"hljs\">Rc::clone</code> increases the\n<code class=\"hljs\">strong_count</code> of an <code class=\"hljs\">Rc&lt;T&gt;</code> instance, and an <code class=\"hljs\">Rc&lt;T&gt;</code> instance is only cleaned\nup if its <code class=\"hljs\">strong_count</code> is 0. You can also create a <em>weak reference</em> to the\nvalue within an <code class=\"hljs\">Rc&lt;T&gt;</code> instance by calling <code class=\"hljs\">Rc::downgrade</code> and passing a\nreference to the <code class=\"hljs\">Rc&lt;T&gt;</code>. Strong references are how you can share ownership of\nan <code class=\"hljs\">Rc&lt;T&gt;</code> instance. Weak references don‚Äôt express an ownership relationship,\nand their count doesn‚Äôt affect when an <code class=\"hljs\">Rc&lt;T&gt;</code> instance is cleaned up. They\nwon‚Äôt cause a reference cycle because any cycle involving some weak references\nwill be broken once the strong reference count of values involved is 0.</p>\n<p>When you call <code class=\"hljs\">Rc::downgrade</code>, you get a smart pointer of type <code class=\"hljs\">Weak&lt;T&gt;</code>.\nInstead of increasing the <code class=\"hljs\">strong_count</code> in the <code class=\"hljs\">Rc&lt;T&gt;</code> instance by 1, calling\n<code class=\"hljs\">Rc::downgrade</code> increases the <code class=\"hljs\">weak_count</code> by 1. The <code class=\"hljs\">Rc&lt;T&gt;</code> type uses\n<code class=\"hljs\">weak_count</code> to keep track of how many <code class=\"hljs\">Weak&lt;T&gt;</code> references exist, similar to\n<code class=\"hljs\">strong_count</code>. The difference is the <code class=\"hljs\">weak_count</code> doesn‚Äôt need to be 0 for the\n<code class=\"hljs\">Rc&lt;T&gt;</code> instance to be cleaned up.</p>\n<p>Because the value that <code class=\"hljs\">Weak&lt;T&gt;</code> references might have been dropped, to do\nanything with the value that a <code class=\"hljs\">Weak&lt;T&gt;</code> is pointing to, you must make sure the\nvalue still exists. Do this by calling the <code class=\"hljs\">upgrade</code> method on a <code class=\"hljs\">Weak&lt;T&gt;</code>\ninstance, which will return an <code class=\"hljs\">Option&lt;Rc&lt;T&gt;&gt;</code>. You‚Äôll get a result of <code class=\"hljs\">Some</code>\nif the <code class=\"hljs\">Rc&lt;T&gt;</code> value has not been dropped yet and a result of <code class=\"hljs\">None</code> if the\n<code class=\"hljs\">Rc&lt;T&gt;</code> value has been dropped. Because <code class=\"hljs\">upgrade</code> returns an <code class=\"hljs\">Option&lt;Rc&lt;T&gt;&gt;</code>,\nRust will ensure that the <code class=\"hljs\">Some</code> case and the <code class=\"hljs\">None</code> case are handled, and\nthere won‚Äôt be an invalid pointer.</p>\n<p>As an example, rather than using a list whose items know only about the next\nitem, we‚Äôll create a tree whose items know about their children items <em>and</em>\ntheir parent items.</p>\n<h4 id=\"creating-a-tree-data-structure-a-node-with-child-nodes\"><a class=\"header\" href=\"#creating-a-tree-data-structure-a-node-with-child-nodes\">Creating a Tree Data Structure: a <code>Node</code> with Child Nodes</a></h4>\n<p>To start, we‚Äôll build a tree with nodes that know about their child nodes.\nWe‚Äôll create a struct named <code class=\"hljs\">Node</code> that holds its own <code class=\"hljs\">i32</code> value as well as\nreferences to its children <code class=\"hljs\">Node</code> values:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"hljs-keyword\">use</span> std::cell::RefCell;\n<span class=\"hljs-keyword\">use</span> std::rc::Rc;\n\n<span class=\"hljs-meta\">#[derive(Debug)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span></span> {\n    value: <span class=\"hljs-built_in\">i32</span>,\n    children: RefCell&lt;<span class=\"hljs-built_in\">Vec</span>&lt;Rc&lt;Node&gt;&gt;&gt;,\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> leaf = Rc::new(Node {\n</span><span class=\"boring\">        value: <span class=\"hljs-number\">3</span>,\n</span><span class=\"boring\">        children: RefCell::new(<span class=\"hljs-built_in\">vec!</span>[]),\n</span><span class=\"boring\">    });\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> branch = Rc::new(Node {\n</span><span class=\"boring\">        value: <span class=\"hljs-number\">5</span>,\n</span><span class=\"boring\">        children: RefCell::new(<span class=\"hljs-built_in\">vec!</span>[Rc::clone(&amp;leaf)]),\n</span><span class=\"boring\">    });\n</span><span class=\"boring\">}</span></code></pre></pre>\n<p>We want a <code class=\"hljs\">Node</code> to own its children, and we want to share that ownership with\nvariables so we can access each <code class=\"hljs\">Node</code> in the tree directly. To do this, we\ndefine the <code class=\"hljs\">Vec&lt;T&gt;</code> items to be values of type <code class=\"hljs\">Rc&lt;Node&gt;</code>. We also want to\nmodify which nodes are children of another node, so we have a <code class=\"hljs\">RefCell&lt;T&gt;</code> in\n<code class=\"hljs\">children</code> around the <code class=\"hljs\">Vec&lt;Rc&lt;Node&gt;&gt;</code>.</p>\n<p>Next, we‚Äôll use our struct definition and create one <code class=\"hljs\">Node</code> instance named\n<code class=\"hljs\">leaf</code> with the value 3 and no children, and another instance named <code class=\"hljs\">branch</code>\nwith the value 5 and <code class=\"hljs\">leaf</code> as one of its children, as shown in Listing 15-27:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::cell::RefCell;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::rc::Rc;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-meta\">#[derive(Debug)]</span>\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span></span> {\n</span><span class=\"boring\">    value: <span class=\"hljs-built_in\">i32</span>,\n</span><span class=\"boring\">    children: RefCell&lt;<span class=\"hljs-built_in\">Vec</span>&lt;Rc&lt;Node&gt;&gt;&gt;,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> leaf = Rc::new(Node {\n        value: <span class=\"hljs-number\">3</span>,\n        children: RefCell::new(<span class=\"hljs-built_in\">vec!</span>[]),\n    });\n\n    <span class=\"hljs-keyword\">let</span> branch = Rc::new(Node {\n        value: <span class=\"hljs-number\">5</span>,\n        children: RefCell::new(<span class=\"hljs-built_in\">vec!</span>[Rc::clone(&amp;leaf)]),\n    });\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 15-27: Creating a <code class=\"hljs\">leaf</code> node with no children\nand a <code class=\"hljs\">branch</code> node with <code class=\"hljs\">leaf</code> as one of its children</span></p>\n<p>We clone the <code class=\"hljs\">Rc&lt;Node&gt;</code> in <code class=\"hljs\">leaf</code> and store that in <code class=\"hljs\">branch</code>, meaning the\n<code class=\"hljs\">Node</code> in <code class=\"hljs\">leaf</code> now has two owners: <code class=\"hljs\">leaf</code> and <code class=\"hljs\">branch</code>. We can get from\n<code class=\"hljs\">branch</code> to <code class=\"hljs\">leaf</code> through <code class=\"hljs\">branch.children</code>, but there‚Äôs no way to get from\n<code class=\"hljs\">leaf</code> to <code class=\"hljs\">branch</code>. The reason is that <code class=\"hljs\">leaf</code> has no reference to <code class=\"hljs\">branch</code> and\ndoesn‚Äôt know they‚Äôre related. We want <code class=\"hljs\">leaf</code> to know that <code class=\"hljs\">branch</code> is its\nparent. We‚Äôll do that next.</p>\n<h4 id=\"adding-a-reference-from-a-child-to-its-parent\"><a class=\"header\" href=\"#adding-a-reference-from-a-child-to-its-parent\">Adding a Reference from a Child to Its Parent</a></h4>\n<p>To make the child node aware of its parent, we need to add a <code class=\"hljs\">parent</code> field to\nour <code class=\"hljs\">Node</code> struct definition. The trouble is in deciding what the type of\n<code class=\"hljs\">parent</code> should be. We know it can‚Äôt contain an <code class=\"hljs\">Rc&lt;T&gt;</code>, because that would\ncreate a reference cycle with <code class=\"hljs\">leaf.parent</code> pointing to <code class=\"hljs\">branch</code> and\n<code class=\"hljs\">branch.children</code> pointing to <code class=\"hljs\">leaf</code>, which would cause their <code class=\"hljs\">strong_count</code>\nvalues to never be 0.</p>\n<p>Thinking about the relationships another way, a parent node should own its\nchildren: if a parent node is dropped, its child nodes should be dropped as\nwell. However, a child should not own its parent: if we drop a child node, the\nparent should still exist. This is a case for weak references!</p>\n<p>So instead of <code class=\"hljs\">Rc&lt;T&gt;</code>, we‚Äôll make the type of <code class=\"hljs\">parent</code> use <code class=\"hljs\">Weak&lt;T&gt;</code>,\nspecifically a <code class=\"hljs\">RefCell&lt;Weak&lt;Node&gt;&gt;</code>. Now our <code class=\"hljs\">Node</code> struct definition looks\nlike this:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"hljs-keyword\">use</span> std::cell::RefCell;\n<span class=\"hljs-keyword\">use</span> std::rc::{Rc, Weak};\n\n<span class=\"hljs-meta\">#[derive(Debug)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span></span> {\n    value: <span class=\"hljs-built_in\">i32</span>,\n    parent: RefCell&lt;Weak&lt;Node&gt;&gt;,\n    children: RefCell&lt;<span class=\"hljs-built_in\">Vec</span>&lt;Rc&lt;Node&gt;&gt;&gt;,\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> leaf = Rc::new(Node {\n</span><span class=\"boring\">        value: <span class=\"hljs-number\">3</span>,\n</span><span class=\"boring\">        parent: RefCell::new(Weak::new()),\n</span><span class=\"boring\">        children: RefCell::new(<span class=\"hljs-built_in\">vec!</span>[]),\n</span><span class=\"boring\">    });\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"leaf parent = {:?}\"</span>, leaf.parent.borrow().upgrade());\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> branch = Rc::new(Node {\n</span><span class=\"boring\">        value: <span class=\"hljs-number\">5</span>,\n</span><span class=\"boring\">        parent: RefCell::new(Weak::new()),\n</span><span class=\"boring\">        children: RefCell::new(<span class=\"hljs-built_in\">vec!</span>[Rc::clone(&amp;leaf)]),\n</span><span class=\"boring\">    });\n</span><span class=\"boring\">\n</span><span class=\"boring\">    *leaf.parent.borrow_mut() = Rc::downgrade(&amp;branch);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"leaf parent = {:?}\"</span>, leaf.parent.borrow().upgrade());\n</span><span class=\"boring\">}</span></code></pre></pre>\n<p>A node will be able to refer to its parent node but doesn‚Äôt own its parent.\nIn Listing 15-28, we update <code class=\"hljs\">main</code> to use this new definition so the <code class=\"hljs\">leaf</code>\nnode will have a way to refer to its parent, <code class=\"hljs\">branch</code>:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::cell::RefCell;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::rc::{Rc, Weak};\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-meta\">#[derive(Debug)]</span>\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span></span> {\n</span><span class=\"boring\">    value: <span class=\"hljs-built_in\">i32</span>,\n</span><span class=\"boring\">    parent: RefCell&lt;Weak&lt;Node&gt;&gt;,\n</span><span class=\"boring\">    children: RefCell&lt;<span class=\"hljs-built_in\">Vec</span>&lt;Rc&lt;Node&gt;&gt;&gt;,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> leaf = Rc::new(Node {\n        value: <span class=\"hljs-number\">3</span>,\n        parent: RefCell::new(Weak::new()),\n        children: RefCell::new(<span class=\"hljs-built_in\">vec!</span>[]),\n    });\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"leaf parent = {:?}\"</span>, leaf.parent.borrow().upgrade());\n\n    <span class=\"hljs-keyword\">let</span> branch = Rc::new(Node {\n        value: <span class=\"hljs-number\">5</span>,\n        parent: RefCell::new(Weak::new()),\n        children: RefCell::new(<span class=\"hljs-built_in\">vec!</span>[Rc::clone(&amp;leaf)]),\n    });\n\n    *leaf.parent.borrow_mut() = Rc::downgrade(&amp;branch);\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"leaf parent = {:?}\"</span>, leaf.parent.borrow().upgrade());\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 15-28: A <code class=\"hljs\">leaf</code> node with a weak reference to its\nparent node <code class=\"hljs\">branch</code></span></p>\n<p>Creating the <code class=\"hljs\">leaf</code> node looks similar to Listing 15-27 with the exception of\nthe <code class=\"hljs\">parent</code> field: <code class=\"hljs\">leaf</code> starts out without a parent, so we create a new,\nempty <code class=\"hljs\">Weak&lt;Node&gt;</code> reference instance.</p>\n<p>At this point, when we try to get a reference to the parent of <code class=\"hljs\">leaf</code> by using\nthe <code class=\"hljs\">upgrade</code> method, we get a <code class=\"hljs\">None</code> value. We see this in the output from the\nfirst <code class=\"hljs\">println!</code> statement:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">leaf parent = None\n</code></pre>\n<p>When we create the <code class=\"hljs\">branch</code> node, it will also have a new <code class=\"hljs\">Weak&lt;Node&gt;</code>\nreference in the <code class=\"hljs\">parent</code> field, because <code class=\"hljs\">branch</code> doesn‚Äôt have a parent node.\nWe still have <code class=\"hljs\">leaf</code> as one of the children of <code class=\"hljs\">branch</code>. Once we have the\n<code class=\"hljs\">Node</code> instance in <code class=\"hljs\">branch</code>, we can modify <code class=\"hljs\">leaf</code> to give it a <code class=\"hljs\">Weak&lt;Node&gt;</code>\nreference to its parent. We use the <code class=\"hljs\">borrow_mut</code> method on the\n<code class=\"hljs\">RefCell&lt;Weak&lt;Node&gt;&gt;</code> in the <code class=\"hljs\">parent</code> field of <code class=\"hljs\">leaf</code>, and then we use the\n<code class=\"hljs\">Rc::downgrade</code> function to create a <code class=\"hljs\">Weak&lt;Node&gt;</code> reference to <code class=\"hljs\">branch</code> from\nthe <code class=\"hljs\">Rc&lt;Node&gt;</code> in <code class=\"hljs\">branch.</code></p>\n<p>When we print the parent of <code class=\"hljs\">leaf</code> again, this time we‚Äôll get a <code class=\"hljs\">Some</code> variant\nholding <code class=\"hljs\">branch</code>: now <code class=\"hljs\">leaf</code> can access its parent! When we print <code class=\"hljs\">leaf</code>, we\nalso avoid the cycle that eventually ended in a stack overflow like we had in\nListing 15-26; the <code class=\"hljs\">Weak&lt;Node&gt;</code> references are printed as <code class=\"hljs\">(Weak)</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">leaf parent = Some(Node { value: 5, parent: RefCell { value: (Weak) },\nchildren: RefCell { value: [Node { value: 3, parent: RefCell { value: (Weak) },\nchildren: RefCell { value: [] } }] } })\n</code></pre>\n<p>The lack of infinite output indicates that this code didn‚Äôt create a reference\ncycle. We can also tell this by looking at the values we get from calling\n<code class=\"hljs\">Rc::strong_count</code> and <code class=\"hljs\">Rc::weak_count</code>.</p>\n<h4 id=\"visualizing-changes-to-strong_count-and-weak_count\"><a class=\"header\" href=\"#visualizing-changes-to-strong_count-and-weak_count\">Visualizing Changes to <code>strong_count</code> and <code>weak_count</code></a></h4>\n<p>Let‚Äôs look at how the <code class=\"hljs\">strong_count</code> and <code class=\"hljs\">weak_count</code> values of the <code class=\"hljs\">Rc&lt;Node&gt;</code>\ninstances change by creating a new inner scope and moving the creation of\n<code class=\"hljs\">branch</code> into that scope. By doing so, we can see what happens when <code class=\"hljs\">branch</code> is\ncreated and then dropped when it goes out of scope. The modifications are shown\nin Listing 15-29:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::cell::RefCell;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::rc::{Rc, Weak};\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-meta\">#[derive(Debug)]</span>\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span></span> {\n</span><span class=\"boring\">    value: <span class=\"hljs-built_in\">i32</span>,\n</span><span class=\"boring\">    parent: RefCell&lt;Weak&lt;Node&gt;&gt;,\n</span><span class=\"boring\">    children: RefCell&lt;<span class=\"hljs-built_in\">Vec</span>&lt;Rc&lt;Node&gt;&gt;&gt;,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> leaf = Rc::new(Node {\n        value: <span class=\"hljs-number\">3</span>,\n        parent: RefCell::new(Weak::new()),\n        children: RefCell::new(<span class=\"hljs-built_in\">vec!</span>[]),\n    });\n\n    <span class=\"hljs-built_in\">println!</span>(\n        <span class=\"hljs-string\">\"leaf strong = {}, weak = {}\"</span>,\n        Rc::strong_count(&amp;leaf),\n        Rc::weak_count(&amp;leaf),\n    );\n\n    {\n        <span class=\"hljs-keyword\">let</span> branch = Rc::new(Node {\n            value: <span class=\"hljs-number\">5</span>,\n            parent: RefCell::new(Weak::new()),\n            children: RefCell::new(<span class=\"hljs-built_in\">vec!</span>[Rc::clone(&amp;leaf)]),\n        });\n\n        *leaf.parent.borrow_mut() = Rc::downgrade(&amp;branch);\n\n        <span class=\"hljs-built_in\">println!</span>(\n            <span class=\"hljs-string\">\"branch strong = {}, weak = {}\"</span>,\n            Rc::strong_count(&amp;branch),\n            Rc::weak_count(&amp;branch),\n        );\n\n        <span class=\"hljs-built_in\">println!</span>(\n            <span class=\"hljs-string\">\"leaf strong = {}, weak = {}\"</span>,\n            Rc::strong_count(&amp;leaf),\n            Rc::weak_count(&amp;leaf),\n        );\n    }\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"leaf parent = {:?}\"</span>, leaf.parent.borrow().upgrade());\n    <span class=\"hljs-built_in\">println!</span>(\n        <span class=\"hljs-string\">\"leaf strong = {}, weak = {}\"</span>,\n        Rc::strong_count(&amp;leaf),\n        Rc::weak_count(&amp;leaf),\n    );\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 15-29: Creating <code class=\"hljs\">branch</code> in an inner scope and\nexamining strong and weak reference counts</span></p>\n<p>After <code class=\"hljs\">leaf</code> is created, its <code class=\"hljs\">Rc&lt;Node&gt;</code> has a strong count of 1 and a weak\ncount of 0. In the inner scope, we create <code class=\"hljs\">branch</code> and associate it with\n<code class=\"hljs\">leaf</code>, at which point when we print the counts, the <code class=\"hljs\">Rc&lt;Node&gt;</code> in <code class=\"hljs\">branch</code>\nwill have a strong count of 1 and a weak count of 1 (for <code class=\"hljs\">leaf.parent</code> pointing\nto <code class=\"hljs\">branch</code> with a <code class=\"hljs\">Weak&lt;Node&gt;</code>). When we print the counts in <code class=\"hljs\">leaf</code>, we‚Äôll see\nit will have a strong count of 2, because <code class=\"hljs\">branch</code> now has a clone of the\n<code class=\"hljs\">Rc&lt;Node&gt;</code> of <code class=\"hljs\">leaf</code> stored in <code class=\"hljs\">branch.children</code>, but will still have a weak\ncount of 0.</p>\n<p>When the inner scope ends, <code class=\"hljs\">branch</code> goes out of scope and the strong count of\nthe <code class=\"hljs\">Rc&lt;Node&gt;</code> decreases to 0, so its <code class=\"hljs\">Node</code> is dropped. The weak count of 1\nfrom <code class=\"hljs\">leaf.parent</code> has no bearing on whether or not <code class=\"hljs\">Node</code> is dropped, so we\ndon‚Äôt get any memory leaks!</p>\n<p>If we try to access the parent of <code class=\"hljs\">leaf</code> after the end of the scope, we‚Äôll get\n<code class=\"hljs\">None</code> again. At the end of the program, the <code class=\"hljs\">Rc&lt;Node&gt;</code> in <code class=\"hljs\">leaf</code> has a strong\ncount of 1 and a weak count of 0, because the variable <code class=\"hljs\">leaf</code> is now the only\nreference to the <code class=\"hljs\">Rc&lt;Node&gt;</code> again.</p>\n<p>All of the logic that manages the counts and value dropping is built into\n<code class=\"hljs\">Rc&lt;T&gt;</code> and <code class=\"hljs\">Weak&lt;T&gt;</code> and their implementations of the <code class=\"hljs\">Drop</code> trait. By\nspecifying that the relationship from a child to its parent should be a\n<code class=\"hljs\">Weak&lt;T&gt;</code> reference in the definition of <code class=\"hljs\">Node</code>, you‚Äôre able to have parent\nnodes point to child nodes and vice versa without creating a reference cycle\nand memory leaks.</p>\n<h2 id=\"summary-14\"><a class=\"header\" href=\"#summary-14\">Summary</a></h2>\n<p>This chapter covered how to use smart pointers to make different guarantees and\ntrade-offs from those Rust makes by default with regular references. The\n<code class=\"hljs\">Box&lt;T&gt;</code> type has a known size and points to data allocated on the heap. The\n<code class=\"hljs\">Rc&lt;T&gt;</code> type keeps track of the number of references to data on the heap so\nthat data can have multiple owners. The <code class=\"hljs\">RefCell&lt;T&gt;</code> type with its interior\nmutability gives us a type that we can use when we need an immutable type but\nneed to change an inner value of that type; it also enforces the borrowing\nrules at runtime instead of at compile time.</p>\n<p>Also discussed were the <code class=\"hljs\">Deref</code> and <code class=\"hljs\">Drop</code> traits, which enable a lot of the\nfunctionality of smart pointers. We explored reference cycles that can cause\nmemory leaks and how to prevent them using <code class=\"hljs\">Weak&lt;T&gt;</code>.</p>\n<p>If this chapter has piqued your interest and you want to implement your own\nsmart pointers, check out <a href=\"../nomicon/index.html\">‚ÄúThe Rustonomicon‚Äù</a> for more useful\ninformation.</p>\n<p>Next, we‚Äôll talk about concurrency in Rust. You‚Äôll even learn about a few new\nsmart pointers.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"fearless-concurrency\"><a class=\"header\" href=\"#fearless-concurrency\">Fearless Concurrency</a></h1>\n<p>Handling concurrent programming safely and efficiently is another of Rust‚Äôs\nmajor goals. <em>Concurrent programming</em>, where different parts of a program\nexecute independently, and <em>parallel programming</em>, where different parts of a\nprogram execute at the same time, are becoming increasingly important as more\ncomputers take advantage of their multiple processors. Historically,\nprogramming in these contexts has been difficult and error prone: Rust hopes to\nchange that.</p>\n<p>Initially, the Rust team thought that ensuring memory safety and preventing\nconcurrency problems were two separate challenges to be solved with different\nmethods. Over time, the team discovered that the ownership and type systems are\na powerful set of tools to help manage memory safety <em>and</em> concurrency\nproblems! By leveraging ownership and type checking, many concurrency errors\nare compile-time errors in Rust rather than runtime errors. Therefore, rather\nthan making you spend lots of time trying to reproduce the exact circumstances\nunder which a runtime concurrency bug occurs, incorrect code will refuse to\ncompile and present an error explaining the problem. As a result, you can fix\nyour code while you‚Äôre working on it rather than potentially after it has been\nshipped to production. We‚Äôve nicknamed this aspect of Rust <em>fearless</em>\n<em>concurrency</em>. Fearless concurrency allows you to write code that is free of\nsubtle bugs and is easy to refactor without introducing new bugs.</p>\n<section class=\"note\" aria-role=\"note\">\n<p>Note: For simplicity‚Äôs sake, we‚Äôll refer to many of the problems as\n<em>concurrent</em> rather than being more precise by saying <em>concurrent and/or\nparallel</em>. If this book were about concurrency and/or parallelism, we‚Äôd be\nmore specific. For this chapter, please mentally substitute <em>concurrent\nand/or parallel</em> whenever we use <em>concurrent</em>.</p>\n</section>\n<p>Many languages are dogmatic about the solutions they offer for handling\nconcurrent problems. For example, Erlang has elegant functionality for\nmessage-passing concurrency but has only obscure ways to share state between\nthreads. Supporting only a subset of possible solutions is a reasonable\nstrategy for higher-level languages, because a higher-level language promises\nbenefits from giving up some control to gain abstractions. However, lower-level\nlanguages are expected to provide the solution with the best performance in any\ngiven situation and have fewer abstractions over the hardware. Therefore, Rust\noffers a variety of tools for modeling problems in whatever way is appropriate\nfor your situation and requirements.</p>\n<p>Here are the topics we‚Äôll cover in this chapter:</p>\n<ul>\n<li>How to create threads to run multiple pieces of code at the same time</li>\n<li><em>Message-passing</em> concurrency, where channels send messages between threads</li>\n<li><em>Shared-state</em> concurrency, where multiple threads have access to some piece\nof data</li>\n<li>The <code class=\"hljs\">Sync</code> and <code class=\"hljs\">Send</code> traits, which extend Rust‚Äôs concurrency guarantees to\nuser-defined types as well as types provided by the standard library</li>\n</ul>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"using-threads-to-run-code-simultaneously\"><a class=\"header\" href=\"#using-threads-to-run-code-simultaneously\">Using Threads to Run Code Simultaneously</a></h2>\n<p>In most current operating systems, an executed program‚Äôs code is run in a\n<em>process</em>, and the operating system will manage multiple processes at once.\nWithin a program, you can also have independent parts that run simultaneously.\nThe features that run these independent parts are called <em>threads</em>. For\nexample, a web server could have multiple threads so that it could respond to\nmore than one request at the same time.</p>\n<p>Splitting the computation in your program into multiple threads to run multiple\ntasks at the same time can improve performance, but it also adds complexity.\nBecause threads can run simultaneously, there‚Äôs no inherent guarantee about the\norder in which parts of your code on different threads will run. This can lead\nto problems, such as:</p>\n<ul>\n<li>Race conditions, where threads are accessing data or resources in an\ninconsistent order</li>\n<li>Deadlocks, where two threads are waiting for each other, preventing both\nthreads from continuing</li>\n<li>Bugs that happen only in certain situations and are hard to reproduce and fix\nreliably</li>\n</ul>\n<p>Rust attempts to mitigate the negative effects of using threads, but\nprogramming in a multithreaded context still takes careful thought and requires\na code structure that is different from that in programs running in a single\nthread.</p>\n<p>Programming languages implement threads in a few different ways, and many\noperating systems provide an API the language can call for creating new\nthreads. The Rust standard library uses a <em>1:1</em> model of thread implementation,\nwhereby a program uses one operating system thread per one language thread.\nThere are crates that implement other models of threading that make different\ntradeoffs to the 1:1 model.</p>\n<h3 id=\"creating-a-new-thread-with-spawn\"><a class=\"header\" href=\"#creating-a-new-thread-with-spawn\">Creating a New Thread with <code>spawn</code></a></h3>\n<p>To create a new thread, we call the <code class=\"hljs\">thread::spawn</code> function and pass it a\nclosure (we talked about closures in Chapter 13) containing the code we want to\nrun in the new thread. The example in Listing 16-1 prints some text from a main\nthread and other text from a new thread:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-keyword\">use</span> std::thread;\n<span class=\"hljs-keyword\">use</span> std::time::Duration;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    thread::spawn(|| {\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>..<span class=\"hljs-number\">10</span> {\n            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"hi number {i} from the spawned thread!\"</span>);\n            thread::sleep(Duration::from_millis(<span class=\"hljs-number\">1</span>));\n        }\n    });\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>..<span class=\"hljs-number\">5</span> {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"hi number {i} from the main thread!\"</span>);\n        thread::sleep(Duration::from_millis(<span class=\"hljs-number\">1</span>));\n    }\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 16-1: Creating a new thread to print one thing\nwhile the main thread prints something else</span></p>\n<p>Note that when the main thread of a Rust program completes, all spawned threads\nare shut down, whether or not they have finished running. The output from this\nprogram might be a little different every time, but it will look similar to the\nfollowing:</p>\n<!-- Not extracting output because changes to this output aren't significant;\nthe changes are likely to be due to the threads running differently rather than\nchanges in the compiler -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">hi number 1 from the main thread!\nhi number 1 from the spawned thread!\nhi number 2 from the main thread!\nhi number 2 from the spawned thread!\nhi number 3 from the main thread!\nhi number 3 from the spawned thread!\nhi number 4 from the main thread!\nhi number 4 from the spawned thread!\nhi number 5 from the spawned thread!\n</code></pre>\n<p>The calls to <code class=\"hljs\">thread::sleep</code> force a thread to stop its execution for a short\nduration, allowing a different thread to run. The threads will probably take\nturns, but that isn‚Äôt guaranteed: it depends on how your operating system\nschedules the threads. In this run, the main thread printed first, even though\nthe print statement from the spawned thread appears first in the code. And even\nthough we told the spawned thread to print until <code class=\"hljs\">i</code> is 9, it only got to 5\nbefore the main thread shut down.</p>\n<p>If you run this code and only see output from the main thread, or don‚Äôt see any\noverlap, try increasing the numbers in the ranges to create more opportunities\nfor the operating system to switch between the threads.</p>\n<h3 id=\"waiting-for-all-threads-to-finish-using-join-handles\"><a class=\"header\" href=\"#waiting-for-all-threads-to-finish-using-join-handles\">Waiting for All Threads to Finish Using <code>join</code> Handles</a></h3>\n<p>The code in Listing 16-1 not only stops the spawned thread prematurely most of\nthe time due to the main thread ending, but because there is no guarantee on\nthe order in which threads run, we also can‚Äôt guarantee that the spawned thread\nwill get to run at all!</p>\n<p>We can fix the problem of the spawned thread not running or ending prematurely\nby saving the return value of <code class=\"hljs\">thread::spawn</code> in a variable. The return type of\n<code class=\"hljs\">thread::spawn</code> is <code class=\"hljs\">JoinHandle</code>. A <code class=\"hljs\">JoinHandle</code> is an owned value that, when we\ncall the <code class=\"hljs\">join</code> method on it, will wait for its thread to finish. Listing 16-2\nshows how to use the <code class=\"hljs\">JoinHandle</code> of the thread we created in Listing 16-1 and\ncall <code class=\"hljs\">join</code> to make sure the spawned thread finishes before <code class=\"hljs\">main</code> exits:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-keyword\">use</span> std::thread;\n<span class=\"hljs-keyword\">use</span> std::time::Duration;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> handle = thread::spawn(|| {\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>..<span class=\"hljs-number\">10</span> {\n            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"hi number {i} from the spawned thread!\"</span>);\n            thread::sleep(Duration::from_millis(<span class=\"hljs-number\">1</span>));\n        }\n    });\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>..<span class=\"hljs-number\">5</span> {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"hi number {i} from the main thread!\"</span>);\n        thread::sleep(Duration::from_millis(<span class=\"hljs-number\">1</span>));\n    }\n\n    handle.join().unwrap();\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 16-2: Saving a <code class=\"hljs\">JoinHandle</code> from <code class=\"hljs\">thread::spawn</code>\nto guarantee the thread is run to completion</span></p>\n<p>Calling <code class=\"hljs\">join</code> on the handle blocks the thread currently running until the\nthread represented by the handle terminates. <em>Blocking</em> a thread means that\nthread is prevented from performing work or exiting. Because we‚Äôve put the call\nto <code class=\"hljs\">join</code> after the main thread‚Äôs <code class=\"hljs\">for</code> loop, running Listing 16-2 should\nproduce output similar to this:</p>\n<!-- Not extracting output because changes to this output aren't significant;\nthe changes are likely to be due to the threads running differently rather than\nchanges in the compiler -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">hi number 1 from the main thread!\nhi number 2 from the main thread!\nhi number 1 from the spawned thread!\nhi number 3 from the main thread!\nhi number 2 from the spawned thread!\nhi number 4 from the main thread!\nhi number 3 from the spawned thread!\nhi number 4 from the spawned thread!\nhi number 5 from the spawned thread!\nhi number 6 from the spawned thread!\nhi number 7 from the spawned thread!\nhi number 8 from the spawned thread!\nhi number 9 from the spawned thread!\n</code></pre>\n<p>The two threads continue alternating, but the main thread waits because of the\ncall to <code class=\"hljs\">handle.join()</code> and does not end until the spawned thread is finished.</p>\n<p>But let‚Äôs see what happens when we instead move <code class=\"hljs\">handle.join()</code> before the\n<code class=\"hljs\">for</code> loop in <code class=\"hljs\">main</code>, like this:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-keyword\">use</span> std::thread;\n<span class=\"hljs-keyword\">use</span> std::time::Duration;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> handle = thread::spawn(|| {\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>..<span class=\"hljs-number\">10</span> {\n            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"hi number {i} from the spawned thread!\"</span>);\n            thread::sleep(Duration::from_millis(<span class=\"hljs-number\">1</span>));\n        }\n    });\n\n    handle.join().unwrap();\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>..<span class=\"hljs-number\">5</span> {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"hi number {i} from the main thread!\"</span>);\n        thread::sleep(Duration::from_millis(<span class=\"hljs-number\">1</span>));\n    }\n}</code></pre></pre>\n<p>The main thread will wait for the spawned thread to finish and then run its\n<code class=\"hljs\">for</code> loop, so the output won‚Äôt be interleaved anymore, as shown here:</p>\n<!-- Not extracting output because changes to this output aren't significant;\nthe changes are likely to be due to the threads running differently rather than\nchanges in the compiler -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">hi number 1 from the spawned thread!\nhi number 2 from the spawned thread!\nhi number 3 from the spawned thread!\nhi number 4 from the spawned thread!\nhi number 5 from the spawned thread!\nhi number 6 from the spawned thread!\nhi number 7 from the spawned thread!\nhi number 8 from the spawned thread!\nhi number 9 from the spawned thread!\nhi number 1 from the main thread!\nhi number 2 from the main thread!\nhi number 3 from the main thread!\nhi number 4 from the main thread!\n</code></pre>\n<p>Small details, such as where <code class=\"hljs\">join</code> is called, can affect whether or not your\nthreads run at the same time.</p>\n<h3 id=\"using-move-closures-with-threads\"><a class=\"header\" href=\"#using-move-closures-with-threads\">Using <code>move</code> Closures with Threads</a></h3>\n<p>We‚Äôll often use the <code class=\"hljs\">move</code> keyword with closures passed to <code class=\"hljs\">thread::spawn</code>\nbecause the closure will then take ownership of the values it uses from the\nenvironment, thus transferring ownership of those values from one thread to\nanother. In the <a href=\"ch13-01-closures.html#capturing-references-or-moving-ownership\">‚ÄúCapturing References or Moving Ownership‚Äù</a><!-- ignore\n--> section of Chapter 13, we discussed <code class=\"hljs\">move</code> in the context of closures. Now,\nwe‚Äôll concentrate more on the interaction between <code class=\"hljs\">move</code> and <code class=\"hljs\">thread::spawn</code>.</p>\n<p>Notice in Listing 16-1 that the closure we pass to <code class=\"hljs\">thread::spawn</code> takes no\narguments: we‚Äôre not using any data from the main thread in the spawned\nthread‚Äôs code. To use data from the main thread in the spawned thread, the\nspawned thread‚Äôs closure must capture the values it needs. Listing 16-3 shows\nan attempt to create a vector in the main thread and use it in the spawned\nthread. However, this won‚Äôt yet work, as you‚Äôll see in a moment.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs\"><span class=\"hljs-keyword\">use</span> std::thread;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> v = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n\n    <span class=\"hljs-keyword\">let</span> handle = thread::spawn(|| {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Here's a vector: {v:?}\"</span>);\n    });\n\n    handle.join().unwrap();\n}</code></pre>\n<p><span class=\"caption\">Listing 16-3: Attempting to use a vector created by the\nmain thread in another thread</span></p>\n<p>The closure uses <code class=\"hljs\">v</code>, so it will capture <code class=\"hljs\">v</code> and make it part of the closure‚Äôs\nenvironment. Because <code class=\"hljs\">thread::spawn</code> runs this closure in a new thread, we\nshould be able to access <code class=\"hljs\">v</code> inside that new thread. But when we compile this\nexample, we get the following error:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling threads v0.1.0 (file:///projects/threads)\nerror[E0373]: closure may outlive the current function, but it borrows `v`, which is owned by the current function\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/main.rs:6:32</span>\n  |\n6 |     let handle = thread::spawn(|| {\n  |                                ^^ may outlive borrowed value `v`\n7 |         println!(\"Here's a vector: {v:?}\");\n  |                                     - `v` is borrowed here\n  |\nnote: function requires argument type to outlive `'static`\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/main.rs:6:18</span>\n  |\n6 |       let handle = thread::spawn(|| {\n  |  __________________^\n7 | |         println!(\"Here's a vector: {v:?}\");\n8 | |     });\n  | |______^\nhelp: to force the closure to take ownership of `v` (and any other referenced variables), use the `move` keyword\n  |\n6 |     let handle = thread::spawn(move || {\n  |                                ++++\n\nFor more information about this error, try `rustc --explain E0373`.\nerror: could not compile `threads` (bin \"threads\") due to 1 previous error\n</code></pre>\n<p>Rust <em>infers</em> how to capture <code class=\"hljs\">v</code>, and because <code class=\"hljs\">println!</code> only needs a reference\nto <code class=\"hljs\">v</code>, the closure tries to borrow <code class=\"hljs\">v</code>. However, there‚Äôs a problem: Rust can‚Äôt\ntell how long the spawned thread will run, so it doesn‚Äôt know if the reference\nto <code class=\"hljs\">v</code> will always be valid.</p>\n<p>Listing 16-4 provides a scenario that‚Äôs more likely to have a reference to <code class=\"hljs\">v</code>\nthat won‚Äôt be valid:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs\"><span class=\"hljs-keyword\">use</span> std::thread;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> v = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n\n    <span class=\"hljs-keyword\">let</span> handle = thread::spawn(|| {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Here's a vector: {v:?}\"</span>);\n    });\n\n    <span class=\"hljs-built_in\">drop</span>(v); <span class=\"hljs-comment\">// oh no!</span>\n\n    handle.join().unwrap();\n}</code></pre>\n<p><span class=\"caption\">Listing 16-4: A thread with a closure that attempts to\ncapture a reference to <code class=\"hljs\">v</code> from a main thread that drops <code class=\"hljs\">v</code></span></p>\n<p>If Rust allowed us to run this code, there‚Äôs a possibility the spawned thread\nwould be immediately put in the background without running at all. The spawned\nthread has a reference to <code class=\"hljs\">v</code> inside, but the main thread immediately drops\n<code class=\"hljs\">v</code>, using the <code class=\"hljs\">drop</code> function we discussed in Chapter 15. Then, when the\nspawned thread starts to execute, <code class=\"hljs\">v</code> is no longer valid, so a reference to it\nis also invalid. Oh no!</p>\n<p>To fix the compiler error in Listing 16-3, we can use the error message‚Äôs\nadvice:</p>\n<!-- manual-regeneration\nafter automatic regeneration, look at listings/ch16-fearless-concurrency/listing-16-03/output.txt and copy the relevant part\n-->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">help: to force the closure to take ownership of `v` (and any other referenced variables), use the `move` keyword\n  |\n6 |     let handle = thread::spawn(move || {\n  |                                ++++\n</code></pre>\n<p>By adding the <code class=\"hljs\">move</code> keyword before the closure, we force the closure to take\nownership of the values it‚Äôs using rather than allowing Rust to infer that it\nshould borrow the values. The modification to Listing 16-3 shown in Listing\n16-5 will compile and run as we intend:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-keyword\">use</span> std::thread;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> v = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n\n    <span class=\"hljs-keyword\">let</span> handle = thread::spawn(<span class=\"hljs-keyword\">move</span> || {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Here's a vector: {v:?}\"</span>);\n    });\n\n    handle.join().unwrap();\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 16-5: Using the <code class=\"hljs\">move</code> keyword to force a closure\nto take ownership of the values it uses</span></p>\n<p>We might be tempted to try the same thing to fix the code in Listing 16-4 where\nthe main thread called <code class=\"hljs\">drop</code> by using a <code class=\"hljs\">move</code> closure. However, this fix will\nnot work because what Listing 16-4 is trying to do is disallowed for a\ndifferent reason. If we added <code class=\"hljs\">move</code> to the closure, we would move <code class=\"hljs\">v</code> into the\nclosure‚Äôs environment, and we could no longer call <code class=\"hljs\">drop</code> on it in the main\nthread. We would get this compiler error instead:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling threads v0.1.0 (file:///projects/threads)\nerror[E0382]: use of moved value: `v`\n<span class=\"hljs-meta\">  --&gt;</span><span class=\"bash\"> src/main.rs:10:10</span>\n   |\n4  |     let v = vec![1, 2, 3];\n   |         - move occurs because `v` has type `Vec&lt;i32&gt;`, which does not implement the `Copy` trait\n5  |\n6  |     let handle = thread::spawn(move || {\n   |                                ------- value moved into closure here\n7  |         println!(\"Here's a vector: {v:?}\");\n   |                                     - variable moved due to use in closure\n...\n10 |     drop(v); // oh no!\n   |          ^ value used here after move\n\nFor more information about this error, try `rustc --explain E0382`.\nerror: could not compile `threads` (bin \"threads\") due to 1 previous error\n</code></pre>\n<p>Rust‚Äôs ownership rules have saved us again! We got an error from the code in\nListing 16-3 because Rust was being conservative and only borrowing <code class=\"hljs\">v</code> for the\nthread, which meant the main thread could theoretically invalidate the spawned\nthread‚Äôs reference. By telling Rust to move ownership of <code class=\"hljs\">v</code> to the spawned\nthread, we‚Äôre guaranteeing Rust that the main thread won‚Äôt use <code class=\"hljs\">v</code> anymore. If\nwe change Listing 16-4 in the same way, we‚Äôre then violating the ownership\nrules when we try to use <code class=\"hljs\">v</code> in the main thread. The <code class=\"hljs\">move</code> keyword overrides\nRust‚Äôs conservative default of borrowing; it doesn‚Äôt let us violate the\nownership rules.</p>\n<p>With a basic understanding of threads and the thread API, let‚Äôs look at what we\ncan <em>do</em> with threads.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"using-message-passing-to-transfer-data-between-threads\"><a class=\"header\" href=\"#using-message-passing-to-transfer-data-between-threads\">Using Message Passing to Transfer Data Between Threads</a></h2>\n<p>One increasingly popular approach to ensuring safe concurrency is <em>message\npassing</em>, where threads or actors communicate by sending each other messages\ncontaining data. Here‚Äôs the idea in a slogan from <a href=\"https://golang.org/doc/effective_go.html#concurrency\">the Go language\ndocumentation</a>:\n‚ÄúDo not communicate by sharing memory; instead, share memory by communicating.‚Äù</p>\n<p>To accomplish message-sending concurrency, Rust‚Äôs standard library provides an\nimplementation of <em>channels</em>. A channel is a general programming concept by\nwhich data is sent from one thread to another.</p>\n<p>You can imagine a channel in programming as being like a directional channel of\nwater, such as a stream or a river. If you put something like a rubber duck\ninto a river, it will travel downstream to the end of the waterway.</p>\n<p>A channel has two halves: a transmitter and a receiver. The transmitter half is\nthe upstream location where you put rubber ducks into the river, and the\nreceiver half is where the rubber duck ends up downstream. One part of your\ncode calls methods on the transmitter with the data you want to send, and\nanother part checks the receiving end for arriving messages. A channel is said\nto be <em>closed</em> if either the transmitter or receiver half is dropped.</p>\n<p>Here, we‚Äôll work up to a program that has one thread to generate values and\nsend them down a channel, and another thread that will receive the values and\nprint them out. We‚Äôll be sending simple values between threads using a channel\nto illustrate the feature. Once you‚Äôre familiar with the technique, you could\nuse channels for any threads that need to communicate between each other, such\nas a chat system or a system where many threads perform parts of a calculation\nand send the parts to one thread that aggregates the results.</p>\n<p>First, in Listing 16-6, we‚Äôll create a channel but not do anything with it.\nNote that this won‚Äôt compile yet because Rust can‚Äôt tell what type of values we\nwant to send over the channel.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs\"><span class=\"hljs-keyword\">use</span> std::sync::mpsc;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> (tx, rx) = mpsc::channel();\n}</code></pre>\n<p><span class=\"caption\">Listing 16-6: Creating a channel and assigning the two\nhalves to <code class=\"hljs\">tx</code> and <code class=\"hljs\">rx</code></span></p>\n<p>We create a new channel using the <code class=\"hljs\">mpsc::channel</code> function; <code class=\"hljs\">mpsc</code> stands for\n<em>multiple producer, single consumer</em>. In short, the way Rust‚Äôs standard library\nimplements channels means a channel can have multiple <em>sending</em> ends that\nproduce values but only one <em>receiving</em> end that consumes those values. Imagine\nmultiple streams flowing together into one big river: everything sent down any\nof the streams will end up in one river at the end. We‚Äôll start with a single\nproducer for now, but we‚Äôll add multiple producers when we get this example\nworking.</p>\n<p>The <code class=\"hljs\">mpsc::channel</code> function returns a tuple, the first element of which is the\nsending end‚Äîthe transmitter‚Äîand the second element is the receiving end‚Äîthe\nreceiver. The abbreviations <code class=\"hljs\">tx</code> and <code class=\"hljs\">rx</code> are traditionally used in many fields\nfor <em>transmitter</em> and <em>receiver</em> respectively, so we name our variables as such\nto indicate each end. We‚Äôre using a <code class=\"hljs\">let</code> statement with a pattern that\ndestructures the tuples; we‚Äôll discuss the use of patterns in <code class=\"hljs\">let</code> statements\nand destructuring in Chapter 18. For now, know that using a <code class=\"hljs\">let</code> statement\nthis way is a convenient approach to extract the pieces of the tuple returned\nby <code class=\"hljs\">mpsc::channel</code>.</p>\n<p>Let‚Äôs move the transmitting end into a spawned thread and have it send one\nstring so the spawned thread is communicating with the main thread, as shown in\nListing 16-7. This is like putting a rubber duck in the river upstream or\nsending a chat message from one thread to another.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-keyword\">use</span> std::sync::mpsc;\n<span class=\"hljs-keyword\">use</span> std::thread;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> (tx, rx) = mpsc::channel();\n\n    thread::spawn(<span class=\"hljs-keyword\">move</span> || {\n        <span class=\"hljs-keyword\">let</span> val = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"hi\"</span>);\n        tx.send(val).unwrap();\n    });\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 16-7: Moving <code class=\"hljs\">tx</code> to a spawned thread and sending\n‚Äúhi‚Äù</span></p>\n<p>Again, we‚Äôre using <code class=\"hljs\">thread::spawn</code> to create a new thread and then using <code class=\"hljs\">move</code>\nto move <code class=\"hljs\">tx</code> into the closure so the spawned thread owns <code class=\"hljs\">tx</code>. The spawned\nthread needs to own the transmitter to be able to send messages through the\nchannel. The transmitter has a <code class=\"hljs\">send</code> method that takes the value we want to\nsend. The <code class=\"hljs\">send</code> method returns a <code class=\"hljs\">Result&lt;T, E&gt;</code> type, so if the receiver has\nalready been dropped and there‚Äôs nowhere to send a value, the send operation\nwill return an error. In this example, we‚Äôre calling <code class=\"hljs\">unwrap</code> to panic in case\nof an error. But in a real application, we would handle it properly: return to\nChapter 9 to review strategies for proper error handling.</p>\n<p>In Listing 16-8, we‚Äôll get the value from the receiver in the main thread. This\nis like retrieving the rubber duck from the water at the end of the river or\nreceiving a chat message.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-keyword\">use</span> std::sync::mpsc;\n<span class=\"hljs-keyword\">use</span> std::thread;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> (tx, rx) = mpsc::channel();\n\n    thread::spawn(<span class=\"hljs-keyword\">move</span> || {\n        <span class=\"hljs-keyword\">let</span> val = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"hi\"</span>);\n        tx.send(val).unwrap();\n    });\n\n    <span class=\"hljs-keyword\">let</span> received = rx.recv().unwrap();\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Got: {received}\"</span>);\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 16-8: Receiving the value ‚Äúhi‚Äù in the main thread\nand printing it</span></p>\n<p>The receiver has two useful methods: <code class=\"hljs\">recv</code> and <code class=\"hljs\">try_recv</code>. We‚Äôre using <code class=\"hljs\">recv</code>,\nshort for <em>receive</em>, which will block the main thread‚Äôs execution and wait\nuntil a value is sent down the channel. Once a value is sent, <code class=\"hljs\">recv</code> will\nreturn it in a <code class=\"hljs\">Result&lt;T, E&gt;</code>. When the transmitter closes, <code class=\"hljs\">recv</code> will return\nan error to signal that no more values will be coming.</p>\n<p>The <code class=\"hljs\">try_recv</code> method doesn‚Äôt block, but will instead return a <code class=\"hljs\">Result&lt;T, E&gt;</code>\nimmediately: an <code class=\"hljs\">Ok</code> value holding a message if one is available and an <code class=\"hljs\">Err</code>\nvalue if there aren‚Äôt any messages this time. Using <code class=\"hljs\">try_recv</code> is useful if\nthis thread has other work to do while waiting for messages: we could write a\nloop that calls <code class=\"hljs\">try_recv</code> every so often, handles a message if one is\navailable, and otherwise does other work for a little while until checking\nagain.</p>\n<p>We‚Äôve used <code class=\"hljs\">recv</code> in this example for simplicity; we don‚Äôt have any other work\nfor the main thread to do other than wait for messages, so blocking the main\nthread is appropriate.</p>\n<p>When we run the code in Listing 16-8, we‚Äôll see the value printed from the main\nthread:</p>\n<!-- Not extracting output because changes to this output aren't significant;\nthe changes are likely to be due to the threads running differently rather than\nchanges in the compiler -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">Got: hi\n</code></pre>\n<p>Perfect!</p>\n<h3 id=\"channels-and-ownership-transference\"><a class=\"header\" href=\"#channels-and-ownership-transference\">Channels and Ownership Transference</a></h3>\n<p>The ownership rules play a vital role in message sending because they help you\nwrite safe, concurrent code. Preventing errors in concurrent programming is the\nadvantage of thinking about ownership throughout your Rust programs. Let‚Äôs do\nan experiment to show how channels and ownership work together to prevent\nproblems: we‚Äôll try to use a <code class=\"hljs\">val</code> value in the spawned thread <em>after</em> we‚Äôve\nsent it down the channel. Try compiling the code in Listing 16-9 to see why\nthis code isn‚Äôt allowed:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs\"><span class=\"hljs-keyword\">use</span> std::sync::mpsc;\n<span class=\"hljs-keyword\">use</span> std::thread;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> (tx, rx) = mpsc::channel();\n\n    thread::spawn(<span class=\"hljs-keyword\">move</span> || {\n        <span class=\"hljs-keyword\">let</span> val = <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"hi\"</span>);\n        tx.send(val).unwrap();\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"val is {val}\"</span>);\n    });\n\n    <span class=\"hljs-keyword\">let</span> received = rx.recv().unwrap();\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Got: {received}\"</span>);\n}</code></pre>\n<p><span class=\"caption\">Listing 16-9: Attempting to use <code class=\"hljs\">val</code> after we‚Äôve sent it\ndown the channel</span></p>\n<p>Here, we try to print <code class=\"hljs\">val</code> after we‚Äôve sent it down the channel via <code class=\"hljs\">tx.send</code>.\nAllowing this would be a bad idea: once the value has been sent to another\nthread, that thread could modify or drop it before we try to use the value\nagain. Potentially, the other thread‚Äôs modifications could cause errors or\nunexpected results due to inconsistent or nonexistent data. However, Rust gives\nus an error if we try to compile the code in Listing 16-9:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling message-passing v0.1.0 (file:///projects/message-passing)\nerror[E0382]: borrow of moved value: `val`\n<span class=\"hljs-meta\">  --&gt;</span><span class=\"bash\"> src/main.rs:10:26</span>\n   |\n8  |         let val = String::from(\"hi\");\n   |             --- move occurs because `val` has type `String`, which does not implement the `Copy` trait\n9  |         tx.send(val).unwrap();\n   |                 --- value moved here\n10 |         println!(\"val is {val}\");\n   |                          ^^^^^ value borrowed here after move\n   |\n   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider cloning the value if the performance cost is acceptable\n   |\n9  |         tx.send(val.clone()).unwrap();\n   |                    ++++++++\n\nFor more information about this error, try `rustc --explain E0382`.\nerror: could not compile `message-passing` (bin \"message-passing\") due to 1 previous error\n</code></pre>\n<p>Our concurrency mistake has caused a compile time error. The <code class=\"hljs\">send</code> function\ntakes ownership of its parameter, and when the value is moved, the receiver\ntakes ownership of it. This stops us from accidentally using the value again\nafter sending it; the ownership system checks that everything is okay.</p>\n<h3 id=\"sending-multiple-values-and-seeing-the-receiver-waiting\"><a class=\"header\" href=\"#sending-multiple-values-and-seeing-the-receiver-waiting\">Sending Multiple Values and Seeing the Receiver Waiting</a></h3>\n<p>The code in Listing 16-8 compiled and ran, but it didn‚Äôt clearly show us that\ntwo separate threads were talking to each other over the channel. In Listing\n16-10 we‚Äôve made some modifications that will prove the code in Listing 16-8 is\nrunning concurrently: the spawned thread will now send multiple messages and\npause for a second between each message.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust noplayground hljs\"><span class=\"hljs-keyword\">use</span> std::sync::mpsc;\n<span class=\"hljs-keyword\">use</span> std::thread;\n<span class=\"hljs-keyword\">use</span> std::time::Duration;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> (tx, rx) = mpsc::channel();\n\n    thread::spawn(<span class=\"hljs-keyword\">move</span> || {\n        <span class=\"hljs-keyword\">let</span> vals = <span class=\"hljs-built_in\">vec!</span>[\n            <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"hi\"</span>),\n            <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"from\"</span>),\n            <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"the\"</span>),\n            <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"thread\"</span>),\n        ];\n\n        <span class=\"hljs-keyword\">for</span> val <span class=\"hljs-keyword\">in</span> vals {\n            tx.send(val).unwrap();\n            thread::sleep(Duration::from_secs(<span class=\"hljs-number\">1</span>));\n        }\n    });\n\n    <span class=\"hljs-keyword\">for</span> received <span class=\"hljs-keyword\">in</span> rx {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Got: {received}\"</span>);\n    }\n}</code></pre>\n<p><span class=\"caption\">Listing 16-10: Sending multiple messages and pausing\nbetween each</span></p>\n<p>This time, the spawned thread has a vector of strings that we want to send to\nthe main thread. We iterate over them, sending each individually, and pause\nbetween each by calling the <code class=\"hljs\">thread::sleep</code> function with a <code class=\"hljs\">Duration</code> value of\n1 second.</p>\n<p>In the main thread, we‚Äôre not calling the <code class=\"hljs\">recv</code> function explicitly anymore:\ninstead, we‚Äôre treating <code class=\"hljs\">rx</code> as an iterator. For each value received, we‚Äôre\nprinting it. When the channel is closed, iteration will end.</p>\n<p>When running the code in Listing 16-10, you should see the following output\nwith a 1-second pause in between each line:</p>\n<!-- Not extracting output because changes to this output aren't significant;\nthe changes are likely to be due to the threads running differently rather than\nchanges in the compiler -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">Got: hi\nGot: from\nGot: the\nGot: thread\n</code></pre>\n<p>Because we don‚Äôt have any code that pauses or delays in the <code class=\"hljs\">for</code> loop in the\nmain thread, we can tell that the main thread is waiting to receive values from\nthe spawned thread.</p>\n<h3 id=\"creating-multiple-producers-by-cloning-the-transmitter\"><a class=\"header\" href=\"#creating-multiple-producers-by-cloning-the-transmitter\">Creating Multiple Producers by Cloning the Transmitter</a></h3>\n<p>Earlier we mentioned that <code class=\"hljs\">mpsc</code> was an acronym for <em>multiple producer,\nsingle consumer</em>. Let‚Äôs put <code class=\"hljs\">mpsc</code> to use and expand the code in Listing 16-10\nto create multiple threads that all send values to the same receiver. We can do\nso by cloning the transmitter, as shown in Listing 16-11:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::sync::mpsc;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::thread;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::time::Duration;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-comment\">// --snip--</span>\n\n    <span class=\"hljs-keyword\">let</span> (tx, rx) = mpsc::channel();\n\n    <span class=\"hljs-keyword\">let</span> tx1 = tx.clone();\n    thread::spawn(<span class=\"hljs-keyword\">move</span> || {\n        <span class=\"hljs-keyword\">let</span> vals = <span class=\"hljs-built_in\">vec!</span>[\n            <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"hi\"</span>),\n            <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"from\"</span>),\n            <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"the\"</span>),\n            <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"thread\"</span>),\n        ];\n\n        <span class=\"hljs-keyword\">for</span> val <span class=\"hljs-keyword\">in</span> vals {\n            tx1.send(val).unwrap();\n            thread::sleep(Duration::from_secs(<span class=\"hljs-number\">1</span>));\n        }\n    });\n\n    thread::spawn(<span class=\"hljs-keyword\">move</span> || {\n        <span class=\"hljs-keyword\">let</span> vals = <span class=\"hljs-built_in\">vec!</span>[\n            <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"more\"</span>),\n            <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"messages\"</span>),\n            <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"for\"</span>),\n            <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"you\"</span>),\n        ];\n\n        <span class=\"hljs-keyword\">for</span> val <span class=\"hljs-keyword\">in</span> vals {\n            tx.send(val).unwrap();\n            thread::sleep(Duration::from_secs(<span class=\"hljs-number\">1</span>));\n        }\n    });\n\n    <span class=\"hljs-keyword\">for</span> received <span class=\"hljs-keyword\">in</span> rx {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Got: {received}\"</span>);\n    }\n\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">}</span></code></pre>\n<p><span class=\"caption\">Listing 16-11: Sending multiple messages from multiple\nproducers</span></p>\n<p>This time, before we create the first spawned thread, we call <code class=\"hljs\">clone</code> on the\ntransmitter. This will give us a new transmitter we can pass to the first\nspawned thread. We pass the original transmitter to a second spawned thread.\nThis gives us two threads, each sending different messages to the one receiver.</p>\n<p>When you run the code, your output should look something like this:</p>\n<!-- Not extracting output because changes to this output aren't significant;\nthe changes are likely to be due to the threads running differently rather than\nchanges in the compiler -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">Got: hi\nGot: more\nGot: from\nGot: messages\nGot: for\nGot: the\nGot: thread\nGot: you\n</code></pre>\n<p>You might see the values in another order, depending on your system. This is\nwhat makes concurrency interesting as well as difficult. If you experiment with\n<code class=\"hljs\">thread::sleep</code>, giving it various values in the different threads, each run\nwill be more nondeterministic and create different output each time.</p>\n<p>Now that we‚Äôve looked at how channels work, let‚Äôs look at a different method of\nconcurrency.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"shared-state-concurrency\"><a class=\"header\" href=\"#shared-state-concurrency\">Shared-State Concurrency</a></h2>\n<p>Message passing is a fine way of handling concurrency, but it‚Äôs not the only\none. Another method would be for multiple threads to access the same shared\ndata. Consider this part of the slogan from the Go language documentation\nagain: ‚Äúdo not communicate by sharing memory.‚Äù</p>\n<p>What would communicating by sharing memory look like? In addition, why would\nmessage-passing enthusiasts caution not to use memory sharing?</p>\n<p>In a way, channels in any programming language are similar to single ownership,\nbecause once you transfer a value down a channel, you should no longer use that\nvalue. Shared memory concurrency is like multiple ownership: multiple threads\ncan access the same memory location at the same time. As you saw in Chapter 15,\nwhere smart pointers made multiple ownership possible, multiple ownership can\nadd complexity because these different owners need managing. Rust‚Äôs type system\nand ownership rules greatly assist in getting this management correct. For an\nexample, let‚Äôs look at mutexes, one of the more common concurrency primitives\nfor shared memory.</p>\n<h3 id=\"using-mutexes-to-allow-access-to-data-from-one-thread-at-a-time\"><a class=\"header\" href=\"#using-mutexes-to-allow-access-to-data-from-one-thread-at-a-time\">Using Mutexes to Allow Access to Data from One Thread at a Time</a></h3>\n<p><em>Mutex</em> is an abbreviation for <em>mutual exclusion</em>, as in, a mutex allows only\none thread to access some data at any given time. To access the data in a\nmutex, a thread must first signal that it wants access by asking to acquire the\nmutex‚Äôs <em>lock</em>. The lock is a data structure that is part of the mutex that\nkeeps track of who currently has exclusive access to the data. Therefore, the\nmutex is described as <em>guarding</em> the data it holds via the locking system.</p>\n<p>Mutexes have a reputation for being difficult to use because you have to\nremember two rules:</p>\n<ul>\n<li>You must attempt to acquire the lock before using the data.</li>\n<li>When you‚Äôre done with the data that the mutex guards, you must unlock the\ndata so other threads can acquire the lock.</li>\n</ul>\n<p>For a real-world metaphor for a mutex, imagine a panel discussion at a\nconference with only one microphone. Before a panelist can speak, they have to\nask or signal that they want to use the microphone. When they get the\nmicrophone, they can talk for as long as they want to and then hand the\nmicrophone to the next panelist who requests to speak. If a panelist forgets to\nhand the microphone off when they‚Äôre finished with it, no one else is able to\nspeak. If management of the shared microphone goes wrong, the panel won‚Äôt work\nas planned!</p>\n<p>Management of mutexes can be incredibly tricky to get right, which is why so\nmany people are enthusiastic about channels. However, thanks to Rust‚Äôs type\nsystem and ownership rules, you can‚Äôt get locking and unlocking wrong.</p>\n<h4 id=\"the-api-of-mutext\"><a class=\"header\" href=\"#the-api-of-mutext\">The API of <code>Mutex&lt;T&gt;</code></a></h4>\n<p>As an example of how to use a mutex, let‚Äôs start by using a mutex in a\nsingle-threaded context, as shown in Listing 16-12:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-keyword\">use</span> std::sync::Mutex;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> m = Mutex::new(<span class=\"hljs-number\">5</span>);\n\n    {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> num = m.lock().unwrap();\n        *num = <span class=\"hljs-number\">6</span>;\n    }\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"m = {m:?}\"</span>);\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 16-12: Exploring the API of <code class=\"hljs\">Mutex&lt;T&gt;</code> in a\nsingle-threaded context for simplicity</span></p>\n<p>As with many types, we create a <code class=\"hljs\">Mutex&lt;T&gt;</code> using the associated function <code class=\"hljs\">new</code>.\nTo access the data inside the mutex, we use the <code class=\"hljs\">lock</code> method to acquire the\nlock. This call will block the current thread so it can‚Äôt do any work until\nit‚Äôs our turn to have the lock.</p>\n<p>The call to <code class=\"hljs\">lock</code> would fail if another thread holding the lock panicked. In\nthat case, no one would ever be able to get the lock, so we‚Äôve chosen to\n<code class=\"hljs\">unwrap</code> and have this thread panic if we‚Äôre in that situation.</p>\n<p>After we‚Äôve acquired the lock, we can treat the return value, named <code class=\"hljs\">num</code> in\nthis case, as a mutable reference to the data inside. The type system ensures\nthat we acquire a lock before using the value in <code class=\"hljs\">m</code>. The type of <code class=\"hljs\">m</code> is\n<code class=\"hljs\">Mutex&lt;i32&gt;</code>, not <code class=\"hljs\">i32</code>, so we <em>must</em> call <code class=\"hljs\">lock</code> to be able to use the <code class=\"hljs\">i32</code>\nvalue. We can‚Äôt forget; the type system won‚Äôt let us access the inner <code class=\"hljs\">i32</code>\notherwise.</p>\n<p>As you might suspect, <code class=\"hljs\">Mutex&lt;T&gt;</code> is a smart pointer. More accurately, the call\nto <code class=\"hljs\">lock</code> <em>returns</em> a smart pointer called <code class=\"hljs\">MutexGuard</code>, wrapped in a\n<code class=\"hljs\">LockResult</code> that we handled with the call to <code class=\"hljs\">unwrap</code>. The <code class=\"hljs\">MutexGuard</code> smart\npointer implements <code class=\"hljs\">Deref</code> to point at our inner data; the smart pointer also\nhas a <code class=\"hljs\">Drop</code> implementation that releases the lock automatically when a\n<code class=\"hljs\">MutexGuard</code> goes out of scope, which happens at the end of the inner scope. As\na result, we don‚Äôt risk forgetting to release the lock and blocking the mutex\nfrom being used by other threads, because the lock release happens\nautomatically.</p>\n<p>After dropping the lock, we can print the mutex value and see that we were able\nto change the inner <code class=\"hljs\">i32</code> to 6.</p>\n<h4 id=\"sharing-a-mutext-between-multiple-threads\"><a class=\"header\" href=\"#sharing-a-mutext-between-multiple-threads\">Sharing a <code>Mutex&lt;T&gt;</code> Between Multiple Threads</a></h4>\n<p>Now, let‚Äôs try to share a value between multiple threads using <code class=\"hljs\">Mutex&lt;T&gt;</code>.\nWe‚Äôll spin up 10 threads and have them each increment a counter value by 1, so\nthe counter goes from 0 to 10. The next example in Listing 16-13 will have\na compiler error, and we‚Äôll use that error to learn more about using\n<code class=\"hljs\">Mutex&lt;T&gt;</code> and how Rust helps us use it correctly.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs\"><span class=\"hljs-keyword\">use</span> std::sync::Mutex;\n<span class=\"hljs-keyword\">use</span> std::thread;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> counter = Mutex::new(<span class=\"hljs-number\">0</span>);\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> handles = <span class=\"hljs-built_in\">vec!</span>[];\n\n    <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..<span class=\"hljs-number\">10</span> {\n        <span class=\"hljs-keyword\">let</span> handle = thread::spawn(<span class=\"hljs-keyword\">move</span> || {\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> num = counter.lock().unwrap();\n\n            *num += <span class=\"hljs-number\">1</span>;\n        });\n        handles.push(handle);\n    }\n\n    <span class=\"hljs-keyword\">for</span> handle <span class=\"hljs-keyword\">in</span> handles {\n        handle.join().unwrap();\n    }\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Result: {}\"</span>, *counter.lock().unwrap());\n}</code></pre>\n<p><span class=\"caption\">Listing 16-13: Ten threads each increment a counter\nguarded by a <code class=\"hljs\">Mutex&lt;T&gt;</code></span></p>\n<p>We create a <code class=\"hljs\">counter</code> variable to hold an <code class=\"hljs\">i32</code> inside a <code class=\"hljs\">Mutex&lt;T&gt;</code>, as we did\nin Listing 16-12. Next, we create 10 threads by iterating over a range of\nnumbers. We use <code class=\"hljs\">thread::spawn</code> and give all the threads the same closure: one\nthat moves the counter into the thread, acquires a lock on the <code class=\"hljs\">Mutex&lt;T&gt;</code> by\ncalling the <code class=\"hljs\">lock</code> method, and then adds 1 to the value in the mutex. When a\nthread finishes running its closure, <code class=\"hljs\">num</code> will go out of scope and release the\nlock so another thread can acquire it.</p>\n<p>In the main thread, we collect all the join handles. Then, as we did in Listing\n16-2, we call <code class=\"hljs\">join</code> on each handle to make sure all the threads finish. At\nthat point, the main thread will acquire the lock and print the result of this\nprogram.</p>\n<p>We hinted that this example wouldn‚Äôt compile. Now let‚Äôs find out why!</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling shared-state v0.1.0 (file:///projects/shared-state)\nerror[E0382]: borrow of moved value: `counter`\n<span class=\"hljs-meta\">  --&gt;</span><span class=\"bash\"> src/main.rs:21:29</span>\n   |\n5  |     let counter = Mutex::new(0);\n   |         ------- move occurs because `counter` has type `Mutex&lt;i32&gt;`, which does not implement the `Copy` trait\n...\n9  |         let handle = thread::spawn(move || {\n   |                                    ------- value moved into closure here, in previous iteration of loop\n...\n21 |     println!(\"Result: {}\", *counter.lock().unwrap());\n   |                             ^^^^^^^ value borrowed here after move\n\nFor more information about this error, try `rustc --explain E0382`.\nerror: could not compile `shared-state` (bin \"shared-state\") due to 1 previous error\n</code></pre>\n<p>The error message states that the <code class=\"hljs\">counter</code> value was moved in the previous\niteration of the loop. Rust is telling us that we can‚Äôt move the ownership\nof <code class=\"hljs\">counter</code> into multiple threads. Let‚Äôs fix the compiler error with a\nmultiple-ownership method we discussed in Chapter 15.</p>\n<h4 id=\"multiple-ownership-with-multiple-threads\"><a class=\"header\" href=\"#multiple-ownership-with-multiple-threads\">Multiple Ownership with Multiple Threads</a></h4>\n<p>In Chapter 15, we gave a value multiple owners by using the smart pointer\n<code class=\"hljs\">Rc&lt;T&gt;</code> to create a reference counted value. Let‚Äôs do the same here and see\nwhat happens. We‚Äôll wrap the <code class=\"hljs\">Mutex&lt;T&gt;</code> in <code class=\"hljs\">Rc&lt;T&gt;</code> in Listing 16-14 and clone\nthe <code class=\"hljs\">Rc&lt;T&gt;</code> before moving ownership to the thread.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs\"><span class=\"hljs-keyword\">use</span> std::rc::Rc;\n<span class=\"hljs-keyword\">use</span> std::sync::Mutex;\n<span class=\"hljs-keyword\">use</span> std::thread;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> counter = Rc::new(Mutex::new(<span class=\"hljs-number\">0</span>));\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> handles = <span class=\"hljs-built_in\">vec!</span>[];\n\n    <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..<span class=\"hljs-number\">10</span> {\n        <span class=\"hljs-keyword\">let</span> counter = Rc::clone(&amp;counter);\n        <span class=\"hljs-keyword\">let</span> handle = thread::spawn(<span class=\"hljs-keyword\">move</span> || {\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> num = counter.lock().unwrap();\n\n            *num += <span class=\"hljs-number\">1</span>;\n        });\n        handles.push(handle);\n    }\n\n    <span class=\"hljs-keyword\">for</span> handle <span class=\"hljs-keyword\">in</span> handles {\n        handle.join().unwrap();\n    }\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Result: {}\"</span>, *counter.lock().unwrap());\n}</code></pre>\n<p><span class=\"caption\">Listing 16-14: Attempting to use <code class=\"hljs\">Rc&lt;T&gt;</code> to allow\nmultiple threads to own the <code class=\"hljs\">Mutex&lt;T&gt;</code></span></p>\n<p>Once again, we compile and get‚Ä¶ different errors! The compiler is teaching us\na lot.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling shared-state v0.1.0 (file:///projects/shared-state)\nerror[E0277]: `Rc&lt;Mutex&lt;i32&gt;&gt;` cannot be sent between threads safely\n<span class=\"hljs-meta\">  --&gt;</span><span class=\"bash\"> src/main.rs:11:36</span>\n   |\n11 |           let handle = thread::spawn(move || {\n   |                        ------------- ^------\n   |                        |             |\n   |  ______________________|_____________within this `{closure@src/main.rs:11:36: 11:43}`\n   | |                      |\n   | |                      required by a bound introduced by this call\n12 | |             let mut num = counter.lock().unwrap();\n13 | |\n14 | |             *num += 1;\n15 | |         });\n   | |_________^ `Rc&lt;Mutex&lt;i32&gt;&gt;` cannot be sent between threads safely\n   |\n   = help: within `{closure@src/main.rs:11:36: 11:43}`, the trait `Send` is not implemented for `Rc&lt;Mutex&lt;i32&gt;&gt;`, which is required by `{closure@src/main.rs:11:36: 11:43}: Send`\nnote: required because it's used within this closure\n<span class=\"hljs-meta\">  --&gt;</span><span class=\"bash\"> src/main.rs:11:36</span>\n   |\n11 |         let handle = thread::spawn(move || {\n   |                                    ^^^^^^^\nnote: required by a bound in `spawn`\n<span class=\"hljs-meta\">  --&gt;</span><span class=\"bash\"> /rustc/9b00956e56009bab2aa15d7bff10916599e3d6d6/library/std/src/thread/mod.rs:677:1</span>\n\nFor more information about this error, try `rustc --explain E0277`.\nerror: could not compile `shared-state` (bin \"shared-state\") due to 1 previous error\n</code></pre>\n<p>Wow, that error message is very wordy! Here‚Äôs the important part to focus on:\n<code class=\"hljs\">`Rc&lt;Mutex&lt;i32&gt;&gt;` cannot be sent between threads safely</code>. The compiler is\nalso telling us the reason why: <code class=\"hljs\">the trait `Send` is not implemented for `Rc&lt;Mutex&lt;i32&gt;&gt;` </code>. We‚Äôll talk about <code class=\"hljs\">Send</code> in the next section: it‚Äôs one of\nthe traits that ensures the types we use with threads are meant for use in\nconcurrent situations.</p>\n<p>Unfortunately, <code class=\"hljs\">Rc&lt;T&gt;</code> is not safe to share across threads. When <code class=\"hljs\">Rc&lt;T&gt;</code>\nmanages the reference count, it adds to the count for each call to <code class=\"hljs\">clone</code> and\nsubtracts from the count when each clone is dropped. But it doesn‚Äôt use any\nconcurrency primitives to make sure that changes to the count can‚Äôt be\ninterrupted by another thread. This could lead to wrong counts‚Äîsubtle bugs that\ncould in turn lead to memory leaks or a value being dropped before we‚Äôre done\nwith it. What we need is a type exactly like <code class=\"hljs\">Rc&lt;T&gt;</code> but one that makes changes\nto the reference count in a thread-safe way.</p>\n<h4 id=\"atomic-reference-counting-with-arct\"><a class=\"header\" href=\"#atomic-reference-counting-with-arct\">Atomic Reference Counting with <code>Arc&lt;T&gt;</code></a></h4>\n<p>Fortunately, <code class=\"hljs\">Arc&lt;T&gt;</code> <em>is</em> a type like <code class=\"hljs\">Rc&lt;T&gt;</code> that is safe to use in\nconcurrent situations. The <em>a</em> stands for <em>atomic</em>, meaning it‚Äôs an <em>atomically\nreference counted</em> type. Atomics are an additional kind of concurrency\nprimitive that we won‚Äôt cover in detail here: see the standard library\ndocumentation for <a href=\"../std/sync/atomic/index.html\"><code class=\"hljs\">std::sync::atomic</code></a><!-- ignore --> for more\ndetails. At this point, you just need to know that atomics work like primitive\ntypes but are safe to share across threads.</p>\n<p>You might then wonder why all primitive types aren‚Äôt atomic and why standard\nlibrary types aren‚Äôt implemented to use <code class=\"hljs\">Arc&lt;T&gt;</code> by default. The reason is that\nthread safety comes with a performance penalty that you only want to pay when\nyou really need to. If you‚Äôre just performing operations on values within a\nsingle thread, your code can run faster if it doesn‚Äôt have to enforce the\nguarantees atomics provide.</p>\n<p>Let‚Äôs return to our example: <code class=\"hljs\">Arc&lt;T&gt;</code> and <code class=\"hljs\">Rc&lt;T&gt;</code> have the same API, so we fix\nour program by changing the <code class=\"hljs\">use</code> line, the call to <code class=\"hljs\">new</code>, and the call to\n<code class=\"hljs\">clone</code>. The code in Listing 16-15 will finally compile and run:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-keyword\">use</span> std::sync::{Arc, Mutex};\n<span class=\"hljs-keyword\">use</span> std::thread;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> counter = Arc::new(Mutex::new(<span class=\"hljs-number\">0</span>));\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> handles = <span class=\"hljs-built_in\">vec!</span>[];\n\n    <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..<span class=\"hljs-number\">10</span> {\n        <span class=\"hljs-keyword\">let</span> counter = Arc::clone(&amp;counter);\n        <span class=\"hljs-keyword\">let</span> handle = thread::spawn(<span class=\"hljs-keyword\">move</span> || {\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> num = counter.lock().unwrap();\n\n            *num += <span class=\"hljs-number\">1</span>;\n        });\n        handles.push(handle);\n    }\n\n    <span class=\"hljs-keyword\">for</span> handle <span class=\"hljs-keyword\">in</span> handles {\n        handle.join().unwrap();\n    }\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Result: {}\"</span>, *counter.lock().unwrap());\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 16-15: Using an <code class=\"hljs\">Arc&lt;T&gt;</code> to wrap the <code class=\"hljs\">Mutex&lt;T&gt;</code>\nto be able to share ownership across multiple threads</span></p>\n<p>This code will print the following:</p>\n<!-- Not extracting output because changes to this output aren't significant;\nthe changes are likely to be due to the threads running differently rather than\nchanges in the compiler -->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">Result: 10\n</code></pre>\n<p>We did it! We counted from 0 to 10, which may not seem very impressive, but it\ndid teach us a lot about <code class=\"hljs\">Mutex&lt;T&gt;</code> and thread safety. You could also use this\nprogram‚Äôs structure to do more complicated operations than just incrementing a\ncounter. Using this strategy, you can divide a calculation into independent\nparts, split those parts across threads, and then use a <code class=\"hljs\">Mutex&lt;T&gt;</code> to have each\nthread update the final result with its part.</p>\n<p>Note that if you are doing simple numerical operations, there are types simpler\nthan <code class=\"hljs\">Mutex&lt;T&gt;</code> types provided by the <a href=\"../std/sync/atomic/index.html\"><code class=\"hljs\">std::sync::atomic</code> module of the\nstandard library</a><!-- ignore -->. These types provide safe, concurrent,\natomic access to primitive types. We chose to use <code class=\"hljs\">Mutex&lt;T&gt;</code> with a primitive\ntype for this example so we could concentrate on how <code class=\"hljs\">Mutex&lt;T&gt;</code> works.</p>\n<h3 id=\"similarities-between-refcelltrct-and-mutextarct\"><a class=\"header\" href=\"#similarities-between-refcelltrct-and-mutextarct\">Similarities Between <code>RefCell&lt;T&gt;</code>/<code>Rc&lt;T&gt;</code> and <code>Mutex&lt;T&gt;</code>/<code>Arc&lt;T&gt;</code></a></h3>\n<p>You might have noticed that <code class=\"hljs\">counter</code> is immutable but we could get a mutable\nreference to the value inside it; this means <code class=\"hljs\">Mutex&lt;T&gt;</code> provides interior\nmutability, as the <code class=\"hljs\">Cell</code> family does. In the same way we used <code class=\"hljs\">RefCell&lt;T&gt;</code> in\nChapter 15 to allow us to mutate contents inside an <code class=\"hljs\">Rc&lt;T&gt;</code>, we use <code class=\"hljs\">Mutex&lt;T&gt;</code>\nto mutate contents inside an <code class=\"hljs\">Arc&lt;T&gt;</code>.</p>\n<p>Another detail to note is that Rust can‚Äôt protect you from all kinds of logic\nerrors when you use <code class=\"hljs\">Mutex&lt;T&gt;</code>. Recall in Chapter 15 that using <code class=\"hljs\">Rc&lt;T&gt;</code> came\nwith the risk of creating reference cycles, where two <code class=\"hljs\">Rc&lt;T&gt;</code> values refer to\neach other, causing memory leaks. Similarly, <code class=\"hljs\">Mutex&lt;T&gt;</code> comes with the risk of\ncreating <em>deadlocks</em>. These occur when an operation needs to lock two resources\nand two threads have each acquired one of the locks, causing them to wait for\neach other forever. If you‚Äôre interested in deadlocks, try creating a Rust\nprogram that has a deadlock; then research deadlock mitigation strategies for\nmutexes in any language and have a go at implementing them in Rust. The\nstandard library API documentation for <code class=\"hljs\">Mutex&lt;T&gt;</code> and <code class=\"hljs\">MutexGuard</code> offers\nuseful information.</p>\n<p>We‚Äôll round out this chapter by talking about the <code class=\"hljs\">Send</code> and <code class=\"hljs\">Sync</code> traits and\nhow we can use them with custom types.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"extensible-concurrency-with-the-sync-and-send-traits\"><a class=\"header\" href=\"#extensible-concurrency-with-the-sync-and-send-traits\">Extensible Concurrency with the <code>Sync</code> and <code>Send</code> Traits</a></h2>\n<p>Interestingly, the Rust language has <em>very</em> few concurrency features. Almost\nevery concurrency feature we‚Äôve talked about so far in this chapter has been\npart of the standard library, not the language. Your options for handling\nconcurrency are not limited to the language or the standard library; you can\nwrite your own concurrency features or use those written by others.</p>\n<p>However, two concurrency concepts are embedded in the language: the\n<code class=\"hljs\">std::marker</code> traits <code class=\"hljs\">Sync</code> and <code class=\"hljs\">Send</code>.</p>\n<h3 id=\"allowing-transference-of-ownership-between-threads-with-send\"><a class=\"header\" href=\"#allowing-transference-of-ownership-between-threads-with-send\">Allowing Transference of Ownership Between Threads with <code>Send</code></a></h3>\n<p>The <code class=\"hljs\">Send</code> marker trait indicates that ownership of values of the type\nimplementing <code class=\"hljs\">Send</code> can be transferred between threads. Almost every Rust type\nis <code class=\"hljs\">Send</code>, but there are some exceptions, including <code class=\"hljs\">Rc&lt;T&gt;</code>: this cannot be\n<code class=\"hljs\">Send</code> because if you cloned an <code class=\"hljs\">Rc&lt;T&gt;</code> value and tried to transfer ownership\nof the clone to another thread, both threads might update the reference count\nat the same time. For this reason, <code class=\"hljs\">Rc&lt;T&gt;</code> is implemented for use in\nsingle-threaded situations where you don‚Äôt want to pay the thread-safe\nperformance penalty.</p>\n<p>Therefore, Rust‚Äôs type system and trait bounds ensure that you can never\naccidentally send an <code class=\"hljs\">Rc&lt;T&gt;</code> value across threads unsafely. When we tried to do\nthis in Listing 16-14, we got the error <code class=\"hljs\">the trait Send is not implemented for Rc&lt;Mutex&lt;i32&gt;&gt;</code>. When we switched to <code class=\"hljs\">Arc&lt;T&gt;</code>, which is <code class=\"hljs\">Send</code>, the code\ncompiled.</p>\n<p>Any type composed entirely of <code class=\"hljs\">Send</code> types is automatically marked as <code class=\"hljs\">Send</code> as\nwell. Almost all primitive types are <code class=\"hljs\">Send</code>, aside from raw pointers, which\nwe‚Äôll discuss in Chapter 19.</p>\n<h3 id=\"allowing-access-from-multiple-threads-with-sync\"><a class=\"header\" href=\"#allowing-access-from-multiple-threads-with-sync\">Allowing Access from Multiple Threads with <code>Sync</code></a></h3>\n<p>The <code class=\"hljs\">Sync</code> marker trait indicates that it is safe for the type implementing\n<code class=\"hljs\">Sync</code> to be referenced from multiple threads. In other words, any type <code class=\"hljs\">T</code> is\n<code class=\"hljs\">Sync</code> if <code class=\"hljs\">&amp;T</code> (an immutable reference to <code class=\"hljs\">T</code>) is <code class=\"hljs\">Send</code>, meaning the reference\ncan be sent safely to another thread. Similar to <code class=\"hljs\">Send</code>, primitive types are\n<code class=\"hljs\">Sync</code>, and types composed entirely of types that are <code class=\"hljs\">Sync</code> are also <code class=\"hljs\">Sync</code>.</p>\n<p>The smart pointer <code class=\"hljs\">Rc&lt;T&gt;</code> is also not <code class=\"hljs\">Sync</code> for the same reasons that it‚Äôs not\n<code class=\"hljs\">Send</code>. The <code class=\"hljs\">RefCell&lt;T&gt;</code> type (which we talked about in Chapter 15) and the\nfamily of related <code class=\"hljs\">Cell&lt;T&gt;</code> types are not <code class=\"hljs\">Sync</code>. The implementation of borrow\nchecking that <code class=\"hljs\">RefCell&lt;T&gt;</code> does at runtime is not thread-safe. The smart\npointer <code class=\"hljs\">Mutex&lt;T&gt;</code> is <code class=\"hljs\">Sync</code> and can be used to share access with multiple\nthreads as you saw in the <a href=\"ch16-03-shared-state.html#sharing-a-mutext-between-multiple-threads\">‚ÄúSharing a <code class=\"hljs\">Mutex&lt;T&gt;</code> Between Multiple\nThreads‚Äù</a><!-- ignore --> section.</p>\n<h3 id=\"implementing-send-and-sync-manually-is-unsafe\"><a class=\"header\" href=\"#implementing-send-and-sync-manually-is-unsafe\">Implementing <code>Send</code> and <code>Sync</code> Manually Is Unsafe</a></h3>\n<p>Because types that are made up of <code class=\"hljs\">Send</code> and <code class=\"hljs\">Sync</code> traits are automatically\nalso <code class=\"hljs\">Send</code> and <code class=\"hljs\">Sync</code>, we don‚Äôt have to implement those traits manually. As\nmarker traits, they don‚Äôt even have any methods to implement. They‚Äôre just\nuseful for enforcing invariants related to concurrency.</p>\n<p>Manually implementing these traits involves implementing unsafe Rust code.\nWe‚Äôll talk about using unsafe Rust code in Chapter 19; for now, the important\ninformation is that building new concurrent types not made up of <code class=\"hljs\">Send</code> and\n<code class=\"hljs\">Sync</code> parts requires careful thought to uphold the safety guarantees. <a href=\"../nomicon/index.html\">‚ÄúThe\nRustonomicon‚Äù</a> has more information about these guarantees and how to\nuphold them.</p>\n<h2 id=\"summary-15\"><a class=\"header\" href=\"#summary-15\">Summary</a></h2>\n<p>This isn‚Äôt the last you‚Äôll see of concurrency in this book: the project in\nChapter 20 will use the concepts in this chapter in a more realistic situation\nthan the smaller examples discussed here.</p>\n<p>As mentioned earlier, because very little of how Rust handles concurrency is\npart of the language, many concurrency solutions are implemented as crates.\nThese evolve more quickly than the standard library, so be sure to search\nonline for the current, state-of-the-art crates to use in multithreaded\nsituations.</p>\n<p>The Rust standard library provides channels for message passing and smart\npointer types, such as <code class=\"hljs\">Mutex&lt;T&gt;</code> and <code class=\"hljs\">Arc&lt;T&gt;</code>, that are safe to use in\nconcurrent contexts. The type system and the borrow checker ensure that the\ncode using these solutions won‚Äôt end up with data races or invalid references.\nOnce you get your code to compile, you can rest assured that it will happily\nrun on multiple threads without the kinds of hard-to-track-down bugs common in\nother languages. Concurrent programming is no longer a concept to be afraid of:\ngo forth and make your programs concurrent, fearlessly!</p>\n<p>Next, we‚Äôll talk about idiomatic ways to model problems and structure solutions\nas your Rust programs get bigger. In addition, we‚Äôll discuss how Rust‚Äôs idioms\nrelate to those you might be familiar with from object-oriented programming.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"object-oriented-programming-features-of-rust\"><a class=\"header\" href=\"#object-oriented-programming-features-of-rust\">Object-Oriented Programming Features of Rust</a></h1>\n<p>Object-oriented programming (OOP) is a way of modeling programs. Objects as a\nprogrammatic concept were introduced in the programming language Simula in the\n1960s. Those objects influenced Alan Kay‚Äôs programming architecture in which\nobjects pass messages to each other. To describe this architecture, he coined\nthe term <em>object-oriented programming</em> in 1967. Many competing definitions\ndescribe what OOP is, and by some of these definitions Rust is object-oriented,\nbut by others it is not. In this chapter, we‚Äôll explore certain characteristics\nthat are commonly considered object-oriented and how those characteristics\ntranslate to idiomatic Rust. We‚Äôll then show you how to implement an\nobject-oriented design pattern in Rust and discuss the trade-offs of doing so\nversus implementing a solution using some of Rust‚Äôs strengths instead.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"characteristics-of-object-oriented-languages\"><a class=\"header\" href=\"#characteristics-of-object-oriented-languages\">Characteristics of Object-Oriented Languages</a></h2>\n<p>There is no consensus in the programming community about what features a\nlanguage must have to be considered object-oriented. Rust is influenced by many\nprogramming paradigms, including OOP; for example, we explored the features\nthat came from functional programming in Chapter 13. Arguably, OOP languages\nshare certain common characteristics, namely objects, encapsulation, and\ninheritance. Let‚Äôs look at what each of those characteristics means and whether\nRust supports it.</p>\n<h3 id=\"objects-contain-data-and-behavior\"><a class=\"header\" href=\"#objects-contain-data-and-behavior\">Objects Contain Data and Behavior</a></h3>\n<p>The book <em>Design Patterns: Elements of Reusable Object-Oriented Software</em> by\nErich Gamma, Richard Helm, Ralph Johnson, and John Vlissides (Addison-Wesley\nProfessional, 1994), colloquially referred to as <em>The Gang of Four</em> book, is a\ncatalog of object-oriented design patterns. It defines OOP this way:</p>\n<blockquote>\n<p>Object-oriented programs are made up of objects. An <em>object</em> packages both\ndata and the procedures that operate on that data. The procedures are\ntypically called <em>methods</em> or <em>operations</em>.</p>\n</blockquote>\n<p>Using this definition, Rust is object-oriented: structs and enums have data,\nand <code class=\"hljs\">impl</code> blocks provide methods on structs and enums. Even though structs and\nenums with methods aren‚Äôt <em>called</em> objects, they provide the same\nfunctionality, according to the Gang of Four‚Äôs definition of objects.</p>\n<h3 id=\"encapsulation-that-hides-implementation-details\"><a class=\"header\" href=\"#encapsulation-that-hides-implementation-details\">Encapsulation that Hides Implementation Details</a></h3>\n<p>Another aspect commonly associated with OOP is the idea of <em>encapsulation</em>,\nwhich means that the implementation details of an object aren‚Äôt accessible to\ncode using that object. Therefore, the only way to interact with an object is\nthrough its public API; code using the object shouldn‚Äôt be able to reach into\nthe object‚Äôs internals and change data or behavior directly. This enables the\nprogrammer to change and refactor an object‚Äôs internals without needing to\nchange the code that uses the object.</p>\n<p>We discussed how to control encapsulation in Chapter 7: we can use the <code class=\"hljs\">pub</code>\nkeyword to decide which modules, types, functions, and methods in our code\nshould be public, and by default everything else is private. For example, we\ncan define a struct <code class=\"hljs\">AveragedCollection</code> that has a field containing a vector\nof <code class=\"hljs\">i32</code> values. The struct can also have a field that contains the average of\nthe values in the vector, meaning the average doesn‚Äôt have to be computed\non demand whenever anyone needs it. In other words, <code class=\"hljs\">AveragedCollection</code> will\ncache the calculated average for us. Listing 17-1 has the definition of the\n<code class=\"hljs\">AveragedCollection</code> struct:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust noplayground hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">AveragedCollection</span></span> {\n    list: <span class=\"hljs-built_in\">Vec</span>&lt;<span class=\"hljs-built_in\">i32</span>&gt;,\n    average: <span class=\"hljs-built_in\">f64</span>,\n}</code></pre>\n<p><span class=\"caption\">Listing 17-1: An <code class=\"hljs\">AveragedCollection</code> struct that\nmaintains a list of integers and the average of the items in the\ncollection</span></p>\n<p>The struct is marked <code class=\"hljs\">pub</code> so that other code can use it, but the fields within\nthe struct remain private. This is important in this case because we want to\nensure that whenever a value is added or removed from the list, the average is\nalso updated. We do this by implementing <code class=\"hljs\">add</code>, <code class=\"hljs\">remove</code>, and <code class=\"hljs\">average</code> methods\non the struct, as shown in Listing 17-2:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">AveragedCollection</span></span> {\n</span><span class=\"boring\">    list: <span class=\"hljs-built_in\">Vec</span>&lt;<span class=\"hljs-built_in\">i32</span>&gt;,\n</span><span class=\"boring\">    average: <span class=\"hljs-built_in\">f64</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">impl</span> AveragedCollection {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, value: <span class=\"hljs-built_in\">i32</span>) {\n        <span class=\"hljs-keyword\">self</span>.list.push(value);\n        <span class=\"hljs-keyword\">self</span>.update_average();\n    }\n\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">remove</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">Option</span>&lt;<span class=\"hljs-built_in\">i32</span>&gt; {\n        <span class=\"hljs-keyword\">let</span> result = <span class=\"hljs-keyword\">self</span>.list.pop();\n        <span class=\"hljs-keyword\">match</span> result {\n            <span class=\"hljs-literal\">Some</span>(value) =&gt; {\n                <span class=\"hljs-keyword\">self</span>.update_average();\n                <span class=\"hljs-literal\">Some</span>(value)\n            }\n            <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-literal\">None</span>,\n        }\n    }\n\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">average</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">f64</span> {\n        <span class=\"hljs-keyword\">self</span>.average\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">update_average</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-keyword\">let</span> total: <span class=\"hljs-built_in\">i32</span> = <span class=\"hljs-keyword\">self</span>.list.iter().sum();\n        <span class=\"hljs-keyword\">self</span>.average = total <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">f64</span> / <span class=\"hljs-keyword\">self</span>.list.len() <span class=\"hljs-keyword\">as</span> <span class=\"hljs-built_in\">f64</span>;\n    }\n}</code></pre>\n<p><span class=\"caption\">Listing 17-2: Implementations of the public methods\n<code class=\"hljs\">add</code>, <code class=\"hljs\">remove</code>, and <code class=\"hljs\">average</code> on <code class=\"hljs\">AveragedCollection</code></span></p>\n<p>The public methods <code class=\"hljs\">add</code>, <code class=\"hljs\">remove</code>, and <code class=\"hljs\">average</code> are the only ways to access\nor modify data in an instance of <code class=\"hljs\">AveragedCollection</code>. When an item is added\nto <code class=\"hljs\">list</code> using the <code class=\"hljs\">add</code> method or removed using the <code class=\"hljs\">remove</code> method, the\nimplementations of each call the private <code class=\"hljs\">update_average</code> method that handles\nupdating the <code class=\"hljs\">average</code> field as well.</p>\n<p>We leave the <code class=\"hljs\">list</code> and <code class=\"hljs\">average</code> fields private so there is no way for\nexternal code to add or remove items to or from the <code class=\"hljs\">list</code> field directly;\notherwise, the <code class=\"hljs\">average</code> field might become out of sync when the <code class=\"hljs\">list</code>\nchanges. The <code class=\"hljs\">average</code> method returns the value in the <code class=\"hljs\">average</code> field,\nallowing external code to read the <code class=\"hljs\">average</code> but not modify it.</p>\n<p>Because we‚Äôve encapsulated the implementation details of the struct\n<code class=\"hljs\">AveragedCollection</code>, we can easily change aspects, such as the data structure,\nin the future. For instance, we could use a <code class=\"hljs\">HashSet&lt;i32&gt;</code> instead of a\n<code class=\"hljs\">Vec&lt;i32&gt;</code> for the <code class=\"hljs\">list</code> field. As long as the signatures of the <code class=\"hljs\">add</code>,\n<code class=\"hljs\">remove</code>, and <code class=\"hljs\">average</code> public methods stay the same, code using\n<code class=\"hljs\">AveragedCollection</code> wouldn‚Äôt need to change in order to compile. If we made\n<code class=\"hljs\">list</code> public instead, this wouldn‚Äôt necessarily be the case: <code class=\"hljs\">HashSet&lt;i32&gt;</code> and\n<code class=\"hljs\">Vec&lt;i32&gt;</code> have different methods for adding and removing items, so the external\ncode would likely have to change if it were modifying <code class=\"hljs\">list</code> directly.</p>\n<p>If encapsulation is a required aspect for a language to be considered\nobject-oriented, then Rust meets that requirement. The option to use <code class=\"hljs\">pub</code> or\nnot for different parts of code enables encapsulation of implementation details.</p>\n<h3 id=\"inheritance-as-a-type-system-and-as-code-sharing\"><a class=\"header\" href=\"#inheritance-as-a-type-system-and-as-code-sharing\">Inheritance as a Type System and as Code Sharing</a></h3>\n<p><em>Inheritance</em> is a mechanism whereby an object can inherit elements from\nanother object‚Äôs definition, thus gaining the parent object‚Äôs data and behavior\nwithout you having to define them again.</p>\n<p>If a language must have inheritance to be an object-oriented language, then\nRust is not one. There is no way to define a struct that inherits the parent\nstruct‚Äôs fields and method implementations without using a macro.</p>\n<p>However, if you‚Äôre used to having inheritance in your programming toolbox, you\ncan use other solutions in Rust, depending on your reason for reaching for\ninheritance in the first place.</p>\n<p>You would choose inheritance for two main reasons. One is for reuse of code:\nyou can implement particular behavior for one type, and inheritance enables you\nto reuse that implementation for a different type. You can do this in a limited\nway in Rust code using default trait method implementations, which you saw in\nListing 10-14 when we added a default implementation of the <code class=\"hljs\">summarize</code> method\non the <code class=\"hljs\">Summary</code> trait. Any type implementing the <code class=\"hljs\">Summary</code> trait would have\nthe <code class=\"hljs\">summarize</code> method available on it without any further code. This is\nsimilar to a parent class having an implementation of a method and an\ninheriting child class also having the implementation of the method. We can\nalso override the default implementation of the <code class=\"hljs\">summarize</code> method when we\nimplement the <code class=\"hljs\">Summary</code> trait, which is similar to a child class overriding the\nimplementation of a method inherited from a parent class.</p>\n<p>The other reason to use inheritance relates to the type system: to enable a\nchild type to be used in the same places as the parent type. This is also\ncalled <em>polymorphism</em>, which means that you can substitute multiple objects for\neach other at runtime if they share certain characteristics.</p>\n<section class=\"note\" aria-role=\"note\">\n<h3 id=\"polymorphism\"><a class=\"header\" href=\"#polymorphism\">Polymorphism</a></h3>\n<p>To many people, polymorphism is synonymous with inheritance. But it‚Äôs\nactually a more general concept that refers to code that can work with data\nof multiple types. For inheritance, those types are generally subclasses.</p>\n<p>Rust instead uses generics to abstract over different possible types and\ntrait bounds to impose constraints on what those types must provide. This is\nsometimes called <em>bounded parametric polymorphism</em>.</p>\n</section>\n<p>Inheritance has recently fallen out of favor as a programming design solution\nin many programming languages because it‚Äôs often at risk of sharing more code\nthan necessary. Subclasses shouldn‚Äôt always share all characteristics of their\nparent class but will do so with inheritance. This can make a program‚Äôs design\nless flexible. It also introduces the possibility of calling methods on\nsubclasses that don‚Äôt make sense or that cause errors because the methods don‚Äôt\napply to the subclass. In addition, some languages will only allow single\ninheritance (meaning a subclass can only inherit from one class), further\nrestricting the flexibility of a program‚Äôs design.</p>\n<p>For these reasons, Rust takes the different approach of using trait objects\ninstead of inheritance. Let‚Äôs look at how trait objects enable polymorphism in\nRust.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"using-trait-objects-that-allow-for-values-of-different-types\"><a class=\"header\" href=\"#using-trait-objects-that-allow-for-values-of-different-types\">Using Trait Objects That Allow for Values of Different Types</a></h2>\n<p>In Chapter 8, we mentioned that one limitation of vectors is that they can\nstore elements of only one type. We created a workaround in Listing 8-9 where\nwe defined a <code class=\"hljs\">SpreadsheetCell</code> enum that had variants to hold integers, floats,\nand text. This meant we could store different types of data in each cell and\nstill have a vector that represented a row of cells. This is a perfectly good\nsolution when our interchangeable items are a fixed set of types that we know\nwhen our code is compiled.</p>\n<p>However, sometimes we want our library user to be able to extend the set of\ntypes that are valid in a particular situation. To show how we might achieve\nthis, we‚Äôll create an example graphical user interface (GUI) tool that iterates\nthrough a list of items, calling a <code class=\"hljs\">draw</code> method on each one to draw it to the\nscreen‚Äîa common technique for GUI tools. We‚Äôll create a library crate called\n<code class=\"hljs\">gui</code> that contains the structure of a GUI library. This crate might include\nsome types for people to use, such as <code class=\"hljs\">Button</code> or <code class=\"hljs\">TextField</code>. In addition,\n<code class=\"hljs\">gui</code> users will want to create their own types that can be drawn: for\ninstance, one programmer might add an <code class=\"hljs\">Image</code> and another might add a\n<code class=\"hljs\">SelectBox</code>.</p>\n<p>We won‚Äôt implement a fully fledged GUI library for this example but will show\nhow the pieces would fit together. At the time of writing the library, we can‚Äôt\nknow and define all the types other programmers might want to create. But we do\nknow that <code class=\"hljs\">gui</code> needs to keep track of many values of different types, and it\nneeds to call a <code class=\"hljs\">draw</code> method on each of these differently typed values. It\ndoesn‚Äôt need to know exactly what will happen when we call the <code class=\"hljs\">draw</code> method,\njust that the value will have that method available for us to call.</p>\n<p>To do this in a language with inheritance, we might define a class named\n<code class=\"hljs\">Component</code> that has a method named <code class=\"hljs\">draw</code> on it. The other classes, such as\n<code class=\"hljs\">Button</code>, <code class=\"hljs\">Image</code>, and <code class=\"hljs\">SelectBox</code>, would inherit from <code class=\"hljs\">Component</code> and thus\ninherit the <code class=\"hljs\">draw</code> method. They could each override the <code class=\"hljs\">draw</code> method to define\ntheir custom behavior, but the framework could treat all of the types as if\nthey were <code class=\"hljs\">Component</code> instances and call <code class=\"hljs\">draw</code> on them. But because Rust\ndoesn‚Äôt have inheritance, we need another way to structure the <code class=\"hljs\">gui</code> library to\nallow users to extend it with new types.</p>\n<h3 id=\"defining-a-trait-for-common-behavior\"><a class=\"header\" href=\"#defining-a-trait-for-common-behavior\">Defining a Trait for Common Behavior</a></h3>\n<p>To implement the behavior we want <code class=\"hljs\">gui</code> to have, we‚Äôll define a trait named\n<code class=\"hljs\">Draw</code> that will have one method named <code class=\"hljs\">draw</code>. Then we can define a vector that\ntakes a <em>trait object</em>. A trait object points to both an instance of a type\nimplementing our specified trait and a table used to look up trait methods on\nthat type at runtime. We create a trait object by specifying some sort of\npointer, such as a <code class=\"hljs\">&amp;</code> reference or a <code class=\"hljs\">Box&lt;T&gt;</code> smart pointer, then the <code class=\"hljs\">dyn</code>\nkeyword, and then specifying the relevant trait. (We‚Äôll talk about the reason\ntrait objects must use a pointer in Chapter 19 in the section <a href=\"ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait\">‚ÄúDynamically\nSized Types and the <code class=\"hljs\">Sized</code> Trait.‚Äù</a><!-- ignore -->) We can\nuse trait objects in place of a generic or concrete type. Wherever we use a\ntrait object, Rust‚Äôs type system will ensure at compile time that any value\nused in that context will implement the trait object‚Äôs trait. Consequently, we\ndon‚Äôt need to know all the possible types at compile time.</p>\n<p>We‚Äôve mentioned that, in Rust, we refrain from calling structs and enums\n‚Äúobjects‚Äù to distinguish them from other languages‚Äô objects. In a struct or\nenum, the data in the struct fields and the behavior in <code class=\"hljs\">impl</code> blocks are\nseparated, whereas in other languages, the data and behavior combined into one\nconcept is often labeled an object. However, trait objects <em>are</em> more like\nobjects in other languages in the sense that they combine data and behavior.\nBut trait objects differ from traditional objects in that we can‚Äôt add data to\na trait object. Trait objects aren‚Äôt as generally useful as objects in other\nlanguages: their specific purpose is to allow abstraction across common\nbehavior.</p>\n<p>Listing 17-3 shows how to define a trait named <code class=\"hljs\">Draw</code> with one method named\n<code class=\"hljs\">draw</code>:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust noplayground hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Draw</span></span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">draw</span></span>(&amp;<span class=\"hljs-keyword\">self</span>);\n}</code></pre>\n<p><span class=\"caption\">Listing 17-3: Definition of the <code class=\"hljs\">Draw</code> trait</span></p>\n<p>This syntax should look familiar from our discussions on how to define traits\nin Chapter 10. Next comes some new syntax: Listing 17-4 defines a struct named\n<code class=\"hljs\">Screen</code> that holds a vector named <code class=\"hljs\">components</code>. This vector is of type\n<code class=\"hljs\">Box&lt;dyn Draw&gt;</code>, which is a trait object; it‚Äôs a stand-in for any type inside\na <code class=\"hljs\">Box</code> that implements the <code class=\"hljs\">Draw</code> trait.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Draw</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">draw</span></span>(&amp;<span class=\"hljs-keyword\">self</span>);\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Screen</span></span> {\n    <span class=\"hljs-keyword\">pub</span> components: <span class=\"hljs-built_in\">Vec</span>&lt;<span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> Draw&gt;&gt;,\n}</code></pre>\n<p><span class=\"caption\">Listing 17-4: Definition of the <code class=\"hljs\">Screen</code> struct with a\n<code class=\"hljs\">components</code> field holding a vector of trait objects that implement the <code class=\"hljs\">Draw</code>\ntrait</span></p>\n<p>On the <code class=\"hljs\">Screen</code> struct, we‚Äôll define a method named <code class=\"hljs\">run</code> that will call the\n<code class=\"hljs\">draw</code> method on each of its <code class=\"hljs\">components</code>, as shown in Listing 17-5:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Draw</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">draw</span></span>(&amp;<span class=\"hljs-keyword\">self</span>);\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Screen</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> components: <span class=\"hljs-built_in\">Vec</span>&lt;<span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> Draw&gt;&gt;,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">impl</span> Screen {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">run</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-keyword\">for</span> component <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.components.iter() {\n            component.draw();\n        }\n    }\n}</code></pre>\n<p><span class=\"caption\">Listing 17-5: A <code class=\"hljs\">run</code> method on <code class=\"hljs\">Screen</code> that calls the\n<code class=\"hljs\">draw</code> method on each component</span></p>\n<p>This works differently from defining a struct that uses a generic type\nparameter with trait bounds. A generic type parameter can only be substituted\nwith one concrete type at a time, whereas trait objects allow for multiple\nconcrete types to fill in for the trait object at runtime. For example, we\ncould have defined the <code class=\"hljs\">Screen</code> struct using a generic type and a trait bound\nas in Listing 17-6:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Draw</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">draw</span></span>(&amp;<span class=\"hljs-keyword\">self</span>);\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Screen</span></span>&lt;T: Draw&gt; {\n    <span class=\"hljs-keyword\">pub</span> components: <span class=\"hljs-built_in\">Vec</span>&lt;T&gt;,\n}\n\n<span class=\"hljs-keyword\">impl</span>&lt;T&gt; Screen&lt;T&gt;\n<span class=\"hljs-keyword\">where</span>\n    T: Draw,\n{\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">run</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-keyword\">for</span> component <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.components.iter() {\n            component.draw();\n        }\n    }\n}</code></pre>\n<p><span class=\"caption\">Listing 17-6: An alternate implementation of the <code class=\"hljs\">Screen</code>\nstruct and its <code class=\"hljs\">run</code> method using generics and trait bounds</span></p>\n<p>This restricts us to a <code class=\"hljs\">Screen</code> instance that has a list of components all of\ntype <code class=\"hljs\">Button</code> or all of type <code class=\"hljs\">TextField</code>. If you‚Äôll only ever have homogeneous\ncollections, using generics and trait bounds is preferable because the\ndefinitions will be monomorphized at compile time to use the concrete types.</p>\n<p>On the other hand, with the method using trait objects, one <code class=\"hljs\">Screen</code> instance\ncan hold a <code class=\"hljs\">Vec&lt;T&gt;</code> that contains a <code class=\"hljs\">Box&lt;Button&gt;</code> as well as a\n<code class=\"hljs\">Box&lt;TextField&gt;</code>. Let‚Äôs look at how this works, and then we‚Äôll talk about the\nruntime performance implications.</p>\n<h3 id=\"implementing-the-trait\"><a class=\"header\" href=\"#implementing-the-trait\">Implementing the Trait</a></h3>\n<p>Now we‚Äôll add some types that implement the <code class=\"hljs\">Draw</code> trait. We‚Äôll provide the\n<code class=\"hljs\">Button</code> type. Again, actually implementing a GUI library is beyond the scope\nof this book, so the <code class=\"hljs\">draw</code> method won‚Äôt have any useful implementation in its\nbody. To imagine what the implementation might look like, a <code class=\"hljs\">Button</code> struct\nmight have fields for <code class=\"hljs\">width</code>, <code class=\"hljs\">height</code>, and <code class=\"hljs\">label</code>, as shown in Listing 17-7:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Draw</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">draw</span></span>(&amp;<span class=\"hljs-keyword\">self</span>);\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Screen</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> components: <span class=\"hljs-built_in\">Vec</span>&lt;<span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> Draw&gt;&gt;,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Screen {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">run</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">for</span> component <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">self</span>.components.iter() {\n</span><span class=\"boring\">            component.draw();\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Button</span></span> {\n    <span class=\"hljs-keyword\">pub</span> width: <span class=\"hljs-built_in\">u32</span>,\n    <span class=\"hljs-keyword\">pub</span> height: <span class=\"hljs-built_in\">u32</span>,\n    <span class=\"hljs-keyword\">pub</span> label: <span class=\"hljs-built_in\">String</span>,\n}\n\n<span class=\"hljs-keyword\">impl</span> Draw <span class=\"hljs-keyword\">for</span> Button {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">draw</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-comment\">// code to actually draw a button</span>\n    }\n}</code></pre>\n<p><span class=\"caption\">Listing 17-7: A <code class=\"hljs\">Button</code> struct that implements the\n<code class=\"hljs\">Draw</code> trait</span></p>\n<p>The <code class=\"hljs\">width</code>, <code class=\"hljs\">height</code>, and <code class=\"hljs\">label</code> fields on <code class=\"hljs\">Button</code> will differ from the\nfields on other components; for example, a <code class=\"hljs\">TextField</code> type might have those\nsame fields plus a <code class=\"hljs\">placeholder</code> field. Each of the types we want to draw on\nthe screen will implement the <code class=\"hljs\">Draw</code> trait but will use different code in the\n<code class=\"hljs\">draw</code> method to define how to draw that particular type, as <code class=\"hljs\">Button</code> has here\n(without the actual GUI code, as mentioned). The <code class=\"hljs\">Button</code> type, for instance,\nmight have an additional <code class=\"hljs\">impl</code> block containing methods related to what\nhappens when a user clicks the button. These kinds of methods won‚Äôt apply to\ntypes like <code class=\"hljs\">TextField</code>.</p>\n<p>If someone using our library decides to implement a <code class=\"hljs\">SelectBox</code> struct that has\n<code class=\"hljs\">width</code>, <code class=\"hljs\">height</code>, and <code class=\"hljs\">options</code> fields, they implement the <code class=\"hljs\">Draw</code> trait on the\n<code class=\"hljs\">SelectBox</code> type as well, as shown in Listing 17-8:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"hljs-keyword\">use</span> gui::Draw;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">SelectBox</span></span> {\n    width: <span class=\"hljs-built_in\">u32</span>,\n    height: <span class=\"hljs-built_in\">u32</span>,\n    options: <span class=\"hljs-built_in\">Vec</span>&lt;<span class=\"hljs-built_in\">String</span>&gt;,\n}\n\n<span class=\"hljs-keyword\">impl</span> Draw <span class=\"hljs-keyword\">for</span> SelectBox {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">draw</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-comment\">// code to actually draw a select box</span>\n    }\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}</span></code></pre>\n<p><span class=\"caption\">Listing 17-8: Another crate using <code class=\"hljs\">gui</code> and implementing\nthe <code class=\"hljs\">Draw</code> trait on a <code class=\"hljs\">SelectBox</code> struct</span></p>\n<p>Our library‚Äôs user can now write their <code class=\"hljs\">main</code> function to create a <code class=\"hljs\">Screen</code>\ninstance. To the <code class=\"hljs\">Screen</code> instance, they can add a <code class=\"hljs\">SelectBox</code> and a <code class=\"hljs\">Button</code>\nby putting each in a <code class=\"hljs\">Box&lt;T&gt;</code> to become a trait object. They can then call the\n<code class=\"hljs\">run</code> method on the <code class=\"hljs\">Screen</code> instance, which will call <code class=\"hljs\">draw</code> on each of the\ncomponents. Listing 17-9 shows this implementation:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> gui::Draw;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">SelectBox</span></span> {\n</span><span class=\"boring\">    width: <span class=\"hljs-built_in\">u32</span>,\n</span><span class=\"boring\">    height: <span class=\"hljs-built_in\">u32</span>,\n</span><span class=\"boring\">    options: <span class=\"hljs-built_in\">Vec</span>&lt;<span class=\"hljs-built_in\">String</span>&gt;,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Draw <span class=\"hljs-keyword\">for</span> SelectBox {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">draw</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) {\n</span><span class=\"boring\">        <span class=\"hljs-comment\">// code to actually draw a select box</span>\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">use</span> gui::{Button, Screen};\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> screen = Screen {\n        components: <span class=\"hljs-built_in\">vec!</span>[\n            <span class=\"hljs-built_in\">Box</span>::new(SelectBox {\n                width: <span class=\"hljs-number\">75</span>,\n                height: <span class=\"hljs-number\">10</span>,\n                options: <span class=\"hljs-built_in\">vec!</span>[\n                    <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Yes\"</span>),\n                    <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Maybe\"</span>),\n                    <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"No\"</span>),\n                ],\n            }),\n            <span class=\"hljs-built_in\">Box</span>::new(Button {\n                width: <span class=\"hljs-number\">50</span>,\n                height: <span class=\"hljs-number\">10</span>,\n                label: <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"OK\"</span>),\n            }),\n        ],\n    };\n\n    screen.run();\n}</code></pre>\n<p><span class=\"caption\">Listing 17-9: Using trait objects to store values of\ndifferent types that implement the same trait</span></p>\n<p>When we wrote the library, we didn‚Äôt know that someone might add the\n<code class=\"hljs\">SelectBox</code> type, but our <code class=\"hljs\">Screen</code> implementation was able to operate on the\nnew type and draw it because <code class=\"hljs\">SelectBox</code> implements the <code class=\"hljs\">Draw</code> trait, which\nmeans it implements the <code class=\"hljs\">draw</code> method.</p>\n<p>This concept‚Äîof being concerned only with the messages a value responds to\nrather than the value‚Äôs concrete type‚Äîis similar to the concept of <em>duck\ntyping</em> in dynamically typed languages: if it walks like a duck and quacks\nlike a duck, then it must be a duck! In the implementation of <code class=\"hljs\">run</code> on <code class=\"hljs\">Screen</code>\nin Listing 17-5, <code class=\"hljs\">run</code> doesn‚Äôt need to know what the concrete type of each\ncomponent is. It doesn‚Äôt check whether a component is an instance of a <code class=\"hljs\">Button</code>\nor a <code class=\"hljs\">SelectBox</code>, it just calls the <code class=\"hljs\">draw</code> method on the component. By\nspecifying <code class=\"hljs\">Box&lt;dyn Draw&gt;</code> as the type of the values in the <code class=\"hljs\">components</code>\nvector, we‚Äôve defined <code class=\"hljs\">Screen</code> to need values that we can call the <code class=\"hljs\">draw</code>\nmethod on.</p>\n<p>The advantage of using trait objects and Rust‚Äôs type system to write code\nsimilar to code using duck typing is that we never have to check whether a\nvalue implements a particular method at runtime or worry about getting errors\nif a value doesn‚Äôt implement a method but we call it anyway. Rust won‚Äôt compile\nour code if the values don‚Äôt implement the traits that the trait objects need.</p>\n<p>For example, Listing 17-10 shows what happens if we try to create a <code class=\"hljs\">Screen</code>\nwith a <code class=\"hljs\">String</code> as a component:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs\"><span class=\"hljs-keyword\">use</span> gui::Screen;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> screen = Screen {\n        components: <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-built_in\">Box</span>::new(<span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Hi\"</span>))],\n    };\n\n    screen.run();\n}</code></pre>\n<p><span class=\"caption\">Listing 17-10: Attempting to use a type that doesn‚Äôt\nimplement the trait object‚Äôs trait</span></p>\n<p>We‚Äôll get this error because <code class=\"hljs\">String</code> doesn‚Äôt implement the <code class=\"hljs\">Draw</code> trait:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling gui v0.1.0 (file:///projects/gui)\nerror[E0277]: the trait bound `String: Draw` is not satisfied\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/main.rs:5:26</span>\n  |\n5 |         components: vec![Box::new(String::from(\"Hi\"))],\n  |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Draw` is not implemented for `String`\n  |\n  = help: the trait `Draw` is implemented for `Button`\n  = note: required for the cast from `Box&lt;String&gt;` to `Box&lt;dyn Draw&gt;`\n\nFor more information about this error, try `rustc --explain E0277`.\nerror: could not compile `gui` (bin \"gui\") due to 1 previous error\n</code></pre>\n<p>This error lets us know that either we‚Äôre passing something to <code class=\"hljs\">Screen</code> we\ndidn‚Äôt mean to pass and so should pass a different type or we should implement\n<code class=\"hljs\">Draw</code> on <code class=\"hljs\">String</code> so that <code class=\"hljs\">Screen</code> is able to call <code class=\"hljs\">draw</code> on it.</p>\n<h3 id=\"trait-objects-perform-dynamic-dispatch\"><a class=\"header\" href=\"#trait-objects-perform-dynamic-dispatch\">Trait Objects Perform Dynamic Dispatch</a></h3>\n<p>Recall in the <a href=\"ch10-01-syntax.html#performance-of-code-using-generics\">‚ÄúPerformance of Code Using\nGenerics‚Äù</a><!-- ignore --> section in\nChapter 10 our discussion on the monomorphization process performed by the\ncompiler when we use trait bounds on generics: the compiler generates\nnongeneric implementations of functions and methods for each concrete type that\nwe use in place of a generic type parameter. The code that results from\nmonomorphization is doing <em>static dispatch</em>, which is when the compiler knows\nwhat method you‚Äôre calling at compile time. This is opposed to <em>dynamic\ndispatch</em>, which is when the compiler can‚Äôt tell at compile time which method\nyou‚Äôre calling. In dynamic dispatch cases, the compiler emits code that at\nruntime will figure out which method to call.</p>\n<p>When we use trait objects, Rust must use dynamic dispatch. The compiler doesn‚Äôt\nknow all the types that might be used with the code that‚Äôs using trait objects,\nso it doesn‚Äôt know which method implemented on which type to call. Instead, at\nruntime, Rust uses the pointers inside the trait object to know which method to\ncall. This lookup incurs a runtime cost that doesn‚Äôt occur with static\ndispatch. Dynamic dispatch also prevents the compiler from choosing to inline a\nmethod‚Äôs code, which in turn prevents some optimizations. However, we did get\nextra flexibility in the code that we wrote in Listing 17-5 and were able to\nsupport in Listing 17-9, so it‚Äôs a trade-off to consider.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"implementing-an-object-oriented-design-pattern\"><a class=\"header\" href=\"#implementing-an-object-oriented-design-pattern\">Implementing an Object-Oriented Design Pattern</a></h2>\n<p>The <em>state pattern</em> is an object-oriented design pattern. The crux of the\npattern is that we define a set of states a value can have internally. The\nstates are represented by a set of <em>state objects</em>, and the value‚Äôs behavior\nchanges based on its state. We‚Äôre going to work through an example of a blog\npost struct that has a field to hold its state, which will be a state object\nfrom the set ‚Äúdraft‚Äù, ‚Äúreview‚Äù, or ‚Äúpublished‚Äù.</p>\n<p>The state objects share functionality: in Rust, of course, we use structs and\ntraits rather than objects and inheritance. Each state object is responsible\nfor its own behavior and for governing when it should change into another\nstate. The value that holds a state object knows nothing about the different\nbehavior of the states or when to transition between states.</p>\n<p>The advantage of using the state pattern is that, when the business\nrequirements of the program change, we won‚Äôt need to change the code of the\nvalue holding the state or the code that uses the value. We‚Äôll only need to\nupdate the code inside one of the state objects to change its rules or perhaps\nadd more state objects.</p>\n<p>First, we‚Äôre going to implement the state pattern in a more traditional\nobject-oriented way, then we‚Äôll use an approach that‚Äôs a bit more natural in\nRust. Let‚Äôs dig in to incrementally implementing a blog post workflow using the\nstate pattern.</p>\n<p>The final functionality will look like this:</p>\n<ol>\n<li>A blog post starts as an empty draft.</li>\n<li>When the draft is done, a review of the post is requested.</li>\n<li>When the post is approved, it gets published.</li>\n<li>Only published blog posts return content to print, so unapproved posts can‚Äôt\naccidentally be published.</li>\n</ol>\n<p>Any other changes attempted on a post should have no effect. For example, if we\ntry to approve a draft blog post before we‚Äôve requested a review, the post\nshould remain an unpublished draft.</p>\n<p>Listing 17-11 shows this workflow in code form: this is an example usage of the\nAPI we‚Äôll implement in a library crate named <code class=\"hljs\">blog</code>. This won‚Äôt compile yet\nbecause we haven‚Äôt implemented the <code class=\"hljs\">blog</code> crate.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs\"><span class=\"hljs-keyword\">use</span> blog::Post;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> post = Post::new();\n\n    post.add_text(<span class=\"hljs-string\">\"I ate a salad for lunch today\"</span>);\n    <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-string\">\"\"</span>, post.content());\n\n    post.request_review();\n    <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-string\">\"\"</span>, post.content());\n\n    post.approve();\n    <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-string\">\"I ate a salad for lunch today\"</span>, post.content());\n}</code></pre>\n<p><span class=\"caption\">Listing 17-11: Code that demonstrates the desired\nbehavior we want our <code class=\"hljs\">blog</code> crate to have</span></p>\n<p>We want to allow the user to create a new draft blog post with <code class=\"hljs\">Post::new</code>. We\nwant to allow text to be added to the blog post. If we try to get the post‚Äôs\ncontent immediately, before approval, we shouldn‚Äôt get any text because the\npost is still a draft. We‚Äôve added <code class=\"hljs\">assert_eq!</code> in the code for demonstration\npurposes. An excellent unit test for this would be to assert that a draft blog\npost returns an empty string from the <code class=\"hljs\">content</code> method, but we‚Äôre not going to\nwrite tests for this example.</p>\n<p>Next, we want to enable a request for a review of the post, and we want\n<code class=\"hljs\">content</code> to return an empty string while waiting for the review. When the post\nreceives approval, it should get published, meaning the text of the post will\nbe returned when <code class=\"hljs\">content</code> is called.</p>\n<p>Notice that the only type we‚Äôre interacting with from the crate is the <code class=\"hljs\">Post</code>\ntype. This type will use the state pattern and will hold a value that will be\none of three state objects representing the various states a post can be\nin‚Äîdraft, waiting for review, or published. Changing from one state to another\nwill be managed internally within the <code class=\"hljs\">Post</code> type. The states change in\nresponse to the methods called by our library‚Äôs users on the <code class=\"hljs\">Post</code> instance,\nbut they don‚Äôt have to manage the state changes directly. Also, users can‚Äôt\nmake a mistake with the states, like publishing a post before it‚Äôs reviewed.</p>\n<h3 id=\"defining-post-and-creating-a-new-instance-in-the-draft-state\"><a class=\"header\" href=\"#defining-post-and-creating-a-new-instance-in-the-draft-state\">Defining <code>Post</code> and Creating a New Instance in the Draft State</a></h3>\n<p>Let‚Äôs get started on the implementation of the library! We know we need a\npublic <code class=\"hljs\">Post</code> struct that holds some content, so we‚Äôll start with the\ndefinition of the struct and an associated public <code class=\"hljs\">new</code> function to create an\ninstance of <code class=\"hljs\">Post</code>, as shown in Listing 17-12. We‚Äôll also make a private\n<code class=\"hljs\">State</code> trait that will define the behavior that all state objects for a <code class=\"hljs\">Post</code>\nmust have.</p>\n<p>Then <code class=\"hljs\">Post</code> will hold a trait object of <code class=\"hljs\">Box&lt;dyn State&gt;</code> inside an <code class=\"hljs\">Option&lt;T&gt;</code>\nin a private field named <code class=\"hljs\">state</code> to hold the state object. You‚Äôll see why the\n<code class=\"hljs\">Option&lt;T&gt;</code> is necessary in a bit.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust noplayground hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Post</span></span> {\n    state: <span class=\"hljs-built_in\">Option</span>&lt;<span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt;&gt;,\n    content: <span class=\"hljs-built_in\">String</span>,\n}\n\n<span class=\"hljs-keyword\">impl</span> Post {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>() -&gt; Post {\n        Post {\n            state: <span class=\"hljs-literal\">Some</span>(<span class=\"hljs-built_in\">Box</span>::new(Draft {})),\n            content: <span class=\"hljs-built_in\">String</span>::new(),\n        }\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">State</span></span> {}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Draft</span></span> {}\n\n<span class=\"hljs-keyword\">impl</span> State <span class=\"hljs-keyword\">for</span> Draft {}</code></pre>\n<p><span class=\"caption\">Listing 17-12: Definition of a <code class=\"hljs\">Post</code> struct and a <code class=\"hljs\">new</code>\nfunction that creates a new <code class=\"hljs\">Post</code> instance, a <code class=\"hljs\">State</code> trait, and a <code class=\"hljs\">Draft</code>\nstruct</span></p>\n<p>The <code class=\"hljs\">State</code> trait defines the behavior shared by different post states. The\nstate objects are <code class=\"hljs\">Draft</code>, <code class=\"hljs\">PendingReview</code>, and <code class=\"hljs\">Published</code>, and they will all\nimplement the <code class=\"hljs\">State</code> trait. For now, the trait doesn‚Äôt have any methods, and\nwe‚Äôll start by defining just the <code class=\"hljs\">Draft</code> state because that is the state we\nwant a post to start in.</p>\n<p>When we create a new <code class=\"hljs\">Post</code>, we set its <code class=\"hljs\">state</code> field to a <code class=\"hljs\">Some</code> value that\nholds a <code class=\"hljs\">Box</code>. This <code class=\"hljs\">Box</code> points to a new instance of the <code class=\"hljs\">Draft</code> struct.\nThis ensures whenever we create a new instance of <code class=\"hljs\">Post</code>, it will start out as\na draft. Because the <code class=\"hljs\">state</code> field of <code class=\"hljs\">Post</code> is private, there is no way to\ncreate a <code class=\"hljs\">Post</code> in any other state! In the <code class=\"hljs\">Post::new</code> function, we set the\n<code class=\"hljs\">content</code> field to a new, empty <code class=\"hljs\">String</code>.</p>\n<h3 id=\"storing-the-text-of-the-post-content\"><a class=\"header\" href=\"#storing-the-text-of-the-post-content\">Storing the Text of the Post Content</a></h3>\n<p>We saw in Listing 17-11 that we want to be able to call a method named\n<code class=\"hljs\">add_text</code> and pass it a <code class=\"hljs\">&amp;str</code> that is then added as the text content of the\nblog post. We implement this as a method, rather than exposing the <code class=\"hljs\">content</code>\nfield as <code class=\"hljs\">pub</code>, so that later we can implement a method that will control how\nthe <code class=\"hljs\">content</code> field‚Äôs data is read. The <code class=\"hljs\">add_text</code> method is pretty\nstraightforward, so let‚Äôs add the implementation in Listing 17-13 to the <code class=\"hljs\">impl Post</code> block:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Post</span></span> {\n</span><span class=\"boring\">    state: <span class=\"hljs-built_in\">Option</span>&lt;<span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt;&gt;,\n</span><span class=\"boring\">    content: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">impl</span> Post {\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>() -&gt; Post {\n</span><span class=\"boring\">        Post {\n</span><span class=\"boring\">            state: <span class=\"hljs-literal\">Some</span>(<span class=\"hljs-built_in\">Box</span>::new(Draft {})),\n</span><span class=\"boring\">            content: <span class=\"hljs-built_in\">String</span>::new(),\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span>    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add_text</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, text: &amp;<span class=\"hljs-built_in\">str</span>) {\n        <span class=\"hljs-keyword\">self</span>.content.push_str(text);\n    }\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">State</span></span> {}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Draft</span></span> {}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> State <span class=\"hljs-keyword\">for</span> Draft {}</span></code></pre>\n<p><span class=\"caption\">Listing 17-13: Implementing the <code class=\"hljs\">add_text</code> method to add\ntext to a post‚Äôs <code class=\"hljs\">content</code></span></p>\n<p>The <code class=\"hljs\">add_text</code> method takes a mutable reference to <code class=\"hljs\">self</code>, because we‚Äôre\nchanging the <code class=\"hljs\">Post</code> instance that we‚Äôre calling <code class=\"hljs\">add_text</code> on. We then call\n<code class=\"hljs\">push_str</code> on the <code class=\"hljs\">String</code> in <code class=\"hljs\">content</code> and pass the <code class=\"hljs\">text</code> argument to add to\nthe saved <code class=\"hljs\">content</code>. This behavior doesn‚Äôt depend on the state the post is in,\nso it‚Äôs not part of the state pattern. The <code class=\"hljs\">add_text</code> method doesn‚Äôt interact\nwith the <code class=\"hljs\">state</code> field at all, but it is part of the behavior we want to\nsupport.</p>\n<h3 id=\"ensuring-the-content-of-a-draft-post-is-empty\"><a class=\"header\" href=\"#ensuring-the-content-of-a-draft-post-is-empty\">Ensuring the Content of a Draft Post Is Empty</a></h3>\n<p>Even after we‚Äôve called <code class=\"hljs\">add_text</code> and added some content to our post, we still\nwant the <code class=\"hljs\">content</code> method to return an empty string slice because the post is\nstill in the draft state, as shown on line 7 of Listing 17-11. For now, let‚Äôs\nimplement the <code class=\"hljs\">content</code> method with the simplest thing that will fulfill this\nrequirement: always returning an empty string slice. We‚Äôll change this later\nonce we implement the ability to change a post‚Äôs state so it can be published.\nSo far, posts can only be in the draft state, so the post content should always\nbe empty. Listing 17-14 shows this placeholder implementation:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Post</span></span> {\n</span><span class=\"boring\">    state: <span class=\"hljs-built_in\">Option</span>&lt;<span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt;&gt;,\n</span><span class=\"boring\">    content: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">impl</span> Post {\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>() -&gt; Post {\n</span><span class=\"boring\">        Post {\n</span><span class=\"boring\">            state: <span class=\"hljs-literal\">Some</span>(<span class=\"hljs-built_in\">Box</span>::new(Draft {})),\n</span><span class=\"boring\">            content: <span class=\"hljs-built_in\">String</span>::new(),\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add_text</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, text: &amp;<span class=\"hljs-built_in\">str</span>) {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">self</span>.content.push_str(text);\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span>    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">content</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; &amp;<span class=\"hljs-built_in\">str</span> {\n        <span class=\"hljs-string\">\"\"</span>\n    }\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">State</span></span> {}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Draft</span></span> {}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> State <span class=\"hljs-keyword\">for</span> Draft {}</span></code></pre>\n<p><span class=\"caption\">Listing 17-14: Adding a placeholder implementation for\nthe <code class=\"hljs\">content</code> method on <code class=\"hljs\">Post</code> that always returns an empty string slice</span></p>\n<p>With this added <code class=\"hljs\">content</code> method, everything in Listing 17-11 up to line 7\nworks as intended.</p>\n<h3 id=\"requesting-a-review-of-the-post-changes-its-state\"><a class=\"header\" href=\"#requesting-a-review-of-the-post-changes-its-state\">Requesting a Review of the Post Changes Its State</a></h3>\n<p>Next, we need to add functionality to request a review of a post, which should\nchange its state from <code class=\"hljs\">Draft</code> to <code class=\"hljs\">PendingReview</code>. Listing 17-15 shows this code:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Post</span></span> {\n</span><span class=\"boring\">    state: <span class=\"hljs-built_in\">Option</span>&lt;<span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt;&gt;,\n</span><span class=\"boring\">    content: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">impl</span> Post {\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>() -&gt; Post {\n</span><span class=\"boring\">        Post {\n</span><span class=\"boring\">            state: <span class=\"hljs-literal\">Some</span>(<span class=\"hljs-built_in\">Box</span>::new(Draft {})),\n</span><span class=\"boring\">            content: <span class=\"hljs-built_in\">String</span>::new(),\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add_text</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, text: &amp;<span class=\"hljs-built_in\">str</span>) {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">self</span>.content.push_str(text);\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">content</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; &amp;<span class=\"hljs-built_in\">str</span> {\n</span><span class=\"boring\">        <span class=\"hljs-string\">\"\"</span>\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span>    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">request_review</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-literal\">Some</span>(s) = <span class=\"hljs-keyword\">self</span>.state.take() {\n            <span class=\"hljs-keyword\">self</span>.state = <span class=\"hljs-literal\">Some</span>(s.request_review())\n        }\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">State</span></span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">request_review</span></span>(<span class=\"hljs-keyword\">self</span>: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;) -&gt; <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt;;\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Draft</span></span> {}\n\n<span class=\"hljs-keyword\">impl</span> State <span class=\"hljs-keyword\">for</span> Draft {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">request_review</span></span>(<span class=\"hljs-keyword\">self</span>: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;) -&gt; <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt; {\n        <span class=\"hljs-built_in\">Box</span>::new(PendingReview {})\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">PendingReview</span></span> {}\n\n<span class=\"hljs-keyword\">impl</span> State <span class=\"hljs-keyword\">for</span> PendingReview {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">request_review</span></span>(<span class=\"hljs-keyword\">self</span>: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;) -&gt; <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt; {\n        <span class=\"hljs-keyword\">self</span>\n    }\n}</code></pre>\n<p><span class=\"caption\">Listing 17-15: Implementing <code class=\"hljs\">request_review</code> methods on\n<code class=\"hljs\">Post</code> and the <code class=\"hljs\">State</code> trait</span></p>\n<p>We give <code class=\"hljs\">Post</code> a public method named <code class=\"hljs\">request_review</code> that will take a mutable\nreference to <code class=\"hljs\">self</code>. Then we call an internal <code class=\"hljs\">request_review</code> method on the\ncurrent state of <code class=\"hljs\">Post</code>, and this second <code class=\"hljs\">request_review</code> method consumes the\ncurrent state and returns a new state.</p>\n<p>We add the <code class=\"hljs\">request_review</code> method to the <code class=\"hljs\">State</code> trait; all types that\nimplement the trait will now need to implement the <code class=\"hljs\">request_review</code> method.\nNote that rather than having <code class=\"hljs\">self</code>, <code class=\"hljs\">&amp;self</code>, or <code class=\"hljs\">&amp;mut self</code> as the first\nparameter of the method, we have <code class=\"hljs\">self: Box&lt;Self&gt;</code>. This syntax means the\nmethod is only valid when called on a <code class=\"hljs\">Box</code> holding the type. This syntax takes\nownership of <code class=\"hljs\">Box&lt;Self&gt;</code>, invalidating the old state so the state value of the\n<code class=\"hljs\">Post</code> can transform into a new state.</p>\n<p>To consume the old state, the <code class=\"hljs\">request_review</code> method needs to take ownership\nof the state value. This is where the <code class=\"hljs\">Option</code> in the <code class=\"hljs\">state</code> field of <code class=\"hljs\">Post</code>\ncomes in: we call the <code class=\"hljs\">take</code> method to take the <code class=\"hljs\">Some</code> value out of the <code class=\"hljs\">state</code>\nfield and leave a <code class=\"hljs\">None</code> in its place, because Rust doesn‚Äôt let us have\nunpopulated fields in structs. This lets us move the <code class=\"hljs\">state</code> value out of\n<code class=\"hljs\">Post</code> rather than borrowing it. Then we‚Äôll set the post‚Äôs <code class=\"hljs\">state</code> value to the\nresult of this operation.</p>\n<p>We need to set <code class=\"hljs\">state</code> to <code class=\"hljs\">None</code> temporarily rather than setting it directly\nwith code like <code class=\"hljs\">self.state = self.state.request_review();</code> to get ownership of\nthe <code class=\"hljs\">state</code> value. This ensures <code class=\"hljs\">Post</code> can‚Äôt use the old <code class=\"hljs\">state</code> value after\nwe‚Äôve transformed it into a new state.</p>\n<p>The <code class=\"hljs\">request_review</code> method on <code class=\"hljs\">Draft</code> returns a new, boxed instance of a new\n<code class=\"hljs\">PendingReview</code> struct, which represents the state when a post is waiting for a\nreview. The <code class=\"hljs\">PendingReview</code> struct also implements the <code class=\"hljs\">request_review</code> method\nbut doesn‚Äôt do any transformations. Rather, it returns itself, because when we\nrequest a review on a post already in the <code class=\"hljs\">PendingReview</code> state, it should stay\nin the <code class=\"hljs\">PendingReview</code> state.</p>\n<p>Now we can start seeing the advantages of the state pattern: the\n<code class=\"hljs\">request_review</code> method on <code class=\"hljs\">Post</code> is the same no matter its <code class=\"hljs\">state</code> value. Each\nstate is responsible for its own rules.</p>\n<p>We‚Äôll leave the <code class=\"hljs\">content</code> method on <code class=\"hljs\">Post</code> as is, returning an empty string\nslice. We can now have a <code class=\"hljs\">Post</code> in the <code class=\"hljs\">PendingReview</code> state as well as in the\n<code class=\"hljs\">Draft</code> state, but we want the same behavior in the <code class=\"hljs\">PendingReview</code> state.\nListing 17-11 now works up to line 10!</p>\n<!-- Old headings. Do not remove or links may break. -->\n<p><a id=\"adding-the-approve-method-that-changes-the-behavior-of-content\"></a></p>\n<h3 id=\"adding-approve-to-change-the-behavior-of-content\"><a class=\"header\" href=\"#adding-approve-to-change-the-behavior-of-content\">Adding <code>approve</code> to Change the Behavior of <code>content</code></a></h3>\n<p>The <code class=\"hljs\">approve</code> method will be similar to the <code class=\"hljs\">request_review</code> method: it will\nset <code class=\"hljs\">state</code> to the value that the current state says it should have when that\nstate is approved, as shown in Listing 17-16:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Post</span></span> {\n</span><span class=\"boring\">    state: <span class=\"hljs-built_in\">Option</span>&lt;<span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt;&gt;,\n</span><span class=\"boring\">    content: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">impl</span> Post {\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>() -&gt; Post {\n</span><span class=\"boring\">        Post {\n</span><span class=\"boring\">            state: <span class=\"hljs-literal\">Some</span>(<span class=\"hljs-built_in\">Box</span>::new(Draft {})),\n</span><span class=\"boring\">            content: <span class=\"hljs-built_in\">String</span>::new(),\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add_text</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, text: &amp;<span class=\"hljs-built_in\">str</span>) {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">self</span>.content.push_str(text);\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">content</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; &amp;<span class=\"hljs-built_in\">str</span> {\n</span><span class=\"boring\">        <span class=\"hljs-string\">\"\"</span>\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">request_review</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-literal\">Some</span>(s) = <span class=\"hljs-keyword\">self</span>.state.take() {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">self</span>.state = <span class=\"hljs-literal\">Some</span>(s.request_review())\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span>    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">approve</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-literal\">Some</span>(s) = <span class=\"hljs-keyword\">self</span>.state.take() {\n            <span class=\"hljs-keyword\">self</span>.state = <span class=\"hljs-literal\">Some</span>(s.approve())\n        }\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">State</span></span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">request_review</span></span>(<span class=\"hljs-keyword\">self</span>: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;) -&gt; <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt;;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">approve</span></span>(<span class=\"hljs-keyword\">self</span>: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;) -&gt; <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt;;\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Draft</span></span> {}\n\n<span class=\"hljs-keyword\">impl</span> State <span class=\"hljs-keyword\">for</span> Draft {\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">request_review</span></span>(<span class=\"hljs-keyword\">self</span>: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;) -&gt; <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt; {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">Box</span>::new(PendingReview {})\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">approve</span></span>(<span class=\"hljs-keyword\">self</span>: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;) -&gt; <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt; {\n        <span class=\"hljs-keyword\">self</span>\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">PendingReview</span></span> {}\n\n<span class=\"hljs-keyword\">impl</span> State <span class=\"hljs-keyword\">for</span> PendingReview {\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">request_review</span></span>(<span class=\"hljs-keyword\">self</span>: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;) -&gt; <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt; {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">self</span>\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">approve</span></span>(<span class=\"hljs-keyword\">self</span>: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;) -&gt; <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt; {\n        <span class=\"hljs-built_in\">Box</span>::new(Published {})\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Published</span></span> {}\n\n<span class=\"hljs-keyword\">impl</span> State <span class=\"hljs-keyword\">for</span> Published {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">request_review</span></span>(<span class=\"hljs-keyword\">self</span>: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;) -&gt; <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt; {\n        <span class=\"hljs-keyword\">self</span>\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">approve</span></span>(<span class=\"hljs-keyword\">self</span>: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;) -&gt; <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt; {\n        <span class=\"hljs-keyword\">self</span>\n    }\n}</code></pre>\n<p><span class=\"caption\">Listing 17-16: Implementing the <code class=\"hljs\">approve</code> method on\n<code class=\"hljs\">Post</code> and the <code class=\"hljs\">State</code> trait</span></p>\n<p>We add the <code class=\"hljs\">approve</code> method to the <code class=\"hljs\">State</code> trait and add a new struct that\nimplements <code class=\"hljs\">State</code>, the <code class=\"hljs\">Published</code> state.</p>\n<p>Similar to the way <code class=\"hljs\">request_review</code> on <code class=\"hljs\">PendingReview</code> works, if we call the\n<code class=\"hljs\">approve</code> method on a <code class=\"hljs\">Draft</code>, it will have no effect because <code class=\"hljs\">approve</code> will\nreturn <code class=\"hljs\">self</code>. When we call <code class=\"hljs\">approve</code> on <code class=\"hljs\">PendingReview</code>, it returns a new,\nboxed instance of the <code class=\"hljs\">Published</code> struct. The <code class=\"hljs\">Published</code> struct implements the\n<code class=\"hljs\">State</code> trait, and for both the <code class=\"hljs\">request_review</code> method and the <code class=\"hljs\">approve</code>\nmethod, it returns itself, because the post should stay in the <code class=\"hljs\">Published</code>\nstate in those cases.</p>\n<p>Now we need to update the <code class=\"hljs\">content</code> method on <code class=\"hljs\">Post</code>. We want the value\nreturned from <code class=\"hljs\">content</code> to depend on the current state of the <code class=\"hljs\">Post</code>, so we‚Äôre\ngoing to have the <code class=\"hljs\">Post</code> delegate to a <code class=\"hljs\">content</code> method defined on its <code class=\"hljs\">state</code>,\nas shown in Listing 17-17:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Post</span></span> {\n</span><span class=\"boring\">    state: <span class=\"hljs-built_in\">Option</span>&lt;<span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt;&gt;,\n</span><span class=\"boring\">    content: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">impl</span> Post {\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>() -&gt; Post {\n</span><span class=\"boring\">        Post {\n</span><span class=\"boring\">            state: <span class=\"hljs-literal\">Some</span>(<span class=\"hljs-built_in\">Box</span>::new(Draft {})),\n</span><span class=\"boring\">            content: <span class=\"hljs-built_in\">String</span>::new(),\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add_text</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, text: &amp;<span class=\"hljs-built_in\">str</span>) {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">self</span>.content.push_str(text);\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span>    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">content</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; &amp;<span class=\"hljs-built_in\">str</span> {\n        <span class=\"hljs-keyword\">self</span>.state.as_ref().unwrap().content(<span class=\"hljs-keyword\">self</span>)\n    }\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">request_review</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-literal\">Some</span>(s) = <span class=\"hljs-keyword\">self</span>.state.take() {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">self</span>.state = <span class=\"hljs-literal\">Some</span>(s.request_review())\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">approve</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-literal\">Some</span>(s) = <span class=\"hljs-keyword\">self</span>.state.take() {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">self</span>.state = <span class=\"hljs-literal\">Some</span>(s.approve())\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span>}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">State</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">request_review</span></span>(<span class=\"hljs-keyword\">self</span>: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;) -&gt; <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt;;\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">approve</span></span>(<span class=\"hljs-keyword\">self</span>: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;) -&gt; <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt;;\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Draft</span></span> {}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> State <span class=\"hljs-keyword\">for</span> Draft {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">request_review</span></span>(<span class=\"hljs-keyword\">self</span>: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;) -&gt; <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt; {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">Box</span>::new(PendingReview {})\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">approve</span></span>(<span class=\"hljs-keyword\">self</span>: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;) -&gt; <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt; {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">self</span>\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">PendingReview</span></span> {}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> State <span class=\"hljs-keyword\">for</span> PendingReview {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">request_review</span></span>(<span class=\"hljs-keyword\">self</span>: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;) -&gt; <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt; {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">self</span>\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">approve</span></span>(<span class=\"hljs-keyword\">self</span>: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;) -&gt; <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt; {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">Box</span>::new(Published {})\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Published</span></span> {}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> State <span class=\"hljs-keyword\">for</span> Published {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">request_review</span></span>(<span class=\"hljs-keyword\">self</span>: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;) -&gt; <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt; {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">self</span>\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">approve</span></span>(<span class=\"hljs-keyword\">self</span>: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;) -&gt; <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt; {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">self</span>\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre>\n<p><span class=\"caption\">Listing 17-17: Updating the <code class=\"hljs\">content</code> method on <code class=\"hljs\">Post</code> to\ndelegate to a <code class=\"hljs\">content</code> method on <code class=\"hljs\">State</code></span></p>\n<p>Because the goal is to keep all these rules inside the structs that implement\n<code class=\"hljs\">State</code>, we call a <code class=\"hljs\">content</code> method on the value in <code class=\"hljs\">state</code> and pass the post\ninstance (that is, <code class=\"hljs\">self</code>) as an argument. Then we return the value that‚Äôs\nreturned from using the <code class=\"hljs\">content</code> method on the <code class=\"hljs\">state</code> value.</p>\n<p>We call the <code class=\"hljs\">as_ref</code> method on the <code class=\"hljs\">Option</code> because we want a reference to the\nvalue inside the <code class=\"hljs\">Option</code> rather than ownership of the value. Because <code class=\"hljs\">state</code>\nis an <code class=\"hljs\">Option&lt;Box&lt;dyn State&gt;&gt;</code>, when we call <code class=\"hljs\">as_ref</code>, an <code class=\"hljs\">Option&lt;&amp;Box&lt;dyn State&gt;&gt;</code> is returned. If we didn‚Äôt call <code class=\"hljs\">as_ref</code>, we would get an error because\nwe can‚Äôt move <code class=\"hljs\">state</code> out of the borrowed <code class=\"hljs\">&amp;self</code> of the function parameter.</p>\n<p>We then call the <code class=\"hljs\">unwrap</code> method, which we know will never panic, because we\nknow the methods on <code class=\"hljs\">Post</code> ensure that <code class=\"hljs\">state</code> will always contain a <code class=\"hljs\">Some</code>\nvalue when those methods are done. This is one of the cases we talked about in\nthe <a href=\"ch09-03-to-panic-or-not-to-panic.html#cases-in-which-you-have-more-information-than-the-compiler\">‚ÄúCases In Which You Have More Information Than the\nCompiler‚Äù</a><!-- ignore --> section of Chapter 9 when we\nknow that a <code class=\"hljs\">None</code> value is never possible, even though the compiler isn‚Äôt able\nto understand that.</p>\n<p>At this point, when we call <code class=\"hljs\">content</code> on the <code class=\"hljs\">&amp;Box&lt;dyn State&gt;</code>, deref coercion\nwill take effect on the <code class=\"hljs\">&amp;</code> and the <code class=\"hljs\">Box</code> so the <code class=\"hljs\">content</code> method will\nultimately be called on the type that implements the <code class=\"hljs\">State</code> trait. That means\nwe need to add <code class=\"hljs\">content</code> to the <code class=\"hljs\">State</code> trait definition, and that is where\nwe‚Äôll put the logic for what content to return depending on which state we\nhave, as shown in Listing 17-18:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Post</span></span> {\n</span><span class=\"boring\">    state: <span class=\"hljs-built_in\">Option</span>&lt;<span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt;&gt;,\n</span><span class=\"boring\">    content: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Post {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>() -&gt; Post {\n</span><span class=\"boring\">        Post {\n</span><span class=\"boring\">            state: <span class=\"hljs-literal\">Some</span>(<span class=\"hljs-built_in\">Box</span>::new(Draft {})),\n</span><span class=\"boring\">            content: <span class=\"hljs-built_in\">String</span>::new(),\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add_text</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, text: &amp;<span class=\"hljs-built_in\">str</span>) {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">self</span>.content.push_str(text);\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">content</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; &amp;<span class=\"hljs-built_in\">str</span> {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">self</span>.state.as_ref().unwrap().content(<span class=\"hljs-keyword\">self</span>)\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">request_review</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-literal\">Some</span>(s) = <span class=\"hljs-keyword\">self</span>.state.take() {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">self</span>.state = <span class=\"hljs-literal\">Some</span>(s.request_review())\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">approve</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-literal\">Some</span>(s) = <span class=\"hljs-keyword\">self</span>.state.take() {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">self</span>.state = <span class=\"hljs-literal\">Some</span>(s.approve())\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">State</span></span> {\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">request_review</span></span>(<span class=\"hljs-keyword\">self</span>: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;) -&gt; <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt;;\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">approve</span></span>(<span class=\"hljs-keyword\">self</span>: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;) -&gt; <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt;;\n</span><span class=\"boring\">\n</span>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">content</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(&amp;<span class=\"hljs-keyword\">self</span>, post: &amp;<span class=\"hljs-symbol\">'a</span> Post) -&gt; &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span> {\n        <span class=\"hljs-string\">\"\"</span>\n    }\n}\n\n<span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Draft</span></span> {}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> State <span class=\"hljs-keyword\">for</span> Draft {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">request_review</span></span>(<span class=\"hljs-keyword\">self</span>: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;) -&gt; <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt; {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">Box</span>::new(PendingReview {})\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">approve</span></span>(<span class=\"hljs-keyword\">self</span>: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;) -&gt; <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt; {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">self</span>\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">PendingReview</span></span> {}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> State <span class=\"hljs-keyword\">for</span> PendingReview {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">request_review</span></span>(<span class=\"hljs-keyword\">self</span>: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;) -&gt; <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt; {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">self</span>\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">approve</span></span>(<span class=\"hljs-keyword\">self</span>: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;) -&gt; <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt; {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">Box</span>::new(Published {})\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Published</span></span> {}\n\n<span class=\"hljs-keyword\">impl</span> State <span class=\"hljs-keyword\">for</span> Published {\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">request_review</span></span>(<span class=\"hljs-keyword\">self</span>: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;) -&gt; <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt; {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">self</span>\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">approve</span></span>(<span class=\"hljs-keyword\">self</span>: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">Self</span>&gt;) -&gt; <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> State&gt; {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">self</span>\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">content</span></span>&lt;<span class=\"hljs-symbol\">'a</span>&gt;(&amp;<span class=\"hljs-keyword\">self</span>, post: &amp;<span class=\"hljs-symbol\">'a</span> Post) -&gt; &amp;<span class=\"hljs-symbol\">'a</span> <span class=\"hljs-built_in\">str</span> {\n        &amp;post.content\n    }\n}</code></pre>\n<p><span class=\"caption\">Listing 17-18: Adding the <code class=\"hljs\">content</code> method to the <code class=\"hljs\">State</code>\ntrait</span></p>\n<p>We add a default implementation for the <code class=\"hljs\">content</code> method that returns an empty\nstring slice. That means we don‚Äôt need to implement <code class=\"hljs\">content</code> on the <code class=\"hljs\">Draft</code>\nand <code class=\"hljs\">PendingReview</code> structs. The <code class=\"hljs\">Published</code> struct will override the <code class=\"hljs\">content</code>\nmethod and return the value in <code class=\"hljs\">post.content</code>.</p>\n<p>Note that we need lifetime annotations on this method, as we discussed in\nChapter 10. We‚Äôre taking a reference to a <code class=\"hljs\">post</code> as an argument and returning a\nreference to part of that <code class=\"hljs\">post</code>, so the lifetime of the returned reference is\nrelated to the lifetime of the <code class=\"hljs\">post</code> argument.</p>\n<p>And we‚Äôre done‚Äîall of Listing 17-11 now works! We‚Äôve implemented the state\npattern with the rules of the blog post workflow. The logic related to the\nrules lives in the state objects rather than being scattered throughout <code class=\"hljs\">Post</code>.</p>\n<section class=\"note\" aria-role=\"note\">\n<h4 id=\"why-not-an-enum\"><a class=\"header\" href=\"#why-not-an-enum\">Why Not An Enum?</a></h4>\n<p>You may have been wondering why we didn‚Äôt use an <code class=\"hljs\">enum</code> with the different\npossible post states as variants. That‚Äôs certainly a possible solution, try\nit and compare the end results to see which you prefer! One disadvantage of\nusing an enum is every place that checks the value of the enum will need a\n<code class=\"hljs\">match</code> expression or similar to handle every possible variant. This could\nget more repetitive than this trait object solution.</p>\n</section>\n<h3 id=\"trade-offs-of-the-state-pattern\"><a class=\"header\" href=\"#trade-offs-of-the-state-pattern\">Trade-offs of the State Pattern</a></h3>\n<p>We‚Äôve shown that Rust is capable of implementing the object-oriented state\npattern to encapsulate the different kinds of behavior a post should have in\neach state. The methods on <code class=\"hljs\">Post</code> know nothing about the various behaviors. The\nway we organized the code, we have to look in only one place to know the\ndifferent ways a published post can behave: the implementation of the <code class=\"hljs\">State</code>\ntrait on the <code class=\"hljs\">Published</code> struct.</p>\n<p>If we were to create an alternative implementation that didn‚Äôt use the state\npattern, we might instead use <code class=\"hljs\">match</code> expressions in the methods on <code class=\"hljs\">Post</code> or\neven in the <code class=\"hljs\">main</code> code that checks the state of the post and changes behavior\nin those places. That would mean we would have to look in several places to\nunderstand all the implications of a post being in the published state! This\nwould only increase the more states we added: each of those <code class=\"hljs\">match</code> expressions\nwould need another arm.</p>\n<p>With the state pattern, the <code class=\"hljs\">Post</code> methods and the places we use <code class=\"hljs\">Post</code> don‚Äôt\nneed <code class=\"hljs\">match</code> expressions, and to add a new state, we would only need to add a\nnew struct and implement the trait methods on that one struct.</p>\n<p>The implementation using the state pattern is easy to extend to add more\nfunctionality. To see the simplicity of maintaining code that uses the state\npattern, try a few of these suggestions:</p>\n<ul>\n<li>Add a <code class=\"hljs\">reject</code> method that changes the post‚Äôs state from <code class=\"hljs\">PendingReview</code> back\nto <code class=\"hljs\">Draft</code>.</li>\n<li>Require two calls to <code class=\"hljs\">approve</code> before the state can be changed to <code class=\"hljs\">Published</code>.</li>\n<li>Allow users to add text content only when a post is in the <code class=\"hljs\">Draft</code> state.\nHint: have the state object responsible for what might change about the\ncontent but not responsible for modifying the <code class=\"hljs\">Post</code>.</li>\n</ul>\n<p>One downside of the state pattern is that, because the states implement the\ntransitions between states, some of the states are coupled to each other. If we\nadd another state between <code class=\"hljs\">PendingReview</code> and <code class=\"hljs\">Published</code>, such as <code class=\"hljs\">Scheduled</code>,\nwe would have to change the code in <code class=\"hljs\">PendingReview</code> to transition to\n<code class=\"hljs\">Scheduled</code> instead. It would be less work if <code class=\"hljs\">PendingReview</code> didn‚Äôt need to\nchange with the addition of a new state, but that would mean switching to\nanother design pattern.</p>\n<p>Another downside is that we‚Äôve duplicated some logic. To eliminate some of the\nduplication, we might try to make default implementations for the\n<code class=\"hljs\">request_review</code> and <code class=\"hljs\">approve</code> methods on the <code class=\"hljs\">State</code> trait that return <code class=\"hljs\">self</code>;\nhowever, this would violate object safety, because the trait doesn‚Äôt know what\nthe concrete <code class=\"hljs\">self</code> will be exactly. We want to be able to use <code class=\"hljs\">State</code> as a\ntrait object, so we need its methods to be object safe.</p>\n<p>Other duplication includes the similar implementations of the <code class=\"hljs\">request_review</code>\nand <code class=\"hljs\">approve</code> methods on <code class=\"hljs\">Post</code>. Both methods delegate to the implementation of\nthe same method on the value in the <code class=\"hljs\">state</code> field of <code class=\"hljs\">Option</code> and set the new\nvalue of the <code class=\"hljs\">state</code> field to the result. If we had a lot of methods on <code class=\"hljs\">Post</code>\nthat followed this pattern, we might consider defining a macro to eliminate the\nrepetition (see the <a href=\"ch19-06-macros.html#macros\">‚ÄúMacros‚Äù</a><!-- ignore --> section in Chapter 19).</p>\n<p>By implementing the state pattern exactly as it‚Äôs defined for object-oriented\nlanguages, we‚Äôre not taking as full advantage of Rust‚Äôs strengths as we could.\nLet‚Äôs look at some changes we can make to the <code class=\"hljs\">blog</code> crate that can make\ninvalid states and transitions into compile time errors.</p>\n<h4 id=\"encoding-states-and-behavior-as-types\"><a class=\"header\" href=\"#encoding-states-and-behavior-as-types\">Encoding States and Behavior as Types</a></h4>\n<p>We‚Äôll show you how to rethink the state pattern to get a different set of\ntrade-offs. Rather than encapsulating the states and transitions completely so\noutside code has no knowledge of them, we‚Äôll encode the states into different\ntypes. Consequently, Rust‚Äôs type checking system will prevent attempts to use\ndraft posts where only published posts are allowed by issuing a compiler error.</p>\n<p>Let‚Äôs consider the first part of <code class=\"hljs\">main</code> in Listing 17-11:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> blog::Post;\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> post = Post::new();\n\n    post.add_text(<span class=\"hljs-string\">\"I ate a salad for lunch today\"</span>);\n    <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-string\">\"\"</span>, post.content());\n<span class=\"boring\">\n</span><span class=\"boring\">    post.request_review();\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-string\">\"\"</span>, post.content());\n</span><span class=\"boring\">\n</span><span class=\"boring\">    post.approve();\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-string\">\"I ate a salad for lunch today\"</span>, post.content());\n</span>}</code></pre>\n<p>We still enable the creation of new posts in the draft state using <code class=\"hljs\">Post::new</code>\nand the ability to add text to the post‚Äôs content. But instead of having a\n<code class=\"hljs\">content</code> method on a draft post that returns an empty string, we‚Äôll make it so\ndraft posts don‚Äôt have the <code class=\"hljs\">content</code> method at all. That way, if we try to get\na draft post‚Äôs content, we‚Äôll get a compiler error telling us the method\ndoesn‚Äôt exist. As a result, it will be impossible for us to accidentally\ndisplay draft post content in production, because that code won‚Äôt even compile.\nListing 17-19 shows the definition of a <code class=\"hljs\">Post</code> struct and a <code class=\"hljs\">DraftPost</code> struct,\nas well as methods on each:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust noplayground hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Post</span></span> {\n    content: <span class=\"hljs-built_in\">String</span>,\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">DraftPost</span></span> {\n    content: <span class=\"hljs-built_in\">String</span>,\n}\n\n<span class=\"hljs-keyword\">impl</span> Post {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>() -&gt; DraftPost {\n        DraftPost {\n            content: <span class=\"hljs-built_in\">String</span>::new(),\n        }\n    }\n\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">content</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; &amp;<span class=\"hljs-built_in\">str</span> {\n        &amp;<span class=\"hljs-keyword\">self</span>.content\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span> DraftPost {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add_text</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, text: &amp;<span class=\"hljs-built_in\">str</span>) {\n        <span class=\"hljs-keyword\">self</span>.content.push_str(text);\n    }\n}</code></pre>\n<p><span class=\"caption\">Listing 17-19: A <code class=\"hljs\">Post</code> with a <code class=\"hljs\">content</code> method and a\n<code class=\"hljs\">DraftPost</code> without a <code class=\"hljs\">content</code> method</span></p>\n<p>Both the <code class=\"hljs\">Post</code> and <code class=\"hljs\">DraftPost</code> structs have a private <code class=\"hljs\">content</code> field that\nstores the blog post text. The structs no longer have the <code class=\"hljs\">state</code> field because\nwe‚Äôre moving the encoding of the state to the types of the structs. The <code class=\"hljs\">Post</code>\nstruct will represent a published post, and it has a <code class=\"hljs\">content</code> method that\nreturns the <code class=\"hljs\">content</code>.</p>\n<p>We still have a <code class=\"hljs\">Post::new</code> function, but instead of returning an instance of\n<code class=\"hljs\">Post</code>, it returns an instance of <code class=\"hljs\">DraftPost</code>. Because <code class=\"hljs\">content</code> is private\nand there aren‚Äôt any functions that return <code class=\"hljs\">Post</code>, it‚Äôs not possible to create\nan instance of <code class=\"hljs\">Post</code> right now.</p>\n<p>The <code class=\"hljs\">DraftPost</code> struct has an <code class=\"hljs\">add_text</code> method, so we can add text to\n<code class=\"hljs\">content</code> as before, but note that <code class=\"hljs\">DraftPost</code> does not have a <code class=\"hljs\">content</code> method\ndefined! So now the program ensures all posts start as draft posts, and draft\nposts don‚Äôt have their content available for display. Any attempt to get around\nthese constraints will result in a compiler error.</p>\n<h4 id=\"implementing-transitions-as-transformations-into-different-types\"><a class=\"header\" href=\"#implementing-transitions-as-transformations-into-different-types\">Implementing Transitions as Transformations into Different Types</a></h4>\n<p>So how do we get a published post? We want to enforce the rule that a draft\npost has to be reviewed and approved before it can be published. A post in the\npending review state should still not display any content. Let‚Äôs implement\nthese constraints by adding another struct, <code class=\"hljs\">PendingReviewPost</code>, defining the\n<code class=\"hljs\">request_review</code> method on <code class=\"hljs\">DraftPost</code> to return a <code class=\"hljs\">PendingReviewPost</code>, and\ndefining an <code class=\"hljs\">approve</code> method on <code class=\"hljs\">PendingReviewPost</code> to return a <code class=\"hljs\">Post</code>, as\nshown in Listing 17-20:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Post</span></span> {\n</span><span class=\"boring\">    content: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">DraftPost</span></span> {\n</span><span class=\"boring\">    content: <span class=\"hljs-built_in\">String</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Post {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>() -&gt; DraftPost {\n</span><span class=\"boring\">        DraftPost {\n</span><span class=\"boring\">            content: <span class=\"hljs-built_in\">String</span>::new(),\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">content</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) -&gt; &amp;<span class=\"hljs-built_in\">str</span> {\n</span><span class=\"boring\">        &amp;<span class=\"hljs-keyword\">self</span>.content\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">impl</span> DraftPost {\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add_text</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, text: &amp;<span class=\"hljs-built_in\">str</span>) {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">self</span>.content.push_str(text);\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span>    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">request_review</span></span>(<span class=\"hljs-keyword\">self</span>) -&gt; PendingReviewPost {\n        PendingReviewPost {\n            content: <span class=\"hljs-keyword\">self</span>.content,\n        }\n    }\n}\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">PendingReviewPost</span></span> {\n    content: <span class=\"hljs-built_in\">String</span>,\n}\n\n<span class=\"hljs-keyword\">impl</span> PendingReviewPost {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">approve</span></span>(<span class=\"hljs-keyword\">self</span>) -&gt; Post {\n        Post {\n            content: <span class=\"hljs-keyword\">self</span>.content,\n        }\n    }\n}</code></pre>\n<p><span class=\"caption\">Listing 17-20: A <code class=\"hljs\">PendingReviewPost</code> that gets created by\ncalling <code class=\"hljs\">request_review</code> on <code class=\"hljs\">DraftPost</code> and an <code class=\"hljs\">approve</code> method that turns a\n<code class=\"hljs\">PendingReviewPost</code> into a published <code class=\"hljs\">Post</code></span></p>\n<p>The <code class=\"hljs\">request_review</code> and <code class=\"hljs\">approve</code> methods take ownership of <code class=\"hljs\">self</code>, thus\nconsuming the <code class=\"hljs\">DraftPost</code> and <code class=\"hljs\">PendingReviewPost</code> instances and transforming\nthem into a <code class=\"hljs\">PendingReviewPost</code> and a published <code class=\"hljs\">Post</code>, respectively. This way,\nwe won‚Äôt have any lingering <code class=\"hljs\">DraftPost</code> instances after we‚Äôve called\n<code class=\"hljs\">request_review</code> on them, and so forth. The <code class=\"hljs\">PendingReviewPost</code> struct doesn‚Äôt\nhave a <code class=\"hljs\">content</code> method defined on it, so attempting to read its content\nresults in a compiler error, as with <code class=\"hljs\">DraftPost</code>. Because the only way to get a\npublished <code class=\"hljs\">Post</code> instance that does have a <code class=\"hljs\">content</code> method defined is to call\nthe <code class=\"hljs\">approve</code> method on a <code class=\"hljs\">PendingReviewPost</code>, and the only way to get a\n<code class=\"hljs\">PendingReviewPost</code> is to call the <code class=\"hljs\">request_review</code> method on a <code class=\"hljs\">DraftPost</code>,\nwe‚Äôve now encoded the blog post workflow into the type system.</p>\n<p>But we also have to make some small changes to <code class=\"hljs\">main</code>. The <code class=\"hljs\">request_review</code> and\n<code class=\"hljs\">approve</code> methods return new instances rather than modifying the struct they‚Äôre\ncalled on, so we need to add more <code class=\"hljs\">let post =</code> shadowing assignments to save\nthe returned instances. We also can‚Äôt have the assertions about the draft and\npending review posts‚Äô contents be empty strings, nor do we need them: we can‚Äôt\ncompile code that tries to use the content of posts in those states any longer.\nThe updated code in <code class=\"hljs\">main</code> is shown in Listing 17-21:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">use</span> blog::Post;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> post = Post::new();\n\n    post.add_text(<span class=\"hljs-string\">\"I ate a salad for lunch today\"</span>);\n\n    <span class=\"hljs-keyword\">let</span> post = post.request_review();\n\n    <span class=\"hljs-keyword\">let</span> post = post.approve();\n\n    <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-string\">\"I ate a salad for lunch today\"</span>, post.content());\n}</code></pre>\n<p><span class=\"caption\">Listing 17-21: Modifications to <code class=\"hljs\">main</code> to use the new\nimplementation of the blog post workflow</span></p>\n<p>The changes we needed to make to <code class=\"hljs\">main</code> to reassign <code class=\"hljs\">post</code> mean that this\nimplementation doesn‚Äôt quite follow the object-oriented state pattern anymore:\nthe transformations between the states are no longer encapsulated entirely\nwithin the <code class=\"hljs\">Post</code> implementation. However, our gain is that invalid states are\nnow impossible because of the type system and the type checking that happens at\ncompile time! This ensures that certain bugs, such as display of the content of\nan unpublished post, will be discovered before they make it to production.</p>\n<p>Try the tasks suggested at the start of this section on the <code class=\"hljs\">blog</code> crate as it\nis after Listing 17-21 to see what you think about the design of this version\nof the code. Note that some of the tasks might be completed already in this\ndesign.</p>\n<p>We‚Äôve seen that even though Rust is capable of implementing object-oriented\ndesign patterns, other patterns, such as encoding state into the type system,\nare also available in Rust. These patterns have different trade-offs. Although\nyou might be very familiar with object-oriented patterns, rethinking the\nproblem to take advantage of Rust‚Äôs features can provide benefits, such as\npreventing some bugs at compile time. Object-oriented patterns won‚Äôt always be\nthe best solution in Rust due to certain features, like ownership, that\nobject-oriented languages don‚Äôt have.</p>\n<h2 id=\"summary-16\"><a class=\"header\" href=\"#summary-16\">Summary</a></h2>\n<p>No matter whether or not you think Rust is an object-oriented language after\nreading this chapter, you now know that you can use trait objects to get some\nobject-oriented features in Rust. Dynamic dispatch can give your code some\nflexibility in exchange for a bit of runtime performance. You can use this\nflexibility to implement object-oriented patterns that can help your code‚Äôs\nmaintainability. Rust also has other features, like ownership, that\nobject-oriented languages don‚Äôt have. An object-oriented pattern won‚Äôt always\nbe the best way to take advantage of Rust‚Äôs strengths, but is an available\noption.</p>\n<p>Next, we‚Äôll look at patterns, which are another of Rust‚Äôs features that enable\nlots of flexibility. We‚Äôve looked at them briefly throughout the book but\nhaven‚Äôt seen their full capability yet. Let‚Äôs go!</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"patterns-and-matching\"><a class=\"header\" href=\"#patterns-and-matching\">Patterns and Matching</a></h1>\n<p><em>Patterns</em> are a special syntax in Rust for matching against the structure of\ntypes, both complex and simple. Using patterns in conjunction with <code class=\"hljs\">match</code>\nexpressions and other constructs gives you more control over a program‚Äôs\ncontrol flow. A pattern consists of some combination of the following:</p>\n<ul>\n<li>Literals</li>\n<li>Destructured arrays, enums, structs, or tuples</li>\n<li>Variables</li>\n<li>Wildcards</li>\n<li>Placeholders</li>\n</ul>\n<p>Some example patterns include <code class=\"hljs\">x</code>, <code class=\"hljs\">(a, 3)</code>, and <code class=\"hljs\">Some(Color::Red)</code>. In the\ncontexts in which patterns are valid, these components describe the shape of\ndata. Our program then matches values against the patterns to determine whether\nit has the correct shape of data to continue running a particular piece of code.</p>\n<p>To use a pattern, we compare it to some value. If the pattern matches the\nvalue, we use the value parts in our code. Recall the <code class=\"hljs\">match</code> expressions in\nChapter 6 that used patterns, such as the coin-sorting machine example. If the\nvalue fits the shape of the pattern, we can use the named pieces. If it\ndoesn‚Äôt, the code associated with the pattern won‚Äôt run.</p>\n<p>This chapter is a reference on all things related to patterns. We‚Äôll cover the\nvalid places to use patterns, the difference between refutable and irrefutable\npatterns, and the different kinds of pattern syntax that you might see. By the\nend of the chapter, you‚Äôll know how to use patterns to express many concepts in\na clear way.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"all-the-places-patterns-can-be-used\"><a class=\"header\" href=\"#all-the-places-patterns-can-be-used\">All the Places Patterns Can Be Used</a></h2>\n<p>Patterns pop up in a number of places in Rust, and you‚Äôve been using them a lot\nwithout realizing it! This section discusses all the places where patterns are\nvalid.</p>\n<h3 id=\"match-arms\"><a class=\"header\" href=\"#match-arms\"><code>match</code> Arms</a></h3>\n<p>As discussed in Chapter 6, we use patterns in the arms of <code class=\"hljs\">match</code> expressions.\nFormally, <code class=\"hljs\">match</code> expressions are defined as the keyword <code class=\"hljs\">match</code>, a value to\nmatch on, and one or more match arms that consist of a pattern and an\nexpression to run if the value matches that arm‚Äôs pattern, like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">match VALUE {\n    PATTERN =&gt; EXPRESSION,\n    PATTERN =&gt; EXPRESSION,\n    PATTERN =&gt; EXPRESSION,\n}\n</code></pre>\n<p>For example, here‚Äôs the <code class=\"hljs\">match</code> expression from Listing 6-5 that matches on an\n<code class=\"hljs\">Option&lt;i32&gt;</code> value in the variable <code class=\"hljs\">x</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">match</span> x {\n    <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-literal\">None</span>,\n    <span class=\"hljs-literal\">Some</span>(i) =&gt; <span class=\"hljs-literal\">Some</span>(i + <span class=\"hljs-number\">1</span>),\n}</code></pre>\n<p>The patterns in this <code class=\"hljs\">match</code> expression are the <code class=\"hljs\">None</code> and <code class=\"hljs\">Some(i)</code> on the\nleft of each arrow.</p>\n<p>One requirement for <code class=\"hljs\">match</code> expressions is that they need to be <em>exhaustive</em> in\nthe sense that all possibilities for the value in the <code class=\"hljs\">match</code> expression must\nbe accounted for. One way to ensure you‚Äôve covered every possibility is to have\na catchall pattern for the last arm: for example, a variable name matching any\nvalue can never fail and thus covers every remaining case.</p>\n<p>The particular pattern <code class=\"hljs\">_</code> will match anything, but it never binds to a\nvariable, so it‚Äôs often used in the last match arm. The <code class=\"hljs\">_</code> pattern can be\nuseful when you want to ignore any value not specified, for example. We‚Äôll\ncover the <code class=\"hljs\">_</code> pattern in more detail in the <a href=\"ch18-03-pattern-syntax.html#ignoring-values-in-a-pattern\">‚ÄúIgnoring Values in a\nPattern‚Äù</a><!-- ignore --> section later in this\nchapter.</p>\n<h3 id=\"conditional-if-let-expressions\"><a class=\"header\" href=\"#conditional-if-let-expressions\">Conditional <code>if let</code> Expressions</a></h3>\n<p>In Chapter 6 we discussed how to use <code class=\"hljs\">if let</code> expressions mainly as a shorter\nway to write the equivalent of a <code class=\"hljs\">match</code> that only matches one case.\nOptionally, <code class=\"hljs\">if let</code> can have a corresponding <code class=\"hljs\">else</code> containing code to run if\nthe pattern in the <code class=\"hljs\">if let</code> doesn‚Äôt match.</p>\n<p>Listing 18-1 shows that it‚Äôs also possible to mix and match <code class=\"hljs\">if let</code>, <code class=\"hljs\">else if</code>, and <code class=\"hljs\">else if let</code> expressions. Doing so gives us more flexibility than a\n<code class=\"hljs\">match</code> expression in which we can express only one value to compare with the\npatterns. Also, Rust doesn‚Äôt require that the conditions in a series of <code class=\"hljs\">if let</code>, <code class=\"hljs\">else if</code>, <code class=\"hljs\">else if let</code> arms relate to each other.</p>\n<p>The code in Listing 18-1 determines what color to make your background based on\na series of checks for several conditions. For this example, we‚Äôve created\nvariables with hardcoded values that a real program might receive from user\ninput.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> favorite_color: <span class=\"hljs-built_in\">Option</span>&lt;&amp;<span class=\"hljs-built_in\">str</span>&gt; = <span class=\"hljs-literal\">None</span>;\n    <span class=\"hljs-keyword\">let</span> is_tuesday = <span class=\"hljs-literal\">false</span>;\n    <span class=\"hljs-keyword\">let</span> age: <span class=\"hljs-built_in\">Result</span>&lt;<span class=\"hljs-built_in\">u8</span>, _&gt; = <span class=\"hljs-string\">\"34\"</span>.parse();\n\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-literal\">Some</span>(color) = favorite_color {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Using your favorite color, {color}, as the background\"</span>);\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> is_tuesday {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Tuesday is green day!\"</span>);\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-literal\">Ok</span>(age) = age {\n        <span class=\"hljs-keyword\">if</span> age &gt; <span class=\"hljs-number\">30</span> {\n            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Using purple as the background color\"</span>);\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Using orange as the background color\"</span>);\n        }\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Using blue as the background color\"</span>);\n    }\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 18-1: Mixing <code class=\"hljs\">if let</code>, <code class=\"hljs\">else if</code>, <code class=\"hljs\">else if let</code>,\nand <code class=\"hljs\">else</code></span></p>\n<p>If the user specifies a favorite color, that color is used as the background.\nIf no favorite color is specified and today is Tuesday, the background color is\ngreen. Otherwise, if the user specifies their age as a string and we can parse\nit as a number successfully, the color is either purple or orange depending on\nthe value of the number. If none of these conditions apply, the background\ncolor is blue.</p>\n<p>This conditional structure lets us support complex requirements. With the\nhardcoded values we have here, this example will print <code class=\"hljs\">Using purple as the background color</code>.</p>\n<p>You can see that <code class=\"hljs\">if let</code> can also introduce shadowed variables in the same way\nthat <code class=\"hljs\">match</code> arms can: the line <code class=\"hljs\">if let Ok(age) = age</code> introduces a new\nshadowed <code class=\"hljs\">age</code> variable that contains the value inside the <code class=\"hljs\">Ok</code> variant. This\nmeans we need to place the <code class=\"hljs\">if age &gt; 30</code> condition within that block: we can‚Äôt\ncombine these two conditions into <code class=\"hljs\">if let Ok(age) = age &amp;&amp; age &gt; 30</code>. The\nshadowed <code class=\"hljs\">age</code> we want to compare to 30 isn‚Äôt valid until the new scope starts\nwith the curly bracket.</p>\n<p>The downside of using <code class=\"hljs\">if let</code> expressions is that the compiler doesn‚Äôt check\nfor exhaustiveness, whereas with <code class=\"hljs\">match</code> expressions it does. If we omitted the\nlast <code class=\"hljs\">else</code> block and therefore missed handling some cases, the compiler would\nnot alert us to the possible logic bug.</p>\n<h3 id=\"while-let-conditional-loops\"><a class=\"header\" href=\"#while-let-conditional-loops\"><code>while let</code> Conditional Loops</a></h3>\n<p>Similar in construction to <code class=\"hljs\">if let</code>, the <code class=\"hljs\">while let</code> conditional loop allows a\n<code class=\"hljs\">while</code> loop to run for as long as a pattern continues to match. In Listing\n18-2 we code a <code class=\"hljs\">while let</code> loop that uses a vector as a stack and prints the\nvalues in the vector in the opposite order in which they were pushed.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> stack = <span class=\"hljs-built_in\">Vec</span>::new();\n\n    stack.push(<span class=\"hljs-number\">1</span>);\n    stack.push(<span class=\"hljs-number\">2</span>);\n    stack.push(<span class=\"hljs-number\">3</span>);\n\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-literal\">Some</span>(top) = stack.pop() {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{top}\"</span>);\n    }\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 18-2: Using a <code class=\"hljs\">while let</code> loop to print values\nfor as long as <code class=\"hljs\">stack.pop()</code> returns <code class=\"hljs\">Some</code></span></p>\n<p>This example prints 3, 2, and then 1. The <code class=\"hljs\">pop</code> method takes the last element\nout of the vector and returns <code class=\"hljs\">Some(value)</code>. If the vector is empty, <code class=\"hljs\">pop</code>\nreturns <code class=\"hljs\">None</code>. The <code class=\"hljs\">while</code> loop continues running the code in its block as\nlong as <code class=\"hljs\">pop</code> returns <code class=\"hljs\">Some</code>. When <code class=\"hljs\">pop</code> returns <code class=\"hljs\">None</code>, the loop stops. We can\nuse <code class=\"hljs\">while let</code> to pop every element off our stack.</p>\n<h3 id=\"for-loops\"><a class=\"header\" href=\"#for-loops\"><code>for</code> Loops</a></h3>\n<p>In a <code class=\"hljs\">for</code> loop, the value that directly follows the keyword <code class=\"hljs\">for</code> is a\npattern. For example, in <code class=\"hljs\">for x in y</code> the <code class=\"hljs\">x</code> is the pattern. Listing 18-3\ndemonstrates how to use a pattern in a <code class=\"hljs\">for</code> loop to destructure, or break\napart, a tuple as part of the <code class=\"hljs\">for</code> loop.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> v = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>];\n\n    <span class=\"hljs-keyword\">for</span> (index, value) <span class=\"hljs-keyword\">in</span> v.iter().enumerate() {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{value} is at index {index}\"</span>);\n    }\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 18-3: Using a pattern in a <code class=\"hljs\">for</code> loop to\ndestructure a tuple</span></p>\n<p>The code in Listing 18-3 will print the following:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling patterns v0.1.0 (file:///projects/patterns)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.52s\n     Running `target/debug/patterns`\na is at index 0\nb is at index 1\nc is at index 2\n</code></pre>\n<p>We adapt an iterator using the <code class=\"hljs\">enumerate</code> method so it produces a value and\nthe index for that value, placed into a tuple. The first value produced is the\ntuple <code class=\"hljs\">(0, 'a')</code>. When this value is matched to the pattern <code class=\"hljs\">(index, value)</code>,\n<code class=\"hljs\">index</code> will be <code class=\"hljs\">0</code> and <code class=\"hljs\">value</code> will be <code class=\"hljs\">'a'</code>, printing the first line of the\noutput.</p>\n<h3 id=\"let-statements\"><a class=\"header\" href=\"#let-statements\"><code>let</code> Statements</a></h3>\n<p>Prior to this chapter, we had only explicitly discussed using patterns with\n<code class=\"hljs\">match</code> and <code class=\"hljs\">if let</code>, but in fact, we‚Äôve used patterns in other places as well,\nincluding in <code class=\"hljs\">let</code> statements. For example, consider this straightforward\nvariable assignment with <code class=\"hljs\">let</code>:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">5</span>;\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Every time you‚Äôve used a <code class=\"hljs\">let</code> statement like this you‚Äôve been using patterns,\nalthough you might not have realized it! More formally, a <code class=\"hljs\">let</code> statement looks\nlike this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">let PATTERN = EXPRESSION;\n</code></pre>\n<p>In statements like <code class=\"hljs\">let x = 5;</code> with a variable name in the <code class=\"hljs\">PATTERN</code> slot, the\nvariable name is just a particularly simple form of a pattern. Rust compares\nthe expression against the pattern and assigns any names it finds. So in the\n<code class=\"hljs\">let x = 5;</code> example, <code class=\"hljs\">x</code> is a pattern that means ‚Äúbind what matches here to\nthe variable <code class=\"hljs\">x</code>.‚Äù Because the name <code class=\"hljs\">x</code> is the whole pattern, this pattern\neffectively means ‚Äúbind everything to the variable <code class=\"hljs\">x</code>, whatever the value is.‚Äù</p>\n<p>To see the pattern matching aspect of <code class=\"hljs\">let</code> more clearly, consider Listing\n18-4, which uses a pattern with <code class=\"hljs\">let</code> to destructure a tuple.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> (x, y, z) = (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 18-4: Using a pattern to destructure a tuple and\ncreate three variables at once</span></p>\n<p>Here, we match a tuple against a pattern. Rust compares the value <code class=\"hljs\">(1, 2, 3)</code>\nto the pattern <code class=\"hljs\">(x, y, z)</code> and sees that the value matches the pattern, so Rust\nbinds <code class=\"hljs\">1</code> to <code class=\"hljs\">x</code>, <code class=\"hljs\">2</code> to <code class=\"hljs\">y</code>, and <code class=\"hljs\">3</code> to <code class=\"hljs\">z</code>. You can think of this tuple\npattern as nesting three individual variable patterns inside it.</p>\n<p>If the number of elements in the pattern doesn‚Äôt match the number of elements\nin the tuple, the overall type won‚Äôt match and we‚Äôll get a compiler error. For\nexample, Listing 18-5 shows an attempt to destructure a tuple with three\nelements into two variables, which won‚Äôt work.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-small\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> (x, y) = (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>);\n<span class=\"boring\">}</span></code></pre>\n<p><span class=\"caption\">Listing 18-5: Incorrectly constructing a pattern whose\nvariables don‚Äôt match the number of elements in the tuple</span></p>\n<p>Attempting to compile this code results in this type error:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling patterns v0.1.0 (file:///projects/patterns)\nerror[E0308]: mismatched types\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/main.rs:2:9</span>\n  |\n2 |     let (x, y) = (1, 2, 3);\n  |         ^^^^^^   --------- this expression has type `({integer}, {integer}, {integer})`\n  |         |\n  |         expected a tuple with 3 elements, found one with 2 elements\n  |\n  = note: expected tuple `({integer}, {integer}, {integer})`\n             found tuple `(_, _)`\n\nFor more information about this error, try `rustc --explain E0308`.\nerror: could not compile `patterns` (bin \"patterns\") due to 1 previous error\n</code></pre>\n<p>To fix the error, we could ignore one or more of the values in the tuple using\n<code class=\"hljs\">_</code> or <code class=\"hljs\">..</code>, as you‚Äôll see in the <a href=\"ch18-03-pattern-syntax.html#ignoring-values-in-a-pattern\">‚ÄúIgnoring Values in a\nPattern‚Äù</a><!-- ignore --> section. If the problem\nis that we have too many variables in the pattern, the solution is to make the\ntypes match by removing variables so the number of variables equals the number\nof elements in the tuple.</p>\n<h3 id=\"function-parameters\"><a class=\"header\" href=\"#function-parameters\">Function Parameters</a></h3>\n<p>Function parameters can also be patterns. The code in Listing 18-6, which\ndeclares a function named <code class=\"hljs\">foo</code> that takes one parameter named <code class=\"hljs\">x</code> of type\n<code class=\"hljs\">i32</code>, should by now look familiar.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>(x: <span class=\"hljs-built_in\">i32</span>) {\n    <span class=\"hljs-comment\">// code goes here</span>\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 18-6: A function signature uses patterns in the\nparameters</span></p>\n<p>The <code class=\"hljs\">x</code> part is a pattern! As we did with <code class=\"hljs\">let</code>, we could match a tuple in a\nfunction‚Äôs arguments to the pattern. Listing 18-7 splits the values in a tuple\nas we pass it to a function.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">print_coordinates</span></span>(&amp;(x, y): &amp;(<span class=\"hljs-built_in\">i32</span>, <span class=\"hljs-built_in\">i32</span>)) {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Current location: ({x}, {y})\"</span>);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> point = (<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>);\n    print_coordinates(&amp;point);\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 18-7: A function with parameters that destructure\na tuple</span></p>\n<p>This code prints <code class=\"hljs\">Current location: (3, 5)</code>. The values <code class=\"hljs\">&amp;(3, 5)</code> match the\npattern <code class=\"hljs\">&amp;(x, y)</code>, so <code class=\"hljs\">x</code> is the value <code class=\"hljs\">3</code> and <code class=\"hljs\">y</code> is the value <code class=\"hljs\">5</code>.</p>\n<p>We can also use patterns in closure parameter lists in the same way as in\nfunction parameter lists, because closures are similar to functions, as\ndiscussed in Chapter 13.</p>\n<p>At this point, you‚Äôve seen several ways of using patterns, but patterns don‚Äôt\nwork the same in every place we can use them. In some places, the patterns must\nbe irrefutable; in other circumstances, they can be refutable. We‚Äôll discuss\nthese two concepts next.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"refutability-whether-a-pattern-might-fail-to-match\"><a class=\"header\" href=\"#refutability-whether-a-pattern-might-fail-to-match\">Refutability: Whether a Pattern Might Fail to Match</a></h2>\n<p>Patterns come in two forms: refutable and irrefutable. Patterns that will match\nfor any possible value passed are <em>irrefutable</em>. An example would be <code class=\"hljs\">x</code> in the\nstatement <code class=\"hljs\">let x = 5;</code> because <code class=\"hljs\">x</code> matches anything and therefore cannot fail\nto match. Patterns that can fail to match for some possible value are\n<em>refutable</em>. An example would be <code class=\"hljs\">Some(x)</code> in the expression <code class=\"hljs\">if let Some(x) = a_value</code> because if the value in the <code class=\"hljs\">a_value</code> variable is <code class=\"hljs\">None</code> rather than\n<code class=\"hljs\">Some</code>, the <code class=\"hljs\">Some(x)</code> pattern will not match.</p>\n<p>Function parameters, <code class=\"hljs\">let</code> statements, and <code class=\"hljs\">for</code> loops can only accept\nirrefutable patterns, because the program cannot do anything meaningful when\nvalues don‚Äôt match. The <code class=\"hljs\">if let</code> and <code class=\"hljs\">while let</code> expressions accept\nrefutable and irrefutable patterns, but the compiler warns against\nirrefutable patterns because by definition they‚Äôre intended to handle possible\nfailure: the functionality of a conditional is in its ability to perform\ndifferently depending on success or failure.</p>\n<p>In general, you shouldn‚Äôt have to worry about the distinction between refutable\nand irrefutable patterns; however, you do need to be familiar with the concept\nof refutability so you can respond when you see it in an error message. In\nthose cases, you‚Äôll need to change either the pattern or the construct you‚Äôre\nusing the pattern with, depending on the intended behavior of the code.</p>\n<p>Let‚Äôs look at an example of what happens when we try to use a refutable pattern\nwhere Rust requires an irrefutable pattern and vice versa. Listing 18-8 shows a\n<code class=\"hljs\">let</code> statement, but for the pattern we‚Äôve specified <code class=\"hljs\">Some(x)</code>, a refutable\npattern. As you might expect, this code will not compile.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-small\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> some_option_value: <span class=\"hljs-built_in\">Option</span>&lt;<span class=\"hljs-built_in\">i32</span>&gt; = <span class=\"hljs-literal\">None</span>;\n</span>    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-literal\">Some</span>(x) = some_option_value;\n<span class=\"boring\">}</span></code></pre>\n<p><span class=\"caption\">Listing 18-8: Attempting to use a refutable pattern with\n<code class=\"hljs\">let</code></span></p>\n<p>If <code class=\"hljs\">some_option_value</code> was a <code class=\"hljs\">None</code> value, it would fail to match the pattern\n<code class=\"hljs\">Some(x)</code>, meaning the pattern is refutable. However, the <code class=\"hljs\">let</code> statement can\nonly accept an irrefutable pattern because there is nothing valid the code can\ndo with a <code class=\"hljs\">None</code> value. At compile time, Rust will complain that we‚Äôve tried to\nuse a refutable pattern where an irrefutable pattern is required:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling patterns v0.1.0 (file:///projects/patterns)\nerror[E0005]: refutable pattern in local binding\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/main.rs:3:9</span>\n  |\n3 |     let Some(x) = some_option_value;\n  |         ^^^^^^^ pattern `None` not covered\n  |\n  = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n  = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n  = note: the matched value is of type `Option&lt;i32&gt;`\nhelp: you might want to use `let else` to handle the variant that isn't matched\n  |\n3 |     let Some(x) = some_option_value else { todo!() };\n  |                                     ++++++++++++++++\n\nFor more information about this error, try `rustc --explain E0005`.\nerror: could not compile `patterns` (bin \"patterns\") due to 1 previous error\n</code></pre>\n<p>Because we didn‚Äôt cover (and couldn‚Äôt cover!) every valid value with the\npattern <code class=\"hljs\">Some(x)</code>, Rust rightfully produces a compiler error.</p>\n<p>If we have a refutable pattern where an irrefutable pattern is needed, we can\nfix it by changing the code that uses the pattern: instead of using <code class=\"hljs\">let</code>, we\ncan use <code class=\"hljs\">if let</code>. Then if the pattern doesn‚Äôt match, the code will just skip\nthe code in the curly brackets, giving it a way to continue validly. Listing\n18-9 shows how to fix the code in Listing 18-8.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> some_option_value: <span class=\"hljs-built_in\">Option</span>&lt;<span class=\"hljs-built_in\">i32</span>&gt; = <span class=\"hljs-literal\">None</span>;\n</span>    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-literal\">Some</span>(x) = some_option_value {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{x}\"</span>);\n    }\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 18-9: Using <code class=\"hljs\">if let</code> and a block with refutable\npatterns instead of <code class=\"hljs\">let</code></span></p>\n<p>We‚Äôve given the code an out! This code is perfectly valid now. However,\nif we give <code class=\"hljs\">if let</code> an irrefutable pattern (a pattern that will always\nmatch), such as <code class=\"hljs\">x</code>, as shown in Listing 18-10, the compiler will give a\nwarning.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">5</span> {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{x}\"</span>);\n    };\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 18-10: Attempting to use an irrefutable pattern\nwith <code class=\"hljs\">if let</code></span></p>\n<p>Rust complains that it doesn‚Äôt make sense to use <code class=\"hljs\">if let</code> with an irrefutable\npattern:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling patterns v0.1.0 (file:///projects/patterns)\nwarning: irrefutable `if let` pattern\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/main.rs:2:8</span>\n  |\n2 |     if let x = 5 {\n  |        ^^^^^^^^^\n  |\n  = note: this pattern will always match, so the `if let` is useless\n  = help: consider replacing the `if let` with a `let`\n  = note: `#[warn(irrefutable_let_patterns)]` on by default\n\nwarning: `patterns` (bin \"patterns\") generated 1 warning\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.39s\n     Running `target/debug/patterns`\n5\n</code></pre>\n<p>For this reason, match arms must use refutable patterns, except for the last\narm, which should match any remaining values with an irrefutable pattern. Rust\nallows us to use an irrefutable pattern in a <code class=\"hljs\">match</code> with only one arm, but\nthis syntax isn‚Äôt particularly useful and could be replaced with a simpler\n<code class=\"hljs\">let</code> statement.</p>\n<p>Now that you know where to use patterns and the difference between refutable\nand irrefutable patterns, let‚Äôs cover all the syntax we can use to create\npatterns.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"pattern-syntax\"><a class=\"header\" href=\"#pattern-syntax\">Pattern Syntax</a></h2>\n<p>In this section, we gather all the syntax valid in patterns and discuss why and\nwhen you might want to use each one.</p>\n<h3 id=\"matching-literals\"><a class=\"header\" href=\"#matching-literals\">Matching Literals</a></h3>\n<p>As you saw in Chapter 6, you can match patterns against literals directly. The\nfollowing code gives some examples:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">1</span>;\n\n    <span class=\"hljs-keyword\">match</span> x {\n        <span class=\"hljs-number\">1</span> =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"one\"</span>),\n        <span class=\"hljs-number\">2</span> =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"two\"</span>),\n        <span class=\"hljs-number\">3</span> =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"three\"</span>),\n        _ =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"anything\"</span>),\n    }\n<span class=\"boring\">}</span></code></pre></pre>\n<p>This code prints <code class=\"hljs\">one</code> because the value in <code class=\"hljs\">x</code> is 1. This syntax is useful\nwhen you want your code to take an action if it gets a particular concrete\nvalue.</p>\n<h3 id=\"matching-named-variables\"><a class=\"header\" href=\"#matching-named-variables\">Matching Named Variables</a></h3>\n<p>Named variables are irrefutable patterns that match any value, and we‚Äôve used\nthem many times in the book. However, there is a complication when you use\nnamed variables in <code class=\"hljs\">match</code> expressions. Because <code class=\"hljs\">match</code> starts a new scope,\nvariables declared as part of a pattern inside the <code class=\"hljs\">match</code> expression will\nshadow those with the same name outside the <code class=\"hljs\">match</code> construct, as is the case\nwith all variables. In Listing 18-11, we declare a variable named <code class=\"hljs\">x</code> with the\nvalue <code class=\"hljs\">Some(5)</code> and a variable <code class=\"hljs\">y</code> with the value <code class=\"hljs\">10</code>. We then create a\n<code class=\"hljs\">match</code> expression on the value <code class=\"hljs\">x</code>. Look at the patterns in the match arms and\n<code class=\"hljs\">println!</code> at the end, and try to figure out what the code will print before\nrunning this code or reading further.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-literal\">Some</span>(<span class=\"hljs-number\">5</span>);\n    <span class=\"hljs-keyword\">let</span> y = <span class=\"hljs-number\">10</span>;\n\n    <span class=\"hljs-keyword\">match</span> x {\n        <span class=\"hljs-literal\">Some</span>(<span class=\"hljs-number\">50</span>) =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Got 50\"</span>),\n        <span class=\"hljs-literal\">Some</span>(y) =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Matched, y = {y}\"</span>),\n        _ =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Default case, x = {x:?}\"</span>),\n    }\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"at the end: x = {x:?}, y = {y}\"</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 18-11: A <code class=\"hljs\">match</code> expression with an arm that\nintroduces a shadowed variable <code class=\"hljs\">y</code></span></p>\n<p>Let‚Äôs walk through what happens when the <code class=\"hljs\">match</code> expression runs. The pattern\nin the first match arm doesn‚Äôt match the defined value of <code class=\"hljs\">x</code>, so the code\ncontinues.</p>\n<p>The pattern in the second match arm introduces a new variable named <code class=\"hljs\">y</code> that\nwill match any value inside a <code class=\"hljs\">Some</code> value. Because we‚Äôre in a new scope inside\nthe <code class=\"hljs\">match</code> expression, this is a new <code class=\"hljs\">y</code> variable, not the <code class=\"hljs\">y</code> we declared at\nthe beginning with the value 10. This new <code class=\"hljs\">y</code> binding will match any value\ninside a <code class=\"hljs\">Some</code>, which is what we have in <code class=\"hljs\">x</code>. Therefore, this new <code class=\"hljs\">y</code> binds to\nthe inner value of the <code class=\"hljs\">Some</code> in <code class=\"hljs\">x</code>. That value is <code class=\"hljs\">5</code>, so the expression for\nthat arm executes and prints <code class=\"hljs\">Matched, y = 5</code>.</p>\n<p>If <code class=\"hljs\">x</code> had been a <code class=\"hljs\">None</code> value instead of <code class=\"hljs\">Some(5)</code>, the patterns in the first\ntwo arms wouldn‚Äôt have matched, so the value would have matched to the\nunderscore. We didn‚Äôt introduce the <code class=\"hljs\">x</code> variable in the pattern of the\nunderscore arm, so the <code class=\"hljs\">x</code> in the expression is still the outer <code class=\"hljs\">x</code> that hasn‚Äôt\nbeen shadowed. In this hypothetical case, the <code class=\"hljs\">match</code> would print <code class=\"hljs\">Default case, x = None</code>.</p>\n<p>When the <code class=\"hljs\">match</code> expression is done, its scope ends, and so does the scope of\nthe inner <code class=\"hljs\">y</code>. The last <code class=\"hljs\">println!</code> produces <code class=\"hljs\">at the end: x = Some(5), y = 10</code>.</p>\n<p>To create a <code class=\"hljs\">match</code> expression that compares the values of the outer <code class=\"hljs\">x</code> and\n<code class=\"hljs\">y</code>, rather than introducing a shadowed variable, we would need to use a match\nguard conditional instead. We‚Äôll talk about match guards later in the <a href=\"ch18-03-pattern-syntax.html#extra-conditionals-with-match-guards\">‚ÄúExtra\nConditionals with Match Guards‚Äù</a><!--\nignore --> section.</p>\n<h3 id=\"multiple-patterns\"><a class=\"header\" href=\"#multiple-patterns\">Multiple Patterns</a></h3>\n<p>In <code class=\"hljs\">match</code> expressions, you can match multiple patterns using the <code class=\"hljs\">|</code> syntax,\nwhich is the pattern <em>or</em> operator. For example, in the following code we match\nthe value of <code class=\"hljs\">x</code> against the match arms, the first of which has an <em>or</em> option,\nmeaning if the value of <code class=\"hljs\">x</code> matches either of the values in that arm, that\narm‚Äôs code will run:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">1</span>;\n\n    <span class=\"hljs-keyword\">match</span> x {\n        <span class=\"hljs-number\">1</span> | <span class=\"hljs-number\">2</span> =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"one or two\"</span>),\n        <span class=\"hljs-number\">3</span> =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"three\"</span>),\n        _ =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"anything\"</span>),\n    }\n<span class=\"boring\">}</span></code></pre></pre>\n<p>This code prints <code class=\"hljs\">one or two</code>.</p>\n<h3 id=\"matching-ranges-of-values-with-\"><a class=\"header\" href=\"#matching-ranges-of-values-with-\">Matching Ranges of Values with <code>..=</code></a></h3>\n<p>The <code class=\"hljs\">..=</code> syntax allows us to match to an inclusive range of values. In the\nfollowing code, when a pattern matches any of the values within the given\nrange, that arm will execute:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">5</span>;\n\n    <span class=\"hljs-keyword\">match</span> x {\n        <span class=\"hljs-number\">1</span>..=<span class=\"hljs-number\">5</span> =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"one through five\"</span>),\n        _ =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"something else\"</span>),\n    }\n<span class=\"boring\">}</span></code></pre></pre>\n<p>If <code class=\"hljs\">x</code> is 1, 2, 3, 4, or 5, the first arm will match. This syntax is more\nconvenient for multiple match values than using the <code class=\"hljs\">|</code> operator to express the\nsame idea; if we were to use <code class=\"hljs\">|</code> we would have to specify <code class=\"hljs\">1 | 2 | 3 | 4 | 5</code>.\nSpecifying a range is much shorter, especially if we want to match, say, any\nnumber between 1 and 1,000!</p>\n<p>The compiler checks that the range isn‚Äôt empty at compile time, and because the\nonly types for which Rust can tell if a range is empty or not are <code class=\"hljs\">char</code> and\nnumeric values, ranges are only allowed with numeric or <code class=\"hljs\">char</code> values.</p>\n<p>Here is an example using ranges of <code class=\"hljs\">char</code> values:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-string\">'c'</span>;\n\n    <span class=\"hljs-keyword\">match</span> x {\n        <span class=\"hljs-string\">'a'</span>..=<span class=\"hljs-string\">'j'</span> =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"early ASCII letter\"</span>),\n        <span class=\"hljs-string\">'k'</span>..=<span class=\"hljs-string\">'z'</span> =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"late ASCII letter\"</span>),\n        _ =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"something else\"</span>),\n    }\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Rust can tell that <code class=\"hljs\">'c'</code> is within the first pattern‚Äôs range and prints <code class=\"hljs\">early ASCII letter</code>.</p>\n<h3 id=\"destructuring-to-break-apart-values\"><a class=\"header\" href=\"#destructuring-to-break-apart-values\">Destructuring to Break Apart Values</a></h3>\n<p>We can also use patterns to destructure structs, enums, and tuples to use\ndifferent parts of these values. Let‚Äôs walk through each value.</p>\n<h4 id=\"destructuring-structs\"><a class=\"header\" href=\"#destructuring-structs\">Destructuring Structs</a></h4>\n<p>Listing 18-12 shows a <code class=\"hljs\">Point</code> struct with two fields, <code class=\"hljs\">x</code> and <code class=\"hljs\">y</code>, that we can\nbreak apart using a pattern with a <code class=\"hljs\">let</code> statement.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Point</span></span> {\n    x: <span class=\"hljs-built_in\">i32</span>,\n    y: <span class=\"hljs-built_in\">i32</span>,\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> p = Point { x: <span class=\"hljs-number\">0</span>, y: <span class=\"hljs-number\">7</span> };\n\n    <span class=\"hljs-keyword\">let</span> Point { x: a, y: b } = p;\n    <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">0</span>, a);\n    <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">7</span>, b);\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 18-12: Destructuring a struct‚Äôs fields into\nseparate variables</span></p>\n<p>This code creates the variables <code class=\"hljs\">a</code> and <code class=\"hljs\">b</code> that match the values of the <code class=\"hljs\">x</code>\nand <code class=\"hljs\">y</code> fields of the <code class=\"hljs\">p</code> struct. This example shows that the names of the\nvariables in the pattern don‚Äôt have to match the field names of the struct.\nHowever, it‚Äôs common to match the variable names to the field names to make it\neasier to remember which variables came from which fields. Because of this\ncommon usage, and because writing <code class=\"hljs\">let Point { x: x, y: y } = p;</code> contains a\nlot of duplication, Rust has a shorthand for patterns that match struct fields:\nyou only need to list the name of the struct field, and the variables created\nfrom the pattern will have the same names. Listing 18-13 behaves in the same\nway as the code in Listing 18-12, but the variables created in the <code class=\"hljs\">let</code>\npattern are <code class=\"hljs\">x</code> and <code class=\"hljs\">y</code> instead of <code class=\"hljs\">a</code> and <code class=\"hljs\">b</code>.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Point</span></span> {\n    x: <span class=\"hljs-built_in\">i32</span>,\n    y: <span class=\"hljs-built_in\">i32</span>,\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> p = Point { x: <span class=\"hljs-number\">0</span>, y: <span class=\"hljs-number\">7</span> };\n\n    <span class=\"hljs-keyword\">let</span> Point { x, y } = p;\n    <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">0</span>, x);\n    <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">7</span>, y);\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 18-13: Destructuring struct fields using struct\nfield shorthand</span></p>\n<p>This code creates the variables <code class=\"hljs\">x</code> and <code class=\"hljs\">y</code> that match the <code class=\"hljs\">x</code> and <code class=\"hljs\">y</code> fields\nof the <code class=\"hljs\">p</code> variable. The outcome is that the variables <code class=\"hljs\">x</code> and <code class=\"hljs\">y</code> contain the\nvalues from the <code class=\"hljs\">p</code> struct.</p>\n<p>We can also destructure with literal values as part of the struct pattern\nrather than creating variables for all the fields. Doing so allows us to test\nsome of the fields for particular values while creating variables to\ndestructure the other fields.</p>\n<p>In Listing 18-14, we have a <code class=\"hljs\">match</code> expression that separates <code class=\"hljs\">Point</code> values\ninto three cases: points that lie directly on the <code class=\"hljs\">x</code> axis (which is true when\n<code class=\"hljs\">y = 0</code>), on the <code class=\"hljs\">y</code> axis (<code class=\"hljs\">x = 0</code>), or neither.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Point</span></span> {\n</span><span class=\"boring\">    x: <span class=\"hljs-built_in\">i32</span>,\n</span><span class=\"boring\">    y: <span class=\"hljs-built_in\">i32</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> p = Point { x: <span class=\"hljs-number\">0</span>, y: <span class=\"hljs-number\">7</span> };\n\n    <span class=\"hljs-keyword\">match</span> p {\n        Point { x, y: <span class=\"hljs-number\">0</span> } =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"On the x axis at {x}\"</span>),\n        Point { x: <span class=\"hljs-number\">0</span>, y } =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"On the y axis at {y}\"</span>),\n        Point { x, y } =&gt; {\n            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"On neither axis: ({x}, {y})\"</span>);\n        }\n    }\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 18-14: Destructuring and matching literal values\nin one pattern</span></p>\n<p>The first arm will match any point that lies on the <code class=\"hljs\">x</code> axis by specifying that\nthe <code class=\"hljs\">y</code> field matches if its value matches the literal <code class=\"hljs\">0</code>. The pattern still\ncreates an <code class=\"hljs\">x</code> variable that we can use in the code for this arm.</p>\n<p>Similarly, the second arm matches any point on the <code class=\"hljs\">y</code> axis by specifying that\nthe <code class=\"hljs\">x</code> field matches if its value is <code class=\"hljs\">0</code> and creates a variable <code class=\"hljs\">y</code> for the\nvalue of the <code class=\"hljs\">y</code> field. The third arm doesn‚Äôt specify any literals, so it\nmatches any other <code class=\"hljs\">Point</code> and creates variables for both the <code class=\"hljs\">x</code> and <code class=\"hljs\">y</code> fields.</p>\n<p>In this example, the value <code class=\"hljs\">p</code> matches the second arm by virtue of <code class=\"hljs\">x</code>\ncontaining a 0, so this code will print <code class=\"hljs\">On the y axis at 7</code>.</p>\n<p>Remember that a <code class=\"hljs\">match</code> expression stops checking arms once it has found the\nfirst matching pattern, so even though <code class=\"hljs\">Point { x: 0, y: 0}</code> is on the <code class=\"hljs\">x</code> axis\nand the <code class=\"hljs\">y</code> axis, this code would only print <code class=\"hljs\">On the x axis at 0</code>.</p>\n<h4 id=\"destructuring-enums\"><a class=\"header\" href=\"#destructuring-enums\">Destructuring Enums</a></h4>\n<p>We‚Äôve destructured enums in this book (for example, Listing 6-5 in Chapter 6),\nbut haven‚Äôt yet explicitly discussed that the pattern to destructure an enum\ncorresponds to the way the data stored within the enum is defined. As an\nexample, in Listing 18-15 we use the <code class=\"hljs\">Message</code> enum from Listing 6-2 and write\na <code class=\"hljs\">match</code> with patterns that will destructure each inner value.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Message</span></span> {\n    Quit,\n    Move { x: <span class=\"hljs-built_in\">i32</span>, y: <span class=\"hljs-built_in\">i32</span> },\n    Write(<span class=\"hljs-built_in\">String</span>),\n    ChangeColor(<span class=\"hljs-built_in\">i32</span>, <span class=\"hljs-built_in\">i32</span>, <span class=\"hljs-built_in\">i32</span>),\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> msg = Message::ChangeColor(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">160</span>, <span class=\"hljs-number\">255</span>);\n\n    <span class=\"hljs-keyword\">match</span> msg {\n        Message::Quit =&gt; {\n            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The Quit variant has no data to destructure.\"</span>);\n        }\n        Message::Move { x, y } =&gt; {\n            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Move in the x direction {x} and in the y direction {y}\"</span>);\n        }\n        Message::Write(text) =&gt; {\n            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Text message: {text}\"</span>);\n        }\n        Message::ChangeColor(r, g, b) =&gt; {\n            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Change the color to red {r}, green {g}, and blue {b}\"</span>)\n        }\n    }\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 18-15: Destructuring enum variants that hold\ndifferent kinds of values</span></p>\n<p>This code will print <code class=\"hljs\">Change the color to red 0, green 160, and blue 255</code>. Try\nchanging the value of <code class=\"hljs\">msg</code> to see the code from the other arms run.</p>\n<p>For enum variants without any data, like <code class=\"hljs\">Message::Quit</code>, we can‚Äôt destructure\nthe value any further. We can only match on the literal <code class=\"hljs\">Message::Quit</code> value,\nand no variables are in that pattern.</p>\n<p>For struct-like enum variants, such as <code class=\"hljs\">Message::Move</code>, we can use a pattern\nsimilar to the pattern we specify to match structs. After the variant name, we\nplace curly brackets and then list the fields with variables so we break apart\nthe pieces to use in the code for this arm. Here we use the shorthand form as\nwe did in Listing 18-13.</p>\n<p>For tuple-like enum variants, like <code class=\"hljs\">Message::Write</code> that holds a tuple with one\nelement and <code class=\"hljs\">Message::ChangeColor</code> that holds a tuple with three elements, the\npattern is similar to the pattern we specify to match tuples. The number of\nvariables in the pattern must match the number of elements in the variant we‚Äôre\nmatching.</p>\n<h4 id=\"destructuring-nested-structs-and-enums\"><a class=\"header\" href=\"#destructuring-nested-structs-and-enums\">Destructuring Nested Structs and Enums</a></h4>\n<p>So far, our examples have all been matching structs or enums one level deep,\nbut matching can work on nested items too! For example, we can refactor the\ncode in Listing 18-15 to support RGB and HSV colors in the <code class=\"hljs\">ChangeColor</code>\nmessage, as shown in Listing 18-16.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Color</span></span> {\n    Rgb(<span class=\"hljs-built_in\">i32</span>, <span class=\"hljs-built_in\">i32</span>, <span class=\"hljs-built_in\">i32</span>),\n    Hsv(<span class=\"hljs-built_in\">i32</span>, <span class=\"hljs-built_in\">i32</span>, <span class=\"hljs-built_in\">i32</span>),\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Message</span></span> {\n    Quit,\n    Move { x: <span class=\"hljs-built_in\">i32</span>, y: <span class=\"hljs-built_in\">i32</span> },\n    Write(<span class=\"hljs-built_in\">String</span>),\n    ChangeColor(Color),\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> msg = Message::ChangeColor(Color::Hsv(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">160</span>, <span class=\"hljs-number\">255</span>));\n\n    <span class=\"hljs-keyword\">match</span> msg {\n        Message::ChangeColor(Color::Rgb(r, g, b)) =&gt; {\n            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Change color to red {r}, green {g}, and blue {b}\"</span>);\n        }\n        Message::ChangeColor(Color::Hsv(h, s, v)) =&gt; {\n            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Change color to hue {h}, saturation {s}, value {v}\"</span>)\n        }\n        _ =&gt; (),\n    }\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 18-16: Matching on nested enums</span></p>\n<p>The pattern of the first arm in the <code class=\"hljs\">match</code> expression matches a\n<code class=\"hljs\">Message::ChangeColor</code> enum variant that contains a <code class=\"hljs\">Color::Rgb</code> variant; then\nthe pattern binds to the three inner <code class=\"hljs\">i32</code> values. The pattern of the second\narm also matches a <code class=\"hljs\">Message::ChangeColor</code> enum variant, but the inner enum\nmatches <code class=\"hljs\">Color::Hsv</code> instead. We can specify these complex conditions in one\n<code class=\"hljs\">match</code> expression, even though two enums are involved.</p>\n<h4 id=\"destructuring-structs-and-tuples\"><a class=\"header\" href=\"#destructuring-structs-and-tuples\">Destructuring Structs and Tuples</a></h4>\n<p>We can mix, match, and nest destructuring patterns in even more complex ways.\nThe following example shows a complicated destructure where we nest structs and\ntuples inside a tuple and destructure all the primitive values out:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Point</span></span> {\n</span><span class=\"boring\">        x: <span class=\"hljs-built_in\">i32</span>,\n</span><span class=\"boring\">        y: <span class=\"hljs-built_in\">i32</span>,\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span>    <span class=\"hljs-keyword\">let</span> ((feet, inches), Point { x, y }) = ((<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">10</span>), Point { x: <span class=\"hljs-number\">3</span>, y: -<span class=\"hljs-number\">10</span> });\n<span class=\"boring\">}</span></code></pre></pre>\n<p>This code lets us break complex types into their component parts so we can use\nthe values we‚Äôre interested in separately.</p>\n<p>Destructuring with patterns is a convenient way to use pieces of values, such\nas the value from each field in a struct, separately from each other.</p>\n<h3 id=\"ignoring-values-in-a-pattern\"><a class=\"header\" href=\"#ignoring-values-in-a-pattern\">Ignoring Values in a Pattern</a></h3>\n<p>You‚Äôve seen that it‚Äôs sometimes useful to ignore values in a pattern, such as\nin the last arm of a <code class=\"hljs\">match</code>, to get a catchall that doesn‚Äôt actually do\nanything but does account for all remaining possible values. There are a few\nways to ignore entire values or parts of values in a pattern: using the <code class=\"hljs\">_</code>\npattern (which you‚Äôve seen), using the <code class=\"hljs\">_</code> pattern within another pattern,\nusing a name that starts with an underscore, or using <code class=\"hljs\">..</code> to ignore remaining\nparts of a value. Let‚Äôs explore how and why to use each of these patterns.</p>\n<h4 id=\"ignoring-an-entire-value-with-_\"><a class=\"header\" href=\"#ignoring-an-entire-value-with-_\">Ignoring an Entire Value with <code>_</code></a></h4>\n<p>We‚Äôve used the underscore as a wildcard pattern that will match any value but\nnot bind to the value. This is especially useful as the last arm in a <code class=\"hljs\">match</code>\nexpression, but we can also use it in any pattern, including function\nparameters, as shown in Listing 18-17.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">foo</span></span>(_: <span class=\"hljs-built_in\">i32</span>, y: <span class=\"hljs-built_in\">i32</span>) {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"This code only uses the y parameter: {y}\"</span>);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    foo(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>);\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 18-17: Using <code class=\"hljs\">_</code> in a function signature</span></p>\n<p>This code will completely ignore the value <code class=\"hljs\">3</code> passed as the first argument,\nand will print <code class=\"hljs\">This code only uses the y parameter: 4</code>.</p>\n<p>In most cases when you no longer need a particular function parameter, you\nwould change the signature so it doesn‚Äôt include the unused parameter. Ignoring\na function parameter can be especially useful in cases when, for example,\nyou‚Äôre implementing a trait when you need a certain type signature but the\nfunction body in your implementation doesn‚Äôt need one of the parameters. You\nthen avoid getting a compiler warning about unused function parameters, as you\nwould if you used a name instead.</p>\n<h4 id=\"ignoring-parts-of-a-value-with-a-nested-_\"><a class=\"header\" href=\"#ignoring-parts-of-a-value-with-a-nested-_\">Ignoring Parts of a Value with a Nested <code>_</code></a></h4>\n<p>We can also use <code class=\"hljs\">_</code> inside another pattern to ignore just part of a value, for\nexample, when we want to test for only part of a value but have no use for the\nother parts in the corresponding code we want to run. Listing 18-18 shows code\nresponsible for managing a setting‚Äôs value. The business requirements are that\nthe user should not be allowed to overwrite an existing customization of a\nsetting but can unset the setting and give it a value if it is currently unset.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> setting_value = <span class=\"hljs-literal\">Some</span>(<span class=\"hljs-number\">5</span>);\n    <span class=\"hljs-keyword\">let</span> new_setting_value = <span class=\"hljs-literal\">Some</span>(<span class=\"hljs-number\">10</span>);\n\n    <span class=\"hljs-keyword\">match</span> (setting_value, new_setting_value) {\n        (<span class=\"hljs-literal\">Some</span>(_), <span class=\"hljs-literal\">Some</span>(_)) =&gt; {\n            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Can't overwrite an existing customized value\"</span>);\n        }\n        _ =&gt; {\n            setting_value = new_setting_value;\n        }\n    }\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"setting is {setting_value:?}\"</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 18-18: Using an underscore within patterns that\nmatch <code class=\"hljs\">Some</code> variants when we don‚Äôt need to use the value inside the\n<code class=\"hljs\">Some</code></span></p>\n<p>This code will print <code class=\"hljs\">Can't overwrite an existing customized value</code> and then\n<code class=\"hljs\">setting is Some(5)</code>. In the first match arm, we don‚Äôt need to match on or use\nthe values inside either <code class=\"hljs\">Some</code> variant, but we do need to test for the case\nwhen <code class=\"hljs\">setting_value</code> and <code class=\"hljs\">new_setting_value</code> are the <code class=\"hljs\">Some</code> variant. In that\ncase, we print the reason for not changing <code class=\"hljs\">setting_value</code>, and it doesn‚Äôt get\nchanged.</p>\n<p>In all other cases (if either <code class=\"hljs\">setting_value</code> or <code class=\"hljs\">new_setting_value</code> are\n<code class=\"hljs\">None</code>) expressed by the <code class=\"hljs\">_</code> pattern in the second arm, we want to allow\n<code class=\"hljs\">new_setting_value</code> to become <code class=\"hljs\">setting_value</code>.</p>\n<p>We can also use underscores in multiple places within one pattern to ignore\nparticular values. Listing 18-19 shows an example of ignoring the second and\nfourth values in a tuple of five items.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> numbers = (<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">32</span>);\n\n    <span class=\"hljs-keyword\">match</span> numbers {\n        (first, _, third, _, fifth) =&gt; {\n            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Some numbers: {first}, {third}, {fifth}\"</span>)\n        }\n    }\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 18-19: Ignoring multiple parts of a tuple</span></p>\n<p>This code will print <code class=\"hljs\">Some numbers: 2, 8, 32</code>, and the values 4 and 16 will be\nignored.</p>\n<h4 id=\"ignoring-an-unused-variable-by-starting-its-name-with-_\"><a class=\"header\" href=\"#ignoring-an-unused-variable-by-starting-its-name-with-_\">Ignoring an Unused Variable by Starting Its Name with <code>_</code></a></h4>\n<p>If you create a variable but don‚Äôt use it anywhere, Rust will usually issue a\nwarning because an unused variable could be a bug. However, sometimes it‚Äôs\nuseful to be able to create a variable you won‚Äôt use yet, such as when you‚Äôre\nprototyping or just starting a project. In this situation, you can tell Rust\nnot to warn you about the unused variable by starting the name of the variable\nwith an underscore. In Listing 18-20, we create two unused variables, but when\nwe compile this code, we should only get a warning about one of them.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> _x = <span class=\"hljs-number\">5</span>;\n    <span class=\"hljs-keyword\">let</span> y = <span class=\"hljs-number\">10</span>;\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 18-20: Starting a variable name with an\nunderscore to avoid getting unused variable warnings</span></p>\n<p>Here we get a warning about not using the variable <code class=\"hljs\">y</code>, but we don‚Äôt get a\nwarning about not using <code class=\"hljs\">_x</code>.</p>\n<p>Note that there is a subtle difference between using only <code class=\"hljs\">_</code> and using a name\nthat starts with an underscore. The syntax <code class=\"hljs\">_x</code> still binds the value to the\nvariable, whereas <code class=\"hljs\">_</code> doesn‚Äôt bind at all. To show a case where this\ndistinction matters, Listing 18-21 will provide us with an error.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> s = <span class=\"hljs-literal\">Some</span>(<span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Hello!\"</span>));\n\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-literal\">Some</span>(_s) = s {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"found a string\"</span>);\n    }\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{s:?}\"</span>);\n<span class=\"boring\">}</span></code></pre>\n<p><span class=\"caption\">Listing 18-21: An unused variable starting with an\nunderscore still binds the value, which might take ownership of the value</span></p>\n<p>We‚Äôll receive an error because the <code class=\"hljs\">s</code> value will still be moved into <code class=\"hljs\">_s</code>,\nwhich prevents us from using <code class=\"hljs\">s</code> again. However, using the underscore by itself\ndoesn‚Äôt ever bind to the value. Listing 18-22 will compile without any errors\nbecause <code class=\"hljs\">s</code> doesn‚Äôt get moved into <code class=\"hljs\">_</code>.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> s = <span class=\"hljs-literal\">Some</span>(<span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Hello!\"</span>));\n\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-literal\">Some</span>(_) = s {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"found a string\"</span>);\n    }\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{s:?}\"</span>);\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 18-22: Using an underscore does not bind the\nvalue</span></p>\n<p>This code works just fine because we never bind <code class=\"hljs\">s</code> to anything; it isn‚Äôt moved.</p>\n<h4 id=\"ignoring-remaining-parts-of-a-value-with-\"><a class=\"header\" href=\"#ignoring-remaining-parts-of-a-value-with-\">Ignoring Remaining Parts of a Value with <code>..</code></a></h4>\n<p>With values that have many parts, we can use the <code class=\"hljs\">..</code> syntax to use specific\nparts and ignore the rest, avoiding the need to list underscores for each\nignored value. The <code class=\"hljs\">..</code> pattern ignores any parts of a value that we haven‚Äôt\nexplicitly matched in the rest of the pattern. In Listing 18-23, we have a\n<code class=\"hljs\">Point</code> struct that holds a coordinate in three-dimensional space. In the\n<code class=\"hljs\">match</code> expression, we want to operate only on the <code class=\"hljs\">x</code> coordinate and ignore\nthe values in the <code class=\"hljs\">y</code> and <code class=\"hljs\">z</code> fields.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Point</span></span> {\n        x: <span class=\"hljs-built_in\">i32</span>,\n        y: <span class=\"hljs-built_in\">i32</span>,\n        z: <span class=\"hljs-built_in\">i32</span>,\n    }\n\n    <span class=\"hljs-keyword\">let</span> origin = Point { x: <span class=\"hljs-number\">0</span>, y: <span class=\"hljs-number\">0</span>, z: <span class=\"hljs-number\">0</span> };\n\n    <span class=\"hljs-keyword\">match</span> origin {\n        Point { x, .. } =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"x is {x}\"</span>),\n    }\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 18-23: Ignoring all fields of a <code class=\"hljs\">Point</code> except\nfor <code class=\"hljs\">x</code> by using <code class=\"hljs\">..</code></span></p>\n<p>We list the <code class=\"hljs\">x</code> value and then just include the <code class=\"hljs\">..</code> pattern. This is quicker\nthan having to list <code class=\"hljs\">y: _</code> and <code class=\"hljs\">z: _</code>, particularly when we‚Äôre working with\nstructs that have lots of fields in situations where only one or two fields are\nrelevant.</p>\n<p>The syntax <code class=\"hljs\">..</code> will expand to as many values as it needs to be. Listing 18-24\nshows how to use <code class=\"hljs\">..</code> with a tuple.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> numbers = (<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">32</span>);\n\n    <span class=\"hljs-keyword\">match</span> numbers {\n        (first, .., last) =&gt; {\n            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Some numbers: {first}, {last}\"</span>);\n        }\n    }\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 18-24: Matching only the first and last values in\na tuple and ignoring all other values</span></p>\n<p>In this code, the first and last value are matched with <code class=\"hljs\">first</code> and <code class=\"hljs\">last</code>. The\n<code class=\"hljs\">..</code> will match and ignore everything in the middle.</p>\n<p>However, using <code class=\"hljs\">..</code> must be unambiguous. If it is unclear which values are\nintended for matching and which should be ignored, Rust will give us an error.\nListing 18-25 shows an example of using <code class=\"hljs\">..</code> ambiguously, so it will not\ncompile.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> numbers = (<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">32</span>);\n\n    <span class=\"hljs-keyword\">match</span> numbers {\n        (.., second, ..) =&gt; {\n            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Some numbers: {second}\"</span>)\n        },\n    }\n}</code></pre>\n<p><span class=\"caption\">Listing 18-25: An attempt to use <code class=\"hljs\">..</code> in an ambiguous\nway</span></p>\n<p>When we compile this example, we get this error:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling patterns v0.1.0 (file:///projects/patterns)\nerror: `..` can only be used once per tuple pattern\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/main.rs:5:22</span>\n  |\n5 |         (.., second, ..) =&gt; {\n  |          --          ^^ can only be used once per tuple pattern\n  |          |\n  |          previously used here\n\nerror: could not compile `patterns` (bin \"patterns\") due to 1 previous error\n</code></pre>\n<p>It‚Äôs impossible for Rust to determine how many values in the tuple to ignore\nbefore matching a value with <code class=\"hljs\">second</code> and then how many further values to\nignore thereafter. This code could mean that we want to ignore <code class=\"hljs\">2</code>, bind\n<code class=\"hljs\">second</code> to <code class=\"hljs\">4</code>, and then ignore <code class=\"hljs\">8</code>, <code class=\"hljs\">16</code>, and <code class=\"hljs\">32</code>; or that we want to ignore\n<code class=\"hljs\">2</code> and <code class=\"hljs\">4</code>, bind <code class=\"hljs\">second</code> to <code class=\"hljs\">8</code>, and then ignore <code class=\"hljs\">16</code> and <code class=\"hljs\">32</code>; and so forth.\nThe variable name <code class=\"hljs\">second</code> doesn‚Äôt mean anything special to Rust, so we get a\ncompiler error because using <code class=\"hljs\">..</code> in two places like this is ambiguous.</p>\n<h3 id=\"extra-conditionals-with-match-guards\"><a class=\"header\" href=\"#extra-conditionals-with-match-guards\">Extra Conditionals with Match Guards</a></h3>\n<p>A <em>match guard</em> is an additional <code class=\"hljs\">if</code> condition, specified after the pattern in\na <code class=\"hljs\">match</code> arm, that must also match for that arm to be chosen. Match guards are\nuseful for expressing more complex ideas than a pattern alone allows.</p>\n<p>The condition can use variables created in the pattern. Listing 18-26 shows a\n<code class=\"hljs\">match</code> where the first arm has the pattern <code class=\"hljs\">Some(x)</code> and also has a match\nguard of <code class=\"hljs\">if x % 2 == 0</code> (which will be true if the number is even).</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> num = <span class=\"hljs-literal\">Some</span>(<span class=\"hljs-number\">4</span>);\n\n    <span class=\"hljs-keyword\">match</span> num {\n        <span class=\"hljs-literal\">Some</span>(x) <span class=\"hljs-keyword\">if</span> x % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span> =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The number {x} is even\"</span>),\n        <span class=\"hljs-literal\">Some</span>(x) =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The number {x} is odd\"</span>),\n        <span class=\"hljs-literal\">None</span> =&gt; (),\n    }\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 18-26: Adding a match guard to a pattern</span></p>\n<p>This example will print <code class=\"hljs\">The number 4 is even</code>. When <code class=\"hljs\">num</code> is compared to the\npattern in the first arm, it matches, because <code class=\"hljs\">Some(4)</code> matches <code class=\"hljs\">Some(x)</code>. Then\nthe match guard checks whether the remainder of dividing <code class=\"hljs\">x</code> by 2 is equal to\n0, and because it is, the first arm is selected.</p>\n<p>If <code class=\"hljs\">num</code> had been <code class=\"hljs\">Some(5)</code> instead, the match guard in the first arm would\nhave been false because the remainder of 5 divided by 2 is 1, which is not\nequal to 0. Rust would then go to the second arm, which would match because the\nsecond arm doesn‚Äôt have a match guard and therefore matches any <code class=\"hljs\">Some</code> variant.</p>\n<p>There is no way to express the <code class=\"hljs\">if x % 2 == 0</code> condition within a pattern, so\nthe match guard gives us the ability to express this logic. The downside of\nthis additional expressiveness is that the compiler doesn‚Äôt try to check for\nexhaustiveness when match guard expressions are involved.</p>\n<p>In Listing 18-11, we mentioned that we could use match guards to solve our\npattern-shadowing problem. Recall that we created a new variable inside the\npattern in the <code class=\"hljs\">match</code> expression instead of using the variable outside the\n<code class=\"hljs\">match</code>. That new variable meant we couldn‚Äôt test against the value of the\nouter variable. Listing 18-27 shows how we can use a match guard to fix this\nproblem.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-literal\">Some</span>(<span class=\"hljs-number\">5</span>);\n    <span class=\"hljs-keyword\">let</span> y = <span class=\"hljs-number\">10</span>;\n\n    <span class=\"hljs-keyword\">match</span> x {\n        <span class=\"hljs-literal\">Some</span>(<span class=\"hljs-number\">50</span>) =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Got 50\"</span>),\n        <span class=\"hljs-literal\">Some</span>(n) <span class=\"hljs-keyword\">if</span> n == y =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Matched, n = {n}\"</span>),\n        _ =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Default case, x = {x:?}\"</span>),\n    }\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"at the end: x = {x:?}, y = {y}\"</span>);\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 18-27: Using a match guard to test for equality\nwith an outer variable</span></p>\n<p>This code will now print <code class=\"hljs\">Default case, x = Some(5)</code>. The pattern in the second\nmatch arm doesn‚Äôt introduce a new variable <code class=\"hljs\">y</code> that would shadow the outer <code class=\"hljs\">y</code>,\nmeaning we can use the outer <code class=\"hljs\">y</code> in the match guard. Instead of specifying the\npattern as <code class=\"hljs\">Some(y)</code>, which would have shadowed the outer <code class=\"hljs\">y</code>, we specify\n<code class=\"hljs\">Some(n)</code>. This creates a new variable <code class=\"hljs\">n</code> that doesn‚Äôt shadow anything because\nthere is no <code class=\"hljs\">n</code> variable outside the <code class=\"hljs\">match</code>.</p>\n<p>The match guard <code class=\"hljs\">if n == y</code> is not a pattern and therefore doesn‚Äôt introduce\nnew variables. This <code class=\"hljs\">y</code> <em>is</em> the outer <code class=\"hljs\">y</code> rather than a new shadowed <code class=\"hljs\">y</code>, and\nwe can look for a value that has the same value as the outer <code class=\"hljs\">y</code> by comparing\n<code class=\"hljs\">n</code> to <code class=\"hljs\">y</code>.</p>\n<p>You can also use the <em>or</em> operator <code class=\"hljs\">|</code> in a match guard to specify multiple\npatterns; the match guard condition will apply to all the patterns. Listing\n18-28 shows the precedence when combining a pattern that uses <code class=\"hljs\">|</code> with a match\nguard. The important part of this example is that the <code class=\"hljs\">if y</code> match guard\napplies to <code class=\"hljs\">4</code>, <code class=\"hljs\">5</code>, <em>and</em> <code class=\"hljs\">6</code>, even though it might look like <code class=\"hljs\">if y</code> only\napplies to <code class=\"hljs\">6</code>.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">4</span>;\n    <span class=\"hljs-keyword\">let</span> y = <span class=\"hljs-literal\">false</span>;\n\n    <span class=\"hljs-keyword\">match</span> x {\n        <span class=\"hljs-number\">4</span> | <span class=\"hljs-number\">5</span> | <span class=\"hljs-number\">6</span> <span class=\"hljs-keyword\">if</span> y =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"yes\"</span>),\n        _ =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"no\"</span>),\n    }\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 18-28: Combining multiple patterns with a match\nguard</span></p>\n<p>The match condition states that the arm only matches if the value of <code class=\"hljs\">x</code> is\nequal to <code class=\"hljs\">4</code>, <code class=\"hljs\">5</code>, or <code class=\"hljs\">6</code> <em>and</em> if <code class=\"hljs\">y</code> is <code class=\"hljs\">true</code>. When this code runs, the\npattern of the first arm matches because <code class=\"hljs\">x</code> is <code class=\"hljs\">4</code>, but the match guard <code class=\"hljs\">if y</code>\nis false, so the first arm is not chosen. The code moves on to the second arm,\nwhich does match, and this program prints <code class=\"hljs\">no</code>. The reason is that the <code class=\"hljs\">if</code>\ncondition applies to the whole pattern <code class=\"hljs\">4 | 5 | 6</code>, not only to the last value\n<code class=\"hljs\">6</code>. In other words, the precedence of a match guard in relation to a pattern\nbehaves like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">(4 | 5 | 6) if y =&gt; ...\n</code></pre>\n<p>rather than this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">4 | 5 | (6 if y) =&gt; ...\n</code></pre>\n<p>After running the code, the precedence behavior is evident: if the match guard\nwere applied only to the final value in the list of values specified using the\n<code class=\"hljs\">|</code> operator, the arm would have matched and the program would have printed\n<code class=\"hljs\">yes</code>.</p>\n<h3 id=\"-bindings\"><a class=\"header\" href=\"#-bindings\"><code>@</code> Bindings</a></h3>\n<p>The <em>at</em> operator <code class=\"hljs\">@</code> lets us create a variable that holds a value at the same\ntime as we‚Äôre testing that value for a pattern match. In Listing 18-29, we want\nto test that a <code class=\"hljs\">Message::Hello</code> <code class=\"hljs\">id</code> field is within the range <code class=\"hljs\">3..=7</code>. We also\nwant to bind the value to the variable <code class=\"hljs\">id_variable</code> so we can use it in the\ncode associated with the arm. We could name this variable <code class=\"hljs\">id</code>, the same as the\nfield, but for this example we‚Äôll use a different name.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Message</span></span> {\n        Hello { id: <span class=\"hljs-built_in\">i32</span> },\n    }\n\n    <span class=\"hljs-keyword\">let</span> msg = Message::Hello { id: <span class=\"hljs-number\">5</span> };\n\n    <span class=\"hljs-keyword\">match</span> msg {\n        Message::Hello {\n            id: id_variable @ <span class=\"hljs-number\">3</span>..=<span class=\"hljs-number\">7</span>,\n        } =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Found an id in range: {id_variable}\"</span>),\n        Message::Hello { id: <span class=\"hljs-number\">10</span>..=<span class=\"hljs-number\">12</span> } =&gt; {\n            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Found an id in another range\"</span>)\n        }\n        Message::Hello { id } =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Found some other id: {id}\"</span>),\n    }\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 18-29: Using <code class=\"hljs\">@</code> to bind to a value in a pattern\nwhile also testing it</span></p>\n<p>This example will print <code class=\"hljs\">Found an id in range: 5</code>. By specifying <code class=\"hljs\">id_variable @</code> before the range <code class=\"hljs\">3..=7</code>, we‚Äôre capturing whatever value matched the range\nwhile also testing that the value matched the range pattern.</p>\n<p>In the second arm, where we only have a range specified in the pattern, the code\nassociated with the arm doesn‚Äôt have a variable that contains the actual value\nof the <code class=\"hljs\">id</code> field. The <code class=\"hljs\">id</code> field‚Äôs value could have been 10, 11, or 12, but\nthe code that goes with that pattern doesn‚Äôt know which it is. The pattern code\nisn‚Äôt able to use the value from the <code class=\"hljs\">id</code> field, because we haven‚Äôt saved the\n<code class=\"hljs\">id</code> value in a variable.</p>\n<p>In the last arm, where we‚Äôve specified a variable without a range, we do have\nthe value available to use in the arm‚Äôs code in a variable named <code class=\"hljs\">id</code>. The\nreason is that we‚Äôve used the struct field shorthand syntax. But we haven‚Äôt\napplied any test to the value in the <code class=\"hljs\">id</code> field in this arm, as we did with the\nfirst two arms: any value would match this pattern.</p>\n<p>Using <code class=\"hljs\">@</code> lets us test a value and save it in a variable within one pattern.</p>\n<h2 id=\"summary-17\"><a class=\"header\" href=\"#summary-17\">Summary</a></h2>\n<p>Rust‚Äôs patterns are very useful in distinguishing between different kinds of\ndata. When used in <code class=\"hljs\">match</code> expressions, Rust ensures your patterns cover every\npossible value, or your program won‚Äôt compile. Patterns in <code class=\"hljs\">let</code> statements and\nfunction parameters make those constructs more useful, enabling the\ndestructuring of values into smaller parts at the same time as assigning to\nvariables. We can create simple or complex patterns to suit our needs.</p>\n<p>Next, for the penultimate chapter of the book, we‚Äôll look at some advanced\naspects of a variety of Rust‚Äôs features.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"advanced-features\"><a class=\"header\" href=\"#advanced-features\">Advanced Features</a></h1>\n<p>By now, you‚Äôve learned the most commonly used parts of the Rust programming\nlanguage. Before we do one more project in Chapter 20, we‚Äôll look at a few\naspects of the language you might run into every once in a while, but may not\nuse every day. You can use this chapter as a reference for when you encounter\nany unknowns. The features covered here are useful in very specific situations.\nAlthough you might not reach for them often, we want to make sure you have a\ngrasp of all the features Rust has to offer.</p>\n<p>In this chapter, we‚Äôll cover:</p>\n<ul>\n<li>Unsafe Rust: how to opt out of some of Rust‚Äôs guarantees and take\nresponsibility for manually upholding those guarantees</li>\n<li>Advanced traits: associated types, default type parameters, fully qualified\nsyntax, supertraits, and the newtype pattern in relation to traits</li>\n<li>Advanced types: more about the newtype pattern, type aliases, the never type,\nand dynamically sized types</li>\n<li>Advanced functions and closures: function pointers and returning closures</li>\n<li>Macros: ways to define code that defines more code at compile time</li>\n</ul>\n<p>It‚Äôs a panoply of Rust features with something for everyone! Let‚Äôs dive in!</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"unsafe-rust\"><a class=\"header\" href=\"#unsafe-rust\">Unsafe Rust</a></h2>\n<p>All the code we‚Äôve discussed so far has had Rust‚Äôs memory safety guarantees\nenforced at compile time. However, Rust has a second language hidden inside it\nthat doesn‚Äôt enforce these memory safety guarantees: it‚Äôs called <em>unsafe Rust</em>\nand works just like regular Rust, but gives us extra superpowers.</p>\n<p>Unsafe Rust exists because, by nature, static analysis is conservative. When\nthe compiler tries to determine whether or not code upholds the guarantees,\nit‚Äôs better for it to reject some valid programs than to accept some invalid\nprograms. Although the code <em>might</em> be okay, if the Rust compiler doesn‚Äôt have\nenough information to be confident, it will reject the code. In these cases,\nyou can use unsafe code to tell the compiler, ‚ÄúTrust me, I know what I‚Äôm\ndoing.‚Äù Be warned, however, that you use unsafe Rust at your own risk: if you\nuse unsafe code incorrectly, problems can occur due to memory unsafety, such as\nnull pointer dereferencing.</p>\n<p>Another reason Rust has an unsafe alter ego is that the underlying computer\nhardware is inherently unsafe. If Rust didn‚Äôt let you do unsafe operations, you\ncouldn‚Äôt do certain tasks. Rust needs to allow you to do low-level systems\nprogramming, such as directly interacting with the operating system or even\nwriting your own operating system. Working with low-level systems programming\nis one of the goals of the language. Let‚Äôs explore what we can do with unsafe\nRust and how to do it.</p>\n<h3 id=\"unsafe-superpowers\"><a class=\"header\" href=\"#unsafe-superpowers\">Unsafe Superpowers</a></h3>\n<p>To switch to unsafe Rust, use the <code class=\"hljs\">unsafe</code> keyword and then start a new block\nthat holds the unsafe code. You can take five actions in unsafe Rust that you\ncan‚Äôt in safe Rust, which we call <em>unsafe superpowers</em>. Those superpowers\ninclude the ability to:</p>\n<ul>\n<li>Dereference a raw pointer</li>\n<li>Call an unsafe function or method</li>\n<li>Access or modify a mutable static variable</li>\n<li>Implement an unsafe trait</li>\n<li>Access fields of a <code class=\"hljs\">union</code></li>\n</ul>\n<p>It‚Äôs important to understand that <code class=\"hljs\">unsafe</code> doesn‚Äôt turn off the borrow checker\nor disable any other of Rust‚Äôs safety checks: if you use a reference in unsafe\ncode, it will still be checked. The <code class=\"hljs\">unsafe</code> keyword only gives you access to\nthese five features that are then not checked by the compiler for memory\nsafety. You‚Äôll still get some degree of safety inside of an unsafe block.</p>\n<p>In addition, <code class=\"hljs\">unsafe</code> does not mean the code inside the block is necessarily\ndangerous or that it will definitely have memory safety problems: the intent is\nthat as the programmer, you‚Äôll ensure the code inside an <code class=\"hljs\">unsafe</code> block will\naccess memory in a valid way.</p>\n<p>People are fallible, and mistakes will happen, but by requiring these five\nunsafe operations to be inside blocks annotated with <code class=\"hljs\">unsafe</code> you‚Äôll know that\nany errors related to memory safety must be within an <code class=\"hljs\">unsafe</code> block. Keep\n<code class=\"hljs\">unsafe</code> blocks small; you‚Äôll be thankful later when you investigate memory\nbugs.</p>\n<p>To isolate unsafe code as much as possible, it‚Äôs best to enclose unsafe code\nwithin a safe abstraction and provide a safe API, which we‚Äôll discuss later in\nthe chapter when we examine unsafe functions and methods. Parts of the standard\nlibrary are implemented as safe abstractions over unsafe code that has been\naudited. Wrapping unsafe code in a safe abstraction prevents uses of <code class=\"hljs\">unsafe</code>\nfrom leaking out into all the places that you or your users might want to use\nthe functionality implemented with <code class=\"hljs\">unsafe</code> code, because using a safe\nabstraction is safe.</p>\n<p>Let‚Äôs look at each of the five unsafe superpowers in turn. We‚Äôll also look at\nsome abstractions that provide a safe interface to unsafe code.</p>\n<h3 id=\"dereferencing-a-raw-pointer\"><a class=\"header\" href=\"#dereferencing-a-raw-pointer\">Dereferencing a Raw Pointer</a></h3>\n<p>In Chapter 4, in the <a href=\"ch04-02-references-and-borrowing.html#dangling-references\">‚ÄúDangling References‚Äù</a><!-- ignore\n--> section, we mentioned that the compiler ensures references are always\nvalid. Unsafe Rust has two new types called <em>raw pointers</em> that are similar to\nreferences. As with references, raw pointers can be immutable or mutable and\nare written as <code class=\"hljs\">*const T</code> and <code class=\"hljs\">*mut T</code>, respectively. The asterisk isn‚Äôt the\ndereference operator; it‚Äôs part of the type name. In the context of raw\npointers, <em>immutable</em> means that the pointer can‚Äôt be directly assigned to\nafter being dereferenced.</p>\n<p>Different from references and smart pointers, raw pointers:</p>\n<ul>\n<li>Are allowed to ignore the borrowing rules by having both immutable and\nmutable pointers or multiple mutable pointers to the same location</li>\n<li>Aren‚Äôt guaranteed to point to valid memory</li>\n<li>Are allowed to be null</li>\n<li>Don‚Äôt implement any automatic cleanup</li>\n</ul>\n<p>By opting out of having Rust enforce these guarantees, you can give up\nguaranteed safety in exchange for greater performance or the ability to\ninterface with another language or hardware where Rust‚Äôs guarantees don‚Äôt apply.</p>\n<p>Listing 19-1 shows how to create an immutable and a mutable raw pointer from\nreferences.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> num = <span class=\"hljs-number\">5</span>;\n\n    <span class=\"hljs-keyword\">let</span> r1 = &amp;num <span class=\"hljs-keyword\">as</span> *<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">i32</span>;\n    <span class=\"hljs-keyword\">let</span> r2 = &amp;<span class=\"hljs-keyword\">mut</span> num <span class=\"hljs-keyword\">as</span> *<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-built_in\">i32</span>;\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 19-1: Creating raw pointers from references</span></p>\n<p>Notice that we don‚Äôt include the <code class=\"hljs\">unsafe</code> keyword in this code. We can create\nraw pointers in safe code; we just can‚Äôt dereference raw pointers outside an\nunsafe block, as you‚Äôll see in a bit.</p>\n<p>We‚Äôve created raw pointers by using <code class=\"hljs\">as</code> to cast an immutable and a mutable\nreference into their corresponding raw pointer types. Because we created them\ndirectly from references guaranteed to be valid, we know these particular raw\npointers are valid, but we can‚Äôt make that assumption about just any raw\npointer.</p>\n<p>To demonstrate this, next we‚Äôll create a raw pointer whose validity we can‚Äôt be\nso certain of. Listing 19-2 shows how to create a raw pointer to an arbitrary\nlocation in memory. Trying to use arbitrary memory is undefined: there might be\ndata at that address or there might not, the compiler might optimize the code\nso there is no memory access, or the program might error with a segmentation\nfault. Usually, there is no good reason to write code like this, but it is\npossible.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> address = <span class=\"hljs-number\">0x012345usize</span>;\n    <span class=\"hljs-keyword\">let</span> r = address <span class=\"hljs-keyword\">as</span> *<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">i32</span>;\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 19-2: Creating a raw pointer to an arbitrary\nmemory address</span></p>\n<p>Recall that we can create raw pointers in safe code, but we can‚Äôt <em>dereference</em>\nraw pointers and read the data being pointed to. In Listing 19-3, we use the\ndereference operator <code class=\"hljs\">*</code> on a raw pointer that requires an <code class=\"hljs\">unsafe</code> block.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> num = <span class=\"hljs-number\">5</span>;\n\n    <span class=\"hljs-keyword\">let</span> r1 = &amp;num <span class=\"hljs-keyword\">as</span> *<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">i32</span>;\n    <span class=\"hljs-keyword\">let</span> r2 = &amp;<span class=\"hljs-keyword\">mut</span> num <span class=\"hljs-keyword\">as</span> *<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-built_in\">i32</span>;\n\n    <span class=\"hljs-keyword\">unsafe</span> {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"r1 is: {}\"</span>, *r1);\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"r2 is: {}\"</span>, *r2);\n    }\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 19-3: Dereferencing raw pointers within an\n<code class=\"hljs\">unsafe</code> block</span></p>\n<p>Creating a pointer does no harm; it‚Äôs only when we try to access the value that\nit points at that we might end up dealing with an invalid value.</p>\n<p>Note also that in Listing 19-1 and 19-3, we created <code class=\"hljs\">*const i32</code> and <code class=\"hljs\">*mut i32</code>\nraw pointers that both pointed to the same memory location, where <code class=\"hljs\">num</code> is\nstored. If we instead tried to create an immutable and a mutable reference to\n<code class=\"hljs\">num</code>, the code would not have compiled because Rust‚Äôs ownership rules don‚Äôt\nallow a mutable reference at the same time as any immutable references. With\nraw pointers, we can create a mutable pointer and an immutable pointer to the\nsame location and change data through the mutable pointer, potentially creating\na data race. Be careful!</p>\n<p>With all of these dangers, why would you ever use raw pointers? One major use\ncase is when interfacing with C code, as you‚Äôll see in the next section,\n<a href=\"ch19-01-unsafe-rust.html#calling-an-unsafe-function-or-method\">‚ÄúCalling an Unsafe Function or\nMethod.‚Äù</a><!-- ignore --> Another case is\nwhen building up safe abstractions that the borrow checker doesn‚Äôt understand.\nWe‚Äôll introduce unsafe functions and then look at an example of a safe\nabstraction that uses unsafe code.</p>\n<h3 id=\"calling-an-unsafe-function-or-method\"><a class=\"header\" href=\"#calling-an-unsafe-function-or-method\">Calling an Unsafe Function or Method</a></h3>\n<p>The second type of operation you can perform in an unsafe block is calling\nunsafe functions. Unsafe functions and methods look exactly like regular\nfunctions and methods, but they have an extra <code class=\"hljs\">unsafe</code> before the rest of the\ndefinition. The <code class=\"hljs\">unsafe</code> keyword in this context indicates the function has\nrequirements we need to uphold when we call this function, because Rust can‚Äôt\nguarantee we‚Äôve met these requirements. By calling an unsafe function within an\n<code class=\"hljs\">unsafe</code> block, we‚Äôre saying that we‚Äôve read this function‚Äôs documentation and\ntake responsibility for upholding the function‚Äôs contracts.</p>\n<p>Here is an unsafe function named <code class=\"hljs\">dangerous</code> that doesn‚Äôt do anything in its\nbody:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">dangerous</span></span>() {}\n\n    <span class=\"hljs-keyword\">unsafe</span> {\n        dangerous();\n    }\n<span class=\"boring\">}</span></code></pre></pre>\n<p>We must call the <code class=\"hljs\">dangerous</code> function within a separate <code class=\"hljs\">unsafe</code> block. If we\ntry to call <code class=\"hljs\">dangerous</code> without the <code class=\"hljs\">unsafe</code> block, we‚Äôll get an error:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling unsafe-example v0.1.0 (file:///projects/unsafe-example)\nerror[E0133]: call to unsafe function `dangerous` is unsafe and requires unsafe function or block\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/main.rs:4:5</span>\n  |\n4 |     dangerous();\n  |     ^^^^^^^^^^^ call to unsafe function\n  |\n  = note: consult the function's documentation for information on how to avoid undefined behavior\n\nFor more information about this error, try `rustc --explain E0133`.\nerror: could not compile `unsafe-example` (bin \"unsafe-example\") due to 1 previous error\n</code></pre>\n<p>With the <code class=\"hljs\">unsafe</code> block, we‚Äôre asserting to Rust that we‚Äôve read the function‚Äôs\ndocumentation, we understand how to use it properly, and we‚Äôve verified that\nwe‚Äôre fulfilling the contract of the function.</p>\n<p>Bodies of unsafe functions are effectively <code class=\"hljs\">unsafe</code> blocks, so to perform other\nunsafe operations within an unsafe function, we don‚Äôt need to add another\n<code class=\"hljs\">unsafe</code> block.</p>\n<h4 id=\"creating-a-safe-abstraction-over-unsafe-code\"><a class=\"header\" href=\"#creating-a-safe-abstraction-over-unsafe-code\">Creating a Safe Abstraction over Unsafe Code</a></h4>\n<p>Just because a function contains unsafe code doesn‚Äôt mean we need to mark the\nentire function as unsafe. In fact, wrapping unsafe code in a safe function is\na common abstraction. As an example, let‚Äôs study the <code class=\"hljs\">split_at_mut</code> function\nfrom the standard library, which requires some unsafe code. We‚Äôll explore how\nwe might implement it. This safe method is defined on mutable slices: it takes\none slice and makes it two by splitting the slice at the index given as an\nargument. Listing 19-4 shows how to use <code class=\"hljs\">split_at_mut</code>.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> v = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>];\n\n    <span class=\"hljs-keyword\">let</span> r = &amp;<span class=\"hljs-keyword\">mut</span> v[..];\n\n    <span class=\"hljs-keyword\">let</span> (a, b) = r.split_at_mut(<span class=\"hljs-number\">3</span>);\n\n    <span class=\"hljs-built_in\">assert_eq!</span>(a, &amp;<span class=\"hljs-keyword\">mut</span> [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]);\n    <span class=\"hljs-built_in\">assert_eq!</span>(b, &amp;<span class=\"hljs-keyword\">mut</span> [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>]);\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 19-4: Using the safe <code class=\"hljs\">split_at_mut</code>\nfunction</span></p>\n<p>We can‚Äôt implement this function using only safe Rust. An attempt might look\nsomething like Listing 19-5, which won‚Äôt compile. For simplicity, we‚Äôll\nimplement <code class=\"hljs\">split_at_mut</code> as a function rather than a method and only for slices\nof <code class=\"hljs\">i32</code> values rather than for a generic type <code class=\"hljs\">T</code>.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">split_at_mut</span></span>(values: &amp;<span class=\"hljs-keyword\">mut</span> [<span class=\"hljs-built_in\">i32</span>], mid: <span class=\"hljs-built_in\">usize</span>) -&gt; (&amp;<span class=\"hljs-keyword\">mut</span> [<span class=\"hljs-built_in\">i32</span>], &amp;<span class=\"hljs-keyword\">mut</span> [<span class=\"hljs-built_in\">i32</span>]) {\n    <span class=\"hljs-keyword\">let</span> len = values.len();\n\n    <span class=\"hljs-built_in\">assert!</span>(mid &lt;= len);\n\n    (&amp;<span class=\"hljs-keyword\">mut</span> values[..mid], &amp;<span class=\"hljs-keyword\">mut</span> values[mid..])\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> vector = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>];\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> (left, right) = split_at_mut(&amp;<span class=\"hljs-keyword\">mut</span> vector, <span class=\"hljs-number\">3</span>);\n</span><span class=\"boring\">}</span></code></pre>\n<p><span class=\"caption\">Listing 19-5: An attempted implementation of\n<code class=\"hljs\">split_at_mut</code> using only safe Rust</span></p>\n<p>This function first gets the total length of the slice. Then it asserts that\nthe index given as a parameter is within the slice by checking whether it‚Äôs\nless than or equal to the length. The assertion means that if we pass an index\nthat is greater than the length to split the slice at, the function will panic\nbefore it attempts to use that index.</p>\n<p>Then we return two mutable slices in a tuple: one from the start of the\noriginal slice to the <code class=\"hljs\">mid</code> index and another from <code class=\"hljs\">mid</code> to the end of the\nslice.</p>\n<p>When we try to compile the code in Listing 19-5, we‚Äôll get an error.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling unsafe-example v0.1.0 (file:///projects/unsafe-example)\nerror[E0499]: cannot borrow `*values` as mutable more than once at a time\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/main.rs:6:31</span>\n  |\n1 | fn split_at_mut(values: &amp;mut [i32], mid: usize) -&gt; (&amp;mut [i32], &amp;mut [i32]) {\n  |                         - let's call the lifetime of this reference `'1`\n...\n6 |     (&amp;mut values[..mid], &amp;mut values[mid..])\n  |     --------------------------^^^^^^--------\n  |     |     |                   |\n  |     |     |                   second mutable borrow occurs here\n  |     |     first mutable borrow occurs here\n  |     returning this value requires that `*values` is borrowed for `'1`\n\nFor more information about this error, try `rustc --explain E0499`.\nerror: could not compile `unsafe-example` (bin \"unsafe-example\") due to 1 previous error\n</code></pre>\n<p>Rust‚Äôs borrow checker can‚Äôt understand that we‚Äôre borrowing different parts of\nthe slice; it only knows that we‚Äôre borrowing from the same slice twice.\nBorrowing different parts of a slice is fundamentally okay because the two\nslices aren‚Äôt overlapping, but Rust isn‚Äôt smart enough to know this. When we\nknow code is okay, but Rust doesn‚Äôt, it‚Äôs time to reach for unsafe code.</p>\n<p>Listing 19-6 shows how to use an <code class=\"hljs\">unsafe</code> block, a raw pointer, and some calls\nto unsafe functions to make the implementation of <code class=\"hljs\">split_at_mut</code> work.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"hljs-keyword\">use</span> std::slice;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">split_at_mut</span></span>(values: &amp;<span class=\"hljs-keyword\">mut</span> [<span class=\"hljs-built_in\">i32</span>], mid: <span class=\"hljs-built_in\">usize</span>) -&gt; (&amp;<span class=\"hljs-keyword\">mut</span> [<span class=\"hljs-built_in\">i32</span>], &amp;<span class=\"hljs-keyword\">mut</span> [<span class=\"hljs-built_in\">i32</span>]) {\n    <span class=\"hljs-keyword\">let</span> len = values.len();\n    <span class=\"hljs-keyword\">let</span> ptr = values.as_mut_ptr();\n\n    <span class=\"hljs-built_in\">assert!</span>(mid &lt;= len);\n\n    <span class=\"hljs-keyword\">unsafe</span> {\n        (\n            slice::from_raw_parts_mut(ptr, mid),\n            slice::from_raw_parts_mut(ptr.add(mid), len - mid),\n        )\n    }\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> vector = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>];\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> (left, right) = split_at_mut(&amp;<span class=\"hljs-keyword\">mut</span> vector, <span class=\"hljs-number\">3</span>);\n</span><span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 19-6: Using unsafe code in the implementation of\nthe <code class=\"hljs\">split_at_mut</code> function</span></p>\n<p>Recall from <a href=\"ch04-03-slices.html#the-slice-type\">‚ÄúThe Slice Type‚Äù</a><!-- ignore --> section in\nChapter 4 that slices are a pointer to some data and the length of the slice.\nWe use the <code class=\"hljs\">len</code> method to get the length of a slice and the <code class=\"hljs\">as_mut_ptr</code>\nmethod to access the raw pointer of a slice. In this case, because we have a\nmutable slice to <code class=\"hljs\">i32</code> values, <code class=\"hljs\">as_mut_ptr</code> returns a raw pointer with the type\n<code class=\"hljs\">*mut i32</code>, which we‚Äôve stored in the variable <code class=\"hljs\">ptr</code>.</p>\n<p>We keep the assertion that the <code class=\"hljs\">mid</code> index is within the slice. Then we get to\nthe unsafe code: the <code class=\"hljs\">slice::from_raw_parts_mut</code> function takes a raw pointer\nand a length, and it creates a slice. We use this function to create a slice\nthat starts from <code class=\"hljs\">ptr</code> and is <code class=\"hljs\">mid</code> items long. Then we call the <code class=\"hljs\">add</code>\nmethod on <code class=\"hljs\">ptr</code> with <code class=\"hljs\">mid</code> as an argument to get a raw pointer that starts at\n<code class=\"hljs\">mid</code>, and we create a slice using that pointer and the remaining number of\nitems after <code class=\"hljs\">mid</code> as the length.</p>\n<p>The function <code class=\"hljs\">slice::from_raw_parts_mut</code> is unsafe because it takes a raw\npointer and must trust that this pointer is valid. The <code class=\"hljs\">add</code> method on raw\npointers is also unsafe, because it must trust that the offset location is also\na valid pointer. Therefore, we had to put an <code class=\"hljs\">unsafe</code> block around our calls to\n<code class=\"hljs\">slice::from_raw_parts_mut</code> and <code class=\"hljs\">add</code> so we could call them. By looking at\nthe code and by adding the assertion that <code class=\"hljs\">mid</code> must be less than or equal to\n<code class=\"hljs\">len</code>, we can tell that all the raw pointers used within the <code class=\"hljs\">unsafe</code> block\nwill be valid pointers to data within the slice. This is an acceptable and\nappropriate use of <code class=\"hljs\">unsafe</code>.</p>\n<p>Note that we don‚Äôt need to mark the resulting <code class=\"hljs\">split_at_mut</code> function as\n<code class=\"hljs\">unsafe</code>, and we can call this function from safe Rust. We‚Äôve created a safe\nabstraction to the unsafe code with an implementation of the function that uses\n<code class=\"hljs\">unsafe</code> code in a safe way, because it creates only valid pointers from the\ndata this function has access to.</p>\n<p>In contrast, the use of <code class=\"hljs\">slice::from_raw_parts_mut</code> in Listing 19-7 would\nlikely crash when the slice is used. This code takes an arbitrary memory\nlocation and creates a slice 10,000 items long.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">use</span> std::slice;\n\n    <span class=\"hljs-keyword\">let</span> address = <span class=\"hljs-number\">0x01234usize</span>;\n    <span class=\"hljs-keyword\">let</span> r = address <span class=\"hljs-keyword\">as</span> *<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-built_in\">i32</span>;\n\n    <span class=\"hljs-keyword\">let</span> values: &amp;[<span class=\"hljs-built_in\">i32</span>] = <span class=\"hljs-keyword\">unsafe</span> { slice::from_raw_parts_mut(r, <span class=\"hljs-number\">10000</span>) };\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 19-7: Creating a slice from an arbitrary memory\nlocation</span></p>\n<p>We don‚Äôt own the memory at this arbitrary location, and there is no guarantee\nthat the slice this code creates contains valid <code class=\"hljs\">i32</code> values. Attempting to use\n<code class=\"hljs\">values</code> as though it‚Äôs a valid slice results in undefined behavior.</p>\n<h4 id=\"using-extern-functions-to-call-external-code\"><a class=\"header\" href=\"#using-extern-functions-to-call-external-code\">Using <code>extern</code> Functions to Call External Code</a></h4>\n<p>Sometimes, your Rust code might need to interact with code written in another\nlanguage. For this, Rust has the keyword <code class=\"hljs\">extern</code> that facilitates the creation\nand use of a <em>Foreign Function Interface (FFI)</em>. An FFI is a way for a\nprogramming language to define functions and enable a different (foreign)\nprogramming language to call those functions.</p>\n<p>Listing 19-8 demonstrates how to set up an integration with the <code class=\"hljs\">abs</code> function\nfrom the C standard library. Functions declared within <code class=\"hljs\">extern</code> blocks are\nalways unsafe to call from Rust code. The reason is that other languages don‚Äôt\nenforce Rust‚Äôs rules and guarantees, and Rust can‚Äôt check them, so\nresponsibility falls on the programmer to ensure safety.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">\"C\"</span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">abs</span></span>(input: <span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span>;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">unsafe</span> {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Absolute value of -3 according to C: {}\"</span>, abs(-<span class=\"hljs-number\">3</span>));\n    }\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 19-8: Declaring and calling an <code class=\"hljs\">extern</code> function\ndefined in another language</span></p>\n<p>Within the <code class=\"hljs\">extern \"C\"</code> block, we list the names and signatures of external\nfunctions from another language we want to call. The <code class=\"hljs\">\"C\"</code> part defines which\n<em>application binary interface (ABI)</em> the external function uses: the ABI\ndefines how to call the function at the assembly level. The <code class=\"hljs\">\"C\"</code> ABI is the\nmost common and follows the C programming language‚Äôs ABI.</p>\n<section class=\"note\" aria-role=\"note\">\n<h4 id=\"calling-rust-functions-from-other-languages\"><a class=\"header\" href=\"#calling-rust-functions-from-other-languages\">Calling Rust Functions from Other Languages</a></h4>\n<p>We can also use <code class=\"hljs\">extern</code> to create an interface that allows other languages\nto call Rust functions. Instead of creating a whole <code class=\"hljs\">extern</code> block, we add\nthe <code class=\"hljs\">extern</code> keyword and specify the ABI to use just before the <code class=\"hljs\">fn</code> keyword\nfor the relevant function. We also need to add a <code class=\"hljs\">#[no_mangle]</code> annotation to\ntell the Rust compiler not to mangle the name of this function. <em>Mangling</em> is\nwhen a compiler changes the name we‚Äôve given a function to a different name\nthat contains more information for other parts of the compilation process to\nconsume but is less human readable. Every programming language compiler\nmangles names slightly differently, so for a Rust function to be nameable by\nother languages, we must disable the Rust compiler‚Äôs name mangling.</p>\n<p>In the following example, we make the <code class=\"hljs\">call_from_c</code> function accessible from\nC code, after it‚Äôs compiled to a shared library and linked from C:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-meta\">#[no_mangle]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">extern</span> <span class=\"hljs-string\">\"C\"</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">call_from_c</span></span>() {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Just called a Rust function from C!\"</span>);\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>This usage of <code class=\"hljs\">extern</code> does not require <code class=\"hljs\">unsafe</code>.</p>\n</section>\n<h3 id=\"accessing-or-modifying-a-mutable-static-variable\"><a class=\"header\" href=\"#accessing-or-modifying-a-mutable-static-variable\">Accessing or Modifying a Mutable Static Variable</a></h3>\n<p>In this book, we‚Äôve not yet talked about <em>global variables</em>, which Rust does\nsupport but can be problematic with Rust‚Äôs ownership rules. If two threads are\naccessing the same mutable global variable, it can cause a data race.</p>\n<p>In Rust, global variables are called <em>static</em> variables. Listing 19-9 shows an\nexample declaration and use of a static variable with a string slice as a\nvalue.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-keyword\">static</span> HELLO_WORLD: &amp;<span class=\"hljs-built_in\">str</span> = <span class=\"hljs-string\">\"Hello, world!\"</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"name is: {HELLO_WORLD}\"</span>);\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 19-9: Defining and using an immutable static\nvariable</span></p>\n<p>Static variables are similar to constants, which we discussed in the\n<a href=\"ch03-01-variables-and-mutability.html#constants\">‚ÄúDifferences Between Variables and\nConstants‚Äù</a><!-- ignore --> section\nin Chapter 3. The names of static variables are in <code class=\"hljs\">SCREAMING_SNAKE_CASE</code> by\nconvention. Static variables can only store references with the <code class=\"hljs\">'static</code>\nlifetime, which means the Rust compiler can figure out the lifetime and we\naren‚Äôt required to annotate it explicitly. Accessing an immutable static\nvariable is safe.</p>\n<p>A subtle difference between constants and immutable static variables is that\nvalues in a static variable have a fixed address in memory. Using the value\nwill always access the same data. Constants, on the other hand, are allowed to\nduplicate their data whenever they‚Äôre used. Another difference is that static\nvariables can be mutable. Accessing and modifying mutable static variables is\n<em>unsafe</em>. Listing 19-10 shows how to declare, access, and modify a mutable\nstatic variable named <code class=\"hljs\">COUNTER</code>.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">mut</span> COUNTER: <span class=\"hljs-built_in\">u32</span> = <span class=\"hljs-number\">0</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add_to_count</span></span>(inc: <span class=\"hljs-built_in\">u32</span>) {\n    <span class=\"hljs-keyword\">unsafe</span> {\n        COUNTER += inc;\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    add_to_count(<span class=\"hljs-number\">3</span>);\n\n    <span class=\"hljs-keyword\">unsafe</span> {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"COUNTER: {COUNTER}\"</span>);\n    }\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 19-10: Reading from or writing to a mutable\nstatic variable is unsafe</span></p>\n<p>As with regular variables, we specify mutability using the <code class=\"hljs\">mut</code> keyword. Any\ncode that reads or writes from <code class=\"hljs\">COUNTER</code> must be within an <code class=\"hljs\">unsafe</code> block. This\ncode compiles and prints <code class=\"hljs\">COUNTER: 3</code> as we would expect because it‚Äôs single\nthreaded. Having multiple threads access <code class=\"hljs\">COUNTER</code> would likely result in data\nraces.</p>\n<p>With mutable data that is globally accessible, it‚Äôs difficult to ensure there\nare no data races, which is why Rust considers mutable static variables to be\nunsafe. Where possible, it‚Äôs preferable to use the concurrency techniques and\nthread-safe smart pointers we discussed in Chapter 16 so the compiler checks\nthat data accessed from different threads is done safely.</p>\n<h3 id=\"implementing-an-unsafe-trait\"><a class=\"header\" href=\"#implementing-an-unsafe-trait\">Implementing an Unsafe Trait</a></h3>\n<p>We can use <code class=\"hljs\">unsafe</code> to implement an unsafe trait. A trait is unsafe when at\nleast one of its methods has some invariant that the compiler can‚Äôt verify. We\ndeclare that a trait is <code class=\"hljs\">unsafe</code> by adding the <code class=\"hljs\">unsafe</code> keyword before <code class=\"hljs\">trait</code>\nand marking the implementation of the trait as <code class=\"hljs\">unsafe</code> too, as shown in\nListing 19-11.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Foo</span></span> {\n    <span class=\"hljs-comment\">// methods go here</span>\n}\n\n<span class=\"hljs-keyword\">unsafe</span> <span class=\"hljs-keyword\">impl</span> Foo <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">i32</span> {\n    <span class=\"hljs-comment\">// method implementations go here</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}</code></pre></pre>\n<p><span class=\"caption\">Listing 19-11: Defining and implementing an unsafe\ntrait</span></p>\n<p>By using <code class=\"hljs\">unsafe impl</code>, we‚Äôre promising that we‚Äôll uphold the invariants that\nthe compiler can‚Äôt verify.</p>\n<p>As an example, recall the <code class=\"hljs\">Sync</code> and <code class=\"hljs\">Send</code> marker traits we discussed in the\n<a href=\"ch16-04-extensible-concurrency-sync-and-send.html#extensible-concurrency-with-the-sync-and-send-traits\">‚ÄúExtensible Concurrency with the <code class=\"hljs\">Sync</code> and <code class=\"hljs\">Send</code>\nTraits‚Äù</a><!-- ignore -->\nsection in Chapter 16: the compiler implements these traits automatically if\nour types are composed entirely of <code class=\"hljs\">Send</code> and <code class=\"hljs\">Sync</code> types. If we implement a\ntype that contains a type that is not <code class=\"hljs\">Send</code> or <code class=\"hljs\">Sync</code>, such as raw pointers,\nand we want to mark that type as <code class=\"hljs\">Send</code> or <code class=\"hljs\">Sync</code>, we must use <code class=\"hljs\">unsafe</code>. Rust\ncan‚Äôt verify that our type upholds the guarantees that it can be safely sent\nacross threads or accessed from multiple threads; therefore, we need to do\nthose checks manually and indicate as such with <code class=\"hljs\">unsafe</code>.</p>\n<h3 id=\"accessing-fields-of-a-union\"><a class=\"header\" href=\"#accessing-fields-of-a-union\">Accessing Fields of a Union</a></h3>\n<p>The final action that works only with <code class=\"hljs\">unsafe</code> is accessing fields of a\n<em>union</em>. A <code class=\"hljs\">union</code> is similar to a <code class=\"hljs\">struct</code>, but only one declared field is\nused in a particular instance at one time. Unions are primarily used to\ninterface with unions in C code. Accessing union fields is unsafe because Rust\ncan‚Äôt guarantee the type of the data currently being stored in the union\ninstance. You can learn more about unions in <a href=\"../reference/items/unions.html\">the Rust Reference</a>.</p>\n<h3 id=\"when-to-use-unsafe-code\"><a class=\"header\" href=\"#when-to-use-unsafe-code\">When to Use Unsafe Code</a></h3>\n<p>Using <code class=\"hljs\">unsafe</code> to take one of the five actions (superpowers) just discussed\nisn‚Äôt wrong or even frowned upon. But it is trickier to get <code class=\"hljs\">unsafe</code> code\ncorrect because the compiler can‚Äôt help uphold memory safety. When you have a\nreason to use <code class=\"hljs\">unsafe</code> code, you can do so, and having the explicit <code class=\"hljs\">unsafe</code>\nannotation makes it easier to track down the source of problems when they occur.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"advanced-traits\"><a class=\"header\" href=\"#advanced-traits\">Advanced Traits</a></h2>\n<p>We first covered traits in the <a href=\"ch10-02-traits.html#traits-defining-shared-behavior\">‚ÄúTraits: Defining Shared\nBehavior‚Äù</a><!-- ignore --> section of Chapter\n10, but we didn‚Äôt discuss the more advanced details. Now that you know more\nabout Rust, we can get into the nitty-gritty.</p>\n<h3 id=\"specifying-placeholder-types-in-trait-definitions-with-associated-types\"><a class=\"header\" href=\"#specifying-placeholder-types-in-trait-definitions-with-associated-types\">Specifying Placeholder Types in Trait Definitions with Associated Types</a></h3>\n<p><em>Associated types</em> connect a type placeholder with a trait such that the trait\nmethod definitions can use these placeholder types in their signatures. The\nimplementor of a trait will specify the concrete type to be used instead of the\nplaceholder type for the particular implementation. That way, we can define a\ntrait that uses some types without needing to know exactly what those types are\nuntil the trait is implemented.</p>\n<p>We‚Äôve described most of the advanced features in this chapter as being rarely\nneeded. Associated types are somewhere in the middle: they‚Äôre used more rarely\nthan features explained in the rest of the book but more commonly than many of\nthe other features discussed in this chapter.</p>\n<p>One example of a trait with an associated type is the <code class=\"hljs\">Iterator</code> trait that the\nstandard library provides. The associated type is named <code class=\"hljs\">Item</code> and stands in\nfor the type of the values the type implementing the <code class=\"hljs\">Iterator</code> trait is\niterating over. The definition of the <code class=\"hljs\">Iterator</code> trait is as shown in Listing\n19-12.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust noplayground hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Iterator</span></span> {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Item</span></span>;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">next</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">Option</span>&lt;Self::Item&gt;;\n}</code></pre>\n<p><span class=\"caption\">Listing 19-12: The definition of the <code class=\"hljs\">Iterator</code> trait\nthat has an associated type <code class=\"hljs\">Item</code></span></p>\n<p>The type <code class=\"hljs\">Item</code> is a placeholder, and the <code class=\"hljs\">next</code> method‚Äôs definition shows that\nit will return values of type <code class=\"hljs\">Option&lt;Self::Item&gt;</code>. Implementors of the\n<code class=\"hljs\">Iterator</code> trait will specify the concrete type for <code class=\"hljs\">Item</code>, and the <code class=\"hljs\">next</code>\nmethod will return an <code class=\"hljs\">Option</code> containing a value of that concrete type.</p>\n<p>Associated types might seem like a similar concept to generics, in that the\nlatter allow us to define a function without specifying what types it can\nhandle. To examine the difference between the two concepts, we‚Äôll look at an\nimplementation of the <code class=\"hljs\">Iterator</code> trait on a type named <code class=\"hljs\">Counter</code> that specifies\nthe <code class=\"hljs\">Item</code> type is <code class=\"hljs\">u32</code>:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Counter</span></span> {\n</span><span class=\"boring\">    count: <span class=\"hljs-built_in\">u32</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Counter {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>() -&gt; Counter {\n</span><span class=\"boring\">        Counter { count: <span class=\"hljs-number\">0</span> }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">impl</span> <span class=\"hljs-built_in\">Iterator</span> <span class=\"hljs-keyword\">for</span> Counter {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Item</span></span> = <span class=\"hljs-built_in\">u32</span>;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">next</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">Option</span>&lt;Self::Item&gt; {\n        <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">self</span>.count &lt; <span class=\"hljs-number\">5</span> {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">self</span>.count += <span class=\"hljs-number\">1</span>;\n</span><span class=\"boring\">            <span class=\"hljs-literal\">Some</span>(<span class=\"hljs-keyword\">self</span>.count)\n</span><span class=\"boring\">        } <span class=\"hljs-keyword\">else</span> {\n</span><span class=\"boring\">            <span class=\"hljs-literal\">None</span>\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre>\n<p>This syntax seems comparable to that of generics. So why not just define the\n<code class=\"hljs\">Iterator</code> trait with generics, as shown in Listing 19-13?</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust noplayground hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Iterator</span></span>&lt;T&gt; {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">next</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">Option</span>&lt;T&gt;;\n}</code></pre>\n<p><span class=\"caption\">Listing 19-13: A hypothetical definition of the\n<code class=\"hljs\">Iterator</code> trait using generics</span></p>\n<p>The difference is that when using generics, as in Listing 19-13, we must\nannotate the types in each implementation; because we can also implement\n<code class=\"hljs\">Iterator&lt;String&gt; for Counter</code> or any other type, we could have multiple\nimplementations of <code class=\"hljs\">Iterator</code> for <code class=\"hljs\">Counter</code>. In other words, when a trait has a\ngeneric parameter, it can be implemented for a type multiple times, changing\nthe concrete types of the generic type parameters each time. When we use the\n<code class=\"hljs\">next</code> method on <code class=\"hljs\">Counter</code>, we would have to provide type annotations to\nindicate which implementation of <code class=\"hljs\">Iterator</code> we want to use.</p>\n<p>With associated types, we don‚Äôt need to annotate types because we can‚Äôt\nimplement a trait on a type multiple times. In Listing 19-12 with the\ndefinition that uses associated types, we can only choose what the type of\n<code class=\"hljs\">Item</code> will be once, because there can only be one <code class=\"hljs\">impl Iterator for Counter</code>.\nWe don‚Äôt have to specify that we want an iterator of <code class=\"hljs\">u32</code> values everywhere\nthat we call <code class=\"hljs\">next</code> on <code class=\"hljs\">Counter</code>.</p>\n<p>Associated types also become part of the trait‚Äôs contract: implementors of the\ntrait must provide a type to stand in for the associated type placeholder.\nAssociated types often have a name that describes how the type will be used,\nand documenting the associated type in the API documentation is good practice.</p>\n<h3 id=\"default-generic-type-parameters-and-operator-overloading\"><a class=\"header\" href=\"#default-generic-type-parameters-and-operator-overloading\">Default Generic Type Parameters and Operator Overloading</a></h3>\n<p>When we use generic type parameters, we can specify a default concrete type for\nthe generic type. This eliminates the need for implementors of the trait to\nspecify a concrete type if the default type works. You specify a default type\nwhen declaring a generic type with the <code class=\"hljs\">&lt;PlaceholderType=ConcreteType&gt;</code> syntax.</p>\n<p>A great example of a situation where this technique is useful is with <em>operator\noverloading</em>, in which you customize the behavior of an operator (such as <code class=\"hljs\">+</code>)\nin particular situations.</p>\n<p>Rust doesn‚Äôt allow you to create your own operators or overload arbitrary\noperators. But you can overload the operations and corresponding traits listed\nin <code class=\"hljs\">std::ops</code> by implementing the traits associated with the operator. For\nexample, in Listing 19-14 we overload the <code class=\"hljs\">+</code> operator to add two <code class=\"hljs\">Point</code>\ninstances together. We do this by implementing the <code class=\"hljs\">Add</code> trait on a <code class=\"hljs\">Point</code>\nstruct:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-keyword\">use</span> std::ops::Add;\n\n<span class=\"hljs-meta\">#[derive(Debug, Copy, Clone, PartialEq)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Point</span></span> {\n    x: <span class=\"hljs-built_in\">i32</span>,\n    y: <span class=\"hljs-built_in\">i32</span>,\n}\n\n<span class=\"hljs-keyword\">impl</span> Add <span class=\"hljs-keyword\">for</span> Point {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Output</span></span> = Point;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add</span></span>(<span class=\"hljs-keyword\">self</span>, other: Point) -&gt; Point {\n        Point {\n            x: <span class=\"hljs-keyword\">self</span>.x + other.x,\n            y: <span class=\"hljs-keyword\">self</span>.y + other.y,\n        }\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-built_in\">assert_eq!</span>(\n        Point { x: <span class=\"hljs-number\">1</span>, y: <span class=\"hljs-number\">0</span> } + Point { x: <span class=\"hljs-number\">2</span>, y: <span class=\"hljs-number\">3</span> },\n        Point { x: <span class=\"hljs-number\">3</span>, y: <span class=\"hljs-number\">3</span> }\n    );\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 19-14: Implementing the <code class=\"hljs\">Add</code> trait to overload\nthe <code class=\"hljs\">+</code> operator for <code class=\"hljs\">Point</code> instances</span></p>\n<p>The <code class=\"hljs\">add</code> method adds the <code class=\"hljs\">x</code> values of two <code class=\"hljs\">Point</code> instances and the <code class=\"hljs\">y</code>\nvalues of two <code class=\"hljs\">Point</code> instances to create a new <code class=\"hljs\">Point</code>. The <code class=\"hljs\">Add</code> trait has an\nassociated type named <code class=\"hljs\">Output</code> that determines the type returned from the <code class=\"hljs\">add</code>\nmethod.</p>\n<p>The default generic type in this code is within the <code class=\"hljs\">Add</code> trait. Here is its\ndefinition:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Add</span></span>&lt;Rhs=<span class=\"hljs-keyword\">Self</span>&gt; {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Output</span></span>;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add</span></span>(<span class=\"hljs-keyword\">self</span>, rhs: Rhs) -&gt; Self::Output;\n}\n<span class=\"boring\">}</span></code></pre></pre>\n<p>This code should look generally familiar: a trait with one method and an\nassociated type. The new part is <code class=\"hljs\">Rhs=Self</code>: this syntax is called <em>default\ntype parameters</em>. The <code class=\"hljs\">Rhs</code> generic type parameter (short for ‚Äúright hand\nside‚Äù) defines the type of the <code class=\"hljs\">rhs</code> parameter in the <code class=\"hljs\">add</code> method. If we don‚Äôt\nspecify a concrete type for <code class=\"hljs\">Rhs</code> when we implement the <code class=\"hljs\">Add</code> trait, the type\nof <code class=\"hljs\">Rhs</code> will default to <code class=\"hljs\">Self</code>, which will be the type we‚Äôre implementing\n<code class=\"hljs\">Add</code> on.</p>\n<p>When we implemented <code class=\"hljs\">Add</code> for <code class=\"hljs\">Point</code>, we used the default for <code class=\"hljs\">Rhs</code> because we\nwanted to add two <code class=\"hljs\">Point</code> instances. Let‚Äôs look at an example of implementing\nthe <code class=\"hljs\">Add</code> trait where we want to customize the <code class=\"hljs\">Rhs</code> type rather than using the\ndefault.</p>\n<p>We have two structs, <code class=\"hljs\">Millimeters</code> and <code class=\"hljs\">Meters</code>, holding values in different\nunits. This thin wrapping of an existing type in another struct is known as the\n<em>newtype pattern</em>, which we describe in more detail in the <a href=\"ch19-03-advanced-traits.html#using-the-newtype-pattern-to-implement-external-traits-on-external-types\">‚ÄúUsing the Newtype\nPattern to Implement External Traits on External Types‚Äù</a><!-- ignore\n--> section. We want to add values in millimeters to values in meters and have\nthe implementation of <code class=\"hljs\">Add</code> do the conversion correctly. We can implement <code class=\"hljs\">Add</code>\nfor <code class=\"hljs\">Millimeters</code> with <code class=\"hljs\">Meters</code> as the <code class=\"hljs\">Rhs</code>, as shown in Listing 19-15.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust noplayground hljs\"><span class=\"hljs-keyword\">use</span> std::ops::Add;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Millimeters</span></span>(<span class=\"hljs-built_in\">u32</span>);\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Meters</span></span>(<span class=\"hljs-built_in\">u32</span>);\n\n<span class=\"hljs-keyword\">impl</span> Add&lt;Meters&gt; <span class=\"hljs-keyword\">for</span> Millimeters {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Output</span></span> = Millimeters;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add</span></span>(<span class=\"hljs-keyword\">self</span>, other: Meters) -&gt; Millimeters {\n        Millimeters(<span class=\"hljs-keyword\">self</span>.<span class=\"hljs-number\">0</span> + (other.<span class=\"hljs-number\">0</span> * <span class=\"hljs-number\">1000</span>))\n    }\n}</code></pre>\n<p><span class=\"caption\">Listing 19-15: Implementing the <code class=\"hljs\">Add</code> trait on\n<code class=\"hljs\">Millimeters</code> to add <code class=\"hljs\">Millimeters</code> to <code class=\"hljs\">Meters</code></span></p>\n<p>To add <code class=\"hljs\">Millimeters</code> and <code class=\"hljs\">Meters</code>, we specify <code class=\"hljs\">impl Add&lt;Meters&gt;</code> to set the\nvalue of the <code class=\"hljs\">Rhs</code> type parameter instead of using the default of <code class=\"hljs\">Self</code>.</p>\n<p>You‚Äôll use default type parameters in two main ways:</p>\n<ul>\n<li>To extend a type without breaking existing code</li>\n<li>To allow customization in specific cases most users won‚Äôt need</li>\n</ul>\n<p>The standard library‚Äôs <code class=\"hljs\">Add</code> trait is an example of the second purpose:\nusually, you‚Äôll add two like types, but the <code class=\"hljs\">Add</code> trait provides the ability to\ncustomize beyond that. Using a default type parameter in the <code class=\"hljs\">Add</code> trait\ndefinition means you don‚Äôt have to specify the extra parameter most of the\ntime. In other words, a bit of implementation boilerplate isn‚Äôt needed, making\nit easier to use the trait.</p>\n<p>The first purpose is similar to the second but in reverse: if you want to add a\ntype parameter to an existing trait, you can give it a default to allow\nextension of the functionality of the trait without breaking the existing\nimplementation code.</p>\n<h3 id=\"fully-qualified-syntax-for-disambiguation-calling-methods-with-the-same-name\"><a class=\"header\" href=\"#fully-qualified-syntax-for-disambiguation-calling-methods-with-the-same-name\">Fully Qualified Syntax for Disambiguation: Calling Methods with the Same Name</a></h3>\n<p>Nothing in Rust prevents a trait from having a method with the same name as\nanother trait‚Äôs method, nor does Rust prevent you from implementing both traits\non one type. It‚Äôs also possible to implement a method directly on the type with\nthe same name as methods from traits.</p>\n<p>When calling methods with the same name, you‚Äôll need to tell Rust which one you\nwant to use. Consider the code in Listing 19-16 where we‚Äôve defined two traits,\n<code class=\"hljs\">Pilot</code> and <code class=\"hljs\">Wizard</code>, that both have a method called <code class=\"hljs\">fly</code>. We then implement\nboth traits on a type <code class=\"hljs\">Human</code> that already has a method named <code class=\"hljs\">fly</code> implemented\non it. Each <code class=\"hljs\">fly</code> method does something different.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Pilot</span></span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">fly</span></span>(&amp;<span class=\"hljs-keyword\">self</span>);\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Wizard</span></span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">fly</span></span>(&amp;<span class=\"hljs-keyword\">self</span>);\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Human</span></span>;\n\n<span class=\"hljs-keyword\">impl</span> Pilot <span class=\"hljs-keyword\">for</span> Human {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">fly</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"This is your captain speaking.\"</span>);\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span> Wizard <span class=\"hljs-keyword\">for</span> Human {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">fly</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Up!\"</span>);\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span> Human {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">fly</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"*waving arms furiously*\"</span>);\n    }\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 19-16: Two traits are defined to have a <code class=\"hljs\">fly</code>\nmethod and are implemented on the <code class=\"hljs\">Human</code> type, and a <code class=\"hljs\">fly</code> method is\nimplemented on <code class=\"hljs\">Human</code> directly</span></p>\n<p>When we call <code class=\"hljs\">fly</code> on an instance of <code class=\"hljs\">Human</code>, the compiler defaults to calling\nthe method that is directly implemented on the type, as shown in Listing 19-17.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Pilot</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">fly</span></span>(&amp;<span class=\"hljs-keyword\">self</span>);\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Wizard</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">fly</span></span>(&amp;<span class=\"hljs-keyword\">self</span>);\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Human</span></span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Pilot <span class=\"hljs-keyword\">for</span> Human {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">fly</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"This is your captain speaking.\"</span>);\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Wizard <span class=\"hljs-keyword\">for</span> Human {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">fly</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Up!\"</span>);\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Human {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">fly</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"*waving arms furiously*\"</span>);\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> person = Human;\n    person.fly();\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 19-17: Calling <code class=\"hljs\">fly</code> on an instance of\n<code class=\"hljs\">Human</code></span></p>\n<p>Running this code will print <code class=\"hljs\">*waving arms furiously*</code>, showing that Rust\ncalled the <code class=\"hljs\">fly</code> method implemented on <code class=\"hljs\">Human</code> directly.</p>\n<p>To call the <code class=\"hljs\">fly</code> methods from either the <code class=\"hljs\">Pilot</code> trait or the <code class=\"hljs\">Wizard</code> trait,\nwe need to use more explicit syntax to specify which <code class=\"hljs\">fly</code> method we mean.\nListing 19-18 demonstrates this syntax.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Pilot</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">fly</span></span>(&amp;<span class=\"hljs-keyword\">self</span>);\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Wizard</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">fly</span></span>(&amp;<span class=\"hljs-keyword\">self</span>);\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Human</span></span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Pilot <span class=\"hljs-keyword\">for</span> Human {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">fly</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"This is your captain speaking.\"</span>);\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Wizard <span class=\"hljs-keyword\">for</span> Human {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">fly</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Up!\"</span>);\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Human {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">fly</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"*waving arms furiously*\"</span>);\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> person = Human;\n    Pilot::fly(&amp;person);\n    Wizard::fly(&amp;person);\n    person.fly();\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 19-18: Specifying which trait‚Äôs <code class=\"hljs\">fly</code> method we\nwant to call</span></p>\n<p>Specifying the trait name before the method name clarifies to Rust which\nimplementation of <code class=\"hljs\">fly</code> we want to call. We could also write\n<code class=\"hljs\">Human::fly(&amp;person)</code>, which is equivalent to the <code class=\"hljs\">person.fly()</code> that we used\nin Listing 19-18, but this is a bit longer to write if we don‚Äôt need to\ndisambiguate.</p>\n<p>Running this code prints the following:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling traits-example v0.1.0 (file:///projects/traits-example)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.46s\n     Running `target/debug/traits-example`\nThis is your captain speaking.\nUp!\n*waving arms furiously*\n</code></pre>\n<p>Because the <code class=\"hljs\">fly</code> method takes a <code class=\"hljs\">self</code> parameter, if we had two <em>types</em> that\nboth implement one <em>trait</em>, Rust could figure out which implementation of a\ntrait to use based on the type of <code class=\"hljs\">self</code>.</p>\n<p>However, associated functions that are not methods don‚Äôt have a <code class=\"hljs\">self</code>\nparameter. When there are multiple types or traits that define non-method\nfunctions with the same function name, Rust doesn‚Äôt always know which type you\nmean unless you use <em>fully qualified syntax</em>. For example, in Listing 19-19 we\ncreate a trait for an animal shelter that wants to name all baby dogs <em>Spot</em>.\nWe make an <code class=\"hljs\">Animal</code> trait with an associated non-method function <code class=\"hljs\">baby_name</code>.\nThe <code class=\"hljs\">Animal</code> trait is implemented for the struct <code class=\"hljs\">Dog</code>, on which we also\nprovide an associated non-method function <code class=\"hljs\">baby_name</code> directly.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Animal</span></span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">baby_name</span></span>() -&gt; <span class=\"hljs-built_in\">String</span>;\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Dog</span></span>;\n\n<span class=\"hljs-keyword\">impl</span> Dog {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">baby_name</span></span>() -&gt; <span class=\"hljs-built_in\">String</span> {\n        <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Spot\"</span>)\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span> Animal <span class=\"hljs-keyword\">for</span> Dog {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">baby_name</span></span>() -&gt; <span class=\"hljs-built_in\">String</span> {\n        <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"puppy\"</span>)\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"A baby dog is called a {}\"</span>, Dog::baby_name());\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 19-19: A trait with an associated function and a\ntype with an associated function of the same name that also implements the\ntrait</span></p>\n<p>We implement the code for naming all puppies Spot in the <code class=\"hljs\">baby_name</code> associated\nfunction that is defined on <code class=\"hljs\">Dog</code>. The <code class=\"hljs\">Dog</code> type also implements the trait\n<code class=\"hljs\">Animal</code>, which describes characteristics that all animals have. Baby dogs are\ncalled puppies, and that is expressed in the implementation of the <code class=\"hljs\">Animal</code>\ntrait on <code class=\"hljs\">Dog</code> in the <code class=\"hljs\">baby_name</code> function associated with the <code class=\"hljs\">Animal</code> trait.</p>\n<p>In <code class=\"hljs\">main</code>, we call the <code class=\"hljs\">Dog::baby_name</code> function, which calls the associated\nfunction defined on <code class=\"hljs\">Dog</code> directly. This code prints the following:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling traits-example v0.1.0 (file:///projects/traits-example)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.54s\n     Running `target/debug/traits-example`\nA baby dog is called a Spot\n</code></pre>\n<p>This output isn‚Äôt what we wanted. We want to call the <code class=\"hljs\">baby_name</code> function that\nis part of the <code class=\"hljs\">Animal</code> trait that we implemented on <code class=\"hljs\">Dog</code> so the code prints\n<code class=\"hljs\">A baby dog is called a puppy</code>. The technique of specifying the trait name that\nwe used in Listing 19-18 doesn‚Äôt help here; if we change <code class=\"hljs\">main</code> to the code in\nListing 19-20, we‚Äôll get a compilation error.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-small\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Animal</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">baby_name</span></span>() -&gt; <span class=\"hljs-built_in\">String</span>;\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Dog</span></span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Dog {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">baby_name</span></span>() -&gt; <span class=\"hljs-built_in\">String</span> {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Spot\"</span>)\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Animal <span class=\"hljs-keyword\">for</span> Dog {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">baby_name</span></span>() -&gt; <span class=\"hljs-built_in\">String</span> {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"puppy\"</span>)\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"A baby dog is called a {}\"</span>, Animal::baby_name());\n}</code></pre>\n<p><span class=\"caption\">Listing 19-20: Attempting to call the <code class=\"hljs\">baby_name</code>\nfunction from the <code class=\"hljs\">Animal</code> trait, but Rust doesn‚Äôt know which implementation to\nuse</span></p>\n<p>Because <code class=\"hljs\">Animal::baby_name</code> doesn‚Äôt have a <code class=\"hljs\">self</code> parameter, and there could be\nother types that implement the <code class=\"hljs\">Animal</code> trait, Rust can‚Äôt figure out which\nimplementation of <code class=\"hljs\">Animal::baby_name</code> we want. We‚Äôll get this compiler error:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling traits-example v0.1.0 (file:///projects/traits-example)\nerror[E0790]: cannot call associated function on trait without specifying the corresponding `impl` type\n<span class=\"hljs-meta\">  --&gt;</span><span class=\"bash\"> src/main.rs:20:43</span>\n   |\n2  |     fn baby_name() -&gt; String;\n   |     ------------------------- `Animal::baby_name` defined here\n...\n20 |     println!(\"A baby dog is called a {}\", Animal::baby_name());\n   |                                           ^^^^^^^^^^^^^^^^^^^ cannot call associated function of trait\n   |\nhelp: use the fully-qualified path to the only available implementation\n   |\n20 |     println!(\"A baby dog is called a {}\", &lt;Dog as Animal&gt;::baby_name());\n   |                                           +++++++       +\n\nFor more information about this error, try `rustc --explain E0790`.\nerror: could not compile `traits-example` (bin \"traits-example\") due to 1 previous error\n</code></pre>\n<p>To disambiguate and tell Rust that we want to use the implementation of\n<code class=\"hljs\">Animal</code> for <code class=\"hljs\">Dog</code> as opposed to the implementation of <code class=\"hljs\">Animal</code> for some other\ntype, we need to use fully qualified syntax. Listing 19-21 demonstrates how to\nuse fully qualified syntax.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Animal</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">baby_name</span></span>() -&gt; <span class=\"hljs-built_in\">String</span>;\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Dog</span></span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Dog {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">baby_name</span></span>() -&gt; <span class=\"hljs-built_in\">String</span> {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"Spot\"</span>)\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Animal <span class=\"hljs-keyword\">for</span> Dog {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">baby_name</span></span>() -&gt; <span class=\"hljs-built_in\">String</span> {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"puppy\"</span>)\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"A baby dog is called a {}\"</span>, &lt;Dog <span class=\"hljs-keyword\">as</span> Animal&gt;::baby_name());\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 19-21: Using fully qualified syntax to specify\nthat we want to call the <code class=\"hljs\">baby_name</code> function from the <code class=\"hljs\">Animal</code> trait as\nimplemented on <code class=\"hljs\">Dog</code></span></p>\n<p>We‚Äôre providing Rust with a type annotation within the angle brackets, which\nindicates we want to call the <code class=\"hljs\">baby_name</code> method from the <code class=\"hljs\">Animal</code> trait as\nimplemented on <code class=\"hljs\">Dog</code> by saying that we want to treat the <code class=\"hljs\">Dog</code> type as an\n<code class=\"hljs\">Animal</code> for this function call. This code will now print what we want:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling traits-example v0.1.0 (file:///projects/traits-example)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.48s\n     Running `target/debug/traits-example`\nA baby dog is called a puppy\n</code></pre>\n<p>In general, fully qualified syntax is defined as follows:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\">&lt;Type <span class=\"hljs-keyword\">as</span> Trait&gt;::function(receiver_if_method, next_arg, ...);</code></pre>\n<p>For associated functions that aren‚Äôt methods, there would not be a <code class=\"hljs\">receiver</code>:\nthere would only be the list of other arguments. You could use fully qualified\nsyntax everywhere that you call functions or methods. However, you‚Äôre allowed\nto omit any part of this syntax that Rust can figure out from other information\nin the program. You only need to use this more verbose syntax in cases where\nthere are multiple implementations that use the same name and Rust needs help\nto identify which implementation you want to call.</p>\n<h3 id=\"using-supertraits-to-require-one-traits-functionality-within-another-trait\"><a class=\"header\" href=\"#using-supertraits-to-require-one-traits-functionality-within-another-trait\">Using Supertraits to Require One Trait‚Äôs Functionality Within Another Trait</a></h3>\n<p>Sometimes, you might write a trait definition that depends on another trait:\nfor a type to implement the first trait, you want to require that type to also\nimplement the second trait. You would do this so that your trait definition can\nmake use of the associated items of the second trait. The trait your trait\ndefinition is relying on is called a <em>supertrait</em> of your trait.</p>\n<p>For example, let‚Äôs say we want to make an <code class=\"hljs\">OutlinePrint</code> trait with an\n<code class=\"hljs\">outline_print</code> method that will print a given value formatted so that it‚Äôs\nframed in asterisks. That is, given a <code class=\"hljs\">Point</code> struct that implements the\nstandard library trait <code class=\"hljs\">Display</code> to result in <code class=\"hljs\">(x, y)</code>, when we call\n<code class=\"hljs\">outline_print</code> on a <code class=\"hljs\">Point</code> instance that has <code class=\"hljs\">1</code> for <code class=\"hljs\">x</code> and <code class=\"hljs\">3</code> for <code class=\"hljs\">y</code>, it\nshould print the following:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">**********\n*        *\n* (1, 3) *\n*        *\n**********\n</code></pre>\n<p>In the implementation of the <code class=\"hljs\">outline_print</code> method, we want to use the\n<code class=\"hljs\">Display</code> trait‚Äôs functionality. Therefore, we need to specify that the\n<code class=\"hljs\">OutlinePrint</code> trait will work only for types that also implement <code class=\"hljs\">Display</code> and\nprovide the functionality that <code class=\"hljs\">OutlinePrint</code> needs. We can do that in the\ntrait definition by specifying <code class=\"hljs\">OutlinePrint: Display</code>. This technique is\nsimilar to adding a trait bound to the trait. Listing 19-22 shows an\nimplementation of the <code class=\"hljs\">OutlinePrint</code> trait.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"hljs-keyword\">use</span> std::fmt;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">OutlinePrint</span></span>: fmt::Display {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">outline_print</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-keyword\">let</span> output = <span class=\"hljs-keyword\">self</span>.to_string();\n        <span class=\"hljs-keyword\">let</span> len = output.len();\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, <span class=\"hljs-string\">\"*\"</span>.repeat(len + <span class=\"hljs-number\">4</span>));\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"*{}*\"</span>, <span class=\"hljs-string\">\" \"</span>.repeat(len + <span class=\"hljs-number\">2</span>));\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"* {output} *\"</span>);\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"*{}*\"</span>, <span class=\"hljs-string\">\" \"</span>.repeat(len + <span class=\"hljs-number\">2</span>));\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, <span class=\"hljs-string\">\"*\"</span>.repeat(len + <span class=\"hljs-number\">4</span>));\n    }\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 19-22: Implementing the <code class=\"hljs\">OutlinePrint</code> trait that\nrequires the functionality from <code class=\"hljs\">Display</code></span></p>\n<p>Because we‚Äôve specified that <code class=\"hljs\">OutlinePrint</code> requires the <code class=\"hljs\">Display</code> trait, we\ncan use the <code class=\"hljs\">to_string</code> function that is automatically implemented for any type\nthat implements <code class=\"hljs\">Display</code>. If we tried to use <code class=\"hljs\">to_string</code> without adding a\ncolon and specifying the <code class=\"hljs\">Display</code> trait after the trait name, we‚Äôd get an\nerror saying that no method named <code class=\"hljs\">to_string</code> was found for the type <code class=\"hljs\">&amp;Self</code> in\nthe current scope.</p>\n<p>Let‚Äôs see what happens when we try to implement <code class=\"hljs\">OutlinePrint</code> on a type that\ndoesn‚Äôt implement <code class=\"hljs\">Display</code>, such as the <code class=\"hljs\">Point</code> struct:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::fmt;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">OutlinePrint</span></span>: fmt::Display {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">outline_print</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> output = <span class=\"hljs-keyword\">self</span>.to_string();\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> len = output.len();\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, <span class=\"hljs-string\">\"*\"</span>.repeat(len + <span class=\"hljs-number\">4</span>));\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"*{}*\"</span>, <span class=\"hljs-string\">\" \"</span>.repeat(len + <span class=\"hljs-number\">2</span>));\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"* {output} *\"</span>);\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"*{}*\"</span>, <span class=\"hljs-string\">\" \"</span>.repeat(len + <span class=\"hljs-number\">2</span>));\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, <span class=\"hljs-string\">\"*\"</span>.repeat(len + <span class=\"hljs-number\">4</span>));\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Point</span></span> {\n    x: <span class=\"hljs-built_in\">i32</span>,\n    y: <span class=\"hljs-built_in\">i32</span>,\n}\n\n<span class=\"hljs-keyword\">impl</span> OutlinePrint <span class=\"hljs-keyword\">for</span> Point {}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> p = Point { x: <span class=\"hljs-number\">1</span>, y: <span class=\"hljs-number\">3</span> };\n</span><span class=\"boring\">    p.outline_print();\n</span><span class=\"boring\">}</span></code></pre>\n<p>We get an error saying that <code class=\"hljs\">Display</code> is required but not implemented:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling traits-example v0.1.0 (file:///projects/traits-example)\nerror[E0277]: `Point` doesn't implement `std::fmt::Display`\n<span class=\"hljs-meta\">  --&gt;</span><span class=\"bash\"> src/main.rs:20:23</span>\n   |\n20 | impl OutlinePrint for Point {}\n   |                       ^^^^^ `Point` cannot be formatted with the default formatter\n   |\n   = help: the trait `std::fmt::Display` is not implemented for `Point`\n   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\nnote: required by a bound in `OutlinePrint`\n<span class=\"hljs-meta\">  --&gt;</span><span class=\"bash\"> src/main.rs:3:21</span>\n   |\n3  | trait OutlinePrint: fmt::Display {\n   |                     ^^^^^^^^^^^^ required by this bound in `OutlinePrint`\n\nerror[E0277]: `Point` doesn't implement `std::fmt::Display`\n<span class=\"hljs-meta\">  --&gt;</span><span class=\"bash\"> src/main.rs:24:7</span>\n   |\n24 |     p.outline_print();\n   |       ^^^^^^^^^^^^^ `Point` cannot be formatted with the default formatter\n   |\n   = help: the trait `std::fmt::Display` is not implemented for `Point`\n   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\nnote: required by a bound in `OutlinePrint::outline_print`\n<span class=\"hljs-meta\">  --&gt;</span><span class=\"bash\"> src/main.rs:3:21</span>\n   |\n3  | trait OutlinePrint: fmt::Display {\n   |                     ^^^^^^^^^^^^ required by this bound in `OutlinePrint::outline_print`\n4  |     fn outline_print(&amp;self) {\n   |        ------------- required by a bound in this associated function\n\nFor more information about this error, try `rustc --explain E0277`.\nerror: could not compile `traits-example` (bin \"traits-example\") due to 2 previous errors\n</code></pre>\n<p>To fix this, we implement <code class=\"hljs\">Display</code> on <code class=\"hljs\">Point</code> and satisfy the constraint that\n<code class=\"hljs\">OutlinePrint</code> requires, like so:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">OutlinePrint</span></span>: fmt::Display {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">outline_print</span></span>(&amp;<span class=\"hljs-keyword\">self</span>) {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> output = <span class=\"hljs-keyword\">self</span>.to_string();\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> len = output.len();\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, <span class=\"hljs-string\">\"*\"</span>.repeat(len + <span class=\"hljs-number\">4</span>));\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"*{}*\"</span>, <span class=\"hljs-string\">\" \"</span>.repeat(len + <span class=\"hljs-number\">2</span>));\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"* {output} *\"</span>);\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"*{}*\"</span>, <span class=\"hljs-string\">\" \"</span>.repeat(len + <span class=\"hljs-number\">2</span>));\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"{}\"</span>, <span class=\"hljs-string\">\"*\"</span>.repeat(len + <span class=\"hljs-number\">4</span>));\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Point</span></span> {\n</span><span class=\"boring\">    x: <span class=\"hljs-built_in\">i32</span>,\n</span><span class=\"boring\">    y: <span class=\"hljs-built_in\">i32</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> OutlinePrint <span class=\"hljs-keyword\">for</span> Point {}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">use</span> std::fmt;\n\n<span class=\"hljs-keyword\">impl</span> fmt::Display <span class=\"hljs-keyword\">for</span> Point {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">fmt</span></span>(&amp;<span class=\"hljs-keyword\">self</span>, f: &amp;<span class=\"hljs-keyword\">mut</span> fmt::Formatter) -&gt; fmt::<span class=\"hljs-built_in\">Result</span> {\n        <span class=\"hljs-built_in\">write!</span>(f, <span class=\"hljs-string\">\"({}, {})\"</span>, <span class=\"hljs-keyword\">self</span>.x, <span class=\"hljs-keyword\">self</span>.y)\n    }\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> p = Point { x: <span class=\"hljs-number\">1</span>, y: <span class=\"hljs-number\">3</span> };\n</span><span class=\"boring\">    p.outline_print();\n</span><span class=\"boring\">}</span></code></pre></pre>\n<p>Then implementing the <code class=\"hljs\">OutlinePrint</code> trait on <code class=\"hljs\">Point</code> will compile\nsuccessfully, and we can call <code class=\"hljs\">outline_print</code> on a <code class=\"hljs\">Point</code> instance to display\nit within an outline of asterisks.</p>\n<h3 id=\"using-the-newtype-pattern-to-implement-external-traits-on-external-types\"><a class=\"header\" href=\"#using-the-newtype-pattern-to-implement-external-traits-on-external-types\">Using the Newtype Pattern to Implement External Traits on External Types</a></h3>\n<p>In Chapter 10 in the <a href=\"ch10-02-traits.html#implementing-a-trait-on-a-type\">‚ÄúImplementing a Trait on a\nType‚Äù</a><!-- ignore --> section, we mentioned the\norphan rule that states we‚Äôre only allowed to implement a trait on a type if\neither the trait or the type are local to our crate. It‚Äôs possible to get\naround this restriction using the <em>newtype pattern</em>, which involves creating a\nnew type in a tuple struct. (We covered tuple structs in the <a href=\"ch05-01-defining-structs.html#using-tuple-structs-without-named-fields-to-create-different-types\">‚ÄúUsing Tuple\nStructs without Named Fields to Create Different Types‚Äù</a><!--\nignore --> section of Chapter 5.) The tuple struct will have one field and be a\nthin wrapper around the type we want to implement a trait for. Then the wrapper\ntype is local to our crate, and we can implement the trait on the wrapper.\n<em>Newtype</em> is a term that originates from the Haskell programming language.\nThere is no runtime performance penalty for using this pattern, and the wrapper\ntype is elided at compile time.</p>\n<p>As an example, let‚Äôs say we want to implement <code class=\"hljs\">Display</code> on <code class=\"hljs\">Vec&lt;T&gt;</code>, which the\norphan rule prevents us from doing directly because the <code class=\"hljs\">Display</code> trait and the\n<code class=\"hljs\">Vec&lt;T&gt;</code> type are defined outside our crate. We can make a <code class=\"hljs\">Wrapper</code> struct\nthat holds an instance of <code class=\"hljs\">Vec&lt;T&gt;</code>; then we can implement <code class=\"hljs\">Display</code> on\n<code class=\"hljs\">Wrapper</code> and use the <code class=\"hljs\">Vec&lt;T&gt;</code> value, as shown in Listing 19-23.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-keyword\">use</span> std::fmt;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Wrapper</span></span>(<span class=\"hljs-built_in\">Vec</span>&lt;<span class=\"hljs-built_in\">String</span>&gt;);\n\n<span class=\"hljs-keyword\">impl</span> fmt::Display <span class=\"hljs-keyword\">for</span> Wrapper {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">fmt</span></span>(&amp;<span class=\"hljs-keyword\">self</span>, f: &amp;<span class=\"hljs-keyword\">mut</span> fmt::Formatter) -&gt; fmt::<span class=\"hljs-built_in\">Result</span> {\n        <span class=\"hljs-built_in\">write!</span>(f, <span class=\"hljs-string\">\"[{}]\"</span>, <span class=\"hljs-keyword\">self</span>.<span class=\"hljs-number\">0</span>.join(<span class=\"hljs-string\">\", \"</span>))\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> w = Wrapper(<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"hello\"</span>), <span class=\"hljs-built_in\">String</span>::from(<span class=\"hljs-string\">\"world\"</span>)]);\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"w = {w}\"</span>);\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 19-23: Creating a <code class=\"hljs\">Wrapper</code> type around\n<code class=\"hljs\">Vec&lt;String&gt;</code> to implement <code class=\"hljs\">Display</code></span></p>\n<p>The implementation of <code class=\"hljs\">Display</code> uses <code class=\"hljs\">self.0</code> to access the inner <code class=\"hljs\">Vec&lt;T&gt;</code>,\nbecause <code class=\"hljs\">Wrapper</code> is a tuple struct and <code class=\"hljs\">Vec&lt;T&gt;</code> is the item at index 0 in the\ntuple. Then we can use the functionality of the <code class=\"hljs\">Display</code> trait on <code class=\"hljs\">Wrapper</code>.</p>\n<p>The downside of using this technique is that <code class=\"hljs\">Wrapper</code> is a new type, so it\ndoesn‚Äôt have the methods of the value it‚Äôs holding. We would have to implement\nall the methods of <code class=\"hljs\">Vec&lt;T&gt;</code> directly on <code class=\"hljs\">Wrapper</code> such that the methods\ndelegate to <code class=\"hljs\">self.0</code>, which would allow us to treat <code class=\"hljs\">Wrapper</code> exactly like a\n<code class=\"hljs\">Vec&lt;T&gt;</code>. If we wanted the new type to have every method the inner type has,\nimplementing the <code class=\"hljs\">Deref</code> trait (discussed in Chapter 15 in the <a href=\"ch15-02-deref.html#treating-smart-pointers-like-regular-references-with-the-deref-trait\">‚ÄúTreating Smart\nPointers Like Regular References with the <code class=\"hljs\">Deref</code>\nTrait‚Äù</a><!-- ignore --> section) on the <code class=\"hljs\">Wrapper</code> to return\nthe inner type would be a solution. If we don‚Äôt want the <code class=\"hljs\">Wrapper</code> type to have\nall the methods of the inner type‚Äîfor example, to restrict the <code class=\"hljs\">Wrapper</code> type‚Äôs\nbehavior‚Äîwe would have to implement just the methods we do want manually.</p>\n<p>This newtype pattern is also useful even when traits are not involved. Let‚Äôs\nswitch focus and look at some advanced ways to interact with Rust‚Äôs type system.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"advanced-types\"><a class=\"header\" href=\"#advanced-types\">Advanced Types</a></h2>\n<p>The Rust type system has some features that we‚Äôve so far mentioned but haven‚Äôt\nyet discussed. We‚Äôll start by discussing newtypes in general as we examine why\nnewtypes are useful as types. Then we‚Äôll move on to type aliases, a feature\nsimilar to newtypes but with slightly different semantics. We‚Äôll also discuss\nthe <code class=\"hljs\">!</code> type and dynamically sized types.</p>\n<h3 id=\"using-the-newtype-pattern-for-type-safety-and-abstraction\"><a class=\"header\" href=\"#using-the-newtype-pattern-for-type-safety-and-abstraction\">Using the Newtype Pattern for Type Safety and Abstraction</a></h3>\n<section class=\"note\" aria-role=\"note\">\n<p>Note: This section assumes you‚Äôve read the earlier section <a href=\"ch19-03-advanced-traits.html#using-the-newtype-pattern-to-implement-external-traits-on-external-types\">‚ÄúUsing the\nNewtype Pattern to Implement External Traits on External\nTypes.‚Äù</a><!-- ignore --></p>\n</section>\n<p>The newtype pattern is also useful for tasks beyond those we‚Äôve discussed so\nfar, including statically enforcing that values are never confused and\nindicating the units of a value. You saw an example of using newtypes to\nindicate units in Listing 19-15: recall that the <code class=\"hljs\">Millimeters</code> and <code class=\"hljs\">Meters</code>\nstructs wrapped <code class=\"hljs\">u32</code> values in a newtype. If we wrote a function with a\nparameter of type <code class=\"hljs\">Millimeters</code>, we couldn‚Äôt compile a program that\naccidentally tried to call that function with a value of type <code class=\"hljs\">Meters</code> or a\nplain <code class=\"hljs\">u32</code>.</p>\n<p>We can also use the newtype pattern to abstract away some implementation\ndetails of a type: the new type can expose a public API that is different from\nthe API of the private inner type.</p>\n<p>Newtypes can also hide internal implementation. For example, we could provide a\n<code class=\"hljs\">People</code> type to wrap a <code class=\"hljs\">HashMap&lt;i32, String&gt;</code> that stores a person‚Äôs ID\nassociated with their name. Code using <code class=\"hljs\">People</code> would only interact with the\npublic API we provide, such as a method to add a name string to the <code class=\"hljs\">People</code>\ncollection; that code wouldn‚Äôt need to know that we assign an <code class=\"hljs\">i32</code> ID to names\ninternally. The newtype pattern is a lightweight way to achieve encapsulation\nto hide implementation details, which we discussed in the <a href=\"ch17-01-what-is-oo.html#encapsulation-that-hides-implementation-details\">‚ÄúEncapsulation that\nHides Implementation\nDetails‚Äù</a><!-- ignore -->\nsection of Chapter 17.</p>\n<h3 id=\"creating-type-synonyms-with-type-aliases\"><a class=\"header\" href=\"#creating-type-synonyms-with-type-aliases\">Creating Type Synonyms with Type Aliases</a></h3>\n<p>Rust provides the ability to declare a <em>type alias</em> to give an existing type\nanother name. For this we use the <code class=\"hljs\">type</code> keyword. For example, we can create\nthe alias <code class=\"hljs\">Kilometers</code> to <code class=\"hljs\">i32</code> like so:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Kilometers</span></span> = <span class=\"hljs-built_in\">i32</span>;\n<span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> x: <span class=\"hljs-built_in\">i32</span> = <span class=\"hljs-number\">5</span>;\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> y: Kilometers = <span class=\"hljs-number\">5</span>;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"x + y = {}\"</span>, x + y);\n</span><span class=\"boring\">}</span></code></pre></pre>\n<p>Now, the alias <code class=\"hljs\">Kilometers</code> is a <em>synonym</em> for <code class=\"hljs\">i32</code>; unlike the <code class=\"hljs\">Millimeters</code>\nand <code class=\"hljs\">Meters</code> types we created in Listing 19-15, <code class=\"hljs\">Kilometers</code> is not a separate,\nnew type. Values that have the type <code class=\"hljs\">Kilometers</code> will be treated the same as\nvalues of type <code class=\"hljs\">i32</code>:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Kilometers</span></span> = <span class=\"hljs-built_in\">i32</span>;\n\n    <span class=\"hljs-keyword\">let</span> x: <span class=\"hljs-built_in\">i32</span> = <span class=\"hljs-number\">5</span>;\n    <span class=\"hljs-keyword\">let</span> y: Kilometers = <span class=\"hljs-number\">5</span>;\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"x + y = {}\"</span>, x + y);\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Because <code class=\"hljs\">Kilometers</code> and <code class=\"hljs\">i32</code> are the same type, we can add values of both\ntypes and we can pass <code class=\"hljs\">Kilometers</code> values to functions that take <code class=\"hljs\">i32</code>\nparameters. However, using this method, we don‚Äôt get the type checking benefits\nthat we get from the newtype pattern discussed earlier. In other words, if we\nmix up <code class=\"hljs\">Kilometers</code> and <code class=\"hljs\">i32</code> values somewhere, the compiler will not give us\nan error.</p>\n<p>The main use case for type synonyms is to reduce repetition. For example, we\nmight have a lengthy type like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> <span class=\"hljs-built_in\">Fn</span>() + <span class=\"hljs-built_in\">Send</span> + <span class=\"hljs-symbol\">'static</span>&gt;</code></pre>\n<p>Writing this lengthy type in function signatures and as type annotations all\nover the code can be tiresome and error prone. Imagine having a project full of\ncode like that in Listing 19-24.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> f: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> <span class=\"hljs-built_in\">Fn</span>() + <span class=\"hljs-built_in\">Send</span> + <span class=\"hljs-symbol\">'static</span>&gt; = <span class=\"hljs-built_in\">Box</span>::new(|| <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"hi\"</span>));\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">takes_long_type</span></span>(f: <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> <span class=\"hljs-built_in\">Fn</span>() + <span class=\"hljs-built_in\">Send</span> + <span class=\"hljs-symbol\">'static</span>&gt;) {\n        <span class=\"hljs-comment\">// --snip--</span>\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">returns_long_type</span></span>() -&gt; <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> <span class=\"hljs-built_in\">Fn</span>() + <span class=\"hljs-built_in\">Send</span> + <span class=\"hljs-symbol\">'static</span>&gt; {\n        <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">        <span class=\"hljs-built_in\">Box</span>::new(|| ())\n</span>    }\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 19-24: Using a long type in many places</span></p>\n<p>A type alias makes this code more manageable by reducing the repetition. In\nListing 19-25, we‚Äôve introduced an alias named <code class=\"hljs\">Thunk</code> for the verbose type and\ncan replace all uses of the type with the shorter alias <code class=\"hljs\">Thunk</code>.</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Thunk</span></span> = <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> <span class=\"hljs-built_in\">Fn</span>() + <span class=\"hljs-built_in\">Send</span> + <span class=\"hljs-symbol\">'static</span>&gt;;\n\n    <span class=\"hljs-keyword\">let</span> f: Thunk = <span class=\"hljs-built_in\">Box</span>::new(|| <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"hi\"</span>));\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">takes_long_type</span></span>(f: Thunk) {\n        <span class=\"hljs-comment\">// --snip--</span>\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">returns_long_type</span></span>() -&gt; Thunk {\n        <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">        <span class=\"hljs-built_in\">Box</span>::new(|| ())\n</span>    }\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 19-25: Introducing a type alias <code class=\"hljs\">Thunk</code> to reduce\nrepetition</span></p>\n<p>This code is much easier to read and write! Choosing a meaningful name for a\ntype alias can help communicate your intent as well (<em>thunk</em> is a word for code\nto be evaluated at a later time, so it‚Äôs an appropriate name for a closure that\ngets stored).</p>\n<p>Type aliases are also commonly used with the <code class=\"hljs\">Result&lt;T, E&gt;</code> type for reducing\nrepetition. Consider the <code class=\"hljs\">std::io</code> module in the standard library. I/O\noperations often return a <code class=\"hljs\">Result&lt;T, E&gt;</code> to handle situations when operations\nfail to work. This library has a <code class=\"hljs\">std::io::Error</code> struct that represents all\npossible I/O errors. Many of the functions in <code class=\"hljs\">std::io</code> will be returning\n<code class=\"hljs\">Result&lt;T, E&gt;</code> where the <code class=\"hljs\">E</code> is <code class=\"hljs\">std::io::Error</code>, such as these functions in\nthe <code class=\"hljs\">Write</code> trait:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust noplayground hljs\"><span class=\"hljs-keyword\">use</span> std::fmt;\n<span class=\"hljs-keyword\">use</span> std::io::Error;\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Write</span></span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">write</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, buf: &amp;[<span class=\"hljs-built_in\">u8</span>]) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;<span class=\"hljs-built_in\">usize</span>, Error&gt;;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">flush</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;(), Error&gt;;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">write_all</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, buf: &amp;[<span class=\"hljs-built_in\">u8</span>]) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;(), Error&gt;;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">write_fmt</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, fmt: fmt::Arguments) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;(), Error&gt;;\n}</code></pre>\n<p>The <code class=\"hljs\">Result&lt;..., Error&gt;</code> is repeated a lot. As such, <code class=\"hljs\">std::io</code> has this type\nalias declaration:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::fmt;\n</span><span class=\"boring\">\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Result</span></span>&lt;T&gt; = std::result::<span class=\"hljs-built_in\">Result</span>&lt;T, std::io::Error&gt;;\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Write</span></span> {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">write</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, buf: &amp;[<span class=\"hljs-built_in\">u8</span>]) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;<span class=\"hljs-built_in\">usize</span>&gt;;\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">flush</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;()&gt;;\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">write_all</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, buf: &amp;[<span class=\"hljs-built_in\">u8</span>]) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;()&gt;;\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">write_fmt</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, fmt: fmt::Arguments) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;()&gt;;\n</span><span class=\"boring\">}</span></code></pre>\n<p>Because this declaration is in the <code class=\"hljs\">std::io</code> module, we can use the fully\nqualified alias <code class=\"hljs\">std::io::Result&lt;T&gt;</code>; that is, a <code class=\"hljs\">Result&lt;T, E&gt;</code> with the <code class=\"hljs\">E</code>\nfilled in as <code class=\"hljs\">std::io::Error</code>. The <code class=\"hljs\">Write</code> trait function signatures end up\nlooking like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::fmt;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Result</span></span>&lt;T&gt; = std::result::<span class=\"hljs-built_in\">Result</span>&lt;T, std::io::Error&gt;;\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">Write</span></span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">write</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, buf: &amp;[<span class=\"hljs-built_in\">u8</span>]) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;<span class=\"hljs-built_in\">usize</span>&gt;;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">flush</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;()&gt;;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">write_all</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, buf: &amp;[<span class=\"hljs-built_in\">u8</span>]) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;()&gt;;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">write_fmt</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>, fmt: fmt::Arguments) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;()&gt;;\n}</code></pre>\n<p>The type alias helps in two ways: it makes code easier to write <em>and</em> it gives\nus a consistent interface across all of <code class=\"hljs\">std::io</code>. Because it‚Äôs an alias, it‚Äôs\njust another <code class=\"hljs\">Result&lt;T, E&gt;</code>, which means we can use any methods that work on\n<code class=\"hljs\">Result&lt;T, E&gt;</code> with it, as well as special syntax like the <code class=\"hljs\">?</code> operator.</p>\n<h3 id=\"the-never-type-that-never-returns\"><a class=\"header\" href=\"#the-never-type-that-never-returns\">The Never Type that Never Returns</a></h3>\n<p>Rust has a special type named <code class=\"hljs\">!</code> that‚Äôs known in type theory lingo as the\n<em>empty type</em> because it has no values. We prefer to call it the <em>never type</em>\nbecause it stands in the place of the return type when a function will never\nreturn. Here is an example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground hljs hide-boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">bar</span></span>() -&gt; ! {\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">    <span class=\"hljs-built_in\">panic!</span>();\n</span>}</code></pre>\n<p>This code is read as ‚Äúthe function <code class=\"hljs\">bar</code> returns never.‚Äù Functions that return\nnever are called <em>diverging functions</em>. We can‚Äôt create values of the type <code class=\"hljs\">!</code>\nso <code class=\"hljs\">bar</code> can never possibly return.</p>\n<p>But what use is a type you can never create values for? Recall the code from\nListing 2-5, part of the number guessing game; we‚Äôve reproduced a bit of it\nhere in Listing 19-26.</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> rand::Rng;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::cmp::Ordering;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::io;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Guess the number!\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> secret_number = rand::thread_rng().gen_range(<span class=\"hljs-number\">1</span>..=<span class=\"hljs-number\">100</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The secret number is: {secret_number}\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">loop</span> {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Please input your guess.\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> guess = <span class=\"hljs-built_in\">String</span>::new();\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-comment\">// --snip--</span>\n</span><span class=\"boring\">\n</span><span class=\"boring\">        io::stdin()\n</span><span class=\"boring\">            .read_line(&amp;<span class=\"hljs-keyword\">mut</span> guess)\n</span><span class=\"boring\">            .expect(<span class=\"hljs-string\">\"Failed to read line\"</span>);\n</span><span class=\"boring\">\n</span>        <span class=\"hljs-keyword\">let</span> guess: <span class=\"hljs-built_in\">u32</span> = <span class=\"hljs-keyword\">match</span> guess.trim().parse() {\n            <span class=\"hljs-literal\">Ok</span>(num) =&gt; num,\n            <span class=\"hljs-literal\">Err</span>(_) =&gt; <span class=\"hljs-keyword\">continue</span>,\n        };\n<span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"You guessed: {guess}\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-comment\">// --snip--</span>\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">match</span> guess.cmp(&amp;secret_number) {\n</span><span class=\"boring\">            Ordering::Less =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Too small!\"</span>),\n</span><span class=\"boring\">            Ordering::Greater =&gt; <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Too big!\"</span>),\n</span><span class=\"boring\">            Ordering::Equal =&gt; {\n</span><span class=\"boring\">                <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"You win!\"</span>);\n</span><span class=\"boring\">                <span class=\"hljs-keyword\">break</span>;\n</span><span class=\"boring\">            }\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre>\n<p><span class=\"caption\">Listing 19-26: A <code class=\"hljs\">match</code> with an arm that ends in\n<code class=\"hljs\">continue</code></span></p>\n<p>At the time, we skipped over some details in this code. In Chapter 6 in <a href=\"ch06-02-match.html#the-match-control-flow-operator\">‚ÄúThe\n<code class=\"hljs\">match</code> Control Flow Operator‚Äù</a><!-- ignore -->\nsection, we discussed that <code class=\"hljs\">match</code> arms must all return the same type. So, for\nexample, the following code doesn‚Äôt work:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> guess = <span class=\"hljs-string\">\"3\"</span>;\n</span>    <span class=\"hljs-keyword\">let</span> guess = <span class=\"hljs-keyword\">match</span> guess.trim().parse() {\n        <span class=\"hljs-literal\">Ok</span>(_) =&gt; <span class=\"hljs-number\">5</span>,\n        <span class=\"hljs-literal\">Err</span>(_) =&gt; <span class=\"hljs-string\">\"hello\"</span>,\n    };\n<span class=\"boring\">}</span></code></pre>\n<p>The type of <code class=\"hljs\">guess</code> in this code would have to be an integer <em>and</em> a string,\nand Rust requires that <code class=\"hljs\">guess</code> have only one type. So what does <code class=\"hljs\">continue</code>\nreturn? How were we allowed to return a <code class=\"hljs\">u32</code> from one arm and have another arm\nthat ends with <code class=\"hljs\">continue</code> in Listing 19-26?</p>\n<p>As you might have guessed, <code class=\"hljs\">continue</code> has a <code class=\"hljs\">!</code> value. That is, when Rust\ncomputes the type of <code class=\"hljs\">guess</code>, it looks at both match arms, the former with a\nvalue of <code class=\"hljs\">u32</code> and the latter with a <code class=\"hljs\">!</code> value. Because <code class=\"hljs\">!</code> can never have a\nvalue, Rust decides that the type of <code class=\"hljs\">guess</code> is <code class=\"hljs\">u32</code>.</p>\n<p>The formal way of describing this behavior is that expressions of type <code class=\"hljs\">!</code> can\nbe coerced into any other type. We‚Äôre allowed to end this <code class=\"hljs\">match</code> arm with\n<code class=\"hljs\">continue</code> because <code class=\"hljs\">continue</code> doesn‚Äôt return a value; instead, it moves control\nback to the top of the loop, so in the <code class=\"hljs\">Err</code> case, we never assign a value to\n<code class=\"hljs\">guess</code>.</p>\n<p>The never type is useful with the <code class=\"hljs\">panic!</code> macro as well. Recall the <code class=\"hljs\">unwrap</code>\nfunction that we call on <code class=\"hljs\">Option&lt;T&gt;</code> values to produce a value or panic with\nthis definition:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Option</span></span>&lt;T&gt; {\n</span><span class=\"boring\">    <span class=\"hljs-literal\">Some</span>(T),\n</span><span class=\"boring\">    <span class=\"hljs-literal\">None</span>,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> crate::<span class=\"hljs-built_in\">Option</span>::*;\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">impl</span>&lt;T&gt; <span class=\"hljs-built_in\">Option</span>&lt;T&gt; {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">unwrap</span></span>(<span class=\"hljs-keyword\">self</span>) -&gt; T {\n        <span class=\"hljs-keyword\">match</span> <span class=\"hljs-keyword\">self</span> {\n            <span class=\"hljs-literal\">Some</span>(val) =&gt; val,\n            <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-built_in\">panic!</span>(<span class=\"hljs-string\">\"called `Option::unwrap()` on a `None` value\"</span>),\n        }\n    }\n}</code></pre>\n<p>In this code, the same thing happens as in the <code class=\"hljs\">match</code> in Listing 19-26: Rust\nsees that <code class=\"hljs\">val</code> has the type <code class=\"hljs\">T</code> and <code class=\"hljs\">panic!</code> has the type <code class=\"hljs\">!</code>, so the result\nof the overall <code class=\"hljs\">match</code> expression is <code class=\"hljs\">T</code>. This code works because <code class=\"hljs\">panic!</code>\ndoesn‚Äôt produce a value; it ends the program. In the <code class=\"hljs\">None</code> case, we won‚Äôt be\nreturning a value from <code class=\"hljs\">unwrap</code>, so this code is valid.</p>\n<p>One final expression that has the type <code class=\"hljs\">!</code> is a <code class=\"hljs\">loop</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-built_in\">print!</span>(<span class=\"hljs-string\">\"forever \"</span>);\n\n    <span class=\"hljs-keyword\">loop</span> {\n        <span class=\"hljs-built_in\">print!</span>(<span class=\"hljs-string\">\"and ever \"</span>);\n    }\n<span class=\"boring\">}</span></code></pre>\n<p>Here, the loop never ends, so <code class=\"hljs\">!</code> is the value of the expression. However, this\nwouldn‚Äôt be true if we included a <code class=\"hljs\">break</code>, because the loop would terminate\nwhen it got to the <code class=\"hljs\">break</code>.</p>\n<h3 id=\"dynamically-sized-types-and-the-sized-trait\"><a class=\"header\" href=\"#dynamically-sized-types-and-the-sized-trait\">Dynamically Sized Types and the <code>Sized</code> Trait</a></h3>\n<p>Rust needs to know certain details about its types, such as how much space to\nallocate for a value of a particular type. This leaves one corner of its type\nsystem a little confusing at first: the concept of <em>dynamically sized types</em>.\nSometimes referred to as <em>DSTs</em> or <em>unsized types</em>, these types let us write\ncode using values whose size we can know only at runtime.</p>\n<p>Let‚Äôs dig into the details of a dynamically sized type called <code class=\"hljs\">str</code>, which\nwe‚Äôve been using throughout the book. That‚Äôs right, not <code class=\"hljs\">&amp;str</code>, but <code class=\"hljs\">str</code> on\nits own, is a DST. We can‚Äôt know how long the string is until runtime, meaning\nwe can‚Äôt create a variable of type <code class=\"hljs\">str</code>, nor can we take an argument of type\n<code class=\"hljs\">str</code>. Consider the following code, which does not work:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-small\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> s1: <span class=\"hljs-built_in\">str</span> = <span class=\"hljs-string\">\"Hello there!\"</span>;\n    <span class=\"hljs-keyword\">let</span> s2: <span class=\"hljs-built_in\">str</span> = <span class=\"hljs-string\">\"How's it going?\"</span>;\n<span class=\"boring\">}</span></code></pre>\n<p>Rust needs to know how much memory to allocate for any value of a particular\ntype, and all values of a type must use the same amount of memory. If Rust\nallowed us to write this code, these two <code class=\"hljs\">str</code> values would need to take up the\nsame amount of space. But they have different lengths: <code class=\"hljs\">s1</code> needs 12 bytes of\nstorage and <code class=\"hljs\">s2</code> needs 15. This is why it‚Äôs not possible to create a variable\nholding a dynamically sized type.</p>\n<p>So what do we do? In this case, you already know the answer: we make the types\nof <code class=\"hljs\">s1</code> and <code class=\"hljs\">s2</code> a <code class=\"hljs\">&amp;str</code> rather than a <code class=\"hljs\">str</code>. Recall from the <a href=\"ch04-03-slices.html#string-slices\">‚ÄúString\nSlices‚Äù</a><!-- ignore --> section of Chapter 4 that the slice data\nstructure just stores the starting position and the length of the slice. So\nalthough a <code class=\"hljs\">&amp;T</code> is a single value that stores the memory address of where the\n<code class=\"hljs\">T</code> is located, a <code class=\"hljs\">&amp;str</code> is <em>two</em> values: the address of the <code class=\"hljs\">str</code> and its\nlength. As such, we can know the size of a <code class=\"hljs\">&amp;str</code> value at compile time: it‚Äôs\ntwice the length of a <code class=\"hljs\">usize</code>. That is, we always know the size of a <code class=\"hljs\">&amp;str</code>, no\nmatter how long the string it refers to is. In general, this is the way in\nwhich dynamically sized types are used in Rust: they have an extra bit of\nmetadata that stores the size of the dynamic information. The golden rule of\ndynamically sized types is that we must always put values of dynamically sized\ntypes behind a pointer of some kind.</p>\n<p>We can combine <code class=\"hljs\">str</code> with all kinds of pointers: for example, <code class=\"hljs\">Box&lt;str&gt;</code> or\n<code class=\"hljs\">Rc&lt;str&gt;</code>. In fact, you‚Äôve seen this before but with a different dynamically\nsized type: traits. Every trait is a dynamically sized type we can refer to by\nusing the name of the trait. In Chapter 17 in the <a href=\"ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types\">‚ÄúUsing Trait Objects That\nAllow for Values of Different\nTypes‚Äù</a><!--\nignore --> section, we mentioned that to use traits as trait objects, we must\nput them behind a pointer, such as <code class=\"hljs\">&amp;dyn Trait</code> or <code class=\"hljs\">Box&lt;dyn Trait&gt;</code> (<code class=\"hljs\">Rc&lt;dyn Trait&gt;</code> would work too).</p>\n<p>To work with DSTs, Rust provides the <code class=\"hljs\">Sized</code> trait to determine whether or not\na type‚Äôs size is known at compile time. This trait is automatically implemented\nfor everything whose size is known at compile time. In addition, Rust\nimplicitly adds a bound on <code class=\"hljs\">Sized</code> to every generic function. That is, a\ngeneric function definition like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">generic</span></span>&lt;T&gt;(t: T) {\n    <span class=\"hljs-comment\">// --snip--</span>\n}</code></pre>\n<p>is actually treated as though we had written this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">generic</span></span>&lt;T: <span class=\"hljs-built_in\">Sized</span>&gt;(t: T) {\n    <span class=\"hljs-comment\">// --snip--</span>\n}</code></pre>\n<p>By default, generic functions will work only on types that have a known size at\ncompile time. However, you can use the following special syntax to relax this\nrestriction:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">generic</span></span>&lt;T: ?<span class=\"hljs-built_in\">Sized</span>&gt;(t: &amp;T) {\n    <span class=\"hljs-comment\">// --snip--</span>\n}</code></pre>\n<p>A trait bound on <code class=\"hljs\">?Sized</code> means ‚Äú<code class=\"hljs\">T</code> may or may not be <code class=\"hljs\">Sized</code>‚Äù and this\nnotation overrides the default that generic types must have a known size at\ncompile time. The <code class=\"hljs\">?Trait</code> syntax with this meaning is only available for\n<code class=\"hljs\">Sized</code>, not any other traits.</p>\n<p>Also note that we switched the type of the <code class=\"hljs\">t</code> parameter from <code class=\"hljs\">T</code> to <code class=\"hljs\">&amp;T</code>.\nBecause the type might not be <code class=\"hljs\">Sized</code>, we need to use it behind some kind of\npointer. In this case, we‚Äôve chosen a reference.</p>\n<p>Next, we‚Äôll talk about functions and closures!</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"advanced-functions-and-closures\"><a class=\"header\" href=\"#advanced-functions-and-closures\">Advanced Functions and Closures</a></h2>\n<p>This section explores some advanced features related to functions and closures,\nincluding function pointers and returning closures.</p>\n<h3 id=\"function-pointers\"><a class=\"header\" href=\"#function-pointers\">Function Pointers</a></h3>\n<p>We‚Äôve talked about how to pass closures to functions; you can also pass regular\nfunctions to functions! This technique is useful when you want to pass a\nfunction you‚Äôve already defined rather than defining a new closure. Functions\ncoerce to the type <code class=\"hljs\">fn</code> (with a lowercase f), not to be confused with the <code class=\"hljs\">Fn</code>\nclosure trait. The <code class=\"hljs\">fn</code> type is called a <em>function pointer</em>. Passing functions\nwith function pointers will allow you to use functions as arguments to other\nfunctions.</p>\n<p>The syntax for specifying that a parameter is a function pointer is similar to\nthat of closures, as shown in Listing 19-27, where we‚Äôve defined a function\n<code class=\"hljs\">add_one</code> that adds one to its parameter. The function <code class=\"hljs\">do_twice</code> takes two\nparameters: a function pointer to any function that takes an <code class=\"hljs\">i32</code> parameter\nand returns an <code class=\"hljs\">i32</code>, and one <code class=\"hljs\">i32</code> value. The <code class=\"hljs\">do_twice</code> function calls the\nfunction <code class=\"hljs\">f</code> twice, passing it the <code class=\"hljs\">arg</code> value, then adds the two function call\nresults together. The <code class=\"hljs\">main</code> function calls <code class=\"hljs\">do_twice</code> with the arguments\n<code class=\"hljs\">add_one</code> and <code class=\"hljs\">5</code>.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">add_one</span></span>(x: <span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span> {\n    x + <span class=\"hljs-number\">1</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">do_twice</span></span>(f: <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span></span>(<span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span>, arg: <span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span> {\n    f(arg) + f(arg)\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> answer = do_twice(add_one, <span class=\"hljs-number\">5</span>);\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"The answer is: {answer}\"</span>);\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 19-27: Using the <code class=\"hljs\">fn</code> type to accept a function\npointer as an argument</span></p>\n<p>This code prints <code class=\"hljs\">The answer is: 12</code>. We specify that the parameter <code class=\"hljs\">f</code> in\n<code class=\"hljs\">do_twice</code> is an <code class=\"hljs\">fn</code> that takes one parameter of type <code class=\"hljs\">i32</code> and returns an\n<code class=\"hljs\">i32</code>. We can then call <code class=\"hljs\">f</code> in the body of <code class=\"hljs\">do_twice</code>. In <code class=\"hljs\">main</code>, we can pass\nthe function name <code class=\"hljs\">add_one</code> as the first argument to <code class=\"hljs\">do_twice</code>.</p>\n<p>Unlike closures, <code class=\"hljs\">fn</code> is a type rather than a trait, so we specify <code class=\"hljs\">fn</code> as the\nparameter type directly rather than declaring a generic type parameter with one\nof the <code class=\"hljs\">Fn</code> traits as a trait bound.</p>\n<p>Function pointers implement all three of the closure traits (<code class=\"hljs\">Fn</code>, <code class=\"hljs\">FnMut</code>, and\n<code class=\"hljs\">FnOnce</code>), meaning you can always pass a function pointer as an argument for a\nfunction that expects a closure. It‚Äôs best to write functions using a generic\ntype and one of the closure traits so your functions can accept either\nfunctions or closures.</p>\n<p>That said, one example of where you would want to only accept <code class=\"hljs\">fn</code> and not\nclosures is when interfacing with external code that doesn‚Äôt have closures: C\nfunctions can accept functions as arguments, but C doesn‚Äôt have closures.</p>\n<p>As an example of where you could use either a closure defined inline or a named\nfunction, let‚Äôs look at a use of the <code class=\"hljs\">map</code> method provided by the <code class=\"hljs\">Iterator</code>\ntrait in the standard library. To use the <code class=\"hljs\">map</code> function to turn a vector of\nnumbers into a vector of strings, we could use a closure, like this:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> list_of_numbers = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n    <span class=\"hljs-keyword\">let</span> list_of_strings: <span class=\"hljs-built_in\">Vec</span>&lt;<span class=\"hljs-built_in\">String</span>&gt; =\n        list_of_numbers.iter().map(|i| i.to_string()).collect();\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Or we could name a function as the argument to <code class=\"hljs\">map</code> instead of the closure,\nlike this:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-keyword\">let</span> list_of_numbers = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n    <span class=\"hljs-keyword\">let</span> list_of_strings: <span class=\"hljs-built_in\">Vec</span>&lt;<span class=\"hljs-built_in\">String</span>&gt; =\n        list_of_numbers.iter().map(<span class=\"hljs-built_in\">ToString</span>::to_string).collect();\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Note that we must use the fully qualified syntax that we talked about earlier\nin the <a href=\"ch19-03-advanced-traits.html#advanced-traits\">‚ÄúAdvanced Traits‚Äù</a><!-- ignore --> section because\nthere are multiple functions available named <code class=\"hljs\">to_string</code>. Here, we‚Äôre using the\n<code class=\"hljs\">to_string</code> function defined in the <code class=\"hljs\">ToString</code> trait, which the standard\nlibrary has implemented for any type that implements <code class=\"hljs\">Display</code>.</p>\n<p>Recall from the <a href=\"ch06-01-defining-an-enum.html#enum-values\">‚ÄúEnum values‚Äù</a><!-- ignore --> section of Chapter\n6 that the name of each enum variant that we define also becomes an initializer\nfunction. We can use these initializer functions as function pointers that\nimplement the closure traits, which means we can specify the initializer\nfunctions as arguments for methods that take closures, like so:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Status</span></span> {\n        Value(<span class=\"hljs-built_in\">u32</span>),\n        Stop,\n    }\n\n    <span class=\"hljs-keyword\">let</span> list_of_statuses: <span class=\"hljs-built_in\">Vec</span>&lt;Status&gt; = (<span class=\"hljs-number\">0u32</span>..<span class=\"hljs-number\">20</span>).map(Status::Value).collect();\n<span class=\"boring\">}</span></code></pre></pre>\n<p>Here we create <code class=\"hljs\">Status::Value</code> instances using each <code class=\"hljs\">u32</code> value in the range\nthat <code class=\"hljs\">map</code> is called on by using the initializer function of <code class=\"hljs\">Status::Value</code>.\nSome people prefer this style, and some people prefer to use closures. They\ncompile to the same code, so use whichever style is clearer to you.</p>\n<h3 id=\"returning-closures\"><a class=\"header\" href=\"#returning-closures\">Returning Closures</a></h3>\n<p>Closures are represented by traits, which means you can‚Äôt return closures\ndirectly. In most cases where you might want to return a trait, you can instead\nuse the concrete type that implements the trait as the return value of the\nfunction. However, you can‚Äôt do that with closures because they don‚Äôt have a\nconcrete type that is returnable; you‚Äôre not allowed to use the function\npointer <code class=\"hljs\">fn</code> as a return type, for example.</p>\n<p>The following code tries to return a closure directly, but it won‚Äôt compile:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-small\"></a></div><code class=\"language-rust ignore does_not_compile hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">returns_closure</span></span>() -&gt; <span class=\"hljs-keyword\">dyn</span> <span class=\"hljs-built_in\">Fn</span>(<span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span> {\n    |x| x + <span class=\"hljs-number\">1</span>\n}</code></pre>\n<p>The compiler error is as follows:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo build</span>\n   Compiling functions-example v0.1.0 (file:///projects/functions-example)\nerror[E0746]: return type cannot have an unboxed trait object\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/lib.rs:1:25</span>\n  |\n1 | fn returns_closure() -&gt; dyn Fn(i32) -&gt; i32 {\n  |                         ^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n  |\nhelp: return an `impl Trait` instead of a `dyn Trait`, if all returned values are the same type\n  |\n1 | fn returns_closure() -&gt; impl Fn(i32) -&gt; i32 {\n  |                         ~~~~\nhelp: box the return type, and wrap all of the returned values in `Box::new`\n  |\n1 ~ fn returns_closure() -&gt; Box&lt;dyn Fn(i32) -&gt; i32&gt; {\n2 ~     Box::new(|x| x + 1)\n  |\n\nFor more information about this error, try `rustc --explain E0746`.\nerror: could not compile `functions-example` (lib) due to 1 previous error\n</code></pre>\n<p>The error references the <code class=\"hljs\">Sized</code> trait again! Rust doesn‚Äôt know how much space\nit will need to store the closure. We saw a solution to this problem earlier.\nWe can use a trait object:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust noplayground hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">returns_closure</span></span>() -&gt; <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> <span class=\"hljs-built_in\">Fn</span>(<span class=\"hljs-built_in\">i32</span>) -&gt; <span class=\"hljs-built_in\">i32</span>&gt; {\n    <span class=\"hljs-built_in\">Box</span>::new(|x| x + <span class=\"hljs-number\">1</span>)\n}</code></pre>\n<p>This code will compile just fine. For more about trait objects, refer to the\nsection <a href=\"ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types\">‚ÄúUsing Trait Objects That Allow for Values of Different\nTypes‚Äù</a><!--\nignore --> in Chapter 17.</p>\n<p>Next, let‚Äôs look at macros!</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"macros\"><a class=\"header\" href=\"#macros\">Macros</a></h2>\n<p>We‚Äôve used macros like <code class=\"hljs\">println!</code> throughout this book, but we haven‚Äôt fully\nexplored what a macro is and how it works. The term <em>macro</em> refers to a family\nof features in Rust: <em>declarative</em> macros with <code class=\"hljs\">macro_rules!</code> and three kinds\nof <em>procedural</em> macros:</p>\n<ul>\n<li>Custom <code class=\"hljs\">#[derive]</code> macros that specify code added with the <code class=\"hljs\">derive</code> attribute\nused on structs and enums</li>\n<li>Attribute-like macros that define custom attributes usable on any item</li>\n<li>Function-like macros that look like function calls but operate on the tokens\nspecified as their argument</li>\n</ul>\n<p>We‚Äôll talk about each of these in turn, but first, let‚Äôs look at why we even\nneed macros when we already have functions.</p>\n<h3 id=\"the-difference-between-macros-and-functions\"><a class=\"header\" href=\"#the-difference-between-macros-and-functions\">The Difference Between Macros and Functions</a></h3>\n<p>Fundamentally, macros are a way of writing code that writes other code, which\nis known as <em>metaprogramming</em>. In Appendix C, we discuss the <code class=\"hljs\">derive</code>\nattribute, which generates an implementation of various traits for you. We‚Äôve\nalso used the <code class=\"hljs\">println!</code> and <code class=\"hljs\">vec!</code> macros throughout the book. All of these\nmacros <em>expand</em> to produce more code than the code you‚Äôve written manually.</p>\n<p>Metaprogramming is useful for reducing the amount of code you have to write and\nmaintain, which is also one of the roles of functions. However, macros have\nsome additional powers that functions don‚Äôt.</p>\n<p>A function signature must declare the number and type of parameters the\nfunction has. Macros, on the other hand, can take a variable number of\nparameters: we can call <code class=\"hljs\">println!(\"hello\")</code> with one argument or\n<code class=\"hljs\">println!(\"hello {}\", name)</code> with two arguments. Also, macros are expanded\nbefore the compiler interprets the meaning of the code, so a macro can, for\nexample, implement a trait on a given type. A function can‚Äôt, because it gets\ncalled at runtime and a trait needs to be implemented at compile time.</p>\n<p>The downside to implementing a macro instead of a function is that macro\ndefinitions are more complex than function definitions because you‚Äôre writing\nRust code that writes Rust code. Due to this indirection, macro definitions are\ngenerally more difficult to read, understand, and maintain than function\ndefinitions.</p>\n<p>Another important difference between macros and functions is that you must\ndefine macros or bring them into scope <em>before</em> you call them in a file, as\nopposed to functions you can define anywhere and call anywhere.</p>\n<h3 id=\"declarative-macros-with-macro_rules-for-general-metaprogramming\"><a class=\"header\" href=\"#declarative-macros-with-macro_rules-for-general-metaprogramming\">Declarative Macros with <code>macro_rules!</code> for General Metaprogramming</a></h3>\n<p>The most widely used form of macros in Rust is the <em>declarative macro</em>. These\nare also sometimes referred to as ‚Äúmacros by example,‚Äù ‚Äú<code class=\"hljs\">macro_rules!</code> macros,‚Äù\nor just plain ‚Äúmacros.‚Äù At their core, declarative macros allow you to write\nsomething similar to a Rust <code class=\"hljs\">match</code> expression. As discussed in Chapter 6,\n<code class=\"hljs\">match</code> expressions are control structures that take an expression, compare the\nresulting value of the expression to patterns, and then run the code associated\nwith the matching pattern. Macros also compare a value to patterns that are\nassociated with particular code: in this situation, the value is the literal\nRust source code passed to the macro; the patterns are compared with the\nstructure of that source code; and the code associated with each pattern, when\nmatched, replaces the code passed to the macro. This all happens during\ncompilation.</p>\n<p>To define a macro, you use the <code class=\"hljs\">macro_rules!</code> construct. Let‚Äôs explore how to\nuse <code class=\"hljs\">macro_rules!</code> by looking at how the <code class=\"hljs\">vec!</code> macro is defined. Chapter 8\ncovered how we can use the <code class=\"hljs\">vec!</code> macro to create a new vector with particular\nvalues. For example, the following macro creates a new vector containing three\nintegers:</p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-meta\">#![allow(unused)]</span>\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"hljs-keyword\">let</span> v: <span class=\"hljs-built_in\">Vec</span>&lt;<span class=\"hljs-built_in\">u32</span>&gt; = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n<span class=\"boring\">}</span></code></pre></pre>\n<p>We could also use the <code class=\"hljs\">vec!</code> macro to make a vector of two integers or a vector\nof five string slices. We wouldn‚Äôt be able to use a function to do the same\nbecause we wouldn‚Äôt know the number or type of values up front.</p>\n<p>Listing 19-28 shows a slightly simplified definition of the <code class=\"hljs\">vec!</code> macro.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust noplayground hljs\"><span class=\"hljs-meta\">#[macro_export]</span>\n<span class=\"hljs-built_in\">macro_rules!</span> vec {\n    ( $( $x:expr ),* ) =&gt; {\n        {\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> temp_vec = <span class=\"hljs-built_in\">Vec</span>::new();\n            $(\n                temp_vec.push($x);\n            )*\n            temp_vec\n        }\n    };\n}</code></pre>\n<p><span class=\"caption\">Listing 19-28: A simplified version of the <code class=\"hljs\">vec!</code> macro\ndefinition</span></p>\n<section class=\"note\" aria-role=\"note\">\n<p>Note: The actual definition of the <code class=\"hljs\">vec!</code> macro in the standard library\nincludes code to preallocate the correct amount of memory up front. That code\nis an optimization that we don‚Äôt include here to make the example simpler.</p>\n</section>\n<p>The <code class=\"hljs\">#[macro_export]</code> annotation indicates that this macro should be made\navailable whenever the crate in which the macro is defined is brought into\nscope. Without this annotation, the macro can‚Äôt be brought into scope.</p>\n<p>We then start the macro definition with <code class=\"hljs\">macro_rules!</code> and the name of the\nmacro we‚Äôre defining <em>without</em> the exclamation mark. The name, in this case\n<code class=\"hljs\">vec</code>, is followed by curly brackets denoting the body of the macro definition.</p>\n<p>The structure in the <code class=\"hljs\">vec!</code> body is similar to the structure of a <code class=\"hljs\">match</code>\nexpression. Here we have one arm with the pattern <code class=\"hljs\">( $( $x:expr ),* )</code>,\nfollowed by <code class=\"hljs\">=&gt;</code> and the block of code associated with this pattern. If the\npattern matches, the associated block of code will be emitted. Given that this\nis the only pattern in this macro, there is only one valid way to match; any\nother pattern will result in an error. More complex macros will have more than\none arm.</p>\n<p>Valid pattern syntax in macro definitions is different than the pattern syntax\ncovered in Chapter 18 because macro patterns are matched against Rust code\nstructure rather than values. Let‚Äôs walk through what the pattern pieces in\nListing 19-28 mean; for the full macro pattern syntax, see the <a href=\"../reference/macros-by-example.html\">Rust\nReference</a>.</p>\n<p>First, we use a set of parentheses to encompass the whole pattern. We use a\ndollar sign (<code class=\"hljs\">$</code>) to declare a variable in the macro system that will contain\nthe Rust code matching the pattern. The dollar sign makes it clear this is a\nmacro variable as opposed to a regular Rust variable. Next comes a set of\nparentheses that captures values that match the pattern within the parentheses\nfor use in the replacement code. Within <code class=\"hljs\">$()</code> is <code class=\"hljs\">$x:expr</code>, which matches any\nRust expression and gives the expression the name <code class=\"hljs\">$x</code>.</p>\n<p>The comma following <code class=\"hljs\">$()</code> indicates that a literal comma separator character\ncould optionally appear after the code that matches the code in <code class=\"hljs\">$()</code>. The <code class=\"hljs\">*</code>\nspecifies that the pattern matches zero or more of whatever precedes the <code class=\"hljs\">*</code>.</p>\n<p>When we call this macro with <code class=\"hljs\">vec![1, 2, 3];</code>, the <code class=\"hljs\">$x</code> pattern matches three\ntimes with the three expressions <code class=\"hljs\">1</code>, <code class=\"hljs\">2</code>, and <code class=\"hljs\">3</code>.</p>\n<p>Now let‚Äôs look at the pattern in the body of the code associated with this arm:\n<code class=\"hljs\">temp_vec.push()</code> within <code class=\"hljs\">$()*</code> is generated for each part that matches <code class=\"hljs\">$()</code>\nin the pattern zero or more times depending on how many times the pattern\nmatches. The <code class=\"hljs\">$x</code> is replaced with each expression matched. When we call this\nmacro with <code class=\"hljs\">vec![1, 2, 3];</code>, the code generated that replaces this macro call\nwill be the following:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\">{\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> temp_vec = <span class=\"hljs-built_in\">Vec</span>::new();\n    temp_vec.push(<span class=\"hljs-number\">1</span>);\n    temp_vec.push(<span class=\"hljs-number\">2</span>);\n    temp_vec.push(<span class=\"hljs-number\">3</span>);\n    temp_vec\n}</code></pre>\n<p>We‚Äôve defined a macro that can take any number of arguments of any type and can\ngenerate code to create a vector containing the specified elements.</p>\n<p>To learn more about how to write macros, consult the online documentation or\nother resources, such as <a href=\"https://veykril.github.io/tlborm/\">‚ÄúThe Little Book of Rust Macros‚Äù</a> started by\nDaniel Keep and continued by Lukas Wirth.</p>\n<h3 id=\"procedural-macros-for-generating-code-from-attributes\"><a class=\"header\" href=\"#procedural-macros-for-generating-code-from-attributes\">Procedural Macros for Generating Code from Attributes</a></h3>\n<p>The second form of macros is the <em>procedural macro</em>, which acts more like a\nfunction (and is a type of procedure). Procedural macros accept some code as an\ninput, operate on that code, and produce some code as an output rather than\nmatching against patterns and replacing the code with other code as declarative\nmacros do. The three kinds of procedural macros are custom derive,\nattribute-like, and function-like, and all work in a similar fashion.</p>\n<p>When creating procedural macros, the definitions must reside in their own crate\nwith a special crate type. This is for complex technical reasons that we hope\nto eliminate in the future. In Listing 19-29, we show how to define a\nprocedural macro, where <code class=\"hljs\">some_attribute</code> is a placeholder for using a specific\nmacro variety.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">use</span> proc_macro;\n\n<span class=\"hljs-meta\">#[some_attribute]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">some_name</span></span>(input: TokenStream) -&gt; TokenStream {\n}</code></pre>\n<p><span class=\"caption\">Listing 19-29: An example of defining a procedural\nmacro</span></p>\n<p>The function that defines a procedural macro takes a <code class=\"hljs\">TokenStream</code> as an input\nand produces a <code class=\"hljs\">TokenStream</code> as an output. The <code class=\"hljs\">TokenStream</code> type is defined by\nthe <code class=\"hljs\">proc_macro</code> crate that is included with Rust and represents a sequence of\ntokens. This is the core of the macro: the source code that the macro is\noperating on makes up the input <code class=\"hljs\">TokenStream</code>, and the code the macro produces\nis the output <code class=\"hljs\">TokenStream</code>. The function also has an attribute attached to it\nthat specifies which kind of procedural macro we‚Äôre creating. We can have\nmultiple kinds of procedural macros in the same crate.</p>\n<p>Let‚Äôs look at the different kinds of procedural macros. We‚Äôll start with a\ncustom derive macro and then explain the small dissimilarities that make the\nother forms different.</p>\n<h3 id=\"how-to-write-a-custom-derive-macro\"><a class=\"header\" href=\"#how-to-write-a-custom-derive-macro\">How to Write a Custom <code>derive</code> Macro</a></h3>\n<p>Let‚Äôs create a crate named <code class=\"hljs\">hello_macro</code> that defines a trait named\n<code class=\"hljs\">HelloMacro</code> with one associated function named <code class=\"hljs\">hello_macro</code>. Rather than\nmaking our users implement the <code class=\"hljs\">HelloMacro</code> trait for each of their types,\nwe‚Äôll provide a procedural macro so users can annotate their type with\n<code class=\"hljs\">#[derive(HelloMacro)]</code> to get a default implementation of the <code class=\"hljs\">hello_macro</code>\nfunction. The default implementation will print <code class=\"hljs\">Hello, Macro! My name is TypeName!</code> where <code class=\"hljs\">TypeName</code> is the name of the type on which this trait has\nbeen defined. In other words, we‚Äôll write a crate that enables another\nprogrammer to write code like Listing 19-30 using our crate.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs\"><span class=\"hljs-keyword\">use</span> hello_macro::HelloMacro;\n<span class=\"hljs-keyword\">use</span> hello_macro_derive::HelloMacro;\n\n<span class=\"hljs-meta\">#[derive(HelloMacro)]</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Pancakes</span></span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    Pancakes::hello_macro();\n}</code></pre>\n<p><span class=\"caption\">Listing 19-30: The code a user of our crate will be able\nto write when using our procedural macro</span></p>\n<p>This code will print <code class=\"hljs\">Hello, Macro! My name is Pancakes!</code> when we‚Äôre done. The\nfirst step is to make a new library crate, like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo new hello_macro --lib</span>\n</code></pre>\n<p>Next, we‚Äôll define the <code class=\"hljs\">HelloMacro</code> trait and its associated function:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust noplayground hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">trait</span> <span class=\"hljs-title\">HelloMacro</span></span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">hello_macro</span></span>();\n}</code></pre>\n<p>We have a trait and its function. At this point, our crate user could implement\nthe trait to achieve the desired functionality, like so:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">use</span> hello_macro::HelloMacro;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Pancakes</span></span>;\n\n<span class=\"hljs-keyword\">impl</span> HelloMacro <span class=\"hljs-keyword\">for</span> Pancakes {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">hello_macro</span></span>() {\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Hello, Macro! My name is Pancakes!\"</span>);\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    Pancakes::hello_macro();\n}</code></pre>\n<p>However, they would need to write the implementation block for each type they\nwanted to use with <code class=\"hljs\">hello_macro</code>; we want to spare them from having to do this\nwork.</p>\n<p>Additionally, we can‚Äôt yet provide the <code class=\"hljs\">hello_macro</code> function with default\nimplementation that will print the name of the type the trait is implemented\non: Rust doesn‚Äôt have reflection capabilities, so it can‚Äôt look up the type‚Äôs\nname at runtime. We need a macro to generate code at compile time.</p>\n<p>The next step is to define the procedural macro. At the time of this writing,\nprocedural macros need to be in their own crate. Eventually, this restriction\nmight be lifted. The convention for structuring crates and macro crates is as\nfollows: for a crate named <code class=\"hljs\">foo</code>, a custom derive procedural macro crate is\ncalled <code class=\"hljs\">foo_derive</code>. Let‚Äôs start a new crate called <code class=\"hljs\">hello_macro_derive</code> inside\nour <code class=\"hljs\">hello_macro</code> project:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo new hello_macro_derive --lib</span>\n</code></pre>\n<p>Our two crates are tightly related, so we create the procedural macro crate\nwithin the directory of our <code class=\"hljs\">hello_macro</code> crate. If we change the trait\ndefinition in <code class=\"hljs\">hello_macro</code>, we‚Äôll have to change the implementation of the\nprocedural macro in <code class=\"hljs\">hello_macro_derive</code> as well. The two crates will need to\nbe published separately, and programmers using these crates will need to add\nboth as dependencies and bring them both into scope. We could instead have the\n<code class=\"hljs\">hello_macro</code> crate use <code class=\"hljs\">hello_macro_derive</code> as a dependency and re-export the\nprocedural macro code. However, the way we‚Äôve structured the project makes it\npossible for programmers to use <code class=\"hljs\">hello_macro</code> even if they don‚Äôt want the\n<code class=\"hljs\">derive</code> functionality.</p>\n<p>We need to declare the <code class=\"hljs\">hello_macro_derive</code> crate as a procedural macro crate.\nWe‚Äôll also need functionality from the <code class=\"hljs\">syn</code> and <code class=\"hljs\">quote</code> crates, as you‚Äôll see\nin a moment, so we need to add them as dependencies. Add the following to the\n<em>Cargo.toml</em> file for <code class=\"hljs\">hello_macro_derive</code>:</p>\n<p><span class=\"filename\">Filename: hello_macro_derive/Cargo.toml</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-section\">[lib]</span>\n<span class=\"hljs-attr\">proc-macro</span> = <span class=\"hljs-literal\">true</span>\n\n<span class=\"hljs-section\">[dependencies]</span>\n<span class=\"hljs-attr\">syn</span> = <span class=\"hljs-string\">\"2.0\"</span>\n<span class=\"hljs-attr\">quote</span> = <span class=\"hljs-string\">\"1.0\"</span>\n</code></pre>\n<p>To start defining the procedural macro, place the code in Listing 19-31 into\nyour <em>src/lib.rs</em> file for the <code class=\"hljs\">hello_macro_derive</code> crate. Note that this code\nwon‚Äôt compile until we add a definition for the <code class=\"hljs\">impl_hello_macro</code> function.</p>\n<p><span class=\"filename\">Filename: hello_macro_derive/src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs\"><span class=\"hljs-keyword\">use</span> proc_macro::TokenStream;\n<span class=\"hljs-keyword\">use</span> quote::quote;\n\n<span class=\"hljs-meta\">#[proc_macro_derive(HelloMacro)]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">hello_macro_derive</span></span>(input: TokenStream) -&gt; TokenStream {\n    <span class=\"hljs-comment\">// Construct a representation of Rust code as a syntax tree</span>\n    <span class=\"hljs-comment\">// that we can manipulate</span>\n    <span class=\"hljs-keyword\">let</span> ast = syn::parse(input).unwrap();\n\n    <span class=\"hljs-comment\">// Build the trait implementation</span>\n    impl_hello_macro(&amp;ast)\n}</code></pre>\n<p><span class=\"caption\">Listing 19-31: Code that most procedural macro crates\nwill require in order to process Rust code</span></p>\n<p>Notice that we‚Äôve split the code into the <code class=\"hljs\">hello_macro_derive</code> function, which\nis responsible for parsing the <code class=\"hljs\">TokenStream</code>, and the <code class=\"hljs\">impl_hello_macro</code>\nfunction, which is responsible for transforming the syntax tree: this makes\nwriting a procedural macro more convenient. The code in the outer function\n(<code class=\"hljs\">hello_macro_derive</code> in this case) will be the same for almost every\nprocedural macro crate you see or create. The code you specify in the body of\nthe inner function (<code class=\"hljs\">impl_hello_macro</code> in this case) will be different\ndepending on your procedural macro‚Äôs purpose.</p>\n<p>We‚Äôve introduced three new crates: <code class=\"hljs\">proc_macro</code>, <a href=\"https://crates.io/crates/syn\"><code class=\"hljs\">syn</code></a>, and <a href=\"https://crates.io/crates/quote\"><code class=\"hljs\">quote</code></a>. The\n<code class=\"hljs\">proc_macro</code> crate comes with Rust, so we didn‚Äôt need to add that to the\ndependencies in <em>Cargo.toml</em>. The <code class=\"hljs\">proc_macro</code> crate is the compiler‚Äôs API that\nallows us to read and manipulate Rust code from our code.</p>\n<p>The <code class=\"hljs\">syn</code> crate parses Rust code from a string into a data structure that we\ncan perform operations on. The <code class=\"hljs\">quote</code> crate turns <code class=\"hljs\">syn</code> data structures back\ninto Rust code. These crates make it much simpler to parse any sort of Rust\ncode we might want to handle: writing a full parser for Rust code is no simple\ntask.</p>\n<p>The <code class=\"hljs\">hello_macro_derive</code> function will be called when a user of our library\nspecifies <code class=\"hljs\">#[derive(HelloMacro)]</code> on a type. This is possible because we‚Äôve\nannotated the <code class=\"hljs\">hello_macro_derive</code> function here with <code class=\"hljs\">proc_macro_derive</code> and\nspecified the name <code class=\"hljs\">HelloMacro</code>, which matches our trait name; this is the\nconvention most procedural macros follow.</p>\n<p>The <code class=\"hljs\">hello_macro_derive</code> function first converts the <code class=\"hljs\">input</code> from a\n<code class=\"hljs\">TokenStream</code> to a data structure that we can then interpret and perform\noperations on. This is where <code class=\"hljs\">syn</code> comes into play. The <code class=\"hljs\">parse</code> function in\n<code class=\"hljs\">syn</code> takes a <code class=\"hljs\">TokenStream</code> and returns a <code class=\"hljs\">DeriveInput</code> struct representing the\nparsed Rust code. Listing 19-32 shows the relevant parts of the <code class=\"hljs\">DeriveInput</code>\nstruct we get from parsing the <code class=\"hljs\">struct Pancakes;</code> string:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\">DeriveInput {\n    <span class=\"hljs-comment\">// --snip--</span>\n\n    ident: Ident {\n        ident: <span class=\"hljs-string\">\"Pancakes\"</span>,\n        span: #<span class=\"hljs-number\">0</span> bytes(<span class=\"hljs-number\">95</span>..<span class=\"hljs-number\">103</span>)\n    },\n    data: Struct(\n        DataStruct {\n            struct_token: Struct,\n            fields: Unit,\n            semi_token: <span class=\"hljs-literal\">Some</span>(\n                Semi\n            )\n        }\n    )\n}</code></pre>\n<p><span class=\"caption\">Listing 19-32: The <code class=\"hljs\">DeriveInput</code> instance we get when\nparsing the code that has the macro‚Äôs attribute in Listing 19-30</span></p>\n<p>The fields of this struct show that the Rust code we‚Äôve parsed is a unit struct\nwith the <code class=\"hljs\">ident</code> (identifier, meaning the name) of <code class=\"hljs\">Pancakes</code>. There are more\nfields on this struct for describing all sorts of Rust code; check the <a href=\"https://docs.rs/syn/2.0/syn/struct.DeriveInput.html\"><code class=\"hljs\">syn</code>\ndocumentation for <code class=\"hljs\">DeriveInput</code></a> for more information.</p>\n<p>Soon we‚Äôll define the <code class=\"hljs\">impl_hello_macro</code> function, which is where we‚Äôll build\nthe new Rust code we want to include. But before we do, note that the output\nfor our derive macro is also a <code class=\"hljs\">TokenStream</code>. The returned <code class=\"hljs\">TokenStream</code> is\nadded to the code that our crate users write, so when they compile their crate,\nthey‚Äôll get the extra functionality that we provide in the modified\n<code class=\"hljs\">TokenStream</code>.</p>\n<p>You might have noticed that we‚Äôre calling <code class=\"hljs\">unwrap</code> to cause the\n<code class=\"hljs\">hello_macro_derive</code> function to panic if the call to the <code class=\"hljs\">syn::parse</code> function\nfails here. It‚Äôs necessary for our procedural macro to panic on errors because\n<code class=\"hljs\">proc_macro_derive</code> functions must return <code class=\"hljs\">TokenStream</code> rather than <code class=\"hljs\">Result</code> to\nconform to the procedural macro API. We‚Äôve simplified this example by using\n<code class=\"hljs\">unwrap</code>; in production code, you should provide more specific error messages\nabout what went wrong by using <code class=\"hljs\">panic!</code> or <code class=\"hljs\">expect</code>.</p>\n<p>Now that we have the code to turn the annotated Rust code from a <code class=\"hljs\">TokenStream</code>\ninto a <code class=\"hljs\">DeriveInput</code> instance, let‚Äôs generate the code that implements the\n<code class=\"hljs\">HelloMacro</code> trait on the annotated type, as shown in Listing 19-33.</p>\n<p><span class=\"filename\">Filename: hello_macro_derive/src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> proc_macro::TokenStream;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> quote::quote;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-meta\">#[proc_macro_derive(HelloMacro)]</span>\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">hello_macro_derive</span></span>(input: TokenStream) -&gt; TokenStream {\n</span><span class=\"boring\">    <span class=\"hljs-comment\">// Construct a representation of Rust code as a syntax tree</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">// that we can manipulate</span>\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> ast = syn::parse(input).unwrap();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-comment\">// Build the trait implementation</span>\n</span><span class=\"boring\">    impl_hello_macro(&amp;ast)\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">impl_hello_macro</span></span>(ast: &amp;syn::DeriveInput) -&gt; TokenStream {\n    <span class=\"hljs-keyword\">let</span> name = &amp;ast.ident;\n    <span class=\"hljs-keyword\">let</span> gen = quote! {\n        <span class=\"hljs-keyword\">impl</span> HelloMacro <span class=\"hljs-keyword\">for</span> #name {\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">hello_macro</span></span>() {\n                <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Hello, Macro! My name is {}!\"</span>, <span class=\"hljs-built_in\">stringify!</span>(#name));\n            }\n        }\n    };\n    gen.into()\n}</code></pre>\n<p><span class=\"caption\">Listing 19-33: Implementing the <code class=\"hljs\">HelloMacro</code> trait using\nthe parsed Rust code</span></p>\n<p>We get an <code class=\"hljs\">Ident</code> struct instance containing the name (identifier) of the\nannotated type using <code class=\"hljs\">ast.ident</code>. The struct in Listing 19-32 shows that when\nwe run the <code class=\"hljs\">impl_hello_macro</code> function on the code in Listing 19-30, the\n<code class=\"hljs\">ident</code> we get will have the <code class=\"hljs\">ident</code> field with a value of <code class=\"hljs\">\"Pancakes\"</code>. Thus,\nthe <code class=\"hljs\">name</code> variable in Listing 19-33 will contain an <code class=\"hljs\">Ident</code> struct instance\nthat, when printed, will be the string <code class=\"hljs\">\"Pancakes\"</code>, the name of the struct in\nListing 19-30.</p>\n<p>The <code class=\"hljs\">quote!</code> macro lets us define the Rust code that we want to return. The\ncompiler expects something different to the direct result of the <code class=\"hljs\">quote!</code>\nmacro‚Äôs execution, so we need to convert it to a <code class=\"hljs\">TokenStream</code>. We do this by\ncalling the <code class=\"hljs\">into</code> method, which consumes this intermediate representation and\nreturns a value of the required <code class=\"hljs\">TokenStream</code> type.</p>\n<p>The <code class=\"hljs\">quote!</code> macro also provides some very cool templating mechanics: we can\nenter <code class=\"hljs\">#name</code>, and <code class=\"hljs\">quote!</code> will replace it with the value in the variable\n<code class=\"hljs\">name</code>. You can even do some repetition similar to the way regular macros work.\nCheck out <a href=\"https://docs.rs/quote\">the <code class=\"hljs\">quote</code> crate‚Äôs docs</a> for a thorough introduction.</p>\n<p>We want our procedural macro to generate an implementation of our <code class=\"hljs\">HelloMacro</code>\ntrait for the type the user annotated, which we can get by using <code class=\"hljs\">#name</code>. The\ntrait implementation has the one function <code class=\"hljs\">hello_macro</code>, whose body contains the\nfunctionality we want to provide: printing <code class=\"hljs\">Hello, Macro! My name is</code> and then\nthe name of the annotated type.</p>\n<p>The <code class=\"hljs\">stringify!</code> macro used here is built into Rust. It takes a Rust\nexpression, such as <code class=\"hljs\">1 + 2</code>, and at compile time turns the expression into a\nstring literal, such as <code class=\"hljs\">\"1 + 2\"</code>. This is different than <code class=\"hljs\">format!</code> or\n<code class=\"hljs\">println!</code>, macros which evaluate the expression and then turn the result into\na <code class=\"hljs\">String</code>. There is a possibility that the <code class=\"hljs\">#name</code> input might be an\nexpression to print literally, so we use <code class=\"hljs\">stringify!</code>. Using <code class=\"hljs\">stringify!</code> also\nsaves an allocation by converting <code class=\"hljs\">#name</code> to a string literal at compile time.</p>\n<p>At this point, <code class=\"hljs\">cargo build</code> should complete successfully in both <code class=\"hljs\">hello_macro</code>\nand <code class=\"hljs\">hello_macro_derive</code>. Let‚Äôs hook up these crates to the code in Listing\n19-30 to see the procedural macro in action! Create a new binary project in\nyour <em>projects</em> directory using <code class=\"hljs\">cargo new pancakes</code>. We need to add\n<code class=\"hljs\">hello_macro</code> and <code class=\"hljs\">hello_macro_derive</code> as dependencies in the <code class=\"hljs\">pancakes</code>\ncrate‚Äôs <em>Cargo.toml</em>. If you‚Äôre publishing your versions of <code class=\"hljs\">hello_macro</code> and\n<code class=\"hljs\">hello_macro_derive</code> to <a href=\"https://crates.io/\">crates.io</a>, they would be regular\ndependencies; if not, you can specify them as <code class=\"hljs\">path</code> dependencies as follows:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-toml hljs ini\"><span class=\"hljs-attr\">hello_macro</span> = { path = <span class=\"hljs-string\">\"../hello_macro\"</span> }\n<span class=\"hljs-attr\">hello_macro_derive</span> = { path = <span class=\"hljs-string\">\"../hello_macro/hello_macro_derive\"</span> }\n</code></pre>\n<p>Put the code in Listing 19-30 into <em>src/main.rs</em>, and run <code class=\"hljs\">cargo run</code>: it\nshould print <code class=\"hljs\">Hello, Macro! My name is Pancakes!</code> The implementation of the\n<code class=\"hljs\">HelloMacro</code> trait from the procedural macro was included without the\n<code class=\"hljs\">pancakes</code> crate needing to implement it; the <code class=\"hljs\">#[derive(HelloMacro)]</code> added the\ntrait implementation.</p>\n<p>Next, let‚Äôs explore how the other kinds of procedural macros differ from custom\nderive macros.</p>\n<h3 id=\"attribute-like-macros\"><a class=\"header\" href=\"#attribute-like-macros\">Attribute-like macros</a></h3>\n<p>Attribute-like macros are similar to custom derive macros, but instead of\ngenerating code for the <code class=\"hljs\">derive</code> attribute, they allow you to create new\nattributes. They‚Äôre also more flexible: <code class=\"hljs\">derive</code> only works for structs and\nenums; attributes can be applied to other items as well, such as functions.\nHere‚Äôs an example of using an attribute-like macro: say you have an attribute\nnamed <code class=\"hljs\">route</code> that annotates functions when using a web application framework:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-meta\">#[route(GET, <span class=\"hljs-meta-string\">\"/\"</span>)]</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">index</span></span>() {</code></pre>\n<p>This <code class=\"hljs\">#[route]</code> attribute would be defined by the framework as a procedural\nmacro. The signature of the macro definition function would look like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-meta\">#[proc_macro_attribute]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">route</span></span>(attr: TokenStream, item: TokenStream) -&gt; TokenStream {</code></pre>\n<p>Here, we have two parameters of type <code class=\"hljs\">TokenStream</code>. The first is for the\ncontents of the attribute: the <code class=\"hljs\">GET, \"/\"</code> part. The second is the body of the\nitem the attribute is attached to: in this case, <code class=\"hljs\">fn index() {}</code> and the rest\nof the function‚Äôs body.</p>\n<p>Other than that, attribute-like macros work the same way as custom derive\nmacros: you create a crate with the <code class=\"hljs\">proc-macro</code> crate type and implement a\nfunction that generates the code you want!</p>\n<h3 id=\"function-like-macros\"><a class=\"header\" href=\"#function-like-macros\">Function-like macros</a></h3>\n<p>Function-like macros define macros that look like function calls. Similarly to\n<code class=\"hljs\">macro_rules!</code> macros, they‚Äôre more flexible than functions; for example, they\ncan take an unknown number of arguments. However, <code class=\"hljs\">macro_rules!</code> macros can be\ndefined only using the match-like syntax we discussed in the section\n<a href=\"ch19-06-macros.html#declarative-macros-with-macro_rules-for-general-metaprogramming\">‚ÄúDeclarative Macros with <code class=\"hljs\">macro_rules!</code> for General\nMetaprogramming‚Äù</a><!-- ignore --> earlier. Function-like macros take a\n<code class=\"hljs\">TokenStream</code> parameter and their definition manipulates that <code class=\"hljs\">TokenStream</code>\nusing Rust code as the other two types of procedural macros do. An example of a\nfunction-like macro is an <code class=\"hljs\">sql!</code> macro that might be called like so:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">let</span> sql = sql!(SELECT * FROM posts WHERE id=<span class=\"hljs-number\">1</span>);</code></pre>\n<p>This macro would parse the SQL statement inside it and check that it‚Äôs\nsyntactically correct, which is much more complex processing than a\n<code class=\"hljs\">macro_rules!</code> macro can do. The <code class=\"hljs\">sql!</code> macro would be defined like this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-meta\">#[proc_macro]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">sql</span></span>(input: TokenStream) -&gt; TokenStream {</code></pre>\n<p>This definition is similar to the custom derive macro‚Äôs signature: we receive\nthe tokens that are inside the parentheses and return the code we wanted to\ngenerate.</p>\n<h2 id=\"summary-18\"><a class=\"header\" href=\"#summary-18\">Summary</a></h2>\n<p>Whew! Now you have some Rust features in your toolbox that you likely won‚Äôt use\noften, but you‚Äôll know they‚Äôre available in very particular circumstances.\nWe‚Äôve introduced several complex topics so that when you encounter them in\nerror message suggestions or in other peoples‚Äô code, you‚Äôll be able to\nrecognize these concepts and syntax. Use this chapter as a reference to guide\nyou to solutions.</p>\n<p>Next, we‚Äôll put everything we‚Äôve discussed throughout the book into practice\nand do one more project!</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"final-project-building-a-multithreaded-web-server\"><a class=\"header\" href=\"#final-project-building-a-multithreaded-web-server\">Final Project: Building a Multithreaded Web Server</a></h1>\n<p>It‚Äôs been a long journey, but we‚Äôve reached the end of the book. In this\nchapter, we‚Äôll build one more project together to demonstrate some of the\nconcepts we covered in the final chapters, as well as recap some earlier\nlessons.</p>\n<p>For our final project, we‚Äôll make a web server that says ‚Äúhello‚Äù and looks like\nFigure 20-1 in a web browser.</p>\n<p><img src=\"img/trpl20-01.png\" alt=\"hello from rust\"></p>\n<p><span class=\"caption\">Figure 20-1: Our final shared project</span></p>\n<p>Here is our plan for building the web server:</p>\n<ol>\n<li>Learn a bit about TCP and HTTP.</li>\n<li>Listen for TCP connections on a socket.</li>\n<li>Parse a small number of HTTP requests.</li>\n<li>Create a proper HTTP response.</li>\n<li>Improve the throughput of our server with a thread pool.</li>\n</ol>\n<p>Before we get started, we should mention one detail: the method we‚Äôll use won‚Äôt\nbe the best way to build a web server with Rust. Community members have\npublished a number of production-ready crates available on\n<a href=\"https://crates.io/\">crates.io</a> that provide more complete web server and\nthread pool implementations than we‚Äôll build. However, our intention in this\nchapter is to help you learn, not to take the easy route. Because Rust is a\nsystems programming language, we can choose the level of abstraction we want to\nwork with and can go to a lower level than is possible or practical in other\nlanguages. We‚Äôll therefore write the basic HTTP server and thread pool manually\nso you can learn the general ideas and techniques behind the crates you might\nuse in the future.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"building-a-single-threaded-web-server\"><a class=\"header\" href=\"#building-a-single-threaded-web-server\">Building a Single-Threaded Web Server</a></h2>\n<p>We‚Äôll start by getting a single-threaded web server working. Before we begin,\nlet‚Äôs look at a quick overview of the protocols involved in building web\nservers. The details of these protocols are beyond the scope of this book, but\na brief overview will give you the information you need.</p>\n<p>The two main protocols involved in web servers are <em>Hypertext Transfer\nProtocol</em> <em>(HTTP)</em> and <em>Transmission Control Protocol</em> <em>(TCP)</em>. Both protocols\nare <em>request-response</em> protocols, meaning a <em>client</em> initiates requests and a\n<em>server</em> listens to the requests and provides a response to the client. The\ncontents of those requests and responses are defined by the protocols.</p>\n<p>TCP is the lower-level protocol that describes the details of how information\ngets from one server to another but doesn‚Äôt specify what that information is.\nHTTP builds on top of TCP by defining the contents of the requests and\nresponses. It‚Äôs technically possible to use HTTP with other protocols, but in\nthe vast majority of cases, HTTP sends its data over TCP. We‚Äôll work with the\nraw bytes of TCP and HTTP requests and responses.</p>\n<h3 id=\"listening-to-the-tcp-connection\"><a class=\"header\" href=\"#listening-to-the-tcp-connection\">Listening to the TCP Connection</a></h3>\n<p>Our web server needs to listen to a TCP connection, so that‚Äôs the first part\nwe‚Äôll work on. The standard library offers a <code class=\"hljs\">std::net</code> module that lets us do\nthis. Let‚Äôs make a new project in the usual fashion:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo new hello</span>\n     Created binary (application) `hello` project\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> <span class=\"hljs-built_in\">cd</span> hello</span>\n</code></pre>\n<p>Now enter the code in Listing 20-1 in <em>src/main.rs</em> to start. This code will\nlisten at the local address <code class=\"hljs\">127.0.0.1:7878</code> for incoming TCP streams. When it\ngets an incoming stream, it will print <code class=\"hljs\">Connection established!</code>.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button hidden\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust no_run hljs\"><span class=\"hljs-keyword\">use</span> std::net::TcpListener;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> listener = TcpListener::bind(<span class=\"hljs-string\">\"127.0.0.1:7878\"</span>).unwrap();\n\n    <span class=\"hljs-keyword\">for</span> stream <span class=\"hljs-keyword\">in</span> listener.incoming() {\n        <span class=\"hljs-keyword\">let</span> stream = stream.unwrap();\n\n        <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Connection established!\"</span>);\n    }\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 20-1: Listening for incoming streams and printing\na message when we receive a stream</span></p>\n<p>Using <code class=\"hljs\">TcpListener</code>, we can listen for TCP connections at the address\n<code class=\"hljs\">127.0.0.1:7878</code>. In the address, the section before the colon is an IP address\nrepresenting your computer (this is the same on every computer and doesn‚Äôt\nrepresent the authors‚Äô computer specifically), and <code class=\"hljs\">7878</code> is the port. We‚Äôve\nchosen this port for two reasons: HTTP isn‚Äôt normally accepted on this port so\nour server is unlikely to conflict with any other web server you might have\nrunning on your machine, and 7878 is <em>rust</em> typed on a telephone.</p>\n<p>The <code class=\"hljs\">bind</code> function in this scenario works like the <code class=\"hljs\">new</code> function in that it\nwill return a new <code class=\"hljs\">TcpListener</code> instance. The function is called <code class=\"hljs\">bind</code>\nbecause, in networking, connecting to a port to listen to is known as ‚Äúbinding\nto a port.‚Äù</p>\n<p>The <code class=\"hljs\">bind</code> function returns a <code class=\"hljs\">Result&lt;T, E&gt;</code>, which indicates that it‚Äôs\npossible for binding to fail. For example, connecting to port 80 requires\nadministrator privileges (nonadministrators can listen only on ports higher\nthan 1023), so if we tried to connect to port 80 without being an\nadministrator, binding wouldn‚Äôt work. Binding also wouldn‚Äôt work, for example,\nif we ran two instances of our program and so had two programs listening to the\nsame port. Because we‚Äôre writing a basic server just for learning purposes, we\nwon‚Äôt worry about handling these kinds of errors; instead, we use <code class=\"hljs\">unwrap</code> to\nstop the program if errors happen.</p>\n<p>The <code class=\"hljs\">incoming</code> method on <code class=\"hljs\">TcpListener</code> returns an iterator that gives us a\nsequence of streams (more specifically, streams of type <code class=\"hljs\">TcpStream</code>). A single\n<em>stream</em> represents an open connection between the client and the server. A\n<em>connection</em> is the name for the full request and response process in which a\nclient connects to the server, the server generates a response, and the server\ncloses the connection. As such, we will read from the <code class=\"hljs\">TcpStream</code> to see what\nthe client sent and then write our response to the stream to send data back to\nthe client. Overall, this <code class=\"hljs\">for</code> loop will process each connection in turn and\nproduce a series of streams for us to handle.</p>\n<p>For now, our handling of the stream consists of calling <code class=\"hljs\">unwrap</code> to terminate\nour program if the stream has any errors; if there aren‚Äôt any errors, the\nprogram prints a message. We‚Äôll add more functionality for the success case in\nthe next listing. The reason we might receive errors from the <code class=\"hljs\">incoming</code> method\nwhen a client connects to the server is that we‚Äôre not actually iterating over\nconnections. Instead, we‚Äôre iterating over <em>connection attempts</em>. The\nconnection might not be successful for a number of reasons, many of them\noperating system specific. For example, many operating systems have a limit to\nthe number of simultaneous open connections they can support; new connection\nattempts beyond that number will produce an error until some of the open\nconnections are closed.</p>\n<p>Let‚Äôs try running this code! Invoke <code class=\"hljs\">cargo run</code> in the terminal and then load\n<em>127.0.0.1:7878</em> in a web browser. The browser should show an error message\nlike ‚ÄúConnection reset,‚Äù because the server isn‚Äôt currently sending back any\ndata. But when you look at your terminal, you should see several messages that\nwere printed when the browser connected to the server!</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">     Running `target/debug/hello`\nConnection established!\nConnection established!\nConnection established!\n</code></pre>\n<p>Sometimes, you‚Äôll see multiple messages printed for one browser request; the\nreason might be that the browser is making a request for the page as well as a\nrequest for other resources, like the <em>favicon.ico</em> icon that appears in the\nbrowser tab.</p>\n<p>It could also be that the browser is trying to connect to the server multiple\ntimes because the server isn‚Äôt responding with any data. When <code class=\"hljs\">stream</code> goes out\nof scope and is dropped at the end of the loop, the connection is closed as\npart of the <code class=\"hljs\">drop</code> implementation. Browsers sometimes deal with closed\nconnections by retrying, because the problem might be temporary. The important\nfactor is that we‚Äôve successfully gotten a handle to a TCP connection!</p>\n<p>Remember to stop the program by pressing <kbd>ctrl</kbd>-<kbd>c</kbd> when\nyou‚Äôre done running a particular version of the code. Then restart the program\nby invoking the <code class=\"hljs\">cargo run</code> command after you‚Äôve made each set of code changes\nto make sure you‚Äôre running the newest code.</p>\n<h3 id=\"reading-the-request\"><a class=\"header\" href=\"#reading-the-request\">Reading the Request</a></h3>\n<p>Let‚Äôs implement the functionality to read the request from the browser! To\nseparate the concerns of first getting a connection and then taking some action\nwith the connection, we‚Äôll start a new function for processing connections. In\nthis new <code class=\"hljs\">handle_connection</code> function, we‚Äôll read data from the TCP stream and\nprint it so we can see the data being sent from the browser. Change the code to\nlook like Listing 20-2.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button hidden\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust no_run hljs\"><span class=\"hljs-keyword\">use</span> std::{\n    io::{prelude::*, BufReader},\n    net::{TcpListener, TcpStream},\n};\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> listener = TcpListener::bind(<span class=\"hljs-string\">\"127.0.0.1:7878\"</span>).unwrap();\n\n    <span class=\"hljs-keyword\">for</span> stream <span class=\"hljs-keyword\">in</span> listener.incoming() {\n        <span class=\"hljs-keyword\">let</span> stream = stream.unwrap();\n\n        handle_connection(stream);\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">handle_connection</span></span>(<span class=\"hljs-keyword\">mut</span> stream: TcpStream) {\n    <span class=\"hljs-keyword\">let</span> buf_reader = BufReader::new(&amp;<span class=\"hljs-keyword\">mut</span> stream);\n    <span class=\"hljs-keyword\">let</span> http_request: <span class=\"hljs-built_in\">Vec</span>&lt;_&gt; = buf_reader\n        .lines()\n        .map(|result| result.unwrap())\n        .take_while(|line| !line.is_empty())\n        .collect();\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Request: {http_request:#?}\"</span>);\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 20-2: Reading from the <code class=\"hljs\">TcpStream</code> and printing\nthe data</span></p>\n<p>We bring <code class=\"hljs\">std::io::prelude</code> and <code class=\"hljs\">std::io::BufReader</code> into scope to get access\nto traits and types that let us read from and write to the stream. In the <code class=\"hljs\">for</code>\nloop in the <code class=\"hljs\">main</code> function, instead of printing a message that says we made a\nconnection, we now call the new <code class=\"hljs\">handle_connection</code> function and pass the\n<code class=\"hljs\">stream</code> to it.</p>\n<p>In the <code class=\"hljs\">handle_connection</code> function, we create a new <code class=\"hljs\">BufReader</code> instance that\nwraps a mutable reference to the <code class=\"hljs\">stream</code>. <code class=\"hljs\">BufReader</code> adds buffering by\nmanaging calls to the <code class=\"hljs\">std::io::Read</code> trait methods for us.</p>\n<p>We create a variable named <code class=\"hljs\">http_request</code> to collect the lines of the request\nthe browser sends to our server. We indicate that we want to collect these\nlines in a vector by adding the <code class=\"hljs\">Vec&lt;_&gt;</code> type annotation.</p>\n<p><code class=\"hljs\">BufReader</code> implements the <code class=\"hljs\">std::io::BufRead</code> trait, which provides the <code class=\"hljs\">lines</code>\nmethod. The <code class=\"hljs\">lines</code> method returns an iterator of <code class=\"hljs\">Result&lt;String, std::io::Error&gt;</code> by splitting the stream of data whenever it sees a newline\nbyte. To get each <code class=\"hljs\">String</code>, we map and <code class=\"hljs\">unwrap</code> each <code class=\"hljs\">Result</code>. The <code class=\"hljs\">Result</code>\nmight be an error if the data isn‚Äôt valid UTF-8 or if there was a problem\nreading from the stream. Again, a production program should handle these errors\nmore gracefully, but we‚Äôre choosing to stop the program in the error case for\nsimplicity.</p>\n<p>The browser signals the end of an HTTP request by sending two newline\ncharacters in a row, so to get one request from the stream, we take lines until\nwe get a line that is the empty string. Once we‚Äôve collected the lines into the\nvector, we‚Äôre printing them out using pretty debug formatting so we can take a\nlook at the instructions the web browser is sending to our server.</p>\n<p>Let‚Äôs try this code! Start the program and make a request in a web browser\nagain. Note that we‚Äôll still get an error page in the browser, but our\nprogram‚Äôs output in the terminal will now look similar to this:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling hello v0.1.0 (file:///projects/hello)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.42s\n     Running `target/debug/hello`\nRequest: [\n    \"GET / HTTP/1.1\",\n    \"Host: 127.0.0.1:7878\",\n    \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:99.0) Gecko/20100101 Firefox/99.0\",\n    \"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\",\n    \"Accept-Language: en-US,en;q=0.5\",\n    \"Accept-Encoding: gzip, deflate, br\",\n    \"DNT: 1\",\n    \"Connection: keep-alive\",\n    \"Upgrade-Insecure-Requests: 1\",\n    \"Sec-Fetch-Dest: document\",\n    \"Sec-Fetch-Mode: navigate\",\n    \"Sec-Fetch-Site: none\",\n    \"Sec-Fetch-User: ?1\",\n    \"Cache-Control: max-age=0\",\n]\n</code></pre>\n<p>Depending on your browser, you might get slightly different output. Now that\nwe‚Äôre printing the request data, we can see why we get multiple connections\nfrom one browser request by looking at the path after <code class=\"hljs\">GET</code> in the first line\nof the request. If the repeated connections are all requesting <em>/</em>, we know the\nbrowser is trying to fetch <em>/</em> repeatedly because it‚Äôs not getting a response\nfrom our program.</p>\n<p>Let‚Äôs break down this request data to understand what the browser is asking of\nour program.</p>\n<h3 id=\"a-closer-look-at-an-http-request\"><a class=\"header\" href=\"#a-closer-look-at-an-http-request\">A Closer Look at an HTTP Request</a></h3>\n<p>HTTP is a text-based protocol, and a request takes this format:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">Method Request-URI HTTP-Version CRLF\nheaders CRLF\nmessage-body\n</code></pre>\n<p>The first line is the <em>request line</em> that holds information about what the\nclient is requesting. The first part of the request line indicates the <em>method</em>\nbeing used, such as <code class=\"hljs\">GET</code> or <code class=\"hljs\">POST</code>, which describes how the client is making\nthis request. Our client used a <code class=\"hljs\">GET</code> request, which means it is asking for\ninformation.</p>\n<p>The next part of the request line is <em>/</em>, which indicates the <em>Uniform Resource\nIdentifier</em> <em>(URI)</em> the client is requesting: a URI is almost, but not quite,\nthe same as a <em>Uniform Resource Locator</em> <em>(URL)</em>. The difference between URIs\nand URLs isn‚Äôt important for our purposes in this chapter, but the HTTP spec\nuses the term URI, so we can just mentally substitute URL for URI here.</p>\n<p>The last part is the HTTP version the client uses, and then the request line\nends in a <em>CRLF sequence</em>. (CRLF stands for <em>carriage return</em> and <em>line feed</em>,\nwhich are terms from the typewriter days!) The CRLF sequence can also be\nwritten as <code class=\"hljs\">\\r\\n</code>, where <code class=\"hljs\">\\r</code> is a carriage return and <code class=\"hljs\">\\n</code> is a line feed. The\nCRLF sequence separates the request line from the rest of the request data.\nNote that when the CRLF is printed, we see a new line start rather than <code class=\"hljs\">\\r\\n</code>.</p>\n<p>Looking at the request line data we received from running our program so far,\nwe see that <code class=\"hljs\">GET</code> is the method, <em>/</em> is the request URI, and <code class=\"hljs\">HTTP/1.1</code> is the\nversion.</p>\n<p>After the request line, the remaining lines starting from <code class=\"hljs\">Host:</code> onward are\nheaders. <code class=\"hljs\">GET</code> requests have no body.</p>\n<p>Try making a request from a different browser or asking for a different\naddress, such as <em>127.0.0.1:7878/test</em>, to see how the request data changes.</p>\n<p>Now that we know what the browser is asking for, let‚Äôs send back some data!</p>\n<h3 id=\"writing-a-response\"><a class=\"header\" href=\"#writing-a-response\">Writing a Response</a></h3>\n<p>We‚Äôre going to implement sending data in response to a client request.\nResponses have the following format:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">HTTP-Version Status-Code Reason-Phrase CRLF\nheaders CRLF\nmessage-body\n</code></pre>\n<p>The first line is a <em>status line</em> that contains the HTTP version used in the\nresponse, a numeric status code that summarizes the result of the request, and\na reason phrase that provides a text description of the status code. After the\nCRLF sequence are any headers, another CRLF sequence, and the body of the\nresponse.</p>\n<p>Here is an example response that uses HTTP version 1.1, has a status code of\n200, an OK reason phrase, no headers, and no body:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">HTTP/1.1 200 OK\\r\\n\\r\\n\n</code></pre>\n<p>The status code 200 is the standard success response. The text is a tiny\nsuccessful HTTP response. Let‚Äôs write this to the stream as our response to a\nsuccessful request! From the <code class=\"hljs\">handle_connection</code> function, remove the\n<code class=\"hljs\">println!</code> that was printing the request data and replace it with the code in\nListing 20-3.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button hidden\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust no_run hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::{\n</span><span class=\"boring\">    io::{prelude::*, BufReader},\n</span><span class=\"boring\">    net::{TcpListener, TcpStream},\n</span><span class=\"boring\">};\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> listener = TcpListener::bind(<span class=\"hljs-string\">\"127.0.0.1:7878\"</span>).unwrap();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">for</span> stream <span class=\"hljs-keyword\">in</span> listener.incoming() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> stream = stream.unwrap();\n</span><span class=\"boring\">\n</span><span class=\"boring\">        handle_connection(stream);\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">handle_connection</span></span>(<span class=\"hljs-keyword\">mut</span> stream: TcpStream) {\n    <span class=\"hljs-keyword\">let</span> buf_reader = BufReader::new(&amp;<span class=\"hljs-keyword\">mut</span> stream);\n    <span class=\"hljs-keyword\">let</span> http_request: <span class=\"hljs-built_in\">Vec</span>&lt;_&gt; = buf_reader\n        .lines()\n        .map(|result| result.unwrap())\n        .take_while(|line| !line.is_empty())\n        .collect();\n\n    <span class=\"hljs-keyword\">let</span> response = <span class=\"hljs-string\">\"HTTP/1.1 200 OK\\r\\n\\r\\n\"</span>;\n\n    stream.write_all(response.as_bytes()).unwrap();\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 20-3: Writing a tiny successful HTTP response to\nthe stream</span></p>\n<p>The first new line defines the <code class=\"hljs\">response</code> variable that holds the success\nmessage‚Äôs data. Then we call <code class=\"hljs\">as_bytes</code> on our <code class=\"hljs\">response</code> to convert the string\ndata to bytes. The <code class=\"hljs\">write_all</code> method on <code class=\"hljs\">stream</code> takes a <code class=\"hljs\">&amp;[u8]</code> and sends\nthose bytes directly down the connection. Because the <code class=\"hljs\">write_all</code> operation\ncould fail, we use <code class=\"hljs\">unwrap</code> on any error result as before. Again, in a real\napplication you would add error handling here.</p>\n<p>With these changes, let‚Äôs run our code and make a request. We‚Äôre no longer\nprinting any data to the terminal, so we won‚Äôt see any output other than the\noutput from Cargo. When you load <em>127.0.0.1:7878</em> in a web browser, you should\nget a blank page instead of an error. You‚Äôve just hand-coded receiving an HTTP\nrequest and sending a response!</p>\n<h3 id=\"returning-real-html\"><a class=\"header\" href=\"#returning-real-html\">Returning Real HTML</a></h3>\n<p>Let‚Äôs implement the functionality for returning more than a blank page. Create\nthe new file <em>hello.html</em> in the root of your project directory, not in the\n<em>src</em> directory. You can input any HTML you want; Listing 20-4 shows one\npossibility.</p>\n<p><span class=\"filename\">Filename: hello.html</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-html hljs xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"utf-8\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Hello!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Hello!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Hi from Rust<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre>\n<p><span class=\"caption\">Listing 20-4: A sample HTML file to return in a\nresponse</span></p>\n<p>This is a minimal HTML5 document with a heading and some text. To return this\nfrom the server when a request is received, we‚Äôll modify <code class=\"hljs\">handle_connection</code> as\nshown in Listing 20-5 to read the HTML file, add it to the response as a body,\nand send it.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button hidden\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust no_run hljs hide-boring\"><span class=\"hljs-keyword\">use</span> std::{\n    fs,\n    io::{prelude::*, BufReader},\n    net::{TcpListener, TcpStream},\n};\n<span class=\"hljs-comment\">// --snip--</span>\n\n<span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> listener = TcpListener::bind(<span class=\"hljs-string\">\"127.0.0.1:7878\"</span>).unwrap();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">for</span> stream <span class=\"hljs-keyword\">in</span> listener.incoming() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> stream = stream.unwrap();\n</span><span class=\"boring\">\n</span><span class=\"boring\">        handle_connection(stream);\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">handle_connection</span></span>(<span class=\"hljs-keyword\">mut</span> stream: TcpStream) {\n    <span class=\"hljs-keyword\">let</span> buf_reader = BufReader::new(&amp;<span class=\"hljs-keyword\">mut</span> stream);\n    <span class=\"hljs-keyword\">let</span> http_request: <span class=\"hljs-built_in\">Vec</span>&lt;_&gt; = buf_reader\n        .lines()\n        .map(|result| result.unwrap())\n        .take_while(|line| !line.is_empty())\n        .collect();\n\n    <span class=\"hljs-keyword\">let</span> status_line = <span class=\"hljs-string\">\"HTTP/1.1 200 OK\"</span>;\n    <span class=\"hljs-keyword\">let</span> contents = fs::read_to_string(<span class=\"hljs-string\">\"hello.html\"</span>).unwrap();\n    <span class=\"hljs-keyword\">let</span> length = contents.len();\n\n    <span class=\"hljs-keyword\">let</span> response =\n        <span class=\"hljs-built_in\">format!</span>(<span class=\"hljs-string\">\"{status_line}\\r\\nContent-Length: {length}\\r\\n\\r\\n{contents}\"</span>);\n\n    stream.write_all(response.as_bytes()).unwrap();\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 20-5: Sending the contents of <em>hello.html</em> as the\nbody of the response</span></p>\n<p>We‚Äôve added <code class=\"hljs\">fs</code> to the <code class=\"hljs\">use</code> statement to bring the standard library‚Äôs\nfilesystem module into scope. The code for reading the contents of a file to a\nstring should look familiar; we used it in Chapter 12 when we read the contents\nof a file for our I/O project in Listing 12-4.</p>\n<p>Next, we use <code class=\"hljs\">format!</code> to add the file‚Äôs contents as the body of the success\nresponse. To ensure a valid HTTP response, we add the <code class=\"hljs\">Content-Length</code> header\nwhich is set to the size of our response body, in this case the size of\n<code class=\"hljs\">hello.html</code>.</p>\n<p>Run this code with <code class=\"hljs\">cargo run</code> and load <em>127.0.0.1:7878</em> in your browser; you\nshould see your HTML rendered!</p>\n<p>Currently, we‚Äôre ignoring the request data in <code class=\"hljs\">http_request</code> and just sending\nback the contents of the HTML file unconditionally. That means if you try\nrequesting <em>127.0.0.1:7878/something-else</em> in your browser, you‚Äôll still get\nback this same HTML response. At the moment, our server is very limited and\ndoes not do what most web servers do. We want to customize our responses\ndepending on the request and only send back the HTML file for a well-formed\nrequest to <em>/</em>.</p>\n<h3 id=\"validating-the-request-and-selectively-responding\"><a class=\"header\" href=\"#validating-the-request-and-selectively-responding\">Validating the Request and Selectively Responding</a></h3>\n<p>Right now, our web server will return the HTML in the file no matter what the\nclient requested. Let‚Äôs add functionality to check that the browser is\nrequesting <em>/</em> before returning the HTML file and return an error if the\nbrowser requests anything else. For this we need to modify <code class=\"hljs\">handle_connection</code>,\nas shown in Listing 20-6. This new code checks the content of the request\nreceived against what we know a request for <em>/</em> looks like and adds <code class=\"hljs\">if</code> and\n<code class=\"hljs\">else</code> blocks to treat requests differently.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button hidden\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust no_run hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::{\n</span><span class=\"boring\">    fs,\n</span><span class=\"boring\">    io::{prelude::*, BufReader},\n</span><span class=\"boring\">    net::{TcpListener, TcpStream},\n</span><span class=\"boring\">};\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> listener = TcpListener::bind(<span class=\"hljs-string\">\"127.0.0.1:7878\"</span>).unwrap();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">for</span> stream <span class=\"hljs-keyword\">in</span> listener.incoming() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> stream = stream.unwrap();\n</span><span class=\"boring\">\n</span><span class=\"boring\">        handle_connection(stream);\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"hljs-comment\">// --snip--</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">handle_connection</span></span>(<span class=\"hljs-keyword\">mut</span> stream: TcpStream) {\n    <span class=\"hljs-keyword\">let</span> buf_reader = BufReader::new(&amp;<span class=\"hljs-keyword\">mut</span> stream);\n    <span class=\"hljs-keyword\">let</span> request_line = buf_reader.lines().next().unwrap().unwrap();\n\n    <span class=\"hljs-keyword\">if</span> request_line == <span class=\"hljs-string\">\"GET / HTTP/1.1\"</span> {\n        <span class=\"hljs-keyword\">let</span> status_line = <span class=\"hljs-string\">\"HTTP/1.1 200 OK\"</span>;\n        <span class=\"hljs-keyword\">let</span> contents = fs::read_to_string(<span class=\"hljs-string\">\"hello.html\"</span>).unwrap();\n        <span class=\"hljs-keyword\">let</span> length = contents.len();\n\n        <span class=\"hljs-keyword\">let</span> response = <span class=\"hljs-built_in\">format!</span>(\n            <span class=\"hljs-string\">\"{status_line}\\r\\nContent-Length: {length}\\r\\n\\r\\n{contents}\"</span>\n        );\n\n        stream.write_all(response.as_bytes()).unwrap();\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-comment\">// some other request</span>\n    }\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 20-6: Handling requests to <em>/</em> differently from\nother requests</span></p>\n<p>We‚Äôre only going to be looking at the first line of the HTTP request, so rather\nthan reading the entire request into a vector, we‚Äôre calling <code class=\"hljs\">next</code> to get the\nfirst item from the iterator. The first <code class=\"hljs\">unwrap</code> takes care of the <code class=\"hljs\">Option</code> and\nstops the program if the iterator has no items. The second <code class=\"hljs\">unwrap</code> handles the\n<code class=\"hljs\">Result</code> and has the same effect as the <code class=\"hljs\">unwrap</code> that was in the <code class=\"hljs\">map</code> added in\nListing 20-2.</p>\n<p>Next, we check the <code class=\"hljs\">request_line</code> to see if it equals the request line of a GET\nrequest to the <em>/</em> path. If it does, the <code class=\"hljs\">if</code> block returns the contents of our\nHTML file.</p>\n<p>If the <code class=\"hljs\">request_line</code> does <em>not</em> equal the GET request to the <em>/</em> path, it\nmeans we‚Äôve received some other request. We‚Äôll add code to the <code class=\"hljs\">else</code> block in\na moment to respond to all other requests.</p>\n<p>Run this code now and request <em>127.0.0.1:7878</em>; you should get the HTML in\n<em>hello.html</em>. If you make any other request, such as\n<em>127.0.0.1:7878/something-else</em>, you‚Äôll get a connection error like those you\nsaw when running the code in Listing 20-1 and Listing 20-2.</p>\n<p>Now let‚Äôs add the code in Listing 20-7 to the <code class=\"hljs\">else</code> block to return a response\nwith the status code 404, which signals that the content for the request was\nnot found. We‚Äôll also return some HTML for a page to render in the browser\nindicating the response to the end user.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button hidden\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust no_run hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::{\n</span><span class=\"boring\">    fs,\n</span><span class=\"boring\">    io::{prelude::*, BufReader},\n</span><span class=\"boring\">    net::{TcpListener, TcpStream},\n</span><span class=\"boring\">};\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> listener = TcpListener::bind(<span class=\"hljs-string\">\"127.0.0.1:7878\"</span>).unwrap();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">for</span> stream <span class=\"hljs-keyword\">in</span> listener.incoming() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> stream = stream.unwrap();\n</span><span class=\"boring\">\n</span><span class=\"boring\">        handle_connection(stream);\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">handle_connection</span></span>(<span class=\"hljs-keyword\">mut</span> stream: TcpStream) {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> buf_reader = BufReader::new(&amp;<span class=\"hljs-keyword\">mut</span> stream);\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> request_line = buf_reader.lines().next().unwrap().unwrap();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">if</span> request_line == <span class=\"hljs-string\">\"GET / HTTP/1.1\"</span> {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> status_line = <span class=\"hljs-string\">\"HTTP/1.1 200 OK\"</span>;\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> contents = fs::read_to_string(<span class=\"hljs-string\">\"hello.html\"</span>).unwrap();\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> length = contents.len();\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> response = <span class=\"hljs-built_in\">format!</span>(\n</span><span class=\"boring\">            <span class=\"hljs-string\">\"{status_line}\\r\\nContent-Length: {length}\\r\\n\\r\\n{contents}\"</span>\n</span><span class=\"boring\">        );\n</span><span class=\"boring\">\n</span><span class=\"boring\">        stream.write_all(response.as_bytes()).unwrap();\n</span>    <span class=\"hljs-comment\">// --snip--</span>\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">let</span> status_line = <span class=\"hljs-string\">\"HTTP/1.1 404 NOT FOUND\"</span>;\n        <span class=\"hljs-keyword\">let</span> contents = fs::read_to_string(<span class=\"hljs-string\">\"404.html\"</span>).unwrap();\n        <span class=\"hljs-keyword\">let</span> length = contents.len();\n\n        <span class=\"hljs-keyword\">let</span> response = <span class=\"hljs-built_in\">format!</span>(\n            <span class=\"hljs-string\">\"{status_line}\\r\\nContent-Length: {length}\\r\\n\\r\\n{contents}\"</span>\n        );\n\n        stream.write_all(response.as_bytes()).unwrap();\n    }\n<span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 20-7: Responding with status code 404 and an\nerror page if anything other than <em>/</em> was requested</span></p>\n<p>Here, our response has a status line with status code 404 and the reason phrase\n<code class=\"hljs\">NOT FOUND</code>. The body of the response will be the HTML in the file <em>404.html</em>.\nYou‚Äôll need to create a <em>404.html</em> file next to <em>hello.html</em> for the error\npage; again feel free to use any HTML you want or use the example HTML in\nListing 20-8.</p>\n<p><span class=\"filename\">Filename: 404.html</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-html hljs xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"utf-8\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Hello!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Oops!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Sorry, I don't know what you're asking for.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre>\n<p><span class=\"caption\">Listing 20-8: Sample content for the page to send back\nwith any 404 response</span></p>\n<p>With these changes, run your server again. Requesting <em>127.0.0.1:7878</em> should\nreturn the contents of <em>hello.html</em>, and any other request, like\n<em>127.0.0.1:7878/foo</em>, should return the error HTML from <em>404.html</em>.</p>\n<h3 id=\"a-touch-of-refactoring\"><a class=\"header\" href=\"#a-touch-of-refactoring\">A Touch of Refactoring</a></h3>\n<p>At the moment the <code class=\"hljs\">if</code> and <code class=\"hljs\">else</code> blocks have a lot of repetition: they‚Äôre both\nreading files and writing the contents of the files to the stream. The only\ndifferences are the status line and the filename. Let‚Äôs make the code more\nconcise by pulling out those differences into separate <code class=\"hljs\">if</code> and <code class=\"hljs\">else</code> lines\nthat will assign the values of the status line and the filename to variables;\nwe can then use those variables unconditionally in the code to read the file\nand write the response. Listing 20-9 shows the resulting code after replacing\nthe large <code class=\"hljs\">if</code> and <code class=\"hljs\">else</code> blocks.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button hidden\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust no_run hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::{\n</span><span class=\"boring\">    fs,\n</span><span class=\"boring\">    io::{prelude::*, BufReader},\n</span><span class=\"boring\">    net::{TcpListener, TcpStream},\n</span><span class=\"boring\">};\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> listener = TcpListener::bind(<span class=\"hljs-string\">\"127.0.0.1:7878\"</span>).unwrap();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">for</span> stream <span class=\"hljs-keyword\">in</span> listener.incoming() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> stream = stream.unwrap();\n</span><span class=\"boring\">\n</span><span class=\"boring\">        handle_connection(stream);\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"hljs-comment\">// --snip--</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">handle_connection</span></span>(<span class=\"hljs-keyword\">mut</span> stream: TcpStream) {\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">    <span class=\"hljs-keyword\">let</span> buf_reader = BufReader::new(&amp;<span class=\"hljs-keyword\">mut</span> stream);\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> request_line = buf_reader.lines().next().unwrap().unwrap();\n</span>\n    <span class=\"hljs-keyword\">let</span> (status_line, filename) = <span class=\"hljs-keyword\">if</span> request_line == <span class=\"hljs-string\">\"GET / HTTP/1.1\"</span> {\n        (<span class=\"hljs-string\">\"HTTP/1.1 200 OK\"</span>, <span class=\"hljs-string\">\"hello.html\"</span>)\n    } <span class=\"hljs-keyword\">else</span> {\n        (<span class=\"hljs-string\">\"HTTP/1.1 404 NOT FOUND\"</span>, <span class=\"hljs-string\">\"404.html\"</span>)\n    };\n\n    <span class=\"hljs-keyword\">let</span> contents = fs::read_to_string(filename).unwrap();\n    <span class=\"hljs-keyword\">let</span> length = contents.len();\n\n    <span class=\"hljs-keyword\">let</span> response =\n        <span class=\"hljs-built_in\">format!</span>(<span class=\"hljs-string\">\"{status_line}\\r\\nContent-Length: {length}\\r\\n\\r\\n{contents}\"</span>);\n\n    stream.write_all(response.as_bytes()).unwrap();\n}</code></pre></pre>\n<p><span class=\"caption\">Listing 20-9: Refactoring the <code class=\"hljs\">if</code> and <code class=\"hljs\">else</code> blocks to\ncontain only the code that differs between the two cases</span></p>\n<p>Now the <code class=\"hljs\">if</code> and <code class=\"hljs\">else</code> blocks only return the appropriate values for the\nstatus line and filename in a tuple; we then use destructuring to assign these\ntwo values to <code class=\"hljs\">status_line</code> and <code class=\"hljs\">filename</code> using a pattern in the <code class=\"hljs\">let</code>\nstatement, as discussed in Chapter 18.</p>\n<p>The previously duplicated code is now outside the <code class=\"hljs\">if</code> and <code class=\"hljs\">else</code> blocks and\nuses the <code class=\"hljs\">status_line</code> and <code class=\"hljs\">filename</code> variables. This makes it easier to see\nthe difference between the two cases, and it means we have only one place to\nupdate the code if we want to change how the file reading and response writing\nwork. The behavior of the code in Listing 20-9 will be the same as that in\nListing 20-7.</p>\n<p>Awesome! We now have a simple web server in approximately 40 lines of Rust code\nthat responds to one request with a page of content and responds to all other\nrequests with a 404 response.</p>\n<p>Currently, our server runs in a single thread, meaning it can only serve one\nrequest at a time. Let‚Äôs examine how that can be a problem by simulating some\nslow requests. Then we‚Äôll fix it so our server can handle multiple requests at\nonce.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"turning-our-single-threaded-server-into-a-multithreaded-server\"><a class=\"header\" href=\"#turning-our-single-threaded-server-into-a-multithreaded-server\">Turning Our Single-Threaded Server into a Multithreaded Server</a></h2>\n<p>Right now, the server will process each request in turn, meaning it won‚Äôt\nprocess a second connection until the first is finished processing. If the\nserver received more and more requests, this serial execution would be less and\nless optimal. If the server receives a request that takes a long time to\nprocess, subsequent requests will have to wait until the long request is\nfinished, even if the new requests can be processed quickly. We‚Äôll need to fix\nthis, but first, we‚Äôll look at the problem in action.</p>\n<h3 id=\"simulating-a-slow-request-in-the-current-server-implementation\"><a class=\"header\" href=\"#simulating-a-slow-request-in-the-current-server-implementation\">Simulating a Slow Request in the Current Server Implementation</a></h3>\n<p>We‚Äôll look at how a slow-processing request can affect other requests made to\nour current server implementation. Listing 20-10 implements handling a request\nto <em>/sleep</em> with a simulated slow response that will cause the server to sleep\nfor 5 seconds before responding.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button hidden\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust no_run hljs hide-boring\"><span class=\"hljs-keyword\">use</span> std::{\n    fs,\n    io::{prelude::*, BufReader},\n    net::{TcpListener, TcpStream},\n    thread,\n    time::Duration,\n};\n<span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> listener = TcpListener::bind(<span class=\"hljs-string\">\"127.0.0.1:7878\"</span>).unwrap();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">for</span> stream <span class=\"hljs-keyword\">in</span> listener.incoming() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> stream = stream.unwrap();\n</span><span class=\"boring\">\n</span><span class=\"boring\">        handle_connection(stream);\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">handle_connection</span></span>(<span class=\"hljs-keyword\">mut</span> stream: TcpStream) {\n    <span class=\"hljs-comment\">// --snip--</span>\n\n<span class=\"boring\">    <span class=\"hljs-keyword\">let</span> buf_reader = BufReader::new(&amp;<span class=\"hljs-keyword\">mut</span> stream);\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> request_line = buf_reader.lines().next().unwrap().unwrap();\n</span><span class=\"boring\">\n</span>    <span class=\"hljs-keyword\">let</span> (status_line, filename) = <span class=\"hljs-keyword\">match</span> &amp;request_line[..] {\n        <span class=\"hljs-string\">\"GET / HTTP/1.1\"</span> =&gt; (<span class=\"hljs-string\">\"HTTP/1.1 200 OK\"</span>, <span class=\"hljs-string\">\"hello.html\"</span>),\n        <span class=\"hljs-string\">\"GET /sleep HTTP/1.1\"</span> =&gt; {\n            thread::sleep(Duration::from_secs(<span class=\"hljs-number\">5</span>));\n            (<span class=\"hljs-string\">\"HTTP/1.1 200 OK\"</span>, <span class=\"hljs-string\">\"hello.html\"</span>)\n        }\n        _ =&gt; (<span class=\"hljs-string\">\"HTTP/1.1 404 NOT FOUND\"</span>, <span class=\"hljs-string\">\"404.html\"</span>),\n    };\n\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> contents = fs::read_to_string(filename).unwrap();\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> length = contents.len();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> response =\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">format!</span>(<span class=\"hljs-string\">\"{status_line}\\r\\nContent-Length: {length}\\r\\n\\r\\n{contents}\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    stream.write_all(response.as_bytes()).unwrap();\n</span>}</code></pre></pre>\n<p><span class=\"caption\">Listing 20-10: Simulating a slow request by sleeping for\n5 seconds</span></p>\n<p>We switched from <code class=\"hljs\">if</code> to <code class=\"hljs\">match</code> now that we have three cases. We need to\nexplicitly match on a slice of <code class=\"hljs\">request_line</code> to pattern match against the\nstring literal values; <code class=\"hljs\">match</code> doesn‚Äôt do automatic referencing and\ndereferencing like the equality method does.</p>\n<p>The first arm is the same as the <code class=\"hljs\">if</code> block from Listing 20-9. The second arm\nmatches a request to <em>/sleep</em>. When that request is received, the server will\nsleep for 5 seconds before rendering the successful HTML page. The third arm is\nthe same as the <code class=\"hljs\">else</code> block from Listing 20-9.</p>\n<p>You can see how primitive our server is: real libraries would handle the\nrecognition of multiple requests in a much less verbose way!</p>\n<p>Start the server using <code class=\"hljs\">cargo run</code>. Then open two browser windows: one for\n<em>http://127.0.0.1:7878/</em> and the other for <em>http://127.0.0.1:7878/sleep</em>. If\nyou enter the <em>/</em> URI a few times, as before, you‚Äôll see it respond quickly.\nBut if you enter <em>/sleep</em> and then load <em>/</em>, you‚Äôll see that <em>/</em> waits until\n<code class=\"hljs\">sleep</code> has slept for its full 5 seconds before loading.</p>\n<p>There are multiple techniques we could use to avoid requests backing up behind\na slow request; the one we‚Äôll implement is a thread pool.</p>\n<h3 id=\"improving-throughput-with-a-thread-pool\"><a class=\"header\" href=\"#improving-throughput-with-a-thread-pool\">Improving Throughput with a Thread Pool</a></h3>\n<p>A <em>thread pool</em> is a group of spawned threads that are waiting and ready to\nhandle a task. When the program receives a new task, it assigns one of the\nthreads in the pool to the task, and that thread will process the task. The\nremaining threads in the pool are available to handle any other tasks that come\nin while the first thread is processing. When the first thread is done\nprocessing its task, it‚Äôs returned to the pool of idle threads, ready to handle\na new task. A thread pool allows you to process connections concurrently,\nincreasing the throughput of your server.</p>\n<p>We‚Äôll limit the number of threads in the pool to a small number to protect us\nfrom Denial of Service (DoS) attacks; if we had our program create a new thread\nfor each request as it came in, someone making 10 million requests to our\nserver could create havoc by using up all our server‚Äôs resources and grinding\nthe processing of requests to a halt.</p>\n<p>Rather than spawning unlimited threads, then, we‚Äôll have a fixed number of\nthreads waiting in the pool. Requests that come in are sent to the pool for\nprocessing. The pool will maintain a queue of incoming requests. Each of the\nthreads in the pool will pop off a request from this queue, handle the request,\nand then ask the queue for another request. With this design, we can process up\nto <code class=\"hljs\">N</code> requests concurrently, where <code class=\"hljs\">N</code> is the number of threads. If each\nthread is responding to a long-running request, subsequent requests can still\nback up in the queue, but we‚Äôve increased the number of long-running requests\nwe can handle before reaching that point.</p>\n<p>This technique is just one of many ways to improve the throughput of a web\nserver. Other options you might explore are the <em>fork/join model</em>, the\n<em>single-threaded async I/O model</em>, or the <em>multi-threaded async I/O model</em>. If\nyou‚Äôre interested in this topic, you can read more about other solutions and\ntry to implement them; with a low-level language like Rust, all of these\noptions are possible.</p>\n<p>Before we begin implementing a thread pool, let‚Äôs talk about what using the\npool should look like. When you‚Äôre trying to design code, writing the client\ninterface first can help guide your design. Write the API of the code so it‚Äôs\nstructured in the way you want to call it; then implement the functionality\nwithin that structure rather than implementing the functionality and then\ndesigning the public API.</p>\n<p>Similar to how we used test-driven development in the project in Chapter 12,\nwe‚Äôll use compiler-driven development here. We‚Äôll write the code that calls the\nfunctions we want, and then we‚Äôll look at errors from the compiler to determine\nwhat we should change next to get the code to work. Before we do that, however,\nwe‚Äôll explore the technique we‚Äôre not going to use as a starting point.</p>\n<!-- Old headings. Do not remove or links may break. -->\n<p><a id=\"code-structure-if-we-could-spawn-a-thread-for-each-request\"></a></p>\n<h4 id=\"spawning-a-thread-for-each-request\"><a class=\"header\" href=\"#spawning-a-thread-for-each-request\">Spawning a Thread for Each Request</a></h4>\n<p>First, let‚Äôs explore how our code might look if it did create a new thread for\nevery connection. As mentioned earlier, this isn‚Äôt our final plan due to the\nproblems with potentially spawning an unlimited number of threads, but it is a\nstarting point to get a working multithreaded server first. Then we‚Äôll add the\nthread pool as an improvement, and contrasting the two solutions will be\neasier. Listing 20-11 shows the changes to make to <code class=\"hljs\">main</code> to spawn a new thread\nto handle each stream within the <code class=\"hljs\">for</code> loop.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button hidden\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust no_run hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::{\n</span><span class=\"boring\">    fs,\n</span><span class=\"boring\">    io::{prelude::*, BufReader},\n</span><span class=\"boring\">    net::{TcpListener, TcpStream},\n</span><span class=\"boring\">    thread,\n</span><span class=\"boring\">    time::Duration,\n</span><span class=\"boring\">};\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> listener = TcpListener::bind(<span class=\"hljs-string\">\"127.0.0.1:7878\"</span>).unwrap();\n\n    <span class=\"hljs-keyword\">for</span> stream <span class=\"hljs-keyword\">in</span> listener.incoming() {\n        <span class=\"hljs-keyword\">let</span> stream = stream.unwrap();\n\n        thread::spawn(|| {\n            handle_connection(stream);\n        });\n    }\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">handle_connection</span></span>(<span class=\"hljs-keyword\">mut</span> stream: TcpStream) {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> buf_reader = BufReader::new(&amp;<span class=\"hljs-keyword\">mut</span> stream);\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> request_line = buf_reader.lines().next().unwrap().unwrap();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> (status_line, filename) = <span class=\"hljs-keyword\">match</span> &amp;request_line[..] {\n</span><span class=\"boring\">        <span class=\"hljs-string\">\"GET / HTTP/1.1\"</span> =&gt; (<span class=\"hljs-string\">\"HTTP/1.1 200 OK\"</span>, <span class=\"hljs-string\">\"hello.html\"</span>),\n</span><span class=\"boring\">        <span class=\"hljs-string\">\"GET /sleep HTTP/1.1\"</span> =&gt; {\n</span><span class=\"boring\">            thread::sleep(Duration::from_secs(<span class=\"hljs-number\">5</span>));\n</span><span class=\"boring\">            (<span class=\"hljs-string\">\"HTTP/1.1 200 OK\"</span>, <span class=\"hljs-string\">\"hello.html\"</span>)\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">        _ =&gt; (<span class=\"hljs-string\">\"HTTP/1.1 404 NOT FOUND\"</span>, <span class=\"hljs-string\">\"404.html\"</span>),\n</span><span class=\"boring\">    };\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> contents = fs::read_to_string(filename).unwrap();\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> length = contents.len();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> response =\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">format!</span>(<span class=\"hljs-string\">\"{status_line}\\r\\nContent-Length: {length}\\r\\n\\r\\n{contents}\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    stream.write_all(response.as_bytes()).unwrap();\n</span><span class=\"boring\">}</span></code></pre></pre>\n<p><span class=\"caption\">Listing 20-11: Spawning a new thread for each\nstream</span></p>\n<p>As you learned in Chapter 16, <code class=\"hljs\">thread::spawn</code> will create a new thread and then\nrun the code in the closure in the new thread. If you run this code and load\n<em>/sleep</em> in your browser, then <em>/</em> in two more browser tabs, you‚Äôll indeed see\nthat the requests to <em>/</em> don‚Äôt have to wait for <em>/sleep</em> to finish. However, as\nwe mentioned, this will eventually overwhelm the system because you‚Äôd be making\nnew threads without any limit.</p>\n<!-- Old headings. Do not remove or links may break. -->\n<p><a id=\"creating-a-similar-interface-for-a-finite-number-of-threads\"></a></p>\n<h4 id=\"creating-a-finite-number-of-threads\"><a class=\"header\" href=\"#creating-a-finite-number-of-threads\">Creating a Finite Number of Threads</a></h4>\n<p>We want our thread pool to work in a similar, familiar way so switching from\nthreads to a thread pool doesn‚Äôt require large changes to the code that uses\nour API. Listing 20-12 shows the hypothetical interface for a <code class=\"hljs\">ThreadPool</code>\nstruct we want to use instead of <code class=\"hljs\">thread::spawn</code>.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::{\n</span><span class=\"boring\">    fs,\n</span><span class=\"boring\">    io::{prelude::*, BufReader},\n</span><span class=\"boring\">    net::{TcpListener, TcpStream},\n</span><span class=\"boring\">    thread,\n</span><span class=\"boring\">    time::Duration,\n</span><span class=\"boring\">};\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> listener = TcpListener::bind(<span class=\"hljs-string\">\"127.0.0.1:7878\"</span>).unwrap();\n    <span class=\"hljs-keyword\">let</span> pool = ThreadPool::new(<span class=\"hljs-number\">4</span>);\n\n    <span class=\"hljs-keyword\">for</span> stream <span class=\"hljs-keyword\">in</span> listener.incoming() {\n        <span class=\"hljs-keyword\">let</span> stream = stream.unwrap();\n\n        pool.execute(|| {\n            handle_connection(stream);\n        });\n    }\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">handle_connection</span></span>(<span class=\"hljs-keyword\">mut</span> stream: TcpStream) {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> buf_reader = BufReader::new(&amp;<span class=\"hljs-keyword\">mut</span> stream);\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> request_line = buf_reader.lines().next().unwrap().unwrap();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> (status_line, filename) = <span class=\"hljs-keyword\">match</span> &amp;request_line[..] {\n</span><span class=\"boring\">        <span class=\"hljs-string\">\"GET / HTTP/1.1\"</span> =&gt; (<span class=\"hljs-string\">\"HTTP/1.1 200 OK\"</span>, <span class=\"hljs-string\">\"hello.html\"</span>),\n</span><span class=\"boring\">        <span class=\"hljs-string\">\"GET /sleep HTTP/1.1\"</span> =&gt; {\n</span><span class=\"boring\">            thread::sleep(Duration::from_secs(<span class=\"hljs-number\">5</span>));\n</span><span class=\"boring\">            (<span class=\"hljs-string\">\"HTTP/1.1 200 OK\"</span>, <span class=\"hljs-string\">\"hello.html\"</span>)\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">        _ =&gt; (<span class=\"hljs-string\">\"HTTP/1.1 404 NOT FOUND\"</span>, <span class=\"hljs-string\">\"404.html\"</span>),\n</span><span class=\"boring\">    };\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> contents = fs::read_to_string(filename).unwrap();\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> length = contents.len();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> response =\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">format!</span>(<span class=\"hljs-string\">\"{status_line}\\r\\nContent-Length: {length}\\r\\n\\r\\n{contents}\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    stream.write_all(response.as_bytes()).unwrap();\n</span><span class=\"boring\">}</span></code></pre>\n<p><span class=\"caption\">Listing 20-12: Our ideal <code class=\"hljs\">ThreadPool</code> interface</span></p>\n<p>We use <code class=\"hljs\">ThreadPool::new</code> to create a new thread pool with a configurable number\nof threads, in this case four. Then, in the <code class=\"hljs\">for</code> loop, <code class=\"hljs\">pool.execute</code> has a\nsimilar interface as <code class=\"hljs\">thread::spawn</code> in that it takes a closure the pool should\nrun for each stream. We need to implement <code class=\"hljs\">pool.execute</code> so it takes the\nclosure and gives it to a thread in the pool to run. This code won‚Äôt yet\ncompile, but we‚Äôll try so the compiler can guide us in how to fix it.</p>\n<!-- Old headings. Do not remove or links may break. -->\n<p><a id=\"building-the-threadpool-struct-using-compiler-driven-development\"></a></p>\n<h4 id=\"building-threadpool-using-compiler-driven-development\"><a class=\"header\" href=\"#building-threadpool-using-compiler-driven-development\">Building <code>ThreadPool</code> Using Compiler Driven Development</a></h4>\n<p>Make the changes in Listing 20-12 to <em>src/main.rs</em>, and then let‚Äôs use the\ncompiler errors from <code class=\"hljs\">cargo check</code> to drive our development. Here is the first\nerror we get:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo check</span>\n    Checking hello v0.1.0 (file:///projects/hello)\nerror[E0433]: failed to resolve: use of undeclared type `ThreadPool`\n<span class=\"hljs-meta\">  --&gt;</span><span class=\"bash\"> src/main.rs:11:16</span>\n   |\n11 |     let pool = ThreadPool::new(4);\n   |                ^^^^^^^^^^ use of undeclared type `ThreadPool`\n\nFor more information about this error, try `rustc --explain E0433`.\nerror: could not compile `hello` (bin \"hello\") due to 1 previous error\n</code></pre>\n<p>Great! This error tells us we need a <code class=\"hljs\">ThreadPool</code> type or module, so we‚Äôll\nbuild one now. Our <code class=\"hljs\">ThreadPool</code> implementation will be independent of the kind\nof work our web server is doing. So, let‚Äôs switch the <code class=\"hljs\">hello</code> crate from a\nbinary crate to a library crate to hold our <code class=\"hljs\">ThreadPool</code> implementation. After\nwe change to a library crate, we could also use the separate thread pool\nlibrary for any work we want to do using a thread pool, not just for serving\nweb requests.</p>\n<p>Create a <em>src/lib.rs</em> that contains the following, which is the simplest\ndefinition of a <code class=\"hljs\">ThreadPool</code> struct that we can have for now:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust noplayground hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ThreadPool</span></span>;</code></pre>\n<p>Then edit <em>main.rs</em> file to bring <code class=\"hljs\">ThreadPool</code> into scope from the library\ncrate by adding the following code to the top of <em>src/main.rs</em>:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"hljs-keyword\">use</span> hello::ThreadPool;\n<span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::{\n</span><span class=\"boring\">    fs,\n</span><span class=\"boring\">    io::{prelude::*, BufReader},\n</span><span class=\"boring\">    net::{TcpListener, TcpStream},\n</span><span class=\"boring\">    thread,\n</span><span class=\"boring\">    time::Duration,\n</span><span class=\"boring\">};\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> listener = TcpListener::bind(<span class=\"hljs-string\">\"127.0.0.1:7878\"</span>).unwrap();\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> pool = ThreadPool::new(<span class=\"hljs-number\">4</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">for</span> stream <span class=\"hljs-keyword\">in</span> listener.incoming() {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> stream = stream.unwrap();\n</span><span class=\"boring\">\n</span><span class=\"boring\">        pool.execute(|| {\n</span><span class=\"boring\">            handle_connection(stream);\n</span><span class=\"boring\">        });\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">handle_connection</span></span>(<span class=\"hljs-keyword\">mut</span> stream: TcpStream) {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> buf_reader = BufReader::new(&amp;<span class=\"hljs-keyword\">mut</span> stream);\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> request_line = buf_reader.lines().next().unwrap().unwrap();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> (status_line, filename) = <span class=\"hljs-keyword\">match</span> &amp;request_line[..] {\n</span><span class=\"boring\">        <span class=\"hljs-string\">\"GET / HTTP/1.1\"</span> =&gt; (<span class=\"hljs-string\">\"HTTP/1.1 200 OK\"</span>, <span class=\"hljs-string\">\"hello.html\"</span>),\n</span><span class=\"boring\">        <span class=\"hljs-string\">\"GET /sleep HTTP/1.1\"</span> =&gt; {\n</span><span class=\"boring\">            thread::sleep(Duration::from_secs(<span class=\"hljs-number\">5</span>));\n</span><span class=\"boring\">            (<span class=\"hljs-string\">\"HTTP/1.1 200 OK\"</span>, <span class=\"hljs-string\">\"hello.html\"</span>)\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">        _ =&gt; (<span class=\"hljs-string\">\"HTTP/1.1 404 NOT FOUND\"</span>, <span class=\"hljs-string\">\"404.html\"</span>),\n</span><span class=\"boring\">    };\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> contents = fs::read_to_string(filename).unwrap();\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> length = contents.len();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> response =\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">format!</span>(<span class=\"hljs-string\">\"{status_line}\\r\\nContent-Length: {length}\\r\\n\\r\\n{contents}\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    stream.write_all(response.as_bytes()).unwrap();\n</span><span class=\"boring\">}</span></code></pre>\n<p>This code still won‚Äôt work, but let‚Äôs check it again to get the next error that\nwe need to address:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo check</span>\n    Checking hello v0.1.0 (file:///projects/hello)\nerror[E0599]: no function or associated item named `new` found for struct `ThreadPool` in the current scope\n<span class=\"hljs-meta\">  --&gt;</span><span class=\"bash\"> src/main.rs:12:28</span>\n   |\n12 |     let pool = ThreadPool::new(4);\n   |                            ^^^ function or associated item not found in `ThreadPool`\n\nFor more information about this error, try `rustc --explain E0599`.\nerror: could not compile `hello` (bin \"hello\") due to 1 previous error\n</code></pre>\n<p>This error indicates that next we need to create an associated function named\n<code class=\"hljs\">new</code> for <code class=\"hljs\">ThreadPool</code>. We also know that <code class=\"hljs\">new</code> needs to have one parameter\nthat can accept <code class=\"hljs\">4</code> as an argument and should return a <code class=\"hljs\">ThreadPool</code> instance.\nLet‚Äôs implement the simplest <code class=\"hljs\">new</code> function that will have those\ncharacteristics:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust noplayground hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ThreadPool</span></span>;\n\n<span class=\"hljs-keyword\">impl</span> ThreadPool {\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(size: <span class=\"hljs-built_in\">usize</span>) -&gt; ThreadPool {\n        ThreadPool\n    }\n}</code></pre>\n<p>We chose <code class=\"hljs\">usize</code> as the type of the <code class=\"hljs\">size</code> parameter, because we know that a\nnegative number of threads doesn‚Äôt make any sense. We also know we‚Äôll use this\n4 as the number of elements in a collection of threads, which is what the\n<code class=\"hljs\">usize</code> type is for, as discussed in the <a href=\"ch03-02-data-types.html#integer-types\">‚ÄúInteger Types‚Äù</a><!--\nignore --> section of Chapter 3.</p>\n<p>Let‚Äôs check the code again:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo check</span>\n    Checking hello v0.1.0 (file:///projects/hello)\nerror[E0599]: no method named `execute` found for struct `ThreadPool` in the current scope\n<span class=\"hljs-meta\">  --&gt;</span><span class=\"bash\"> src/main.rs:17:14</span>\n   |\n17 |         pool.execute(|| {\n   |         -----^^^^^^^ method not found in `ThreadPool`\n\nFor more information about this error, try `rustc --explain E0599`.\nerror: could not compile `hello` (bin \"hello\") due to 1 previous error\n</code></pre>\n<p>Now the error occurs because we don‚Äôt have an <code class=\"hljs\">execute</code> method on <code class=\"hljs\">ThreadPool</code>.\nRecall from the <a href=\"ch20-02-multithreaded.html#creating-a-finite-number-of-threads\">‚ÄúCreating a Finite Number of\nThreads‚Äù</a><!-- ignore --> section that we\ndecided our thread pool should have an interface similar to <code class=\"hljs\">thread::spawn</code>. In\naddition, we‚Äôll implement the <code class=\"hljs\">execute</code> function so it takes the closure it‚Äôs\ngiven and gives it to an idle thread in the pool to run.</p>\n<p>We‚Äôll define the <code class=\"hljs\">execute</code> method on <code class=\"hljs\">ThreadPool</code> to take a closure as a\nparameter. Recall from the <a href=\"ch13-01-closures.html#moving-captured-values-out-of-the-closure-and-the-fn-traits\">‚ÄúMoving Captured Values Out of the Closure and the\n<code class=\"hljs\">Fn</code> Traits‚Äù</a><!-- ignore --> section in Chapter 13 that we can take\nclosures as parameters with three different traits: <code class=\"hljs\">Fn</code>, <code class=\"hljs\">FnMut</code>, and\n<code class=\"hljs\">FnOnce</code>. We need to decide which kind of closure to use here. We know we‚Äôll\nend up doing something similar to the standard library <code class=\"hljs\">thread::spawn</code>\nimplementation, so we can look at what bounds the signature of <code class=\"hljs\">thread::spawn</code>\nhas on its parameter. The documentation shows us the following:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">spawn</span></span>&lt;F, T&gt;(f: F) -&gt; JoinHandle&lt;T&gt;\n    <span class=\"hljs-keyword\">where</span>\n        F: <span class=\"hljs-built_in\">FnOnce</span>() -&gt; T,\n        F: <span class=\"hljs-built_in\">Send</span> + <span class=\"hljs-symbol\">'static</span>,\n        T: <span class=\"hljs-built_in\">Send</span> + <span class=\"hljs-symbol\">'static</span>,</code></pre>\n<p>The <code class=\"hljs\">F</code> type parameter is the one we‚Äôre concerned with here; the <code class=\"hljs\">T</code> type\nparameter is related to the return value, and we‚Äôre not concerned with that. We\ncan see that <code class=\"hljs\">spawn</code> uses <code class=\"hljs\">FnOnce</code> as the trait bound on <code class=\"hljs\">F</code>. This is probably\nwhat we want as well, because we‚Äôll eventually pass the argument we get in\n<code class=\"hljs\">execute</code> to <code class=\"hljs\">spawn</code>. We can be further confident that <code class=\"hljs\">FnOnce</code> is the trait we\nwant to use because the thread for running a request will only execute that\nrequest‚Äôs closure one time, which matches the <code class=\"hljs\">Once</code> in <code class=\"hljs\">FnOnce</code>.</p>\n<p>The <code class=\"hljs\">F</code> type parameter also has the trait bound <code class=\"hljs\">Send</code> and the lifetime bound\n<code class=\"hljs\">'static</code>, which are useful in our situation: we need <code class=\"hljs\">Send</code> to transfer the\nclosure from one thread to another and <code class=\"hljs\">'static</code> because we don‚Äôt know how long\nthe thread will take to execute. Let‚Äôs create an <code class=\"hljs\">execute</code> method on\n<code class=\"hljs\">ThreadPool</code> that will take a generic parameter of type <code class=\"hljs\">F</code> with these bounds:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ThreadPool</span></span>;\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">impl</span> ThreadPool {\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(size: <span class=\"hljs-built_in\">usize</span>) -&gt; ThreadPool {\n</span><span class=\"boring\">        ThreadPool\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span>    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">execute</span></span>&lt;F&gt;(&amp;<span class=\"hljs-keyword\">self</span>, f: F)\n    <span class=\"hljs-keyword\">where</span>\n        F: <span class=\"hljs-built_in\">FnOnce</span>() + <span class=\"hljs-built_in\">Send</span> + <span class=\"hljs-symbol\">'static</span>,\n    {\n    }\n}</code></pre>\n<p>We still use the <code class=\"hljs\">()</code> after <code class=\"hljs\">FnOnce</code> because this <code class=\"hljs\">FnOnce</code> represents a closure\nthat takes no parameters and returns the unit type <code class=\"hljs\">()</code>. Just like function\ndefinitions, the return type can be omitted from the signature, but even if we\nhave no parameters, we still need the parentheses.</p>\n<p>Again, this is the simplest implementation of the <code class=\"hljs\">execute</code> method: it does\nnothing, but we‚Äôre trying only to make our code compile. Let‚Äôs check it again:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo check</span>\n    Checking hello v0.1.0 (file:///projects/hello)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.24s\n</code></pre>\n<p>It compiles! But note that if you try <code class=\"hljs\">cargo run</code> and make a request in the\nbrowser, you‚Äôll see the errors in the browser that we saw at the beginning of\nthe chapter. Our library isn‚Äôt actually calling the closure passed to <code class=\"hljs\">execute</code>\nyet!</p>\n<section class=\"note\" aria-role=\"note\">\n<p>Note: A saying you might hear about languages with strict compilers, such as\nHaskell and Rust, is ‚Äúif the code compiles, it works.‚Äù But this saying is not\nuniversally true. Our project compiles, but it does absolutely nothing! If we\nwere building a real, complete project, this would be a good time to start\nwriting unit tests to check that the code compiles <em>and</em> has the behavior we\nwant.</p>\n</section>\n<h4 id=\"validating-the-number-of-threads-in-new\"><a class=\"header\" href=\"#validating-the-number-of-threads-in-new\">Validating the Number of Threads in <code>new</code></a></h4>\n<p>We aren‚Äôt doing anything with the parameters to <code class=\"hljs\">new</code> and <code class=\"hljs\">execute</code>. Let‚Äôs\nimplement the bodies of these functions with the behavior we want. To start,\nlet‚Äôs think about <code class=\"hljs\">new</code>. Earlier we chose an unsigned type for the <code class=\"hljs\">size</code>\nparameter, because a pool with a negative number of threads makes no sense.\nHowever, a pool with zero threads also makes no sense, yet zero is a perfectly\nvalid <code class=\"hljs\">usize</code>. We‚Äôll add code to check that <code class=\"hljs\">size</code> is greater than zero before\nwe return a <code class=\"hljs\">ThreadPool</code> instance and have the program panic if it receives a\nzero by using the <code class=\"hljs\">assert!</code> macro, as shown in Listing 20-13.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ThreadPool</span></span>;\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">impl</span> ThreadPool {\n    <span class=\"hljs-comment\">/// Create a new ThreadPool.</span>\n    <span class=\"hljs-comment\">///</span>\n    <span class=\"hljs-comment\">/// The size is the number of threads in the pool.</span>\n    <span class=\"hljs-comment\">///</span>\n    <span class=\"hljs-comment\">/// # Panics</span>\n    <span class=\"hljs-comment\">///</span>\n    <span class=\"hljs-comment\">/// The `new` function will panic if the size is zero.</span>\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(size: <span class=\"hljs-built_in\">usize</span>) -&gt; ThreadPool {\n        <span class=\"hljs-built_in\">assert!</span>(size &gt; <span class=\"hljs-number\">0</span>);\n\n        ThreadPool\n    }\n\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">execute</span></span>&lt;F&gt;(&amp;<span class=\"hljs-keyword\">self</span>, f: F)\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">where</span>\n</span><span class=\"boring\">        F: <span class=\"hljs-built_in\">FnOnce</span>() + <span class=\"hljs-built_in\">Send</span> + <span class=\"hljs-symbol\">'static</span>,\n</span><span class=\"boring\">    {\n</span><span class=\"boring\">    }\n</span>}</code></pre>\n<p><span class=\"caption\">Listing 20-13: Implementing <code class=\"hljs\">ThreadPool::new</code> to panic if\n<code class=\"hljs\">size</code> is zero</span></p>\n<p>We‚Äôve also added some documentation for our <code class=\"hljs\">ThreadPool</code> with doc comments.\nNote that we followed good documentation practices by adding a section that\ncalls out the situations in which our function can panic, as discussed in\nChapter 14. Try running <code class=\"hljs\">cargo doc --open</code> and clicking the <code class=\"hljs\">ThreadPool</code> struct\nto see what the generated docs for <code class=\"hljs\">new</code> look like!</p>\n<p>Instead of adding the <code class=\"hljs\">assert!</code> macro as we‚Äôve done here, we could change <code class=\"hljs\">new</code>\ninto <code class=\"hljs\">build</code> and return a <code class=\"hljs\">Result</code> like we did with <code class=\"hljs\">Config::build</code> in the I/O\nproject in Listing 12-9. But we‚Äôve decided in this case that trying to create a\nthread pool without any threads should be an unrecoverable error. If you‚Äôre\nfeeling ambitious, try to write a function named <code class=\"hljs\">build</code> with the following\nsignature to compare with the <code class=\"hljs\">new</code> function:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">build</span></span>(size: <span class=\"hljs-built_in\">usize</span>) -&gt; <span class=\"hljs-built_in\">Result</span>&lt;ThreadPool, PoolCreationError&gt; {</code></pre>\n<h4 id=\"creating-space-to-store-the-threads\"><a class=\"header\" href=\"#creating-space-to-store-the-threads\">Creating Space to Store the Threads</a></h4>\n<p>Now that we have a way to know we have a valid number of threads to store in\nthe pool, we can create those threads and store them in the <code class=\"hljs\">ThreadPool</code> struct\nbefore returning the struct. But how do we ‚Äústore‚Äù a thread? Let‚Äôs take another\nlook at the <code class=\"hljs\">thread::spawn</code> signature:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">spawn</span></span>&lt;F, T&gt;(f: F) -&gt; JoinHandle&lt;T&gt;\n    <span class=\"hljs-keyword\">where</span>\n        F: <span class=\"hljs-built_in\">FnOnce</span>() -&gt; T,\n        F: <span class=\"hljs-built_in\">Send</span> + <span class=\"hljs-symbol\">'static</span>,\n        T: <span class=\"hljs-built_in\">Send</span> + <span class=\"hljs-symbol\">'static</span>,</code></pre>\n<p>The <code class=\"hljs\">spawn</code> function returns a <code class=\"hljs\">JoinHandle&lt;T&gt;</code>, where <code class=\"hljs\">T</code> is the type that the\nclosure returns. Let‚Äôs try using <code class=\"hljs\">JoinHandle</code> too and see what happens. In our\ncase, the closures we‚Äôre passing to the thread pool will handle the connection\nand not return anything, so <code class=\"hljs\">T</code> will be the unit type <code class=\"hljs\">()</code>.</p>\n<p>The code in Listing 20-14 will compile but doesn‚Äôt create any threads yet.\nWe‚Äôve changed the definition of <code class=\"hljs\">ThreadPool</code> to hold a vector of\n<code class=\"hljs\">thread::JoinHandle&lt;()&gt;</code> instances, initialized the vector with a capacity of\n<code class=\"hljs\">size</code>, set up a <code class=\"hljs\">for</code> loop that will run some code to create the threads, and\nreturned a <code class=\"hljs\">ThreadPool</code> instance containing them.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/not_desired_behavior.svg\" title=\"This code does not produce the desired behavior.\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore not_desired_behavior hljs hide-boring\"><span class=\"hljs-keyword\">use</span> std::thread;\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ThreadPool</span></span> {\n    threads: <span class=\"hljs-built_in\">Vec</span>&lt;thread::JoinHandle&lt;()&gt;&gt;,\n}\n\n<span class=\"hljs-keyword\">impl</span> ThreadPool {\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">    <span class=\"hljs-comment\">/// Create a new ThreadPool.</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// The size is the number of threads in the pool.</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// # Panics</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// The `new` function will panic if the size is zero.</span>\n</span>    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(size: <span class=\"hljs-built_in\">usize</span>) -&gt; ThreadPool {\n        <span class=\"hljs-built_in\">assert!</span>(size &gt; <span class=\"hljs-number\">0</span>);\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> threads = <span class=\"hljs-built_in\">Vec</span>::with_capacity(size);\n\n        <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..size {\n            <span class=\"hljs-comment\">// create some threads and store them in the vector</span>\n        }\n\n        ThreadPool { threads }\n    }\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">execute</span></span>&lt;F&gt;(&amp;<span class=\"hljs-keyword\">self</span>, f: F)\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">where</span>\n</span><span class=\"boring\">        F: <span class=\"hljs-built_in\">FnOnce</span>() + <span class=\"hljs-built_in\">Send</span> + <span class=\"hljs-symbol\">'static</span>,\n</span><span class=\"boring\">    {\n</span><span class=\"boring\">    }\n</span>}</code></pre>\n<p><span class=\"caption\">Listing 20-14: Creating a vector for <code class=\"hljs\">ThreadPool</code> to hold\nthe threads</span></p>\n<p>We‚Äôve brought <code class=\"hljs\">std::thread</code> into scope in the library crate, because we‚Äôre\nusing <code class=\"hljs\">thread::JoinHandle</code> as the type of the items in the vector in\n<code class=\"hljs\">ThreadPool</code>.</p>\n<p>Once a valid size is received, our <code class=\"hljs\">ThreadPool</code> creates a new vector that can\nhold <code class=\"hljs\">size</code> items. The <code class=\"hljs\">with_capacity</code> function performs the same task as\n<code class=\"hljs\">Vec::new</code> but with an important difference: it preallocates space in the\nvector. Because we know we need to store <code class=\"hljs\">size</code> elements in the vector, doing\nthis allocation up front is slightly more efficient than using <code class=\"hljs\">Vec::new</code>,\nwhich resizes itself as elements are inserted.</p>\n<p>When you run <code class=\"hljs\">cargo check</code> again, it should succeed.</p>\n<h4 id=\"a-worker-struct-responsible-for-sending-code-from-the-threadpool-to-a-thread\"><a class=\"header\" href=\"#a-worker-struct-responsible-for-sending-code-from-the-threadpool-to-a-thread\">A <code>Worker</code> Struct Responsible for Sending Code from the <code>ThreadPool</code> to a Thread</a></h4>\n<p>We left a comment in the <code class=\"hljs\">for</code> loop in Listing 20-14 regarding the creation of\nthreads. Here, we‚Äôll look at how we actually create threads. The standard\nlibrary provides <code class=\"hljs\">thread::spawn</code> as a way to create threads, and\n<code class=\"hljs\">thread::spawn</code> expects to get some code the thread should run as soon as the\nthread is created. However, in our case, we want to create the threads and have\nthem <em>wait</em> for code that we‚Äôll send later. The standard library‚Äôs\nimplementation of threads doesn‚Äôt include any way to do that; we have to\nimplement it manually.</p>\n<p>We‚Äôll implement this behavior by introducing a new data structure between the\n<code class=\"hljs\">ThreadPool</code> and the threads that will manage this new behavior. We‚Äôll call\nthis data structure <em>Worker</em>, which is a common term in pooling\nimplementations. The Worker picks up code that needs to be run and runs the\ncode in the Worker‚Äôs thread. Think of people working in the kitchen at a\nrestaurant: the workers wait until orders come in from customers, and then\nthey‚Äôre responsible for taking those orders and fulfilling them.</p>\n<p>Instead of storing a vector of <code class=\"hljs\">JoinHandle&lt;()&gt;</code> instances in the thread pool,\nwe‚Äôll store instances of the <code class=\"hljs\">Worker</code> struct. Each <code class=\"hljs\">Worker</code> will store a single\n<code class=\"hljs\">JoinHandle&lt;()&gt;</code> instance. Then we‚Äôll implement a method on <code class=\"hljs\">Worker</code> that will\ntake a closure of code to run and send it to the already running thread for\nexecution. We‚Äôll also give each worker an <code class=\"hljs\">id</code> so we can distinguish between\nthe different workers in the pool when logging or debugging.</p>\n<p>Here is the new process that will happen when we create a <code class=\"hljs\">ThreadPool</code>. We‚Äôll\nimplement the code that sends the closure to the thread after we have <code class=\"hljs\">Worker</code>\nset up in this way:</p>\n<ol>\n<li>Define a <code class=\"hljs\">Worker</code> struct that holds an <code class=\"hljs\">id</code> and a <code class=\"hljs\">JoinHandle&lt;()&gt;</code>.</li>\n<li>Change <code class=\"hljs\">ThreadPool</code> to hold a vector of <code class=\"hljs\">Worker</code> instances.</li>\n<li>Define a <code class=\"hljs\">Worker::new</code> function that takes an <code class=\"hljs\">id</code> number and returns a\n<code class=\"hljs\">Worker</code> instance that holds the <code class=\"hljs\">id</code> and a thread spawned with an empty\nclosure.</li>\n<li>In <code class=\"hljs\">ThreadPool::new</code>, use the <code class=\"hljs\">for</code> loop counter to generate an <code class=\"hljs\">id</code>, create\na new <code class=\"hljs\">Worker</code> with that <code class=\"hljs\">id</code>, and store the worker in the vector.</li>\n</ol>\n<p>If you‚Äôre up for a challenge, try implementing these changes on your own before\nlooking at the code in Listing 20-15.</p>\n<p>Ready? Here is Listing 20-15 with one way to make the preceding modifications.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground hljs hide-boring\"><span class=\"hljs-keyword\">use</span> std::thread;\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ThreadPool</span></span> {\n    workers: <span class=\"hljs-built_in\">Vec</span>&lt;Worker&gt;,\n}\n\n<span class=\"hljs-keyword\">impl</span> ThreadPool {\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">    <span class=\"hljs-comment\">/// Create a new ThreadPool.</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// The size is the number of threads in the pool.</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// # Panics</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// The `new` function will panic if the size is zero.</span>\n</span>    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(size: <span class=\"hljs-built_in\">usize</span>) -&gt; ThreadPool {\n        <span class=\"hljs-built_in\">assert!</span>(size &gt; <span class=\"hljs-number\">0</span>);\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> workers = <span class=\"hljs-built_in\">Vec</span>::with_capacity(size);\n\n        <span class=\"hljs-keyword\">for</span> id <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..size {\n            workers.push(Worker::new(id));\n        }\n\n        ThreadPool { workers }\n    }\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">execute</span></span>&lt;F&gt;(&amp;<span class=\"hljs-keyword\">self</span>, f: F)\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">where</span>\n</span><span class=\"boring\">        F: <span class=\"hljs-built_in\">FnOnce</span>() + <span class=\"hljs-built_in\">Send</span> + <span class=\"hljs-symbol\">'static</span>,\n</span><span class=\"boring\">    {\n</span><span class=\"boring\">    }\n</span>}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Worker</span></span> {\n    id: <span class=\"hljs-built_in\">usize</span>,\n    thread: thread::JoinHandle&lt;()&gt;,\n}\n\n<span class=\"hljs-keyword\">impl</span> Worker {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(id: <span class=\"hljs-built_in\">usize</span>) -&gt; Worker {\n        <span class=\"hljs-keyword\">let</span> thread = thread::spawn(|| {});\n\n        Worker { id, thread }\n    }\n}</code></pre>\n<p><span class=\"caption\">Listing 20-15: Modifying <code class=\"hljs\">ThreadPool</code> to hold <code class=\"hljs\">Worker</code>\ninstances instead of holding threads directly</span></p>\n<p>We‚Äôve changed the name of the field on <code class=\"hljs\">ThreadPool</code> from <code class=\"hljs\">threads</code> to <code class=\"hljs\">workers</code>\nbecause it‚Äôs now holding <code class=\"hljs\">Worker</code> instances instead of <code class=\"hljs\">JoinHandle&lt;()&gt;</code>\ninstances. We use the counter in the <code class=\"hljs\">for</code> loop as an argument to\n<code class=\"hljs\">Worker::new</code>, and we store each new <code class=\"hljs\">Worker</code> in the vector named <code class=\"hljs\">workers</code>.</p>\n<p>External code (like our server in <em>src/main.rs</em>) doesn‚Äôt need to know the\nimplementation details regarding using a <code class=\"hljs\">Worker</code> struct within <code class=\"hljs\">ThreadPool</code>,\nso we make the <code class=\"hljs\">Worker</code> struct and its <code class=\"hljs\">new</code> function private. The\n<code class=\"hljs\">Worker::new</code> function uses the <code class=\"hljs\">id</code> we give it and stores a <code class=\"hljs\">JoinHandle&lt;()&gt;</code>\ninstance that is created by spawning a new thread using an empty closure.</p>\n<section class=\"note\" aria-role=\"note\">\n<p>Note: If the operating system can‚Äôt create a thread because there aren‚Äôt\nenough system resources, <code class=\"hljs\">thread::spawn</code> will panic. That will cause our\nwhole server to panic, even though the creation of some threads might\nsucceed. For simplicity‚Äôs sake, this behavior is fine, but in a production\nthread pool implementation, you‚Äôd likely want to use\n<a href=\"../std/thread/struct.Builder.html\"><code class=\"hljs\">std::thread::Builder</code></a><!-- ignore --> and its\n<a href=\"../std/thread/struct.Builder.html#method.spawn\"><code class=\"hljs\">spawn</code></a><!-- ignore --> method that returns <code class=\"hljs\">Result</code> instead.</p>\n</section>\n<p>This code will compile and will store the number of <code class=\"hljs\">Worker</code> instances we\nspecified as an argument to <code class=\"hljs\">ThreadPool::new</code>. But we‚Äôre <em>still</em> not processing\nthe closure that we get in <code class=\"hljs\">execute</code>. Let‚Äôs look at how to do that next.</p>\n<h4 id=\"sending-requests-to-threads-via-channels\"><a class=\"header\" href=\"#sending-requests-to-threads-via-channels\">Sending Requests to Threads via Channels</a></h4>\n<p>The next problem we‚Äôll tackle is that the closures given to <code class=\"hljs\">thread::spawn</code> do\nabsolutely nothing. Currently, we get the closure we want to execute in the\n<code class=\"hljs\">execute</code> method. But we need to give <code class=\"hljs\">thread::spawn</code> a closure to run when we\ncreate each <code class=\"hljs\">Worker</code> during the creation of the <code class=\"hljs\">ThreadPool</code>.</p>\n<p>We want the <code class=\"hljs\">Worker</code> structs that we just created to fetch the code to run from\na queue held in the <code class=\"hljs\">ThreadPool</code> and send that code to its thread to run.</p>\n<p>The channels we learned about in Chapter 16‚Äîa simple way to communicate between\ntwo threads‚Äîwould be perfect for this use case. We‚Äôll use a channel to function\nas the queue of jobs, and <code class=\"hljs\">execute</code> will send a job from the <code class=\"hljs\">ThreadPool</code> to\nthe <code class=\"hljs\">Worker</code> instances, which will send the job to its thread. Here is the plan:</p>\n<ol>\n<li>The <code class=\"hljs\">ThreadPool</code> will create a channel and hold on to the sender.</li>\n<li>Each <code class=\"hljs\">Worker</code> will hold on to the receiver.</li>\n<li>We‚Äôll create a new <code class=\"hljs\">Job</code> struct that will hold the closures we want to send\ndown the channel.</li>\n<li>The <code class=\"hljs\">execute</code> method will send the job it wants to execute through the\nsender.</li>\n<li>In its thread, the <code class=\"hljs\">Worker</code> will loop over its receiver and execute the\nclosures of any jobs it receives.</li>\n</ol>\n<p>Let‚Äôs start by creating a channel in <code class=\"hljs\">ThreadPool::new</code> and holding the sender\nin the <code class=\"hljs\">ThreadPool</code> instance, as shown in Listing 20-16. The <code class=\"hljs\">Job</code> struct\ndoesn‚Äôt hold anything for now but will be the type of item we‚Äôre sending down\nthe channel.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground hljs hide-boring\"><span class=\"hljs-keyword\">use</span> std::{sync::mpsc, thread};\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ThreadPool</span></span> {\n    workers: <span class=\"hljs-built_in\">Vec</span>&lt;Worker&gt;,\n    sender: mpsc::Sender&lt;Job&gt;,\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Job</span></span>;\n\n<span class=\"hljs-keyword\">impl</span> ThreadPool {\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">    <span class=\"hljs-comment\">/// Create a new ThreadPool.</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// The size is the number of threads in the pool.</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// # Panics</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// The `new` function will panic if the size is zero.</span>\n</span>    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(size: <span class=\"hljs-built_in\">usize</span>) -&gt; ThreadPool {\n        <span class=\"hljs-built_in\">assert!</span>(size &gt; <span class=\"hljs-number\">0</span>);\n\n        <span class=\"hljs-keyword\">let</span> (sender, receiver) = mpsc::channel();\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> workers = <span class=\"hljs-built_in\">Vec</span>::with_capacity(size);\n\n        <span class=\"hljs-keyword\">for</span> id <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..size {\n            workers.push(Worker::new(id));\n        }\n\n        ThreadPool { workers, sender }\n    }\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">execute</span></span>&lt;F&gt;(&amp;<span class=\"hljs-keyword\">self</span>, f: F)\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">where</span>\n</span><span class=\"boring\">        F: <span class=\"hljs-built_in\">FnOnce</span>() + <span class=\"hljs-built_in\">Send</span> + <span class=\"hljs-symbol\">'static</span>,\n</span><span class=\"boring\">    {\n</span><span class=\"boring\">    }\n</span>}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Worker</span></span> {\n</span><span class=\"boring\">    id: <span class=\"hljs-built_in\">usize</span>,\n</span><span class=\"boring\">    thread: thread::JoinHandle&lt;()&gt;,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Worker {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(id: <span class=\"hljs-built_in\">usize</span>) -&gt; Worker {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> thread = thread::spawn(|| {});\n</span><span class=\"boring\">\n</span><span class=\"boring\">        Worker { id, thread }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre>\n<p><span class=\"caption\">Listing 20-16: Modifying <code class=\"hljs\">ThreadPool</code> to store the\nsender of a channel that transmits <code class=\"hljs\">Job</code> instances</span></p>\n<p>In <code class=\"hljs\">ThreadPool::new</code>, we create our new channel and have the pool hold the\nsender. This will successfully compile.</p>\n<p>Let‚Äôs try passing a receiver of the channel into each worker as the thread pool\ncreates the channel. We know we want to use the receiver in the thread that the\nworkers spawn, so we‚Äôll reference the <code class=\"hljs\">receiver</code> parameter in the closure. The\ncode in Listing 20-17 won‚Äôt quite compile yet.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::{sync::mpsc, thread};\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ThreadPool</span></span> {\n</span><span class=\"boring\">    workers: <span class=\"hljs-built_in\">Vec</span>&lt;Worker&gt;,\n</span><span class=\"boring\">    sender: mpsc::Sender&lt;Job&gt;,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Job</span></span>;\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">impl</span> ThreadPool {\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">    <span class=\"hljs-comment\">/// Create a new ThreadPool.</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// The size is the number of threads in the pool.</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// # Panics</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// The `new` function will panic if the size is zero.</span>\n</span>    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(size: <span class=\"hljs-built_in\">usize</span>) -&gt; ThreadPool {\n        <span class=\"hljs-built_in\">assert!</span>(size &gt; <span class=\"hljs-number\">0</span>);\n\n        <span class=\"hljs-keyword\">let</span> (sender, receiver) = mpsc::channel();\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> workers = <span class=\"hljs-built_in\">Vec</span>::with_capacity(size);\n\n        <span class=\"hljs-keyword\">for</span> id <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..size {\n            workers.push(Worker::new(id, receiver));\n        }\n\n        ThreadPool { workers, sender }\n    }\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">execute</span></span>&lt;F&gt;(&amp;<span class=\"hljs-keyword\">self</span>, f: F)\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">where</span>\n</span><span class=\"boring\">        F: <span class=\"hljs-built_in\">FnOnce</span>() + <span class=\"hljs-built_in\">Send</span> + <span class=\"hljs-symbol\">'static</span>,\n</span><span class=\"boring\">    {\n</span><span class=\"boring\">    }\n</span>}\n\n<span class=\"hljs-comment\">// --snip--</span>\n\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Worker</span></span> {\n</span><span class=\"boring\">    id: <span class=\"hljs-built_in\">usize</span>,\n</span><span class=\"boring\">    thread: thread::JoinHandle&lt;()&gt;,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">impl</span> Worker {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(id: <span class=\"hljs-built_in\">usize</span>, receiver: mpsc::Receiver&lt;Job&gt;) -&gt; Worker {\n        <span class=\"hljs-keyword\">let</span> thread = thread::spawn(|| {\n            receiver;\n        });\n\n        Worker { id, thread }\n    }\n}</code></pre>\n<p><span class=\"caption\">Listing 20-17: Passing the receiver to the workers</span></p>\n<p>We‚Äôve made some small and straightforward changes: we pass the receiver into\n<code class=\"hljs\">Worker::new</code>, and then we use it inside the closure.</p>\n<p>When we try to check this code, we get this error:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo check</span>\n    Checking hello v0.1.0 (file:///projects/hello)\nerror[E0382]: use of moved value: `receiver`\n<span class=\"hljs-meta\">  --&gt;</span><span class=\"bash\"> src/lib.rs:26:42</span>\n   |\n21 |         let (sender, receiver) = mpsc::channel();\n   |                      -------- move occurs because `receiver` has type `std::sync::mpsc::Receiver&lt;Job&gt;`, which does not implement the `Copy` trait\n...\n25 |         for id in 0..size {\n   |         ----------------- inside of this loop\n26 |             workers.push(Worker::new(id, receiver));\n   |                                          ^^^^^^^^ value moved here, in previous iteration of loop\n   |\nnote: consider changing this parameter type in method `new` to borrow instead if owning the value isn't necessary\n<span class=\"hljs-meta\">  --&gt;</span><span class=\"bash\"> src/lib.rs:47:33</span>\n   |\n47 |     fn new(id: usize, receiver: mpsc::Receiver&lt;Job&gt;) -&gt; Worker {\n   |        --- in this method       ^^^^^^^^^^^^^^^^^^^ this parameter takes ownership of the value\n\nFor more information about this error, try `rustc --explain E0382`.\nerror: could not compile `hello` (lib) due to 1 previous error\n</code></pre>\n<p>The code is trying to pass <code class=\"hljs\">receiver</code> to multiple <code class=\"hljs\">Worker</code> instances. This\nwon‚Äôt work, as you‚Äôll recall from Chapter 16: the channel implementation that\nRust provides is multiple <em>producer</em>, single <em>consumer</em>. This means we can‚Äôt\njust clone the consuming end of the channel to fix this code. We also don‚Äôt\nwant to send a message multiple times to multiple consumers; we want one list\nof messages with multiple workers such that each message gets processed once.</p>\n<p>Additionally, taking a job off the channel queue involves mutating the\n<code class=\"hljs\">receiver</code>, so the threads need a safe way to share and modify <code class=\"hljs\">receiver</code>;\notherwise, we might get race conditions (as covered in Chapter 16).</p>\n<p>Recall the thread-safe smart pointers discussed in Chapter 16: to share\nownership across multiple threads and allow the threads to mutate the value, we\nneed to use <code class=\"hljs\">Arc&lt;Mutex&lt;T&gt;&gt;</code>. The <code class=\"hljs\">Arc</code> type will let multiple workers own the\nreceiver, and <code class=\"hljs\">Mutex</code> will ensure that only one worker gets a job from the\nreceiver at a time. Listing 20-18 shows the changes we need to make.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground hljs hide-boring\"><span class=\"hljs-keyword\">use</span> std::{\n    sync::{mpsc, Arc, Mutex},\n    thread,\n};\n<span class=\"hljs-comment\">// --snip--</span>\n\n<span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ThreadPool</span></span> {\n</span><span class=\"boring\">    workers: <span class=\"hljs-built_in\">Vec</span>&lt;Worker&gt;,\n</span><span class=\"boring\">    sender: mpsc::Sender&lt;Job&gt;,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Job</span></span>;\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">impl</span> ThreadPool {\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">    <span class=\"hljs-comment\">/// Create a new ThreadPool.</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// The size is the number of threads in the pool.</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// # Panics</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// The `new` function will panic if the size is zero.</span>\n</span>    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(size: <span class=\"hljs-built_in\">usize</span>) -&gt; ThreadPool {\n        <span class=\"hljs-built_in\">assert!</span>(size &gt; <span class=\"hljs-number\">0</span>);\n\n        <span class=\"hljs-keyword\">let</span> (sender, receiver) = mpsc::channel();\n\n        <span class=\"hljs-keyword\">let</span> receiver = Arc::new(Mutex::new(receiver));\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> workers = <span class=\"hljs-built_in\">Vec</span>::with_capacity(size);\n\n        <span class=\"hljs-keyword\">for</span> id <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..size {\n            workers.push(Worker::new(id, Arc::clone(&amp;receiver)));\n        }\n\n        ThreadPool { workers, sender }\n    }\n\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">execute</span></span>&lt;F&gt;(&amp;<span class=\"hljs-keyword\">self</span>, f: F)\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">where</span>\n</span><span class=\"boring\">        F: <span class=\"hljs-built_in\">FnOnce</span>() + <span class=\"hljs-built_in\">Send</span> + <span class=\"hljs-symbol\">'static</span>,\n</span><span class=\"boring\">    {\n</span><span class=\"boring\">    }\n</span>}\n\n<span class=\"hljs-comment\">// --snip--</span>\n\n<span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Worker</span></span> {\n</span><span class=\"boring\">    id: <span class=\"hljs-built_in\">usize</span>,\n</span><span class=\"boring\">    thread: thread::JoinHandle&lt;()&gt;,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">impl</span> Worker {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(id: <span class=\"hljs-built_in\">usize</span>, receiver: Arc&lt;Mutex&lt;mpsc::Receiver&lt;Job&gt;&gt;&gt;) -&gt; Worker {\n        <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">        <span class=\"hljs-keyword\">let</span> thread = thread::spawn(|| {\n</span><span class=\"boring\">            receiver;\n</span><span class=\"boring\">        });\n</span><span class=\"boring\">\n</span><span class=\"boring\">        Worker { id, thread }\n</span>    }\n}</code></pre>\n<p><span class=\"caption\">Listing 20-18: Sharing the receiver among the workers\nusing <code class=\"hljs\">Arc</code> and <code class=\"hljs\">Mutex</code></span></p>\n<p>In <code class=\"hljs\">ThreadPool::new</code>, we put the receiver in an <code class=\"hljs\">Arc</code> and a <code class=\"hljs\">Mutex</code>. For each\nnew worker, we clone the <code class=\"hljs\">Arc</code> to bump the reference count so the workers can\nshare ownership of the receiver.</p>\n<p>With these changes, the code compiles! We‚Äôre getting there!</p>\n<h4 id=\"implementing-the-execute-method\"><a class=\"header\" href=\"#implementing-the-execute-method\">Implementing the <code>execute</code> Method</a></h4>\n<p>Let‚Äôs finally implement the <code class=\"hljs\">execute</code> method on <code class=\"hljs\">ThreadPool</code>. We‚Äôll also change\n<code class=\"hljs\">Job</code> from a struct to a type alias for a trait object that holds the type of\nclosure that <code class=\"hljs\">execute</code> receives. As discussed in the <a href=\"ch19-04-advanced-types.html#creating-type-synonyms-with-type-aliases\">‚ÄúCreating Type Synonyms\nwith Type Aliases‚Äù</a><!-- ignore -->\nsection of Chapter 19, type aliases allow us to make long types shorter for\nease of use. Look at Listing 20-19.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::{\n</span><span class=\"boring\">    sync::{mpsc, Arc, Mutex},\n</span><span class=\"boring\">    thread,\n</span><span class=\"boring\">};\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ThreadPool</span></span> {\n</span><span class=\"boring\">    workers: <span class=\"hljs-built_in\">Vec</span>&lt;Worker&gt;,\n</span><span class=\"boring\">    sender: mpsc::Sender&lt;Job&gt;,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-comment\">// --snip--</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Job</span></span> = <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> <span class=\"hljs-built_in\">FnOnce</span>() + <span class=\"hljs-built_in\">Send</span> + <span class=\"hljs-symbol\">'static</span>&gt;;\n\n<span class=\"hljs-keyword\">impl</span> ThreadPool {\n    <span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">    <span class=\"hljs-comment\">/// Create a new ThreadPool.</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// The size is the number of threads in the pool.</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// # Panics</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// The `new` function will panic if the size is zero.</span>\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(size: <span class=\"hljs-built_in\">usize</span>) -&gt; ThreadPool {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert!</span>(size &gt; <span class=\"hljs-number\">0</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> (sender, receiver) = mpsc::channel();\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> receiver = Arc::new(Mutex::new(receiver));\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> workers = <span class=\"hljs-built_in\">Vec</span>::with_capacity(size);\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">for</span> id <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..size {\n</span><span class=\"boring\">            workers.push(Worker::new(id, Arc::clone(&amp;receiver)));\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">\n</span><span class=\"boring\">        ThreadPool { workers, sender }\n</span><span class=\"boring\">    }\n</span>\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">execute</span></span>&lt;F&gt;(&amp;<span class=\"hljs-keyword\">self</span>, f: F)\n    <span class=\"hljs-keyword\">where</span>\n        F: <span class=\"hljs-built_in\">FnOnce</span>() + <span class=\"hljs-built_in\">Send</span> + <span class=\"hljs-symbol\">'static</span>,\n    {\n        <span class=\"hljs-keyword\">let</span> job = <span class=\"hljs-built_in\">Box</span>::new(f);\n\n        <span class=\"hljs-keyword\">self</span>.sender.send(job).unwrap();\n    }\n}\n\n<span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Worker</span></span> {\n</span><span class=\"boring\">    id: <span class=\"hljs-built_in\">usize</span>,\n</span><span class=\"boring\">    thread: thread::JoinHandle&lt;()&gt;,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Worker {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(id: <span class=\"hljs-built_in\">usize</span>, receiver: Arc&lt;Mutex&lt;mpsc::Receiver&lt;Job&gt;&gt;&gt;) -&gt; Worker {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> thread = thread::spawn(|| {\n</span><span class=\"boring\">            receiver;\n</span><span class=\"boring\">        });\n</span><span class=\"boring\">\n</span><span class=\"boring\">        Worker { id, thread }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre>\n<p><span class=\"caption\">Listing 20-19: Creating a <code class=\"hljs\">Job</code> type alias for a <code class=\"hljs\">Box</code>\nthat holds each closure and then sending the job down the channel</span></p>\n<p>After creating a new <code class=\"hljs\">Job</code> instance using the closure we get in <code class=\"hljs\">execute</code>, we\nsend that job down the sending end of the channel. We‚Äôre calling <code class=\"hljs\">unwrap</code> on\n<code class=\"hljs\">send</code> for the case that sending fails. This might happen if, for example, we\nstop all our threads from executing, meaning the receiving end has stopped\nreceiving new messages. At the moment, we can‚Äôt stop our threads from\nexecuting: our threads continue executing as long as the pool exists. The\nreason we use <code class=\"hljs\">unwrap</code> is that we know the failure case won‚Äôt happen, but the\ncompiler doesn‚Äôt know that.</p>\n<p>But we‚Äôre not quite done yet! In the worker, our closure being passed to\n<code class=\"hljs\">thread::spawn</code> still only <em>references</em> the receiving end of the channel.\nInstead, we need the closure to loop forever, asking the receiving end of the\nchannel for a job and running the job when it gets one. Let‚Äôs make the change\nshown in Listing 20-20 to <code class=\"hljs\">Worker::new</code>.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::{\n</span><span class=\"boring\">    sync::{mpsc, Arc, Mutex},\n</span><span class=\"boring\">    thread,\n</span><span class=\"boring\">};\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ThreadPool</span></span> {\n</span><span class=\"boring\">    workers: <span class=\"hljs-built_in\">Vec</span>&lt;Worker&gt;,\n</span><span class=\"boring\">    sender: mpsc::Sender&lt;Job&gt;,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Job</span></span> = <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> <span class=\"hljs-built_in\">FnOnce</span>() + <span class=\"hljs-built_in\">Send</span> + <span class=\"hljs-symbol\">'static</span>&gt;;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> ThreadPool {\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// Create a new ThreadPool.</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// The size is the number of threads in the pool.</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// # Panics</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// The `new` function will panic if the size is zero.</span>\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(size: <span class=\"hljs-built_in\">usize</span>) -&gt; ThreadPool {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert!</span>(size &gt; <span class=\"hljs-number\">0</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> (sender, receiver) = mpsc::channel();\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> receiver = Arc::new(Mutex::new(receiver));\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> workers = <span class=\"hljs-built_in\">Vec</span>::with_capacity(size);\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">for</span> id <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..size {\n</span><span class=\"boring\">            workers.push(Worker::new(id, Arc::clone(&amp;receiver)));\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">\n</span><span class=\"boring\">        ThreadPool { workers, sender }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">execute</span></span>&lt;F&gt;(&amp;<span class=\"hljs-keyword\">self</span>, f: F)\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">where</span>\n</span><span class=\"boring\">        F: <span class=\"hljs-built_in\">FnOnce</span>() + <span class=\"hljs-built_in\">Send</span> + <span class=\"hljs-symbol\">'static</span>,\n</span><span class=\"boring\">    {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> job = <span class=\"hljs-built_in\">Box</span>::new(f);\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">self</span>.sender.send(job).unwrap();\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Worker</span></span> {\n</span><span class=\"boring\">    id: <span class=\"hljs-built_in\">usize</span>,\n</span><span class=\"boring\">    thread: thread::JoinHandle&lt;()&gt;,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-comment\">// --snip--</span>\n\n<span class=\"hljs-keyword\">impl</span> Worker {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(id: <span class=\"hljs-built_in\">usize</span>, receiver: Arc&lt;Mutex&lt;mpsc::Receiver&lt;Job&gt;&gt;&gt;) -&gt; Worker {\n        <span class=\"hljs-keyword\">let</span> thread = thread::spawn(<span class=\"hljs-keyword\">move</span> || <span class=\"hljs-keyword\">loop</span> {\n            <span class=\"hljs-keyword\">let</span> job = receiver.lock().unwrap().recv().unwrap();\n\n            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Worker {id} got a job; executing.\"</span>);\n\n            job();\n        });\n\n        Worker { id, thread }\n    }\n}</code></pre>\n<p><span class=\"caption\">Listing 20-20: Receiving and executing the jobs in the\nworker‚Äôs thread</span></p>\n<p>Here, we first call <code class=\"hljs\">lock</code> on the <code class=\"hljs\">receiver</code> to acquire the mutex, and then we\ncall <code class=\"hljs\">unwrap</code> to panic on any errors. Acquiring a lock might fail if the mutex\nis in a <em>poisoned</em> state, which can happen if some other thread panicked while\nholding the lock rather than releasing the lock. In this situation, calling\n<code class=\"hljs\">unwrap</code> to have this thread panic is the correct action to take. Feel free to\nchange this <code class=\"hljs\">unwrap</code> to an <code class=\"hljs\">expect</code> with an error message that is meaningful to\nyou.</p>\n<p>If we get the lock on the mutex, we call <code class=\"hljs\">recv</code> to receive a <code class=\"hljs\">Job</code> from the\nchannel. A final <code class=\"hljs\">unwrap</code> moves past any errors here as well, which might occur\nif the thread holding the sender has shut down, similar to how the <code class=\"hljs\">send</code>\nmethod returns <code class=\"hljs\">Err</code> if the receiver shuts down.</p>\n<p>The call to <code class=\"hljs\">recv</code> blocks, so if there is no job yet, the current thread will\nwait until a job becomes available. The <code class=\"hljs\">Mutex&lt;T&gt;</code> ensures that only one\n<code class=\"hljs\">Worker</code> thread at a time is trying to request a job.</p>\n<p>Our thread pool is now in a working state! Give it a <code class=\"hljs\">cargo run</code> and make some\nrequests:</p>\n<!-- manual-regeneration\ncd listings/ch20-web-server/listing-20-20\ncargo run\nmake some requests to 127.0.0.1:7878\nCan't automate because the output depends on making requests\n-->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling hello v0.1.0 (file:///projects/hello)\nwarning: field is never read: `workers`\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/lib.rs:7:5</span>\n  |\n7 |     workers: Vec&lt;Worker&gt;,\n  |     ^^^^^^^^^^^^^^^^^^^^\n  |\n  = note: `#[warn(dead_code)]` on by default\n\nwarning: field is never read: `id`\n<span class=\"hljs-meta\">  --&gt;</span><span class=\"bash\"> src/lib.rs:48:5</span>\n   |\n48 |     id: usize,\n   |     ^^^^^^^^^\n\nwarning: field is never read: `thread`\n<span class=\"hljs-meta\">  --&gt;</span><span class=\"bash\"> src/lib.rs:49:5</span>\n   |\n49 |     thread: thread::JoinHandle&lt;()&gt;,\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning: `hello` (lib) generated 3 warnings\n    Finished dev [unoptimized + debuginfo] target(s) in 1.40s\n     Running `target/debug/hello`\nWorker 0 got a job; executing.\nWorker 2 got a job; executing.\nWorker 1 got a job; executing.\nWorker 3 got a job; executing.\nWorker 0 got a job; executing.\nWorker 2 got a job; executing.\nWorker 1 got a job; executing.\nWorker 3 got a job; executing.\nWorker 0 got a job; executing.\nWorker 2 got a job; executing.\n</code></pre>\n<p>Success! We now have a thread pool that executes connections asynchronously.\nThere are never more than four threads created, so our system won‚Äôt get\noverloaded if the server receives a lot of requests. If we make a request to\n<em>/sleep</em>, the server will be able to serve other requests by having another\nthread run them.</p>\n<section class=\"note\" aria-role=\"note\">\n<p>Note: If you open <em>/sleep</em> in multiple browser windows simultaneously, they\nmight load one at a time in 5 second intervals. Some web browsers execute\nmultiple instances of the same request sequentially for caching reasons. This\nlimitation is not caused by our web server.</p>\n</section>\n<p>After learning about the <code class=\"hljs\">while let</code> loop in Chapter 18, you might be wondering\nwhy we didn‚Äôt write the worker thread code as shown in Listing 20-21.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/not_desired_behavior.svg\" title=\"This code does not produce the desired behavior.\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore not_desired_behavior hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::{\n</span><span class=\"boring\">    sync::{mpsc, Arc, Mutex},\n</span><span class=\"boring\">    thread,\n</span><span class=\"boring\">};\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ThreadPool</span></span> {\n</span><span class=\"boring\">    workers: <span class=\"hljs-built_in\">Vec</span>&lt;Worker&gt;,\n</span><span class=\"boring\">    sender: mpsc::Sender&lt;Job&gt;,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Job</span></span> = <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> <span class=\"hljs-built_in\">FnOnce</span>() + <span class=\"hljs-built_in\">Send</span> + <span class=\"hljs-symbol\">'static</span>&gt;;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> ThreadPool {\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// Create a new ThreadPool.</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// The size is the number of threads in the pool.</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// # Panics</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// The `new` function will panic if the size is zero.</span>\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(size: <span class=\"hljs-built_in\">usize</span>) -&gt; ThreadPool {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert!</span>(size &gt; <span class=\"hljs-number\">0</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> (sender, receiver) = mpsc::channel();\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> receiver = Arc::new(Mutex::new(receiver));\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> workers = <span class=\"hljs-built_in\">Vec</span>::with_capacity(size);\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">for</span> id <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..size {\n</span><span class=\"boring\">            workers.push(Worker::new(id, Arc::clone(&amp;receiver)));\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">\n</span><span class=\"boring\">        ThreadPool { workers, sender }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">execute</span></span>&lt;F&gt;(&amp;<span class=\"hljs-keyword\">self</span>, f: F)\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">where</span>\n</span><span class=\"boring\">        F: <span class=\"hljs-built_in\">FnOnce</span>() + <span class=\"hljs-built_in\">Send</span> + <span class=\"hljs-symbol\">'static</span>,\n</span><span class=\"boring\">    {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> job = <span class=\"hljs-built_in\">Box</span>::new(f);\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">self</span>.sender.send(job).unwrap();\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Worker</span></span> {\n</span><span class=\"boring\">    id: <span class=\"hljs-built_in\">usize</span>,\n</span><span class=\"boring\">    thread: thread::JoinHandle&lt;()&gt;,\n</span><span class=\"boring\">}\n</span><span class=\"hljs-comment\">// --snip--</span>\n\n<span class=\"hljs-keyword\">impl</span> Worker {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(id: <span class=\"hljs-built_in\">usize</span>, receiver: Arc&lt;Mutex&lt;mpsc::Receiver&lt;Job&gt;&gt;&gt;) -&gt; Worker {\n        <span class=\"hljs-keyword\">let</span> thread = thread::spawn(<span class=\"hljs-keyword\">move</span> || {\n            <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-literal\">Ok</span>(job) = receiver.lock().unwrap().recv() {\n                <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Worker {id} got a job; executing.\"</span>);\n\n                job();\n            }\n        });\n\n        Worker { id, thread }\n    }\n}</code></pre>\n<p><span class=\"caption\">Listing 20-21: An alternative implementation of\n<code class=\"hljs\">Worker::new</code> using <code class=\"hljs\">while let</code></span></p>\n<p>This code compiles and runs but doesn‚Äôt result in the desired threading\nbehavior: a slow request will still cause other requests to wait to be\nprocessed. The reason is somewhat subtle: the <code class=\"hljs\">Mutex</code> struct has no public\n<code class=\"hljs\">unlock</code> method because the ownership of the lock is based on the lifetime of\nthe <code class=\"hljs\">MutexGuard&lt;T&gt;</code> within the <code class=\"hljs\">LockResult&lt;MutexGuard&lt;T&gt;&gt;</code> that the <code class=\"hljs\">lock</code>\nmethod returns. At compile time, the borrow checker can then enforce the rule\nthat a resource guarded by a <code class=\"hljs\">Mutex</code> cannot be accessed unless we hold the\nlock. However, this implementation can also result in the lock being held\nlonger than intended if we aren‚Äôt mindful of the lifetime of the\n<code class=\"hljs\">MutexGuard&lt;T&gt;</code>.</p>\n<p>The code in Listing 20-20 that uses <code class=\"hljs\">let job = receiver.lock().unwrap().recv().unwrap();</code> works because with <code class=\"hljs\">let</code>, any\ntemporary values used in the expression on the right hand side of the equals\nsign are immediately dropped when the <code class=\"hljs\">let</code> statement ends. However, <code class=\"hljs\">while let</code> (and <code class=\"hljs\">if let</code> and <code class=\"hljs\">match</code>) does not drop temporary values until the end of\nthe associated block. In Listing 20-21, the lock remains held for the duration\nof the call to <code class=\"hljs\">job()</code>, meaning other workers cannot receive jobs.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"graceful-shutdown-and-cleanup\"><a class=\"header\" href=\"#graceful-shutdown-and-cleanup\">Graceful Shutdown and Cleanup</a></h2>\n<p>The code in Listing 20-20 is responding to requests asynchronously through the\nuse of a thread pool, as we intended. We get some warnings about the <code class=\"hljs\">workers</code>,\n<code class=\"hljs\">id</code>, and <code class=\"hljs\">thread</code> fields that we‚Äôre not using in a direct way that reminds us\nwe‚Äôre not cleaning up anything. When we use the less elegant\n<kbd>ctrl</kbd>-<kbd>c</kbd> method to halt the main thread, all other threads\nare stopped immediately as well, even if they‚Äôre in the middle of serving a\nrequest.</p>\n<p>Next, then, we‚Äôll implement the <code class=\"hljs\">Drop</code> trait to call <code class=\"hljs\">join</code> on each of the\nthreads in the pool so they can finish the requests they‚Äôre working on before\nclosing. Then we‚Äôll implement a way to tell the threads they should stop\naccepting new requests and shut down. To see this code in action, we‚Äôll modify\nour server to accept only two requests before gracefully shutting down its\nthread pool.</p>\n<h3 id=\"implementing-the-drop-trait-on-threadpool\"><a class=\"header\" href=\"#implementing-the-drop-trait-on-threadpool\">Implementing the <code>Drop</code> Trait on <code>ThreadPool</code></a></h3>\n<p>Let‚Äôs start with implementing <code class=\"hljs\">Drop</code> on our thread pool. When the pool is\ndropped, our threads should all join to make sure they finish their work.\nListing 20-22 shows a first attempt at a <code class=\"hljs\">Drop</code> implementation; this code won‚Äôt\nquite work yet.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::{\n</span><span class=\"boring\">    sync::{mpsc, Arc, Mutex},\n</span><span class=\"boring\">    thread,\n</span><span class=\"boring\">};\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ThreadPool</span></span> {\n</span><span class=\"boring\">    workers: <span class=\"hljs-built_in\">Vec</span>&lt;Worker&gt;,\n</span><span class=\"boring\">    sender: mpsc::Sender&lt;Job&gt;,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Job</span></span> = <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> <span class=\"hljs-built_in\">FnOnce</span>() + <span class=\"hljs-built_in\">Send</span> + <span class=\"hljs-symbol\">'static</span>&gt;;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> ThreadPool {\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// Create a new ThreadPool.</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// The size is the number of threads in the pool.</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// # Panics</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// The `new` function will panic if the size is zero.</span>\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(size: <span class=\"hljs-built_in\">usize</span>) -&gt; ThreadPool {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert!</span>(size &gt; <span class=\"hljs-number\">0</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> (sender, receiver) = mpsc::channel();\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> receiver = Arc::new(Mutex::new(receiver));\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> workers = <span class=\"hljs-built_in\">Vec</span>::with_capacity(size);\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">for</span> id <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..size {\n</span><span class=\"boring\">            workers.push(Worker::new(id, Arc::clone(&amp;receiver)));\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">\n</span><span class=\"boring\">        ThreadPool { workers, sender }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">execute</span></span>&lt;F&gt;(&amp;<span class=\"hljs-keyword\">self</span>, f: F)\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">where</span>\n</span><span class=\"boring\">        F: <span class=\"hljs-built_in\">FnOnce</span>() + <span class=\"hljs-built_in\">Send</span> + <span class=\"hljs-symbol\">'static</span>,\n</span><span class=\"boring\">    {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> job = <span class=\"hljs-built_in\">Box</span>::new(f);\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">self</span>.sender.send(job).unwrap();\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">impl</span> <span class=\"hljs-built_in\">Drop</span> <span class=\"hljs-keyword\">for</span> ThreadPool {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">drop</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-keyword\">for</span> worker <span class=\"hljs-keyword\">in</span> &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>.workers {\n            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Shutting down worker {}\"</span>, worker.id);\n\n            worker.thread.join().unwrap();\n        }\n    }\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Worker</span></span> {\n</span><span class=\"boring\">    id: <span class=\"hljs-built_in\">usize</span>,\n</span><span class=\"boring\">    thread: thread::JoinHandle&lt;()&gt;,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Worker {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(id: <span class=\"hljs-built_in\">usize</span>, receiver: Arc&lt;Mutex&lt;mpsc::Receiver&lt;Job&gt;&gt;&gt;) -&gt; Worker {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> thread = thread::spawn(<span class=\"hljs-keyword\">move</span> || <span class=\"hljs-keyword\">loop</span> {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">let</span> job = receiver.lock().unwrap().recv().unwrap();\n</span><span class=\"boring\">\n</span><span class=\"boring\">            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Worker {id} got a job; executing.\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">            job();\n</span><span class=\"boring\">        });\n</span><span class=\"boring\">\n</span><span class=\"boring\">        Worker { id, thread }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre>\n<p><span class=\"caption\">Listing 20-22: Joining each thread when the thread pool\ngoes out of scope</span></p>\n<p>First, we loop through each of the thread pool <code class=\"hljs\">workers</code>. We use <code class=\"hljs\">&amp;mut</code> for\nthis because <code class=\"hljs\">self</code> is a mutable reference, and we also need to be able to\nmutate <code class=\"hljs\">worker</code>. For each worker, we print a message saying that this\nparticular worker is shutting down, and then we call <code class=\"hljs\">join</code> on that worker‚Äôs\nthread. If the call to <code class=\"hljs\">join</code> fails, we use <code class=\"hljs\">unwrap</code> to make Rust panic and go\ninto an ungraceful shutdown.</p>\n<p>Here is the error we get when we compile this code:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo check</span>\n    Checking hello v0.1.0 (file:///projects/hello)\nerror[E0507]: cannot move out of `worker.thread` which is behind a mutable reference\n<span class=\"hljs-meta\">  --&gt;</span><span class=\"bash\"> src/lib.rs:52:13</span>\n   |\n52 |             worker.thread.join().unwrap();\n   |             ^^^^^^^^^^^^^ ------ `worker.thread` moved due to this method call\n   |             |\n   |             move occurs because `worker.thread` has type `JoinHandle&lt;()&gt;`, which does not implement the `Copy` trait\n   |\nnote: `JoinHandle::&lt;T&gt;::join` takes ownership of the receiver `self`, which moves `worker.thread`\n<span class=\"hljs-meta\">  --&gt;</span><span class=\"bash\"> /rustc/9b00956e56009bab2aa15d7bff10916599e3d6d6/library/std/src/thread/mod.rs:1657:17</span>\n\nFor more information about this error, try `rustc --explain E0507`.\nerror: could not compile `hello` (lib) due to 1 previous error\n</code></pre>\n<p>The error tells us we can‚Äôt call <code class=\"hljs\">join</code> because we only have a mutable borrow\nof each <code class=\"hljs\">worker</code> and <code class=\"hljs\">join</code> takes ownership of its argument. To solve this\nissue, we need to move the thread out of the <code class=\"hljs\">Worker</code> instance that owns\n<code class=\"hljs\">thread</code> so <code class=\"hljs\">join</code> can consume the thread. We did this in Listing 17-15: if\n<code class=\"hljs\">Worker</code> holds an <code class=\"hljs\">Option&lt;thread::JoinHandle&lt;()&gt;&gt;</code> instead, we can call the\n<code class=\"hljs\">take</code> method on the <code class=\"hljs\">Option</code> to move the value out of the <code class=\"hljs\">Some</code> variant and\nleave a <code class=\"hljs\">None</code> variant in its place. In other words, a <code class=\"hljs\">Worker</code> that is running\nwill have a <code class=\"hljs\">Some</code> variant in <code class=\"hljs\">thread</code>, and when we want to clean up a\n<code class=\"hljs\">Worker</code>, we‚Äôll replace <code class=\"hljs\">Some</code> with <code class=\"hljs\">None</code> so the <code class=\"hljs\">Worker</code> doesn‚Äôt have a\nthread to run.</p>\n<p>So we know we want to update the definition of <code class=\"hljs\">Worker</code> like this:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::{\n</span><span class=\"boring\">    sync::{mpsc, Arc, Mutex},\n</span><span class=\"boring\">    thread,\n</span><span class=\"boring\">};\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ThreadPool</span></span> {\n</span><span class=\"boring\">    workers: <span class=\"hljs-built_in\">Vec</span>&lt;Worker&gt;,\n</span><span class=\"boring\">    sender: mpsc::Sender&lt;Job&gt;,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Job</span></span> = <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> <span class=\"hljs-built_in\">FnOnce</span>() + <span class=\"hljs-built_in\">Send</span> + <span class=\"hljs-symbol\">'static</span>&gt;;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> ThreadPool {\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// Create a new ThreadPool.</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// The size is the number of threads in the pool.</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// # Panics</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// The `new` function will panic if the size is zero.</span>\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(size: <span class=\"hljs-built_in\">usize</span>) -&gt; ThreadPool {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert!</span>(size &gt; <span class=\"hljs-number\">0</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> (sender, receiver) = mpsc::channel();\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> receiver = Arc::new(Mutex::new(receiver));\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> workers = <span class=\"hljs-built_in\">Vec</span>::with_capacity(size);\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">for</span> id <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..size {\n</span><span class=\"boring\">            workers.push(Worker::new(id, Arc::clone(&amp;receiver)));\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">\n</span><span class=\"boring\">        ThreadPool { workers, sender }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">execute</span></span>&lt;F&gt;(&amp;<span class=\"hljs-keyword\">self</span>, f: F)\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">where</span>\n</span><span class=\"boring\">        F: <span class=\"hljs-built_in\">FnOnce</span>() + <span class=\"hljs-built_in\">Send</span> + <span class=\"hljs-symbol\">'static</span>,\n</span><span class=\"boring\">    {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> job = <span class=\"hljs-built_in\">Box</span>::new(f);\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">self</span>.sender.send(job).unwrap();\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> <span class=\"hljs-built_in\">Drop</span> <span class=\"hljs-keyword\">for</span> ThreadPool {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">drop</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">for</span> worker <span class=\"hljs-keyword\">in</span> &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>.workers {\n</span><span class=\"boring\">            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Shutting down worker {}\"</span>, worker.id);\n</span><span class=\"boring\">\n</span><span class=\"boring\">            worker.thread.join().unwrap();\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Worker</span></span> {\n    id: <span class=\"hljs-built_in\">usize</span>,\n    thread: <span class=\"hljs-built_in\">Option</span>&lt;thread::JoinHandle&lt;()&gt;&gt;,\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Worker {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(id: <span class=\"hljs-built_in\">usize</span>, receiver: Arc&lt;Mutex&lt;mpsc::Receiver&lt;Job&gt;&gt;&gt;) -&gt; Worker {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> thread = thread::spawn(<span class=\"hljs-keyword\">move</span> || <span class=\"hljs-keyword\">loop</span> {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">let</span> job = receiver.lock().unwrap().recv().unwrap();\n</span><span class=\"boring\">\n</span><span class=\"boring\">            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Worker {id} got a job; executing.\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">            job();\n</span><span class=\"boring\">        });\n</span><span class=\"boring\">\n</span><span class=\"boring\">        Worker { id, thread }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre>\n<p>Now let‚Äôs lean on the compiler to find the other places that need to change.\nChecking this code, we get two errors:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo check</span>\n    Checking hello v0.1.0 (file:///projects/hello)\nerror[E0599]: no method named `join` found for enum `Option` in the current scope\n<span class=\"hljs-meta\">  --&gt;</span><span class=\"bash\"> src/lib.rs:52:27</span>\n   |\n52 |             worker.thread.join().unwrap();\n   |                           ^^^^ method not found in `Option&lt;JoinHandle&lt;()&gt;&gt;`\n   |\nnote: the method `join` exists on the type `JoinHandle&lt;()&gt;`\n<span class=\"hljs-meta\">  --&gt;</span><span class=\"bash\"> /rustc/9b00956e56009bab2aa15d7bff10916599e3d6d6/library/std/src/thread/mod.rs:1657:5</span>\nhelp: consider using `Option::expect` to unwrap the `JoinHandle&lt;()&gt;` value, panicking if the value is an `Option::None`\n   |\n52 |             worker.thread.expect(\"REASON\").join().unwrap();\n   |                          +++++++++++++++++\n\nerror[E0308]: mismatched types\n<span class=\"hljs-meta\">  --&gt;</span><span class=\"bash\"> src/lib.rs:72:22</span>\n   |\n72 |         Worker { id, thread }\n   |                      ^^^^^^ expected `Option&lt;JoinHandle&lt;()&gt;&gt;`, found `JoinHandle&lt;_&gt;`\n   |\n   = note: expected enum `Option&lt;JoinHandle&lt;()&gt;&gt;`\n            found struct `JoinHandle&lt;_&gt;`\nhelp: try wrapping the expression in `Some`\n   |\n72 |         Worker { id, thread: Some(thread) }\n   |                      +++++++++++++      +\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\nerror: could not compile `hello` (lib) due to 2 previous errors\n</code></pre>\n<p>Let‚Äôs address the second error, which points to the code at the end of\n<code class=\"hljs\">Worker::new</code>; we need to wrap the <code class=\"hljs\">thread</code> value in <code class=\"hljs\">Some</code> when we create a\nnew <code class=\"hljs\">Worker</code>. Make the following changes to fix this error:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore does_not_compile hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::{\n</span><span class=\"boring\">    sync::{mpsc, Arc, Mutex},\n</span><span class=\"boring\">    thread,\n</span><span class=\"boring\">};\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ThreadPool</span></span> {\n</span><span class=\"boring\">    workers: <span class=\"hljs-built_in\">Vec</span>&lt;Worker&gt;,\n</span><span class=\"boring\">    sender: mpsc::Sender&lt;Job&gt;,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Job</span></span> = <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> <span class=\"hljs-built_in\">FnOnce</span>() + <span class=\"hljs-built_in\">Send</span> + <span class=\"hljs-symbol\">'static</span>&gt;;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> ThreadPool {\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// Create a new ThreadPool.</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// The size is the number of threads in the pool.</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// # Panics</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// The `new` function will panic if the size is zero.</span>\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(size: <span class=\"hljs-built_in\">usize</span>) -&gt; ThreadPool {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert!</span>(size &gt; <span class=\"hljs-number\">0</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> (sender, receiver) = mpsc::channel();\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> receiver = Arc::new(Mutex::new(receiver));\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> workers = <span class=\"hljs-built_in\">Vec</span>::with_capacity(size);\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">for</span> id <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..size {\n</span><span class=\"boring\">            workers.push(Worker::new(id, Arc::clone(&amp;receiver)));\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">\n</span><span class=\"boring\">        ThreadPool { workers, sender }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">execute</span></span>&lt;F&gt;(&amp;<span class=\"hljs-keyword\">self</span>, f: F)\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">where</span>\n</span><span class=\"boring\">        F: <span class=\"hljs-built_in\">FnOnce</span>() + <span class=\"hljs-built_in\">Send</span> + <span class=\"hljs-symbol\">'static</span>,\n</span><span class=\"boring\">    {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> job = <span class=\"hljs-built_in\">Box</span>::new(f);\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">self</span>.sender.send(job).unwrap();\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> <span class=\"hljs-built_in\">Drop</span> <span class=\"hljs-keyword\">for</span> ThreadPool {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">drop</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">for</span> worker <span class=\"hljs-keyword\">in</span> &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>.workers {\n</span><span class=\"boring\">            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Shutting down worker {}\"</span>, worker.id);\n</span><span class=\"boring\">\n</span><span class=\"boring\">            worker.thread.join().unwrap();\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Worker</span></span> {\n</span><span class=\"boring\">    id: <span class=\"hljs-built_in\">usize</span>,\n</span><span class=\"boring\">    thread: <span class=\"hljs-built_in\">Option</span>&lt;thread::JoinHandle&lt;()&gt;&gt;,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">impl</span> Worker {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(id: <span class=\"hljs-built_in\">usize</span>, receiver: Arc&lt;Mutex&lt;mpsc::Receiver&lt;Job&gt;&gt;&gt;) -&gt; Worker {\n        <span class=\"hljs-comment\">// --snip--</span>\n\n<span class=\"boring\">        <span class=\"hljs-keyword\">let</span> thread = thread::spawn(<span class=\"hljs-keyword\">move</span> || <span class=\"hljs-keyword\">loop</span> {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">let</span> job = receiver.lock().unwrap().recv().unwrap();\n</span><span class=\"boring\">\n</span><span class=\"boring\">            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Worker {id} got a job; executing.\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">            job();\n</span><span class=\"boring\">        });\n</span><span class=\"boring\">\n</span>        Worker {\n            id,\n            thread: <span class=\"hljs-literal\">Some</span>(thread),\n        }\n    }\n}</code></pre>\n<p>The first error is in our <code class=\"hljs\">Drop</code> implementation. We mentioned earlier that we\nintended to call <code class=\"hljs\">take</code> on the <code class=\"hljs\">Option</code> value to move <code class=\"hljs\">thread</code> out of <code class=\"hljs\">worker</code>.\nThe following changes will do so:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/not_desired_behavior.svg\" title=\"This code does not produce the desired behavior.\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust ignore not_desired_behavior hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::{\n</span><span class=\"boring\">    sync::{mpsc, Arc, Mutex},\n</span><span class=\"boring\">    thread,\n</span><span class=\"boring\">};\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ThreadPool</span></span> {\n</span><span class=\"boring\">    workers: <span class=\"hljs-built_in\">Vec</span>&lt;Worker&gt;,\n</span><span class=\"boring\">    sender: mpsc::Sender&lt;Job&gt;,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Job</span></span> = <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> <span class=\"hljs-built_in\">FnOnce</span>() + <span class=\"hljs-built_in\">Send</span> + <span class=\"hljs-symbol\">'static</span>&gt;;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> ThreadPool {\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// Create a new ThreadPool.</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// The size is the number of threads in the pool.</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// # Panics</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// The `new` function will panic if the size is zero.</span>\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(size: <span class=\"hljs-built_in\">usize</span>) -&gt; ThreadPool {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert!</span>(size &gt; <span class=\"hljs-number\">0</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> (sender, receiver) = mpsc::channel();\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> receiver = Arc::new(Mutex::new(receiver));\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> workers = <span class=\"hljs-built_in\">Vec</span>::with_capacity(size);\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">for</span> id <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..size {\n</span><span class=\"boring\">            workers.push(Worker::new(id, Arc::clone(&amp;receiver)));\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">\n</span><span class=\"boring\">        ThreadPool { workers, sender }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">execute</span></span>&lt;F&gt;(&amp;<span class=\"hljs-keyword\">self</span>, f: F)\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">where</span>\n</span><span class=\"boring\">        F: <span class=\"hljs-built_in\">FnOnce</span>() + <span class=\"hljs-built_in\">Send</span> + <span class=\"hljs-symbol\">'static</span>,\n</span><span class=\"boring\">    {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> job = <span class=\"hljs-built_in\">Box</span>::new(f);\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">self</span>.sender.send(job).unwrap();\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">impl</span> <span class=\"hljs-built_in\">Drop</span> <span class=\"hljs-keyword\">for</span> ThreadPool {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">drop</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-keyword\">for</span> worker <span class=\"hljs-keyword\">in</span> &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>.workers {\n            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Shutting down worker {}\"</span>, worker.id);\n\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-literal\">Some</span>(thread) = worker.thread.take() {\n                thread.join().unwrap();\n            }\n        }\n    }\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Worker</span></span> {\n</span><span class=\"boring\">    id: <span class=\"hljs-built_in\">usize</span>,\n</span><span class=\"boring\">    thread: <span class=\"hljs-built_in\">Option</span>&lt;thread::JoinHandle&lt;()&gt;&gt;,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Worker {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(id: <span class=\"hljs-built_in\">usize</span>, receiver: Arc&lt;Mutex&lt;mpsc::Receiver&lt;Job&gt;&gt;&gt;) -&gt; Worker {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> thread = thread::spawn(<span class=\"hljs-keyword\">move</span> || <span class=\"hljs-keyword\">loop</span> {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">let</span> job = receiver.lock().unwrap().recv().unwrap();\n</span><span class=\"boring\">\n</span><span class=\"boring\">            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Worker {id} got a job; executing.\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">            job();\n</span><span class=\"boring\">        });\n</span><span class=\"boring\">\n</span><span class=\"boring\">        Worker {\n</span><span class=\"boring\">            id,\n</span><span class=\"boring\">            thread: <span class=\"hljs-literal\">Some</span>(thread),\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre>\n<p>As discussed in Chapter 17, the <code class=\"hljs\">take</code> method on <code class=\"hljs\">Option</code> takes the <code class=\"hljs\">Some</code>\nvariant out and leaves <code class=\"hljs\">None</code> in its place. We‚Äôre using <code class=\"hljs\">if let</code> to destructure\nthe <code class=\"hljs\">Some</code> and get the thread; then we call <code class=\"hljs\">join</code> on the thread. If a worker‚Äôs\nthread is already <code class=\"hljs\">None</code>, we know that worker has already had its thread\ncleaned up, so nothing happens in that case.</p>\n<h3 id=\"signaling-to-the-threads-to-stop-listening-for-jobs\"><a class=\"header\" href=\"#signaling-to-the-threads-to-stop-listening-for-jobs\">Signaling to the Threads to Stop Listening for Jobs</a></h3>\n<p>With all the changes we‚Äôve made, our code compiles without any warnings.\nHowever, the bad news is this code doesn‚Äôt function the way we want it to yet.\nThe key is the logic in the closures run by the threads of the <code class=\"hljs\">Worker</code>\ninstances: at the moment, we call <code class=\"hljs\">join</code>, but that won‚Äôt shut down the threads\nbecause they <code class=\"hljs\">loop</code> forever looking for jobs. If we try to drop our\n<code class=\"hljs\">ThreadPool</code> with our current implementation of <code class=\"hljs\">drop</code>, the main thread will\nblock forever waiting for the first thread to finish.</p>\n<p>To fix this problem, we‚Äôll need a change in the <code class=\"hljs\">ThreadPool</code> <code class=\"hljs\">drop</code>\nimplementation and then a change in the <code class=\"hljs\">Worker</code> loop.</p>\n<p>First, we‚Äôll change the <code class=\"hljs\">ThreadPool</code> <code class=\"hljs\">drop</code> implementation to explicitly drop\nthe <code class=\"hljs\">sender</code> before waiting for the threads to finish. Listing 20-23 shows the\nchanges to <code class=\"hljs\">ThreadPool</code> to explicitly drop <code class=\"hljs\">sender</code>. We use the same <code class=\"hljs\">Option</code>\nand <code class=\"hljs\">take</code> technique as we did with the thread to be able to move <code class=\"hljs\">sender</code> out\nof <code class=\"hljs\">ThreadPool</code>:</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><div class=\"ferris-container\"><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/not_desired_behavior.svg\" title=\"This code does not produce the desired behavior.\" class=\"ferris ferris-large\"></a></div><code class=\"language-rust noplayground not_desired_behavior hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::{\n</span><span class=\"boring\">    sync::{mpsc, Arc, Mutex},\n</span><span class=\"boring\">    thread,\n</span><span class=\"boring\">};\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ThreadPool</span></span> {\n    workers: <span class=\"hljs-built_in\">Vec</span>&lt;Worker&gt;,\n    sender: <span class=\"hljs-built_in\">Option</span>&lt;mpsc::Sender&lt;Job&gt;&gt;,\n}\n<span class=\"hljs-comment\">// --snip--</span>\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Job</span></span> = <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> <span class=\"hljs-built_in\">FnOnce</span>() + <span class=\"hljs-built_in\">Send</span> + <span class=\"hljs-symbol\">'static</span>&gt;;\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">impl</span> ThreadPool {\n<span class=\"boring\">    <span class=\"hljs-comment\">/// Create a new ThreadPool.</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// The size is the number of threads in the pool.</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// # Panics</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// The `new` function will panic if the size is zero.</span>\n</span>    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(size: <span class=\"hljs-built_in\">usize</span>) -&gt; ThreadPool {\n        <span class=\"hljs-comment\">// --snip--</span>\n\n<span class=\"boring\">        <span class=\"hljs-built_in\">assert!</span>(size &gt; <span class=\"hljs-number\">0</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> (sender, receiver) = mpsc::channel();\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> receiver = Arc::new(Mutex::new(receiver));\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> workers = <span class=\"hljs-built_in\">Vec</span>::with_capacity(size);\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">for</span> id <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..size {\n</span><span class=\"boring\">            workers.push(Worker::new(id, Arc::clone(&amp;receiver)));\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">\n</span>        ThreadPool {\n            workers,\n            sender: <span class=\"hljs-literal\">Some</span>(sender),\n        }\n    }\n\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">execute</span></span>&lt;F&gt;(&amp;<span class=\"hljs-keyword\">self</span>, f: F)\n    <span class=\"hljs-keyword\">where</span>\n        F: <span class=\"hljs-built_in\">FnOnce</span>() + <span class=\"hljs-built_in\">Send</span> + <span class=\"hljs-symbol\">'static</span>,\n    {\n        <span class=\"hljs-keyword\">let</span> job = <span class=\"hljs-built_in\">Box</span>::new(f);\n\n        <span class=\"hljs-keyword\">self</span>.sender.as_ref().unwrap().send(job).unwrap();\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-built_in\">Drop</span> <span class=\"hljs-keyword\">for</span> ThreadPool {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">drop</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-built_in\">drop</span>(<span class=\"hljs-keyword\">self</span>.sender.take());\n\n        <span class=\"hljs-keyword\">for</span> worker <span class=\"hljs-keyword\">in</span> &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>.workers {\n            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Shutting down worker {}\"</span>, worker.id);\n\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-literal\">Some</span>(thread) = worker.thread.take() {\n                thread.join().unwrap();\n            }\n        }\n    }\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Worker</span></span> {\n</span><span class=\"boring\">    id: <span class=\"hljs-built_in\">usize</span>,\n</span><span class=\"boring\">    thread: <span class=\"hljs-built_in\">Option</span>&lt;thread::JoinHandle&lt;()&gt;&gt;,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> Worker {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(id: <span class=\"hljs-built_in\">usize</span>, receiver: Arc&lt;Mutex&lt;mpsc::Receiver&lt;Job&gt;&gt;&gt;) -&gt; Worker {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> thread = thread::spawn(<span class=\"hljs-keyword\">move</span> || <span class=\"hljs-keyword\">loop</span> {\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">let</span> job = receiver.lock().unwrap().recv().unwrap();\n</span><span class=\"boring\">\n</span><span class=\"boring\">            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Worker {id} got a job; executing.\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">            job();\n</span><span class=\"boring\">        });\n</span><span class=\"boring\">\n</span><span class=\"boring\">        Worker {\n</span><span class=\"boring\">            id,\n</span><span class=\"boring\">            thread: <span class=\"hljs-literal\">Some</span>(thread),\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}</span></code></pre>\n<p><span class=\"caption\">Listing 20-23: Explicitly drop <code class=\"hljs\">sender</code> before joining\nthe worker threads</span></p>\n<p>Dropping <code class=\"hljs\">sender</code> closes the channel, which indicates no more messages will be\nsent. When that happens, all the calls to <code class=\"hljs\">recv</code> that the workers do in the\ninfinite loop will return an error. In Listing 20-24, we change the <code class=\"hljs\">Worker</code>\nloop to gracefully exit the loop in that case, which means the threads will\nfinish when the <code class=\"hljs\">ThreadPool</code> <code class=\"hljs\">drop</code> implementation calls <code class=\"hljs\">join</code> on them.</p>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust noplayground hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::{\n</span><span class=\"boring\">    sync::{mpsc, Arc, Mutex},\n</span><span class=\"boring\">    thread,\n</span><span class=\"boring\">};\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ThreadPool</span></span> {\n</span><span class=\"boring\">    workers: <span class=\"hljs-built_in\">Vec</span>&lt;Worker&gt;,\n</span><span class=\"boring\">    sender: <span class=\"hljs-built_in\">Option</span>&lt;mpsc::Sender&lt;Job&gt;&gt;,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Job</span></span> = <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> <span class=\"hljs-built_in\">FnOnce</span>() + <span class=\"hljs-built_in\">Send</span> + <span class=\"hljs-symbol\">'static</span>&gt;;\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> ThreadPool {\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// Create a new ThreadPool.</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// The size is the number of threads in the pool.</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// # Panics</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">///</span>\n</span><span class=\"boring\">    <span class=\"hljs-comment\">/// The `new` function will panic if the size is zero.</span>\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(size: <span class=\"hljs-built_in\">usize</span>) -&gt; ThreadPool {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">assert!</span>(size &gt; <span class=\"hljs-number\">0</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> (sender, receiver) = mpsc::channel();\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> receiver = Arc::new(Mutex::new(receiver));\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> workers = <span class=\"hljs-built_in\">Vec</span>::with_capacity(size);\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">for</span> id <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..size {\n</span><span class=\"boring\">            workers.push(Worker::new(id, Arc::clone(&amp;receiver)));\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">\n</span><span class=\"boring\">        ThreadPool {\n</span><span class=\"boring\">            workers,\n</span><span class=\"boring\">            sender: <span class=\"hljs-literal\">Some</span>(sender),\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">execute</span></span>&lt;F&gt;(&amp;<span class=\"hljs-keyword\">self</span>, f: F)\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">where</span>\n</span><span class=\"boring\">        F: <span class=\"hljs-built_in\">FnOnce</span>() + <span class=\"hljs-built_in\">Send</span> + <span class=\"hljs-symbol\">'static</span>,\n</span><span class=\"boring\">    {\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">let</span> job = <span class=\"hljs-built_in\">Box</span>::new(f);\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">self</span>.sender.as_ref().unwrap().send(job).unwrap();\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-keyword\">impl</span> <span class=\"hljs-built_in\">Drop</span> <span class=\"hljs-keyword\">for</span> ThreadPool {\n</span><span class=\"boring\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">drop</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">drop</span>(<span class=\"hljs-keyword\">self</span>.sender.take());\n</span><span class=\"boring\">\n</span><span class=\"boring\">        <span class=\"hljs-keyword\">for</span> worker <span class=\"hljs-keyword\">in</span> &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>.workers {\n</span><span class=\"boring\">            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Shutting down worker {}\"</span>, worker.id);\n</span><span class=\"boring\">\n</span><span class=\"boring\">            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-literal\">Some</span>(thread) = worker.thread.take() {\n</span><span class=\"boring\">                thread.join().unwrap();\n</span><span class=\"boring\">            }\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">    }\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Worker</span></span> {\n</span><span class=\"boring\">    id: <span class=\"hljs-built_in\">usize</span>,\n</span><span class=\"boring\">    thread: <span class=\"hljs-built_in\">Option</span>&lt;thread::JoinHandle&lt;()&gt;&gt;,\n</span><span class=\"boring\">}\n</span><span class=\"boring\">\n</span><span class=\"hljs-keyword\">impl</span> Worker {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(id: <span class=\"hljs-built_in\">usize</span>, receiver: Arc&lt;Mutex&lt;mpsc::Receiver&lt;Job&gt;&gt;&gt;) -&gt; Worker {\n        <span class=\"hljs-keyword\">let</span> thread = thread::spawn(<span class=\"hljs-keyword\">move</span> || <span class=\"hljs-keyword\">loop</span> {\n            <span class=\"hljs-keyword\">let</span> message = receiver.lock().unwrap().recv();\n\n            <span class=\"hljs-keyword\">match</span> message {\n                <span class=\"hljs-literal\">Ok</span>(job) =&gt; {\n                    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Worker {id} got a job; executing.\"</span>);\n\n                    job();\n                }\n                <span class=\"hljs-literal\">Err</span>(_) =&gt; {\n                    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Worker {id} disconnected; shutting down.\"</span>);\n                    <span class=\"hljs-keyword\">break</span>;\n                }\n            }\n        });\n\n        Worker {\n            id,\n            thread: <span class=\"hljs-literal\">Some</span>(thread),\n        }\n    }\n}</code></pre>\n<p><span class=\"caption\">Listing 20-24: Explicitly break out of the loop when\n<code class=\"hljs\">recv</code> returns an error</span></p>\n<p>To see this code in action, let‚Äôs modify <code class=\"hljs\">main</code> to accept only two requests\nbefore gracefully shutting down the server, as shown in Listing 20-25.</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-eye\" title=\"Show hidden lines\" aria-label=\"Show hidden lines\"></button></div><code class=\"language-rust ignore hljs hide-boring\"><span class=\"boring\"><span class=\"hljs-keyword\">use</span> hello::ThreadPool;\n</span><span class=\"boring\"><span class=\"hljs-keyword\">use</span> std::{\n</span><span class=\"boring\">    fs,\n</span><span class=\"boring\">    io::{prelude::*, BufReader},\n</span><span class=\"boring\">    net::{TcpListener, TcpStream},\n</span><span class=\"boring\">    thread,\n</span><span class=\"boring\">    time::Duration,\n</span><span class=\"boring\">};\n</span><span class=\"boring\">\n</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> listener = TcpListener::bind(<span class=\"hljs-string\">\"127.0.0.1:7878\"</span>).unwrap();\n    <span class=\"hljs-keyword\">let</span> pool = ThreadPool::new(<span class=\"hljs-number\">4</span>);\n\n    <span class=\"hljs-keyword\">for</span> stream <span class=\"hljs-keyword\">in</span> listener.incoming().take(<span class=\"hljs-number\">2</span>) {\n        <span class=\"hljs-keyword\">let</span> stream = stream.unwrap();\n\n        pool.execute(|| {\n            handle_connection(stream);\n        });\n    }\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Shutting down.\"</span>);\n}\n<span class=\"boring\">\n</span><span class=\"boring\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">handle_connection</span></span>(<span class=\"hljs-keyword\">mut</span> stream: TcpStream) {\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> buf_reader = BufReader::new(&amp;<span class=\"hljs-keyword\">mut</span> stream);\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> request_line = buf_reader.lines().next().unwrap().unwrap();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> (status_line, filename) = <span class=\"hljs-keyword\">match</span> &amp;request_line[..] {\n</span><span class=\"boring\">        <span class=\"hljs-string\">\"GET / HTTP/1.1\"</span> =&gt; (<span class=\"hljs-string\">\"HTTP/1.1 200 OK\"</span>, <span class=\"hljs-string\">\"hello.html\"</span>),\n</span><span class=\"boring\">        <span class=\"hljs-string\">\"GET /sleep HTTP/1.1\"</span> =&gt; {\n</span><span class=\"boring\">            thread::sleep(Duration::from_secs(<span class=\"hljs-number\">5</span>));\n</span><span class=\"boring\">            (<span class=\"hljs-string\">\"HTTP/1.1 200 OK\"</span>, <span class=\"hljs-string\">\"hello.html\"</span>)\n</span><span class=\"boring\">        }\n</span><span class=\"boring\">        _ =&gt; (<span class=\"hljs-string\">\"HTTP/1.1 404 NOT FOUND\"</span>, <span class=\"hljs-string\">\"404.html\"</span>),\n</span><span class=\"boring\">    };\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> contents = fs::read_to_string(filename).unwrap();\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> length = contents.len();\n</span><span class=\"boring\">\n</span><span class=\"boring\">    <span class=\"hljs-keyword\">let</span> response =\n</span><span class=\"boring\">        <span class=\"hljs-built_in\">format!</span>(<span class=\"hljs-string\">\"{status_line}\\r\\nContent-Length: {length}\\r\\n\\r\\n{contents}\"</span>);\n</span><span class=\"boring\">\n</span><span class=\"boring\">    stream.write_all(response.as_bytes()).unwrap();\n</span><span class=\"boring\">}</span></code></pre>\n<p><span class=\"caption\">Listing 20-25: Shut down the server after serving two\nrequests by exiting the loop</span></p>\n<p>You wouldn‚Äôt want a real-world web server to shut down after serving only two\nrequests. This code just demonstrates that the graceful shutdown and cleanup is\nin working order.</p>\n<p>The <code class=\"hljs\">take</code> method is defined in the <code class=\"hljs\">Iterator</code> trait and limits the iteration\nto the first two items at most. The <code class=\"hljs\">ThreadPool</code> will go out of scope at the\nend of <code class=\"hljs\">main</code>, and the <code class=\"hljs\">drop</code> implementation will run.</p>\n<p>Start the server with <code class=\"hljs\">cargo run</code>, and make three requests. The third request\nshould error, and in your terminal you should see output similar to this:</p>\n<!-- manual-regeneration\ncd listings/ch20-web-server/listing-20-25\ncargo run\ncurl http://127.0.0.1:7878\ncurl http://127.0.0.1:7878\ncurl http://127.0.0.1:7878\nthird request will error because server will have shut down\ncopy output below\nCan't automate because the output depends on making requests\n-->\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo run</span>\n   Compiling hello v0.1.0 (file:///projects/hello)\n    Finished dev [unoptimized + debuginfo] target(s) in 1.0s\n     Running `target/debug/hello`\nWorker 0 got a job; executing.\nShutting down.\nShutting down worker 0\nWorker 3 got a job; executing.\nWorker 1 disconnected; shutting down.\nWorker 2 disconnected; shutting down.\nWorker 3 disconnected; shutting down.\nWorker 0 disconnected; shutting down.\nShutting down worker 1\nShutting down worker 2\nShutting down worker 3\n</code></pre>\n<p>You might see a different ordering of workers and messages printed. We can see\nhow this code works from the messages: workers 0 and 3 got the first two\nrequests. The server stopped accepting connections after the second connection,\nand the <code class=\"hljs\">Drop</code> implementation on <code class=\"hljs\">ThreadPool</code> starts executing before worker 3\neven starts its job. Dropping the <code class=\"hljs\">sender</code> disconnects all the workers and\ntells them to shut down. The workers each print a message when they disconnect,\nand then the thread pool calls <code class=\"hljs\">join</code> to wait for each worker thread to finish.</p>\n<p>Notice one interesting aspect of this particular execution: the <code class=\"hljs\">ThreadPool</code>\ndropped the <code class=\"hljs\">sender</code>, and before any worker received an error, we tried to join\nworker 0. Worker 0 had not yet gotten an error from <code class=\"hljs\">recv</code>, so the main thread\nblocked waiting for worker 0 to finish. In the meantime, worker 3 received a\njob and then all threads received an error. When worker 0 finished, the main\nthread waited for the rest of the workers to finish. At that point, they had\nall exited their loops and stopped.</p>\n<p>Congrats! We‚Äôve now completed our project; we have a basic web server that uses\na thread pool to respond asynchronously. We‚Äôre able to perform a graceful\nshutdown of the server, which cleans up all the threads in the pool.</p>\n<p>Here‚Äôs the full code for reference:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust ignore hljs\"><span class=\"hljs-keyword\">use</span> hello::ThreadPool;\n<span class=\"hljs-keyword\">use</span> std::{\n    fs,\n    io::{prelude::*, BufReader},\n    net::{TcpListener, TcpStream},\n    thread,\n    time::Duration,\n};\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> listener = TcpListener::bind(<span class=\"hljs-string\">\"127.0.0.1:7878\"</span>).unwrap();\n    <span class=\"hljs-keyword\">let</span> pool = ThreadPool::new(<span class=\"hljs-number\">4</span>);\n\n    <span class=\"hljs-keyword\">for</span> stream <span class=\"hljs-keyword\">in</span> listener.incoming().take(<span class=\"hljs-number\">2</span>) {\n        <span class=\"hljs-keyword\">let</span> stream = stream.unwrap();\n\n        pool.execute(|| {\n            handle_connection(stream);\n        });\n    }\n\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Shutting down.\"</span>);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">handle_connection</span></span>(<span class=\"hljs-keyword\">mut</span> stream: TcpStream) {\n    <span class=\"hljs-keyword\">let</span> buf_reader = BufReader::new(&amp;<span class=\"hljs-keyword\">mut</span> stream);\n    <span class=\"hljs-keyword\">let</span> request_line = buf_reader.lines().next().unwrap().unwrap();\n\n    <span class=\"hljs-keyword\">let</span> (status_line, filename) = <span class=\"hljs-keyword\">match</span> &amp;request_line[..] {\n        <span class=\"hljs-string\">\"GET / HTTP/1.1\"</span> =&gt; (<span class=\"hljs-string\">\"HTTP/1.1 200 OK\"</span>, <span class=\"hljs-string\">\"hello.html\"</span>),\n        <span class=\"hljs-string\">\"GET /sleep HTTP/1.1\"</span> =&gt; {\n            thread::sleep(Duration::from_secs(<span class=\"hljs-number\">5</span>));\n            (<span class=\"hljs-string\">\"HTTP/1.1 200 OK\"</span>, <span class=\"hljs-string\">\"hello.html\"</span>)\n        }\n        _ =&gt; (<span class=\"hljs-string\">\"HTTP/1.1 404 NOT FOUND\"</span>, <span class=\"hljs-string\">\"404.html\"</span>),\n    };\n\n    <span class=\"hljs-keyword\">let</span> contents = fs::read_to_string(filename).unwrap();\n    <span class=\"hljs-keyword\">let</span> length = contents.len();\n\n    <span class=\"hljs-keyword\">let</span> response =\n        <span class=\"hljs-built_in\">format!</span>(<span class=\"hljs-string\">\"{status_line}\\r\\nContent-Length: {length}\\r\\n\\r\\n{contents}\"</span>);\n\n    stream.write_all(response.as_bytes()).unwrap();\n}</code></pre>\n<p><span class=\"filename\">Filename: src/lib.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-rust noplayground hljs\"><span class=\"hljs-keyword\">use</span> std::{\n    sync::{mpsc, Arc, Mutex},\n    thread,\n};\n\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">ThreadPool</span></span> {\n    workers: <span class=\"hljs-built_in\">Vec</span>&lt;Worker&gt;,\n    sender: <span class=\"hljs-built_in\">Option</span>&lt;mpsc::Sender&lt;Job&gt;&gt;,\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">Job</span></span> = <span class=\"hljs-built_in\">Box</span>&lt;<span class=\"hljs-keyword\">dyn</span> <span class=\"hljs-built_in\">FnOnce</span>() + <span class=\"hljs-built_in\">Send</span> + <span class=\"hljs-symbol\">'static</span>&gt;;\n\n<span class=\"hljs-keyword\">impl</span> ThreadPool {\n    <span class=\"hljs-comment\">/// Create a new ThreadPool.</span>\n    <span class=\"hljs-comment\">///</span>\n    <span class=\"hljs-comment\">/// The size is the number of threads in the pool.</span>\n    <span class=\"hljs-comment\">///</span>\n    <span class=\"hljs-comment\">/// # Panics</span>\n    <span class=\"hljs-comment\">///</span>\n    <span class=\"hljs-comment\">/// The `new` function will panic if the size is zero.</span>\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(size: <span class=\"hljs-built_in\">usize</span>) -&gt; ThreadPool {\n        <span class=\"hljs-built_in\">assert!</span>(size &gt; <span class=\"hljs-number\">0</span>);\n\n        <span class=\"hljs-keyword\">let</span> (sender, receiver) = mpsc::channel();\n\n        <span class=\"hljs-keyword\">let</span> receiver = Arc::new(Mutex::new(receiver));\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut</span> workers = <span class=\"hljs-built_in\">Vec</span>::with_capacity(size);\n\n        <span class=\"hljs-keyword\">for</span> id <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..size {\n            workers.push(Worker::new(id, Arc::clone(&amp;receiver)));\n        }\n\n        ThreadPool {\n            workers,\n            sender: <span class=\"hljs-literal\">Some</span>(sender),\n        }\n    }\n\n    <span class=\"hljs-keyword\">pub</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">execute</span></span>&lt;F&gt;(&amp;<span class=\"hljs-keyword\">self</span>, f: F)\n    <span class=\"hljs-keyword\">where</span>\n        F: <span class=\"hljs-built_in\">FnOnce</span>() + <span class=\"hljs-built_in\">Send</span> + <span class=\"hljs-symbol\">'static</span>,\n    {\n        <span class=\"hljs-keyword\">let</span> job = <span class=\"hljs-built_in\">Box</span>::new(f);\n\n        <span class=\"hljs-keyword\">self</span>.sender.as_ref().unwrap().send(job).unwrap();\n    }\n}\n\n<span class=\"hljs-keyword\">impl</span> <span class=\"hljs-built_in\">Drop</span> <span class=\"hljs-keyword\">for</span> ThreadPool {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">drop</span></span>(&amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>) {\n        <span class=\"hljs-built_in\">drop</span>(<span class=\"hljs-keyword\">self</span>.sender.take());\n\n        <span class=\"hljs-keyword\">for</span> worker <span class=\"hljs-keyword\">in</span> &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-keyword\">self</span>.workers {\n            <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Shutting down worker {}\"</span>, worker.id);\n\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> <span class=\"hljs-literal\">Some</span>(thread) = worker.thread.take() {\n                thread.join().unwrap();\n            }\n        }\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Worker</span></span> {\n    id: <span class=\"hljs-built_in\">usize</span>,\n    thread: <span class=\"hljs-built_in\">Option</span>&lt;thread::JoinHandle&lt;()&gt;&gt;,\n}\n\n<span class=\"hljs-keyword\">impl</span> Worker {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">new</span></span>(id: <span class=\"hljs-built_in\">usize</span>, receiver: Arc&lt;Mutex&lt;mpsc::Receiver&lt;Job&gt;&gt;&gt;) -&gt; Worker {\n        <span class=\"hljs-keyword\">let</span> thread = thread::spawn(<span class=\"hljs-keyword\">move</span> || <span class=\"hljs-keyword\">loop</span> {\n            <span class=\"hljs-keyword\">let</span> message = receiver.lock().unwrap().recv();\n\n            <span class=\"hljs-keyword\">match</span> message {\n                <span class=\"hljs-literal\">Ok</span>(job) =&gt; {\n                    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Worker {id} got a job; executing.\"</span>);\n\n                    job();\n                }\n                <span class=\"hljs-literal\">Err</span>(_) =&gt; {\n                    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"Worker {id} disconnected; shutting down.\"</span>);\n                    <span class=\"hljs-keyword\">break</span>;\n                }\n            }\n        });\n\n        Worker {\n            id,\n            thread: <span class=\"hljs-literal\">Some</span>(thread),\n        }\n    }\n}</code></pre>\n<p>We could do more here! If you want to continue enhancing this project, here are\nsome ideas:</p>\n<ul>\n<li>Add more documentation to <code class=\"hljs\">ThreadPool</code> and its public methods.</li>\n<li>Add tests of the library‚Äôs functionality.</li>\n<li>Change calls to <code class=\"hljs\">unwrap</code> to more robust error handling.</li>\n<li>Use <code class=\"hljs\">ThreadPool</code> to perform some task other than serving web requests.</li>\n<li>Find a thread pool crate on <a href=\"https://crates.io/\">crates.io</a> and implement a\nsimilar web server using the crate instead. Then compare its API and\nrobustness to the thread pool we implemented.</li>\n</ul>\n<h2 id=\"summary-19\"><a class=\"header\" href=\"#summary-19\">Summary</a></h2>\n<p>Well done! You‚Äôve made it to the end of the book! We want to thank you for\njoining us on this tour of Rust. You‚Äôre now ready to implement your own Rust\nprojects and help with other peoples‚Äô projects. Keep in mind that there is a\nwelcoming community of other Rustaceans who would love to help you with any\nchallenges you encounter on your Rust journey.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h1 id=\"appendix\"><a class=\"header\" href=\"#appendix\">Appendix</a></h1>\n<p>The following sections contain reference material you may find useful in your\nRust journey.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"appendix-a-keywords\"><a class=\"header\" href=\"#appendix-a-keywords\">Appendix A: Keywords</a></h2>\n<p>The following list contains keywords that are reserved for current or future\nuse by the Rust language. As such, they cannot be used as identifiers (except\nas raw identifiers as we‚Äôll discuss in the ‚Äú<a href=\"appendix-01-keywords.html#raw-identifiers\">Raw\nIdentifiers</a><!-- ignore -->‚Äù section). Identifiers are names\nof functions, variables, parameters, struct fields, modules, crates, constants,\nmacros, static values, attributes, types, traits, or lifetimes.</p>\n<h3 id=\"keywords-currently-in-use\"><a class=\"header\" href=\"#keywords-currently-in-use\">Keywords Currently in Use</a></h3>\n<p>The following is a list of keywords currently in use, with their functionality\ndescribed.</p>\n<ul>\n<li><code class=\"hljs\">as</code> - perform primitive casting, disambiguate the specific trait containing\nan item, or rename items in <code class=\"hljs\">use</code> statements</li>\n<li><code class=\"hljs\">async</code> -  return a <code class=\"hljs\">Future</code> instead of blocking the current thread</li>\n<li><code class=\"hljs\">await</code> - suspend execution until the result of a <code class=\"hljs\">Future</code> is ready</li>\n<li><code class=\"hljs\">break</code> - exit a loop immediately</li>\n<li><code class=\"hljs\">const</code> - define constant items or constant raw pointers</li>\n<li><code class=\"hljs\">continue</code> - continue to the next loop iteration</li>\n<li><code class=\"hljs\">crate</code> - in a module path, refers to the crate root</li>\n<li><code class=\"hljs\">dyn</code> - dynamic dispatch to a trait object</li>\n<li><code class=\"hljs\">else</code> - fallback for <code class=\"hljs\">if</code> and <code class=\"hljs\">if let</code> control flow constructs</li>\n<li><code class=\"hljs\">enum</code> - define an enumeration</li>\n<li><code class=\"hljs\">extern</code> - link an external function or variable</li>\n<li><code class=\"hljs\">false</code> - Boolean false literal</li>\n<li><code class=\"hljs\">fn</code> - define a function or the function pointer type</li>\n<li><code class=\"hljs\">for</code> - loop over items from an iterator, implement a trait, or specify a\nhigher-ranked lifetime</li>\n<li><code class=\"hljs\">if</code> - branch based on the result of a conditional expression</li>\n<li><code class=\"hljs\">impl</code> - implement inherent or trait functionality</li>\n<li><code class=\"hljs\">in</code> - part of <code class=\"hljs\">for</code> loop syntax</li>\n<li><code class=\"hljs\">let</code> - bind a variable</li>\n<li><code class=\"hljs\">loop</code> - loop unconditionally</li>\n<li><code class=\"hljs\">match</code> - match a value to patterns</li>\n<li><code class=\"hljs\">mod</code> - define a module</li>\n<li><code class=\"hljs\">move</code> - make a closure take ownership of all its captures</li>\n<li><code class=\"hljs\">mut</code> - denote mutability in references, raw pointers, or pattern bindings</li>\n<li><code class=\"hljs\">pub</code> - denote public visibility in struct fields, <code class=\"hljs\">impl</code> blocks, or modules</li>\n<li><code class=\"hljs\">ref</code> - bind by reference</li>\n<li><code class=\"hljs\">return</code> - return from function</li>\n<li><code class=\"hljs\">Self</code> - a type alias for the type we are defining or implementing</li>\n<li><code class=\"hljs\">self</code> - method subject or current module</li>\n<li><code class=\"hljs\">static</code> - global variable or lifetime lasting the entire program execution</li>\n<li><code class=\"hljs\">struct</code> - define a structure</li>\n<li><code class=\"hljs\">super</code> - parent module of the current module</li>\n<li><code class=\"hljs\">trait</code> - define a trait</li>\n<li><code class=\"hljs\">true</code> - Boolean true literal</li>\n<li><code class=\"hljs\">type</code> - define a type alias or associated type</li>\n<li><code class=\"hljs\">union</code> - define a <a href=\"../reference/items/unions.html\">union</a><!-- ignore -->; is only a keyword when used\nin a union declaration</li>\n<li><code class=\"hljs\">unsafe</code> - denote unsafe code, functions, traits, or implementations</li>\n<li><code class=\"hljs\">use</code> - bring symbols into scope</li>\n<li><code class=\"hljs\">where</code> - denote clauses that constrain a type</li>\n<li><code class=\"hljs\">while</code> - loop conditionally based on the result of an expression</li>\n</ul>\n<h3 id=\"keywords-reserved-for-future-use\"><a class=\"header\" href=\"#keywords-reserved-for-future-use\">Keywords Reserved for Future Use</a></h3>\n<p>The following keywords do not yet have any functionality but are reserved by\nRust for potential future use.</p>\n<ul>\n<li><code class=\"hljs\">abstract</code></li>\n<li><code class=\"hljs\">become</code></li>\n<li><code class=\"hljs\">box</code></li>\n<li><code class=\"hljs\">do</code></li>\n<li><code class=\"hljs\">final</code></li>\n<li><code class=\"hljs\">macro</code></li>\n<li><code class=\"hljs\">override</code></li>\n<li><code class=\"hljs\">priv</code></li>\n<li><code class=\"hljs\">try</code></li>\n<li><code class=\"hljs\">typeof</code></li>\n<li><code class=\"hljs\">unsized</code></li>\n<li><code class=\"hljs\">virtual</code></li>\n<li><code class=\"hljs\">yield</code></li>\n</ul>\n<h3 id=\"raw-identifiers\"><a class=\"header\" href=\"#raw-identifiers\">Raw Identifiers</a></h3>\n<p><em>Raw identifiers</em> are the syntax that lets you use keywords where they wouldn‚Äôt\nnormally be allowed. You use a raw identifier by prefixing a keyword with <code class=\"hljs\">r#</code>.</p>\n<p>For example, <code class=\"hljs\">match</code> is a keyword. If you try to compile the following function\nthat uses <code class=\"hljs\">match</code> as its name:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><a href=\"ch00-00-introduction.html#ferris\" target=\"_blank\"><img src=\"img/ferris/does_not_compile.svg\" title=\"This code does not compile!\" class=\"ferris ferris-small\"></a></div><code class=\"language-rust ignore does_not_compile hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">match</span></span>(needle: &amp;<span class=\"hljs-built_in\">str</span>, haystack: &amp;<span class=\"hljs-built_in\">str</span>) -&gt; <span class=\"hljs-built_in\">bool</span> {\n    haystack.contains(needle)\n}</code></pre>\n<p>you‚Äôll get this error:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">error: expected identifier, found keyword `match`\n --&gt; src/main.rs:4:4\n  |\n4 | fn match(needle: &amp;str, haystack: &amp;str) -&gt; bool {\n  |    ^^^^^ expected identifier, found keyword\n</code></pre>\n<p>The error shows that you can‚Äôt use the keyword <code class=\"hljs\">match</code> as the function\nidentifier. To use <code class=\"hljs\">match</code> as a function name, you need to use the raw\nidentifier syntax, like this:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">r</span>#<span class=\"hljs-title\">match</span></span>(needle: &amp;<span class=\"hljs-built_in\">str</span>, haystack: &amp;<span class=\"hljs-built_in\">str</span>) -&gt; <span class=\"hljs-built_in\">bool</span> {\n    haystack.contains(needle)\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-built_in\">assert!</span>(r#<span class=\"hljs-keyword\">match</span>(<span class=\"hljs-string\">\"foo\"</span>, <span class=\"hljs-string\">\"foobar\"</span>));\n}</code></pre></pre>\n<p>This code will compile without any errors. Note the <code class=\"hljs\">r#</code> prefix on the function\nname in its definition as well as where the function is called in <code class=\"hljs\">main</code>.</p>\n<p>Raw identifiers allow you to use any word you choose as an identifier, even if\nthat word happens to be a reserved keyword. This gives us more freedom to\nchoose identifier names, as well as lets us integrate with programs written in\na language where these words aren‚Äôt keywords. In addition, raw identifiers\nallow you to use libraries written in a different Rust edition than your crate\nuses. For example, <code class=\"hljs\">try</code> isn‚Äôt a keyword in the 2015 edition but is in the 2018\nedition. If you depend on a library that‚Äôs written using the 2015 edition and\nhas a <code class=\"hljs\">try</code> function, you‚Äôll need to use the raw identifier syntax, <code class=\"hljs\">r#try</code> in\nthis case, to call that function from your 2018 edition code. See <a href=\"appendix-05-editions.html\">Appendix\nE</a><!-- ignore --> for more information on editions.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"appendix-b-operators-and-symbols\"><a class=\"header\" href=\"#appendix-b-operators-and-symbols\">Appendix B: Operators and Symbols</a></h2>\n<p>This appendix contains a glossary of Rust‚Äôs syntax, including operators and\nother symbols that appear by themselves or in the context of paths, generics,\ntrait bounds, macros, attributes, comments, tuples, and brackets.</p>\n<h3 id=\"operators\"><a class=\"header\" href=\"#operators\">Operators</a></h3>\n<p>Table B-1 contains the operators in Rust, an example of how the operator would\nappear in context, a short explanation, and whether that operator is\noverloadable. If an operator is overloadable, the relevant trait to use to\noverload that operator is listed.</p>\n<p><span class=\"caption\">Table B-1: Operators</span></p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Operator</th><th>Example</th><th>Explanation</th><th>Overloadable?</th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">!</code></td><td><code class=\"hljs\">ident!(...)</code>, <code class=\"hljs\">ident!{...}</code>, <code class=\"hljs\">ident![...]</code></td><td>Macro expansion</td><td></td></tr>\n<tr><td><code class=\"hljs\">!</code></td><td><code class=\"hljs\">!expr</code></td><td>Bitwise or logical complement</td><td><code class=\"hljs\">Not</code></td></tr>\n<tr><td><code class=\"hljs\">!=</code></td><td><code class=\"hljs\">expr != expr</code></td><td>Nonequality comparison</td><td><code class=\"hljs\">PartialEq</code></td></tr>\n<tr><td><code class=\"hljs\">%</code></td><td><code class=\"hljs\">expr % expr</code></td><td>Arithmetic remainder</td><td><code class=\"hljs\">Rem</code></td></tr>\n<tr><td><code class=\"hljs\">%=</code></td><td><code class=\"hljs\">var %= expr</code></td><td>Arithmetic remainder and assignment</td><td><code class=\"hljs\">RemAssign</code></td></tr>\n<tr><td><code class=\"hljs\">&amp;</code></td><td><code class=\"hljs\">&amp;expr</code>, <code class=\"hljs\">&amp;mut expr</code></td><td>Borrow</td><td></td></tr>\n<tr><td><code class=\"hljs\">&amp;</code></td><td><code class=\"hljs\">&amp;type</code>, <code class=\"hljs\">&amp;mut type</code>, <code class=\"hljs\">&amp;'a type</code>, <code class=\"hljs\">&amp;'a mut type</code></td><td>Borrowed pointer type</td><td></td></tr>\n<tr><td><code class=\"hljs\">&amp;</code></td><td><code class=\"hljs\">expr &amp; expr</code></td><td>Bitwise AND</td><td><code class=\"hljs\">BitAnd</code></td></tr>\n<tr><td><code class=\"hljs\">&amp;=</code></td><td><code class=\"hljs\">var &amp;= expr</code></td><td>Bitwise AND and assignment</td><td><code class=\"hljs\">BitAndAssign</code></td></tr>\n<tr><td><code class=\"hljs\">&amp;&amp;</code></td><td><code class=\"hljs\">expr &amp;&amp; expr</code></td><td>Short-circuiting logical AND</td><td></td></tr>\n<tr><td><code class=\"hljs\">*</code></td><td><code class=\"hljs\">expr * expr</code></td><td>Arithmetic multiplication</td><td><code class=\"hljs\">Mul</code></td></tr>\n<tr><td><code class=\"hljs\">*=</code></td><td><code class=\"hljs\">var *= expr</code></td><td>Arithmetic multiplication and assignment</td><td><code class=\"hljs\">MulAssign</code></td></tr>\n<tr><td><code class=\"hljs\">*</code></td><td><code class=\"hljs\">*expr</code></td><td>Dereference</td><td><code class=\"hljs\">Deref</code></td></tr>\n<tr><td><code class=\"hljs\">*</code></td><td><code class=\"hljs\">*const type</code>, <code class=\"hljs\">*mut type</code></td><td>Raw pointer</td><td></td></tr>\n<tr><td><code class=\"hljs\">+</code></td><td><code class=\"hljs\">trait + trait</code>, <code class=\"hljs\">'a + trait</code></td><td>Compound type constraint</td><td></td></tr>\n<tr><td><code class=\"hljs\">+</code></td><td><code class=\"hljs\">expr + expr</code></td><td>Arithmetic addition</td><td><code class=\"hljs\">Add</code></td></tr>\n<tr><td><code class=\"hljs\">+=</code></td><td><code class=\"hljs\">var += expr</code></td><td>Arithmetic addition and assignment</td><td><code class=\"hljs\">AddAssign</code></td></tr>\n<tr><td><code class=\"hljs\">,</code></td><td><code class=\"hljs\">expr, expr</code></td><td>Argument and element separator</td><td></td></tr>\n<tr><td><code class=\"hljs\">-</code></td><td><code class=\"hljs\">- expr</code></td><td>Arithmetic negation</td><td><code class=\"hljs\">Neg</code></td></tr>\n<tr><td><code class=\"hljs\">-</code></td><td><code class=\"hljs\">expr - expr</code></td><td>Arithmetic subtraction</td><td><code class=\"hljs\">Sub</code></td></tr>\n<tr><td><code class=\"hljs\">-=</code></td><td><code class=\"hljs\">var -= expr</code></td><td>Arithmetic subtraction and assignment</td><td><code class=\"hljs\">SubAssign</code></td></tr>\n<tr><td><code class=\"hljs\">-&gt;</code></td><td><code class=\"hljs\">fn(...) -&gt; type</code>, <code class=\"hljs\">|‚Ä¶| -&gt; type</code></td><td>Function and closure return type</td><td></td></tr>\n<tr><td><code class=\"hljs\">.</code></td><td><code class=\"hljs\">expr.ident</code></td><td>Member access</td><td></td></tr>\n<tr><td><code class=\"hljs\">..</code></td><td><code class=\"hljs\">..</code>, <code class=\"hljs\">expr..</code>, <code class=\"hljs\">..expr</code>, <code class=\"hljs\">expr..expr</code></td><td>Right-exclusive range literal</td><td><code class=\"hljs\">PartialOrd</code></td></tr>\n<tr><td><code class=\"hljs\">..=</code></td><td><code class=\"hljs\">..=expr</code>, <code class=\"hljs\">expr..=expr</code></td><td>Right-inclusive range literal</td><td><code class=\"hljs\">PartialOrd</code></td></tr>\n<tr><td><code class=\"hljs\">..</code></td><td><code class=\"hljs\">..expr</code></td><td>Struct literal update syntax</td><td></td></tr>\n<tr><td><code class=\"hljs\">..</code></td><td><code class=\"hljs\">variant(x, ..)</code>, <code class=\"hljs\">struct_type { x, .. }</code></td><td>‚ÄúAnd the rest‚Äù pattern binding</td><td></td></tr>\n<tr><td><code class=\"hljs\">...</code></td><td><code class=\"hljs\">expr...expr</code></td><td>(Deprecated, use <code class=\"hljs\">..=</code> instead) In a pattern: inclusive range pattern</td><td></td></tr>\n<tr><td><code class=\"hljs\">/</code></td><td><code class=\"hljs\">expr / expr</code></td><td>Arithmetic division</td><td><code class=\"hljs\">Div</code></td></tr>\n<tr><td><code class=\"hljs\">/=</code></td><td><code class=\"hljs\">var /= expr</code></td><td>Arithmetic division and assignment</td><td><code class=\"hljs\">DivAssign</code></td></tr>\n<tr><td><code class=\"hljs\">:</code></td><td><code class=\"hljs\">pat: type</code>, <code class=\"hljs\">ident: type</code></td><td>Constraints</td><td></td></tr>\n<tr><td><code class=\"hljs\">:</code></td><td><code class=\"hljs\">ident: expr</code></td><td>Struct field initializer</td><td></td></tr>\n<tr><td><code class=\"hljs\">:</code></td><td><code class=\"hljs\">'a: loop {...}</code></td><td>Loop label</td><td></td></tr>\n<tr><td><code class=\"hljs\">;</code></td><td><code class=\"hljs\">expr;</code></td><td>Statement and item terminator</td><td></td></tr>\n<tr><td><code class=\"hljs\">;</code></td><td><code class=\"hljs\">[...; len]</code></td><td>Part of fixed-size array syntax</td><td></td></tr>\n<tr><td><code class=\"hljs\">&lt;&lt;</code></td><td><code class=\"hljs\">expr &lt;&lt; expr</code></td><td>Left-shift</td><td><code class=\"hljs\">Shl</code></td></tr>\n<tr><td><code class=\"hljs\">&lt;&lt;=</code></td><td><code class=\"hljs\">var &lt;&lt;= expr</code></td><td>Left-shift and assignment</td><td><code class=\"hljs\">ShlAssign</code></td></tr>\n<tr><td><code class=\"hljs\">&lt;</code></td><td><code class=\"hljs\">expr &lt; expr</code></td><td>Less than comparison</td><td><code class=\"hljs\">PartialOrd</code></td></tr>\n<tr><td><code class=\"hljs\">&lt;=</code></td><td><code class=\"hljs\">expr &lt;= expr</code></td><td>Less than or equal to comparison</td><td><code class=\"hljs\">PartialOrd</code></td></tr>\n<tr><td><code class=\"hljs\">=</code></td><td><code class=\"hljs\">var = expr</code>, <code class=\"hljs\">ident = type</code></td><td>Assignment/equivalence</td><td></td></tr>\n<tr><td><code class=\"hljs\">==</code></td><td><code class=\"hljs\">expr == expr</code></td><td>Equality comparison</td><td><code class=\"hljs\">PartialEq</code></td></tr>\n<tr><td><code class=\"hljs\">=&gt;</code></td><td><code class=\"hljs\">pat =&gt; expr</code></td><td>Part of match arm syntax</td><td></td></tr>\n<tr><td><code class=\"hljs\">&gt;</code></td><td><code class=\"hljs\">expr &gt; expr</code></td><td>Greater than comparison</td><td><code class=\"hljs\">PartialOrd</code></td></tr>\n<tr><td><code class=\"hljs\">&gt;=</code></td><td><code class=\"hljs\">expr &gt;= expr</code></td><td>Greater than or equal to comparison</td><td><code class=\"hljs\">PartialOrd</code></td></tr>\n<tr><td><code class=\"hljs\">&gt;&gt;</code></td><td><code class=\"hljs\">expr &gt;&gt; expr</code></td><td>Right-shift</td><td><code class=\"hljs\">Shr</code></td></tr>\n<tr><td><code class=\"hljs\">&gt;&gt;=</code></td><td><code class=\"hljs\">var &gt;&gt;= expr</code></td><td>Right-shift and assignment</td><td><code class=\"hljs\">ShrAssign</code></td></tr>\n<tr><td><code class=\"hljs\">@</code></td><td><code class=\"hljs\">ident @ pat</code></td><td>Pattern binding</td><td></td></tr>\n<tr><td><code class=\"hljs\">^</code></td><td><code class=\"hljs\">expr ^ expr</code></td><td>Bitwise exclusive OR</td><td><code class=\"hljs\">BitXor</code></td></tr>\n<tr><td><code class=\"hljs\">^=</code></td><td><code class=\"hljs\">var ^= expr</code></td><td>Bitwise exclusive OR and assignment</td><td><code class=\"hljs\">BitXorAssign</code></td></tr>\n<tr><td><code class=\"hljs\">|</code></td><td><code class=\"hljs\">pat | pat</code></td><td>Pattern alternatives</td><td></td></tr>\n<tr><td><code class=\"hljs\">|</code></td><td><code class=\"hljs\">expr | expr</code></td><td>Bitwise OR</td><td><code class=\"hljs\">BitOr</code></td></tr>\n<tr><td><code class=\"hljs\">|=</code></td><td><code class=\"hljs\">var |= expr</code></td><td>Bitwise OR and assignment</td><td><code class=\"hljs\">BitOrAssign</code></td></tr>\n<tr><td><code class=\"hljs\">||</code></td><td><code class=\"hljs\">expr || expr</code></td><td>Short-circuiting logical OR</td><td></td></tr>\n<tr><td><code class=\"hljs\">?</code></td><td><code class=\"hljs\">expr?</code></td><td>Error propagation</td><td></td></tr>\n</tbody></table>\n</div>\n<h3 id=\"non-operator-symbols\"><a class=\"header\" href=\"#non-operator-symbols\">Non-operator Symbols</a></h3>\n<p>The following list contains all symbols that don‚Äôt function as operators; that\nis, they don‚Äôt behave like a function or method call.</p>\n<p>Table B-2 shows symbols that appear on their own and are valid in a variety of\nlocations.</p>\n<p><span class=\"caption\">Table B-2: Stand-Alone Syntax</span></p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Symbol</th><th>Explanation</th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">'ident</code></td><td>Named lifetime or loop label</td></tr>\n<tr><td><code class=\"hljs\">...u8</code>, <code class=\"hljs\">...i32</code>, <code class=\"hljs\">...f64</code>, <code class=\"hljs\">...usize</code>, etc.</td><td>Numeric literal of specific type</td></tr>\n<tr><td><code class=\"hljs\">\"...\"</code></td><td>String literal</td></tr>\n<tr><td><code class=\"hljs\">r\"...\"</code>, <code class=\"hljs\">r#\"...\"#</code>, <code class=\"hljs\">r##\"...\"##</code>, etc.</td><td>Raw string literal, escape characters not processed</td></tr>\n<tr><td><code class=\"hljs\">b\"...\"</code></td><td>Byte string literal; constructs an array of bytes instead of a string</td></tr>\n<tr><td><code class=\"hljs\">br\"...\"</code>, <code class=\"hljs\">br#\"...\"#</code>, <code class=\"hljs\">br##\"...\"##</code>, etc.</td><td>Raw byte string literal, combination of raw and byte string literal</td></tr>\n<tr><td><code class=\"hljs\">'...'</code></td><td>Character literal</td></tr>\n<tr><td><code class=\"hljs\">b'...'</code></td><td>ASCII byte literal</td></tr>\n<tr><td><code class=\"hljs\">|‚Ä¶| expr</code></td><td>Closure</td></tr>\n<tr><td><code class=\"hljs\">!</code></td><td>Always empty bottom type for diverging functions</td></tr>\n<tr><td><code class=\"hljs\">_</code></td><td>‚ÄúIgnored‚Äù pattern binding; also used to make integer literals readable</td></tr>\n</tbody></table>\n</div>\n<p>Table B-3 shows symbols that appear in the context of a path through the module\nhierarchy to an item.</p>\n<p><span class=\"caption\">Table B-3: Path-Related Syntax</span></p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Symbol</th><th>Explanation</th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">ident::ident</code></td><td>Namespace path</td></tr>\n<tr><td><code class=\"hljs\">::path</code></td><td>Path relative to the crate root (i.e., an explicitly absolute path)</td></tr>\n<tr><td><code class=\"hljs\">self::path</code></td><td>Path relative to the current module (i.e., an explicitly relative path).</td></tr>\n<tr><td><code class=\"hljs\">super::path</code></td><td>Path relative to the parent of the current module</td></tr>\n<tr><td><code class=\"hljs\">type::ident</code>, <code class=\"hljs\">&lt;type as trait&gt;::ident</code></td><td>Associated constants, functions, and types</td></tr>\n<tr><td><code class=\"hljs\">&lt;type&gt;::...</code></td><td>Associated item for a type that cannot be directly named (e.g., <code class=\"hljs\">&lt;&amp;T&gt;::...</code>, <code class=\"hljs\">&lt;[T]&gt;::...</code>, etc.)</td></tr>\n<tr><td><code class=\"hljs\">trait::method(...)</code></td><td>Disambiguating a method call by naming the trait that defines it</td></tr>\n<tr><td><code class=\"hljs\">type::method(...)</code></td><td>Disambiguating a method call by naming the type for which it‚Äôs defined</td></tr>\n<tr><td><code class=\"hljs\">&lt;type as trait&gt;::method(...)</code></td><td>Disambiguating a method call by naming the trait and type</td></tr>\n</tbody></table>\n</div>\n<p>Table B-4 shows symbols that appear in the context of using generic type\nparameters.</p>\n<p><span class=\"caption\">Table B-4: Generics</span></p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Symbol</th><th>Explanation</th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">path&lt;...&gt;</code></td><td>Specifies parameters to generic type in a type (e.g., <code class=\"hljs\">Vec&lt;u8&gt;</code>)</td></tr>\n<tr><td><code class=\"hljs\">path::&lt;...&gt;</code>, <code class=\"hljs\">method::&lt;...&gt;</code></td><td>Specifies parameters to generic type, function, or method in an expression; often referred to as turbofish (e.g., <code class=\"hljs\">\"42\".parse::&lt;i32&gt;()</code>)</td></tr>\n<tr><td><code class=\"hljs\">fn ident&lt;...&gt; ...</code></td><td>Define generic function</td></tr>\n<tr><td><code class=\"hljs\">struct ident&lt;...&gt; ...</code></td><td>Define generic structure</td></tr>\n<tr><td><code class=\"hljs\">enum ident&lt;...&gt; ...</code></td><td>Define generic enumeration</td></tr>\n<tr><td><code class=\"hljs\">impl&lt;...&gt; ...</code></td><td>Define generic implementation</td></tr>\n<tr><td><code class=\"hljs\">for&lt;...&gt; type</code></td><td>Higher-ranked lifetime bounds</td></tr>\n<tr><td><code class=\"hljs\">type&lt;ident=type&gt;</code></td><td>A generic type where one or more associated types have specific assignments (e.g., <code class=\"hljs\">Iterator&lt;Item=T&gt;</code>)</td></tr>\n</tbody></table>\n</div>\n<p>Table B-5 shows symbols that appear in the context of constraining generic type\nparameters with trait bounds.</p>\n<p><span class=\"caption\">Table B-5: Trait Bound Constraints</span></p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Symbol</th><th>Explanation</th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">T: U</code></td><td>Generic parameter <code class=\"hljs\">T</code> constrained to types that implement <code class=\"hljs\">U</code></td></tr>\n<tr><td><code class=\"hljs\">T: 'a</code></td><td>Generic type <code class=\"hljs\">T</code> must outlive lifetime <code class=\"hljs\">'a</code> (meaning the type cannot transitively contain any references with lifetimes shorter than <code class=\"hljs\">'a</code>)</td></tr>\n<tr><td><code class=\"hljs\">T: 'static</code></td><td>Generic type <code class=\"hljs\">T</code> contains no borrowed references other than <code class=\"hljs\">'static</code> ones</td></tr>\n<tr><td><code class=\"hljs\">'b: 'a</code></td><td>Generic lifetime <code class=\"hljs\">'b</code> must outlive lifetime <code class=\"hljs\">'a</code></td></tr>\n<tr><td><code class=\"hljs\">T: ?Sized</code></td><td>Allow generic type parameter to be a dynamically sized type</td></tr>\n<tr><td><code class=\"hljs\">'a + trait</code>, <code class=\"hljs\">trait + trait</code></td><td>Compound type constraint</td></tr>\n</tbody></table>\n</div>\n<p>Table B-6 shows symbols that appear in the context of calling or defining\nmacros and specifying attributes on an item.</p>\n<p><span class=\"caption\">Table B-6: Macros and Attributes</span></p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Symbol</th><th>Explanation</th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">#[meta]</code></td><td>Outer attribute</td></tr>\n<tr><td><code class=\"hljs\">#![meta]</code></td><td>Inner attribute</td></tr>\n<tr><td><code class=\"hljs\">$ident</code></td><td>Macro substitution</td></tr>\n<tr><td><code class=\"hljs\">$ident:kind</code></td><td>Macro capture</td></tr>\n<tr><td><code class=\"hljs\">$(‚Ä¶)‚Ä¶</code></td><td>Macro repetition</td></tr>\n<tr><td><code class=\"hljs\">ident!(...)</code>, <code class=\"hljs\">ident!{...}</code>, <code class=\"hljs\">ident![...]</code></td><td>Macro invocation</td></tr>\n</tbody></table>\n</div>\n<p>Table B-7 shows symbols that create comments.</p>\n<p><span class=\"caption\">Table B-7: Comments</span></p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Symbol</th><th>Explanation</th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">//</code></td><td>Line comment</td></tr>\n<tr><td><code class=\"hljs\">//!</code></td><td>Inner line doc comment</td></tr>\n<tr><td><code class=\"hljs\">///</code></td><td>Outer line doc comment</td></tr>\n<tr><td><code class=\"hljs\">/*...*/</code></td><td>Block comment</td></tr>\n<tr><td><code class=\"hljs\">/*!...*/</code></td><td>Inner block doc comment</td></tr>\n<tr><td><code class=\"hljs\">/**...*/</code></td><td>Outer block doc comment</td></tr>\n</tbody></table>\n</div>\n<p>Table B-8 shows symbols that appear in the context of using tuples.</p>\n<p><span class=\"caption\">Table B-8: Tuples</span></p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Symbol</th><th>Explanation</th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">()</code></td><td>Empty tuple (aka unit), both literal and type</td></tr>\n<tr><td><code class=\"hljs\">(expr)</code></td><td>Parenthesized expression</td></tr>\n<tr><td><code class=\"hljs\">(expr,)</code></td><td>Single-element tuple expression</td></tr>\n<tr><td><code class=\"hljs\">(type,)</code></td><td>Single-element tuple type</td></tr>\n<tr><td><code class=\"hljs\">(expr, ...)</code></td><td>Tuple expression</td></tr>\n<tr><td><code class=\"hljs\">(type, ...)</code></td><td>Tuple type</td></tr>\n<tr><td><code class=\"hljs\">expr(expr, ...)</code></td><td>Function call expression; also used to initialize tuple <code class=\"hljs\">struct</code>s and tuple <code class=\"hljs\">enum</code> variants</td></tr>\n<tr><td><code class=\"hljs\">expr.0</code>, <code class=\"hljs\">expr.1</code>, etc.</td><td>Tuple indexing</td></tr>\n</tbody></table>\n</div>\n<p>Table B-9 shows the contexts in which curly braces are used.</p>\n<p><span class=\"caption\">Table B-9: Curly Brackets</span></p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Context</th><th>Explanation</th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">{...}</code></td><td>Block expression</td></tr>\n<tr><td><code class=\"hljs\">Type {...}</code></td><td><code class=\"hljs\">struct</code> literal</td></tr>\n</tbody></table>\n</div>\n<p>Table B-10 shows the contexts in which square brackets are used.</p>\n<p><span class=\"caption\">Table B-10: Square Brackets</span></p>\n<div class=\"table-wrapper\"><table><thead><tr><th>Context</th><th>Explanation</th></tr></thead><tbody>\n<tr><td><code class=\"hljs\">[...]</code></td><td>Array literal</td></tr>\n<tr><td><code class=\"hljs\">[expr; len]</code></td><td>Array literal containing <code class=\"hljs\">len</code> copies of <code class=\"hljs\">expr</code></td></tr>\n<tr><td><code class=\"hljs\">[type; len]</code></td><td>Array type containing <code class=\"hljs\">len</code> instances of <code class=\"hljs\">type</code></td></tr>\n<tr><td><code class=\"hljs\">expr[expr]</code></td><td>Collection indexing. Overloadable (<code class=\"hljs\">Index</code>, <code class=\"hljs\">IndexMut</code>)</td></tr>\n<tr><td><code class=\"hljs\">expr[..]</code>, <code class=\"hljs\">expr[a..]</code>, <code class=\"hljs\">expr[..b]</code>, <code class=\"hljs\">expr[a..b]</code></td><td>Collection indexing pretending to be collection slicing, using <code class=\"hljs\">Range</code>, <code class=\"hljs\">RangeFrom</code>, <code class=\"hljs\">RangeTo</code>, or <code class=\"hljs\">RangeFull</code> as the ‚Äúindex‚Äù</td></tr>\n</tbody></table>\n</div><div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"appendix-c-derivable-traits\"><a class=\"header\" href=\"#appendix-c-derivable-traits\">Appendix C: Derivable Traits</a></h2>\n<p>In various places in the book, we‚Äôve discussed the <code class=\"hljs\">derive</code> attribute, which\nyou can apply to a struct or enum definition. The <code class=\"hljs\">derive</code> attribute generates\ncode that will implement a trait with its own default implementation on the\ntype you‚Äôve annotated with the <code class=\"hljs\">derive</code> syntax.</p>\n<p>In this appendix, we provide a reference of all the traits in the standard\nlibrary that you can use with <code class=\"hljs\">derive</code>. Each section covers:</p>\n<ul>\n<li>What operators and methods deriving this trait will enable</li>\n<li>What the implementation of the trait provided by <code class=\"hljs\">derive</code> does</li>\n<li>What implementing the trait signifies about the type</li>\n<li>The conditions in which you‚Äôre allowed or not allowed to implement the trait</li>\n<li>Examples of operations that require the trait</li>\n</ul>\n<p>If you want different behavior from that provided by the <code class=\"hljs\">derive</code> attribute,\nconsult the <a href=\"../std/index.html\">standard library documentation</a><!-- ignore -->\nfor each trait for details of how to manually implement them.</p>\n<p>These traits listed here are the only ones defined by the standard library that\ncan be implemented on your types using <code class=\"hljs\">derive</code>. Other traits defined in the\nstandard library don‚Äôt have sensible default behavior, so it‚Äôs up to you to\nimplement them in the way that makes sense for what you‚Äôre trying to accomplish.</p>\n<p>An example of a trait that can‚Äôt be derived is <code class=\"hljs\">Display</code>, which handles\nformatting for end users. You should always consider the appropriate way to\ndisplay a type to an end user. What parts of the type should an end user be\nallowed to see? What parts would they find relevant? What format of the data\nwould be most relevant to them? The Rust compiler doesn‚Äôt have this insight, so\nit can‚Äôt provide appropriate default behavior for you.</p>\n<p>The list of derivable traits provided in this appendix is not comprehensive:\nlibraries can implement <code class=\"hljs\">derive</code> for their own traits, making the list of\ntraits you can use <code class=\"hljs\">derive</code> with truly open-ended. Implementing <code class=\"hljs\">derive</code>\ninvolves using a procedural macro, which is covered in the\n<a href=\"ch19-06-macros.html#macros\">‚ÄúMacros‚Äù</a><!-- ignore --> section of Chapter 19.</p>\n<h3 id=\"debug-for-programmer-output\"><a class=\"header\" href=\"#debug-for-programmer-output\"><code>Debug</code> for Programmer Output</a></h3>\n<p>The <code class=\"hljs\">Debug</code> trait enables debug formatting in format strings, which you\nindicate by adding <code class=\"hljs\">:?</code> within <code class=\"hljs\">{}</code> placeholders.</p>\n<p>The <code class=\"hljs\">Debug</code> trait allows you to print instances of a type for debugging\npurposes, so you and other programmers using your type can inspect an instance\nat a particular point in a program‚Äôs execution.</p>\n<p>The <code class=\"hljs\">Debug</code> trait is required, for example, in using the <code class=\"hljs\">assert_eq!</code> macro.\nThis macro prints the values of instances given as arguments if the equality\nassertion fails so programmers can see why the two instances weren‚Äôt equal.</p>\n<h3 id=\"partialeq-and-eq-for-equality-comparisons\"><a class=\"header\" href=\"#partialeq-and-eq-for-equality-comparisons\"><code>PartialEq</code> and <code>Eq</code> for Equality Comparisons</a></h3>\n<p>The <code class=\"hljs\">PartialEq</code> trait allows you to compare instances of a type to check for\nequality and enables use of the <code class=\"hljs\">==</code> and <code class=\"hljs\">!=</code> operators.</p>\n<p>Deriving <code class=\"hljs\">PartialEq</code> implements the <code class=\"hljs\">eq</code> method. When <code class=\"hljs\">PartialEq</code> is derived on\nstructs, two instances are equal only if <em>all</em> fields are equal, and the\ninstances are not equal if any fields are not equal. When derived on enums,\neach variant is equal to itself and not equal to the other variants.</p>\n<p>The <code class=\"hljs\">PartialEq</code> trait is required, for example, with the use of the\n<code class=\"hljs\">assert_eq!</code> macro, which needs to be able to compare two instances of a type\nfor equality.</p>\n<p>The <code class=\"hljs\">Eq</code> trait has no methods. Its purpose is to signal that for every value of\nthe annotated type, the value is equal to itself. The <code class=\"hljs\">Eq</code> trait can only be\napplied to types that also implement <code class=\"hljs\">PartialEq</code>, although not all types that\nimplement <code class=\"hljs\">PartialEq</code> can implement <code class=\"hljs\">Eq</code>. One example of this is floating point\nnumber types: the implementation of floating point numbers states that two\ninstances of the not-a-number (<code class=\"hljs\">NaN</code>) value are not equal to each other.</p>\n<p>An example of when <code class=\"hljs\">Eq</code> is required is for keys in a <code class=\"hljs\">HashMap&lt;K, V&gt;</code> so the\n<code class=\"hljs\">HashMap&lt;K, V&gt;</code> can tell whether two keys are the same.</p>\n<h3 id=\"partialord-and-ord-for-ordering-comparisons\"><a class=\"header\" href=\"#partialord-and-ord-for-ordering-comparisons\"><code>PartialOrd</code> and <code>Ord</code> for Ordering Comparisons</a></h3>\n<p>The <code class=\"hljs\">PartialOrd</code> trait allows you to compare instances of a type for sorting\npurposes. A type that implements <code class=\"hljs\">PartialOrd</code> can be used with the <code class=\"hljs\">&lt;</code>, <code class=\"hljs\">&gt;</code>,\n<code class=\"hljs\">&lt;=</code>, and <code class=\"hljs\">&gt;=</code> operators. You can only apply the <code class=\"hljs\">PartialOrd</code> trait to types\nthat also implement <code class=\"hljs\">PartialEq</code>.</p>\n<p>Deriving <code class=\"hljs\">PartialOrd</code> implements the <code class=\"hljs\">partial_cmp</code> method, which returns an\n<code class=\"hljs\">Option&lt;Ordering&gt;</code> that will be <code class=\"hljs\">None</code> when the values given don‚Äôt produce an\nordering. An example of a value that doesn‚Äôt produce an ordering, even though\nmost values of that type can be compared, is the not-a-number (<code class=\"hljs\">NaN</code>) floating\npoint value. Calling <code class=\"hljs\">partial_cmp</code> with any floating point number and the <code class=\"hljs\">NaN</code>\nfloating point value will return <code class=\"hljs\">None</code>.</p>\n<p>When derived on structs, <code class=\"hljs\">PartialOrd</code> compares two instances by comparing the\nvalue in each field in the order in which the fields appear in the struct\ndefinition. When derived on enums, variants of the enum declared earlier in the\nenum definition are considered less than the variants listed later.</p>\n<p>The <code class=\"hljs\">PartialOrd</code> trait is required, for example, for the <code class=\"hljs\">gen_range</code> method\nfrom the <code class=\"hljs\">rand</code> crate that generates a random value in the range specified by a\nrange expression.</p>\n<p>The <code class=\"hljs\">Ord</code> trait allows you to know that for any two values of the annotated\ntype, a valid ordering will exist. The <code class=\"hljs\">Ord</code> trait implements the <code class=\"hljs\">cmp</code> method,\nwhich returns an <code class=\"hljs\">Ordering</code> rather than an <code class=\"hljs\">Option&lt;Ordering&gt;</code> because a valid\nordering will always be possible. You can only apply the <code class=\"hljs\">Ord</code> trait to types\nthat also implement <code class=\"hljs\">PartialOrd</code> and <code class=\"hljs\">Eq</code> (and <code class=\"hljs\">Eq</code> requires <code class=\"hljs\">PartialEq</code>). When\nderived on structs and enums, <code class=\"hljs\">cmp</code> behaves the same way as the derived\nimplementation for <code class=\"hljs\">partial_cmp</code> does with <code class=\"hljs\">PartialOrd</code>.</p>\n<p>An example of when <code class=\"hljs\">Ord</code> is required is when storing values in a <code class=\"hljs\">BTreeSet&lt;T&gt;</code>,\na data structure that stores data based on the sort order of the values.</p>\n<h3 id=\"clone-and-copy-for-duplicating-values\"><a class=\"header\" href=\"#clone-and-copy-for-duplicating-values\"><code>Clone</code> and <code>Copy</code> for Duplicating Values</a></h3>\n<p>The <code class=\"hljs\">Clone</code> trait allows you to explicitly create a deep copy of a value, and\nthe duplication process might involve running arbitrary code and copying heap\ndata. See the <a href=\"ch04-01-what-is-ownership.html#ways-variables-and-data-interact-clone\">‚ÄúWays Variables and Data Interact:\nClone‚Äù</a><!-- ignore --> section in\nChapter 4 for more information on <code class=\"hljs\">Clone</code>.</p>\n<p>Deriving <code class=\"hljs\">Clone</code> implements the <code class=\"hljs\">clone</code> method, which when implemented for the\nwhole type, calls <code class=\"hljs\">clone</code> on each of the parts of the type. This means all the\nfields or values in the type must also implement <code class=\"hljs\">Clone</code> to derive <code class=\"hljs\">Clone</code>.</p>\n<p>An example of when <code class=\"hljs\">Clone</code> is required is when calling the <code class=\"hljs\">to_vec</code> method on a\nslice. The slice doesn‚Äôt own the type instances it contains, but the vector\nreturned from <code class=\"hljs\">to_vec</code> will need to own its instances, so <code class=\"hljs\">to_vec</code> calls\n<code class=\"hljs\">clone</code> on each item. Thus, the type stored in the slice must implement <code class=\"hljs\">Clone</code>.</p>\n<p>The <code class=\"hljs\">Copy</code> trait allows you to duplicate a value by only copying bits stored on\nthe stack; no arbitrary code is necessary. See the <a href=\"ch04-01-what-is-ownership.html#stack-only-data-copy\">‚ÄúStack-Only Data:\nCopy‚Äù</a><!-- ignore --> section in Chapter 4 for more\ninformation on <code class=\"hljs\">Copy</code>.</p>\n<p>The <code class=\"hljs\">Copy</code> trait doesn‚Äôt define any methods to prevent programmers from\noverloading those methods and violating the assumption that no arbitrary code\nis being run. That way, all programmers can assume that copying a value will be\nvery fast.</p>\n<p>You can derive <code class=\"hljs\">Copy</code> on any type whose parts all implement <code class=\"hljs\">Copy</code>. A type that\nimplements <code class=\"hljs\">Copy</code> must also implement <code class=\"hljs\">Clone</code>, because a type that implements\n<code class=\"hljs\">Copy</code> has a trivial implementation of <code class=\"hljs\">Clone</code> that performs the same task as\n<code class=\"hljs\">Copy</code>.</p>\n<p>The <code class=\"hljs\">Copy</code> trait is rarely required; types that implement <code class=\"hljs\">Copy</code> have\noptimizations available, meaning you don‚Äôt have to call <code class=\"hljs\">clone</code>, which makes\nthe code more concise.</p>\n<p>Everything possible with <code class=\"hljs\">Copy</code> you can also accomplish with <code class=\"hljs\">Clone</code>, but the\ncode might be slower or have to use <code class=\"hljs\">clone</code> in places.</p>\n<h3 id=\"hash-for-mapping-a-value-to-a-value-of-fixed-size\"><a class=\"header\" href=\"#hash-for-mapping-a-value-to-a-value-of-fixed-size\"><code>Hash</code> for Mapping a Value to a Value of Fixed Size</a></h3>\n<p>The <code class=\"hljs\">Hash</code> trait allows you to take an instance of a type of arbitrary size and\nmap that instance to a value of fixed size using a hash function. Deriving\n<code class=\"hljs\">Hash</code> implements the <code class=\"hljs\">hash</code> method. The derived implementation of the <code class=\"hljs\">hash</code>\nmethod combines the result of calling <code class=\"hljs\">hash</code> on each of the parts of the type,\nmeaning all fields or values must also implement <code class=\"hljs\">Hash</code> to derive <code class=\"hljs\">Hash</code>.</p>\n<p>An example of when <code class=\"hljs\">Hash</code> is required is in storing keys in a <code class=\"hljs\">HashMap&lt;K, V&gt;</code>\nto store data efficiently.</p>\n<h3 id=\"default-for-default-values\"><a class=\"header\" href=\"#default-for-default-values\"><code>Default</code> for Default Values</a></h3>\n<p>The <code class=\"hljs\">Default</code> trait allows you to create a default value for a type. Deriving\n<code class=\"hljs\">Default</code> implements the <code class=\"hljs\">default</code> function. The derived implementation of the\n<code class=\"hljs\">default</code> function calls the <code class=\"hljs\">default</code> function on each part of the type,\nmeaning all fields or values in the type must also implement <code class=\"hljs\">Default</code> to\nderive <code class=\"hljs\">Default</code>.</p>\n<p>The <code class=\"hljs\">Default::default</code> function is commonly used in combination with the struct\nupdate syntax discussed in the <a href=\"ch05-01-defining-structs.html#creating-instances-from-other-instances-with-struct-update-syntax\">‚ÄúCreating Instances From Other Instances With\nStruct Update\nSyntax‚Äù</a><!-- ignore -->\nsection in Chapter 5. You can customize a few fields of a struct and then\nset and use a default value for the rest of the fields by using\n<code class=\"hljs\">..Default::default()</code>.</p>\n<p>The <code class=\"hljs\">Default</code> trait is required when you use the method <code class=\"hljs\">unwrap_or_default</code> on\n<code class=\"hljs\">Option&lt;T&gt;</code> instances, for example. If the <code class=\"hljs\">Option&lt;T&gt;</code> is <code class=\"hljs\">None</code>, the method\n<code class=\"hljs\">unwrap_or_default</code> will return the result of <code class=\"hljs\">Default::default</code> for the type\n<code class=\"hljs\">T</code> stored in the <code class=\"hljs\">Option&lt;T&gt;</code>.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"appendix-d---useful-development-tools\"><a class=\"header\" href=\"#appendix-d---useful-development-tools\">Appendix D - Useful Development Tools</a></h2>\n<p>In this appendix, we talk about some useful development tools that the Rust\nproject provides. We‚Äôll look at automatic formatting, quick ways to apply\nwarning fixes, a linter, and integrating with IDEs.</p>\n<h3 id=\"automatic-formatting-with-rustfmt\"><a class=\"header\" href=\"#automatic-formatting-with-rustfmt\">Automatic Formatting with <code>rustfmt</code></a></h3>\n<p>The <code class=\"hljs\">rustfmt</code> tool reformats your code according to the community code style.\nMany collaborative projects use <code class=\"hljs\">rustfmt</code> to prevent arguments about which\nstyle to use when writing Rust: everyone formats their code using the tool.</p>\n<p>To install <code class=\"hljs\">rustfmt</code>, enter the following:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> rustup component add rustfmt</span>\n</code></pre>\n<p>This command gives you <code class=\"hljs\">rustfmt</code> and <code class=\"hljs\">cargo-fmt</code>, similar to how Rust gives you\nboth <code class=\"hljs\">rustc</code> and <code class=\"hljs\">cargo</code>. To format any Cargo project, enter the following:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo fmt</span>\n</code></pre>\n<p>Running this command reformats all the Rust code in the current crate. This\nshould only change the code style, not the code semantics. For more information\non <code class=\"hljs\">rustfmt</code>, see <a href=\"https://github.com/rust-lang/rustfmt\">its documentation</a>.</p>\n<h3 id=\"fix-your-code-with-rustfix\"><a class=\"header\" href=\"#fix-your-code-with-rustfix\">Fix Your Code with <code>rustfix</code></a></h3>\n<p>The rustfix tool is included with Rust installations and can automatically fix\ncompiler warnings that have a clear way to correct the problem that‚Äôs likely\nwhat you want. It‚Äôs likely you‚Äôve seen compiler warnings before. For example,\nconsider this code:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">do_something</span></span>() {}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..<span class=\"hljs-number\">100</span> {\n        do_something();\n    }\n}</code></pre></pre>\n<p>Here, we‚Äôre calling the <code class=\"hljs\">do_something</code> function 100 times, but we never use the\nvariable <code class=\"hljs\">i</code> in the body of the <code class=\"hljs\">for</code> loop. Rust warns us about that:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo build</span>\n   Compiling myprogram v0.1.0 (file:///projects/myprogram)\nwarning: unused variable: `i`\n<span class=\"hljs-meta\"> --&gt;</span><span class=\"bash\"> src/main.rs:4:9</span>\n  |\n4 |     for i in 0..100 {\n  |         ^ help: consider using `_i` instead\n  |\n  = note: #[warn(unused_variables)] on by default\n\n    Finished dev [unoptimized + debuginfo] target(s) in 0.50s\n</code></pre>\n<p>The warning suggests that we use <code class=\"hljs\">_i</code> as a name instead: the underscore\nindicates that we intend for this variable to be unused. We can automatically\napply that suggestion using the <code class=\"hljs\">rustfix</code> tool by running the command <code class=\"hljs\">cargo fix</code>:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo fix</span>\n    Checking myprogram v0.1.0 (file:///projects/myprogram)\n      Fixing src/main.rs (1 fix)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.59s\n</code></pre>\n<p>When we look at <em>src/main.rs</em> again, we‚Äôll see that <code class=\"hljs\">cargo fix</code> has changed the\ncode:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">do_something</span></span>() {}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">for</span> _i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..<span class=\"hljs-number\">100</span> {\n        do_something();\n    }\n}</code></pre></pre>\n<p>The <code class=\"hljs\">for</code> loop variable is now named <code class=\"hljs\">_i</code>, and the warning no longer appears.</p>\n<p>You can also use the <code class=\"hljs\">cargo fix</code> command to transition your code between\ndifferent Rust editions. Editions are covered in <a href=\"appendix-05-editions.html\">Appendix E</a>.</p>\n<h3 id=\"more-lints-with-clippy\"><a class=\"header\" href=\"#more-lints-with-clippy\">More Lints with Clippy</a></h3>\n<p>The Clippy tool is a collection of lints to analyze your code so you can catch\ncommon mistakes and improve your Rust code.</p>\n<p>To install Clippy, enter the following:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> rustup component add clippy</span>\n</code></pre>\n<p>To run Clippy‚Äôs lints on any Cargo project, enter the following:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> cargo clippy</span>\n</code></pre>\n<p>For example, say you write a program that uses an approximation of a\nmathematical constant, such as pi, as this program does:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">3.1415</span>;\n    <span class=\"hljs-keyword\">let</span> r = <span class=\"hljs-number\">8.0</span>;\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"the area of the circle is {}\"</span>, x * r * r);\n}</code></pre></pre>\n<p>Running <code class=\"hljs\">cargo clippy</code> on this project results in this error:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">error: approximate value of `f{32, 64}::consts::PI` found\n --&gt; src/main.rs:2:13\n  |\n2 |     let x = 3.1415;\n  |             ^^^^^^\n  |\n  = note: `#[deny(clippy::approx_constant)]` on by default\n  = help: consider using the constant directly\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#approx_constant\n</code></pre>\n<p>This error lets you know that Rust already has a more precise <code class=\"hljs\">PI</code> constant\ndefined, and that your program would be more correct if you used the constant\ninstead. You would then change your code to use the <code class=\"hljs\">PI</code> constant. The\nfollowing code doesn‚Äôt result in any errors or warnings from Clippy:</p>\n<p><span class=\"filename\">Filename: src/main.rs</span></p>\n<pre><pre class=\"playground\"><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button><button class=\"fa fa-play play-button\" hidden=\"\" title=\"Run this code\" aria-label=\"Run this code\"></button></div><code class=\"language-rust hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title\">main</span></span>() {\n    <span class=\"hljs-keyword\">let</span> x = std::<span class=\"hljs-built_in\">f64</span>::consts::PI;\n    <span class=\"hljs-keyword\">let</span> r = <span class=\"hljs-number\">8.0</span>;\n    <span class=\"hljs-built_in\">println!</span>(<span class=\"hljs-string\">\"the area of the circle is {}\"</span>, x * r * r);\n}</code></pre></pre>\n<p>For more information on Clippy, see <a href=\"https://github.com/rust-lang/rust-clippy\">its documentation</a>.</p>\n<h3 id=\"ide-integration-using-rust-analyzer\"><a class=\"header\" href=\"#ide-integration-using-rust-analyzer\">IDE Integration Using <code>rust-analyzer</code></a></h3>\n<p>To help IDE integration, the Rust community recommends using\n<a href=\"https://rust-analyzer.github.io\"><code class=\"hljs\">rust-analyzer</code></a><!-- ignore -->. This tool is a set of\ncompiler-centric utilities that speaks the <a href=\"http://langserver.org/\">Language Server Protocol</a><!--\nignore -->, which is a specification for IDEs and programming languages to\ncommunicate with each other. Different clients can use <code class=\"hljs\">rust-analyzer</code>, such as\n<a href=\"https://marketplace.visualstudio.com/items?itemName=rust-lang.rust-analyzer\">the Rust analyzer plug-in for Visual Studio Code</a>.</p>\n<p>Visit the <code class=\"hljs\">rust-analyzer</code> project‚Äôs <a href=\"https://rust-analyzer.github.io\">home page</a><!-- ignore -->\nfor installation instructions, then install the language server support in your\nparticular IDE. Your IDE will gain abilities such as autocompletion, jump to\ndefinition, and inline errors.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"appendix-e---editions\"><a class=\"header\" href=\"#appendix-e---editions\">Appendix E - Editions</a></h2>\n<p>In Chapter 1, you saw that <code class=\"hljs\">cargo new</code> adds a bit of metadata to your\n<em>Cargo.toml</em> file about an edition. This appendix talks about what that means!</p>\n<p>The Rust language and compiler have a six-week release cycle, meaning users get\na constant stream of new features. Other programming languages release larger\nchanges less often; Rust releases smaller updates more frequently. After a\nwhile, all of these tiny changes add up. But from release to release, it can be\ndifficult to look back and say, ‚ÄúWow, between Rust 1.10 and Rust 1.31, Rust has\nchanged a lot!‚Äù</p>\n<p>Every two or three years, the Rust team produces a new Rust <em>edition</em>. Each\nedition brings together the features that have landed into a clear package with\nfully updated documentation and tooling. New editions ship as part of the usual\nsix-week release process.</p>\n<p>Editions serve different purposes for different people:</p>\n<ul>\n<li>For active Rust users, a new edition brings together incremental changes into\nan easy-to-understand package.</li>\n<li>For non-users, a new edition signals that some major advancements have\nlanded, which might make Rust worth another look.</li>\n<li>For those developing Rust, a new edition provides a rallying point for the\nproject as a whole.</li>\n</ul>\n<p>At the time of this writing, three Rust editions are available: Rust 2015, Rust\n2018, and Rust 2021. This book is written using Rust 2021 edition idioms.</p>\n<p>The <code class=\"hljs\">edition</code> key in <em>Cargo.toml</em> indicates which edition the compiler should\nuse for your code. If the key doesn‚Äôt exist, Rust uses <code class=\"hljs\">2015</code> as the edition\nvalue for backward compatibility reasons.</p>\n<p>Each project can opt in to an edition other than the default 2015 edition.\nEditions can contain incompatible changes, such as including a new keyword that\nconflicts with identifiers in code. However, unless you opt in to those\nchanges, your code will continue to compile even as you upgrade the Rust\ncompiler version you use.</p>\n<p>All Rust compiler versions support any edition that existed prior to that\ncompiler‚Äôs release, and they can link crates of any supported editions\ntogether. Edition changes only affect the way the compiler initially parses\ncode. Therefore, if you‚Äôre using Rust 2015 and one of your dependencies uses\nRust 2018, your project will compile and be able to use that dependency. The\nopposite situation, where your project uses Rust 2018 and a dependency uses\nRust 2015, works as well.</p>\n<p>To be clear: most features will be available on all editions. Developers using\nany Rust edition will continue to see improvements as new stable releases are\nmade. However, in some cases, mainly when new keywords are added, some new\nfeatures might only be available in later editions. You will need to switch\neditions if you want to take advantage of such features.</p>\n<p>For more details, the <a href=\"https://doc.rust-lang.org/stable/edition-guide/\"><em>Edition\nGuide</em></a> is a complete book\nabout editions that enumerates the differences between editions and explains\nhow to automatically upgrade your code to a new edition via <code class=\"hljs\">cargo fix</code>.</p>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"appendix-f-translations-of-the-book\"><a class=\"header\" href=\"#appendix-f-translations-of-the-book\">Appendix F: Translations of the Book</a></h2>\n<p>For resources in languages other than English. Most are still in progress; see\n<a href=\"https://github.com/rust-lang/book/issues?q=is%3Aopen+is%3Aissue+label%3ATranslations\">the Translations label</a> to help or let us know about a new translation!</p>\n<ul>\n<li><a href=\"https://github.com/rust-br/rust-book-pt-br\">Portugu√™s</a> (BR)</li>\n<li><a href=\"https://github.com/nunojesus/rust-book-pt-pt\">Portugu√™s</a> (PT)</li>\n<li><a href=\"https://github.com/KaiserY/trpl-zh-cn\">ÁÆÄ‰Ωì‰∏≠Êñá</a></li>\n<li><a href=\"https://github.com/rust-tw/book-tw\">Ê≠£È´î‰∏≠Êñá</a></li>\n<li><a href=\"https://github.com/pavloslav/rust-book-uk-ua\">–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞</a></li>\n<li><a href=\"https://github.com/thecodix/book\">Espa√±ol</a>, <a href=\"https://github.com/ManRR/rust-book-es\">alternate</a></li>\n<li><a href=\"https://github.com/EmanueleGurini/book_it\">Italiano</a></li>\n<li><a href=\"https://github.com/rust-lang-ru/book\">–†—É—Å—Å–∫–∏–π</a></li>\n<li><a href=\"https://github.com/rinthel/rust-lang-book-ko\">ÌïúÍµ≠Ïñ¥</a></li>\n<li><a href=\"https://github.com/rust-lang-ja/book-ja\">Êó•Êú¨Ë™û</a></li>\n<li><a href=\"https://github.com/Jimskapt/rust-book-fr\">Fran√ßais</a></li>\n<li><a href=\"https://github.com/paytchoo/book-pl\">Polski</a></li>\n<li><a href=\"https://github.com/agentzero1/book\">Cebuano</a></li>\n<li><a href=\"https://github.com/josephace135/book\">Tagalog</a></li>\n<li><a href=\"https://github.com/psychoslave/Rust-libro\">Esperanto</a></li>\n<li><a href=\"https://github.com/TChatzigiannakis/rust-book-greek\">ŒµŒªŒªŒ∑ŒΩŒπŒ∫ŒÆ</a></li>\n<li><a href=\"https://github.com/sebras/book\">Svenska</a></li>\n<li><a href=\"https://github.com/RustFarsi/book\">Farsi</a></li>\n<li><a href=\"https://github.com/rust-lang-de/rustbook-de\">Deutsch</a></li>\n<li><a href=\"https://github.com/venkatarun95/rust-book-hindi\">‡§π‡§ø‡§Ç‡§¶‡•Ä</a></li>\n<li><a href=\"https://github.com/rust-lang-th/book-th\">‡πÑ‡∏ó‡∏¢</a></li>\n<li><a href=\"https://github.com/DanKHansen/book-dk\">Danske</a></li>\n</ul>\n<div style=\"break-before: page; page-break-before: always;\"></div><h2 id=\"appendix-g---how-rust-is-made-and-nightly-rust\"><a class=\"header\" href=\"#appendix-g---how-rust-is-made-and-nightly-rust\">Appendix G - How Rust is Made and ‚ÄúNightly Rust‚Äù</a></h2>\n<p>This appendix is about how Rust is made and how that affects you as a Rust\ndeveloper.</p>\n<h3 id=\"stability-without-stagnation\"><a class=\"header\" href=\"#stability-without-stagnation\">Stability Without Stagnation</a></h3>\n<p>As a language, Rust cares a <em>lot</em> about the stability of your code. We want\nRust to be a rock-solid foundation you can build on, and if things were\nconstantly changing, that would be impossible. At the same time, if we can‚Äôt\nexperiment with new features, we may not find out important flaws until after\ntheir release, when we can no longer change things.</p>\n<p>Our solution to this problem is what we call ‚Äústability without stagnation‚Äù,\nand our guiding principle is this: you should never have to fear upgrading to a\nnew version of stable Rust. Each upgrade should be painless, but should also\nbring you new features, fewer bugs, and faster compile times.</p>\n<h3 id=\"choo-choo-release-channels-and-riding-the-trains\"><a class=\"header\" href=\"#choo-choo-release-channels-and-riding-the-trains\">Choo, Choo! Release Channels and Riding the Trains</a></h3>\n<p>Rust development operates on a <em>train schedule</em>. That is, all development is\ndone on the <code class=\"hljs\">master</code> branch of the Rust repository. Releases follow a software\nrelease train model, which has been used by Cisco IOS and other software\nprojects. There are three <em>release channels</em> for Rust:</p>\n<ul>\n<li>Nightly</li>\n<li>Beta</li>\n<li>Stable</li>\n</ul>\n<p>Most Rust developers primarily use the stable channel, but those who want to\ntry out experimental new features may use nightly or beta.</p>\n<p>Here‚Äôs an example of how the development and release process works: let‚Äôs\nassume that the Rust team is working on the release of Rust 1.5. That release\nhappened in December of 2015, but it will provide us with realistic version\nnumbers. A new feature is added to Rust: a new commit lands on the <code class=\"hljs\">master</code>\nbranch. Each night, a new nightly version of Rust is produced. Every day is a\nrelease day, and these releases are created by our release infrastructure\nautomatically. So as time passes, our releases look like this, once a night:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">nightly: * - - * - - *\n</code></pre>\n<p>Every six weeks, it‚Äôs time to prepare a new release! The <code class=\"hljs\">beta</code> branch of the\nRust repository branches off from the <code class=\"hljs\">master</code> branch used by nightly. Now,\nthere are two releases:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">nightly: * - - * - - *\n                     |\nbeta:                *\n</code></pre>\n<p>Most Rust users do not use beta releases actively, but test against beta in\ntheir CI system to help Rust discover possible regressions. In the meantime,\nthere‚Äôs still a nightly release every night:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">nightly: * - - * - - * - - * - - *\n                     |\nbeta:                *\n</code></pre>\n<p>Let‚Äôs say a regression is found. Good thing we had some time to test the beta\nrelease before the regression snuck into a stable release! The fix is applied\nto <code class=\"hljs\">master</code>, so that nightly is fixed, and then the fix is backported to the\n<code class=\"hljs\">beta</code> branch, and a new release of beta is produced:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">nightly: * - - * - - * - - * - - * - - *\n                     |\nbeta:                * - - - - - - - - *\n</code></pre>\n<p>Six weeks after the first beta was created, it‚Äôs time for a stable release! The\n<code class=\"hljs\">stable</code> branch is produced from the <code class=\"hljs\">beta</code> branch:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">nightly: * - - * - - * - - * - - * - - * - * - *\n                     |\nbeta:                * - - - - - - - - *\n                                       |\nstable:                                *\n</code></pre>\n<p>Hooray! Rust 1.5 is done! However, we‚Äôve forgotten one thing: because the six\nweeks have gone by, we also need a new beta of the <em>next</em> version of Rust, 1.6.\nSo after <code class=\"hljs\">stable</code> branches off of <code class=\"hljs\">beta</code>, the next version of <code class=\"hljs\">beta</code> branches\noff of <code class=\"hljs\">nightly</code> again:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-text hljs plaintext\">nightly: * - - * - - * - - * - - * - - * - * - *\n                     |                         |\nbeta:                * - - - - - - - - *       *\n                                       |\nstable:                                *\n</code></pre>\n<p>This is called the ‚Äútrain model‚Äù because every six weeks, a release ‚Äúleaves the\nstation‚Äù, but still has to take a journey through the beta channel before it\narrives as a stable release.</p>\n<p>Rust releases every six weeks, like clockwork. If you know the date of one Rust\nrelease, you can know the date of the next one: it‚Äôs six weeks later. A nice\naspect of having releases scheduled every six weeks is that the next train is\ncoming soon. If a feature happens to miss a particular release, there‚Äôs no need\nto worry: another one is happening in a short time! This helps reduce pressure\nto sneak possibly unpolished features in close to the release deadline.</p>\n<p>Thanks to this process, you can always check out the next build of Rust and\nverify for yourself that it‚Äôs easy to upgrade to: if a beta release doesn‚Äôt\nwork as expected, you can report it to the team and get it fixed before the\nnext stable release happens! Breakage in a beta release is relatively rare, but\n<code class=\"hljs\">rustc</code> is still a piece of software, and bugs do exist.</p>\n<h3 id=\"maintenance-time\"><a class=\"header\" href=\"#maintenance-time\">Maintenance time</a></h3>\n<p>The Rust project supports the most recent stable version. When a new stable\nversion is released, the old version reaches its end of life (EOL). This means\neach version is supported for six weeks.</p>\n<h3 id=\"unstable-features\"><a class=\"header\" href=\"#unstable-features\">Unstable Features</a></h3>\n<p>There‚Äôs one more catch with this release model: unstable features. Rust uses a\ntechnique called ‚Äúfeature flags‚Äù to determine what features are enabled in a\ngiven release. If a new feature is under active development, it lands on\n<code class=\"hljs\">master</code>, and therefore, in nightly, but behind a <em>feature flag</em>. If you, as a\nuser, wish to try out the work-in-progress feature, you can, but you must be\nusing a nightly release of Rust and annotate your source code with the\nappropriate flag to opt in.</p>\n<p>If you‚Äôre using a beta or stable release of Rust, you can‚Äôt use any feature\nflags. This is the key that allows us to get practical use with new features\nbefore we declare them stable forever. Those who wish to opt into the bleeding\nedge can do so, and those who want a rock-solid experience can stick with\nstable and know that their code won‚Äôt break. Stability without stagnation.</p>\n<p>This book only contains information about stable features, as in-progress\nfeatures are still changing, and surely they‚Äôll be different between when this\nbook was written and when they get enabled in stable builds. You can find\ndocumentation for nightly-only features online.</p>\n<h3 id=\"rustup-and-the-role-of-rust-nightly\"><a class=\"header\" href=\"#rustup-and-the-role-of-rust-nightly\">Rustup and the Role of Rust Nightly</a></h3>\n<p>Rustup makes it easy to change between different release channels of Rust, on a\nglobal or per-project basis. By default, you‚Äôll have stable Rust installed. To\ninstall nightly, for example:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> rustup toolchain install nightly</span>\n</code></pre>\n<p>You can see all of the <em>toolchains</em> (releases of Rust and associated\ncomponents) you have installed with <code class=\"hljs\">rustup</code> as well. Here‚Äôs an example on one\nof your authors‚Äô Windows computer:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-powershell hljs\">&gt; rustup toolchain list\nstable-x86_64-pc-windows-msvc (default)\nbeta-x86_64-pc-windows-msvc\nnightly-x86_64-pc-windows-msvc\n</code></pre>\n<p>As you can see, the stable toolchain is the default. Most Rust users use stable\nmost of the time. You might want to use stable most of the time, but use\nnightly on a specific project, because you care about a cutting-edge feature.\nTo do so, you can use <code class=\"hljs\">rustup override</code> in that project‚Äôs directory to set the\nnightly toolchain as the one <code class=\"hljs\">rustup</code> should use when you‚Äôre in that directory:</p>\n<pre><div class=\"buttons\"><button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\"><i class=\"tooltiptext\"></i></button></div><code class=\"language-console hljs shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> <span class=\"hljs-built_in\">cd</span> ~/projects/needs-nightly</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> rustup override <span class=\"hljs-built_in\">set</span> nightly</span>\n</code></pre>\n<p>Now, every time you call <code class=\"hljs\">rustc</code> or <code class=\"hljs\">cargo</code> inside of\n<em>~/projects/needs-nightly</em>, <code class=\"hljs\">rustup</code> will make sure that you are using nightly\nRust, rather than your default of stable Rust. This comes in handy when you\nhave a lot of Rust projects!</p>\n<h3 id=\"the-rfc-process-and-teams\"><a class=\"header\" href=\"#the-rfc-process-and-teams\">The RFC Process and Teams</a></h3>\n<p>So how do you learn about these new features? Rust‚Äôs development model follows\na <em>Request For Comments (RFC) process</em>. If you‚Äôd like an improvement in Rust,\nyou can write up a proposal, called an RFC.</p>\n<p>Anyone can write RFCs to improve Rust, and the proposals are reviewed and\ndiscussed by the Rust team, which is comprised of many topic subteams. There‚Äôs\na full list of the teams <a href=\"https://www.rust-lang.org/governance\">on Rust‚Äôs\nwebsite</a>, which includes teams for\neach area of the project: language design, compiler implementation,\ninfrastructure, documentation, and more. The appropriate team reads the\nproposal and the comments, writes some comments of their own, and eventually,\nthere‚Äôs consensus to accept or reject the feature.</p>\n<p>If the feature is accepted, an issue is opened on the Rust repository, and\nsomeone can implement it. The person who implements it very well may not be the\nperson who proposed the feature in the first place! When the implementation is\nready, it lands on the <code class=\"hljs\">master</code> branch behind a feature gate, as we discussed\nin the <a href=\"appendix-07-nightly-rust.html#unstable-features\">‚ÄúUnstable Features‚Äù</a><!-- ignore --> section.</p>\n<p>After some time, once Rust developers who use nightly releases have been able\nto try out the new feature, team members will discuss the feature, how it‚Äôs\nworked out on nightly, and decide if it should make it into stable Rust or not.\nIf the decision is to move forward, the feature gate is removed, and the\nfeature is now considered stable! It rides the trains into a new stable release\nof Rust.</p>\n\n                    </main>\n\n                    <nav class=\"nav-wrapper\" aria-label=\"Page navigation\">\n                        <!-- Mobile navigation buttons -->\n\n\n                        <div style=\"clear: both\"></div>\n                    </nav>\n                </div>\n            </div>\n\n            <nav class=\"nav-wide-wrapper\" aria-label=\"Page navigation\">\n\n            </nav>\n\n        </div>\n\n\n\n\n        <script>\n            window.playground_copyable = true;\n        </script>\n\n\n        <script src=\"elasticlunr.min.js\"></script>\n        <script src=\"mark.min.js\"></script>\n        <script src=\"searcher.js\"></script>\n\n        <script src=\"clipboard.min.js\"></script>\n        <script src=\"highlight.js\"></script>\n        <script src=\"book.js\"></script>\n\n        <!-- Custom JS scripts -->\n        <script src=\"ferris.js\"></script>\n\n        <script>\n        window.addEventListener('load', function() {\n            window.setTimeout(window.print, 100);\n        });\n        </script>\n\n    </div>\n    \n\n</body></html>",
	"crawlDate": "2024-07-28T05:09:07.459Z"
}