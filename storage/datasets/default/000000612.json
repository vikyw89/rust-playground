{
	"title": "AsciiExt in std::ascii - Rust",
	"url": "https://doc.rust-lang.org/stable/std/ascii/trait.AsciiExt.html",
	"markdown": "# AsciiExt in std::ascii - Rust\n\n```\npub trait AsciiExt {\n    type Owned;\n\n    // Required methods\n    fn is_ascii(&self) -> bool;\n    fn to_ascii_uppercase(&self) -> Self::Owned;\n    fn to_ascii_lowercase(&self) -> Self::Owned;\n    fn eq_ignore_ascii_case(&self, other: &Self) -> bool;\n    fn make_ascii_uppercase(&mut self);\n    fn make_ascii_lowercase(&mut self);\n}\n```\n\n👎Deprecated since 1.26.0: use inherent methods instead\n\nExpand description\n\nExtension methods for ASCII-subset only operations.\n\nBe aware that operations on seemingly non-ASCII characters can sometimes have unexpected results. Consider this example:\n\n```\nuse std::ascii::AsciiExt;\n\nassert_eq!(AsciiExt::to_ascii_uppercase(\"café\"), \"CAFÉ\");\nassert_eq!(AsciiExt::to_ascii_uppercase(\"café\"), \"CAFé\");\n```\n\n[Run](https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ascii::AsciiExt;%0A++++%0A++++assert_eq!(AsciiExt::to_ascii_uppercase(%22cafe%CC%81%22),+%22CAFE%CC%81%22);%0A++++assert_eq!(AsciiExt::to_ascii_uppercase(%22caf%C3%A9%22),+%22CAF%C3%A9%22);%0A%7D&edition=2021)\n\nIn the first example, the lowercased string is represented `\"cafe\\u{301}\"` (the last character is an acute accent [combining character](https://en.wikipedia.org/wiki/Combining_character)). Unlike the other characters in the string, the combining character will not get mapped to an uppercase variant, resulting in `\"CAFE\\u{301}\"`. In the second example, the lowercased string is represented `\"caf\\u{e9}\"` (the last character is a single Unicode character representing an ‘e’ with an acute accent). Since the last character is defined outside the scope of ASCII, it will not get mapped to an uppercase variant, resulting in `\"CAF\\u{e9}\"`.\n\n1.0.0 · [source](about:blank/src/std/ascii.rs.html#49)\n\n👎Deprecated since 1.26.0: use inherent methods instead\n\nContainer type for copied ASCII characters.\n\n1.0.0 · [source](about:blank/src/std/ascii.rs.html#58)\n\n👎Deprecated since 1.26.0: use inherent methods instead\n\nChecks if the value is within the ASCII range.\n\n##### [§](#note)Note\n\nThis method is deprecated in favor of the identically-named inherent methods on `u8`, `char`, `[u8]` and `str`.\n\n1.0.0 · [source](about:blank/src/std/ascii.rs.html#78)\n\n👎Deprecated since 1.26.0: use inherent methods instead\n\nMakes a copy of the value in its ASCII upper case equivalent.\n\nASCII letters ‘a’ to ‘z’ are mapped to ‘A’ to ‘Z’, but non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`](about:blank/trait.AsciiExt.html#tymethod.make_ascii_uppercase \"method std::ascii::AsciiExt::make_ascii_uppercase\").\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use [`str::to_uppercase`](about:blank/primitive.str.html#method.to_uppercase \"method str::to_uppercase\").\n\n##### [§](#note-1)Note\n\nThis method is deprecated in favor of the identically-named inherent methods on `u8`, `char`, `[u8]` and `str`.\n\n1.0.0 · [source](about:blank/src/std/ascii.rs.html#98)\n\n👎Deprecated since 1.26.0: use inherent methods instead\n\nMakes a copy of the value in its ASCII lower case equivalent.\n\nASCII letters ‘A’ to ‘Z’ are mapped to ‘a’ to ‘z’, but non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`](about:blank/trait.AsciiExt.html#tymethod.make_ascii_lowercase \"method std::ascii::AsciiExt::make_ascii_lowercase\").\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use [`str::to_lowercase`](about:blank/primitive.str.html#method.to_lowercase \"method str::to_lowercase\").\n\n##### [§](#note-2)Note\n\nThis method is deprecated in favor of the identically-named inherent methods on `u8`, `char`, `[u8]` and `str`.\n\n1.0.0 · [source](about:blank/src/std/ascii.rs.html#110)\n\n👎Deprecated since 1.26.0: use inherent methods instead\n\nChecks that two values are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`, but without allocating and copying temporaries.\n\n##### [§](#note-3)Note\n\nThis method is deprecated in favor of the identically-named inherent methods on `u8`, `char`, `[u8]` and `str`.\n\n1.9.0 · [source](about:blank/src/std/ascii.rs.html#127)\n\n👎Deprecated since 1.26.0: use inherent methods instead\n\nConverts this type to its ASCII upper case equivalent in-place.\n\nASCII letters ‘a’ to ‘z’ are mapped to ‘A’ to ‘Z’, but non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use [`to_ascii_uppercase`](about:blank/trait.AsciiExt.html#tymethod.to_ascii_uppercase \"method std::ascii::AsciiExt::to_ascii_uppercase\").\n\n##### [§](#note-4)Note\n\nThis method is deprecated in favor of the identically-named inherent methods on `u8`, `char`, `[u8]` and `str`.\n\n1.9.0 · [source](about:blank/src/std/ascii.rs.html#144)\n\n👎Deprecated since 1.26.0: use inherent methods instead\n\nConverts this type to its ASCII lower case equivalent in-place.\n\nASCII letters ‘A’ to ‘Z’ are mapped to ‘a’ to ‘z’, but non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use [`to_ascii_lowercase`](about:blank/trait.AsciiExt.html#tymethod.to_ascii_lowercase \"method std::ascii::AsciiExt::to_ascii_lowercase\").\n\n##### [§](#note-5)Note\n\nThis method is deprecated in favor of the identically-named inherent methods on `u8`, `char`, `[u8]` and `str`.",
	"html": "<!DOCTYPE html><html lang=\"en\" data-theme=\"light\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><meta name=\"generator\" content=\"rustdoc\"><meta name=\"description\" content=\"Extension methods for ASCII-subset only operations.\"><title>AsciiExt in std::ascii - Rust</title><script>if(window.location.protocol!==\"file:\")document.head.insertAdjacentHTML(\"beforeend\",\"SourceSerif4-Regular-46f98efaafac5295.ttf.woff2,FiraSans-Regular-018c141bf0843ffd.woff2,FiraSans-Medium-8f9a781e4970d388.woff2,SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2,SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\".split(\",\").map(f=>`<link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"../../static.files/${f}\">`).join(\"\"))</script><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceSerif4-Regular-46f98efaafac5295.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Regular-018c141bf0843ffd.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/FiraSans-Medium-8f9a781e4970d388.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\"><link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin=\"\" href=\"../../static.files/SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\"><link rel=\"stylesheet\" href=\"../../static.files/normalize-76eba96aa4d2e634.css\"><link rel=\"stylesheet\" href=\"../../static.files/rustdoc-dd39b87e5fcfba68.css\"><meta name=\"rustdoc-vars\" data-root-path=\"../../\" data-static-root-path=\"../../static.files/\" data-current-crate=\"std\" data-themes=\"\" data-resource-suffix=\"1.80.0\" data-rustdoc-version=\"1.80.0 (051478957 2024-07-21)\" data-channel=\"1.80.0\" data-search-js=\"search-d52510db62a78183.js\" data-settings-js=\"settings-4313503d2e1961c2.js\"><script src=\"../../static.files/storage-118b08c4c78b968e.js\"></script><script defer=\"\" src=\"sidebar-items1.80.0.js\"></script><script defer=\"\" src=\"../../static.files/main-20a3ad099b048cf2.js\"></script><noscript><link rel=\"stylesheet\" href=\"../../static.files/noscript-df360f571f6edeae.css\"></noscript><link rel=\"alternate icon\" type=\"image/png\" href=\"../../static.files/favicon-32x32-422f7d1d52889060.png\"><link rel=\"icon\" type=\"image/svg+xml\" href=\"../../static.files/favicon-2c020d218678b618.svg\"></head><body class=\"rustdoc trait\"><!--[if lte IE 11]><div class=\"warning\">This old browser is unsupported and will most likely display funky things.</div><![endif]--><nav class=\"mobile-topbar\"><button class=\"sidebar-menu-toggle\" title=\"show sidebar\"></button><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"\"></a><h2 class=\"location\"><a href=\"#\">AsciiExt</a></h2></nav><nav class=\"sidebar\"><div class=\"sidebar-crate\"><a class=\"logo-container\" href=\"../../std/index.html\"><img class=\"rust-logo\" src=\"../../static.files/rust-logo-151179464ae7ed46.svg\" alt=\"logo\"></a><h2><a href=\"../../std/index.html\">std</a><span class=\"version\">1.80.0</span></h2></div><div class=\"version\">(051478957\t2024-07-21)</div><h2 class=\"location\"><a href=\"#\">AsciiExt</a></h2><div class=\"sidebar-elems\"><section><h3><a href=\"#required-associated-types\">Required Associated Types</a></h3><ul class=\"block\"><li><a href=\"#associatedtype.Owned\">Owned</a></li></ul><h3><a href=\"#required-methods\">Required Methods</a></h3><ul class=\"block\"><li><a href=\"#tymethod.eq_ignore_ascii_case\">eq_ignore_ascii_case</a></li><li><a href=\"#tymethod.is_ascii\">is_ascii</a></li><li><a href=\"#tymethod.make_ascii_lowercase\">make_ascii_lowercase</a></li><li><a href=\"#tymethod.make_ascii_uppercase\">make_ascii_uppercase</a></li><li><a href=\"#tymethod.to_ascii_lowercase\">to_ascii_lowercase</a></li><li><a href=\"#tymethod.to_ascii_uppercase\">to_ascii_uppercase</a></li></ul><h3><a href=\"#object-safety\">Object Safety</a></h3><h3><a href=\"#implementors\">Implementors</a></h3></section><h2><a href=\"index.html\">In std::ascii</a></h2><h3><a href=\"index.html#structs\">Structs</a></h3><ul class=\"block struct\"><li><a href=\"struct.EscapeDefault.html\">EscapeDefault</a></li></ul><h3><a href=\"index.html#enums\">Enums</a></h3><ul class=\"block enum\"><li><a href=\"enum.Char.html\">Char</a></li></ul><h3><a href=\"index.html#traits\">Traits</a></h3><ul class=\"block trait\"><li><a href=\"trait.AsciiExt.html\">AsciiExt</a></li></ul><h3><a href=\"index.html#functions\">Functions</a></h3><ul class=\"block fn\"><li><a href=\"fn.escape_default.html\">escape_default</a></li></ul></div></nav><div class=\"sidebar-resizer\"></div><main><div class=\"width-limiter\"><rustdoc-search><nav class=\"sub\">\n            <form class=\"search-form\">\n                <span></span> <!-- This empty span is a hacky fix for Safari - See #93184 -->\n                <div id=\"sidebar-button\" tabindex=\"-1\">\n                    <a href=\"../../std/all.html\" title=\"show sidebar\"></a>\n                </div>\n                <input class=\"search-input\" name=\"search\" aria-label=\"Run search in the documentation\" autocomplete=\"off\" spellcheck=\"false\" placeholder=\"Type ‘S’ or ‘/’ to search, ‘?’ for more options…\" type=\"search\">\n                <div id=\"help-button\" tabindex=\"-1\">\n                    <a href=\"../../help.html\" title=\"help\">?</a>\n                </div>\n                <div id=\"settings-menu\" tabindex=\"-1\">\n                    <a href=\"../../settings.html\" title=\"settings\">\n                        Settings\n                    </a>\n                </div>\n            </form>\n        </nav></rustdoc-search><section id=\"main-content\" class=\"content\"><div class=\"main-heading\"><h1>Trait <a href=\"../index.html\">std</a>::<wbr><a href=\"index.html\">ascii</a>::<wbr><a class=\"trait\" href=\"#\">AsciiExt</a><button id=\"copy-path\" title=\"Copy item path to clipboard\">Copy item path</button></h1><span class=\"out-of-band\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/ascii.rs.html#46-145\">source</a> · <button id=\"toggle-all-docs\" title=\"collapse all docs\">[<span>−</span>]</button></span></div><pre class=\"rust item-decl\"><code>pub trait AsciiExt {\n    type <a href=\"#associatedtype.Owned\" class=\"associatedtype\">Owned</a>;\n\n    // Required methods\n    fn <a href=\"#tymethod.is_ascii\" class=\"fn\">is_ascii</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.to_ascii_uppercase\" class=\"fn\">to_ascii_uppercase</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"trait.AsciiExt.html#associatedtype.Owned\" title=\"type std::ascii::AsciiExt::Owned\">Owned</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.to_ascii_lowercase\" class=\"fn\">to_ascii_lowercase</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"trait.AsciiExt.html#associatedtype.Owned\" title=\"type std::ascii::AsciiExt::Owned\">Owned</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.eq_ignore_ascii_case\" class=\"fn\">eq_ignore_ascii_case</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Self</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a>;\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.make_ascii_uppercase\" class=\"fn\">make_ascii_uppercase</a>(&amp;mut self);\n<span class=\"item-spacer\"></span>    fn <a href=\"#tymethod.make_ascii_lowercase\" class=\"fn\">make_ascii_lowercase</a>(&amp;mut self);\n}</code></pre><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.26.0: use inherent methods instead</span></div></span><details class=\"toggle top-doc\" open=\"\"><summary class=\"hideme\"><span>Expand description</span></summary><div class=\"docblock\"><p>Extension methods for ASCII-subset only operations.</p>\n<p>Be aware that operations on seemingly non-ASCII characters can sometimes\nhave unexpected results. Consider this example:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ascii::AsciiExt;\n\n<span class=\"macro\">assert_eq!</span>(AsciiExt::to_ascii_uppercase(<span class=\"string\">\"café\"</span>), <span class=\"string\">\"CAFÉ\"</span>);\n<span class=\"macro\">assert_eq!</span>(AsciiExt::to_ascii_uppercase(<span class=\"string\">\"café\"</span>), <span class=\"string\">\"CAFé\"</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0A++++use+std::ascii::AsciiExt;%0A++++%0A++++assert_eq!(AsciiExt::to_ascii_uppercase(%22cafe%CC%81%22),+%22CAFE%CC%81%22);%0A++++assert_eq!(AsciiExt::to_ascii_uppercase(%22caf%C3%A9%22),+%22CAF%C3%A9%22);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>In the first example, the lowercased string is represented <code>\"cafe\\u{301}\"</code>\n(the last character is an acute accent <a href=\"https://en.wikipedia.org/wiki/Combining_character\">combining character</a>). Unlike the\nother characters in the string, the combining character will not get mapped\nto an uppercase variant, resulting in <code>\"CAFE\\u{301}\"</code>. In the second\nexample, the lowercased string is represented <code>\"caf\\u{e9}\"</code> (the last\ncharacter is a single Unicode character representing an ‘e’ with an acute\naccent). Since the last character is defined outside the scope of ASCII,\nit will not get mapped to an uppercase variant, resulting in <code>\"CAF\\u{e9}\"</code>.</p>\n</div></details><h2 id=\"required-associated-types\" class=\"section-header\">Required Associated Types<a href=\"#required-associated-types\" class=\"anchor\">§</a></h2><div class=\"methods\"><details class=\"toggle\" open=\"\"><summary><section id=\"associatedtype.Owned\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/ascii.rs.html#49\">source</a></span><h4 class=\"code-header\">type <a href=\"#associatedtype.Owned\" class=\"associatedtype\">Owned</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.26.0: use inherent methods instead</span></div></span></summary><div class=\"docblock\"><p>Container type for copied ASCII characters.</p>\n</div></details></div><h2 id=\"required-methods\" class=\"section-header\">Required Methods<a href=\"#required-methods\" class=\"anchor\">§</a></h2><div class=\"methods\"><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.is_ascii\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/ascii.rs.html#58\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.is_ascii\" class=\"fn\">is_ascii</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.26.0: use inherent methods instead</span></div></span></summary><div class=\"docblock\"><p>Checks if the value is within the ASCII range.</p>\n<h5 id=\"note\"><a class=\"doc-anchor\" href=\"#note\">§</a>Note</h5>\n<p>This method is deprecated in favor of the identically-named\ninherent methods on <code>u8</code>, <code>char</code>, <code>[u8]</code> and <code>str</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.to_ascii_uppercase\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/ascii.rs.html#78\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.to_ascii_uppercase\" class=\"fn\">to_ascii_uppercase</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"trait.AsciiExt.html#associatedtype.Owned\" title=\"type std::ascii::AsciiExt::Owned\">Owned</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.26.0: use inherent methods instead</span></div></span></summary><div class=\"docblock\"><p>Makes a copy of the value in its ASCII upper case equivalent.</p>\n<p>ASCII letters ‘a’ to ‘z’ are mapped to ‘A’ to ‘Z’,\nbut non-ASCII letters are unchanged.</p>\n<p>To uppercase the value in-place, use <a href=\"trait.AsciiExt.html#tymethod.make_ascii_uppercase\" title=\"method std::ascii::AsciiExt::make_ascii_uppercase\"><code>make_ascii_uppercase</code></a>.</p>\n<p>To uppercase ASCII characters in addition to non-ASCII characters, use\n<a href=\"../primitive.str.html#method.to_uppercase\" title=\"method str::to_uppercase\"><code>str::to_uppercase</code></a>.</p>\n<h5 id=\"note-1\"><a class=\"doc-anchor\" href=\"#note-1\">§</a>Note</h5>\n<p>This method is deprecated in favor of the identically-named\ninherent methods on <code>u8</code>, <code>char</code>, <code>[u8]</code> and <code>str</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.to_ascii_lowercase\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/ascii.rs.html#98\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.to_ascii_lowercase\" class=\"fn\">to_ascii_lowercase</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"trait.AsciiExt.html#associatedtype.Owned\" title=\"type std::ascii::AsciiExt::Owned\">Owned</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.26.0: use inherent methods instead</span></div></span></summary><div class=\"docblock\"><p>Makes a copy of the value in its ASCII lower case equivalent.</p>\n<p>ASCII letters ‘A’ to ‘Z’ are mapped to ‘a’ to ‘z’,\nbut non-ASCII letters are unchanged.</p>\n<p>To lowercase the value in-place, use <a href=\"trait.AsciiExt.html#tymethod.make_ascii_lowercase\" title=\"method std::ascii::AsciiExt::make_ascii_lowercase\"><code>make_ascii_lowercase</code></a>.</p>\n<p>To lowercase ASCII characters in addition to non-ASCII characters, use\n<a href=\"../primitive.str.html#method.to_lowercase\" title=\"method str::to_lowercase\"><code>str::to_lowercase</code></a>.</p>\n<h5 id=\"note-2\"><a class=\"doc-anchor\" href=\"#note-2\">§</a>Note</h5>\n<p>This method is deprecated in favor of the identically-named\ninherent methods on <code>u8</code>, <code>char</code>, <code>[u8]</code> and <code>str</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.eq_ignore_ascii_case\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/ascii.rs.html#110\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.eq_ignore_ascii_case\" class=\"fn\">eq_ignore_ascii_case</a>(&amp;self, other: <a class=\"primitive\" href=\"../primitive.reference.html\">&amp;Self</a>) -&gt; <a class=\"primitive\" href=\"../primitive.bool.html\">bool</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.26.0: use inherent methods instead</span></div></span></summary><div class=\"docblock\"><p>Checks that two values are an ASCII case-insensitive match.</p>\n<p>Same as <code>to_ascii_lowercase(a) == to_ascii_lowercase(b)</code>,\nbut without allocating and copying temporaries.</p>\n<h5 id=\"note-3\"><a class=\"doc-anchor\" href=\"#note-3\">§</a>Note</h5>\n<p>This method is deprecated in favor of the identically-named\ninherent methods on <code>u8</code>, <code>char</code>, <code>[u8]</code> and <code>str</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.make_ascii_uppercase\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> · <a class=\"src\" href=\"../../src/std/ascii.rs.html#127\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.make_ascii_uppercase\" class=\"fn\">make_ascii_uppercase</a>(&amp;mut self)</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.26.0: use inherent methods instead</span></div></span></summary><div class=\"docblock\"><p>Converts this type to its ASCII upper case equivalent in-place.</p>\n<p>ASCII letters ‘a’ to ‘z’ are mapped to ‘A’ to ‘Z’,\nbut non-ASCII letters are unchanged.</p>\n<p>To return a new uppercased value without modifying the existing one, use\n<a href=\"trait.AsciiExt.html#tymethod.to_ascii_uppercase\" title=\"method std::ascii::AsciiExt::to_ascii_uppercase\"><code>to_ascii_uppercase</code></a>.</p>\n<h5 id=\"note-4\"><a class=\"doc-anchor\" href=\"#note-4\">§</a>Note</h5>\n<p>This method is deprecated in favor of the identically-named\ninherent methods on <code>u8</code>, <code>char</code>, <code>[u8]</code> and <code>str</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open=\"\"><summary><section id=\"tymethod.make_ascii_lowercase\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.9.0\">1.9.0</span> · <a class=\"src\" href=\"../../src/std/ascii.rs.html#144\">source</a></span><h4 class=\"code-header\">fn <a href=\"#tymethod.make_ascii_lowercase\" class=\"fn\">make_ascii_lowercase</a>(&amp;mut self)</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 1.26.0: use inherent methods instead</span></div></span></summary><div class=\"docblock\"><p>Converts this type to its ASCII lower case equivalent in-place.</p>\n<p>ASCII letters ‘A’ to ‘Z’ are mapped to ‘a’ to ‘z’,\nbut non-ASCII letters are unchanged.</p>\n<p>To return a new lowercased value without modifying the existing one, use\n<a href=\"trait.AsciiExt.html#tymethod.to_ascii_lowercase\" title=\"method std::ascii::AsciiExt::to_ascii_lowercase\"><code>to_ascii_lowercase</code></a>.</p>\n<h5 id=\"note-5\"><a class=\"doc-anchor\" href=\"#note-5\">§</a>Note</h5>\n<p>This method is deprecated in favor of the identically-named\ninherent methods on <code>u8</code>, <code>char</code>, <code>[u8]</code> and <code>str</code>.</p>\n</div></details></div><h2 id=\"object-safety\" class=\"section-header\">Object Safety<a href=\"#object-safety\" class=\"anchor\">§</a></h2><div class=\"object-safety-info\">This trait is <b>not</b> <a href=\"https://doc.rust-lang.org/1.80.0/reference/items/traits.html#object-safety\">object safe</a>.</div><h2 id=\"implementors\" class=\"section-header\">Implementors<a href=\"#implementors\" class=\"anchor\">§</a></h2><div id=\"implementors-list\"><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-AsciiExt-for-char\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/ascii.rs.html#191-195\">source</a></span><a href=\"#impl-AsciiExt-for-char\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.AsciiExt.html\" title=\"trait std::ascii::AsciiExt\">AsciiExt</a> for <a class=\"primitive\" href=\"../primitive.char.html\">char</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Owned-1\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned-1\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = <a class=\"primitive\" href=\"../primitive.char.html\">char</a></h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-AsciiExt-for-str\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/ascii.rs.html#207-211\">source</a></span><a href=\"#impl-AsciiExt-for-str\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.AsciiExt.html\" title=\"trait std::ascii::AsciiExt\">AsciiExt</a> for <a class=\"primitive\" href=\"../primitive.str.html\">str</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Owned-2\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned-2\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = <a class=\"struct\" href=\"../string/struct.String.html\" title=\"struct std::string::String\">String</a></h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-AsciiExt-for-u8\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/ascii.rs.html#183-187\">source</a></span><a href=\"#impl-AsciiExt-for-u8\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.AsciiExt.html\" title=\"trait std::ascii::AsciiExt\">AsciiExt</a> for <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Owned-3\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned-3\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = <a class=\"primitive\" href=\"../primitive.u8.html\">u8</a></h4></section></div></details><details class=\"toggle implementors-toggle\"><summary><section id=\"impl-AsciiExt-for-%5Bu8%5D\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"../../src/std/ascii.rs.html#199-203\">source</a></span><a href=\"#impl-AsciiExt-for-%5Bu8%5D\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"trait.AsciiExt.html\" title=\"trait std::ascii::AsciiExt\">AsciiExt</a> for [<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>]</h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Owned-4\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Owned-4\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"#associatedtype.Owned\" class=\"associatedtype\">Owned</a> = <a class=\"struct\" href=\"../vec/struct.Vec.html\" title=\"struct std::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"../primitive.u8.html\">u8</a>&gt;</h4></section></div></details></div><script src=\"../../trait.impl/std/ascii/trait.AsciiExt.js\" async=\"\"></script></section></div></main></body></html>",
	"crawlDate": "2024-07-28T05:12:40.919Z"
}